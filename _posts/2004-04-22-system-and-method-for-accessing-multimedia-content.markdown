---
title: System and method for accessing multimedia content
abstract: Systems and methods described herein provide access to multimedia content of varying types from a variety of sources using a uniform resource locator (URL).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07664882&OS=07664882&RS=07664882
owner: Microsoft Corporation
number: 07664882
owner_city: Redmond
owner_country: US
publication_date: 20040422
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit to U.S. Provisional application Ser. No. 60\/546,460, filed Feb. 21, 2004. Additionally, this application is related to the following U.S. patent applications, each of which is hereby incorporated herein by reference, and each of which is assigned to the assignee of the present application: U.S. patent application Ser. No. 10\/730,735, filed Dec. 8, 2003, to Mohammed et al., and titled \u201cMedia Processing Methods, Systems and Application Program Interfaces\u201d; U.S. patent application Ser. No. 10\/185,161, to Kirt Debique, et al, filed Jun. 28, 2002, and titled \u201cApplication Programming Interface for Utilizing Multimedia Data\u201d; U.S. patent application Ser. No. 10\/735,522, to Weiss et al., filed Dec. 11, 2003, titled \u201cDestination Application Program Interfaces\u201d; U.S. patent application Ser. No. 10\/782,734, to Rahman, et al., filed Feb. 19, 2004, titled \u201cMedia Timeline\u201d: and U.S. Provisional application Ser. No. 60\/546,671, to Lipe, et. al, and titled \u201cFunction Discovery\u201d.","Users of computing devices, such as desktop PCs, set-top boxes, personal digital assistants (PDAs), and so on, have access to an ever increasing amount of multimedia content (e.g., audio, video, and other assorted data). Typically, this multimedia content is accessed, manipulated and\/or presented on a computing device using a multimedia application running on the device.","Multimedia content may be accessed from a variety of different sources, in a variety of different formats, using a variety of different communications protocols. Programming each of the different applications to individually determine basic information regarding the multimedia content requires duplicated efforts and undesirably wastes time, costs, and resources that are required to individually program the multimedia applications. In addition, most current applications do not provide an extensibility mechanism to allow for new types of sources or formats. Accordingly, there is currently a need in the art for improved methods for enabling multimedia applications to access and process multimedia data without the applications having to individually interpret and determine the characteristics of the multimedia content directly.","One underlying problem with using typical multimedia applications is that in order to access multimedia content, however, is that there are many different types of formats, standards, and protocols that are used to encode and transmit digital data. Examples of different formatting standards include, for example, MPEG (Moving Picture Experts Group), ASF (Advanced Streaming Format), AVI (Audio Video Interleave), Active Movie, Cinepaq, QuickTime, Indeo, ATVEF (Advanced Television Enhancement Forum) and ATSC (Advanced Television Systems Committee).","Examples of different protocols and languages include RTSP (Real-Time Streaming Protocol), RTP (Real-Time Protocol), RTCP (Real-Time Control Protocol), UDP (User Datagram Protocol), HTTP (Hypertext Transport Protocol), MMS (Microsoft Media Server), TCP (Transmission Control Protocol), XML (extensible Markup Language), and SMIL (Synchronized Multimedia Integration Language).","Accordingly, the large variety of different multimedia formats, standards, and protocols creates a burden on programmers for creating multimedia applications that are capable of accommodating the various standards, protocols, languages and requirements that can be used to present multimedia content. Individually programming the multimedia applications in this manner, however, is inefficient, particularly when a single computing system is configured with multiple applications that must each be programmed to interpret certain basic information of the multimedia content. For instance, it may be necessary for the applications to each determine what protocol to use to read the data, and once the data are being read, the format of the data.","Programming each of the different applications to individually determine how the multimedia content should be read and what format it is requires duplicated efforts and undesirably wastes time, costs, and resources that are required to individually program the multimedia applications. Accordingly, there is currently a need in the art for improved methods for enabling multimedia applications to access and process multimedia data without the applications having to individually interpret and determine the format of and the best method for reading the multimedia content directly.","Described herein are various systems and methods that provide access to media content of varying types from a variety of sources using a uniform resource locator (URL). In accordance with one implementation, a first object operable to access data from a location specified by a URL is selected based on a scheme of the URL. A second object operable to read media content of a given type from the location specified by the URL is then selected based on data accessed using the first object and\/or file type information in the URL.","Described herein are various implementations of systems and methods related to accessing multimedia content (referred to herein as \u201cmedia content\u201d). As will be appreciated by those skilled in the art, media content typically include some combination of audio, video, still or animated images, information related to multiple display areas on a display screen, and other associated operational data. Media content may be produced, streamed, and\/or stored local (e.g., stored locally on or in some form of computer-readable media), or produced, stored, or streamed from a remote location.","More particularly, described herein are various implementations of an object selection module. In general, an object selection module is used by a media system and\/or media application to select an appropriate mechanism (e.g., source object or byte stream object) by which desired media content may be accessed. As described fully below, the object selection module makes these selection based on information contained is a Uniform Resource Locator (URL) that specifies a location of the desired media content and\/or file type information in the URL.","Before discussing the object selection module in detail, an example of a computing system  in which an object selection module may be implemented will be described with respect to . In its most basic configuration, the computing system  includes a processing unit  and main memory , including volatile and\/or non-volatile memory. Additionally, the computing system  may include or have access to various mass storage devices or systems , including various removable and\/or non-removable mass storage devices. Examples of mass storage devices might be, without limitation, various magnetic, optical, and\/or non-volatile semiconductor memory, etc. In the case where the mass storage device comprises a number of storage devices, those devices may be distributed, such as across a computer network.","The computing system  may have input devices , such as a keyboard, a pointing device (mouse), various optical scanners or readers, microphones, video cameras, or various other computer input devices. The computing system  may also have output devices , such as display devices, speakers, printers, or various other computer output devices. Other aspects of the computing system  may include network or communications connections  to other devices, computers, networks, servers, etc., using either wired or wireless computer-readable media. For example, the computing system  is shown in  as being connected to a remote computing system .","It should be appreciated that the remote computing system  may encompass various types computing systems or computing processes. For example, in one implementation, the remote computing system  is similar in basic structure and features to the computing system . Furthermore, the computing system  and the remote computing system  may be a part of, or in communication with, computer networks, such as Wide Area Networks (WAN), Local Area Network (LANs), the Internet, or any of various other computer networks.","The computing system  illustrated in  is configured as a personal computer (PC). However, the computing system  may also assume a variety of other configurations, such as, without limitation, a mobile station, an entertainment appliance, a set-top box communicatively coupled to a display device, a wireless phone, a video game console, a personal digital assistant (PDA), and so forth. Thus, the computing system  may range from a full resource device with substantial memory and processor resources (e.g., PCs, television recorders equipped with hard disk, etc.) to a low-resource device with limited memory and\/or processing resources (e.g., a traditional set-top box). A more comprehensively described example of a computing system  in which the system and methods described herein may be implemented is shown in .",{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 2","FIG. 2"],"b":["200","200"]},"Included in the media processing environment  is a media processing module , a media application , a media content store , a media content destination , and a lookup module , a number of byte stream handlers , and a number of scheme handlers . The details of each of these elements of the media processing environment are described below. However, in general terms, the media processing module  obtains and processes media content  from the media content store  via a source object, processes the media content  in some manner, and outputs the processed media content to the media content destination  via media sinks , in accordance with directions or requests from the media application .","Turning now more particularly to the form and function of the elements of the media processing environment, the media application  may be any type of multimedia software application that does playback, archiving\/encoding, editing, or any other presentation or manipulation of multimedia content. In operation, the application  may indicate the location of media content to be accessed, configure the media processing module  to processes the media content in a particular manner, and instruct the media processing module as to the media content destination  that specifies where the processed media content is to be sent and\/or rendered.","The media content store  may be any of a number of systems or mechanisms from which media content  may be accessed by the media processing module . For example, and without limitation, the media store  may be some form of computer-readable medium on a computer system, either local or remote to the computer system including the media application. Media Store  may also refer to content that is live, i.e. in the process of being created during the presentation. The media store  might also be an application, system, or device, either local or remote, from which media content is streamed. While the precise form of the media content store  may vary, in accordance with the various systems and methods described herein, there is some mechanism by which media content may be located and accessed using a URL; this mechanism may be specific to the media content store.","A media content destination  is an object or API that defines where media content is to be presented (e.g. a window, disk file, and the like) and what happens to the media content. In accordance with various implementations, the application  itself may create the media content destination . Typically, the media content destination  will be associated with and receive processed media content from one or more media sinks (described below) in the media processing module . A more detailed description of media content destinations may be had with reference to U.S. patent application titled \u201cDestination Application Program Interfaces,\u201d having Ser. No. 10\/735,522, filed Dec. 11, 2003, incorporated herein by reference.","The lookup module  is an application or process that is used by the object selection module , such as the media processing module , to compile a list or lists  of byte stream handlers  and\/or a list or lists  of scheme handlers . (Byte stream handlers  and scheme handlers  are described in detail below.) As used herein, the term \u201clist\u201d describes any type of data structure or other mechanism by which scheme handlers and byte stream handlers may be associated or grouped, either directly or by reference. Generally, the lookup module  uses information contained in a URL and\/or information read from the location pointed to by a URL in compiling lists.","The information from a URL that is used by the lookup module  may include information concerning or characterizing the media content pointed to by the URL. Likewise, information read from the location pointed to by the URL may include information concerning or characterizing the media content pointed to by the URL. This information is then used by the lookup module  to create the lists of byte stream handlers  and\/or scheme handlers .","The lookup module  may use various logic or mechanisms to create the list or lists of byte stream handlers  and\/or scheme handlers . In some implementations, the lookup module  uses the scheme of a URL, in conjunction with a lookup table, which associates schemes with scheme handlers, to select scheme handlers that produce objects that may be suitable for accessing the media content pointed to by the URL. Likewise, the lookup module  may use other select information included in the URL and\/or read from the location pointed to by the URL, in conjunction with a lookup table, which associates the information with byte stream handlers, to select byte stream handlers that produce objects that may be suitable for accessing the media content pointed to by the URL.","In other implementations, the lookup module  may employ other mechanisms to create the lists of stream handlers  and\/or scheme handlers . For example, in accordance with one implementation, the lookup module  uses a \u201cfunction discovery\u201d process or mechanism to create the lists. A complete description of the operations of the function discovery process are set forth in U.S. provisional application Ser. No. 60\/546,671, filed Feb. 20, 2004, to Lipe et. al, and titled \u201cFunction Discovery\u201d, which is incorporated herein by reference. Various functions of the lookup module  are described in more detail below with respect to . As used within the scope of this invention, function discovery serves as a store from which Scheme Handlers and Byte Stream Handlers can be enumerated and instantiated and from which various properties associated with those handlers can be retrieved.","In accordance with one implementation, scheme handlers and byte stream handlers comprise Component Object Model (COM) objects. As will be appreciated by those skilled in the art, a COM is a component software architecture from Microsoft Corporation which defines a structure for building program routines or objects that can be called up and executed in a Microsoft Windows\u00ae operating system environment. In this implementation, Function discovery instantiates the scheme handlers and byte stream handlers via COM's CoCreateInstance function.","Additionally, the lookup module  may include various mechanisms by which an application or other process may register new and\/or proprietary scheme handlers and\/or byte stream handlers with the lookup module, such that these registered scheme handlers and byte stream handlers may be selected based on information contained in the URL and\/or information accessed from the media content. In this regard, in the case where the lookup module  employs the function discovery processes discussed above, the function discovery provides just such a registration mechanism in the form of APIs. The function discovery APIs provide a standardized mechanism by which third parties can register their own scheme handlers and byte stream handlers, along with any associated properties, so that they get included in the enumeration and will therefore be considered by object selection module .","In general, the media processing module  acts as a central media content control and\/or processing point for the application. In at least one implementation, the media processing module  exposes various components included therein to the application  via application programming interfaces (APIs). The media processing module  may also expose services via APIs by which the media application  may configure these components. In this way, the media processing system  abstracts away from the application  the specific details of the existence of, and interactions between, the various components being used by the media processing module  in the processing and\/or delivery of media content.","In accordance with at least one implementation, the media processing module  comprises a media engine, which is a functional component within an operating system of a computing system. More particularly, in accordance with at least one implementation, the media processing module  comprises a media engine in a media foundation platform, as described in detail in U.S. patent application titled \u201cMedia Processing Methods, Systems and Application Program Interfaces,\u201d having Ser. No. 10\/730,735, filed Dec. 8, 2003, which is incorporated herein by reference.","As shown, the media processing module  includes a number of components including an object selection module  and a component pipeline , such as a component object-based pipeline. As noted above, the object selection module  operates, in conjunction with the lookup module , to select appropriate source objects for accessing media content. As shown in , the object selection module  maintains one or more byte stream handler lists  and one or more scheme handler lists . The operations of the object selection module  are described in detail below.","Generally, the pipeline  includes various media content processing objects, each of which perform some form of media content processing or handling. The pipeline may include any number and\/or type of media content processing objects, connected in various ways. However, with respect to the implementations described herein, the pipeline includes at least one source object for accessing media content. Details regarding the form and function of source objects, and how they are selected for inclusion in the pipeline, are set forth below.","Included in the example pipeline  shown in  are one or more source objects , one or more transform objects , one or more of bit pumps , and one or more media sinks . Each component of the pipeline  provides some sort of processing or handling of media data. Generally, the source object  accesses media content from a media content store, and reads and parses the media content into one or more streams of data. For example, in the particular implementation of a pipeline shown in , the source object parses the media content data into two streams of data, a video stream and an audio stream.","Each stream of data may be handled or processed in some form by one or more transforms. As will be appreciated by those skilled in the art, there are various types of processing that may be carried out by such transforms with respect media content. As such, many different types of transforms may be included in a transforms , and any number of (including zero) transforms may be applied to the stream. For example, and without limitation, individual transforms may perform such functions as encoding, decoding, hue adjusting, contrast adjusting, equalization, frame rate adjusting, transition effects (wipes, fades, crossovers), surround sound spatialization, and so on.","Once the data in a stream has been processed by the transforms , the processed streams are passed via bit pumps  to corresponding media sinks . In general, media sinks are responsible for sending the (possibly transformed) multimedia data to wherever or whatever is specified by media application  in the media content destination . For example, in a playback application, the destination may indicate a window, and the media sinks would be audio and video renderers that send the multimedia data to devices; in an encoding application, the destination may indicate a file to which the encoded bits are to be archived, and the media sinks would be responsible for arranging these bits in the appropriate format and writing to the file, etc.","A more detailed description of the form and function of pipelines and various pipeline components included in pipelines may be had with reference to U.S. patent application titled \u201cMedia Processing Methods, Systems and Application Program Interfaces,\u201d having Ser. No. 10\/730,735, filed Dec. 8, 2003, which is incorporated herein by reference.","As previously noted, the media processing module  obtains and processes media content  using the source object . More particularly, in a typical operational scenario, the application  requests the media processing module  to provide access to and\/or manipulation of particular media content from a particular media content store , to transform the data, and to send the data to media sinks , as specified by destination .","Turning now more particularly to the manner in which source objects are selected by the media processing module , in making a request for particular media content, the application  provides to the media processing module  the location of the media content in the form of URL. Once given the location (URL) of the media content , the media processing module  then invokes the object selection module  to select or create, using the lookup module , an appropriate object (media access object ) for accessing (and potentially interpreting) the desired media content from the location specified by the URL.","The preceding paragraph describes just one of the ways in which the object selection module may be invoked. To illustrate that this can be generalized, consider the following example. One example of a media source is the timeline source. Timeline sources are described in detail in U.S. patent application Ser. No. 10\/782,734, titled \u201cMedia Timeline,\u201d incorporated herein by reference. Timeline sources are used to play metafiles like ASX, M3U, and other type of metafiles, which contain a list of URLs specifying locations including media content that is to be played in a certain order. For each URL in the metafile, the timeline source uses the same object selection module  as described in the previous paragraph to create an underlying source. The application  and the media processing module  are unaware, in a programmatic sense, of this process. There may be other modules that implement the same interface as the object selection module . The application  or other objects may use these special implementations for certain dedicated scenarios.","Before described the manner or manners in which the object selection module  selects or invokes an appropriate object, it will be helpful to first to describe in more detail the various handlers and an objects that may be selected or used by the object selection module , as well as discussing the form and format of URLS.","In general, a byte stream object is a software module or API that includes appropriate logic and\/or data for accessing media content from a given location and in accordance with a particular access method, such as a particular communications protocol. More particularly, a byte stream object is pointed to a particular location\/medium from which data are available and produces as output a stream of bits that can be read by a component using the byte stream. A byte stream object is a useful abstraction that provides a component using them with a way of reading data from a medium, possibly over a certain protocol, without that component understanding, in a programmatic sense, the particulars of how to obtain data from that medium.","A source object may be any of a variety of objects that include appropriate logic and\/or data to access the specific type or format of data stored at the location pointed to by the URL. More particularly, in accordance with various implementations described herein, a source object may be one of two types, a simple source object that accesses one instance of media content or a timeline source object, described above, that accesses multiple instances of media content, which are to be invoked in a given temporal order. In at least one implementation, the timeline source creates a source object for each instance of content and uses those created source objects to access the media data.","In general, a source object is a software module or API that is operable to access media content of a particular format, from a given location, and in accordance with a particular access method, such as a particular communications protocol. More particularly, a source object reads media content and produces output streams. In so doing, a source object performs format-specific parsing to produce streams of data that are then sent through the other components in the pipeline , and on to the media content destination . A more detailed explanation of source objects may be had with reference to U.S. patent application Ser. No. 10\/185,161, filed Jun. 28, 2002, by Kirt Debique, et al., titled \u201cApplication Programming Interface for Utilizing Multimedia Data,\u201d which is incorporated herein by reference.","Generally, a scheme handler  is a software module that takes as input a URL and is able to produce a byte stream object that will allow bits to be read from that URL. Components using the byte stream object output by a scheme handler need not understand, in a programmatic sense, how to access the data from wherever the URL is pointing or to communicate via the protocol that may be defined by that URL. Alternatively, a scheme handler may be able to glean enough information from the URL to produce a source object. Typically, a particular scheme handler will be tied to a specific medium and\/or protocol, and the lookup module  will be able to provide a list of available scheme handlers that will among them be able to cover a wide variety of schemes. Furthermore, a scheme handler can potentially also create a timeline object that can be used by a timeline media source.","In general, a byte stream handler  is a software module that takes as its input a byte stream and produces as an output a source object that is capable of understanding the bits in a byte stream. Typically, a particular byte stream handler will be tied to a specific format and will be able to identify that the bits in the byte stream are for its format; if so, it will create the appropriate source object, in the form of media source object . The lookup module  will be able to provide a list of available byte stream handlers that will, among themselves, be able to understand a wide variety of formats. Furthermore, a byte stream handler can potentially also create a timeline object that can be used by a timeline media source.","Typically, a byte stream handler will attempt to validate that the given byte stream is in the appropriate format for parsing by the source object that it will create. The process by which this is done is format specific, but normally involves reading a certain amount of the byte stream and ensuring its format specific validity.","As will be appreciated by those skilled in the art, a URL is a standardized address for a resource. URLs are used to \u201clocate\u201d resources, by providing an abstract identification of the resource location. Having located a resource, a system may perform a variety of operations on the resource, as might be characterized by such words as \u201caccess,\u201d \u201cupdate,\u201d \u201creplace,\u201d etc. In general, only the \u201caccess\u201d method needs to be specified for any URL scheme.","In general, URLs are written as follows: <scheme>:<scheme-specific-part>. As shown, a URL contains the name of the scheme being used (<scheme>) followed by a colon and then a string (the <scheme-specific-part>) whose interpretation depends on the scheme. Generally, a scheme indicates the resource type and\/or what mechanism to use to obtain that resource. There are number of established schemes that are specified by the Internet Assigned Numbers Authority (IANA), 4676 Admiralty Way, Suite 330 Marina del Rey, Calif. 90292. Some examples of schemes that are specified by the IANA are: \u201chttp\u201d, \u201cfile\u201d, \u201cgopher\u201d, \u201cftp\u201d, \u201cnews\u201d, \u201ctelnet\u201d, \u201cwais\u201d, and so on. Additionally, to the schemes specified by the IANA, individuals or organizations may create and use their own schemes. Of course, for these schemes to be used the application or process using the schemes must be aware of the form of the schemes and the access methods that are associated therewith.","As with the scheme, the scheme dependent information has a specified form. The form of the scheme dependent information may vary, but typically the scheme dependent information includes an address for the machine making the resource available and the \u201cpath\u201d to that resource. Typically, the scheme is separated from the machine address by two slashes (\/\/), and the machine address is separated from the path with one slash (\/). The path may further include information indicating various directories and sub-directories where the resource is located, the name of the resource, and, in most cases, the type of the resource, as indicated by an extension to the resource name (e.g., resource.extension).","Turning now to , shown therein is an operational flow  including various operations that may be performed by the object selection module  in selecting or instantiating an appropriate source object to access media content for a given URL. In accordance with various implementations, when the application requests that specific media content be played, the application will pass the media processing module, among other things, the URL of the media content. The media processing module  will invoke the media object selection module  and pass the URL and the object type to the object selection module ; in this case, the object type desired is a Media Source. In accordance with various implementations, the object selection module  will then perform the operations illustrated in the operational flow , as will now be described.","In accordance with some implementations, the operations in the operational flow  will be performed entirely by the object selection module . In other implementations, the operations in the operational flow  will be performed by the object selection module in conjunction with the lookup module . For example, in accordance with one implementation, the lookup module will perform the identify operations  and\/or  of the operations flow . In yet other implementations, the operations of the operational flow  may be performed by other processes or modules either within or in conjunction with the media processing module, or by some other process or module altogether distinct from the media processing module , the object selection module , and\/or the lookup module .","As shown, at the beginning of the operational flow , a URL scheme determination  determines the scheme of the URL which points to the desired media content. Following the URL scheme determination operation , an identify scheme handlers operation  then uses the determined scheme to identify all available scheme handlers that are associated with the scheme of the URL. That is, all of the available scheme handlers that have been identified in some manner as being operable to read information in accordance with the identified scheme.","The manner in which the identify scheme handler operation  identifies the appropriate scheme handlers may be accomplished in a number of ways. For example, in accordance with one implementation, the identify scheme handler operation  examines a scheme handler data structure including a number of scheme types and a number of scheme handlers. In accordance with this implementation, the scheme handler data structure associates each unique scheme with all of the available scheme handlers for that scheme. The scheme handler operation then compiles a list, or the like, of the scheme handlers associated with the scheme identified in the determine URL scheme operation .","In accordance with another implementation, the identify scheme handler operation  uses a \u201cfunction discovery\u201d process to identify the appropriate scheme handlers. As previously described, the operations of the function discovery process are set forth in U.S. Provisional application Ser. No. 60\/546,671, filed Feb. 20, 2004, to Lipe. et al., and titled \u201cFunction Discovery\u201d.","In accordance with various implementations, the schemes handlers identified in the identify scheme handler operation  may be compiled in an ordered data structure, such as an ordered list. This list may contain references to one or more scheme handlers. The list may also include no scheme handlers.","Next, a scheme handler determination operation  determines if the identify scheme handler operation  was able to find at least one appropriate scheme handler. Again, this may be done in a number of ways. For example, in implementations where the identify scheme handler operation  created a data structure, the scheme handler determination operation  may simply determine whether there are any scheme handlers in the data structure.","If the scheme handler determination operation  determines that there are no scheme handlers to try, an error value is returned to the caller and the operational flow  ends. If, however, the scheme handler determination operation  determines that there is at least one scheme handler to try, a try scheme handler operation  then tries one of the available scheme handlers. In the case where the scheme handlers are listed in an ordered data structure, the next untried scheme handler will be tried by the try scheme handler operation . If no untried scheme handlers are available to be tried in list, then an error value is returned to the caller","In accordance with various implementations, trying a scheme handler involves invoking the scheme handler. As a result of invoking the scheme handler, one of three things may happen: a byte stream object may be produced, a source object may be produced, a timeline object may be produced, or no object will be produced. The scheme handler is invoked by using the scheme handler API\/interface.","Next, a success determination operation  determines whether the scheme handler was successful. That is, it is determined if the scheme handler tried in operation  produced either a byte stream object, a source object or a timeline object. If the scheme handler tried in operation  did not produce either a byte stream object or a source object, the operational flow returns to the scheme handler determination operation . However, if the scheme handler tried in operation  did produce either a byte stream object, a source object, or a timeline object, a determine desired type operation  determines whether the type of object produced was the type of object requested by the application.","If the determine desired type operation  determines that the type of object produced was the type of object requested by the application, the object is returned. If, however, the determine desired type operation  determines that the type of object produced was not the type of object requested by the application (typically, in this case, it is a byte stream that was produced), a byte stream handler determination operation  then determines if a byte stream handler should be used. If the produced object is a byte stream and the requested object is a media source or timeline object, then a byte stream handler can be used to create the requested object","If the byte stream handler determination operation  determines that a byte stream handler is not to be used the operational flow  returns to the scheme handler determination operation . However, if the byte stream handler determination operation  determines that a byte stream handler may be used, the operational flow proceeds to an identify all byte stream handler operation .","The identify byte stream handler operation  uses various information derived from the URL, and in some cases other information related to or present in the byte stream, to identify byte stream handlers that are associated with or identified by the information derived from the URL. For example, and without limitation, in accordance with one implementation, the identify byte stream handler operation  uses the extension of the URL and\/or the Multi-Purpose Internet Mail Extensions (MIME) information in the byte stream to identify appropriate byte stream handlers.","The manner in which the identify byte stream handler operation  identifies these byte stream handlers may be accomplished in a number of ways. For example, in accordance with one implementation, the information derived from the URL is the extension portion of the URL, if available. The identify byte stream handler operation  then examines a byte stream handler data structure including a number of extensions and\/or MIME types and a number of byte stream handlers. In accordance with this implementation, the byte stream handler data structure associates each unique extension and\/or MIME type with all of the available byte stream handlers associated with that extension and\/or MIME type. The identify byte stream handler operation  then compiles a list or lists, or the like, of the stream handlers associated with the extension identified in determine URL.","In accordance with another implementation, the identify byte stream handler operation  uses a \u201cfunction discovery\u201d process to identify the appropriate byte stream handlers. As previously described, the operations of the function discovery process are set forth in U.S. provisional application Ser. No. 60\/546,671, filed Feb. 20, 2004, to Lipe et al., and titled \u201cFunction Discovery.","In accordance with various implementations, the byte stream handlers identified as being associated with the extension identified in the URL and\/or the MIME type of the byte stream may be compiled in an ordered data structure, such as an ordered list. This list may contain references to one or more byte stream handlers. The list may also include no byte stream handlers.","The order of the byte stream handlers in the data structure in this embodiment may be selected in a number of ways. For example, in accordance with one implementation, each of the byte stream handlers will have associated therewith a predetermined cost value, which is used in the identify byte stream handler operation  in ordering the byte stream handlers.","The cost value may be determined in various ways and may be indicative of various properties of the byte stream handler to which it is associated. For example, in accordance with one implementation, the cost value is related to the amount of data that must be read from the byte stream before the following byte stream handler determination operation  can determine if the byte stream handler was successful.","In accordance with one implementation, the byte stream handlers that area associated with the extension identified in the URL and\/or the MIME type of the byte stream are ordered in a single list based on the cost of the byte stream handlers. For example, in one implementation the byte stream handlers that area associated with the extension identified in the URL and\/or the MIME type of the byte stream are ordered such that the following try byte stream handler operation  selects the untried byte stream handler having the lowest cost.","In accordance with another implementation, the byte stream handlers identified as being associated with the extension identified in the URL and\/or the MIME type of the byte stream may be compiled in an ordered data structure according to cost, such as an first ordered list, while all other byte stream handlers are included in a second list. In this implementation, the following try byte stream handler operation  would first try the untried byte stream handler having the lowest cost from the first list. In the case where all byte stream handlers in the first list were already tried, or where there never were byte stream handlers in the first list, the try byte stream handler operation  would try an untried byte stream handler in the second list. In accordance with one implementation, the byte stream handlers in the second list may also be ordered according to their respective costs.","In accordance with one implementation, the caller of object selection module  may have specified a source resolution option indicating whether or not this second list is to be created and used. For example, electing for this option would ensure successful resolution if a WMV file is misnamed and given the incorrect extension \u201c.mp3\u201d. In this case, the MP3 byte stream handler will not succeed on this content, since it is not in the MP3 format, but if the source resolver is allowed to try other byte stream handlers, the WMV byte stream handler will be found on the second list and will succeed on this content. However, trying the byte stream handlers on the second list is more costly than trying only those on the first list, and therefore some callers may choose not to use the second list.","Following the identify byte stream handler operation , a byte stream handler determination operation  determines if the identify byte stream handler operation  was able to find at least one appropriate byte stream handler. Again, this may be done in a number of ways. For example, in implementations where the identify byte stream handler operation  created a data structure, the byte stream handler determination operation  may simply determine whether there are any byte stream handlers in the data structure.","If the byte stream handler determination operation  determines that there are no byte stream handlers to try, an error value is returned to the user and the operational flow  ends. If, however, the byte stream handler determination operation  determines that there is at least one byte stream handler to try, a try byte stream handler operation  then tries one of the available byte stream handlers. In the case where the byte stream handlers are listed in an ordered data structure, the next untried byte stream handler will be tried by the try byte stream handler operation .","In accordance with various implementations, trying a byte stream handler involves invoking the byte stream handler on the byte stream via the byte stream handler API\/Interface.","Next, a success determination operation  determines whether the byte stream handler was successful. That is, it is determined if the byte stream handler tried in operation  produced the object desired by the caller. If the byte stream handler tried in operation  produced an object, a determine desired type operation  determines whether the type of object produced was the type of object requested by the application.","If the determine desired type operation  determines that the type of object produced was the type of object requested by the application, the object is returned. If, however, the determine desired type operation  determines that the type of object produced was not the type of object requested by the application, the operational flow  proceeds back to the byte stream handler determination operation .","In accordance with one implementation, the caller of the object selection module  may already have a byte stream object (instead of an URL). In this case, it requests that object selection module  create the desired object from a byte stream. In such a case, the operational flow  would simply begin at the identify byte stream handler operation .","In accordance with one implementation, if this process fails while attempting to find an appropriate byte stream handler, the caller of object selection module  can request that the byte stream object that was created during the process be kept alive (cached). The caller may request this option if it wishes to subsequently try to resolve the failed URL with the \u201ccontent does not have to match extension\u201d option; this allows the second-chance resolution to take place without a second attempt to read from the URL, which may be costly.","Generally, the media processing module , the object selection module , the byte stream handlers , the scheme handlers , the components of the pipeline , the destination , and the lookup module  may be composed of or include computer-executable instructions, various routines, programs, objects, components, data structures, etc., that perform particular tasks or operations and\/or implement particular abstract data types, ach or all of which may be embodied in or on a computer readable medium. For example, in various implementations the object selection module  performs the operations illustrated in  and\/or .","A computer-readable medium may include, without limitation, both volatile and nonvolatile memory, mass storage devices, and removable and non-removable media.","Any or all of the media processing module , the destination , the object selection module , the byte stream handlers , the scheme handlers , the components of the pipeline , and the lookup module  may be executed or implemented in a single computing device. Alternatively, any or all of the media processing module , the destination , the object selection module , the byte stream handlers , the scheme handlers , the components of the pipeline , and the lookup module  may be executed or implemented in a distributed computing environment, where various operations are performed by remote processing devices or systems that are linked through a communications network. For example, in accordance with one embodiment, the media processing module  is executed or implemented in one computing system, while the media content store  is implemented or present in another computing system or device.","It should be understood that while the media processing module , the destination , the object selection module , the byte stream handlers , the scheme handlers , the components of the pipeline , and the lookup module  are described herein as comprising computer executable instructions embodied in computer-readable media, media processing module , the destination , the object selection module , the byte stream handlers , the scheme handlers , the components of the pipeline , and the lookup module , and any or all of the functions or operations performed thereby, may likewise be embodied all or in part as interconnected machine logic circuits or circuit modules within a computing device. Stated another way, it is contemplated that the media processing module , the destination , the object selection module , the byte stream handlers , the scheme handlers , the components of the pipeline , and the lookup module  and their operations and functions, such as the operations shown and described with respect to 3 and 4, may be implemented as hardware, software, firmware, or various combinations of hardware, software, and firmware. The implementation is a matter of choice.","The previous discussion presented a system level overview of modules and components that are used in the process of accessing media content. The following discussion relates to novel APIs and data structures related to the modules and components described above. The APIs detailed below are described in terms of the C++ programming language. However, the APIs are not limited the C++ programming language. Rather, the APIs may be defined and implemented in any programming language, as those of skill in the art will recognize. The names given to the API functions and parameters which will now be described are meant to be descriptive of their function. However, other names or identifiers could be associated with the functions and parameters, as will be apparent to those of skill in the art.","In accordance with one particular implementation, the APIs are implemented with respect to the Microsoft\u00ae Component Object Model (COM). However, the APIs may likewise be implemented in a number of other ways and\/or in accordance with other models. As those skilled in the art will appreciate, the Microsoft\u00ae Component Object Model (COM) is a platform-independent, distributed, object-oriented system for creating binary software components that can interact. COM is the foundation technology for Microsoft's OLE (compound documents), ActiveX (Internet-enabled components), as well as others. COM allows objects to interact across process and machine boundaries as easily as within a single process by specifying that the only way to manipulate the data associated with an object is through an interface on the object.","As used with respect to the COM implemented interfaces described herein, the term \u201cinterface\u201d refers to an implementation in code of a COM binary-compliant interface that is associated with an object. A COM interface refers to a predefined group of related functions that a COM class implements, but a specific interface does not necessarily represent all the functions that the class supports Referring to an object implementing an interface means that the object uses code that implements each method of the interface and provides COM binary-compliant pointers to those functions to the COM library. COM then makes those functions available to any client who asks for a pointer to the interface, whether the client is inside or outside of the process that implements those functions. The various APIs set forth herein are described in a manner that is generally used with respect to the Microsoft\u00ae COM, as will be appreciated and understood by those skilled in the art.","As will be appreciated by those skilled in the art. COM interfaces typically include or inherit various methods and\/or definitions from IUnknown. The IUnknown interface lets clients get pointers to other interfaces on a given object through the IUnknown::QueryInterface method, and manage the existence of the object through the IUnknown::AddRef and IUnknown::Release methods. Each of the IUnknown::QueryInterface, The IUnknown::AddRef and IUnknown::Release methods are defined as follows:",{"@attributes":{"id":"p-0088","num":"0087"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"IUnknown::Release"},{"entry":"Release decrements the reference count for the calling interface on a"},{"entry":"object. If the reference count on the object falls to 0, the object is"},{"entry":"freed from memory."},{"entry":"ULONG Release(void);"},{"entry":"Return Value"},{"entry":"Returns the resulting value of the reference count, which is used for"},{"entry":"diagnostic\/testing purposes only."},{"entry":"Remarks"},{"entry":"If  has been called on this object's interface n"},{"entry":"times and this is the n + 1th call to IUnknown::Release, the"},{"entry":"implementation of IUnknown::AddRef must cause the interface"},{"entry":"pointer to free itself. When the released pointer is the only existing"},{"entry":"reference to an object (whether the object supports single or multiple"},{"entry":"interfaces), the implementation must free the object."},{"entry":"IUnknown:: QueryInterface"},{"entry":"QueryInterface returns a pointer to a specified interface on an object"},{"entry":"to which a client currently holds an interface pointer. This function"},{"entry":"calls IUnknown::AddRef on the pointer it returns."},{"entry":"HRESULT QueryInterface("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"REFIID  ,"]},{"entry":[{},"void ** "]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":");"},{"entry":"Parameters"},{"entry":"iid"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] Identifier of the interface being requested."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ppvObject"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[out] Address of pointer variable that receives the interface"]},{"entry":[{},"pointer requested in riid. Upon successful return, *ppvObject"]},{"entry":[{},"contains the requested interface pointer to the object. If the"]},{"entry":[{},"object does not support the interface specified in iid,"]},{"entry":[{},"*ppvObject is set to NULL."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Return Value"},{"entry":"S_OK if the interface is supported E_NOINTERFACE if not."},{"entry":"Remarks"},{"entry":"The QueryInterface method gives a client access to other interfaces"},{"entry":"on an object."},{"entry":"For any one object, a specific query for the  interface on"},{"entry":"any of the object's interfaces returns the same pointer value. This"},{"entry":"allows a client to determine whether two pointers point to the same"},{"entry":"component by calling QueryInterface on both and comparing the"},{"entry":"results. It is specifically not the case that queries for interfaces (even"},{"entry":"the same interface through the same pointer) must return the same"},{"entry":"pointer value."},{"entry":"There are four requirements for implementations of QueryInterface"},{"entry":"(In these cases, \u201cmust succeed\u201d means \u201cmust succeed barring"},{"entry":"catastrophic failure.\u201d):"},{"entry":"First, the set of interfaces accessible on an object through"},{"entry":"IUnknown::QueryInterface should be static, not dynamic. This"},{"entry":"means that if a call to QueryInterface for a pointer to a specified"},{"entry":"interface succeeds the first time, it must succeed again, and if it fails"},{"entry":"the first time, it must fail on all subsequent queries."},{"entry":"Second, the interface must be reflexive\u2014if a client holds a pointer"},{"entry":"to an interface on an object, and queries for that interface, the call"},{"entry":"must succeed."},{"entry":"Third, the interface must be symmetric\u2014if a client holding a"},{"entry":"pointer to one interface quenes successfully for another, a query"},{"entry":"through the obtained pointer for the first interface must succeed."},{"entry":"Fourth, the interface must be transitive\u2014if a client holding a"},{"entry":"pointer to one interface queries successfully for a second, and"},{"entry":"through that pointer queries successfully for a third interface, a query"},{"entry":"for the first interface through the pointer for the third interface must"},{"entry":"succeed."},{"entry":"IUnknown::AddRef"},{"entry":"IUnknown::AddRef increments the reference count for an interface"},{"entry":"on an object. It should be called for every new copy of a pointer to"},{"entry":"an interface on a given object."},{"entry":"ULONG AddRef(void);"},{"entry":"Return Value"},{"entry":"Returns an integer from 1 to n, the value of the new reference count."},{"entry":"This information is meant to be used for diagnostic\/testing purposes"},{"entry":"only, because, in certain situations, the value may be unstable."},{"entry":"Remarks"},{"entry":"Objects use a reference counting mechanism to ensure that the"},{"entry":"lifetime of the object includes the lifetime of references to it. You"},{"entry":"use IUnknown::AddRef to stabilize a copy of an interface pointer. It"},{"entry":"can also be called when the life of a cloned pointer must extend"},{"entry":"beyond the lifetime of the original pointer. The cloned pointer must"},{"entry":"be released by calling IUnknown::Release."},{"entry":"Objects must be able to maintain (231)-1 outstanding pointer"},{"entry":"references. Therefore, the internal reference counter that"},{"entry":"IUnknown::AddRef maintains must be a 32-bit unsigned integer."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In accordance with one implementation, in addition to the IUnkown interface, the object selection module  implements one API, a source resolver interface (\u201cIMFSourceResolver\u201d)  and is capable of using a caller supplied resolution callback interface (\u201cIMFResolutionCallback\u201d) , as shown in . The IMFSourceResolver interface  exposes seven methods, which are defined as follows:",{"@attributes":{"id":"p-0090","num":"0089"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"IMFSourceResolver:: CreateObjectFromURL"},{"entry":"The CreateObjectFromURL method provides a synchronous way of"},{"entry":"creating a resolution object from the specified URL."},{"entry":"Syntax"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HRESULT CreateObjectFromURL("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] LPCWSTR pwszURL,"]},{"entry":[{},"[in] DWORD dwFlags,"]},{"entry":[{},"[in] IPropertyStore *pProps,"]},{"entry":[{},"[out] MFOBJECT_TYPE *pObjectType,"]},{"entry":[{},"[out] IUnknown **ppObject"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Parameters"},{"entry":"pwszURL"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] Pointer to URL to be resolved."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"dwFlags"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] Specifies resolution flags. See resolution flags section."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pProps"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] Holds the optional property store object that gets passed"]},{"entry":[{},"to the underlying scheme and byte stream handlers. It can"]},{"entry":[{},"also contain source resolver flags under the property key of"]},{"entry":[{},"MFPKEY_Resolution_Flags. If a property store it not to be"]},{"entry":[{},"used, then this parameter should be set to NULL."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pObject Type"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[out] Specifies type of object that is being returned. Possible"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"values are:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MF_OBJECT_MEDIASOURCE"]},{"entry":[{},"MF_OBJECT_BYTESTREAM"]},{"entry":[{},"MF_OBJECT_PLAYLIST"]},{"entry":[{},"MF_OBJECT_TIMELINE"]},{"entry":[{},"MF_OBJECT_INVALID"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ppObject"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[out] Holds the object that is being returned."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Return Values"},{"entry":"If the method succeeds, it returns S_OK. If it fails, it returns an error"},{"entry":"code."},{"entry":"Remarks"},{"entry":"None."},{"entry":"IMFSourceResolver::CreateObjectFromByteStream"},{"entry":"The CreateObjectFromByteStream method provides a synchronous"},{"entry":"way of creating a resolution object for the specified byte stream."},{"entry":"Syntax"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HRESULT CreateObjectFromByteStream("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] IMFByteStream* pByteStream,"]},{"entry":[{},"[in] LPCWSTR pwszURL,"]},{"entry":[{},"[in] DWORD dwFlags,"]},{"entry":[{},"[in] IPropertyStore *pProps,"]},{"entry":[{},"[out] MF_OBJECT_TYPE *pObjectType,"]},{"entry":[{},"[out] IUnknown **ppObject"]},{"entry":[{},");"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Parameters"},{"entry":"pByteStream"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] Pointer to a byte stream object."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pwszURL"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] Optional pointer to the URL that matches the byte"]},{"entry":[{},"stream. If no URL is supplied, then the"]},{"entry":[{},"MF_RESOLUTION_CONTENT_DOES"]},{"entry":[{},"NOT_HAVE_TO"]},{"entry":[{},"MATCH_EXTENSION resolution flag may be specified so"]},{"entry":[{},"the source resolver will enumerate through the registered byte"]},{"entry":[{},"stream handlers to successfully create a resolution object."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"dwFlags"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] Specifies resolution flags. See resolution flags section."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pProps"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] Holds the optional property store object that gets passed"]},{"entry":[{},"to the underlying scheme and byte stream handlers. It can"]},{"entry":[{},"also contain source resolver flags under the property key of"]},{"entry":[{},"MFPKEY_Resolution_Flags. If a property store it not to be"]},{"entry":[{},"used, then this parameter should be set to NULL."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pObjectType"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[out] Specifies type of object that is being returned. Possible"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"values are:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MF_OBJECT_MEDIASOURCE"]},{"entry":[{},"MF_OBJECT_BYTESTREAM"]},{"entry":[{},"MF_OBJECT_PLAYLIST"]},{"entry":[{},"MF_OBJECT_TIMELINE"]},{"entry":[{},"MF_OBJECT_INVALID"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ppObject"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[out] Holds the resolution object that is being returned."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Return Values"},{"entry":"If the method succeeds, it returns S_OK. If it fails, it returns an error"},{"entry":"code."},{"entry":"IMFSourceResolver::BeginCreateObjectFromURL"},{"entry":"The BeginObjectSourceFromURL method provides an asynchronous"},{"entry":"way for creating a resolution object for the specified URL."},{"entry":"Syntax"},{"entry":"HRESULT BeginCreateObjectFromURL("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] LPCWSTR pwszURL,"]},{"entry":[{},"[in] DWORD dwFlags,"]},{"entry":[{},"[in] IPropertyStore *pProps,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[out] IUnknown * *ppIUnknownCancelCookie"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] IMFAsyncCallback *pCallback,"]},{"entry":[{},"[in] IUnknown *punkState"]},{"entry":[{},");"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Parameters"},{"entry":"pwszURL"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] Specifies the URL to be resolved."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"dwFlags"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] Specifies resolution flags. See resolution flags section."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pProps"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] Holds the optional property store object that gets passed"]},{"entry":[{},"to the underlying scheme and byte stream handlers. It can"]},{"entry":[{},"also contain source resolver flags under the property key of"]},{"entry":[{},"MFPKEY_Resolution_Flags. If a property store it not to be"]},{"entry":[{},"used, then this parameter should be set to NULL."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ppIUnknownCancelCookie"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[out] Holds the cancellation cookie that can be used in a call"]},{"entry":[{},"to CancelObjectCreation(...) to abort the resolution process."]},{"entry":[{},"This parameter is optional and can be NULL. It is the"]},{"entry":[{},"responsibility of the caller to Release the IUnknown pointer."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pCallback"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] Pointer to an async callback object."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"punkState"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] Pointer to a caller defined context object associated with"]},{"entry":[{},"this call."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Return Values"},{"entry":"If the method succeeds, it returns S_OK. If it fails, it returns an error"},{"entry":"code."},{"entry":"IMFSourceResolver::EndCreateObjectFromURL"},{"entry":"The EndCreateObjectFromURL method completes the asynchronous"},{"entry":"operation started with the BeginCreateObjectFromURL call and"},{"entry":"returns the resolution object if the operation succeeds."},{"entry":"Syntax"},{"entry":"HRESULT EndCreateObjectFromURL("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] IMFAsyncResult *pResult,"]},{"entry":[{},"[out] MFOBJECT_TYPE *pObjectType,"]},{"entry":[{},"[out] IUnknown **ppObject);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Parameters"},{"entry":"pResult"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] Pointer to an async result object passed in through"]},{"entry":[{},"Invoke."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pObject Type"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[out] Specifies type of object that is being returned. Possible"]},{"entry":[{},"values are:"]},{"entry":[{},"MF_OBJECT_MEDIASOURCE"]},{"entry":[{},"MF_OBJECT_BYTESTREAM"]},{"entry":[{},"MF_OBJECT_PLAYLIST"]},{"entry":[{},"MF_OBJECT_TIMELINE"]},{"entry":[{},"MF_OBJECT_INVALID"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ppObject"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[out] Holds the resolution object that is being returned."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Return Values"},{"entry":"If the method succeeds, it returns S_OK. If it fails, it returns an error"},{"entry":"code."},{"entry":"IMFSourceResolver::BeginCreateObjectFromByteStream"},{"entry":"The BeginCreateObjectFromByteStream method provides an"},{"entry":"asynchronous way for creating a resolution object that for the"},{"entry":"specified byte stream."},{"entry":"Syntax"},{"entry":"BeginCreateObjectFromByteStream("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] IMFByteStream* pByteStream,"]},{"entry":[{},"[in] LPCWSTR pwszURL,"]},{"entry":[{},"[in] DWORD dwFlags,"]},{"entry":[{},"[in] IPropertyStore *pProps,"]},{"entry":[{},"[out] IUnknown * *ppIUnknownCancelCookie"]},{"entry":[{},"[in] IMFAsyncCallback *pCallback,"]},{"entry":[{},"[in] IUnknown *punkState"]},{"entry":[{},");"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Parameters"},{"entry":"pByteStream"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] Pointer to a byte stream object."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pwszURL"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] Optional pointer to the URL that matches the byte"]},{"entry":[{},"stream. If no URL is supplied, then the"]},{"entry":[{},"MF_RESOLUTION_CONTENT_DOES_NOT_HAVE"]},{"entry":[{},"TO_MATCH_EXTENSION resolution flag will preferably be"]},{"entry":[{},"specified so the source resolver will enumerate through the"]},{"entry":[{},"registered byte stream handlers to successfully create a"]},{"entry":[{},"resolution object."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"dwFlags"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] Specifies resolution flags. See resolution flags section."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pProps"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] Holds the optional property store object that gets passed"]},{"entry":[{},"to the underlying scheme and byte stream handlers. It can"]},{"entry":[{},"also contain source resolver flags under the property key of"]},{"entry":[{},"MFPKEY_Resolution_Flags. If a property store it not to be"]},{"entry":[{},"used, then this parameter should be set to NULL."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pplUnknownCancelCookie"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[out] Holds the cancellation cookie that can be used in a call"]},{"entry":[{},"to CancelObjectCreation(...) to abort the resolution process."]},{"entry":[{},"This parameter is optional and can be NULL. It is the"]},{"entry":[{},"responsibility of the caller to Release the IUnknown pointer."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pCallback"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] Pointer to an async callback object"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"punkState"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] Pointer to a context object associated with this call"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Return Values"},{"entry":"If the method succeeds, it returns S_OK. If it fails, it returns an error"},{"entry":"code."},{"entry":"IMFSourceResolver::EndCreateObjectFromByteStream"},{"entry":"The EndCreateObjectFromByte Stream method completes an"},{"entry":"asynchronous operation started with the"},{"entry":"BeginCreateObjectFromByteStream call and returns the resolution"},{"entry":"object if the operation succeeds."},{"entry":"Syntax"},{"entry":"HRESULT EndCreateObjectFromByteStream("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] IMFAsyncResult *pResult,"]},{"entry":[{},"[out] MF_OBJECT_TYPE *pObjectType,"]},{"entry":[{},"[out] IUnknown **ppObject"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Parameters"},{"entry":"pResult"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] Pointer to an async result object passed in through"]},{"entry":[{},"Invoke."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pObjectType"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[out] Specifies type of object that is being returned. Possible"]},{"entry":[{},"values are:"]},{"entry":[{},"MF_OBJECT_MEDIASOURCE"]},{"entry":[{},"MF_OBJECT_BYTESTREAM"]},{"entry":[{},"MF_OBJECT_PLAYLIST"]},{"entry":[{},"MF_OBJECT_TIMELINE"]},{"entry":[{},"MF_OBJECT_INVALID"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ppObject"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[out] Holds the resolution object that is being returned."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Return Values"},{"entry":"If the method succeeds, it returns S_OK. If it fails, it returns an error"},{"entry":"code."},{"entry":"IMFSourceResolver::CancelObjectCreation"},{"entry":"The CancelObjectCreation method attempts to cancel the requested"},{"entry":"resolution associated with the provided cancel cookie. The cancel"},{"entry":"cookie was obtained from one of the asynchronous"},{"entry":"BeginCreateObjectFromXXX calls. Note that canceling an existing"},{"entry":"resolution request is deemed to be \u201cbest-effort\u201dand might not truly"},{"entry":"yield the expected resource relinquishing effect as the resolution"},{"entry":"might have already completed and the user callback not invoked yet."},{"entry":"Syntax"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HRESULT CancelObjectCreation("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] IUnknown *pIUnknownCancelCookie"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},");"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Parameters"},{"entry":"pIUnknownCancelCookie"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] Pointer to an IUnknown object that was provided by a"]},{"entry":[{},"call to either BeginCreateObjectFromURL or"]},{"entry":[{},"BeginCreateObjectFromByteStream."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Return Values"},{"entry":"If the method succeeds, it returns S_OK. If it fails, it returns an error"},{"entry":"code."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"As previously noted, in accordance with one implementation, in addition to the IUnkown interface, the object selection module  implements one API, a source resolver interface (\u201cIMFSourceResolver\u201d)  and is capable of using a caller supplied resolution callback interface (\u201cIMFResolutionCallback\u201d) . IN accordance with one implementation, the object selection module  allows a resolution callback to be specified in the property store of the BeginCreationObjectFromURL and BeginCreateObjectFromByteStream methods. If an IMFResolutionCallback object is provided under the MFPKEY_Resolution_Callback property key as an IUnknown, the MF Source Resolver will use the caller supplied callback interface during resolution to allow the caller to assist in resolution. This is convenient when an application has its own scheme and\/or bytestream handler that is wishes to use, but it does not want to register it with Media Foundation so that other applications cannot use it.","The IMFResolutionCallback interface  exposes three methods, which are defined as follows:",{"@attributes":{"id":"p-0093","num":"0092"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"u":"IMFResolutionCallback::HandleResolution"}},{"entry":"The HandleResolution method is called by the object selection"},{"entry":"module 214 before resolution begins to give the caller a chance to"},{"entry":"specify the byte stream handler that should be tried first."},{"entry":"Syntax"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HRESULT HandleResolution("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] LPCWSTR pwszURL,"]},{"entry":[{},"[in] IMFByteStream * pByteStream,"]},{"entry":[{},"[out] IMFByteStreamHandler ** ppIMFByteStreamHandler"]},{"entry":[{},");"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Parameters"},{"entry":"pwszURL"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] The URL that is being asked to resolve."]},{"entry":[{},"pByteStream"]},{"entry":[{},"[in] Pointer to a byte stream object."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ppIMFByteStreamHandler"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[out] Pointer to a byte stream object that the Source Resolver"]},{"entry":[{},"should use first in the resolution process."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Return Values"},{"entry":"If the method succeeds, it returns S_OK. If it fails, it returns an error"},{"entry":"code."},{"entry":{"u":"IMFResolutionCallback::HandleNoMatchingSchemeResolverFound"}},{"entry":"The HandleNoMatchingSchemeResolverFound method is called by"},{"entry":"the object selection module 214 if no appropriate scheme handler is"},{"entry":"found during the resolution process."},{"entry":"Syntax"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HRESULT HandleNoMatchingSchemeResolverFound("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] LPCWSTR pwszURL,"]},{"entry":[{},"[out] BOOL* pfContinueResolutionProcess"]},{"entry":[{},");"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Parameters"},{"entry":"pwszURL"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] The URL that is being resolved."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pfContinueResolutionProcess"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] Pointer to a flag that the indicates whether to continue"]},{"entry":[{},"with resolution."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Return Values"},{"entry":"If the method succeeds, it returns S_OK. If it fails, it returns an error"},{"entry":"code."},{"entry":{"u":"IMFResolutionCallback::HandleNoMatchingExtensionAndDataFound"}},{"entry":"The HandleNoMatchingExtensionAndDataFound method is called"},{"entry":"by the object selection module 214 if no appropriate scheme"},{"entry":"handler is found during the resolution process."},{"entry":"Syntax"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HRESULT HandleNoMatchingSchemeResolverFound("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] LPCWSTR pwszURL,"]},{"entry":[{},"[out] BOOL* pfContinueResolutionProcess"]},{"entry":[{},");"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Parameters"},{"entry":"pwszURL"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] The URL that is being resolved."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pByteStream"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] Pointer to a byte stream object."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pfContinueResolutionProcess"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] Pointer to a flag that the indicates whether to continue"]},{"entry":[{},"with resolution by enumerating through the byte stream"]},{"entry":[{},"handlers."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Return Values"},{"entry":"If the method succeeds, it returns S_OK. If it fails, it returns an error"},{"entry":"code."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"As previously noted, the scheme handler  has the responsibility to connect and communicate with a resource for the scheme (i.e., a protocol) it is registered to handle. Upon completion of the process, the scheme handler  will either return a media source that can handle the underlying data, return a byte stream object, return a timeline object, or fail with an error. In accordance with one implementation, these tasks are facilitated using, in addition to the IUnknown interface, an IMFSchemeHandler interface . The IMFSchemeHandler interface  exposes three methods, which are defined as follows:",{"@attributes":{"id":"p-0095","num":"0094"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"u":"IMFSchemeHandler::BeginCreateObject"}},{"entry":"The BeginCreateObject method provides an asynchronous way for"},{"entry":"creating an object that can connect and read data from the resource"},{"entry":"pointed to by the specified URL."},{"entry":"Syntax"},{"entry":"HRESULT BeginCreateObject("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] LPCWSTR pwszURL,"]},{"entry":[{},"[in] DWORD dwFlags,"]},{"entry":[{},"[in] IPropertyStore *pProps,"]},{"entry":[{},"[out] IUnknown **ppIUnknownCancelCookie"]},{"entry":[{},"[in] IMFAsyncCallback *pCallback,"]},{"entry":[{},"[in] IUnknown *punkState"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Parameters"},{"entry":"pwszURL"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] Pointer to URL to be resolved."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"dwFlags"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] Specifies resolution flags. See resolution flags section."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pProps"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] Holds the optional property store object that can contain"]},{"entry":[{},"other scheme resolution related objects and flags. If a"]},{"entry":[{},"property store it not to be used, then this arg should be set to"]},{"entry":[{},"NULL."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ppIUnknownCancelCookie"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[out] Holds the cancellation cookie that can be used in a call"]},{"entry":[{},"to CancelObjectCreation(...) to abort the resolution process."]},{"entry":[{},"This parameter is optional and can be NULL. It is the"]},{"entry":[{},"responsibility of the caller to Release the IUnknown pointer."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pCallback"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] Pointer to an async callback object"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"punkState"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] Pointer to a context object associated with this call"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Return Values"},{"entry":"If the method succeeds, it returns S_OK. If it fails, it returns an error"},{"entry":"code."},{"entry":{"u":"IMFSchemeHandler::EndCreateObject"}},{"entry":"The EndCreateObject method completes the asynchronous call"},{"entry":"started in BeginCreateObject and returns the appropriate object that"},{"entry":"can connect and read data from the specified URL. Upon successful"},{"entry":"completion of this call, the caller can verify the value of"},{"entry":"pObject Type and query for the corresponding interface through"},{"entry":"QueryInterface."},{"entry":"Syntax"},{"entry":"HRESULT EndCreateObject ("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] IMFAsyncResult* pResult,"]},{"entry":[{},"[out] MF_OBJECT_TYPE* pObjectType,"]},{"entry":[{},"[out] IUnknown** ppunkObject"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":");"},{"entry":"Parameters"},{"entry":"pResult"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] Pointer to an async result object passed in through"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Invoke."},{"entry":"pObject Type"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[out] Specifies type of object that is being returned. Possible"]},{"entry":[{},"values are:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MF_OBJECT_MEDIASOURCE"]},{"entry":[{},"MF_OBJECT_BYTESTREAM"]},{"entry":[{},"MF_OBJECT_PLAYLIST"]},{"entry":[{},"MF_OBJECT_TIMELINE"]},{"entry":[{},"MF_OBJECT_INVALID"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ppObject"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[out] Holds the resolution object that is being returned."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Return Values"},{"entry":"If the method succeeds, it returns S_OK. If it fails, it returns an error"},{"entry":"code."},{"entry":{"u":"IMFSchemeHandler::CancelObjectCreation"}},{"entry":"The CancelObjectCreation method attempts to cancel the requested"},{"entry":"resolution associated with the provided cancel cookie. The cancel"},{"entry":"cookie was obtained from the asynchronous BeginCreateObject call."},{"entry":"Note that canceling an existing resolution request is deemed to be"},{"entry":"\u201cbest-effort\u201dand might not truly yield the expected resource"},{"entry":"relinquishing effect as the resolution might have already completed"},{"entry":"and the user callback not invoked yet."},{"entry":"Syntax"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HRESULT CancelObjectCreation("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] IUnknown *pIUnknownCancelCookie"]},{"entry":[{},");"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Parameters"},{"entry":"pIUnknownCancelCookie"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] Pointer to an IUnknown object that was provided by the"]},{"entry":[{},"call BeginCreateObject."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Return Values"},{"entry":"If the method succeeds, it returns S_OK. If it fails, it returns an error"},{"entry":"code."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"As previously noted, the byte stream handler  object has the responsibility to identify the format of data presented to it in the form of a byte stream and return an appropriate media source. Upon completion of the process, a Byte Stream handler will either return a media source or fail with an error. In accordance with one implementation, these tasks are facilitated using, in addition to the IUnknown interface, a IMFByteStreamHandler interface . The IMFByteStreamHandler interface  exposes five methods, which are defined as follows:",{"@attributes":{"id":"p-0097","num":"0096"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"u":"IMFByteStreamHandler::BeginCreateObject"}},{"entry":"The BeginCreateObject method provides an asynchronous way for"},{"entry":"creating a resolution object from the supplied the byte stream."},{"entry":"Syntax"},{"entry":"HRESULT BeginCreateObject("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] IMFByteStream *pByteStream,"]},{"entry":[{},"[in] LPCWSTR pwszURL,"]},{"entry":[{},"[in] DWORD dwFlags,"]},{"entry":[{},"[in] IPropertyStore *pProps,"]},{"entry":[{},"[out] IUnknown * *ppIUnknownCancelCookie"]},{"entry":[{},"[in] IMFAsyncCallback *pCallback,"]},{"entry":[{},"[in] IUnknown *punkState"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},");"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Parameters"},{"entry":"pByteStream"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] Pointer to a byte stream object."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pwszURL"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] Optional pointer to the URL that matches the byte"]},{"entry":[{},"stream."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"dwFlags"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] Specifies resolution flags. See resolution flags section."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pProps"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] Holds the optional property store object that can contain"]},{"entry":[{},"other byte stream resolution related objects and flags. If a"]},{"entry":[{},"property store it not to be used, then this arg should be set to"]},{"entry":[{},"NULL."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pplUnknownCancelCookie"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[out] Holds the cancellation cookie that can be used in a call"]},{"entry":[{},"to CancelObjectCreation(...) to abort the resolution process."]},{"entry":[{},"This parameter is optional and can be NULL. It is the"]},{"entry":[{},"responsibility of the caller to Release the IUnknown pointer."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"p Callback"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] Pointer to an async callback object"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"punkState"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] Pointer to a context object associated with this call"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Return Values"},{"entry":"If the method succeeds, it returns S_OK. If it fails, it returns an error"},{"entry":"code."},{"entry":{"u":"IMFByteStreamHandler::EndCreateObject"}},{"entry":"The EndCreateObject method completes the asynchronous call"},{"entry":"started in BeginCreateObject and returns the resolution object"},{"entry":"obtained from the supplied bytestream."},{"entry":"Syntax"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HRESULT EndCreateObject("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] IMFAsyncResult *pResult,"]},{"entry":[{},"[out] MF OBJECT_TYPE *pObjectType,"]},{"entry":[{},"[out] IUnknown **ppObject"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},");"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Parameters"},{"entry":"pResult"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] Pointer to an async result object passed in through"]},{"entry":[{},"Invoke."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pObjectType"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[out] Specifies type of object that is being returned. Possible"]},{"entry":[{},"values are:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MF_OBJECT_MEDIASOURCE"]},{"entry":[{},"MF_OBJECT_BYTESTREAM"]},{"entry":[{},"MF_OBJECT_PLAYLIST"]},{"entry":[{},"MF_OBJECT_TIMELINE"]},{"entry":[{},"MF_OBJECT_INVALID"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ppObject"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[out] Holds the resolution object that is being returned."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Return Values"},{"entry":"If the method succeeds, it returns S_OK. If it fails, it returns an error"},{"entry":"code."},{"entry":{"u":"IMFByteStreamHandler::CancelObjectCreation"}},{"entry":"The CancelObjectCreation method attempts to cancel the requested"},{"entry":"resolution associated with the provided cancel cookie. The cancel"},{"entry":"cookie was obtained from the asynchronous BeginCreateObject call."},{"entry":"Note that canceling an existing resolution request is deemed to be"},{"entry":"\u201cbest-effort\u201dand might not truly yield the expected resource"},{"entry":"relinquishing effect as the resolution might have already completed"},{"entry":"and the user callback not invoked yet."},{"entry":"Syntax"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HRESULT CancelObjectCreation("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] IUnknown *pIUnknownCancelCookie"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},");"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Parameters"},{"entry":"pIUnknownCancelCookie"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] Pointer to an IUnknown object that was provided by the"]},{"entry":[{},"call BeginCreateObject."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Return Values"},{"entry":"If the method succeeds, it returns S_OK. If it fails, it returns an error"},{"entry":"code."},{"entry":{"u":"IMFByteStreamHandler::GetMaxNumberOfBytesRequiredForResolution"}},{"entry":"The GetMextNumberOfBytesRequiredForResolution method should"},{"entry":"return the maximum number of bytes the byte stream handler"},{"entry":"requires to either create a resolution object or to signify that it cannot"},{"entry":"handle the byte stream."},{"entry":"Syntax"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HRESULT GetMaxNumberOfBytesRequiredForResolution("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[out] QWORD *pqwBytes"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},");"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Parameters"},{"entry":"pqwBytes"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[out] The number of bytes required for resolution"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Return Values"},{"entry":"If the method succeeds, it returns S_OK. If it fails, it returns an error"},{"entry":"code."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The following four tables briefly describe the resolution flags that can be used in the BeginCreateObjectXXX calls described above:",{"@attributes":{"id":"p-0099","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Resolution Object Requested"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Flag","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"MF_RESOLUTION","The resolution process"]},{"entry":[{},"MEDIASOURCE","should attempt to return"]},{"entry":[{},{},"a Media Source object"]},{"entry":[{},"MF_RESOLUTION","The resolution process"]},{"entry":[{},"BYTESTREAM","should attempt to return"]},{"entry":[{},{},"a Byte Stream object"]},{"entry":[{},"MF_RESOLUTION","The resolution process"]},{"entry":[{},"PLAYLIST","should attempt to return"]},{"entry":[{},{},"a \u201cplay list\u201d object"]},{"entry":[{},"MF_RESOLUTION","The resolution process"]},{"entry":[{},"TIMELINE","should attempt to return"]},{"entry":[{},{},"a timeline object"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0100","num":"0099"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"329pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Resolution Behavior"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Flag","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["MF_RESOLUTION","Enumerates though all byte stream handlers, if the"]},{"entry":["CONTENT_DOES_NOT","default byte stream handler for the extension fails."]},{"entry":["HAVE_TO_MATCH_EXTENSION","For example, suppose we have a WMV file with the"]},{"entry":[{},"extension \u201c.MP3\u201d. If you do not specify this flag,"]},{"entry":[{},"then the resolver will only try to invoke the MP3"]},{"entry":[{},"handler on the file and it will fail since it is not an"]},{"entry":[{},"mp3 file. If this flag is specified, then after the"]},{"entry":[{},"failure, it will enumerate through all it's known"]},{"entry":[{},"handlers to see if any of them will accept the file"]},{"entry":[{},"NOTE: This flag is mutually exclusive with the"]},{"entry":[{},"MF_RESOLUTION_KEEP_BYTE_STREAM"]},{"entry":[{},"ALIVE_ON_FAIL flag"]},{"entry":["MF_RESOLUTION_KEEP_BYTE_STREAM","This flag allows the bytestream that the resolver"]},{"entry":["ALIVE_ON_FAIL","creates during resolution to be cached (kept alive) on"]},{"entry":[{},"failure so it can be used on the subsequent call. By"]},{"entry":[{},"specifying this flag, the caller agrees to attempt"]},{"entry":[{},"resolution again if the resolution fails. For example,"]},{"entry":[{},"suppose we are trying to play back a network URL"]},{"entry":[{},"that points to a file with extension \u201c.MP3\u201d and"]},{"entry":[{},"resolution fails because the file is really a misnamed"]},{"entry":[{},"WMV file. If this flag is specified for the first"]},{"entry":[{},"resolution, then the network byte stream is cached"]},{"entry":[{},"(kept alive) by the resolver. On the subsequent"]},{"entry":[{},"resolution, the user would specify the"]},{"entry":[{},"MF_RESOLUTION_CONTENT_DOES_NOT"]},{"entry":[{},"HAVE_TO_MATCH_EXTENSION flag to allow"]},{"entry":[{},"handler enumeration. By using the"]},{"entry":[{},"MF_RESOLUTION_KEEP_BYTE_STREAM"]},{"entry":[{},"ALIVE_ON_FAIL, the networked URL is accessed once"]},{"entry":[{},"even though resolution is done twice. In this"]},{"entry":[{},"manner, the web server logs depict a more accurate"]},{"entry":[{},"access count."]},{"entry":[{},"NOTE: This flag is mutually exclusive with the"]},{"entry":[{},"MF_RESOLUTION_CONTENT_DOES_NOT"]},{"entry":[{},"HAVE_TO_MATCH_EXTENSION flag"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0101","num":"0100"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Functionality Behavior"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Flag","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"MF_RESOLUTION","Used to tell the created"]},{"entry":[{},"METADATA","MediaSource object that meta"]},{"entry":[{},{},"data will probably be accessed."]},{"entry":[{},"MF_RESOLUTION","Used to tell the created"]},{"entry":[{},"AUDIO_VIDEO","MediaSource object that audio"]},{"entry":[{},{},"and video data will probably be"]},{"entry":[{},{},"accessed"]},{"entry":[{},"MF_RESOLUTION","Used to tell the created"]},{"entry":[{},"NAVIGATION_DATA","MediaSource object that"]},{"entry":[{},{},"navigation data will"]},{"entry":[{},{},"probably be accessed"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0102","num":"0101"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Access Mode Requested"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Flag","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["MF_RESOLUTION_READ","The requested resource should be"]},{"entry":[{},"opened in read mode."]},{"entry":["MF_RESOLUTION_WRITE","The requested resource should be"]},{"entry":[{},"opened in write mode."]},{"entry":["MF_RESOLUTION_CREATE","The requested resource should be"]},{"entry":[{},"opened in create mode."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"As previously noted, in accordance with one implementation, the object selection module  uses function discovery to find scheme and byte stream handlers. In one implementation, function discovery only creates true COM objects. Hence, in this implementation, all scheme and byte stream handlers will be truly CoCreate-able.","The following sample code illustrates how to register scheme handlers using function discovery:",{"@attributes":{"id":"p-0105","num":"0104"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"static HRESULT"]},{"entry":[{},"RegisterYOYOSchemeHandlerWithFunctionDiscovery( )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GUID YOYO_SCHEME_HANDLER_COM_CLASSID = {0};"]},{"entry":[{},"HRESULT hr = S_OK;"]},{"entry":[{},"PROPVARIANT propvarString;"]},{"entry":[{},"PropVariantInit( &propvarString );"]},{"entry":[{},"do"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ Create the Function Discovery Object"]},{"entry":[{},"\/\/"]},{"entry":[{},"ComSmartPtr<IFunctionDiscovery>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"spIFunctionDiscovery;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"hr = ::CoCreateInstance("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"__uuidof(FunctionDiscovery),"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"NULL,"]},{"entry":[{},"CLSCTX_ALL,"]},{"entry":[{},"__uuidof("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IFunctionDiscovery ) ,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(void**)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"&spIFunctionDiscovery );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CHECKHR_BRK( hr );"]},{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ Create the function instance builder"]},{"entry":[{},"\/\/"]},{"entry":[{},"ComSmartPtr<IFunctionInstanceBuilder>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"spIFunctionInstanceBuilder;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"hr = spIFunctionDiscovery-"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},">TEMP_RegisterFunctionInstance("]},{"entry":[{},"FUNCTION_DISCOVERY_CATEGORY_MF_RESOLUTION_SCHEME"]},{"entry":[{},"HANDLERS,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"L\u201cYOYO: Scheme"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Handler Function Instance\u201d,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IVF_DEFAULT,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"&spIFunctionInstanceBuilder );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CHECKHR_BRK ( hr );"]},{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ Tell FD we only support"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IMFSchemeHandler interface and"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ the COM class ID to create"]},{"entry":[{},"\/\/"]},{"entry":[{},"hr = spIFunctionInstanceBuilder-"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},">SetInterface( &IID_IMFSchemeHandler,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"NULL,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"&YOYO_SCHEME_HANDLER_COM_CLASSID, NULL );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CHECKHR_BRK( hr );"]},{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ Get the Function Instance property"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"store"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/"]},{"entry":[{},"ComSmartPtr< IInternalPropertyStore >"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"spIInternalPropertyStore;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"hr = spIFunctionInstanceBuilder-"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},">GetInternalPropertyStore("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"&spIInternalPropertyStore );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CHECKHR_BRK( hr );"]},{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ Store the supported scheme"]},{"entry":[{},"\/\/"]},{"entry":[{},"propvarString.vt = VT_LPWSTR;"]},{"entry":[{},"propvarString.pwszVal = L\u201cyoyo:\u201d;"]},{"entry":[{},"hr = spIInternalPropertyStore\u2212>SetValue("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"MFPKEY_Resolution_FunctionDiscovery_Scheme,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"&propvarString );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CHECKHR_BRK( hr );"]},{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ Store the \u201cname\u201d"]},{"entry":[{},"\/\/"]},{"entry":[{},"propvarString.vt = VT_LPWSTR;"]},{"entry":[{},"propvarString.pwszVal = L\u201cYOYO: Scheme"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Handler for MF\u201d;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"hr = spIInternalPropertyStore\u2212>SetValue("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"PKEY_NAME, &propvarString );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CHECKHR_BRK ( hr );"]},{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ Store a little comment"]},{"entry":[{},"\/\/"]},{"entry":[{},"propvarString.vt = VT_LPWSTR;"]},{"entry":[{},"propvarString.pwszVal = L\u201cThis is the"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"YOYO: scheme handler for MF!!!!!\u201d:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"hr = spIInternalPropertyStore\u2212>SetValue("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"PKEY_Comment , &propvarString );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CHECKHR_BRK( hr );"]},{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ Commit the changes to Function"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Discovery"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/"]},{"entry":[{},"hr = spIFunctionInstanceBuilder-"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},">TEMP_CommitChanges( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CHECKHR_BRK( hr );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"while( FALSE );"]},{"entry":[{},"DestroyPropVariant( &propvarString );"]},{"entry":[{},"return ( hr );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The following is sample code that demonstrates ho to register a byte stream handler:",{"@attributes":{"id":"p-0107","num":"0106"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT RegisterXYZByteStreamHandlerWithFD( )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT hr = S_OK;"]},{"entry":[{},"PROPVARIANT propvarFDPropStoreEntry;"]},{"entry":[{},"PropVariantInit( &propvarFDPropStoreEntry );"]},{"entry":[{},"do"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ Create the Function Discovery Object"]},{"entry":[{},"\/\/"]},{"entry":[{},"ComSmartPtr<IFunctionDiscovery>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"spIFunctionDiscovery;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"hr = ::CoCreateInstance( __uuidof("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"FunctionDiscovery ),"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"NULL,"]},{"entry":[{},"CLSCTX_ALL,"]},{"entry":[{},"__uuidof("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IFunctionDiscovery ),"]},{"entry":[{},"(void**)&spIFunctionDiscovery );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CHECKHR_BRK( hr );"]},{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ Create the name of the bytestream"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"hander and its function instance"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/"]},{"entry":[{},"CMFStringW sByteStreamHandlerName( L\u201c .xyz"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Byte Stream Handler\u201d );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CMFStringW"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"sByteStreamHandlerFunctionInstanceName( L\u201c .xyz"]},{"entry":[{},"Byte Stream Handler Function Instance\u201d );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ Create the function instance builder"]},{"entry":[{},"\/\/"]},{"entry":[{},"ComSmartPtr<IFunctionInstanceBuilder>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"spIFunctionInstanceBuilder;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"hr = spIFunctionDiscovery-"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},">TEMP_RegisterFunctionInstance("]},{"entry":[{},"FUNCTION_DISCOVERY_CATEGORY_MF_RESOLUTION_BYTESTR"]},{"entry":[{},"EAM_HANDLERS,"]},{"entry":[{},"sByteStreamHandlerFunctionInstanceName.PContents("]},{"entry":[{},"),"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IVF_DEFAULT,"]},{"entry":[{},"&spIFunctionInstanceBuilder );"]},{"entry":[{},"CHECKHR_BRK( hr );"]},{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ Tell FD we only support"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IMFByteStreamHandler interface and"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ the COM class ID to create"]},{"entry":[{},"\/\/"]},{"entry":[{},"hr = spIFunctionInstanceBuilder-"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},">SetInterface( &IID_IMFByteStreamHandler,"]},{"entry":[{},"NULL,"]},{"entry":[{},"&XYZ_BYTE_STREAM_HANDLER_COM_CLASSID, NULL );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CHECKHR_BRK( hr );"]},{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ Get the Function Instance property"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"store"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/"]},{"entry":[{},"ComSmartPtr< IInternalPropertyStore >"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"spIInternalPropertyStore;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"hr = spIFunctionInstanceBuilder-"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},">GetInternalPropertyStore("]},{"entry":[{},"&spIInternalPropertyStore );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CHECKHR_BRK( hr );"]},{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ Store the supported file extension for"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"this byte stream handler"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/"]},{"entry":[{},"propvarFDPropStoreEntry.vt = VT_LPWSTR;"]},{"entry":[{},"propvarFDPropStoreEntry.pwszVal ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"L\u201c .xyz\u201d;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"hr = spIInternalPropertyStore\u2212>SetValue("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MFPKEY_Resolution_FunctionDiscovery_FileExtension"]},{"entry":[{},"\u2019"]},{"entry":[{},"&propvarFDPropStoreEntry );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CHECKHR_BRK( hr );"]},{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ Store the \u201cname\u201d"]},{"entry":[{},"\/\/"]},{"entry":[{},"propvarFDPropStoreEntry.vt = VT_LPWSTR;"]},{"entry":[{},"propvarFDPropStoreEntry.pwszVal = (WCHAR"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"*) sByteStreamHandlerName.PContents( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"hr = spIInternalPropertyStore\u2212>SetValue("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"PKEY_NAME, &propvarFDPropStoreEntry );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CHECKHR_BRK( hr );"]},{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ Store the max number of bytes required"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"for resolution"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/"]},{"entry":[{},"ComSmartPtr<IMFByteStreamHandler>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"spIMFByteStreamHandler;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"hr = CreateXYZByteStreamHandler("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"&spIMFByteStreamHandler );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CHECKHR_BRK( hr );"]},{"entry":[{},"QWORD qwMaxNumberOfBytes = \u22121;"]},{"entry":[{},"hr = spIMFByteStreamHandler-"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},">GetMaxNumberOfBytesRequiredForResolution("]},{"entry":[{},"&qwMaxNumberOfBytes );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CHECKHR_BRK( hr );"]},{"entry":[{},"propvarFDPropStoreEntry.vt = VT_UI8;"]},{"entry":[{},"propvarFDPropStoreEntry.uhVal.QuadPart ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"qwMaxNumberOfBytes;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"hr = spIInternalPropertyStore\u2212>SetValue("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MFPKEY_Resolution_FunctionDiscovery_MaxNumberOfBy"]},{"entry":[{},"tesRequiredForResolution,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"&propvarFDPropStoreEntry );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CHECKHR_BRK( hr );"]},{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ Store a little comment"]},{"entry":[{},"\/\/"]},{"entry":[{},"propvarFDPropStoreEntry.vt = VT_LPWSTR;"]},{"entry":[{},"propvarFDPropStoreEntry.pwszVal = L\u201cThis"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"is .xyz Byte Stream Handler that I wrote while I"]},{"entry":[{},"was watching Justice League.\u201d;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"hr = spIInternalPropertyStore\u2212>SetValue("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PKEY_Comment,"]},{"entry":[{},"&propvarFDPropStoreEntry );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CHECKHR_BRK( hr );"]},{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ Commit the new Function Instance to"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Function Discovery"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/"]},{"entry":[{},"hr = spIFunctionInstanceBuilder-"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},">TEMP_CommitChanges( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CHECKHR_BRK( hr );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"while( FALSE );"]},{"entry":[{},"DestroyPropVariant( &propvarFDPropStoreEntry"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},");"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"return( hr );"]},{"entry":[{},"\u2002}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0108","num":"0107"},"figref":["FIG. 4","FIG. 4"],"b":["410","410","420","421","422","423","421","421","420","420"]},"The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory may also be referred to as simply the memory, and includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within the computer , such as during start-up, is stored in ROM . The computer  further includes a hard disk drive  for reading from and writing to a hard disk, not shown, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media.","The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical disk drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer-readable instructions, data structures, program modules and other data for the computer . It should be appreciated by those skilled in the art that any type of computer-readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read only memories (ROMs), and the like, may be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM , or RAM , including an operating system , one or more application programs , other program modules , and program data . A user may enter commands and information into the personal computer  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port, or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, computers typically include other peripheral output devices (not shown), such as speakers and printers.","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as remote computer . These logical connections may be achieved by a communication device coupled to or a part of the computer , or in other manners. The remote computer  may be another computer, a server, a router, a network PC, a client, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local-area network (LAN)  and a wide-area network (WAN) . Such networking environments are commonplace in office networks, enterprise-wide computer networks, intranets and the Internal, which are all types of networks.","When used in a LAN-networking environment, the computer  is connected to the local network  through a network interface or adapter , which is one type of communications device. When used in a WAN-networking environment, the computer  typically includes a modem , a type of communications device, or any other type of communications device for establishing communications over the wide area network . The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It is appreciated that the network connections shown are exemplary and other means of and communications devices for establishing a communications link between the computers may be used.","Although some exemplary methods and systems have been illustrated in the accompanying drawings and described in the foregoing Detailed Description, it will be understood that the methods and systems shown and described are not limited to the particular implementation described herein, but rather are capable of numerous rearrangements, modifications and substitutions without departing from the spirit set forth and defined by the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
