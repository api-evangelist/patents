---
title: Dynamic user interfaces for network services
abstract: In order to assure that services in an network and applications or users in the network are able to communicate and interact with one another a framework is provided that registers the service. The service provides the necessary information, in particular configuration files that are processed by the framework. The framework directly interfaces to a user by way of application or applications used by the users. An interface is established between the application and the framework allowing the user to indirectly communicate to the service by way of the framework. This allows the interface to the service and to the application to be handled by the framework.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07028310&OS=07028310&RS=07028310
owner: Hewlett-Packard Development Company, L.P.
number: 07028310
owner_city: Houston
owner_country: US
publication_date: 20010831
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["1. Field of the Invention","This invention relates to the field of network applications such as applications on the Internet, in particular to a method and system to allow users to interface to various network services without a strict service directed user interface.","2. Description of the Related Art","The world wide web (WWW), specifically through applications has allowed for numerous services to be provided. Services include photo sharing web sites, researching databases, accessing public library catalogs, and electronic commerce (e-commerce). Web site services continue to evolve to allow greater interaction between users, providers of services and products, and web sites that allow groups to communicate. E-commerce has grown from consumers merely visiting a commercial web-site and ordering goods or services by entering account and or credit card information to interactive communication between consumers and web-sites. Service frameworks provide for interaction between groups in a network or the Internet. Service frameworks allow the Internet to evolve from a collection of web sites accessed by a personal computer to a network of interconnected services that work together to solve problems, perform tasks, or meet a need. Systems and services will be able to have intelligent communications with or without the need for user intervention. Service frameworks include E-speak\u2122 developed by the Hewlett Packard Corporation and Enterprise Java Beans\u2122 developed by Sun Microsystems, Inc.","Service frameworks define a uniform services interface or application programming interfaces (API), and uniform services interaction such as the E-speak\u2122 engine allow services to dynamically interact to discover, negotiate, broker and compose themselves to solve a business to business, or business to consumer service request. Most service interfaces are defined by an extensible mark-up language (XML) scheme or an XML interface.","Application programs (applications) that once controlled various functions and routines were made up of large pervasive sections of code, where one user interface could suffice. Applications are now seen as a collection of individual standalone services that are distributed over a network such as the Internet and combined together by a web application to form a useful end user service. This allows for code reuse, greater flexibility, and ease of maintenance. Individual applications, however, may or may not have proper user interfaces that allow a user to communicate to services.","An application does provide a level of user interface to and interaction with a user while having various services operating in the background. In addition, some services need a minimum level of interaction with a user through a user interface.","Service frameworks typically provide an application programming interface model that does not allow individual services to provide user interfaces to the user, or otherwise directly interact with the user. Problems therefore can arise with the basic need to provide an interface between services and users.","Regardless of the service framework that is chosen, services have the ability to persist in their state or setting, or continue to maintain state. In addition, regardless of the service framework, each service will have a unique session identifier (ID) to allow interaction between services.","A need has been felt for a method and a system, in particular a service framework that allows services that do not have a user interface (UI) to communicate with a user through an appropriate UI. The service framework should be easy to use, extensible, and allow service developers to provide user interaction to their services.","The aforementioned and other features are accomplished, by providing a method and a system in which a user interface (UI) framework registers services and facilitates the creation and the processing of UI's that can be presented to end users. Service information can be provided by conveying configuration files between services and frameworks.","In certain embodiments, the method and system are accomplished by having a repository of XML-described UI's and transformations that are used by existing services and web applications.","The invention also provides for a system in which a framework registers the services and generates and processes UI's for applications. Services can use the system to provide UI regardless of service framework on user interaction device.","Other embodiments of the invention include providing computer program medium that is operable on computer systems and processors. The computer program instructions are provided as code to be processed by the computer systems and their processors.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail, it should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed but on the contrary, the intention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["100","102","102","102","104","110","100","100","110"]},"In this particular example, service  is a storage service that stores files. Service  also has functions that include the retrieval of files. If an application  requests a file from service  (i.e., storage) but application  does not specify the file, service  requires a display of a user interface, the user interface is used to allow user system  to pick from a list of files owned by user system .","User system  can be in the process of using an application , where application  can be internal or external to user system . Application  includes a UI framework interface . The UI framework interface  is used to communicate to services and UI frameworks. User system  can request an action of the application, step . For example, user system  can be using a printing application and user system  wishes to print out a file.","Application  requires the use of service  to perform the action requested by user system . A request is made from application  to service , step . The example of a printing application can involve retrieving a file from service  (i.e., storage). In this example application  requests to retrieve a file from service . In this example The request from application  to service , step , can be a programmatic call, or the request can be a message sent across a network through a protocol or an interface. In certain embodiments, application  builds an XML message, which contains a request for a file.","In this particular example, service  receives the request to retrieve a file, however, the specific file is not identified. An interaction, in particular a user interface, between user system  to service  is needed. UI framework  provides a calling interface that supports a method to construct a user interface. The user interface in turn provides an ability to perform file selection. A hierarchical list of file names is organized by directory and the list of file names is conveyed to UI framework , step . Step  can also include caching the original request for a file and associating the original request to a reference ID. The reference ID can then be used to retrieve the original request.","Once UI framework  receives the request from service , step , UI framework  builds data which represents a user interface screen in a generic manner. The data can be written in XML. For this particular example, data will be referred to as XML data. The XML data, along with an ID identifying the service , is sent to service , step . The reference ID can also be included in step .","Service  returns the XML data representing the user interface to application , step . Application  differentiates between the reply to its request in step  versus the XML data that represents the user interface of step . Step  further provides for UI content to be returned to application .","Application  recognizes that the received reply in step  contains a user interface. Application  in turn sends a target generic (not content generic) user interface to UI framework , step . Step  includes a request for a user interface view for the targeted user interface from application  to UI framework . In this particular example, the user interface view is a web browser. Based on the application type and application needs, the UI view request will contain specific UI content and relevant type of presentation. Types of presentation can include HTML based content, cellular phone based content, and digital organizer based content.","When Step  is completed and UI framework  is advised of the request for a user interface view. UI framework  generates hyper text markup language (HTML) code and returns the HTML code to application , step . The user interface is contained in the HTML code. The HTML code can include hidden data such as the services ID and the reference ID. Step  further provides that the formatted UI view be returned to the application, the view containing the service ID, the request ID, and the UI type.","Application  presents the user interface, which is in the form of the HTML code to a web browser contained in user system , step . The web browser of user system  using the HTML code is able to present an interactive user interface to user system , in particular the UI view is presented to an operator of user system .","An operator using user system  is able to interact with the interface web browser, in particular the operator is able to select particular files. When a specific file is chosen by the operator, user system  sends the request to application , step . Application  receives form-factor data from the user in step . Application  proceeds to send the form-factor data to UI framework , step . UI framework  processes the form-factor data, the form-factor data including a service ID and a reference ID.","UI framework  receives and processes the form-factor data from application , extracting necessary information from the data. The necessary information to be extracted being the file selected by the operator. UI framework  returns the file name, the reference ID, and the service ID (collectively known as the processed response) to application , step .","Application  using the service ID, sends the file name and reference ID to service , step . Application  is made aware of which service to contact based on the service ID, with the service ID being predefined.","Service  receives the file name and reference ID, and uses the references ID to find the associated request to retrieve a file. Service  retrieves the file that is specified and sends the specified file to application , step . Step  is a result of the original request of step . Application  is now able to fulfill the request made in step . A comparison is made as to the report in step  with the response provided in step  based on the report ID.","In this particular example of a priority application, the application  receives the file from the service  and prints the file. A confirmation is made to user system , step , indicating that the print function has been performed. Application  sends a response as to user system  request made in step .",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 2","FIG. 1"],"b":"104"},"A service determines the need to register with a framework, and the process begins with a start event, step . A configuration file is sent to the framework by the service, step . The service creates an individual UI configuration file describing which user interface (UI) the service will use. The configuration file can be written in XML. XML is a markup language for documents containing structured information. Structured information contains both content (words, pictures, etc.) and some indication of what role the content plays. For example, content in a section heading has a different meaning from content in a footnote, which means something different than content in a figure caption or content in a database table, etc. Almost all documents have some structured information (i.e., content). Attached in an appendix is an example of an XML content file.","The service then creates all necessary files to support the configuration file. These files provide XSL transformations for different types of user interface views and custom result handlers. XSL transformation is a language for transforming XML documents. The configuration file and the support files are passed to the framework during the registration process. Attached in an appendix is an example of a configuration file.","A configuration file consists of a list of predefined or custom user interfaces the service will use. For each customized user interface, the configuration file includes a list of different types of target applications that are supported (applications can include web applications, cellular phones, and digital organizers); a list of transformations that are supported for building the actual UI view (this is the standard XSL transformation that can be standard that is provided by the framework or a custom XSL transformation); and a list of handlers for each individual target.","The framework processes the XML configuration file, step . A determination is made if a successful registration has been accomplished, step . A successful registration provides the framework to save a local copy of the registration package, step . An unsuccessful registration provides for the framework to notify the service, step . Step  can also provide that the service is notified when a successful registration takes place. The service is now ready to use the UI framework. The service registration process then is completed, step .","User Interface (UI) Request","A UI request is created by a service in one of the following ways:","For predefined UI types the service invokes a predefined method and passes required parameters. In other words a question or a list of items is passed by the service.","For custom UI types the service invokes a generic method and passes XML formatted content. The content must be compatible with XSL transformation provided in the registration package.","Now referring to  shown is a flowchart illustrating requesting user interface content by a framework. This particular process illustrates the process in which a service and a framework request and provide UI content. As illustrated in , this is the UI request step . A determination is made as to the exchange for UI content and the process begins with a start event, step . The framework determines if the service is registered for the UI type , the registration event illustrated in . If the service is not registered with the framework the request from the service has failed, the service is notified, step , and the process is ended, step . If the service is registered and has a valid UI type a determination is made if the UI type is predefined, step . A UI type that is not predefined provides a validation of custom XML content, step . The XML content file is returned to the service, step , and the process is ended, step . If the UI type is predefined, an XML content file is created for the UI of the particular type, step . The framework generates a unique request ID and appends it to the XML content file, step . The XML content file is returned to the service, step , and the process is ended, step .","Requesting a UI View","The application receives the UI content from a service. The content is generic and it is not formatted for a particular target application view. The application passes the UI content to the framework in order to receive back the actual UI formatted for viewing. Once the UI is returned, the UI is displayed to the end user.","Processing the UI View","Now referring to  shown is a flowchart illustrating requesting a user interface view from the application to the user interface framework. This particular process illustrates the process in which an application requests a UI view through a UI framework. As illustrated in , this is the request UI event . The process begins with start event , which can be initiated by the application. The application submits UI content in the form of a XML file in addition to a target type to the UI framework, step . A check is performed that the service supports the target type for the given UI request . If the check fails, the framework notifies the application that the request has failed, step , and the process is ended . If the check passes, using the configuration file, the framework locates the XSL transformation file, and processes the received XML data through a target (application) specific handler defined in the service's configuration file, step . The UI view data is then returned to the application, step , and the process is ended, step .","Now referring to  shown is a flowchart illustrating processing of a user interface response from the application to the framework. This particular process illustrates the process in which an application requests processing of a UI response from an application to a framework. As illustrated in , this is the process UI response event, step . The process is initiated with a start event by the application, step . The framework processes the UI result with a target specific handler, step . The UI result is processed by a request specific handler, step , and the process is ended, step . The result of processing is returned to the application, which in turn sends the result to the service.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 6","b":["615","615","610","620","620","625"]},"An Example Computing and Network Environment",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 7","FIG. 7"],"b":["700","710","1","720","1","720","1","701","1","720","1","701","1","720","1"]},"One or more of client computers ()\u2013(N) and\/or one or more of servers ()\u2013(N) may be, for example, a computer system of any appropriate design, in general, including a mainframe, a mini-computer or a personal computer system. Such a computer system typically includes a system unit having a system processor and associated volatile and non-volatile memory, one or more display monitors and keyboards, one or more diskette drives, one or more fixed disk storage devices and one or more printers. These computer systems are typically information handling systems, which are designed to provide computing power to one or more users, either locally or remotely. Such a computer system may also include one or a plurality of I\/O devices (i.e., peripheral devices) which are coupled to the system processor and which perform specialized functions. Examples of I\/O devices include modems, sound and video devices and specialized communication devices. Mass storage devices such as hard disks, CD-ROM drives and magneto-optical drives may also be provided, either as an integrated or peripheral device. One such example computer system, discussed in terms of client computers ()\u2013(N) is shown in detail in .",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 8","b":["810","720","1","810","812","810","814","816","818","820","822","824","826","828","830","832","833","834","836","838","840","842","846","812","828","847","812","830","848","812"]},"Bus  allows data communication between central processor  and system memory , which may include both read only memory (ROM) or flash memory (neither shown), and random access memory (RAM) (not shown), as previously noted. The RAM is generally the main memory into which the operating system and application programs are loaded and typically affords at least 66 megabytes of memory space. The ROM or flash memory may contain, among other code, the Basic Input-Output system (BIOS) which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system  are generally stored on and accessed via a computer readable medium, such as a hard disk drive (e.g., fixed disk ), an optical drive (e.g., CD-ROM drive ), floppy disk unit  or other storage medium. Additionally, applications may be in the form of electronic signals modulated in accordance with the application and data communication technology when accessed via network modem  or interface .","Storage interface , as with the other storage interfaces of computer system , may connect to a standard computer readable medium for storage and\/or retrieval of information, such as a fixed disk drive . Fixed disk drive  may be a part of computer system  or may be separate and accessed through other interface systems. Many other devices can be connected such as a mouse  connected to bus  via serial port , a modem  connected to bus  via serial port  and a network interface  connected directly to bus . Modem  may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider (ISP). Network interface  may provide a direct connection to a remote server via a direct network link to the Internet via a POP (point of presence). Network interface  may provide such connection using wireless techniques, including digital cellular telephone connection, Cellular Digital Packet Data (CDPD) connection, digital satellite data connection or the like.","Many other devices or subsystems (not shown) may be connected in a similar manner (e.g., bar code readers, document scanners, digital cameras and so on). Conversely, it is not necessary for all of the devices shown in  to be present to practice the present invention. The devices and subsystems may be interconnected in different ways from that shown in . The operation of a computer system such as that shown in  is readily known in the art and is not discussed in detail in this application. Code to implement the present invention may be stored in computer-readable storage media such as one or more of system memory , fixed disk , CD-ROM , or floppy disk . Additionally, computer system  may be any kind of computing device, and so includes personal data assistants (PDAs), network appliance, X-window terminal or other such computing device. The operating system provided on computer system  may be MS-DOS\u00ae, MS-WINDOWS\u00ae, OS\/2\u00ae, UNIX\u00ae, Linux\u00ae or other known operating system. Computer system  also supports a number of Internet access tools, including, for example, an HTTP-compliant web browser having a JavaScript interpreter, such as Netscape Navigator\u00ae 8.0, Microsoft Explorer\u00ae 8.0 and the like.","Moreover, regarding the signals described herein, those skilled in the art will recognize that a signal may be directly transmitted from a first block to a second block, or a signal may be modified (e.g., amplified, attenuated, delayed, latched, buffered, inverted, filtered or otherwise modified) between the blocks. Although the signals of the above described embodiment are characterized as transmitted from one block to the next, other embodiments of the present invention may include modified signals in place of such directly transmitted signals as long as the informational and\/or functional aspect of the signal is transmitted between blocks. To some extent, a signal input at a second block may be conceptualized as a second signal derived from a first signal output from a first block due to physical limitations of the circuitry involved (e.g., there will inevitably be some attenuation and delay). Therefore, as used herein, a second signal derived from a first signal includes the first signal or any modifications to the first signal, whether due to circuit limitations or due to passage through other circuit elements which do not change the informational and\/or final functional aspect of the first signal.","The foregoing described embodiment wherein the different components are contained within different other components (e.g., the various elements shown as components of computer system ). It is to be understood that such depicted architectures are merely examples, and that in fact many other architectures can be implemented which achieve the same functionality. In an abstract, but still definite sense, any arrangement of components to achieve the same functionality is effectively \u201cassociated\u201d such that the desired functionality is achieved. Hence, any two components herein combined to achieve a particular functionality can be seen as \u201cassociated with\u201d each other such that the desired functionality is achieved, irrespective of architectures or intermediate components. Likewise, any two components so associated can also be viewed as being \u201coperably connected\u201d, or \u201coperably coupled\u201d, to each other to achieve the desired functionality.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 9","FIG. 9"],"b":["900","810","910","920","930","940","910","920","930","940","810","947","948","810","910","810","920","930","940","810","920","930","940","940"]},"Referring to ,  and , a browser running on computer system  employs a TCP\/IP connection to pass a request to server , which can run an HTTP \u201cservice\u201d (e.g., under the WINDOWS\u00ae operating system) or a \u201cdaemon\u201d (e.g., under the UNIX\u00ae operating system), for example. Such a request can be processed, for example, by contacting an HTTP server employing a protocol that can be used to communicate between the HTTP server and the client computer. The HTTP server then responds to the protocol, typically by sending a \u201cweb page\u201d formatted as an HTML file. The browser interprets the HTML file and may form a visual representation of the same using local resources (e.g., fonts and colors).","Although the present invention has been described in connection with several embodiments, the invention is not intended to be limited to the specific forms set forth herein, but on the contrary, it is intended to cover such alternatives, modifications, and equivalents as can be reasonably included within the spirit and scope of the invention as defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention may be better understood, and it's numerous objects, features and advantages made apparent to those skilled in the art by referencing the accompanying drawings. The use of the same reference number throughout the figures designates a like or similar element.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 9","FIG. 8"]}]},"DETDESC":[{},{}]}
