---
title: Hybrid agent-oriented object model to provide software fault tolerance between distributed processor nodes
abstract: An apparatus and method for a computer system is used for implementing an extended distributed recovery block fault tolerance scheme. The computer system includes a supervisory node, an active node and a standby node. Each of the nodes has a primary routine, an alternate routine and an acceptance test for testing the output of the routines. Each node also includes a device driver, a monitor and a node manager for determining the operational configuration of the node. The supervisory node coordinates the operation of the active and standby nodes. The primary and alternate routines are implemented with an application task through a plurality of agent objects operating as finite state machines. A reliable data link extends between the monitors of the active and standby nodes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07424640&OS=07424640&RS=07424640
owner: Harris Corporation
number: 07424640
owner_city: Melbourne
owner_country: US
publication_date: 20040831
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present allocation is a divisional application of and claims priority benefit of U.S. patent application Ser. No. 10\/183,488, entitled \u201cHYBRID AGENT-ORIENTED OBJECT MODEL TO PROVIDE SOFTWARE FAULT TOLERANCE BETWEEN DISTRIBUTED PROCESSOR NODES\u201d filed Jun. 28, 2002, now U.S. Pat. No. 6,868,067.","The present application is related to co-pending and commonly assigned PCT International Application No. PCT\/US02\/03323 entitled \u201cDynamic Bandwidth Allocation\u201d, PCT\/US02\/03322 entitled \u201cDemodulator Bursty Controller Profile\u201d, PCT\/US02\/03193 entitled \u201cDemodulator State Controller\u201d, PCT\/US02\/03189 entitled \u201cFrame to Frame Timing Synchronization\u201d, the disclosures of which are hereby incorporated herein by reference. The aforementioned applications are related to commonly assigned U.S. Pat. No. 6,016,313 entitled \u201cSystem and Method for Broadband Millimeter Wave Data Communication\u201d issued Jan. 18, 2000 and currently undergoing two re-examinations under application Ser. No. 90\/005,726 and application Ser. No. 90\/005,974, U.S. Pat. No. 6,404,755 entitled \u201cMulti-Level Information Mapping System and Method\u201d issued Jun. 11, 2002, U.S. patent application Ser. No. 09\/604,437, entitled \u201cMaximizing Efficiency in a Multi-Carrier Time Division Duplex System Employing Dynamic Asymmetry\u201d, which are a continuation-in-part of the U.S. Pat. No. 6,016,313 which are hereby incorporated herein by reference.","The present application is related to and is being concurrently filed with commonly assigned U.S. patent application Ser. No. 10\/183,383, entitled \u201cLook-Up Table for QRT\u201d; U.S. patent application Ser. No. 10\/183,486, entitled \u201cAirlink TDD Frame Format\u201d; U.S. patent application Ser. No. 10\/183,492, entitled, \u201cData-Driven Interface Control Circuit and Network Performance Monitoring System and Method\u201d; U.S. patent application Ser. No. 10\/183,490, entitled \u201cVirtual Sector Provisioning and Network Configuration System and Method\u201d, U.S. patent application Ser. No. 10\/183,489, entitled \u201cSystem and Method for Supporting Automatic Protection Switching Between Multiple Node Pairs Using Common Agent Architecture\u201d, U.S. patent application Ser. No. 10\/183,384, entitled \u201cSystem and Method for Transmitting Highly Correlated Preambles in QAM Constellations\u201d, the disclosures of which is hereby incorporated herein by reference.","A distributed recovery block is a method of integrating hardware and software fault tolerance in a single structure without having to resort to N-version programming. In N-version programming, the goal is to design and code the software module n times and vote on the n results produced by these modules. The recovery block structure represents a dynamic redundancy approach to software fault tolerance. In dynamic redundancy, a single program or module is executed and the result is subject to an acceptance test. Alternate versions are invoked only if the acceptance test fails. The selection of the routine is made during program execution. In its simplest form as shown in , a standard recovery block structure  consists of: a primary routine , which executes critical software function; an acceptance test , which test the output of the primary routine after each execution; at lease one alternate routine  that performs the same function as the primary routine and is invoked by the acceptance test  upon detection of a failure.","In a distributed recovery block  the primary and alternate routines are both replicated and are resident on two or more nodes interconnected by a network. This technique enables standby sparing fault tolerance where one node (the active node) is designated primary and another node (the standby node) is a backup. Under fault-free circumstances, the primary node runs the primary routine  whereas the backup node runs the alternate routine  concurrently.","In case of a failure, the primary node attempts to inform the backup through the monitor  via the heartbeat thread . When the backup receives notification, it assumes the role of the primary node. Since the backup node has been processing the alternate routine  concurrently, a result is available immediately for output. Subsequently, recovery time for this type of failure should be much shorter than if both blocks were running on the same node. If the primary node stops processing entirely, no update message will be passed to the backup. The backup detects the crash by means of a local timer in which timer expiry constitutes the time acceptance test.","The failed primary node transitions to a backup node, and by employing a recovery block reconfiguration strategy both nodes can be assured to not be executing the same routine.","A distributed recovery block with real time process control is referred to as an extended distributed recovery block (EDRB) . The EDRB includes a supervisor node  connected to the network to verify failure indications and arbitrate inconsistencies; and regular, periodic heartbeat status messages.","In EDRB, nodes responsible for control of the process and related systems are called operational nodes and are critical. The operational nodes perform real time control and store unrecoverable state information. A set of dual redundant operational nodes is called a node pair. Multiple redundant operation nodes are node sets.","Regular, period status messages are exchanged between node pairs and each node pair in a node set. The messages are referred to as heartbeats. A node is capable of recovering from failures in its companion in standalone fashion, if the malfunction has been declared as part of the heartbeat message. If a node detects the absence of it companion's heartbeat, it request confirmation of the failure from a second kind of node called the supervisor. Although the supervisor is important to EDRB operation, the supervisor node  is typically not crucial because its failure only impacts the ability of the system to recover from failures require its confirmation or arbitration. The EDRB system can continue to operate without a supervisor  if no other failures occur.","In  the software structure in a node pair is shown. Operational nodes employ active redundancy. One node pair member is always active, the other is always standby if, it is functional. The active node executes a primary version of a control process in parallel with an alternate version executed on the standby node. Both nodes check the correctness of the control outputs with the acceptance test .","Within an operational node, the EDRB is implemented as a set of processes communicating between node pairs and the supervisor  to control fault detection and recovery. The two processes responsible for node-level fault decision making are the node manager  and the monitor . The node manager  determine the role of the local node (active or standby) and subsequently triggers the use of either the primary  or the alternate routine . If the primary routine acceptance test is passed, the node manager  permits a control signal to be passed to the device drivers  under its control. If the acceptance test is not passed, the active node manager request the standby node manager to promote itself to active and immediately send out its result to minimize recovery time.","The monitor  associated with node manager  is concerned primarily with generating the heartbeat and determining the state of the companion node. The heartbeat is a ping or other rudimentary signal indicating functionality of the respective node. When an operational node fails to issue a heartbeat, the monitor processes request permission from the supervisor to assume control if not already in the active role. If the supervisor  concurs that a heartbeat is absent, consent is transmitted and the standby node promotes itself to active node.","If the active node spuriously decides to become a standby node or a standby node makes an incorrect decision to assume control. As a response the supervisor node  will detect the problem form periodic status reports. It will then send an arbitration message to the operation nodes in order to restore consistency.","In many computer networks, particularly in communication system, the supervisory node  is critical, providing frame synchronization and connection routes between the network and users. Thus, the loss of a supervisory node results in loss of the node function. Thus, there is a need for a multiple redundant architecture in which not only are the nodes replicated, but also the network. In addition there is a need for implementation of agent oriented software to facilitate the functionality of such an architecture.","An object of the invention is an improvement of a computer system implementing an extended distributed recovery block fault tolerance scheme comprising a supervisory node, an active node and a standby node. The active and standby node have a primary routine for executing a software function; an alternate routine for executing the software function; and an acceptance test routine for testing the output of the primary routine and providing a control signal in response thereto. The active and standby nodes also having a device driver for receiving the control signal, a monitor for communicating state information with one or more active or standby nodes, and are operationally connected to a node manager for determining the operational configuration of the node. The primary routine is executed in response to a determination that the node is in an active state and the alternate routine is executed in response to a determination that the node is in a standby state. The supervisory node coordinates the operation of the active node and the standby node. The improvement being the primary and alternate routines of one of the active or standby node are implemented with an application task comprising a plurality of agent objects each operating as a finite state machine operating in either a primary mode executing the primary routine or in an alternate mode executing the alternate routine.","Another object of the invention is an improvement of a computer system implementing an extended distributed recovery block fault tolerance scheme comprising a supervisory node, an active node, and a standby node. The improvement being the primary and alternate routines of the active and standby nodes are each implemented with a plurality of dedicated application tasks each with a plurality of agent objects operating as a finite state machine in either a primary mode executing the primary routine or in an alternate mode executing the alternate routine. The determination of the mode of operation of the agents in a one of the plural dedicated application tasks is determined independently of the mode of operation of the agents in the other of the plural dedicated application tasks.","Still another object of the invention is an improvement of a computer system implementing an extended distributed recovery block fault tolerance scheme having a supervisory node, an active node, and a standby node. The improvement being a primary and alternate routines of the active and standby nodes are each implemented with a plurality of dedicated application tasks each with a plurality of agent objects operating as a finite state machine operating in either a primary mode executing the primary routine or in an alternate mode executing the alternate routine. Each of the agents is implemented with an attachment list comprising data common to the attachment list of at least one other agent.","Yet another object of the invention is an improvement of a single bus software architecture for supporting hardware hot standby redundancy with a supervisor processing node. The improvement of adding a second supervisor processor node, alternatively in an active state, connected to the bus to provide for a redundant supervisory node set.","Another object of the invention is an improvement of a communication system with an active node and a standby node that form a node pair or node set, each node with a node agent. The improvement of using a reliable datalink between the heartbeat monitors of the node pair or set.","Another object of the invention is an improvement of a communication system with an active node and a standby node that form a node pair or node set, each node with a node agent. The improvement involving supporting automatic protection switching between multiple node sets or pairs using common agent architecture.","The implementation of EDRB of the present invention employs a hybrid solution, as it blends the agents with the structure and control of the EDRB. Application tasks are implement by agent objects that are instances of C++ programming. The agent objects (agents) are implemented as finite state machines (circuit state machines) that recognized two distinct modes of operation. One mode executes a primary routine block; the other executes an alternate routine block. An application task performs the acceptance test block and outputs the results for use by the node manager in that processor node.","A circuit state machine , an example of which is shown in , implementing the agent objects is comprised of 5 states including Not-Present , Restore , Stand-by , Active , and Out of Service . The circuit state machines are not limited to these states, more or less states are envisioned as required in certain applications.","The circuit state machines begin in the NOT PRESENT state  and stays in this state until a detected event is received. Once detected, the RESTORE State  is entered where the circuit is reset and circuit initialization is performed. This transition can include successful diagnostic test execution as part of the initialization sequence. If a problem arises during the transition, the state machine may be transitioned to the OUT OF SERVICE State  to await further instructions. The OUT OF SERVICE State  is a holding state for situations where fatal or unrecoverable errors have occurred. It is also a deliberate state to enter when conducting diagnostic test or when attempting to restore normal operation.","The circuit state machine will stay in the RESTORE State  until a ready event is received. A time can be provided to allow adequate time for concurrent activity that may be required to initialize a circuit. Upon expiry the state machine automatically transition to the OUT OF SERVICE State .","Upon receipt of a ready event, the circuit state machine transition to the STAND-BY state . In STAND-BY State  the circuit is identified as operation, but not in service for normal use. The circuit state machine stays in the STAND BY state until an enable event is received, where it transition to the ACTIVE state . The ACTIVE State  represents the state when the circuit is operational i.e. routing traffic, monitoring defects, counting errors, and so on.","Software implements the circuit state machine state event matrix, event procedures and generic methods to provide a virtual behavior mechanism. The common Agent uses this generic behavior for software circuits, where blocks of executable code  perform as though they are hot-swappable components. In each of the state transitions depicted in , a chain of executable blocks of code are attached. These executable blocks of code are attachments which together an attachment list . When a state transition occurs, each attachment in the Attachment List  for that transition is executed in order. After each attachment runs, a status code is returned. If the status code is anything other than a success, execution of the chain is aborted.","Two additional execution chains are provided for handling the receipt of messages through he corresponding task service queue. One execution chain is provided for messages received when in the ACTIVE state, the other for messages received while in the STAND-BY state, these as discussed earlier are the primary and alternate routines, respectively.","When a message is received in the ACTIVE state, it is passed along to each attachment in the primary execution chain  until the end is reached or a routine returns unsuccessfully. Likewise, when a message is received while in the STAND-BY state, it is passed along to each attachment in the alternate execution chain (attachment list) . If a message is received while the state machine is in any other state, it is ignored. This supports the desired behavior where the agent object is only operational when it is active or stand-by.","The common Agent object  relationship with neighboring external entities is shown in . The Application Support Package (ASP) subsystem  (a operating system utility to provide state machines) acts upon the agent object by invoking its operation during task initialization and through the processing of state event registered at startup. The Application Support Package (ASP) provides a generic task library that is used by application tasks. This library provides for a standardized internal task architecture and facilitates common software test hooks. The generic task interfaces with the application's implementation by means of specified user supplied hooks. The task library also uses all of the task level Runtime Library services that the application wishes to subscribe to. These services include Finite State Machine dispatch, and a guaranteed FSM timer service.","As state machine event transitions occur and as service queue task messages are received, the common Agent objects  acts on the executable blocks of code  attached at startup or at any point after startup. The circuit state machine behavior can be directed by a redundancy node manager  task during condition when system reconfiguration is required and resources in stand by become active for those that have failed. The redundancy node manager can issue commands to groups of agent objects instead of requiring software for each explicit function and procedure to invoke the reconfiguration process.","Common agent objects contain list of common Attachment objects which as discussed above are blocks of executable code. Agent objects may contain similar or application-specific attachments added in such a fashion as to perform their intended roles and inherently support the redundant system architecture. The Attachment lists are dynamically modifiable.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 4","b":["400","404","450","450","410","415","450","404","450","404","404"],"i":["a","c","a ","b","c "]},"A first set of Agents within an application task operate in the primary mode while the remainder of agents operate in the alternate mode. The agents are configured such that a number of agents in a second set backup a number of agents in the first set of agents. The number of agents in each set may or may not be equal; furthermore each agent of the second set of agents may back up each of the agents in the first set. Such a system allows for N- to M protection of the computer system at the application task level.","During system initialization, agents register data ownership and subscribe to data required for accomplishing assigned roles and processes. The data is common to all the agents. Blocks of the same executable code that are shared by the Agents are contained in common attachment lists. The Attachment lists are dynamically modifiable as a function of the status of the computer system.","One or more agent objects can implement each of the application tasks. The application tasks perform the acceptance test block  and output the results for use by the node manager in that processor node. The acceptance test block  is a test dedicated and contained within the application task. The node manager, upon acceptance sends the data to the respective one or more device drivers .","Each node in the node pair or set is connected to it companion as discussed above via a heartbeat thread to the monitor and the node agent of each companion node. The heartbeat thread carries a heartbeat signal. The heartbeat contains the node roles, version and frame number, which is incremented at the beginning of each new heartbeat frame. Preferably the heartbeat thread is a reliable datalink between the monitors of the node pair. For example, applying high-level data link control (HDLC) procedures would be a desirable implementation for the heartbeat thread, where the datalink message retransmission queues can be tuned to the needs of the system in a deterministic fashion. Such an implementation is illustrated in the heartbeat message cell of .","The content of the heartbeat message cell  is shown in  in octet format. The contents form either unnumbered , supervisory , or heartbeat information message  frames, depending on the state of the monitors in each participating node pair and an address frame . The message format enforces a level of integrity between node pairs to manage standby sparing activation a signaling between field replacement units (FRU). FRUs are units that service personnel can replace in the field. The message is terminated with a frame check sequence (FCS) field . Since this is a small message the FCS field  is an 8 bit sequence, invalid frames are frames which have fewer than 3 octets, contains a frame check sequence error, or contain an address that is not supported.","The address field  consists of a command\/response bit (C\/R) , a service access point identifier (SAPI) subfield  and a terminal endpoint identifier (TEI) subfield . The command\/response bit identifies a frame as either a command or a response. The backup node sends commands with the C\/R bit set to 0, and responses with the C\/R bit set to 1. The primary node does the opposite, commands are sent with C\/R set to 1 and responses are sent with C\/R set to 0. In conformance with HDLC high-level data link control procedures) rules, both node pair entities us the same datalink connection identifier composed of the SAPI-TEI pair. The SAPI is used to correspond the processor node slot with the computer system connection. The TEI is used to map the connection to a specific network interface.","The unnumbered (U) format  is used to provide data link control function, primarily used in establishing and relinquishing link control. The Supervisory (S) format  is used to perform data link supervisory control function such as acknowledge I frames, request transmissions of I frames, and request temporary suspension of the transmission of I frames. The function of N(R) and P\/F are independent. Each supervisory frame has an N(R) sequence number which may or may not acknowledge additional I-frames. The heartbeat information (I) format (I-frames)  is used to perform normal information transfer between node pairs or node sets regarding automatic protection switching and operational status. The function of N(S), N(R) and P are independent. Each I-frame has an N(S) sequence number, an N(R) sequence number which may or may not acknowledge additional I-frames, and a P bit that may be set to o or 1. K and K are signaling byte information maintained between node pairs and sets of node pairs.","The poll\/final bit is incorporated in all frames. The P\/F bit serves a function in both command frames and response frames. In command frames the P\/F bit is referred to as the P bit (poll) in response frames it is referred to as the F bit (final) the P bit is set to 1 by a node pair to solicit a response frame from the peer node. The F bit is set to 1 by a node pair to a response frame transmitted as a result of a soliciting command.","The receive sequence number N(R) is the expected send sequence number of the next received I frame. At the time that an I or S frame is designated for transmission, the value of N(R) is equal to the number of I frames acknowledged by the node entity. N(R) indicates that the node entity transmitting the N(R) has correctly received all the I-frames numbered up to and including N(R)\u22121. The send sequence number N(S) is the send sequence number of transmitted I frames. It is only used in I-frames. At the time that an in-sequence I frame is designated for transmission, the value of N(S) is set equal to the current sequence number for the I frame to be transmitted.","The supervisory command sequence comprises receive ready, reject and receive not ready commands. The unnumbered control function include expand mode, disconnected mode, disconnect unnumbered acknowledgment and frame reject.","The EXPAND mode command is used to place the addressed backup or primary node into multiple frame acknowledged operation. A node pair confirms acceptance of any expand mode command by the transmission at the first opportunity of an unnumbered acknowledgement response. Upon acceptance of this command, the node pair entity sequence and transmission counter are set to 0. The transmission of an expand mode command indicates the clearance of all exception conditions. Exception conditions are delays, retransmit counters, erred messages of other condition outside of normal messages. Previously transmitted I frames that are unacknowledged when the EXPAND mode command is processed remain unacknowledged and are discarded.","The Disconnect command terminates the multiple frame operation, such as when the network operator decides to take a node pair out of service or change the backup node. The node pair entity receiving the disconnect command confirms the acceptance by the transmission of an unnumbered acknowledgement response. The node pair entity sending the disconnect command terminates the multiple frame operation upon receipt of the unnumbered acknowledgment response or the disconnected mode response.","The Receive ready command indicates when a node set is ready to receive an I-frame, acknowledge previously received I frames or clear a busy condition indicated by an earlier transmission of a receive not ready command by the same node set. The Reject command is used by a node pair entity to request retransmission of I frames starting with the frame numbered N(R). The value of N(R) in the reject frame acknowledges I frames number up to and including N(R)\u22121. Only one rejection exception condition for a given direction of information transfer is established at a time. The Rejection condition is cleared upon the receipt of an I frame with an N(S) equal to the N(R) of the reject frame.","The receive not ready command indicates a busy condition: that is, a temporary inability to accept additional incoming I frames. The value N(R) in the receive not ready command acknowledges I-frames numbered up to and including N(R)\u22121. The unnumbered response acknowledges the receipt and acceptance of mode setting commands EXPAND and DISCONNECTED. The disconnected mode response reports to its peer that the heartbeat link is in a state such that multiple frame operation cannot be performed. The Frame Reject response reports an error condition not recoverable by retransmission of the identical frame.","A configuration of nodes employing a reliable data link is shown in . Node pair  includes processor nodes and are connected by a reliable data link . Similarly, node set  includes multiple processor nodes -which are connected by reliable data links . Each node contains a node agent  and a monitor. Again the node agent  is preferable an instance of C++ programming and resides on the node. The device or line interfaces relay data messages to the node agent , which can include externally generated automatic protection switching commands and line interface status. The node pairs or node sets also may include a recovery agent.","The node agent though the monitor accepts and filter line interface statuses and external automatic protection switching commands though the reliable data link and provide a more sophisticated communication between node agents in a node pair or set. As a result if a card failure occurs, i.e. the node goes down, the reliable data link will break, and thus like discussed earlier, the standby node will attempt to go on line, unless preempted by the supervisor node or the recovery agent. However, in case of a line failure, the data link stays up and the active processor node signals standby processor node of failure and the standby node becomes active unless preempted.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 7","b":["701","702","705","708","707","704","750","710","715","730","732","731","733","730","731","708"],"i":["a","e "]},"A plurality of agents may reside upon the supervisor nodes including, as previously discussed a recovery agent, which is an instance of C++ programming. The recovery agent directs or overrides the transition of nodes between active and standby. The recovery agent fulfills one or more of the supervisory roles.","The processor and agent architecture described herein is particularly suited for use in a point-to-multi-point wireless communication system used to communicate from a central location to each of a plurality of remotes sites where reliable connections are required. Such a system that provides high speed bridging of a physical gap between a plurality of processor based systems, is ultimately dependent on the fault tolerance and recovery capability of the processors which comprise its structure.","Although the invention has been described in a preferred form with a certain degree of particularity, it is understood that the present disclosure of the preferred form has been made only by way of example, and that numerous changes in the details of construction and combination and arrangement of parts may be made without departing from the spirit and scope of the invention as hereinafter claimed. It is intended that the patent shall cover by suitable expression in the appended claims, those features of patentable novelty that exists in the invention disclosed."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
