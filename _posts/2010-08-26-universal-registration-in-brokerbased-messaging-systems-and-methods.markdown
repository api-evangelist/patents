---
title: Universal registration in broker-based messaging systems and methods
abstract: An exemplary method includes a global directory service subsystem receiving a request for a software application to be temporarily registered with a message broker in accordance with a universal registration heuristic, authorizing, in response to the request and in accordance with permission information associated with the software application and maintained by the global directory service subsystem, the software application to be temporarily registered with the message broker; and dynamically updating, in response to the authorizing, software application registration data maintained by the global directory service subsystem to indicate that the software application is temporarily registered with the message broker. Corresponding methods and systems are also described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08505033&OS=08505033&RS=08505033
owner: Verizon Patent and Licensing Inc.
number: 08505033
owner_city: Basking Ridge
owner_country: US
publication_date: 20100826
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND INFORMATION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["Message-oriented middleware is infrastructure that increases the interoperability, portability, and flexibility of software applications by allowing the software applications to communicate one with another by transmitting messages therebetween. Message-oriented middleware reduces the complexity of developing software applications that span multiple operating systems and network protocols by insulating application developers from the details of the various operating system and network interfaces. Accordingly, software developers can more easily integrate new software applications with existing software applications.","In typical message-oriented middleware configurations, messages are transmitted from one software application to another by way of one or more message brokers. However, a message broker may occasionally fail or otherwise enter into a fault state in which it is unable to relay messages to and from software applications associated therewith. An inoperable message broker can cause undesirable delays, consume valuable network resources, and result in frustrating experiences for end users who rely on the software applications associated with the message broker.","Exemplary methods and systems for universal registration in a broker-based messaging system are described herein. As described in more detail below, a global directory service subsystem may receive a request for a software application to be temporarily registered with a message broker in accordance with a universal registration heuristic. In response, the global directory service subsystem may authorize, in accordance with permission information associated with the software application and maintained by the global directory service subsystem, the software application to be temporarily registered with the message broker. The global directory service subsystem may then dynamically update, in response to the authorization, software application registration data maintained by the global directory service subsystem to indicate that the software application is temporarily registered with the message broker. In this manner, a software application may be selectively and temporarily registered with any one of a plurality of message brokers, which may result in a more efficient and effective broker-based messaging system.","As used herein, a software application \u201cregistered\u201d with a message broker may be connected to the message broker and send and\/or receive messages by way of the message broker. A software application \u201ctemporarily registered\u201d with a message broker may be only connected to the message broker during a particular session. After the session has terminated, the software application can no longer send and\/or receive messages by way of the message broker unless it re-registers with the message broker.","As used herein, the terms \u201cuniversal registration heuristic\u201d and \u201cuniversal registration\u201d will be used interchangeably to refer to any heuristic or option that allows a software application to be selectively and temporarily registered with any one of a plurality of message brokers. In contrast, a software application \u201cstatically\u201d registered with a message broker is persistently associated with the message broker across multiple sessions and cannot be associated with any other message broker. Hence, a software application authorized to employ universal registration (i.e., operate in accordance with a universal registration heuristic) may, at run time, temporarily register with a particular message broker included in the plurality of message brokers and send and\/or receive messages by way of the particular message broker during a particular session. After the session has terminated, the software application may again request to be selectively and temporarily registered with any one of the plurality of message brokers. In this manner, the software application is not forced to be associated with a single message broker at all times, thereby enhancing availability and reliability of the software application.","As used herein, the term \u201csoftware application\u201d may include, but is not limited to, a software product (e.g., a software program), a module within a software product, and\/or any other software component (e.g. an enterprise java bean, a servlet, etc.) as may serve a particular implementation. As used herein, an \u201coriginating software application\u201d is one that generates a message to be sent to another software application (referred to herein as a \u201crecipient software application\u201d).","As used herein, a \u201cmessage\u201d generated by a software application may include any data that may be read or otherwise processed by a message broker and\/or a recipient software application. A message may be transmitted in encrypted form, as cleartext (i.e., non-encrypted form), and\/or in any other manner as may serve a particular implementation.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","100","102","104","106","102","104","106","104","104","100"]},"Software application subsystem , message broker subsystem , and global directory service subsystem  may communicate using any communication platforms and technologies suitable for transporting data, including known communication technologies, devices, media, and protocols supportive of remote or local data communications. Examples of such communication technologies, devices, media, and protocols include, but are not limited to, data transmission media, communications devices, Transmission Control Protocol (\u201cTCP\u201d), Internet Protocol (\u201cIP\u201d), File Transfer Protocol (\u201cFTP\u201d), Telnet, Hypertext Transfer Protocol (\u201cHTTP\u201d), Hypertext Transfer Protocol Secure (\u201cHTTPS\u201d), Session Initiation Protocol (\u201cSIP\u201d), Ethernet, and any other suitable communications technologies, devices, media, and protocols.","In some examples, software application subsystem , message broker subsystem , and global directory service subsystem  may communicate via one or more networks, including, but not limited to, wireless networks, broadband networks, closed media networks, cable networks, satellite networks, the Internet, intranets, local area networks, public networks, private networks, optical fiber networks, and\/or any other networks capable of carrying data and communications signals between software application subsystem , message broker subsystem , and global directory service subsystem .",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2","b":["200","100","102","104","106","202","202","102","104","106","102","104","106"]},"Software application subsystem , message broker subsystem , and global directory service subsystem  may each be implemented by one or more computing devices. For example, software application subsystem  may be implemented by a first computing device configured to execute an originating software application and a second computing device configured to execute a recipient software application. Alternatively, software application subsystem  may be implemented by a single computing device configured to execute both the originating and recipient software applications.","In some examples, software application subsystem , message broker subsystem , and global directory service subsystem  are implemented by distinct computing devices. Alternatively, subsystems - may be implemented by the same computing device. Any other implementation of subsystems - may be realized in accordance with the systems and methods described herein.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 3","FIG. 3"],"b":["102","102","302","304","306"]},"Communication facility  may be configured to facilitate communication between software application subsystem  and message broker subsystem . For example, communication facility  may be configured to establish and\/or assist in establishing one or more connections between software application subsystem  and message broker subsystem  over which one or more messages may be transmitted from software application subsystem  to message broker subsystem  and\/or from message broker subsystem  to software application subsystem . The one or more connections established between software application subsystem  and message broker subsystem  may include one or more secure connections and\/or one or more non-secure connection. An exemplary secure connection includes, but is not limited to, a secure sockets layer (\u201cSSL\u201d) connection. An exemplary non-secure connection includes, but is not limited to, a non-SSL connection.","Communication facility  may additionally or alternatively be configured to facilitate communication between software application subsystem  and global directory service subsystem . For example, communication facility  may be configured to transmit a request to global directory service subsystem  for information indicative of one or more currently active message brokers. In this manner, a software application authorized to operate in accordance with a universal registration heuristic may connect to a message broker known to be currently active.","Messaging facility  may be configured to process a message generated by an originating software application and\/or a message received by a recipient software application. Exemplary, but not exclusive, processing of a message that may be performed by messaging facility  includes encrypting a message, decrypting a message, preparing a message for transmission to a recipient software application via message broker subsystem , processing of a message received from message broker subsystem , etc.","Storage facility  may be configured to maintain message data  and application programming interface (\u201cAPI\u201d) data . It will be recognized that storage facility  may maintain additional or alternative data as may serve a particular implementation.","Message data  may include data representative of one or more messages generated and\/or received by a software application. Message data  may additionally include delivery instructions corresponding to one or more messages. For example, message data  may include an identifier (e.g., a name or identification number) of an intended recipient software application and\/or computing device that executes the recipient software application.","API data  is representative of one or more APIs configured to facilitate integration of one or more software applications executed by software application subsystem  with message broker subsystem  and\/or global directory service subsystem . For example, one or more APIs may interface with one or more software applications executed by application subsystem  to facilitate encryption of messages generated by the one or more software applications, communication with message broker subsystem  and\/or global directory service subsystem , and\/or any other feature as may serve a particular implementation.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 4","FIG. 4"],"b":["104","104","402","404","406","408"]},"Communication facility  may be configured to facilitate communication between message broker subsystem  and software application subsystem . For example, communication facility  may be configured to establish and\/or assist in establishing one or more connections between message broker subsystem  and software application subsystem  over which one or more messages may be transmitted from software application subsystem  to message broker subsystem  and\/or from message broker subsystem  to software application subsystem . In some examples, communication facility  may be configured to receive a message intended for delivery to a recipient software application by way of one of the established one or more connections.","Communication facility  may additionally or alternatively be configured to facilitate communication between message broker subsystem  and global directory service subsystem . For example, communication facility  may be configured to transmit registration data associated with a particular software application and\/or any other data to global directory service subsystem  as may serve a particular implementation.","Delivery facility  may be configured to deliver (and\/or attempt to deliver) one or more messages received from one or more originating software applications to one or more recipient software applications in accordance with delivery instructions included within the message(s). To this end, delivery facility  may be configured to utilize one or more connections established by communication facility .","Registration facility  may be configured to register a software application with message broker subsystem . For example, communication facility  may receive a request from a software application to be temporarily registered with a message broker in accordance with a universal registration heuristic. Registration facility  may then authenticate the request in any suitable manner. For example, registration facility  may verify a correct name, user identification (\u201cuser ID\u201d), and\/or password included in the request received from the software application. In response to a successful authentication, registration facility  may transmit the name and\/or user ID to global directory service subsystem  as part of a request for the software application to be temporarily registered with the message broker. As will be described in more detail below, global directory service subsystem  may analyze the name and\/or user ID to determine whether the software application is authorized to be temporarily registered with the software application.","Registration facility  may be configured to facilitate any other type of registration of a software application with a message broker as may serve a particular implementation. For example, registration facility  may be configured to facilitate static registration of a software application with a message broker wherein the software application is always associated with the message broker.","Storage facility  may be configured to maintain message data  representative of one or more messages to be delivered to a recipient software application and registration data  representative of data utilized by registration facility . Storage facility  may maintain additional or alternative data as may serve a particular implementation.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 5","FIG. 5"],"b":["106","106","502","504","506","508"]},"Communication facility  may be configured to facilitate communication between global directory service subsystem  and software application subsystem . Communication facility  may be further configured to facilitate communication between global directory service subsystem  and message broker subsystem . For example, communication facility  may receive a request from a message broker for a software application to be temporarily registered with the message broker in accordance with a universal registration heuristic. The request may include a name of the software application, a user ID associated with the software application, a name of the message broker, and\/or any other information as may serve a particular implementation.","Authorization facility  may be configured to authorize a software application to be temporarily registered with a message broker in accordance with a universal registration heuristic. For example, in response to communication facility  receiving a request from a message broker for a software application to be temporarily registered with the message broker in accordance with a universal registration heuristic, authorization facility  may utilize permission information associated with the software application and managed by registration management facility  to determine whether the software application is authorized to be temporarily registered with the message broker. The permission information associated with the software application may indicate a current registration status of the software application (i.e., whether the software application is already registered with a message broker), a type of registration that the software application is authorized to employ (i.e., whether the software application has permission to employ universal registration), and\/or any other information associated with the software application as may serve a particular implementation.","In some examples, authorization facility  may authorize the software application to be temporarily registered with the message broker by verifying that the name and\/or user ID included in the request received by communication facility  are included in a list of names and\/or user IDs associated with software applications that have permission to employ universal registration. The list may be managed by registration management facility  and may be input by personnel associated with system  and\/or otherwise generated as may serve a particular implementation. Additionally or alternatively, authorization facility  may verify that the software application is not already registered with another message broker. Authorization facility  may be configured to perform any other authorization operation as may serve a particular implementation.","Registration management facility  may be configured to perform any registration management operation associated with one or more software applications and\/or message brokers. For example, registration management facility  may be configured to maintain a software application registration table comprising software application registration data configured to indicate a current registration status of one or more software applications.","To illustrate,  shows an exemplary software application registration table  comprising software application registration data that may be maintained by global directory service subsystem . The software application registration data may be maintained in the form of a look-up table, in a database, and\/or in any other manner as may serve a particular implementation.","As shown in , software application registration table  indicates a current registration type (e.g., static or temporary) of one or more software applications each currently associated with (e.g., connected to) one of a plurality of message brokers. In the example of , six software applications are each currently registered with one of four message brokers. Each software application has a unique name. For example, the first software application listed in table  is named \u201capplication ,\u201d the second software application listed in table  is named \u201capplication ,\u201d etc. Table  may further include the name of a message broker to which each of the software applications listed in table  is registered. For example, table  shows that the software application named \u201capplication \u201d is registered with a message broker named \u201cbroker A\u201d, the software application named \u201capplication \u201d is registered with message a message broker named \u201cbroker D\u201d, etc. The last column of table  shows the current registration type of the software applications included in table . For example, table  shows that the software application named \u201capplication \u201d is statically registered with broker A, the software application named \u201capplication \u201d is temporarily registered with broker D, etc.","In some examples, registration management facility  may dynamically update software application registration table  in response to authorization facility  authorizing a software application to be temporarily registered with a message broker. For example, registration management facility  may dynamically include an entry in software application registration table  that is configured to indicate that the software application is temporarily registered with the message broker.","To illustrate, authorization facility  may authorize a software application named \u201capplication \u201d to be temporarily registered with a message broker named \u201cbroker B\u201d in accordance with a universal registration heuristic. In response, registration management facility  may dynamically include an entry configured to indicate that the software application named \u201capplication \u201d is temporarily registered with broker B in software application registration table .  shows software application registration table  after such an entry (e.g., entry ) has been added to table . In this manner, the registration data associated with the software application named \u201capplication \u201d may be accessed and used by a message broker to appropriately route a message to the software application named \u201capplication .\u201d","Returning to , registration management facility  may be further configured to detect a disconnecting of a temporarily registered software application from a message broker. In response, registration management facility  may dynamically unregister the software application from the message broker. For example, registration management facility  may remove an entry corresponding to the software application from a software application registration table. In this manner, the software application registration table may no longer indicate that the software application is registered with the message broker.","In some examples, after a software application has been unregistered with a message broker, communication facility  may receive a request for the software application to be temporarily registered with another message broker in accordance with the universal registration heuristic. Authorization facility  may authorize the registration of the software application with the other message broker in a manner similar to that described above. Registration management facility  may dynamically update, in response to the authorization of the software application to be temporarily registered with the other message broker, the software application registration table to include an entry configured to indicate that the software application is temporarily registered with the other message broker. An example of such updating will be provided in more detail below.","After a software application has been unregistered from a message broker, registration management facility  may automatically notify one or more other message brokers that the software application has been unregistered from the message broker. These one or more other message brokers may include one or more message brokers that had obtained registration information associated with the software application prior to the software application being unregistered from the message broker.","For example, a first message broker may query global directory service subsystem  to obtain registration information associated with the software application (i.e., the name of a second message broker with which the software application is registered) in order to route a message to the software application. The first message broker may then store the registration information in a local cache to avoid having to query global directory service subsystem  for subsequent messages intended for the software application. When the software application becomes unregistered from the second message broker, registration management facility  may automatically notify the first message broker and direct the first message broker to update the stored registration information with information indicating that the software application has been unregistered from the second message broker. When the software application is re-registered with another message broker (e.g., a third message broker) at a later time, registration management facility  may again notify the first message broker that the software application has been re-registered with the other message broker. In this manner, the first message broker may appropriately route messages to the software application, regardless of the particular message broker with which the software application is registered.","In some examples, registration management facility  may detect a deactivation of a message broker to which a software application is currently registered. For example, registration management facility  may detect that the message broker has lost power, become unable to relay messages, and\/or otherwise ceased being able to communicate. In response, registration management facility  may dynamically unregister the software application from the message broker. In this manner, the software application may be dynamically re-registered with another message broker that is currently active, thereby maintaining the ability of the software application to send and receive messages.","Registration management facility  may be additionally or alternatively configured to detect a deactivation of a message broker by detecting a failure by the message broker to transmit an active status notification to global directory service subsystem . The active status notification may include data representative of an active status of the message broker and may be transmitted by the message broker to global directory service subsystem  on a periodic basis. If registration management facility  fails to receive the active status notification during a predetermined amount of time, registration management facility  may determine that the message broker has become deactivated and dynamically unregister the software application from the message broker.","In some examples, a message broker may terminate abruptly and restart immediately thereafter. Registration management facility  may be configured to detect the abrupt termination and restarting of the message broker and, in response, dynamically unregister the software application from the message broker. Registration management facility  may detect the abrupt termination and restarting of the message broker by detecting a start time transmitted thereto by the message broker during a startup procedure and\/or in any other manner as may serve a particular implementation.","In some examples, registration management facility  may be configured to maintain a permissions information table configured to indicate a list of software applications authorized to employ universal registration. To illustrate,  shows an exemplary permissions information table  that may be maintained by registration management facility . The permissions information may be maintained in the form of a lookup table, a database, and\/or in any other manner as may serve a particular implementation and may be input by personnel associated with system  and\/or any other manner as may serve a particular implementation.","As shown in , permissions information table  may include a list of names and\/or user IDs of software applications authorized to employ universal registration. In the example of , software applications named \u201capplication \u201d and \u201capplication \u201d are authorized to employ universal registration. The user ID may include a unique identifier associated with each software application and may be used to prevent unauthorized impersonation of a software application and\/or hijacking of the software application. It will be recognized, however, that permissions information table  may only include the name of each authorized software application in some examples. If a name and\/or user ID of a software application is not listed in table , authorization facility  may prevent the software application from being temporarily registered with the message broker.","Returning to , storage facility  may be configured to maintain software application registration data  (e.g., information that may be included in software application registration table ), permissions data  (e.g., information that may be included in permissions information table ), broker information data  descriptive of or otherwise corresponding to one or more message brokers, and\/or any other data as may serve a particular implementation.","Broker information data  may include information descriptive of or otherwise corresponding to message broker subsystem . For example, broker information data  may include a list of broker names and corresponding IP addresses and location port numbers. Broker information data  may be registered dynamically and\/or statically as may serve a particular implementation.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 9","b":["600","106"]},"As shown in , broker information table  may include a list of broker names, location IP addresses, and location port numbers associated with each of a plurality of message brokers implementing message broker subsystem . The information included within broker information table  may be accessed by one or more message brokers and\/or software applications to determine appropriate delivery instructions for messages to be transmitted from one software application to another.","In some examples, storage facility  may be implemented by a main storage device and one or more backup storage devices. Data maintained by storage facility  may be synchronized between the main storage device and the one or more backup storage devices. In this manner, global directory service subsystem  may use the one or more backup storage devices if the main storage device fails. Moreover, the data stored within the main storage device and\/or the one or more backup storage devices may be accessed in the event of an abrupt termination and restarting of global directory service subsystem . In this manner, registration data associated with one or more software applications may be preserved.","In some examples, global directory service subsystem  is implemented by multiple global directory service servers. Each server may be located at a distinct location, for example. In some examples, the data maintained by each global directory service server may be synchronized so that each global directory service server always has current registration data associated with each software application and message broker that is a part of system .",{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 10","FIG. 10","FIG. 10"],"b":["1000","1000","106"]},"In step , a global directory service subsystem receives a request for a software application to be temporarily registered with a message broker in accordance with a universal registration heuristic. The request may be received in any suitable manner as may serve a particular implementation.","In step , a global directory service subsystem authorizes, in response to the request and in accordance with permission information associated with the software application and maintained by the global directory service subsystem, the software application to be temporarily registered with the message broker. Global directory service subsystem may perform the authorization in any of the ways described herein.","In step , the global directory service subsystem dynamically updates, in response to the authorizing, software application registration data maintained by the global directory service subsystem to indicate that the software application is temporarily registered with the message broker. The global directory service subsystem may dynamically update the software application registration data in any of the ways described herein.","Specific implementations and examples of the universal registration systems and methods described herein will now be described in connection with . It will be recognized that the implementations and examples described in connection with  are merely illustrative of the many possible implementations and examples of the systems and methods described herein.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 11","b":["1100","104","1102","1102","1","1102","2","1102","3","1102","4","1104","1104","1","1104","6","1102","1106","1108","1108","1","1108","4","106","1106"]},"Each message broker  may be associated with one or more software applications. For example, message broker - is associated with a software application - named \u201capplication \u201d, a software application - named \u201capplication \u201d, and a software application - named \u201capplication \u201d. Likewise, message broker - is associated with a software application - named \u201capplication \u201d and message broker - is associated with a software application - named \u201capplication \u201d. In the example of , message broker - is not associated with any software application.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 12","FIG. 11","FIG. 12"],"b":["1200","1100","1106","1200","1110","1","1110","3","1110","4","1110","5","1110","6","1102","1110","1","1110","3","1110","4","1110","5","1110","6","1102","1110","1","1110","6","1102","1","1102","2","1110","1","1110","6","1102","1","1106","1110","6","1110","6","1102","2","1102","1","1110","6","1102","2"]},"At some point in time, another software application named \u201capplication \u201d may initiate a connection with message broker - and transmit a message to message broker - indicating that the software application intends to temporarily register with message broker - in accordance with a universal registration heuristic. Message broker - may authenticate the software application, as described above, and then transmit a request to global directory service server  for the software application to be temporarily registered with message broker - in accordance with a universal registration heuristic.","In response, global directory service server  may verify that the software application is not already registered with another message broker. For example, global directory service server  may search for the name of the software application (i.e., \u201capplication \u201d) in software application registration table . If the name is found in software application registration table , global directory service server  may prevent the software application from being registered with message broker -.","Global directory service server  may further verify that the software application is authorized to operate in accordance with a universal registration heuristic. For example, global directory service server  may verify that the name (and, optionally, a user ID) of the software application are included in a permissions information table (e.g., permissions information table ) maintained by global directory service server .","After verifying that the software application is not already registered with another message broker and that the software application is included in the permissions information table, global directory service server  may inform message broker - that it may temporarily register the software application with message broker -.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 13","FIG. 13","FIG. 13"],"b":["1100","2","1110","2","1102","4","1110","2","1102","4","1110"]},{"@attributes":{"id":"p-0079","num":"0078"},"figref":["FIG. 14","FIG. 14"],"b":["1200","1110","2","1102","4","1110","2","1102","4","1106","1200","1402","1110","2","1102","4","1102","1","1102","3","1106","1110","2"]},"In some examples, message broker - may enter into an inactive state in which it is unable to communicate with other message brokers  and\/or global directory service server . Global directory service server  may detect the inactive state and unregister software application - from message broker - by removing entry  from software application registration table .","Because software application - is authorized to employ universal registration, software application - may subsequently register with another message broker  using a similar process as that described above in connection with message broker -. For example,  shows that software application - may establish a temporary registration with message broker -.  shows that after global directory service server  authorizes the temporary registration of software application - with message broker -, global directory service server  may dynamically add an entry  to software application registration table  indicating that software application - is now registered with message broker -.","In certain embodiments, one or more of the components and\/or processes described herein may be implemented and\/or performed by one or more appropriately configured computing devices. To this end, one or more of the systems and\/or components described above may include or be implemented by any computer hardware and\/or computer-implemented instructions (e.g., software) embodied on a non-transitory computer-readable medium configured to perform one or more of the processes described herein. In particular, system components may be implemented by one physical computing device or may be implemented by more than one physical computing device. Accordingly, system components may include any number of computing devices, and may employ any of a number of computer operating systems.","In certain embodiments, one or more of the processes described herein may be implemented at least in part as instructions executable by one or more computing devices. In general, a processor (e.g., a microprocessor) receives instructions, from a tangible computer-readable medium, (e.g., a memory, etc.), and executes those instructions, thereby performing one or more processes, including one or more of the processes described herein. Such instructions may be stored and\/or transmitted using any of a variety of known non-transitory computer-readable media.","A non-transitory computer-readable medium (also referred to as a processor-readable medium) includes any non-transitory medium that participates in providing data (e.g., instructions) that may be read by a computer (e.g., by a processor of a computer). Such a non-transitory medium may take many forms, including, but not limited to, non-volatile media and\/or volatile media. Non-volatile media may include, for example, optical or magnetic disks and other persistent memory. Volatile media may include, for example, dynamic random access memory (\u201cDRAM\u201d), which typically constitutes a main memory. Common forms of non-transitory computer-readable media include, for example, a floppy disk, flexible disk, hard disk, magnetic tape, any other magnetic medium, a CD-ROM, DVD, any other optical medium, a RAM, a PROM, an EPROM, a FLASH-EEPROM, any other memory chip or cartridge, or any other non-transitory medium from which a computer can read.",{"@attributes":{"id":"p-0085","num":"0084"},"figref":["FIG. 17","FIG. 17","FIG. 17","FIG. 17","FIG. 17"],"b":["1700","1700","1702","1704","1706","1708","1710","1700","1700"]},"Communication interface  may be configured to communicate with one or more computing devices. Examples of communication interface  include, without limitation, a wired network interface (such as a network interface card), a wireless network interface (such as a wireless network interface card), a modem, and any other suitable interface. Communication interface  may additionally or alternatively provide such a connection through, for example, a local area network (such as an Ethernet network), a personal area network, a telephone or cable network, a satellite data connection, a dedicated URL, or any other suitable connection. Communication interface  may be configured to interface with any suitable communication media, protocols, and formats, including any of those mentioned above.","Processor  generally represents any type or form of processing unit capable of processing data or interpreting, executing, and\/or directing execution of one or more of the instructions, processes, and\/or operations described herein. Processor  may direct execution of operations in accordance with one or more applications  or other computer-executable instructions such as may be stored in storage device  or another non-transitory computer-readable medium.","Storage device  may include one or more data storage media, devices, or configurations and may employ any type, form, and combination of data storage media and\/or device. For example, storage device  may include, but is not limited to, a hard drive, network drive, flash drive, magnetic disc, optical disc, random access memory (\u201cRAM\u201d), dynamic RAM (\u201cDRAM\u201d), other non-volatile and\/or volatile data storage units, or a combination or sub-combination thereof. Electronic data, including data described herein, may be temporarily and\/or permanently stored in storage device . For example, data representative of one or more executable applications  (which may include, but are not limited to, one or more of the software applications described herein) configured to direct processor  to perform any of the operations described herein may be stored within storage device . In some examples, data may be arranged in one or more databases residing within storage device .","I\/O module  may be configured to receive user input and provide user output and may include any hardware, firmware, software, or combination thereof supportive of input and output capabilities. For example, I\/O module  may include hardware and\/or software for capturing user input, including, but not limited to, a keyboard or keypad, a touch screen component (e.g., touch screen display), a receiver (e.g., an RF or infrared receiver), and\/or one or more input buttons.","I\/O module  may include one or more devices for presenting output to a user, including, but not limited to, a graphics engine, a display (e.g., a display screen, one or more output drivers (e.g., display drivers), one or more audio speakers, and one or more audio drivers. In certain embodiments, I\/O module  is configured to provide graphical data to a display for presentation to a user. The graphical data may be representative of one or more graphical user interfaces and\/or any other graphical content as may serve a particular implementation.","In some examples, any of the facilities described herein may be implemented by or within one or more components of computing device . For example, one or more applications  residing within storage device  may be configured to direct processor  to perform one or more processes or functions associated with communication facility , messaging facility , communication facility , delivery facility , registration facility , communication facility , authorization facility , and\/or registration management facility . Likewise, storage facility , storage facility , and\/or storage facility  may be implemented by or within storage device .","In the preceding description, various exemplary embodiments have been described with reference to the accompanying drawings. It will, however, be evident that various modifications and changes may be made thereto, and additional embodiments may be implemented, without departing from the scope of the invention as set forth in the claims that follow. For example, certain features of one embodiment described herein may be combined with or substituted for features of another embodiment described herein. The description and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings illustrate various embodiments and are a part of the specification. The illustrated embodiments are merely examples and do not limit the scope of the disclosure. Throughout the drawings, identical or similar reference numbers designate identical or similar elements.",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIGS. 11-16","FIG. 1","FIG. 10"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 17"}]},"DETDESC":[{},{}]}
