---
title: Retooling lock interfaces for using a dual mode reader writer lock
abstract: A method, system, and computer usable program product for retooling lock interfaces for using a dual mode reader writer lock. An invocation of a method is received using an interface. The method is configured to operate on a lock associated with a resource in a data processing system. A determination is made whether the lock is an upgraded lock. The upgraded lock is the DML operating in an upgraded mode. An operation corresponding to the method is executed on the DML, if the lock is the upgraded lock.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08943502&OS=08943502&RS=08943502
owner: International Business Machines Corporation
number: 08943502
owner_city: Armonk
owner_country: US
publication_date: 20100315
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["The present invention is related to similar subject matter of co-pending and commonly assigned U.S. patent application Ser. No. 12\/723,717 entitled \u201cDUAL MODE READER WRITER LOCK,\u201d filed on Mar. 15, 2010, and U.S. patent application Ser. No. 12\/723,714 entitled \u201cUSING A DUAL MODE READER WRITER LOCK,\u201d filed on Mar. 15, 2010, which are hereby incorporated by reference.","1. Field of the Invention","The present invention relates generally to an improved data processing system, and in particular, to a computer implemented method for improving the reading and writing of data. Still more particularly, the present invention relates to a computer implemented method, system, and computer usable program code for using a dual mode reader writer lock (DML).","2. Description of the Related Art","Processes executing in a data processing system read and write data associated with a variety of resources. A data file, a memory location, and an address on a disk are some examples of such a resource.","When a process executing in a data processing system has to read or write data from or to a resource, the operating system has to sequence and control the read\/write requests. This control is important in ensuring that read and write requests for the same resource by multiple processes do not compromise the integrity of the data of that resource. For example, a process should not be allowed to read data while another process is writing that data. Multiple processes may be allowed to read the same data simultaneously but not in conjunction with one or more processes attempting to write that data.","To implement these and other rules for reading and writing data, operating systems implement locks. A read write lock is a data structure whose data has to be set or reset, or incremented or decremented before a process can read or write the data of an associated resource. Such a lock is also known as a reader writer lock (RWL) or a complex lock.","Setting or incrementing a RWL is called acquiring or getting a lock. Resetting or decrementing a RWL is called releasing or freeing a lock. A reader lock or a read lock is a state of a RWL that permits a process or thread to read the resource associated with the RWL. Multiple processes or threads can concurrently acquire a read lock on a common resource. A writer lock or a write lock is a state of a RWL that permits a thread to write data to the resource associated with the RWL. Only a single thread can acquire a single write lock on the resource at any given time, and no thread can hold or acquire a read lock while another thread holds a write lock on the resource.","Typically, a RWL is implemented using a single data word. A data word is a specific number of bits that are handled together in the architecture of an operating system. In one case, the size of a data word may be the number of bits that can be held in a single register in a particular processor of the data processing system. In another case, the data word size may be the minimum number of bits can be transferred from a given memory to a given processor. Commonly available operating systems have implemented data word sizes of sixteen, thirty two, sixty four, and one hundred and twenty eight bits. A data word may be of any size suitable for a particular implementation.","When an operating system manipulates a RWL, that manipulation must not be interrupted for the integrity of the lock. In other words, all the instructions for setting or resetting, or incrementing or decrementing a RWL must be executed from start to finish without being interrupted or preempted by another process. An operation whose set of instructions must be executed in this manner is called an atomic operation. Manipulation of a RWL is an atomic operation. Acquiring a lock and releasing a lock are examples of lock manipulations performed as atomic operations.","At any given time during the operation of a data processing system, several processes or threads may wish to acquire a lock for a common resource in close temporal proximity of one another. Several other processes or threads that have already acquired the lock may wish to release the lock at or near the same time. Some processes or threads wishing to acquire or release the lock may deal with read locks on the resource, while others may deal with write locks.","The illustrative embodiments provide a method, system, and computer usable program product for retooling lock interfaces for using a dual mode reader writer lock (DML). An embodiment receives an invocation of a method using an interface. The method is configured to operate on a lock associated with a resource in a data processing system. The embodiment determines whether the lock is an upgraded lock. The upgraded lock is the DML operating in an upgraded mode. The embodiment executes an operation on the DML corresponding to the method, if the lock is the upgraded lock.","Under certain circumstances, several atomic operations for each request to acquire or release a lock from several processes or threads may be pending in a data processing system. The invention recognizes that inundating the data processing system with several atomic operations for a RWL can adversely affect the performance of the data processing system.","For the clarity of the description, \u201cprocess\u201d is used to mean a process or a thread of a process. An operation with respect to a process is similarly applicable to a thread, and an operation with respect to a thread is similarly applicable to a process within the scope of the invention.","The invention further recognizes that under certain other circumstances, the data structure of the lock may be saturated and may not be able to accommodate any more lock requests. For example, a data word of hypothetical size of two bits will be saturated if four threads are already holding read locks on the associated resource because two bits can be used to count only from 0 to 4. A fifth thread requesting a read lock cannot be accommodated until one of the other four processes holding a read lock releases its read lock. The invention recognizes that a backlog of atomic operations waiting to execute on a RWL in a data processing system can also adversely affect the performance of the data processing system.","These circumstances are example scenarios where contention for RWLs arises in a data processing system. The invention recognizes that a contention for RWL is likely in a data processing system when the number of processes or threads contending for a RWL increase beyond a threshold number. The invention further recognizes that as the number of processors in a data processing system increase, such as in a multiprocessor data processing system or logical partition, the number of processes and threads also rises leading to the RWL contentions.","The illustrative embodiments used to describe the invention generally address and solve the above-described problems and other problems related to RWLs. The illustrative embodiments provide a method, computer usable program product, and data processing system for retooling lock interfaces for using a dual mode reader writer lock.","An embodiment of the invention may enable the data processing system to process atomic operations for a RWL with a reduced affect on the system performance as compared to the presently configured data processing system when the number of atomic operations reaches a threshold number. For example, for the same number of atomic operations performed for a single RWL, a data processing system implementing an embodiment of the invention may demonstrate better system performance as compared to a data processing system without the embodiment.","An embodiment of the invention may also allow more processes and threads to acquire and release locks concurrently with a diminished adverse affect on the system performance as compared to a presently configured data processing system. For example, for the same system performance, a data processing system employing an embodiment of the invention may allow more processes to acquire read locks on a resource as compared to a data processing system without the embodiment.","The illustrative embodiments are described with respect to data, data structures, indicators, and identifiers only as examples. Such descriptions are not intended to be limiting on the invention. For example, an illustrative embodiment described with respect to 64 bit data word may be implemented using a 128 bit data word in a similar manner within the scope of the invention.","Furthermore, the illustrative embodiments may be implemented with respect to any type of data processing system. For example, an illustrative embodiment described with respect to a multiprocessor standalone data processing system may be implemented in a multiprocessor logical partition system within the scope of the invention.","The illustrative embodiments are further described with respect to certain parameters, attributes, and configurations only as examples. Such descriptions are not intended to be limiting on the invention. An embodiment of the invention may be implemented with respect to any type of data processing system, such as, for example, any type of client system, server system, platform, or a combination thereof.","An application implementing an embodiment may take the form of data objects, code objects, encapsulated instructions, application fragments, services, and other types of software implementations available in a data processing environment. For example, Java\u00ae Virtual Machine (JVM\u00ae), Java\u00ae object, an Enterprise Java Bean (EJB\u00ae), a servlet, or an applet may be manifestations of an application with respect to which, within which, or using which, the invention may be implemented. (Java, JVM, EJB, and other Java related terminologies are registered trademarks of Sun Microsystems, Inc. in the United States and other countries.)","An illustrative embodiment may be implemented in hardware, software, or a combination thereof. The examples in this disclosure are used only for the clarity of the description and are not limiting on the illustrative embodiments. Additional or different information, data, operations, actions, tasks, activities, and manipulations will be conceivable from this disclosure for similar purpose and the same are contemplated within the scope of the illustrative embodiments.","The illustrative embodiments are described using specific code, data structures, file systems, designs, architectures, layouts, schematics, and tools only as examples and are not limiting on the illustrative embodiments. Furthermore, the illustrative embodiments are described in some instances using particular data processing environments only as an example for the clarity of the description. The illustrative embodiments may be used in conjunction with other comparable or similarly purposed structures, systems, applications, or architectures.","Any advantages listed herein are only examples and are not intended to be limiting on the illustrative embodiments. Additional or different advantages may be realized by specific illustrative embodiments. Furthermore, a particular illustrative embodiment may have some, all, or none of the advantages listed above.","With reference to the figures and in particular with reference to , these figures are example diagrams of data processing environments in which illustrative embodiments may be implemented.  are only examples and are not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. A particular implementation may make many modifications to the depicted environments based on the following description.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 1","b":["100","100","102","102","100","102","104","106","102","108","100"]},"In addition, clients , , and  couple to network . A data processing system, such as server  or , or client , , or  may contain data and may have software applications or software tools executing thereon.","Server  may include multiple processors . Other depicted data processing systems may also include more than one processor in a similar manner (not shown). Server  may further include DML . DML  may be a DML according to an embodiment of the invention. DML  may be implemented in server  in conjunction with other RWLs without limitation. Furthermore, DML  may be configured in a data processing system other than server , such as in server , and may be accessible to server  over network .","Servers  and , storage unit , and clients , , and  may couple to network  using wired connections, wireless communication protocols, or other suitable data connectivity. Clients , , and  may be, for example, personal computers or network computers.","In the depicted example, server  may provide data, such as boot files, operating system images, and applications to clients , , and . Clients , , and  may be clients to server  in this example. Clients , , , or some combination thereof, may include their own data, boot files, operating system images, and applications. Data processing environment  may include additional servers, clients, and other devices that are not shown.","In the depicted example, data processing environment  may be the Internet. Network  may represent a collection of networks and gateways that use the Transmission Control Protocol\/Internet Protocol (TCP\/IP) and other protocols to communicate with one another. At the heart of the Internet is a backbone of data communication links between major nodes or host computers, including thousands of commercial, governmental, educational, and other computer systems that route data and messages. Of course, data processing environment  also may be implemented as a number of different types of networks, such as for example, an intranet, a local area network (LAN), or a wide area network (WAN).  is intended as an example, and not as an architectural limitation for the different illustrative embodiments.","Among other uses, data processing environment  may be used for implementing a client server environment in which the illustrative embodiments may be implemented. A client server environment enables software applications and data to be distributed across a network such that an application functions by using the interactivity between a client data processing system and a server data processing system. Data processing environment  may also employ a service oriented architecture where interoperable software components distributed across a network may be packaged together as coherent business applications.","With reference to , this figure depicts a block diagram of a data processing system in which illustrative embodiments may be implemented. Data processing system  is an example of a computer, such as server  or client  in , in which computer usable program code or instructions implementing the processes may be located for the illustrative embodiments.","In the depicted example, data processing system  employs a hub architecture including North Bridge and memory controller hub (NB\/MCH)  and south bridge and input\/output (I\/O) controller hub (SB\/ICH) . Processing unit , main memory , and graphics processor  are coupled to north bridge and memory controller hub (NB\/MCH) . Processing unit  may contain one or more processors and may be implemented using one or more heterogeneous processor systems. Graphics processor  may be coupled to the NB\/MCH through an accelerated graphics port (AGP) in certain implementations.","In the depicted example, local area network (LAN) adapter  is coupled to south bridge and I\/O controller hub (SB\/ICH) . Audio adapter , keyboard and mouse adapter , modem , read only memory (ROM) , universal serial bus (USB) and other ports , and PCI\/PCIe devices  are coupled to south bridge and I\/O controller hub  through bus . Hard disk drive (HDD)  and CD-ROM  are coupled to south bridge and I\/O controller hub  through bus . PCI\/PCIe devices may include, for example, Ethernet adapters, add-in cards, and PC cards for notebook computers. PCI uses a card bus controller, while PCIe does not. ROM  may be, for example, a flash binary input\/output system (BIOS). Hard disk drive  and CD-ROM  may use, for example, an integrated drive electronics (IDE) or serial advanced technology attachment (SATA) interface. A super I\/O (SIO) device  may be coupled to south bridge and I\/O controller hub (SB\/ICH) .","An operating system runs on processing unit . The operating system coordinates and provides control of various components within data processing system  in . The operating system may be a commercially available operating system such as Microsoft\u00ae Windows\u00ae (Microsoft and Windows are trademarks of Microsoft Corporation in the United States and other countries), or Linux\u00ae (Linux is a trademark of Linus Torvalds in the United States and other countries). An object oriented programming system, such as the Java\u2122 programming system, may run in conjunction with the operating system and provides calls to the operating system from Java\u2122 programs or applications executing on data processing system  (Java is a trademark of Sun Microsystems, Inc., in the United States and other countries).","Instructions for the operating system, the object-oriented programming system, and applications or programs are located on storage devices, such as hard disk drive , and may be loaded into main memory  for execution by processing unit . The processes of the illustrative embodiments may be performed by processing unit  using computer implemented instructions, which may be located in a memory, such as, for example, main memory , read only memory , or in one or more peripheral devices.","The hardware in  may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash memory, equivalent non-volatile memory, or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in . In addition, the processes of the illustrative embodiments may be applied to a multiprocessor data processing system.","In some illustrative examples, data processing system  may be a personal digital assistant (PDA), which is generally configured with flash memory to provide non-volatile memory for storing operating system files and\/or user-generated data. A bus system may comprise one or more buses, such as a system bus, an I\/O bus, and a PCI bus. Of course, the bus system may be implemented using any type of communications fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture.","A communications unit may include one or more devices used to transmit and receive data, such as a modem or a network adapter. A memory may be, for example, main memory  or a cache, such as the cache found in north bridge and memory controller hub . A processing unit may include one or more processors or CPUs.","The depicted examples in  and above-described examples are not meant to imply architectural limitations. For example, data processing system  also may be a tablet computer, laptop computer, or telephone device in addition to taking the form of a PDA.","Presently, software code exists that can be utilized for manipulating a RWL. Such software code is exposed to applications that wish to use the RWL via well defined application programming interface (API). The software code behind each API performs a manipulation function with respect to the presently used RWL. Applications that wish to use a RWL call one or more of these API to perform one or more of the associated functions on a RWL.","In accordance with an illustrative embodiment, a DML may take the place of a RWL in a given data processing system configuration. Accordingly, applications utilizing the RWL have to perform similar functions using the DML upon substitution.","In order to avoid having to modify the code of hundreds or thousands of applications that use locks, DML APIs should be similar to the APIs that are used for manipulating RWLs. The DML APIs should, however, implement the functions and operations behind those APIs with respect to a DML.","Configured in this manner, DML interfaces appear no different from the existing RWL interfaces to an application but the application can transparently use a DML where the application was previously using a RWL. From an operating system's point of view, the operating system can continue to expose familiar APIs to existing and new applications without having to address issues such as backward compatibility, support for multiple sets of lock types, or support for multiple sets of APIs.","With reference to , this figure depicts a block diagram of an example operation of an initializing API in accordance with an illustrative embodiment. Lock  may be a RWL or an original lock element of a DML as described elsewhere in this disclosure.","To expand a DML or an original lock element thereof, the DML has to be expandable. The initialization of the expandable indicator in the lock word occurs by default for all locks initialized via the API lock_init( ) or another similar API. Upon initialization in this manner, the expandable indicator of lock  is set, for example as shown in lock . Lock  is an example expandable original lock element showing the expandable indicator as having been set to a value 1.","The particular API depicted in this figure is only an example and is not intended to be limiting on the invention. Any existing API for initializing a RWL can be modified in a similar manner to set the expandable indicator in a corresponding DML structure within the scope of the invention.","With reference to , this figure depicts a block diagram of an example operation of another retooled API in accordance with an illustrative embodiment. Lock  may be similar to lock  in .","In some cases, it may be desirable to not use an expanded lock structure, such as a DML with the expanded elements. In one embodiment, if the expandable indicator is reset, or set to a particular value, such as 0, the lock structure cannot be expanded, as shown in lock . API lock_ctl( ) or another similar API can be used to turn off or reset the expandable indicator so that a lock cannot be expanded. Lock  is an example of a non-expandable original lock element showing the expandable indicator as having been reset to a value 0.","With reference to , this figure depicts a block diagram of an example operation of another API in accordance with an illustrative embodiment. Lock  may be a presently used RWL.","In an embodiment, locks may be initialized differently for being an expandable lock or a non-expandable lock. For example, locks that are not initialized via lock_init( ) as shown in , may not be expandable. As shown in this figure, RWL  may be initialized using an API different from lock_init( ) to form non-expandable RWL . Thus, if desired, RWLs, non-expandable DMLs, and expandable DMLs can coexist in a data processing system and may be initialized differently from one another.","With reference to , this figure depicts a block diagram of a lock cache in accordance with an illustrative embodiment. Memory  may be a lock cache, and may be implemented using main memory  in , or any other suitable data storage device or location in a data processing system without limitation.","A number of lock structures, such as storage for DML elements, may be pre-allocated at system initialization time so that those structures are available for lock transition. In one embodiment, a memory segment, such as memory , may be allocated for the DML elements to be used later as needed during transitions. The initial address of the segment may be kept in a global pointer.","In one embodiment, space  for lock structures may include several pages of one or more desirable page sizes. Space  may be pre-allocated and pinned in memory  at system initialization.","A number of pages in space  may depend on the volume of lock contentions encountered during the operation of a data processing system. In a system where lock contention is below a threshold volume, the number of pages in space  may be small, such as below a specified number of pages. In a system where lock contention is between two threshold volumes, the number of pages in space  may be a number in a specified range.","Memory  may be re-populated or space may be added to memory  if the pre-allocated cache is drained during the data processing system operation. For example, in one data processing environment, suitable code may be added to the xmgc kproc APIs to re-populate or extend the cache.","With reference to , this figure depicts a block diagram of the operation of another retooled interface in accordance with an illustrative embodiment. Lock  may be similar to expandable original lock  in .","Lock  may be configured as expandable but may not yet be expanded. For example, lock  may have the expandable indicator set and the expanded indicator reset in such a configuration.","In one example embodiment, during the transition of lock  from expandable mode to expanded mode, the interlock indicator is set and an expanded lock element is allocated. For example, a get_from_list( ) API may be modified to allocate expanded lock element  from pre-allocated pinned page . Pre-allocated pinned page  may be a page in space  in . Index  of the expanded lock element  is maintained in expanded original lock element . Expanded original lock element  is the expanded configuration of lock  and has both the expandable indicator and the expanded indicator set.","With reference to , this figure depicts a block diagram of the operation of another retooled interface in accordance with an illustrative embodiment. Expanded original lock element  may be similar to expanded original lock element  in . Expanded lock element  in pre-allocated pinned page  may be similar to expanded lock element  in pre-allocated pinned page  in . Expanded original lock element  may have the expandable indicator and the expanded indicator set to specific values to indicate the expanded configuration of the DML.","API lock_free( ) can be modified to free expanded lock element . Freeing expanded lock element  in pre-allocated pinned page  causes pre-allocated pinned page  to transform to pre-allocated pinned page .","Once expanded lock element  is freed, expanded original lock element  transforms to original lock element , which may or may not be expanded depending on whether additional expanded lock elements remain indexed within original lock element . If no more expanded lock elements are indexed within original lock element , the expandable indicator may remain set for allowing future expansion and the expanded indicator may be reset. If one or more expanded lock elements are still indexed within original lock element , the expandable indicator and the expanded indicator may each remain set to indicate the expanded configuration.","API lock_free( ) may be modified such that the space freed in pre-allocated pinned page  by freeing expanded lock element  can be used again by same or different expanding DML in the future. In one embodiment, expanded lock element structures may preferably be allocated within the context of a modified lock_read( ) operation for maintaining the integrity of the lock.","With reference to , this figure depicts a flowchart of an example process of using a retooled interface with a DML in accordance with an illustrative embodiment. Process  may be implemented in an application for administrating locks in a data processing system, such as in an operating system or a component thereof of server  in .","Process  begins by receiving an invocation of an interface to perform an operation on a lock (step ). The interface invoked may be the interface of a retooled existing method designed to work with a RWL or of a new method designed to work with a DML. Process  determines whether the lock that is the subject of the operation is an upgraded lock (step ).","If the lock is not an upgraded lock (\u201cNo\u201d path of step ) the lock may be a RWL or a downgraded DML as described elsewhere in this disclosure. Accordingly, process  determines whether to upgrade the lock (step ). If process  upgrades the lock (\u201cYes\u201d path of step ), process  may perform the upgrade of the lock (step ). For performing step , process  may invoke an upgrading process (not shown) as described elsewhere in this disclosure. Following an upgrade of the lock in step , process  returns to step .","If process  decides not to upgrade the lock (\u201cNo\u201d path of step ), process  performs the operation of the invocation using a RWL or a downgraded DML (step ).","If the lock is an upgraded lock (\u201cYes\u201d path of step ), process  performs the desired operation of the invocation in the backing high level language mode (step ). Backing high level language mode is simply the execution of a part of the logic of process  that is coded in a high level language, assuming that another part of process  is coded in assembler or another low level language.","Process  maintains the expandable and expanded indicators, and the index of expanded lock elements as needed for the upgraded lock (step ). Process  ends thereafter.","A high level programming language is a programming language that uses abstracted concepts of data processing system and provides a user a user-friendly, human understandable programming lexicon. C, C++, and Java are some examples of high level programming languages.","A low level programming language is a programming language that employs a lower level of abstraction or no abstraction of the concepts of a data processing system. Machine language or binary code is regarded as the lowest level language. Assembly language, or assembler code, is regarded as another low level programming language.","Process  may be particularly useful for modifying the low level programming language code, generally assembler code, that implement lock_read( ) lock_write( ) lock_done( ) and any other APIs or routines that include any low level language \u2018front end\u2019. The assembler routines are generally very short and highly optimized paths to handle the most frequent cases, which do not involve upgrade or contention. These routines are generally the logical \u2018front end\u2019 to a high level programming language code that each of these short routines calls to compute the more complicated paths.","In one embodiment, the logic to handle upgraded DMLs may be implemented in a high level language, such as in \u2018c\u2019 language. An implementation of process  may include a check in a low level programming language, such as in assembler code, to determine if the lock is upgraded as in step . If the lock is upgraded, the implementation may branch to the \u2018c\u2019 code or another high level language code, which is more convenient for programming the logic code than the assembler language. Such a switch is a part of the backing higher level language mode operation of process . The assembler code and the higher level language code may together implement portions of process  in some combination.","Many commonly implemented interfaces for using locks can be modified or retooled to operate using DML of an embodiment. Pseudo code for implementing some example retooled interfaces is provided here to illustrate the mechanism of using these APIs, routines, functions, methods, or services with a DML. The pseudo code described here can be easily converted into functioning code in any higher or lower level programming language of choice or a combination thereof without limitation. Furthermore, the pseudo code is not intended to be comprehensive but only intended to illustrate certain considerations in implementing these interfaces for operations with a DML. Additional or different features or modifications can be integrated into existing interfaces for accomplishing similar purpose and the same are contemplated within the scope of the invention.","In the example pseudo code described herein, when an operation is set to execute \u2018atomically\u2019, a possibility exists that the atomic operation will fail. For the purposes of these examples, a failed atomic operation simply means that when the attempt is made, the data at the location does not contain the value that is expected or a race condition exists. \u2018Failure\u2019 may mean that there is a race and the logic might need to retry or re-read. In some cases the atomic operation can be performed again without retrying all the surrounding logic, depending on the circumstances. Some sections of the example pseudo code briefly describe example consequences of failure.","References to complex lock in the pseudo code refer to a DML according to an embodiment. An interface with the words \u201ccomplex_lock\u201d or other similar phrase may be an implementation with respect to an existing RWL that may continue to exist in that form of the API but operate with respect to a DML.","Other nomenclature, abbreviations, and shortened words, for example, reader, writer, waiter, tid, id, sleep, wakeup, and many others, as used in the pseudo code refer to their logically corresponding names and nomenclatures in this disclosure or as commonly used in software programming for lock manipulation. One of ordinary skill in the art will be able to identify the correspondence using this disclosure.","As one example, wakeup_c_lock interface can be retooled to operate in conjunction with a DML in the following example way:",{"@attributes":{"id":"p-0093","num":"0092"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003\u2003\u2003\u2002\/* wakeup_readers_or_id_writers option:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2002\u2009* wakes up all waiting readers down to"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2002\u2009* a waiting writer or reports the tid of the"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2002\u2009* writer at the top of the list. Waiters are"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2002\u2009* on the list in the order they arrived to wait."]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2002\u2009* returns False (0) if no waiters"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2002\u2009* returns True (1) if readers waiting"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2002\u2009* returns tid (greater than 1) if writer waiting"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2002\u2009* wakeup_writer option completes the wakeup of"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2002\u2009* a previously identified writer"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2002\u2009* unlock option unlocks the wait list that was"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2002\u2009* left locked for lock_write_to_read since it"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2002\u2009* might not be able to complete wakeup)"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2002\u2009*\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003wakeup_c_lock( lockaddr, option )"]},{"entry":[{},"\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003found readers = FALSE;"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003if unlock option"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003unlock wait list"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003lock wait list"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003retrieve list anchor"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003if wakeup_reader_or_id_writer"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003again:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002if there is a next waiter on list"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if next on list is writer"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if found_readers == FALSE"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return tid, leave wait list"]},{"entry":[{},"locked"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return found_readers"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003else"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003found readers = TRUE since we will"]},{"entry":[{},"awaken at least one"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003remove from list and wakeup this"]},{"entry":[{},"thread (make runnable)"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003goto again"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/* no more waiters *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return found_readers"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003if wakeup_writer option"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003remove and wakeup writer"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"As another example, complex_lock_sleep interface can be retooled to operate in conjunction with a DML in the following example way:",{"@attributes":{"id":"p-0095","num":"0094"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003\/* This service may support being called"]},{"entry":[{},"\u2003\u2003\u2009* with INTERLOCK already set or possibly not"]},{"entry":[{},"\u2003\u2003\u2009* set. This function inserts the calling thread"]},{"entry":[{},"\u2003\u2003\u2009*on the lock's wait list."]},{"entry":[{},"\u2003\u2003\u2009*\/"]},{"entry":[{},"\u2003\u2003int"]},{"entry":[{},"\u2003\u2003complex_lock_sleep ( lock address , type of wait,"]},{"entry":[{},"pointer to return value didsleep indicator, flag for"]},{"entry":[{},"whether interlock is already held)"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003retry:"]},{"entry":[{},"\u2003\u2003\u2003\u2003(re) read the lock word"]},{"entry":[{},"\u2003\u2003\u2003\u2003if the lock is owned by a reader or writer"]},{"entry":[{},"\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003atomically set INTERLOCK and WAITING"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003goto retry if failure to set"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003boost the priority of the lock owner if"]},{"entry":[{},"necessary"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003release interlock"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003wait on owner to wakeup at lock release"]},{"entry":[{},"\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"As another example, lock_write interface can be retooled to operate in conjunction with a DML in the following example way:",{"@attributes":{"id":"p-0097","num":"0096"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003void"]},{"entry":[{},"\u2003\u2003lock_write (lockaddr 1)"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003compute new owner (us)"]},{"entry":[{},"\u2003\u2003\u2003\u2003if we already hold the lock (recursion),"]},{"entry":[{},"handle and return"]},{"entry":[{},"\u2003\u2003retry:"]},{"entry":[{},"\u2003\u2003\u2003\u2003(re) read lock word"]},{"entry":[{},"\u2003\u2003\u2003\u2003if the lock is busy (READ_MODE set OR bits"]},{"entry":[{},"on in OWNER field),"]},{"entry":[{},"\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003atomically set WANT_WRITE if not"]},{"entry":[{},"already on"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003goto retry on failure"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003wait on lock wakeup"]},{"entry":[{},"(complex_lock_sleep)"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003when we awaken, we own the lock and"]},{"entry":[{},"return"]},{"entry":[{},"\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003not busy, so atomically set the owner"]},{"entry":[{},"\u2003\u2003\u2003\u2003goto retry on failure"]},{"entry":[{},"\u2003\u2003}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"As another example, lock_read interface can be retooled to operate in conjunction with a DML in the following example way:",{"@attributes":{"id":"p-0099","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003\u2003\u2003\/*"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2009* NAME: lock_read"]},{"entry":[{},"\u2003\u2003\u2003\u2003* FUNCTION: lock a complex lock for read access"]},{"entry":[{},"\u2003\u2003\u2003\u2003* RETURNS: no return"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2009*\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003lock_read( lock address )"]},{"entry":[{},"\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if thread owns in write mode, handle"]},{"entry":[{},"recursion and return"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003compute hash of this thread"]},{"entry":[{},"\u2003\u2003\u2003\u2003retry:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003(re) read the lock status"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003if UPGRADED bit is set \/*lock already"]},{"entry":[{},"upgraded*\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002if lock in read mode and (there is no"]},{"entry":[{},"writer"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003wanting the lock OR we slept once"]},{"entry":[{},"already)"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003compute rle address"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003read rle value"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003If reader lock is downgraded, this"]},{"entry":[{},"means a race condition so goto retry"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if READ_MODE set in the reader lock"]},{"entry":[{},"element"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically increment the reader"]},{"entry":[{},"lock element"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003goto retry on failure"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002\/* this is the optimized path *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002\u2009return;"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/* not set. this sequence required to"]},{"entry":[{},"set it *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003disable interrupts"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically set INTERLOCK in outer lock"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003enable and goto retry on failure"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically set READ_MODE and count to"]},{"entry":[{},"one in reader lock element"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if atomic update fails, it implies a"]},{"entry":[{},"race condition"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003where another thread has set"]},{"entry":[{},"READ_MODE"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically increment count (always"]},{"entry":[{},"works)"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically turn off interlock in outer"]},{"entry":[{},"lock (until success)"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002else"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002if the lock is completely free, take it"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003disable"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically set INTERLOCK in outer lock"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003goto retry on failure"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003compute reader lock element"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically set rle to READ_MODE with"]},{"entry":[{},"count 1."]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003assert this works"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically clear INTERLOCK and set"]},{"entry":[{},"READ_MODE"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003in outer lock"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003also must succeed"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003else"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003wait on wakeup lock"]},{"entry":[{},"(complex_lock_sleep)"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003goto retry"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\/* Not an upgraded lock but could be"]},{"entry":[{},"expandable *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003if WANT_WRITE is set or writer owns, wait"]},{"entry":[{},"for wakeup lock"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003if the lock is held in read mode and we've"]},{"entry":[{},"already waited"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if EXPANDABLE lock"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002if EXPANDED \/* previously *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if current count > transition value"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003upgrade lock"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003goto retry"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003else \/* never expanded before *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if current count > different"]},{"entry":[{},"transition value"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if expand and upgrade lock success"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return \/* lock held *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003else fall through"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically increment the count"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003goto retry on failure"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003if lock completely free take it"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically set lock state to READ_MODE"]},{"entry":[{},"and count1"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003goto retry on fail"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003goto retry"]},{"entry":[{},"\u2003\u2003\u2003\u2003}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"As another example, expand_and_upgrade_lock interface can be implemented to operate in conjunction with a DML in the following example way:",{"@attributes":{"id":"p-0101","num":"0100"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003\/* expand and upgrade is different than just"]},{"entry":[{},"upgrade *\/"]},{"entry":[{},"\u2003\u2003Expand and Upgrade lock (returns success\/fail)"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003disable interrupts"]},{"entry":[{},"\u2003\u2003\u2003\u2003atomically set INTERLOCK and increment count"]},{"entry":[{},"\u2003\u2003\u2003\u2003return fail on failure"]},{"entry":[{},"\u2003\u2003\u2003\u2003allocate\/init a set of reader locks"]},{"entry":[{},"\u2003\u2003\u2003\u2003atomically store READ_MODE and count to"]},{"entry":[{},"RLE(0)"]},{"entry":[{},"\u2003\u2003\u2003\u2003assert must succeed"]},{"entry":[{},"\u2003\u2003\u2003\u2003atomically store the lock index, clear"]},{"entry":[{},"INTERLOCK, clear OWNER"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003of outer lock until success"]},{"entry":[{},"\u2003\u2003\u2003\u2003return success"]},{"entry":[{},"\u2003\u2003}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"As another example, lock_done interface can be retooled to operate in conjunction with a DML in the following example way:",{"@attributes":{"id":"p-0103","num":"0102"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003\/* unlock a DML in read or write mode *\/"]},{"entry":[{},"\u2003\u2003lock_done( lock address )"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003compute hash of rle for this thread"]},{"entry":[{},"\u2003\u2003retry_enabled:"]},{"entry":[{},"\u2003\u2003\u2003\u2003(re) read lock status"]},{"entry":[{},"\u2003\u2003\u2003\u2003if UPGRADED)"]},{"entry":[{},"\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003if READ_MODE"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002compute rle address"]},{"entry":[{},"\u2003\u2003retry_decrement_read:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002read rle status"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002\/*"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002\u2009* if the reader lock element has been"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002\u2009* downgraded, we hit a race condition."]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002\u2009* Re-read the lock word because it"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002\u2009* isn't upgraded any more."]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002\u2009*\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002if RLE_DOWNGRADED"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003goto retry_enabled;"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002\/* if READ_MODE not set, must set it *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002if rl_status == 0 goto need_interlock;"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002if not the last unlocker (at least one"]},{"entry":[{},"other read lock holder)"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically decrement count"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003goto retry_decrement_read on fail"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003goto need_interlock;"]},{"entry":[{},"\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003if INTERLOCK goto retry_enabled"]},{"entry":[{},"\u2003\u2003\u2003\u2003\/* not an upgraded lock *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003if READ_MODE"]},{"entry":[{},"\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003if at least one other lock owner OR"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002last but WAITING not set (no waiters)"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002atomically decrement count"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002goto retry_enabled if fail"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002return"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003need_interlock:"]},{"entry":[{},"\u2003\u2003\u2003\u2003disable"]},{"entry":[{},"\u2003\u2003\u2003\u2003atomically set interlock"]},{"entry":[{},"\u2003\u2003\u2003\u2003enable and goto retry_enabled if failure"]},{"entry":[{},"\u2003\u2003retry:"]},{"entry":[{},"\u2003\u2003\u2003\u2003(re) read lock status"]},{"entry":[{},"\u2003\u2003\u2003\u2003\/* if this is currently an upgraded lock *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003if UPGRADED"]},{"entry":[{},"\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003if READ_MODE"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002compute rle address"]},{"entry":[{},"\u2003\u2003retry_clear_read:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002read rle status"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002rl_value = orig_rl_value ="]},{"entry":[{},"RL_VALUE(rl,hash);"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002check rle downgraded (atomically read"]},{"entry":[{},"if clearly stale)"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002if rle is already zero"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003hash = index of 1st non zero rle"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002\/* note we haven't decremented anything"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002\u2009* yet . . . we've just looked to"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002\u2009* see what would happen if we did"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002\u2009*\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003if we will be last to decrement"]},{"entry":[{},"rle[hash]"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically set rle to zero"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003goto retry_clear_read on failure"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically read other rle until"]},{"entry":[{},"non-zero entry found"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/* atomic read is a load and store"]},{"entry":[{},"back the same value atomically *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if still some other non-zero rle"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/* others remain, so *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically clear INTERLOCK"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/* note all rle are zero -- we're"]},{"entry":[{},"last owner *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if WAITING \/* there are waiters"]},{"entry":[{},"for the lock *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/* all readers down to next"]},{"entry":[{},"writer . . . note waiters queued in order..OR if a writer is"]},{"entry":[{},"next, let us know who it is w\/o actually waking up"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2009*\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003writer waiting=wakeup_c_lock"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003else"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/* downgrade when last reader"]},{"entry":[{},"unlocks with no waiters *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003downgrade the lock"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002\/* If we're waking up a writer *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002if(writer waiting)"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003store tid returned from"]},{"entry":[{},"wakeup_c_lock"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically clear owner,"]},{"entry":[{},"READ_MODE and WANT_WRITE while"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002setting WAITING if there are"]},{"entry":[{},"more waiters (returned from wakeup_c_lock)"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003make_writer_runnable \/* finish"]},{"entry":[{},"wake up *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically clear INTERLOCK"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002else \/* possibly woke up a reader"]},{"entry":[{},"or readers *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically clear INTERLOCK"]},{"entry":[{},"while conditionally"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002setting WAITING or clearing"]},{"entry":[{},"WAITING, depending"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002on whether there are more"]},{"entry":[{},"waiters besides the ones"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002we just woke up"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003else \/* still other readers left,"]},{"entry":[{},"so we're done *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002atomically clear INTERLOCK"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003enable"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\/* not an upgraded lock or lock held in"]},{"entry":[{},"write mode *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003if READ_MODE"]},{"entry":[{},"\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003if we will be last to unlock"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002\/* wake up readers or report writer to"]},{"entry":[{},"awaken *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002waiting=wakeup_c_lock( )"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003else"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002atomically decrement lock and clear"]},{"entry":[{},"INTERLOCK"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002enable"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002return;"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003else \/* unlock writer *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003possibly handle recursive lock and"]},{"entry":[{},"return.. otherwise.."]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003if there are waiters"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003lockword &= ~OWNER_MASK;"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003if ((lockword & WAITING))"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002\/* wake up readers or report writer to"]},{"entry":[{},"awaken *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002waiting=wakeup_c_lock( )"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003else \/* writer unlocking with no waiters"]},{"entry":[{},"*\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002\/* so downgrade the lock *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002if UPGRADED lock"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003downgrade the lock;"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003clk_downgrade((complex_lock_t)l);"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return;"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2002\/* If we're waking up a writer *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2002if(writer waiting)"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2002{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002store tid returned from wakeup_c_lock"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002atomically clear owner, READ_MODE"]},{"entry":[{},"and WANT_WRITE while"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003setting WAITING"]},{"entry":[{},"if there are more waiters (returned"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003from"]},{"entry":[{},"wakeup_c_lock)"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002make_writer_runnable \/* finish"]},{"entry":[{},"wake up *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002atomically clear INTERLOCK"]},{"entry":[{},"\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003else \/* possibly woke up a reader or"]},{"entry":[{},"readers *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002atomically clear INTERLOCK while"]},{"entry":[{},"conditionally"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003setting WAITING"]},{"entry":[{},"or clearing WAITING, depending"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003on whether there"]},{"entry":[{},"are more waiters besides the ones"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003we just woke up"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2002Note this frees the lock also"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003return"]},{"entry":[{},"\u2003\u2003}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"As another example, lock_read_to_write interface can be retooled to operate in conjunction with a DML in the following example way:",{"@attributes":{"id":"p-0105","num":"0104"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003\/*"]},{"entry":[{},"\u2003\u2003\u2009* NOTE: if another reader has already requested"]},{"entry":[{},"\u2003\u2003\u2009* a write-upgrade to a read lock, no lock is"]},{"entry":[{},"\u2003\u2003\u2009* held upon return. That is, this routine"]},{"entry":[{},"\u2003\u2003\u2009* always releases the read lock, whereas"]},{"entry":[{},"\u2003\u2003\u2009* lock_try_read_to_write does not"]},{"entry":[{},"\u2003\u2003\u2009* give up the read lock if the lock cannot be"]},{"entry":[{},"\u2003\u2003\u2009* write-upgraded."]},{"entry":[{},"\u2003\u2003* RETURNS: FALSE if lock held in WRITE MODE on"]},{"entry":[{},"return"]},{"entry":[{},"\u2003\u2003\u2009*\u2003\u2003TRUE if lock not held at all"]},{"entry":[{},"\u2003\u2003\u2009*\/"]},{"entry":[{},"\u2003\u2003boolean"]},{"entry":[{},"\u2003\u2003lock_read_to_write( lock address )"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003retry:"]},{"entry":[{},"\u2003\u2003\u2003\u2003read lock status"]},{"entry":[{},"\u2003\u2003\u2003\u2003\/* This service always fails for upgraded"]},{"entry":[{},"locks. This service is best"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2009* suited for lightly contended locks."]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2009*\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003if UPGRADED"]},{"entry":[{},"\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003lock_done(lockaddr);"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003return(TRUE);"]},{"entry":[{},"\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003if INTERLOCK goto retry;"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003if there are waiters"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003disable"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically set interlock"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003enable and goto retry on failure"]},{"entry":[{},"\u2003\u2003retry_with_interlock:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if we will be last to unlock"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/* wakeup readers or"]},{"entry":[{},"report writer tid *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003waiting = wakeup_c_lock;"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003else"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically clear interlock"]},{"entry":[{},"and decrement count"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return TRUE"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003retry_waiting:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if writer was reported"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically clear owner,"]},{"entry":[{},"read_mode and store TID"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003to hand off lock"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/* finish wake up *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003wakeup_c_lock(lockaddr,"]},{"entry":[{},"WAKEUP_LOCK_WRITER_OR_UPGRADER,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003&waiting);"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically clear INTERLOCK"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003else {"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically clear owner either"]},{"entry":[{},"set or clear"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003WAITING depending on"]},{"entry":[{},"whether waiters remain"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return TRUE \/* lock not held *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003f READ_MODE"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003disable"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003set WANT_WRITE and INTERLOCK"]},{"entry":[{},"atomically"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003complex_lock_sleep ( );"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003awaken holding the lock"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return FALSE"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003else \/* completely free *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically store our thread id to"]},{"entry":[{},"claim the lock"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return FALSE"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"As another example, lock_write_to_read interface can be retooled to operate in conjunction with a DML in the following example way:",{"@attributes":{"id":"p-0107","num":"0106"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003lock_write_to_read( lock address )"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003sync"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003disable"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003atomically set interlock"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003if UPGRADED"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003compute rle address"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003read rle value"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically set rle to READ_MODE"]},{"entry":[{},"and count 1"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003SYNC( ); \/* lock done *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003disable"]},{"entry":[{},"\u2003\u2003\u2003\u2003atomically set INTERLOCK"]},{"entry":[{},"\u2003\u2003\u2003\u2003if there are waiters for the lock"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/* wakeup the readers or report"]},{"entry":[{},"if we have a writer"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2009* without actually waking it"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2009*\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003waiting = wakeup_c_lock( )"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003atomically clear owner and set READ_MODE"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003note if not UPGRADED also set"]},{"entry":[{},"count to one"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003if a writer was first on list, unlock"]},{"entry":[{},"wait list without awakening"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003else if we woke up readers"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if waiters remain"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically set WANT_WRITE"]},{"entry":[{},"and WAITING and"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003clear INTERLOCK"]},{"entry":[{},"since writers await"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003else"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically clear"]},{"entry":[{},"INTERLOCK and WAITING"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003else atomically clear INTERLOCK and"]},{"entry":[{},"WAITING"]},{"entry":[{},"\u2003\u2003}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"As another example, lock_try_write interface can be retooled to operate in conjunction with a DML in the following example way:",{"@attributes":{"id":"p-0109","num":"0108"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003boolean_t"]},{"entry":[{},"\u2003\u2003lock_try_write( lockaddr)"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003retry:"]},{"entry":[{},"\u2003\u2003\u2003\u2003read lock word"]},{"entry":[{},"\u2003\u2003\u2003\u2003if INTERLOCK return FALSE"]},{"entry":[{},"\u2003\u2003\u2003\u2003if recursive, handle and return"]},{"entry":[{},"\u2003\u2003\u2003\u2003if held in read or write mode return"]},{"entry":[{},"FALSE"]},{"entry":[{},"\u2003\u2003\u2003\u2003atomically store our tid in lock"]},{"entry":[{},"\u2003\u2003\u2003\u2003goto retry if fail"]},{"entry":[{},"\u2003\u2003\u2003\u2003return TRUE"]},{"entry":[{},"\u2003\u2003}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"As another example, lock_try_read interface can be retooled to operate in conjunction with a DML in the following example way:",{"@attributes":{"id":"p-0111","num":"0110"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003\/*"]},{"entry":[{},"\u2003\u2003returns TRUE if lock acquired"]},{"entry":[{},"\u2003\u2003\u2003\u2003FALSE if not acquired"]},{"entry":[{},"\u2003\u2003*\/"]},{"entry":[{},"\u2003\u2003boolean"]},{"entry":[{},"\u2003\u2003lock_try_read(lockaddr)"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003compute hash"]},{"entry":[{},"\u2003\u2003retry:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003read lock status"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003if UPGRADED"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if held in read mode and no writer"]},{"entry":[{},"waiting"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003compute rle addr"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003read rle value"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if RLE_DOWNGRADED goto retry \/*"]},{"entry":[{},"stale *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if READ_MODE on in RLE"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically increment"]},{"entry":[{},"count"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return TRUE"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/* not set, need interlock to set"]},{"entry":[{},"*\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003disable"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically set INTERLOCK"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003goto retry if fail"]},{"entry":[{},"\u2003\u2003retry_set_reader:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/* could see race condition where"]},{"entry":[{},"other cpu set READ_MODE *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/* The reader lock will be zero"]},{"entry":[{},"unless we were beat *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003atomically set READ_MODE in rle"]},{"entry":[{},"and count to one"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003enable and goto retry if fail"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003clear INTERLOCK"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003enable"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return TRUE"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\/* not upgraded"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003if writer wants or holds the lock"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003return FALSE"]},{"entry":[{},"\u2003\u2003\u2003\u2003atomically set READ_MODE and incement count"]},{"entry":[{},"\u2003\u2003\u2003\u2003goto retry if fail"]},{"entry":[{},"\u2003\u2003\u2003\u2003return"]},{"entry":[{},"\u2003\u2003}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"As another example, lock_try_read_to_write interface can be retooled to operate in conjunction with a DML in the following example way:",{"@attributes":{"id":"p-0113","num":"0112"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003boolean_t"]},{"entry":[{},"\u2003\u2003lock_try_read_to_write(lockaddr)"]},{"entry":[{},"\u2003\u2003\u2003\u2003disable"]},{"entry":[{},"\u2003\u2003retry:"]},{"entry":[{},"\u2003\u2003\u2003\u2003(re) read lock status"]},{"entry":[{},"\u2003\u2003\u2003\u2003if UPGRADED"]},{"entry":[{},"\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003enable"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003return FALSE \/* lock still held *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003if we will not be last to unlock"]},{"entry":[{},"\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003atomically set INTERLOCK and WANT_WRITE"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003complex_lock_sleep"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003awaken holding the lock"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003return"]},{"entry":[{},"\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003else \/* we are last, so lock is available"]},{"entry":[{},"for write mode now *\/"]},{"entry":[{},"\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003atomically store our ID into OWNER"]},{"entry":[{},"field"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003goto retry if fail"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003enable"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003return TRUE;"]},{"entry":[{},"\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"As another example, upgrade_complex_lock or clk_upgrade interface can be implemented to operate in conjunction with a DML in the following example way:",{"@attributes":{"id":"p-0115","num":"0114"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003clk_upgrade(lock addr)"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003disable"]},{"entry":[{},"\u2003\u2003\u2003\u2003atomically set interlock"]},{"entry":[{},"\u2003\u2003\u2003\u2003if lock state has changes such that"]},{"entry":[{},"INTERLOCK was"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003already on or READ_MODE is off or"]},{"entry":[{},"UPGRADED is off"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003return without upgrading"]},{"entry":[{},"\u2003\u2003\u2003\u2003compute rle addr"]},{"entry":[{},"\u2003\u2003\u2003\u2003atomically store count (from lock) to rle"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003until success"]},{"entry":[{},"\u2003\u2003\u2003\u2003set other rles to zero (turn off"]},{"entry":[{},"RLE_DOWNGRADED)"]},{"entry":[{},"\u2003\u2003\u2003\u2003atomically turn clear INTERLOCK, set"]},{"entry":[{},"UPGRADED, clear OWNER"]},{"entry":[{},"\u2003\u2003\u2003\u2003enable"]},{"entry":[{},"\u2003\u2003\u2003\u2003return;"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003\u2003As another example, downgrade_complex_lock or"]},{"entry":[{},"clk_downgrade interface can be implemented to operate in"]},{"entry":[{},"conjunction with a DML in the following example way:"]},{"entry":[{},"\u2003\u2003\/*"]},{"entry":[{},"\u2003\u2003\u2009* This routine is called disabled"]},{"entry":[{},"\u2003\u2003\u2009* holding the interlock bit."]},{"entry":[{},"\u2003\u2003\u2009*\/"]},{"entry":[{},"\u2003\u2003void"]},{"entry":[{},"\u2003\u2003clk_downgrade(complex_lock_t l)"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003read lock status"]},{"entry":[{},"\u2003\u2003\u2003\u2003compute rle addr"]},{"entry":[{},"\u2003\u2003\u2003\u2003atomically set RLEs to RLE_DOWNGRADED"]},{"entry":[{},"\u2003\u2003\u2003\u2003atomically clear UPGRADED in lock word"]},{"entry":[{},"\u2003\u2003}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The components in the block diagrams and the steps in the flowcharts described above are described only as examples. The components and the steps have been selected for the clarity of the description and are not limiting on the illustrative embodiments of the invention. For example, a particular implementation may combine, omit, further subdivide, modify, augment, reduce, or implement alternatively, any of the components or steps without departing from the scope of the illustrative embodiments. Furthermore, the steps of the processes described above may be performed in a different order within the scope of the invention.","Any code or pseudo code described above is described only as an example. The nomenclature, identifiers, references, functions, operations, and data structures have been selected for the clarity of the description and are not limiting on the illustrative embodiments of the invention. Furthermore any logic, conditions, or processing have also been selected for the clarity of the description and are not limiting on the illustrative embodiments of the invention. Any notes or comments embedded in the code or pseudo code are not intended to be limiting on the invention and are included merely as additional clarifying information. The nomenclature, identifiers, references, functions, operations, data structures, logic, conditions, or processing can be combined, modified, or replaced, or alternatively implemented for similar purpose within the scope of the invention.","Thus, a computer implemented method, apparatus, and computer program product are provided in the illustrative embodiments for retooling lock interfaces for using a dual mode reader writer lock. Using the embodiments of the invention, a data processing system can operate with improved efficiency under lock contention conditions. Using the embodiment, a data processing system can operate with improved efficiency also when a RWL is saturated and can hold no more locks.","A DML according to an embodiment can operate as a presently used RWL, using only the original lock element of the expanded or unexpanded DML, when demand for the lock is below a threshold. When the demand for the lock reaches or exceeds the threshold, to wit, when a contention condition exists for the lock, the DML can transform to operate using expanded locks. In other words, a DML according to an embodiment can be upgraded to operate in the expanded mode or downgraded to operate in the original mode depending on the demand for the lock.","The structure of a lock, whether a RWL or a DML is a data structure in any suitable data storage location. In one embodiment, an existing RWL may occupy less than 1 data word of space. In such an embodiment, the original lock and one or more expanded locks can be accommodated within 1 data word within the scope of the illustrative embodiments. Expanded locks have been described as holding reader locks only as some example embodiments of the invention. Upon suitable modifications, expanded locks can be used for holding a combination of types of locks, including write locks.","An embodiment of the invention may facilitate maintaining the integrity of the DML while operating the DML. As one example method for maintaining the integrity of the DML, the interlock indicator may be set to cause one operation to wait while another completes with respect to one or more elements of the DML. Other indicators, different indicators than those described, or a combination thereof, may be used in a similar manner to implement a DML that can be operated while maintaining the lock's integrity. An indicator may be relocated to other elements of the DML than the element the indicator has been described in, within the scope of the invention.","The rules described in particular embodiments are only examples and are not intended to limit the scope of the invention. Any rule may be implemented in a manner similar to the rules described in this disclosure within the scope of the invention.","The embodiments of the invention can collaborate with existing lock management applications. The embodiments can also allow existing applications and processes to transparently use DML where they were only configured to use presently used RWLs. Furthermore, during use, DML mode can change while the applications and processes using the DML remain unaware of such transitions.","The invention can take the form of an entirely software embodiment, or an embodiment containing both hardware and software elements. In a preferred embodiment, the invention is implemented in software or program code, which includes but is not limited to firmware, resident software, and microcode.","Furthermore, the invention can take the form of a computer program product accessible from a computer-usable or computer-readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description, a computer-usable or computer-readable medium can be any tangible apparatus that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device.","The medium can be an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system (or apparatus or device) or a propagation medium. Examples of a computer-readable medium include a semiconductor or solid state memory, magnetic tape, a removable computer diskette, a random access memory (RAM), a read-only memory (ROM), a rigid magnetic disk, and an optical disk. Current examples of optical disks include compact disk-read only memory (CD-ROM), compact disk-read\/write (CD-R\/W) and DVD.","Further, a computer storage medium may contain or store a computer-readable program code such that when the computer-readable program code is executed on a computer, the execution of this computer-readable program code causes the computer to transmit another computer-readable program code over a communications link. This communications link may use a medium that is, for example without limitation, physical or wireless.","A data processing system suitable for storing and\/or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code, bulk storage media, and cache memories, which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage media during execution.","A data processing system may act as a server data processing system or a client data processing system. Server and client data processing systems may include data storage media that are computer usable, such as being computer readable. A data storage medium associated with a server data processing system may contain computer usable code. A client data processing system may download that computer usable code, such as for storing on a data storage medium associated with the client data processing system, or for using in the client data processing system. The server data processing system may similarly upload computer usable code from the client data processing system. The computer usable code resulting from a computer usable program product embodiment of the illustrative embodiments may be uploaded or downloaded using server and client data processing systems in this manner.","Input\/output or I\/O devices (including but not limited to keyboards, displays, pointing devices, etc.) can be coupled to the system either directly or through intervening I\/O controllers.","Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modem and Ethernet cards are just a few of the currently available types of network adapters.","The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself; however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
