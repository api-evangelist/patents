---
title: Cross domain interaction of a web application
abstract: A method and system for cross domain interaction of a Web application are proposed, wherein a Web application belonging to a first domain needs to interact with a service belonging to a second domain. The method comprises: by the Web application, creating an iFrame in a webpage, wherein the iFrame is belonging to the first domain; creating a form in the iFrame; submitting the form to a Web server providing a service belonging to the second domain; and refreshing the iFrame by receiving a response from the Web server, changing the domain, to which the iFrame is belonging, to the second domain, and performing cross domain interaction with the service belonging to the second domain with the information contained in the form.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08719421&OS=08719421&RS=08719421
owner: International Business Machines Corporation
number: 08719421
owner_city: Armonk
owner_country: US
publication_date: 20090624
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["Embodiments of the invention generally relates to the field of Web application, and particularly relates to the cross domain interaction of a Web application.","A Web application is a Web-based application, which means any application program for which the user interface resides in a Web browser. It is a collection of some webpages and other resources for completing some tasks. A Web application is a product of typical client\/server architecture. It enables clients and servers to communicate over network. The common message board, chat room, and bulletin board system (BBS) are all examples of Web applications. These applications, however, are relatively simple. The real core of Web applications is to handle data.","Referring to , a model of a traditional Web application is shown. In a typical Web application, a user activity in the user interface (UI) in a browser of a client  can trigger a request, and the request is sent to a Web server . The server  performs some processing, such as retrieving data, handling data, interacting with various legacy systems, after receiving the request. Then the server  returns a page to the client  as a response. The client  may continue to perform the next user activity after receiving the response, thereby repeating the interaction process with the server . Such process is known as synchronous, i.e., the server  enforces the user to enter a submit-wait-redisplay process, making user activities synchronous with the processing time of the server . It can be seen from the time axis that the interaction process is sequential and always kept synchronous with the time axis. In , the process of sending a request to the server  and returning a response by the server  is generally called as data transmission.","Referring to , a model of a rich Web application using AJAX is shown. A rich Web application running on a client  communicates with a server  asynchronously by using the AJAX technique, without refreshing the entire page. The term AJAX is a shortening of \u201cAsynchronous JavaScript And XML\u201d, which is combined by some new technologies in a new manner. AJAX contains:\n\n","A Web application, which is dynamic and responds quickly, may be constructed with AJAX, so that the browser can provide users with more natural browsing experience. AJAX provides the ability of asynchronous communication with the server  so as to free users from the cycle of traditional request\/response. With AJAX, the client  may perform processing on the client side through an AJAX engine  when a user activity (e.g. submitting a request, inputting) occurs in the user interface (UI)  of the browser, and update and display the UI of the browser right after the processing on the client side is completed. Meanwhile, the AJAX engine  makes an asynchronous request to the server  to perform the processing on the server side. When the response corresponding to the request is returned from the server , the client  can update the UI  accordingly through the AJAX engine  without refreshing the entire page. It is most important that users are even not aware of the browser on the client  being communicating with the server , so that the Web site looks like making an instant response. Therefore, the Web application can present the alteration to users without fully depending on reloading the page from the server. In the , the process of sending a request to the server  and returning a response by the server  is generally called as data transmission.","Traditionally, since the browser of the client will refresh the entire page, a large amount of data is to be transmitted because the entire page must be sent again. If AJAX is used, the server may return a shorter message comprising some certain information instead of the entire page, and only a related part of the browser page, instead of the whole screen, is to be refreshed.","The core of AJAX is a JavaScript object XmlHttpRequest. It is a technique supporting asynchronous request. In brief, the object XmlHttpRequest allows client-side JavaScript to make an HTTP request to the server (which can be performed with the method GET or POST, but not limited to such two methods, for example, Head\/PUT\/DELETE) and process the response, without refreshing the page in the browser and without blocking the user. The detailed definition and description of the object XmlHttpRequest may be referred to the specification of W3C (World Wide Web Consortium) (http:\/\/www.w3.org\/TR\/XMLHttpRequest). The object XmlHttpRequest can be further used for requesting or sending any kind of data, more than just XML data.","In consideration of security, an AJAX-based rich Web application can only make access to resources in the current domain where the application locates, and cannot implement cross domain access. For example, AJAX in the site domain1.com can only make access to resources within this site, and cannot make cross domain access to resources in the site domain2.com. However, a Web application belonging to one certain domain sometimes wants to make an AJAX request to a server belonging to the other domain in order to invoke services or resources in the server. For example, a Web application wants to utilize external REST (Representational State Transfer) services, such as \u201cGoogle suggest\u201d, \u201cYahoo! Spell checking\u201d, etc.; a Web application wants to utilize some remote corporate REST service available on the Intranet; a Web application wants to include news FEEDs from an external server (such as CNN); and a Web application wants to create a Mashup (a novel API integration application).","The above-mentioned cross domain access is restricted by the existing XmlHttpRequest implementations. Per default, requests are only allowed to be submitted to the server in the current domain where the application locates. This may prevent malicious AJAX codes served from one site from taking the user browser as a basis for attacking another site and may prevent critical information (such as usernames, passwords) on one site from revealing. Furthermore, this accords with the same-origin policy which is part of the JavaScript security model.","A rich Web application often needs to interact with a service from other domain. Especially in an SOA or Mashup environment, a rich Web application often needs to interact with multiple services from other domains, so that the ability of cross domain interaction becomes more important. But based on the above restrictions, a rich Web application is not allowed to interact with the services provided by other domains outside the domain where the application locates.","In an embodiment of the present invention, an iFrame is created by a Web application, and the service invocation context and\/or data access context is sent to another different domain by the iFrame through a form using GET or POST (but not limited to such two methods, e.g. Head\/PUT\/DELETE). A response from said another domain may switch the iFrame to said another domain, so that it is possible to invoke the services of the domain or access the data of the domain. Then the service invocation result and\/or data access result is sent to the original domain by the iFrame through a form using GET or POST. A response from said original domain may switch the iFrame back to said original domain, so that it is possible to process the result.","According to an embodiment of the present invention, there is proposed a method for cross domain interaction of a Web application, wherein a Web application belonging to a first domain needs to interact with a service belonging to a second domain, wherein the Web application, creates an iFrame in a webpage, wherein the iFrame is belonging to the first domain, a form is created in the iFrame, the form is submitted to a Web server providing a service belonging to the second domain; and the iFrame is refreshed by receiving a response from the Web server, changing the domain, to which the iFrame is belonging, to the second domain, and performing cross domain interaction with the service belonging to the second domain with the information contained in the form. Furthermore, the method can determine whether the method GET or POST is utilized to submit the form according to the size of data amount in the form, wherein when the data amount in the form is small, the method GET is utilized, and when the data amount in the form is large, the method POST is utilized.","It is noted that the same or similar labels designate the same or similar elements or components throughout the figures.","The exemplary embodiments of the invention will be described below in conjunction with the accompanying figures. For clarity and simplicity, not all features of the actual implementation are described in the specification. However, it should be appreciated that many implementation-specific decisions must be made in the procedure of developing any of such actual embodiments in order to realize the particular objectives of developers, for example complying with those limiting conditions in related to systems and businesses, wherein the limiting conditions may be varied depending on the implementation. Further, it should be appreciated that although the development effort may be complicated and time-consuming, such development effort is only a routine task for those skilled in the art that benefit from this disclosure.","Moreover, it is further noted that, in order not to obscure the invention by those unnecessary details, only the apparatus structures and\/or processing steps in related to the scheme according to embodiments of the invention are shown in the accompanying figures, while other details not relative to the invention are omitted.","The detailed descriptions of the present invention and its embodiments are proposed as below. Firstly referring to ,  illustrates an exemplary diagram of a system for cross domain interaction of a Web application and its working flow according to one embodiment of the present invention. As shown in , the system comprises a server  and a server , wherein the server  provides services and\/or data belonging to a domain A, and the server  provides services and\/or data belonging to a domain B. The server  has a proxy A  as an intermediate, for passing the related application service request or response to the server . The server  has a proxy B  as an intermediate, for passing the related application service request or response to the server . It is noted that the proxy A  and the proxy B  are suitable for more general architecture for client\/server. In an alternative embodiment of the present invention, the above proxies can be omitted. Instead, the server  and the server  directly process external data or requests. In this embodiment of the present invention, the server  and the server  can be either two entities physically independent, or two Web servers logically independent. Both provide service\/data belonging to different domains, respectively.","When a user wants to access the domain A, a rich Web application  belonging to the domain A will be invoked and running on the client browser. The rich Web application  and the server  can communicate with each other, as they are belonging to the same domain. In an embodiment of the present invention, in some case, the rich Web application  wants to make a cross domain invocation to a service  belonging to the domain B on the server . At Step , the rich Web application  first creates an iFrame object, for example an iFrame  as shown in . At this point, the domain where the iFrame  locates is the domain A.","An iFrame object, which can also be called as an embedded element or an embedded frame, can embed frames and contents of a webpage into an existing HTML webpage, as a sub-window of the existing HTML webpage. An iFrame can be embedded into any part of an HTML webpage. One of its main characteristics is that the HTML file referenced by the iFrame is not displayed independent of the other HTML file, but may be directly embedded into one HTML file. The two HTML files, however, are independent of each other. One file is not treated as a part of the other, but each file is treated as a whole file. Moreover, an iFrame can display the same content in different pages repeatedly, without rewriting the content. Through the object model in the page where the iFrame object locates, the attributes, not the content, of the iFrame object can be access, thereby ensuring the security. According to the embodiment of the invention, the created iFrame is used for enabling cross domain interaction of a Web application. The size of an iFrame can be adjusted. In the embodiment of the invention, the iFrame may be invisible so that users even cannot see it in the UI.","Returning to , at Step , the rich Web application  creates a request form  in the iFrame . The rich Web application  populates the created request form  with the request data for interaction. The inputs of the request form  may comprise: name of the function for processing the result from the service ; URL of the proxy A; URL of the service ; HTTP verb for invoking the service ; and data for invoking the service . The methods of the request form  may comprise GET or POST. The actions of the request form  may comprise the URL of the proxy . It is noted that in the present context, the contents contained in the request form and the result form to be described in the following are used as examples only. It can be understood by the skilled in the art that the contents in the forms can be altered based on different particular implementations and user requirements, without departing from the scope of the present invention. For example, the request form may comprise the context related to service invocation or data access, and the result form may comprise the result related to service invocation or data access.","Herein, a form is used as a data container so that the submitted request or service result can be filled in the form and transmitted through the form. The reason using forms is that different sizes of data can be transmitted through a form. Since the method GET or POST can be comprised in the form, and the two methods represent different manners of form submission, both a small amount of data and a large amount of data can be transmitted. Several differentiations between GET and POST are described as below. GET adds a parameter data queue into an URL pointed by the Action attribute of the submitted form, wherein the values and fields in the form have one-to-one correspondence and can be seen in the URL. POST places various fields and their contents into the HTML header and transmits them together to the URL address pointed by the Action attribute through the HTTP POST mechanism. Users cannot see such process. Since the method GET encodes data into the URL, the amount of data to be transmitted is restricted by the URL length so that it is suitable for transmitting smaller data. The amount of data to be transmitted by the method POST has no restriction.","If a form or data in a browser will be transmitted to the server side, the method GET is convenient and intuitive, but the disadvantage is that a user accessing the website may also send the URL string to the server after modifying it. It is error-prone if the URL string is not well processed. Moreover, the method GET may generate a very long URL, which may exceed the restriction on URL length defined by some browsers and servers. The length of the character string passed by GET cannot exceed 250 characters. If the length exceeds, the browser may truncate the URL automatically, resulting in data miss. Further, except ASCII characters, the method GET does not support any other characters. If the string contains Chinese characters or other non-ASCII characters, an additional encoding processing is needed.","When sending data by the method POST, it is not transparent to users. According to the HTTP protocol, the data is appended to the HTTP header and cannot be modified by users as they want. This is more secure for a Web application. Moreover, a large amount of data can be sent to the Web server by POST. Therefore in the embodiment of the present invention, the Web application may intelligently select the method GET or POST to submit form data, according to the size of data being transmitted actually.","Returning to , after the iFrame  creates and populates the request form  successfully, at Step , the iFrame  submits the request form  to the proxy B  in the server .","Continuing to refer to ,  illustrates an exemplary diagram of a system for cross domain interaction of a Web application and its working flow according to one embodiment of the present invention, which is a continued description of . As shown in , the system comprises the server  belonging to domain A and the server  belonging to domain B, wherein the components comprised in the server  and the server  are the same as . The rich Web application  belonging to the domain A is running on the client browser. At Step , after the proxy B  of the server  receives the request form , the proxy  will utilize the request data for interaction contained in the request form , comprehend the context therein, generate a response for the request form  to be returned to the iFrame , and refresh the iFrame  with the response. At this point, the iFrame  is refreshed with the response of the proxy B , and the domain to which the iFrame  is belonging is changed from the original domain A to the domain B. At Step , based on the request data for interaction, the service  is invoked with AJAX through the iFrame . Since at the moment the iFrame  and the service  are belonging to the same domain B, the invocation can be performed. It is noted that, in an alternative embodiment of the invention, the iFrame  can access the data in the domain B, instead of invoking the service in the domain B. The two implementations are substantially the same, so that it is not described repeatedly.","Continuing to refer to ,  illustrates an exemplary diagram of a system for cross domain interaction of a Web application and its working flow according to one embodiment of the present invention, which is a continued description of . As shown in , the system comprises the server  belonging to domain A and the server  belonging to domain B, wherein the components comprised in the server  and the server  are the same as . The rich Web application  belonging to the domain A is running on the client browser. At Step , based on the result from the invocation to the service , the proxy B  creates a result form  in the iFrame . The proxy B  populates the created result form  with the result data for interaction. The inputs of the result form  may comprise: name of the function for processing the result from the service , and response of the service . The methods of the result form  may comprise GET or POST. The actions of the result form  may comprise: URL of the proxy A . After the result form  is created and populated successfully in the iFrame , at Step , the iFrame  submits the result form  to the proxy A  in the server .","Continuing to refer to ,  illustrates an exemplary diagram of a system for cross domain interaction of a Web application and its working flow according to one embodiment of the present invention, which is a continued description of . As shown in , the system comprises the server  belonging to domain A and the server  belonging to domain B, wherein the components comprised in the server  and the server  are the same as . The rich Web application  belonging to the domain A is running on the client browser. At Step , after the proxy A  in the server  receives the result form , the proxy A  will utilize the result data for interaction contained in the result form , comprehend the context therein, generate a response for the result form  to be returned to the iFrame , and refresh the iFrame  with the response. At this point, the iFrame  is refreshed with the response of the proxy A , and the domain to which the iFrame  is belonging is changed from the domain B to the original domain A. At Step , through the page in the iFrame , the function name for processing the result from the service  is invoked with the response of the service  contained in the result form , wherein the function is for saving or processing the returned result. The iFrame  may pass the data in the result form  to the rich Web application . Since at the moment the iFrame , the proxy A  and the rich Web application  are belonging to the same domain A, the invocation and the data passing can be performed.","The detailed descriptions of the system for cross domain interaction of a Web application and its working flow according to one embodiment of the present invention are presented above. They will be further described by referencing an example so that the skilled in the art can fully understand the the present invention. In the following example, one embodiment of the invention is described with respect to a typical checkout process of an e-commerce website.","First referring to ,  is an exemplary environment of a typical checkout process of an e-commerce website according to one embodiment of the present invention. As shown in , a page of a shopping website \u201chttp:\/\/sample_shop.com\u201d is displayed on a client browser . The page provides a group of services, such as inventory query, price query, item picture presentation, shopping cart, etc. When a user finishes his purchasing activity and wants to check out, the user chooses to use the \u201cCheckout Service\u201d . The service is running on a Web server  belonging to the same domain and needs the following parameters: payment amount, payee account, and payment serial number. It is obviously that the Checkout Service  must complete the payment through a certain bank website chose by the user. Assume that a bank website \u201chttp:\/\/sample_bank.com\u201d running on a Web server  can provide the user with the \u201cTransfer Service\u201d . The service needs to receive the following parameters: payment amount, payee account, payer account, and payment serial number, and transfers a specific amount of money (which equals to the payment amount) from the payer account to the payee account after receiving the parameters. The payment serial number is recorded for checking by the payer and the payee. The browser  runs a \u201cShopping Application\u201d  that is hosted by \u201chttp:\/\/sample_shop.com\u201d. The application wants to utilize the \u201cCheckout Service\u201d  from \u201chttp:\/\/sample_shop.com\u201d and the \u201cTransfer Service\u201d  from \u201chttp:\/\/sample_bank.com\u201d in order to implement the end-to-end checkout process.","It can be seen from the above example that the \u201cShopping Application\u201d  needs to interact with the services from two different domains. Since the \u201cShopping Application\u201d  itself is belonging to \u201chttp:\/\/sample_shop.com\u201d, it can invoke the \u201cCheckout Service\u201d  using the object XmlHttpRequest. However, since the \u201cTransfer Service\u201d  is hosted by another different domain \u201chttp:\/\/sample_bank.com\u201d, the object XmlHttpRequest is prevented from invoking the \u201cTransfer Service\u201d .","According to one embodiment of the present invention, the cross domain interaction of a Web application can be completed by an iFrame created in a page and based on form submission. First referring to ,  illustrates an example of a form created in a page displayed on a browser. A form is created in a page displayed on a browser  belonging to the domain \u201chttp:\/\/sample_shop.com\u201d. The form comprises: payee account , payment amount , payment serial number , and payer account . In the form, the values in the payee account , payment amount , payment serial number  can be automatically populated by the \u201cCheckout Service\u201d  from the domain \u201chttp:\/\/sample_shop.com\u201d, and the payer account  may be filled by the user directly inputting his\/her account number on the page. After the above values are determined to be correct, the user may click a \u201cPay\u201d button . Then the \u201cShopping Application\u201d  starts to invoke the \u201cTransfer Service\u201d  in the domain \u201chttp:\/\/sample_bank.com\u201d.","The detailed steps for invoking the \u201cTransfer Service\u201d  in the domain \u201chttp:\/\/sample_bank.com\u201d and the exemplary codes for implementing these steps are described hereinbelow with reference to .  is an exemplary flowchart of a method for cross domain interaction of a Web application according to one embodiment of the present invention.","Initially, please refer to the following codes for processing the clicking on the \u201cPay\u201d button :",{"@attributes":{"id":"p-0045","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<html>"},{"entry":"<script src= \u201dhttp:\/\/sample_shop.com\/crossdomain.js \u201d><\/script>"},{"entry":"<script>"},{"entry":"function pay( ){"},{"entry":"\u2003\u2003var xhr = new"},{"entry":"\u2003\u2003CrossDomainXMLHttpRequest(\u201chttp:\/\/sample_bank.com\/proxy\u201d);"},{"entry":"request.open(\u201cPOST\u201d, \u201chttp:\/\/sample_bank.com\/transfer_service\u201d, true);"},{"entry":"request.onreadystatechange = function( ){"},{"entry":"\u2003if (xhr.readyState == 4) {"},{"entry":"\u2003\u2003\u2003if (xhr.status == 200 ) {"},{"entry":"\u2003\u2003\u2003\u2003\u2002var response = request.responseText;"},{"entry":"\u2003\u2003\u2003\u2003\u2003...."},{"entry":"\u2003\u2003\u2003\u2002} else if (request.status == 404) {"},{"entry":"\u2003\u2003\u2003\u2003\u2009..."},{"entry":"\u2003\u2003\u2002}"},{"entry":"\u2003\u2002}"},{"entry":"\u2009request.send(document.getElementById(\u201cpayeeAccount\u201d)"},{"entry":"\u2009+ \u201c;\u201d + document.getElementById(\u201cpayerAccount\u201d)"},{"entry":"\u2009+ \u201c;\u201d + document.getElementById(\u201camount\u201d)"},{"entry":"\u2009+\u2002\u201c ; \u201d\u2002+\u2002document.getElementById( \u201c serialNumber \u201d )); \u2002\/\/the"},{"entry":"request \u2002data is 111111111111111111; 2222222222222;"},{"entry":"$100.00; 200805280001"},{"entry":"}"},{"entry":"<\/script>"},{"entry":"<input id= \u201dpayeeAccount\u201d><\/input>"},{"entry":"<input id= \u201damount\u201d><\/input>"},{"entry":"<input id= \u201dserialNumber\u201d><\/input>"},{"entry":"<input id= \u201dpayerAccount\u201d><\/input>"},{"entry":"<button id= \u201dpay\u201d onclick= \u201dpay( ); \u201d>Pay<\/button>"},{"entry":"<\/html>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"During runtime, when the method \u201crequest.send\u201d is invoked, the object CrossDomainXMLHttpRequest will create an invisible iFrame (Step  in : create iFrame). The current domain of the iFrame is \u201chttp:\/\/sample_shop.com\u201d. The codes for creating an iFrame are shown as below:",{"@attributes":{"id":"p-0047","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<iframe>"]},{"entry":[{},"<\/iframe>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Then, the object CrossDomainXMLHttpRequest creates a request form in the iFrame and encodes the request data and other related information into the form (Step  in : create request form). The codes for creating a request form are shown as below:",{"@attributes":{"id":"p-0049","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2002<iframe>"},{"entry":"\u2002<form action= \u201dhttp:\/\/sample_bank.com\/proxy\u201d"},{"entry":"\u2002method= \u201dPOST\u201d> <!--or method= \u201dGET\u201d-->"},{"entry":"\u2002<input name= \u201dserviceToCall\u201d>http:\/\/sample_bank.com\/"},{"entry":"\u2002transfer_service<\/input>"},{"entry":"\u2002<input name= \u201dhttpMethodOfServiceToCall\u201d>POST<\/input>"},{"entry":"\u2002<input name= \u201dcallbackProxy\u201d>http:\/\/sample_shop.com\/proxy<\/input>"},{"entry":"\u2002<input name= \u201drequestData\u201d>111111111111111111;"},{"entry":"2222222222222;\u2003\u2003$100.00; 200805280001<\/input>"},{"entry":"\u2002<\/form>"},{"entry":"\u2002<\/iframe>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"After the request form is created successfully, the object CrossDomainXMLHttpRequest submits the above request form (Step  in : submit request form). Because the form has the attribute action=\u201chttp:\/\/sample_bank.com\/proxy\u201d, the form is submitted to a proxy belonging to the domain \u201chttp:\/\/sample_bank.com\u201d. The proxy will utilize the data contained in the request form to generate a response, and refresh the iFrame with the response (Step  in : generate response and refresh iFrame). Now the iFrame is refreshed with the response of the proxy, and the page displayed in the iFrame is switched to the domain \u201chttp:\/\/sample_bank.com\u201d. Then, with the iFrame, the \u201cTransfer service\u201d of the domain \u201chttp:\/\/sample_bank.com\u201d, to which the iFrame is currently belonging, is invoked (Step  in : invoke service\/access data). In an alternative embodiment of the present invention, the iFrame may access data in the domain \u201chttp:\/\/sample_bank.com\u201d without invoking services, or both invoke services and accessing data.","After the \u201cTransfer Service\u201d is invoked successfully, based on the invocation result for the \u201cTransfer Service\u201d, a new result form is created in the same iFrame (Step  in : create result form). The corresponding codes are shown as below:",{"@attributes":{"id":"p-0052","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<iframe>"},{"entry":"<script>"},{"entry":"var xhr = new XMLHttpRequest( );"},{"entry":"request.open(\u201cPOST\u201d, \u201chttp:\/\/sample_bank\/transfer_service\u201d, true);"},{"entry":"request.onreadystatechange = function( ){"},{"entry":"if (xhr.readyState == 4) {"},{"entry":"\u2003\u2003if (xhr.status == 200 ) {"},{"entry":"\u2003\u2003\u2003\u2002var response = request.responseText;"},{"entry":"\u2003\u2003\u2003\u2002\/\/ create a result form in the iFrame"},{"entry":"\u2003\u2003} else if (request.status == 404) {"},{"entry":"\u2003\u2003\u2002..."},{"entry":"\u2002}"},{"entry":"}"},{"entry":"request.send(\u201c111111111111111111; 2222222222222; $100.00;"},{"entry":"200805280001\u201d);"},{"entry":"}"},{"entry":"<\/script>"},{"entry":"<form target= \u201d http:\/\/sample_shop.com\/proxy\u201d>"},{"entry":"<input name= \u201dresult\u201d>you money transferred successfully <\/input>"},{"entry":"<\/form>"},{"entry":"<\/iframe>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"After the result form is created successfully, the result form is submitted (Step  in : submit result form). Since the result form has the attribute target=\u201chttp:\/\/sample_shop.com\/proxy\u201d, the form is submitted to a proxy belonging to the domain \u201chttp:\/\/sample_shop.com\u201d. The proxy will utilize the data contained in the result form to generate a response for the result form, and refresh the iFrame with the response. At this point, the iFrame is refreshed with the response of the proxy, and the page displayed in the iFrame is switched back to the original domain \u201chttp:\/\/sample_shop.com\u201d (Step  in : generate response and refresh iFrame). Then the creator of the iFrame (in this example, the object CrossDomainXMLHttpRequest) is notified, and the method \u201conreadystatechange\u201d in Step  is invoked so as to process the result in the result form (Step  in : invoke function for processing result). For example, the iFrame may pass the data in the result form to the \u201cShopping Application\u201d .","It is noted that the above example is only for exemplarily demonstrating the embodiments of the invention, and should not be construed as the limitation or exhaustion for the invention. In different contexts, based on the requirements of users or environment, the steps and codes may be altered without departing from the scope of the invention.","With respect to the detailed descriptions of the embodiments of the present invention and in conjunction with the above example, it can be seen that the invention can efficiently realize the cross domain interaction of a Web application, thereby improving the performance of an AJAX-based rich Web application. Furthermore, the invention can intelligently handle data with different sizes. For example, an embodiment of the invention can automatically choose GET or POST according to the size of data amount. When the amount of the request\/result data in a form is small, for example less than the URL length restriction, GET may be utilized for submitting the form, thereby optimizing the performance of data transmission. Moreover, the browser can also use a cache to further optimize the operating performance of GET. When the amount of the request\/result data in a form is large, for example more than the URL length restriction, POST may be utilized for submitting the form, thereby transmitting the data as a request package without restricting the size of data.","Furthermore, the scheme of an embodiment of the invention has sufficient security. On the one hand, user credentials (e.g. usernames and passwords) of the domain where the Web application used by a user locates are kept locally, and will not be passed to the server side providing services\/data belonging to the target domain (i.e. the domain where the service to be invoked or the data to be access locate), thereby ensuring the security of local critical data. On the other hand, if the target domain requires authentication, the browser will pop up an authentication window automatically, for users inputting therein the user credentials (e.g. usernames and passwords) required by the target domain. Such information will not be revealed to the local domain where the Web application locates.","It is noted that, although the description of the invention is based on a rich Web application, the invention can be equivalently applied to a traditional Web application. It is also noted that, although the embodiments of the invention are described with respect to client\/server architecture, the invention can be equivalently applied to the Web application interaction between any two machines belonging to two different domains or two Web servers just logically independent, and other similar implementations that will be readily occurred by the skilled in the art.","Under the same inventive concept, a system  for cross domain interaction of a Web application according to one embodiment of the present invention is further proposed with reference to . In the system, a Web application belonging to a first domain needs to interact with a service belonging to a second domain. As shown in , the systems  comprises: an iFrame creating means , a form creating means , a form submitting means , and an interacting means . The iFrame creating means  is configured for creating an iFrame  in a webpage, wherein the iFrame  is belonging to the first domain. The form creating means  is configured for creating a form in the iFrame . The form submitting means  is configured for submitting the created form to a Web server  providing a service belonging to the second domain. The interacting means  further comprises a response receiving means , a domain changing means , and an authentication means . The response receiving means  is configured for refreshing the iFrame  by receiving a response from the Web server . The domain changing means  is configured for changing the domain, to which the iFrame  is belonging, to the second domain, and performing cross domain interaction with the service belonging to the second domain with the information contained in the form. The authentication means  is configured for locally keeping user credentials for the first domain in the Web server providing a service belonging to the first domain so as not to reveal the user credentials. Furthermore, the Web application may be a rich Web application, and the iFrame  may be invisible in the webpage.","Further, the system  may further comprise: means for creating a result form in the iFrame based on the result from interacting with the service; means for submitting the result form to the Web server providing the service belonging to the first domain; means for refreshing the iFrame by receiving a response from the Web server providing the service belonging to the first domain, and changing the domain, to which the iFrame is belonging, to the first domain; and means for processing the result in the result form.","Further, the form submitting means  may further comprise: means for determining whether the method GET or POST is utilized to submit the form according to the size of data amount in the form, wherein when the data amount in the form is small, the method GET may be utilized, and when the data amount in the form is large, the method POST may be utilized.","Further, the means for submitting the result form further comprises: means for determining whether the method GET or POST is utilized to submit the result form according to the size of data amount in the result form, wherein when the data amount in the result form is small, the method GET may be utilized, and when the data amount in the result form is large, the method POST may be utilized.","Further, the system further comprises: means for dynamically popping up an authenticating window by the Web application if the Web server providing the service belonging to the second domain requires authentication, wherein the authenticating window is configured for a user to input therein user credentials for the second domain.","The method and system for cross domain interaction of a Web application according to one embodiment of the present invention are described in detail hereinabove. It can be appreciated that each block in the flow chart or block chart and the combination of some blocks may be implemented by some computer program instructions. These computer program instructions may be provided to a general purpose computer, a specific purpose computer, or a processor of other programmable data processing device, to produce a machine, in which these instructions, when executed by the computers or the processor of other programmable data processing device, can create the means for implementing the functions indicated by the blocks of the block chart and\/or the flow chart.","Although the present invention has been presented and described specifically by reference to the preferred embodiments, it is not intended to be exhaustive or limited the invention in the form disclosed. Many modifications on forms and details will be apparent to those ordinary skills in the art without deviating from the scope of the invention. The embodiments were chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention may best be understood by referring to the following description and accompanying drawing that are used to illustrate embodiments of the invention. In the drawings:",{"@attributes":{"id":"p-0015","num":"0018"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0016","num":"0019"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0017","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0021"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0019","num":"0022"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0020","num":"0023"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0021","num":"0024"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0025"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0026"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0027"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
