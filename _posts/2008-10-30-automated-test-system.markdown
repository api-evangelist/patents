---
title: Automated test system
abstract: A mechanism is provide for optimizing an automated test system during a problem determination phase of the test system in a distributed environment. A centralized execution controller receives first test suite comprising at least a first and second test fragment. The centralized execution controller receives at least one breakpoint definition comprising a condition for pausing the first test suite. The centralized execution controller sends the first test fragment and an execution command of the first test fragment to the distributed environment. The centralized execution controller receives an event definition and a hierarchy of event definitions describing the executed command. The centralized execution controller compares the at least one breakpoint description to the received event definition. The centralized execution controller pauses the test suite execution if the executed event definition matches one of the at least one breakpoint definition.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08458669&OS=08458669&RS=08458669
owner: International Business Machines Corporation
number: 08458669
owner_city: Armonk
owner_country: US
publication_date: 20081030
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["The invention relates to an automated test system, to a method and to a computer program product.","Development of fully automated tests allows a great cost reduction in the test execution phase. It is essential to have test suites fully or almost fully automated in order to successfully test any large-scale product. However, many test scenarios for distributed environments require a big effort to be developed in fully automated fashion. In many cases the saving could be gained by having a majority of scenarios easily automated and minor percentage of additional tests executed manually. Another common problem with test automation is the problem determination phase. Once the automated tests suites are executed, the only information available to the developer are very often the logs collected during the test execution phase.","There is therefore a need for a method of optimizing an automated test system during the problem determination phase of the test system, a computer program product and a centralized execution controller adapted to perform the method in accordance with the invention.","The illustrative embodiments optimize an automated test system during a problem determination phase of the test system in a distributed environment with a plurality of local computers and a plurality of remote computers. The illustrative embodiments receive a test suite by a centralized execution controller. In the illustrative embodiments the test suite comprises a first test fragment and a second test fragment. The illustrative embodiments receive at least one breakpoint definition comprising a condition for pausing the test suite by the centralized execution controller. The illustrative embodiments send the first test fragment and an execution command of the first test fragment from the centralized execution controller to a distributed environment. The illustrative embodiments receive at least one event definition from a plurality of event definitions and a hierarchy of event definitions describing a result of the execution command by the centralized execution controller. The illustrative embodiments compare the at least one breakpoint definition with the at least one event definition by a matching mechanism coupled to the centralized execution controller. The illustrative embodiments pause the test suite if the at lease one event definition matches the at least one breakpoint definition by the centralized execution controller.","In other illustrative embodiments, a computer program product comprising computer executable instructions embodied on a computer readable program is provided. The computer readable program, when executed on a computing device, causes the computing device to perform various ones, and combinations of, the operations outlined above with regard to the method illustrative embodiment.","In yet another illustrative embodiment, a centralized execution controller provided. The centralized execution controller further comprises means for performing various ones, and combinations of, the operations outlined above with regard to the method illustrative embodiment.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1","b":["100","101","102","103","104","103","104","100","105","106"]},"When starting the test system, the centralized execution controller receives a description of the first test suite  that includes a description of test scenarios and test fragments . The centralized execution controller  also receives at least one break point definition  that describes a condition on pausing the test suite execution. This breakpoint definition  may be sent by an external computer and may be an input from a user using an application program interface (API). The breakpoint definition  may be a plurality of breakpoints and may be received by the centralized controller  at any time of the test suite execution . The controller  then starts the execution of the test suite  and sends test fragments  to the distributed environment and execution commands . During the execution, the controller  generates event definitions  corresponding to the executed commands  and, if required, may send the event definition  to at least an external computer . This at least external computer  may be the same source that send the breakpoint definitions . The external computer may start a request to receive the stream of event definitions  at any time during the test suite execution , so that the controller  may first send an stream of all event definitions  that were generated in the past and may also receive in real time the current event definitions.","During the test suite execution, the controller  or an external entity coupled to the controller  generate a hierarchy or tree of events  that may be visualized on application program interface in at least the external computer . The controller  or an external entity continuously compare the generated event definitions  and the breakpoint definitions  and pauses the test suite execution when a match between the events  and the breakpoints  has been found. A user may start collecting logs of the distributed environment or initiate a deep analysis of the environment or machine state. This step may be called the problem determination phase. When this phase has been completed, the user may send a resume command  of the test suite to the execution controller . The command may be sent using a debugger port.","One of the advantages of the invention is that it allows automatically pausing the system when a failure during the test has been detected, so that a user, a tester or an automated tool can look at the content of all the files and the machine or network status that otherwise would not be available during the log collection phase. This allows a great advantage during the problem determination phase, as it gives a great detail of information of the environment at the moment that the failure has occurred.","Another advantage of the invention is that automating a distributed environment allows a great saving of time and effort, as a single execution controller sends all the initiation preparation, starting and ending of the fragment of test that requires to be executed in the local or remote computers. This same controller may include a comparison mechanism to analyze the pausing conditions and execute the commands when necessary, without modifying the scripts that execute the tests and allowing flexible introduction of new breakpoints at any time of the test execution.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 2","FIG. 2"],"b":["201","202","203","201","202","205","206","203","207","208","201","202","203"]},"The interaction is provided in the form of a computer program with an output, the fundamental programming element of the test suite scenarios is the test fragment. Each of the plurality of test fragments , as those from -, represent a single unit of functionality to be executed as part of the test scenario. Each of the plurality of test fragments  can be designated to run on a particular machine in the distributed environment. The test fragment represents the logical functions that need to be executed to complete the test suite scenario. The test fragment may be described based on the machine and the code to be executed.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 3","FIG. 3"],"b":["1","301","1","302","301","1","302","1","303","2","304","1","1","305","2","2","306","1","2","307","308","305","309","306","310","307"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3","b":["1","301","301","1","302","302","1","303","1","2","304","2","2","1","1","305","305","308"]},"The following event definition to be executed belongs to the start of a test fragment execution TFES of function into machine (). The result of this TFES  is represented as the child in the end of the test fragment execution TFEE . The start of the test fragment execution TFES into machine and running function () is the next element executed. TFES has as a child the failure of the test fragment execution TFEE (). As it can be seen in this figure, the sequence starts from the top of the hierarchy going down to the most left child. Subsequent child event definitions are executed until the definition has no more children. Then, the algorithm returns to the next higher level and executes the next event definition to the right until all the event definitions have been executed. One of the advantages of the invention is that the event definitions are described in a high-level language of the language used to write the test scripts. This language allows defining the breakpoint descriptions based on the location, type of function or identification of the event definitions within the hierarchy of event definitions.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 4","FIG. 4","FIG. 3"],"b":["2","401","1","301","402","1","301","403","2","401"]},"One of the advantages of the is to be able to intercept every single step in the test suite execution with the formulation of a break point in a high level language above any script language written to execute the tests. There is no need to plan the pause of the test execution during the test writing phase and the breakpoints may be defined after a first identification of the problem or failure. The invention allows an easy implementation of breakpoints in a distribute environment and across a plurality of local or remote computers.","For example, during the problem determination case, a user or an automated tool may consider the pause of a test execution after the failure of a given test scenario fragment TFEF. The user may then go to the machine on which the fragment failed and initiate the problem determination phase or analyze the neighbour's computers, network traffic or the software environment that may be affecting the system. If the break point defines the failure of a test fragment execution TFEF as the child of any test fragment execution on any machine (noted as (*,*) where the first parameter is the identification of a test scenario fragment, the second is the identification of the machine) of a test fragment execution TFES, then the identification of the event definition may be easily located on . To narrow even further the break point description, the TFES (*,*) is a child of the start of the test suite execution TSES of scenario.","Following the syntax as described in  and with the hierarchy information of the event definition, the matching mechanism easily identifies the condition that in this case corresponds to the TFEF . This breakpoint description corresponds to the syntax: TFEF childof (TFES(*,*) childof (TSES (scen))). If the hierarchy is analyzed from the top to the bottom, then the breakpoint is found on a child of TSES of scen that corresponds to any function or machine of a TFES(*,*). In this case there are three possibilities: TFES(f,machine), TFES(f,machine) or TFES(f,machine). The breakpoint is defined as a TFEF that is a child of any of these three TFES. This can only correspond to the TFEF .","The next break point to be identified , is described by the syntax of the break point description as: TFES (*,*) after (EP(*)) childof (TSES(*) childof (SES(suite))). One of the matching mechanisms may interpret the syntax in the following manner: The TFES corresponds to any scenario fragment executed on any machine. The TFES comes after the execution of an Environment preparation EP into any machine. The TFES (*,*) is as well a child of a TSES executed into any scenario. This TSES is a child of the SES into suite. In the hierarchy of event definition of , this matches with the event definition TFES(f, machine) . This breakpoint description pauses the test system into any event definition that matches these characteristics and therefore represents an advantage of the invention for test systems executed on a distributed environment having a plurality of local and remote computers.","The general grammar expressed to describe the breakpoint description may use the following syntax:\n\n","As a general rule, the first element (EVENT) represents the event definition where the matching mechanism compares the breakpoint description to try to find the pausing condition. The event may be any of the suite execution start SES, end SEE or failure SEF; by the test scenario execution start TSES, end TSEE, failure TSEF; by the environment preparation EP, environment clean up EC; or by the test fragment execution start TFES, end TEEE or failure TEEF. Another possible events are: paused test execution and resumed test execution. More events may be defined according to the type of test system to be executed. In the example , the event corresponds to any TFES(*,*). The event definitions may be further defined using a string of alphanumeric characters, a machine or function identification where the test is being executed, or some other parameter to identify the location or type of test.","The previous event element (PREV_EVENT_ELEMENT) describes the event definition that was executed before the EVENT. The PREV_EVENT_ELEMENT may be then uses the syntax:\n\n","While the foregoing has been with reference to particular embodiments of the invention, it will be appreciated by those skilled in the art that changes in these embodiments may be made without departing from the principles and spirit of the invention, the scope of which is defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE OF THE SEVERAL VIEWS OF THE DRAWINGS","p":["In the following preferred embodiments of the invention will be described in greater detail by way of example only making reference to the drawings in which:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
