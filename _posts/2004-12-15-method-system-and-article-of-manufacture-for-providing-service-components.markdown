---
title: Method, system, and article of manufacture for providing service components
abstract: Provided are a method, system, and article of manufacture, wherein a client component including at least one client interface is provided. Also provided is a target component including at least one service interface, wherein the at least one client interface is capable of matching the at least one service interface. A service interface implementation corresponding to the at least one service interface is provided, wherein the service interface implementation is a dynamic service interface implementation. The dynamic service interface implementation is executed to allow access to the client component to a service provided by the target component.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07779430&OS=07779430&RS=07779430
owner: International Business Machines Corporation
number: 07779430
owner_city: Armonk
owner_country: US
publication_date: 20041215
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND","SUMMARY OF THE DESCRIBED EMBODIMENTS","DETAILED DESCRIPTION","Additional Embodiment Details"],"p":["This patent application is related to the co-pending and commonly assigned patent applications, and which applications are incorporated herein by reference in their entirety:","\u201cMATCHING CLIENT INTERFACES WITH SERVICE INTERFACES\u201d to Michael Beisiegel, Stephen Andrew Brodsky, Jean Sebastien Michel Delfino, Zhaohui Feng, and Anh Khoa Dinh Phan, having application Ser. No. 11\/007,753, and","\u201cGENERATING ASYNCHRONOUS INTERFACES AND METHODS FROM SYNCHRONOUS INTERFACES AND METHODS\u201d to Michael Beisiegel, Jean Sebastien Michel Delfino, Martin P. Nally, Peter P. Niblett, and David J. Vineshaving, having application Ser. No. 11\/015,306.","1. Field","The disclosure relates to a method, system, and article of manufacture for providing service components.","2. Background","Middleware technologies may provide services, such as, Web services, where the Web services may describe a service-oriented, component-based application architecture. Web services may represent a model in which discrete tasks within e-business processes are distributed via the use of software components. Certain Web services may include loosely coupled, reusable software components that semantically encapsulate discrete functionality and are distributed and programmatically accessible over standard Internet protocols. Component-based models allow developers to reuse the building blocks of code created by others to assemble and extend them in new ways.","For example, middleware technologies may provide support for the Java* 2 Platform, Enterprise Edition (J2EE*). The J2EE application model defines a standard for developing component-based multi-tier enterprise applications. Features of J2EE include Web services support and development tools. The J2EE application model divides enterprise applications into three fundamental parts: components, containers, and connectors. Components may be the focus of application developers, while system vendors may implement containers and connectors to conceal complexity and promote portability. The Enterprise JavaBeans (EJB*) component model of J2EE may provide one approach to multi-tier application development. * J2EE, Java, and EJB are trademarks or registered trademarks of Sun Microsystems.","Modern software applications are increasingly complex. Some of this complexity is inherent complexity that occurs when applications are extended to provide new interfaces or to run in new contexts, such as providing Internet web access to customers, or electronic business-to-business interfaces to other organizations. However much of this complexity may be \u201cincidental\u201d complexity created by the middleware technologies that provide support for modern software applications.","Provided are a method, system, and article of manufacture, wherein a client component including at least one client interface is provided. Also provided is a target component including at least one service interface, wherein the at least one client interface is capable of matching the at least one service interface. A service interface implementation corresponding to the at least one service interface is provided, wherein the service interface implementation is a dynamic service interface implementation. The dynamic service interface implementation is executed to allow access to the client component to a service provided by the target component.","In additional embodiments, the client component further comprises a reference that is typed by the at least one client interface that matches the service interface of the target component, wherein an implementation of the target component is not exposed to the client component, wherein the service component implements defined interfaces, and wherein the client component accesses the target component.","In certain embodiments, the dynamic service interface implementation is of an asynchronous variant.","In additional embodiments, the dynamic service interface implementation is of a synchronous variant.","In further embodiments, the service interface implementation is a static service interface implementation of an asynchronous variant.","In yet further embodiments, the service interface implementation is a static service interface implementation of a synchronous variant.","In additional embodiments, the service interface implementation is the dynamic service implementation if the at least one service interface and the service interface implementation are coded in different computer languages, wherein the client interface is coded in a first computer language and the at least one service interface in the target component is coded in a second computer language.","In still additional embodiments, the service interface implementation is a first service interface implementation, wherein the at least one service interface is a first service interface. A second service implementation corresponding to a second service interface is provided, wherein the second service implementation is a static service interface implementation if the second service interface and the second service interface implementation are coded in a same computer language. The static service interface implementation is executed to allow access to the client component to a service provided by the target component.","In further embodiments, the dynamic service implementation interface has a single invoke method with parameters that correspond to functions whose signatures are included in the corresponding service interface, and wherein the at least one service interface has a signature identifying parameters of the service interface. An implementation of the signature is provided in the at least one service interface.","In the following description, reference is made to the accompanying drawings which form a part hereof and which illustrate several embodiments. It is understood that other embodiments may be utilized and structural and operational changes may be made.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1","b":["100","102","104","106","106","108","106","108","102","104","102"]},"Client service components ,  may communicate with the target service components . In certain embodiments, only one of the two client service components ,  may be present. Both client service components ,  can communicate with the target service component . It is possible for client service components to be located internal to the computational device  or external to the computational device  in some other computational device, such as, computational device . For example, in certain embodiments the client service components  are included in the computer readable medium  of the computational device , and the client service components  are included in the computer readable medium  of the computational device . The computational devices ,  may communicate directly or via any suitable network, including those presently known in the art, such as, a storage area network (SAN), a local area network (LAN), an Intranet, the Internet, etc. A client service component may be referred to as a client component. In certain embodiments, a component has interfaces and references, where the references are also typed by interfaces. The interface on the reference of a client component has to match the interface of the target component that the reference is wired to. In certain embodiments, a \u201cService Wire\u201d is a specification that links a reference with a service that will resolve the reference at runtime.","Client service components include the implementation of the client service component and client service interfaces. The client service interfaces are the interfaces of the references of the client components. For example, the client service components  may include the implementation of the client service components and client service interfaces , whereas the client service components  may include the implementations of the client service components and client service interfaces ","Therefore,  illustrates an embodiment in which implementations of client service components , use client service interfaces , to interface with target service interfaces  for accessing services, such as Web services or other services, provided by the target service components .",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2","b":["200","100"]},"The service component architecture model  comprises an exemplary service component , an exemplary service interface , and an exemplary service interface implementation . The service component  may use references (not shown) to access other service components (not shown).","In certain embodiments, the exemplary service component  may be an example of the target service component  and the exemplary service interface  may be an example of the target service interface . The service component  provides (reference numeral ) the service interface  for use by client service components , . The service component architecture model  shown in  is applicable to both the client service components ,  and the target service component .","In certain embodiments, the exemplary service interface  may be provided in one or more computer languages. For example, the exemplary service interface  may provide a Java Interface , a Web Services Definition Language (WSDL) Port Type Interface , and interfaces described by other interface type languages. The Java interface  may define methods comprising signatures of a class in the Java programming language. The WSDL port type interface may include definitions of operations in the WSDL computer language.","The exemplary service interface implementation  is an exemplary implementation of the service interface . The service interface implementation  may be in provided in one or more computer languages. For example, a Java class may provide a Java implementation for the service interface implementation . In another example, a business process execution language implementation may be provided. Implementations in other computer languages (reference numeral ) are also possible in certain embodiments.","In certain embodiments, the service interface implementation  may be in the same or in a different computer language than the computer language of the service interface . For example, the service interface  may be the WSDL port type interface , where the WSDL port type interface  is implemented by the Java implementation . In another example, the service interface  may be the Java interface that is implemented by the Java implementation . In such a case, in certain embodiments, the implementations of the methods whose signatures are provided in the Java interface are provided in the Java implementation . The Java implementation may be a Java class that is implemented in a synchronous implementation style  or an asynchronous implementation style . The service interface implementation  may be a static implementation interface or a dynamic implementation interface.","In certain exemplary embodiments, a class either implements the Java interface specified in a Service component definition, or may implement the methods of that interface, or may implement an exemplary <interface-name>ImplAsync (i.e., asynchronous) variant of that interface, or may implement an exemplary ServicelmplSync (i.e., synchronous) interface, or may implement an exemplary ServicelmplAsync (i.e., asynchronous) interface. If a WSDL portType was used for the interface in the Service component definition, then the class either implements the Java interface derived from the portType, or implements the Java methods derived from the portType, or implements the ServicelmplSync interface, or implements the ServicelmplAsync interface. Certain embodiments can implement static (i.e. implement Java interface or just the methods of the interface), or dynamic (i.e. implement the dynamic interface). This can be done when the service interface is defined as a Java interface, or as a WSDL porttype. Not only synchronous but asynchronous variants exist in certain embodiments. Further details on synchronous and asynchronous vanants may be found in the co-pending and commonly assigned patent application entitled \u201cGENERATING ASYNCHRONOUS INTERFACES AND METHODS FROM SYNCHRONOUS INTERFACES AND METHODS\u201d to Michael Beisiegel, Jean Sebastien Michel Delfino, Martin P. Nally, Peter P. Niblett, and David J. Vineshaving, having application Ser. No. 11\/015,306.","In certain embodiments the Java implementation is via a Java implementation class. The Java implementation class may implement the methods of the Java interface or a synchronous or asynchronous variant of the Java interface . For all methods of the interface either the synchronous or asynchronous variant is implemented. If a WSDL portType interface was used for the interface in the service interface , then the Java implementation class either implements the Java interface derived from the portType, or the Java methods derived from the portType, or a synchronous or asynchronous variant. For example, in certain embodiments if the Java interface is implemented or just the methods are implemented, then either the synchronous or asynchronous variant is implemented.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 3","b":["100","300","302","304","304","304","304","304","302"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 4","FIG. 4"],"b":["302","304","100","206"],"i":"a. "},"Instead of implementing a specific business interface certain embodiments can implement the dynamic implementation interfaces ServiceImplSync (synchronous interface) or ServiceImplAsync (Asynchronous interface). If the interface of a Service is defined by a Java interface, then the implementation class can implement that Java interface, or the implementation class can implement the dynamic implementation interface. If the interface of the Service is defined by a WSDL portType, then the implementation class has to implement the dynamic implementation interface.","For example, control starts at block  where a determination is made as to the language in which the interface of a service is define. If the interface is a Java interface  then the implementation class can implement (at block ) that Java interface, or the implementation class can implement the dynamic implementation interface. If the interface is defined by a WSDL portType  then the implementation class has to implement (at block ) the dynamic implementation interface. The dynamic implementation interface has to be implemented if the interface is not a Java interface.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 5","b":["500","200","100"]},"The dynamic implementation interface  implemented as a Java class provides an invoke method  for calling methods dynamically. This invoke method  takes as arguments, the method name, and an input Object array. The invoke method  is implemented in a dynamic way, i.e., just one method (invoke) is implemented and the method name is passed as argument, so that depending on the method name passed different operations may be performed inside the invoke method. The invoke method return an Object array as well. For example, if a service interface  is defined in the WSDL port type with signatures for first, second, and third operations , , then the invoke method  includes first, second, and third operations , , in the arguments. A Java interface can also be implemented dynamically. The implementation aspect of the target component is hidden to this client.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 6","FIG. 6"],"b":["600","506","100","506","602"]},"In the \u201csynchronous\u201d style, the developer implements the interface defined in a collection of request\/response method implementations. The synchronous dynamic implementation interface  uses the return value of each method (if any) to return the response.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 7","FIG. 7"],"b":["700","508","100","508","702"]},"In the asynchronous dynamic implementation interface  the server-side service invocation signature includes a callback which the service implementation can use to send the reply. The signature omits this callback in the case where the method has no return value and no exceptions.","This choice of a synchronous or asynchronous interface implementations can be made differently for each interface that is supported by a given service component and applies to all the methods within the interface. A developer may avoid the synchronous style if there is a possibility that an operation will take a significant time to complete. The invocation threads are released in a timely fashion in the asynchronous style.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 8","FIG. 8"],"b":["800","500","100","800","802","804","804","806","800"]},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 9","b":"100"},"In certain exemplary embodiments, the service interface  may include first, second, and third method signatures , , . In certain embodiments, a component implementation  comprising pre-existing Java classes may already provide first, second, and third methods , , corresponding to the method signatures , , . For example, the component implementation  comprising the pre-existing Java classes may be provided by previously written code provided by external vendors or libraries.","Certain embodiments provide a runtime  that performs the invocation for the case that the component implements the methods of the interface but not the interface itself. For example, the runtime via the invocation can map  the signatures , , to the methods , , of the component implementation  comprising the pre-existing Java classes. As a result, the methods , , may not have to be written once again. In certain embodiments, the implementation  may be part of a runtime that is able to determine the operations to perform when the pre-existing Java classes  do not implement the service interface but the methods , , ",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 10","b":"100"},"Control starts at block , where a client service component ,  including at least one client service interface , is provided. Control proceeds to block , where a target service component  including at least one target service interface  is provided, wherein the at least one client interface , is capable of interfacing with the at least one target service interface , and wherein a component has interfaces and references where the references are also typed by interfaces.","At block , a service interface implementation  corresponding to the at least one service interface is provided, wherein the service interface implementation  is a either (1) a dynamic service interface implementation if the at least one service interface and the service interface implementation are coded in different computer languages; or (2) a static\/dynamic service interface implementation if the at least one service interface and the service interface implementation are coded in the same computer language.","Control proceeds from block  to block  in case of a static service interface implementation . An block , the static service interface implementation (synchronous or asynchronous variant) is executed to allow access to the client service component ,  to a service provided by the target service component .","Control proceeds from block  to block  in case of a dynamic service interface implementation . At block , the dynamic service interface implementation  (synchronous or asynchronous variant) is executed to allow access to the client service component ,  to a service provided by the target service component .","Therefore , illustrates certain embodiments in which static and dynamic service interface implementations are provided in both synchronous and asynchronous variants.","In certain embodiments, service components can be implemented in different languages. One of the most relevant languages to support is the Java language. For implementing a service component in Java a simple Java class may be implemented. The Java class implements the interface defined for the service component. Certain embodiments provide a choice between a static and dynamic implementation style of the service component interface. The dynamic implementation style may be used when the actual service component interface is not expressed in Java. A service component implemented in Java is able to use other services in the implementation without referring to the other services explicitly. The Java implementation is also able to use service references to refer to the services used by the Java implementation.","Certain embodiments, provide a Java implementation model for service components based on a simple Java class. If the service components interfaces are defined in Java, then the Java class either implements those interfaces or the Java class implements the dynamic service implementation interface. If the service components interfaces are defined in another interface type language (e.g., WSDL portTypes), then the Java class implements the dynamic service implementation interface. The Java class can also be implemented using the asynchronous implementation style. The Java service implementation can make use of other services using service references. The usage of these other services is not hard wired into the Java class. The service implementation can be configured through properties whose values are provided by the service component. The service component definitions can be provided in-line in the Java class in form of Javadoc formatted annotations. These annotations cover interface, reference and qualifier definitions.","The described techniques may be implemented as a method, apparatus, or article of manufacture involving software, firmware, micro-code, hardware and\/or any combination thereof. The term \u201carticle of manufacture\u201d as used herein refers to program instructions, code and\/or logic implemented in circuitry (e.g., an integrated circuit chip, Programmable Gate Array (PGA), ASIC, etc.) and\/or a computer readable medium (e.g., magnetic storage medium, such as hard disk drive, floppy disk, tape), optical storage (e.g., CD-ROM, DVD-ROM, optical disk, etc.), volatile and non-volatile memory device (e.g., Electrically Erasable Programmable Read Only Memory (EEPROM), Read Only Memory (ROM), Programmable Read Only Memory (PROM), Random Access Memory (RAM), Dynamic Random Access Memory (DRAM), Static Random Access Memory (SRAM), flash, firmware, programmable logic, etc.). Code in the computer readable medium may be accessed and executed by a machine, such as, a processor. In certain embodiments, the code in which embodiments are made may further be accessible through a transmission medium or from a file server via a network. In such cases, the article of manufacture in which the code is implemented may comprise a transmission medium, such as a network transmission line, wireless transmission media, signals propagating through space, radio waves, infrared signals, etc. Of course, those skilled in the art will recognize that many modifications may be made without departing from the scope of the embodiments, and that the article of manufacture may comprise any information bearing medium known in the art. For example, the article of manufacture comprises a storage medium having stored therein instructions that when executed by a machine results in operations being performed.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 11","FIG. 111"],"b":["1100","102","114","1100","1100","1102","1104","1100","1106","1108","1100","102","114","1108","1108","1100","1110","1112","1106","1104","1102","1110","1112","1108","1110","1102","1110","1110","1106","1102"]},"Certain embodiments may be directed to a method for deploying computing instruction by a person or automated processing integrating computer-readable code into a computing system, wherein the code in combination with the computing system is enabled to perform the operations of the described embodiments.","At least certain of the operations illustrated in the figures may be performed in parallel as well as sequentially. In alternative embodiments, certain of the operations may be performed in a different order, modified or removed.","Furthermore, many of the software and hardware components have been described in separate modules for purposes of illustration. Such components may be integrated into a fewer number of components or divided into a larger number of components. Additionally, certain operations described as performed by a specific component may be performed by other components.","The data structures and components shown or referred to in  are described as having specific types of information. In alternative embodiments, the data structures and components may be structured differently and have fewer, more or different fields or different functions than those shown or referred to in the figures.","Therefore, the foregoing description of the embodiments has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the embodiments to the precise form disclosed. Many modifications and variations are possible in light of the above teaching."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
