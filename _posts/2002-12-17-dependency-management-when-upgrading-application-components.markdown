---
title: Dependency management when upgrading application components
abstract: An autonomic component installation system. The system can include a catalog of host components installed within a computing system and an autonomic installer coupled to the catalog and programmed to determine, when installing an upgraded component, whether the upgraded component provides component capabilities required by the host components in the catalog. The catalog can include both host components and respective publicly accessible data, method implementations and method prototypes provided by the host components. Consequently, the autonomic installer can determine whether the upgraded component will have access to required publicly accessible data and method implementations. The autonomic installer further can be configured to determine whether modifications included in the upgraded component have caused changes in associated method prototypes which differ from the method prototypes in the catalog. Finally, a machine-readable ReadMe file processor can be coupled to the autonomic installer to identify the required publicly accessible data and methods implementations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08312446&OS=08312446&RS=08312446
owner: International Business Machines Corporation
number: 08312446
owner_city: Armonk
owner_country: US
publication_date: 20021217
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Statement of the Technical Field","The present invention relates to the field of application component installation, and more particularly to dependency management during the installation of upgraded application components.","2. Description of the Related Art","Though often overlooked, application installation is a prerequisite to interacting with a software application. Specifically, in most circumstances, an application can be properly executed only subsequent to the completion of a successful installation process. At the minimum, a typical software application installation requires a transfer of files to the file structure of a computing system, and the configuration of the computing system to particularly interact with the software application. Ordinarily, the configuration of the computing system includes the addition or modification of registry settings, the addition or modification of entries to one or more initialization files, or both.","In the context of an application installation meant to upgrade the components of an application, oftentimes, simply replacing application out-dated versions of application components with newer versions of components will not alone suffice as a complete application upgrade. Rather, in an era of code re-use, shared libraries, and interdependent program objects, replacing a single application component can have a dramatic effect upon other separate, but independent applications. Common disastrous consequences include altered and now incompatible application programming interfaces (APIs), re-positioned application objects, and removed application objects. In all cases, an application dependency can be broken simply by upgrading the application components of another, unrelated application.","Whereas application component upgrades can be problematic generally, in an autonomic system, the problem can be particularly acute. For the uninitiated, autonomic computing systems self-regulate, self-repair and respond to changing conditions, without requiring any conscious effort on the part of the computing system operator. To that end, the computing system itself can bear the responsibility of coping with its own complexity. The crux of autonomic computing relates to eight principal characteristics:\n\n","Thus, in keeping with the principles of autonomic computing, an upgrade to application componentry must not only account for the seamless installation and configuration of the upgraded application, but also the impact of the upgrade upon dependencies must be considered. Specifically, it will be of paramount concern to the autonomic system that dependent applications are not \u201cbroken\u201d in consequence of changing APIs, moved application elements, modified application elements, and removed application elements.","Presently, several application upgrade strategies exist. One such well-known strategy includes the venerable \u201cReadMe\u201d file. In this strategy, software developers provide a list, typically as standard prose, of components in the upgraded application which have changed, along with a characterization of how the components have changed. Subsequently, during installation, an application administrator can peruse the contents of the list to determine the level of exposure faced by dependencies in view of the proposed application upgrade. As it will be recognized by one skilled in the art, however, the creation and use of a conventional ReadMe file can be both tedious and unreliable.","It will also be well understood by those skilled artisans that automated methods exist at least to remediate the tedium associated with the conventional ReadMe file. Specifically, various programming tools have been developed through which application component dependencies can be identified among system elements. Prior to any installation effort, the programming tool can be executed so as to determine the risk of undertaking the application upgrade. Still, this process lacks the granularity necessary to definitively determine what components may have changed in consequence of an upgrade. As a result, the analysis can consume substantial processing resources without producing the analysis necessary to truly identify the upgrade risk to specific dependencies.","The present invention is an autonomic component installation system which overcomes the deficiencies inherent to conventional application component installation systems and methods and provides a novel and non-obvious method and system for undertaking dependency management when installing an upgraded component in a system of components. In a preferred aspect of the present invention, an autonomic component installation system can include catalog of host components installed within a computing system and an autonomic installer coupled to the catalog and programmed to determine, when installing an upgraded component, whether the upgraded component provides component capabilities required by the host components in the catalog.","The catalog can include both a catalog of host components and respective publicly accessible data, method implementations and method prototypes provided by the host components. In this regard, the autonomic installer can determine whether the upgraded component will have access to required ones of the publicly accessible data and method implementations. The autonomic installer further can be configured to determine whether modifications included in the upgraded component have caused changes in associated method prototypes which differ from the method prototypes in the catalog. Finally, a machine readable ReadMe file processor can be coupled to the autonomic installer and configured to identify the required ones of said publicly accessible data and methods implementations. Notably, the machine readable ReadMe file can be an XML formatted file.","In the preferred aspect of the present invention, a code analysis engine can be configured to identify within component code, publicly accessible data utilized by the component code, dependent methods utilized by the component code, and methods and data provided by the component code. Additionally, a machine readable ReadMe file production module can be coupled both to the code analysis engine and also to an integrated development environment configured to create said upgraded component. In this regard, the production module can create the machine readable ReadMe file based upon the identified publicly accessible data utilized by the component code, dependent methods utilized by the component code, and methods and data provided by the component code.","A dependency management method can include parsing a machine readable ReadMe file associated with an upgraded component to an application to identify both data and method dependencies of the upgraded component, and interface prototype information regarding methods implemented in the upgraded component. Prior to installing the upgraded component, it can be ensured that the identified data and method dependencies can be accessed by the upgraded component upon installation of the upgraded component. Moreover, it can be ensured that other components which rely upon the methods implemented in the upgraded component will not be affected by the installation in consequence of changes reflected by the interface prototype information.","In this regard, the step of ensuring can include determining that at least one of the identified data and method dependencies are missing; and, locating and loading the identified data and method dependency so that no one of the identified data and method dependencies remain missing. Also, the step of ensuring can include the step of further ensuring by reference to a catalog of expected interface prototype information that other components which rely upon the methods implemented in the upgraded component will not be affected by the installation in consequence of changes reflected by the interface prototype information. Importantly, during the ensuring process, the catalog of expected interface prototype information can be compared with other components which rely upon the methods implemented in the upgraded component to detect prototype mismatches. For each prototype mismatch detected, an upgrade to a corresponding one of the other components can be located. Subsequently, the corresponding one of the other components can be replaced with the located upgrade.","The present invention is a method and system for managing application component dependencies when upgrading application components in an autonomic system. Specifically, a machine readable ReadMe file can be created in which dependencies associated with upgrade information regarding an upgrade installation of an application can be listed. The upgrade information can include a listing of system components which have changed, new dependencies created by the system components, altered APIs and the like. In a preferred aspect of the present invention, the listings within machine readable ReadMe file can be formatted with markup language tags such as XML tags so as to facilitate the portability of the machine readable ReadMe file.","When an autonomic system prepares to upgrade one or more application components, first the autonomic system can read the machine readable ReadMe file to determine which dependencies are required by the application component or components. Notably, where no relevant dependencies can be identified, the upgrade can proceed. By comparison, where relevant dependencies can be identified, the dependencies can be located and installed. Importantly, the dependency identification process can be repeated recursively for each located dependency so as to ensure the operability of all dependencies.","Once, all dependencies have been located and installed as necessary, the autonomic system can determine from the machine readable ReadMe file which other application components are likely to be impacted by the upgrade. In particular, changes to the API of the upgraded application component or components can be considered in this regard. If the autonomic system detects an API mismatch, the autonomic system can attempt to locate a suitable update for the dependency relying upon the outdated API. In one embodiment, the system can maintain a list of Web sites that contain components available for loading. The system can consult the sites in the list until the suitable component is found, or until all sites are determined not to have a suitable component. In the case where mismatches exist and no suitable updates for the dependencies can be located, a failure record can be delivered to the systems administrator.","Notably, the machine readable ReadMe files can be generated programmatically. More particularly, in a preferred aspect of the invention, the machine readable ReadMe files can be generated through a tool associated with or incorporated within an application component development environment. Through versioning functionality ordinarily included as part of the development environment, it can be determined whether a particular function or data member of an application component has changed, or where the function or data member simply has been relocated within a composition of application components, or whether the changes to a function member will not affect dependencies through a mere change in implementation rather than interface.",{"@attributes":{"id":"p-0024","num":"0031"},"figref":["FIG. 1","FIG. 1"],"b":["120","120","120","110","130"]},"Notably, whereas the development environment  can manage the entirety of an application formed from many independent and interdependent application components, the development environment  can track those application components which are dependent upon both the publicly accessible data members of the upgraded component or components , and also the publicly accessible method members of the upgraded component or components . In this way, once the upgraded component or components  of the application have been completed, the development environment  can produce a machine readable ReadMe file  into which the development environment  can record the identity of those application components which have changed, any new dependencies which have been created by virtue of the changed component or components , and any alterations to the API by virtue of the changed component or components .","Subsequently, as an autonomic installation process  prepares to install the application, including the upgraded application component or components , the autonomic installation process  first can review the contents of the machine readable ReadMe file  to identify those dependencies which are required by each component, and also the impact which the upgraded component or components  may have upon other components in the application\u2014particularly by way of any modifications to the application API. Notably, where the machine readable ReadMe file  has been formatted according to an XML document type definition for machine readable ReadMe files, the machine readable ReadMe file while have associated therewith a level of portability in consequence of which the machine readable ReadMe file can be processed by any autonomic installation process, regardless of internal protocol.","Importantly, initially the autonomic installation process  can determine from the machine readable ReadMe file  those dependencies which will be required for the proper operation of the upgraded application including the upgraded component or components . If the autonomic installation process  determines that all dependencies can be satisfied, then the installation process can proceed without delay. Otherwise, the autonomic installation process  can attempt to locate and load all objects hosting the necessary dependencies. If the autonomic installation process  cannot locate one or more of the required dependencies, the installation can terminate gracefully.","Once the required dependencies of the upgraded application have been satisfied, next the autonomic installation process can determine from the machine readable ReadMe file  whether any of the application API has changed so as to \u201cbreak\u201d a dependent application component. In the event that a mismatch has been detected between the form of the API expected by the dependent application component and the new form of the API, an upgrade to the dependent application can be located which might demonstrate better compatibility with the new form of the API. If an upgrade can be located, the autonomic installation process  can proceed to process the installed components . Otherwise, if an upgrade cannot be located, again the installation can terminate gracefully.","Notably, the dependency management process illustrated herein can be applied not merely to a single instance of an upgraded application component, but also to each dependency which the autonomic installation process  must itself install to satisfy the dependency requirements of the upgraded application component or components . In this way, throughout the chain of dependencies, it can be ensured that all installed components neither have been broken by the upgrades of other application components, nor lack any required dependencies for the suitable operation of the installed components.",{"@attributes":{"id":"p-0030","num":"0037"},"figref":["FIG. 2","FIG. 1"],"b":"200"},"The machine readable ReadMe file  also can include a listing of dependencies  required by the application so as to function properly. Again, as in the case of the public data, to identify public data required by the application, the byte code or the source code of the individual components can be inspected for references to methods within other components. Where a method within a component references a method of another component, it can be presumed that the upgraded application component is dependent upon the component hosting the identified method.","Finally, the machine readable ReadMe file  can include a listing of method prototypes  implemented within the upgraded application component or components. Notably, by cataloging those method prototypes  implemented within the upgraded application component or components, a catalog can be developed for all application components which specifies not only those methods defined within a system, but also the source of those methods and their respective prototypes. Accordingly, where the prototype (e.g. interface) of any one method changes by way of an application upgrade, a review of the catalog will reveal the change to the system API.",{"@attributes":{"id":"p-0033","num":"0040"},"figref":["FIG. 3","FIG. 1"],"b":["305","310","315"]},"In decision block , if a mismatch is not identified (meaning that the required public data will be available to the upgraded application component or components), the installation process can proceed to block . If, however, a mismatch can be detected, in block  the component hosting the required public data can be located and loaded. In decision block , if the component hosting the required public data cannot be located in block  the installation of the upgraded component or components can be aborted and a failure record can be delivered to an administrative entity, whether manually or in an automated manner.","In block , presuming that the required public data will be available to the upgraded component or components, required externally defined methods also can be identified from a review of the machine readable ReadMe file. Once again, the required methods can be identified within the catalog to ensure that the methods will be available to the upgraded component or components. If a mismatch is detected in decision block , as before, in block , the component hosting the required method can be located and loaded so as to make the method available to the upgraded component or components. In decision block , if the hosting component cannot be located and loaded, in block , the installation can be aborted and, as before, a failure record can be forwarded to an administrative entity.","In block , presuming that the required externally defined methods will be available to the upgraded component or components, those methods implemented within the upgraded component or components which have been modified can be identified. In block , the catalog can be reviewed to identify those other components which are dependent upon the methods which have been modified within the upgraded component or components. In decision block , if a mismatch is detected, in consequence of a different method signature or prototype, it can be presumed that the API of the application has changed. Consequently, in block , an updated version of the dependent component can be located and loaded so as to provide compatibility between the upgraded component or components and the dependent component.","In decision block , if an updated version of the dependent component cannot be located and loaded, in block  the installation can be aborted and a failure record can be forwarded to an administrative entity. Otherwise, in block , the installation of the upgraded component or components can proceed to completion. Importantly, as it will be recognized by one skilled in the art, the process illustrated herein can provide a foundation for the autonomic installation of upgraded application components in a manner so as to both ensure the operability of the upgraded application components, while further assuring that the upgraded application components will not \u201cbreak\u201d other application components in the system.","The present invention can be realized in hardware, software, or a combination of hardware and software. An implementation of the method and system of the present invention can be realized in a centralized fashion in one computer system, or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system, or other apparatus adapted for carrying out the methods described herein, is suited to perform the functions described herein.","A typical combination of hardware and software could be a general purpose computer system with a computer program that, when being loaded and executed, controls the computer system such that it carries out the methods described herein. The present invention can also be embedded in a computer program product, which comprises all the features enabling the implementation of the methods described herein, and which, when loaded in a computer system is able to carry out these methods.","Computer program or application in the present context means any expression, in any language, code or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a) conversion to another language, code or notation; b) reproduction in a different material form. Significantly, this invention can be embodied in other specific forms without departing from the spirit or essential attributes thereof, and accordingly, reference should be had to the following claims, rather than to the foregoing specification, as indicating the scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["There are shown in the drawings embodiments which are presently preferred, it being understood, however, that the invention is not limited to the precise arrangements and instrumentalities shown, wherein:",{"@attributes":{"id":"p-0017","num":"0024"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0025"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0019","num":"0026"},"figref":["FIG. 3","FIG. 1"]}]},"DETDESC":[{},{}]}
