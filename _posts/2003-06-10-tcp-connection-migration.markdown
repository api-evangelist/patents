---
title: TCP connection migration
abstract: A method is provided for migrating a connection between two computing nodes of a computing center. The method includes establishing the connection between a remote application and a local application on a first computing node, pausing the local application, restoring the local application to a second computing node, and reestablishing the connection between the remote application and the local application on the second computing node. A connection filter on the first computing node can maintain connections while the local application is paused. An application scheduler routine can cause the application to be restored on the second computing node where a second connection filter obtains connection information and reestablishes the connection to the remote application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08090836&OS=08090836&RS=08090836
owner: Symantec Operating Corporation
number: 08090836
owner_city: Mountain View
owner_country: US
publication_date: 20030610
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application claims the benefit of U.S. Provisional Application Ser. No. 60\/386,994 titled \u201cTCP Connection Migration Between UNIX Systems,\u201d filed Jun. 10, 2002, which is incorporated herein by reference. This application also claims benefit of U.S. Provisional Application Ser. No. 60\/386,995 titled \u201cSustaining TCP Connections to Remote Applications While a Local Application is Terminated and Restarted,\u201d filed Jun. 10, 2002, which is incorporated herein by reference. This application is related to, and has the same filing date as, co-owned U.S. application Ser. No. 10\/458,819 titled \u201cSustaining TCP Connections.\u201d","1. Field of the Invention","The present invention relates generally to the field of computer networks and more particularly to a method and an apparatus for migrating a network connection to follow an application that is moved from one computing node to another within a centralized computing system.","2. Description of the Prior Art","Presently, users purchase dedicated software applications to provide computing resources. However, certain economies of scale should be achievable by making applications available over a network, such as the Internet, so that users need not own their own dedicated copies. Instead, an application could be made centrally available and users would purchase the computing services made available by the application.","One problem with centralizing computer services relates to load balancing. More particularly, centralized computing systems typically include a set of identical machines running in parallel, and to achieve maximum efficiency from such a system it is desirable to have each of the machines equally utilized. Accordingly, when the load on one machine drops and the load on another increases, it is desirable to shift load from the over utilized machine to the less utilized machine. However, this is not easily accomplished when applications on the over utilized machine are actively connected to remote applications, without closing the connections.","Accordingly, what is desired is a method for migrating an application from one machine to another in a centralized computing system while maintaining the connections between the application and remote applications.","The present invention provides a method for migrating a connection between two computing nodes of a computing center. The method includes establishing the connection, such as a TCP connection, between a remote application and a local application on a first computing node, pausing the local application, storing the local application to a second computing node, and reestablishing the connection between the remote application and the local application on the second computing node. In some embodiments establishing the connection can include assigning a virtual IP address to the local application. In some of these embodiments establishing the connection can further include monitoring communications having the virtual IP address. In some embodiments pausing the local application can include capturing a snapshot of the local application. In some of these embodiments capturing the snapshot can include freezing a state of the local application, and in some of these embodiments capturing the snapshot can further include storing the state to a memory device. In some of the latter embodiments restoring the local application can include recalling the state from the memory device.","The present invention also provides another method for migrating a connection between two computing nodes of a computing center. This method includes establishing the connection between a remote application and a local application on a first computing node including a first connection filter, pausing the local application, restoring the local application to a second computing node including a second connection filter, and reestablishing the connection between the remote application and the local application on the second computing node. In some embodiments the first connection filter maintains the connection while the local application is paused. Also in some embodiments pausing the local application can include storing an IP address, a snapshot ID, and a connection structure of the local application. In some of these embodiments restoring the local application to the second computing node can include sending the IP address, the snapshot ID, and the connection structure to the second connection filter. In some embodiments reestablishing the connection can include a handshake sequence to provide the new connection filter with a different port number. Also in some embodiments reestablishing the connection can include using a different local socket. Embodiments of the method of the invention can also include adjusting a sequence number and an acknowledgement number for each packet transmitted over the reestablished connection.","The present invention also provides a computing center. The computing center includes a first computing node configured to host a local application and to establish a connection between the local application and a remote application and a second computing node. The computing center also includes a snapshot daemon configured to pause the local application and a first connection filter configured to maintain the connection to the remote application while the local application is paused. In some embodiments the snapshot daemon and the first connection filter reside on the first computing node. The computing center further includes a restore daemon configured to restore the local application to the second computing node and a second connection filter configured to reestablish the connection between the remote application and the local application. In some embodiments the restore daemon and the second connection filter reside on the second computing node. Some embodiments of the computing center can further include an application scheduler routine in communication with the first and second computing nodes and configured to cause the snapshot daemon to pause the local application and to cause the restore daemon to restore the local application to the second computing node.","In some embodiments of the computing center the first connection filter can include a first connection filter driver and a connection filter daemon. In these embodiments the first connection filter driver is configured to monitor the connection and send data over the connection to maintain the connection while the local application is paused, and the connection filter daemon configured to provide configuration information to the connection filter driver. In some of these embodiments the first connection filter can further include a first connection filter subroutine linked to the snapshot daemon and configured to interface the snapshot daemon with the first connection filter driver.","In some embodiments of the computing center the second connection filter can include a second connection filter driver configured to adjust a sequence number for each packet transmitted over the reestablished connection. In some of these embodiments the second connection filter can further include a second connection filter subroutine linked to the restore daemon and configured to interface the restore daemon with the second connection filter driver.","The present invention provides a method for maintaining a connection between a remote application and a local application while the local application is unavailable or inactive. The present invention also provides a method for migrating the connection from one computing node to another as needed to follow the local application. In order to better understand the present invention, aspects of the environment within which the invention operates will first be described.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 1","FIG. 1"],"b":["100","102","100","104","100","106","108","106","106","108","106","108","100"]},"A remote device  can be essentially any computing device such as an application server or a personal computer. Remote devices  are configured to run programs, herein referred to as remote applications. A remote application can be anything from a simple client program to a complex server application.","Network  allows connections to be established between the local computing center  and remote devices  for sharing data. The network  can be any kind of network or combination of networks, for example, a Local Area Network (LAN), a Wide Area Network (WAN), the Internet, etc. In some embodiments the network  supports connections and data transmissions according to the Internet Protocol (IP) and in some further embodiments the network  supports connections and data transmissions additionally according to a higher protocol such as the Transmission Control Protocol (TCP). Connections between the local computing center  and remote devices  can be either temporary or permanent, as indicated by the dashed and solid lines, respectively. Establishing, maintaining, and closing connections will be discussed in greater detail further herein.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 2","FIG. 1"],"b":["200","202","204","200","202","106","200","202","200","202","206","208","210","212","206"]},"The lowest software layer for both computing nodes ,  includes network drivers . The network drivers  send data to, and receive data from, the network . As more than one connection can be open to more than one local application , the network drivers  are responsible for directing data to the correct local application . In those embodiments in which data is segmented into TCP packets, a header associated with each packet allows the network drivers  to properly direct each incoming packet.","A connection filter driver , itself a loadable driver, sits above the network drivers  of both computing nodes , . The connection filter driver  monitors the data stream and is configured to maintain connections in certain circumstances, as will be discussed in greater detail herein. The connection filter driver  interacts with other programs on the local computing node  via ioctl calls and interacts with programs on systems other than the local computing node , such as those on remote devices , by remote connections through the connection filter daemon .","A kernel network stack  sits above the connection filter driver . The kernel network stack  includes network protocol software, for instance, TCP\/IP software. The network protocol software affixes appropriate addresses to the outgoing data stream and establishes, maintains, and terminates connections according to a set of rules. These operations can include segmenting the outgoing data stream into packets and adding header information for addressing purposes, and can also include stripping header information from incoming packets and reassembling those packets into a data stream. Exemplary rules are defined in RFC 793 for TCP and RFC 791 for IP version 4 and RFC 1883 and 1884 for IP version 6.","A kernel  is the core of an operating system for both computing nodes ,  and provides basic computing services to local applications  and the other programs operating on the computing nodes ,  as can be seen from . User-level programs, such as local application , sit on top of the kernel . Another user-level program is a connection filter daemon . The connection filter daemon  provides configuration information to the connection filter driver . The connection filter daemon  also directs restore requests from the connection filter driver  to the application scheduler routine , as will be discussed further elsewhere herein. Further, the connection filter daemon  handles network connections to remote systems for the connection filter driver . Other user-level programs include connection filter subroutines  that are linked with certain other user-level programs such as a snapshot daemon  and a restore daemon .","In normal operation, a local application  running on a computing node  can connect through a network  to one or more remote applications  running on one or more remote devices  (). In some instances, for example, in order to fulfill a request from one remote application , the local application  must communicate with one or more other remote applications . In the normal course of operations it may be desirable to close the local application  temporarily. For instance, the application scheduler routine  may determine that computing node  is being too heavily utilized while another computing node  is being underutilized, and therefore may seek to shift some of the load from the first computing node  to the second computing node . In such a scenario it would be desirable to move the local application  from the first computing node  to the second computing node  without interrupting the connections between the local application  and any remote applications . Similarly, in other instances the remote application  may become inactive making it desirable, for the sake of overall system efficiency, to close the local application  until such time as the remote application  requires it again. It will be appreciated, however, that although these examples will be used for illustrative purposes, the present invention is not limited by these examples.","Returning to , initially a connection filter driver  is loaded onto each computing node , . Loading the connection filter drivers  is typically performed when the computing nodes ,  are booted, but loading and unloading of the connection filter drivers  may be performed at any time. After the connection filter driver  has been loaded onto a computing node  or , a connection filter daemon  can be loaded. Once loaded, the connection filter daemon  reads configuration files to gather configuration information for the connection filter driver . The connection filter daemon  formats the configuration information and sends it to connection filter driver  using an ioctl call. The connection filter driver  stores the configuration information, and in some embodiments sends an acknowledgement of the configuration to the connection filter daemon .","As noted, the connection filter daemon  reads configuration files. One type of configuration file is a mounted directory that is shared by multiple computing nodes , . Another type of configuration file is local to each individual computing node  or . Yet another type of configuration file is specific to each active local application . Configuration files can include information such as the port number of the port used by the connection filter daemon ; the address and port number of the application scheduler routine ; acknowledgement and heartbeat information; the numbers of included and excluded ports; included and excluded addresses, and the numbers of each; and the name of the net interface to use.","Once the connection filter driver  and the connection filter daemon  are loaded, a local application  can be loaded. In those embodiments in which the local computing center  () is configured as a VLAN, the local application  is assigned a virtual IP address. The connection filter driver  is provided with the IP address of the local application  so that the connection filter driver  can monitor the data flow to and from the local application . The connection filter driver  can monitor both for connect and disconnect requests as well as for the amount of data being sent and received by the local application .","Normally, the connection filter driver  does nothing to the network traffic except to monitor, and in some embodiments any traffic that is not in the form of TCP packets is ignored by the connection filter driver . In some embodiments, if a computing node ,  does not have any active local applications , then the connection filter driver  on that computing node ,  ignores all network traffic including any TCP packet traffic. If a local application  is active on a computing node , the connection filter driver  verifies that the traffic is either going to or coming from the local application .","The operation of a connection filter driver  during the normal exchange of data is illustrated by . In the example shown in , a remote application  begins by sending a request across a network  to a computing node . In those embodiments that transmit data as TCP packets, a connection filter driver  monitors the control bits in the header of the packet corresponding to the request. More specifically, the connection filter driver  monitors the control bits for connect or disconnect requests. In the example of , since the request is neither a connect or disconnect request, the connection filter driver  does nothing and the request is passed through a kernel network stack  and to a local application . The local application  handles the request and generates a response to be sent back to the remote application . The response is then passed through kernel network stack  and the connection filter . The connection filter driver  monitors control bits in the response for connect or disconnect requests. In the example, since the response is neither a connect or disconnect request, the connection filter driver  does nothing and the response is transmitted across the network  to the remote application  which then handles the response. It will be appreciated from the example of  that the function of connection filter driver  is the same regardless of the direction of the data flow.","The functionality of the connection filter driver  during connect and disconnect operations is illustrated by . In the first example shown in , the local application  sends a connect request to the remote application . The connection filter driver  monitors the connect request and notes that it is for a connect and creates a connection structure. The connection structure is linked by the connection filter driver  to the local application  and identifies the connection with the IP address for the computing node  and the remote device  () and the port numbers for the local application  and the remote application .","Once the remote application  receives the connect request and accepts the connection, the remote application  acknowledges the connection. The connection filter driver  monitors the connection acknowledgement and updates the connection status in the connection structure. Lastly, the local application  receives the connection acknowledgement. A similar process occurs when a connection is terminated, as can be seen by the second example of . Here, however, the connection structure is not removed until the disconnect request has been accepted and an acknowledgement of the disconnect is noted. It will be appreciated that in , although the connect request is initiated by the local application  and the disconnect request is initiated by the remote application , the described functionality is equally applicable where the local application  initiates a disconnect or the remote application  initiates a connect.","Referring back to , the connection filter  is able to maintain a connection while a local application  is paused. In some embodiments pausing the local application  includes acquiring a snapshot of the local application  and storing the snapshot to a storage system  (). In this context a snapshot is a representation of the local application  at a particular point in time. Restoring a snapshot of the local application  allows the local application  to resume operation from where it left off prior to pausing.","Exemplary functionality of the connection filter driver  during a snapshot operation is illustrated by . When a snapshot is initiated for a local application (not shown), for example by the application scheduler routine  (), a snapshot daemon  sends a notification to the connection filter driver , by way of connection filter subroutines , to change the state of the local application as represented by an application structure. In the given example, the snapshot daemon  sends a SNAPSHOTSTART notification to the connection filter driver , and the connection filter driver  changes the state of the local application from CONNECTED to SNAPSHOTSTART in the application structure. Although the state of the local application is changed, the states of any connections in the connection structure remain set to CONNECT. In some embodiments, the connection filter subroutines  use an ioctl request to change the application state of the local application in the application structure of the connection filter driver .","Next, the snapshot daemon  pauses the local application and sends another notification to the connection filter driver , again by way of connection filter subroutines , to again change the states of the connections. In the example of , the state of the local application in the application structure held by the connection filter driver  is changed from SNAPSHOTSTART to SNAPSHOTFREEZE. At this point in time all network traffic to the local application is blocked, except for packets containing only TCP acknowledgements in some embodiments, and the connection filter driver  begins to maintain the connections to the remote applications.","As shown in , after the snapshot daemon  pauses the local application, the snapshot daemon  sends a request for connection information to the connection filter subroutines . The connection filter subroutines  gets the number of connections and sends that number to the connection filter driver . The connection filter driver  calculates the number of connections and then determines the necessary size for a connection information buffer. The connection filter driver  then returns this information to the connection filter subroutines , which allocates the connection information buffer and requests connection information from the connection filter driver . The connection filter driver  gets the connection information and returns it to the connection filter subroutines . The connection filter subroutines  then returns the connection information buffer to the snapshot daemon .","Also after the local application has been paused, the snapshot daemon  validates that the connections to the remote applications are being handled by the connection filter driver  and that all of the data has been accounted. In some embodiments, the snapshot daemon  makes a separate call to the connection filter subroutines  for each connection to a remote application to obtain the connection's status information and data count. The connection filter subroutines  retain the status and data count for each connection in the connection information buffer. In some embodiments, if the data count does not match an expected data count, the snapshot daemon  can make another request for connection information. The subsequent request follows the same sequence as the original request, as can be seen from .","Once the state of the local application in the application structure has been set to SNAPSHOTFREEZE and all network traffic to the local application has been blocked, the connection filter driver  handles the connections to the remote applications. It is important to note that although network traffic to the local application is blocked, the connection filter driver  can still allow data to be sent from the local application to allow the data buffers to finish emptying. In those embodiments that use TCP packets, the connection filter driver  will recognize a FIN segment as the end of the data stream. In these embodiments the connection filter driver  blocks the FIN, and any subsequent packets, from being sent to the remote application. Otherwise, the remote application will receive the FIN and interpret it to mean that the connection is being closed. Instead of passing the FIN to the remote application, the connection filter driver  instead returns a FIN and an acknowledgement to the local application.","Near the end of the snapshot process the local application is terminated. Each connection is split into a local side and a remote side on either side of the connection filter driver . The connection filter driver  closes the local side connection while maintaining the remote side connection. The connection state of each connection in the connection structure is set to CONNECTRMT.","Once the snapshot processing is complete, the snapshot daemon  sends a notification to the connection filter driver , by way of connection filter subroutines , to again change the state of the local application in the application structure. In the given example, the snapshot daemon  sends a SNAPSHOTDONE notification to the connection filter driver , and the connection filter driver  changes the state of the local application from SNAPSHOTFREEZE to SNAPSHOTDONE in the application structure. It should be noted that the snapshot of the local application is given a snapshot ID and saved to a storage system  ().","While the connection filter driver  is handling the connections to the remote applications, either during the snapshot process or after the snapshot is complete, the connection filter driver  can receive several different types of data intended for the local application. The types of data include normal network activities such as acknowledgements and heartbeats, requests to close, open, or abort a connection, and all other data. The treatment of each of these data types by the connection filter driver  will be discussed below.","Generally, if data is received during a snapshot from a remote application by the connection filter driver , and the data is neither a connection reset nor configuration heartbeat data, then the connection filter driver  will not be able to mimic the local application to maintain the connection. In the situation where a snapshot of the local application is in progress, and none of the local side connections have yet been terminated, the snapshot daemon  can abort the snapshot process. This is achieved, in some embodiments, by sending a SNAPSHOTABORT request to the connection filter driver  via the connection filter subroutines . The connection filter driver  will then set the states of the local application in the application structure to RESTORED and the normal data flow will resume.","Otherwise, if a snapshot is in progress and local side connections have been terminated, as shown in , the connection filter driver  sets a restore flag so that the connection filter driver  will know to send a restore request once the snapshot is completed. The restore process is discussed in detail elsewhere herein. In addition to setting the restore flag, the connection filter driver  will not acknowledge the data, and will instead tell the remote application to stop sending data. In some embodiments, this is achieved by setting a TCP window to zero.","In those situations in which the application state in the application structure is set to SNAPSHOTDONE when the connection filter driver  receives data that is neither normal network activities nor requests to abort a connection nor a configured heartbeat message then the connection filter driver  requests a restore of the local application. The restore process will be discussed in greater detail elsewhere herein.","The connection filter driver  may receive requests to close, open, or abort a connection during the snapshot process. As shown in , in some embodiments when, during a snapshot, a FIN request (to close a connection) or a SYN request (to open a connection) is received by the connection filter driver , the FIN or SYN request is stopped by the connection filter driver  and not passed on. Instead, the connection filter driver  sets a restore flag so that the connection filter driver  will know to send a restore request once the snapshot is completed. The restore process is discussed in detail elsewhere herein.","In some embodiments when, during a snapshot, a RST request (to abort a connection) is received by the connection filter driver , the connection filter driver  will set the connection state in the connection structure to RST to indicate a reset has been received but that the connection structure cannot yet be removed from the connection filter driver until after the local application has been restored. The connection filter driver , however, will not respond to the RST request and does not set a restore flag. Eventually, once the local application has been restored and the connection has been reestablished, the connection filter driver  will send the RST request to the local application to abort the connection.","The handling of open, close, and abort requests by the connection filter driver  after a snapshot is completed is analogous to the handling of such requests during a snapshot, except that in the case of FIN and SYN requests there is no longer a need to set a restore flag. Instead, the connection filter driver  requests a restore immediately.","Additionally, the connection filter driver  is configured to handle acknowledgements and heartbeats during and after a snapshot process. If an acknowledgement is received by the connection filter driver , the connection filter driver  will respond to the remote application with an acknowledgement that sets the sequence and acknowledgement numbers to current values. The acknowledgement may also include any heartbeat data the connection filter driver  has received.","Heartbeat data can be handled in two ways. If the connection filter driver  receives a heartbeat message then it responds with a heartbeat response message and, in some embodiments, will leave the TCP window open. Alternately, the connection filter driver  can be configured to periodically send a heartbeat message. This can be achieved, for example, by configuring the connection filter driver  with an IP address for a remote application and a time interval to wait between heartbeat messages. This alternative approach is useful where the remote application is configured to close the connection if there is no activity. It should be noted that a periodic heartbeat can also be initiated by the connection filter driver  if the connection filter driver  closes the TCP window.","Referring again to , once a snapshot of a local application  has been acquired and saved, a connection filter driver  on the computing node  on which the local application  resided will keep connections to remote applications  open. Eventually, it will become necessary to restore the local application  either to the same computing node  or to another computing node . As previously noted, there are many reasons why the local application  may need to be restored. In some instances the snapshot and restore are caused by load balancing, in which case the local application  will be restored to a different computing node  than the one on which it previously ran. In this case, the application scheduler routine  initiates the restore process. In other instances the connection filter driver  can request that the local application  be restored so that the local application  can again handle network activity. In these instances the connection filter driver  notifies the connection filter daemon , and the connection filter daemon  obtains the IP address of the local application to be restored and sends a restore request to the application scheduler routine .","Exemplary functionality during a restore operation is illustrated by . In the example shown in , and with continued reference to , a request is initially received from a remote application  by the old connection filter driver  that has been maintaining the connection. The old connection filter driver  notifies the connection filter daemon  of the same computing node to send a restore request to the application scheduler routine . The connection filter driver  will then hold the request until a response is received. The connection filter daemon  gets the IP address and port number of the application scheduler routine  from its configuration file. In some embodiments, the connection filter daemon  sends a restore request to the application scheduler routine  as an ASCII message that is 25 bytes long and has the following form:","Restore ddd.ddd.ddd.ddd","where \u201cddd\u201d is a decimal number up to 3 digits long and forms the IP address of the local application that needs to be restored.","The application scheduler routine  then causes the restore daemon  to send an ioctl call to the new connection filter driver  via the connection filter subroutines of the new computing node. The new connection filter driver  is sent the IP address, the snapshot ID, and the connection structure of the local application to be restored and is instructed to set the application state of the local application in the application structure to RESTORESTART. The new connection filter driver  allocates space for the connection structure and initializes it. The prior connection structure is then copied into the newly initialized connection structure. In those instances in which the snapshot was performed on the same computing node as the restore is occurring, it is not necessary to initialize a new connection structure as the new connection filter driver  is the same as the prior one and already has the connection structure with the application state set to SNAPSHOT. In these instances the application state is simply changed to RESTORESTART. The new connection filter driver , in some embodiments, is able to discern whether the snapshot is from the same computing node or a different computing node by checking the computing node IP address that was stored along with the snapshot data.","In some embodiments there are two types of connections that can be restored, active (client initiated) connections and passive (server accepted) connections. For each connection to a remote application  the restore daemon checks the connection's status through the new connection filter driver  and sends either a \u201csend SYN\u201d request if it is a passive connection or an activate request if it is a active connection. These requests are sent via the connection filter subroutines on the same computing node.  shows exemplary processes for restoring both an active connection and restoring a passive connection.","For each prior active connection the restore daemon initiates a connection and the new connection filter driver  acknowledges the connection. A handshake sequence, as shown in , is then used to provide the new connection filter driver  with a new port number, if different. The restore daemon sends a message to the new connection filter driver  via the connection filter subroutines that a specific connection is about to be restored, and the new connection filter driver  marks this connection. The new connection will use a different local socket. When the SYN request is received, the new connection filter driver  only checks the IP addresses and the remote port number, but does not check the local port number. Instead, the new connection filter driver  sets the local port number as an adjusted port number. The new connection filter driver  also synchronizes the remote sequence number. In all further transfers the port number is translated just as the sequence number.","If, however, the connection being restored is a passive connection, the restore daemon makes a request of the new connection filter driver  via the connection filter subroutines to send a SYN request to the local application. The new connection filter driver  ensures that the ports and the remote sequence numbers match the open connection; the local sequence number still has to be translated. The new connection filter driver  synchronizes the port and remote sequence numbers and sends a SYN to a listen port. In this case the port numbers remain the same.","In either instance, whether the connection is active or passive, the \u201crestore connection request\u201d is used by the connection filter subroutines to convey the connection information to the new connection filter driver . The same TCP connection options given in the original connection request are used during the emulated connection. If a connection request is received and there is no connection structure associated with the connection, the request is treated as a new connection and passed on to the remote server. If there is a structure associated with it, the new connection filter driver  handles the restoration of the connection. If the new connection filter driver  restores the connection, the new connection filter driver  needs to adjust the sequence number for each packet to or from the local application for as long as the connection is open. Further, in the case of an active connection, the port number also needs to be adjusted. The adjusting of sequence numbers is dependent on the connection and is stored in each connection structure. It should be noted that sequence numbers do not need to be adjusted for new connections to the local application, only for those connections that have persisted through snapshot and restore processes.","Next, each restored connection is activated by setting the application state in the application structure to RESTORED. This is achieved by the restore daemon sending a RESTORED request with the IP address of the local application to the new connection filter driver  via the connection filter subroutines. Thereafter, the new connection filter driver  sends an acknowledgement along with an open TCP window for each connection for that the TCP window was previously closed by the prior connection filter driver . Opening the TCP window enables the remote application  to resume sending data. The data flow is now restored to the local application with sequence numbers being adjusted by the new connection filter driver  where necessary.","When the old connection filter driver  sends the connection structure for the local application to the new connection filter driver , the old connection filter driver  sets the state of the application in the application structure that it retains to BLOCKDATA. The old connection filter driver  then stops responding to the connections it had been maintaining. Therefore, it is important that the new connection filter driver  begin handling these connections as fast as possible and before any network timeouts can occur. Normally, this occurs on the order of seconds. Lastly, a request is sent to the old connection filter driver , if different from the new connection filter driver , to release the connection structure.","As with the snapshot process, the restore process also provides for an abort feature. The restore process can be aborted any time prior to when the application state is set to RESTORED. If an abort occurs during a restore process in which the local application is being restored to a different computing node than it resided on when the snapshot was acquired, then the local application and connection structures are dropped. The old connection filter driver  is informed that the restore has been aborted and therefore will set the application state back to SNAPSHOTDONE.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 7","FIG. 7","FIG. 7"]},{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIGS. 8 and 9","FIG. 10","FIGS. 8-10"]},"The connection filter driver monitors the control bits in the TCP header to tell if it is a SYN or FIN. When a snapshot is performed, the connection filter driver blocks the FIN packet from the local TCP\/IP program for connections to the local application and constructs a FIN-ACK packet which is returned to the local application. Also, there may be a one last ACK packet that the connection filter driver must block. When a restore is performed, the connection filter driver needs to either generate a SYN packet if the local application is acting as a server, or return a SYN-ACK packet in response to a SYN if the local application is acting as a client. The connection filter driver also notes the sequence number and compares it to what the remote application is expecting. Based on this the connection filter driver adjusts the sequence and acknowledgement numbers for each packet transferred on the connection. The connection filter driver needs to adjust the checksum value according to the changed header value. The checksum can be calculated on the fly.  illustrates how values in the header are adjusted for both active and passive connections, respectively.","It can be seen from  that the connection structure of each data packet is checked to handle the necessary adjustments to the sequence, acknowledgement, and port numbers. The connection structure and the direction that the packet is being sent determines whether the sequence or acknowledgement numbers need to be adjusted. The connection structure also indicates whether the local application port number needs to be adjusted.","The connection filter driver is able to differentiate between data is being received from the network stack or a remote application through the network drivers. For a packet received from the remote application the connection filter driver matches a destination address and port number to the IP address and port number of the local application in the connection structure. The connection filter driver also matches the source address and port number with the IP address and port number of the remote application. The connection filter driver then processes the packet. For data received from the network stack, the connection filter driver matches the source address and port number to the IP address and port number of the local application in the connection structure. The connection filter driver also matches the destination address and port number with the IP address and port number for the remote application. The connection filter driver then processes the packet.","In the foregoing specification, the invention is described with reference to specific embodiments thereof, but those skilled in the art will recognize that the invention is not limited thereto. Various features and aspects of the above-described invention may be used individually or jointly. Further, the invention can be utilized in any number of environments and applications beyond those described herein without departing from the broader spirit and scope of the specification. The specification and drawings are, accordingly, to be regarded as illustrative rather than restrictive."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
