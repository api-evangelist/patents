---
title: Modular mission payload control software
abstract: The present application discloses an open system architecture and software system for plug and play modular mission payloads in aerial vehicles. The improved software moves the control function of mission payloads away from the ground station and into the aerial vehicle. The plug & play web-based payload interface software resides in a payload interface controller in the vehicle, and this is networked via a uniform resource locator (URL) address to a ground control station. Consequently, when new payloads are added to the system, integration issues and costs are minimized.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06873886&OS=06873886&RS=06873886
owner: The United States of America as represented by the Secretary of the Navy
number: 06873886
owner_city: Washington
owner_country: US
publication_date: 20021127
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","STATEMENT OF GOVERNMENT INTEREST","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present application relates to software for use in hardware described in U.S. patent application Ser. No. 10\/012,613, now U.S. Pat. No. 6,665,594, entitled Plug and Play Modular Mission Payloads.","The invention described herein may be manufactured and used by or for the Government of the United States of America for governmental purposes without payment of any royalties thereon or therefor.","1. Field of the Invention","The present invention relates to the computer control of mission payloads in unmanned aerial vehicles and, more particularly, to server-side and web-based payload interface control software that resides in a payload interface controller (PIC) in the vehicle and which is networked via a uniform resource locator (URL) address to the control station.","2. Description of the Background","Unmanned vehicles (UVs) in operation today are designed around a single mission payload. The payload is located in the UV and is controlled remotely using a Human Computer Interface (HCI) connected at a Tactical Control Station (TCS). Other control components include the aircraft's Vehicle Management System (VMS), aircraft Air Data Terminal (ADT), Ground Control Station (GCS) Ground Data Terminal (GDT), UAV Data Control Processor (DCP), and finally, a TCS Non-Real Time Processor. Given the current configuration and architecture, implementing a new payload in the UV is exceedingly difficult and requires changing software in the VMS, DCP and TCS along with designing a new HCI. This is costly, time consuming and requires a complete flight re-certification process for each new payload introduced to the UAV. Over the lifetime of UAV, this could amount to more than 10 payloads and many wasted hours. In addition to the traditional Electro-Optic Payloads, users are now looking at Synthetic Aperture Radar payloads, Signal Intelligence payloads, Data Relay and Networking payloads, Meteorological payloads, Hyperspectral payloads, and other mission payloads. Each of these payloads has significantly different command and control functions, different human-computer interfaces, different data processing requirements, and they provide complex and differing data products and images to the UV operators. Current UV system designs do not incorporate the commands to manipulate these payloads and are not capable of processing and exploiting the data types. Thus, each time a UV is modified to accommodate a payload, physical changes must be made to either the payload or vehicle, and software must be changed in the vehicle and the control station, and in the ground station communication datalink. These software changes to the vehicle, and control station, and datalink also require costly air safety recertification.","The problem is becoming especially apparent as the increasing capability, quantity and awareness of UAVs, and the desire to utilize UAVs for expanded roles becomes more prevalent. There is a great need for a common interface for all payloads that may be carried by the UAV, and an open systems architecture to facilitate the integration of new and differing payloads, and which provides higher performance and minimal obsolescence. The same problem has arisen in other contexts, and there have been limited efforts to provide a solution. For example, U.S. Pat. No. 6,175,783 to Stength et al. confronts the problem in the context of outer space vehicles which have payload facilities supported by a host computer system at a space platform. The '783 patent attempts to take application-specific payload controllers and make them generic networked computers with payload control software resident on a remote space vehicle. Similarly, U.S. Pat. No. 5,271,582 to Perkins et al. discloses a communication system for an unmanned space vehicle for electronically communicating with various diverse customer payloads. Multiple subsidiary small payloads can be connected to standard mechanical and electrical interfaces. However, this only partially addresses the problems of reconfiguration, recertification and obsolescence.","Co-pending U.S. patent application Ser. No. 10\/012,613 discloses a system architecture in which the air vehicle versus payload commands are separated by taking the payload interface software out of the TCS Software in the GCS and having it reside in a payload interface controller (PIC). The PIC interfaces with each payload according to that payload's unique interface.","The present application provides Modular Mission Payload Control Software (MMPCS) suitable for use in the above-referenced architecture.","It is an object of the present invention to provide Modular Mission Payload Control Software (MMPCS) suitable for use in the above-referenced architecture. It is another object to provide Modular Mission Payload Control Software (MMPCS) resident in a payload interface controller (PIC) in the UAV which interfaces with each payload according to that payload's unique interface.","It is another object to provide a Payload Operator with the ability to control the payloads by programming the Modular Mission Payload Control Software (MMPCS) which is resident in a payload interface controller (PIC) in the UAV via a web page presented in a standard web browser with appropriate plug-ins installed.","It is another object to provide MMPCS as above which minimizes software changes for new and different payloads by moving the payload-specific software changes away from all flight critical software.","According to the present invention, the above-described and other objects are accomplished by providing Modular Mission Payload Control Software (MMPCS) suitable for use in the PIC and capable of controlling each payload according to that payload's unique interface. The MMPCS has a program loader and executive with ability to execute server-side control modules for each particular payload. The server-side software has a \u201cidentify module\u201d which compares communications over the payload interface controller's common connectors against payload-specific data parameter for each known payload and loads the server-side control module to communicate with and control that unique payload. The identity module also writes a properties file at the payload interface controller's URL, which contains a list of currently connected payloads and which is used to load client-side web-based plug-in modules. In this manner, an operator can remotely control one or more payloads from the ground station via a computer, display, and wireless communication link which provides a remote human computer interface (HCI). All server-side control software is programmed in C and C++ and client-side ground control software is programmed using Java and HTML. This way, the operator is presented a standard web browser with appropriate plug-ins installed, as required, for each new payload. When the payload operator transmits a payload command via the web browser screen, the payload interface controller interprets the command and calls the payload specific command to the proper payload via a standard interface protocol. The benefit of this approach is that it minimizes software changes required for full flight certification by moving the software changes away from the flight critical software and hardware.","The Modular Mission Payload Control Software (MMPCS) according to the present invention is incorporated in the system architecture set forth in co-pending U.S. patent application Ser. No. 10\/012,613, which discloses a high-level restructuring of conventional payload communication systems as repeated below.",{"@attributes":{"id":"P-00023","num":"00023"},"figref":"FIG. 1","b":["5","30","5","30","10","5","10","20","5","20","10","5","35","35","5","20","30","10","35","80","80","86","30","5","10","86","10","86"]},{"@attributes":{"id":"P-00024","num":"00024"},"figref":"FIG. 2","b":["5","30","40","50","5","10","30","10","20","5","20","20","10","30","5","35","5","20","30","40","50","10","35","80","60","70","80","80","82","86","88","30","50","5","86","88","5","20","70","82","86","88"]},{"@attributes":{"id":"P-00025","num":"00025"},"figref":"FIG. 3","b":"10","ul":{"@attributes":{"id":"ul200001","list-style":"none"},"li":{"@attributes":{"id":"ul200002-li00002"},"ul":{"@attributes":{"id":"ul200002","list-style":"none"},"li":["MPEG-2 Transport Stream Encoder ","Processor Board ","Power Supply  coupled to power input port ","4 Port Serial Board  coupled to the payload connectors  with an integrated 10 Base-T ethernet adapter .","Serial Interface Board  coupled to two RS-422 interfaces.","Hard Disk Drive ","VGA Board  (optional)","Enclosure "]}}}},"All of the foregoing boards may be Industry Standard PC-104 boards.","The Processor Board  is preferably at least a Pentium central processor with RAM and standard supporting chipset. Sufficient RAM is required to fully load all interface modules, and 256 MB will suffice.","The Hard Disk Drive  is preloaded with an operating system (OS) which is preferably Red Hat Linux 6.2, with TimeSys Linux\/RT real-time extensions. This OS was selected due to the availability of drivers for a wide range of devices, and the fact that virtually all device drivers are provided with source code and can be modified without restrictions. The real-time extensions are not used for task scheduling or resource allocations, but they do provide the capability of conveniently scheduling serial control messages to certain payloads such as a Wescam 12DS Daylight Television (DLTV) and Forward Looking Infra-Red (FLIR) imager. In addition, sufficient hard disk space or other non-volatile memory is required for web page storage.","The Power Supply Module  may be a conventional regulated AC\/DC power supply.","The RS-422 Interface Board , Serial Interface Board  and Hard Disk Drive  are all industry standard components.","The MPEG-2 Transport Stream Encoder  is a MPEG-2 TS video frame grabber for MPEG-2 TS encoding of video data.","VGA Board  is a conventional VGA output board which is optional and was used for development purposes only. VGA Board  may be included to provides complete VGA and NTSC\/PAL TV-OUT output for monitoring purposes.","The two payload connectors  are physically wired identically and are the interfaces to the actual payloads. The power connector  is the input power source to the payload interface controller (PIC) . The ethernet connector  provides datalink connectivity. The maintenance connector provides keyboard and VGA access to the system for a development environment.","The custom enclosure  preferably leaves open bays for spare modules which may include other interface boards such as IEEE-1394 Firewire, MIL-STD-1553B, etc.",{"@attributes":{"id":"P-00043","num":"00043"},"figref":"FIG. 4"},"To effectively make the mission payload  and any future payloads  plug & play (PnP), payload-specific software modules are loaded into the payload interface controller (PIC)  (in vehicle ) at the time that payload  is installed. Each payload interface software module serves as a \u201cplug-in\u201d to existing control software  in payload interface controller (PIC)  and thereby provides all payload-specific data parameters to allow the payload interface controller (PIC)  to interface with the payload . An Identify program  runs at boot and identifies which payload is connected to which payload connector of the payload interface controller (PIC) . The existing control software  includes a standardized command set as required to control established payloads -. A more detailed description of the various modules follows.","Identify Program ","The Identify program  executes at boot and identifies which payload is connected to which payload connector of the payload interface controller (PIC) . The program  performs this by looking for known data streams on each of the data ports available on each connector (two RS-232 interfaces and two RS-422 interfaces). The Identify program  runs for 15 seconds or when payloads have been identified on both payload connectors. Once the 15 seconds are up, the Identify program  is responsible for writing a configuration file, which the payload interface controller (PIC)  executive program  reads. The executive program  reads this file which contains data on the payload daemon (process) to run, its Logical Identifiers (LID), and the IP communication port for the daemon. A file called \u2018UAVPayload.properties\u2019 is also written which stores payload, LID, and IP port data for the Java client.","Executive Program ","The executive program  initializes the inter-process communications structures, reads the configuration file created by the identify program , then begins the execution of the appropriate Payload Interface Software Module and other executable programs as specified in the configuration file.","Payload Interface Software Modules","Each client-side payload interface software module is a web-enable plug-in module stored at the uniform resource locator (URL) address of the payload interface controller (PIC) . In this manner, both the control software  in payload interface controller (PIC)  as well as the interface software at the Human Computer Interface (HCI)  may easily access the payload interface software modules, thereby allowing the Human Computer Interface (HCI)  to act as a web-based client to allow an operator to remotely control the mission payload  via the standardized graphical interface at the Human Computer Interface (HCI) . This modular and web-based configuration minimizes software changes required for the Human Computer Interface (HCI)  because it moves the software changes away from all flight critical software, and instead simply requires the loading of a new software server module and client plug-in modules in the payload interface controller (PIC)  each time that a new payload is installed. Each payload software module provides all payload-specific data communication to allow the executable software  in payload interface controller (PIC)  to interface directly with the payload . Moreover, all physical payload connections are standardized. Likewise, the control and interface software resident at the Human Computer Interfaces (HCIs) ,  is standardized for all payloads. This configuration effectively makes the mission payloads - plug & play (PnP) since the payload interface software now resides in the payload interface controller (PIC)  in the vehicle , and all that is needed to exchange payloads is to swap in a new one and load a new server module and client payload interface software. Presently, the payload control software must be installed at both the payload interface controller (PIC) , the datalink control processor (DCP)  and the Human Computer Interfaces (HCIs) , , albeit it is equally possible to accomplish this with a single load at one end and a download to the other. In either case, loading and subsequent accessing is further simplified by making the payload interface software at both the payload interface controller (PIC)  and at the Human Computer Interfaces (HCIs) ,  modular and web-based. In other words, each new payload is associated with a new payload server-side control module and client-side web-base plug-in which allows software to control the payload and display the status information and data from the sensors. This way, as new payloads are developed, new server-side payload control modules and client-side Java control panel or group of panels are added. These comprise a specifically developed interface for the control of specific payloads. Thus, when the new payload is introduced, it is physically installed and a new server-side payload control module and new Java control panel or group of panels are installed on the payload interface controller (PIC) . Upon installation each Java panel is accessed from a single unique uniform resource locator (URL) address. Each panel is designed using the web compatible software of Java which is loaded from HTML so that it can be presented to the operator at the Human Computer Interfaces (HCIs) ,  via a standard web browser with appropriate plug-ins installed, as required. This way, when the payload operator activates a payload command via the web browser screen at a Human Computer Interface (HCIs) , , the payload interface controller (PIC)  on vehicle  interprets the command and calls the payload specific command to the proper payload - via a standard URL interface protocol. The benefit of the foregoing configuration is that it minimizes software changes required for the VMS , DCP , or Non-Real-Time Processor , nor any new Human Computer Interfaces (HCIs) , . This in turn should alleviate the requirement for full flight certification by moving the software changes away from the flight critical software. It also allows independent development and layout of a standard web-browser for the Human Computer Interface (HCIs) ,  HCI, regardless of the specific mission of a given payload. Appropriate web development software is readily available such as Java and HTML, and the software is easily upgradeable, thereby minimizing the likelihood of becoming obsolete for the life of the vehicle . Each payload interface software module is developed specifically for each payload. For example, a Java web panel developed for a daylight Electro-Optic (EO) camera interface comprises all controls required to manipulate the camera in the EO mode including: Iris, field-of-view, focus, auto iris, cage, stow, gyro modes, in addition to stewing the gimbal and viewing the video.","Initial Payload Drivers","The current configuration supports (but is not limited to) the Wescam Model 12DS Daylight TV (DLTV)\/Forward Looking Infrared (FLIR) and the Neptune Science's TDROP Dispenser designed for releasing and monitoring of temperature, pressure, and humidity atmospheric dispensers. The initial configuration was designed to support payload communication over the two RS422\/RS232 serial ports, but the PC104 hardware and PIC software was designed to support adding of communication to payload devices over Ethernet, 1553, 1394, etc.","Driver for Wescam\u00ae","The Wescam Model 12DS DLTV\/FLIR is a small light-weight stabilized gimbal maritime surveillance module for observation and tracking from small aircraft. The dual sensor system features a high sensitivity, 3-5 um, 3 field-of-view FLIR, with Indium Antimonide staring array, and a low-light color daylight CCD camera with 20\u00d7 zoom lens. The system's specifications state that the control stream going into the camera should be at a 30 Hz rate, and consists of frames of 20 bytes of 19200 bit per second, 8 bit, no parity, asynchronous serial data. The message then requires approximately 10.4 milliseconds to send, at a rate of one message every 33.333 mSec.","The Wescam's serial control is designed for a hand controller, which continuously sends a data stream with particular bits representing the position of buttons, etc. on the controller. In addition, the Wescam transmits a continuous data stream that provides status and positioning information. It would be undesirable to send this data stream down a radio link in its raw form, as most of the data over a given period of time would be redundant. For purposes of the present invention, the Wescam driver converts between the Wescam's protocol of using continuous data streams, and the Java client's protocol of reporting and displaying changes in status. Data structures are provided within the Wescam driver that keep status information from the camera, as well as emulate actuation of buttons on a hand controller. Incoming messages from the Java client provide information from the operator such as \u201cZoom out pressed\u201d, \u201cZoom in pressed\u201d, etc. When these messages are received, they are translated into the appropriate changes in status variables. These status variables are read at 30 Hz serial processing to create the control messages to send to the Wescam payload.","Likewise, when messages are received from the Wescam payload, changes are forwarded to the Java client. Each message contains status bits that do not need to be sent to the client: the client only needs to be notified of changes. For example, when the Wescam payload is in FLIR mode, the client needs to know the field of view, a value from 1 to 3. This value is encoded in the data frame sent to the payload interface controller (PIC)  by the Wescam payload, but certainly does not need to be transmitted to the client 30 times per second. The payload interface controller (PIC)  informs the Java client any time a change occurs in status from the Wescam payload, as well as periodically updating even if there is no change. In order to further conserve downlink bandwidth, the analog information reporting frequency is reduced from 30 times per second to 5 times per second.","Driver for TDROP","Bae Systems\u00ae aircraft-deployed Tactical DropSondes (TDrop) provide real-time battlefield environmental data. The Tactical DropSondes Dispenser developed by Neptune Science, are deployed from UAVs using existing inventory chaff\/flare dispenser sets. This capability is accomplished without requiring any modifications to the aircraft or to the chaff\/flare dispenser set. Tactical DropSondes can be configured with an array of sensor packages to include meteorological sensors, chemical agent detection sensors, biological agent detection sensors, acoustic sensors, ASW sensors, and electronic warfare payloads. Each Tactical Sensor contains a 12 channel GPS receiver, a Motorola Power PC processor, VHF or UHF transmitter (can support all 99 sono-buoy channels), batteries, parachute, and the mission specific sensor package. As the Tactical DropSonde is ejected into the air stream, a parachute and RF transmit antenna deploy; and data transmission via the UHF\/VHF data link begins. Within seconds, sensor data, along with GPS position, altitude, and wind velocity data, become available to the user.","The TDROP driver program is responsible for receiving commands from the Java client and converting these commands into RS-232 serial words understandable by the TDROP dispenser. The program also receives RS-232 data and status messages from the TDROP and forwards this data to the Java client. The TDROP sends three different data sets, which include GPS data, Nova data, and Vaisala data. GPS data is sent at a 1 Hz rate and originates from the TDROP's GPS receiver. Vaisala data includes TDROP temperature, humidity and pressure from the Vaisala sensor and is transmitted at a 0.2 Hz rate. NOVA data originates in the dispensed dispenser and is received by the TDROP's Nova radio. This data is then transmitted out the RS-232 interface at a 0.2 Hz rate. The TDROP dispenser has the ability to fire 30 different DropSondes, preloaded and preconfigured on the ground. Selection, Arm and Fire Status are received from the TDROP and relayed to the Java client for update on the TDROP client panel.","Inter-Process Communication","Each payload connected to the payload interface controller (PIC)  is controlled by a separate process; Unique Logical ID's (LID's) are assigned to each process and for its peer, the Java client executing in the workstation which is to control the payload. A shared library (libpnputils.so) was created to provide for fast, data\/event-driven interprocess communications within the payload interface controller (PIC) . Inter-Process Communications (IPC) is accomplished through the use of shared memory buffers with pointers passed through First-In First-Out (FIFO) pipes, eliminating unnecessary copying of data passed between processes.","Mpeg2udp ","The mpeg2udp program is designed to be responsible for reading the MPEG2 Transport Stream from the serial port of the MPEG-2 encoder card and sending it to the client in UDP\/IP packets. There are two parts to this process: the device driver and the mpeg2udp program itself.","The device driver provides the interface between the operating system and the RS-422 serial card. The incoming data stream from the MPEG-2 encoder card is formatted a synchronous data stream of MPEG-2 Transport Stream packets; each containing 188 octets formatted as 32-bit words, most significant bit first. The device driver synchronizes the hardware in the serial card to the incoming data stream, and makes the resulting incoming data available to the mpeg2udp program. Because the RS-422 card adheres to the data communications convention of least-significant-bit first, the bit order of each byte passed to the mpeg2udp program is reversed.","The mpeg2udp program continually loads buffers from the device driver, checks for the TS header byte every 188 bytes, reverses the order of the bits in every byte received, and sends frames of complete TS packets to the client via UDP\/IP.","Client Software Description at the Human Computer Interface (HCI) ","The Human Computer Interface (HCl)  is equipped with a NetStream 2000 card due to its ability to handle streaming MPEG-2 Transport Streams and the availability of Mircosoft Windows and Linux drivers. Version 0.2.042.2 of NetStream's Linux drivers are suitable.","The Human Computer Interface (HCI)  operating system (OS) is RedHat (RH) Linux 7.1. RedHat Linux is the most common of the Linux distributions available. Gnome Desktop can be used as an X Windows window manager (this is part of the RH 7.1 distribution disks). Other installed client software is provided with the RedHat 7.1 distribution with the exception of:\n\n","Microsoft Windows Client","The Windows 98 system had these software applications installed:\n\n","HTML and Java Client Interfaces","The Executive program  downloads payload interface software from the payload interface controller (PIC)  on the Unmanned Aerial Vehicle (UAV) via a standard web server. There are four types of software interfaces in the client software; the HTML interface, the UAV payloads properties file, payload panel classes, and the network message handlers. This is a modular design that allows for rapid integration of new payloads in the future.","a. HTML Interface","The payload interface controller (PIC)  has installed a standard web server (Apache). The Java client software is downloaded from the Payload interface controller (PIC)  web server via a Hyper Text Markup Language (HTML) web page using HTML's standard APPLET tag. The web page was run through Sun Microsystems Java Plug-in HTML Converter Version 1.3. This converter re-writes the standard HTML page so that it uses the Java Plug-in Version 1.3.x. from Sun Microsystems in the client's web-browser. Both Netscape 4.7x and Microsoft Internet Explorer 5.x are supported.","When the client's web-browser connects to the Payload interface controller (PIC)  HTTP web address it downloads the \u2018PayloadControl.jar\u2019 (containing all the Java class files), the PayloadControl.properties' file, the UAV Payloads property file, and a unique property file for each Java payload panel (optional). Then the PayloadControl Java applet is started in the client's web-browser.","b. AV Payloads Properties File","Once the PayloadControl Java applet is started, it immediately reads the \u2018PayloadControl.properties\u2019 file and the \u2018UAVPayloads.properties\u2019 file. The \u2018PayloadControl.properties\u2019 file reads in the host name or IP address of the Payload interface controller (PIC) . The \u2018UAVPayloads.properties\u2019 file contains all the information defining which payloads and TCP socket connections are available on the Payload interface controller (PIC) . The following is an example of the \u2018UAVPayloads.properties\u2019 file that is written by the Payload interface controller (PIC) 's server software.",{"@attributes":{"id":"P-00085","num":"none"},"ul":{"@attributes":{"id":"ul200007","list-style":"none"},"li":{"@attributes":{"id":"ul200008-li00008"},"ul":{"@attributes":{"id":"ul200008","list-style":"none"},"li":["payload.controller=0,1,60671","payload.echo=0,1","payload.count=2","payload.1=4,5,60673,WescamPanel,Wescam","payload.2=2,3,60672,TDropPanel,TDrop\n\nwhere,\n","payload.controller=this entry defines the logical ID of the Payload interface controller (PIC) , the logical ID of the PayloadControl applet, and the TCP socket used for communication with PIC .","payload.number=this entry defines number of payloads connected to the PIC. payload.#=there is one entry for each active payload. This entry defines the logical ID of the PIC for this unique payload, the logical ID of the payload, the TCP socket used for communication, the Java Panel class name for the payload, and the text label to be on the payload's tab pane."]}}}},"c. Payload Panel Classes","Once the PayloadControl applet has read the \u2018UAVPayloads.propertie\u2019 file, it will use the Java Panel class name and load the Java panel classes using Reflection methods to load classes on the fly. If the payload.number=0 no payload panels will be loaded at runtime.","To enforce a standard framework for panel design and loading using Reflection, all payload panels must be extended from Java's JPanel class, implement a ChangeListener class (to send and receive network messages), and implement a standard fixed (pre-defined) class constructor. Here is the class declaration and constructor for adding a new payload: public class PayloadNamePanel extends JPanel implements ChangeListener public PayloadNamePanel(String host, int port, int lid, int pid, AppletContext context).","The constructor has five arguments in its argument list as follows:\n\n","All other properties that are unique to a specific payload are loaded from the payload's own property file.","Network Message Handlers","The individual payload client plug-in  communicate with the payload interface controller (PIC) , over a unique TCP socket, via two reusable network classes, the PICRecvMessage and PICSendMessage classes. Each new payload must instantiate each class, start each class in a thread, and add each as a PropertyChangeListener in order to send and receive messages to and from the payload interface controller (PIC) .","Message Management","Messages are managed by writing a Java ChangeListener for the network communication classes. Network events have 3 properties: the properties old value, the properties name, and the properties new value. The properties old value is always set to 999 for a valid network message, to get the event's old value call the PropertyChangeEvent's getOldValue( ) method. The send socket has a property name of \u201cSEND\u201d, the receive socket has a property name of \u201cRECV\u201d, to get the properties' name call the PropertyChangeEvent's getPropertyName( ) method. The new value stores the network message status, \u22121 is a socket error, 0 is status only, and 1 is a valid message. To get event's new value call the PropertyChangeEvent's getNewValue( ) method.",{"@attributes":{"id":"P-00107","num":"00107"},"figref":["FIGS. 5 and 6","FIG. 5","FIG. 6"],"b":["30","50"]},"The foregoing open systems architecture increases the ability to integrate and field new mission payloads quickly and effectively by minimizing software modifications and safety of flight concerns. The shift of payload specific software away from the flight critical software reduces and may eliminate the flight certification process for new payload integration efforts. While the forgoing open systems architecture has been described in the context of unmanned serial vehicles (and their control systems), it has definite application to all manned and unmanned platforms that may require modularity and integration of mission payloads in the future. The design and implementation will not preclude it from being incorporated into ground vehicles, space vehicles, and underwater vehicles.","Having now fully set forth the preferred embodiment and certain modifications of the concept underlying the present invention, various other embodiments as well as certain variations and modifications of the embodiments herein shown and described will obviously occur to those skilled in the art upon becoming familiar with said underlying concept. It is to be understood, therefore, that the invention may be practiced otherwise than as specifically set forth herein."],"GOVINT":[{},{}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Other objects, features, and advantages of the present invention will become more apparent from the following detailed description of the preferred embodiment and certain modifications thereof when taken together with the accompanying drawings in which:",{"@attributes":{"id":"P-00016","num":"00016"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00017","num":"00017"},"figref":"FIG. 2","b":"1"},{"@attributes":{"id":"P-00018","num":"00018"},"figref":"FIG. 3","b":"10"},{"@attributes":{"id":"P-00019","num":"00019"},"figref":"FIG. 4"},{"@attributes":{"id":"P-00020","num":"00020"},"figref":"FIG. 5"},{"@attributes":{"id":"P-00021","num":"00021"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
