---
title: Dynamic symbolic link resolution
abstract: To achieve the foregoing, and in accordance with the purpose of the present invention, a system or network is disclosed which provides for a dynamic symbolic link (DSL) and the resolution of that DSL. The invention provides a method and apparatus that renames a first pathname to a target pathname, determines a variable within the target pathname, defines the first pathname as a symbolic link and associates the symbolic link with a virtual pathname. The present invention further defines a specification associated with the virtual pathname including associating the variable with the virtual pathname. In associating the symbolic link with the virtual pathname, the present invention further define a declaration within the virtual pathname.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06895400&OS=06895400&RS=06895400
owner: Veritas Operating Corporation
number: 06895400
owner_city: Mountain View
owner_country: US
publication_date: 20001005
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["REFERENCE TO RELATED APPLICATIONS","FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present application claims priority to and incorporates the following applications by reference: DYNAMIC SYMBOLIC LINK RESOLUTION, Prov. No. 60\/157,727, filed on Oct. 5, 1999; SNAPSHOT VIRTUAL TEMPLATING, Prov. No. 60\/157,729, filed on Oct. 5, 1999; SNAPSHOT RESTORE OF APPLICATION CHAINS AND APPLICATIONS, Prov. No. 60\/157,833, filed on Oct. 5, 1999; VIRTUAL RESOURCE-ID MAPPING, Prov. No. 60\/157,729, filed on Oct. 5, 1999; and VIRTUAL PORT MULTIPLEXING, Prov. No. 60\/157,834, filed on Oct. 5, 1999.","The present invention relates generally to resource management in a computer network. More specifically, the present invention relates to dynamic symbolic link resolution to discrete storage locations throughout a computer network.","In prior art computer networks pointers or links are provided to indicate the location of a specific directory or file to allow a computer connected to the network to access or retrieve a specific file. Some prior art computational systems provide a mechanism for accessing a file pathname by alternate references. In this case, a particular file may have multiple pathnames that reference the file, with only one true path to the actual file or executable. These multiple references are commonly referred to as \u201cshortcuts,\u201d aliases\u201d or \u201csymbolic links.\u201d Thus, prior art systems allow for a plurality of pathnames to access the same file. However, there is no function or mechanism for allowing a single pathname to access a plurality of different directories or files.","To achieve the foregoing, and in accordance with the purpose of the present invention, a system or network is disclosed which provides for a dynamic symbolic link (DSL) and the resolution of that DSL. The invention provides a method and apparatus that renames a first pathname to a target pathname, determines a variable within the target pathname, defines the first pathname as a symbolic link and associates the symbolic link with a virtual pathname. The present invention further defines a specification associated with the virtual pathname including associating the variable with the virtual pathname. In associating the symbolic link with the virtual pathname, the present invention further define a declaration within the virtual pathname.","Among other aspects and innovations, the invention provides structure, system, method, method of operation, computer program product, and business model and method for providing dynamic symbolic links and resolution of those dynamic symbolic links. The inventive dynamic symbolic link and resolution provided by the present invention inverts the paradigm of the prior linking mechanisms. The present dynamic symbolic link and resolution enables a computer network, computer, processor, microprocessor, server and other computational systems to access a plurality of different directories, files or executables through a single dynamic symbolic link.","Where the prior art symbolic links allow a plurality of different links to access a single file, the present novel Dynamic Symbolic Link (DSL) and resolution of that DSL allows a computational system implementing the DSL and DSL resolution to access a plurality of different files, directories or executables from a single DSL.","By allowing access to a plurality of different directories or files from a single DSL, the present invention, in one embodiment, allows a plurality of instances of the same application to operate on a single computer without the applications interfering with one another. A first instance of an application will access, alter and\/or store files, executables and data utilizing the DSL as resolved for the first instance. A second instance of an application will access, alter and\/or store files, executables and data utilizing the DSL as resolved for the second instance, and so on. This isolates the files and data for each application instance, and thus prevents interference between instances of the application. Each instance of the application is capable of independently utilizing the computational resources without the need to reconfigure the application or the computational resources, thus the application is not limited to a specific computer.","In one embodiment, the present invention facilitates applications, such as Web servers and database applications, to be configured to operate in a computational network or system which includes a plurality of computers such that the applications are capable of being operated on a plurality of the computers within the system without reconfiguring the application or the computer. An application can be halted or frozen during operation on a first computer and reinitiated on a second computer without interrupting the application and without the need to reconfigure the second computer or application.","In one embodiment, isolating the instances of an application, and avoiding the necessity of limiting an instance to a specific computer network, allows the instance to be halted and reinitialized or reactivated on a second, different computer network. This frees up resources of the first computer network for other applications or instances.","When an application or process is operating, the application utilizes file pathnames and directory pathnames to access specifically defined or allocated portions of memory storage, for example, \u201c\/temp.\u201d However, if two or more instances of the same application attempt to operate from the same computer, both instances will attempt to access the same specifically allocated portion of the memory storage \u201c\/temp.\u201d This results in inconsistencies, illogical states and often fatal errors. The present invention allows for two or more instances of the same application to operate from the same computer without interference. The virtualizing of pathnames allows each instance of the application to be directed or allocated to different portions of memory, for example, \u201c\/temp_\u201d and \u201c\/temp_.\u201d Thus, two or more separate instances of the same application can operate independently on the same computer without interference.","Additionally, by allowing a specific instance of an application to access specific, predefined pathnames associated with that instance, the application and all accompanying data, operating states and associated directories and files can be isolated. Once isolated, the application and all accompanying data, states, directories and files can be stored for later use, as well as moved or transferred to operate on a different computer or network without affecting the operation of the application or other instances of the application. One advantage provided by this ability to store and transfer or reallocate an instance of an application is the optimization of computer and network resources. For example, if a first instance of an application is not currently in use, the computer can halt or freeze the application and all its accompanying states and data. The computer can then store the halted application and all accompanying states and data freeing up the computer to activate a second different application or second instance of the same application.","One example of the ability to halt or freeze an application along with all its accompanying states and data is described in co-pending U.S. patent application Ser. No. 09\/684,373, entitled \u201cSnapshot Virtual Templating,\u201d filed on Oct. 5, 2000, incorporated herein by reference. One example of the ability to reinitialize an application along with all its accompanying states and data is described in co-pending U.S. patent application Ser. No. 09\/680,847, entitled \u201cSnapshot Restore Of Application Chains and Applications,\u201d filed on Oct. 5, 2000, incorporated herein by reference.","The present invention provides snapshot virtual templating by creating virtual application templates for the purpose of propagating a single application snapshot into multiple, distinct images. Snapshot virtual templates allow multiple application instances to use the same fixed resource identifier by making the resource identifier virtual, privatizing it, and dynamically mapping it to a unique system resource identifier. When a snapshot is cloned from a virtual template, the common or shared data is used exactly as is, whereas the non-sharable data is either copied-on-write, multiplexed, virtualized, or customized-on-duplication. The present invention greatly reduces the required administrative setup per application instance. Snapshot virtual templating works by noting access to modified resources, fixed system IDs\/keys and unique process-related identifies and automatically inserting a level of abstraction between these resources and the application. The resources contained in a snapshot virtual template can be dynamically redirected at restore time. Access to memory and storage is managed in a copy-on-write fashion. System resource handles are managed in a virtualize-on-allocate fashion or by a multiplex-on-access mechanism. Process- unique resources are managed in a redirect-on-duplicate fashion. Rules may be defined through an application configurator that allows some degree of control over the creation of non-sharable data.","The present invention provides snapshot restoring by saving all process state, memory, and dependencies related to a software application to a snapshot image. Interprocess communication (IPC) mechanisms such as shared memory and semaphores must be preserved in the snapshot image as well. IPC mechanisms include any resource that is shared between two process or any communication mechanism or channel that allow two processes to communicate or interoperate is a form of IPC. Sockets, shared memory, semaphores and pipes are some examples of IPC mechanisms. Between snapshots, memory deltas are flushed to the snapshot image, so that only the modified-pages need be updated. Software modules that track usage of resources and their corresponding handles are included as part of the snapshot\/restore framework of the present invention. At snapshot time, state is saved by querying the operating system kernel, the application snapshot\/restore framework Or components, and the process management subsystem that allows applications to retrieve internal process-specific information not available through existing system calls. At restore time, the reverse sequence of steps for the snapshot procedure is followed and state is restored by making requests to the kernel, the application snapshot\/restore framework, and the process management subsystem.","The present method and system of providing DSL and DSL resolution allows a single dynamic symbolic link to be evaluated to multiple distinct values, retargeting the request transparently based upon application or process-specific configurations. In one embodiment, a DSL will have a declaration that contains a tag which will be matched with a DSL specification at the time of evaluation or resolution.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1A","b":["100","102","1","102","2","100","106","104","106","108","1","108","2","108","106","150","102","106","110","1","110","2"]},"In one embodiment, the method and system of the present invention is implemented in a computer readable medium, such as a computer program  and executed on a computer  as illustrated in the high level block diagram of FIG. B. As shown, computer  incorporates a processor  utilizing, in one embodiment, a central processing unit (CPU) and supporting integrated circuitry. A memory  which is any type or combination of memory including fast semiconductor memory (e.g., RAM, NVRAM or ROM), slower magnetic memory (e.g., hard disk storage), optical memory and any conventional memory known in the art, to facilitate storage of the computer program  and the operating system software. In one embodiment, also included in computer  are interface devices including, but not limited to, keyboard , pointing device , and monitor , which allow a user to interact with computer . Mass storage devices such as disk drive  and CD ROM  may also be included in computer  to provide storage of information. Computer  may communicate with other computers and\/or networks via modem  and telephone line  to allow for remote operation, or to utilize files stored at different locations. Other media may also be used in place of modem  and telephone line , such as a direct connection, high speed data line or a wireless connection, and the like. In one embodiment, the components described above may be operatively connected by a communications bus . In one embodiment, the components may be operatively connected by wireless communication.","In one embodiment, the DSL and DSL resolution system provides a DSL which defines a variable pathname to a requested directory or file. In one embodiment, the DSL is incorporated or configured in alternative attribute fields in a file structure of a file system  (see FIG. ). If a DSL is incorporated within a file attribute, a utility or application programming interface call is provided to set this attribute and designate the link as a DSL. In one embodiment, the DSL allows the system to redirect the computer  to access one of a plurality of alternate directories or files as designated by the resolution of the DSL. One example of a DSL containing a DSL declaration is:\n\n\/home\/${ID}\/app\/config\u2003\u2003(1)\n","In creating or associating the DSL, a file system  (see ) entry is created which retargets the unique pathname of the file. In one embodiment, the retargeting is achieved by including at least one DSL declaration into the pathname to provide the DSL. In thins embodiment, when the DSL declaration is included within a DSL, the DSL declaration is configured as a predefined, recognizable alphanumeric character sequence including a single alphanumeric character or an alphanumeric string. In example 1 above, the DSL declaration is defined as \u201c${ }.\u201d In one embodiment, the DSL declaration includes a \u201ctag.\u201d The tag is a variable designation which is associated with one of a plurality of values. The tag is determined based on a DSL specification.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 2","b":["162","162","162","162","164","160","164","166","164","162","170","170","172"]},"In creating and resolving the variable symbolic link , a DSL specification is utilized. In one embodiment, the DSL specification is associated with an individual process. When associating the tag with the DSL specification, the specification can be added explicitly by calling into an application programming interface (API), or specified implicitly. As an example, the DSL specification can be specified implicitly through an application environment, such as an in-memory application state that can be examined by the operating system. It may also be specified implicitly through an associated configuration mechanism, such as a registry or database containing parameters, properties and characteristics relevant to the particular application. The associated configuration mechanism is implemented, for example, as part of the operating system or as another discrete software component. For example, an application harness (which establishes the appropriate runtime environment for an associated application prior to the launching of the application) may make the call which sets the DSL specification on behalf of the application and then invokes the application which inherits the DSL specification.","In one embodiment, the DSL specification includes at least one symbolic tag and at least one value associated with that symbolic tag. Referring back to example 1 above, the DSL declaration is \u201c${ID}.\u201d The associated tag in this example is \u201cID.\u201d The DSL specification will include a reference to the symbolic tag \u201cID\u201d as well as a value associated with the tag \u201cID\u201d.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3","b":["180","182","178","178","186","190","192","194","194","196","210","180","212","180","214","180","194","216","220","210","180"],"sub":["x","y ","y ","x "]},"In one embodiment, the DSL specification includes at least the symbolic tag and at least one associated value. For example, the DSL specification will provide a tag and value association similar to: \n\n\nAs such, when the DSL declaration is identified, the DSL specification provides the associated value for the tag found within the DSL declaration. The value associated with the tag is substituted for the DSL declaration resulting in the target pathname. For example, the virtual pathname shown in example , using the DSL specification of example , will replace the DSL declaration \u201c${ID}\u201d with the DSL specification value \u201cjoe,\u201d resulting in an target pathname:\n\n\/home\/joe\/app\/config\u2003\u2003(3)\n\nOnce associated or resolved, the target pathname, for example \u201c\/home\/joe\/app\/config\u201d as shown in example , indicates the location of the target file. Because the DSL declaration can be resolved into a plurality of different values, for example joe, kim, dave, sue, x, temp, etc., a plurality of different pathnames can be resolved, each leading to different files (i.e., \/home\/kim\/app\/config; \/home\/dave\/app\/config; \/home\/sue\/app\/config; etc.), wherein each file is associated with a specific instance of an application.\n",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 4","b":["180","230","194","232","194","234","170","236","236","236","238","172","170","194","172","190","194","240","190","220","190","192","242","192","192","244","172","164","164","236","236","246","248","180","248"],"sub":["y","y ","y "]},"Still referring to , in one embodiment, OS  includes an application snapshot (AppShot) framework. AppShot framework provides routing for pathnames during the resolution of DSLs. In one embodiment, the AppShot framework is a software layer that resides between the application that can intercept API calls and track process state associated with an application. In one embodiment, requests for system resources or changes to process state are routed internally and the AppShot framework tracks these events in anticipation of a snapshot.","In one embodiment, the application  initiating the DSL is unaware of the resolution of the DSL. The application  does not need to be modified to take advantage of the present DSL and DSL resolution. In one embodiment, a DSL specification is applied per process allowing a plurality of separate processes to obtain access to separate and distinct files which are referenced through a single pathname. Further, a process may have multiple DSL specifications. This allows a DSL specification to be created based on an intended use or functional use. For example, a first DSL specification may be used to redirect an application to the application's correct configuration file, while a second DSL specification may be used to redirect the application to the application's appropriate temporary file space area of memory.","In one embodiment, the method and apparatus allows the value associated with a tag to be designated or set as a default. When resolving the DSL, the OS  will search for the DSL specification with the matching tag . If the tag  is not found, the OS  will determine if a default value, for example \u201cdefault,\u201d has been specified for the tag . If a default value has been set, then the OS  substitutes  the default value for the DSL declaration and accesses the file, for example, \u201c\/home\/default\/app\/config,\u201d in file system . The default value is the value that is used in the absence of an explicit value. In one embodiment, if a dynamic symbolic link is encountered while referencing a file, and no DSL specification with a matching tag has been set for that process, the default value may be utilized to resolve the pathname. For example, the DSL specification will provide a tag with a default value assigned similar to: \n\n\nA predefined alphanumeric character or string, such as \u201c:=\u201d followed by one or more alphanumeric characters, such as \u201cdefault,\u201d defining the default value, may be utilized to designate a default value if no other value is defined. In this example, the default is designated as \u201c:=default\u201d with the value being equal to \u201cdefault.\u201d In one embodiment, the default is derived from a character string contained within the DSL declaration. For example, if a DSL declaration is of the form \u201c$ {ID:=nobody}.\u201d Then \u201cID\u201d is the tag portion of the DSL declaration, and \u201cnobody\u201d is defined as the default value for this declaration. If no match is found in resolving the tag \u201cID\u201d (as described above), the default value \u201cnobody\u201d is used from the DSL declaration. The default is defined when the DSL declaration is created by adding a predefined alphanumeric character or string within the DSL declaration, for example \u201c:=.\u201d The predefined alphanumeric string is then followed by one or more alphanumeric characters defining the default value, such as \u201cnobody.\u201d\n","In one embodiment, if DSL declaration is not explicitly defined and a default value has not been set, the tag is utilized as the default value. For example, if a DSL declaration is of the form \u201c${ID},\u201d then \u201cID\u201d is the tag portion of the DSL declaration, and \u201cID\u201d is utilized as the value, resulting in a resolved path name such as \u201c\/home\/ID\/app\/config.\u201d In one embodiment, if the DSL declaration is not explicitly defined and a default value has not been set, the DSL declaration, \u201c$ {ID},\u201d is literally utilized as the default value for the declaration, resulting in a path name such as \u201c\/home\/${ID}\/app\/config,\u201d to access the file in the file system .","In one embodiment, the DSL generation and resolution of the present invention allows for a DSL to point to another DSL for further resolution. Thus, when OS  resolves a first DSL resulting in a first target pathname, the first target pathname points to a second DSL which will again be resolved by the OS  to a second target pathname or another DSL.","In one embodiment, a DSL may include a plurality of DSL declarations. Thus, upon resolution, the OS  resolves each of the DSL declarations the plurality of resolutions. For example, a DSL having a plurality of DSL declarations may be \u201c\/home\/${ID}\/app\/${temp}.\u201d In one embodiment, the OS  would resolve one of the declarations, for example \u201c${ID},\u201d then resolve the other, \u201c${temp}.\u201d",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 5","b":["258","260","180","182","262","180","182","232","264","170","266","264","170","270","270","272","262","272","274","190","276","190","280","190","262","280","158","282","192","190","284","274","190","284","286","246","262","164"]},"As taught by the foregoing description and examples, a dynamic symbolic link and dynamic symbolic link resolution method and system are provided by the present invention. The foregoing description of specific embodiments and examples of the invention have been presented for the purpose of illustration and description, and although the invention has been illustrated by certain of the preceding examples, it is not to be construed as being limited thereby. They are not intended to be exhaustive or to limit the invention to the precise forms disclosed, and obviously many modifications, embodiments, and variations are possible in light of the above teaching. It is intended that the scope of the invention encompass the generic area as herein disclosed, and by the claims appended hereto and their equivalents.","Having disclosed exemplary embodiments and the best mode, modifications and variations may be made to the disclosed embodiments while remaining within the scope of the present invention as defined by the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention, together with further advantages thereof, may best be understood by reference to the following description taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
