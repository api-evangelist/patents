---
title: Syntactic to semantic binding
abstract: In order to facilitate automated operations with software, semantic meaning of data values is bound to the syntactic type of the data values. In a described implementation, a piece of software accepts inputs and produces outputs. The inputs have a specified syntactic type (e.g., runtime type) and an expected semantic meaning. The semantic meaning corresponds to a real-world description of relevant data for the input. Providing a data set that matches the specified syntactic type and the expected semantic meaning as input to the software enables a relevant operation with the software to be performed. An example automated operation is the testing of a piece of software. In another described implementation, a synmantic data object is created and/or utilized that includes a syntactic type attribute and a semantic meaning attribute for the contained data value(s). Other optional attributes include locale indication and a validity flag.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07565648&OS=07565648&RS=07565648
owner: Microsoft Corporation
number: 07565648
owner_city: Redmond
owner_country: US
publication_date: 20040819
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","EXAMPLES OF SYNTACTIC TO SEMANTIC BINDING AND RELATED SYNMANTIC DATA OBJECTS","EXAMPLES OF SYNTACTIC TO SEMANTIC BINDING IN EXEMPLARY TESTING ENVIRONMENT IMPLEMENTATIONS","EXAMPLE OPERATING ENVIRONMENT FOR COMPUTER OR OTHER DEVICE"],"p":["This disclosure relates in general to binding semantic meaning to syntactic type of data values and in particular, by way of example but not limitation, to utilizing data of an appropriate syntactic type in accordance with its associated semantic meaning when performing an operation, such as a test, on a piece of software.","Software impacts nearly every facet of modern society, from communications and entertainment to business productivity and governmental efficiency. To accommodate all of these demands, new software is continually written, and it is written at an ever increasing rate. To ensure software provides its intended functionality, each new piece of software is tested.","To be useful, software usually accepts input of some kind and produces an output in response. As software has become more complex and interdependent, it has become difficult if not impossible to verify software merely by reviewing the lines of code. Hence, testing software entails providing a range of inputs and ensuring that the correct or expected output is produced.","The inputs can be provided manually, by code, by test script, and so forth. Regardless, the data for the inputs is created on an ad hoc basis for each piece of software to be tested. In other words, the tester has to create meaningful data for the different relevant inputs. The data also (hopefully) covers all possible problem points with the inputs and the associated manipulations thereof by the software code. This is an extraordinarily tedious and human-resource-intensive proposition that is repeated for virtually all of the new software code that is created.","Accordingly, there is a need for schemes and\/or techniques that can address the above-described and other deficiencies in an efficient and\/or uniform manner to e.g. facilitate the testing of software.","In order to facilitate automated operations with software, semantic meaning of data values is bound to the syntactic type of the data values. In a described implementation, a piece of software accepts inputs and produces outputs. The inputs have a specified syntactic type (e.g., runtime type) and an expected semantic meaning. The semantic meaning corresponds to a real-world description of relevant data for the input. Providing a data set that matches the specified syntactic type and the expected semantic meaning as input to the software enables a relevant operation with the software to be performed. An example automated operation is the testing of a piece of software. In another described implementation, a synmantic data object is created and\/or utilized that includes a syntactic type attribute and a semantic meaning attribute for the contained data value(s). Other optional attributes include locale indication and a validity flag. In yet another described implementation, relevant operational data can be acquired from a data provider having a data store that is organized to bind semantic meaning to syntactic type of the data stored therein.","Other method, system, approach, apparatus, device, media, procedure, application programming interface (API), arrangement, etc. implementations are described herein.","Introduction","A mechanism for binding semantic meaning to the syntactic type of data is described. In a described implementation, this binding takes the form of a data store (e.g., an XML file or files, an SQL database, etc.) containing the data, the data's runtime type, a validity flag, and a user-defined semantic type. Applications can request data from the data store through a client API or class and are able to request valid and\/or invalid data cases. The data store can be updated manually or by using a suite of automated tools.","In a testing environment example, by binding semantic meaning to the syntactic type of test data, test applications can be rapidly created without needing to supply specialized test data at the time of development. Furthermore, test case data can be varied and enhanced without changing the test code. Generally, this binding enables test tools to provide better coverage while facilitating the maintenance thereof.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["114","116","108","114","108","106","102","104","106","106","102","104","106","108"]},"Syntactic type  is the runtime type of the data. Semantic meaning  represents what the data describes. By way of example, syntactic type  may be integer, string, floating point, and so forth. Moreover, syntactic type may be something more complex such as a type object. Generally, the syntactic type is stored, but a runtime may specify the type information in any manner, such as a type object, an integer code, and so forth. On the other hand, semantic meaning  may be city, zip code, species, sport, state, movie, and so forth.","With the use  of synmantic data object , synmantic data object  is retrieved for use in an automated operation  with software . In other words, some operation is performed using both software  and synmantic data object . By way of example, the data value(s) of synmantic data object  may be applied to software  in order to test and evaluate software  with relevant data that is both syntactically correct and semantically meaningful.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2","b":["108","108","102","104","202","204","206","202","204","108"]},"With semantic binding technology, semantic meaning  is bound to value . As described above, syntactic type  specifies the runtime environment type (e.g., 32-bit integer) of synmantic data object . Semantic meaning or type  specifies the real-world type (e.g., \u201cstreet address\u201d) of synmantic data object . When a developer writes a new function, he\/she typically names the function arguments in a manner such that their intended meaning is clear to the caller (e.g., \u201cstreetAddress\u201d). In certain implementations as described further herein below, this descriptive naming can be extracted to automatically provide the semantic meaning of the argument.","Locale  and validity flag  are optional attributes of synmantic data object . Locale  provides regional and\/or cultural pertinence to a semantically bound data object, such as synmantic data object . Data objects that are valid in one locale may not be valid in any other region. For example, for the semantic \u201cprovince\u201d, a value of \u201cBritish Columbia\u201d is valid if the locale specifies \u201cCanada\u201d. This same \u201cBritish Columbia\u201d value is not valid if the specified locale is \u201cMexico\u201d.","Given a particular semantic meaning  and locale , synmantic data objects  contain either a valid or an invalid value . Validity flag  indicates this validity or invalidity. Synmantic data objects  containing valid values  are considered semantically meaningful within the specified locale. Synmantic data objects  containing invalid values  are typically incorrectly formatted, or they may contain data that is not semantically meaningful for the given locale.","Values  that are culturally agnostic may have the field of locale  set to the empty string (\u201c \u201d) to indicate being in a \u201cneutral\u201d locale or when locale  is otherwise not pertinent. With regard to equivalency, if the fields of two synmantic data object  are equal, then they may be considered to be equivalent.","An example data structure for a semantically bound data object is provided below:",{"@attributes":{"id":"p-0029","num":"0028"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"namespace SemanticBinding"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class SemanticData"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public Type SyntacticType;"]},{"entry":[{},"public String SemanticType;"]},{"entry":[{},"public String Locale;"]},{"entry":[{},"public Boolean IsValid;"]},{"entry":[{},"public Object Value;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 3","FIGS. 1 and 2"],"b":["300","300","306","322","300"]},"An automated operation engine  performs the actions of blocks - and -. Automated operation engine  takes a piece of software , acquires relevant data using synmantic data object(s) , and performs some operation with software  using the data values of synmantic data object . By way of example, automated operation engine  may perform one or more tests on software . The relevant data is acquired from data provider . Data provider  performs the actions of blocks -.","At block , a syntactic type is extracted. For example, automated operation engine  may extract a syntactic type of a value to be input to software . At block , an associated semantic meaning is ascertained. For example, automated operation engine  may infer the semantic meaning of the input value from a name given the value or method thereof in software .","At block , a relevant locale is identified. The locale can be specified by software , a user or creator of software , a person overseeing execution of automated operation engine , a user or creator thereof, and so forth. For implementations in which locale is substantially irrelevant and\/or for locale-agnostic software (), the actions of block  may be omitted.","At block , a data set is requested that specifies the extracted syntactic type, the ascertained semantic meaning, and optionally the locale. For example, automated operation engine  may use an API to specify the syntactic type, the semantic meaning, and the relevant locale for data being requested from data provider .","At block , the data provider receives the data request. At block , the request is fulfilled. For example, data provider  may access a data store thereof to retrieve a data set meeting the parameters as specified in the request. Hence, data provider  may produce one or more synmantic data objects  that match the requested syntactic type, semantic meaning, and relevant locale at the syntactic type , semantic meaning , and locale , respectively, of the one or more synmantic data objects . At block , a data set containing the one or more synmantic data objects  is returned from the data provider. For example, data provider  may provide the requested data set to automated operation engine  using an appropriate API.","At block , the requesting automated operation engine receives the data set. At block , an operation on the software is performed using the received data set. For example, automated operation engine  may test software  by applying value(s)  of the one or more synmantic data objects  to input(s) of software  in order to precipitate output(s). These output(s) may then be evaluated and analyzed by automated operation engine  and\/or a creator of software .","Three example testing usage scenarios are described below: unit testing, functionality (API) testing, and stress testing. The semantic binding technology described herein enables data centric, automated testing in each of these three scenarios.","Firstly, unit testing is the most basic form of testing applied when developing a new class library or method. Unit tests typically involve a small collection of data that exercises the basic functionality of the method (e.g., convert 32 degrees Fahrenheit to 0 degrees Celsius). Negative, boundary, and corner case testing is typically not performed as part of a unit test pass.","Secondly, functionality, or API, testing is the next step above unit testing. API test cases tend to be more exhaustive than unit test cases. Functionality testing is typically broken into correctness and negative testing. However, functionality testing can include at least four categories: basic functionality, boundary conditions, corner cases, and negative test cases.","There are therefore four described categories of functionality testing. First, basic functionality tests the behavior of an API using common, valid data. Second, boundary conditions tests use data near the boundaries of given data types. Boundary conditions testing typically includes some negative testing. Third, corner cases involve tests that incorporate data triggering scenarios which normal testing methods generally do not cover. Fourth, negative testing uses data that causes an API's failure path to be revealed and covered.","Thirdly, stress testing is designed to provoke failures in an API when it is run under stressful conditions, such as long duration runs, low memory and\/or resource constrained situations, very large data sets, and so forth.","In a described implementation, semantic binding technology is utilized in a target runtime environment having the following features: (1) hierarchical type system: so as to be able to return data collections of any possible type (e.g., intrinsic and custom), the runtime environment offers a type system which derives from a common base object; (2) ability to determine argument type at run time: to enable a common testing engine, argument types are determinable at run time by calling code; (3) ability to determine argument name at run time: to be able to determine the semantic of an argument, the argument name is discoverable at run time; and (4) support for library registration: data provider discovery uses a method (e.g., a unified registry, a configuration file, etc.) to register the provider library. It should be understood that these features are examples for the implementation described in this section.","For a data store of the data provider, any format can be used as long as the data enumerated above (e.g., syntactic type, semantic meaning, data value, etc.) are may be stored using the format. Example options for storage are an XML format, an SQL or other database format, and so forth. In order to support remote data providers, support for standard networking technologies (e.g., TCP\/IP, sockets, etc.) are included.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIGS. 4-6","FIGS. 4-6"]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 4","FIG. 1"],"b":["400","402","402","304","402","404","404","110"]},"To function automatically, client application  is capable of determining testing parameters from target library , requesting relevant data from data providers , receiving the relevant data, and applying the relevant data to target library . The relevancy of the data is attained using semantic binding technology.","Functional design architecture  also includes a semantic binding library , a local data provider (L), a local data store (L), a remote data provider (R), a network , and a remote data store (R). As indicated by the arrows, local data provider (L) accesses local data store (L) to retrieve semantically-bound data. Remote data provider (R) accesses remote data store (R) via one or more networks  to retrieve semantically-bound data.","In a described operational implementation, client application  calls into semantic binding library  to request one or more collections of data objects, such as synmantic data objects . The client may specify the desired data provider . Client application  loads target library  and uses the returned collection(s) to drive testing. Results of the testing are reported, and possibly analyzed, by client application .","Target library  implements an API that the user (e.g., a developer or creator of target library ) wishes to test. Target library  is realizable as any of many different types of software . Target library  is callable by another code module in order to be tested. Examples include, but are not limited to, an executable exporting one or more functions, an XML web service reached via the internet, and so forth.","Semantic binding library  provides the API called by client application  and handles the loading of the desired data provider . Additionally, semantic binding library  defines the interface to be implemented by data providers  and the object model contract for data transfer.","Data providers  are responsible for implementing the interface defined by semantic binding library . Data retrievals and updates are performed by the data providers  themselves. If a data store  is located on a remote resource (e.g., remote data store (R)), it is the responsibility of remote data provider (R) to perform the required network access. Additionally, it is the responsibility of data providers  to translate a native format of data stores  into the object model expected by semantic binding library .","Data stores  contain the information used to bind semantic meaning  to data objects  to generate synmantic data objects . The format of data stores  can be implementation specific. As noted above, it is left to data providers  that consume data stores  to translate the native format thereof to the object model contract expected by semantic binding library .","Client application test engine  may be implemented as any of many possible test engine types. Three example test engine types are: (1) a general purpose\/universal test engine, (2) a custom targeted test engine, and (3) a stress test engine. Descriptions of three such semantic binding automation engine examples follow.","1. A General Purpose\/Universal Test Engine","It is typically written by development tool vendors and used by developers of new class libraries or applications. A general purpose test engine usually requires little or no user interaction.\n\n","2. A Custom Targeted Test Engine","It is typically written and used by an experienced tester. Custom test engines may target specific scenarios involving multiple method calls in which the results of one call feed the next. The final result of the scenario may be reported once all steps are completed.\n\n","3. A Stress Test Engine","Stress testing engines can be based on the general purpose test engine, the custom test engine, or a combination of both engines.\n\n",{"@attributes":{"id":"p-0060","num":"0097"},"figref":"FIG. 5","b":["500","500","402","406","304","408","500","502","402","406","504"]},"For client application  to test a target library  (of ), a test data collection (TDC)  is acquired from semantic binding data provider . TDC  may be a single synmantic data object  (with one or multiple values  (of )) or multiple synmantic data objects  (each with one or multiple values ).","In a described operational implementation, test case  of client application  requests a data collection (DC) () from client API  of semantic binding library . Client API  opens the desired data provider  (). Client API  forwards the DC request () to data provider .","Semantic binding data provider  loads data store  (). Data provider  queries data store  for the requested DC (). Data provider  retrieves TDC  from semantic data store . Data provider  then returns the requested DC () to client API  of semantic binding library .","Semantic binding library  via client API  returns the DC () to test case  of client application . Hence, test case  receives the DC (). Test case  runs the code () of target library . In other words, client application  iterates through the values received in TDC . Test case  of client application  reports the test results ().",{"@attributes":{"id":"p-0065","num":"0102"},"figref":"FIG. 6","b":["600","600","602","604","606","608","610","612","602","604","606","608","610","612"]},"When a client application  employs the semantic binding technology, it instantiates an instance of SemanticBindingClient object . SemanticBindingClient object  instantiates the data provider's  implementation of the ISemanticBindingDataProvider interface . To determine the appropriate class, client application  accesses the data provider's  SemanticBindingDataProviderAttribute  and stores that information in an instance of the DataProviderInfo class .","Once loaded, the SemanticBindingClient  forwards data requests from client application  to data provider . The requested data collection is then returned to client application  through SemanticBindingClient . It should be noted that in  the ISemanticBindingDataProvider  is shown as being defined within data provider . While the actual definition is in semantic binding library , the actual implementation is done in data provider . Because the actual code lives in data provider , the interface is illustrated there.","With regard to the client API, it provides the following features. First, it returns data using a well defined format. This format includes: the data value(s), the syntactic type, the semantic meaning, the locale, and the validity flag. Second, it provides data sets which are semantically meaningful. These data sets include: valid data; valid, yet incorrect (e.g., malformed) data; and semantically invalid data (e.g., a city name where a zip code is requested). Third, it enables randomization of the returned data in which the seed value that generated the current data set is returned to the caller, wherein providing the seed value reproduces the same data set (when requested from the same provider). Fourth, it provides an ability to specify the target data provider, including local and remote data stores.","With reference to SemanticBindingClient , DataProvider is a read-only property providing information about the user's requested data provider. The value of the DataProvider property is set when the user calls the Connect method. The GetDataProviders method returns an array of DataProviderInfo objects. Calling applications select a provider from the array and pass that value to the Connect method. The Connect method instructs the client to instantiate an instance of the selected data provider. The data provider, in turn, opens a connection to its data store. Once the Connect method returns, the caller can request semantically meaningful data. If the Connect method fails, an appropriate exception is thrown.","The GetData method is called by consumers of the SemanticBindingClient  to request semantically meaningful data from the selected data provider. On return, callers check the values of the numValid, numInvalid, and numIncorrectSemantic to discover the actual number of data objects returned in the TestCaseData object . These values may be smaller than originally specified if there is not enough data to satisfy the request.","With regard to the data provider interface, it is defined by semantic binding library  and is implemented by each of data providers . The interface specifies each of the following features. First, it has a consistent format for describing data values. This format includes: at least one data value, a syntactic type, a semantic meaning, a locale, and a validity flag. Second, it has data store product information. This information includes: manufacturer name, product name, data provider class name, and last update date and time. Third and fourth, it has methods to retrieve data from the store and methods to update the data from the store. These update methods include: add, modify, and remove. Optionally, the data store interface may provide mappings between two or more semantic types (e.g., mapping \u201cprovince\u201d to \u201cstate\u201d to account for aliases).","With reference to ISemanticBindingDataProvider , LastUpdate is a read-only property (set by the data store update methods) providing the date and time of the most recent update to the contents of the data store. The GetData method queries the data store using the syntactic and semantic types. The target locale is used to filter the data into valid and invalid objects (e.g., \u201cWashington\u201d is a valid state in the United States and invalid in Canada). The caller specifies the requested number of valid, invalid, and semantically incorrect (e.g., returning the name of a city when a zip code is requested) objects. If there are less than the requested numbers of objects, the actual number returned is reported back to the caller through the same, bi-directional arguments. If a random seed is specified, the data collection returned is the same each time the same seed is used. If no seed is provided, the GetData method generates one and returns it through the same argument. The GetData method returns a TestCaseData object , which contains the data objects collections.","The GetDataCount method returns the total number of data objects, within the specific locale, for a given semantic. The GetValidDataCount method returns the total number of valid data objects, within the specific locale, for a given semantic. The GetInvalidDataCount method returns the total number of malformed or otherwise invalid data objects, within the specific locale, for a given semantic.","The PutData method writes the array of data objects to the data store. The RemoveData method removes the array of data objects from the data store. The GetSemanticMappings method returns an array containing the semantic meanings (including aliases) for the specified data type. The PutSemanticMappings method writes the array of semantic mappings to the data store. The RemoveSemanticMappings method deletes the array of semantic mappings from the data store.","With regard to data types, SemanticBindingDataProviderAttribute , DataProviderInfo , TestCaseData , and SemanticMap  are described as follows. With reference to SemanticBindingDataProviderAttribute , the Manufacturer property contains the name of the company which markets the data provider. The Product property contains the name of the data provider product. The DataProviderClassName property contains the name of the class that provides the data provider's implementation of the ISemanticBindingDataProvider interface.","With reference to DataProviderInfo , the AssembyName field contains the strong name (e.g., name, version, locale, etc.) describing the assembly containing the data provider code. The Manufacturer field directly maps to the SemanticBindingDataProviderAttribute.Manufacturer property. The Product field directly maps to the SemanticBindingDataProviderAttribute.Product property. The DataProviderClassName field directly maps to the SemanticBindingDataProviderAttribute.DataProviderClassName property.","With reference to TestCaseData , it should be noted that in the implementation depicted in , the SynmanticData object () is replaced by TestCaseData . This example substitution is instituted to reduce the size of the data transfer (e.g., the SyntacticType, SemanticType, and Locale fields may be sent once instead of multiple times) when more than one object is requested by client application . On slow network connections, this increases performance (by reducing the size of the transferred data) at the expense of keeping bound objects self-contained.","The SyntacticType field contains a Type object describing the runtime type of the data object. The SemanticType field contains the semantically meaningful type name (e.g., \u201ccountry\u201d) of the data object. The Locale property contains the spoken-language and geographic location (e.g., \u201cde-CH\u201d) in which the semantic type is meaningful for the data object. The Valid field contains the array of data objects which are semantically meaningful and valid, within the specified locale (e.g., \u201cCalifornia\u201d is a valid \u201cstate\u201d in locale \u201cen-US\u201d). If there are no objects to return, implementations may return either a 0 element array or NULL.","The Invalid field contains the array of data objects which are semantically meaningful, though invalid, within the specified locale (e.g., \u201cBavaria\u201d is an invalid \u201cstate\u201d in locale \u201cen-US\u201d). Data within this array are considered to be \u201cmalformed\u201d. If there are no objects to return, implementations may return either a 0 element array or NULL. The IncorrectSemantic field contains the array of data objects which are not semantically meaningful within the specified locale. If there are no objects to return, implementations may return either a 0 element array or NULL.","With reference to SemanticMap , the SemanticMap object  provides support for providing aliases for semantic types. Although this is an optional feature of semantic binding technology as described, it can reduce redundancy in the data store. The SyntacticType field contains the runtime type of the data object. The SemanticType field contains semantic meaning (e.g., \u201ccity\u201d) of the data object. The Aliases field contains an array of alternate semantic meanings (e.g., \u201ctown\u201d, \u201cvillage\u201d, etc. are aliases for \u201ccity\u201d) for the data object.","With regard to a data store format (not explicitly illustrated in ), the format of the data provider may be tailored as desired by individual implementers. (The example provided below uses XML.) The data store (e.g., a data store ) may include the following features. First is a data value, which is the value of the data object. Second is a syntactic type, which is the runtime data type. Third is a semantic type, which is the real world meaning of the data (e.g., city name). Fourth is a locale, which is the locale in which the semantic meaning is understood (e.g., en-US for the United States). Fifth is validity, which is a flag specifying the validity of the data within the specified locale.","An example implementation of a semantic binding data store is provided below in an example XML format.",{"@attributes":{"id":"p-0083","num":"0120"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<SemanticDataStore>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<productInfo manufacturer=\u201cMicrosoft\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"product=\u201cSample Semantic Data Store\u201d"]},{"entry":[{},"updated=\u201cMonth\/Day\/Year\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<aliases>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<semantic name=\u201czipcode\u201d type=\u201cSystem.String,mscorlib\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<alias name=\u201czip\u201d \/>"]},{"entry":[{},"<alias name=\u201czipCode\u201d \/>"]},{"entry":[{},"<alias name=\u201cpostalCode\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/semantic>"]},{"entry":[{},"<semantic name=\u201cstate\u201d type=\u201cSystem.String,mscorlib\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<alias name=\u201cprovince\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/semantic>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/aliases>"]},{"entry":[{},"<semantics>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<semantic name=\u201czipcode\u201d type=\u201cSystem.String,mscorlib\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<locale name=\u201cen-US\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<valid>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<value>98011<\/value>"]},{"entry":[{},"<value>02134<\/value>"]},{"entry":[{},"<value>98052-6399<\/value>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/valid>"]},{"entry":[{},"<invalid>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<value>2134<\/value>"]},{"entry":[{},"<value>o2134<\/value>"]},{"entry":[{},"<value>98-21<\/value>"]},{"entry":[{},"<value>98052-63<\/value>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/invalid>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/locale>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/semantic>"]},{"entry":[{},"<semantic name=\u201cstate\u201d type=\u201cSystem.String,mscorlib\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<locale name=\u201cen-US\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<valid>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<value>California<\/value>"]},{"entry":[{},"<value>Michigan<\/value>"]},{"entry":[{},"<value>Washington<\/value>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/valid>"]},{"entry":[{},"<invalid>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<value>Bavaria<\/value>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/invalid>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/locale>"]},{"entry":[{},"<locale name=\u201cen-CA\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<valid>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<value>British Columbia<\/value>"]},{"entry":[{},"<value>Nova Scotia<\/value>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/valid>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/locale>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/semantic>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/semantics>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/SemanticBindingStore>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The nodes used in the above XML-formatted example are described below. First, the productInfo node contains bookkeeping (e.g., Manufacturer, Product, etc.) data. The manufacturer and product attributes map directly into the Manufacturer and Product fields in the DataProviderInfo  and SemanticBindingDataProviderAttribute  objects. The update field stores the date and time the contents of the store were modified.","Second, the semantic node is the \u201ckey\u201d to the data store. It defines the binding between a runtime type and semantic meaning. The semantic meaning is described in the name attribute. In this example implementation, the value of the name attribute is the argument name taken from code. Consequently, it follows the syntactic rules of the target library's programming language (e.g., no spaces, must begin with an alphabetic character or an underscore, etc.). The value of the type attribute contains the name of the runtime type. The values (both valid and invalid) apply to specific locales; however, the semantic type names do not. Semantic nodes can appear beneath the semantics and aliases nodes.","Third, the semantics node serves as a master container for the registered semantically bound data. Fourth, the alias node provides the optional mapping of one semantic type to another. Although the alias feature is optional, data stores that implement the alias feature can reduce redundancy and thus the overall size of the data. The alternate semantic names are registered in the name attribute of the alias node. Aliases are locale agnostic. Alias nodes appear beneath semantic nodes within the aliases block of the data store.","Fifth, the aliases node serves as a master container for the registered alternate semantic names. Sixth, the locale node provides a container to group data which is valid or invalid based on spoken language and\/or geographic location (e.g., country). The name attribute contains a string indicating both the language and the location in the following format: ll-CC where \u201cll\u201d is an abbreviation for the spoken language and \u201cCC\u201d is an abbreviation for the country (e.g., \u201cen-US\u201d denotes English\u2014United States). To specify a neutral (e.g., global) locale, the empty string is used.","Seventh, the valid node contains zero or more value nodes, each of which contains data which is both semantically meaningful and valid for the specified locale. Eighth, the invalid node contains zero or more value nodes, each of which contains data which is semantically meaningful but not valid for the specified locale. Ninth, the value node contains the serialized version of the data object. The serialization of the data object is dependant on the format (e.g., XML, comma separated, etc) of the data store.","The devices, actions, formats, aspects, features, procedures, components, etc. of  are illustrated in diagrams that are divided into multiple blocks. However, the order, interconnections, interrelationships, layout, etc. in which  are described and\/or shown is not intended to be construed as a limitation, and any number of the blocks and\/or other illustrated parts can be modified, combined, rearranged, augmented, omitted, etc. in any manner to implement one or more systems, methods, devices, procedures, media, apparatuses, APIs, arrangements, etc. for syntactic to semantic binding. Furthermore, although the description herein includes references to specific implementations (including the general device of  below), the illustrated and\/or described implementations can be implemented in any suitable hardware, software, firmware, or combination thereof and using any appropriate object container(s), runtime environment(s), format representation(s), communication protocol(s), data structure organization(s), and so forth.",{"@attributes":{"id":"p-0090","num":"0127"},"figref":"FIG. 7","b":["700","700"]},"Operating environment , as well as device(s) thereof and alternatives thereto, may realize objects in accordance with synmantic data objects  and\/or implement APIs in accordance with the semantic binding technology as described herein. For example, devices may create (e.g., instantiate), utilize (e.g., in database accessing or software testing), etc. synmantic data objects . Furthermore, such devices may store a description of the format for synmantic data objects . Moreover, such devices may acquire and\/or provide a semantically bound data set with regard to a target library as is described above. Devices may also implement one or more aspects of syntactic to semantic binding in other alternative manners.","Example operating environment  is only one example of an environment and is not intended to suggest any limitation as to the scope of use or functionality of the applicable device (including computer, network node, entertainment device, mobile appliance, general electronic device, etc.) architectures. Neither should operating environment  (or the devices thereof) be interpreted as having any dependency or requirement relating to any one or to any combination of components as illustrated in .","Additionally, syntactic to semantic binding may be implemented with numerous other general purpose or special purpose device (including computing system) environments or configurations. Examples of well known devices, systems, environments, and\/or configurations that may be suitable for use include, but are not limited to, personal computers, server computers, thin clients, thick clients, personal digital assistants (PDAs) or mobile telephones, watches, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set-top boxes, programmable consumer electronics, video game machines, game consoles, portable or handheld gaming units, network PCs, minicomputers, mainframe computers, network nodes, distributed or multi-processing computing environments that include any of the above systems or devices, some combination thereof, and so forth.","Implementations for syntactic to semantic binding may be described in the general context of processor-executable instructions. Generally, processor-executable instructions include routines, programs, protocols, objects, interfaces, components, data structures, etc. that perform and\/or enable particular tasks and\/or implement particular abstract data types. Syntactic to semantic binding, as described in certain implementations herein, may also be practiced in distributed processing environments where tasks are performed by remotely-linked processing devices that are connected through a communications link and\/or network. Especially but not exclusively in a distributed computing environment, processor-executable instructions may be located in separate storage media, executed by different processors, and\/or propagated over transmission media.","Example operating environment  includes a general-purpose computing device in the form of a computer , which may comprise any (e.g., electronic) device with computing\/processing capabilities. The components of computer  may include, but are not limited to, one or more processors or processing units , a system memory , and a system bus  that couples various system components including processor  to system memory .","Processors  are not limited by the materials from which they are formed or the processing mechanisms employed therein. For example, processors  may be comprised of semiconductor(s) and\/or transistors (e.g., electronic integrated circuits (ICs)). In such a context, processor-executable instructions may be electronically-executable instructions. Alternatively, the mechanisms of or for processors , and thus of or for computer , may include, but are not limited to, quantum computing, optical computing, mechanical computing (e.g., using nanotechnology), and so forth.","System bus  represents one or more of any of many types of wired or wireless bus structures, including a memory bus or memory controller, a point-to-point connection, a switching fabric, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, such architectures may include an Industry Standard Architecture (ISA) bus, a Micro Channel Architecture (MCA) bus, an Enhanced ISA (EISA) bus, a Video Electronics Standards Association (VESA) local bus, a Peripheral Component Interconnects (PCI) bus also known as a Mezzanine bus, some combination thereof, and so forth.","Computer  typically includes a variety of processor-accessible media. Such media may be any available media that is accessible by computer  or another (e.g., electronic) device, and it includes both volatile and non-volatile media, removable and non-removable media, and storage and transmission media.","System memory  includes processor-accessible storage media in the form of volatile memory, such as random access memory (RAM) , and\/or non-volatile memory, such as read only memory (ROM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules\/instructions that are immediately accessible to and\/or being presently operated on by processing unit .","Computer  may also include other removable\/non-removable and\/or volatile\/non-volatile storage media. By way of example,  illustrates a hard disk drive or disk drive array  for reading from and writing to a (typically) non-removable, non-volatile magnetic media (not separately shown); a magnetic disk drive  for reading from and writing to a (typically) removable, non-volatile magnetic disk  (e.g., a \u201cfloppy disk\u201d); and an optical disk drive  for reading from and\/or writing to a (typically) removable, non-volatile optical disk  such as a CD, DVD, or other optical media. Hard disk drive , magnetic disk drive , and optical disk drive  are each connected to system bus  by one or more storage media interfaces . Alternatively, hard disk drive , magnetic disk drive , and optical disk drive  may be connected to system bus  by one or more other separate or combined interfaces (not shown).","The disk drives and their associated processor-accessible media provide non-volatile storage of processor-executable instructions, such as data structures, program modules, and other data for computer . Although example computer  illustrates a hard disk , a removable magnetic disk , and a removable optical disk , it is to be appreciated that other types of processor-accessible media may store instructions that are accessible by a device, such as magnetic cassettes or other magnetic storage devices, flash memory, compact disks (CDs), digital versatile disks (DVDs) or other optical storage, RAM, ROM, electrically-erasable programmable read-only memories (EEPROM), and so forth. Such media may also include so-called special purpose or hard-wired IC chips. In other words, any processor-accessible media may be utilized to realize the storage media of the example operating environment .","Any number of program modules (or other units or sets of instructions\/code) may be stored on hard disk , magnetic disk , optical disk , ROM , and\/or RAM , including by way of general example, an operating system , one or more application programs , other program modules , and program data . These program modules may define, create, use, etc. synmantic data objects  as described herein for implementing syntactic to semantic bindings.","A user may enter commands and\/or information into computer  via input devices such as a keyboard  and a pointing device  (e.g., a \u201cmouse\u201d). Other input devices  (not shown specifically) may include a microphone, joystick, game pad, satellite dish, serial port, scanner, and\/or the like. These and other input devices are connected to processing unit  via input\/output interfaces  that are coupled to system bus . However, input devices and\/or output devices may instead be connected by other interface and bus structures, such as a parallel port, a game port, a universal serial bus (USB) port, an infrared port, an IEEE 1394 (\u201cFirewire\u201d) interface, an IEEE 802.11 wireless interface, a Bluetooth\u00ae wireless interface, and so forth.","A monitor\/view screen  or other type of display device may also be connected to system bus  via an interface, such as a video adapter . Video adapter  (or another component) may be or may include a graphics card for processing graphics-intensive calculations and for handling demanding display requirements. Typically, a graphics card includes a graphics processing unit (GPU), video RAM (VRAM), etc. to facilitate the expeditious display of graphics and performance of graphics operations. In addition to monitor , other output peripheral devices may include components such as speakers (not shown) and a printer , which may be connected to computer  via input\/output interfaces .","Computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computing device . By way of example, remote computing device  may be a peripheral device, a personal computer, a portable computer (e.g., laptop computer, tablet computer, PDA, mobile station, etc.), a palm or pocket-sized computer, a watch, a gaming device, a server, a router, a network computer, a peer device, another network node, or another device type as listed above, and so forth. However, remote computing device  is illustrated as a portable computer that may include many or all of the elements and features described herein with respect to computer .","Logical connections between computer  and remote computer  are depicted as a local area network (LAN)  and a general wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, the Internet, fixed and mobile telephone networks, ad-hoc and infrastructure wireless networks, mesh networks, other wireless networks, gaming networks, some combination thereof, and so forth. Such networks and logical and physical communications connections are additional examples of transmission media.","When implemented in a LAN networking environment, computer  is usually connected to LAN  via a network interface or adapter . When implemented in a WAN networking environment, computer  typically includes a modem  or other component for establishing communications over WAN . Modem , which may be internal or external to computer , may be connected to system bus  via input\/output interfaces  or any other appropriate mechanism(s). It is to be appreciated that the illustrated network connections are examples and that other manners for establishing communication link(s) between computers  and  may be employed.","In a networked environment, such as that illustrated with operating environment , program modules or other instructions that are depicted relative to computer , or portions thereof, may be fully or partially stored in a remote media storage device. By way of example, remote application programs  reside on a memory component of remote computer  but may be usable or otherwise accessible via computer . Also, for purposes of illustration, application programs  and other processor-executable instructions such as operating system  are illustrated herein as discrete blocks, but it is recognized that such programs, components, and other instructions reside at various times in different storage components of computing device  (and\/or remote computing device ) and are executed by processor(s)  of computer  (and\/or those of remote computing device ).","Although systems, media, devices, methods, procedures, apparatuses, techniques, schemes, approaches, procedures, APIs, arrangements, and other implementations have been described in language specific to structural, logical, algorithmic, relational, and functional features and\/or diagrams, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or diagrams described. Rather, the specific features and diagrams are disclosed as example forms of implementing the claimed invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The same numbers are used throughout the drawings to reference like and\/or corresponding aspects, features, and components.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
