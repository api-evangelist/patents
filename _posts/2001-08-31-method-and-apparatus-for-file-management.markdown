---
title: Method and apparatus for file management
abstract: File management method having first and second processing modes for storing file type information for discrimination between first and second processing modes in recording medium as file management information associated with file for file management. In first processing mode, when data in the form of file is written on a recording medium and a write error occurs, replacement processing to another write area is performed to write the data in another area. In second processing mode, when write error occurs, the replacement processing to other write area is not performed to write the data. Method includes reading file type information associated with a file to be processed from recording medium, converting the file type from file type indicative of first processing mode to file type indicative of second processing mode, and writing the file type after conversion in recording medium as file management information associated with the file to be processed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07089267&OS=07089267&RS=07089267
owner: Hitachi, Ltd.
number: 07089267
owner_city: Tokyo
owner_country: JP
publication_date: 20010831
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE EMBODIMENTS"],"p":["The present invention relates to file management methods and more particularly, to a file management method which can be effectively used when there are mixedly present, in a single file on a recording medium, data recorded in an operational mode wherein data reliability is essential and data recorded in an operational mode wherein data transmission rate is essential.","A system utilizing a re-writable data recording medium is estimated to have an application as a data storage device of a personal computer (PC) or the like and an application as an audio\/video (AV) recorder such as a video recorder or an audio recorder. In the PC application, in general, it is important to secure data reliability; whereas, in the AV application, it is important to secure operation (seamless operation) of recording and reproducing a video or audio signal continuously with respect to time.","In the PC application, in order to secure the data reliability, the data is read immediately after the data is written to determine the presence or absence of a data error. In the presence of a data error, write verify operation is usually carried out for its rewriting. Further, when many times of rewriting operation results in occurrence of the data error, the system determines that its recording area (which will be referred to as the sector, hereinafter) is defective and usually performs replacement processing to replace the sector with another area by its preliminary new recording area (which will be referred to as the replacement sector, hereinafter) previously prepared on the same recording medium. In this case, the system usually combines a plurality of (e.g., 16) sectors each as a minimum recording unit into an error correction code (ECC) block, and performs the replacement processing on a block basis. Similarly, even when reading data, the system performs error judgement. And at the time of error occurrence, the system performs its rereading operation or reads data from its replacement sector. When an uncorrectable data error takes place, it is common practice that the system gives a priority to securing the data reliability and performs its abnormal end operation to stop its writing or reading. Through such operations, the system can minimize the data error which may be inadvertently included and can secure data reliability. However, a data transmission rate (i.e., writing or reading rate) to a recording medium becomes lower. Such write\/read operational mode will be referred to as the PC mode, hereinafter.","In the AV application, for the purpose of securing the seamless operation, it is common practice that, even when an error takes place in a data write or read mode, the system ignores the error and continues the writing or reading operation as it is. In this case, the data transmission rate to the recording medium can be kept high but the data reliability is lowered. Such a write\/read operational mode will be referred to as the AV mode, hereinafter.","A unit for driving a recording medium generally has previously PC and AV mode recording\/reproducing mechanisms, either one of which can be selected by parameter setting of an external control command and then be operated. For example, in the case of a digital versatile disc random access memory (DVD-RAM), the drive unit usually operates in the PC mode. However, when the parameter of a streaming flag bit is set from 0 to 1 and a write or read command is sent to the drive unit, the drive unit can operate in the AV mode.","It is also common to record information indicative of one of which modes wherein the data is recorded on the recording medium together with the data. In the case of the above DVD-RAM, a file system using the subset of the International Standard ISO\/IEC1346 is formed on the recording medium, respective data are file-structured for their management, and file type information for identification between a file (which will be referred to as the PC file, hereinafter) recorded in the PC mode and a file (which will be referred to as the AV file, hereinafter) recorded in the AV mode is recorded in management information called a file entry. In this case, a file and the type of the file have a 1:1 relation and thus it is impossible to set a plurality of file types for a single file.","A sector (which will be referred to as the defective sector, hereinafter) containing such a defect as mentioned above includes not only a sector containing a physical defect on a recording medium but also a sector from which data cannot be normally read or written due to a deposition of dust or fingerprint thereon.","The above DVD-RAM example has a history that a drive unit and file system driver software (which will be referred to as the file system driver, hereinafter) designed only for the PC mode were first commercialized and thereafter a drive unit and file system driver designed to cope with both of the AV and PC modes were commercialized. Accordingly, there exist a drive unit and file system driver which cannot recognize that a file on the recording medium was recorded in the AV file (in other words, which handle all files as recorded in the PC mode, and also a drive unit and file system driver which can read a file recorded in the AV mode but cannot write it.","As shown in , for example, it is assumed that a video recorder  wrote video data on a DVD-RAM recording medium  in an AV mode and also recorded on the recording medium file type information indicating that the file is an AV file. It is also assumed that the recording medium  was mounted in a drive unit of a personal computer (PC) , the above video data was edited on a video editing application software or the like and again written on the same recording medium . At this time, if the drive unit and file system driver of the PC are designed to allow writing only in the PC mode, then the file written on the recording medium is set as a PC file having file type information .","The file system (subset of the ISO\/IEC13346 Standards) of the aforementioned DVD-RAM can set only one file type information for each file. For this reason, in the example of , file data  (referred to as the file body, hereinafter), which is a mixture of an AV mode recorded part  and a PC mode recorded part , is created, and the file type information  of this file is a PC file.","As mentioned above, even when an error occurs on its way to reading data in the AV mode, the system ignores the error and continues the writing operation. Thus the AV mode recorded part  may include a defective sector  or the like. Meanwhile, at the time of reading the file, the file system driver refers to the file type information  and reads the data from the drive unit with use of a command parameter for the PC mode. However, when the driver reads an error portion of the defective sector  in the PC mode, it performs the reading operation many times, eventually judges that the data is destroyed, and ends abnormally in the middle of the reading operation. In other words, when the file is read sequentially from its head, data written in a portion followed by the defective sector  cannot be read.","It is therefore an object of the present invention to provide a file management method which, even when data recording is carried out with use of a drive unit and file system driver not designed for AV mode writing, can smoothly read data to the end of a file without causing abnormal end on the way to read the data.","In accordance with an aspect of the present invention, there is provided a file management method which has first and second processing modes and which stores information (which will be referred to as the file type, hereinafter) for discrimination between first and second processing modes in a recording medium as file management information associated with a file to be processed for file management. In the first processing mode, when data in the form of a file is written on a recording medium and a write error occurs, replacement processing to another write area is carried out to write the data in the other area. In the second processing mode, when the write error occurs, the replacement processing to the other write area is not carried out to write the data. The method includes the steps of reading a file type associated with the file to be processed from the recording medium, converting the file type from the file type indicative of the first processing mode to a file type indicative of the second processing mode, and writing the file type after the conversion in the recording medium as file management information associated with the file to be processed.","The replacement processing is carried out on an ECC block basis, the block as a recording unit including N (N: positive integer) sectors. The method further includes steps of judging whether or not the data belonging to the file to be processed is stored in all the N sectors of the ECC block, and when judging that the data is not stored in the ECC block, registering one (referred to as the remaining sector) of the sectors in the ECC block having the data of the file to be processed stored therein where the data is not stored as a stuffing in the file management information.","In accordance with another aspect of the present invention, there is provided a file management method which has a first processing mode wherein, when data in the form of a file is written on a recording medium and a write error occurs, replacement processing to another write area is carried out to write the data in the other area, and also has a second processing mode wherein, when the write error occurs, the replacement processing to the other write area is not carried out to write the data. In this case, the replacement processing is carried out on a basis of an ECC block including N (N: positive integer) recording units or sectors. The method includes the steps of reading data stored at a recording location after the replacement processing, and writing the data in the recording location prior to the replacement processing.","Embodiments of the present invention will be explained by referring to the attached drawings. Explanation will first be made as to a logical data structure  in a recording medium  which is a common part of the embodiment of the present invention and the earlier-mentioned prior art, with use of . In the drawing, the aforementioned file system (subset of the ISO\/IEC13346 Standards) for DVD-RAM is formed in a part between a lead-in  and lead-out  defined in a recording medium physical layer. In the file system, information indicative of attributes of the entire recording medium is included in volume management information . In the drawing, a directory structure starting with Root is illustrated as if all were stored in the volume management information . However, this is merely a model representation for easy understanding of the present invention, and in actuality, the directory information and the like are stored in the form of a file structure using file entry or the like which will be explained later. The volume management information  is not associated directly with the operation of the present invention and thus explanation thereof is omitted.","As the volume management information  is traced by a known method, a space bitmap descriptor  for management of a blank area  in the recording medium  or file entries  and  for management of files can be read out. As mentioned above, the file entries  and  have a 1:1 relation with file bodies  and  respectively. File type  indicative of a PC or AV file is stored in each of the file entries  and .",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 1","FIG. 2"],"b":["101","102","215","216","214","216","103","104","106","104","105","105","106","103"]},"Explanation will be made as to the operational principle of the first embodiment, by referring to .  shows the operation of the apparatus when changed the file type  from the PC file to the AV file according to the processing contents of  with respect to a file body  having a defective sector  in the AV mode recorded part  as shown in . In , the drive unit and file system driver designed for the AV mode reading starts with the reading operation of the AV mode according to the aforementioned file type (AV file). As mentioned above, when the apparatus reads the file in the AV mode, the apparatus will not abnormally end even when reading the defective sector  and can continuously read the data regardless of a read error which occurs during this reading operation. Similarly, since the apparatus can continuously read the data of even the PC mode recorded part , the apparatus can read the data to the end of the file without a hitch.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 4","FIG. 1"],"b":["401","402","403","405","404","405","406","405"]},"In general, there exist mixedly in a single file body such a defective sector  or  and a replacement sector  as shown in . Even in any mixed condition, the apparatus will not abnormally end halfway and can read the file at its end without a hitch according to the processing contents of .",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 5","b":["209","214","501","214","0","501","208","502","503","208","504"]},"The non-relocatable flag  will be explained with reference to , B and . In , an ordinary video and\/or audio reproducing device reads data recorded in a recording medium  through a data reproducing system  (optical head, etc.) and writes the read data in a buffer  at a data rate Vo. Meanwhile, the device reads the data from the buffer  at the data rate Vo, and inputs the read data in a video and\/or audio decoder  of a MPEG (moving picture experts group) type or the like to eventually obtain a video signal or audio signal. The details of the data reproducing system  and decoder  are not illustrated for simplicity of the drawing.","Shown in  is an example of operation of the buffer . In the drawing, the amount of data in the buffer  is gradually increased at a rate Vr\u2212Vo in a data reading time Tr from the recording medium , whereas, the amount of data in the buffer  is gradually decreased at a rate \u2212Vo in a time (which will be referred to as the jump time Tj, hereinafter) during which the data cannot be read due to seeking or the like. When next reading operation starts before the amount of data in the buffer  reaches zero, the data supply to the decoder  cannot be interrupted and seamless reproducing operation can be realized. When the data continuous reading time Tr continues long and the data is read to an extent of the full memory capacity (or full buffer size) of the buffer  becomes full, data cannot be read into the buffer  any more, which causes a so-called kickback that the disk is rotated with idling, during which the amount of data in the buffer  is made somewhat smaller than the buffer size. Meanwhile, when the jump time Tj continues long, the data in the buffer  to be supplied to the decoder is fully consumed, which results in generation of an underflow phenomenon that a resulting video or audio signal is intermitted.","The aforementioned non-relocatable flag  is a flag defined for the purpose of preventing such underflow. When the flag is set to \u20180\u2019, the recording position of the file body in the recording medium can be moved without any limitation. When the flag is set to \u20181\u2019, on the other hand, the movement of the recording position of the file body in the recording medium is inhibited.","Assume for example that, as shown in , an AV file  was recorded by the aforementioned video recorder  on the recording medium having a PC file  already recorded thereon. Then as shown in , the positions of extents -, - and - of the AV file are determined, usually while giving consideration that, even when extents - and - of the PC file are jumped in the reproduction mode, the read result of the AV file  will not subjected to underflow.","There has been already spread such file utility software that has a function (which will be referred to as the defragmentation function, hereinafter) of collecting fragmented file bodies at one location and relocating them to speed up the access to the file. Thus it is considered using such software to perform such file relocating operation  as shown in  to collect the extents - and - of the PC file at one location. Similarly, when defragmentation is carried out over the extent - of the AV file, a gap between the extents - and - becomes large, which might lead to generation of the aforementioned underflow. To avoid this, the above non-relocatable flag  is usually set to \u20181\u2019 so that defragmentation operation will not be carried out over the AV file.","Explanation will be made as to the state  of the ECC block with reference to  showing a file location state in the ECC block. In the drawing, (a) is for a PC file and (b) is for an AV file. As already mentioned above, data writing is carried out on every sector basis. Thus, the interior of the ECC block made of a plurality of sectors (e.g., 16 sectors) combined as an error correction processing unit not only may have an extent  of the PC file recorded therein but also have a blank area  at the head or tail part of the file and extents  of other file mixedly placed within the same ECC block. Even when no defect occurs at the time of writing data into an ECC block , a write error takes place at the time of newly writing data into the blank area  or the extent  of the other file, thus causing the aforementioned replacement processing. In order to avoid this, such a measure is usually taken as to insert stuffings  in the ECC block having an extent  of an AV file written therein as shown in , (b) to avoid writing operation in the PC mode which may undesirably cause the replacement processing. Accordingly, when the file type is changed from the PC file to the AV file as shown in , it is necessary to consider even the above stuffing insertion processing.","Explanation will be made as to the operation of the stuffing processing in the present invention by referring to . First shown in  is an example of operation of the stuffing insertion processing, when a single ECC block  has an extent  of a PC file, a blank area , and extents  of other files mixedly and when the extents  of the other files are moved into another ECC block . When the file type is changed from the PC file to the AV file as mentioned above, it is necessary to insert stuffings into remaining sectors  of the ECC block having the extents of the AV file already recorded therein. At this time, the extent  of the PC file of , (a) can be an extent  of the AV file in the other ECC block at the same recording position as the ECC block . However, it is necessary to make blank the extents  of the other files and insert the stuffings  therein. For this reason, it is required to once read the contents of the data of the extents  of the other files, find a blank area  of the other ECC block  and then write the data contents therein to thereby create a new extent . In this connection, it is unnecessary for the ECC block  for writing of the new extent  to have all blank area sectors. That is, the ECC block  may have a blank area  and an extent of the other files as shown in , (b), or the data contents of the extent  may be dividedly written into a plurality of ECC blocks. How to find a blank area and the detailed stuffing inserting method will be explained.","Shown in  is an example of operation of the stuffing insertion processing, when a single ECC block  has an extent  of a PC file, a blank area  and an extent  of other files mixedly and when the extent  of the PC file is moved into another ECC block . In this case, a new extent  is created by once reading the data contents of the extent  of the PC file in , (a), finding the ECC block  having a blank area, and then writing the data contents therein. At this time, since it is necessary to insert a stuffing  in a remaining sector  of the ECC block  as a movement target, all sectors in the ECC block  are required to be blank. In this connection, the new extent  is not required to be written from its head sector. That is, the new extent may be written from an intermediate sector of the ECC block or written as extended to another ECC block. However, stuffings are required to be inserted into all the remaining sectors of the ECC blocks having the extent of the AV file written therein. Further, it is unnecessary to change the position of the extent  of the other files from its original position, and a new blank area  can be freely used thereafter.","Explanation will be made as to data allocation information of a file extent and a specific stuffing insertion method by referring to . In the drawing, an extent of an AV file will be referred to as the AV extent, hereinafter. In the same drawing, it is assumed that a single AV file is already written as divided into three AV extents -, - and - and that stuffings -, -, -, -, - and - are already recorded in the ECC blocks -, - and - having respective AV extents written therein, respectively. It is also assumed for easy understanding of explanation that the respective AV extents are written in the order of (A), (B) and (C) and addresses in the file are determined in this order. Information about the allocations of the extents and information about the order are usually included in file entries in the form of such allocation information  as shown in . In the allocation information , an allocation descriptor  of the AV extent  having significant data recorded therein is first stored as information on the file body  and then the allocation descriptor  of the stuffing  is stored as information on the file tail . Each allocation descriptor  includes information  on flag+extent length (to be explained later) and an extension position  indicative of the storage position of the extent represented in terms of a logical sector number. The file body  is stored in the extent writing order of (-), (-) and (-). The file tail  may be stored in any order regardless of the order of the stuffing . The (flag+length) information  includes a flag  (to be explained later) and length information  indicative of the extent length represented in terms of the number of bytes. The flag  usually consists of two bits by the value of which an extent is allocated. The flag usually has four defined values, that is, \u201c00\u201d means that an extent is allocated and recorded, \u201c01\u201d means that an extent is allocated but not recorded, \u201c10\u201d means that an extent is not allocated and not recorded, and \u201c11\u201d means that an extent is continued to next data allocation information. A distinction between the file body  and file tail  can be realized by associating the value \u201c00\u201d with the AV extent and the value \u201c01\u201d with the stuffing. Further, at the time of inserting the stuffing, the stuffing insertion processing can be easily realized by adding a new allocation descriptor  having the flag  set to \u201c01\u201d to the end of the file tail . In this connection, the data contents of the extent position corresponding to the stuffing is arbitrary, that is, may be stuffed with \u201c0\u201d or the previous value may remain there.","By referring to , explanation will be made as to the particular contents of a space bitmap descriptor  and how to search a blank area. The space bitmap descriptor  usually includes a tag  indicative of the fact of being the space bitmap descriptor, a bit map  (to be explained later), a bit number  indicative of the number of bits to show the size of the bit map , and a byte number  indicative of the number of bytes necessary to store the bit map . The respective bits of the bit map  correspond to the contents of respective sectors within the recording medium, and the bit of a sector  in use is set to \u201c0\u201d while the bit of a sector  in no use is set to \u201c1\u201d respectively. When it is desired to find a blank area on a sector basis in the processing of , the finding of a blank sector can be easily carried out, e.g., by searching the bit map  for a bit having \u201c1\u201d set therefor from its head and converting it to a logical sector number corresponding to its bit position. Further, when it is desired to find a blank area on an ECC-block basis in the processing of , the finding of a blank ECC block can be easily realized, e.g., by previously finding a bit position corresponding to an ECC block boundary (for example, a sector having a logical sector number represented by a multiple of 16 sectors in the bit map , searching for a position until which bits counted from the previously-found bit position by a number corresponding to the size (e.g., 16 bits) of the above ECC block are set all to \u201c1\u201d, and then converting the searched bit position to a corresponding logical sector number.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 13","FIG. 1","FIG. 9","FIG. 5"],"b":["1301","209","1302","1303","214","209","1304","1317","1303","1304","1104","209","1105","1102","1305","1107","1105","903","904","901","1102","1306","1312","1306","904","1307","1307","1307","904","904","908","1308","1309","1307","1308","1309","1310","906","1104","1311","1201","1307","1308","1309","1310","1312","1313","1314","1313","1105","1305","1105","1314","214","1315","501","1316","209","1317"]},{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 14","FIG. 1","FIG. 10","FIG. 5"],"b":["1401","209","1403","214","209","1404","1417","1403","1404","1104","209","1105","1102","1405","1107","1105","1003","1004","1001","1102","1406","1412","1406","1004","1407","1410","1407","1002","1007","1408","1105","1104","1409","1105","1104","1407","1408","1409","1002","1410","1006","1104","1411","1201","1407","1408","1409","1410","1412","1413","1414","1413","1105","1405","1105","1414","214","1415","501","1416","209","1417"]},{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 15","FIG. 4"],"b":["404","405","404","406","405","406","1502","406","405","405","406","406","405","1502","1501","1503"]},{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 16","FIG. 15"],"b":["1501","1503","1601","1602","1104","1603","1604","1104","1602","1603","1605","1608","1605","1604","1502","1606","1502","1607","1604","1608"]},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 17","b":["214","214","1701","214","1702","215","216","208","217","214"]},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 18","b":["1701","1702","1801","1802","1802","1803","1804","1803","1804","1805","214"]},{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 19","FIGS. 1"],"b":["1901","1912","1901","1903","13","14","15","16","17","18","1904","1912","1911","1905","1905","1911","1912","1902","1906","1907","1908","1909","1910","1901","1907","1910","1908","1909","1903","1905","1903","1905"]},"In this connection, the aforementioned writing of the file type, file entry, data allocation information and space bitmap descriptor may be carried out all in the PC mode. Further, although the above recording medium has been explained in connection with the DVD-RAM as an example, the present invention is not limited to the specific example. For example, the present invention can be applied regardless of the type of the recording medium such as an optical disk, magneto-optical disk (MO disk) and magnetic disk (HDD: hard disk drive) or even when the recording medium is a removable recording medium (open recording medium) or non-removable recording medium (closed recording medium). The present invention can be widely applied to a system wherein there are mixedly present data recorded in an operation mode in which a data reliability is essential and data recorded in an operation mode in which a data transmission rate is essential in a signal file on a recording medium.","In accordance with the foregoing embodiments, even when the apparatus record data with use of a drive unit or file system driver not adapted for the AV mode writing, the apparatus can read the data to the end of the file without a hitch and without causing an abnormal end during the data reading operation.","In accordance with the foregoing embodiments, further, the apparatus can convert the PC file to the AV file after processing. Thus, the need of developing a new drive unit or file system driver adapted for the AV file writing can be eliminated, and the compulsive need of the PC user to purchase the new drive unit or file system driver and to install it can be minimized.","In addition, an application program for video editing or the like can be created with use of only an existing general (i.e., PC-mode-capable) API (Application Programming Interface), the present invention cannot be limited to only a combination with a AV-mode-capable file system driver to be newly developed, can realize the operation of the combination of an existing file system driver and application program, thus expanding the market of the application program."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 19"}]},"DETDESC":[{},{}]}
