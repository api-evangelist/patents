---
title: Unified framework and method for call control and media control
abstract: A communication system and method include a server hosting an interactive voice response or self-help application in a Java virtual machine. The communication application is programmed with a unified communication API, which is provided by a unified application framework. The API provides a set of unified class objects for call control and media control. The unified class objects are constructed from class object primitives of individual standards-based Java call control API and media control API. The constructs are a structured and restricted set conforming to the object model of the application and its states. The API has a unified event handler for both call and media controls and dispatches events to the application based on the type of event and the application state of the object model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08612932&OS=08612932&RS=08612932
owner: Voxeo Corporation
number: 08612932
owner_city: Orlando
owner_country: US
publication_date: 20110417
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY AND OBJECTS OF THE INVENTION","UNIFIED FRAMEWORK FOR CALL CONTROL AND MEDIA CONTROL"],"p":["The benefit is claimed of U.S. provisional patent application of Wei Chen, Zhiyu Liu, Xiaopu Zhu, and Jose Maria de Castro, Jr, Application No. 61\/325,355 filed on Apr. 18, 2010.","The present invention relates to telecommunication and a networked computer telephony system including the Internet and the Public Switched Telephone System, and more particularly to a system and method for implementing a unified framework for call control and media control.","Two major telecommunication networks have evolved worldwide. The first is a network of telephone systems in the form of the Public Switched Telephone System (PSTN). This network was initially designed to carry voice communication, but later also adapted to transport data. The second is a network of computer systems in the form of the Internet. The Internet has been designed to carry data but also increasingly being used to transport voice and multimedia information. Computers implementing telephony applications have been integrated into both of these telecommunication networks to provide enhanced communication services. For example on the PSTN, computer telephony integration has provided more functions and control to the POTS (Plain Old Telephone Services). On the Internet, computers are themselves terminal equipment for voice communication as well as serving as intelligent routers and controllers for a host of terminal equipment.","The Internet is a worldwide network of IP networks communicating under TCP\/IP (Transmission Control Protocol\/Internet Protocol) suite. Specifically, voice and other multimedia information are transported on the Internet under the VoIP (Voice-over-IP) protocol.","The integration of the PSTN and the IP networks allows for greater facility in automation of voice applications by leveraging the inherent routing flexibility and computing accessibility in the IP networks.","An example platform for easy deployment of telephony applications is described in U.S. Pat. No. 6,922,411, which entire disclosure is incorporated herein by reference. Essentially, a networked telephony system allows users to deploy on the Internet computer telephony applications associated with designated telephone numbers. The telephony application is easily created by a user in XML (Extended Markup Language) with predefined telephony XML tags (e.g. VoiceXML) and easily deployed on a website. The telephony XML tags include those for call control and media manipulation. A call to anyone of these designated telephone numbers may originate from anyone of the networked telephone system such as the PSTN (Public Switched Telephone System), a wireless network, or the Internet. The call is received by an application gateway center (AGC) installed on the Internet. Analogous to a web browser, the AGC provides facility for retrieving the associated XML application from its website and processing the call accordingly.","This type of telephony platform allows very powerful yet simple telephony applications to be built and deployed on the Internet. The following are some examples of the telephony applications deployed on this platform. A \u201cFollow me, find me\u201d application sequentially calls a series of telephone numbers as specified by a user until one of the numbers answers and then connects the call. Otherwise, it does something else such as takes a message or sends e-mail or sends the call to a call center, etc. In another example, a Telephonic Polling application looks up from a database the telephone numbers of a population to be polled. It then calls the numbers in parallel, limited only by the maximum number of concurrent sessions supported, and plays a series of interactive voice prompts\/messages in response to the called party's responses and records the result in a database, etc. In another example, a Help Desk application plays a series of interactive voice prompts\/messages in response to the called party's responses and possibly connects the call to a live agent as one option, etc. In yet another example, a Stock or Bank Transactions application plays a series of interactive voice prompts\/messages in response to the called party's responses and conducts appropriate transactions with a backend database or web application, etc.","The latter examples are generally referred to as self-help applications. In the voice context, a self-help application is referred to as IVR. IVR refers to Interactive Voice Response and is a technology that automates interaction with telephone callers. Enterprises are increasingly turning to IVR to reduce the cost of common sales, service, collections, inquiry and support calls to and from their company.","IVR solutions enable users using voice as a medium or other form of inputs through a voice channel to retrieve information including bank balances, flight schedules, product details, order status, movie show times, and more from any telephone. Additionally, IVR solutions are increasingly used to place outbound calls to deliver or gather information for appointments, past due bills, and other time critical events and activities.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1","b":["10","200","100","100","210","200","220","210","310","200","310","230","240"]},"The communication application platform provides a third-party call control between any numbers of clients , , . The application script  defines the communication application  and directs how a call is to be handled. For example, when a user makes a call through a voice client such as a handset  or a VoIP phone  to the IVR, the voice application script  associated with the call number is retrieved. The browser  executes or renders the retrieved voice application script to allow the user to interact with the voice application .","Communication of Multimedia information among endpoints and a third-party call controller generally require call control and media control.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 2A","FIG. 2C"],"b":["22","200"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2A","b":["200","22","22","200"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2B","b":["200","22","1","200","22","2","200"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2C"},"For call control, a number of protocol standards have been put forward for interoperability. For example, the H.323 standard is a protocol standard recommended by the ITU (International Telecommunication Union) for signaling and call control of IP telephony.","An increasingly popular alternative to the H.323 standard for call control is SIP (\u201cSession Initiation Protocol\u201d.) SIP is an IETF (Internet Engineering Task Force) protocol for signaling and call control of IP telephony and multimedia communication between two or more endpoints. It is text-based and more web-centric and is a comparatively simpler and more light-weight alternative to H.323.","In the traditional web paradigm, a user agent in the form of a client machine running a web browser makes a request to a web server. The web server returns a response to the request. The communication is taking place under the HTTP (Hypertext Transfer Protocol). Specifically, the web browser requests a web resource such as a web page as specified by an URL from a web server. Typically the web server responds by returning the requested web page. The web page may contain text content with embedded instructions for the browser to render the text in the web page. In more sophisticated applications, a web page is often generated dynamically by employing server-side programs and may incorporate content as queried results from backend databases. Thus, some of the content are not hard-coded on the web page but are generated and rendered dynamically by the web server. The server-side programs may also serve to post data from the client to the backend databases.","Traditionally, these server-side programs are implemented as scripts conforming to the CGI protocol (Common Gateway Interface). The CGIs are code modules that perform the task on the web server to generate and render dynamic content or perform other backend functions.","However, CGI has several disadvantages. First, it is not very portable, as different web serving machines with different processors and operating systems may require their own versions of scripts. Secondly, it does not use the server resource efficiently. The different GCIs are run in a different process context than the server which starts them. There is the overhead of creating a new process for each request and the different processes do not have access to a common set of server resources.","The JAVA\u2122 servlet model addresses the disadvantages of the CGI. Servlets are modules written in the highly portable JAVA\u2122 programming language as they run in the same virtual JAVA machine, which is independent of the processor hardware or the operating system. In the objected-oriented Java programming language, the HTTP requests are parsed and made to interact with software objects modeled on the real objects that operate with the application. Similarly, the responses are made to conform with the HTTP protocol before being sent to the requester. Servlets runs in a multi-tread environment in the Java server and allows each request to be handled by a separate tread. Also one instance of the Java scripts need be loaded into the processor memory as compared to CGI where contemporaneous requests require multiple copies of the CGI scripts to be loaded. The original servlets conform to the HTTP protocol and may be regarded as \u201cHTTP servlets\u201d. The servlet model provides a set of API (Application Programming Interface) that is implemented by loading a corresponding servlet container in the application server. The servlet model enables developers to rapidly develop applications and to port them to different servers and be able to run them efficiently. It is widely used in web applications and is based on open standards.","The API is an abstraction that describes an interface for the interaction with a set of functions used by the components. It is a list containing the description of a set of functions that is included in a library and that address a specific problem. In the current context of Java object oriented languages, it comprises a description of a set of Java class definitions and extension class definitions with a set of behaviors associated with the classes. The API can be conceived as the totality of all the methods publicly exposed by the classes (the class interface). This means that the API prescribes the methods by which one handles the objects derived from the class definitions.","For call control, a SIP servlet has been developed and established as a standard to handle requests under the SIP protocol, just as the HTTP servlet handles requests under the HTTP protocol.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 3A","FIG. 1"],"b":["320","340","350"]},"The SIP Servlet Specification (JSR ) is a container based approach (modeled on the HTTP servlet paradigm) to developing communication applications utilizing the Session Initiation Protocol (SIP) protocol. A SIP servlet is a Java programming language server-side component that perform SIP signaling. SIP servlets are managed by a SIP servlet container, which typically is part of a SIP-enabled application server. SIP servlets interact with clients by responding to incoming SIP requests and returning corresponding SIP responses. SIP servlets are built of the generic servlet API provided by the Java Servlet Specification which is established as an open standard by the Java Community Process (SM) Program through the Java Specification Request (JSR) process.","Using a SIP servlet (JSR ) for call control is to leverage the benefits of the servlet model. It also provides a Java API independent of underlying media server control protocols.","U.S. Pat. No. 7,865,607 B2 discloses a servlet model for media rich applications. The SIP servlet for call control is augmented by a media control API. However, the media control API is custom and does not conform to the servlet model.","For media control, media control objects are being supported by a standards-based media control API, JSR  as shown in . Thus, media server specifics are handled by a JSR  Driver, allowing an application developer to program using the JSR  API, independent of the media server vendor. In this way, the applications can work with different media servers that are deployed by different operators and service providers.","Thus, an application developer can develop components of a communication application in terms of low level call control objects and API in the form of a SIP Servlet based on the open standards JSR  and in terms of low level media control objects and API in the form of the open standards JSR .","One disadvantage of working with low level and generic objects and their APIs is that the developer has to repeatedly deal with low level details even if many of these details are irrelevant when the object being modeled is in certain states.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 3B","FIG. 3A"]},"It is desirable for an application to be developed without having to deal with details irrelevant to the object model being dealt with. Furthermore, it is desirable to have a systematic and uniform way of working with call control and media control events, without having to deal with their low level details in the application so as to have succinct and efficient codes.","According to a general aspect of the invention, a communication system includes a server hosting a communication application in a Java virtual machine. The communication application is programmed with a unified communication API. The unified communication API is in a unified communication framework layer on top of a standards-based call control API and a standards-based media control API. The unified communication API provides access to unified class objects for an object model of the application. The unified class objects are constructed from primitive class objects from the individual call control API and the media control API.","According to one aspect of the invention, the unified class objects include an event source object which handles the normally separate events of the call control API and media control API in a unified manner. In particular, the event source object only dispatches events to the application based on the type of event and the state of the application, consistent with the object model of the application.","In this way, the application can expediently be built from Java class objects tailored to the object model of the application where the class objects are based on the primitive Java class objects of the standards-based API. At the same time, the programming of the application is simplified as it can focus on the business logic rather than to deal with the low-level details of the primitive class objects.","Additional objects, features and advantages of the present invention will be understood from the following description of its preferred embodiments, which description should be taken in conjunction with the accompanying drawings.","According to a general aspect of the invention, a communication system includes a server hosting a communication application. The communication application is programmed with a unified communication API. The unified communication API being in a unified communication framework layer on top of a standards-based call control API and a standards-based media control API. The unified communication API provides access to unified objects constructed from primitive objects from the individual call control API and the media control API.","A software framework, in computer programming, is an abstraction in which common code providing generic functionality can be selectively specialized by user code providing specific functionality. Frameworks are a special case of software libraries in that they are reusable abstractions of code wrapped in a well-defined API, yet they contain some key distinguishing features that separate them from normal libraries. In this case, the unified communication API represents a further abstraction from the primitive call control and media control APIs that more closely models the real situation being addressed by the application.","The abstraction to a higher-level object models facilitates software development by allowing designers and programmers to devote their time to meeting software requirements rather than dealing with the more standard low-level details of providing a working system, thereby reducing overall development time.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 4","b":["420","400","420","422","422","350","360"]},{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 5","FIG. 1","FIGS. 2A-2C"],"b":["289","350","309","360","289","309","420","289","309","440","442","446","430","320","332","450"]},"The advantage of building applications with a unified communication framework is that the application is built with high-level objects more specific to the application in question. Call control and media control events are tied to the specific behaviors of these high-level objects resulting in a more systematic and uniform way of working them, without having the application to deal with low-level details. In this way, low-level details irrelevant to the object model are shielded from the application developer and the application codes are more concise and efficient.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 6","b":["430","450","430","300","450","430","450","430","430"]},"Thus the observer object , will receive events coming from the EventSource  which are only appropriate in certain application state. For example, the application can only begin to consider an invite to become part of a call after the application has been initialized (i.e., in the state \u201cInitial\u201d.) When that event is received, the application will then invoke the MyInviteHandler to process the invite. Similarly, the event (i.e., BYE) to terminate a call with its associated teardown and cleanup operations will only be appropriate after the call has actually been established (i.e., in the state \u201cConnected\u201d.) When that event is received, the application will then invoke the MyByeHandler to process the BYE. Similarly, the OutputCompleteEvent event to play media is appropriate in the context when the application is in the \u201cconnected\u201d state. When that event is received, the application will then invoke the MyPlayerHandler to process the media.","Unlike the prior example shown in , where the application has to listen to and process every events generated by the JSR  API and the JSR  API, these events are first handled by the EventSource object  in the unified communication framework. The EventSource will only send selective, programmed events to the application. For example, if the event is BYE and the state is \u201cconnected\u201d, it will send the event to the application. On the other hand, if the state is \u201cnot connected\u201d, it will not send the event to the application. By dealing with high-level objects abstracted from low-level objects of JSR  and JSR , programming at the application level is more efficient and relevant to the problems at hand.","The call control model of the unified communication framework is designed for calls and media that are controlled by a 3rd party server application, such as PBX, IVR, Conferencing, and Call Center applications. It assumes all the calls have at least their signals controlled by the communication application. In most cases, media should preferably be controlled by the communication application as well.","TABLE 1 lists example classes\/objects related to call control of the unified communication framework in the preferred embodiment.",{"@attributes":{"id":"p-0065","num":"0064"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["CLASS","DESCRIPTION"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Application","Defines lifecycle callbacks and inbound"]},{"entry":[{},"call handling for a unified communication"]},{"entry":[{},"application."]},{"entry":["Observer","A weak-typed listener that can listen on"]},{"entry":[{},"both SignalEvent and MediaEvent. The"]},{"entry":[{},"unified framework supports dispatching"]},{"entry":[{},"event to Observers based on event type"]},{"entry":[{},"and state."]},{"entry":["Call","A call is a leg of communication from an"]},{"entry":[{},"Endpoint to Application. The leg must have"]},{"entry":[{},"signal controlled by the Application,"]},{"entry":[{},"optionally media as well."]},{"entry":["InviteEvent","Invitation is an incoming call alert. This"]},{"entry":[{},"is a key event to start the call control."]},{"entry":["Participant","This represents an abstract party involved"]},{"entry":[{},"in a conversation"]},{"entry":["MultiStreamParticipant","A type of Participant which can have"]},{"entry":[{},"multiple media streams"]},{"entry":["Mixer","This is used to mix multiple.Participants"]},{"entry":[{},"together. A mixer is also a Participant,"]},{"entry":[{},"so other Participants can be"]},{"entry":[{},"joined\/unjoined to a Mixer. The media"]},{"entry":[{},"streams of joined participants are mixed"]},{"entry":[{},"(or add, or sum) into a single stream, then"]},{"entry":[{},"the result stream is sent out to every"]},{"entry":[{},"joined Participant."]},{"entry":["Conference","Represents a real conference that other"]},{"entry":[{},"Participant can join\/unjoin. Every"]},{"entry":[{},"Participant that joined a conference"]},{"entry":[{},"receives media from all other participants"]},{"entry":[{},"in the same conference."]},{"entry":["Join","A Joint represents the result of the"]},{"entry":[{},"asynchronous join operation on Participant."]},{"entry":[{},"Extends the Future interface, so can be"]},{"entry":[{},"used to check if the join operation is"]},{"entry":[{},"complete, to wait for its completion, and"]},{"entry":[{},"to retrieve the result of the operation."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 7"},"Borrowing the concept from CCXML and JSR , the unified framework uses various join method to connect different call legs. A Participant can join with other Participants. Individual streams in MultiStreamParticipant can be joined by using JSR  Joinable construct. The unified framework also supports multiple joins with automatic join degradation.","Typically an inbound call results in an InviteEvent sent to the Application. The application can decide to accept, reject, or redirect the InviteEvent. Once the InviteEvent is accepted, a Call (leg) is formed. Observer can be added on the Call to continue monitor and control the leg. The application can further join the Call with the media server, or join the Call to another Endpoint, or join the Call to another Participant.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 9"},"The media control model of the unified communication framework assumes each call has media capabilities as long as its media streams are connected to a JSR  compliant media server. Once a call is in the INPROGRESS or CONNECTED state, getMediaService( ) can be used to access the media services. In case the media streams are connected in a DIRECT mode, (see for example ) the unified communication framework will try to reinvite the media streams back to the media server into a BRIDGE mode (see for example .)","TABLE 2 lists example classes\/objects related to media control of the unified communication framework in the preferred embodiment. MediaService defines all the media functions available to a call.",{"@attributes":{"id":"p-0073","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["INTERFACE","DESCRIPTION"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["MediaService.input(. . .)","provides control on both DTMF and speech"]},{"entry":[{},"recognition"]},{"entry":["MediaService.output(. . .)","provides control on both TTS and media"]},{"entry":[{},"playback"]},{"entry":["MediaService.prompt(. . .)","allows the application to control both"]},{"entry":[{},"outputs and inputs at the same time"]},{"entry":["MediaService#record(. . .)","allows the application to record both"]},{"entry":[{},"inputs and outputs"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"To use the media function on the Call, simply get the MediaService from the Call. If the media is not going through the server, the unified communication framework will try to re-invite the media back to the server if possible.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 10"},"The unified framework programming model is an event-driven model. It has a coarse-grained event types to make the application focus on the business logic rather than the lower level protocol. It combines with a state-based event dispatching mechanism and one-thread-per-event source (in most cases) to make the application much easier to write.","Table 3 lists example classes\/objects related to events of the unified communication framework in the preferred embodiment.",{"@attributes":{"id":"p-0078","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["CLASS","DESCRIPTION"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Eventsource","An EventSource is an object that can generate Events in"]},{"entry":[{},"Application. Applications can set application defined"]},{"entry":[{},"state on EventSource by calling"]},{"entry":[{},"#setApplicationState(String) setApplicationState(String)"]},{"entry":[{},"for single state or #setApplicationState(String,String)"]},{"entry":[{},"setApplicationState(String) for multiple concurrent"]},{"entry":[{},"states."]},{"entry":["SignalEvent","Represents the events from underlying signaling protocol,"]},{"entry":[{},"such as SIP BYE, REFER, INVITE, etc."]},{"entry":["MediaEvent","represents the events from progress and status of the"]},{"entry":[{},"execution of media functions."]},{"entry":["Observer","a weak-typed listener that can listen on both SignalEvent"]},{"entry":[{},"and MediaEvent. The unified framework supports"]},{"entry":[{},"dispatching event to Observers based on event type and"]},{"entry":[{},"state."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 11"},"Call controls can be performed on SignalEvent, such as accept. Almost all call control functions are modeled as synchronous methods for simplicity, given the fact that call control functions are finished within relative short time (e.g. max SIP timeout is about 32 seconds).","The media control functions, on the other hand, are modeled as asynchronous methods because media functions can be arbitrarily long. The result of any media function will be returned as MediaEvents. If an application wants to wait for a media function to complete before doing other actions. This can be easily achieved by Future.get( ) since a media function returns a Future to allow call to query its status.","Each Call is an Event Source that can generate both SignalEvent and MediaEvent. To get notified, the application has to add an Observer or an EventListener to the Call.","Event programming usually is associated with state management. The unified communication framework supports application-defined state based event dispatching. Application can setApplicationState on each EventSource. Concurrent states are also supported by call setApplicationState. The unified communication framework will dispatch the event to the appropriate Observer method based on its State annotation.","Each EventSource mostly likely has system state driven by underlying protocols. But these should be separated from application states. Application states are simply symbolic names, entirely managed by application.","The example below shows how MyObserverClass handles different InputCompleteEvent at different states. greetingHandler is called when an InputCompleteEvent is fired by the EventSource and that EventSource's application state is \u201cgreeting\u201d. Similarly, supportHandler and salesHandler are called when InputCompleteEvent is fired by the EventSource and that EventSource's application state is \u201csupport\u201d and \u201csales\u201d respectively.",{"@attributes":{"id":"p-0086","num":"0085"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003","public class MyObserverClass implements Observer {"]},{"entry":[{},"\u2003\u2003@State(\u201cgreeting\u201d)"]},{"entry":[{},"\u2003\u2003public void greetingHandler(InputCompleteEvent input) {"]},{"entry":[{},"\u2003\u2003\u2003String value = input.getConcept( );"]},{"entry":[{},"\u2003\u2003\u2003if (value.equals(\u201csupport\u201d)) {"]},{"entry":[{},"\u2003\u2003\u2003\u2003input.getEventSource( ).setApplicationState(\u201csupport\u201d);"]},{"entry":[{},"\u2003\u2003\u2003\u2003\/\/ play support menu and wait for input"]},{"entry":[{},"\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003else if (value.equals(\u201csales\u201d)) {"]},{"entry":[{},"\u2003\u2003\u2003\u2003input.getEventSource( ).setApplicationState(\u201csales\u201d);"]},{"entry":[{},"\u2003\u2003\u2003\u2003\/\/ play support menu"]},{"entry":[{},"\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003else {"]},{"entry":[{},"\u2003\u2003\u2003\u2003\/\/ replay greeting"]},{"entry":[{},"\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003\u2003@State(\u201csales\u201d)"]},{"entry":[{},"\u2003\u2003public void salesHandler(InputCompleteEvent input) {"]},{"entry":[{},"\u2003\u2003\u2003\/\/ handle sales input"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003\u2003@State(\u201csupport\u201d)"]},{"entry":[{},"\u2003\u2003public void supportHandler(InputCompleteEvent input) {"]},{"entry":[{},"\u2003\u2003\u2003\/\/ handle support input"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 12"},"While the unified communication framework provides high-level, unified objects built from lower-level object of JSR \/, some of the unified objects can be mapped into JSR  or  objects, which allows the application to access the JSR \/ API directly. For example, Call is equivalent of SipSession in JSR  and NetworkConnection in JSR . MediaService is equivalent of MediaGroup in JSR . Mixer is equivalent of Mixer in JSR . In order to prevent lower level access from messing up the states in the unified framework, the lower level objects are to be accessed via preferably proxy objects.","The unified communication framework Package is a simply Java ARchive (JAR). A container supports loading the unified package should scan the package to find and load the implementation class of the Application interface. If multiple implementation classes exist, the implementation class can be designated by JAR's Manifest with an Application-Class entry. Otherwise, a random implementation class is loaded. If a JSR- container doesn't support loading the unified package directly, the unified communication framework should be packaged as standard SAR.","The following is an example of how compact the codes can be for an IVR application in the unified communication framework. The application developer needs not be concerned with low level controls and protocols and can simply focus on the business logic.",{"@attributes":{"id":"p-0091","num":"0090"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"package com.voxeo.ufw.sample;"},{"entry":"import com.voxeo.ufw.Application;"},{"entry":"import com.voxeo.ufw.ApplicationContext;"},{"entry":"import com.voxeo.ufw.Call;"},{"entry":"import com.voxeo.ufw.MediaService;"},{"entry":"import com.voxeo.ufw.State;"},{"entry":"import com.voxeo.ufw.event.InputCompleteEvent;"},{"entry":"import com.voxeo.ufw.event.InviteEvent;"},{"entry":"public class IVR implements Application {"},{"entry":"\u2003@Override"},{"entry":"\u2003public void init(final ApplicationContext ctx) {"},{"entry":"\u2003}"},{"entry":"\u2003@Override"},{"entry":"\u2003public void destroy( ) {"},{"entry":"\u2003}"},{"entry":"\u2003@State"},{"entry":"\u2003public void handleInvite(final InviteEvent inv) throws Exception {"},{"entry":"\u2003\u2003final Call call = inv.acceptCall(this);"},{"entry":"\u2003\u2003call.join( ).get( );"},{"entry":"\u2003\u2003call.setApplicationState(\u201cmenu-level-1\u201d);"},{"entry":"\u2003\u2003final MediaService mg = call.getMediaService(false);"},{"entry":"\u2003\u2003mg.prompt(\u201c1 for sales, 2 for support\u201d, \u201c1,2\u201d, 0);"},{"entry":"\u2003}"},{"entry":"\u2003@State(\u201cmenu-level-1\u201d)"},{"entry":"\u2003public void menu1(final InputCompleteEvent evt) {"},{"entry":"\u2003\u2003switch (evt.getCause( )) {"},{"entry":"\u2003\u2003\u2003case MATCH:"},{"entry":"\u2003\u2003\u2003\u2003final Call call = (Call) evt.getSource( );"},{"entry":"\u2003\u2003\u2003\u2003if (evt.getConcept( ).equals(\u201c1\u201d)) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003call.setApplicationState(\u201cmenu-level-2-1\u201d);"},{"entry":"\u2003\u2003\u2003\u2003\u2003call.getMediaService(false).prompt(\u201c1 for sipmethod, 2 for prophecy\u201d, \u201c1,2\u201d, 0);"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003else {"},{"entry":"\u2003\u2003\u2003\u2003\u2003call.setApplicationState(\u201cmenu-level-2-2\u201d);"},{"entry":"\u2003\u2003\u2003\u2003\u2003call.getMediaService(false).prompt(\u201c1 for sipmethod, 2 for prophecy\u201d, \u201c1,2\u201d, 0);"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003break;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"\u2003@State(\u201cmenu-level-2-1\u201d)"},{"entry":"\u2003public void menu21(final InputCompleteEvent evt) {"},{"entry":"\u2003\u2003switch (evt.getCause( )) {"},{"entry":"\u2003\u2003\u2003case MATCH:"},{"entry":"\u2003\u2003\u2003\u2003final Call call = (Call) evt.getSource( );"},{"entry":"\u2003\u2003\u2003\u2003if (evt.getConcept( ).equals(\u201c1\u201d)) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003call. setApplicationState(\u201cmenu-simpmethod-sales\u201d);"},{"entry":"\u2003\u2003\u2003\u2003\u2003call.getMediaService(false).prompt(\u201cthank you for calling sipmethod sales\u201d, null, 0);"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003else {"},{"entry":"\u2003\u2003\u2003\u2003\u2003call. setApplicationState(\u201cmenu-prophecy-sales\u201d);"},{"entry":"\u2003\u2003\u2003\u2003\u2003call.getMediaService(false).prompt(\u201cthank you for calling prophecy sales\u201d, null, 0);"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003break;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"\u2003@State(\u201cmenu-level-2-2\u201d)"},{"entry":"\u2003public void menu22(final InputCompleteEvent evt) {"},{"entry":"\u2003\u2003switch (evt.getCause( )) {"},{"entry":"\u2003\u2003\u2003case MATCH:"},{"entry":"\u2003\u2003\u2003\u2003final Call call = (Call) evt.getSource( );"},{"entry":"\u2003\u2003\u2003\u2003if (evt.getConcept( ).equals(\u201c1\u201d)) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003call.setApplicationState(\u201cmenu-simpmethod-support\u201d);"},{"entry":"\u2003\u2003\u2003\u2003\u2003call.getMediaService(false).prompt(\u201cthank you for calling sipmethod support\u201d, null, 0);"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003else {"},{"entry":"\u2003\u2003\u2003\u2003\u2003call. setApplicationState(\u201cmenu-prophecy-support\u201d);"},{"entry":"\u2003\u2003\u2003\u2003\u2003call.getMediaService(false).prompt(\u201cthank you for calling prophecy support\u201d, null, 0);"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003break;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"While the embodiments of this invention that have been described are the preferred implementations, those skilled in the art will understand that variations thereof may also be possible."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 2C"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 3A","FIG. 1"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 3B","FIG. 3A"]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 5","FIG. 1","FIGS. 2A-2C"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
