---
title: Automatic bug reporting tool
abstract: An apparatus and a method for detecting and reporting malfunctions in computer programs is described. A malfunction detector detects at least one type of a software malfunction as defined in a configurable malfunction library. A data collector collects data of the software malfunction. A crash reporter reports the crash report in a manner specified in a configurable reporting library corresponding to the type of software malfunction to one or more remote computers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08694831&OS=08694831&RS=08694831
owner: Red Hat, Inc.
number: 08694831
owner_city: Raleigh
owner_country: US
publication_date: 20090529
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["Embodiments of the present invention relate to computing systems, and more particularly, to error reporting in computer programs.","Software malfunction may still occur despite a software developer's efforts to eliminate errors from the software before it is placed on the market. To assist software developers in better identifying potential errors, commercially available software have been developed to collect information upon the occurrence of a program error. One example of such software creates a snapshot of a portion of the computer's memory at the time of a crash. The crash is an event that is usually prompted by an error. It prevents the further normal operation of the software and, depending upon the severity of the error, of the computer system itself. Users may be offered an opportunity to transmit the crash data to provide the manufacturer an opportunity to diagnose the cause of the error. The crash data can contain information to assist in identifying program errors.","However, such software is limited in how a crash is detected. The crash data is also limited to be sent to one particular destination\u2014the software developer. Specifying how and what kind of information to gather, and where to send it to can be a daunting task for a non-power user or a user without any knowledge of debugging techniques.","Described herein is an apparatus and a method for detecting and reporting malfunctions in computer programs. In one embodiment, a malfunction detector detects at least one type of a software malfunction as defined in a configurable malfunction library. A data collector collects data of the software malfunction. A crash reporter reports the crash report in a manner specified in a configurable reporting library corresponding to the type of software malfunction to one or more remote computers.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},"An ABRT instance  includes an addon module , a plugin module , and a core component module . Addon module  includes at least one addon component  that specifies how to detect a software malfunction. In one embodiment, addon component  includes one of an analyzer component , a hook component , or an action component , and a corresponding addon setting component . Addon component  operates to detect at least one type of a software malfunction as defined in a configurable malfunction library. Examples of addon component  include a C\/C++ application crashes catcher, a Linux kernel crashes catcher, a Python applications crashes catcher, and a Run Application \u201cAction\u201d.","Plugin module  includes at least plugin component . In one embodiment, plugin component  is configured to report a crash report in a manner specified in a configurable reporting library corresponding to the type of software malfunction to at least one remote computer. In another embodiment, plugin component  includes a storage for just keeping the information. In one embodiment, plugin component  includes one of a reporter component , or a database component , and a corresponding setting component . For example, database  includes a SQLite database storage. Examples of reporter component  include a report to the Bugzilla using XML-RPC, a report to kerneloops.org using HTTP POST, a report to a tile, a report by email, a report to an Operating System's system log, and a report by the FTP.","Core component module  includes at least one core component . In one embodiment, core component  includes a core function  and a core setting . Examples of core function  include GUI, Applet, TUI, and Daemon.","It should be noted that  illustrates one embodiment. The components illustrated in Addon component , Plugin component , and Core component  are optional. Setting files , , and  are also optional and enable sophisticated configurations of ABRT. Addon module  and Plugin module  are loaded on ABRT's start while Core module  is compiled-in feature.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 2","FIG. 1","FIG. 2"],"b":["102","204"]},"Examples of crash handlers includes but are not limited to:","Linux kernel crash;","C\/C++ application crash;","Python application crash; and","any other kind of interceptable crash.","In another embodiment, application\/os crash handlers  also include:","application debug bits installation and extracting debug information;","guiding user in order to solve the occurred problem or provide additional input;","getting \u2018snapshot\u2019 of the system configuration and state; and","any other task.","The crash report is generated and submitted to crashes information recipients . For example, crashes information recipients  include:","another ABRT instance;","saving the crash report to a database;","sending the report to a bug tracking software (e.g. Bugzilla server);","sending as an email to a predefined address;","sending as an SMS via a telecommunication network;","saving as a file to any kind of storage hardware;","sending crash reports over network using different protocols; and","sending to any other recipients.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 3","b":["302","304","314","302","308","310","312","302","308","310","312","308","310","316","318","308","310","312"]},"In one embodiment, storage can be centralized or decentralized. When the information about the software application crash\/malfunction is received by storage , , it is classified (e.g. whether the problem occurred before, occurrence frequency, etc. . . . ) by ABRT server side logic. The crash data is kept there for further analysis by a human or a machine.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 3"},"In one embodiment, ABRT can be configured to send the crash report to any specified destination not limited to a server associated with the software developer of application . For example, the crash report may be sent to a third party server  or any other server.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 4","b":"402"},"what and how to report the detected software malfunction is defined in a manner specified in a configurable reporting library corresponding to the type of software malfunction to at least one remote computer. The configurable reporting library can include at least one plugin module that specifies where and how to report the crash report.","In one embodiment, the plugin module includes a reporter component, a database component, and a plugin setting component.","At , data of the software malfunction is collected, analyzed and classified. a crash report is generated with at least one core component at the client. In one embodiment, the core component includes a core function component and a core component setting. The core function component can include at least one of a Graphical User Interface, an Applet, and a Daemon.","At , a crash report is generated and sent as specified in the plugin module.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 5","b":"500"},"The exemplary computer system  includes a processing device , a main memory  (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM), a static memory  (e.g., flash memory, static random access memory (SRAM), etc.), and a data storage device , which communicate with each other via a bus .","Processing device  represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processing device may be complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processing device  may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. The processing device  is configured to execute modules  (previously described with respect to ) for performing the operations and steps discussed herein with. In one embodiment, the modules may be include hardware or software or a combination of both. In another embodiment, processing device  includes a pure function identifier module .","The computer system  may further include a network interface device . The computer system  also may include a video display unit  (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)), an alphanumeric input device  (e.g., a keyboard), a cursor control device  (e.g., a mouse), and a signal generation device  (e.g., a speaker).","The data storage device  may include a computer-accessible storage medium  on which is stored one or more sets of instructions (e.g., table generator software ) embodying any one or more of the methodologies or functions described herein. The software  may also reside, completely or at least partially, within the main memory  and\/or within the processing device  during execution thereof by the computer system , the main memory  and the processing device  also constituting computer-accessible storage media. The software  may further be transmitted or received over a network  via the network interface device .","The computer-accessible storage medium  may also be used to store a malfunction detector\/reporter  (also referred to as ABRT module) as presently described. The malfunction detector\/reporter  may also be stored in other sections of computer system , such as static memory .","While the computer-accessible storage medium  is shown in an exemplary embodiment to be a single medium, the term \u201ccomputer-accessible storage medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The term \u201ccomputer-accessible storage medium\u201d shall also be taken to include any medium that is capable of storing, encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term \u201ccomputer-accessible storage medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, optical and magnetic media.","In the above description, numerous details are set forth. It will be apparent, however, to one skilled in the art, that the present invention may be practiced without these specific details. In some instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention.","Some portions of the detailed descriptions above are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201cprocessing\u201d or \u201ccomputing\u201d or \u201ccalculating\u201d or \u201cdetermining\u201d or \u201cdisplaying\u201d or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","The present invention also relates to apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus.","The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.","It is to be understood that the above description is intended to be illustrative, and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should, therefore, be determined with reference to the appended claims, along with the full scope of equivalents to which such claims are entitled."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which:",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
