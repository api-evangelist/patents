---
title: Streamlined LASAR-to-L200 post-processing for CASS
abstract: A technique of generation of a job for a digital testing unit for a test station from a circuit simulation unit includes completing fault simulation on electronic circuitry, then executing a first program without a fault dictionary, generating a pin map of the electronic circuitry and appending any pin groups, generating test vectors using the pin groups by the first program, generating additional pin groups to accommodate any orphan pins, converting the pin maps and pattern files to pin maps and pattern files, executing the first program to generate the fault dictionary, inputting a minimum scope level of analysis of the circuitry, generating the fault dictionary in fault dictionary data files according to the minimum scope level, generating a fault retriever file from the first program; and transporting the fault dictionary data files, test vectors, new pin maps, and fault retriever file to a second program for run-time fault analysis on the electronic circuitry testing unit. Wire path files and test vectors are generated. The scoring of a mismatch between predicted test responses and actual tester responses can be done by assigning a partial credit for primary output patterns being detected.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06961887&OS=06961887&RS=06961887
owner: The United States of America as represented by the Secretary of the Navy
number: 06961887
owner_city: Washington
owner_country: US
publication_date: 20011009
---

{"@attributes":{"id":"description"},"GOVINT":[{},{}],"heading":["STATEMENT OF GOVERNMENT INTEREST","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The invention described herein may be manufactured and used by or for the Government of the United States of America for governmental purposes without payment of any royalties thereon or therefor.","1. Field of the Invention","The present invention relates to a technique for the interfacing of a circuit simulation unit and a circuit testing unit, and more particularly, to streamlining circuit simulation output into data for an automated circuit testing program of a circuit testing device.","2. Description of the Background Art","Currently there is a use of automatic test stations (ie., CASS for consolidated automatic support system test stations) to test electronic circuitry found in many different devices such as avionic devices. The test station hosts a digital test instrument such as the L200 by TERADYNE to handle all of the digital device testing. Digital test developers must use a high-level program (ie., LASAR) to create generic test vectors for very complex digital circuits. LASAR is a digital circuit simulator (program) with fault simulation capability. A test engineer will develop models of a digital circuit using LASAR, provide it with stimulus which he wants to inject into the board, then debug and analyze the circuit using LASAR's screen output capability. Once the test stimuli are performing correctly, the developer will use LASAR to simulate real world fault conditions. LASAR will then create \u201csnapshots\u201d of these fault conditions which can be compared to fault-free output following a real world test. These snap-shots are to be collected into a file, much like a database, called a fault dictionary. The fault dictionary must be tailored for the particular tester that will be used to test the digital board.","The CASS test station is equipped with an instrument called the DTU (Digital Test Unit). It is the instrument which tests digital circuitry. While the CASS, in general, uses ATLAS, the DTU has its own unique language called L200. Digital test code must be written in the L200 language to be used at run-time by the CASS test station. Some method is needed to convert LASAR output to L200 test code.","The standard method to generate a complete L200 test job for CASS using LASAR output is cumbersome, unwieldy, and is a path fraught with error. Test vectors generated are anything but readable, even on jobs with a small number of patterns, because only pin state changes are shown. The method does not work very well with hierarchical model design such as one would employ to test a box, an Interface Device (ID), for example. Often the test engineer needs to build two or more nets and combine them into one large model. LASAR permits this feature but post-processing into L200 is difficult if not prohibitive. The L200 post-processor does not allow names of chips to exceed four characters which precludes the use of scoping type fault callouts required by hierarchical modeling.","Furthermore, the standard 9-9-1 mismatch scoring algorithm is simply not adequate in some situations. The 9-9-1 weighting factor method of mismatch scoring sometimes punishes the real fault signature too severely by overlooking valid matches. A typical 9-9-1 mismatch scoring fault analyzer had much difficulty producing accurate fault callouts for the signatures represented in the fault dictionary. Some of the faults were totally erroneous and directed the technician to replace many good components while never touching the actual faulty one. Apparently, the correct fault signature was scored for mismatch too punitively. Analysis revealed that the correct POPATs (primary output patterns) found were not given adequate credit. Furthermore, the 9-9-1 method has great difficulty handling anomalies such as multiple faults or poor initialization.","It is therefore an object to increase the efficiency of converting the output of circuit simulation data into data for automated circuit testing program of a circuit testing device.","It is another object to have programs that generate readable test vectors.","It is still another object to have programs that accommodate hierarchical model structuring.","It is still yet another object to enhance the mismatch scoring algorithm.","To achieve the objectives of the present invention, there is provided a technique of generation of a job for digital testing unit for a test station from the output of a program for circuit simulation. The present invention includes completing fault simulation on electronic circuitry, then executing a first program without a fault dictionary, generating a pin map of the electronic circuitry and appending any pin groups, generating test vectors using the pin groups by the first program, generating additional pin groups to accommodate any orphan pins, converting the pin maps and pattern files to pin maps and pattern files, executing the first program to generate the fault dictionary, inputting a minimum scope level of analysis of the circuitry, generating the fault dictionary in fault dictionary data files according to the minimum scope level, generating a fault retriever file from the first program; and transporting the fault dictionary data files, test vectors, new pin maps, and fault retriever file to a second program for run-time fault analysis on the electronic circuitry testing unit.","The present invention may also generate wire path files for analysis.","The present invention may also include the scoring of a mismatch between predicted test responses and actual tester responses by assigning a partial credit for primary output patterns being detected.","A new system was developed in the present invention to generate the L200 job for CASS () from the LASAR () output (). This new method greatly reduces the unwieldiness of the process, produces very readable test vectors, encourages and even enhances hierarchical model structuring, and offers a better mismatch scoring algorithm not based on the 9-9-1 weighting rule. This system is implemented in a duet software package containing the post-processor \u2018LSRPOST L\u2019 and the run-time fault analyzer \u2018ATGFLTL\u2019.","First, there is a completion of a successful fault simulation in a LASAR job (S). All LASAR simulation is completed on a computer workstation such as a DEC ALPHA workstation. The test vectors (patterns), input and output vectors are in LASAR format. Concerning the fault circuit simulation, the fault diagnostics database (faultdictionary) is also in LASAR format.","In the next set of steps, a test job is built on the same workstation where the simulation is completed. Referring to , the LSRPOSTL program is used to create L200 style pattern files. In LASAR, after all Good Machine Response (GMR) simulation results are satisfactory (S), simply post-process using LASAR's \u2018LSRTAP\u2019 without faultdictionary (S). The LSRTAP generates .TAP files (S). The TAP files are text file database of 1's and 0's input stream representing the states of each pin. The .TAP files are not easily readable by a user. Now the developer creates the L200 $PINMAP file and appends any pin groups that he or she wishes to see (S). The $PINMAP file has the pin map of the simulated circuit used to perform LASAR simulation. \u2018LSRPOSTL\u2019 will generate test vectors using these pin groups. If no pin groups are supplied, it will create them automatically. Then a copy of the \u2018LSRPOSTL\u2019 program will be brought into the directory where the TAP files from the LASAR job reside. Then, bring in the $PINMAP, copy as \u2018PINMAP.TXT\u2019 and run \u2018LSRPOSTL\u2019. At the menu options (see ), select the \u201cBuild PATTS.SYM Files\u201d option (S) to build the pattern files. \u2018LSRPOSTL\u2019 will create a new pinmap file, \u2018PINMAP.NEW\u2019 (S), which has additional pin groups to accommodate any orphan pins. Basically the pin map file is appended with the added information. The LSRPOSTL program also creates the new (stimulus and response) pattern files (\u2018PATTS.SYM\u2019, \u2018PATTS001.SYM\u2019, \u2018PATTS002.SYM\u2019, etc.) in the current subdirectory (S). All pattern (vector) files are created by LSRPOSTL for the L200 tester. The pattern files are now enhanced as they are now readable to the developer. In L200, simply do a \u201cconvert-in\u201d to bring the new pin map (must change name to \u2018.PMP\u2019, of course) and new pattern files (\u2018PATTS.SYM\u2019, \u2018PATTS001.SYM\u2019, \u2018PATTS002.SYM\u2019, etc.) into XEC (L200's test operating system) (S).","Creating the fault dictionary is just as streamlined as seen in . All fault simulations are completed in LASAR (S) and then post-process again using \u2018LSRTAP\u2019, this time with the \/DIA=FAULTDICT option where \u201c\/DIA\u201d stands for diagnostics and FAULTDICT refers to the fault dictionary (S). The LSRTAP produces a plurality of TAP files (S). Then, again, run the program \u2018LSRPOSTL\u2019 and use the option \u201cBuild FAULTDICTIONARY\u201d from the main menu (see ) (S). The user is asked to enter the Minimum Scope Level (MSL) he or she wishes to see (S); this guarantees that the fault analyzer will always show the correct hierarchical fault call-out at run-time. The special fault dictionary file \u2018FAULTD.DAT\u2019 is created (S). This fault dictionary file will be used at run-time on the L200. This fault dictionary is not converted into the L200 environment. Instead, the fault dictionary resides in the run-time test program directory.","Next, referring to , a user creates the fault retriever file \u2018ATGPOP.SYM\u2019 file (S) for the L200 by running that option (\u201cBuild ATGPOP.SYM\u201d) from the main menu (S). This file, too, must be converted into XEC (S).","Finally, referring to , the optional \u201cwire paths file,\u201d is created if desired. The \u201cwire paths file\u201d is a text file called \u2018WIREPTH.TXT\u2019 and is created using any text word editor. The \u201cWIREPTH.TXT\u201d file is submitted (S). This file associates main net pin I\/O (input\/output) with cable or connector or both cable and connector information; it also offers the feature to associate a page number of a schematic to the main net I\/O pins. Then, run \u2018LSRPOSTL\u2019 again and select the main menu option \u201cBuild WIREPTH.DAT File\u201d (as seen in ) (S). LSRPOSTL creates the WIREPTH.DAT file which is the wire path data file in the current subdirectory (S). The file resides in the test program run-time directory and not in the L200. The LSRPOSTL compiles the file to a run-time file for the tester (CASS workstation).  discloses the format of this wire path text file.","All of these main menu options may be run at once, if the test engineer wishes to do the whole job at once. For example, at the main menu, simply type in each option number delimited by commas. \u2018LSRPOSTL\u2019 will run the options selected in the order they are input.","The output files \u2018FAULTD.DAT\u2019 and \u2018WIREPTH.DAT\u2019  are transported  to the TPS (test program set) run-time directory. The test program set contains all of the software and hardware excluding the tester (i.e., interface device, miscellaneous cables, etc.). The files for the L200 test vectors, fault dictionary, new pinmap, wire paths, and fault retriever can be transported through a data line or an optical disc that is carried from one system to another. At this point, all files created by LSRPOSTL must now reside on the tester (CASS workstation), either in the run-time directory or in the L200 (XEC) environment as described above. Then the run-time fault analyzer \u2018ATGFLTL\u2019  is brought in. One must be sure to convert the new pinmap file, all of the newly generated pattern files, and \u2018ATGPOP.SYM\u2019 into XEC as described above. The test engineer must supply all L200 timing and levels parameters as well as the other L200 files such as the cross reference and debug files.","There is an unlimited numbers of vectors in the creation of the fault dictionary. Further, there is test vector generation capability. The LSRPOST can accept very large jobs (32-bits will handle virtually unlimited size jobs) and create the test vectors needed for the L200 job at the CASS test station. The tester (CASS Workstation) houses the digital tester L200 and will run the digital test using the files generated above. It will accept the developer's own pin groups and create the test vector files written in the verbage of those pin groups using the syntax of the L200. The individual digital state for each pin group is shown for every pattern. Since L200 can only accept a limited number of bytes per file, the new 32-bit version monitors the size of each file & creates the quantity of files to accommodate this limitation.","Concerning the problems of hierarchical modeling, with this new post-processing duet, testing IDs and other boxes (WRAs, LRUs) is now easily implemented. The MSL variable in \u2018LSRPOSTL\u2019 in the \u201cBuild FAULTDICTIONARY\u201d option permits the test engineer to set the depth to which he has modeled.","For instance, there was the use of a two-card ID. A net for each of the cards, a net for output buffering (to accommodate LASARs insistence that wired nets never cross scope boundaries, a fault simulation requirement), and a net for some pull-up resistors (see ) were created. These were each pre-compiled in LASAR and then referenced as components in the main ID net. It was desired that the fault call-out go down to the secondary net level, ie. call out faulty components on each of the sub-nets. So, the MSL was set to two thus permitting fault callouts such as \u2018A1A2.U17\u2019, where U17 is a component on the A2 board in the ID A1.","The standard test language ATLAS will run the L200 tests. ATLAS requests execution of the patterns in the L200, and makes the L200 take and evaluate the response. ATLAS checks to see if the L200 found a fault on the circuit being tested. If a fault is found, then ATLAS calls ATGFLTL which is the second program of the duet and is only callable from ATLAS. ATGFLTL looks at the fault dictionary (faultdictionary) that was previously created and compares its entries to the fault \u201csnapshot\u201d just taken on the faulty board being tested. ATGFLTL uses algorithms to decide which entry in the database most closely resembles or matches the real-world, run-time fault scenario just found. ATGFLTL sends back to ATLAS all of the information on the best four matches (best scoring are those that have the fewest mismatches). ATLAS then prints out for the operator the four possibilities of what it thinks actually failed in the real world scenario, i.e. the test just performed.","All test programs executed on the CASS are written in the standard test language of ATLAS. The ATLAS test program calls all testing operations at run-time. The functions of ATLAS and ATGFLTL are stated in more detail below. Typically, for all digital tests, ATLAS must interface with the L200 through Functional Extension Programs (FEP) which run in the background. The special FEP, \u2018L2LASAR\u2019, normally used to launch LASAR-type digital tests, is not used with this new scheme. The test pattern generator of \u2018LSRPOSTL\u2019 creates the working L200 pattern files, a quantity of which is needed to accommodate the XEC compiler. At run-time, the first pattern file will call, in succession, the remaining pattern files. Following the last pattern file, it will call an L200 routine \u2018getpopats\u2019 (POPAT, primary output patterns) contained in the file \u2018ATGPOP.SYM\u2019 generated by \u2018LSRPOSTL\u2019 also. If failures were found, \u2018getpopats\u2019 will create a file in the TPS directory called \u2018popats.dat\u2019.","The ATLAS calls the first pattern file in the L200 using the standard FEP \u2018L2EXECUTE\u2019. When the patterns have been executed, control goes back to the ATLAS. The ATLAS then tests for failures using the variable \u2018TEST-FAILED\u2019 that is returned from the FEP. If failures occurred, ATLAS then calls the new FEP \u2018ATGFLTL\u2019, the run-time fault analyzer of the duet. \u2018ATGFLTL\u2019 examines the \u2018popats.dat\u2019 file just created, matches the signature there with those in the faultdictionary and returns the best matching faultsets with scores to the ATLAS.","As seen in , to use the FEP \u2018ATG-FLT-L\u2019, simply send it the name of the faultdictionary file (\u2018FAULTD.DAT\u2019 used here) and the name of the optional wire paths file (\u2018WIREPTH.DAT\u2019 shown here) or \u2018NONE\u2019, if not used. The FEP will send back the quantity of faultsets (maximum of four of the best scoring) it has compiled, the scores for each faultset, the print strings for each faultset, a small character array containing \u201cnews\u201d relating the quality of the match, faultset information (not used), and lastly, the wire path callouts. The ATLAS procedure \u2018SHOWATGFAIL\u2019 is offered here to demonstrate how the returned data is used to produce the fault callout on the display. The first parameter in this procedure just enables output to the printer, the second enables the wire paths to be displayed or printed or both displayed and printed.","Often the test engineer needs to build two or more nets and combine them into one large model, i.e. build a hierarchical LASAR model. LASAR permits this feature but post-processing into L200 is difficult if not prohibitive. The L200 post-processor does not allow names of chips to exceed four characters which precludes the use of scoping type fault callouts required by hierarchical modeling. With this new post-processing duet, testing IDs and other boxes (WRAs, LRUs) is now easily implemented. The MSL variable in \u2018LSRPOST L\u2019in the \u201cBuild FAULTDICTIONARY\u201d option permits the test engineer to set the depth to which he has modeled. As seen in  an example of hierarchical modeling using LASAR is given.","There is a need that hierarchical schemes report the wire paths from the panel interface to the main net I\/O and show a page number of a schematic where the I\/O and wire path can be found. Rather than try to build all of this into some clunky model scheme using pseudo components, this new method allows the test developer to submit a wire path text file containing sections for the page numbers and the I\/O association. \u2018LSRPOSTL\u2019 then converts the data in this file into a special wire-paths file which is accessed at run-time by \u2018ATGFLTL\u2019. These wire-paths and schematic page numbers are correlated by \u2018ATGFLTL\u2019 when a fault is discovered and appended to the fault callout which is then printed by the ATLAS. Thus a full-bodied LASAR test for the system of boards is implemented.","Another feature of the duet method is an enhanced method of scoring mismatch between predicted test responses and actual tester responses. The 9-9-1 weighting factor method of mismatch scoring sometimes punishes the real fault signature too severely by overlooking valid matches. Furthermore, the 9-9-1 method has great difficulty handling anomalies such as multiple faults or poor initialization. Because of this, an alternative algorithm which is not based upon the standard 9-9-1 weighting factors was developed. This new algorithm instead offers partial credit for significant Primary Output Patterns (POPAT) that are actually detected. Rather than punishing deficiencies in the fault signature, tester POPATs are positively valued for the matches found. This results in a far better picture of the needed replacement action to repair the board or box. Most faults result in a mismatch of zero but the occasional anomaly such as discussed above is redemptively handled. The mismatch may be higher than ideal but, at least typically the faulty component is shown for repair action. For example, an easy fault inserted was not correctly diagnosed using prior techniques of 9-9-1 weighting factors. In fact, the actual fault <A1A2.U21>9@0 inserted was never mentioned in the output. As seen in , however, \u2018FAULTR\u2019 of the present invention, a troubleshooting version of \u2018ATGFLTL\u2019 caught the fault without problem.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 10","sub":["\u2014","\u2014","\u2014","\u2014"],"b":["10","100"]},{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIGS. 10 and 13","FIG. 12"],"sub":["\u2014","\u2014","\u2014","\u2014"],"b":["10","42","40","44","40","200","110","100","202","204","200","300","400","500"]},"As shown above, the present invention provides a multi-featured program duet for streamlining LASAR output into L200 test code and fault dictionary for digital program on CASS. The efficiency of converting the output of circuit simulation data into data for automated circuit testing program of a circuit testing device has been increased by the present invention. The programs generate readable test vectors and accommodate hierarchical model structuring. The mismatch scoring algorithm has also been enhanced.","While the invention has been particularly shown and described with reference to the preferred embodiments thereof, it will be understood by those skilled in the art that the foregoing and other changes in form and details may be made therein without departing from the spirit and scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A more complete appreciation of this invention, and many of the attendant advantages thereof, will be readily apparent as the same becomes better understood by reference to the following detailed description when considered in conjunction with the accompanying drawings in which like reference symbols indicate the same or similar components, wherein:",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","sub":["\u2014","\u2014"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6","sub":"\u2014"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 7(","i":"a","sub":["\u2014","\u2014"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7(","i":"b","sub":["\u2014","\u2014"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7(","i":"c","sub":["\u2014","\u2014"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 12","sub":["\u2014","\u2014","\u2014","\u2014"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
