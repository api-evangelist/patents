---
title: Web-based integrated test and debugging system
abstract: A computer-implemented method, system, and computer program product for a web-based integrated test and debugging system is provided. The method includes configuring a proxy widget on a server to communicate with a debug widget on a browser, and configuring the proxy widget to communicate with an integrated development environment (IDE) external to the server. The method also includes running a process on the server associated with one or more process-control widgets on the browser. The method further includes polling the IDE via the proxy widget to access a debug and test infrastructure of the IDE for debug data associated with the process, and relaying the debug data associated with the process from the proxy widget to the debug widget to provide web-based integration of testing and debugging on the browser while the process is running on the server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08549481&OS=08549481&RS=08549481
owner: International Business Machines Corporation
number: 08549481
owner_city: Armonk
owner_country: US
publication_date: 20091130
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention relates generally to web-based computing, and more specifically, to a web-based integrated test and debugging system using a proxy to combine data and functionality of different widgets in a Rich Internet Application (RIA).","RIAs provide users with easy to use, portable ways to access and control business processes. RIAs typically use a web browser and Web 2.0 technologies, such as Asynchronous JavaScript and XML (AJAX), to present a flexible and responsive user experience where widgets from a variety of sources can be \u201cmashed up\u201d or merged together in a convenient way for the user. A widget is portable code that can be installed and executed within a web page without requiring additional compilation. When developing applications, it may be desirable to perform testing and debugging. Debuggers usually rely on facilities of an Integrated Development Environment (IDE) to communicate with a runtime application, obtain variable values, stop on breakpoints, and the like. Debugging and testing activities are typically performed on a separate platform using a separate environment from an RIA execution environment. Thus, various user interfaces, platforms, and\/or environments may be needed to perform testing and debugging of widgets used for business processes.","An exemplary embodiment is a computer-implemented method for providing a web-based integrated test and debugging system. The method includes configuring a proxy widget on a server to communicate with a debug widget on a browser, and configuring the proxy widget to communicate with an integrated development environment (IDE) external to the server. The method also includes running a process on the server associated with one or more process-control widgets on the browser. The method further includes polling the IDE via the proxy widget to access a debug and test infrastructure of the IDE for debug data associated with the process, and relaying the debug data associated with the process from the proxy widget to the debug widget to provide web-based integration of testing and debugging on the browser while the process is running on the server.","Another exemplary embodiment is a system for web-based integrated testing and debugging. The system includes a host system with a processing circuit in communication with a data storage device configured to store process data. The system also includes a server configured to execute upon the host system and deploy a debug widget to a browser. The debug widget is configured to communicate with one or more process-control widgets on the browser as a mash-up. The system is further configured to run a process on the server associated with the one or more process-control widgets on the browser, where the process accesses the process data. The system is also configured to execute a proxy widget at the server to communicate with the debug widget and an IDE external to the server, where the proxy widget polls the IDE to access a debug and test infrastructure of the IDE for debug data associated with the process. The system is additionally configured to relay the debug data associated with the process from the proxy widget to the debug widget to provide web-based integration of testing and debugging on the browser while the process is running on the server.","A further exemplary embodiment is a computer program product for providing a web-based integrated test and debugging system. The computer program product includes a storage medium readable by a processing circuit and storing instructions for execution by the processing circuit for implementing a method. The method includes configuring a proxy widget on a server to communicate with a debug widget on a browser, and configuring the proxy widget to communicate with an IDE external to the server. The method also includes running a process on the server associated with one or more process-control widgets on the browser. The method additionally includes polling the IDE via the proxy widget to access a debug and test infrastructure of the IDE for debug data associated with the process, and relaying the debug data associated with the process from the proxy widget to the debug widget to provide web-based integration of testing and debugging on the browser while the process is running on the server.","Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention. For a better understanding of the invention with the advantages and the features, refer to the description and to the drawings.","The detailed description explains the preferred embodiments of the invention, together with advantages and features, by way of example with reference to the drawings.","Exemplary embodiments provide a web-based integrated test and debugging system using a proxy to combine data and functionality of different widgets in a Rich Internet Application (RIA). Debug widgets can be mixed with other RIA widgets to create mash-ups that support both interactions with processes and testing of the processes. The debug widgets running in a browser communicate with proxy widgets to enable communications to pass through a server and be redirected to another environment, such as an Integrated Development Environment (IDE), while maintaining security constraints with respect to the server. With access to additional functionality and data, more complex mash-ups can be created to support hybrid widgets and RIAs. The proxy widgets may support a variety of communication protocols to establish direct and indirect communications between browser based widgets and remote applications. For example, proxy widgets can communicate through application program interfaces (APIs) to access functionality and data of remote applications.","Turning now to the drawings, it will be seen that in  there is a block diagram of a system  upon which web-based integrated testing and debugging is implemented in exemplary embodiments. The system  of  includes a host system  in communication with client systems  over a network . In exemplary embodiments, the host system  is a high-speed processing device (e.g., a mainframe computer, a desktop computer, a laptop computer, or the like) including at least one processing circuit (e.g., a CPU) capable of reading and executing instructions, and handling numerous interaction requests from the client systems  as a shared physical resource. For example, the host system  may enable the client systems  to access data storage device  in communication with the host system . The data storage device  may hold process data  that a user can interact with using a browser  executing on one or more of the client systems .","In an exemplary embodiment, the host system  includes a server  that provides web services and content to browsers , where the server  executes a runtime environment supporting interaction with multiple browsers . The host system  can also run other applications, such as an integrated development environment (IDE) . The IDE  may store and access debug data  on the data storage device  for application development and debugging.","In exemplary embodiments, the client systems  comprise desktop, laptop, general-purpose computer devices, and\/or networked devices with processing circuits and I\/O interfaces, such as a keyboard and display device (e.g., web-enabled phones or handheld devices). The host system  and client systems  can include various computer hardware and software technology known in the art, such as one or more processing units or circuits, volatile and non-volatile memory including removable media, power supplies, network interfaces, support circuitry, operating systems, and the like. Users can initiate various tasks locally on the client systems , such as interacting with widgets through the browsers  to access direct content or mash-ups from the server . Browsers  can access web pages or components and execute hypertext transfer protocol (HTTP)-enabled content. The HTTP-enabled content may include secure HTTP, such as HTTP over a secure socket layer (HTTPS). The browsers  may support other communication or transfer protocols known in the art.","The network  may be any type of communications network known in the art. For example, the network  may be an intranet, extranet, or an internetwork, such as the Internet, or a combination thereof. The network  can include wireless, wired, and\/or fiber optic links. Additional computer systems (not depicted) can also be accessed via the network  or other networks. The host system  may also represent a cluster of computer systems collectively performing processes as described in greater detail herein.","The data storage device  refers to any type of computer readable storage medium and may comprise a secondary storage element, e.g., hard disk drive (HDD), tape, or a storage subsystem that is internal or external to the host system . Types of data that may be stored in the data storage device  include, for example, various files and databases. It will be understood that the data storage device  shown in  is provided for purposes of simplification and ease of explanation and is not to be construed as limiting in scope. To the contrary, there may be multiple data storage devices  utilized by the host system .",{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 2","FIG. 2","FIG. 1"],"b":["112","114","116","112","200","202","112","204","206","208","210","200","212","114","112","112","204","212","200","114","214","216","218","216","202","218","218","216","114","218","110"]},"Communication between the browser  and the server  can be achieved using a variety of calls at different levels. For example, the task runtime  and task widgets  communicate via calls , while debug widgets  and proxy widget  communicate via calls . The calls  and  may comply with various communication standards known in the art, such as Representational State Transfer (REST) calls. The proxy widget  and the process  on the server  can also communicate with various components of the IDE . For example, the proxy widget  makes calls  to an application server  of the IDE . The process  handles calls  from a debug and test infrastructure  of the IDE . In exemplary embodiments, the calls  use a higher-level protocol, such as REST calls, while the calls  use a lower-level protocol, such as API calls. A REST call is an example of a service invocation typical of the collection of technologies generally referred to as \u201cWeb 2.0\u201d. Asynchronous JavaScript and XML (AJAX) is another example of a protocol that can be supported in exemplary embodiments.","The business space container  is an example of an interface to an RIA with the process data  of  sourced from the server  and debug data  sourced indirectly from the IDE  via the proxy widget . Application testing and debugging can appear seamless to the user of the browser , because the debug functions are mashed-up with the process-control widgets  to provide process functions. The process widgets  can manage the flow of business activities. The forms  may include interactive elements for inputting information in support of business processes. The task widgets  provide a number of tasks to perform, such as human tasks that request interactions from the user of the browser . The viewer widgets  support monitoring and interactive viewing of processes and tasks that are actively running. Other widgets (not depicted) can be used to support presentation and tracking information, such as history widgets. The various widgets of  can be implemented as individual widgets, may be combined, or further subdivided within the scope of the invention.","The debug widgets  incorporate functions of the IDE , such as those provided by the debug and test infrastructure , into other widgets in the browser . The process-control widgets  communicate with server  to obtain process data  and\/or to initiate business functions, while the debug widgets  communicate with IDE  to leverage the debug capabilities that are provided by the IDE . The process-control widgets  can obtain data and state information from the server  through standard web protocols using calls .","To provide debugging capabilities, one or more debug widgets  are mashed-up with one or more of the process-control widgets . The debug widgets  communicate with the application server  embedded in the IDE . The debug widgets  can also use REST calls (or related Web 2.0 communication technologies) as the calls , but the calls  are relayed to the IDE  as calls  rather than being directly serviced by the server . The proxy widget  embedded in the server  handles redirection of the calls  and  between the debug widgets  and the IDE . The call redirection enables indirect communication, since the debug widgets  cannot directly communicate with the IDE . The widgets - are loaded into the browser  as part of the business space container  served from the server . The widgets - may be programmed using JavaSript, ActionScript, or a similar browser scripting language. Widely adopted browser security policies do not permit scripts that are loaded from one server to callout to another server, such as calling out the application server  from widgets served from server . Therefore, the proxy widget  acts as an intermediary between the browser  and the IDE . The proxy widget  redirects calls from the debug widgets  to the application server .","The debugging widgets  provide additional information to the user of browser  about the operation of a business process, as well as controlling the execution of the process (such as process ) by pausing, setting breakpoints, changing data, and other typical debugging operations. The debug widgets  further enable a visually depiction of the process  being debugged with debugging information. Business processes that are running can be observed visually using a combination of the widgets -. For example, the viewer widgets  can display information about process  executing on server . The debug widgets  can access debug information about the internal state of the process , and the debug information can be added to the visual display produced by the viewer widgets  as status information or animation to illustrate what is happening as the process  executes. Thus, the resulting visual depiction becomes an integral part of the debugging experience.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 3","FIG. 3","FIG. 2","FIG. 2"],"b":["300","202","212","218","210","218","212","218","302","110","118","218","300","302","210","204","208","218","212","210","302","218","212","302","212"]},"The visual process  includes process entry points  and  that provide inputs to a setup task . The setup task  outputs application data to a populate information block . The populate information block  feeds information to a decision block , which in turn outputs information to an update process block . The update process block  outputs information to a process exit point  and to an input missing field task , which in turn provides feedback to the decision block . The viewer widgets  provide a visual interface to display static information about the process widgets  and task widgets  associated with the process . The viewer widgets  can also provide a variety of visual navigation assistance features, such as zoom controls  and magnification viewer .","To provide active information associated with execution of the process , the debug widgets  initiate calls  through the proxy widget , which in turn makes calls  to the application server  of the IDE . Requests for state information about the process  are passed through the test and debug infrastructure  to the process  as calls . The process data  and the debug data  of  can be used to develop a source map to translate low-level debugging events to higher-level business processing events. The translation is done as each low-level event is received and prepared for presentation to the user. Not all low-level runtime events are shown to the user, only events with direct high-level semantics are presented.","The debugging widgets  can provide tracing and status information to the viewer widgets  to overlay on the visual process . For example, trace highlighting  and  on process entry points  and  provide visual indicators of execution history. Interconnecting wires of the visual process  may also be highlighted as part of the tracing. Tracing can also include indicating a current event in the visual process  using current event highlighting , which is associated with setup task  in the example of . Additional debugging status information can also be added to the visual process  as annotations based on debug data received at the debugging widgets . As illustrated in , a status bubble  is added as an annotation to the visual process  so the user knows what is happening during the execution of the process . The debugging widgets  instruct the viewer widgets  to place the status bubble  above the setup task  in response to receiving a \u201chuman task awaiting action\u201d event through the IDE  as the process  is queried by the debug and test infrastructure  using calls . Widget-to-widget communication can be accomplished with JavaScript and other standard web-based technologies.","As the operation of the process  continues, the most recent event is highlighted on the visual process  while monitoring and debugging of the underlying process  proceeds. Further features to support debugging can also be included as part of the user interface , for instance, buttons to pause the process , and to modify data at the pause point. Breakpoints can also be established via requests through the debug widgets , with graphical breakpoints inserted per instructions sent to the viewer widgets . Additional inputs  can be used to configure process execution trace and data values, as well as access external functions.","The debug widgets  maintain a live view of the operation of the process  on the visual process  using the proxy widget  to poll the IDE  via the application server , which in turn communicates with the running process  through the debug and test infrastructure . The debug widgets  can also automatically initiate refreshing of various widgets associated with the visual process  to keep the displayed information and trace information up to date as execution of the process  advances. Polling for updated state information is performed via the proxy widget . The IDE  can use existing debugging technologies to communicate with the task runtime , to execute pause and step commands, and to retrieve and modify data. Thus, debugging functionality can be mashed-up in the browser , while reusing existing technologies in the IDE .","Turning now to , a process  for providing a web-based integrated test and debugging system will now be described in accordance with exemplary embodiments, and in reference to . At block , proxy widget  is configured on server  to communicate with debug widgets  on browser . At block , the proxy widget  is configured to communicate with IDE , which is external to the server , although both the IDE  and server  can execute independently on host system .","At block , process  runs on the server . The process  is associated with one or more process-control widgets  on the browser , such as process widgets , form widgets , task widgets , and viewer widgets  in business space container . The one or more process-control widgets  communicate directly with the server  without use of the proxy widget . The one or more process-control widgets  and the debug widgets  may be served as a web page from the server  to the browser  for execution on the browser . The browser  supports a widget mash-up to combine data and functionality from the IDE  via the debug widgets  with the one or more process-control widgets  sourced from the server . At block , the proxy widget  polls the IDE  to access debug and test infrastructure  of the IDE for debug data  associated with process . The polling initiates calls from the proxy widget  to the debug and test infrastructure  via application server  of the IDE .","At block , the proxy widget  relays the debug data  associated with the process  to the debug widgets  to provide web-based integration of testing and debugging on the browser  while the process  is running on the server . Separate high-level calls , , and  are supported between the one or more process-control widgets  and the server , between the debug widgets  and the proxy widget , and between the proxy widget  and the IDE . Calls  between the IDE  and the process  running on the server  may be supported using a low-level API.","In an exemplary embodiment, a source map is used to translate low-level debugging events to higher-level processing events to support integration between the debug widgets  and the one or more process-control widgets . The debug widgets  are configured to instruct the one or more process-control widgets  on placement of debug status information on visual process  representing the process  running on the server  in response to receiving the debug data  associated with the process . The placement of debug status information includes highlighting trace information with current event highlighting and status annotation as depicted in the example of . The debug widgets  are further configured to refresh a widget of the one or more process-control widgets  to keep displayed information and trace information up to date as execution of the process  advances.","The capabilities of the present invention can be implemented in software, firmware, hardware or some combination thereof.","As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.","Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the present invention are described with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","Technical effects include providing web-based integrated testing and debugging with other widgets as part of a Rich Internet Application. Server side proxy widgets enable widgets on client browsers to access other application servers that would not otherwise be directly available to the client browsers. The proxy widgets may support a variety of protocols, including high-level calls and low-level API calls to remote applications. Thus, a common user interface and experience can be delivered on the client side browser to interact with business processes and initiate testing and debugging of the business processes as a mash-up. This can speed development and debugging of new and existing processes.","The diagrams depicted herein are just examples. There may be many variations to these diagrams or the steps (or operations) described therein without departing from the spirit of the invention. For instance, the steps may be performed in a differing order, or steps may be added, deleted or modified. All of these variations are considered a part of the claimed invention.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and\/or groups thereof.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated. Moreover, the use of the terms first, second, etc. do not denote any order or importance, but rather the terms first, second, etc. are used to distinguish one element from another."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":["The subject matter which is regarded as the invention is particularly pointed out and distinctly claimed in the claims at the conclusion of the specification. The forgoing and other features, and advantages of the invention are apparent from the following detailed description taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
