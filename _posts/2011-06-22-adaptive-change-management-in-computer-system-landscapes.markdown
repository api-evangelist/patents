---
title: Adaptive change management in computer system landscapes
abstract: An adaptive automatic change management for computer system landscapes is described herein. A predefined set of attributes are extracted or obtained for a computer system artifact, together with a number of values assigned to the set of attributes. A unique identification section is created and distributed among the computer systems in the landscape based on the set of attributes and the assigned values, where the unique identification section encompass computer system artifacts of a same kind. A modification of an artifact of the same kind is tracked at a computer system. The tracked modification is automatically applied in the computer system to one or more incoming computer system artifacts of the same kind.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08683433&OS=08683433&RS=08683433
owner: Business Objects Software Limited
number: 08683433
owner_city: Dublin
owner_country: IE
publication_date: 20110622
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The field relates generally to data processing and digital processing systems. More specifically, the field is related to software change management within multi computer systems landscapes.","Today's business information systems maintain a large number of documents. For example, the customers of business intelligence (BI) systems have numerous repositories where information is piled up as a result of day-to-day activities. Efficient life cycle management in such overcrowded environments becomes a very challenging task. Life cycle management (LCM) primarily involves flow of objects, e.g., software or data components, between different information system environments, such as development, testing and production environments, defined in a common computer system landscape, e.g., enterprise computer system landscape.","Usually, the separate computer system environments, in a landscape, work autonomously. The flow or transportation of objects from one environment to another is typically followed by updates or adjustments to fit the transported objects in the new environment. Such updates ensure that objects interact properly with their new dependencies and without unnecessary downtime. For example, a BI Report's application objects may be developed in a development computer system environment, tested for acceptance in a test environment, and transported for live consumption in a production computer system environment. Each of the computer environments may have its own resources to be consumed by the BI Reports, e.g., separate servers, databases, etc. Hence, on arrival in a new computer system environment, database connections of a BI Report have to be overridden to point to databases available in the new environment. Otherwise, the BI Report may fail or run properly, which can result in downtime period for the current computer system environment.","The big number of software, and data components maintained in enterprise computer system landscapes, requires a lot of resources for their lifecycle management (LCM). Often, LCM involves manual updates of the transported objects, which creates conditions for overhead, errors and extensive downtimes. This creates critical and all-encompassing problems that arise across different objects and across different user scenarios. For example, a customer may have set a draft description for each of many objects in a development environment. Whenever any of the objects is transported to a production environment, the assigned draft description must be replaced by a final verified description. Task of performing such changes, regardless of how complex or simple they are, may involve manual operations over a number of objects over a number of transports. Often, the number of such objects and transports exceeds several thousands in large and even midsize enterprise computer system landscapes.","Various embodiments of systems and methods for adaptive change management in computer system landscapes are described herein. According to one aspect, a predefined set of attributes are extracted or obtained for a computer system artifact. A number of values assigned to the set of attributes are extracted as well. A unique identification section is created based on the set of attributes and the assigned values to identify computer system artifacts of a same kind. The unique identification section is distributed to a number of computer systems in the landscape. According to another aspect, a modification of an artifact of the same kind is tracked at a computer system, and stored together with the unique identification section. In yet another aspect, the tracked modification is automatically applied in the computer system to one or more newly received computer system artifacts of the same kind.","These and other benefits and features of the embodiments will be apparent upon consideration of the following detailed description of preferred embodiments thereof, presented in connection with the following drawings.","Embodiments of techniques for adaptive change management in computer system landscapes are described herein. In the following description, numerous specific details are set forth to provide a thorough understanding of the embodiments. One skilled in the relevant art will recognize, however, that the presented ideas can be practiced without one or more of the specific details, or with other methods, components, materials, etc. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring.","Reference throughout this specification to \u201cone embodiment\u201d, \u201cthis embodiment\u201d and similar phrases, means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment. Thus, the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures, or characteristics may be combined in any suitable manner in one or more embodiments.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["100","100","105","120","105","120","140","110","140","100"]},"The client systems  and the server system nodes  communicating via network  may define a number of different computer system environments. Some of the elements of the computer system landscape  resemble the structure and functionality of software modules developed by SAP AG. However, structures with similar functionalities could be found in software products developed by other vendors, as well. Alternative embodiments may utilize other kinds of computer system architectures.","The involved client systems  may have similar or different structures where one or more of the illustrated modules are replicated. One or more users  may operate within one or more instances of user interface (UI) client  of one or more of client systems . Different users  may exclusively access different instances of the UI client  within a same client system .","In one embodiment, any of client systems  may execute a standalone client application, e.g., client engine , to interact with the backend server system . Alternatively, an intermediate layer may be downloaded to any of the client systems  as an extension of a running Internet browser. Such intermediate layer may be also illustrated as client engine . The standalone client application and the intermediate layer may have similar components and functionality. Client engine  takes responsibility for rendering the necessary client functionality, and also for communicating with server systems  via network  when necessary.","The client engine  includes UI client instances or sessions  that may also embed into a browser integrated framework. The UI client  may be a part of any popular browser integrated framework, e.g. Silverlight\u00ae provided by Microsoft Corp, Flex\u00ae provided by Adobe Systems Inc., JavaFX\u00ae originally developed by Sun Microsystems Inc., etc. In one embodiment, the client engine  and UI client , respectively, may be desktop application, for example, a .NET\u00ae application rendering a UI through a Windows Prosecution Foundation (WPF) system. The UI client  accesses the necessary business data at the backend  through remote access layer  via network . In one embodiment, no dedicated UI server or client programs are needed. The communication with the backend  may include extracting, storing and updating data. The data may be transported to repositories , especially when backend  implements a number of server nodes in separate computer system environments.","In one embodiment, users  generate services requests at UI client . UI components module  instantiates one or more appropriate graphical user interface (GUI) screens or controls in response to the user request. The behavior of the UI components is managed by controller . The controller  makes sure that all instantiated controls in the UI components  are initialized. The controller is also responsible for the execution of any configured operation triggered by events corresponding to the instantiated controls. In case when some of the operations involve execution of script segments, the controller  may trigger the execution of these scripts via scripts module . In one embodiment, scripts module  is a frontend scripting engine. Analytics module  may be used for frontend data processing when necessary.","In one embodiment, the backend  utilizes presentation layer  to connect to the Internet and\/or to other public or private networks, and to provide access for the UI client sessions  to underlying business functions and data structures. For example, the presentation layer  may generate the UI object model underlying the UI controls instantiated in the UI components module  at the client systems . In one embodiment, presentation layer  may be part of the server runtime .","The server runtime  provides environment where one or more software applications  are executed. For example, the applications  may provide a number of business services for the users , where various operation requests related to the business services are created at client systems . The requests are translated to corresponding process tasks performed by the applications  executed in server runtime .","In one embodiment, the server runtime  includes backend controller  for one or more UI client sessions  to handle the requested UI components, e.g., when a UI client session  triggers an initialization of a UI component for the first time. The backend controller  may manage the collaboration between the requested UI components and one or more underlying business objects. System services  in the server runtime  may be used to administer the characteristics of the server runtime , e.g., its engine parameters, the user access to one or more components, the processes execution, the communication with other runtime environments, like, external systems, databases, etc. In one embodiment, system services  may also provide deployment, setup and change management of software components.","Metadata repository  is generally the place where metadata about the computer programs deployed in the server system  are preserved, according to one embodiment. There are different kinds of metadata that could be maintained by the metadata repository . For example, the repository  keeps the description of the business objects  underlying the applications . In one embodiment, metadata repository  keeps description of the available UI components  and the relationships between them as designed.","Repository engine  manages the metadata and the collaboration with the server runtime  at one hand, and with various service providers  at the other hand. The service providers  may render services and\/or corresponding UI components to the backend  as defined in the metadata. The service providers  are available via service provider interfaces , and can be either internal or external to the backend . In one embodiment, backend services adaptation  represents a layer that helps to adjust the designed UI or rendered UI components to a set of normalized business objects available at the server system .","In a multi server system environment, e.g., in a cluster of more than one server system nodes , repository  may be used to persist different kinds of common data, including programming code, business data, metadata, etc. In one embodiment, one or more different repositories  may be assigned to different computer system environments defined in the computer system landscape ","In one embodiment, users  may design, create or change a program component, a data object or some other type of computer system artifact by manipulating UI components  associated with particular application or software tool. The UI components  may be available within GUI environment of the UI client . The manipulations of the UI components  may trigger execution of various system or application procedures in server runtime . Further, the manipulations of the UI components  may lead to changes in the metadata repository , e.g., changes in the definitions of the UI components , even to changes in the descriptions of the business objects , etc.","For example, by manipulating UI components  or by directly entering program code, a user  may create a BI Report artifact in development computer system environment in the landscape . The BI Report could be stored as artifact among other artifacts  in repository . A user  may perform tests with the created BI Report to prove its quality. Typically, such tests are performed in a separate environment defined in computer system landscape . The different environments in the landscape  could be logically and even physically isolated, where each environment may encompass one or more separate computer systems, e.g., client systems , server system nodes , different repositories , etc.","In one embodiment, the BI Report artifact may have to be transported from the computer system environment where it is created to the computer system environment where it is tested. The transportation may be requested by a user  through a client system  and executed by an application , a system service  or by external service provider . The transportation of the BI Report artifact may involve a transfer between different repositories . Once received in the testing environment, the BI Report artifact may need to be modified, e.g., to be reconfigured to connected to a different database available in the test computer system environment. Such modification may again be accomplished by manually manipulating UI components . Alternatively, the transported artifacts may be updated automatically in the receiving computer system environment by an application , system server  or by a service provider , according to one embodiment.","In this document, the term artifact addresses any kind of program components or objects, data objects, business objects, services, etc., or their descriptions, that are available in a computer system landscape. The artifacts could be classified in different types and kinds. In one embodiment, each kind of artifacts existing in the computer system landscape  may be uniquely specified by a number of parameters, attributes or properties common for these artifacts. Such set of attributes may be used to create unique identification section (UIS) for the artifacts. The UIS may also be created based on the values assigned to the predefined attributes to further classify the artifacts of the same kind. In one embodiment, the specified unique identification sections (UIS)  for the artifacts  of different kinds available in the landscape  may be stored in repository . Further, in this document the term \u201ccomputer system environment\u201d or simply \u201cenvironment\u201d may address one or more autonomous computer systems in a computer system landscape.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 2","FIG. 1"],"b":["200","210","240","270","210","240","270","218","248","278","212","216","242","246","272","276","210","240","270","220","250","280"]},"The artifacts -, - and - available in the computer system landscape  may be of different kinds. In one embodiment, artifacts ,  and  represent artifacts of a first kind. Similarly, artifacts ,  and  represent artifacts of a second kind, and artifacts ,  and  represent artifacts of Nkind, where letter \u201cN\u201d is used to encompass all kinds of artifacts available in the landscape . For example, artifacts ,  and  may correspond to reports generated by BI applications, such as SAP\u00ae Crystal Solutions, e.g., Crystal Reports\u00ae, from SAP AG. Similarly, artifacts ,  and  may correspond to data connections artifacts, and artifacts ,  and  may correspond to Query as a Web Service (QAAWS) artifacts. There is no requirement for the environments ,  and  to include artifacts of all kinds.","In one embodiment, computer system environment  is a development environment, where new artifacts may be created. For example, a program developer may create a new BI Report artifact, e.g., an artifact  of the first kind. The created BI Report artifact  may be configured to connect to development database  at warehouse  during execution. Once the developer is satisfied, the BI Report artifact  may be transported to test environment  as artifact  of the same kind. A quality assurance (QA) specialist may perform various test scenarios over the received BI Report artifact  to check for errors or inconsistencies during its execution.","Generally, the transportation of artifacts does not change their setup or description. The BI Report artifact  is received at test environment  with the configuration and setup generated in the development environment . Therefore, BI Report artifact  will try to access development database  at warehouse server  (illustrated with dotted line). However, the test environment  may have no established connection to warehouse server . Hence, the QA specialist may have to change the configuration of the BI Report artifact  to access testing database  at warehouse server . If the reconfiguration of the received artifact  is omitted, the execution of the BI Report in the test environment  will generate connection error.","Usually, it takes more than one cycle of testing the generated BI Report. When the QA specialist finds malfunctions in the artifact , the BI Report may be transported from the test environment  back to the development environment . Since the new setup made by the QA specialist is not changed during the backwards transportation, the BI Report artifact  received at development environment  may be configured to access testing database  at warehouse server  (illustrated with dotted line). When there is no established connectivity between the development environment  and the warehouse server , the BI Report artifact  has to be reconfigured to connect to development database .","Once developed and\/or successfully tested, the BI Report may be deployed in the production environment , e.g., transported as artifact . Together with the deployment, the BI Report artifact  needs to be re-configured to access production database , e.g., at warehouse server .","The simple example of developing, testing and deploying a BI Report outlines the additional efforts necessary for adapting artifacts to different computer system environments during their lifecycle management. In one embodiment, an automatic process is executed in the computer system landscape  across the existing computer system environments ,  and  to identify the artifacts that could be transported between the environments ,  and . The process may be executed by one or more of the services ,  and , or may be enabled through an outside server provider to the landscape .","In one embodiment, for each identified object, specific reconfigurations in the different environments ,  and  are tracked. For example, tools ,  and  may be used to manually reconfigure an artifact of a particular kind. The reconfiguration is recorded and applied to all received artifacts of the same kind. Alternatively, a scan may be performed, e.g., by services ,  and , to identify the current configuration of the existing artifacts -, - and - in the respective environments ,  and . The newly received artifacts may be automatically modified to match the setup and\/or the descriptions of the artifacts of the same kind present in the receiving environment.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 3","b":["300","300","305","300","300","300"]},"Usually, the artifacts in the computer system landscape are persisted in a number of repositories assigned to different computer system environments. However, the scan of new artifacts may not be limited only to repositories, but may include other computer system landscape objects, e.g., file systems, client systems, application servers, service providers, network devices, etc. The scan may run in background to the other tasks executed in the computer system landscape, according to one embodiment. For example, the scan may run as a bot process or a crawler that iterates over a predefined set of repositories in the computer system landscape. In one embodiment, the scan may be limited to artifacts of a particular kind.","At , a check is performed whether a new artifact has been found by the scan. When a new artifact has been discovered, a set of predefined attributes of the artifact are extracted together with the values assigned to the attributes at . Different sets of attributes may be specified for the different kinds of artifacts available in the computer system landscape. The combination of attributes and values needs to be sufficient to identify the kind of the artifact, according to one embodiment. For example, the set of attributes or parameters of a BI Report artifact may include a database name and a server name properties. These attributes together with the assigned values may be used to create a UIS to encompass all BI Report artifacts from a particular computer system environment.","At , a check is performed to find out whether a UIS already exists including the extracted attributes and values. For example, a UIS with such attributes and values will exist when a previous scan has discovered an artifact of the same kind. At  a UIS is created based on the extracted attributes and corresponding values, when the check at  shows that there is no such UIS so far. At , the newly created UIS is broadcasted to the different environments of the computer system landscape. In one embodiment, a list of all created UISs in the landscape is stored in the repositories of the different computer system environments. Thus, a computer system environment will have an access to the unique identification section of virtually every kind of artifacts transported across the computer system landscape.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 4","FIG. 3"],"b":["400","300","400","400"]},"At , one or more unique identification sections for one or more kinds of artifacts available in the computer system landscape are received. In one embodiment, the received UISs may be locally stored in a repository as a list or a database table. More specifically, the UISs may be persisted in as database table records. One or more primary keys for the database table may be generated based on the artifact attributes and assigned values included in the UISs. The locally persisted set of UISs may include unique identification sections created in the destination environment, according to one embodiment.","At , a computer system, is scanned for available artifacts. At , a check is performed to find out whether an artifact identified by the scan matches any of the stored UISs. If the check at  confirms such a match, at  another check is performed to verify whether the artifact has been altered or modified. In case of modification of the artifact, at , a correspondence between the old state and the new state of the artifact is stored together with the UIS matching the artifact.","In one embodiment, the check for modification of the artifact is based on a comparison between the values assigned to the attributes of the artifact included in the matching UIS. Alternatively, the changes to the state of the artifacts available in the environment, or in the whole computer system landscape may be logged. Other methods for checking for modifications to artifacts could be applied as well.","Alternatively, or in parallel to the scanning at , process  may include receiving a modification of an artifact at . For example, the modification may involve reconfiguration of the current setup of the artifact, e.g., an attribute or an attribute value of the artifact may be replaced. At , it is verified whether the artifact that is modified matches a received or locally created UIS. In case of a match, a correspondence between the old state and the modified state of the artifact is stored together with the UIS matching the artifact at . Alternatively, instead of storing correspondence between old and new states, an executable description of the modification or the reconfiguration of the artifact may be stored.","Process  may be executed repetitively in its entirety or partially, according to a predefined schedule, or as a result of a triggering event. As a result, a list of UISs for different kinds of artifacts will be created including correspondence between old and the new states for those artifacts that have been altered after transportation.","The list of UIS gives information about what kinds of artifacts are expected to be received, and the appropriate modification to be automatically applied to them, if any. The computer systems across the landscape automatically learn this information using process  to track artifact updates that are executed either manually by users via software tools, or automatically by different system processes.","For example, at  a user may update a database connection of a BI Report through a client tool or through server configuration distribution. A user may check-in a version into Version Management with a database configuration different from that of a previous version. Alternatively, at  to , the computer system (or the destination computer system environment) may be registering metadata updates done by users or as a result of automated methods. Such updates may include changes to type of database connection of a BI Report through a report designer. The destination computer system stores correspondence between the old database connection, which may be included in the respective UIS, and the new database connection.","For example, new fields may be added to the specific UIS record in the list of UISs. The new fields hold the corresponding old and new values of the database connection parameters. These mapped values would essentially specify the new database connection properties for the BI Report artifact in the destination environment. This way, new artifacts coming from different source environments configured to connect to an old database may now be automatically redirected to a new database. The destination environment adapts to the applied modifications to automatically change the newly received artifacts.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 5","FIG. 3","FIG. 4"],"b":["500","505","510","300","400"]},"If the check at  confirms a match of the received artifact to a particular UIS, a new check is performed at  to find out whether a mapping to a new state exists for the artifacts matching the UIS. In one embodiment, the locally stored list of UISs may contain only UISs for which a modification of the matching artifacts has been tracked. At , the received artifact is automatically updated to the new state, when there is such mapping stored for the matching UIS. The received artifact, whether modified or not, is stored and executed in the receiving computer system at .","Processes ,  and  illustrated in ,  and , respectively show how the modification of computer system landscape artifacts may be automatically performed. Once an artifact is altered, e.g., manually or automatically reconfigured, the change is recorded and automatically applied to other artifacts of the same kind received afterwards. The processes ,  and  define an adaptive change management automatically applied in distributed systems. In one embodiment, the modification of an artifact in a computer system may trigger automatic modification of the artifacts of the same kind already present in the system. Such automatic modification may be triggered in other computer systems from the same or from other environments of the landscape as well.","In one embodiment, a computer system landscape is scanned by a centralized service for artifacts that could be transported between different environments or between different computer systems.  shows computer system landscape  where the included nodes are presented along different phases of identification of artifacts, according to one embodiment. Environments ,  and  are labeled as source environment, e.g., to encompass a number of \u201cM\u201d environments or computer systems that send artifacts of different kinds -, - and -, respectively, to other environments. Accordingly, the source environments ,  and  are scanned to identify objects that could be transported to destination environments. In , environments ,  and  are labeled as destination environments to encompass a number of \u201cK\u201d environments or computer systems in the landscape  that could receive artifacts from the source environments ,  and .","The separation of the environments or the computer systems , , , ,  and  of the landscape  to source and destination as shown in  may be just for illustrative purposes. One environment may act as both source environment and destination environment in different scenarios for transporting artifacts.","Centralized system  includes scan service  and mapping service . In one embodiment, the centralized system  is separate from source and destination environments , , , ,  and . The scan service  craws or data-mines the source environments ,  and  to identify new artifacts available for transportation. The exact scanning algorithm may depend on the implementation of the scan service and on the setup of the computer systems to be scanned for artifacts. The scanning may be performed by a background process that reads artifacts of specific kinds under predefined conditions across landscape nodes associated with source environments ,  and .","In one embodiment, scan service  may accumulate artifacts of different kinds. The scan service  may use the accumulated artifacts to create unique identification sections for the separate kinds of artifacts based on sets of predefined attributes of the artifacts. Additionally, the generation of the UISs for the different kinds of artifacts may be further based on the values assigned to the sets of attributes. The centralized system  may store the information for the scanned kinds of artifacts in a local repository or database . The generated UISs  may be stored as separate records in one or more related database tables.","The UIS records may be broadcasted to destination environments ,  and  where they may be stored in corresponding destination repositories ,  and , respectively. In one embodiment, UIS records ,  and  replicate the originally created UISs . Alternatively, the original list of UISs  may be filtered for some or all of the destination environments ,  and . Based on such filtering, only UISs for those kinds of artifacts that could be imported in an environment (,  or ) may be replicated to that environment.","In one embodiment, the artifacts transported to the destination environments ,  and , e.g., the different kinds of artifacts -, - and -, respectively, may be modified. The reception of an artifact at the new (destination) environment is usually followed by manual setup of the artifact or automatic reconfiguration, e.g., by using various computer system tools . The changes made to the artifact may be used to create a mapping between the old and the new configuration for all artifacts of the same kind. In one embodiment, the mapping is defined centrally by mapping service  of centralized system . The centrally specified mapping may be stored in centralized repository  along the matching UIS records .","The UIS records  combined with the tracked modifications can be broadcasted to the destination environments, e.g., ,  and , of the computer system landscape , and stored in the local database repositories ,  and  together with the replicated UISs ,  and , respectively. The tracked modifications may be filtered to be sent only to relevant destination environments based on predefined conditions, e.g., only to destination environments that could receive artifacts of the corresponding kinds.","Alternatively, the tracking of changes done to transported artifacts may be performed by local mapping services within the destination environments ,  and , and stored locally along with the already replicated UISs ,  and , respectively.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 7","FIG. 7"],"b":["700","710","720","730","712","716","722","726","732","736","770","780","790","772","776","782","786","792","796","745","740","747","740","710","720","730","770","780","790"]},"When an artifact is transported to one or more of the destination environments ,  or , a predefined set of properties of the artifact are read or extracted to be matched against the UIS records ,  or , respectively, stored in the local repositories ,  and . The received artifact is automatically modified when a matching UIS for the artifact is found, and a mapping to a new state or configuration for that kind of artifacts have been tracked. Mapping services ,  and  in destination environments ,  and , respectively, may be used for tracking the modifications to the artifacts and\/or for automatically update the received artifacts corresponding to the tracked modification, according to one embodiment.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 8","b":["800","800"]},"In one embodiment, users  interact with computer system environment through client systems , e.g., using Internet browser client program . Different computer systems built on various platforms may be configured to define a number of computer system environments in the landscape . The different computer system nodes of the landscape  communicate with each other via network - using different network protocols, e.g., Hypertext Transfer Protocol Secure (HTTPS)  and ; Common Object Request Broker Architecture (CORBA\/C1) , ,  and ; Remote Function Call (RFC\/C2)  and ; etc.","In one embodiment, a SAP\u00ae BusinessObjects\u2122 Business Intelligence Platform, e.g., Business Object Environment (BOE), core server  is used as central server to execute adaptive lifecycle management (LCM). The BOE core server  may run scan service hosted on its implemented adaptive processing server (APS). The scan service reads objects of different kinds across all possible source repositories, e.g., Derby database (Derby DB\u00ae)  of source systems , source Java\u00ae Application Server (Java AS) , Source ABAP\u00ae System . Out of all accumulated source objects of particular kind, a set of predefined properties are extracted to create a matching UIS. The created UISs may be persisted in the source BOE repository , e.g. a Derby DBS of the central LCM server .","The scanned information is multicast to all possible destination repositories, e.g., Destination BOE Repository ; Derby DB\u00ae  of destination computer system ; destination Java AS , destination ABAP\u00ae system . Change and Transport System (CTS+) framework may be used for this transportation. In one embodiment, the CTS+ framework includes CTS+Java\u00ae proxy , CTS+ ABAP\u00ae Core  and . Export logic  and landscape configuration  are modules that may provide export services for the created UISs and for different artifacts.","For example, an UIS created for particular kind of artifacts, e.g., for BI Reports, may be stored as an LCM job, and then passed on to the export engine of source CTS+, e.g. CTS+Java\u00ae proxy  in the form of an LCM Business Intelligence Archive (BIAR) file . The LCM BIAR file  is then put into a Transport Request (TR), e.g., TR  and , whose path has already been configured to reach required destinations. CTS+ framework sends the LCM BIAR file  to each destination repository. For example, the LCM BIAR file  may be loaded through job importer logic  and processed by an Adaptive Job Server (AJS) at the destination BOE server . The corresponding database entries present in the job, e.g., UIS records, are extracted and persisted in the destination Derby DB\u00ae BOE repository . The database entries may be transferred from the destination BOE repository  or directly recorded in Derby DB\u00ae  of destination system  using scan logic on APS  and Job processing on AJS  modules of the system .","Artifacts in the form of LCM jobs may also arrive from the source repositories to the destination environments. When such a job is processed, e.g., by scan logic on APS element , the included artifacts are extracted and a set of predefined properties are read to create unique identification sections for the different kinds of artifact. The UIS records stored in the local destination repositories are then searched for a match. In case a match is found, the corresponding mappings are applied, e.g., by job processing on AJS element , and the artifact is committed with the applied changes to the destination BOE repositories .","In one embodiment, import plugin element  may provide Web Unified Resource Locator (URL) where a BIAR job to be uploaded via upload mechanism. The Web upload may be further processed via deploy Web service module .","Some embodiments may include the above-described methods being written as one or more software components. These components, and the functionality associated with each, may be used by client, server, distributed, or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as, functional, declarative, procedural, object-oriented, lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively, the components maybe implemented in server and client applications. Further, these components may be linked together via various distributed programming protocols. Some example embodiments may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example, a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level (e.g., a graphical user interface). These first and second computer systems can be configured in a server-client, peer-to-peer, or some other configuration. The clients can vary in complexity from mobile and handheld devices, to thin clients and on to thick clients or even other servers.","The above-illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term \u201ccomputer readable storage medium\u201d should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term \u201ccomputer readable storage medium\u201d should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store, encode, or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described, represented, or illustrated herein. Examples of computer readable storage media include, but are not limited to: magnetic media, such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROMs, DVDs and holographic devices; magneto-optical media; and hardware devices that are specially configured to store and execute, such as application-specific integrated circuits (\u201cASICs\u201d), programmable logic devices (\u201cPLDs\u201d) and ROM and RAM devices. Examples of computer readable instructions include machine code, such as produced by a compiler, and files containing higher-level code that are executed by a computer using an interpreter. For example, an embodiment may be implemented using Java, C++, or other object-oriented programming language and development tools. Another embodiment may be implemented in hard-wired circuitry in place of, or in combination with machine readable software instructions.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 9","b":["900","900","905","955","900","940","955","910","915","910","915","905","915","900","925","930","900","925","930","900","935","900","950","950","900","945","900","920","960","960","960","950","960"]},"A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases, such as, relational, transactional, hierarchical, multi-dimensional (e.g., OLAP), object oriented databases, and the like. Further data sources include tabular data (e.g., spreadsheets, delimited text files), data tagged with a markup language (e.g., XML data), transactional data, unstructured data (e.g., text files, screen scrapings), hierarchical data (e.g., data in a file system, XML data), files, a plurality of reports, and any other data source accessible through an established protocol, such as, Open DataBase Connectivity (ODBC), produced by an underlying software system (e.g., ERP system), and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams, broadcast data, and the like. These data sources can include associated data foundations, semantic layers, management systems, security systems and so on.","A semantic layer is an abstraction overlying one or more data sources. It removes the need for a user to master the various subtleties of existing query languages when writing queries. The provided abstraction includes metadata description of the data sources. The metadata can include terms meaningful for a user in place of the logical or physical descriptions used by the data source. For example, common business terms in place of table and column names. These terms can be localized and or domain specific. The layer may include logic associated with the underlying data allowing it to automatically formulate queries for execution against the underlying data sources. The logic includes connection to, structure for, and aspects of the data sources. Some semantic layers can be published, so that it can be shared by many clients and users. Some semantic layers implement security at a granularity corresponding to the underlying data sources' structure or at the semantic layer. The specific forms of semantic layers includes data model objects that describe the underlying data source and define dimensions, attributes and measures with the underlying data. The objects can represent relationships between dimension members, provides calculations associated with the underlying data.","Although the processes illustrated and described herein include series of steps, it will be appreciated that the different embodiments are not limited by the illustrated ordering of steps, as some steps may occur in different orders, some concurrently with other steps apart from that shown and described herein. In addition, not all illustrated steps may be required to implement a methodology in accordance with the presented embodiments. Moreover, it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.","The above descriptions and illustrations of embodiments, including what is described in the Abstract, is not intended to be exhaustive or to limiting to the precise forms disclosed. While specific embodiments and examples are described herein for illustrative purposes, various equivalent modifications are possible, as those skilled in the relevant art will recognize. These modifications can be made in light of the above detailed description. Rather, the scope of the specification is to be determined by the following claims, which are to be interpreted in accordance with established doctrines of claim construction."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The claims set forth the scope with particularity. The embodiments are illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. The embodiments, together with its advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
