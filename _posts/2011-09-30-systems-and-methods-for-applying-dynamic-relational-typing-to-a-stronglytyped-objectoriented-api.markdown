---
title: Systems and methods for applying dynamic relational typing to a strongly-typed object-oriented API
abstract: A computer-implemented method includes executing instructions stored on a computer-readable medium. The computer-implemented method includes receiving, at a server hosting a strongly-typed object-oriented application programming interface (API), a single API call to request data from the strongly-typed object-oriented API, where the single API call includes a tuple having multiple object types, obtaining the requested data and returning the requested data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08782601&OS=08782601&RS=08782601
owner: BMC Software, Inc.
number: 08782601
owner_city: Houston
owner_country: US
publication_date: 20110930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This description relates to systems and methods for applying dynamic relational typing to a strongly-typed object-oriented application programming interface (API).","Object-oriented APIs may be used in a web services environment. For example, a web services server may expose an API to enable a client computing device to obtain data from the web services server through the API. In certain scenarios, the object-oriented API may have certain drawbacks. For instance, the object-oriented API may be difficult for a programmer to program against when creating a dashboard-type user interface (UI). In a dashboard-type UI, it may be desirable to show summaries of data across several class types. However, in order to return these summaries, the summaries have to be pre-defined as classes in the object model. Otherwise, the summaries would not be able to be returned. Developers may bypass the API layer in favor of directly accessing the database, which may result in a loss of database security and\/or database integrity. Additionally or alternatively, the server hosting the database may need to support multiple APIs in order to support returning the desired summaries of data, which may mean that developers would need to learn and be able to program against multiple, different APIs to obtain the desired data.","In a similar manner, developers may desire to show a composite view across a number of different objects. However, in order to return the composite view, the developer may need to use multiple API calls to obtain the necessary information to construct the desired composite view. It may be desirable to provide systems and methods to improve the efficiency and ease with which data may be returned using an object-oriented API.","According to one general aspect, a computer-implemented method includes executing instructions stored on a computer-readable medium. The computer-implemented method includes receiving, at a server hosting a strongly-typed object-oriented application programming interface (API), a single API call to request data from the strongly-typed object-oriented API, where the single API call includes a tuple having multiple object types, obtaining the requested data and returning the requested data.","In another general aspect, a computer program product is tangibly embodied on a computer-readable medium and includes executable code that, when executed, is configured to cause a data processing apparatus to receive, at a server hosting a strongly-typed object-oriented application programming interface (API), a single API call to request data from the strongly-typed object-oriented API, where the single API call includes a tuple having multiple object types, obtain the requested data and return the requested data.","In another general aspect, a computer system includes instructions recorded on a computer-readable medium and that are executable by at least one processor. The system includes a strongly-typed object-oriented application programming interface (API) layer that includes a strongly-typed object-oriented API, where the API layer is configured to receive a single application programming interface (API) call to request data ,where the single API call includes a tuple having multiple object types, obtain the requested data and return the requested data.","Implementations of the above general aspects may include one or more of the following features. For example, the requested data may be returned as a list of tuples. The API call may further define relationships between the multiple object types in the tuple. The requested data may be obtained by the strongly-typed object-oriented API according to the relationships between the multiple object types in the tuple as defined in the API call. The requested data may be returned as a list of tuples as obtained by the strongly-typed object-oriented API. The multiple object types may be pre-defined.","In another general aspect, a computer-implemented method includes executing instructions stored on a computer-readable medium and also includes generating a single application programming interface (API) call to request data from a server hosting a strongly-typed object-oriented API, where the single API call includes a tuple having multiple object types, sending the API call to the server and receiving the requested data.","Implementations may include one or more of the following features. For example, the requested data may be received as a list of tuples. The API call may further define relationships between the multiple object types in the tuple. The multiple object types may be pre-defined.","The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings, and from the claims.","This document describes systems and methods for applying dynamic relational typing to a strongly-typed object-oriented application programming interface (API). In one exemplary implementation, the systems and techniques include using a strongly-typed dynamic tuple in a single API call to request the return of results in an object-oriented environment as defined on the client side within the tuple in the single API call. For example, a search API call may be used, where a tuple within the body of the search call defines the object type and the relationship between the object types within the tuple. In this manner, developers may obtain the desired data from the server using the single API call, including data to support summaries of data across multiple class types and\/or data to support composite views of the data. Developers would not need to issue multiple and\/or nested queries to obtain the desired data. Moreover, since it is a strongly-typed dynamic tuple, the integrity and security of the data is protected, as there is no need to bypass the API layer to obtain the desired data. Thus, the server on which the data resides can enforce the API semantics.","Referring to , an exemplary block diagram illustrates a computer system . The computer system  may be, for example, a computer server (\u201cserver\u201d) that is configured to host a database. In one exemplary implementation, the server may be a web services server. In other exemplary implementations, the server may be a different type of server.","The computer system  may include a combination of hardware and software components and\/or computer applications to perform various processes. The computer system  may include at least one processor  and at least one memory . That is, for example, the computer system  may rely on at least one processor  and also may rely on two or more processors executing in parallel to achieve a desired result. The processor  may be configured to execute instructions that are stored on the at least one memory , which also may be referred to as a computer-related storage medium, and to cause the processor to perform certain actions and\/or functions. Meanwhile, the memory  may represent any conventional type of computer memory which may be used, for example, to store instructions which, when executed by the at least one processor , cause other components within the computer system  to perform various functions, and other relevant functions described herein. The computer system  may include other hardware and\/or software components, which are not illustrated in this exemplary block diagram.","In one exemplary implementation, the computer system  may be a server. In other exemplary implementations, the computer system  may be a different type of computing device that is configured to perform the same functions described herein as the computer system . Also, while a single computer system  is shown for illustration purposes, the computer system  may be a combination of one or more computer systems  that are configured to perform the same functions as described herein.","The computer system  includes a data storage module  (\u201cdatabase\u201d) and an application programming interface (API) layer . The database  may be any type of database including an object-oriented database, a relational database management system (RDBMS), or other type of database. In one exemplary implementation, information (or data) within the database  may be represented in the form of objects. In other exemplary implementations, the database  may be represented in other formats.","The database  may include information that is to be accessed by computing devices remote to the computer system . For example, the database  may receive search queries, obtain data from the database  and return the requested data to the requesting computing device.","Referring also to , an exemplary block diagram illustrates the computer system  of  connected to a communications network  to enable communications with other computing devices such as, for example, computing devices ,  and . When interfacing and accessing the computer system , the computing devices ,  and  may be referred to a client devices. The computing devices ,  and  may be any type of computing devices including, for example, personal computers, work stations, notebook computers, netbook computers, laptop computers, tablet devices, smartphone devices and any combination of these types of devices. The illustration of three computing devices ,  and  is not meant to limit the number of devices that can communicate with the computer system  and is for illustration purposes.","The communications network  may be any type of wired and\/or wireless communications network including, for instance, a local area network (LAN) and\/or a wide area network (WAN), including the Internet. In one exemplary implementation, the computer system  may be a part of a corporate intranet system and the computing devices ,  and  may be client devices that communicate with the computer system  using the communications network .","The API layer  provides an API, which is an interface between the database  and devices remote to the computer system . For example, the API layer  may provide an interface between the database  and one or more of the computing devices ,  and , which may need to interact with the database  through the communications network .","In one exemplary implementation, the API layer  is a strongly-typed object-oriented API layer that includes a strongly-typed object-oriented API  that is capable of interfacing with the database . The API layer  is configured to receive API calls, where the API calls include requests to perform operations on the database  including, for example, reads, writes, updates, create, deletes and other operations or combinations of operations. The API calls also may include requests to the API layer  and the API  to obtain information or to query not only the database , but also from other sources including, for example, applications and\/or other databases.","The API layer  may include an object model . The object model  may define the objects contained in the database . The object model  may define the objects in terms of object class or objects types -The object model  may define an unlimited number of object types -","The use of an API enables software or application developers to write code that is compatible with the API in order to interface and interact with the database . The developers may use one or more programming languages (e.g., object-oriented programming languages) to write programs or code that is compatible with the API to perform operations on the database  and to receive information from the database  through the API in the API layer . In this manner, the computer system  exposes the API in the API layer  such that developers may program against the API to interface with the database  from other computing devices (e.g., computing devices ,  and ). The strongly-typed object-oriented API layer  may be configured to expose to the client (e.g., computing devices ,  or ) that the database  includes a store of objects, even if the database  is not an object-oriented database.","In one exemplary implementation, the API in the API layer  may be a strongly-typed object-oriented API (e.g., a strongly-typed object-oriented web services API). A strongly-typed object-oriented API means that the API layer  enforces the semantics for interacting with the API to protect the security, bounds checking and integrity of the database , which operates behind the API layer . There is syntactical enforcement of the object types. In contrast, a weakly-typed API may not have any syntactical enforcement and, thus, weaken the security and integrity of a database.","In one exemplary implementation, the API layer  may be configured to receive a single API call that requests data from the API , which the API  may obtain from a source (e.g., the database ). The single API call may include a tuple that includes multiple object types in the tuple. The single API call also may define the relationships between the multiple object types contained in the tuple. The object types may be known and predefined in the object model  (e.g., Type 1 ()...Type N ()). However, the particular grouping or relationships between the object types may not be known in advance by the object model 106 or the database 102, in general. Instead, the grouping or relationships defined in the single API call are defined by the requesting device defines the relationship between the object types in the tuple. The API layer  is configured to receive, recognize and act on this type of API call that includes such a tuple. The API layer  is configured to process the API call and to obtain the requested data from the desired source (e.g., the database ) and to return the data, as requested, to the requesting party.","In this manner, a new class of objects or object types may be defined in this API call with this dynamically typed tuple. The known object types may serve as the building blocks for defining the new grouping of the object types. This enables the API layer  to remain a strongly-typed API and, at the same time, allow for flexibility for requesting devices to obtain composite data grouped in a particular manner as defined by the requesting device using a single API call. The tuple is dynamically typed because it can be defined to include any known object type.","For example, the below Code Snippet  provides an exemplary syntax of the single API call. The exemplary syntax is provided as an illustration and is not meant to be limiting. Other syntaxes may provide the same functionality as the one in the Code Snippet .",{"@attributes":{"id":"p-0033","num":"0032"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Code Snippet 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003POST ...\/<classname>\/search"]},{"entry":[{},"\u2003JSON body {"]},{"entry":[{},"\u2003\u2002Tuple = (<classname> as myObj, <classname>.r1.r2.r3 as myR3,"]},{"entry":[{},"<classname>.r4.r5 as myR5, <classname>.a1 as myA1)"]},{"entry":[{},"\u2003\u2002Criteria = (some Boolean expression on myObj, myR3, myR5 and"]},{"entry":[{},"myA1)"]},{"entry":[{},"\u2003}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In Code Snippet , the \u201cPOST\u201d function is a search API call requesting to perform a search on the database (e.g., database ). The \u201cPOST\u201d is an hypertext protocol (HTTP) command. The \u201cTuple\u201d includes as object types \u201cmyObj,\u201d \u201cmyR3,\u201d \u201cmyR5\u201d and \u201cmyA1.\u201d The object types would correspond to known object types in the object model  (e.g., Type 1 (), etc.). The \u201cCriteria\u201d in the API call defines the relationship between the object types listed in the tuple. In one exemplary implementation, the \u201cCriteria\u201d may define the relationship between the object types using one or more Boolean expressions or some other type of operators that are configured to express relationships between items.","The API layer  would receive the API call, as illustrated in Code Snippet , and the API  would process the API call to obtain the data from the database , as defined in the API call. The API layer  would return the requested data. The requested data is returned as a list of tuples of objects of the type (<classname>, the type of <classname>.r1.r2.r3, the type of <classname>.r4.r5, the type of <classname>.a1).","The requesting party may then use the returned data in the form of the list of tuples in various manners. For example, the requested data may be for use in a user interface. For example, a developer may design a custom user interface that uses data from the database , as requested and obtained through the API  in the API layer  using API calls, including API calls having one or more tuples, as illustrated and described above. In this manner, the API call specifies the data type to be returned. The tuple itself is a first class object and the introduction of the request for the tuple introduces a new class to the object model at runtime, where each member of the tuple is an object type in the object model (including other tuples).","While the Code Snippet 1 illustrates an API call with a single tuple having multiple object types, other single API calls may include multiple tuples, where each tuple includes multiple object types. The single API calls with multiple tuples also may include one or more statements (e.g., \u201cCriteria\u201d statement) that defines the relationship between the object types and that specifies the data being requested.","Referring to , an exemplary diagram of an object model  is illustrated. The object model  includes the object types Pod Container Blueprint and Network Container In this example, assume the requestor desires to obtain and show the Pod the Container Blueprint with which the Pod is compatible and the Network Container created in the Pod from the Container Blueprint Using a conventional object-oriented API, it would be necessary to issue nested queries and then to merge the data, which would require a lot of coding on the client side and ultimately is not efficient.","Instead, a single API call may be issued to obtain the desired data, as shown below in Code Snippet .",{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Code Snippet 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003POST ...\/Pod\/search?1=CB.name&2=NC.name"},{"entry":"\u2003Tuple = (Pod as PD, ContainerBlueprint as CB, NetworkContainer as"},{"entry":"\u2003NC)"},{"entry":"\u2003Criteria = (PD.containerBlueprints contains CB and PD.containers"},{"entry":"contains NC and CB.networkContainers contains NC)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The \u201cPOST\u201d search mechanism is used to issue a search for Pod . The \u201cTuple\u201d includes the list of the desired object types: Pod , Container Blueprint and Network Container . The \u201cCriteria\u201d defines the desired relationship between the object types listed in the tuple. As noted above with respect to Code Snippet , the syntax used in Code Snippet  is merely exemplary and other code snippets may be used.","The API layer  is configured to receive the API call as illustrated in","Code Snippet  and to process the API call using the API  to obtain the requested data from the database  (assuming that object model  was included as the object model  in the computer system  of ). The API layer  would return the result to the requesting party, where the result is a list of tuples that each includes three elements. The result may be returned in the form of a three column table using the single API call.","Referring to , a flowchart of an exemplary process  is illustrated. Process  includes receiving, at a server hosting a strongly-typed object-oriented API, a single API call to request data from the strongly-typed object-oriented API, where the single API call includes a tuple having multiple object types (). For example, as discussed above, the API layer  may receive the single API call. The API layer  may be a strongly-typed object-oriented API layer. The tuple may include a statement that defines the relationship between the objects listed in the tuple. The request may originate from one of the computing devices ,  or  through the communications network .","Process  includes obtaining the requested data (). For example, as discussed above, the API layer  may use the information in the tuple and the statement defining the relationship of the object types in the tuple to obtain the data a source (e.g., from the database ).","Process  includes returning the requested data (). For example, the API layer  may return the requested data to the originating party (e.g., to one of the computing devices ,  or  through the communications network ).","Referring to , a flowchart of an exemplary process  is illustrated. Process  includes generating a single API call to request data from a server hosting a strongly-typed object-oriented API, where the single API call includes a tuple having multiple object types (). For example, one of the computing devices ,  or  may generate the single API call to request data from the API layer  on the computer system . The API call may include the tuple and a statement defining the relationship of the object types listed in the tuple, as discussed above.","Process  includes sending the API call to the server (). For example, one of the computing devices ,  or  may send the API call to the computer system  through the communications network .","Process  includes receiving the requested data (). For example, one of the computing devices ,  or  may receive the requested data from the computer system  through the communications network .","Implementations of the various techniques described herein may be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. Implementations may be implemented as a computer program product, i.e., a computer program tangibly embodied in an information carrier, e.g., in a machine-readable storage device, for execution by, or to control the operation of, data processing apparatus, e.g., a programmable processor, a computer, or multiple computers. A computer program, such as the computer program(s) described above, can be written in any form of programming language, including compiled or interpreted languages, and can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.","Method steps may be performed by one or more programmable processors executing a computer program to perform functions by operating on input data and generating output. Method steps also may be performed by, and an apparatus may be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).","Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. Elements of a computer may include at least one processor for executing instructions and one or more memory devices for storing instructions and data. Generally, a computer also may include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. Information carriers suitable for embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory may be supplemented by, or incorporated in special purpose logic circuitry.","To provide for interaction with a user, implementations may be implemented on a computer having a display device, e.g., a cathode ray tube (CRT) or liquid crystal display (LCD) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.","Implementations may be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation, or any combination of such back-end, middleware, or front-end components. Components may be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.","While certain features of the described implementations have been illustrated as described herein, many modifications, substitutions, changes and equivalents will now occur to those skilled in the art. It is, therefore, to be understood that the appended claims are intended to cover all such modifications and changes as fall within the scope of the embodiments."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 5","FIG. 2"]}]},"DETDESC":[{},{}]}
