---
title: Distributed data revocation using data commands
abstract: A policy proxy intercepts a data stream between a data server and a user or other device, identifies the user device, and identifies a policy in an integrated policy server applicable to the user device based on the identity of the user device. The policy proxy may identify one or more of the policy elements based on the user device, and translate the policy elements into actions involving the data stream between the data server and the user device so as to implement at least one aspect of the identified policy. The actions can comprise permitting normal exchange of data between the data server and the user device, preventing communication between the data server and the user device, or modifying the data stream between the data server and the user device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08935384&OS=08935384&RS=08935384
owner: McAfee Inc.
number: 08935384
owner_city: Santa Clara
owner_country: US
publication_date: 20110506
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCES TO RELATED APPLICATIONS","STATEMENT REGARDING FEDERALLY SPONSORED RESEARCH OR DEVELOPMENT","FIELD","BACKGROUND AND SUMMARY","DETAILED DESCRIPTION","Definitions (If Applicable)","Exemplary System Architecture"],"p":["This application claims the benefit of priority from provisional application No. 61\/332,088 filed May 6, 2010, incorporated herein by reference.","Not applicable.","The technology herein relates to systems, software and methods for implementing and managing security policies for mobile, portable and other devices of diverse types. More particularly, the technology herein relates to automated translation of policy specifications into data commands that effect information stored upon a device and the resulting operations upon a device that implement policy enforcement. The technology herein has applications in the areas including but not limited to portable, mobile and other devices and enterprise network security and information management.","Small portable computing devices have become ubiquitous. It is now common to see people reading their email, reviewing documents and performing various other tasks on the bus, the subway, in the park, in restaurants and just about anywhere else, using an ever-expanding range of devices. Some devices resemble personal digital assistants (PDA's), others include cellular telephone and other wireless communications functionality, and still others (e.g., the Apple IPAD) take the form of tablet computers. Business and other organizations and enterprises have embraced such technologies because of the increase in productivity and flexibility they can provide to employees and consultants.","As the variety of such portable devices has become more diverse, so have the challenges associated with enterprise or other centralized management of such devices. Security and configuration managers can use device-appropriate policy management protocols and policy servers to manage devices that connect to their networks to maintain network security, manage use of resources, detect or prevent misuse, control access to information using various policies for the different device types in use. To facilitate this, some enterprises try to standardize on only one type of handheld device that will be supported. However, end users often pressure their employers and IT specialists to support various devices. Since many users are not willing to carry multiple devices, users often end up using the same handheld device for both business and personal use. Such dual usage can create a host of management channels for enterprise IT personnel who need to be able to carefully manage and safeguard information belonging to the enterprise without comprising the user's own personal information.","Existing policy-based systems typically enable authentication of devices attempting to access the network, verifying required device configurations, and blocking access to and reporting access attempts by devices that are not authorized or configured as required by policy.","Policy Management","Policy management provides a range of powerful tools to enable or effect devices and device capabilities. Generally speaking, policies comprise one or more policy elements that each define one or more aspects of a device's configuration and\/or permitted access modes. Policies are defined in various ways, depending on the device type they apply to, the policy server used to install them and\/or to verify device compliance with them. Policies are typically disseminated from policy servers, which act as a source of policies for transport to the devices they apply to, using various policy management protocols. Policy management protocols may comprise protocols for interaction between policy servers and devices receiving policies. These protocols can provide means not only to transfer the policy to the receiving device or devices, but also to manage policies on those devices, such as by verifying that the policy has been received by the device, verifying device compliance with the policy, removing the policy, updating the policy, or other policy-related activities. The manner in which these functions are accomplished varies from one policy management protocol to another, and the functions supported also vary.","Applying a policy to user devices can be challenging for a variety of reasons, such as the plethora of mobile device types from various manufacturers, a plurality of management protocols developed by different device vendors for setting and verifying device parameters, and inconsistency between device manufacturers in the device configuration elements that are exposed and the device configuration elements that can be managed by the policy management protocols supported.","Policy management systems traditionally manage policies and data separately, and prior art policy management systems typically provide both policy and policy enforcement agents for policy, and data and data management applications for data.","In some cases, aspects of device functionality that it is desirable to manage are not supported by the policy mechanisms supplied by the device manufacturer or the on-device policy capabilities. For example, it may be desirable to remotely cause the deletion of specific information or types of information from the local storage on the device without affecting other information or types of information. This may not be possible if the policy protocol or on-device protocol support software permits only an all-or-nothing deletion mechanism, where all on-device data can be deleted under policy control, but there is no way to delete only selected information.","Policy management protocol implementations or \u201cpolicy transports\u201d are sometimes embedded within a broader data stream, such as where policy and data are passed between an applications server and a user device. Well known policy transports include, for example, Microsoft ActiveSync\u2122, BlackBerry\u2122 Policy Service (BPS), Open Mobile Alliance\u2122 (OMA) Device Management (OMA-DM), and Apple iPhone\u2122 Configuration Utility among others. In some implementations, specialized software must be installed on a user device in order to enable the device to interoperate with a specific policy transport. This is inefficient and adds to deployment cost and complexity. When aspects of device operation that are not supported by a policy transport for a given device must be managed, additional specialized software may be required, thus compounding the problem. It would be advantageous to permit accomplishing the unsupported aspects of policy enforcement without such additional specialized software, such as by repurposing device or device software capabilities not specifically intended for policy enforcement. The following is a non-exhaustive survey of some such available technologies that include various degrees of policy management:","1.1.1 Microsoft Exchange ActiveSync\u2122","Microsoft Exchange ActiveSync\u2122 (EAS) is a protocol for connecting mobile, portable and other devices to Microsoft\u2122 Exchange servers, allowing synchronization of e-mail and PIM (Personal Information Manager) data, such as tasks, calendars, and contacts, between Microsoft\u2122 Exchange and the mobile device as well as limited policy management of the device by Microsoft\u2122 Exchange.","Microsoft\u2122 has implemented the EAS protocol on Microsoft\u2122 Windows Mobile\u2122 devices, and has licensed the protocol to third-parties for use with other mobile operating systems. Licensees include Nokia Symbian S60\u2122, Sony Ericsson UIQ\u2122, and Apple iPhone\u2122, handset OEMs such as Motorola\u2122, HTC\u2122, and Samsung\u2122 and third party synchronization vendors such as DataViz\u2122. These vendors license and implement the client-side EAS Application Programming Interface (API).","The EAS protocol may include three relevant areas of processing: Handshake, E-mail\/PIM Synchronization, and Policy Push. The term \u201cpush\u201d, as used herein, refers to a method of data or command transfer where a server initiates an exchange with a client. The opposite of a \u201cpush\u201d is a \u201cpull\u201d, where the exchange is initiated by the client. \u201cPull\u201d is sometimes referred to as \u201cpolling\u201d when a pull operation is performed on a periodic basis.","Handshake: Although EAS supports push e-mail from a server, EAS depends upon the mobile device to initiate the connection to the server. It is the device's responsibility to connect (and re-connect, if a connection is lost) to the server, to create the session over which e-mail, PIM, and policy information can be pushed. Establishment of a session generally involves an authentication handshake, which identifies the device user (by Active Directory\u2122 (AD) Username) and the device (by EAS Device ID and EAS Policy Key) to the Microsoft\u2122 Exchange Server, associating the session with a mailbox for the purpose of e-mail and PIM synchronization, and with a user and an AD group for the purpose of policy push. The EAS Policy Key is used as a first stage check to prevent continued communication if the Policy Key is not provided or is not valid. The user is authenticated either by passing the user's AD password in the protocol, or by using a client or machine certificate for client-side authentication.","E-mail\/PIM Synchronization: Both the device and the Microsoft\u2122 Exchange server can \u201cpush\u201d new (or changed) information to each other. For example, new e-mail can be pushed from Microsoft\u2122 Exchange to the device. New or modified contacts, calendar entries, and other PIM information can be pushed as well. E-mail sent from the device is pushed to the Microsoft\u2122 Exchange Server, as well as PIM information created or changed on the device. The protocol specifies mechanisms for keeping changes synchronized between Microsoft\u2122 Exchange and client devices.","Policy: The Microsoft\u2122 Exchange Server can also push policies to the device. These policies can comprise actions such as \u201cDevice Wipe\u201d which causes the device to clear its local storage and return the device configuration to its original factory state. Other policies can specify use of secure operation features, such as a requirement that the device lock itself after a period of (user) inactivity and require from the user a password or PIN of certain complexity to unlock. The device acknowledges receipt of such policies, so Microsoft\u2122 Exchange can assume that the policy has been enforced.","1.1.2 Synchronization Using Microsoft Exchange ActivSync","In the Exchange ActivSync (EAS) protocol, synchronization is the process of reconciling differences between data that is stored on a client (such as a mobile device) and data that is kept on a server, such as a Microsoft Exchange server. Both the client and the server maintain their own copies of data and keep track of changes that have been made since the last time the two were synchronized. The client initiates synchronization by sending a sync command to the server to request that the server respond with updates. The server processes any updates that it receives, resolves any conflicts, and sends the list of changes back to the client, which updates its local copies to match.","The EAS protocol also provides a monitoring mechanism, \u201cping\u201d, that enables the client to request notification if specific folders on the server are changed, such as when a new e-mail message arrives in a folder. Because all synchronization is initiated by the client, the mechanism uses a ping-to-pull model in which the server sends a notification of the change to the client, and the client responds by requesting synchronization.","All communication between the client and server is initiated by the client. When the client communicates with the server, the client sends a request to the server as an HTTP POST message, using UTF-8 encoding. The server then sends back a response to the POST message. The request and response each have a header and a body (which may be empty). Each POST message contains a single command, such as a sync or ping command.","Before a folder can be synchronized, an initial synchronization key must be obtained from the server. The client obtains this synchronization key by sending the server an initial synchronization request where the synchronization key is zero. The server responds with updated data and a new synchronization key value, which is generated by the server for each transaction. The client stores the returned synchronization key and specifies it with its next synchronization request. To perform a full re-synchronization, the client deletes its local copy of the data in a folder and then requests synchronization with a synchronization key value of zero (0) to get the current data from the server.","The foldersync command synchronizes the folder list between the client and the server, but does not synchronize the data in the folders. Foldersync works similarly to the sync command. An initial foldersync command with a synchronization key of zero is required in order to obtain the list of folders and the synchronization key associated with that list. The returned synchronization key can be used in subsequent foldersync commands to obtain folder list changes from the server. A list containing all folder specifications is returned to the client when a foldersync is done with a synchronization key of zero.","1.1.3 BlackBerry\u2122 Enterprise Server","BlackBerry\u2122 Enterprise Server (BES) is a push-based server from Research In Motion\u2122 (RIM\u2122) that enables a secure, centrally managed link between BlackBerry\u2122 devices and an organization's enterprise systems, applications, and wireless networks. It integrates with popular content sources such as e-mail and personal information management (PIM) systems such as IBM Lotus Domino\u2122 and Microsoft\u2122 Exchange, and is designed to provide secure access to e-mail, organizer data, instant messaging, Web browser, and other enterprise applications. It provides this access by retrieving information from enterprise content sources and \u201cpushing\u201d this content to a BlackBerry\u2122 mobile device. In addition to applying policies to individual devices, administrators can create groups of mobile devices, then apply policies for one or more groups. Approximately 450 different policies can be applied to individual devices or groups of BlackBerry\u2122 devices, ranging from enforcing password protection and controlling access to third party mobile applications, to controlling the use of certain device features, such as use of the camera or making video recordings.","1.1.4 Open Mobile Alliance\u2122 Device Management","The Open Mobile Alliance\u2122 (OMA) Device Management (DM) specification is designed for management of small mobile devices such as mobile phones, PDAs, and palm top computers. Device management includes, for example, provisioning, configuration, software installation or upgrade, and status reporting. A device may implement all or a subset of these features. Since the OMA-DM specification is intended for use with mobile devices, it is designed with sensitivity to memory and storage space limitations, communication bandwidth constraints, and security.","OMA-DM uses Extensible Markup Language (XML) for data exchange; specifically the sub-set defined by Synchronization Markup Language (SyncML). Device management is through a client-server relationship between a server and the client device being managed. OMA-DM is designed to support and utilize a variety of connection methods, such as Universal Serial Bus (USB) or RS-232 wired connections and wireless connections, such as Global System for Mobile communications (GSM), Code Division Multiple Access (CDMA), Infrared Data Association (IrDA) or Bluetooth. Transport can involve Website Project (WSP) or (Wireless Application Protocol (WAP)), Hypertext Transfer Protocol (HTTP), OBject EXchange (OBEX) or similar transport layers. Policy settings can be transferred in OMA Device Management Files (DDF), which are XML data files of known format.","The communication protocol used by OMA-DM is a request-response protocol. Authentication and challenge of authentication are included to ensure the server and client are communicating only after proper validation. The initial message from the server to a client is in the form of a notification, or alert message. Once the communication is established between the server and client, a sequence of messages is exchanged to complete a given device management task. OMA-DM provides for alerts, which are messages that can occur out of sequence, and can be initiated by either server or client. Such alerts are used to handle errors, abnormal terminations, etc.","The protocol specifies an exchange of \u201cpackages\u201d during a session. The packages consist of several messages, and a message in turn consists of one or more commands. The server initiates the commands and the client executes the commands and returns the results in a reply message. In some instances, the command includes policy elements to be set on the device. In others, the command reports aspects of the device's configuration status back to the server.","1.1.5 iPhone\u2122 Configuration Profiles","iPhone\u2122 Configuration profiles define one or more iPhone\u2122 settings. Configuration profiles are XML files that contain device security policies and restrictions, virtual private network (VPN) configuration information, Wi-Fi\u2122 settings, e-mail and calendar accounts, and authentication credentials that permit devices to work with enterprise systems. Configuration profiles can be installed on devices connected via USB using the iPhone\u2122 Configuration Utility, or configuration profiles can be distributed by e-mail or through a webpage. When users open the profile e-mail attachment or download the profile using the Safari\u2122 web browser on their device, they are prompted to begin the Configuration profile installation process.","1.1.6 Some Policy Enforcement Mechanisms","Generally speaking, previous policy enforcement mechanisms block access and\/or usage rights to specific services on a network, or require the performance of a specific action on a policy-managed device. See as one example RFC2748\u2014The COPS (Common Open Policy Service) Protocol. The first case (blocking) generally does not enforce the policy against specific data already on a policy managed device, and the second (requiring specific action) generally requires specialized software on the policy managed device, such as a policy enforcement agent. Both suffer drawbacks from their respective implementations.","The model of wiping all data from a mobile device upon termination of an employee is becoming increasingly problematic. Many mobile devices store information belonging to more than one user or organization, for example when a mobile device, such as an iPhone, is used in both a personal and a business capacity. Many of the current generation of \u201csmart mobile devices\u201d are employee-owned but used in work activities as well as in their personal lives. When some devices have such mixed uses and contain data owned by an organization as well as data the organization has no rights to, while other devices are used exclusively for organization purposes and are organization-owned, organizations need both the ability to selectively delete data, such as wiping the contents of the device e-mail client folders used for work activities and the ability to fully wipe the entire device. While most devices today incorporate a full-wipe capability as part of their normal security profile support functionality, the ability to selectively wipe only some of the data stored in a device is typically absent and requires the provisioning of specialty software on the mobile device to accomplish the selective wipe task.","Not infrequently, mobile devices are misplaced or stolen. In other cases, an employee will leave the company's employment with a personal device that has been connected to the corporate network and contains corporate data, such as e-mails containing proprietary information (e.g. e-mail addresses, customer data, project plans, etc.). With the multitude of situations that an organization may have to contend with, it is important for the organization to have a flexible capability for removal of confidential information from a mobile device without having to wipe the entire device.","If a mobile device is lost or stolen, it is important to be able to remotely wipe the device fully and restore it to factory defaults. Prior art methods exist to identify an individual device, remotely wipe the entire device and restore it to factory settings, and to deny further access to an organization's network resources by that device. Current solutions typically push a specialty command, called a \u201cremote wipe\u201d, to the mobile device. This command causes the mobile device to remove all stored information and essentially returns the mobile device to the state it was in when it left the factory. This approach to wiping organizational information is very useful; as mentioned earlier, organizational data can exist in many places throughout the mobile device. It thus becomes important to have the capability to ensure that all organizational information can be wiped from a mobile device. Most or many current devices support such a capability.","While many use cases are served by fully wiping a mobile device, a full wipe may not always work as intended. For example, a full wipe does not work when a mobile device is configured with a firewall or other component that blocks the receipt or functioning of the \u201cremote wipe\u201d command. Similarly, disabling the mobile device-specific specialty client software can disable the \u201cremote wipe\u201d commands in devices making use of such specialty client software. In some devices, the process of performing a full wipe is not accomplished in a short time, and the device can run out of power and shut down before the wipe is complete.","Additionally, the need to selectively wipe portions of a mobile device comprising e.g., only those portions of the stored information belonging to the organization is needed, such as in cases where the device is not owned by the organization and a full wipe is inappropriate. For example, when an employee leaves an organization, the organization may want to focus on removing organizational e-mail and documents from the mobile device instead of wiping out the ex-employee's personal information, like music or family photos.","As will be clear from the disclosures below, exemplary illustrative non-limiting implementations are useful for meeting such needs without necessarily requiring specialty software to be present on the policy managed mobile device.","Non-limiting aspects of the technology herein relate to methods, systems, and devices for implementing one or more data management policies from an integrated policy server and\/or one or more policy services to a mobile device that does not necessarily have a resident policy enforcement agent or application operating sufficient to enable all aspects of the policy.","An exemplary illustrative non-limiting method preferably comprises intercepting a data stream between a data server and the mobile device, identifying the mobile device, identifying a policy in an integrated policy server applicable to the mobile device based on the identity of the mobile device, the policy including one or more policy elements, identifying one or more of the policy elements based on the mobile device, and translating the policy elements into actions involving the data stream between the data server and the mobile device so as to implement at least one aspect of the identified policy. The actions can comprise permitting normal exchange of data between the data server and the mobile device, preventing communication between the data server and the mobile device, or modifying the data stream between the data server and the mobile device.","The method may further include one or more of the steps of removing one or more data elements from a data stream, adding one or more data elements to a data stream, and\/or translating one or more of the policy elements into a form transmittable by one or more of the data streams.","One non-limiting aspect of technology herein is related to the policy-managed intermediation of data streams between a policy managed device and one or more servers, where the intermediation takes the form of translating one or more policy specifications into commands or instructions within the data stream that have the effect of enforcing the policy specification upon the mobile device. These commands and\/or instructions are processed by the policy managed device using extant capabilities present in the managed device, typically in the software used to process the data stream, and do not necessarily require or use additional special purpose software on the mobile device. Thus, the requirement for any additional policy enforcement components on the mobile device can be eliminated, reducing the complexity of the mobile device configuration.","Furthermore, by repurposing the software used to process the data stream to also provide policy enforcement, the ability to prevent policy enforcement is reduced. Interference with policy enforcement requires that the data access software be prevented from functioning, which also prevents data access. Retaining ability to access the data is effective in enforcing the policy. Thus, the commands and\/or data inserted into the data stream are effective for enforcing the policy intent on the policy-managed device.","In some exemplary illustrative non-limiting implementations, a policy proxy component intercepts communications between a mobile device and at least one server. Based at least in part on policy elements provided by a policy server, the policy proxy either permits communication between the mobile device and the one or more servers or limits communication between the mobile device and the one or more servers.","When required by the policy provided by the policy server, the policy proxy inserts, removes or substitutes data or commands in the communication stream to the mobile device that cause the mobile device to delete at least some of the data it has stored in its local data storage subsystems. When required by the policy provided by the policy server, the policy proxy inserts, removes or substitutes data or commands in the communication stream to the mobile device that cause the mobile device to delete all of the data it has stored in its local storage components. When required by the policy provided by the policy server, the policy proxy can also alter the configuration of the mobile device and\/or the configuration of one or more servers, network devices or other components required for access to the policy-protected network so as to prevent the mobile device gaining access in the future.","The functionality of the policy proxy can be implemented in a variety of arrangements, such as with a separate network device, by embedding the functionality into an existing network device, such as a network router, switch or firewall, by incorporating the policy proxy functionality into a policy server system, into each server that connects to mobile devices directly or indirectly, in a virtual machine or network appliance, or by any other appropriate mechanism.","The following definitions are used throughout, unless specifically indicated otherwise:",{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["TERM","DEFINITION"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Policy","One or more policy elements."]},{"entry":["Policy Element","Defines one or more aspects of the mobile device's"]},{"entry":[{},"configuration."]},{"entry":["Policy Server","A source of policies for transport to the devices they"]},{"entry":[{},"apply to, using various policy management protocols"]},{"entry":["Policy Transport","A policy management protocol and the policy server"]},{"entry":[{},"that implements it."]},{"entry":["Policy Management","Protocols for interaction between policy servers and"]},{"entry":["Protocol","devices receiving policies. These can provide"]},{"entry":[{},"means to transfer policies to receiving devices, to"]},{"entry":[{},"manage policies on those devices, or enable other"]},{"entry":[{},"policy-related activities"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 1","b":["1000","1100","1200","1500","1550","1100","1100"]},"Applications server  can comprise one or more computers including a processor, memory, disk storage, networking capabilities, input devices, output devices, etc.","A Policy proxy  is positioned in the communication path between mobile device  and applications server  such that it is enabled to receive, block, intercept, substitute, monitor or alter communications between the applications server  and the mobile device . Policy proxy  can be supplied with one or more policies, or policy elements, from policy server , and can use these policies to permit, limit or prevent the mobile device's  access to the server , to configure the mobile device's  security policy configuration, and for other uses as required.","Policy proxy  is also enabled to determine the current policy settings of mobile device . In this simplified architectural rendering of an embodiment of a policy proxy system, the policy proxy  receives requests for communication from a mobile device  or from an applications server  in the form of an information and\/or policy transport represented by communication path \/. The information and\/or policy transport \/ can be any type of information and\/or policy transport such as the Exchange ActiveSync\u2122 protocol, Network File System (NFS) protocol, Interactive Mail Access Protocol (IMAP), or other such protocol.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 2","FIG. 2"],"b":["2000","2011","2012","2013","2014","2011","2012","2013","2014","2020","2021","2022","2030","2040","2041","2042","2043","2050","2020","2022","2020","2021","2022"]},"Information and\/or policy transport protocols - may include, for example, EAS , BPS , OMA , and HTTP\/HTTPS or e-mail used to transport Apple\u2122 Configuration Profiles . Other transport or data access protocols can be supported as well, such as Network File System (NFS) (not shown).","One or more of the policy transport protocols - are routed through a policy proxy , which comprises one or more transport protocol-specific proxy components , , , & , and a policy arbitrator . A policy proxy is sometimes referred to as a \u201cmobile services proxy\u201d. The transport protocol-specific proxy components can include, for example, an EAS proxy component , a BPS proxy component , an OMA proxy component , an iPhone\u2122 Configuration Profile proxy component , or other proxy components configured for specific policy transport protocols as may be, or have been, developed by those skilled in the art.","A plurality of policy proxy  instances can be used to increase throughput or to segregate transport protocol traffic. The functions of one or more transport-specific proxy components and the policy arbitrator can be integrated into a single installation, or may be divided across two or more computer systems in communication to effect the functions of the policy proxy. The policy proxy and its various components are connected using a network to one or more disparate policy servers , policy integration servers  and\/or additional information resource servers  that provide it with policy, authorization and authentication, or other information.","Disparate policy servers  as described herein are those systems which provide policy and\/or report policy configuration status for a particular type of mobile device. Disparate policy servers include, for example, Microsoft\u2122 Exchange, BlackBerry\u2122 Enterprise Server (BES), and Trust Digital\u2122 Server. An integrated policy server  as described herein provides the capability to define common policies and apply them to a plurality of device types.","Information resource servers  may include authentication and authorization servers such as Kerberos, LDAP or Active Directory, calendar and messaging servers, such as those provided by Microsoft\u2122 products like Sharepoint\u2122 and Exchange, calendar servers such as those provided using an industry standard protocol such as iCal\u2122 (e.g. Apple\u2122 Calendar server), and the like.","1.1.7 Policy Proxy ()","A policy proxy  is a component that typically operates at the enterprise network boundary and intercepts, processes, and forwards policy transport and data communications between mobile devices - and applications servers -. Processing performed by policy proxies  can comprise injection of common policy-derived policy elements or commands into policy transport exchanges between the enterprise applications servers - and mobile devices -. A policy proxy  can also receive and\/or intercept data transport communications between mobile devices - and applications servers -. Such interception and processing can be done to determine whether a mobile device - is in compliance with required policies, to bring a mobile device - into compliance with required policies, to block mobile device - access to applications network resources, such as servers -, when the mobile device - is not in compliance with required policies, to assure an applications server - that a mobile device is in compliance with required policies, to translate policy elements or commands into forms compatible with a mobile device - or applications server -, to insert, alter or remove data elements or commands in data transport communications, or for other purposes such as logging or statistical information gathering. Methods of establishing proxy components in networks, and the general functionality needed to intercept and perform processing on data streams passing through proxies is well understood by those with skill in the art. The technology herein extends the known concepts of network proxies so as to provide the policy-related functionality described herein. A policy proxy  can be implemented in a plurality of ways, such as in a component of a firewall, as a stand-alone device, or as a service on a network.","The policy proxy  can function as a proxy service for one or more policy transports -, in which the policy proxy  receives data packets comprising policy transport communications from both the mobile device - and from applications servers -, deconstructs the policy transport protocol, adds, changes, or deletes device policy elements inconsistent with the policy specifications assigned for the specific device, and inserts or changes policy elements so as to implement the common policy for the device, and finally, reassembles the policy transport communications for delivery to the mobile device - (and subsequent implementation of the policy, if desired). Policy proxies can also receive, modify, add, suppress, or deliver data packets comprising exchanges other than policy transport communications, such as data communications when enforcing policy limitations or data deletion requirements on a mobile device, or when acting as a firewall, or to prevent communication between non-compliant mobile devices and enterprise servers.","In some exemplary embodiments, a policy proxy  can function as a policy compliance checking system, wherein the policy proxy  uses one or more policy transports - to determine whether a mobile device - is in compliance with required policies. When a mobile device - is determined to be in compliance with required policies, the policy proxy  permits communication between the mobile device - and applications servers -. When a mobile device - is determined to be out of compliance with required policies, the policy proxy  can, in some exemplary embodiments, cause the mobile device - to be brought into compliance, or blocked from access to server -. When required by policy the policy proxy  can cause the mobile device - to fully or partially delete data stored locally in the mobile device - though insertion, deletion, or modification of data elements and\/or commands in the communication data stream between the policy proxy  and the mobile device -.","In some exemplary embodiments, the policy proxy  acts as a firewall to prevent mobile device - communications from reaching applications servers - until the mobile device - has implemented the common policy assigned to it and demonstrated compliance with the common policy through interactions with the policy proxy . In such exemplary embodiments, the policy proxy  is configured to act as a policy transport, at least to the extent required to implement this functionality, for the device types supported. In some exemplary embodiments the policy proxy  can cause the mobile device - configuration, and\/or the configuration of various information servers  and other network components, such as servers -, to be altered so as to block access to the network by the mobile device -, when required by policy. Mobile device configuration changes involved in this process can include, but are not limited to, deletion of policy settings, deletion of passwords, deletion of required software, deletion of application data (e.g. mail account settings, server addresses, etc.), resetting the device to factory default settings, removal of mobile device - identification data from authorization or authentication server, or other changes as will be well understood by those with skill in the art.","In some exemplary embodiments the policy proxy  comprises one or more transport protocol-specific proxy components - useful to implement device-specific aspects of the functionality of the policy proxy .","In some exemplary embodiments, a policy proxy  can provide one or more of the following services:","Policy compliance checker for the mobile device. The policy proxy  can function as a policy compliance checker, where the current state of a mobile device's - policy compliance is determined through interaction between the policy proxy  and the mobile device - using one or more policy transports -. The results of such checks can form the basis for blocking access to applications servers -, for injecting policy elements into the mobile device - to bring it closer to compliance with required policy, or for other purposes.","Policy injector to the mobile device. The policy proxy  can function as a policy injector, where third party policy elements, such as policy elements derived from a common policy, can be injected into a policy transport communication stream - between an applications server - and a mobile device -. These injected policy elements may augment and\/or replace portions of the policy transport communication stream. In some exemplary embodiments policy elements can also be removed from policy transport communication streams. Policy injection can be done at the request of the mobile device -, as a result of a mobile device - being found to be out of compliance with required policies during a compliance check, or for other reasons, such as administrator command, periodic scheduling of such injection, or for other reasons.","Policy results interceptor. The policy proxy  can also function as a policy results interceptor, in which policy and configuration results are intercepted in transit from a mobile device to an applications server, and the stream of policy and\/or configuration results are redirected to additional and\/or alternative applications servers and\/or policy servers.","Policy results injector to the applications server. The policy proxy  can also function as a policy results injector to an applications server - by formulating responses to applications server - policy status queries or other policy transport communications and using them to respond to the applications server -. This capability can be used to satisfy an applications server - that a mobile device - is in compliance with its required policies, whether the mobile device - is actually in compliance or not, or to cause the applications server - to specify the policy it expects the mobile device - to be in compliance with. The former capability is useful when an applications server - is requiring compliance with a policy that is less strict than a common policy applicable to the mobile device -, when an applications server - is requiring a policy that is more restrictive than a common policy applicable to a mobile device -, when an applications server - is not configured to interoperate with the particular mobile device -, or for other purposes as will be apparent to those with skill in the art. The later capability is useful for enabling the policy proxy  to collect legacy policy server policy elements for integration into common policies or for other purposes.","Application firewall. The policy proxy  can function as an application-aware firewall for one or more network transport protocols -. The policy proxy  is therefore enabled to intercept all elements of the mobile device - to applications server - communication stream and mediate the operation of the network transport protocol. For example, a policy proxy  may deny communication by policy (e.g., from restricted devices, by network source, or by time-of-day). Alternatively, a policy proxy  may deny particular interactions by policy (e.g., restrict \u201ccontacts\u201d synchronization but permit e-mail synchronization). In addition, a policy proxy  may ensure that commands and data in the session are properly formed, to prevent the backend applications servers - from acting on requests that may cause unpredictable behavior.","Application information routing and mediation. Policy proxy  may function to provide rule-based synchronization of other information sources  and to provide synchronization between these sources and a mobile device - under the instruction of one or more policy-based rules. A policy proxy  can synchronize the mobile device - with third party e-mail or PIM information. For example, \u201ccontacts\u201d from a Customer Relations Management (CRM) system could be shared with specific mobile devices. Alternatively, alerts may be injected as e-mails.","Policy-required data deletion of data on the mobile device -. Policy proxy  can, when required, insert, remove or modify policy or data elements or commands in the communication between the mobile device - and the policy proxy  so as to cause the mobile device - to delete some or all of its locally stored data. Such data can comprise e-mails, data files, policy settings, or application data, such as PIM memos, contact lists, etc. Any data that can be removed from the mobile device - as a result of synchronization with a server, or by a command or other instruction from a server, can be removed by the policy proxy . In some cases, such as a full device reset command, this can include all user data on the device that was not part of the default factory installation settings.","A policy proxy enables mobile devices to synchronize business information (e.g. E-mail and PIM information) with a variety of additional information resource servers (e.g., Lotus Notes\u2122, Microsoft Hotmail\u2122, and Google gmail\u2122), without specialized software on the mobile device. In one aspect, the synchronization occurs transparently without the mobile device being aware of the source and\/or destination of the information being synchronized. In a second instance, a policy proxy can combine information from a plurality of information resource servers into a single content stream for synchronization with the mobile device, and split the information stream from the device to its respective information resource servers. This is useful when the server provides the system of record with a specific type of information, for example, business contacts in a CRM system, internal company contacts in a company directory, and the like. Similar types of information handling are available for each type of PIM data, such as tasks, calendar entries, contact records, e-mail, documents, and the like.","Policy proxies make use of rules for various aspects of their functioning, such as the rule-based synchronization described above, and the delivery rules described below. The term \u201crules\u201d, as used herein, refers to any method of describing the relationship between specific data inputs and an action or other behavior on the part of a policy proxy. For example, a rule can specify that a mobile device that possesses digital certificate A is to be permitted to access a given enterprise network, and that a mobile device that does not possess digital certificate A is not permitted to access a given enterprise network. Rules can encode a wide range of information in ways that are useful to implement such things as common policy specification translation into policy transport compatible forms, policy transport to device type compatibility, and common policy specifications. In some exemplary embodiments rules are specified in the form of XML documents, with one or more rules being described by the XML document(s). For example, a document that describes a common policy specification comprising three rules can be structured as follows:",{"@attributes":{"id":"p-0082","num":"0081"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<common_policy>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<min_password_len> 8 <\/min_password_len>"]},{"entry":[{},"<auto_dev_lock> yes <\/auto_dev_lock>"]},{"entry":[{},"<dev_lock_delay> 600 seconds<\/dev_lock_delay>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/common_policy>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Other exemplary embodiments specify rules using other mechanisms, such as table lookups, associative arrays, hashes, comma-delimited lists, name-value pairs, tagged data, predefined value sequences, or any other method as will be understood by those having skill in the art.","Returning to , the policy proxy  operates as follows when a policy has been identified for sending to a mobile device -. The policy proxy  receives the policy to be sent and an identification of the mobile device the policy is applicable to. The Policy Arbitrator  component decomposes the policy into its constituent policy elements, maps these policy elements against the policy compliance capabilities of the device, identifies applicable and available policy transports, transforms policy elements to one or more device-specific policy elements appropriate to the mobile device to ensure that all policy elements in the policy are compatible with the mobile device's policy compliance capabilities, maps the resulting policy elements against the policy elements that the applicable and available policy transports can transport to and install on the mobile device, groups policy elements by the identified policy transports, and causes the policy to be transported to the specified mobile device(s) and installed on the device(s). In some exemplary embodiments, the grouping of policy elements by the identified policy transports is done in a manner that minimizes the number of policy transports that are needed to transport the policy to the mobile device(s).","In typical usage of an exemplary embodiment, a mobile device - initiates a connection to an applications server - or other server  using a network transport protocol capability of the mobile device -. The network transport protocol is routed through the policy proxy , which identifies the mobile device and the protocol being used. If the policy proxy  and\/or network transport protocol-specific proxy components - determine that access is permitted, the policy proxy  forwards the network transport protocol to the requested destination server - or , and routes return data to the mobile device from the server - or . If access is not permitted, the policy proxy  acts according to the requirements of policy. Actions may be blocking access, requiring changes to the mobile device's - configuration, partially or fully wiping data stored locally in the mobile device -, or other actions.","It is sometimes not possible to manage all of the desired policy and data elements using a single policy transport. In this case, the policy arbitrator  selects groups of policy and data elements and allocates them to different policy or data transports. For example, policy settings for a mobile device - would be sent using a policy transport, such as EAS, while data commands to update local copies of data files are sent using the NFS protocol, and commands to delete locally cached mail folders are sent using IMAP protocols.","The policy arbitrator  may provide mapping and translation services between policy elements in policies supplied by policy servers, and the policy elements used with a particular mobile device and selected available policy transports. The mapping process between policy elements of a policy and policy elements compatible with a mobile device can involve a one-to-one mapping of the policy element to a device configuration setting, a translation of the policy element to a device specific setting (e.g. mapping the policy element value of \u201cYes\u201d to a binary value of 1 in the device setting), provide a many-to-many mapping, where one or more policy elements are mapped to one or more device settings (with optional translation of values as appropriate), and\/or the creation of additional and\/or new device configuration settings as necessary. In other implementations, policy elements may not be mapped to a device configuration setting.","EAS Proxy Component","One exemplary embodiment of the transport protocol-specific proxy component described above is an EAS Proxy Component. EAS Proxy Components intercept and manipulate the EAS protocol between a Microsoft\u2122 Exchange Server and a mobile device. It can be deployed as a network appliance, as part of a firewall, as part of a policy proxy, as a service on an Internet Authentication Service (IAS) server, or using other techniques well understood by those skilled in the art.","An EAS Proxy Component, in combination with a policy proxy, allows a management system other than Microsoft\u2122 Exchange to observe, filter, and modify the contents of the EAS protocol stream, as well as injecting new commands into the stream and capturing the results. This provides the enterprise with a richer device management system than Microsoft\u2122 Exchange natively provides. The EAS Proxy Component allows other servers, in addition to the Microsoft\u2122 Exchange Server, to participate in EAS Handshake, E-mail and\/or PIM Synchronization, and policy processing.",{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 3","b":["6000","6110","6010","6090","6080","6050"]},"The policy proxy  is configured with one or more policy delivery rules , which specify which configuration settings may be set and managed by each particular policy or data transport for each particular device type. These rules are used by the policy arbitrator  to process policy  from the integrated policy server , and to split the policy into disparate policy sets A  and B . These policy sets are delivered to the policy proxy transports  and  respectively for use in carrying out policy requirements by delivering policy to a mobile device  using a policy transport , or for carrying out policy requirements by delivering, adding to, removing from, or modifying data passing through a data transport . For example, if the policy requirements of a policy set  comprise deletion of locally stored corporate e-mail from a mobile device , the policy arbitrator  will generate, using device-appropriate proxy translation components (not shown), the required commands and data into a policy set  for the data transport  to implement by inserting commands and\/or data, removing commands and\/or data, and\/or altering commands and\/or data in the data stream being carried through the data transport  so as to cause the mobile device  to delete the required e-mail from its local storage.","1.1.8 Exemplary Non-Limiting Policy Intermediation","The interception, possible alteration of and forwarding of modified data streams so as to implement policy requirements through use of extant software on mobile devices and\/or servers is referred to herein as \u201cpolicy intermediation\u201d.","There are two ways to implement policy intermediation: active and passive. Passive intermediation involves the interception of protocol requests and provision of \u201cempty\u201d results sets which are then used to synchronize with the policy-managed device. Active intermediation occurs when protocol requests are intercepted, transformed, and actions other than those resulting from provision of an \u201cempty\u201d results set are performed.","Passive intermediation can be used to block access to servers, by preventing server-supplied data from reaching the policy-managed device. Passive intermediation can also, with some protocols such as IMAP, be used to delete data from a policy-managed device by synchronizing it with an empty data set, such as a mail folder that contains no messages.","Active intermediation can be used to block access to servers by preventing requests from reaching servers, by modifying requests in various ways (e.g. removal of authorizations, alteration of request commands, redirection of responses, etc.) so as to prevent return of data to the requesting device. Active intermediation can also, with some protocols such as NFS, be used to delete data from a policy-managed device by altering communication data streams to incorporate commands to delete files, alter the content of files, activate applications to alter stored data, etc.","With some protocols, such as IMAP, both passive and active intermediation are useful, depending on the policy requirement to be implemented. For example, simply replacing data in a synchronization operation with empty results sets can result in deletion of all data so synchronized. However, this does not affect other data on the policy-managed device that is not synchronized at the request of the policy-managed device. By using active intermediation, commands notifying the policy-managed device of the need to synchronize yet other data can result in requests to synchronized said other data, enabling the use of passive intermediation to delete said other data from the policy-managed device.","For example, a policy-managed mobile phone is connected to an enterprise mail server using ActiveSync. Device policy calls for unauthorized devices (e.g. those missing a valid device authorization certificate) to be wiped of enterprise information. In this example, the policy-managed device connects and is found to have an invalid certificate. Instead of denying access to the enterprise mail server, a policy-managed intermediation occurs, and causes the e-mail, tasks, calendars, and other synchronized items to be removed from the policy-managed device. The policy-managed device thus can be wiped, either in whole, or in part, using these techniques. This is accomplished by altering the e-mail synchronization results from the enterprise mail server and causing the policy-managed device to synchronize instead with an empty mailbox. Alternatively, a more active approach may be used, such as notifying the policy-managed device that there have been changes in folders containing enterprise e-mail, causing it to request synchronization of those folders. These alternative approaches are described in more detail below. These techniques effectively wipe the enterprise e-mail and other information from the policy-managed device.","Similar techniques in which the desired results sets are replaced with an empty set, and the empty set is then synchronized to a policy-managed device, or where additional data commands are injected, are applicable for other protocols, such as HTML5, Calendars using iCal or CalDav, Tasks using iCal or CalDav feeds, Contacts, files using WebDav or NFS, and other protocols such as stsdev (e.g. SharePoint). Other enterprise data, such as that provided by CRM systems such as Salesforce or SugarCRM, can be similarly intermediated and managed by intercepting and intermediating requests.","The steps of the process as dealt with in an exemplary embodiment are shown in . A policy proxy intercepts or requests a device identification  and determines whether the device identification is valid . If it is, then processing proceeds as requested, with a device synchronization request (e.g. IMAP folder update, NFS cache update, etc.)  reception resulting in the request being forwarded to the destination server , and the process completes. Other requests will be similarly forwarded during the connection session if the device identification remains valid. If the device identification is not valid  when a device synchronization request is received , the policy proxy responds with an empty set to the synchronization request () and the process is complete. If the device identification remains invalid, future requests will also be responded to with an empty set in this exemplary embodiment.","An alternate process as dealt with in an alternate exemplary embodiment is shown in . As above, a policy proxy receives a device identification  and determines whether the device identification is valid . If the device identification was valid  then when the policy proxy receives a device synchronization request (e.g. IMAP folder update, NDF cache update, etc.)  the response is passed through to the destination  and the process is complete. If the device identification was not valid, then when a device synchronization request is received , the request is passed through to the destination server , but the response is intercepted  and the results are removed and an empty results set substituted and returned . In addition, the device is deauthorized (if not previously deauthorized) , after which the process is complete.","Yet another alternate process as dealt with in yet another alternate exemplary embodiment is shown in . As above, a policy proxy receives a device identification  and determines if the device identification is valid . When the policy proxy then receives a device synchronization request (e.g. IMAP folder update, NFS cache update, etc.) , if the device identification was valid, the response is passed through to the destination . Otherwise, if the device identification was not valid, the device is forced to make a device synchronization request . When the policy proxy receives the device synchronization request  it responds with an empty results set  and the process is complete.","Still another alternate process as dealt with in still another alternate exemplary illustrative non-limiting embodiment is shown in . A device selective wipe function is activated at the management server for a device . The next time the managed device connects , the selective wipe is implemented by commanding the device to synchronize its data with the server . The synchronization results in the data on the device being deleted according to processes described above.","Another alternate process supported by some exemplary embodiments is shown in . A device selective wipe function is activated at the management server for a device . When the device connects , it provides its device ID . The policy proxy intercepts the request , identifies the device , forwards a request to at least one server for the at least one server to enumerate the items of interest that are, or may be, stored on the device , and the policy proxy translates the enumeration into a set of remove\/delete commands appropriate to the device . These commands are then sent to the device where they result in the deletion of the enumerated items. For example, a device connects using the IMAP protocol. The policy proxy intercepts the connection, and requests a list of the mail folders associated with the device from the IMAP server. The policy proxy then requests the device to delete each of the folders identified by the IMAP server. The deletion request can be executed using passive or active intermediation, as appropriate to the specific device type and its software and the functions required to carry out the data removal.","1.1.9 Selective Wipe Example","An exemplary illustrative non-limiting implementation can perform a selective wipe of enterprise-related e-mail folders on a mobile device that accesses enterprise e-mail by way of the EAS protocol to a Microsoft Exchange server using a combination of active and passive intermediation methods. Other e-mail folders on the mobile device are not affected. Non-enterprise data on the mobile device are not affected by this process. Only the corporate e-mail folders have had their contents removed from the mobile device when the process is complete. Since EAS and Exchange manage synchronization of PIM data, such as calendars, contact lists and task lists, as if they were e-mail folders, this data can be selectively wiped using the same method shown here for e-mail. A state diagram for an exemplary policy proxy engaged in this activity is shown in .","Referring to , the process begins when a selective (or \u201csoft\u201d) wipe of the e-mail folders is initiated . The initiation of the selective wipe can occur as a result of a policy rule, at the request of a human using a device management user interface, by software systems other than policy servers, or by other means as will be known to those with skill in the art. The exemplary selective wipe request specifies the target device to be wiped, and that all enterprise e-mail folders are to be deleted from the target device, or have their contents deleted. In some exemplary embodiments a selective wipe can be specified to delete only a subset of the enterprise e-mail folders from the target device. The policy proxy enters the \u201cPending All Syncs Complete\u201d state  until the target device connects and sends a command.","When the target device connects it will send a ping command, to request monitoring of changes to one or more folders, a sync command to request updating of one or more folders, or some other command. The policy proxy will intercept any command sent and respond based on its current state and the particular command intercepted.","If the command is not a ping or sync , the policy proxy will return a response with an HTTP status of 200 (i.e. \u201cOK\u201d) with no message body. This response reveals nothing to the client, but does not result in any errors.","If the command is a sync with a non-zero sync key , which indicates that the client is attempting to continue a previous session, the policy proxy responds with a status of three, which instructs the device to start a new session by sending a sync command with a sync key of zero. If the command is a sync with a zero sync key , the policy proxy responds with a sync key of one and an empty folder. This response causes the client to synchronize to the empty folder, deleting any prior content it had stored locally on the mobile device for that folder. The synchronized folder has now had its content deleted on the mobile device, but other data on the device remains intact.","If the command is a ping that specifies no folders , the policy proxy responds with a ping status of three, which indicates that the mobile device did not specify all required parameters, and should re-issue the ping command and specify the folders to be monitored. If the command is a ping that specifies three or more folders, the policy proxy responds with a ping status of two and a list of the specified folders. This status indicates that there have been changes in the listed folders, and these should be synchronized. The mobile device then issues sync commands for each listed folder, and the policy proxy then deals with the sync commands as previously described so as to delete the content of these folders. The listed folders are referred to herein as \u201cpush folders\u201d. These are folders that the mobile device has named explicitly, so these are wiped first when there are three or more of them, for purposes of efficiency.","When all of the push folders have been synchronized with empty folder responses, the policy proxy responds with a status of twelve or eight . Either status will result in the mobile device performing a foldersync command to request an update of its available folder list. Alternately, if there were fewer than three push folders in the mobile device's ping request, the policy proxy responds with a status of seven, which causes the mobile device to perform a foldersync command. In either case, the policy proxy transitions from the Pending All Sync's Complete state  to the Pending Foldersync state .","In the Pending Foldersync state  the policy proxy is waiting for a foldersync command. If it instead receives a sync command , it responds with a sync status of twelve or eight to tell the mobile device to perform a foldersync. If it receives a ping command , the policy proxy responds with a ping status of seven, which also instructs the mobile device to send a foldersync command. If it receives some other command, the policy proxy responds with an HTTP 200 status and no body  to indicate \u201cOK\u201d. In each case the policy proxy remains in the Pending Folder Sync state . Only when it receives a foldersync command does the policy proxy change states.","If the foldersync command is received with a non-zero sync key , the policy proxy responds with a status of nine, to tell the mobile device that there has been a synchronization key mismatch and it should reissue the foldersync with a sync key of zero to start a new session. It then enters the Pending FolderSync with Sync Key Zero state . If it receives a foldersynch command with a non-zero sync key, it responds with a status of nine , and remains in the Pending FolderSync with Sync Key Zero state . Only when it receives a foldersync command with a zero sync key  does it respond with a single empty folder called \u201cinbox\u201d and a sync key of one, and then transitions to the Pending Foldersync with Sync Key One state .","If, while in the Pending Foldersync state , the policy proxy receives a foldersync command with a sync key of zero , it responds with a single empty mail folder called \u201cinbox\u201d and a sync key of one, and transitions to the Pending Foldersync with Sync Key One state .","If, while in the Pending Foldersync with Sync Key One state , the policy proxy receives a foldersync command with a sync key of one , it responds with a \u201cNo Changes\u201d result and a sync key of one, and then transitions to the Block All Non-Sync Requests state .","While in the Block All Non-Sync Requests stat , the policy proxy will respond to a sync command with a non-zero sync key  with a status of three (indicating \u201cre-issue sync with a sync key of zero\u201d, as previously described). When a sync command with a zero sync key is received , the policy proxy responds with an empty folder and a sync key of one and transitions to the Pending Sync with Sync Key One state . The empty folder in the response meanwhile causes the mobile device to delete its local copy of the contents of the synchronized folder.","When the policy proxy then receives a sync command with a sync key of one , it responds with \u201cNo Changes\u201d and a sync key of one, and then transitions to the Block All Non-Sync Requests state . Since the mobile device has, at this point in the process, been told to resynchronize its folders, and has an updated list of folders to synchronize, and the Block All Non-Sync Requests  to Pending Sync with Sync Key One  state loop will clear the device-local data for each folder as it is synchronized, the mobile device will complete the process with all enterprise mail folders (or PIM folders that are treated as mail folders) cleared of enterprise data, while other data on the mobile device remains intact. In this way the selective wipe is accomplished in one exemplary embodiment of the invention.","It should be understood that processes and techniques described herein are not inherently related to any particular apparatus and may be implemented by any suitable combination of components. Further, various types of general purpose devices may be used in accordance with the teachings described herein. It may also prove advantageous to construct specialized apparatus to perform the method steps described herein. The present invention has been described in relation to particular examples, which are intended in all respects to be illustrative rather than restrictive. Those skilled in the art will appreciate that many different combinations of hardware, software, and firmware will be suitable for practicing the present invention.","Although the present invention has been described in relation to exemplary illustrative non-limiting implementations thereof, many other variations and modifications and other uses will become apparent to those skilled in the art. It is preferred therefore, that the present invention be limited not by the specific disclosure herein."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The technology herein will be understood more fully from the detailed description given below of various exemplary illustrative non-limiting implementations and the accompanying drawings, of which:",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
