---
title: System and method for providing different levels of key security for controlling access to secured items
abstract: With files secured by encryption techniques, keys are often required to gain access to the secured files. Techniques for providing and using multiple levels of keystores for securing the keys are disclosed. The keystores store keys that are needed by users in order to access secured files. The different levels of keystores offer compromises between security and flexibility/ease of use.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07921288&OS=07921288&RS=07921288
owner: 
number: 07921288
owner_city: 
owner_country: 
publication_date: 20020320
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This application is a continuation-in-part application of U.S. patent application Ser. No. 10\/075,194, filed Feb. 12, 2002, and entitled \u201cSYSTEM AND METHOD FOR PROVIDING MULTI-LOCATION ACCESS MANAGEMENT TO SECURED ITEMS,\u201d which is hereby incorporated by reference for all purposes. This application also claims the benefits of U.S. Provisional Application No. 60\/339,634, filed Dec. 12, 2001, and entitled \u201cPERVASIVE SECURITY SYSTEMS,\u201d which is hereby incorporated by reference for all purposes.","1. Field of the Invention","The present invention relates to the area of protecting data in an enterprise environment, and more particularly, relates processes, systems, architectures and software products for providing pervasive security to digital assets at all times.","2. Description of Related Art","The Internet is the fastest growing telecommunications medium in history. This growth and the easy access it affords have significantly enhanced the opportunity to use advanced information technology for both the public and private sectors. It provides unprecedented opportunities for interaction and data sharing among businesses and individuals. However, the advantages provided by the Internet come with a significantly greater element of risk to the confidentiality and integrity of information. The Internet is a widely open, public and international network of interconnected computers and electronic devices. Without proper security means, an unauthorized person or machine may intercept any information traveling across the Internet and even get access to proprietary information stored in computers that interconnect to the Internet, but are otherwise generally inaccessible by the public.","There are many efforts in progress aimed at protecting proprietary information traveling across the Internet and controlling access to computers carrying the proprietary information. Cryptography allows people to carry over the confidence found in the physical world to the electronic world, thus allowing people to do business electronically without worries of deceit and deception. Every day hundreds of thousands of people interact electronically, whether it is through e-mail, e-commerce (business conducted over the Internet), ATM machines, or cellular phones. The perpetual increase of information transmitted electronically has lead to an increased reliance on cryptography.","One of the ongoing efforts in protecting the proprietary information traveling across the Internet is to use one or more cryptographic techniques to secure a private communication session between two communicating computers on the Internet. The cryptographic techniques provide a way to transmit information across an insecure communication channel without disclosing the contents of the information to anyone eavesdropping on the communication channel. Using an encryption process in a cryptographic technique, one party can protect the contents of the data in transit from access by an unauthorized third party, yet the intended party can read the data using a corresponding decryption process.","A firewall is another security measure that protects the resources of a private network from users of other networks. However, it has been reported that many unauthorized accesses to proprietary information occur from the inside, as opposed to from the outside. An example of someone gaining unauthorized access from the inside is when restricted or proprietary information is accessed by someone within an organization who is not supposed to do so. Due to the open nature of the Internet, contractual information, customer data, executive communications, product specifications, and a host of other confidential and proprietary intellectual property remains available and vulnerable to improper access and usage by unauthorized users within or outside a supposedly protected perimeter.","A governmental report from General Accounting Office (GAO) details \u201csignificant and pervasive computer security weaknesses at seven organizations within the U.S. Department of Commerce, the widespread computer security weaknesses throughout the organizations have seriously jeopardized the integrity of some of the agency's most sensitive systems.\u201d Further it states: \u201cUsing readily available software and common techniques, we demonstrated the ability to penetrate sensitive Commerce systems from both inside Commerce and remotely, such as through the Internet,\u201d and \u201cIndividuals, both within and outside Commerce, could gain unauthorized access to these systems and read, copy, modify, and delete sensitive economic, financial, personnel, and confidential business data . . . \u201d The report further concludes \u201c[i]ntruders could disrupt the operations of systems that are critical to the mission of the department.\u201d","In fact, many businesses and organizations have been looking for effective ways to protect their proprietary information. Typically, businesses and organizations have deployed firewalls, Virtual Private Networks (VPNs), and Intrusion Detection Systems (IDS) to provide protection. Unfortunately, these various security means have been proven insufficient to reliably protect proprietary information residing on private networks. For example, depending on passwords to access sensitive documents from within often causes security breaches when the password of a few characters long is leaked or detected. Therefore, there is a need to provide more effective ways to secure and protect digital assets at all times.","The present invention is related to processes, systems, architectures and software products for providing pervasive security to digital assets. The present invention is particularly suitable in an enterprise environment. In general, pervasive security means that digital assets are secured (i.e., secured items) and can only be accessed by authenticated users with appropriate access rights or privileges. Digital assets may include, but not be limited to, various types of documents, multimedia files, data, executable code, images and texts.","According to one aspect of the invention, multiple levels of keystores are able to be provided. The keystores store keys (i.e. user keys or private keys) that are needed by a user to access the digital assets. The different levels of keystores offer compromises between security and flexibility\/ease of use. By utilizing multiple keystores or caches at several distinct levels of security, policies associated with a user or groups owning the keys can be used in dynamically determining where the keys are to be stored and used for encryption and decryption operations. As a result, system administrators are able to make the tradeoffs necessary to ensure protection for sensitive information versus more efficiently access at the end user's computer.","The invention can be implemented in numerous ways including, a method, system, device, and a computer readable medium. Several embodiments of the invention are discussed below.","As a method for accessing to secured items, each of the secured items having at least a first portion and a second portion, both the first portion and the second portion being encrypted, one embodiment of the invention includes at least the operations of: receiving a request to access a secured item, the request being from a user at a client machine; requiring authentication of at least the user; determining a storage location of a user key associated with the user; retrieving the user key associated with the user from the determined storage location; decrypting the first portion of the secured item with the user key retrieved from the determined storage location to acquire security information for the secured item that the user is requesting to access; obtaining a file key from the security information; decrypting the second portion of the secured item using the file key; and providing the decrypted second portion of the secured item to the user.","As a method for controlling access to secured items, the secured items having at least a header and an encrypted data portion, the header including encrypted security information, one embodiment of the invention includes at least the operations of: receiving a request to access a secured item, the request being from a user at a client machine; requiring authentication of at least the user; determining a storage location of a user key associated with the user; retrieving the user key associated with the user from the determined location; decrypting the encrypted security information in the header of the secured item using the user key; obtaining a file key from the decrypted security information; decrypting the encrypted data portion of the secured item using the file key; and providing the decrypted data portion of the secured item to the user.","As an access control system that restricts user access to secured items, one embodiment of the invention includes at least a central server and a plurality of local servers. The central server having a server module that provides overall access control and having a central keystore. The plurality of local servers operatively connected to the central server over network links, each of the local servers including a local module that provides local access control and a local keystore. The access control, performed by the central server or the local servers, operates to permit or deny user access requests to the secured items by the users. Further, user keys required for users to gain access to the secured items are stored in the central keystore or the local keystore.","As a computer readable medium including at least computer program code for accessing to secured items, each of the secured items having at least a first portion and a second portion, both the first portion and the second portion being encrypted, one embodiment of the invention includes at least: computer program code for receiving a request to access a secured item, the request being from a user at a client machine; computer program code for requiring authentication of at least the user; computer program code for determining a storage location of a user key associated with the user; computer program code for retrieving the user key associated with the user from the determined storage location; computer program code for decrypting the first portion of the secured item with the user key retrieved from the determined storage location to acquire security information for the secured item that the user is requesting to access; computer program code for obtaining a file key from the security information; computer program code for decrypting the second portion of the secured item using the file key; and computer program code for providing the decrypted second portion of the secured item to the user.","Other objects, features, and advantages of the present invention will become apparent upon examining the following detailed description of an embodiment thereof, taken in conjunction with the attached drawings.","Processes, systems, architectures and software products for providing pervasive security to digital assets are disclosed. In general, pervasive security means that digital assets are secured (i.e., secured items) and can only be accessed by authenticated users with appropriate access rights or privileges. According to one aspect, multiple levels of keystores are provided. The keystores store keys that are needed by the user to access the digital assets. The different levels of keystores offer compromises between security and flexibility\/ease of use. Digital assets may include, but not be limited to, various types of documents, multimedia files, data, executable code, images and texts. The present invention is particularly suitable in an enterprise environment.","In the following description, numerous specific details are set forth in order to provide a thorough understanding of the present invention. However, it will become obvious to those skilled in the art that the present invention may be practiced without these specific details. The description and representation herein are the common means used by those experienced or skilled in the art to most effectively convey the substance of their work to others skilled in the art. In other instances, well-known methods, procedures, components, and circuitry have not been described in detail to avoid unnecessarily obscuring aspects of the present invention.","Reference herein to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification are not necessarily all referring to the same embodiment, nor are separate or alternative embodiments mutually exclusive of other embodiments. Further, the order of blocks in process flowcharts or diagrams representing one or more embodiments of the invention do not inherently indicate any particular order nor imply any limitations in the invention.","To facilitate the description of the present invention, it deems necessary to provide definitions for some terms that will be used throughout the disclosure herein. It should be noted that the definitions following are to facilitate the understanding and describe the present invention according to an embodiment. The definitions may appear to include some limitations with respect to the embodiment, the actual meaning of the terms has applicability well beyond such embodiment, which can be appreciated by those skilled in the art:","Digital Asset\u2014defines a type of electronic data that includes, but is not limited to, various types of documents, multimedia files, streaming data, dynamic or static data, executable code, images and texts.","File or document\u2014interchangeably used herein, indicates one type of digital asset and generally is in a clear mode which means that it can be accessed by one or more applications without a priori knowledge, wherein the access of a file or document is a request that results in the file or document being opened, viewed, edited, played, listened to, printed, or in a format or outcome desired by a user who has requested the access of the file or document.","Secured file or secured document\u2014defines a type of digital asset that cannot be accessed without a priori knowledge. Example of a priori knowledge may include, but not be limited to, a password, a secret phrase, biometric information or one or more keys.","Encrypted file or encrypted document means a file or document that has been encrypted with a cipher (i.e., an implementation of cryptographic techniques).","File key\u2014is one example of a priori knowledge that is also referred to as a cipher key and, once obtained, can be used to unlock or decrypt the encrypted document.","User key\u2014is another cipher key associated with or identifying a user or a group of users and can be used to obtain the file key. According to one format of the secured file, a user key is used to retrieve a file key that, in turn, unlocks or decrypts the encrypted document while a different user key or the same user key may be used to hide or encrypt the file key.","Access privilege\u2014is one or more rights a user may have with respect to a secured file or secured document. A user may only be able to access a secured file from a designated location during a specific period if his\/her access privilege limits him\/her to do so. Optionally, access privilege may specify other limitations on a specific host whence the user is logged in, a file transfer protocol, an access application (model and\/or version), a permit to grant access privilege to others (e.g., a consultant) or membership in other groups, etc.","Access rules\u2014are flags or designated permits to limit what a user can do with a secured file or secured document. According to one embodiment of the present invention, at least some of the access rules can be included in a secured file or secured document. In some cases, the access rules may be extensible by a user with appropriate access privilege.","Client device, computer, or machine\u2014interchangeably used herein, is a terminal device typically used by a user to access secured documents.","Server device, computer or machine\u2014interchangeably used herein, is a computing device. According to one embodiment, such computing device can provide access control (AC) management for secured documents that are accessible from a client machine or a user.","Client module\u2014generally means an executable version of an embodiment of the present invention and typically is loaded in a client device to deliver functions, features, benefits and advantages contemplated in the present invention.","Server module\u2014generally means an executable version of an embodiment of the present invention and typically is loaded in a server device to deliver functions, features, benefits and advantages contemplated in the present invention.","Server and Client\u2014unless otherwise specifically or explicitly stated, a server may mean either a server machine or a server module, a client may mean either a client machine or a client module, and in either case, the particular meaning shall be evident in the context.","Embodiments of the present invention are discussed herein with reference to . However, those skilled in the art will readily appreciate that the detailed description given herein with respect to these figures is for explanatory purposes as the invention extends beyond these limited embodiments.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 1A","b":"100"},"According to one embodiment, the client computer  is loaded with a client module that is a linked and compiled, or interpreted, version of one embodiment of the present invention and is capable of communicating with a server  or  over a data network (e.g., the Internet or a local area network). According to another embodiment, the client computer  is coupled to the server  through a private link. As will be further explained below, a document or file created by an authoring tool is secured by the client module. The client module, when executed, is configured to ensure that a secured document is secured at all times in a store (e.g., a hard disk or other data repository). By virtue of the present invention, the documents are stored in a secured mode and can only be accessed by users with proper access privileges. In general, an access privilege or access privileges for a user may include, but not be limited to, a viewing permit, a copying permit, a printing permit, an editing permit, a transferring permit, an uploading\/downloading permit, and a location permit.","According to one embodiment, a created document is caused to go through an encryption process that is preferably transparent to a user. In other words, the created document is encrypted or decrypted under the authoring application so that the user is not aware of the process. A key (referred to herein as a user key) is used to retrieve a file key to decrypt an encrypted document. Typically, the user key is associated with an access privilege for the user. Only a user with a proper access privilege can access the secured document.","In one setting, a secured document may be uploaded via the network  from the computer  to a computing or storage device  that may serve as a central repository. Although not necessary, the network  provides preferably a private link between the computer  and the computing or storage device . Such link may be provided by an internal network in an enterprise or a secured communication protocol (e.g., VPN and HTTPS) over a public network (e.g., the Internet). Alternatively, such link may be simply provided by a TCP\/IP link. As such, secured documents on the computer  may be remotely accessed.","In another setting, the computer  and the computing or storage device  are inseparable, in which case the computing or storage device  may be a local store to retain secured documents or receive secured network resources (e.g., dynamic Web contents, results of a database query, or a live multimedia feed). Regardless of where the secured documents or secured sources are actually located, a user, with proper access privilege, can access the secured documents or sources from the computer  or the computing or storage device  using an application (e.g., Internet Explorer, Microsoft Word or Acrobat Reader).","The server , also referred to as a local server, is a computing device coupled between a network  and the network . According to one embodiment, the server  executes a local version of a server module. As will be detailed below, a local version is a localized server module configured to service a group of designated users or client computers, or a location. Another server , also referred to as a central server, is a computing device coupled to the network . The server  executes the server module and provides centralized access control (AC) management for an entire organization or business. Accordingly, respective local modules in local servers, in coordination with the central server, form a distributed mechanism to provide a distributed AC management. Such distributed access control management ensures the dependability, reliability and scalability of centralized AC management undertaken by the central server for an entire enterprise or a business location. As will be further explained below, the server module in the central server maintains or interfaces to a database that includes, but is not limited to, a list of users and corresponding access privileges for the entire organization or business and rules for folders or files, while a local module can be configured to maintain or interface to a portion or whole of the database, hence servicing a group of users local to the local server.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 1B","FIG. 1A","FIG. 1A","FIG. 1B","FIG. 1A"],"b":["118","118","100","102","104","106","118","122","120","124","122","120","124","102","132","136","120","120","126","128","130","138","136","138","128","124","120","122","118","124","125","118"]},"Main memory , such as random access memory (RAM), is also interfaced to data bus  to provide CPU  with instructions and access to memory storage  for data and other instructions. In particular, when executing stored application program instructions, such as a document securing module in the present invention, CPU  is caused to manipulate the data to achieve results contemplated by the present invention. Read-Only Memory (ROM)  is provided for storing executable instructions, such as a basic input\/output operation system (BIOS) for operation of keyboard , display  and pointing device , if there are any.","In one embodiment, the computing or storage device  is capable of storing keys (i.e., user keys) in the main memory  or the storage . The main memory  provides non-persistent (i.e., volatile) storage for the keys and the storage  provides persistent (i.e., non-volatile) storage for the keys. Hence, the computing or storage device , or more particularly the main memory  and\/or the storage , can act as a keystore.","Referring now to , an illustration diagram of securing a created document  is shown. After the document  is created with an application or authoring tool (e.g., Microsoft WORD), upon an activation of a \u201cSave,\u201d \u201cSave As\u201d or \u201cClose\u201d command or automatic saving invoked by an operating system, the application itself or an application that is previously registered with the server, the created document  is caused to undergo a securing process . The securing process  starts with an encryption process , namely, the document  that has been created or is being written into a store is encrypted by a cipher with a file key. In other words, the encrypted document could not be opened without the file key (i.e., a cipher key).","A set of access rules  for the document  is received and associated with a header . In general, the access rules  determine or regulate who and\/or how the document , once secured, can be accessed. In some cases, the access rules  also determine or regulate when or where the document  can be accessed. Typically, a header is a file structure, small in size and includes, or perhaps links to, security information about a resultant secured document. Depending on an exact implementation, the security information can be entirely included in a header or pointed to by a pointer that is included in the header. According to one embodiment, the access rules , as part of the security information, is included in the header . The security information further includes the file key and, in some cases, an off-line access permit (e.g., in the access rules) should such access be requested by an authorized user. The security information is then encrypted by a cipher with a user key associated with an authorized user to produce encrypted security information . The encrypted header, if no other information is added thereto, is attached to the encrypted document  to generate a secured document .","It is understood that a cipher may be implemented based on one of many encryption\/decryption schemes. Examples of such schemes may include, but not be limited to, Data Encryption Standard algorithm (DES), Blowfish block cipher and Twofish cipher. Therefore, the operations of the present invention are not limited to a choice of those commonly-used encryption\/decryption schemes. Any encryption\/decryption scheme that is effective and reliable may be used. Hence, the details of encryption\/decryption schemes are not further discussed herein so as to avoid obscuring aspects of the present invention.","In essence, the secured document  includes two parts, the document itself and the corresponding security information therefor, and both are in encrypted form. To access the document, one needs to obtain the file key that is used to encrypt the document and is now included in the encrypted security information. To obtain the file key, one needs to be authenticated to get a user or group key and pass an access test in which the access rules in the security information are measured against the user's access privilege.","According to one embodiment, the encrypted security information that includes the access rules or the header is placed at the beginning of the encrypted document (data portion) to facilitate early detection of the secured nature of a secured document. One of the advantages of such placement is to enable an access application (i.e., an authoring or viewing tool) to immediately activate a document securing module to decrypt the header. Upon the success of the decryption of the header with an authenticated user key, the access rules can be checked against the user's access privilege. If the user who requested the secured document does have the proper access privilege, the clear contents of the document will be loaded into the access application; otherwise, a denial notification (e.g., a message or a blank document) is sent to the user. However, the encrypted security information or the header may be placed anywhere around or in the encrypted document and sometimes may not be embedded contiguously in the encrypted data portion. By the virtue of the present invention, the encrypted header is always attached to the encrypted data portion, namely, the security information stays with the document being secured. This integrated mechanism facilities the transporting of secured documents to other locations without the loss of the security information therein.","One of the features in the present invention is that the secure nature of the document can be transparent to the user. In other words, a secured document or file is configured to have a file extension identical to that of the file before being secured so that an application designated to access the file can be executed to access the secured file. For example, a newly created Microsoft WORD document, xyz.doc, can be accessed by an application WINWORD.EXE. After it goes through the securing process, the secured document is maintained to keep the same file name, i.e., xyz.doc, which still can be accessed by the same application WINWORD.EXE, except now the application may fail to open the document if the access rules therein do not permit a user to do so.","Alternatively, a secured document in a folder appears substantially similar to a regular document and launches the same application when activated except the application would fail to access the contents therein. For example, icons or file names of secured documents may appear in a different color or with a visual indication to distinguish from non-secured documents. When a secured document unintentionally ends up in a machine or on a readable medium (e.g. CD or disk), if a user of the machine or a machine to read the readable medium has no proper user key, or if the user cannot be authenticated, the secured document would not be successfully accessed.","It should be noted that the header in a secured document may be configured differently than noted above without departing from the principles of the present invention. For example, a secured document may include a header with a plurality of encrypted headers, each can be accessible only by one designated user or a group users. Alternatively, a header in a secured document may include more than one set of security information, each set being for one designated user or a group of users while a single file key can be used by all. Some or all of the access rules may be viewed or updated by users who can access the secured document.","As will be further described below, to access a secured document, a user needs a user key or keys to decrypt the encrypted security information or header first. In one embodiment, the key or keys are associated with a user's login to a local server or a central server. Appropriate access privilege associated with the user is validated if the user has been authenticated or previously registered with the server and properly logged in. Depending on the permission or the access privileges, the access rules in the secured document determine whether the contents in the document shall be revealed to the user.","According to one embodiment, the access rules are present in a markup language, such as HTML and SGML. In a preferred embodiment, the markup language is Extensible Access Control Markup Language (XACML) that is essentially an XML specification for expressing policies for information access. In general, XACML can address fine-grained control of authorized activities, the effect of characteristics of the access requestor, the protocol over which the request is made, authorization based on classes of activities, and content introspection (i.e., authorization based on both the requester and attribute values within the target where the values of the attributes may not be known to the policy writer). In addition, XACML can suggest a policy authorization model to guide implementers of the authorization mechanism.",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 2B","b":["220","222","224","222","226","224","222","227","220","226","228","229","230","231","228","229","230","229","224","231","224"]},"In general, a document is encrypted with a cipher (e.g., a symmetric or asymmetric encryption scheme). Encryption is the transformation of data into a form that is impossible to read without appropriate knowledge (e.g., a key). Its purpose is to ensure privacy by keeping information hidden from anyone to whom it is not intended, even those who have access to other encrypted data. Decryption is the reverse of encryption. Encryption and decryption generally require the use of some secret information, referred to as a key. For some encryption mechanisms, the same key is used for both encryption and decryption; for other mechanisms, the keys used for encryption and decryption are different. For the purpose of controlling the access to the document, the key or keys, referred collectively to as a file key, may be the same or different keys for encryption and decryption and are preferably included in the security information contained in or pointed to by the header and, once obtained, can be used to decrypt the encrypted document.","To ensure that the key is not to be retrieved or accessible by anyone, the key itself is guarded by the access privileges and rules. If a user requesting the document has the proper access privileges that can be granted by the access rules, the key will be retrieved to proceed with the decryption of the encrypted document.","To ensure that the security information or the header (if no flag is implemented) is not readily revealed, the header itself is encrypted with a cipher. Depending on an exact implementation, the cipher for the header may or may not be identical to the one used for the document. The key (referred to as a user key) to decrypt the encrypted header can, for example, be stored in a local store of a terminal device and activated only when the user associated with it is authenticated. As a result, only an authorized user can access the secured document.","Optionally, the two encrypted portions (i.e., the encrypted header and the encrypted document) can be encrypted again and only decrypted by a user key. In another option, the encrypted portions (either one or all) can be error checked by error checking portion , such as using a cyclical redundancy check to ensure that no errors have been incurred to the encrypted portion(s) or the secured document .",{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 2C.1","b":["236","238","239","238","240","243","236","240","243","238","236","240","243","236","240","241","243","241","243"]},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 2C.2","b":["250","252","254","252","256","258","256","260","260","260","254","260","254"]},"The rules block  can be encrypted individually or with the encrypted document  using the file key that is eventually stored in the user block . One of the advantages of using the file key instead of the individual user key to encrypt the rules block  is to provide a mechanism for all authorized users\/groups to view access rules and rights. According to one embodiment, a random number or a result from an initialization process (e.g., a vector) may be added in the beginning of the rules block  to prevent an attack against the rules block .","It should be noted that  and  are only exemplary structures of secured documents. In an alternative implementation, the file key necessary to decrypt the document may be encrypted alone and kept in a separate block in the header. The file key becomes retrievable when one of the sub-headers (no longer keeping the file key) is decrypted as shown in . In still another alternative implementation, one or more flags or messages may be included in the security information of a secured document, the flags or messages indicate how secure the secured document can be. For example, a secured document can be classified as a normal, confidential, secret or a top-secret document, requiring different levels of access. Accordingly, multiple-levels of encryption on the file key and\/or access rules may be employed to ensure that only an authorized user or users are permitted to access the secured document. Other implementation options are also possible given the description herein and are not to be listed one by one so as to avoid obscuring aspects of the present invention.","In general, each of the users in the system is assigned a user key or user keys (e.g., a user public key and a private key). In one application, the user public key is used to encrypt some or all of the security information in the header and the user private key is used to get into the security information or header for the purpose of retrieving the file or document key so as to decrypt the encrypted data portion or the encrypted document. Unless specified otherwise, a user key herein indicates either or both of the user public key and the private key or a security key that is needed in the system to retrieve the file key to decrypt the encrypted data portion.","In a typical enterprise environment, different users may have different access privileges, some may access all secured files while others may access some of the secured files with restricted actions (i.e., printing, reading or editing, but not forwarding). Whether a user can ultimately achieve the access to the encrypted data portion in a secured file is controlled by the access rules or additional key(s) in the security information of the header. Together with a user's access privilege, a user key associated with the user can facilitate access to all secured files. One of the features in the present invention is to protect the user key in various levels of security.",{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIGS. 2E and 2F","b":["250","250","206","204","200","202"]},"The secured file access process  begins with a decision  that determines whether a request to access a secured file has been received. When the decision  determines that such a request has not yet been received, the secured file access process  waits for such a request. In other words, the secured file access process  can be considered to be invoked when a request to access a secured file is received.","Once the decision  determines that a request to access a secured file has been received, a decision  determines whether the user and\/or the client machine have been authenticated. Typically, the request is initiated by a user of a client machine. For security, both the user and the client machine are authenticated. When the decision  determines that both the user and the client machine have not yet been authenticated, then authentication processing is performed . The authentication processing serves to not only authenticate that the user is who the user claims he or she is, but also to determine that the client machine that the user is utilizing is one authorized to be used by the user. In the event that authentication were to be unsuccessful, the secured file access process  would end and the user would be unable to access the secured file. Additional details on authentication processing are provided below with reference to .","On the other hand, when the decision  determines that the user and the client machine have already been authenticated, as well as after the authentication processing has been performed , a storage location of a user key associated with the user is determined . The storage location may be local or remote with respect to the computing device performing the secured file access process . However, through use of different storage locations, the user keys for various users can be stored with different levels of security. In one embodiment, the different storage locations provide persistent storage for the user keys, and that a particular user key would be stored in one of the different storage locations. Next, the user key associated with the user is retrieved  from the determined location.","After the user key has been retrieved , part or all of the security information in the header portion of the secured file can be decrypted  using the user key. As noted above, the secured file includes a header and a data portion. The header can include, among other things, security information. One component of the security information for the secured file is a file key. The file key can be used to decrypt the data portion of the secured file. Hence, after the security information in the header is decrypted  using the user key, access rules or other security means in the security information are measured against the access privilege of the user. If the measurement is successful, the user is permitted to access the secured file, the file key included in the security information is obtained . Once the file key has been obtained , the data portion of the secured file is decrypted  using the file key to produce a clear file (i.e., decrypted file or decrypted data portion). The clear file refers to the fact that the previously secured file is no longer secured, and thus usable by the user. Thereafter, the clear file is returned  to the requester. Following the operation , the secured file access process  is complete and ends as the requested access has been achieved and the requestor has received the data of the file.",{"@attributes":{"id":"p-0097","num":"0096"},"figref":["FIG. 2G","FIG. 2F","FIG. 2E"],"b":["270","270","270","258","250"]},"It is assumed now from block  of  that the user key is located in a server (i.e., a local server or a central server), and that a client module in the client machine is configured to parse the header from a secured file being requested. The server-assisted secured file access process  in the server machine initially receives  the header of the secured file from the client machine. Then, the user key associated with the user is retrieved  from the determined location. After the user key has been retrieved , the security information in the header is decrypted  using the retrieved user key. Then, access rules are received  from the security information. Next, an access privilege associated with the user is retrieved . The access privilege pertains to the ability of the user to access documents and generally is set-up depending on a need-to-know basis, whereas the access rules pertain to rules established for access to the particular secured file.","Next, a decision  determines whether the access privilege for the user satisfies the access rules for the secured file. When the decision  determines that the access privilege for the user fails to satisfy the access rules of the secured file, then an error message is sent  to the client machine. On the other hand, when the decision  determines that the access privilege for the user does satisfy the access rules for the secured file, then the file key is retrieved  from the decrypted security information. The file key is then sent  to the client machine to continue the decryption of the encrypted data portion (i.e., operation  of ). Following the operations  and , the server-assisted secured file access process  is complete and ends.","As noted above, each user has an associated user key that can be stored in one of a plurality of different locations. The different locations pertain to lesser or greater degrees of security protection for the keys stored therein. For example, the different locations that a key could be persistently stored could include a user keystore, a local server keystore or a central server keystore. The central server keystore would offer the greatest protection to the user key because of its central location and limited access thereto. Storage at the local server keystore would offer significant protection to the user keys but a local server is relatively less secure than a central server. The storage of user keys at the user keystore, such as the client machine, is still secure as the keys are encrypted but the user keystore is easier for unwanted persons to gain access.","Hence, the location where a user key is stored determines its degree of security. According to one aspect of the invention, policies can be implemented such that users with a greater degree of access privileges within the enterprise are required to store their user keys at more secure locations (e.g., more secure keystores). On the other hand, those users within the enterprise that have limited access rights to data within the enterprise may be permitted to have their user keys stored in less secure locations. Typically, there is a trade-off between security and efficiency of access. For example, the greater the security provided to the user keys, the greater amount of time it may take to retrieve a user key. As a particular example, a process at a client machine can gain rapid access to a user key stored within the client machine without enduring network connectivity, whereas a process at the client machine would have to endure network connectivity and congestion delays in retrieving a user key that is remotely stored within a server machine (i.e., a local server or a central server).","The secured access system of the invention can utilize database tables or other data structures to associate appropriate keystores and\/or groups to users of the system.  are diagrams illustrating exemplary associations of users to keystore locations. For example, in , the users are associated with a keystore. Namely, the users A and B utilize the client keystore, whereas the users C and D utilize the server keystore. In general, the server keystore offers greater security for keys than does the client keystore.",{"@attributes":{"id":"p-0103","num":"0102"},"figref":["FIG. 2I","FIG. 2J"]},{"@attributes":{"id":"p-0104","num":"0103"},"figref":["FIGS. 2J and 2K","FIG. 2J","FIG. 2J","FIG. 2J","FIG. 2K"]},"In one implementation, four different levels of security for key storage are available for storage of user keys. Those different levels are provided by a server-central keystore, a server-local keystore, a client-storage keystore, and a client-cache keystore. The server-central keystore provides the highest degree of key security, and the client-cache provides the lowest degree of key security. A group's user key (e.g., private key) can be persistently stored in one of the client-storage keystore, the server-local keystore or the server-central keystore. In this embodiment, these three keystores provide persistent storage which are mutually exclusive, meaning that the group's user key is never persistently stored in multiple persistent keystores. The memory keystore provides non-persistent storage (and is not backed-up by persistent storage) and often such storage is of clear user keys (i.e., unencrypted user keys). As an example, the memory keystore is implemented by a memory cache. Because the memory keystore is not considered persistent (and not backed-up by persistent storage), a group user key may be in the memory cache and any one of the keystores providing persistent key storage.","As to the first level of security for key storage, the client-cache keystore, the storage is of clear keys. The keystore is implemented simply by use of a memory cache. The storage of the clear keys is non-persistent in that the memory cache is volatile memory and not backed-up by storage on a disk drive or other storage device. The advantage of the client-cache keystore is that it allows for very fast access to the user keys because it can be rapidly accessed from the cache memory and does not have to endure any network or disk access delays due to transmission, access or traffic delays. Because keys are stored in the client-cache keystore in the clear, there is a security risk. One approach to reducing the security risk is to limit the time during which a key remains resident in the client-cache keystore. For example, after some predetermined duration which may be configurable (e.g., 30 seconds), a key would be removed from the client-cache keystore.","As to the second level of security for key storage, the client-storage keystore is the storage for encrypted keys. A shared secret with the user protects (e.g., encrypts) the keys. In one embodiment, the keystore is implemented by a disk drive of a client machine. The storage of the user keys is thus persistent. In one embodiment, a user file stored on the disk drive of the client machine stores the keys associated with the user. Each user would have its own user file. Since these keys are resident on the client machine, they are able to be attacked. Keys stored in the user file are thus keys that can be potentially compromised. Consequently, the client-storage keystore provides the lowest level of security for persistent key storage. After a user key has been decrypted, the user key can be stored in the memory cache (first level) for immediate availability for a limited duration.","As to the third level of security for key storage, the server-local keystore, storage is also of encrypted keys. A shared secret with the user protects (e.g., encrypts) the keys. In one embodiment, the keystore is implemented by a disk drive of a server machine. The storage of the user keys is thus persistent. These user keys are never transmitted to the client machine. Instead, the client machine provides an encrypted header for a secured file to a local server, and, in return, receives a file key required to decrypt the secured file. Delays may be imposed due to network connectivity or congestion. However, by caching recently or frequently used clear file keys on the client machine, delays can be reduced. Such caching provides non-persistent storage on the client machine and is not backed-up by disk storage. Although the cached file keys can be more easily compromised, the file keys are limited to particular documents so that not all files associated with a group are compromised.","As to the fourth level of security for key storage, the server-central keystore, the storage is also of encrypted keys. A shared secret with the user protects (e.g., encrypts) the keys. In one embodiment, the keystore is implemented by a disk drive of a central server machine. In another embodiment, the keystore is implemented by a database within or coupled to the central server machine. The storage of the user keys is thus persistent. These user keys are never transmitted to the client machine. Instead, the client machine provides an encrypted header for a secured file to a central server, and, in return, receives a file key required to decrypt the secured file. Since access to the central server is needed, network imposed delays may be incurred\/experienced. To mitigate such delays and reduce the load on the central server, recently or frequently used file keys can be cached on the local server. As a further optimization, a cache on the client machine can be used to render limited clear file keys available for limited durations. Such caching provides non-persistent storage on the client machine and is not backed-up by disk storage.","In summary, multiple levels of keystores are able to be provided. These different levels offer compromises between security and flexibility\/ease of use. By utilizing multiple keystores and caches at several distinct levels of security, the system is able to use policies associated with groups owning the keys to dynamically determine where the keys are to be stored and used for encryption and decryption. This allows system administrators the flexibility to make the tradeoffs necessary to ensure protection for sensitive information while allowing less sensitive information to be processed off-line or more efficiently at the end user's computer.",{"@attributes":{"id":"p-0111","num":"0110"},"figref":"FIG. 3","b":["300","302","304"]},"An application  (e.g., a server-registered application, such as Microsoft WORD) operates over operating system (OS)  and may be activated to access a document stored in a store . The store  may be a local storage place (e.g., hard disk) or remotely located (e.g., another device). Depending on the security nature (secured vs. non-secured) of the document being accessed, the DSM  may activate a cipher module . According to one embodiment, the DSM  is analogous in many ways to a device driver that essentially converts more general input\/output instructions of an operating system to messages that a device\/module being supported can understand. Depending on the OS in which the present invention is implemented, DSM may be implemented as a VxD (virtual device driver), a kernel or other applicable format. The cipher module  is included in or controlled by the DSM  and can be activated for operations when a secured document is involved.","In operation, a user selects a secured document that is associated with an application  (e.g., Microsoft WORD, PowerPoint, or printing). The application  acts on secured document calls using an Application Programming Interface (API) (e.g., createFile, a Common Dialog File Open Dialog with Win32 API in Microsoft Windows) to access the installable file system (IFS) manager . If it is detected that an \u201cOpen\u201d request is made from the application , the request is passed to an appropriate file system driver (FSD)  to access the requested secured document. At the same time, the cipher module  is activated and an authenticated user key is retrieved from a local store to decrypt the header in the requested secure document. If the encrypted header is decrypted and the access rules therein are measured successfully against the user's access privileges, then a file key is retrieved from the header of the secured document and the cipher module  proceeds to decrypt the encrypted document in the DSM . The clear contents are then returned to the application  through the IFS manager . For example, if the application  is an authoring tool, the clear contents are displayed. If the application  is a printing tool, the clear contents are sent to a designated printer.","If it is detected that a \u201cNew\u201d request is made, which means a secured document is being created or authored, a file key is generated in the DSM  (e.g., by the cipher module ) and the file key will be subsequently used to encrypt the contents in a document being created. To ensure that the local store always has the encrypted documents, every time a \u201cWrite\u201d request (e.g., a \u201csave\u201d command in Microsoft Word) is made manually by a user or automatically by the application  or the OS , whatever contents in the document being processed or authored are encrypted by the cipher module  with the file key in the DSM . When a \u201cClose\u201d request is made, the file key is stored in a header that also includes whichever access rules that the user has applied thereto. The header is then encrypted with an authenticated user key and attached to the encrypted document before the document is sent to the appropriate FSD (e.g., ) for storage in the store  (e.g., a folder or a designated location). As a result, a secured document is created.","In another embodiment, an operating system (OS) access, known as the ProcessID property, can be used to activate an application (as an argument to the AppActivate method). The parameter ProcessID identifies the application and an event handler thereof takes necessary parameters to continue the OS access to the Installable File System (IFS) Manager  that is responsible for arbitrating access to different file system components. In particular, the IFS Manager  is configured to act as an entry point for processes such as opening, closing, reading, writing files and etc. With one or more flags or parameters passed along, the access activates the DSM . If the document being accessed by the application is regular (non-secured), the document will be fetched from one of the File System Driver (FSD) (e.g., FSD ) and passed through the DSM  and subsequently loaded into the application through the IFS Manager . On the other hand, if the document being accessed by the application is secured, the DSM  activates the cipher module  and proceeds to obtain an authenticated user key to retrieve the access rules therein. If the access privileges satisfy the access rules, a file key will be retrieved to decrypt the encrypted data portion of the secured document by the cipher. As a result, the data portion or the document in clear mode will be loaded into the application through the IFS Manager .","According to one embodiment, the DSM  resides on a local disk (e.g., storage  of ) in a file that is structured like a dynamic-link library (DLL), typically with a SYS or IFS extension, and is loaded during system initialization. Once the DSM  is installed and initialized, a kernel communicates with it in terms of logical requests for file opens, reads, writes, seeks, closes, and so on. Through the IFS Manager , the FSD  translates these requests\u2014using control structures and tables found on the volume itself\u2014into requests for sector reads and writes for which it can call special kernel entry points called File System Helpers (FsHlps). The kernel passes the demands for sector I\/O to an appropriate device driver and returns the results (e.g., the requested document) to the FSD . Upon receiving the results from the FSD  indicating that the requested document is secured, the DSM  activates the cipher module  included therein to decrypt the document if permitted by the access rules in the secured document.",{"@attributes":{"id":"p-0117","num":"0116"},"figref":"FIG. 4A","b":["400","402","404"]},"At , a secret cipher key (i.e., a file key) is generated from a cipher module for the document and typically stored in a temp file that is generally not accessible by an ordinary user. The temp file will be erased automatically when the secured document is done (e.g., at a \u201cClose\u201d command from the application). At , the document is checked to see if a request to write the document into a local store is made. If such request is detected (which could be made manually by the user or periodically by the authoring tool or an OS), the document is encrypted with the file key at . One of the features in the present invention is that the stored document is always encrypted in storage even if it is still being processed (e.g., authored, edited or revised). When the user is done with the document, a \u201cClose\u201d request is activated to close the document. At , such a request is detected. As soon as such request is received, it means that a secured version of the document is being written into the store. At , the access rules and the file key are included in security information that is encrypted with the authenticated user key. Depending on implementation, a flag or signature and the security information can be included in the header. Alternatively, the header could include the security information without a flag. At , the header is attached to the encrypted document from  and subsequently the secured document is placed into the store at .","As described above, the secured document includes two encrypted portions, the header with encrypted security information and the encrypted data portion (i.e., the encrypted document). The two parts in the secured documents are encrypted respectively with two different keys, the file key and the user key. Alternatively, the two encrypted portions may be encrypted again with another key (or use the same user key) at .","In the case that there are a number of sets of access rules, each for a particular user or a group of users, it can be understood that the encrypted access rules at  are integrated with other sets of the encrypted access rules in a rules block as illustrated in . As such, an access from one user or group will not affect other users or groups but the other users or groups will see perhaps an updated version of the encrypted document.",{"@attributes":{"id":"p-0121","num":"0120"},"figref":["FIG. 4B","FIG. 4A"],"b":["430","430","404"]},"Generally, there are at least two situations in which the user has to be authenticated before being able to access secured documents. In a first situation, a client machine is coupled to a network (e.g., LAN), a user thereof needs to authenticate himself\/herself by providing his\/her credential information when it is a first time to use the client machine. Commonly, the credential information is a set of username and password. If the user is registered, the provided credential information will match the user's identity in the server and hence the user will be authenticated. Once the user is authenticated, a user key associated with the user can be activated or authenticated. The user can now use the client machine and subsequently access secured documents. Other possible credential information may include the user's biometric information such as finger print and voice, etc. that can be obtained from a dedicated device attached to the client machine. One such device may be a finger print sensor from DigitalPersona, Inc. at 805 Veterans Boulevard, Suite 301, Redwood City, Calif. 94063. When biometric information of the user is captured, it can verify what the user claims to be. Depending on an implementation, a user key may be locally stored or retrieved remotely. In any event, the user key, before authenticated, is preferably in an illegible format (e.g., encrypted or scrambled with a pass phrase associated with the user) to prevent a possible hacking thereto. The user's authentication or the biometric information of the user may be used to validate, retrieve or authenticate the user key. As a result, an authenticated user key in clear form is readily available for the user to access any secured document. In a second situation, a client machine coupled to a network can accommodate whatever the user thereof intends to do except for requesting a secured document. When it comes to a request to a secured document, the user authentication process is invoked.","Referring back to , the user authentication process is invoked, communication to a server (e.g., server  or ) is checked at . If it is detected that no communication to the server is available, which may mean that the client machine may not be on a network or the server is down or other causes, the user may have at least three options. First, the user can now access only non-secured documents or may generate secured documents at  if a public user key is available or retained in the client machine. Second, the user can keep trying to communicate with the server, in which case the process  goes back to  till a secured communication link is established. Third, the user may take advantage of another feature offered by the present invention, offline access at . In short, the user may access a limited number of secured documents on the client machine, the details of which will be provided below.","It is assumed that a secured link (possibly over HTTPS, VPN, SSL) is established between the client machine and the server. Now the process  goes to  where the user and\/or the client machine itself needs to be authenticated. In some cases, it is needed to ensure that a secured document can only be accessed by a user from a permitted machine. Hence, in such cases, it is necessary to authenticate the user as well as the client machine from which the user is to access secured documents.","As far as the user is concerned, the user needs to furnish his\/her credential information (e.g., username\/password) to be verified. Once the user is authenticated by the server, the client machine needs to be authenticated. To ensure that a user is confined to one or more designated local computers and can only access secured document from these designated local computers, there is a determination of whether the user is using one of the designated local computers to access the secured documents. In operation and at , the client machine's identifier (e.g., a number from a network card) is checked by the server to determine: 1) whether this client machine can be used to access secured documents; and 2) whether the combination of the client machine and the user is valid. If the check process is successful, the process  goes to  otherwise the user can only work on non-secured documents at .","A user key associated with the user is authenticated at . At this point, the user is able to access secured documents. Certainly, the corresponding access privileges with the user as well as the access rules in a secured document ultimately determine whether the user can open the secured document.","After the user and the client machine the user is using are respectively authenticated or verified, the user key is activated (e.g., ready to use). The user key may have been newly generated or stored in an illegible format. The user authentication process retrieves the user key to a form that can be readily used and\/or get the user key to the client machine.","It is assumed that the user is accessing or creating a secured document. At , the user access privilege originally set up by an administrator is activated, which determines when, where and what kind of secured documents he\/she can access. Likewise, the default access rules for specific folders to store secured documents may be available for viewing or gathered at  and could be saved into a temp file to be eventually attached (in an encryption format) to an encrypted document being accessed or created by the user.","Although the description of the process  in  is based on the user authorization process formed in conjunction with a server. It is clear to those skilled in the art that the description is readily applied to other means for conducting the user authentication. For example, the user key can be authenticated, validated or retrieved by biometric information of the user as described above.","Referring now to , there is shown a flowchart of process  of accessing a secured document according to one embodiment and shall be understood in conjunction with . At , an application is launched with a document being specified, for example, WINWORD.EXE is activated to open a file named xyz.doc. As explained above, a handler from the OS identifies the application and enters the OS wherein the IFS manger manager is called upon at . The IFS manager activates a DSM module at  and at the same time, the IFS manager passes the handler to receive at  the selected document from a store. As the selected document passes through the DSM module, the selected document is determined whether it is secured or non-secured at . In general, there are at least two ways to examine the secure nature of the selected document. A first possible way is that the DSM module looks for a flag at the beginning of the document. As described above, in some secured documents, a flag, such as a set of predetermined data, is placed in the header to indicate that the document being accessed is secured. If no such flag is found, the process  goes to , namely, the selected documented is assumed non-secured and thus allowed to pass the DSM module and loaded into the application from the IFS manager. A second possible way is that the DSM module looks for a header in a secured document. Being a secured document, there is a header attached to an encrypted data portion. The data format of the header shall be irregular in comparison with the selected document if it were non-secured. If the DSM module determines that the selected document has no irregular data format as required by the application, the process  goes to , namely, the selected documented is assumed to be non-secured and thus allowed to pass through the DSM module and be loaded into the application from the IFS manager.","Now if it is determined at  that the selected document is indeed secured, the process  goes to  wherein the header or security information therein is decrypted with the authenticated user key. At , the access rules in the decrypted security information are retrieved. At , the access rules are compared to (or measured against) the access privileges associated with the user. If the measurement fails, which means that the user is not permitted to access this particular document, a notification or alert message may be generated by the DSM module to be displayed to the user at . Alternatively, the application itself can display an alerting message when it fails to open the selected document. If the measurement passes successfully, which means that the user is permitted to access this particular document, a file key is retrieved from the security information at  and used to decrypt the encrypted data portion in the selected (secured) document by a cipher module activated by the DSM module. As a result, at  the decrypted document or clear contents of the selected document is loaded into the application from the IFS manager.","Referring now to , there is shown a functional block diagram of a server device  in which a server module  resides in a memory space  and is executable by one or more processors . The server device  also includes a network interface  to facilitate the communication between the server  and other devices on a network and a local storage space . The server module  is an executable version of one embodiment of the present invention and delivers, when executed, features\/results contemplated in the present invention. According to one embodiment, the server module  comprises an administration interface , an account manager , a user key manager , a user monitor , a local server manager , a partner access manager , an access report manager , and a rules manager .","Administration Interface :","As the names suggests, the administration interface  facilitates a system administrator to register users and grant respective access privileges to the users and is an entry point to the server module from which all sub-modules or the results thereof can be initiated, updated and managed. In one embodiment, the system administrator sets up hierarchy access levels for various active folders, storage locations, users or group of users. For example, as shown in , different users can be assigned to different access privileges. User A may be an executive or a branch supervisor who has all the access privileges to any secured documents. User B has limited access privileges while everyone in user group C shares the same access privileges. The privileges may include, but not be limited to: open, edit write, print, copy, download and others. Examples of the other privileges are: altering access privileges for other users, accessing secured documents from one or more locations, and setting up a set of access rules for a folder different from those previously set up (perhaps by the system administrator). The respective user IDs assigned to the users facilitate the management of all the users. Unless specifically stated differently, a user or a corresponding user ID is interchangeably used herein to identify a human user, a software agent, or a group of users and\/or software agents. Besides a human user who needs to access a secured document, a software application or agent sometimes needs to access the secured document in order to proceed forward. Accordingly, unless specifically stated, the \u201cuser\u201d as used herein does not necessarily pertain to a human being. In general, a user who will access a secured document is associated with a user key to allow an encrypted header in a secured document to be unlocked (decrypted). The expiration or regeneration of a user key may be initiated by the system administrator. According to one embodiment, the administration interface  is a user graphic interface showing options for various tasks that an authenticated system administrator or operator may need to perform.","Account Manager :","Essentially, the account manager is a database or an interface to a database  (e.g., an Oracle database) maintaining all the registered users and their respective access privileges, and perhaps corresponding user keys (e.g., private and public keys). In operation, the account manager  authenticates a user when the user logs onto the server  and also determines if the user can access secured documents from the location the user is currently at. In general, the account manager  is where an enterprise may be able to control its users.","User Key Manager :","This module is configured to keep a copy of keys for each of the users in an organization. According to one embodiment, the user key manager  is not activated to retrieve the keys therein. In some situations, a key can be retrieved by the system administer to access a secured document in case the key in a client machine is corrupted or the user or users who have the access privilege to access the secured document are no longer available. Optionally, the user key manager  is configured to expire some or all of the keys therein for security reasons. In one case, a user is no longer with the organization, the corresponding user key can be manually expired in the user key manager . In another case, a user's key has been used for a long period, the user key manager is configured to expire the old user's key and replace it with a newly generated key. Such replacement can be made transparent to the user and the new key may be uploaded to a client machine next time the user logs on therefrom. According to another embodiment, the user key manager  keeps a private key and a public key for each of the users. The public key is used to encrypt security information in a header and the private key is used to decrypt the security information in the header.  shows an exemplary table that may be maintained by the user key manager  in conjunction with account manager .","User Monitor :","This module is configured to monitor user's requests and whereabouts. Typically, a user is granted to access secured documents from one or more designated locations or networked computers. If a user has a higher access privilege (e.g., to permit to access from other than the locations or networked computers), the user monitor  may be configured to ensure that the user can have only one access from one of the registered locations or computers at all times. In addition, the user monitor  may be configured and scheduled to periodically push or respond to a pull request of an update of access privileges.","Local Server Manager :","This module is designed to be responsible for distributing an appropriate local module for a local server servicing a predetermined location or a predetermined group of users. According to one embodiment, the local server manager  replicates some or all of the server module  being executed on the server  and distributes the replicated copy to all the local servers. As a result, a user can access secured documents anywhere within the network premises covered by the local servers without being authenticated at a single central server, namely the server . According to another embodiment, the local server manager  replicates some of the server module  being executed on the server  and distributes the replicated copy to a corresponding local server. In this embodiment, each of the local servers will have its own customized replication from the server module . When a user has a sufficiently high access privilege (e.g., to permit to access from more than one locations or one computers) and the user monitor  can detect that the user has moved from an originally configured location serviced by one local server to another permitted location serviced by another local server. Upon a notification, the local server manager  is configured to reconfigure a local module for the local server that the user has newly contacted. Namely, the user is added as a user to the local server being newly contacted. If it is required that the user can access from only one computer at a time, regardless where it is in an organization, the local server manager  can also reconfigure the local module for the local server that the user has previously contacted. As a result, the user is removed from the local server that the user previously contacted.","Partners Access Manager :","A special module to manage non-employees accounts. The non-employees may be consultants to a business that requires the consultants to access certain secured documents. The partners access manager  generally works in accordance with other modules in the server but puts additional restrictions on such users being directly managed by the partners access manager . In one application, the partners access manager  generates a request to the user key manager  to expire a key or key pair for a consultant when an engagement with the consultant ends.","Access Report Manager :","A module is configured to record or track possible access activities and primarily works with a corresponding sub-module in a client module being executed in a client machine. The access report manager  is preferably activated by the system administrator and the contents gathered in the access report manager  shall be only accessed by the system administrator or with authority.","Rules Manager :","In general, the rules manager  is an enforcement mechanism of various access rules. According to one aspect, the rules manager  is configured to specify rules based on i) data types (e.g., Microsoft Word), ii) group users or individual, iii) applicable rights, and iv) duration of access rules. Typically, a set of rules is a policy. A policy can be enabled, disabled, edited, deployed and undone (e.g., one or two levels). Policies managed by the rules manager  operate preferably on a global level. They are downloaded to the client machine during the login process (after the user is authenticated) and can be updated dynamically. In addition, respective policies may be associated with active folders (i.e., those designated places to store secured documents). These polices are also downloaded and updated on the client machine. Simple policies are also embedded in the document and provide document specific policies. According to one embodiment, a header is received by a local server from a client and the access rules from the header are retrieved. The key manager  is called upon to decrypt the encrypted security information in the header. The rules manager  is also called upon to parse the access rules from the security information and evaluate or measure the access rules against the access privilege of the user to determine whether the secured document can be accessed by the user. If the evaluation or measurement succeeds, a file key is retrieved and sent back to the client.","It should be pointed out that the server module  in  lists some exemplary modules according to one embodiment of the present invention and not every module in the server module  has to be implemented in order to practice the present invention. Those skilled in the art can understand that given the description herein, various combinations of the modules as well as modifications thereof without departing the spirits of the present invention may achieve various desired functions, benefits and advantages contemplated in the present invention.","Referring now to , there is shown a flowchart of a process  to update a user key . As described above, in some cases, there is a need to expire a user key and update the expired user key with a new one. Preferably, the process  is proceeded unnoticeably to the user, such as when the user logs onto the server. Optionally, the user is notified of the updating of his\/her user key. In general, there can be at least two situations that demand the expiration\/updating of a user key. When a user terminates with an organization, for security reasons, it is desirable to invalidate the user key associated with the user. Accordingly, at , the process  awaits a manual request. When a system administrator is notified of a departing employee, such a manual request can take place.","Alternatively, an organization or the system administrator can set up a time table to expire every user key under the management, say every six months, to replace the expired user key with a new one. At , the process awaits a timed request.","In any case, when the process  is caused to proceed forward with a request from  or , at , the key manager in the server module is consulted with to look up a user key being targeted or sought. Once the target key is retrieved, a corresponding new key is generated at  with a cipher. According to one embodiment, the cipher in use is the same one or substantially identical one used in a client module to encrypt\/decrypt the header in a secured document. This will ensure that the newly generated user key is usable when available in a client device. According to another embodiment, a pair of keys associated with a user is updated. Since the two keys are retained in the server and never leave the server, any appropriate cipher may be applicable for use to update the user keys.","Depending on the actual situation and an implementation in which the user key(s) is being replaced, the newly generated key(s) may be kept with the key manager or released to a client machine next time a corresponding user logs on therefrom. At , the process  awaits a decision whether the newly generated keys remain with the server or is downloadable to a client. When the decision is to retain the newly generated key(s) in the server, the process  goes to  in which the new key are set to be associated with the same user. When the decision is to release the newly generated keys to the user next time the user logs onto the server, the process  goes to . At , the process  awaits a contact from the user. As described above, the user may login on any time from a client machine when he\/she needs to access a secured document. When such contact does happen, the server will receive the credential information from the user to ensure that the user is who he\/she claims to be. After the user is authenticated, the new keys are encrypted with the credential information at . The credential information is provided by the user when requesting for authentication and may include a set of username and password or a biometric feature (e.g., a fingerprint) of the user. Regardless what a cipher is used, the newly generated keys are converted into an illegible format at . The encrypted new keys are then uploaded or transmitted to the client machine at . Upon receiving the encrypted new keys, the client machine is caused at  to decrypt the encrypted new keys to make the new user keys readily available for accessing secured documents or securing documents. In some cases, the client module in the client machine may be scheduled to scan in designated folders all available secured documents whose headers were originally encrypted by the old user key. These documents can be now encrypted again with the new key to ensure that the secured documents are indeed secured. In a preferable embodiment, the updating of user keys can be made to perform transparently as far as the users are concerned. In other words, the users are not aware that the process  has happened and the new keys are now installed.","Referring now to , there is shown a flowchart of a server assisted process  of accessing secured documents according to one embodiment of the present invention. The process  is discussed below with reference to . One of the features in the process , as will be further described below, is that a user key or user keys (i.e., a private and a public key) never leave the server where the keys are generated, which may enhance the level of security to the keys.","It is assumed that a user attempts to access secured documents from a client machine and has been authenticated by a server (e.g., server ) running the access control management. When a secured document is selected, document securing module (DSM)  of  determines that a user key is required to access the security information in the secured document. According to this embodiment, the DSM  is configured to separate the header from the secured document and then send the header to the server. At , such header is received from the client machine. As described before, the header includes security information in an encrypted form. At , a private user key associated with the user is retrieved. The private user key can, for example, be retrieved from the key manager. The encrypted security information in the header is then decrypted with the retrieved private user key at . As a result, the access rules for this secured document are obtained at .","At the same time, the access privilege for the user is retrieved at . The access privilege can, for example, be retrieved from the account manager. With the given access privilege and the access rules of the document, an evaluation takes place at  to determine if an access right can be granted. If the user's access privilege does not permit access according to the access rules, the process  goes to . At , an error message may be generated to forward to the client machine so that the user knows his access privilege does not allow him to access the selected document. However, on the other hand, if the user's access privilege does permit access according to the access rules, the process  goes to . At , the file key in the security information can be retrieved. At , the file key is forwarded to the client machine. With the received file key, the DSM  activates the cipher module  to decrypt the encrypted data portion of the selected document.",{"@attributes":{"id":"p-0149","num":"0148"},"figref":["FIG. 5B.5","FIG. 3"],"b":["550","550"]},"Accordingly, the DSM  is activated and in return also activates the cipher module . If the document is being secured for the first time, the cipher module  will generate a new file key. If the file is already in existence, typically the cipher module  will not generate a new file key unless requested to do so. Before the process  starts, it is also assumed that the user has been authenticated and a link between the client machine and the server is established.","Upon receiving the file key at  from the client machine, a public user key associated with the user is retrieved, for example, from the key manager at . The access rules for the document are obtained at . As described above, there are a number of ways to obtain the access rules. One possible way is to receive them directly from the client machine. Another possible way is to get from the rules manager locally if the document is placed in a folder setup by the system. Given the access rules and the file key, it is now possible to form the security information at . The security information is then encrypted with the public user key at . In one embodiment similar to , the access rules and the file key are placed in a segment if there are other segments already in the rules block.","At , the header for the document is generated. Depending on implementation, the header may include other information (e.g., a flag) that is not encrypted. Alternatively, a user block including the current user is also added into the header. The header is then forwarded at  to the client machine where the header is attached or integrated with the encrypted data portion to produce a secured document. It should be noted that the process  is also applicable when a secured document is being revised and saved into a store.","A local server device can be designed similar to that of a server as illustrated in . The local server device executes a module, referred herein as a local module which is configured to be a complete or partial replication of the server module  of . The local module  provides the dependability, reliability and scalability of the centralized access control management being undertaken by the central server  of . As such, not all authentication requests need to be handled at one central point without losing control of the access control management. For example, users are not affected if the central server is brought down for maintenance or if the connection to the central server is not available. If a number of local servers are used and each has a replication of the server module, the reliability of servicing the users is greatly enhanced. The possibility that a user wants to access a secured document but could not be authenticated is minimized.",{"@attributes":{"id":"p-0154","num":"0153"},"figref":"FIG. 6A","b":["600","500","570","600","600"]},"At , the server awaits the request. Upon receiving the request from the client machine, the server proceeds at  to determine if the user and the client machine from which the user attempts to access a secured document have been authenticated. If both have already been authenticated, there will be no more authentication processing for either of the user or the client machine. On the other hand, the authentication processing continues when the user and the client machine have not already been authenticated. In one embodiment, the server may initiate a secured link with the client machine if both the server and the client machine are coupled to an open network, such link may be over HTTPS or supported through VPN. Alternatively, there may be a direct link between the client and the server if another authentication means is employed.","At , the server responds to the received request with an authentication response. Depending on implementation, such response may be a dialog box to be displayed on the screen of the client machine, a command or other demand. In any case, the response requires that credential information be provided by the user. As described before, the credential information may be a set of username and password or biometric information of the user and must be received from the user at  before the authentication may proceed forward.","At , upon receiving the credential information, the server needs to determine if the user is an authorized one to access any secured documents maintained in a repository, a local store, the server itself or other device accessible over the network. This may involve in a match of the received credential with what is previously stored in the server. It should be noted that the server may be the central server or a local server. Those skilled in the art can understand that the description is equally applied in either one of the settings. If the match fails, namely the user is unauthorized, the process  goes back to the beginning to continue waiting for a request. In other words, the current request to access the secured documents or login to the system is abandoned. If the match successes, the user is recognized as being authorized.","At the same time, the client machine goes to a similar authentication by, perhaps, an IP address thereof, or a network card identification therein, or other means that uniquely identifies the client machine.","With authentication of both the user and the client machine, the process  goes to  where the user's access privilege is retrieved and activated. Depending on implementation, an activation of the user's access privilege may be a downloading of a file containing the access privilege to the client machine, a decryption of a local file containing the access privilege, or simply an activation of the user in a memory space of the server. In any case, at this point, the user's access privilege is readily accessible, thus permitting the user to access the secured documents from the authenticated client machine.","According to one embodiment, XML-RPC is used to facilitate the communication between a server (e.g., a local server or a central server) and a client machine. XML-RPC is a simple and portable way to make remote procedure calls over HTTP. It can be used with Perl, Java, Python, C, C++, PHP and many other programming languages. In addition, XML-RPC allows software running on disparate operating systems, running in different environments to make procedure calls over a data network. It is remote procedure calling using HTTP as the transport and XML as the encoding. XML-RPC is designed to be as simple as possible, while allowing complex data structures to be transmitted, processed and returned.","In the embodiment of implementing the dynamic configuration mechanism, the user contacts the server from a client machine, the local module in the local server is examined to determine if it has authorization to service the user from the client machine at this location. If not, the local server will communicate with the central server to determine if the local module shall be reconfigured or updated to subsequently support the user from the client machine at this location. With the reconfigured local module, the user and the client machine can be authenticated and the user's access privilege is made accessible, thus permitting the user to access secured documents from the authenticated client machine.","The configuration of a user's access to secured document is sometimes referred to as a provisioning process. The dynamic provisioning that has been described above is believed to provide the necessary security means needed by a large enterprise having employees in several locations without the loss of the centralized access control management at a central server. Further, the use of multiple local servers to support the central server can provide increased dependability, reliability and scalability.","Referring now to , there is shown a functional block diagram of a client machine . As used herein, the client machine  is a computing device primarily used by a user to access secured documents. The client machine  can, for example, be a desktop computer, a mobile device or a laptop computer. According to one embodiment, the client machine  includes a processor , a client module , a memory space , a network interface  and a local store . The client module  resides in the memory space  and, when executed by the processor , delivers features, advantages and benefits contemplated in the present invention. Through the network interface , the client machine  is capable of communicating over a data network with other computers, such as a server. From the client machine , a user can access secured documents located in a repository (store)  that may be in the client machine , another networked device, or other storage means. A client module  is an executable version of one embodiment of the present invention. According to one embodiment, the client module  includes a number of sub-modules including an access report module , a user verifying module , a key manager , a document securing module  and an off-line access manager .","Access Report Module :","This module is a software agent configured to record access activity and associated with an authenticated user. It reports to an access report module in the central server so that a record may be established as to what secured document has been accessed by which user during what time. In particular, the access report module  is activated to capture access activities of the user when the client machine is not networked. The access activities will be later synchronized with the counterpart in the server to facilitate the access control management for the offline access.","Key Manager :","One of the purposes for the key manager  is to ensure that a secured document is still usable when the secured document is being accessed by an application that suddenly crashes. According to one embodiment, after the encrypted header is decrypted, the file key is then copied or a copy thereof is stored (cached) into the key manager . The file key is then used to decrypt the encrypted document. A clear document is now available to the application. If the application crashes due to power outage or interfered by another application or OS, the file key in the header could be damaged. If no copy of the file key is available, the secured document may not be usable any more because the encrypted document would not be decrypted without the file key. In this case, the reserved key maintained in the key manager can be used to replace the damaged key and decrypt the encrypted document. After the user saves the file again, the file key is put back into the header. Another purpose for the key manager  is to cache a user key or keys of an authenticated user.","User Verifying Module :","This module is responsible for determining if a user who is accessing a secured document has been authenticated otherwise it will initiate a request for authentication with a local server or a central server. In other words, the user verifying module  is always consulted before a permission is granted to the user seeking access to a secured document. According to one embodiment, a user key or keys of an authenticated user are stored (cached) in the key manager  once the user is authenticated by the user verifying module  via the server. When a secured document is accessed, the user key must be retrieved from the key manager  to decrypt the encrypted security information in the header of the secured document.","Document Securing Module :","As described above, the DSM  includes a cipher  that is used to generate a file\/user key and encrypt\/decrypt a document\/header. In addition, other securing means may be implemented in the DSM , for example, a filter to block copying contents in a secured document into a non-secured document or a link from a secured document\/original source to another document or recipient source.","Off-Line Access Manager :","This module becomes effective only when the networked client machine is off the network, namely, the communication with a local server or a central server is not currently available. For example, a user is on the road and still needs to access some secured documents in a laptop computer. When live consultation is not available, the off-line access manager  is activated to ensure that the authorized user still can access the secured document but only for a limited time and perhaps with a limited privilege.","It should be pointed out that the client module  in  lists some exemplary sub-modules according to one embodiment of the present invention and not every module in the server module  has to be implemented in order to practice the present invention. Those skilled in the art can understand that given the description herein, various combinations of the sub-modules may achieve certain functions, benefits and advantages contemplated in the present invention.","Many aspects of the operations of the client module  have been described above. The client module  can provide off-line access capability to a user to permit working with a secured document remotely with respect to a server (i.e., the central server or a local server). The dependence on the server (either one of the central server or local server) is so minimal that the feature can be equally applied to mobile users. Referring now to , there is shown a flowchart of providing the off-line access process  in accordance with one embodiment of the present invention.","When a user has decided to be away from a company's premises for a certain period and will need to access some secured documents in a client machine (e.g., a laptop computer) that is to be carried with the user, the user may get pre-authorization from the server before the user disconnects the client machine from the network. At , the pre-authorization request is made in the client machine to seek an approval of an off-line access request from a server (e.g., a central server or a local server). Depending on an exact implementation, a response to the pre-authorization request received from the server may be a dialog box requesting further information from the user for the server to proceed with the off-line access request.","At , the user enters necessary information to the off-line access request that may include a specific time period, the user's identity. Perhaps, the off-line access request may also include the names of the secured documents or directories\/folders in which secured documents are located and will be accessed off-line. In general, the specific time is manually entered or selected while the user's identity is automatically entered since the user typically has been previously authenticated and the client machine has the user's identity. The off-line access request is then forwarded to the server where the off-line access request is processed. It is assumed that the user is authorized to have such off-line access privilege.","In operation, there are a number of possible ways to enable the off-line access capability. One exemplary way is to place a time-sensitive access amendment to the desired secured documents, for example, the user is pre-authenticated by granting a pair of newly generated short-lived user keys or uploading the user's key or keys in illegible format to the client machine (only the private key is needed if only to access secured documents and both are needed if also to secure newly created documents). In other words, the user's access privilege or the access rules in the selected secured documents have been updated for the requested period. Accordingly, depending on implementation, the amended access rules, the amended access privilege or a time-sensitive user key(s) is received from the server at .","At , the original access rules or the user's original access privilege or the original user key(s) is modified, updated or temporarily overwritten. When the amended access rules are received, the secured documents are processed to include the amendments in the access rules so that the user can access them later even when off-line. When the amended access privilege is received, the user's original access privilege is temporarily revised with the received amendments so that the user can now access secured documents off-line. When the time-sensitive user keys are received, the user's original keys are suspended (e.g. put into an illegible format and they are no longer readily usable) and the newly received keys will be effective during the off-line access period.  illustrates that an amendment of the access rules is placed into a secured document that can be accessed by users, A, B, C and D, wherein user A has requested for the off-line access and has been granted off-line access for the request, while users B, C and D cannot access the secured documents off-line.","For security purposes, the amendment will typically expire by the end of the specific off-line time regardless if the user has returned or not. This feature is important to the situations in which the client machine (e.g. a laptop computer) is separated from the user or possessed by an unauthorized person, because the secured documents in the client machine can be no longer accessed with the expired user keys even if the user's confidential information (username\/password) is hacked. Therefore, at , the process  keeps checking if the off-line time has ended. If not, the user can still access the secured documents off-line. When it is detected that the off-line time has expired, the process  goes to  wherein the original access rules are restored so that the secured documents can no longer be accessed off-line.","Similarly, the user's amended access privilege may be configured to expire as well when it is detected that the off-line time is expired, the process  goes to  wherein the user's original access privilege is restored so that the secured documents can no longer be accessed off-line. According to one embodiment, the amended access privilege is overwritten by the original access privilege.","To account for the situation in which the user may cut short his\/her travel, the process  may be configured to initiate the restoration of the original setting for the secured documents or the user's access privilege. At , the client machine detects that a connection to an access control server has been made; hence, it is assumed that the off-line access is no longer needed. The process  goes to  where the restoration of the original setting for the secured documents, the user's access privilege or user's keys takes place. As a result, the secured documents can no longer be accessed off-line from the client machine.","In any case, it is preferable to invoke the access report module  in the client module  to record the access activities by the user during the off-line access. The next time the user connects to the server, the access activities of the secured documents can be reported to the server to facilitate the access control management or synchronization of the secured documents accessed during the off-line period.","There are numerous functions, benefits and advantages in the present invention. One of the functions, benefits and advantages is that the securing mechanism contemplated in the present invention keeps selected digital assets under protection at all times by employing access rules in the secured digital assets. As such, only authorized users with authenticated machines can access the secured digital assets. Other functions, benefits and advantages are apparent to those skilled in the art given the detailed description herein.","The present invention may be implemented as a method, a system, a computer readable medium, a computer product and other forms that achieve what is desired herein. Those skilled in the art will understand that the description could be equally applied to or used in other various different settings with respect to various combinations, embodiments or settings provided in the description herein.","The processes, sequences or steps and features discussed above are related to each other and each is believed independently novel in the art. The disclosed processes, sequences or steps and features may be performed alone or in any combination to provide a novel and non-obvious system or a portion of a system. It should be understood that the processes, sequences or steps and features in combination yield an equally independently novel combination as well, even if combined in their broadest sense, i.e., with less than the specific manner in which each of the processes, sequences or steps and features has been reduced to practice.","The foregoing description of embodiments is illustrative of various aspects\/embodiments of the present invention. Various modifications to the present invention can be made to the preferred embodiments by those skilled in the art without departing from the true spirit and scope of the invention as defined by the appended claims. Accordingly, the scope of the present invention is defined by the appended claims rather than the foregoing description of embodiments."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["These and other features, aspects, and advantages of the present invention will become better understood with regard to the following description, appended claims, and accompanying drawings where:",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2C.1"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2C.2"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2D"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIGS. 2E and 2F"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2G"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIGS. 2H and 2I"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIGS. 2J and 2K"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 4B","FIG. 4A"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 4C","FIG. 3"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 5B.1","FIG. 5B.2"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 5B.3"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 5B.5","FIG. 3"]},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 7A"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 7B"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 7C"}]},"DETDESC":[{},{}]}
