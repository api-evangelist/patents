---
title: System and method for changing abilities of a process
abstract: A system and method wherein a set of privileges assigned to a process may be modified responsive to a request. The modification may apply to one or more abilities within the set of privileges and may be applied during execution of the process subsequent to the process creation time. Accordingly a process may be created with a default set of privileges and subsequently the privileges may be modified (e.g. to include a sub-set of the default privileges) thereby mitigating the risk of malicious exploitation of the process through attack.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09213571&OS=09213571&RS=09213571
owner: 2236008 Ontario Inc.
number: 09213571
owner_city: Waterloo, Ontario
owner_country: CA
publication_date: 20120606
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION"],"p":["1. Technical Field","The present disclosure relates to the field of computer executable processes and their associated abilities. In particular, to a system and method for changing abilities of a process.","2. Related Art","Computing platform operating systems may include mechanisms to enable or to restrict particular actions being taken by processes executing on a computing platform. These mechanisms may take the form of one or more abilities that can be assigned or denied to individual processes. The collection of abilities assigned to a process may be referred to as a set of privileges.","In multi-user operating systems, a set of privileges may be associated with each user (a.k.a. user-id). Each running process may be given the set of privileges that is associated with the owner (e.g. user-id) of the process. When a user-id is highly privileged, processes owned by the user-id may become targets for malicious exploitation in order to circumvent security measures on the computing platform.","On a computing platform a privilege is a permission to perform an action (a.k.a. an ability). In multi-user operating systems a set of privileges may be associated with each user identity (user-id) on the system; the set of privileges containing one or more abilities that are assigned to the user-id. Alternatively or in addition, a set of privileges may be associated with each of one or more group identities (group-id) and in turn with each user-id that is a member of each group-id. Some systems may include one or more user-ids that are designated as system administrator users (a.k.a. root user, root, or sys admin) that may be given all possible privileges.","Each process executing on the computing platform may be assigned a set of privileges. The set of privileges assigned to a process may be based on the set of privileges associated with the user-id of the owner of the process. The process may be assigned the set of privileges associated with the owner of the process at the time the process is created.","Processes that execute the core functions (a.k.a. kernel) of the operating systems or that are created during the start-up phase (a.k.a. boot sequence) of operation may be owned by a system administrator user-id that in UNIX\u00ae-like (UNIX is a registered trademark of The Open Group of San Francisco, Calif.) operating systems is referred to as \u2018root\u2019. Processes that are owned by root can be said to run as root. Processes that run as root may be omnipotent (e.g. have all possible privileges). While using processes that are omnipotent facilitates the execution of the core operating system and start-up functions, it may also leave the system vulnerable to forms of attack that exploit the omnipotence of these processes.","Herein are described systems and methods wherein the set of privileges assigned to a process may be modified responsive to a request. The modification may apply to one or more abilities within the set of privileges and may be applied during execution of the process subsequent to the process creation time. Accordingly a process may be created with a default set of privileges and subsequently the privileges may be modified to include only a sub-set of the default privileges thereby mitigating the risk of malicious exploitation of the process through attack.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["100","102","104","102","108","110","108","110","102","112","102","106","108","110","114","104","104","114","108","110","114","104","102","106"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3","b":["302","304","306","114","114","114","308","114","114","304","114","114"]},{"@attributes":{"id":"p-0018","num":"0017"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Ability Identifier","Controls the process' ability to:","Sub-range (optional)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["PROCMGR_AID_CLOCKPERIOD","Change the clock period, using","Allowable periods, in"]},{"entry":[{},"ClockPeriod( )","nanoseconds"]},{"entry":["PROCMGR_AID_CLOCKSET","Set the clock, using clock_settime( ),","Allowable times, in"]},{"entry":[{},"settimeofday( ), ClockAdjust( ), or","nanoseconds"]},{"entry":[{},"ClockTime( )"]},{"entry":["PROCMGR_AID_CONFSET","Set configuration strings, using confstr( ) A","Allowable names"]},{"entry":[{},{},"(_CS_*)"]},{"entry":["PROCMGR_AID_CONNECTION","Use ConnectAttach( ) to establish a","\u2014"]},{"entry":[{},"connection between a process and a"]},{"entry":[{},"channel-"]},{"entry":[{},"Use ConnectFlags( ) to modify the flags"]},{"entry":[{},"associated with a connection"]},{"entry":[{},"Use SyncMutexEvent( ) or SyncCtl( ) to"]},{"entry":[{},"attach a pulse to a mutex"]},{"entry":["PROCMGR_AID_CPUMODE","Change the CPU's power management","Allowable modes"]},{"entry":[{},"mode"]},{"entry":["PROCMGR_AID_EVENT","Trigger privileged system-wide events,","Trigger bits"]},{"entry":[{},"using"]},{"entry":[{},"procmgr_event_trigger( )"]},{"entry":["PROCMGR_AID_FORK","Create a new process by calling fork( )","\u2014"]},{"entry":["PROCMGR_AID_GETID","Get the group ID or session ID of a","\u2014"]},{"entry":[{},"process outside the calling process's"]},{"entry":[{},"session, by using getpgid( ) or getsid( ),"]},{"entry":[{},"respectively"]},{"entry":["PROCMGR_AID_INTERRUPT","Attach interrupt handlers by calling","Interrupt sources"]},{"entry":[{},"InterruptAttach( ), or events by calling"]},{"entry":[{},"InterruptAttachEvent( )."]},{"entry":["PROCMGR_AID_IO","Request I\/O privileges by calling","\u2014"]},{"entry":[{},"ThreadCtl (_NTO_TCTL_IO, 0)"]},{"entry":["PROCMGR_AID_KEYDATA","Pass data through a common client, by","\u2014"]},{"entry":[{},"calling"]},{"entry":[{},"MsgKeyData( )"]},{"entry":["PROCMGR_AID_MAP_FIXED","Use mmap( ) with MAP_FIXED to map","Allowable virtual"]},{"entry":[{},"fixed addresses (including zero)","addresses"]},{"entry":["PROCMGR_AID_MEM_ADD","Add physical memory","Allowable physical"]},{"entry":[{},{},"addresses"]},{"entry":["PROCMGR_AID_MEM_GLOBAL","Mark shared memory as being global","\u2014"]},{"entry":[{},"across all processes, by calling shm_ctl( )"]},{"entry":[{},"or shm_ctl_special( ), specifying"]},{"entry":[{},"SHMCTL_GLOBAL"]},{"entry":["PROCMGR_AID_MEM_LOCK","Lock a range of process address space","Allowable virtual"]},{"entry":[{},"into physical memory, by calling mlock( )","addresses"]},{"entry":[{},"or mlockall( )"]},{"entry":["PROCMGR_AID_MEM_PEER","Manipulate a peer process's memory","Peer process IDs"]},{"entry":["PROCMGR_AID_MEM_PHYS","Map physical memory, by calling","The lower and upper"]},{"entry":[{},"mmap( ), specifying MAP_PHYS, or by","physical address range"]},{"entry":[{},"calling mmap_device_io( ) or"]},{"entry":[{},"mmap_device_memory( )"]},{"entry":["PROCMGR_AID_MEM_SPECIAL","Call shm_ctl_special( )","\u2014"]},{"entry":["PROCMGR_AID_PATHSPACE","Add items to the procnto pathname","\u2014"]},{"entry":[{},"prefix space, specifically to create"]},{"entry":[{},"symbolic links by calling"]},{"entry":[{},"pathmgr_symlink( ), or to register names"]},{"entry":[{},"in the path space by calling"]},{"entry":[{},"resmgr_attach( )"]},{"entry":["PROCMGR_AID_PGRP","Set its process group ID, by calling","Process IDs"]},{"entry":[{},"setpgrp( ) or procmgr_session( ). This"]},{"entry":[{},"ability is enabled by default (for POSIX"]},{"entry":[{},"conformance)."]},{"entry":["PROCMGR_AID_PRIORITY","Use pthread_setschedparam( ),","Allowable priorities"]},{"entry":[{},"pthread_setschedprio( ),"]},{"entry":[{},"sched_setparam( ),"]},{"entry":[{},"sched_setscheduler( ), setprio( ), or"]},{"entry":[{},"SchedSet( ) to change its priority to one"]},{"entry":[{},"that's above the maximum allowed for"]},{"entry":[{},"unprivileged processes. Use"]},{"entry":[{},"pthread_mutexattr_setprioceiling( ),"]},{"entry":[{},"pthread_mutexattr_setprotocol( ),"]},{"entry":[{},"pthread_mutex_setprioceiling( ),"]},{"entry":[{},"SyncCtl( ), or SyncTypeCreate( ) to set"]},{"entry":[{},"the priority ceiling for a mutex to a value"]},{"entry":[{},"greater than the maximum allowed for"]},{"entry":[{},"unprivileged processes"]},{"entry":["PROCMGR_AID_PROT_EXEC","Load code by calling dlopen( ) or map","Allowable virtual"]},{"entry":[{},"memory as executable by calling","addresses"]},{"entry":[{},"mmap( ) with PROT_EXEC"]},{"entry":["PROCMGR_AID_QNET","Used by Qnet when it creates a channel.","\u2014"]},{"entry":["PROCMGR_AID_REBOOT","Cause the system to reboot by calling","\u2014"]},{"entry":[{},"sysmgr_reboot( )"]},{"entry":["PROCMGR_AID_RLIMIT","Use setrlimit( ) to raise hard limits on","Limits (RLIMIT_*) that"]},{"entry":[{},"system resources","it can raise"]},{"entry":["PROCMGR_AID_RSRCDBMGR","Use the rsrcdbmgr*( ) functions to","\u2014"]},{"entry":[{},"manipulate the resource database"]},{"entry":[{},"manager"]},{"entry":["PROCMGR_AID_RUNSTATE","Use sysmgr_runstate( ) and","Allowable CPU"]},{"entry":[{},"sysmgr_runstate_dynamic( ) to control a","numbers"]},{"entry":[{},"CPU's running state"]},{"entry":["PROCMGR_AID_SCHEDULE","Use pthread_getschedparam( ),","\u2014"]},{"entry":[{},"SchedGet( ), pthread_setschedparam( ),"]},{"entry":[{},"or SchedSet( ) to get or set the"]},{"entry":[{},"scheduling policy for a process whose"]},{"entry":[{},"real or saved user ID is different from"]},{"entry":[{},"the calling process's real or effective"]},{"entry":[{},"user ID"]},{"entry":["PROCMGR_AID_SESSION","Use procmgr_session( ) to change a","Allowable session IDs"]},{"entry":[{},"character terminal's process group or to"]},{"entry":[{},"send a signal to a member of a session"]},{"entry":[{},"group"]},{"entry":["PROCMGR_AID_SETGID","Set its group ID, effective group ID, real","Allowable group IDs"]},{"entry":[{},"and effective group IDs, or"]},{"entry":[{},"supplementary group IDs by calling"]},{"entry":[{},"setgid( ), setegid( ), setregid( ), or"]},{"entry":[{},"setgroups( ), respectively"]},{"entry":["PROCMGR_AID_SETUID","Use setuid( ) to set its user ID and","Allowable user IDs"]},{"entry":[{},"effective user ID to values other than its"]},{"entry":[{},"real or saved-set user ID"]},{"entry":["PROCMGR_AID_SIGNAL","Attach signal handlers to a process with","Allowable signals"]},{"entry":[{},"a different real or effective user ID by"]},{"entry":[{},"calling sigaction( ), signal( ), or"]},{"entry":[{},"SignalAction( )"]},{"entry":["PROCMGR_AID_SPAWN","Spawn new processes by calling exec*( ),","\u2014"]},{"entry":[{},"spawn*, or posix_spawn( )"]},{"entry":["PROCMGR_AID_SPAWN_SETG","Set the group ID of the child process","Lower and upper"]},{"entry":["ID","when using posix_spawn( )","bounds on the group"]},{"entry":[{},{},"IDs that the process"]},{"entry":[{},{},"can set the child"]},{"entry":[{},{},"process to"]},{"entry":["PROCMGR_AID_SPAWN_SETU","Set the user ID of the child process","Lower and upper"]},{"entry":["ID","when using posix_spawn( )","bounds on the user IDs"]},{"entry":[{},{},"that the process can"]},{"entry":[{},{},"set the child process to"]},{"entry":["PROCMGR_AID_TIMER","Create a timer that sends a pulse by","Timer IDs"]},{"entry":[{},"calling timer_create( ) or"]},{"entry":[{},"TimerCreate( )Get timer information by"]},{"entry":[{},"calling timer_getexpstatus( ),"]},{"entry":[{},"timer_getoverrun( ), timer_gettime( ), or"]},{"entry":[{},"TimerInfo( )"]},{"entry":["PROCMGR_AID_TRACE","Add handlers for trace events or allocate","\u2014"]},{"entry":[{},"the instrumented kernel's trace buffers"]},{"entry":[{},"by calling TraceEvent( )"]},{"entry":["PROCMGR_AID_UMASK","Use umask( ) to change the file-mode","\u2014"]},{"entry":[{},"creation mask for a process with a"]},{"entry":[{},"different effective user ID"]},{"entry":["PROCMGR_AID_V86","Call_intr_v86( )","\u2014"]},{"entry":["PROCMGR_AID_WAIT","Use wait( ), wait3( ), wait4( ), waitid( ), or","Child process IDs"]},{"entry":[{},"waitpid( ) to wait for the status of a"]},{"entry":[{},"terminated child process whose real or"]},{"entry":[{},"saved user ID is different from the"]},{"entry":[{},"calling process's real or effective user ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0019","num":"0018"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Action Identifier","Action to be taken:"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["PROCMGR_AOP_DENY","Disallow the performance of the"]},{"entry":[{},"operation in the specified"]},{"entry":[{},"domain(s)."]},{"entry":["PROCMGR_AOP_ALLOW","Allow the performance of the"]},{"entry":[{},"operation in the specified"]},{"entry":[{},"domain(s)."]},{"entry":[{},"You must be root when doing this"]},{"entry":[{},"for privileged abilities."]},{"entry":["PROCMGR_AOP_SUBRANGE","Restrict the feature to set its"]},{"entry":[{},"\u201cparameter\u201d to a certain subrange"]},{"entry":[{},"in the specified domain(s)."]},{"entry":[{},"The meaning of the \u201cparameter\u201d"]},{"entry":[{},"varies, depends on the ability, as"]},{"entry":[{},"described in Table 1."]},{"entry":["PROCMGR_AOP_LOCK","Lock the current ability so that no"]},{"entry":[{},"further changes to it can be made."]},{"entry":["PROCMGR_AOP_INHERIT_YES","The changes to the ability are"]},{"entry":[{},"inherited across a spawn or exec."]},{"entry":["PROCMGR_AOP_INHERIT_NO","The changes to the ability"]},{"entry":[{},"aren't inherited across a spawn"]},{"entry":[{},"or exec. This is the default."]},{"entry":["PROCMGR_ADN_ROOT","Modify the ability of the process"]},{"entry":[{},"when it's running as root."]},{"entry":["PROCMGR_ADN_NONROOT","Modify the ability of the process"]},{"entry":[{},"when it isn't running as root."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 4","FIG. 3"],"b":["402","404","402","404","114","402","404"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2","b":["100","202","204","202","202","204","202"]},"The memory  may comprise a device for storing and retrieving data or any combination thereof. The memory  may include non-volatile and\/or volatile memory, such as a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM), or a flash memory. The memory  may comprise a single device or multiple devices that may be disposed on one or more dedicated memory devices or on a processor or other similar device. Alternatively or in addition, the memory  may include an optical, magnetic (hard-drive) or any other form of data storage device.","The memory  may store computer code, such as the process manager , the system interface  and\/or any other application . The computer code may include instructions executable with the processor . The computer code may be written in any computer language, such as C, C++, assembly language, channel program code, and\/or any combination of computer languages. The memory  may store information in data structures such as the process metadata repository  and the user-id metadata repository .","All of the disclosure, regardless of the particular implementation described, is exemplary in nature, rather than limiting. The system  may include more, fewer, or different components than illustrated in . Furthermore, each one of the components of system  may include more, fewer, or different elements than is illustrated in . Flags, data, databases, tables, entities, and other data structures may be separately stored and managed, may be incorporated into a single memory or database, may be distributed, or may be logically and physically organized in many different ways. The components may operate independently or be part of a same program or hardware. The components may be resident on separate hardware, such as separate removable circuit boards, or share common hardware, such as a same memory and processor for implementing instructions from the memory. Programs may be parts of a single program, separate programs, or distributed across several memories and processors.","The functions, acts or tasks illustrated in the figures or described may be executed in response to one or more sets of logic or instructions stored in or on computer readable media. The functions, acts or tasks are independent of the particular type of instructions set, storage media, processor or processing strategy and may be performed by software, hardware, integrated circuits, firmware, micro code and the like, operating alone or in combination. Likewise, processing strategies may include multiprocessing, multitasking, parallel processing, distributed processing, and\/or any other type of processing. In one embodiment, the instructions are stored on a removable media device for reading by local or remote systems. In other embodiments, the logic or instructions are stored in a remote location for transfer through a computer network or over telephone lines. In yet other embodiments, the logic or instructions may be stored within a given computer such as, for example, a central processing unit (\u201cCPU\u201d).","A default set of privileges may be associated with each of one or more user-ids and stored in a data structure such as, for example, user-id metadata repository . The operating system may comprise a processor creator that is part of the kernel. The kernel may create one or more processes over time. Each created process may be owned by a user-id and may be assigned a default set of privileges associated with the user-id. The operating system may provided a means for receiving a request to modify the abilities of a process via, for example, a procedure call (a.k.a. a system call) that may be embodied in a linking library such as, for example, a \u2018C\u2019 library. The procedure call may be invoke by a process with the object of the call being the process itself. Alternatively or in addition, the procedure call invoked by a process other than the process that is the object of the call. The process that is the object of the request to modify may be identified by, for example, including in the request to modify a process identifier (pid) of the process. When the request to modify is received, the kernel may modify the set of privileges assigned to the process. The process creator may further create one or more child processes on behalf of the process. Each child process may be assigned the set of privileges assigned to it's parent process at the time of the child process' creation.","While various embodiments of the invention have been described, it will be apparent to those of ordinary skill in the art that many more embodiments and implementations are possible within the scope of the present invention. Accordingly, the invention is not to be restricted except in light of the attached claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["The disclosure may be better understood with reference to the following drawings and description. The components in the figures are not necessarily to scale, emphasis instead being placed upon illustrating the principles of the invention. Moreover, in the figures, like referenced numerals designate corresponding parts throughout the different views.",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
