---
title: Enforcing security on an attribute of an object
abstract: Methods, systems, and schema are provided for enforcing security on an attribute of an object. An instance of an object is created or modified using the schema where a number of the attributes for the object include descriptors. The attributes of the created or modified object are checked to ensure that the modifier has access rights to the attributes. If the modifier does not have the access rights, then values are not assigned to the attributes requested by the modifier. When the modifier provides values for an attribute having the corresponding descriptor, the values are also checked to determine if they are references to a second object. In which case, a check is made to ensure the modifier has an access right to the second object. If no such access right exists, then the values are not assigned to the attribute as originally requested by the modifier.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07107538&OS=07107538&RS=07107538
owner: Novell, Inc.
number: 07107538
owner_city: Provo
owner_country: US
publication_date: 20020912
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COPYRIGHT NOTICE\/PERMISSION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever. The following notice applies to the software and data as described below and in any drawings hereto: Copyright \u00a9 2002, Novell, Inc., All Rights Reserved.","The present invention relates to enforcing security on attributes of objects, and in particular to methods, systems, and schemas used to ensure an attribute of an object does not reference another object where access is restricted.","Ensuring security in a distributed computing environment is becoming increasingly complex. As soon as a security hole is detected and patched, another vulnerability is detected. Traditionally, security is enforced at various levels of abstraction within a distributed environment. For example, the Operating System (OS) is layered and includes a File System (FS) or Directory System (DS). Both the OS and the DS employ security techniques to prevent unintentional or malicious damage to the resources (e.g., hardware and\/or software) of the distributed environment.","In order to decrease the coding complexity of conventional DSs, the DSs are modularized at various levels of abstraction similar to the design of OSs. Accordingly, some DSs use Object Oriented (OO) design and programming methodologies. In an OO approach, resources (physical and logical), organizations, applications, users, geographic locations, and the like are encapsulated as object entities within a software module. The objects include publicly available access methods and privately available access methods. The private methods are used, in part, to enforce some security since only internal or authorized users, objects, and\/or applications are permitted to process the private methods. The private methods also permit the objects to hide lower levels of coding abstraction that are associated with the objects. The public methods are published and accessible to other users, objects, and\/or applications and are used to communicate with the object.","Objects also include attributes or properties that can be set or accessed through a number of the public methods associated with the objects. For example, a DS object representing a user can include an attribute called GroupMembership, where one or more values assigned to the GroupMembership attribute represent other objects and\/or object groups to which the user belongs. The user object can also include an attribute that identifies the directory in which the user is to be placed upon login. Moreover, as is readily apparent to one of ordinary skill in the art, a single object can be a superset of aggregation of a multitude of other objects.","Although the OO approach for DSs implementations can enforce security attributes for accesses to the objects a security hole is readily detected. For instance, a modifier (e.g., user, application, or another object) can generate an instance of an object. The modifier has access to generate the instance of the object. While defining the instance, the modifier can provide a value for an attribute of the instance. The value can be a hard coded string constant to a different object. Moreover, the different object can be a destructive operation, such as a format hard drive operation. Furthermore, the attribute of the instance can include a forced execution value, such that the modifier can assign the format hard drive operation and force its execution upon login of a user. Conventionally, the values provided for attributes are not validated to ensure that the values are not references to other objects that the modifier is not permitted to access.","The security hole is particularly noticeable when two or more systems are interfaced with one another and have access to the same object. For example, a first system, such as a calendaring system, may permit a user with proper access rights to a conference room to freely invite other users to attend a meeting in the conference room. The conference room is represented as an object within the first system, and the conference room can include a plurality of attributes such as direction information, time-of-day limitations, date limitations, invited attendees, and the like. The calendar object can also be interfaced to other systems, such as email systems, word processing systems, and\/or systems that permit values of attributes defined within the calendar object to trigger the automatic execution of an external application. With conventional designs and approaches it would be perfectly permissible for a user to invite attendees to a meeting in the conference room, since on the surface this appears to be an innocuous operation (e.g., not actually modifying an attendee's calendar). But, if values provided as attributes of the conference room are also linked with other systems, such that external applications can be automatically launched, then the user could achieve something typically not permissible. For example, the user could forcibly place an entry on an attendee's calendar, or the user could do something more destructive, such as using a second system to launch a destructive application that could do damage to resources of an attendee.","As is now apparent, there exists a need for improved techniques that enforce security on attributes of objects. This is particularly useful when objects are used by two or more different systems. Furthermore, the techniques should be flexible, practical, easy to manage, integrate, and implement.","In various embodiments of the present invention, techniques for enforcing security on attributes of objects are described. A modifier uses a schema to create or modify instances of an object. If the modifier provides a value for an attribute associated with a descriptor, then the value is checked to ensure the modifier has access rights to provide the value.","More specifically and in one embodiment of the present invention, a method to enforce security on an attribute of an object is presented. A definition for a first object and one or more attribute values for the first object are received. Next, the values are checked to determine if one of the values is associated with an attribute having a descriptor. Any value associated with the descriptor is validated to determine if the value is a reference to a second object. Finally, it is determined whether a modifier of the first object has an access right to the second object before permitting the first object to be associated with the value that references the second object.","In another embodiment of the present invention, another method is provided to enforce security on an object. A descriptor to an attribute of an object is assigned in a schema for the object. A value associated with the attribute is checked when provided by a modifier using the schema and a determination is made as to whether the value references a second object. Moreover, the value is disregarded when the value references the second object and the modifier lacks proper access rights to the second object.","In still another embodiment of the present invention, a system to enforce security for an attribute of an object is described. The system includes a schema, a descriptor, and a managed object. The schema is used to define an instance of an object. The descriptor is assigned to one or more attributes of the object and defined within the schema. Further, the managed object validates values assigned to the attributes having the descriptor in order to ensure that the values reference additional objects where a modifier providing the values has access rights to the additional objects.","In yet another embodiment of the present invention, a schema residing on a computer readable medium for enforcing security on an attribute of an object is provided. The schema includes metadata and a descriptor. Moreover, the metadata is used to define instances of objects within a directory system. The descriptor is used to flag attributes associated with one or more of the instances of the object. Furthermore, the descriptor helps determine if a value assigned to one of the attributes is associated with an external object, and if so, to validate that a modifier provided value has an access right to reference the external object.","Still other aspects of the present invention will become apparent to those skilled in the art from the following description of various embodiments. As will be realized the invention is capable of other embodiments, all without departing from the present invention. Accordingly, the drawings and descriptions are illustrative in nature and not intended to be restrictive.","In the following description, reference is made to the accompanying drawings that form a part hereof, and in which is shown by way of illustration specific embodiments in which the invention may be practiced. These embodiments are described in sufficient detail to enable one of ordinary skill in the art to practice the invention, and it is to be understood that other embodiments may be utilized and that structural, logical, optical, and electrical changes may be made without departing from the scope of the present invention. The following description is, therefore, not to be taken in a limited sense, and the scope of the present invention is defined by the appended claims.","Objects include logical software representations of users, organizations, geographic locations, software applications, hardware\/software resources, and the like. The objects can be embodied and implemented using traditional OO techniques or through any standard (e.g., structured) programming technique. Objects include attributes or properties. Instances of objects are defined by rules (e.g., metadata) controlled by object schemas. The object schemas can be in any data format (e.g., Extensible Markup Language (XML), Extensible Style Sheets Language (XSL), and others).","Moreover, the instances of the objects are created or generated by a modifier. The modifier can be an object, user, application, and the like. The modifier accesses an object's schema to define a permissible instance of an object or to modify an existing instance of the object. In creating or modifying an object instance, the schema will define what attributes are mandatory for the instance and what attributes are optional for the instance. In various embodiments of the present disclosure, the schema is accessible to the modifier through an Application Programming Interface (API) library and\/or a Graphical User Interface (GUI) application.","Furthermore, in one embodiment, the present disclosure is implemented within a DS, such as NetWare, distributed by Novell, Inc. of Provo, Utah. In another embodiment the present disclosure is implemented within eDirectory, distributed by Novell, Inc. of Provo, Utah. Of course any DS, or DS enabled application can utilize the teaching of the present disclosure to improve security. Moreover, any application that defines objects and security for those objects can benefit from the present disclosure. All such DSs and applications are intended to fall within the broad scope of the present invention.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1","b":"100"},"At , a definition of a first object is received from a modifier. The definition need not be a new definition of the first object, since in some embodiments; the definition is a modification to an original definition associated with the first object. The modifier can be an object, an application, and\/or a user. The modifier interfaces with the schema to define or modify the first object. In some cases, at , some of the information provided by the modifier (e.g., directly or indirectly) is received as metadata for the first object. Metadata includes definitional information about the first object, such date created, modifier identification, and the like. The schema itself also includes metadata (e.g., rules about object instances).","The modifier also provides attribute values, at , for any attributes created for the first object. In some embodiments, the attribute values are supplied as string constants or hard coded values that do not require any substitution to resolve their values. At , a check is made to determine if any of the attribute value assignments are associated with an attribute that has a descriptor in the object schema. If none of the values are associated with attributes having a descriptor, then, at , the assignments are permitted and the definition or modification of the first object is concluded.","If an attribute value was assigned to an attribute with a descriptor, then, at , and additional check is made to determine if any of the values are associated with a second object. If no attribute values are associated with the second object, then the value assignments and the definition\/modification of the first object is permitted to conclude at .","However, if an attribute value is associated with the second object, then yet another check is performed. Accordingly, at , a check is made to determine whether the modifier has an access right to the second object being referenced by one of the supplied attribute values. If the modifier lacks the access right, then, at , the current attempted definition or modification of the first object is denied. In some embodiments, the invalid attempt to create or modify the first object is recorded automatically as an invalid transaction. The invalid transaction can then be automatically reported to a system administrator. If the modifier has the access right to the second object, then, at , the value assignments and the definition or modification of the first object is permitted to conclude.","In some embodiments, the first object is a group object that includes a plurality of member objects. In more embodiments, the second object is a destructive object that can cause potential harm or damage to hardware resources, software resources, or other objects. Additionally, method , in some instances, is implemented in a DS.","Furthermore, in some embodiments, the check that is performed on values associated with descriptors can be implemented using a managed object. The managed object is automatically triggered to perform the appropriate checks whenever values are provided for an affected attribute. In this way, a more generic implementation is achieved, with a single managed object that is capable of performing checks on instances of objects being defined or modified by modifiers.","As one of ordinary skill in the art now appreciates, security is enforced on attributes of objects seamlessly and in a least restrictive manner. Thus, unlike conventional approaches, the present disclosure uses a schema to determine when values that are provided reference external objects and then detects the access rights of the external object relative to the modifier. Therefore, both the created\/modified object instance and the external object reference are managed.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2","b":"200"},"At , the schema is accessed by a person or application authorized to modify and\/or create schemas. At , while defining the schema, a descriptor is placed as a flag on one of the available attributes for instances of objects being defined by the schema. At some later point in time, once the schema is defined, a modifier accesses the schema to define or modify an object instance.","During the definition\/modification of the object, a value for an attribute is received from the modifier, at . In some cases, the modifier accesses the schema using a GUI application as depicted at . When the value is received, at check is performed at  to determine if the value references a second object. If the value does not reference a second object, then, at , the definition\/modification of the object instance is defined.","However, at , if the value does reference a second object, then a check is made to determine whether the modifier has appropriate access rights to the second object. Correspondingly, at , if the modifier lacks the proper access rights to the second object, then the value assignment is not permitted. Moreover, in some embodiments, the attempted value assignment is recorded as an unauthorized transaction, as depicted at . In this way, automatic records and notifications can be recorded and sent when unauthorized assignments are detected. This can further assist in discouraging malicious behavior, or in alerting individuals of their negligent behavior. However, if the modifier has the proper access rights, then, at , the definition or modification of the object instance concludes normally.","In some embodiments, a generic managed object is implemented to determine whether the value references a second object and whether the modifier has the proper access rights to make the reference to the second object. Additionally, in one embodiment, the modifier is a user or an application and the value provided is the name of a directory within a directory system. The value can also include an indication that a destructive operation is to be automatically performed when a user logs into a directory identified by the directory name.","The present disclosure permits an object instance, being defined or modified by a modifier and all references included within the instance, to be efficiently managed for security. This does not require unduly managing each available attribute with individual ACLs and the like, rather, a more generic global approach is used to flag attributes with descriptors indicating further security checks are warranted.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 3","b":["300","300","302","304","306","340","302","330"]},"The attributes  define properties and values for the object instances . Some attributes  can be mandatory, as defined by the schema , while other attributes  can be optionally available with the object instances . Descriptors  are uniquely assigned to one or more of the attributes  in the schema . The descriptors  are flags that are used to identify those attributes  that require further checking and\/or validation when values are assigned to attributes . Descriptors  can be associated with those attributes  that are capable of including values that reference additional objects.","The schema , in some embodiments, is accessible via a GUI application and\/or API library . Once the schema  is defined with the appropriate assignments of descriptors  to attributes , the schema is accessible to a modifier  who desires to use the schema  in order to create or modify one or more instances of objects  defined by the schema .","The managed object  interfaces with the schema  and is accessed when values are provided for attributes  that have descriptor  assignments. The managed object  can be used with a plurality of different schema, or it can be custom developed for use with a single specialized schema. The managed object  validates values assigned to attributes  that have descriptors . First, the managed object  determines if any provided value references an additional object not being defined or modified by the modifier , and if so, the managed object validates that the modifier  has access rights to the additional object before permitting the modifier  to create or modify an object instance  that includes the unauthorized reference.","The managed object  can be linked to the descriptors , such that when an attribute  receives a value, the managed object  is automatically processed. Alternatively, the managed object  can be called by a schema application when a value is provided by the modifier  or when the modifier attempts to save a definition for an instance of an object .","In some embodiments, a single instance of an object  can be a group object having a plurality of member objects. Additionally, in one embodiment, system  is implemented in a DS, and is used to manage various aspects of the DS. The system  uses the managed object  to manage any references made by a modifier  to additional objects that are not being defined or modified within the schema . In this way, all references to objects are detected in system  and security is improved. This is particularly useful when managing DSs.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 4","b":["400","400","402","404","402","440","440","404","404","400"]},"A number of the attributes  include descriptors , the descriptors  are flags or indications within the schema as to attributes  that can have values which reference external objects . The descriptors  can be used to force checks on value assignments to the attributes . Moreover, if a value provided by a modifier  does reference an external object , then a check is made to ensure the modifier  has an access right to reference the external object . If the modifier  lacks the access right, then the value is not assigned to the desired attribute .","The modifier  can access and interact with the schema  to create or modify one of more instances of the objects  via a GUI application and\/or API library . As previously discussed, the modifier  can be a user, an application, or any other object within the DS. In some instances, the value provided by the modifier  for assignment to an attribute  is a reference to an external object  that is a destructive executable application, which when referenced is automatically executed.","Moreover, a generic object (e.g., managed object) can perform the validations that are triggered by a value assignment to an attribute  having a descriptor . Alternatively, an application (e.g., part of the GUI\/API , or separate there from) can perform the validations. Additionally, any unauthorized value assignments that are detected can be automatically logged and\/or reported.","As one of ordinary skill in the art now appreciates upon reading the present disclosure, a single definition of an object instance can have its associated references inspected for additional security in order to ensure that external objects are not being accessed without the appropriate access rights. Thus, with the teachings presented with the present disclosure all objects within a computing environment can be more effectively managed for security and more easily maintained.","The foregoing description of various embodiments of the invention has been presented for purposes of illustration and description. It is not intended to be exhaustive nor to limit the invention to the precise form disclosed. Many alternatives, modifications, and variations will be apparent to those skilled in the art in light of the above teaching. For example, although various embodiments of the invention have been described as a series of sequential steps, the invention is not limited to performing any particular steps in any particular order. Accordingly, this invention is intended to embrace all alternatives, modifications, equivalents, and variations that fall within the spirit and broad scope of the attached claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
