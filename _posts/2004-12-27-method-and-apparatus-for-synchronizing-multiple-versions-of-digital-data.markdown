---
title: Method and apparatus for synchronizing multiple versions of digital data
abstract: A method and system for synchronizing multiple versions of multimedia objects is provided. Each multimedia object may be identified by a unique identifier. In addition, a history graph may be generated and maintained for each object, where the history graph includes nodes that store unique identifiers and whose vectors describe the relationship between the multimedia objects. Metadata may be used to describe the transformations of objects.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07454444&OS=07454444&RS=07454444
owner: Microsoft Corporation
number: 07454444
owner_city: Redmond
owner_country: US
publication_date: 20041227
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application is a divisional of prior U.S. application Ser. No. 09\/809,058, filed Mar. 16, 2001, the entire contents of which are incorporated herein by reference.","The present invention relates to synchronizing multiple versions of multimedia objects by maintaining a history graph and descriptive metadata for the transition between points in the history graph. More particularly, the present invention is directed to a method and apparatus for synchronizing multiple versions of multimedia objects by assigning multimedia objects respective unique identifiers, and by creating a history graph having nodes that store unique identifiers and whose vectors describe the relationship between the multimedia objects.","With the advent of networked computers, distributed computing, replicated data storage, mobile computing, and especially the use of multiple computing devices by a single user, there is a problem of managing multiple duplicates of the same object, such as a document or an image. For example, a user may take pictures using a digital camera and then transfer some of the pictures to a mobile computing device, such as a notebook PC. Later, some of the pictures may be transferred to a desktop PC, edited and added to a catalog. This process may be repeated with multiple pictures. In the process, the cataloging software may create thumbnail representations of some of the pictures. A few of the pictures may find their way to a Web site. At every stage, an image may be edited, reformatted, or combined with other images. If at some other time the user wants to consolidate the multiple, somewhat different copies of these pictures, the user is confronted with virtually an impossible task. That is because it is quite difficult to remember or track how those images relate to each other, and very difficult to analyze the differences between similar images, either automatically or by human intervention. If the user wants to maintain duplicate copies of the \u201cimage album\u201d both on the home PC and mobile PC, and the user occasionally applies changes to either one, it is next to impossible to propagate those changes from one location to another. These difficulties also arise with respect to other multimedia objects such as audio and video data.","While tools exist to automatically synchronize versions of text documents, no such tools are available for other multimedia object comparison and merging. In addition, the nature of multimedia objects such as image data is much more complicated than pure text, making the problem much more complex to solve.","There are cameras available that save the filename as picture 0004, the fourth picture taken in the history of this camera, and the next image will be saved as picture 0005, so there is some level of a unique identifier. However, these identifiers are not unique to all the cameras in the world. For every such camera, the fourth picture taken will be saved as picture 0004.","Therefore, there is a need for a method and apparatus for synchronizing multiple versions of multimedia objects by assigning multimedia objects unique identifiers, respectively, and creating a history graph having nodes that store unique identifiers and whose vectors describe the relationship between the multimedia objects. In addition, there is also a need for a method and apparatus for synchronizing multiple versions of multimedia objects by adding metadata associated with each unique identifier describing the transformations applied to the corresponding multimedia object.","The present invention solves the foregoing deficiencies of the prior art by providing a quick, manageable method and system for synchronizing multiple versions of multimedia objects. More particularly, according to an aspect of the present invention each multimedia object may be identified by a unique identifier, rather than according to their location in a database or a file system. The use of unique identifiers allows synchronization of individual objects and reduces overhead in each system. In addition, a history graph is generated and maintained for each object, where the history graph includes nodes that store unique identifiers and whose vectors describe the relationship between the multimedia objects. Metadata may be used to describe the transformations of object. Using metadata to describe the transformations of an object and not physical data changes works more efficiently for multimedia data.","Prior systems required an application specific conflict detection mechanism to determine whether two things were done at the same time in which case there would be a conflict. According to an aspect of the present invention, a substantially unified system is provided by embedding the history graphs and metadata in the actual objects or by maintaining the history graphs in another location, there may be a unified way anyone can tell what manipulations have been performed on the object.","According to an aspect of the present invention, when an object is created, duplicated, moved to a new location, or modified in any way including creating an object by combining multimedia objects, the resulting object is assigned a new identifier. In addition, the unique identifier for each object may be maintained when the object is transferred or edited to facilitate tracking the path of the object.","In order to facilitate the description of the present invention, the invention will be described with respect to the particular example of synchronizing images. The present invention, however, is not limited to any particular multimedia object or limited by the examples described herein. Therefore, the description of the embodiment that follows is for purposes of illustration and not limitation.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers (PCs), server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above-systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that may perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are preformed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":["100","110","120","130","110","130","120","140","150"]},"A basic input\/output system (BIOS)  containing the basic routines that help to transfer information between elements within the computer , such as during start-up, is stored in ROM . Computer  also includes a hard disk drive  for reading from and writing to a hard disk (not shown), a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk , such as a CD ROM or other optical media. Hard disk drive , magnetic disk drive , and optical disk drive  are respectively connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical disk drive interface . The drives and their associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules and other data for personal computer . It will be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read only memories (ROMs), and the like, may also be used in the exemplary operating environment.","A number of program modules can be stored on the hard disk, magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more application programs , other program modules , and program data . A user can enter commands and information into computer  through input devices, such as a keyboard  and a pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, a game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to system bus  via an interface, such as a video adapter . In addition to the monitor, personal computers typically include other peripheral output devices (not shown), such as speakers and printers.","Computer  can operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . Remote computer  can be a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, computer  is connected to local network  through a network interface or adapter . When used in a WAN networking environment, personal computer  typically includes a modem  or other device for establishing a communications over wide area network , such as the Internet. Modem , which may be internal or external, is connected to system bus  via serial port interface . In a networked environment, program modules depicted relative to personal computer , or portions thereof, may be stored in the remote memory storage device.","It will be appreciated that the network connections shown are exemplary and other techniques for establishing a communications link between the computers can be used. The existence of any of various well-known protocols, such as TCP\/IP, Ethernet, FTP, HTTP and the like, is presumed, and the system can be operated in a client-server configuration to permit a user to retrieve web pages from a web-based server. Any of various conventional web browsers can be used to display and manipulate data on web pages.","As noted above, although the description of the invention refers to digital images, it is to be understood that the invention may be used to synchronize versions of other forms of digital data such as emails, slide presentations, schematics, operating system executables, audio, video, etc. The present invention provides a quick, manageable solution to synchronizing versions of objects by maintaining a history graph and descriptive metadata for the transition between points on the history graph.","In today's digital world, many images are obtained with digital cameras. Often, users find that they have acquired many images or pictures that are similar. This usually occurs because the original picture is modified and\/or edited in various ways. For example, the proliferation of an image may begin when the user sends the image out to different recipient over the Internet. Many users enjoy sharing pictures with friends and relatives by sending them over the Internet. Recipients may manipulate the pictures by cropping, editing, etc. The image may then be returned to the user. This usually results in the user having an original and one or more variants of the original.","At some point, the user may wish to consolidate the images he has accumulated. However, this often proves to be a difficult task as it is often nearly impossible to determine how one image differs from another. More particularly, it is almost impossible to determine when the image corresponds to a previous image processed for red-eye reduction or processed for lower resolution, or processed with one of the many other manipulations that can be done to pictures by various products such as Picture It!\u00ae by Microsoft\u00ae. While computer analysis technology exists for comparing textual documents and determining the differences in the documents, no such technology exists for comparing other multimedia objects, such as images, and determining how similar images are different from each other. Ultimately, users usually end up saving all of the pictures because the user cannot determine which one is better or which one to save.","According to an aspect of the present invention, a quick, manageable solution to the synchronization problem is provided by maintaining, for each image, a history graph and descriptive metadata for the transition between points on the history graph. According to the present invention, a unique identifier may be assigned to each digital image. In addition, a history graph may be created and maintained for each image. The history graph includes nodes that store unique image identifiers, and vectors that describe the relationship between images. Each vector may have associated metadata describing the transformation from one node to the other.","Upon creation of an image (e.g., image capture by digital camera) or when receiving an image that has not been managed (i.e., from a legacy device), a unique identifier is assigned to the image. In addition, a unique identifier may be generated every time a modification is made to the image. The unique identifier may be generated by any known method, including implicit derivation from image data through methods such as hashing or cyclic redundancy checking (CRC). More particularly, when an image is created, duplicated, moved to a new location, or modified in any way including creating an image by combining other images, the resulting image is assigned a unique identifier. In order to facilitate tracking the image path, the unique identifier is not deleted or modified when the image is transferred or edited. The unique identifier may be a Global Unique Identifier (GUID). GUIDs are usually easy to generate and large enough to support unique identifiers. The unique identifier may be used in combination with the camera serial number and\/or manufacturing code like UPC. Depending upon the specifics of the implementation of the invention on a particular device, the unique identifier may either be stored with the image (e.g., file system that supports extended file attributes, image file format that supports association of metadata with the image such as EXIF: Exchangeable Image File Format), or in a separate database. In the later case, a pointer to the location of the image may be stored together with the unique identifier.","According to the present invention, metadata may be associated with each unique identifier. The metadata describes the way in which the new image differs from the image(s) from which it was created. Metadata usually includes time of creation and location of the object, such as an image. It may also include a description of the transformation used to derive this image from its predecessor. For example, an image that was modified for display on a TV monitor from a Desktop PC may have the following metadata: Location Pictures\/For TV\/Vacation; Time Jul. 9, 2001 Brightness +7; Size 1280\u00d7960\u2267640\u00d7480. Additional data beyond identifier and date\/time stamp depends on the media. For example, if the object is an image, the user may have the resolution of the image as an example of metadata. This may be generated by the application that was used to create the change. Copying a file will usually not be an operation that would be stored in metadata because it does not result in the manipulation of the data. If the user sends an image to a person via email, the recipient may modify the image and put the image on the Web. The user may then find the image on the Web and determine what changes were made to the image. More particularly, the user may compare the metadata for the image to determine whether the image put on the Web is the image received.","In addition to metadata, a history graph having nodes corresponding to the unique identifiers may provide a complete description of the evolution of the image. Metadata may be associated with each vector describing the transformation of the image from one node in the history graph to another. Thus, the relationship between two images may be determined by observing their unique identifiers and history graphs. For example, two images may be considered identical when they have the same unique identifiers, while two images may be related when their history graphs intersect. An example of image evolution is shown in .","According to an aspect of the invention, the history graph for an image may be truncated to save storage space. More particularly, portions of the history graph may be stored with each image, or the history graphs may be stored in a central location. More particularly, partial history graph and metadata, describing recent history, may be transferred with the image. In other instances, only the partial history graph of recent changes may be transferred. The operating system may determine whether to truncate the history graph\/metadata. The system may also be arranged to truncate the history graph\/metadata based upon user input.","The history graph may be stored with the image or in a central location. For example, if the user is designing an image with a program such as Picture It!\u00ae by Microsoft\u00ae, it may be more efficient to only deal with pictures that have been imported into Picture It!\u00ae and modified with Picture It!\u00ae. In that case, the user may want a central directory. Central directories are usually faster to search. On the other hand, if the user plans on sending images to photo processing sites and posting pictures to Web sites, the user may want to store information with the picture.","In addition, the history graph may be stored both with the image and in a central location. The duplication of information may prevent the requirement of having to search graphs and compare data. In this case, there is a duplicate in each of the user's applications. In another arrangement, a central service may be used. If a central service is used, then an Application Programming Interface (API) that other programs use whenever they retrieve or store digital data may be needed to interface to the central service.","Each device that employs the synchronization method according to the present invention includes a program that manages image storage and synchronization. The program is usually part of the Operating System (OS) of the device, in the form of a system service or integrated into the device's file system or other storage system. The program that implements the method works in coordination with other software that manipulates digital images. The other software includes copy, transmit, image editing, synchronization and other programs. The program according to the present invention may provide an API to retrieve or store digital images. Because of the uniqueness of the identifiers associated with the images, the history graph and metadata may be stored separately from the images. In addition, multiple related images may share a single history graph.","In another implementation, the program that implements the method according to the present invention may be integrated with the OS services such that other software that manipulates digital images does not have to coordinate with it explicitly. Rather, the OS takes care of creating and associating the unique identifiers with the multiple digital images. In such a case, the OS API that handles data storage and retrieval may be equipped to receive the metadata associated with each new image. Usually, that is achieved by usage of file formats that embed the metadata inside of the image file.","The history graph and metadata of an image may be used for many purposes in addition to version synchronization. For example, an image's history may be examined by an editing tool to determine whether the image has had representations that may not be compatible with its new representation. More particularly, an image may be transferred from a Desktop PC to a mobile computing device such as personal digital assistant (PDA). Since mobile computing devices often have a much lower screen resolution than the Desktop PC, and also less storage space, it makes sense to create a lower resolution version of the image to be stored on such mobile computing devices. Later, the user of the mobile computing device may attempt to edit the image. The editing tool may examine the history of the image and inform the user that a copy of the image exists on their Desktop PC and that the changes applied to the image on the mobile computing device may not be transferable back to the copy residing on the Desktop PC. Alternatively, a merge tool may be able to understand the type of change and apply it to the other copy of the image (e.g., removing blemish at a specified location of the image).","As an example, a user may find a situation where an image is received and the user already has a catalog and wants to know whether this image already exists. This information may be obtained by reviewing the change history in the history graph that is received together with the image and trying to find whether any of the nodes of the graph correspond to information in the user's history graph. If it does, then the user can determine whether to add this image or to throw it out.","More particularly, suppose the user obtains a JPEG image off of the Internet, and it has a unique identifier and some time\/date stamp and maybe resolution. Then the user puts the image into a program such as Microsoft's Picture It!\u00ae. The first thing that the program may do is convert the image to its own format. For the purposes of this discussion, assume that the moment that the program creates the image internally in its own format, the program creates a new graph for the image and adds to the history of the changes for that image the fact that it was converted from JPEG into a particular format. A unique identifier and metadata may be generated to indicate how the image data was transformed. Other manipulations may be performed on the image. For example, the image may be cropped, the contrast or balance may be adjusted. These changes may be represented as global changes to the image. When the image is saved, all of the information for the format of the image with the metadata and the new grid and probably the previous incarnation of the image may be saved. Therefore, the GUID of the parent image may be stored. Suppose that the user takes the image and converts it back to the JPEG format. At this point, a new GUID will be generated and the information that the image was converted from a particular format to JPEG will be added. At some point, the user may post the image on the Web. The user who posted the image on the Web originally may later pick this image up and immediately determine that this image was derived from their original image. This is because somewhere in the list of GUIDs is the GUID that the original use had. Then the user can actually determine what happened to the image later by referring to the metadata.","A specific example will be described with reference to . In , the processing evolution of an image is shown. The image having GUID may be processed for red eye to arrive at the image  having GUID. In addition, the image  having GUID may be cropped to arrive at the image  having GUID. Finally, the images with GUID and GUID may be combined to form an image  with GUID. The history graph corresponding to this image processing is shown in . Items  through  illustrate that, in this example, GUID is derived from images having Ids GUID and GUID, which are further derived from images having GUID and GUID, which are further derived from images having GUID and GUID, respectively. The evolution of the image with GUID may be determined from the history graph shown in . The history graph shown in  and the metadata may be transferred together with the image having GUID so that the recipient may determine the evolution of the image. The history graph and metadata for an image are not visible upon display. However, a program may read the information in the file and use it.","Another example is illustrated in . In this example, the history graph may be stored in a central storage . The metadata may be stored separately from the history graph. In this case, the identifier coordinates the information. Images are already stored and they are identified by numbers , . . . , etc., as shown in . The history graph indicates that image  was derived from image , as well as illustrating other details. Referring to , assume that a new image is received and it has the following information: identifier  and short history that indicates that it was derived from image  and that image  was derived from image . In this arrangement, the image arrives and the system services determine where it fits with respect to other stored images. It performs this operation by looking for the identifier numbers in the history graphs stored in the central storage . Once it is determined where the image fits with respect to other stored images, the history graph is updated to include the image, as shown in . All of the other information for the image may be removed and stored in another location. The actual stored image is different from the received image in the sense that the metadata changed based on change in history. The identifier may be used to find the data in other storage locations.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 6","b":["1","2","2","3","2","5","5","4","5","6","4","4","8","9","4","9","6","7","7","8","9"]},"Referring to , a process for determining whether a received image corresponds to a stored image is illustrated according to an aspect of the present invention. In step S, an image is received. In step S, it is determined whether the image includes a unique identifier, metadata and history graph. If the answer in step S is Yes, then processing continues to step S. If the answer in step S is No, then a unique identifier is assigned to the image and the image may be stored in step S. In step S, the unique identifier, metadata and history graph information are used to determine whether the received image corresponds to or is related to any of the stored images. In step S, it is determined whether the comparison in step S has discovered an image that is related to or the same as a stored image. If the answer in step S is Yes, then processing continues to step S, where it is determined whether or not the user wishes to store the image or discard it. If the answer in step S is No, then the image may be stored with the associated metadata and history graph information in step S.","As demonstrated by the foregoing, the present invention provides a quick, manageable method and system for synchronizing multiple versions of multimedia objects. More particularly, according to an aspect of the present invention each multimedia object may be identified by a unique identifier. The use of unique identifiers allows synchronization of individual objects and reduces overhead in each system. In addition, a history graph may be generated and maintained for each object, where the history graph includes nodes that store unique identifiers and whose vectors describe the relationship between the multimedia objects. Metadata may be used to describe the transformations of object.","While particular embodiments of the invention have been shown and described, it is recognized that various modifications thereof will occur to those skilled in the art without departing from the spirit and scope of the invention. More particularly, it will be appreciated by those of ordinary skill in the art that the present application may be useful in many applications. For example, the invention may be implemented in an image cataloging system or in a system for tracking multimedia properties of objects. The described embodiments are to be considered in all respects only as illustrative and not restrictive. Therefore, the scope of the herein-described invention shall be limited solely by the claims appended hereto."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 5A-5D"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
