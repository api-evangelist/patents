---
title: Software framework for evolving specifications in process control system
abstract: A software application architecture based on object oriented concepts. According to an aspect, upgrading the application to support newer versions of a standard describing device description is simplified. According to another aspect, the application is designed to be tolerant to changes (additions or modifications) introduced by future/later versions not yet supported by the application. In an embodiment, the approaches are applied in the context of a parser designed to parse device descriptions of different versions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08019724&OS=08019724&RS=08019724
owner: Honeywell International Inc.
number: 08019724
owner_city: Morristown
owner_country: US
publication_date: 20080325
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COPYRIGHT NOTICE","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION","1. Overview","2. Digital Processing System","3. Internal Operation of an Application","4. Need in Process Control Plants","5. Example Process Control Environment","6. Client System","7. Parser Framework","8. Selecting the Parser Object to Process a Section","9. Details During Operation","10. Tolerance to New Versions not Yet Supported","11. Adding Code to Support New Versions","12. Conclusion"],"p":["A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner, Honeywell International Incorporated, has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the US Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","1. Field of the Invention","The present invention generally relates to process control system, and more specifically to a method and apparatus providing a software framework for evolving versions of specifications in process control systems.","2. Related Art","A process control system generally contains several field devices, which are operable to implement a desired control process (e.g., oil refinery, manufacturing operation, etc.). Examples of field devices include valves, positioners and switches, which are controlled to implement the control process.","Specifications are provided typically for interoperability of various systems\/devices, etc., in a process control system based on agreed conventions\/standards. The specifications can indicate various aspects such as the formats of data, the services to be provided or available for use from external systems, etc.","Specifications often evolve, typically identified by version numbers. In general, each version of the specification is intended to provide a new feature (possibly directed to newly introduced components\/devices\/software, etc.) and\/or address known problems with prior versions.","There is a general need to implement software applications which operate in the context of such evolving specifications in process control plants.","In the drawings, like reference numbers generally indicate identical, functionally similar, and\/or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit(s) in the corresponding reference number.","An aspect of the present invention provides a framework using which software applications can be designed for evolving specifications in a process control system. In an embodiment, a set of version objects are implemented at least for features added or modified by a corresponding version compared to a prior version. Class factories are also provided to instantiate the version objects. Information is generated representing the class factories which can be used to instantiate the corresponding version object.","When the application is invoked by an appropriate interface\/command requiring processing according to a specific version, the factory information is examined to select a factory object designed to instantiate a version object which can process the received inputs. A parser instance is created by instantiating the corresponding version object. The inputs are processed using the created parser instance.","Such a framework may offer several advantages. For example, upgrading the software application to support newer versions may be simplified.","In one implementation, the factory information is in the form of a linked list of nodes, wherein each node pointing to a corresponding class factory. The class factory is selected by traversing the linked list. The linked list may be traversed to determine the selected class factory as corresponding to a version object of a version number greater than or equal to the version identifier suited to process the received inputs.","All of the class factories may be implemented to derive from a same base factory. On the other hand, each version object (except a version object for the start version) derives from a version object designed to parse an immediate previous version. Therefore, each version object may merely need to implement changes (sections added\/modified) compared to a previous version.","Therefore, addition of support for a new version may entail implementing the new version object (parsing the sections changed in comparison to the prior latest version) and adding the corresponding class factory to the chain.","To gracefully handle changes in any unsupported versions, a last version object (with the corresponding class factory as the tail of the chain) is used. The last version object returns an error code when sections changed by such unsupported version are encountered, thereby providing tolerance to changes in the unsupported version.","In an embodiment, the above-described features are implemented in the context of a parser implemented to parse device descriptions of different versions of a protocol standard.","Several aspects of the invention are described below with reference to examples for illustration. It should be understood that numerous specific details, relationships, and methods are set forth to provide a full understanding of the invention. One skilled in the relevant art, however, will readily recognize that the invention can be practiced without one or more of the specific details, or with other methods, etc. In other instances, well-known structures or operations are not shown in detail to avoid obscuring the invention.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1","b":"100"},"Digital processing system  may contain one or more processors such as central processing unit (CPU) , random access memory (RAM) , secondary memory , graphics controller , display unit , network interface , and input interface . All the components except display unit  may communicate with each other over communication path , which may contain several buses as is well known in the relevant arts. The components of  are described below in further detail.","CPU  may execute instructions stored in RAM  to provide several features of the present invention (including the parser and other blocks described below). In general, the instructions together constitute a user application, which is according to a framework provided according to various aspects of the present invention. As will be clear from the description below, the framework lends to easy upgrades to conform to evolving standards as well as be tolerant to newer standards not yet specifically implemented by the software application.","While the examples herein are provided with respect to software applications implemented on a single (standalone) system, it should be appreciated that several aspects of the features can be implemented on network-based applications, as will be apparent to one skilled in the relevant arts by reading the disclosure provided herein.","CPU  may contain multiple processing units, with each processing unit potentially being designed for a specific task. Alternatively, CPU  may contain only a single general-purpose processing unit. RAM  may receive instructions from secondary memory  using communication path , and also support the objects while the user interface is provided.","Graphics controller  generates display signals (e.g., in RGB format) to display unit  based on data\/instructions received from CPU . Display unit  contains a display screen to display the images defined by the display signals. Input interface  may correspond to a keyboard and\/or mouse. The display unit and input interface can be used to provide a suitable interface to manage field devices according to various aspects of the present invention.","Network interface  may contain one or more physical interfaces, which provide connectivity to various control networks as well as client systems providing user interface. For example, network interface  may enable central server  to interface with both the control network and a LAN on which client systems are connected.","Secondary memory  (characterized by non-volatile storage) may contain hard drive , flash memory  and removable storage drive . Secondary memory  may store the data and software instructions (e.g., the modules described above), which enable digital processing system  to provide several features in accordance with the present invention.","Some or all of the data and instructions may be provided on removable storage unit , and the data and instructions may be read and provided by removable storage drive  to CPU . Floppy drive, magnetic tape drive, CD-ROM drive, DVD Drive, Flash memory, removable memory chip (PCMCIA Card, EPROM) are examples of such removable storage drive .","Removable storage unit  may be implemented using medium and storage format compatible with removable storage drive  such that removable storage drive  can read the data and instructions. Thus, removable storage unit  includes a computer readable (storage) medium having stored therein computer software and\/or data. However, the computer (or machine, in general) readable medium can be in other forms (e.g., non-removable, random access, etc.).","In this document, the term \u201ccomputer program product\u201d is used to generally refer to removable storage unit  or hard disk installed in hard drive . These computer program products are means for providing software to digital processing system . CPU  may retrieve the software instructions, and execute the instructions constituting a user application.","As noted above, the user application may be implemented and operate according to a framework provided according to several aspects of the present invention. Accordingly, the description is continued with respect to the operation of an application when executed, according to an aspect of the present invention.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 2","FIG. 1"]},"In addition, the steps are described in a specific sequence merely for illustration. At least some of the steps can be implemented in a different sequence (or in an overlapping manner in parallel on a time scale) as will be apparent to one skilled in the relevant arts.","Also, the operation\/implementation of the application refers to various object oriented language concepts, which are described in further detail in a book entitled, \u201cObject Oriented Analysis and Design with Applications by Grady Booch\u201d. The flowchart begins in step  in which control passes to step .","In step , factory information, representing the class factory which is to be invoked when a corresponding version of the input data is to be processed, is formed. As is well known, when a class factory is invoked, a corresponding object is instantiated. The object in this case corresponds to a specific version object which is designed to process input data of a corresponding version. It should be appreciated that the information is formed dynamically in response to execution of the software instructions constituting the application.","In step , input data and a version information (based on which the input data is represented) is received. The input data and the version information can be received from different sources or the same source.","In step , an appropriate class factory is selected by examining the factory information based on the version information. In general, it is desirable that a class factory corresponding to version object designed to process at least the changes (additions, modifications, etc.) introduced by the corresponding version. However, higher-level versions may also be selected, particularly when such matching version number is absent in the factory information and the versions are backward compatible.","It should be appreciated that the factory information is formed as data\/bits distinct from the instructions implementing the selection of step . In other words, the factory information is not embedded or hardcoded in the instructions (for example, as data compared in the if-then-else statements), which enables the factory information to reflect any later added versions as well.","In step , a version (object) instance is created using the selected class factory. In general, by invoking an appropriate method provided within the class factory, the corresponding object can be suitably instantiated. The instantiated object represents the processing logic suited for processing the specific version of the input data.","In step , the appropriate device descriptions are processed using the created version instance. Since the appropriate version object is instantiated, the input data may be accurately processed. The flowchart ends in step .","Applications, according to the features described above, can be implemented, and\/or deployed in various environments. In an embodiment, the input data corresponds to device description data which is specified according to versions which evolve over time and the application is implemented in systems deployed in a process control plant. The need for applications of the present invention in process control plant is first established below.","A process control plant generally contains several field devices, which are operable to implement a desired control process (e.g., oil refinery, manufacturing operation, etc.). Examples of field devices include valves, positioners, and switches, which are controlled to implement the control process.","Device descriptions are often provided by a vendor associated with a field device, with the information therein indicating various device capabilities such as the manner in which the field device may behave in different conditions, the status information (or results of execution of the management commands) can be viewed, management commands can be sent (communication to field device), etc. The device description are often provided in the form of files, for example, DD (Device Description) files, CFF (common file format) files, value files, or any other auxiliary data source pertaining to the device.","Device descriptions are generally provided according to a specification. The specifications are provided by different open standards such as Foundation Fieldbus\u2122, HART\u2122, etc. as is well known in the relevant arts. Even within each of such open standards, the specification is often extended over time.","The extended specifications after each such extension is referred to as a version. For example, Foundation Field Bus specification has introduced version 2.9 implying that versions 2.8, 2.0, 1.0, etc., are prior versions. Each of the CFF files in Appendix A and B contain the version information in the first few lines. The version number can be in any format, though in the described examples it is represented by two numbers N1 and N2, read as version N1.N2 (e.g., 2.8).","Parsers are often used in systems such as management stations and client systems, to parse the content of the device descriptions. Parsing generally entails examining the device description in conformance with the syntax and semantics (the keywords to be used, the grammar using which the key words are to be presented, the specific places at which users can provide values or are provided values, etc.) associated with the specific version of the open standard.","It is generally desirable that parsers be designed with a framework such that the implementation and\/or deployment are simplified, particularly in view of the evolving extensions to provide backward and forward compatibility to the applicable specifications.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 3","b":["310","310","330","340","350","370","380","380"]},"Control network  connects each of central server  and control system  with field devices A through Z. Control network  may contain network devices (e.g., multiplexors, modems, termination panels, etc.,) operating according to one or more protocols such as HART, Control Net, and Foundation Field Bus well known in the relevant arts.","Control system  issues commands to control the operation of field devices A through Z. The field devices are controlled to implement a desired control process (e.g., oil refinery, manufacturing plant). Database server  provides a central repository for storing information related to configuration of field devices, status of field devices, maintenance schedules, historic status\/menu information, etc.","Field devices A through Z perform various operations under the control of control system  to implement a desired manufacturing process. In addition (or as a part of supporting such a process), each field device may be implemented to support various management commands received from central server . Some of the management commands may merely request information (e.g., measured pressure), and some of the commands cause the configuration to be altered (e.g., a valve might be caused to be opened).","Central server  receives status information from various field devices A through Z through control network , and makes the information available to users via client systems A through Y. Commands may be issued to the field devices to retrieve the desired information. In an embodiment, information corresponding to only the subscribed information elements is retrieved.","Client systems A through Y provides a user interface using which users may manage field devices A through Z. The user interface is often derived out of one or more formats of the device descriptions, such as DD file and\/or CFF file(s).","In general, there are device descriptions related to several devices, often provided by different vendors. The description can be in different versions of the open standard as well. To provide the management features described above, it may be required to parse the device descriptions. According to an aspect of the present invention such a parser can be provided as described below with examples.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 4","b":["380","410","420","430","450","470"]},"Though the description is provided with respect to a client system merely for illustration, it should be appreciated that the features can be implemented in other systems (e.g., central server ) related to a process control plant as well.","Device descriptions  indicate the device capabilities of various devices in a process control plant. Each device description may be retrieved from an external source or stored locally in the form of files within a non-volatile memory provided in the client system. It should be understood that for the same field device type, different versions of the device description may be present since the device instances (A-Z) can be supporting different versions, particularly as being provided by different vendors or due to lag in upgrading the device implementations.","Network interface  provides the electrical\/physical and protocol interfaces needed for client system A to communicate with central server  (or any other systems, for example, to retrieve device descriptions dynamically). Network interface  may be implemented using protocols such as TCP\/IP, Ethernet, and ATM, well known in the relevant arts.","Management software  represents an application which enables users to manage various field devices. In general, management software  receives commands from users (either for information or to change configuration, usually), and forwards the commands to central server . The information received from central server , as a response, is displayed according to a suitable user interface.","Management software  may need the device description provided within the files noted above, to provide such management features. In an embodiment, the software uses the device descriptions data stored in the form of templates . Templates represent any pre-specified data structures (e.g., trees, objects), which facilitate quick\/convenient retrieval of desired information of interest. These templates are created out of device descriptions.","Parser  provided according to various aspects of the present invention, parses the device descriptions, and stores the information contained therein, in the form of templates within database server . As may be appreciated, the parser may need to parse device descriptions corresponding to various versions. The specific sections (in general, portions of the entire input data to be processed) to be parsed (entire file or only specified one(s)) may be specified by management software  at the time of invocation.","For illustration, a small portion of the CFF file corresponding to versions 1.6 and 1.7 of Foundation Fieldbus CFF specification, for Honeywell Temperature transmitter is respectively shown in Appendix A and Appendix B.","As may be readily observed, there are common sections, which exist without changes in both the versions. In the context of CFF files, a section represents a smaller self-contained unit of information, facilitating the entire CFF files to be logically broken into smaller pieces. Each section is shown starting with a section name included between square brackets ([section name]). A section ends when a next section begins according to the convention chosen for Appendices A and B.","In addition, version 1.7 is shown as having an additional new section [SM Software Download Property]\u201d and with modifications to the syntax of another section \u201c[VFD 2 Function Block Type 1]\u201d.","The manner in which the software instructions for parser  can be designed to address such changes as suggested in the method of  is described below with examples. In the embodiment below, it is assumed that there are 6 versions of the open standard, merely for illustration. However, more or fewer versions can be implemented without departing from the scope and spirit of several aspects of the present invention, as will be clear to one skilled in the relevant arts.","Furthermore, though only portions of the software that relate to parser are described as being implemented using the features of the present invention, it should be appreciated that other portions (e.g., management software ) of the software application implemented on client system A can also be implemented using similar approaches.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 5","b":["420","510","520","525","560","565","570","580"]},"It should be appreciated that each module is implemented as a class and accordingly when the context permits the modules (or the corresponding instances after instantiation) are also referred to as classes in the description below. As is well known, each class may contain methods and variables (either visible only locally or to external classes), and in some instances these methods and variables can be provided external to the classes (e.g., in the main code) as well.","Also, each of the parser object modules corresponds to the version objects described above with respect to  above.","Furthermore, the names of the methods and classes are chosen to closely describe the function (utility) provided by the corresponding methods\/classes. While only a skeleton of the program logic is provided for conciseness, it should be appreciated that the implementation of the entire program logic(s) will be apparent to one skilled in the relevant arts by reading the disclosure provided herein.","For illustration, the applicable software code for each of the modules is shown in terms of pseudo-code similar to C++ language, well known in the relevant arts. In addition the label CFF (common file format, provided by Foundation Field Bus) is shown appended to several labels merely as being directed to the corresponding format in an example embodiment.","However, several embodiments of present invention can be implemented using other languages and for other formats, without departing from the scope and spirit of the present invention, as will be apparent to one skilled in the relevant arts by reading the disclosure provided herein.","It may be observed that there is one additional class factory module () and parser object module (), which are used for \u2018forward compatibility\u2019, described in section below. The differences of these specific modules are described there, though some of the description below is applicable to these two modules as well.","Each class factory module - is designed to create an object of a specific class (here - respectively). As is well known, different classes may have different requirements to be satisfied before their object instances are created. Each class factory module is accordingly implemented to meet such requirements.","Each class factory module - may be implemented to derive from base factory class , which may be implemented as follows:",{"@attributes":{"id":"p-0086","num":"0085"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"class CFF_ClassFactory"},{"entry":"{"},{"entry":"\u2003protected:"},{"entry":"\u2003\u2003\/\/CFF spec version"},{"entry":"\u2003\u2003double CFF_Version;"},{"entry":"\u2003\u2003\/\/pointer to the auto built factory chain"},{"entry":"\u2003\u2003static CFF_ClassFactory _Chain *m_pCFF_ClassFactoryChain;"},{"entry":"\u2003public:"},{"entry":"\u2003\u2003\/\/Method that should be used to get the CFF_Parser which has"},{"entry":"\u2003\u2003\/\/CFF version just greater than or equal to the version passed"},{"entry":"\u2003\u2003as argument"},{"entry":"\u2003\u2003static CFF_Parser* Get_CFF_Parser(double CFF_Ver);"},{"entry":"\u2003\u2003\/\/Factory Method to \u2003create instance of CFF_Parser"},{"entry":"\u2003\u2003virtual CFF_Parser* Createlnstance( ) = 0;"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"As may be observed, the base factory class provides a CreateInstance method, which would upon invocation create a parser instance and returns a pointer to the class. As indicated by \u2018=0\u2019 above, the CreateInstance method is defined to be virtual, implying that classes deriving from the base factory class have to implement the method. The software code implementation of the CreateInstance method in the deriving classes will be apparent to one skilled in the relevant arts by reading the disclosure provided herein.","In addition, the base factory class maintains a pointer to the class factory chain used for selecting the correct parser object, as described below.","The definition (code) of class factory module  may be along the following lines:",{"@attributes":{"id":"p-0090","num":"0089"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"class CFF_ClassFactory_Version1 : CFF_ClassFactory"]},{"entry":[{},"{"]},{"entry":[{},"\u2003private:"]},{"entry":[{},"\u2003\u2003static CFF_ClassFactory_Version1"]},{"entry":[{},"\u2003\u2003m_CFF_ClassFactory_Version1;"]},{"entry":[{},"\u2003public:"]},{"entry":[{},"\u2003\u2003\/\/Method that creates the CFF Parser_Version1 object"]},{"entry":[{},"\u2003\u2003\/\/that supports CFF version Version 1"]},{"entry":[{},"\u2003\u2003virtual CFF_Parser* Createlnstance( );"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"It may be noted that the CreateInstance method of the class factory module provides an implementation of the method (as required by the definition noted above). Accordingly, a user can provide a desired code in the class factory module for creating the appropriate version object. As noted above, code for such methods needs to implement the specific requirements for the object sought to be instantiated.","Each of the remaining class factories - may be similarly implemented. The general relationship of the class factories with base factory is depicted in , which shows that each class factory - is defined to derive from the base factory . It should be appreciated that each of the class factory instances is formed by instantiation of the corresponding class factory object.","Each of parser object modules - is designed to parse a corresponding version of the standard. As each version usually adds more sections and possibly modifies the syntax\/semantics of some sections of a prior version, the facilities provided by Objected Oriented Languages are conveniently used and the parser object of a version is derived from the parser object of the immediate prior version as depicted in .","As shown in , parser objects for versions 2-5 (respectively shown as -) are respectively shown defined to derive from parser object instances for versions 1-4 (-), where version 1 is the start version. Thus, classes of versions 1-4 would respectively be termed as (immediate) base classes for versions 2-5. This means each parser object would need to add code corresponding to the added and modified sections in the corresponding version in the base class.","In an embodiment, each of the parser objects contains a method entitled, \u201cProcessSection\u201d, which is implemented as follows:",{"@attributes":{"id":"p-0096","num":"0095"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"BOOL CFFParser_2::ProcessSection (string sectionName)"},{"entry":"{"},{"entry":"\u2003\/\/First forward the call to the immediate base class"},{"entry":"\u2003BOOL bSuccess = CFFParser_1::ProcessSection (sectionName);"},{"entry":"\u2003\/\/check if the base class could handle. If not, check if the section"},{"entry":"\u2003\/\/ matches any of the sections supported by this version of the object"},{"entry":"\u2003if( NOT bSuccess)"},{"entry":"\u2003{"},{"entry":"\u2003\u2003\/\/Handle (handling code) modified syntaxes or new syntaxes here"},{"entry":"\u2003}"},{"entry":"\u2003return bSuccess;"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The above code is assumed to be within parser object  and CFFParser_ refers to the class corresponding to parser object  (the immediate base class). Though the parser object is shown as expressly naming the immediate base class, alternative techniques can be employed to specify the immediate base class (for example, by using a keyword), when the programming environment so permits. The load function described below, provides the sectionName in one embodiment.","The handling code generally needs to implement the program logic to parse sections, which are introduced in the current version or those that override previous versions. Thus, the handling code for version 1.7 would need to include the corresponding software instructions to parse at least the new section [SM Software Download Property]\u201d and modified section \u201c[VFD 2 Function Block Type 1].","In one embodiment, the program logic to parse the new section, [SM Software Download Property], noted above, may be implemented along the below lines.",{"@attributes":{"id":"p-0100","num":"0099"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"BOOL CFFParser_2::ProcessSection (string sectionName)"},{"entry":"{"},{"entry":"\u2003\/\/ sectionName here is \u201cSM Software Download Property\u201d"},{"entry":"\u2003\/\/First forward the call to the immediate base class"},{"entry":"\u2003BOOL bSuccess = CFFParser_1::ProcessSection (sectionName)"},{"entry":"\u2003\/\/check if the base class could handle. If not, process the section(s) here"},{"entry":"\u2003if( NOT bSuccess)"},{"entry":"\u2003{"},{"entry":"\u2003\u2003\/\/Handle SM Software Download Property section here"},{"entry":"\u2003\u2003if (sectionName.CompareNoCase(_T(\u2033SM Software Download"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Property\u2033)) == 0)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2009\/\/process the section variables here and set the return value as true"},{"entry":"\u2003\u2003\u2003\u2009bSuccess = true;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003else"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\/\/ I cannot handle the passed in section. I need to set the"},{"entry":"\u2003\u2003\u2003\/\/ return value as false so that others can take care"},{"entry":"\u2003\u2003\u2003bSuccess = false;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"\u2003return bSuccess;"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The remaining parser objects - can also be similarly implemented.","In general, each section of CFF file is first passed to the immediate base class (until the base class  processes it). Returning of a false (failure) value from the base class implies that there was a failure to parse. Accordingly, it is assumed that the section with the sectionName is an extension compared to the version corresponding to the immediate base class or that the syntax has been modified by the current version (the two cases illustrated with Appendix A and B, in the description above), and the description of the section is parsed (handled) in the current class (parser object).","Therefore, each of the base classes is to be implemented to return a failure value when the section cannot be accurately parsed (including for the two cases illustrated in Appendix A and B). This further implies that misspelled words in a section could return an error value eventually.","Further, the above design would imply that the process section of base class  would always be invoked to process each section. Successive immediate base classes thereafter would return failure values until the parser object of the earliest version starts returning a true value as a success indication (bSuccess=true).","For illustration, it is assumed that version 3 is designed to accurately parse a section and the parser object for version 6 (since the CFF file is of version 6) has been requested to parse that section. Parser object 6 would invoke parser object 5, which would invoke parser object 4, etc., and the ProcessSection method of parser object 1 (absolute base) would be eventually invoked. Parser object 1 would return failure, which would cause parser object 2 to also handle and thereafter return a failure value. The handling code of parser object 3 would return a true value since the handling code of parser object 3 is designed to successfully parse the section. Parser objects 4 and 5 would then return true value as well, indicating a successful parsing.","From the above, it may be appreciated that it is generally sufficient to instantiate the parser object corresponding to the version in the CFF file. Chain factory module  and node module  may be used for such a purpose and is accordingly described below.","Broadly, Chain Factory module  contains the data structures and methods to create nodes, with each node pointing to the corresponding one of the class factory instances -. Each node may also contain pointers to maintain a linked list of the class factory instances. The linked list is searched to determine the appropriate class factory, which instantiates the corresponding parser object as described below with examples.","In an embodiment, each node is implemented along the following lines:",{"@attributes":{"id":"p-0109","num":"0108"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"class Class_Factory_Chain_Node"]},{"entry":[{},"{"]},{"entry":[{},"\u2003public:"]},{"entry":[{},"\u2003\u2003\/\/actual object"]},{"entry":[{},"\u2003\u2003CFF_ClassFactory* pCFF_ClassFactory;"]},{"entry":[{},"\u2003\u2003\/\/links in the chain"]},{"entry":[{},"\u2003\u2003Class_Factory_Chain_Node * pNextNode;"]},{"entry":[{},"\u2003\u2003Class_Factory_Chain_Node * pPrevNode;"]},{"entry":[{},"\u2003\u2003Class_Factory_Chain_Node"]},{"entry":[{},"\u2003\u2003(CFF_ClassFactory * pCFF_ClassFactory);"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"As may be appreciated, the variables pNextNode and pPrevNode store pointers to the next and previous nodes in the chain. Each node is initialized by invocation of the method Class_Factory_Chain_Node passing a pointer to the class factory instance as the parameter.","On the other hand, the program logic for the chain factory module may be along the below lines:",{"@attributes":{"id":"p-0112","num":"0111"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"class Class_Factory_Chain"},{"entry":"{"},{"entry":"\u2003protected:"},{"entry":"\u2003\u2003Class_Factory_Chaln_Node * m_pChainHeader; \/\/Header node"},{"entry":"\u2003public:"},{"entry":"\u2003\u2003\/\/Method to add a node to the chain"},{"entry":"\u2003\u2003void AddToChain(CFF_ClassFactory * pNewCFFFactory);"},{"entry":"\u2003\u2003\/\/Method to get the first node in the chain that is"},{"entry":"\u2003\u2003\/\/just greater than or equal to the version"},{"entry":"\u2003\u2003virtual Class_Factory_Chain* GetApplicabieNode(double"},{"entry":"\u2003\u2003CFF_Ver);"},{"entry":"\u2003\u2003\/\/Method to get the last node in the chain"},{"entry":"\u2003\u2003\/\/This node contains the highest version"},{"entry":"\u2003\u2003Class_Factory_Chain_Node* GetLastNode( );"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"As can be appreciated from the above, the Class_Factory_Chain object exposes methods to add a node to the chain, to get the first node in the chain or the last node in the chain. The AddToChain method is used to create the factory chain (described below).","In one embodiment, the AddToChain function is implemented along the following lines:",{"@attributes":{"id":"p-0115","num":"0114"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"void Class_Factory_Chain::AddToChain(CFF_ClassFactory *"},{"entry":"pNewCFFFactory)"},{"entry":"{"},{"entry":"\u2003Class_Factory_Chain_Node *pNewNode ="},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003new Class_Factory_Chain_Node"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(pNewCFFFactory);"},{"entry":"\u2003Class_Factory_Chain_Node * pHeaderTemp = m_pChainHeader;"},{"entry":"\u2003\/\/first node"},{"entry":"\u2003if(pHeaderTemp->pNextNode == NULL)"},{"entry":"\u2003{"},{"entry":"\u2003\u2003pHeaderTemp->pNextNode = pNewNode;"},{"entry":"\u2003\u2003pNewNode->pPrevNode = pHeaderTemp;"},{"entry":"\u2003}"},{"entry":"\u2003else"},{"entry":"\u2003{"},{"entry":"\u2003\u2003\/\/insert in the list according to the increasing order of versions"},{"entry":"\u2003\u2003supported while(pHeaderTemp->pNextNode != NULL)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003Class_Factory_Chain_Node *pNodeInChain ="},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003pHeaderTemp->pNextNode;"},{"entry":"\u2003\u2003\u2003\/\/check the version of resource"},{"entry":"\u2003\u2003\u2003if( nNewNodeVer < nNodeVerInChain)"},{"entry":"\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\/\/insert before the node"},{"entry":"\u2003\u2003\u2003\u2003pNewNode->pPrevNode = pNodeInChain->pPrevNode;"},{"entry":"\u2003\u2003\u2003\u2003pNewNode->pNextNode = pNodeInChain;"},{"entry":"\u2003\u2003\u2003\u2003pNodeInChain->pPrevNode = pNewNode;"},{"entry":"\u2003\u2003\u2003\u2003break;"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003else if(nNewNodeVer == nNodeVerInChain)"},{"entry":"\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\/\/same version, skip"},{"entry":"\u2003\u2003\u2003\u2003break;"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003else"},{"entry":"\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003pHeaderTemp = pHeaderTemp->pNextNode;"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/\/reached end"},{"entry":"\u2003\u2003if(pHeaderTemp->pNextNode == NULL)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003pHeaderTemp->pNextNode = pNewNode;"},{"entry":"\u2003\u2003\u2003pNewNode->pPrevNode = pHeaderTemp;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Using the program logics (framework) thus implemented, the manner in which the parser may operate when the software instructions of the parser are executed, is described next.","Thus, when the instructions implementing the parser are executed, the sequence of operations in an embodiment is described below. The class factories may be instantiated. A linked list of the factories is thereafter (in ascending order according to version numbers\/information) created using the nodes noted above, and the corresponding scenario is depicted in .","A node is shown created for each of the class factories as a result. pNextNode and pPrevnode variables noted above would store the pointers to next node and previous node. The pNextNode for the last node  may store NULL value to indicate the end of the chain.","In general, the chain may be initialized to null and each of the versions may be added as corresponding nodes to the chain. The corresponding program may be implemented along the below lines:",{"@attributes":{"id":"p-0120","num":"0119"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ This is where the class factory chain is initialized."},{"entry":"Class_Factory_Chain* CFF_ClassFactory::m_pCFF_ClassFactory"},{"entry":"Chain = NULL;"},{"entry":"\/\/This is the place where the class factory object's constructor"},{"entry":"\/\/ will be called where the objects are added to the class factory chain."},{"entry":"CFF_ClassFactory_Version1 \u2003\u2003m_CFF_ClassFactory_Version1;"},{"entry":"CFF_ClassFactory_Version2 \u2003\u2003m_CFF_ClassFactory_Version2;"},{"entry":"\/\/append to this list when new versions need to be incorporated"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In one embodiment, the constructor of CFF_ClassFactory_Version1 may be implemented along the below logic:",{"@attributes":{"id":"p-0122","num":"0121"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"CFF_ClassFactory_Version1 :: CFF_ClassFactory_Version1 ( )"},{"entry":"{"},{"entry":"\u2003CFF_Version = 1.0;"},{"entry":"\u2003CFF_ClassFactory_Version1::m_pCFF_ClassFactoryChain ->"},{"entry":"\u2003AddToChain(this);"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The specific CFF file, one of the device descriptions , is then examined to determine the version number. The parser object suitable to parse the CFF file of the version number is then determined as follows.","In an embodiment, the specific one of the parser object suited to process the device description, is instantiated as follows:","m_pCFF_Version=CFF_ClassFactory::Get_CFF_Parser(CffVersion);","In general, the program logic for Get_CFF_Parser method needs to be designed to examine the version information in the factory chain of , determine the appropriate one of the parser objects that is to be instantiated, and instantiate that parser object. The implementation of Get_CFF_Parser method will be apparent to one skilled in the relevant arts by reading the disclosure provided herein.","From the above, it may be appreciated that Get_CFF_Parser traverses the nodes of  to determine the class factory corresponding to the parser object which can parse a version equal to or greater than the value represented by CFF_Version passed as the parameter. The method CreateInstance( ) provided within that class factory is invoked to instantiate the corresponding parser object. A pointer to the instantiated parser object is then returned as the result of execution of the function Get_CFF_Parser( ).","In the description above, it may be appreciated that the version information and the input data (i.e., various sections of the device description) are received separately. However, in alternative embodiments (e.g., while processing packets related to network communications), the input data and the version information may be received together.","The CFF file is thereafter examined to identify each section, and the section is parsed. In one embodiment, we can consider that a method\/function like Load, described below would iterate over the list of sections in the device description and initiates the processing:",{"@attributes":{"id":"p-0130","num":"0129"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"BOOL CFF_Parser::Load(string strCFF_File)"},{"entry":"{"},{"entry":"\u2003while (bSuccess && !EndOfFile)"},{"entry":"\u2003{"},{"entry":"\u2003\u2003\/\/Identify a new section based on [ ]"},{"entry":"\u2003\u2003string strSection = GetNextSection_From_CFF_File(strCFF_File);"},{"entry":"\u2003\u2003\/\/process the new section"},{"entry":"\u2003\u2003bSuccess = ProcessSection(strSection );"},{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Thus, using the basic framework of above, additional versions can easily be incorporated. Before describing the manner in which parsing of additional versions can be incorporated into the parser provided according to various aspects of the present invention, the description is continued with respect to the manner in which the parser is designed to tolerate new versions (for which parser objects may not yet be provided) according to an aspect of the present invention.","According to an aspect of the present invention, parser  is implemented to be tolerant to the newer versions of the CFF specification for which the parser objects noted above are not yet implemented. In other words, in such a situation, the specific sections which override the previous versions or new sections would not yet be supported. It is generally desirable that such changes are handled gracefully.","In an embodiment, parser object module  is implemented to indicate as supporting the highest version number (say version 1000, whereas other versions are of the magnitude of single digit).","Assuming hypothetically that parser object module  supports version 2.8, and then a request is received to parse a CFF file of version 2.9, the class factory  would be selected and parser object  would be instantiated by Get_CFF_Parser( ).","The handling code of parser object  may be implemented as follows (assuming that the parser object class is named as CCFF_MaxVersion and its base class is named as My_Immediate_Base):",{"@attributes":{"id":"p-0136","num":"0135"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"BOOL CCFF_MaxVersion::ProcessSection(string sectionName)"},{"entry":"{"},{"entry":"\u2003BOOL bSuccess ="},{"entry":"\u2003My_Immediate_Base::ProcessSection(sectionName);"},{"entry":"\u2003if(NOT bSuccess)"},{"entry":"\u2003{"},{"entry":"\u2003\u2003\/\/tolerate the new or modified section by skipping the section and"},{"entry":"\u2003\u2003its contents"},{"entry":"\u2003\u2003\/\/SkipSection is a helper function to skip a section's content"},{"entry":"\u2003\u2003SkipSection(sectionName);"},{"entry":"\u2003\u2003bSuccess = TRUE;"},{"entry":"\u2003}"},{"entry":"\u2003return bSuccess;"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"It may be observed that parser object  is instantiated in all circumstances in which a version is not presently supported. The sections which are supported by the previous versions would be parsed by the code in the base objects, while the handling code of parser object  would process the new sections and the sections that would override the definitions in previous sections.","From the above, it should be appreciated that the new sections can always be ignored providing tolerance or an appropriate error code returned to the requester. For example, assuming only (up to) version 1.6 of Appendix A is supported, the handling code of parser object  would be operative when sections \u201c[SM Software Download Property]\u201d and \u201c[VFD 2 Function Block Type 1]\u201d are encountered.","The description is now continued with respect to the manner in which the software of above can be extended to support new versions.","It is now assumed that parser object  corresponds to version 1.6 (Appendix A) and it is desirable to upgrade the parser to add support for version 1.7 (Appendix B). Once supported, parser object  would not be instantiated to parse the corresponding CFF version, as described below in further detail with respect to . For conciseness, only the differences with respect to , A, B and  are described below.","A new parser object  may be implemented with the handling code to process sections \u201c[SM Software Download Property]\u201d and \u201c[VFD 2 Function Block Type 1]\u201d. The implementation of this code can be performed in a known way. The object module would be included in the code of . The factory module , which would instantiate parser object  is also included in the code of . Factory module  would derive from base factory , as with other modules. Parser object  would derive from parser object , while parser object  would derive from parser object .","A node  is created (in the main code, not shown) for factory object  and is placed between nodes  and  by using the appropriate pointers in the chain.","Once the software instructions are designed and implemented as above, the parser would support version 1.7 as well. In addition, for changes introduced by versions 1.8 and thereafter, parser object  would continue to process the corresponding sections.","The addition of support for new versions is therefore simplified. In addition, the parser is more tolerant to changes introduced by the future versions.","It should be further appreciated that the features described above can be implemented in various digital processing systems. Though some of the features are described as being operative upon execution of appropriate software instructions, alternative embodiments can be implemented with each block (e.g., the steps of , the blocks of ) made from circuits such as specialized integrated circuits, FPGAs, etc.","While various embodiments of the present invention have been described above, it should be understood that they have been presented by way of example only, and not limitation. Thus, the breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents.","It should be understood that the figures and\/or screen shots illustrated in the attachments highlighting the functionality and advantages of the present invention are presented for example purposes only. The present invention is sufficiently flexible and configurable, such that it may be utilized in ways other than that shown in the accompanying figures.","Further, the purpose of the following Abstract is to enable the U.S. Patent and Trademark Office and the public generally, and especially the scientists, engineers and practitioners in the art who are not familiar with patent or legal terms or phraseology, to determine quickly from a cursory inspection the nature and essence of the technical disclosure of the application. The Abstract is not intended to be limiting as to the scope of the present invention in any way.",{"@attributes":{"id":"p-0149","num":"0148"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}},"thead":{"row":[{"entry":"APPENDIX A"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/"},{"entry":"\/\/ \u2003\u2003Honeywell ST3000 Capabilities Files"},{"entry":"\/\/"},{"entry":"\/\/ \u2003\u2003Copyright 2000, Honeywell International."},{"entry":"\/\/"},{"entry":"\/\/ ========================="},{"entry":"\/\/ File Header"},{"entry":"\/\/ ========================="},{"entry":"[File Header]"},{"entry":"Description = \u201cSTT35F Temperature Transmitter Capabilities File\u201d \/\/ Description of this file"},{"entry":"FileType = CapabilitiesFile \u2003\u2003\/\/ must equal this exact string"},{"entry":"FileDate = 2003,12,17 \u2003\u2003\/\/ yyyy,mm,dd order must be used"},{"entry":"CffVersion = 1,6"},{"entry":"\/\/ ========================="},{"entry":"\/\/ Device Header"},{"entry":"\/\/ ========================="},{"entry":"[Device Header]"},{"entry":"DeviceName = \u201cTemperature Transmitter\u201d \u2003\u2003\/\/ Not actually present in the device?"},{"entry":"CommGroup = 3"},{"entry":"CommClass = Class31+Class32 \/\/ Class32 was omitted in earlier versions, but has always"},{"entry":"applied"},{"entry":"CommSubClass = Class3Publisher+Class3Subscriber+Class3LinkMaster"},{"entry":"DeviceClass = 2 \u2003\u2003\/\/ Link Master"},{"entry":"\/\/ ========================="},{"entry":"\/\/ Management VFD"},{"entry":"\/\/ ========================="},{"entry":"[Device VFD 1]"},{"entry":"VendorName = \u201cSofting\u201d"},{"entry":"ModelName = \u201cFD_MIB\u201d"},{"entry":"Revision = \u201c1.51\u201d"},{"entry":"VersionOD = 1"},{"entry":"ProfileNumber = 0x4D47 \u2003\u2003\/\/ defined in SM spec"},{"entry":"\/\/ ========================="},{"entry":"\/\/ Function Block VFD"},{"entry":"\/\/ ========================="},{"entry":"[Device VFD 2]"},{"entry":"VendorName = \u201cHoneywell\u201d"},{"entry":"ModelName = \u201cSTT35F\u201d"},{"entry":"Revision = \u201cRev 4.04\u201d"},{"entry":"VersionOD = 0x02"},{"entry":"ProfileNumber = 0"},{"entry":"\/\/ ========================="},{"entry":"\/\/ Network Management Section"},{"entry":"\/\/ ========================="},{"entry":"[NM OD Directory]"},{"entry":"\/\/ Object 257"},{"entry":"\/\/ Header"},{"entry":"DirectoryRevisionNumber=1"},{"entry":"NumberOfDirectoryObjects=1"},{"entry":"TotalNumberOfDirectoryEntries=8"},{"entry":"DirectoryIndexOfFirstCompositeListReference=9"},{"entry":"NumberOfCompositeListReferences=1"},{"entry":"\/\/ Composite Object References"},{"entry":"StackMgtOdIndex=290"},{"entry":"NumberOfObjectsInStackManagement= 1"},{"entry":"VcrListOdIndex = 291"},{"entry":"NumberOfObjectsInVcrList=36"},{"entry":"DlmeBasicOdIndex = 330"},{"entry":"NumberOfObjectsInDllBasic=2"},{"entry":"DlmeLinkMasterOdIndex = 332"},{"entry":"NumberOfObjectsInDllLme=8"},{"entry":"LinkScheduleListOdIndex = 343"},{"entry":"NumberOfObjectsInDllLinkSchedule =6"},{"entry":"DlmeBridgeOdIndex = 0 \u2003\u2003\/\/ Not used in ST35F"},{"entry":"NumberOfObjectsInDllBridge = 0"},{"entry":"PlmeBasicOdIndex = 340"},{"entry":"NumberOfObjectsInPhyLme = 3"},{"entry":"ListOfMmeReferences = 9"},{"entry":"NumberOfMmeComposites = 0"},{"entry":"[NM Restrictions] \/\/ Communication Capability"},{"entry":"MaximumResponseDelaySlotTime = 50 \/\/ Slowest time it takes the device to respond"},{"entry":"(octets)"},{"entry":"MinimumInterPduDelay = 4 \u2003\u2003\/\/ Minimum time the device needs between messages"},{"entry":"(octets)"},{"entry":"SlotTime = 5 \u2003\u2003\u2003\u2003\/\/ Minimum ???"},{"entry":"\/\/ Stack Capabilities"},{"entry":"FasArTypesAndRolesSupported\u2003=\u2003QUB_SERVER+QUU_SOURCE+BNU_PUBLISHER"},{"entry":"+BNU_SUBSCRIBER"},{"entry":"MaxDlsapAddressSupported = 16"},{"entry":"MaxDlcepAddressSupported = 17"},{"entry":"DlcepDeliveryFeaturesSupported = 0xBB"},{"entry":"VersionOfNmSpecSupported = 0x103 \u2003\/\/ Should this change ???"},{"entry":"AgentFunctionsSupported = 0x07"},{"entry":"FmsFeaturesSupported\u2003\u2003=\u2003\u2003INFO_REPORT+EVENT,GET_OD+READ+WRITE+"},{"entry":"INFO_REPORT+ACK_EVENT+GEN_DOWNLOAD"},{"entry":"\/\/ Basic Characteristics"},{"entry":"Version = 1"},{"entry":"BasicStatisticsSupportedFlag = 0"},{"entry":"DlDeviceConformance = 0x20010365"},{"entry":"DlOperatFunctionalClass = 2"},{"entry":"\/\/ \u2003VCR Information"},{"entry":"MaxEntries = 16"},{"entry":"NumPermanentEntries = 1"},{"entry":"DynamicsSupportedFlag = TRUE"},{"entry":"StatisticsSupported = FALSE"},{"entry":"\/\/ Ref code system.h"},{"entry":"\/\/ The following 6 values reflect the VCR capabilities, but are not available"},{"entry":"\/\/ as parameters in the MIB."},{"entry":"MaximumNumberOfClientVcrs = 0"},{"entry":"MaximumNumberOfServerVcrs = 15 \/\/ MAX_NO_OF_USR_VCR"},{"entry":"MaximumNumberOfSourceVcrs = 15 \/\/ MAX_NO_OF_USR_VCR"},{"entry":"MaximumNumberOfSinkVcrs = 0"},{"entry":"MaximumNumberOfSubscriberVcrs = 15 \/\/ MAX_NO_OF_USR_VCR"},{"entry":"MaximumNumberOfPublisherVcrs =15 \/\/ MAX_NO_OF_USR_VCR"},{"entry":"\/\/ Scheduling information"},{"entry":"MaximumSchedulingOverhead = 4"},{"entry":"DlmeLinkMasterCapabilitiesVariable = 0x04"},{"entry":"NumOfSchedules = 2"},{"entry":"NumOfSubSchedulesPerSchedule = 1"},{"entry":"\/\/ Ref code system.h"},{"entry":"\/\/ The following 3 elements are checked by the Product when schedules are downloaded"},{"entry":"\/\/ However, they are not available as parameters in the MIB"},{"entry":"\/\/ All 3 of these are maximum allowable values."},{"entry":"NumOfSequencesPerSubSchedule = 10 \/\/MAX_N_SEQ"},{"entry":"NumOfElementsPerSequence = 4 \/\/ MAX_N_SEQ_ELEMS"},{"entry":"MaximumSingleLasScheduleSize = 120 \/\/ MAX_LAS_CFG"},{"entry":"\/\/---------------------------------------------"},{"entry":"\/\/ Physical Layer"},{"entry":"\/\/---------------------------------------------"},{"entry":"PowerRequired = 22 \/\/ in milliamps"},{"entry":"ChannelStatisticsSupported = 0x0"},{"entry":"MediumAndDataRatesSupported = 0x0000000000000049"},{"entry":"\/\/WIRE_MEDIUM+VOLTAGE_MODE+SPEED_31KBPS"},{"entry":"IecVersion = 0x0001 \/\/ 31.25 half duplex"},{"entry":"NumberOfChannels =1"},{"entry":"PowerMode = BUS_POWERED"},{"entry":"InterfaceMode = HALF_DUPLEX"},{"entry":"\/\/ ========================="},{"entry":"[Server Restrictions]"},{"entry":"\/\/ Reference function falvcr_check_feat_and ctr( ) - falvcr.c"},{"entry":"FmsMaxOutstandingServicesCalling = 0"},{"entry":"FmsMaxOutstandingServicesCalled = 1"},{"entry":"\/\/ ========================="},{"entry":"[NM VCR Usage 1]"},{"entry":"\/\/ For partially configurable VCRs, the host configuration device must remember"},{"entry":"\/\/ which attributes of the VCR are configurable. The fully configurable VCRs are not listed"},{"entry":"here."},{"entry":"\/\/ Permanent Management VCR"},{"entry":"FasArTypeAndRole = QUB+SERVER+NOBYPASS"},{"entry":"FasDllLocalAddr = 0xF8"},{"entry":"FasDllConfiguredRemoteAddr = FREE"},{"entry":"FasDllSDAP \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003="},{"entry":"NONSCHEDULED+DISORDERED+AUTH_SOURCE+TIMEAVAILABLE"},{"entry":"FasDllMaxConfirmDelayOnConnect = 60000"},{"entry":"FasDllMaxConfirmDelayOnData = 60000"},{"entry":"FasDllMaxDlsduSize = 128"},{"entry":"FasDllResidualActivitySupported = RESIDUAL"},{"entry":"FasDllTimelinessClass = NONE+NODUPLICATION+NONE"},{"entry":"FasDllPublisherTimeWindowSize = 0"},{"entry":"FasDllPublisherSynchronizingDlcep = 0"},{"entry":"FasDllSubscriberTimeWindowSize = 0"},{"entry":"FasDllSubscriberSynchronizingDlcep = 0"},{"entry":"FmsVfdID = 1"},{"entry":"FmsMaxOutstandingServicesCalling = 0"},{"entry":"FmsMaxOutstandingServicesCalled = 1"},{"entry":"FmsFeaturesSupported = NONE, GET_OD+READ+WRITE+GEN_DOWNLOAD"},{"entry":"\/\/ Other VCRs are fully configurable."},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"\/\/ SM section"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"[SM OD Directory]"},{"entry":"DirectoryRevisionNumber =1"},{"entry":"NumberOfDirectoryObjects =1"},{"entry":"TotalNumberOfDirectoryEntries =5"},{"entry":"DirectoryIndexOfFirstCompositeListReference =0"},{"entry":"NumberOfCompositeListReference =0"},{"entry":"SmAgentStartingOdIndex =258"},{"entry":"NumberOfSmAgentObjects =4"},{"entry":"SyncAndSchedulingStartingOdIndex =262"},{"entry":"NumberOfSyncAndSchedulingObjects =8"},{"entry":"AddressAssignmentStartingOdIndex =270"},{"entry":"NumberOfAddressAssignmentObjects =3"},{"entry":"VfdListStartingOdIndex =273"},{"entry":"NumberOfVfdListObjects =2"},{"entry":"FbScheduleStartingOdIndex =275 \/\/ From Parm dict. was 276"},{"entry":"NumberOfFbScheduleObjects =5"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"\/\/ \u2003SM VFD"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"[SM VFD 1]"},{"entry":"VFD_REF =0x1"},{"entry":"VFD_TAG = \u201cMIB_VFD\u201d"},{"entry":"[SM VFD 2]"},{"entry":"VFD_REF =0x2"},{"entry":"VFD_TAG = \u201cFBAP\u201d"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"\/\/ \u2003SM Capability"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"[SM Capability]"},{"entry":"Sm_Support\u2003=\u2003SET_PDTAG_AGENT+SET_ADDR_AGENT+CLR_ADDR_AGENT+"},{"entry":"IDENTIFY_AGENT+LOC_FB_AGENT\\+FMS_SERVER+TIME_SLAVE+SCHEDULE_FB"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"\/\/ Function Block Application VFD"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"[VFD 2 OD Directory]"},{"entry":"DirectoryRevisionNumber =2"},{"entry":"NumberOfDirectoryObjects =1"},{"entry":"TotalNumberOfDirectoryEntries =12"},{"entry":"DirectoryIndexOfFirstCompositeListReference =17"},{"entry":"NumberOfCompositeListReference =3"},{"entry":"OdIndexForStartingActionObject =0"},{"entry":"NumberOfActionObjects =0"},{"entry":"OdIndexOfTheStartingLinkObjectInTheVfd =561"},{"entry":"NumberOfLinkObjectsInTheVfd =14"},{"entry":"OdIndexOfTheStartingAlertObjectInTheVfd =551"},{"entry":"NumberOfAlertObjectsInTheVfd =3"},{"entry":"OdIndexOfTheStartingTrendObjectInTheVfd =556"},{"entry":"NumberOfTrendObjectsInTheVfd =2"},{"entry":"OdIndexOfTheStartingDomainObjectInTheVfd =550"},{"entry":"NumberOfDomainObjectsInTheVfd =1"},{"entry":"DirectoryIndexForTheResourceBlock =23"},{"entry":"NumberOfResourceBlocksInTheVfd =1"},{"entry":"DirectoryIndexForTheFirstTransducerBlockPointer =25"},{"entry":"NumberOfTransducerBlocksInTheVfd =1"},{"entry":"DirectoryIndexForTheFirstFunctionBlockPointer =27"},{"entry":"NumberOfFunctionBlocksInTheVfd =2"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"\/\/ \u2003Channels for I\/O"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"[VFD 2 Channels]"},{"entry":"Channel1 = \u201cSensor Temperature\u201d"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"\/\/ \u2003\u2003Resource Block"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"[VFD 2 Resource Block]"},{"entry":"\/\/Block_Type =RESOURCE \u2003\u2003\/\/removed in version 1.5"},{"entry":"Block_Index =400"},{"entry":"DD_Item =0x80020af0 \/\/Resource block 2 with ITK_VER"},{"entry":"Profile =0x0133"},{"entry":"Profile_Revision =0x0101"},{"entry":"Num_Of_Parms = 51"},{"entry":"Views_Index = 588"},{"entry":"Number_View_3 = 1"},{"entry":"Number_View_4 = 1"},{"entry":"[VFD 2 Resource Block Defaults]"},{"entry":"\/\/ Minimum Resource Block Defaults required"},{"entry":"\/\/ All writeable parameters after Restart-Defaults"},{"entry":"ST_REV = 0"},{"entry":"TAG_DESC \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003="},{"entry":"0x2020202020202020202020202020202020202020202020202020202020202020"},{"entry":"STRATEGY = 0"},{"entry":"ALERT_KEY = 0"},{"entry":"MODE_BLK = 0x01, 0x01, 0x11, 0x10 \/\/ O\/S, O\/S, O\/S|Auto, Auto"},{"entry":"DD_RESOURCE = \u201c\u201d"},{"entry":"MANUFAC_ID =0x48574C"},{"entry":"DEV_TYPE =0x0101"},{"entry":"DEV_REV =0x04"},{"entry":"DD_REV =0x01"},{"entry":"GRANT_DENY = 0x00, 0x00"},{"entry":"HARD_TYPES = 0x8000"},{"entry":"RESTART = 1 \/\/ Run"},{"entry":"FEATURES =0x4800 \/\/ Reports | Hard W Lock"},{"entry":"FEATURE_SEL =0x4000 \/\/ Reports"},{"entry":"CYCLE_TYPE =0x8000"},{"entry":"CYCLE_SEL = 0x0000"},{"entry":"MIN_CYCLE_T =4000 \/\/ 125 msec"},{"entry":"MEMORY_SIZE =0"},{"entry":"NV_CYCLE_T =28800000 \/\/ 15 Minutes"},{"entry":"SHED_RCAS = 640000 \/\/ 20 sec"},{"entry":"SHED_ROUT = 640000 \/\/ 20 sec"},{"entry":"FAULT_STATE = 1 \/\/ Clear"},{"entry":"SET_FSTATE = 1 \/\/ OFF"},{"entry":"CLR_FSTATE = 1 \/\/ OFF"},{"entry":"MAX_NOTIFY =8"},{"entry":"LIM_NOTIFY = 8"},{"entry":"CONFIRM_TIME = 640000 \/\/ 20 sec"},{"entry":"WRITE_LOCK = 1 \/\/ not locked"},{"entry":"\/\/ALARM_SUM = 0x0100, 0x0000, 0x0000, 0x0000 \/\/Jim rem'd this out on LX"},{"entry":"ACK_OPTION = 0x0000"},{"entry":"WRITE_PRI = 0"},{"entry":"ITK_VER =4"},{"entry":"\/\/ Manufacturer's specific parameters"},{"entry":"DL_CMD1 = 0"},{"entry":"DL_CMD2 = 0"},{"entry":"AUX_FEATURES = 0x0000"},{"entry":"[VFD 2 Resource Block Example Values]"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"\/\/ \u2003\u2003Transducer Block"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"[VFD 2 Transducer Block 1]"},{"entry":"\/\/Block_Type = TRANSDUCER \u2003\u2003\/\/removed in version 1.5"},{"entry":"Block_Index =470"},{"entry":"DD_Item =0x20000"},{"entry":"Profile =0x8001 \/\/ custom TB"},{"entry":"Profile_Revision = 0"},{"entry":"Num_Of_Parms =34"},{"entry":"Views_Index =592"},{"entry":"Number_View_3 =1"},{"entry":"Number_View_4 =1"},{"entry":"[VFD 2 Transducer Block 1 Defaults]"},{"entry":"ST_REV = 0"},{"entry":"TAG_DESC \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003="},{"entry":"0x2020202020202020202020202020202020202020202020202020202020202020"},{"entry":"STRATEGY = 0"},{"entry":"ALERT_KEY = 0"},{"entry":"MODE_BLK = 0x01, 0x01, 0x11, 0x10 \/\/ O\/S, O\/S, O\/S|Auto, Auto Block in O\/S to allow"},{"entry":"restricted writes."},{"entry":"\/\/ALARM_SUM = 0x0100, 0x0000, 0x0000, 0x0000"},{"entry":"\/\/ Manufacturer's specific parameters"},{"entry":"XD_DIAGNOSTICS = 0 \/\/ No specific problem"},{"entry":"PV_UNITS = 1243 \/\/mV"},{"entry":"CJT_EXTERNAL = 0"},{"entry":"CJT_UNITS = 1001 \/\/ deg C"},{"entry":"CJT_TYPE = 1 \/\/ Internal Cold Junction"},{"entry":"SENSOR_TYPE = 103 \/\/ mV"},{"entry":"SENSOR_CONF = 3 \/\/ Single sensor wired"},{"entry":"BREAK_DETECT = 2 \/\/ Sensor fault detection ENABLED"},{"entry":"LATCHING = 1 \/\/ Latching DISABLED"},{"entry":"POWER_FILTER = 1 \/\/ 50 Hz"},{"entry":"EMISSIVITY = 10"},{"entry":"[VFD 2 Transducer Block 1 Example Values]"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"\/\/ \u2003\u2003AI Function Block"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"[VFD 2 Function Block 1]"},{"entry":"\/\/Block_Type =AI \/\/removed in version 1.5"},{"entry":"Block_Index =257"},{"entry":"DD_Item =0x800201D0"},{"entry":"Profile =0x0101 \/\/standard AI block"},{"entry":"Profile_Revision =0x0101 \/\/ <DD_REV>01"},{"entry":"Execution_Time =736"},{"entry":"Num_Of_Parms =39"},{"entry":"Views_Index =580"},{"entry":"Number_View_3 =1"},{"entry":"Number_View_4 =1"},{"entry":"[VFD 2 Function Block 1 Defaults]"},{"entry":"ST_REV = 0"},{"entry":"TAG_DESC \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003="},{"entry":"0x2020202020202020202020202020202020202020202020202020202020202020"},{"entry":"STRATEGY = 0"},{"entry":"ALERT_KEY = 0 \/\/ Causes Block Configuration Error"},{"entry":"\/\/MODE_BLK = 0x80, 0x80, 0x98, 0x08 \/\/ O\/S, O\/S, Auto | Man | O\/S, Auto"},{"entry":"MODE_BLK = 0x01, 0x01, 0x19, 0x10 \/\/ O\/S, O\/S, Auto | Man | O\/S, Auto"},{"entry":"\/\/BLOCK_ERR = 0x8002 \/\/ Out of Service | BlockConfiguration"},{"entry":"OUT = 0x1d, 0"},{"entry":"SIMULATE = 0x0, 0, 0x0, 0, 1 \/\/ partially dependent on XD block - disabled"},{"entry":"XD_SCALE = 100, 0, 1001, 0 \/\/ Should match XD.PRIMARY_VALUE_RANGE"},{"entry":"OUT_SCALE = 100, 0, 1147, 0"},{"entry":"GRANT_DENY = 0x00, 0x00"},{"entry":"IO_OPTS = 0x0000"},{"entry":"STATUS_OPTS = 0x0000"},{"entry":"CHANNEL = 0 \/\/ Causes Block Configuration Error"},{"entry":"L_TYPE = 0 \/\/ Causes Block Configuration Error"},{"entry":"LOW_CUT = 0"},{"entry":"PV_FTIME = 0"},{"entry":"\/\/ALARM_SUM = 0x0080, 0x0000, 0x0000, 0x0000"},{"entry":"ACK_OPTION = 0x0000"},{"entry":"ALARM_HYS = 0.5"},{"entry":"HI_HI_PRI = 0x00"},{"entry":"HI_HI_LIM = +INF"},{"entry":"HI_PRI = 0x00"},{"entry":"HI_LIM = +INF"},{"entry":"LO_PRI = 0x00"},{"entry":"LO_LIM = \u2212INF"},{"entry":"LO_LO_PRI = 0x00"},{"entry":"LO_LO_LIM = \u2212INF"},{"entry":"\/\/ Manufacturer's specific parameters"},{"entry":"[VFD 2 Function Block 1 Example Values]"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"\/\/ \u2003\u2003PID Function Block"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"[VFD 2 Function Block 2]"},{"entry":"\/\/Block_Type = PID \u2003\u2003\/\/removed in version 1.5"},{"entry":"Block_Index =310"},{"entry":"DD_Item =0x800202B0"},{"entry":"Profile =0x0108 \/\/standard PID block"},{"entry":"Profile_Revision =0x0101 \/\/ <DD_REV>01"},{"entry":"Execution_Time =2880"},{"entry":"Num_Of_Parms =74"},{"entry":"Views_Index =584"},{"entry":"Number_View_3 =1"},{"entry":"Number_View_4 =1"},{"entry":"[VFD 2 Function Block 2 Defaults]"},{"entry":"ST_REV = 0"},{"entry":"TAG_DESC \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003="},{"entry":"0x2020202020202020202020202020202020202020202020202020202020202020"},{"entry":"STRATEGY = 0"},{"entry":"ALERT_KEY = 0"},{"entry":"\/\/MODE_BLK = 0x80, 0x80, 0x9f, 0x08 \/\/ O\/S, O\/S, ROut | RCas | Cas | Auto | Man | O\/S,"},{"entry":"Auto"},{"entry":"MODE_BLK = 0x01, 0x01, 0xf9, 0x10 \/\/ O\/S, O\/S, ROut | RCas | Cas | Auto | Man | O\/S,"},{"entry":"Auto"},{"entry":"\/\/BLOCK_ERR = 0x8002 \/\/ Out of Service | BlockConfiguration"},{"entry":"\/\/BLOCK_ERR = 0x4001 \/\/ Out of Service | BlockConfiguration"},{"entry":"SP = 0x1c, 0"},{"entry":"OUT = 0x1d, 0"},{"entry":"PV_SCALE = 100, 0, 0, 0"},{"entry":"OUT_SCALE = 100, 0, 0, 0"},{"entry":"GRANT_DENY = 0x00, 0x00"},{"entry":"CONTROL_OPTS = 0x0000"},{"entry":"STATUS_OPTS = 0x0000"},{"entry":"PV_FTIME = 0"},{"entry":"BYPASS = 0 \/\/ Causes Block Configuration Error"},{"entry":"SP_RATE_DN = +INF"},{"entry":"SP_RATE_UP = +INF"},{"entry":"SP_HI_LIM = 100"},{"entry":"SP_LO_LIM = 0"},{"entry":"GAIN = 0"},{"entry":"RESET = +INF"},{"entry":"BAL_TIME = 0"},{"entry":"RATE = 0"},{"entry":"OUT_HI_LIM = 100"},{"entry":"OUT_LO_LIM = 0"},{"entry":"BKCAL_HYS = 0.5"},{"entry":"SHED_OPT = 0 \/\/ Causes Block Configuration Error"},{"entry":"TRK_SCALE = 100, 0, 0, 0"},{"entry":"FF_SCALE = 100, 0, 0, 0"},{"entry":"FF_GAIN = 0"},{"entry":"\/\/ALARM_SUM = 0x0080, 0x0000, 0x0000, 0x0000"},{"entry":"ACK_OPTION = 0x0000"},{"entry":"ALARM_HYS = 0.5"},{"entry":"HI_HI_PRI = 0x00"},{"entry":"HI_HI_LIM = +INF"},{"entry":"HI_PRI = 0x00"},{"entry":"HI_LIM = +INF"},{"entry":"LO_PRI = 0x00"},{"entry":"LO_LIM = \u2212INF"},{"entry":"LO_LO_PRI = 0x00"},{"entry":"LO_LO_LIM = \u2212INF"},{"entry":"DV_HI_PRI = 0x00"},{"entry":"DV_HI_LIM = +INF"},{"entry":"DV_LO_PRI = 0x00"},{"entry":"DV_LO_LIM = \u2212INF"},{"entry":"\/\/ Manufacturer's specific parameters"},{"entry":"PID_FORM = 1"},{"entry":"ALGO_TYPE = 1"},{"entry":"OUT_LAG = 0"},{"entry":"GAIN_NLIN = 0"},{"entry":"[VFD 2 Function Block 2 Example Values]"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0150","num":"0149"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}},"thead":{"row":[{"entry":"APPENDIX B"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/"},{"entry":"\/\/ \u2003\u2003Honeywell STT35F Capabilities Files"},{"entry":"\/\/"},{"entry":"\/\/ \u2003\u2003Copyright 2004, Honeywell International."},{"entry":"\/\/"},{"entry":"\/\/ ========================="},{"entry":"\/\/ File Header"},{"entry":"\/\/ ========================="},{"entry":"[File Header]"},{"entry":"Description = \u201cSTT35F Temperature Transmitter Capabilities File\u201d \/\/ Description of this file"},{"entry":"FileType = CapabilitiesFile \u2003\/\/ must equal this exact string"},{"entry":"FileDate = 2004,06,25 \u2003\u2003\/\/ yyyy,mm,dd order must be used"},{"entry":"CffVersion = 1,7"},{"entry":"\/\/ ========================="},{"entry":"\/\/ Device Header"},{"entry":"\/\/ ========================="},{"entry":"[Device Header]"},{"entry":"DeviceName = \u201cSTT35F Temperature Transmitter\u201d \/\/ Not actually present in the device?"},{"entry":"CommGroup = 3"},{"entry":"CommClass = Class31+Class32 \/\/ Class32 was omitted in earlier versions, but has always"},{"entry":"applied"},{"entry":"CommSubClass = Class3Publisher+Class3Subscriber+Class3LinkMaster"},{"entry":"DeviceClass = 2 \u2003\u2003\/\/ Link Master"},{"entry":"\/\/ ========================="},{"entry":"\/\/ Management VFD"},{"entry":"\/\/ ========================="},{"entry":"[Device VFD 1]"},{"entry":"VendorName = \u201cSofting\u201d"},{"entry":"ModelName = \u201cFD_MIB\u201d"},{"entry":"Revision = \u201c1.51\u201d"},{"entry":"VersionOD = 1"},{"entry":"ProfileNumber = 0x4D47 \u2003\u2003\/\/ defined in SM spec"},{"entry":"\/\/ ========================="},{"entry":"\/\/ Function Block VFD"},{"entry":"\/\/ ========================="},{"entry":"[Device VFD 2]"},{"entry":"VendorName = \u201cHoneywell\u201d"},{"entry":"ModelName = \u201cSTT35F\u201d"},{"entry":"Revision = \u201cRev 4.04\u201d"},{"entry":"VersionOD = 0x02"},{"entry":"ProfileNumber = 0"},{"entry":"\/\/ ========================="},{"entry":"\/\/ Network Management Section"},{"entry":"\/\/ ========================="},{"entry":"[NM OD Directory]"},{"entry":"\/\/ Object 257"},{"entry":"\/\/ Header"},{"entry":"DirectoryRevisionNumber=1"},{"entry":"NumberOfDirectoryObjects=1"},{"entry":"TotalNumberOfDirectoryEntries=8"},{"entry":"DirectoryIndexOfFirstCompositeListReference=9"},{"entry":"NumberOfCompositeListReferences=1"},{"entry":"\/\/ Composite Object References"},{"entry":"StackMgtOdIndex=290"},{"entry":"NumberOfObjectsInStackManagement= 1"},{"entry":"VcrListOdIndex = 291"},{"entry":"NumberOfObjectsInVcrList=36"},{"entry":"DlmeBasicOdIndex = 330"},{"entry":"NumberOfObjectsInDllBasic=2"},{"entry":"DlmeLinkMasterOdIndex = 332"},{"entry":"NumberOfObjectsInDllLme=8"},{"entry":"LinkScheduleListOdIndex = 343"},{"entry":"NumberOfObjectsInDllLinkSchedule =6"},{"entry":"DlmeBridgeOdIndex = 0 \u2003\u2003\/\/ Not used in ST35F"},{"entry":"NumberOfObjectsInDllBridge = 0"},{"entry":"PlmeBasicOdIndex = 340"},{"entry":"NumberOfObjectsInPhyLme = 3"},{"entry":"ListOfMmeReferences = 9"},{"entry":"NumberOfMmeComposites = 0"},{"entry":"[NM Restrictions] \/\/ Communication Capability"},{"entry":"MaximumResponseDelaySlotTime = 50 \/\/ Slowest time it takes the device to respond"},{"entry":"(octets)"},{"entry":"MinimumInterPduDelay = 4 \u2003\u2003\/\/ Minimum time the device needs between messages"},{"entry":"(octets)"},{"entry":"SlotTime = 5"},{"entry":"\/\/ Stack Capabilities"},{"entry":"FasArTypesAndRolesSupported\u2003=\u2003QUB_SERVER+QUU_SOURCE+BNU_PUBLISHER"},{"entry":"+BNU_SUBSCRIBER"},{"entry":"MaxDlsapAddressSupported = 16"},{"entry":"MaxDlcepAddressSupported = 17"},{"entry":"DlcepDeliveryFeaturesSupported = 0xBB"},{"entry":"VersionOfNmSpecSupported = 0x103"},{"entry":"AgentFunctionsSupported = 0x07"},{"entry":"FmsFeaturesSupported \u2003\u2003= \u2003\u2003INFO_REPORT+EVENT,GET_OD+READ+WRITE"},{"entry":"+INFO_REPORT+ACK_EVENT+GEN_DOWNLOAD"},{"entry":"\/\/ Basic Characteristics"},{"entry":"Version = 1"},{"entry":"BasicStatisticsSupportedFlag = 0"},{"entry":"DlDeviceConformance = 0x20010365"},{"entry":"DlOperatFunctionalClass = 2"},{"entry":"\/\/ \u2003VCR Information"},{"entry":"MaxEntries = 16"},{"entry":"NumPermanentEntries = 1"},{"entry":"DynamicsSupportedFlag = TRUE"},{"entry":"StatisticsSupported = FALSE"},{"entry":"\/\/ The following 6 values reflect the VCR capabilities, but are not available"},{"entry":"\/\/ as parameters in the MIB."},{"entry":"MaximumNumberOfClientVcrs = 0"},{"entry":"MaximumNumberOfServerVcrs = 15 \/\/ MAX_NO_OF_USR_VCR"},{"entry":"MaximumNumberOfSourceVcrs = 15 \/\/ MAX_NO_OF_USR_VCR"},{"entry":"MaximumNumberOfSinkVcrs = 0"},{"entry":"MaximumNumberOfSubscriberVcrs = 15 \/\/ MAX_NO_OF_USR_VCR"},{"entry":"MaximumNumberOfPublisherVcrs = 15 \/\/ MAX_NO_OF_USR_VCR"},{"entry":"\/\/ Scheduling information"},{"entry":"MaximumSchedulingOverhead = 4"},{"entry":"DlmeLinkMasterCapabilitiesVariable = 0x04"},{"entry":"NumOfSchedules = 2"},{"entry":"NumOfSubSchedulesPerSchedule = 1"},{"entry":"\/\/ The following 3 elements are checked by the Product when schedules are downloaded"},{"entry":"\/\/ However, they are not available as parameters in the MIB"},{"entry":"\/\/ All 3 of these are maximum allowable values."},{"entry":"NumOfSequencesPerSubSchedule = 10 \/\/MAX_N_SEQ"},{"entry":"NumOfElementsPerSequence = 4 \/\/ MAX_N_SEQ_ELEMS"},{"entry":"MaximumSingleLasScheduleSize = 120 \/\/ MAX_LAS_CFG"},{"entry":"\/\/---------------------------------------------"},{"entry":"\/\/ Physical Layer"},{"entry":"\/\/---------------------------------------------"},{"entry":"PowerRequired = 22 \/\/ in milliamps"},{"entry":"ChannelStatisticsSupported = 0x0"},{"entry":"MediumAndDataRatesSupported = 0x0000000000000049"},{"entry":"\/\/WIRE_MEDIUM+VOLTAGE_MODE+SPEED_31KBPS"},{"entry":"IecVersion = 0x0001 \/\/ 31.25 half duplex"},{"entry":"NumberOfChannels =1"},{"entry":"PowerMode = BUS_POWERED"},{"entry":"InterfaceMode = HALF_DUPLEX"},{"entry":"\/\/ ========================="},{"entry":"[Server Restrictions]"},{"entry":"FmsMaxOutstandingServicesCalling = 0"},{"entry":"FmsMaxOutstandingServicesCalled = 1"},{"entry":"\/\/ ========================="},{"entry":"[NM VCR Usage 1]"},{"entry":"\/\/ For partially configurable VCRs, the host configuration device must remember"},{"entry":"\/\/ which attributes of the VCR are configurable. The fully configurable VCRs are not listed"},{"entry":"here."},{"entry":"\/\/ Permanent Management VCR"},{"entry":"FasArTypeAndRole = QUB+SERVER+NOBYPASS"},{"entry":"FasDllLocalAddr = 0xF8"},{"entry":"FasDllConfiguredRemoteAddr = FREE"},{"entry":"FasDllSDAP \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003="},{"entry":"NONSCHEDULED+DISORDERED+AUTH_SOURCE+TIMEAVAILABLE"},{"entry":"FasDllMaxConfirmDelayOnConnect = 60000"},{"entry":"FasDllMaxConfirmDelayOnData = 60000"},{"entry":"FasDllMaxDlsduSize = 128"},{"entry":"FasDllResidualActivitySupported = RESIDUAL"},{"entry":"FasDllTimelinessClass = NONE+NODUPLICATION+NONE"},{"entry":"FasDllPublisherTimeWindowSize = 0"},{"entry":"FasDllPublisherSynchronizingDlcep = 0"},{"entry":"FasDllSubscriberTimeWindowSize = 0"},{"entry":"FasDllSubscriberSynchronizingDlcep = 0"},{"entry":"FmsVfdID = 1"},{"entry":"FmsMaxOutstandingServicesCalling = 0"},{"entry":"FmsMaxOutstandingServicesCalled = 1"},{"entry":"FmsFeaturesSupported = NONE, GET_OD+READ+WRITE+GEN_DOWNLOAD"},{"entry":"\/\/ Other VCRs are fully configurable."},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"\/\/ SM section"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"[SM OD Directory]"},{"entry":"DirectoryRevisionNumber =1"},{"entry":"NumberOfDirectoryObjects =1"},{"entry":"TotalNumberOfDirectoryEntries =5"},{"entry":"DirectoryIndexOfFirstCompositeListReference =0"},{"entry":"NumberOfCompositeListReference =0"},{"entry":"SmAgentStartingOdIndex =258"},{"entry":"NumberOfSmAgentObjects =4"},{"entry":"SyncAndSchedulingStartingOdIndex =262"},{"entry":"NumberOfSyncAndSchedulingObjects =8"},{"entry":"AddressAssignmentStartingOdIndex =270"},{"entry":"NumberOfAddressAssignmentObjects =3"},{"entry":"VfdListStartingOdIndex =273"},{"entry":"NumberOfVfdListObjects =2"},{"entry":"FbScheduleStartingOdIndex =275"},{"entry":"NumberOfFbScheduleObjects =5"},{"entry":"[SM Software Download Property]"},{"entry":"DownloadClass = 1"},{"entry":"WriteRspReturnedForACTIVATE = 1"},{"entry":"WriteRspReturnedForPREPARE = 1"},{"entry":"ReadyForDwnldDelaySecs = 200"},{"entry":"ActivationDelaySecs = 60"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"\/\/ \u2003SM VFD"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"[SM VFD 1]"},{"entry":"VFD_REF =0x1"},{"entry":"VFD_TAG = \u201cMIB_VFD\u201d"},{"entry":"[SM VFD 2]"},{"entry":"VFD_REF =0x2"},{"entry":"VFD_TAG = \u201cFBAP\u201d"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"\/\/ \u2003SM Capability"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"[SM Capability]"},{"entry":"Sm_Support \u2003= \u2003SET_PDTAG_AGENT+SET_ADDR_AGENT+CLR_ADDR_AGENT"},{"entry":"+IDENTIFY_AGENT+LOC_FB_AGENT\\+FMS_SERVER+TIME_SLAVE+SCHEDULE"},{"entry":"FB"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"\/\/ Function Block Application VFD"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"[VFD 2 OD Directory]"},{"entry":"DirectoryRevisionNumber =2"},{"entry":"NumberOfDirectoryObjects =1"},{"entry":"TotalNumberOfDirectoryEntries =12"},{"entry":"DirectoryIndexOfFirstCompositeListReference =17"},{"entry":"NumberOfCompositeListReference =3"},{"entry":"OdIndexForStartingActionObject =0"},{"entry":"NumberOfActionObjects =0"},{"entry":"OdIndexOfTheStartingLinkObjectInTheVfd =561"},{"entry":"NumberOfLinkObjectsInTheVfd =14"},{"entry":"OdIndexOfTheStartingAlertObjectInTheVfd =551"},{"entry":"NumberOfAlertObjectsInTheVfd =3"},{"entry":"OdIndexOfTheStartingTrendObjectInTheVfd =556"},{"entry":"NumberOfTrendObjectsInTheVfd =2"},{"entry":"OdIndexOfTheStartingDomainObjectInTheVfd =550"},{"entry":"NumberOfDomainObjectsInTheVfd =1"},{"entry":"DirectoryIndexForTheResourceBlock =23"},{"entry":"NumberOfResourceBlocksInTheVfd =1"},{"entry":"DirectoryIndexForTheFirstTransducerBlockPointer =25"},{"entry":"NumberOfTransducerBlocksInTheVfd =1"},{"entry":"DirectoryIndexForTheFirstFunctionBlockPointer =27"},{"entry":"NumberOfFunctionBlocksInTheVfd =2"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"\/\/ \u2003Channels for I\/O"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"[VFD 2 Channels]"},{"entry":"Channel1 = \u201cSensor Temperature\u201d"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"\/\/ \u2003\u2003Resource Block"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"[VFD 2 Resource Block]"},{"entry":"Block_Index =400"},{"entry":"DD_Item =0x80020af0 \/\/Resource block 2 with ITK_VER"},{"entry":"Profile =0x0133"},{"entry":"Profile_Revision =0x0101"},{"entry":"Num_Of_Parms = 51"},{"entry":"Views_Index = 588"},{"entry":"Number_View_3 = 1"},{"entry":"Number_View_4 = 1"},{"entry":"[VFD 2 Resource Block Defaults]"},{"entry":"\/\/ Minimum Resource Block Defaults required"},{"entry":"MANUFAC_ID =0x48574C"},{"entry":"DEV_TYPE =0x0101"},{"entry":"DEV_REV =0x04"},{"entry":"DD_REV =0x01"},{"entry":"DD_RESOURCE = \u201c\u201d"},{"entry":"HARD_TYPES = 0x8000"},{"entry":"FEATURES =0x4800 \/\/ Reports | Hard W Lock"},{"entry":"CYCLE_TYPE =0x8000"},{"entry":"MIN_CYCLE_T =4000 \/\/ 125 msec"},{"entry":"MEMORY_SIZE =0"},{"entry":"NV_CYCLE_T =28800000 \/\/ 15 Minutes"},{"entry":"MAX_NOTIFY =8"},{"entry":"ITK_VER =4"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"\/\/ \u2003\u2003Transducer Block"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"[VFD 2 Transducer Block Type 1]"},{"entry":"Block_Index =470"},{"entry":"DD_Item =0x20000"},{"entry":"Profile =0x8001 \/\/ custom TB"},{"entry":"Profile_Revision = 0"},{"entry":"Num_Of_Parms =34"},{"entry":"Views_Index =592"},{"entry":"Number_View_3 =1"},{"entry":"Number_View_4 =1"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"\/\/ \u2003\u2003AI Function Block"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"[VFD 2 Function Block Type 1]"},{"entry":"Block_Index =257"},{"entry":"DD_Item =0x800201D0"},{"entry":"Profile =0x0101 \/\/standard AI block"},{"entry":"Profile_Revision =0x0101 \/\/ <DD_REV>01"},{"entry":"Execution_Time =736"},{"entry":"Num_Of_Parms =39"},{"entry":"Views_Index =580"},{"entry":"Number_View_3 =1"},{"entry":"Number_View_4 =1"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"\/\/ \u2003\u2003PID Function Block"},{"entry":"\/\/ = = = = = = = = = = = = = = = = = ="},{"entry":"[VFD 2 Function Block Type 2]"},{"entry":"Block_Index =310"},{"entry":"DD_Item =0x800202B0"},{"entry":"Profile =0x0108 \/\/standard PID block"},{"entry":"Profile_Revision =0x0101 \/\/ <DD_REV>01"},{"entry":"Execution_Time =2880"},{"entry":"Num_Of_Parms =74"},{"entry":"Views_Index =584"},{"entry":"Number_View_3 =1"},{"entry":"Number_View_4 =1"},{"entry":"\/\/ = = = = = = = = = ="},{"entry":"\/\/ Trend Objects"},{"entry":"\/\/ = = = = = = = = = ="},{"entry":"[VFD 2 Trend Object Usage 0]"},{"entry":"TrendType = FLOAT"},{"entry":"[VFD 2 Trend Object Usage 1]"},{"entry":"TrendType = FLOAT"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention will be described with reference to the accompanying drawings, which are described briefly below.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
