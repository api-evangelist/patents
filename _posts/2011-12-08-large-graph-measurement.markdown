---
title: Large graph measurement
abstract: As provided herein, a pairwise distance between nodes in a large graph can be determined efficiently. URL-sketches are generated for respective nodes in an index by extracting labels from respective nodes, which provide a reference to a link between the nodes, aggregating the labels into sets for respective nodes, and storing the sets of labels as URL-sketches. Neighborhood-sketches are generated for the respective nodes in the index using the URL-sketches, by determining a neighborhood for a node and generating a sketch using labels that are associated with the respective neighboring nodes. A distance between two nodes is determined by computing an approximate number of paths and an approximate path length between the two nodes, using the neighborhood sketches for the two nodes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08583667&OS=08583667&RS=08583667
owner: Microsoft Corporation
number: 08583667
owner_city: Redmond
owner_country: US
publication_date: 20111208
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is a continuation of U.S. application Ser. No. 12\/396,514, filed on Mar. 3, 2009, entitled \u201cLARGE GRAPH MEASUREMENT\u201d, at least some of which may be incorporated herein.","Large graphs may comprise a series of nodes that are linked by a notion of similarity. For example, a web-graph may comprise an index of web-pages with respective links between the nodes comprising a notion of similarity, such as a domain, universal resource locator (URL), or content. As another example, people in social networks may make up nodes in a graph having links comprising particular interests or group memberships.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","Given a large graph, such as a web-graph or messenger graph, one may wish to identify a distance (e.g., how close or how far away) between two nodes in the graph, where the distance is a function of similarity. Distance between nodes in a large graph may play important roles in determining similarities between two web-pages in an index, such as a search engine database, for example. Computing a precise distance, such as a connectivity (e.g., number of paths) between nodes, can be difficult, taking a lot of time and utilizing a large amount of computing resources.","Often a precise distance may not be needed, particularly where clustering or ordering of documents based on relative distances can be computed using approximate distances. In these situations, instead of computing and storing pairwise distances for respective nodes in a graph, such as an adjacency matrix, merely storing some information about the respective nodes in the graph may suffice. Such information may be used at runtime to compute a distance between any two nodes in the graph.","Current and previous solutions are typically limited to particular kinds of graphs, such as planer graphs, trees, and bounded degree graphs. Further, some previous solutions may not allow for computation of a number of paths between any two nodes, and\/or require dependence of label assignment to nodes in the graph on existence of \u201cbeacon\u201d nodes in a dominant set, which may require the use of additional computational time and\/or other resources. Additionally, some previous solutions require that the graph be connected to the system so that it can be preprocessed to compute labels. Some previous solution may need specialized information in computing graph labeling that may not be readily available for many large graphs that may utilize such a system.","Techniques and systems are accordingly disclosed herein for efficiently computing a pairwise distance between nodes in a large graph (e.g., a notion of degree of separation). The techniques and systems disclosed herein utilize a linear storing construct for storing information for a number of nodes in a graph into memory, and are very efficient in computing an approximate distance at runtime. In the techniques and systems described herein, \u201cbeacon\u201d nodes are not utilized, the graph does not need to be connected (e.g., computations can be performed \u201coffline\u201d), node distances for a wide variety of large graphs may be determined, and information that is typically readily available is used for determining distances between nodes in a graph.","In one embodiment, a URL-sketch can be generated for respective nodes in an index (e.g., graph), such as web-pages in a search engine database. Generating the URL-sketches can comprise extracting labels from respective nodes, where the labels provide a reference to a link between the nodes, aggregating the labels into a set for the respective nodes, and storing the sets of labels in a manner that provides for efficient storage and retrieval (e.g., such as mapping to a bit-vector and storing the sketches in hash tables). Further, neighborhood-sketches can be generated for the respective nodes in the index using the URL-sketches, where a neighborhood comprises nodes from the index that neighbor the node of interest. Generating the neighborhood sketches can comprise determining a neighborhood for a node, and generating a sketch of the neighborhood using labels that are associated with the respective neighboring nodes. A distance between two nodes in the index can be determined by computing an approximate number of paths between the two nodes, and computing an approximate path length between the two nodes, using the neighborhood sketches for the two nodes.","To the accomplishment of the foregoing and related ends, the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects, advantages, and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.","The claimed subject matter is now described with reference to the drawings, wherein like reference numerals are used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident, however, that the claimed subject matter may be practiced without these specific details. In other instances, structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.","A method may be devised that provides for measuring distances between nodes in a large graph, such as web-pages in an index of web-pages, where distance may comprise similarity along with other measures of distance.  is a flow chart diagram of an exemplary method  for efficiently computing a pairwise distance between nodes in a large graph. The exemplary method  begins at  and involves generating a URL-sketch of respective web-pages in an index of web-pages, at . In one embodiment, a URL-sketch (e.g., URL referring to a uniform resource locator associated with web-pages) may comprise a list of other web-pages in the index that connect with a particular web page URL in the index, for example, using a link to the web page URL.","At , generating a URL-sketch of respective web-pages in an index of web-pages comprises extracting labels from the respective web-pages, and storing sets of labels for respective web-pages in the index for efficient storage and retrieval, at . For example, labels that identify a connection from a first website to a second website can be extracted for the respective websites in the index. In one embodiment, a set of labels can be extracted for the second website from the other first websites in the index, and the set of labels may represent a URL-sketch for the second website, corresponding to other first websites in the index that link to the second website.","Respective sets of labels, corresponding to URL-sketches for the websites in the index, can be stored efficiently so that use of resources may be mitigated. Further, the sets of labels can be stored in a manner that allows for efficient retrieval of the URL-sketches at runtime, for example, when distances between nodes are to be measured. In one embodiment, the URL-sketches can be mapped to bit vectors, which in-turn, may allow the URL-sketches to be stored in a hash-table-type configuration. A hash-table storage configuration is a data storage configuration that provides for very efficient storage and retrieval of the data.","At , in the exemplary method , a neighborhood-sketch is generated for the respective web-pages in the index using the URL-sketches. For example, a neighborhood sketch may comprise a graphical representation that depicts how nodes in a URL-sketch for a website are connected to each other. In one embodiment, nodes may be connected by common data, labels, domain names, or other information that links (or does not link) nodes in a URL-sketch. As an example, two different news websites may be linked to each other by having news articles about a same incident. In another example, different websites may be linked by being part of a same domain.","At , generating a neighborhood-sketch for the respective web-pages in the index comprises determining a neighborhood for a web-page, where the neighborhood is comprised of neighboring nodes, and generating a neighborhood sketch for the web-page using labels associated with the neighboring nodes, at . For example, in order to determine the neighborhood of a website, the neighboring nodes and how they are connected can be explored.","In one embodiment, a random-surfer model may be used to explore the URL-sketch for a website. In this embodiment, starting at the website, the random surfer model randomly selects neighboring nodes by selecting links from the website and subsequently from the nodes that are linked. At random intervals, the model returns to the website and begins randomly surfing again. In one embodiment, the various surfing journeys undertaken by the model can be compiled and a list of nodes visited can be ranked according to a number of visits by the model, for example. In this example, a neighborhood for the website can be selected based on selection of a desired number of the visited nodes according to their rank in the list.","In another embodiment, a node similarity bias walk model may be used to explore the URL-sketch for a website. In this embodiment, starting at the website, the node similarity bias walk model uses a similarity between nodes to bias the walk through the nodes in the neighborhood. For example, this model may be thought of as exploring the neighborhood by choosing similar nodes to explore during a walk starting from the website of interest in the URL-sketch. In one embodiment, a similarity can be inversely proportional to a distance between nodes. For example, similarity between nodes may be represented as: sim(u,v)=1\u2212dist(u,v)), where u and v are nodes in the URL-sketch, and sim( ) and dist( ) are functions of similarity and distance respectively.","In one embodiment, the distance (e.g., used to determine similarity between nodes) may comprise a hamming distance between corresponding URL-sketches for the nodes in question. A hamming distance can be a number of positions in URL-sketches of a same size for which corresponding nodes are different, for example. In other words, a hamming distance may be thought of as a number of websites in a first URL-sketch that need to be changed in order to have the same websites as a second URL-sketch. In this embodiment, for example, a larger hamming distance may indicate a bigger difference between nodes, therefore less similarity.","In another embodiment, another deterministic type of graph exploration model may be used to explore the neighborhood of a URL-sketch for a website. As an example, a breadth-first model may be used whereby exploration begins at the website of interest and explores the remaining nodes in a deterministic manner by starting with a first level of nodes, then exploring children of the first level nodes, and so on, until the respective nodes in the URL-sketch have been explored.","After determining which nodes are in a neighborhood for a node of interest, the neighborhood sketch can be generated. In one embodiment, a similar technique to the one used for creating a URL-sketch may be used. For example, in this embodiment, tokens used to identify links to a node of interest may be a domain\/URL name in the neighborhood, or some other label that links respective nodes in the neighborhood to the node for which the sketch is being created. As a further example, a sketch may be created for a node that comprises a domain \u201cfoxnews.com\u201d, whereby those neighboring nodes that have a domain of \u201cfoxnews.com\u201d may be aggregated for the node of interest, to create a neighborhood sketch.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2","b":["200","210","212","202","204","210","212","206","206","210","202","206","210"]},"In the exemplary method , at , a distance between two nodes in the index is determined. For example, now that neighborhood sketches for the respective nodes in the index, such as an index of websites (e.g., a web-crawler search engine index), a distance between nodes in the index may be determined using the respective neighborhood sketches.","At , determining a distance between two nodes in the index comprises computing an approximate number of paths between the two nodes, and computing an approximate path length between the two nodes, at . In one embodiment, in order to determine an approximate number of paths between the two nodes a number of common nodes between the neighborhood-sketches of the two nodes can be counted. In this embodiment, if the neighborhood sketches for the nodes in question share common nodes, for example, it is likely that these shared common nodes are part of a shared path between the nodes in question.","In another embodiment, a number of paths between two nodes may be determined using \u201ceffective resistance\u201d between the nodes in question. Commonly, effective resistance between two nodes of a graph is an electrical resistance between nodes of a resistor network. However, the notion of effective resistance may be applied to nodes of a large graph, such as a graph of websites. Essentially, in this embodiment, an effective resistance is inversely proportional to a number of paths between nodes. Therefore, for example, if the effective resistance between the two nodes in question is low, there may be a large number of paths between the nodes. The application of effective resistance to large graphs and determining a number of paths between nodes is explored in \u201cMinimizing Effective Resistance of a Graph,\u201d A. Ghosh, S. Boyd, A. Saberi, SIAM Review, Vol. 50, No. 1, pages 37-66 (2008).","In one embodiment, computing an approximate path length between the two nodes may comprise determining a location of the common nodes between the neighborhood sketches. For example, while a shared path between the nodes in question may be inferred by a presence of a common node in the neighborhood sketches, a length of that path is unknown. Therefore, in this embodiment, if a common node is merely one hop away from a first node in its corresponding neighborhood sketch and merely one hop away from a second node in its neighborhood sketch, it can be determined that the first and second nodes are two hops (two path lengths) away from each other.","As an example, in the exemplary environment  of , node seven of the nodes  in the URLs'  and  neighborhood sketches  and  is a common node shared by both URLs' neighborhoods, thereby representing a path between the URLs  and . Further, node seven is three path lengths away from the URL  in its neighborhood sketch , and three path lengths away from URL  in its neighborhood sketch . Therefore, a distance  between the URLs  and , over a shared path using node seven of the nodes , is six path lengths (e.g., six hops between the nodes). Further, in this example , there are other shared nodes (one, four, and three) for which distances  can be determined.","Having determined a distance between two nodes, the exemplary method  ends at .",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIGS. 3 to 5","FIG. 3"],"b":["300","300","302","304","350"]},"It will be appreciated that, while web-pages are utilized in this embodiment, the techniques and systems described herein are not limited to these embodiments. It is anticipated that those skilled in the art may devise alternate ways to apply these techniques and systems. For example, an index of Internet-based advertisements may be generated and applied to this exemplary method . Further, relatively any set of objects that may be arranged in a large graph, for which distances between nodes is desired to be determined, may apply the techniques and\/or systems described herein.","At , keywords  may be extracted from web-pages in the index  for the respective web-pages. In one embodiment, a first web-page in the index may be searched for anchor strings (e.g., a string of words), to be used as proxy strings, that comprise a link to a second web-page. For example, a string \u201cxyz\u201d may be used to refer to a link to the second web-page (e.g., <a href http:\/\/\u2018second web-page\u2019.com>xyz<\/a>), and the string \u201cxyz\u201d may be extracted as a label for the second web-page. In this embodiment, the proxy strings can be associated to the second web-page. In this embodiment, key words are extracted that correspond to the respective web-pages in the index .","At , the keywords , comprising link identifiers to a web-page, are aggregated as a set of keywords  for the web-page to which their links point. For example, a set of key words  for a particular web-page in the index  may comprise the proxy strings that identify those web-pages in the index that link the web-page of interest. Therefore, in this embodiment, the sets of keywords  for the respective web-pages in the index can represent a URL-sketch of those web-pages that are linked to a URL in the index.","At , the sets of keywords  are mapped into bit vectors  representing the URL-sketches for the respective web-pages in the index . In one embodiment, the sets of keywords  can be mapped into bit vectors  in hamming space. Hamming space is a set of all 2binary strings of length N. For example, if a bit vector comprises a binary string of length eight, the hamming space comprises a set of 2binary strings. In this embodiment, for example, mapping bit vectors in hamming space may provide for using a hamming distance to compute a distance between nodes. For example, a hamming distance can comprise a number of positions in a first binary string that need to be changed to match a second binary string.","Further, mapping the sets of keywords  to bit vectors  can provide a memory efficient manner of data storage. Additionally, this type of storage can enable efficient runtime distance computations. At , in order to provide efficiency of storage and retrieval, for example, the URL-sketches, comprising the sets of key word mapped as bit vectors , can be stored with their corresponding URL from the index in a hash-table type configuration . A hash table is a data storage configuration that associates a key with respective values stored in the hash table. At runtime, the values can be efficiently retrieved by running the key through a hash function that computes a hash value pointing to a location of the values, for example.","It will be appreciated that the techniques and systems for creating a URL-sketch are not limited to the embodiments described above. Those skilled in the art may devise alternate techniques for computing a URL-sketch for web-pages in an index. For example, minimal hashing techniques may be utilized, as described in \u201cMin-wise Independent Permutations, A. Z. Broder, M. Charikar, A. M. Frieze, M. Mitzenmacher, Proceedings of 13ACM Symposium on Theory of Computing, pages 327-336, (Dallas, Tex.).",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 4","b":["400","400","402","358","450"]},"At , a desired number (k) of nodes may be selected  from the neighborhood nodes  identified that represent nodes that were visited more times by the exploration model. For example, during exploration by the random surfer model, some nodes in the neighborhood may be visited more often than others. In this example, the neighboring nodes may be ranked according to a number of times they were visited during the exploration phase. Further, the top k nodes  can be selected for use in a neighborhood sketch of the URL of interest.","At , in the exemplary method , a set of domain names  can be identified and extracted that are common to the respective nodes in the neighborhood, or some other label may be used that is common to the nodes in the neighborhood. For example, when computing a URL-sketch for a website keywords were used as labels to identify linked nodes; here the neighborhood sketch is computed in a similar manner by using a token such as a domain\/URL or some other label common to the respective neighborhood nodes . Sets of labels  can be extracted for the respective nodes that have URL-sketches.","At , a neighborhood sketch  for a particular node can be determined using the set of domains  for the node of interest. The neighborhood sketch  can be stored, as described above, for example. At , respective neighboring nodes are a certain distance (e.g., number of hops, or path length) from the URL of interest (e.g., as in , , node seven is three hops from the URL ). The distances for the respective neighboring nodes can be associated with the neighboring nodes, and neighborhood sketches for these distance reference nodes  can be identified. For example, where there may be neighboring nodes of one hop, two hops and fours hops from the URL, distance reference neighborhood sketches  can be identified for these nodes.","At , the neighborhood sketch  for the URL and associated distance reference neighborhood sketches  can be stored  for the URL of interest, for the respective URLs in an index. For example, where a neighborhood sketch has been created for a particular web-page, neighborhood sketches for distance reference nodes in the web-page's neighborhood can be stored with the web-page's neighborhood sketch.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 5","FIG. 4"],"b":["500","500","506","502","504","410","8"],"sub":["1 ","1 ","1","1","1"]},"Therefore, these nodes (v) of known distances (distance reference nodes) can be identified for u, as well as identifying distance reference nodes for the second web-site from its neighborhood sketch. Further, at , neighborhood sketches for the distance reference nodes can be associated to the respective web-pages for which they serve as distance references. In one embodiment, merely a few distance reference node neighborhood sketches may be associated for the respective distances, for example, in order to save storage space and runtime efficiency.","At , a distance reference node having a known path length for the first web-page can be compared with a distance reference node for the second web-page having a same path length as the distance reference node for the first web-page. For example, a vthat has a d=1 can be compared with a vthat has a d=1. Further, a vthat has a d=2 can be compared with a vthat has a d=2, and so-on. At , a number of common (shared) nodes between the distance reference nodes for the respective web-pages is determined. For example, if a same node belongs to both neighborhood sketches for the respective distance reference nodes, it is shared by the respective nodes.","At , a number of paths between the websites can be determined for respective path lengths. In one embodiment, because the distance reference nodes are used as reference points for distance from the web-pages, the number of shared nodes may be used to determine an approximate number of paths between the web-pages. For example, if an intersection of vwith a d=2 and a vwith a d=2 is 4 common nodes, it may be inferred that there are 4 paths between the first web-page and the second web-page having a distance of 2 or 3 hops (where 2\u2266d<4).","Having determined a distance between two pairwise nodes in a large graph, the exemplary portion of a method  ends at .","In one aspect, a number of paths between any two nodes may be an accurate indicator of a similarity between the nodes. For example, where a domain is used as a label for nodes in respective neighborhood sketches, a path between the nodes can indicate a shared node having a same domain. In this example, a greater number of paths can indicate a greater number of shared domains, which may further indicate an increase in similarity between the nodes.","Other labels may be used, for example, new items for news web-pages. In this example, a search engine may wish to return relevant results to a user that comprise a variety of websites covering a particular topic. Both \u201cCNN.com\u201d and \u201cNBC.com\u201d may comprise a series of one or more same Associate Press articles on their websites, creating one or more paths between the two websites. The search engine may apply the techniques and systems, described herein, to determine that \u201cCNN.com\u201d and \u201cNBC.com\u201d are relatively close in distance, by noting a similarity between the websites from the shared nodes labeled by the shared articles. In this example, the search engine may determine that returning results from both websites is redundant and can choose to merely display results from one of the two.","In another aspect, a number of paths between two nodes may play an important role in other graph distances. For example, \u201chitting time\u201d (h(u,v)) can be a first time at which a given process \u201chits\u201d a given subset v of the process's state space when starting from u. Further, for example, \u201ccommute time\u201d (c(u,v)) can be a time for the process to travel between the starting point u and the subset v of the process's state space. In this example, c(u,v)=h(u,v)+h(v,u), which may be affected by a number of paths between the nodes u and v.","In another aspect, a number of paths between nodes in an index may be used to determine an importance of a particular node in the index (e.g., PageRank\u00ae). For example, a node may be considered to have a closer distance to other nodes in the index where there are a greater number of paths between the nodes. In this example, if a node has a higher number of paths that link it to another node it may be considered to have a higher level of importance. Further, paths to a node from another node that has a higher level of importance may be weighted higher than paths from nodes with lower importance. In this way, in this example, a ranking of nodes by way of importance can be determined based on their distances to other nodes in the index, using a number of paths between nodes from the neighborhood sketches. This example may be incorporated into a search algorithm that returns results for a query ranked by order of importance.","A system may be devised that can determine distances between nodes in an index.  is a component block illustrating an exemplary system  for efficiently computing a pairwise distance between nodes in a large graph. The exemplary system  comprises a URL-sketch generator  that is configured to create URL-sketches of web-pages in an index of web-pages. The URL-sketch generator  further comprises a web-page label extractor  and a label set store .","The URL-sketch generator  is configured to extract a set of labels that reference a first web-page from a set of second web-pages in an index  for respective web-pages in the index . The labels extracted from the set of second web-pages in the index  can reference a link between the first and second web-pages, thereby creating a URL-sketch (e.g., a sketch of URLs linked with the first web-page) for the first web-page. The label set store  is configured to store sets of labels for respective web-pages for efficient storage and retrieval. For example, sets of labels extracted for the respective web-pages in the index  can be stored in the label set store , thereby creating a stored URL-sketches  for the respective web-pages in the index .","The exemplary system  further comprises a neighborhood generator  configured to generate a neighborhood-sketch for the respective web-pages in the index . The neighborhood generator  further comprises a neighborhood determiner  and a neighborhood sketcher . In one embodiment, URL-sketches  can be retrieved and the neighborhood determiner  is configured to compute a neighborhood for a web-page using the corresponding URL-sketch, where the web-page's neighborhood comprises nodes neighboring the web-page. For example, where neighboring nodes may comprise links to the web-page of interest, the neighborhood determiner  can identify those nodes most often referenced during a web-based exploration of the nodes.","The neighborhood sketcher  is configured to generate a neighborhood sketch  for the web-page using labels associated with the respective neighboring nodes. For example, after a neighborhood of nodes is selected by the neighborhood determiner  the neighborhood sketcher  may extract labels for the respective neighboring nodes that are common to the respective nodes in the neighborhood. Using the labels, the neighborhood sketcher  can create a sketch of the neighborhood, relative to the website of interest, for example, that identifies respective nodes and their distances (e.g., in hops) from the web-page of interest. In this way, neighborhood sketches  can be created for the respective web-pages in the index  using the corresponding URL-sketches .","The exemplary system  further comprises a node distance measuring component  that is configured to determining a distance between two nodes (e.g., web-pages) in the index . In one embodiment, the node distance measuring component  may compare a neighborhood sketch from a first web-page with a neighborhood sketch from a second web-page to determine how many common nodes are shared by the two neighborhood sketches. In this embodiment, a number of shared common nodes may indicate a number of paths that link the two web-pages, for example.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 7","b":["700","604","612","600","606","720","722","720","720"]},"The keyword associating component  is configured to associate a set of proxy-strings from the web-pages in the index  to the second web-page. In one embodiment, proxy strings that reference a link to the second web-page may be extracted from a plurality of first web-pages in the index . The proxy strings for the second web-page may be aggregated by the keyword associating component  as a set of keywords for the second web-page, for example. Further, the keyword associating component  may aggregate sets of keywords for the respective web-pages in the index .","In the exemplary embodiment , the label set store comprises a hash-table type storage component . In this embodiment, sets of keywords generated by the web-page label extractor  may be mapped to binary strings, for example, thereby creating URL-sketches for the respective web-pages in the index . The respective binary strings representing URL-sketches can be stored in the hash table , for example, that allows for efficient storage and retrieval of data. In this embodiment, for example, the hash table  may be stored in a storage component  for the system.","A neighborhood determiner  can comprise an exploration model used to determine neighboring nodes for a web-page, using the URL-sketches stored in the storage component . In the exemplary embodiment , the exploration model may comprise one of: a random surfer modeling component , a similarity bias walking component , or a breadth-first type graph explorer model .","The random surfer modeling component  is configured to compute neighboring nodes for a web-page by randomly crawling a URL-sketch for the web-page starting from the web-page. Using this model , starting at the web-page of interest, neighboring nodes are identified by undertaking a random walk through the nodes using the links associated by the URL-sketch. In this embodiment, the model  moves from node to node in the URL-sketch and randomly returns to the web-site of interest to begin surfing the nodes again. In one embodiment, those neighboring nodes identified as having a highest number of visits by the model  may be included in a neighborhood for the web-page of interest.","The similarity bias walking component  is configured to compute neighboring nodes for a web-page by crawling a URL-sketch for the web-page using a node similarity bias starting from the web-page. For example, the component  can explore (e.g., travel to) nodes by identifying a node in the URL-sketch based on a similarity (e.g., most similar) to a node from which it begins, starting with the web-page of interest. In this way, for example, the similarity bias walking component  can create a neighborhood for the web-page of interest based on similarity. In one example, those nodes closest to the web-page of interest may be more similar to the web-page of interest, while those nodes further from the web-page of interest may be less similar to the web-page of interest.","The breadth-first type graph explorer model  is configured to use a deterministic crawl of a URL-sketch for the web-page starting from the web-page. For example, the model  may begin at the web-page of interest and explore those nodes in a first layer of distance away from the web-page of interest, then proceed to children nodes of those in the first layer, and so-on.","In the exemplary embodiment , the neighborhood sketcher comprises a neighborhood label identifier  and a label set store . The neighborhood label identifier  is configured to identify a set of labels that are common to the respective nodes in the neighborhood identified by the neighborhood determiner , such as domains or URLs. The label set store  is configured to store sets of labels for respective nodes for efficient storage and retrieval. In one embodiment, a set of neighborhood labels for a web-page of interest can comprise a neighborhood sketch for the web-page, which can be stored, for example, in a hash table , as described above. In this embodiment, the hash table comprising the neighborhood sketches for the web-pages in the index  can be stored on the storage component , for later efficient retrieval at runtime, for example, when node distances are determined.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 8","b":["800","850","620","620","800","802"]},"In this embodiment, for example, the node distance measuring component  can retrieve neighborhood sketches, for two nodes for which a distance can be determined, from the storage component . The effective resistance determiner , for example, can compute an effective resistance between the two nodes, which may equate to a number of paths between the nodes.","The node distance measuring component  in exemplary embodiment  comprises a path determiner  that is configured to compute an approximate path length and an approximate number of paths between two nodes. The path determiner  further comprises a path number determiner  and a path length determiner .","The path number determiner  is configured to determine an approximate number of paths between the two nodes, for example, by comparing a number of shared nodes between respective neighborhood sketches for the two nodes. In this example, the number of shared nodes between the neighborhood sketches of the two nodes of interest may indicate a number of paths between the nodes.","The path length determiner  is configured to determine a path length between the neighborhood-sketches of the two nodes for the approximate number of paths between the two nodes. For example, neighborhood sketches of distance (d) reference nodes for the respective nodes of interest having a same distance may be compared. A number (s) of share common nodes between the neighborhood sketches of distance reference nodes having a same distance can be determined, and it may be inferred that the nodes of interest share s paths of d distance (e.g., hops).","Still another embodiment involves a computer-readable medium comprising processor-executable instructions configured to implement one or more of the techniques presented herein. An exemplary computer-readable medium that may be devised in these ways is illustrated in , wherein the implementation  comprises a computer-readable medium  (e.g., a CD-R, DVD-R, or a platter of a hard disk drive), on which is encoded computer-readable data . This computer-readable data  in turn comprises a set of computer instructions  configured to operate according to one or more of the principles set forth herein. In one such embodiment , the processor-executable instructions  may be configured to perform a method, such as the exemplary method  of , for example. In another such embodiment, the processor-executable instructions  may be configured to implement a system, such as the exemplary system  of , for example. Many such computer-readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims.","As used in this application, the terms \u201ccomponent,\u201d \u201cmodule,\u201d \u201csystem\u201d, \u201cinterface\u201d, and the like are generally intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a controller and the controller can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers.","Furthermore, the claimed subject matter may be implemented as a method, apparatus, or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof to control a computer to implement the disclosed subject matter. The term \u201carticle of manufacture\u201d as used herein is intended to encompass a computer program accessible from any computer-readable device, carrier, or media. Of course, those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.",{"@attributes":{"id":"p-0082","num":"0081"},"figref":["FIG. 10","FIG. 10"]},"Although not required, embodiments are described in the general context of \u201ccomputer readable instructions\u201d being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media (discussed below). Computer readable instructions may be implemented as program modules, such as functions, objects, Application Programming Interfaces (APIs), data structures, and the like, that perform particular tasks or implement particular abstract data types. Typically, the functionality of the computer readable instructions may be combined or distributed as desired in various environments.",{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIG. 10","FIG. 10"],"b":["1010","1012","1012","1016","1018","1018","1014"]},"In other embodiments, device  may include additional features and\/or functionality. For example, device  may also include additional storage (e.g., removable and\/or non-removable) including, but not limited to, magnetic storage, optical storage, and the like. Such additional storage is illustrated in  by storage . In one embodiment, computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage  may also store other computer readable instructions to implement an operating system, an application program, and the like. Computer readable instructions may be loaded in memory  for execution by processing unit , for example.","The term \u201ccomputer readable media\u201d as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory  and storage  are examples of computer storage media. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, Digital Versatile Disks (DVDs) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .","Device  may also include communication connection(s)  that allows device  to communicate with other devices. Communication connection(s)  may include, but is not limited to, a modem, a Network Interface Card (NIC), an integrated network interface, a radio frequency transmitter\/receiver, an infrared port, a USB connection, or other interfaces for connecting computing device  to other computing devices. Communication connection(s)  may include a wired connection or a wireless connection. Communication connection(s)  may transmit and\/or receive communication media.","The term \u201ccomputer readable media\u201d may include communication media. Communication media typically embodies computer readable instructions or other data in a \u201cmodulated data signal\u201d such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.","Device  may include input device(s)  such as keyboard, mouse, pen, voice input device, touch input device, infrared cameras, video input devices, and\/or any other input device. Output device(s)  such as one or more displays, speakers, printers, and\/or any other output device may also be included in device . Input device(s)  and output device(s)  may be connected to device  via a wired connection, wireless connection, or any combination thereof. In one embodiment, an input device or an output device from another computing device may be used as input device(s)  or output device(s)  for computing device .","Components of computing device  may be connected by various interconnects, such as a bus. Such interconnects may include a Peripheral Component Interconnect (PCI), such as PCI Express, a Universal Serial Bus (USB), firewire (IEEE 1394), an optical bus structure, and the like. In another embodiment, components of computing device  may be interconnected by a network. For example, memory  may be comprised of multiple physical memory units located in different physical locations interconnected by a network.","Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example, a computing device  accessible via network  may store computer readable instructions to implement one or more embodiments provided herein. Computing device  may access computing device  and download a part or all of the computer readable instructions for execution. Alternatively, computing device  may download pieces of the computer readable instructions, as needed, or some instructions may be executed at computing device  and some at computing device .","Various operations of embodiments are provided herein. In one embodiment, one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media, which if executed by a computing device, will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further, it will be understood that not all operations are necessarily present in each embodiment provided herein.","Moreover, the word \u201cexemplary\u201d is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as \u201cexemplary\u201d is not necessarily to be construed as advantageous over other aspects or designs. Rather, use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application, the term \u201cor\u201d is intended to mean an inclusive \u201cor\u201d rather than an exclusive \u201cor\u201d. That is, unless specified otherwise, or clear from context, \u201cX employs A or B\u201d is intended to mean any of the natural inclusive permutations. That is, if X employs A; X employs B; or X employs both A and B, then \u201cX employs A or B\u201d is satisfied under any of the foregoing instances. In addition, the articles \u201ca\u201d and \u201can\u201d as used in this application and the appended claims may generally be construed to mean \u201cone or more\u201d unless specified otherwise or clear from context to be directed to a singular form.","Also, although the disclosure has been shown and described with respect to one or more implementations, equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components (e.g., elements, resources, etc.), the terms used to describe such components are intended to correspond, unless otherwise indicated, to any component which performs the specified function of the described component (e.g., that is functionally equivalent), even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition, while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations, such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore, to the extent that the terms \u201cincludes\u201d, \u201chaving\u201d, \u201chas\u201d, \u201cwith\u201d, or variants thereof are used in either the detailed description or the claims, such terms are intended to be inclusive in a manner similar to the term \u201ccomprising.\u201d"],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
