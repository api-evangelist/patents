---
title: Interconnection architecture and method of assessing interconnection architecture
abstract: A multi-celled chip. The chip includes a plurality of hexagonal cells arranged in an array. A plurality of interconnects including Y's connect the cells in clusters of three cells each, so that each of the cells is interconnected.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07622779&OS=07622779&RS=07622779
owner: The Regents of the University of California
number: 07622779
owner_city: Oakland
owner_country: US
publication_date: 20030909
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["PRIORITY CLAIM","STATEMENT OF GOVERNMENT INTEREST","TECHNICAL FIELD","BACKGROUND ART","DISCLOSURE OF INVENTION","BEST MODE FOR CARRYING OUT THE INVENTION"],"p":["Applicants claim priority benefits under 35 U.S.C. \u00a7 119 on the basis of Patent Application No. 60\/410,011, filed Sep. 10,2002 and Application No. 60\/410,396, filed Sep. 11, 2002.","This invention was made with Government assistance under NSF Grant No. 9987678. The Government has certain rights in this invention.","The present invention relates generally to the field of chip design and fabrication. The present invention also relates generally to the field of circuit routing.","With submicron technology, large numbers of processors, elements, or devices can be integrated on microcircuit chips. The processors, elements, or devices are arranged in arrays of cells on one or more layers of a chip. Each of the cells, containing a component of one or more overall circuits, contains one or more terminals for communicating with other cells. To permit the cells to communicate with one another interconnects, such as routing wires or other conductive paths, connect the cells and\/or bus segments, which themselves interconnect groups of cells.","The interconnects are arranged in meshes formed in or among one or more interconnect layers (also known as routing layers) of a microcircuit chip. A mesh is a common routing architecture for many reconfigurable computing systems. Both conventional and more recently proposed on-chip multiprocessor systems use mesh networks as communication backbones.","The microcircuit chips typically include a plurality of interconnect layers for interconnection of the cells. Pluralities of layers are often used for individual interconnections due to design constraints, for example. Vias help to route the interconnects between pluralities of layers. Connections are switched by devices such as, but not limited to, metal oxide semiconductor (MOS) devices.","High-performance system-on-a-chip (SoC) requires nonblocking interconnects between the array of cells on the chip. With nonblocking interconnects, when a cell needs to communicate with another cell, a route always exists for communication.","Interconnects have become one of the most precious resources on a chip. Length of connection between cells is a limiting performance factor in terms of power consumption and latency, among other factors. Unreasonable distribution of interconnect resources results in bottlenecks that stall data flow, while leaving other routing resources wasted. Furthermore, it is impractical to resolve this problem merely by enlarging a channel capacity of an entire array.","A long path through interconnects increases power consumption and signal delay. Additionally, a common physical embodiment of multiprocessor arrays is CMOS technology. In CMOS technology, power dissipation is proportional to interconnect capacitance, which in turn is proportional to a distance traveled by a signal. Thus, it is highly desirable to provide an architecture in which interconnection length is minimized. It is also desirable to provide an architecture that includes the shortest totals of route lengths between processors, and not interconnect length alone.","One predominant type of interconnect mesh is Manhattan architecture, so-called because its rectilinear connection arrangement resembles a city street grid. Manhattan architecture, however, requires lengths of interconnects that far exceed actual (Euclidean) distances between individual cells due to, for example, the requirement for orthogonal circuit paths.","More recently, an alternative chip architecture known as X-architecture has been introduced to reduce interconnection lengths versus Manhattan architecture. X-architecture uses tree structures having recursive patterns to interconnect cells in a nonblocking interconnection architecture. The tree structures may take the form of H-shaped patterns or X-shaped patterns, with the cells located at the extremities of each pattern. The interconnects are oriented, for example, in 0\u00b0, 45\u00b0, 90\u00b0, and 135\u00b0 directions. X-architecture has been disclosed as a solution to address microcircuit chip designs, especially chips with five or more routing layers.","Interconnection between all cells is provided by a specific hierarchical structure. For example, at a level \u201czero\u201d, four cells may be interconnected by an \u201cX\u201d. At a higher level, say, level \u201c1\u201d, four level \u201czero\u201d \u201cX's\u201d are interconnected by a larger \u201cX\u201d. At a still-higher level (\u201c2\u201d), four level \u201c1\u201d \u201cX's\u201d are interconnected by a still-larger \u201cX\u201d, etc. Performance improvement of the X-architecture over the Manhattan architecture has been demonstrated.","The present invention provides, among other features, a multi-celled chip. The chip includes arrays of hexagonal cells arranged on at least one component layer. A plurality of interconnects including Y's that connect the cells in clusters of three cells each. Each of the Y's has a node and three interconnects connecting the node to respective ones of the cells within a cluster, wherein each Y connects each cell of its respective cell group to the node.","The present invention also provides a number of methods to assess particular interconnection architectures, including providing a cost function and an assessment method based on a multi-commodity flow model. Exemplary embodiments of chips and interconnection architectures are also provided that are selected using the assessment methods provided. Bridges are also provided for directly connecting cells of a chip, and methods are provided for determining optimum locations of the bridges.","Interconnections among the cell array reveal themselves as a key problem, as the interconnect becomes one of the most precious resources on a chip. With the advent of deep sub-micron technologies, switches are becoming less costly, yet interconnects such as wires are still expensive. Therefore, optimization efforts according to embodiments of the present invention focus on the interconnect resources.","Traditional Manhattan interconnect architecture organizes interconnects on two orthogonal routing directions, 0\u00b0 and 90\u00b0, for the simplicity of routing embedding and design rule checking. However, this artificial restriction on routing directions adds significant interconnect length compared with the Euclidean optimum, and thus decreases the communication capability of the on-chip interconnects.","One goal of certain embodiments of the present invention is to allocate channel capacities in a mesh routing architecture to improve, or maximize, its communication capability. Communication capability can be measured by the throughput, which is the amount of information that every pair of nodes can exchange simultaneously. Throughput is a function of channel capacity and the dimension of the processor array.","Chips have been disclosed including non-rectilinear interconnects to improve the efficiency of on-chip interconnects. Most of these chips have introduced 45\u00b0 short jogs to improve routability of the chip in the detailed routing stage. Even in this architecture, however, the majority of the interconnects on the chip have still been routed in directions of either 0\u00b0 or 90\u00b0.","As an alternative to the traditional, Manhattan architecture, Mutrunoi et al. proposed an on-chip architecture known as X-architecture, which is designed to target designs having five or more routing layers. I. Mutsunori, T. Mitsuhashi, A. Le, S. Kazi, Y. Lin, A. Fujimiura, and S. Teig, \u201cA Diagonal Interconnect Architecture and Its Application to RISC Core Design,\u201d Proc. ISSCC, pp. 684-689, San Jose, Calif., February 2002. In X-architecture, interconnects are arranged in 0\u00b0, 45\u00b0, 90\u00b0, and 135\u00b0 directions. This design has been shown to achieve significant chip performance improvement and power reduction over Manhattan architecture.","However, with X-architecture, it is possible for two nodes to be physically adjacent on a chip layer and yet be on different tree structures on the same level. Furthermore, these respective tree structures may be linked to separate tree structures on a higher level, or even a still-higher level, until a level is reached, called a root, that is a common ancestor to the cells. Consequently, a greatly extended path length through interconnects may have to be traversed to interconnect two cells even through they may be physically adjacent. It is desirable to gain still further improvement in performance, including power consumption and speed.","Another constraint on throughput of an active device array is the problem of getting a signal or power from one area, for example a quadrant, of a chip to another. To do so, a middle row or middle column in the interconnect mesh typically must be traversed. Due to the normal distribution of interconnections, a middle row or middle column of the interconnect mesh tends to create a bottleneck effect. Enlarging the congested area will not itself produce better throughput. It is therefore desirable to provide an improved geometry to increase throughput.","According to an embodiment of the present invention, a configuration is provided in which an interconnect architecture includes one or more Y's to connect clusters of cells. A Y is a structural routing model in which interconnects, or legs, extend in three separate directions from a common node. An architecture formed of Y's is termed herein a Y-tree, and allows interconnection among some or all cells in a hexagonal pattern. Groups of Y's routed together form Y-trees. In an exemplary embodiment, individual Y's on a particular level connect clusters of cells, and these Y's are interconnected by Y's on higher levels. In the higher levels, a Y on a next-higher level is preferably rotated with respect to the Y on the next-lower level.","For example, an interconnect mesh having Y-architecture is provided in a multi-element integrated circuit chip array. Interconnects are routed in three directions, e.g. 0\u00b0, 60\u00b0, and 120\u00b0; or 0\u00b0, 120\u00b0, and 240\u00b0. The mesh preferably comprises a plurality of layers. In an additionally preferred aspect, the cells are arranged in a hexagonal array and embodied in a chip having a shape of a convex polygon, such as a hexagonal chip. Individual Y's connect clusters of the hexagonal cells. Diagonal routing technology allows different arrangements of interconnect structure. Methods for fabricating diagonal routing are provided in, for example, I. Mutsunori, T. Mitsuhashi, A. Le, S. Kazi, Y. Lin, A. Fujimiura, and S. Teig, \u201cA Diagonal Interconnect Architecture and Its Application to RISC Core Design,\u201d Proc. ISSCC, pp. 684-689, San Jose, Calif., February 2002.","In a preferred embodiment, the hexagonal cell array produces a flow congestion pattern that does not include the center of the hexagonal pattern. However, the benefit of producing a flow congestion pattern that does not include the center of the hexagonal pattern is not a function of any particular values of angles between the legs of individual Y's. Particular angles of the legs are not required; for example, 0\u00b0, 60\u00b0, and 120\u00b0, are merely an exemplary choice for artwork design. However, legs in one cell should be configured to connect with legs in a next cell. Wide tolerances between the specific values of the tree angles are allowed, while providing the same utility of the Y's. For example, a Y having legs at 0\u00b0, 150\u00b0, and 210\u00b0 (forming a more traditional \u201cY\u201d shape) could be provided.","The hexagonal cell array also has the property of hierarchical expansion. An algorithm is provided to set up a hierarchical tree of interconnect, and another algorithm is provided to set up a communication route in the architecture for pairs of processors in the array. It has been determined that the Y-architecture approaches the X-architecture in terms of optimizing wire resources. Additionally, algorithms for the merge of polygons on a hexagonal backbone are provided, which is useful in analysis of very large Y-trees.","According to an additional embodiment of the present invention, a cost function is provided to balance the cost of interconnect resources and the power consumption for the interconnect topology on a cell array. The total interconnect length is used to measure the cost of the interconnect resources, and the length of signal paths is used to evaluate the power consumption, since the power consumption is proportional to the interconnect capacitance, which in turn is proportional to the traveling distance of a signal.","An exemplary application of the cost function is used herein to compare shapes of meshes of cells. Each form of connection can be arranged in differently shaped meshes. For example, Manhattan architecture is most readily arranged in a square mesh; however, it may also be embodied in a diamond-shaped mesh, which may be visualized as a square rotated by 45\u00b0 from the position in which it rests on a side. Furthermore, the X-architecture lends itself to arrangement in an octagonal mesh, among other mesh shapes. To provide geometry less susceptible to bottlenecks, embodiments of the present invention provide alternative polygonal meshes, which may be formed using dies, for example.","According to an exemplary application of the cost function, the X-type nonblocking architecture (\u201cX-architecture\u201d) has been found to have a good tradeoff for a two-dimensional processor array. A significant benefit to X-architecture is that it can be hierarchically expanded. This benefit has been shown to be applicable to Y-architecture as well. The X-architecture and Y-architecture, along with other architectures, can be compared using the provided cost function.","Methods also are provided for determining locations of optimal additional interconnects between certain cells, buses, and\/or switches. These methods help to overcome some of the deficiencies in prior architectures, while continuing to require a minimum cost of interconnects and communication resources.","A method for assessing routing architecture is also provided. The Y-architecture of the present invention, having three routing directions, is compared with the Manhattan architecture and the X-architecture (with two and four routing directions, respectively). Using Y-architecture potentially gains a throughput improvement of 33.3% over the traditional Manhattan architecture on a square mesh. The Y-architecture produces nearly the same (2.6%) throughput as the X-architecture on a square mesh, yet using one less routing direction.","Furthermore, the Y-architecture achieves an average of 13.4% interconnect length reduction over Manhattan architecture, and approaches (4.3% less) the reduction of the X-architecture, while providing a simpler design. Still further, making the shape of the chip a convex polygon, and preferably closer to a circle, significantly improves the throughput over the rectangular chip. Using Y-architecture, a hexagonal chip can produce 41% more throughput than a square chip using Manhattan architecture, without causing dead space on the wafer.","The described Y-architecture and other optimization methods are applicable not only to chip design, but to other areas such as, but not limited to, wireless communications. In an exemplary wireless communication design base stations may be seated at the centers of the hexagonal areas in an array, and a route between the base stations may form the main part of the wireless communication route. The high performance solutions to communication among the base stations are quite similar to those of an array of processors on a chip. Therefore, the methods described herein are applicable to optimization of interconnect of base stations to balance cable resources and power consumptions.","Referring now to the drawings,  shows a chip  including an array  of hexagonal cells  (which may include processors or other chip components) interconnected through Y-architecture. The cells  have the physical shape of hexagons. Similar to X-architecture, the hexagonal cell array  can be expanded hierarchically.","As shown in , the array  is divided into clusters  of three cells . Every three cells  within the cluster on a level zero are interconnected with a Y  on a first level , as described above. Each Y  has three legs  of interconnects oriented in, for example, 0\u00b0, 120\u00b0, and 240\u00b0 (symmetrical) routing directions, respectively, from a preferably central node .","As also shown in , clusters of three nodes  of individual Y's  on the first level  are in turn clustered with a second level  of Y's. One level of the Y  is made up of at lease three routing layers, one for each direction. The number of routing layers for a level of the Y  can vary, depending on how many layers are needed for each direction of the Y. Each of the second level  of Y's  in the embodiment shown is rotated 90\u00b0 from the Y's of the first level . By recursively arranging the Y's  in this manner, a hierarchical Y-tree  can be provided without empty or dead cells (cells not connected to a remainder of the Y-tree), as shown.","In the Y-tree  shown in , three subtrees (lower level Y-shaped trees) are clustered on each level, and the length of the line segment, or leg of a n-th level Y, T=\u221a{square root over (3)}T. At the second level, 3hexagonal cells are bounded by the dashed line shown.","The Y-architecture preferably is routed upon the hexagonal array  including a number of rows. This array  preferably has the following properties: (1) a \u00bd grid shift exists between rows; (2) each cell  is physically adjacent to two cells in the same row; and (3) each cell is physically adjacent to two cells in the neighboring row above and two cells in the row below. Depending on the orientation, these rules can be respectively applied instead to columns. Thus, groups of three neighboring cells  can be clustered to set up individual Y's . Exemplary clusters  of three cells  are shown in bold in the hexagonal array of , in respectively inverted directions.","If each cluster  of three cells  is regarded as a unit, it can be seen that the hexagonal array  composed of such units also has the property of \u00bd grid shift, but now in the vertical direction (in the orientation shown). Thus, the Y-architecture can be expanded to the second level ; however, the directions of the individual Y's  at the second level  have a rotation of 90\u00b0 compared to the Y's of the first level . In a preferred embodiment, this property of \u00bd grid shift always holds when the Y-architecture is continuously expanded to upper levels. As shown in , for example, respective Y's  on higher levels are rotated either by 90\u00b0 or \u221290\u00b0 with respect to a previous (or higher) level.","For a Y-architecture of n tree levels, there are 2n combinations of orientations of the n Y's  on different tree levels. A combination of Y's  is referred to herein as a configuration, which indicates the way the overall Y-architecture grows. The configuration results in a particular boundary for the cells  interconnected by the Y-architecture.  show two examples 122, 124 of 6-level Y-architectures, together with their configurations.","Given a particular configuration, C, a Y-architecture as shown in  can be formed using the following expanding algorithm. The architecture is an ordered one. The first, second, and third subtrees correspond to three orientations as illustrated in . Every node in the architecture, except the leaves (the nodes at individual cells ), stores the orientation of the Y  with which to organize its three subtrees. C[1] denotes the orientation of the Y  on the lowest level, and C[n] denotes the orientation on the highest level. C[m] \u03b5 {up, down, left, right}. For consistency, but without limiting the scope of the present method, an exemplary configuration is started with an inverted Y. In other words, C[1] is assumed to equal \u201cdown\u201d. The coordinates shown in  distinguish the cells  in the hexagonal array. The center node  of the Y  at the highest level is shown in , having coordinates (0, 0).  shows an exemplary algorithm implementing a design of a Y-tree based on these coordinates.","According to the exemplary algorithm Setup_Y_tree shown in , the first three steps make subtrees of the first level Y tree from the leaves (i.e., the hexagonal cells ). The fourth step makes the template Y tree for the first level from three subtrees according to the orientation C(1). Next, the fifth step calculates the coordinate shift base x, y, and z. The sixth step is a loop for all the levels in the Y-tree  from 2 to n. Within the loop, for level i, the coordinate shifts for the three subtrees, x, y, x, y, x, y, are calculated according to C(i), which is the orientation of the Y  at level i. Then, the template tree at the previous level is copied to be the three subtrees of the current level Y tree by a Copy subroutine. The coordinates of all the leaf nodes in the three subtrees are shifted by a Shift subroutine. Finally, the template tree for the i-th level is built based on the three subtrees and the orientation C(i).",{"@attributes":{"id":"p-0120","num":"0119"},"figref":["FIGS. 6A-6D","FIG. 5","FIGS. 6A","FIG. 6D","FIG. 6C"],"b":["120","6","6"],"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["(5,2)(4,1)(6,1)(2,3)(1,2)(3,2)(2,1)(1,0)(3,0)(\u22121,2)","(\u22122,1)(0,1)(\u22124,3)(\u22125,2)(\u22123,2)(\u22124,1)(\u22125,0)(\u22123,0)(2,\u22121)","(1,\u22122)(3,\u22122)(\u22121,0)(\u22122,\u22121)(0,\u22121)(\u22121,\u22122)(\u22122,\u22123)(0,3)"]}}}},"From the hexagonal array's  properties and the algorithm for setting up the Y-trees , it can be shown that: (1) the exemplary algorithm according to an embodiment of the present invention generates Y-tree architecture without cell overlapping; (2) the number of cells covered by the generated Y-tree of n levels is 3; and (3) the length of the trunk at level n is (1\/\u221a{square root over (3)}).","In another embodiment of the present invention, a merging algorithm is used to merge two polygons. Then, based on this algorithm, another algorithm for merging polygons to set up a Y-tree without empty cells is provided.","Suppose there exists a polygon  on a backbone of hexagons, as shown in . The polygon  can be represented with a sequence of integers, where every integer i \u03b5 0, 1. In an exemplary embodiment, the sequence of integers is determined by traversing the boundary of the polygon in a counterclockwise direction. The boundary of the polygon  includes a series of adjacent edges . Every edge  has a rotation of either 120\u00b0 or \u2212120\u00b0 with respect to its preceding edge. If an edge A has a rotation of 120\u00b0 relative to its preceding edge, the edge  is considered to have a positive rotation. If the edge  has a rotation of \u2212120\u00b0, the edge is considered to have a negative rotation. For example, in the polygon  shown in , edges a and b have positive rotations, while edge c has a negative rotation.","A sequence, termed herein a hexagonal sequence, can thus be determined to represent the polygon . Starting with the edge  of the boundary of the polygon and traveling counterclockwise, if the edge  has a positive rotation, a 1 is entered into the sequence. If the edge  has a negative rotation, a 0 is entered into the sequence. The resulting string represents the hexagonal sequence. If A denotes a hexagonal sequence, then A(i) is defined to refer to the ielement in A, where A(i)\u03b50,1.","For example, the hexagonal sequence of the polygon  shown in  is 110111011101, and the hexagonal sequence of each of the polygons a and b shown in  is 11011011101101. Although the two polygons  have different orientations, the two polygons are considered the same, as direction is not imposed.","It can be seen that one can make any bits barrel-shift (assumed herein, for consistency only, to be leftwards) on a non-oriented hexagonal sequence without changing the corresponding polygon . Furthermore, for a correct hexagonal sequence, the number of 1's will be six more than the number of 0's, while for any sub-sequence, the difference between the number of 1's and the number of 0's should not exceed five. It can also be seen that two polygons  have the same shape and area (assuming unit size of cells) if they have the same hex-sequence. Additionally, if polygon  is flipped, its hex-sequence is also horizontally flipped. Thus, for a symmetric polygon, the hex-sequence should be unchanged if the polygon  is flipped.","In an exemplary merging method, if rotations are not permitted for generation of Y-trees , a definition is assumed for an oriented hex-sequence. Every edge  on the polygon  thus has only three possible directions, and an oriented hexagonal sequence is denoted by starting the hexagonal sequence with a vertical edge that is traversed downwardly. Therefore, the oriented hex-sequence for the polygon shown in  is 10110111011011, and the oriented hex-sequence for the polygon in  is 10111011011101.","The direction of each edge  can be calculated easily according to the numbers of \u201c1's\u201d and \u201c0's\u201d ahead of the edge. For an oriented hexagonal sequence A, i bits can be made to barrel-shift on the oriented hex-sequence without changing the direction of the polygon  if, and only if, the difference between the number of \u201c1's\u201d, and the number of \u201c0\u201ds is either zero or five in the subsequence from A(2) to A(i+1).","Given two hex-sequences A and B, an algorithm may be used to provide a new hex-sequence C, which is a merging of polygons A and B. To merge the hex-sequences, it is first assumed that both polygons A and B can be rotated. A preferred embodiment of the algorithm is shown in . In the algorithm, the first step retrieves the bit-wise complement, BI, of the input sequence B. The second step generates the reversed bit order sequence, Bh, of sequence BI. Then, for each common sub-sequence, sub, between Bh and A, if it is acceptable for merging by the Accept function, the following is performed: Rewrite sequence A in the form A=(A1)(sub)(A2); rewrite sequence B in the form B=(B1)RevFlip(sub)(B2), where RevFlip(sub) is an operation on sequence sub to complement every bits followed by a bit order reversing; calculate sequence A12=ModMerge(A1, A2), and B12=ModMerge(B1, B2), where ModMerge(S1, S2) is an operation to merge two sequences S2 and S1 and get sequence S=(S2)(S1), and then to complement the first bit of S and eliminate the last bit of S. The sequence of the merged polygon, C, is the sequence A12 followed by sequence B12.",{"@attributes":{"id":"p-0130","num":"0132"},"figref":"FIG. 10","b":"122","ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":{"@attributes":{"id":"ul0003-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":["sub=110; RevFlip(sub)=100","A1=1101;","A2=11101","A12=01101110","B1=1110111010111","B2=empty","B12=011011101011","C=(A12)(B12)=01101110011011101011"]}}}},"Next, the situation is considered in which the polygons  are not allowed to rotate. In other words, two oriented polygons  are merged. The design of the function \u201cAccept\u201d in the algorithm of  should be slightly more complicated. Not only should the two subsequences have the same pattern, but they also should have the same directions for their corresponding edges . In addition, if the common sub-sequence happens to involve the first bit of A, or A1 has the only bit , the first bit of B is the first bit of the merged polygon C, and the generated hexagonal sequence must be shifted to make it correctively denote the polygon's orientation. It can be shown that the first bits of A and B will not appear in the sub-sequence simultaneously. A polygon formed by oriented merging is shown in .","In implementing this algorithm, A=1100111011101011; and B=101110111011 (remembering the position of the first bit in B). Thus:\n\n","The final polygon  of a complete Y-tree  can be obtained by merging the polygons of sub-trees, from the lowest level to the highest. When two polygons  are merged, they have a section of common boundary. The two ends of the common boundary may be connected with a line, in which the direction of the line is defined to be the direction of the common boundary.","Given the direction of the first edge  of the common boundary and the corresponding sub-sequence, the direction of the common boundary can be easily calculated. Merging of three polygons  of sub-trees can be realized, under the orientation configuration of Y at each level, by two steps:\n\n","For simplicity, one starts from the sub-tree of level . A subtree of level  includes 9 basic hexagonal cells  and has a completely symmetrical polygon regardless of the directions of the Y's on the first and second levels.  are illustrations of merged polygons formed by steps (1) and (2) above, respectively. After step (1), a common boundary  length is =4, which is one-sixth the boundary of each original polygon. The common boundary's direction  is vertical. After step (2), the common boundary's 126 total length is 8 (again, one-third the original polygon size), and as split into two halves, each half of the common boundary has a direction opposite to that of the required orientation of Y for level  as shown. By merging the polygons of sub-trees level by level, we get the final polygon  of the Y-tree . Preferably, the process of merging will not result in empty cells.","In multilayer routing, a via is used to connect interconnects that are disposed on multiple layers. However, the via blocks wire tracks on layers it passes through. According to another embodiment of the present invention, tunnel detours are used to route interconnects around vias.",{"@attributes":{"id":"p-0137","num":"0159"},"figref":["FIGS. 13A and 13B","FIGS. 14A-14B","FIG. 14B"],"b":["130","130","132","134","134","132"]},"To maximize throughput, a plurality of tunnels  preferably forms a bank , which is arranged on a lower routing layer along a direction of a plurality of gaps and vias . As shown in , suppose L is the dimension of the bank  and c is the number of vias  in each individual tunnel , the number of vias avoided is equal to cL. The top n-k layers in this embodiment are used to distribute signals to the bank . In this configuration, on the top n-k layers, c+2 wiring tracks are blocked on each vertical layer while all the wiring tracks on the horizontal layers can be routed without blockage.",{"@attributes":{"id":"p-0139","num":"0161"},"figref":"FIG. 16","b":["134","130","134","134","132"]},"The pattern formed by the five interconnects shown in  with their respective tunnels  can be extended to form the bank  of tunnels, as in the case of Manhattan architecture. An exemplary bank  of tunnels is shown in . A plurality of banks  of tunnels is shown in . Again, the bottom k layers are used to perform intra-cell routing, and the top n-k layers are used to distribute signals to the banks  of tunnels. If L is the dimension of the bank and cis the number of vias  in each individual via tunnel , the number of vias in this arrangement preferably equals cL, and the number of overhead tracks preferably equals c+c, where cis the constant associated with the individual tunnel design. In the exemplary tunnel  shown in , cand care equal to 1 and 5, respectively. The banks of via tunnels maximize throughput.","The design of early blocking networks focused on minimization of switches. In deep submicron technology, devices are shrunk to very small sizes and are less expensive, while interconnects such as wires and buses are lengthened, resulting in the increase of interconnect resistance and capacitance. Performance such as power consumption and signal delay are significantly deteriorated. Therefore, the length of signal paths is more important than the number of switches in the path regarding delay in circuit processing. However, a large-scale system on a chip (SoC) requires a significant amount of wire resources, so it is not feasible to set up the shortest path for every pair of processors in the array.","Conventionally, bus-based architectures have offered standards for communication interfaces. However, in chip design, a length of connection between cells is a limiting performance factor in terms of power consumption and latency, among other factors. The physical size of long interconnects limits the scalability of the architecture. Also, the contention for the interconnects adds to the latency of the communication. This increase is made more significant by the ever-shrinking size of individual cells and interconnects (in width, for example). Thus, chip designs minimizing connection lengths provide a performance benefit for a particular chip.","The total length may be used to measure the cost of interconnect resources, because the interconnect length typically is proportional to the amount of area taken on the routing layers. In deep submicron technologies, the number of routing layers remains limited. Furthermore, even as the number of routing layers increases, the coupling capacitance due to congestion and the required vias that connect signals to the layers high above make routing area a precious resource. It is also desirable to reduce the power dissipation of the wire interconnects because power consumption has become one of the main concerns in various applications.","According to a preferred method of the present invention, an objective cost function is provided to balance interconnect topology between routing area and power dissipation. This cost function is defined with an emphasis on interconnects as opposed to switches.","A goal of the cost function is to reduce the total traveled distance of the signal communication. Let us assume that each cell has to communicate with the rest of the cells with equal demand. Then, the total power dissipation is measured by the total pairwise distance between the cells. This equal demand model is used for preferred embodiments of the present method because the demand is symmetrical and thus independent of the placement implementation.","It is conceivable that by adding interconnects for the communication, the traveling distance can be reduced. However, the interconnects resources are limited by the physical space. Furthermore, the same resources are needed for other purposes such as, but not limited to, making internal connections within each cell, or for testing. Thus, the product of the total interconnect length and the total power distribution is chosen as a metric to balance design. Moreover, the derivative of this product provides an additional metric to further analyze the interconnect architecture.","A preferred method for determining benefit of a particular tree structure thus includes minimization of a cost function, as shown below.\n\nMin \n",{"@attributes":{"id":"p-0148","num":"0170"},"maths":[{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mi":"Where","mo":",","mrow":{"mi":"L","mo":"=","mrow":{"mo":"\u2211","mrow":{"mi":["Length","of","each","wire"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]}}}}}},{"@attributes":{"id":"MATH-US-00001-2","num":"00001.2"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mi":"D","mo":"=","mrow":{"munder":{"mo":"\u2211","mrow":{"mi":["i","ic","P"],"mo":["\u2264","\u2264"]}},"mo":"\u2062","msub":{"mi":"d","mrow":{"mi":["i","j"],"mo":","}}}}}}]},"In this definition, dis the shortest route length between processor (i) and processor (j). P is the total number of processors.","In conventional hierarchical interconnection architectures, either L or D of the cost function above has been minimized at the expense of increasing the value of the other parameter. The Y-structure of the present invention, on the other hand, helps to minimize or substantially reduce M. In a preferred integrated circuit design method of the present invention, the cost function is utilized for various configurations, and a configuration that minimizes M may thus be selected for design of an integrated circuit.","For rectangular cells, X-architecture provides optimal performance according to the above cost function.  shows an X-architecture model in which an X  having four legs of interconnects connect each of a 2\u00d72 array of cells . The center of the X  includes a switch box , which has the internal structure shown in . As shown in , the switch box  includes six switches  that may connect the four intersected interconnects. Every two of the four cells  covered by the X-architecture can set up a communicating route through the switch box .","The interconnects from the four cells  are also bundled together, forming a new interconnect going to a higher level, as shown in . A higher level X-tree  also includes a larger switch box  (indicated by a larger circle) lying at higher levels, which has a similar structure of the switch box of , except that the bus width grows four times for every expansion to a higher level. This architecture guarantees that whenever two processors in the array need to communicate, a route always exists.","Assuming the distance between the cells  is equal to one, the table of  shows application of the above-described cost function to the X-architecture of . N denotes the highest level of the X-architecture as shown in the X-tree  of . It is preferred that the tree  grows recursively, and that the topology of each level remains identical, with certain rotations allowed. The total number of cells  covered by the X-tree  preferably is equal to k, where k is the number of the subtrees clustered on each level of the X-architecture. The length of the trunk at level n, T, preferably is equal to \u221a{square root over (k)}T. It is also preferred that no \u201choles\u201d or \u201cempty cells\u201d exist within the array. In other words, it is preferred that the cells  in the array form a continuous region bounded by a closed curve.","Assuming that the distance between the centers of adjacent cells  is equal to \u03b1, the key results of the cost function as applied to the Y-architecture are shown in the table of .","In an exemplary method comparing Y-architecture to X-architecture, it is assumed that the cells  in the two architectures have one unit area. Thus, the distance between the centers of adjacent cells  in X-architecture is one, and the distance between the centers of adjacent cells in the Y-architecture, \u03b1in the table of , is 3\u00b72.  demonstrates functions of Mand Mwith respect to n, the highest level of the architecture. In , Mand Mare normalized with A, where A is the number of cells  that the tree covers.","To make a comparison for greater n levels, we neglect the lower order items of Mand M:",{"@attributes":{"id":"p-0157","num":"0179"},"maths":[{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"msub":{"mi":["M","X"]},"mo":"\u2248","mrow":{"mrow":[{"mo":["(",")"],"mrow":{"mrow":{"mn":"6","mo":"\u00b7","msup":{"mn":"2","mrow":{"mrow":{"mn":"4","mo":"\u2062","mi":"n"},"mo":"-","mn":"4"}}},"mo":["\u2062","\u2062"],"msup":{"mn":"2","mi":"n"},"msqrt":{"mn":"2"}}},{"mo":["(",")"],"mrow":{"msup":{"mn":"2","mrow":{"mrow":{"mn":"3","mo":"\u2062","mi":"n"},"mo":"-","mn":"2"}},"mo":"\u2062","msqrt":{"mn":"2"}}}],"mo":"\u2062"}},{"mn":"6","mo":"\u00b7","msup":{"mn":"2","mrow":{"mrow":{"mn":"8","mo":"\u2062","mi":"n"},"mo":"-","mn":"5"}}}],"mo":"="}}},{"@attributes":{"id":"MATH-US-00002-2","num":"00002.2"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"msub":{"mi":["M","Y"]},"mo":"\u2248","mrow":{"msup":[{"mn":"3","mrow":{"mi":"n","mo":"-","mn":"1"}},{"mn":"3","mrow":{"mrow":{"mn":"2","mo":"\u2062","mi":"n"},"mo":"-","mn":"2"}},{"mi":"\u03b1","mn":"2"}],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062"],"msqrt":{"msup":{"mn":"3","mi":"n"}},"mrow":[{"mo":["(",")"],"mrow":{"mn":"3","mo":"+","msqrt":{"mn":"3"}}},{"mo":["(",")"],"mrow":{"msup":{"mn":"3","mfrac":{"mi":"n","mn":"2"}},"mo":"-","mn":"1"}}]}},{"mn":"2","mo":["\u2062","\u2062"],"mrow":{"mo":["(",")"],"mrow":{"mn":"1","mo":"+","msqrt":{"mn":"3"}}},"msup":{"mn":"3","mrow":{"mrow":{"mn":"4","mo":"\u2062","mi":"n"},"mo":"-","mn":"3"}}}],"mo":"="}}}]},"To compare the respective performance of the trees mathematically, we assume that the trees ,  cover the same number of cells . This results in:",{"@attributes":{"id":"p-0159","num":"0181"},"maths":[{"@attributes":{"id":"MATH-US-00003","num":"00003"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"msub":{"mi":["n","X"]},"mo":"=","mrow":{"mrow":[{"msub":[{"mi":"log","mn":"4"},{"mi":["n","Y"]}],"mo":["\u2062","\u2062","\u2062"],"mi":"A","mstyle":{"mspace":{"@attributes":{"width":"2.8em","height":"2.8ex"}}}},{"msub":{"mi":"log","mn":"3"},"mo":"\u2062","mi":"A"}],"mo":"="}}}},{"@attributes":{"id":"MATH-US-00003-2","num":"00003.2"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"msub":{"mi":["M","X"]},"mo":"=","mrow":{"mrow":[{"mfrac":{"mn":"6","msup":{"mn":["2","5"]}},"mo":["\u2062","\u2062","\u2062"],"msup":{"mi":"A","mn":"4"},"mstyle":{"mspace":{"@attributes":{"width":"1.9em","height":"1.9ex"}}},"msub":{"mi":["M","Y"]}},{"mfrac":{"mrow":{"mn":"2","mo":"\u2062","mrow":{"mo":["(",")"],"mrow":{"mn":"1","mo":"+","msqrt":{"mn":"3"}}}},"msup":{"mn":["3","3"]}},"mo":"\u2062","msup":{"mi":"A","mn":"4"}}],"mo":"="}}}},{"@attributes":{"id":"MATH-US-00003-3","num":"00003.3"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mfrac":{"msub":[{"mi":["M","X"]},{"mi":["M","Y"]}]},"mo":"\u2248","mn":"0.93"}}}]},"A is the number of cells ,  in the X- or Y-tree. As shown, there is just a slight difference between Mand M. Therefore, the two architectures have similar performance. If A is close to some order of four, X-architecture is a preferred solution, while if A is close to some order of three, Y-architecture is preferred.","The derivative form of the cost function may also be used to further analyze the interconnect architecture, and is given by:",{"@attributes":{"id":"p-0162","num":"0184"},"maths":{"@attributes":{"id":"MATH-US-00004","num":"00004"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":{"mrow":{"mfrac":[{"mrow":[{"mi":["\u0394","M"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}},{"mi":["\u0394","L"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}]},{"mrow":[{"mrow":[{"mrow":[{"mo":["(",")"],"mrow":{"mi":"L","mo":"+","mrow":{"mi":["\u0394","L"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}}},{"mo":["(",")"],"mrow":{"mi":"D","mo":"+","mrow":{"mi":["\u0394","D"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}}}],"mo":"\u2062"},{"mi":["L","D"],"mo":"*"}],"mo":"-"},{"mi":["\u0394","L"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}]}],"mo":["=","\u2062"],"mi":{}}}},{"mtd":{"mrow":{"mo":["=","\u2062"],"mi":{},"mrow":{"mfrac":{"mrow":[{"mi":["\u0394","D"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}},{"mi":["\u0394","L"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}]},"mo":["+","+"],"mrow":{"mi":["\u0394","D"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}},"mi":"D"}}}},{"mtd":{"mrow":{"mo":["\u2248","\u2062"],"mi":{},"mrow":{"mrow":{"mfrac":{"mrow":[{"mi":["\u0394","D"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}},{"mi":["\u0394","L"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}]},"mo":"\u2062","mi":"L"},"mo":"+","mi":"D"}}}}]}}}},"The last equation is based on the assumption that L\/\u0394L is much larger than one. To identify the most cost-effective incremental improvement due to the change of L, a derivative benefit is provided. The derivative benefit I is:",{"@attributes":{"id":"p-0164","num":"0186"},"maths":{"@attributes":{"id":"MATH-US-00005","num":"00005"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mi":"I","mo":"=","mrow":{"mo":"-","mfrac":{"mrow":[{"mi":["\u0394","D"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}},{"mi":["\u0394","L"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}]}}}}}},"A negative sign is used because D is expected to decrease when L increases.","Based on examples of the cost function, one-dimensional, two-dimensional, and three-dimensional nonblocking interconnect architectures can be compared, and preferred structures can be selected. An embodiment of the present invention provides, among other things, a hierarchical interconnection architecture in which bridges are provided between physically proximate nodes that may otherwise be distant via interconnect routing. The bridge is preferably placed between nodes on the same level. A method is provided to select an optimum level on which to provide a bridge. Making a bridge between nodes perturbs the tree structure, and an optimal solution is derived in terms of derivative benefit.",{"@attributes":{"id":"p-0167","num":"0189"},"figref":["FIGS. 22 and 23","FIG. 22","FIG. 22","FIG. 23","FIG. 22"],"b":["140","130","146","130","146","144","146"]},"Applying the above cost function to the architectures of , the results for L, D, and M are shown in , assuming that the distance between adjacent cells  is 1. Thus, using the cost function, the architecture of  is preferred for one-dimensional non-blocking architecture, because it has the minimum number of interconnects necessary to connect the two parts separated by the cutline, and because, for every pair of cells, the shortest signal route is provided.","Similarly, the cost function can be applied to two-dimensional architectures.  show a number of nonblocking interconnect architecture models including rectilinear interconnects (also referred to as \u201cManhattan interconnects\u201d) and\/or diagonal interconnects connecting a 2\u00d72 array of cells , and their associated switches . The models shown in  have a mesh structure, the models shown in  have a tree structure, and the model shown in  has a mixture of mesh and tree structures.  shows cost function values from each of the models shown in .","Though the model shown in  is a subset of the interconnect set of the architecture in ,  shows that the total pairwise distance D is the same. The set of interconnects of the model of  is a subset of that of the model of . However, the model of FIG. C has a total pairwise distance D longer than that of the model of . The quality of the two models is equal in terms of the cost function.","Models of  and  both adopt  interconnects. The model of  has less total pairwise distance D than that of the model of . However, the model of  requires a much longer length of interconnects. Thus, according to the cost function, the model of  is worse than that of .","The model of  uses an H-tree topology. Since the interconnects are forced to follow a Manhattan pattern, the quality of the model of  is worse than that of . Finally, the model of  has the minimum pairwise distance D, for it provides the shortest signal route for any pair of cells , but the model of  consumes the fewest overall interconnect resources, and is the preferred model of those shown in  according to the cost function.",{"@attributes":{"id":"p-0173","num":"0195"},"figref":["FIGS. 27A and 27B","FIG. 27A","FIG. 27B","FIG. 28"],"b":["104","104","104","160","104","108"]},"According to certain embodiments of the present method, the cost function described above can be applied to improve particular interconnection architectures. For example,  illustrate an H-tree  based on the H-architecture model shown in . As shown in , the cells  are connected by interconnects  and switches , and in addition, two interconnects of the same level are bundled together to form a new interconnect connection to the level above. Switch groups  are shown in  for four and two inputs, respectively. The interconnection width doubles for every expansion to a higher level. The expansion continues until the root of the tree is reached.  describes the hierarchy of the tree structure and the definition of levels  for the tree . To form a square array, the number denoting the tree's  top level, n, must be even. The number of cells  covered by the tree with  n levels is equal to P=2.","A principal shortcoming of this structure is the extra detouring problem. An extreme example of this is depicted in . Two cells  may be close in geometric distance, but their actual interconnection route can be much longer if their lowest common ancestor of a hierarchical tree structure is the root.","To reduce this shortcoming, and according to an embodiment of the present invention, interconnections referred to herein as bridges  are added to connect (bridge) nodes of the same level. As shown in , the terminals  of each of the cells  and the switches  at the interconnects are potential nodes for interconnection. The communication between the bridged nodes can thus bypass the detour of going toward upper levels by taking advantage of the bridge .  shows exemplary locations of bridges  between pairs of nodes.","A preferred method of choosing optimum locations of the bridges  is provided. Given an n-level tree structure, for each integer m (0\u2266m<n), the incremental improvement of level-m nodes is stated as follows.","(1) Two level-m nodes (the T joints of the H tree) are considered physically adjacent if the Euclidean distance between the pair is the closest among all level-m nodes.","(2) A pair of level-m nodes is connected if the nodes in the pair are physically adjacent and if their lowest common ancestor of the tree structure is the root. Level-m nodes are linked with 2buses.",{"@attributes":{"id":"p-0180","num":"0202"},"figref":["FIG. 33","FIG. 33","FIG. 29A"],"b":"140"},"A question is then presented as to the level for establishing the bridges  to obtain the largest benefit. To resolve this, a derivative benefit function is derived according to the derivative benefit defined above. Given a tree of level n, and the level investigated m:\n\n\u0394()=()*()\n","In this equation, A (n, m) represents the number of pairs of cells  that will benefit from the addition of the bridges , and B (n, m) represents the route length saved due to the bridges. Thus, if m is odd:",{"@attributes":{"id":"p-0183","num":"0205"},"maths":[{"@attributes":{"id":"MATH-US-00006","num":"00006"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"mi":"A","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","m"],"mo":","}}},"mo":"=","msup":{"mn":"2","mfrac":{"mrow":{"mi":"n","mo":["+","-"],"mrow":{"mn":"3","mo":"\u2062","mi":"m"},"mn":"1"},"mn":"2"}}}}},{"@attributes":{"id":"MATH-US-00006-2","num":"00006.2"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"B","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","m"],"mo":","}}},{"mo":"-","mrow":{"mo":["(",")"],"mrow":{"msup":[{"mn":"2","mfrac":{"mrow":{"mi":"n","mo":"+","mn":"2"},"mn":"2"}},{"mn":"2","mfrac":{"mrow":{"mi":"m","mo":"+","mn":"3"},"mn":"2"}}],"mo":"-"}}}],"mo":"="}}},{"@attributes":{"id":"MATH-US-00006-3","num":"00006.3"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"mi":"\u0394","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mi":"L","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","m"],"mo":","}}}},"mo":"=","msup":{"mn":"2","mfrac":{"mrow":{"mi":"n","mo":["+","-"],"mrow":{"mn":"2","mo":"\u2062","mi":"m"},"mn":"2"},"mn":"2"}}}}},{"@attributes":{"id":"MATH-US-00006-4","num":"00006.4"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"I","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","m"],"mo":","}}},{"msup":[{"mn":"2","mfrac":{"mrow":{"mi":["n","m"],"mo":["+","+"],"mn":"3"},"mn":"2"}},{"mn":"2","mrow":{"mi":"m","mo":"+","mn":"2"}}],"mo":"-"}],"mo":"="}}}]},"For example, in the architecture of , if m=n\u22121, I=0 because B (n, n\u22121)=0. If m is even:",{"@attributes":{"id":"p-0185","num":"0207"},"maths":[{"@attributes":{"id":"MATH-US-00007","num":"00007"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"mi":"A","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","m"],"mo":","}}},"mo":"=","msup":{"mn":"2","mfrac":{"mrow":{"mi":"n","mo":"+","mrow":{"mn":"3","mo":"\u2062","mi":"m"}},"mn":"2"}}}}},{"@attributes":{"id":"MATH-US-00007-2","num":"00007.2"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"B","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","m"],"mo":","}}},{"mo":"-","mrow":{"mo":["(",")"],"mrow":{"msup":{"mn":"2","mfrac":{"mrow":{"mi":"n","mo":"+","mn":"2"},"mn":"2"}},"mo":"-","mrow":{"mn":"3","mo":"*","msup":{"mn":"2","mfrac":{"mi":"m","mn":"2"}}}}}}],"mo":"="}}},{"@attributes":{"id":"MATH-US-00007-3","num":"00007.3"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"mi":"\u0394","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mi":"L","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","m"],"mo":","}}}},"mo":"=","msup":{"mn":"2","mfrac":{"mrow":{"mi":"n","mo":"+","mrow":{"mn":"2","mo":"\u2062","mi":"m"}},"mn":"2"}}}}},{"@attributes":{"id":"MATH-US-00007-4","num":"00007.4"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"I","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","m"],"mo":","}}},{"msup":{"mn":"2","mfrac":{"mrow":{"mi":["n","m"],"mo":["+","+"],"mn":"2"},"mn":"2"}},"mo":"-","mrow":{"mn":"3","mo":"*","msup":{"mn":"2","mi":"m"}}}],"mo":"="}}},{"@attributes":{"id":"MATH-US-00007-5","num":"00007.5"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mi":["For","any","even"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mtext":":"}],"mrow":{"mi":"m","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mn":"0","mo":["<","<"],"mi":["m","n"]}}}}}},{"@attributes":{"id":"MATH-US-00007-6","num":"00007.6"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mrow":[{"mi":"I","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","m"],"mo":","}}},{"mi":"I","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","m"],"mo":","}}}],"mo":"-"},{"mrow":[{"msup":[{"mn":"2","mfrac":{"mrow":{"mi":["n","m"],"mo":["+","+"],"mn":"2"},"mn":"2"}},{"mn":"2","mfrac":{"mrow":{"mi":["n","m"],"mo":["+","+"],"mn":"2"},"mn":"2"}},{"mn":"2","mrow":{"mi":"m","mo":"+","mn":"1"}}],"mo":["-","-","+"],"mrow":{"mn":"3","mo":"*","msup":{"mn":"2","mi":"m"}}},{"mrow":{"mo":"-","msup":{"mn":"2","mi":"m"}},"mo":"<","mn":"0"}],"mo":["\u2062","\u2062","="],"mstyle":[{"mtext":{}},{"mspace":{"@attributes":{"width":"10.em","height":"10.ex"}}}]}],"mo":"="}}}]},"From the above inequality, it can be shown that I (n, m)<I (n, m\u22121). Hence, in this example, only the odd levels are inspected for maximum derivative benefit. For a continuous variable function:",{"@attributes":{"id":"p-0187","num":"0209"},"maths":{"@attributes":{"id":"MATH-US-00008","num":"00008"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"mrow":[{"mi":"I","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","x"],"mo":"."}}},{"msup":{"mn":"2","mfrac":{"mrow":{"mi":["n","x"],"mo":["+","+"],"mn":"2"},"mn":"2"}},"mo":"-","mrow":{"mn":"3","mo":"*","msup":{"mn":"2","mi":"x"}}}],"mo":"="},"mo":","}}},"br":{},"sup":"n\u22121"},"Thus, for an H-tree architecture, level m=n\u2212 gives an optimal derivative benefit for bridges : I=2.  shows a number of optimally placed bridges , shown in dashed lines.  shows the derivative benefits for different levels (values of I (n, m)). As shown, the best solution is neither at the highest level nor at the lowest level.","In another example, the bridges  are added to the X-tree architecture model according to . The hierarchical extension is shown in . The bus width expands four times for every migration to a higher level. The dashed line  represent a connection to the similar arrays in the chip . For the case in which the tree's root lies at the n-th level, the number of processors is P=4.","The bridges  are added to the architecture of .  is a top portion of an 8\u00d78 cell array according to the architecture of , illustrating exemplary alternatives for bridges  at different levels. Again, the X-tree architecture of  has been removed from  for clarity. The additionally connected nodes  are preferably all symmetrical with respect to the large cross that divides the entire cell array into four parts.","Given an n-level X-tree structure, and using the method described above, incremental improvements are considered by using the bridges  to link nodes  at different levels. For each level m: 0\u2266m<n, pairs of level-m nodes  are connected if the pairs are physically adjacent and their lowest common ancestor in the X-tree is the root. Level-m nodes  are linked with 4interconnects . The derivative benefit is derived as follows:",{"@attributes":{"id":"p-0192","num":"0214"},"maths":[{"@attributes":{"id":"MATH-US-00009","num":"00009"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"A","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","m"],"mo":","}}},{"mrow":{"mn":"4","mo":["*","*","*"],"msup":[{"mn":"2","mrow":{"mi":["n","m"],"mo":["-","-"],"mn":"1"}},{"mn":"4","mi":"m"},{"mn":"4","mi":"m"}]},"mo":"=","msup":{"mn":"2","mrow":{"mi":"n","mo":["+","+"],"mrow":{"mn":"3","mo":"\u2062","mi":"m"},"mn":"1"}}}],"mo":"="}}},{"@attributes":{"id":"MATH-US-00009-2","num":"00009.2"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"B","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","m"],"mo":","}}},{"mo":"-","mrow":{"mo":["(",")"],"mrow":{"mrow":{"msqrt":{"mn":"2"},"mo":"*","mrow":{"munderover":{"mo":"\u2211","mrow":[{"mi":["i","m"],"mo":"="},{"mi":"n","mo":"-","mn":"1"}]},"mo":"\u2062","msup":{"mn":"2","mi":"i"}}},"mo":"-","msup":{"mn":"2","mi":"m"}}}}],"mo":"="}}},{"@attributes":{"id":"MATH-US-00009-3","num":"00009.3"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"\u0394","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mi":"L","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","m"],"mo":","}}}},{"mrow":{"mn":"4","mo":["*","*","*"],"msup":[{"mn":"2","mrow":{"mi":["n","m"],"mo":["-","-"],"mn":"1"}},{"mn":"2","mi":"m"},{"mn":"4","mi":"m"}]},"mo":"=","msup":{"mn":"2","mrow":{"mi":"n","mo":["+","+"],"mrow":{"mn":"2","mo":"\u2062","mi":"m"},"mn":"1"}}}],"mo":"="}}},{"@attributes":{"id":"MATH-US-00009-4","num":"00009.4"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"I","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","m"],"mo":","}}},{"mrow":[{"msqrt":{"mn":"2"},"mo":"*","msup":{"mn":"2","mrow":{"mi":["n","m"],"mo":"+"}}},{"msup":{"mn":"2","mrow":{"mn":"2","mo":"\u2062","mi":"m"}},"mo":"*","mrow":{"mo":["(",")"],"mrow":{"msqrt":{"mn":"2"},"mo":"+","mn":"1"}}}],"mo":"-"}],"mo":"="}}}]},"For the continuous variable function: I(n,x)=\u221a{square root over (2)}*2\u22122*(\u221a{square root over (2)}+1), there exists an x=1<n\u2212x<2, such that I (n, x) has a maximum value. Further calculation shows that I (n, n\u22122)>I (n, n\u22121). Therefore, it is preferred that, for an X-tree architecture, level m=n\u22122 gives the best derivative benefit for additional interconnects: 2[2\u2212(\u221a{square root over (2)}+1)].","Another example of providing the bridges  is given with respect to Y-architecture.  shows one type of Y-tree architecture. In the Y-tree architecture of , each of the Y-trees  is oriented in the same direction. As shown, there is a plurality of dead cells  (shaded in ), indicating that some cells are excluded from the wire interconnect covered by the Y-tree.",{"@attributes":{"id":"p-0195","num":"0217"},"figref":["FIGS. 39 and 40","FIG. 41","FIG. 39","FIG. 38"],"b":["0","3","4","5","108","120"],"sub":["no",{"sub2":"\u2014"},"empt ","with",{"sub2":"\u2014"},"empt "]},"However, the rotation of Y's  presents additional difficulty for adding bridges . The interconnection architecture that is shown in  indicates examples of bridges  on the Y-architecture of . Regardless of the level considered, the number of possible bridges  was the same, all equaling three. The possible bridges  connect adjacent nodes  that otherwise are connected only at the root.","The optimization method described above can be used to determine the derivative benefit for a Y-architecture with dead cells .",{"@attributes":{"id":"p-0198","num":"0220"},"maths":[{"@attributes":{"id":"MATH-US-00010","num":"00010"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"A","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","m"],"mo":","}}},{"mrow":{"msup":[{"mn":"3","mi":"m"},{"mn":"3","mi":"m"}],"mo":["*","*"],"mn":"3"},"mo":"=","msup":{"mn":"3","mrow":{"mrow":{"mn":"2","mo":"\u2062","mi":"m"},"mo":"+","mn":"1"}}}],"mo":"="}}},{"@attributes":{"id":"MATH-US-00010-2","num":"00010.2"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"B","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","m"],"mo":","}}},{"mo":"-","mrow":{"mo":["(",")"],"mrow":{"mrow":{"mfrac":{"mn":"2","msqrt":{"mn":"3"}},"mo":"*","mrow":{"munderover":{"mo":"\u2211","mrow":[{"mi":["i","m"],"mo":"="},{"mi":"n","mo":"-","mn":"1"}]},"mo":"\u2062","msup":{"mn":"2","mi":"i"}}},"mo":"-","msup":{"mn":"2","mi":"m"}}}}],"mo":"="}}},{"@attributes":{"id":"MATH-US-00010-3","num":"00010.3"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"\u0394","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mi":"L","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","m"],"mo":","}}}},{"msup":[{"mn":"3","mrow":{"mi":"m","mo":"+","mn":"1"}},{"mn":"2","mi":"m"}],"mo":"*"}],"mo":"="}}},{"@attributes":{"id":"MATH-US-00010-4","num":"00010.4"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"I","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","m"],"mo":","}}},{"mrow":{"msqrt":{"mn":"3"},"mo":["*","*"],"msup":{"mn":"3","mrow":{"mi":"m","mo":"-","mn":"1"}},"mrow":{"mo":["(",")"],"mrow":{"msup":{"mn":"2","mrow":{"mi":["n","m"],"mo":["-","-"],"mn":"1"}},"mo":"-","mn":"2"}}},"mo":"-","msup":{"mn":"3","mi":"m"}}],"mo":"="}}}]},"The optimal level on which to put the bridges  is level n\u22122, with the maximum incremental benefit: I(n,n\u22122)=(2\u221a{square root over (3)}\u22121)*3.","If, instead, the bridges  are placed on level n\u22121, the top level Y  can be removed, as shown in . Then, \u0394L becomes 3*2\u2212\u221a{square root over (3)}*6, resulting in the incremental benefit of \u00bd*3(\u221a{square root over (3)}\u22121). However, this is still less than 1 (n, n\u22122).",{"@attributes":{"id":"p-0201","num":"0223"},"figref":"FIGS. 43A-43C","b":["170","2","1","0"]},{"@attributes":{"id":"p-0202","num":"0224"},"maths":[{"@attributes":{"id":"MATH-US-00011","num":"00011"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"A","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","m"],"mo":","}}},{"mrow":{"msup":[{"mn":"3","mi":"m"},{"mn":"3","mi":"m"}],"mo":["*","*"],"mn":"3"},"mo":"=","msup":{"mn":"3","mrow":{"mrow":{"mn":"2","mo":"\u2062","mi":"m"},"mo":"+","mn":"1"}}}],"mo":"="}}},{"@attributes":{"id":"MATH-US-00011-2","num":"00011.2"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"B","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","m"],"mo":","}}},{"mo":"-","mrow":{"mo":["(",")"],"mrow":{"mrow":{"mfrac":{"mn":"2","msqrt":{"mn":"3"}},"mo":"*","mrow":{"munderover":{"mo":"\u2211","mrow":[{"mi":["i","m"],"mo":"="},{"mi":"n","mo":"-","mn":"1"}]},"mo":"\u2062","msqrt":{"msup":{"mn":"3","mi":"i"}}}},"mo":"-","msqrt":{"msup":{"mn":"3","mi":"m"}}}}}],"mo":"="}}},{"@attributes":{"id":"MATH-US-00011-3","num":"00011.3"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mi":"\u0394","mo":["\u2062","\u2062","\u2062","*"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mi":"L","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","m"],"mo":","}}},"msup":{"mn":"3","mrow":{"mi":"m","mo":"+","mn":"1"}},"msqrt":{"msup":{"mn":"3","mi":"m"}}}}},{"@attributes":{"id":"MATH-US-00011-4","num":"00011.4"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"I","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","m"],"mo":","}}},{"msup":{"mn":"3","mi":"m"},"mo":"\u2062","mrow":{"mo":["(",")"],"mrow":{"mrow":{"mfrac":{"mn":"2","mrow":{"mn":"3","mo":"-","msqrt":{"mn":"3"}}},"mo":"\u2062","mrow":{"mo":["(",")"],"mrow":{"msqrt":{"msup":{"mn":"3","mrow":{"mi":["n","m"],"mo":"-"}}},"mo":"-","mn":"1"}}},"mo":"-","mn":"1"}}}],"mo":"="}}}]},"Again, the maximum incremental benefit is provided at level n\u22122. Accordingly, for Y-tree architecture with or without the dead cells , it is preferred that level m=n\u22122 is used for a location of the bridges to provide the best derivative benefit for the bridges. I=3(2\u221a{square root over (3)}\u22121) for the architecture with dead cells , and I=3(2\u221a{square root over (3)}+3) for the architecture without dead cells.","Thus, in an exemplary implementation of the cost function and derivative benefit, it can be determined that, when adding the bridges  to X, H, and Y tree structures, the incremental improvement connecting nodes at 2, 3, and 2 levels, respectively, below the root are optimal.","It is advantageous for chip design optimization to focus on the interconnect resources. In the future, significantly greater numbers of routing layers (for example, twelve or more) will be available in high performance circuit designs. Thus, it is desirable to consider various ways to organize on-chip routing resources. However, the prohibitive cost of actually designing and manufacturing a chip with new interconnect architectures makes it difficult to implement and test new interconnect architectures individually. Thus, it is highly desirable to develop a quantitative framework to evaluate the efficiency of different interconnect architectures.","In prior methods of evaluating efficiency, the interconnect length reduction was studied by allowing more routing directions, but all of these methods concentrated on the Steiner cost of a single signal net. Competition over routing resources between different nets is typically ignored using these methods.","According to another aspect of the present invention, an assessment method for determining a benefit of a particular structure is provided. This method adopts a multi-commodity flow (MCF) approach to model the on-chip communication traffic. MCF is a natural way to model communication network traffic. For example, MCF has been used to study wide area communication network traffic. However, due to the high computing complexity of MCF, most uses of this approach adopt heuristic methods to approximate an MCF solution.","A preferred embodiment of the present assessment method extends the MCF algorithm to solve various MCF problems and provides improved chip routing design methods. Solution of MCF finds the optimal throughput for a given routing architecture.","According to a preferred method of the present invention, stated generally, a mesh structure is assumed having uniform communication demand; that is, the routing demand is equal for every pair of nodes. The MCF throughput of the mesh structure is used to measure communication capability of different interconnect architectures. This method is independent of particular test cases, and is independent of placement and routing. The extended MCF according to a preferred assessing method can reflect the exact communication bottlenecks on the chip or network, and it can provide a feasible upper bound of communication.","Algorithms involving this type of MCF can be solved fairly efficiently using, for example, the methods described in N. Garg and J. Koneman, \u201cFaster and Simpler Algorithms for Multicommodity Flow and other Fractional Packing Problems,\u201d In Proc. Of the 39Annual Symposium on Foundations of Computer Science, pp. 300-309, 1998.","Turning now to an exemplary assessment method,  shows a five-by-five communication mesh  connected using Manhattan architecture. For Manhattan architecture, communication resources for a group of cells are decomposed into an array of n\u00d7n slots . Each slot  contains a communication terminal, for example, a processor. The mesh  of  is an example of a 90-degree mesh structure with twenty-five slots . The slots  are aligned in rows and columns. Each square tile represents a slot. The mesh structure  can be mapped to a graph G={V, E}, as shown in , according to the following rules:","(1) Each slot  i corresponds to the node  i in the graph.","(2) The adjacency between two slots  (i, j) is represented by an edge  e=(i, j) in the graph.","(3) The edge capacity c (e) is proportional to the length of the line segment separating the adjacent slots , and the number of routing layers.","A uniform communication requirement is assumed; that is, every pair of nodes  communicates with an equal demand. All communications are assumed to happen at the same time. The model can be extended to various other communication demands as well such as, but not limited to, Poisson distribution, Rents rule, etc., depending on specific applications. For simplicity and for generalness, the example of uniform pairwise communication is adopted for the description herein. Uniform pairwise communication demand also provides an unbiased symmetry, which makes the solution independent of the test cases, placement, and routing.","Throughput, z, is defined to be maximum amount of communication flow between every pair of nodes . The throughput is determined using a MCF model. The flow that starts from node i is defined as \u201ccommodity\u201d i. Commodity i starts from node  i with the amount of z (N\u22121), where N=nis the number of nodes in the graph, to each of the rest of the nodes with the amount of z. The MCF problem is solved to find the maximum throughput z.","The above MCF problem can be formulated as a linear program in either the node-arc form (LP), or the edge-path form (LP). The node-arc form (LP) of MCF is:",{"@attributes":{"id":"p-0218","num":"0240"},"maths":[{"@attributes":{"id":"MATH-US-00012","num":"00012"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mi":["Maximize","z"],"mo":["\u2062","\u2062","\u2062"],"mstyle":[{"mtext":":"},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]}}},{"@attributes":{"id":"MATH-US-00012-2","num":"00012.2"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":["S","t"],"mo":[".","."],"mrow":{"munder":{"mo":"\u2211","mrow":{"mi":"j","mo":"\u2208","mrow":{"mi":["neighbor","of","i"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]}}},"mo":"\u2062","mrow":{"mo":["(",")"],"mrow":{"msubsup":[{"mi":["f","ij","v"]},{"mi":["f","ij","v"]}],"mo":"-"}}}},{"mo":"[","mrow":{"mrow":[{"mtable":{"mtr":[{"mtd":[{"mrow":{"mrow":[{"mo":"-","mi":"z"},{"mo":["(",")"],"mrow":{"msup":{"mi":"n","mn":"2"},"mo":"-","mn":"1"}}],"mo":"\u00b7"}},{"mrow":{"mrow":{"mi":["if","i"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}},"mo":"=","mi":"v"}}]},{"mtd":[{"mi":"z"},{"mi":"otherwise"}]}]},"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mi":["for","all","nodes","v"]},{"mi":"i","mo":"\u2208","mrow":{"mi":"V","mo":["\u2062","\u2062"],"mstyle":{"mtext":{}},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":{"munder":{"mo":"\u2211","mrow":{"mi":["v","V"],"mo":"\u2208"}},"mo":"\u2062","mrow":{"mo":["(",")"],"mrow":{"msubsup":[{"mi":["f","ij","v"]},{"mi":["f","ji","v"]}],"mo":"+"}}},"mo":"\u2264","msub":{"mi":["c","ij"]}}},{"mrow":{"mrow":{"mi":["for","all","edges"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mrow":{"mo":["(",")"],"mrow":{"mi":["i","j"],"mo":","}}},"mo":"\u2208","mi":"E"}}]}}}}],"mo":","}}],"mo":"="}}}]},"In this linear program flow variable frepresents the flow amount of commodity v on edge  (i, j). The edge capacity crepresents the flow capacity of edge  (i, j), in a uniform mesh using X-architecture, and cis set to be unitary for all (i, j). The flow injecting to a node  is set to be positive and the flow ejecting from a node is set to be negative.","This linear program includes two sets of constraints. The first constraint describes the flow conservation of each commodity v at each node  i. The second constraint denotes that the total amount of flow on each edge  is no more than the capacity of that edge.","The edge-path form of MCF (LP) is as follows:",{"@attributes":{"id":"p-0222","num":"0244"},"maths":[{"@attributes":{"id":"MATH-US-00013","num":"00013"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mi":["Maximize","z"],"mo":["\u2062","\u2062","\u2062"],"mstyle":[{"mtext":":"},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]}}},{"@attributes":{"id":"MATH-US-00013-2","num":"00013.2"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":[{"mrow":{"mrow":{"mrow":{"mrow":[{"mi":["S","t"],"mo":[".","."],"mstyle":{"mtext":":"}},{"munder":{"mo":"\u2211","mrow":{"mi":"p","mo":"\u2208","msub":{"mi":["P","ij"]}}},"mo":"\u2062","mrow":{"mi":"f","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"p"}}}],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}},"mo":"-","mi":"z"},"mo":"\u2265","mn":"0"}},{"mrow":{"mrow":[{"mi":["for","nodes","i"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]},{"mi":["j","V"],"mo":"\u2208"},{"mi":["i","j"],"mo":"\u2260"}],"mo":[",",","]}}]},{"mtd":[{"mrow":{"mrow":[{"munder":{"mo":"\u2211","mrow":{"mi":["p","Pe"],"mo":"\u2208"}},"mo":"\u2062","mrow":{"mi":"f","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"p"}}},{"mi":"c","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"e"}}],"mo":"\u2264"}},{"mrow":{"mrow":{"mi":["for","all","edges","e"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]},"mo":"\u2208","mi":"E"}}]}]}}}]},"In linear program LP, Pdenotes the set of all paths p containing the edge  e, and Pdenotes the set of all paths between nodes  i, j. The flow variable f(p) represents the flow amount of path p.","The number of linear constraints in linear program LP is |V|+|E|. Thus, the linear program LP can be solved in polynomial time using any polynomial time linear program solver, such as that disclosed in N. Karmarkar, \u201cA new polynomial-time algorithm for linear programming,\u201d Combinatorica, 4(4):373-395, 1984. However, when n increases, the number of linear constraints significantly increases (at the rate of nfor an n\u00d7n mesh). Thus, for large cases, it may be impractical to solve the MCF using linear programming.","A combinatorial (1+\u03b5)-approximation approach has been proposed to solve the MCF problem. An example of this combinatorial approach is disclosed in N. Garg and J. Konemann, \u201cFaster and Simpler Algorithms for Multicommodity Flow and other Fractional Packing Problems,\u201d In Proc. of the 39Annual Symposium on Foundations of Computer Science, pp, 300-309, 1998.","In an embodiment of the present invention, the approach of this approximation algorithm is extended to incorporate edge capacities as variables. This approach adopts the primal-dual structure of the linear program LP.","Generally stated, a preferred algorithm according to the present invention assigns a nonnegative shadow cost to each edge , according to the congestion level at that edge. Initially, all of the shadow costs are set to be equal. Then, the algorithm proceeds in iterations. In each iteration, a fixed amount of flow is rerouted along the shortest path for every commodity. At the end of each iteration, the capacity of every edge , and its shadow cost, is adjusted according to the dual linear program.","For every given error tolerance \u03b5, a preferred embodiment of this MCF algorithm can find a (1+\u03b5) approximation of the throughput in",{"@attributes":{"id":"p-0229","num":"0251"},"maths":{"@attributes":{"id":"MATH-US-00014","num":"00014"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mrow":{"mi":"O","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mfrac":[{"mn":"1","msup":{"mi":["\u025b","\u2032"]}},{"mi":"n","mrow":{"mn":"1","mo":"-","msup":{"mi":["\u025b","\u2032"]}}}],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"msub":{"mi":"log","mrow":{"mn":"1","mo":"+","msup":{"mi":["\u025b","\u2032"]}}},"msup":{"mi":"n","mn":"4"},"mi":["log","n"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}}},"mo":"\u2062","mi":"time"},{"mrow":[{"mi":["where","\u025b"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}},{"mn":"1","mo":"-","mrow":{"msup":{"mrow":{"mo":["(",")"],"mrow":{"mn":"1","mo":"+","mi":"\u025b"}},"mfrac":{"mn":["1","3"]}},"mo":"."}}],"mo":"="}],"mo":","}}}},"In a preferred embodiment of the approximation method, all fractional flows are used. The throughput, {circumflex over (z)}, of the fractional flow model, is an upper bound of the throughput, {tilde over (z)} of the integer flow model. However, networks such as a packet switching network in RAW and Smart Memories, do not require that the flow be an integer. For wire switching networks in FPGA's, the flow amounts can be interpreted as the number of wires, which need to be integers.","In R. Motwani and P. Raghavan, Randomized Algorithms, Cambridge University Press, 1995, pp. 79-83, it was shown that by randomized rounding, with the probability of 1\u2212\u03b5, one can find {circumflex over (z)} approaches {tilde over (z)} with inequality {circumflex over (z)}\u2267{tilde over (z)}\/(1+\u0394(1\/{circumflex over (z)}, \u03b5\/2N)), where N is the number of nodes in the mesh, \u03b5 is any real number between 0 and 1, and \u0394+(1\/{circumflex over (z)}, \u03b5\/2N) is the value of \u03b4 such that\n\n[\/(1+\u03b4)]=\u03b5\/2N.\n","The MCF algorithm described above will now be used by example to compare throughput of a number of different mesh structures: the 90\u00b0 mesh , a 45\u00b0 mesh , and the 90\u00b0 and 45\u00b0 mixed mesh . Results show that the 45\u00b0 mesh  can achieve better throughput than the 90\u00b0 mesh . Moreover, 90\u00b0 and 45\u00b0 mixed mesh  can further improve throughput.","In a first set of examples of a preferred assessment method, a number of routing algorithms are constructed having different capacities and routing orientations. The first three structures are 90\u00b0 meshes  with different edge capacities. In the first architecture, every edge  has a unitary capacity. In the second architecture, edges  on the same row or column have equal capacity. In the third architecture, edge capacities are flexible, but the sum of the capacities of all of the edges  is fixed. The fourth architecture is a 45\u00b0 mesh  where interconnections are routed at 45\u00b0 angles. The fifth architecture is a mixture of 90\u00b0 and 45\u00b0 mesh . The sixth architecture is a mixed 90\u00b0 and 45\u00b0 mesh  with different routing direction assignments.","For the model of uniform edge capacity, all the edge capacity is set to a unit, that is, c=1 for all edges  (i,j) in the graph. This case is used as a basis. It is assumed that the n\u00d7n array of slots  is evenly distributed in a square area.","In the second interconnection structure, edge capacities care set as variables. However, the capacities of edges  in the same row are set to be equal. Likewise, the vertical capacities of edges  in the same column are set to be equal. The sum of the vertical edge capacities in a row is set to be n, and the sum of the horizontal edge capacities in a column is set to be n. In other words, the height and width of the array remain n.","Let cbe the capacity of horizontal edges  in the i-th row, and cbe the capacity of vertical edges in the i-th column. We add the 2n variables, c, c, . . . , c, c, c, c, to the linear program. The height and width constraints of the array can be expressed as:",{"@attributes":{"id":"p-0237","num":"0259"},"maths":{"@attributes":{"id":"MATH-US-00015","num":"00015"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"mi":"n"},"mo":"\u2062","msub":{"mi":["c","Hi"]}},{"mrow":{"mi":["n","and"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"k","mo":"=","mn":"1"},"mi":"n"},"mo":"\u2062","msub":{"mi":["c","vk"]}}},"mo":"=","mi":"n"}],"mo":"="}}}},"For this structure, it is assumed that one can adjust the row height and the column width of the array of processors.","For the third structure we give the program more freedom to choose the best edge capacities. We require only that the total capacity of all edges be a constant. This structure represents the best edge capacity we can allocate for a 90\u00b0 mesh. The resultant throughput is an upper bound of a 90\u00b0 mesh architecture.","We set the edge capacities, c, as variables. The total capacity constraint is expressed as:",{"@attributes":{"id":"p-0241","num":"0263"},"maths":{"@attributes":{"id":"MATH-US-00016","num":"00016"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"munder":{"mo":"\u2211","mrow":{"mi":["foralledgesi","j"],"mo":","}},"mo":"\u2062","msub":{"mi":"c","mrow":{"mi":["i","j"],"mo":","}}},{"mn":"2","mo":"\u00b7","mrow":{"mo":["(",")"],"mrow":{"msup":{"mi":"n","mn":"2"},"mo":"-","mi":"n"}}}],"mo":"="}}}},"Note that 2\u00b7(n\u2212n) is the number of edges  in an n\u00d7n mesh. For this structure, we assume that the area of each slot  is flexible. We adjust the height and width of each individual slot so that the total area remains the same.","The fourth structure adopts the 45\u00b0 mesh . All interconnects are oriented in 45\u00b0 or 135\u00b0 directions. The size of the mesh  increases with n. For a 45\u00b0 mesh  of n, the number of nodes  is n+(n\u22121), and the number of edges  is 4 (n\u22121).  shows an example of 45\u00b0 mesh  of n=5.  illustrates the graph corresponding to the mesh . In this structure, we assume that the slots  are shaped in diamonds (a square rotated by 45\u00b0) and are aligned in 45\u00b0 and 135\u00b0 directions. Thus the edge capacity remains a unit; that is, e=1.","In the fifth structure, we add diagonal edges; that is, 45\u00b0 edges and 135\u00b0 edges, to the 90\u00b0 mesh  of Manhattan architecture to form the structure represented by the communication graph shown in .  illustrates an example of the mixed mesh  for n=5.  shows the slot arrangement. Mixed 90\u00b0 and 45\u00b0 meshes  allow more freedom on routing directions. For an n\u00d7n mixed mesh, the number of nodes  is nand the number of edges  is 2(n\u22121)+2(n\u2212n).","As shown in , the edges  are oriented in 0\u00b0, 90\u00b0, 45\u00b0, or 135\u00b0 angles. All nodes  are aligned in rows and columns. Thus, all rectilinear edges  in the 45\u00b0 and 135\u00b0 directions have the same capacity, and all of the diagonal edges in the 0\u00b0 and 90\u00b0 directions have the same edge capacity. The length of the diagonal edge  in the 45\u00b0 direction or 135\u00b0 direction is \u221a{square root over (2)} times that of the rectilinear edge in the 0\u00b0 or 90\u00b0 directions. Thus, if routing a number of interconnects on one of the rectilinear edges  consumes one unit of routing area, then routing the same number of interconnects on the diagonal edges would consume \u221a{square root over (2)} units of routing area.","In other words, for a pair of routing layers, if a capacity of x can be allocated to the rectilinear edges , only a capacity of x\/\u221a{square root over (2)} can be allocated to the diagonal edges. If we let cbe the capacity of the rectilinear edges  and cbe the capacity of the diagonal edges, the area constraints can be expressed as c+\u221a{square root over (2)}c=1. In this way, the total area is equal to the constant area of uniform structure.",{"@attributes":{"id":"p-0247","num":"0269"},"figref":["FIG. 49","FIG. 50","FIG. 50"],"b":["200","104","184","184"],"sub":["1","2","3","1","2","3 "]},"The above routing area constraint can be added into the linear programs LP or LP, treating the edge capacities as variables. The optimal solution of the linear program produces an optimal routing resource allocation for different routing directions. The routing resource allocation problem can be formally formulated in the following way:","Input: communication graph G=(V, E), k different routing channels {R, . . . , R}, where",{"@attributes":{"id":"p-0250","num":"0272"},"maths":{"@attributes":{"id":"MATH-US-00017","num":"00017"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"munder":{"mo":"\u22c3","mi":"i"},"mo":"\u2062","msub":{"mi":["R","i"]}},{"mrow":[{"mrow":{"mi":["E","and"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}},"mo":["\u2062","\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"munder":{"mo":"\u22c2","mi":"i"},"msub":{"mi":["R","i"]}},{"mi":"\u03a6","mo":"\u2062","mstyle":{"mtext":":"}}],"mo":"="}],"mo":"="}}},"br":{},"sub":["1 ","i "]},{"@attributes":{"id":"p-0251","num":"0273"},"maths":{"@attributes":{"id":"MATH-US-00018","num":"00018"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"munder":{"mo":"\u2211","mi":"i"},"mo":"\u2062","mrow":{"msub":[{"mi":["\u03b1","i"]},{"mi":["C","i"]}],"mo":"\u2062"}},"mo":"=","mn":"1"}}}},"Output: a routing resource allocation {c}, such that the communication graph G={V, E} has maximum throughput.","The routing resource allocation problem can be written as the following linear program:",{"@attributes":{"id":"p-0254","num":"0276"},"maths":[{"@attributes":{"id":"MATH-US-00019","num":"00019"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mi":"Min","mo":["\u2062","\u2062","\u2062"],"mstyle":[{"mtext":":"},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mrow":{"munder":{"mo":"\u2211","mi":"i"},"mo":"\u2062","mrow":{"msub":[{"mi":["\u03b1","i"]},{"mi":["C","i"]}],"mo":"\u2062"}}}}},{"@attributes":{"id":"MATH-US-00019-2","num":"00019.2"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":[{"mrow":{"mrow":{"mi":["S","t"],"mo":[".","."],"mrow":{"munder":{"mo":"\u2211","mrow":{"mi":"p","mo":"\u2208","msub":{"mi":"P","mrow":{"mi":["i","j"],"mo":","}}}},"mo":"\u2062","mrow":{"mi":"f","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"p"}}}},"mo":"\u2265","mn":"1"}},{"mrow":{"mrow":[{"mi":["for","all","distinct","vertices","pair","i"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]},{"mi":["j","V"],"mo":"\u2208"}],"mo":","}}]},{"mtd":[{"mrow":{"mrow":{"munder":{"mo":"\u2211","mrow":{"mi":"p","mo":"\u2208","msub":{"mi":["P","e"]}}},"mo":"\u2062","mrow":{"mi":"f","mo":"\u2062","mrow":{"mo":["(",")"],"mi":"p"}}},"mo":"\u2264","msub":{"mi":["C","i"]}}},{"mrow":{"mrow":{"mi":["for","all","edges","e"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]},"mo":"\u2208","msub":{"mi":["R","i"]}}}]}]}}}]},"This linear program finds the minimum routing area that can satisfy the unit pairwise communication demand. The dual program of this linear program is:",{"@attributes":{"id":"p-0256","num":"0278"},"maths":[{"@attributes":{"id":"MATH-US-00020","num":"00020"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mi":"Max","mo":["\u2062","\u2062","\u2062"],"mstyle":[{"mtext":":"},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mrow":{"munder":{"mo":"\u2211","mi":"ij"},"mo":"\u2062","msub":{"mi":"\u03bb","mrow":{"mi":["i","j"],"mo":","}}}}}},{"@attributes":{"id":"MATH-US-00020-2","num":"00020.2"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":[{"mrow":{"mrow":[{"mi":["S","t"],"mo":[".",".","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"msub":{"mi":"\u03bb","mrow":{"mi":["i","j"],"mo":","}}},{"munder":{"mo":"\u2211","mrow":{"mi":"e","mo":"\u2208","msub":{"mi":"P","mrow":{"mi":["i","j"],"mo":","}}}},"mo":"\u2062","msub":{"mi":["d","e"]}}],"mo":"\u2264"}},{"mrow":{"mrow":[{"mi":["for","all","distinct","vertices","pair","i"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]},{"mi":["j","V"],"mo":"\u2208"}],"mo":","}}]},{"mtd":[{"mrow":{"mrow":{"munder":{"mo":"\u2211","mrow":{"mi":"e","mo":"\u2208","msub":{"mi":["R","i"]}}},"mo":"\u2062","msub":{"mi":["d","e"]}},"mo":"\u2264","msub":{"mi":["\u03b1","i"]}}},{"mrow":{"mi":["for","all","routing","channel"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"msub":{"mi":["R","i"]}}}]}]}}}]},"The dual program assigns a nonnegative shadow cost de to each edge  e, such that the sum of the shortest distances between every distinct pair of nodes  is maximized. The constraints in the above equations denote that the total shadow costs of all edges  in a routing channel are smaller than or equal to the area coefficient of that routing channel.","By extending the combinatorial (1+\u03b5)-approximation scheme as described above, the routing resource allocation problem can be solved. In a preffered method, a shadow cost is determined by the flow congestion level on each edge . Let g(e)=(f(e))\/(c) be the congestion level of edge  e, where f(e) is the total flow amount going through edge e, and cis the capacity of e. The shadow cost d(e) is computed using:",{"@attributes":{"id":"p-0259","num":"0281"},"maths":[{"@attributes":{"id":"MATH-US-00021","num":"00021"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"mrow":{"mrow":{"mi":"d","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"e"}},"mo":"=","mfrac":{"mrow":[{"mi":"exp","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":"\u03b2","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":{"mi":"g","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"e"}},"mo":"-","mi":"g"}}}}},{"munder":{"mo":"\u2211","mrow":{"msup":{"mi":["e","\u2032"]},"mo":"\u2208","mi":"E"}},"mo":"\u2062","mrow":{"mi":"exp","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":"\u03b2","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":{"mi":"g","mo":"\u2061","mrow":{"mo":["(",")"],"msup":{"mi":["e","\u2032"]}}},"mo":"-","msup":{"mi":"g","mo":"*"}}}}}}}]}},"mo":",","mi":"where"},"mo":"\u2062","mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}}}},{"@attributes":{"id":"MATH-US-00021-2","num":"00021.2"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"msup":{"mi":"g","mo":"*"},"mo":"=","mrow":{"mi":"max","mo":"\u2062","mrow":{"mo":["{","}"],"mrow":{"mrow":[{"mi":"g","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"e"}},{"mi":["e","E"],"mo":"\u2208"}],"mo":"\u2758"}}}},{"mi":["and","B","is","a"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]}],"mo":","}}}],"br":{}},"Initially, all of the shadow costs are set to be equal. Then, the algorithm proceeds in iterations. In each iteration, a fixed amount of flow is rerouted along the shortest path for every commodity. At the end of each iteration, the capacity of every edge  and its shadow cost is adjusted according to the dual linear program.  shows exemplary pseudo-code of the routing resource allocation algorithm.","The assessment algorithm will now be used to compare the Manhattan architecture, the Y-architecture, and the X-architecture for both rectangular and symmetrical chip designs. Vias  become an important concern when the number of routing layers increases. An embodiment of the present invention provides a network flow model that considers the vias . The basic assumption made is that each via  will block one routing track. For each slot , we set an upper bound on the total number of vias  and interconnects across the node .","For example, suppose there are k routing layers. Each slot  is now represented by k routing cells as shown in . Each routing cell includes two nodes : nand n. Node na takes all of the incoming edges from the neighboring routing cells, and node nejects edges to neighboring routing cells. An edge  with capacity c directs from node nto node n. This edge  is used to restrict the total number of vias  and interconnects crossing the routing cell. Using this flow model, we compare the communication throughputs with different routing layer assignments using the MCF model.","To assess performance of the above-described MCF method, we used Matlab's linear program package on a Sun Ultra10 workstation to compute MCF solutions. For a case with 100 nodes, the run time exceeds 24 hours. We then implemented the MCF algorithm and the above-described routing resource allocation algorithm using C programming language. The implementation derived the MCF solutions for cases with up to 289 nodes within 12 hours.","Using the present routing resource algorithm, we compared the throughput of n\u00d7n meshes  using Manhattan architecture, Y-architecture, and X-architecture.  shows a seven-by-seven mesh using hexagonal cells , and  shows an interconnection graph of the mesh of  using Y-architecture.  show a seven-by-seven mesh  and interconnection using a rectilinear mesh and Manhattan architecture, and  show a seven-by-seven mesh and interconnection using a rectilinear mesh and X-architecture. For an n\u00d7n mesh, the enclosing box of the slots  is close to a rectangle. The throughput of an n\u00d7n mesh using a particular interconnect architecture demonstrates the communication ability of that interconnect architecture on a rectangular chip.","For an n\u00d7n mesh with Y-architecture, there are 3n\u22124n+1 edges; for an n\u00d7n mesh  with Manhattan architecture, there are 2n\u22122n 0\u00b0 and 90\u00b0 edges; and for an n\u00d7n mesh with X-architecture, there are 2n\u22122n edges on 0\u00b0 or 90\u00b0 edges and 2(n\u22121)edges in the 45\u00b0 or 135\u00b0 direction. To fairly compare the throughput of meshes with different interconnect architectures, the same amount of routing resources should be allocated to meshes having the same size.",{"@attributes":{"id":"p-0266","num":"0288"},"figref":"FIG. 57","b":"186"},"The throughput is 1\/n when n is odd and (n\u22121)\/nwhen n is even.","The throughput is limited by edges  on the middle column and row. When n is an even number, edges in the central row and column form the bottleneck of the flow. When n is an odd number, the two columns and two rows form the bottleneck.  show the bottleneck of communication flow for n=4 and 5, respectively. The congested edges  are marked with bold lines. Note that the bottlenecks form the horizontal and vertical cut sets. The cut lines  are shown in  as dashed lines.","For example, for equal n, the throughput of a 90\u00b0 mesh with uniform row and column capacities is exactly the same as that of the 90\u00b0 mesh with fixed edge capacities. No throughput improvement is obtained because the total capacity of the edges in each column and row is fixed.","For n=2 to 10,  shows the results of 90\u00b0 mesh with fixed total edge capacities. The fourth column provides the throughput improvement compared to that of 90\u00b0 mesh with uniform edge capacity. As the total capacity of each row or column is no longer limited, the average throughput improves 29.7% from n=4 to 10.","The results also show that all edges  are congested. The optimal edge capacity is no longer uniform. The capacity is larger for the edges in the middle row and middle column.  shows the optimal edge capacities for all the vertical edges in a 6\u00d76 mesh. The sum of all the capacities in each row is listed.  illustrates the optimal sums of the rows in a 9\u00d79 mesh. Note that there are eight rows of vertical edges in a 9\u00d79 mesh. Thus, the chip area is no longer a square, but a convex area.",{"@attributes":{"id":"p-0272","num":"0294"},"figref":["FIG. 62","FIG. 62","FIG. 57","FIG. 62","FIG. 57","FIG. 62","FIG. 57","FIG. 62","FIG. 57"],"b":"186"},"As shown in , the congested edges  also present a different pattern, in that they form four cut sets at four corners.  show the flow congestion in 45\u00b0 mesh for n=5 and n=6, respectively. The congested edges  are in bold lines, and the cut lines  are in dashed lines.",{"@attributes":{"id":"p-0274","num":"0296"},"figref":["FIGS. 64A-64B","FIGS. 65A-65B","FIGS. 64A-64B","FIGS. 65A-65B","FIGS. 64A-64B","FIGS. 65A-65B","FIGS. 65A-65B"],"b":["220","214","220","214","184"]},{"@attributes":{"id":"p-0275","num":"0297"},"figref":"FIG. 66","b":["2","3","5","6","7"],"sub":["1","2"]},"At least the following observations can be made with regard to :","The throughput of the mixed mesh  is better than the 90\u00b0 mesh , given the equal communication resource. The improvement in the throughput is up to 20.04% for a large number of nodes. The improvement is also better than 45\u00b0 mesh  in terms of throughput.","With n increasing, the optimal ratio for the capacity of the 45\u00b0 edge to the 90\u00b0 edge approaches 5.6.","Using the MCF model in , one can compute the optimal routing direction assignment for mixed 45\u00b0 and 90\u00b0 routing. Assume that there are four routing layers, and each of them is assigned to a different routing direction.  shows four different routing layer assignments. The throughputs under four different assignments are listed in . As shown, the throughputs with assignments IV and I are about 16% larger than the throughputs with assignments II and III.",{"@attributes":{"id":"p-0280","num":"0302"},"figref":["FIG. 69","FIG. 69"],"b":"186"},"In an exemplary comparison, the sum of all edge capacities is set to be equal to 2n\u22122n for all n\u00d7n meshes, and the routing resource algorithm is used to find the optimal allocation of edge capacities.  shows throughputs of n\u00d7n meshes for Manhattan architecture, Y-architecture, and X-architecture, respectively, for n from 2 to 17. The throughput was normalized using a factor m(m), where m is the number of nodes in the mesh. By doing so, the total amount of communication demand and total edge capacities are kept independent of the dimensions of the mesh. The third and fourth columns of  show throughput and normalized throughput of meshes using Manhattan architecture. The fifth and seventh columns depict the normalized throughput of meshes using Y-architecture and X-architecture, respectively. The sixth and the eighth columns list the determined throughput improvement achieved by Y-architecture and X-architecture, respectively, over the Manhattan architecture.","As shown in , for n from 10 to 17, Y-architecture provides an average improvement of 30.7% for an n\u00d7n mesh, and X-architecture achieves a 34.5% improvement For a 17\u00d717 mesh, Y-architecture provides a throughput improvement of 31.1% and X-architecture achieves an improvement of 34.6%. Additionally, for Y-architecture and Manhattan architecture, equally distributed edge capacities produce maximum throughput on n\u00d7n meshes. For X-architecture, the optimum ratio of the area of diagonal routing edges to that of Manhattan edges  is shown in the far right column of . This ratio approaches 5.65 when n increases.",{"@attributes":{"id":"p-0283","num":"0305"},"figref":"FIGS. 71 and 72","b":["282","214","214"]},"For example, for Manhattan architecture, there are n edges  crossing each cut line. The total edge capacity is n. For Y-architecture, there are 2n\u22121 edges  passing across each cut line , and each edge has capacity \u2154, so that the total edge capacity crossing the cut line is (4n\u22122)\/3. When n approaches infinity, an n\u00d7n mesh using Y-architecture can have (4\/3\u22121)\u221233.3% more flow crossing the cut line . Thus, Y-architecture can achieve up to 33.3% throughput improvement over Manhattan architecture on a squared mesh.","For X-architecture, there are 2(n\u22121) diagonal edges and n Manhattan edges crossing each of the two cut lines . To achieve maximum throughput, the ratio of the capacity for diagonal edges and the capacity for Manhattan edges is 5.6. Under this ratio, the edge capacities are 0.1515 and 0.6 for the Manhattan edges and diagonal edges respectively. The total flow amount that can go across the cut line is 1.3535n\u22121. When n approaches infinity, the throughput improvement bound is thus 35.6%.","For all of the cases that have been tested (n=2 to 17), these kind of central horizontal cut sets were observed using X-, Y-, and Manhattan architectures. Furthermore, in all of these cases, there is no flow passing through the same cut set more than once. If this is true for all n\u00d7n meshes, the improvement upper bounds derived are exact throughput improvement rates.","The same analysis was performed on symmetrical chip shapes as described above. A rectangular chip has communication bottlenecks on its respective two middle cut lines. The physical dimension of the middle part of the chip restricts the communication flow, and thus prevents larger throughput. Using a convex-shaped chip, better throughput is possible by allowing more wires to cross the original middle cut lines. This is verified using an embodiment of the routing algorithm of the present invention.","As shown in , a shape of the chip  is designed to be a convex polygon as close as possible to a circle and symmetrical to all routing directions. The throughput of the different structures was then compared.  show a level  hexagonal mesh , which is the symmetrical structure corresponding to the Y-architecture.  illustrate an octagonal mesh , which is the corresponding symmetrical structure to the X-architecture. Finally,  show a diamond-shaped mesh , which is symmetrical to the Manhattan architecture.","Using the above-described routing algorithm, throughput of the symmetrical structures , ,  for the Y-architecture, X-architecture, and Manhattan architecture was computed.  shows the throughput of hexagonal meshes  from level  to level .  shows the throughput of octagonal meshes  from level  to level .  shows the throughputs of diamond meshes  from level  to level . Normalized throughputs by total edge capacities are also shown in .","As shown, for Y-architecture, a hexagonal mesh  with 169 nodes, for example, produces 17.3% more throughput than a 13\u00d713 rectangular mesh using the same interconnect architecture. For X-architecture, an octagonal mesh with 101 nodes, for example, can achieve 13.4% more throughput than a 10\u00d710 rectangular mesh, which has 100 nodes. For Manhattan architecture, a diamond-shaped mesh  with 265 nodes, for example, provides a throughput of 5.61e\u22124, while a 16\u00d716 mesh using the same interconnect architecture, which has 256 nodes, produces a throughput of 4.88e\u22124, so that a throughput of diamond mesh  over square mesh for Manhattan architecture is determined to be 15%.","As shown in , the meshes with symmetrical structures produce different flow congestion patterns from n\u00d7n meshes.  illustrate the flow congestion patterns of a level  hexagonal mesh , a level  octagonal mesh , and a level  diamond mesh , respectively. The cut edges  are marked using bold lines. The symmetrical meshes , ,  display a more evenly distributed congestion pattern than n\u00d7n meshes. The middle cut lines do not exist any more.","The following exemplary benefits are thus revealed via the MCF algorithm of a preferred embodiment of the present invention:","For uniform capacity mesh, the congested edges  lie in the center rows and columns. The total throughput of each node  is inversely proportional to the dimension of the mesh.","The re-arrangement of capacities between different columns or rows will not improve the throughput if the total capacity of the columns or rows is kept constant.","A flexible chip shape provides a throughput improvement of about 30% over a square chip of equal area.","A 45\u00b0 mesh structure  produces about 17% more throughput over a 90\u00b0 mesh  for a processor array of 144 nodes.","A mixture of 90\u00b0 and 45\u00b0 mesh structures  can achieve an additional 30% throughput To achieve maximum throughput, the ratio of resources allocated to the 45\u00b0 routing layers versus those to the 90\u00b0 routing layers approaches 5.6 as the number of nodes  increases.","In the 90\u00b0 and 45\u00b0 mixed routing, interleaving the diagonal routing layer and the Manhattan routing layers can reduce the number of vias and hence increase the communication throughput.","Interconnect length has a significant impact on virtually every-important measure of chip quality. From the physical point of view, decreasing interconnect length directly reduces the resistance and capacitance of the interconnect, thus improving the performance and power consumption of the circuits. From a designer's point of view, shorter total interconnect length produces less routing congestion on the chip, and therefore improving the routability and signal integrity of the design. At the same time, from a manufacturing perspective, shortening the interconnect length can improve the manufacturability and reliability of the chip.","Because of its highly limited freedom for choosing routing directions, Manhattan architecture adds a significant amount of interconnect length versus the Euclidean optimum. Allowing more routing directions has been found to shorten the total interconnect length. Previously, researchers have studied the impact of using different interconnect architecture on the interconnect length. Many of these efforts have involved constructing the Steiner routing trees under different routing direction restriction. However, due to the inherent difficulty of the Steiner minimum tree problem, a significant amount of time has been spent developing heuristics for construction Steiner trees for a randomly generated net, and for statistically calculating the average interconnect length for different interconnect architectures.","An additional embodiment of the present invention derives a quantitative comparison of interconnect lengths needed to connect a two pin net using different interconnect architectures. To generalize the non-rectilinear routing structure, the concept of \u03bb-geometry has been introduced. \u03bb represents a number of possible routing directions. In \u03bb-geometry, interconnects with angles i\u03c0\/\u03bb, for all i are allowed, where \u03bb is a positive integer. \u03bb=2, 3, 4 correspond to the Manhattan architecture, Y-architecture, and X-architecture, respectively.","The derivation adheres to the following rules:","(1) In \u03bb-geometry, given two points A and B, if AB are not on any of the x feasible routing directions, then the shortest path connecting AB consists of two segments AC and CB, where the angle between AC and CB is (1\u22121\/\u03bb)\u03c0.","(2) Let A, B be any two points on the place, rbe the Euclidean distance between A and B, and r be the length of the shortest interconnect to connect AB in \u03bb-geometry, then",{"@attributes":{"id":"p-0305","num":"0327"},"maths":{"@attributes":{"id":"MATH-US-00022","num":"00022"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"mrow":[{"mi":"max","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mfrac":{"msub":[{"mi":["r","e"]},{"mi":["r","\u03bb"]}]}},{"mrow":{"mi":"csc","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":{"mo":["(",")"],"mfrac":{"mrow":[{"mi":"\u03bb","mo":"-","mn":"1"},{"mn":"2","mo":"\u2062","mi":"\u03bb"}]}},"mo":"\u2062","mi":"\u03c0"}}},"mo":[".","\u2062"],"mstyle":{"mtext":{}},"mi":"A"}],"mo":"="},"mo":",","mi":"B"}}}},"(3) Let A, B be two random points on the plane, rbe the expected Euclidean distance between A and B, and r be the expected length of the shortest interconnect to connect AB in \u03bb-geometry, then",{"@attributes":{"id":"p-0307","num":"0329"},"maths":{"@attributes":{"id":"MATH-US-00023","num":"00023"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"msub":{"mi":["r","\u03bb"]},"mo":"=","mrow":{"mfrac":{"mrow":[{"mn":"2","mo":"\u2062","mrow":{"mi":"\u03bb","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mn":"1","mo":"-","mrow":{"mi":"cos","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["\u03c0","\u03bb"],"mo":"\/"}}}}}}},{"mi":"\u03c0sin","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["\u03c0","\u03bb"],"mo":"\/"}}}]},"mo":"\u2062","mrow":{"msub":{"mi":["r","e"]},"mo":"."}}}}}},"Rule (1) provides that, in order to connect two pins with the shortest interconnect, there is at most one turn on the path, and it is desirable to maximize the angle between two segments of the path for the given interconnect architecture. For different interconnection architectures, Rule (2) determines the worst-case amount of additional interconnect length cost versus the Euclidean distance. For example, for Manhattan architecture, in the worst case, the interconnect length is 41.2% longer that the Euclidean distance. For Y-architecture and X-architecture, respectively, the additional interconnect length is at most 15.47% and 8.23%.","Rule (3) determines the average interconnect length of a two pin net using different interconnection architectures. For Manhattan architecture, the average interconnect length is 27.32% longer than its Euclidean distance. For Y-architecture, the average interconnect length is 10.27% longer than its Euclidean distance. The X-architecture further reduces the average interconnect length to be within 5.48% of the Euclidean optimum and it produces 4.3% interconnect length reduction over Y-architecture, but with the added cost of one more routing direction.","A novel non-blocking hierarchical interconnect architecture, Y-architecture, has been shown and described herein. The hexagonal cell arrays employed in Y-architecture have the property of hierarchical expansion and therefore nonblocking hierarchical interconnect architectures can be set up on them. According to an objective function also provided herein to balance interconnects resources and performance, it is shown that Y-architecture preferably is only 7% less effective than X-architecture. Because the distribution of hexagonal cells has the same pattern as that of the base stations of wireless communication systems, the architecture provided herein can also be used to optimize wireless systems, for example.","While various embodiments of the present invention have been shown and described, it should be understood that other modifications, substitutions, and alternatives are apparent to one of ordinary skill in the art. Such modifications, substitutions, and alternatives can be made without departing from the spirit and scope of the invention, which should be determined from the appended claims.","Various features of the invention are set forth in the appended claims."],"GOVINT":[{},{}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 2A and 2B"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 3A and 3B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 4A and 4B"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 5A and 5B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIGS. 6A-6D","FIGS. 5A and 5B","FIG. 6C"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 10","FIG. 9"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIGS. 13A and 13B"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIGS. 14A and 14B"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIGS. 19A-19C"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 20","FIGS. 19A and 19B"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 24","FIGS. 22 and 23"]},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIGS. 25A-25F"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 26","FIGS. 25A-25F"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIGS. 27A-27B"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 28","FIGS. 27A-27F"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIGS. 29A-29B","FIG. 25F"]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIGS. 30A and 30B"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 32","FIG. 30A"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 33","FIG. 30A"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 34"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 35","FIG. 30A"]},{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIGS. 36A-36B","FIG. 25E"]},{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 37","FIG. 36A"]},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIGS. 38A-38B"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 39"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 40"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 41","FIG. 39"]},{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIGS. 42A-42B","FIG. 39"]},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIGS. 43A-43C","b":["2","1","0"]},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 44"},{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 45","FIG. 44"]},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 46"},{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 47","FIG. 25"]},{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 48","FIG. 2"]},{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 49"},{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 50","FIG. 49"]},{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 51"},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 52"},{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 53"},{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 54"},{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 55","FIG. 54"]},{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 56"},{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 57"},{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIGS. 58A and 58B"},{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 59"},{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 60"},{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 61"},{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 62"},{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIGS. 63A-63B"},{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIGS. 64A-64B"},{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIGS. 65A-65B"},{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 66"},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 67"},{"@attributes":{"id":"p-0083","num":"0082"},"figref":["FIG. 68","FIG. 38"]},{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 69"},{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 70"},{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 71"},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 72"},{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIGS. 73A-73F"},{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 74"},{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 75"},{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 76"},{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIGS. 77A-77C","b":["6","3","8"]}]},"DETDESC":[{},{}]}
