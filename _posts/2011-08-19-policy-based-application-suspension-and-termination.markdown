---
title: Policy based application suspension and termination
abstract: In accordance with one or more aspects, an application that is to be suspended on a computing device is identified based on a policy. The policy indicates that applications that are not being used are to be suspended. The application is automatically suspended, and is allowed to remain in memory but not execute while suspended. Additionally, when memory is to be freed one or more suspended applications to terminate are automatically selected based on the policy, and these one or more selected applications are terminated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08997171&OS=08997171&RS=08997171
owner: Microsoft Technology Licensing, LLC
number: 08997171
owner_city: Redmond
owner_country: US
publication_date: 20110819
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Many computing devices can run multiple programs concurrently, some being used by the user and others running in the background or ready to be used by the user. Running multiple programs concurrently typically allows the user to quickly switch between programs that he or she desires to use. However, running multiple programs concurrently is not without its problems. One such problem is that running multiple programs concurrently can use significant amounts of resources (such as processor time, memory, etc.). This use of resources can lead to increased power consumption, and reduced battery life for battery powered computing devices.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","In accordance with one or more aspects, an application that is to be suspended on a computing device is identified based on a policy. The policy indicates that applications that are not being used are to be suspended. The application is automatically suspended, and is allowed to remain in memory but not execute while suspended.","In accordance with one or more aspects, a determination is made, based on one or more metrics regarding memory usage in a computing device, that memory in the computing device is to be freed. One or more of multiple applications on the computing device to terminate to free memory of the computing device are automatically selected based on a memory-based policy, and these one or more selected applications are terminated.","Policy based application suspension and termination is discussed herein. Multiple applications can be in memory of a computing device concurrently, but only a particular number of those applications (e.g., one or two) are active at any given time. Applications that are not active are suspended. An active application is executed by one or more processors of the computing device, and a suspended application is not executed by the one or more processors. When memory is to be freed (e.g., available memory falls below a threshold value), one or more of the suspended applications are terminated. Which one or more of the suspended applications are terminated can be determined based on an amount of memory the suspended applications use and\/or how recently the suspended applications were used.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1","b":["100","100","100","100"]},"Computing device  includes an operating system  and one or more applications . During operation, operating system  and applications  run on computing device , with operating system  managing applications . The management of applications  includes automatically terminating one or more applications , as discussed in more detail below.","Operating system  includes an application management module , a system responsiveness analysis module , a system performance counter module , an application lifetime management module , an application termination module , a policy evaluation module , and an application suspension module . Although modules - are illustrated as being part of operating system , alternatively one or more of modules - can be implemented separately from operating system . Additionally, it should be noted that the functionality provided by one or more of modules - can be separated into multiple modules, and\/or that at least some of the functionality provided by two or more of modules - can be combined into a single module.","Various modules of operating system  are discussed herein as notifying or communicating various indications or information to one another. It should be noted that such notification or communication can take various forms. For example, one module can invoke an application programming interface (API) of another module, one module can report an event that another module has registered to receive, one module can store data or other information in a location from which another module can retrieve the data or information, and so forth.","Application management module  monitors or is otherwise aware of which applications  are running on computing device  at any given time, including active and inactive applications. An active application refers to an application that is currently being scheduled for execution by one or more processors of computing device  and thus an application that is being allocated processor time for execution. An inactive application refers to an application that is not currently being scheduled for execution by one or more processors of computing device  and thus an application that is not being allocated processor time for execution. An application  can be loaded into memory of computing device  but be an inactive application, as discussed in more detail below.","Application management module  also monitors or is otherwise aware of which applications  are being used at any given time. Generally, an application  is being used at a particular time if a user interface for the application is being displayed or otherwise presented by computing device  at that particular time and\/or a user of computing device  is providing user inputs to the application at that particular time. Module  can determine which applications  are being used at any given time in a variety of different manners. For example, module  can determine that an application  is currently being used if a window in which that application displays a user interface is currently being displayed on a display device that is part of or coupled to computing device , that an application  is currently being used if a window in which that application displays a user interface is a top or highest level window being displayed on a display device that is part of or coupled to computing device , that an application  is currently being used if a window in which that application displays a user interface is not minimized, and so forth.","In one or more embodiments, operating system  allows a particular number of windows (e.g., one or two) to be displayed at any given time. Applications  display their user interfaces within such windows, and thus only the particular number of applications  can display their user interfaces at any given time. At any particular time, an application  that is displaying a user interface on a display device that is part of or coupled to computing device  is determined as being an application  that is currently being used by a user of computing device  at that particular time. And, an application  that is not displaying a user interface on a display device that is part of or coupled to computing device  is determined as being an application  that is not currently being used by a user of computing device  at that particular time.","Application lifetime management module  controls the policy applied by operating system  to determine which applications  can execute. This policy can indicate how to determine whether an application  is active or inactive at any given moment, how to determine which application  is to be terminated as discussed in more detail below, how many windows can be displayed at any given time, and so forth. Module  can obtain the policy in a variety of different manners, such as being pre-configured with the policy, receiving the policy from a user of computing device  (e.g., via various preference or configuration settings), receiving the policy from another module of computing device  or from another computing device, and so forth.","Policy evaluation module  determines whether the policy applied by operating system  is being satisfied by applications . Policy evaluation module  communicates with application management module  to determine which applications  are being used at any given time. Based on this determination and the policy, module  determines whether the policy is being satisfied by applications . For example, if the policy indicates that applications that are not being used be inactive, and if one or more applications that are not being used by a user of computing device  are active at a particular time, then module  determines that the policy is not being satisfied by applications  at that particular time.","In response to determining that applications  do not satisfy the policy, policy evaluation module  determines one or more applications  to suspend so that applications  do satisfy the policy. Suspending an application refers to making the application inactive, as discussed in more detail below. Policy evaluation module  determines which one or more applications  to suspend based on the determination of which applications  are being used and the policy. For example, if the policy indicates that applications that are not being used be inactive, and if one or more applications that are not being used are active at a particular time, then module  determines that the applications  that are not being used but are active are the one or more applications  to suspend.","Application suspension module  receives from policy evaluation module  an indication of one or more applications  to suspend. In response to the indication to suspend one or more applications , policy suspension module  suspends the indicated one or more applications . An application is suspended by notifying the application that it is to be suspended. The application is optionally given an amount of time (e.g., 1 second or 4 seconds) to save data and\/or state information that the application deems is to be saved prior to being suspended. The application stores data and\/or state information to a nonvolatile or other persistent storage device, allowing the data and\/or state information to be subsequently retrieved (even if the application is terminated). Suspending an application refers to changing the application from being active to being inactive. An inactive application (also referred to as a suspended application) is not executed by a processor of computing device  as discussed above. An application can be suspended in different manners, such as by invoking an API of operating system  to suspend the application.","It should be noted that once suspended, an application can subsequently become active. For example, a user input can be received from a user indicating that he or she desires to use an application. If the application is inactive, the application is made active in response to a user request to use the application, and the application is executed by one or more processors of computing device . Making a suspended application an active application is also referred to as reactivating or resuming the application. Once active again, the application resumes execution, restoring saved state as appropriate for the application.","In one or more embodiments, the memory of computing device  can be organized and managed in portions typically referred to as pages. A memory manager of operating system  supports memory paging, transferring pages of memory between random access memory (RAM) and a storage device (e.g., Flash memory, a hard drive, etc.). In such embodiments, an application can be resumed by transferring the contents of memory that were paged to disk back to memory. Alternatively, rather than transferring the contents of memory that were paged to disk back to memory, the application can be restarted (terminated and re-executed). Whether to transfer the contents of memory that were paged to disk back to memory or restart the application can be determined in different manners, such as restarting the application if at least a threshold amount of memory (e.g., a threshold number of pages of memory, a threshold amount of the memory allocated to the application) were transferred to disk and otherwise transferring the contents of memory that were paged to disk back to memory.","System performance counter module  measures various metrics regarding the usage of memory of computing device . To run an application , the application  is typically loaded into memory of computing device  and the instructions of the application  are executed by one or more processors of computing device . The memory into which an application  is loaded is typically RAM. The usage of this RAM by applications can be measured in different ways, referred to as metrics regarding the usage of memory of computing device . In one or more embodiments, these metrics regarding the usage of memory of computing device  include one or more of a memory load metric, an available physical memory metric, an available page file space metric, and an average lifetime on standby list metric.","The memory load metric refers to an amount of memory allocated to applications . Each application  is typically allocated a particular amount of memory into which instructions for that application can be loaded and data can be stored by that application. Memory can be allocated to an application when the application is loaded and\/or during running of the application. The memory allocated to each application  remains allocated to that application regardless of whether the application is active or inactive. System performance counter module  monitors the amount of memory that is allocated to each of applications , and the combined amount of allocated memory is used as a metric regarding the usage of memory of computing device . The memory allocated to an application is also referred to as the memory used by that application. System performance counter module  maintains an indication of how much memory is used by each application  and\/or the combined amount of memory used by the active and inactive applications on computing device .","The available physical memory metric refers to an amount of physical memory that is available at any given time. In one or more embodiments, a memory manager of operating system  supports transferring pages of memory between RAM and a storage device (e.g., Flash memory, a hard drive, etc.). System performance counter module  maintains an indication of the amount of physical memory (e.g., pages in RAM) used by each application  and\/or the combined amount of physical memory (e.g., pages in RAM) used by the active and inactive applications on computing device .","The available page file space metric refers to an amount of available storage space on a storage device in which pages are stored. Typically, a memory manager of operating system  transferring pages from RAM to a storage device (e.g., Flash memory, a hard drive, etc.) stores those pages on the storage device in a file referred to as a page file. System performance counter module  maintains an indication of the amount of page file space used by each application  and\/or the combined amount of page file space used by the active and inactive applications on computing device .","The average lifetime on standby list metric refers to the average lifetime of pages on a standby list maintained by a memory manager of operating system . The standby list identifies, for example, pages of memory that have been allocated to an application  but are not being used by that application. The average lifetime can be calculated over various timespans, such as over a particular number of minutes (e.g., the previous minute), the life of the application, and so forth. System performance counter module  maintains an indication of the average lifetime of pages on a standby list for each application  and\/or the combined average lifetime of pages on a standby list for the active and inactive applications on computing device .","System responsiveness analysis module  uses the metrics regarding memory usage to determine whether to terminate one or more applications . In one or more embodiments, if one or more metrics satisfy (e.g., are less than or equal to) a threshold value, then module  determines that memory is to be freed by terminating one or more applications . The threshold value can be a fixed amount (e.g., a particular number of bytes of memory) or a relative amount (e.g., 10% of the amount of memory that is in computing device  or that is available for allocation to applications ). Various different threshold values can be used. For example, a threshold value can be that the amount of available physical memory is less than 800 Megabytes (MB) or 25% of the memory in computing device  (whichever is less), and the available physical memory metric is satisfied if the amount of available physical memory is less than 800 MB or 25% of the memory in computing device . By way of another example, a threshold value can be that the average lifetime of pages on a standby list is less than 20 minutes, and the average lifetime on standby list metric is satisfied if the average lifetime of pages on the standby list is less than 20 minutes. By way of yet another example, a threshold value can be that the page file is less than 10% of its limit (e.g., its maximum size), and the available page file space metric is satisfied if the available page file space is less than 10% of its limit. In response to determining that memory is to be freed, module  notifies application termination module  to terminate one or more applications . A terminated application is no longer running on computing device , and is no longer allocated memory in computing device . Which metrics regarding memory usage are used by system responsiveness analysis module  and\/or threshold values to satisfy can be indicated in the policy.","Application termination module  determines, in response to a notification from system responsiveness analysis module  to terminate one or more applications , one or more applications  to terminate. An application can be terminated in different manners, such as by invoking an API of operating system  to terminate the application. In one or more embodiments, module  selects one of applications  to terminate and terminates the selected application . After terminating the selected application , module  notifies system responsiveness analysis module  that an application  has been terminated. System responsiveness analysis module  then uses the metrics regarding memory usage to again determine whether memory is to be freed, and notifies module  to terminate an application  if module  determines that memory is still to be freed. This termination by module  and determination by module  continues until module  no longer determines that memory is to be freed.","Alternatively, rather than selecting one application to terminate, application termination module  can select multiple applications  to terminate. How many applications  to terminate can be determined in different manners, such as based on the metrics regarding memory usage (e.g., which can be obtained from system performance counter module ) and a threshold value (e.g., the same threshold value as was used by system responsiveness analysis module  to determine whether memory is to be freed). For example, if the threshold value is 3.2 Gigabytes (GB) and the current memory load is 3.4 GB, then module  can select multiple applications  that combined use at least 0.2 GB so that once the selected applications  are terminated the memory usage no longer satisfies the threshold value.","Although example manners of selecting applications to terminate are discussed herein, application termination module  can select one or more applications  to be terminated in other manners. The particular manner used to select one or more applications to be terminated can be determined in different manners, such as being indicated in the policy.","Application termination module  can also determine to terminate one or more applications  at other times and\/or in response to other events. The particular times at which, or events in response to which, one or more applications  are to be terminated can be identified in various manners. For example, policy evaluation module  can notify application termination module  to terminate one or more applications  based on a particular policy applied by operating system . Which applications , and how many applications , are to be terminated can vary based on the particular policy. For example, a policy can indicate that when a user switch action occurs (e.g., the current user of computing device  changes), all suspended applications  are terminated. Thus, in response to a notification from policy evaluation module  that the current user of computing device  has changed, application termination module  terminates all suspended applications .","In one or more embodiments, application management module  maintains one or more lists of applications. These lists can be provided to or otherwise accessed by application termination module  and used by module  in selecting one or more applications  to terminate.","One such list that can be maintained by application management module  is a most recently used (MRU) list, which indicates how recently each of applications  was used (e.g., how recently each application  was last used by a user of computing device ). The application that is currently being used is typically the most recently used application. The MRU list can be implemented in different manners, such as an ordered list from most recently to least recently used application. Each time an application is used by a user of computing device , the application is moved to the top of the MRU list, and other applications on the MRU list are moved down one location in the MRU list as appropriate. Thus, the application that was most recently used is at the top of the MRU list, and the application that was least recently used is at the bottom of the MRU list. The MRU list can optionally have no more than a threshold number of applications, and when an application is added to the MRU list, an application at the bottom of the MRU list can be removed from the MRU list if the threshold number of applications has been satisfied (e.g., equaled or exceeded).","Another such list that can be maintained by application management module  is a frequently used list, which identifies one or more applications  that are frequently (or are deemed likely to be frequently) used. The frequently used list can be generated by application management module  (e.g., by analyzing how much time particular applications  are used), can be based on user input from a user of computing device  (e.g., specifying which applications he or she frequently uses), can be pre-configured in or otherwise obtained by module , and so forth. The application that is most frequently used is at the top of the frequently used list, and the application that is least frequently used is at the bottom of the frequently used list. The frequently used list can optionally have no more than a threshold number of applications, and when an application is added to the frequently used list, an application at the bottom of the frequently used list can be removed from the frequently used list if the threshold number of applications has been satisfied (e.g., equaled or exceeded).",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 2","b":["200","200","202","204","202","204","202","204"]},"Lists  and  can be generated in different manners. In one or more embodiments, each list  and  corresponds to a different user interface window or display for user selection of applications (e.g., applications to be made active). For example, operating system  of  may display a user interface with one display that identifies (e.g., by icon, name, etc.) a set of up to four most recently used applications, and another display that identifies (e.g., by icon, name, etc.) a set of up to six recently used (but less recently used than the four most recently used) applications. The four most recently used applications identified in the one display are included in list , and the six recently used applications identified in the other display are included in list . Although application lists  are illustrated as including two lists, it should be noted that application lists  can include any number of lists.","Application termination module  accesses application lists  and uses application lists  to select one or more applications to terminate. Application termination module  can select one or more applications to terminate in different manners based on which list ,  the applications are included in.","In one or more embodiments, applications in list  are selected based on the memory load of the applications. The memory load of an application refers to the amount of memory that has been allocated to that application (e.g., by an operating system, such as operating system  of ). Application termination module  selects for termination the application from list  having the largest memory load (the application using the largest amount of memory). Module  continues to select for termination the application in list  having the largest memory load until system responsiveness analysis module  determines memory is no longer to be freed.","Application termination module  selects applications from list  to terminate before selecting an application from list . If system responsiveness analysis module  determines that memory is no longer to be freed after all the applications in list  are terminated, then no applications from list  need be terminated. However, if module  determines that memory is still to be freed after all the applications in list  are terminated (and thus no applications remain in list ), then module  selects one or more applications from list  to terminate.","In one or more embodiments, applications in list  are selected based on how recently used the applications were. Application termination module  selects applications from list  in order from least recently used to most recently used, so that the least recently used application is the first application in list  to be selected and the most recently used application is the last application in list  to be selected. Module  continues selecting applications from list  until system responsiveness analysis module  determines that no more applications are to be terminated (or until all applications in list  are terminated).","In the discussions above, application termination module  is discussed as selecting applications from list  based on how much memory the applications use, and from list  based on how recently used the applications are. Alternatively, module  can swap which subsets these techniques apply to. That is, application termination module  can alternatively select applications from list  based on memory load, and from list  based on how recently used the applications are.","Thus, application termination module  can use different techniques (e.g., amount of memory the applications use, how recently used the applications are) to select applications from different lists of application lists . Alternatively, module  can use the same techniques for multiple list of application lists . For example, module  can select applications from list  based on how recently used the applications are, analogous to the selection of applications from list .","Alternatively, application termination module  can use a combination of techniques to select applications from a list of application lists . In one or more embodiments, module  selects the application in list  having the largest memory load, as well as each application in list  that is less recently used than that application having the largest memory load. For example, assume applications in list  are listed in order of how recently used the applications are, with Application A being most recently used and Application G being least recently used of the applications in list . If Application B uses the largest amount of memory, then module  selects both Application B (using the largest amount of memory) as well as Application G (being less recently used than the application using the largest amount of memory) as the applications to be terminated.","Alternatively, application termination module  can use other techniques to select applications from a list of application lists . For example, module  can select applications from one or more lists of application lists  in accordance with how frequently used the applications are (e.g., selecting less frequently used applications before selecting more frequently used applications).","Lists  and  are discussed above as including most recently used applications. Alternatively, one or both of lists  and  can include frequently used applications. For example, list  can include up to four frequently used applications, and list  can include up to six most recently used applications that are not already included in list  (e.g., if the most recently used application is included in list , it is not also included in list ). Applications in list  are selected for termination based on the memory load of the applications or in other manners as discussed above. Applications in list  are selected for termination based on how recently used the applications were or in other manners as discussed above.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 3","FIG. 1"],"b":["300","300","100","300","300"]},"In process , one or more applications to be suspended are identified (act ). Applications to be suspended are applications that are not currently suspended and that are not being used by a user of the computing device, as discussed above.","The one or more applications identified in act  are automatically suspended (act ). The applications can be given a particular amount of time to save application state to a storage device as discussed above. The applications are suspended automatically in act \u2014the applications are suspended without user input requesting that particular applications be suspended.","One or more suspended applications to terminate are automatically selected (act ). The one or more suspended applications to terminate are selected based on a memory-based policy, including selecting applications in response to an indication that memory is to be freed as discussed above. One or more of various memory-based policies can be used, such as policies based on an amount of memory used by the suspended applications, policies based on how recently the suspended applications have been used, and so forth as discussed above.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 4","FIG. 1"],"b":["400","400","100","400","400"]},"In process , a determination is made as to whether memory in the computing device is to be freed (act ). Whether memory in the computing device is to be freed can be determined in different manners as discussed above, such as whether one or more metrics satisfy a threshold amount.","If memory is not to be freed then process  remains in act . Process  can repeatedly check determine whether memory is to be freed at regular or irregular intervals, in response to particular events, and so forth.","If memory is to be freed then one or more suspended applications to terminate are automatically selected (act ). The one or more suspended applications are selected based on a memory-based policy, including selecting applications in response to an indication that memory is to be freed as discussed above. One or more of various memory-based policies can be used, such as policies based on an amount of memory used by the suspended applications, policies based on how recently the suspended applications have been used, and so forth as discussed above.","The one or more applications selected in act  are terminated (act ). The applications are terminated automatically in act \u2014the applications are terminated without user input requesting that particular applications be terminated. Applications terminated in act  can be subsequently resumed, as discussed above.","Thus, the policy based application suspension and termination techniques discussed herein support various usage scenarios. For example, applications are suspended to reduce processor usage, and terminated when it is determined that memory is to be freed. However, suspended applications are allowed to stay in memory for extended periods of time (e.g., until terminated), allowing the suspended applications to be quickly resumed and scheduled for execution by the processor if requested (e.g., a user desires to use the application).","Various actions such as communicating, receiving, providing, storing, generating, obtaining, and so forth performed by various modules are discussed herein. A particular module discussed herein as performing an action includes that particular module itself performing the action, or alternatively that particular module invoking or otherwise accessing another component or module that performs the action (or performs the action in conjunction with that particular module). Thus, a particular module performing an action includes that particular module itself performing the action and\/or another module invoked or otherwise accessed by that particular module performing the action.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 5","FIG. 1"],"b":["500","500","100"]},"Computing device  includes one or more processors or processing units , one or more computer readable media  which can include one or more memory and\/or storage components , one or more input\/output (I\/O) devices , and a bus  that allows the various components and devices to communicate with one another. Computer readable media  and\/or one or more I\/O devices  can be included as part of, or alternatively may be coupled to, computing device . Processor , computer readable media , devices , and bus  can optionally be implemented as a single component or chip (e.g., a system on a chip). Bus  represents one or more of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, a processor or local bus, and so forth using a variety of different bus architectures. Bus  can include wired and\/or wireless buses.","Memory\/storage component  represents one or more computer storage media. Component  can include volatile media (such as random access memory (RAM)) and\/or nonvolatile media (such as read only memory (ROM), Flash memory, optical disks, magnetic disks, and so forth). Component  can include fixed media (e.g., RAM, ROM, a fixed hard drive, etc.) as well as removable media (e.g., a Flash memory drive, a removable hard drive, an optical disk, and so forth).","The techniques discussed herein can be implemented in software, with instructions being executed by one or more processing units . It is to be appreciated that different instructions can be stored in different components of computing device , such as in a processing unit , in various cache memories of a processing unit , in other cache memories of device  (not shown), on other computer readable media, and so forth. Additionally, it is to be appreciated that the location where instructions are stored in computing device  can change over time.","One or more input\/output devices  allow a user to enter commands and information to computing device , and also allows information to be presented to the user and\/or other components or devices. Examples of input devices include a keyboard, a cursor control device (e.g., a mouse), a microphone, a scanner, and so forth. Examples of output devices include a display device (e.g., a monitor or projector), speakers, a printer, a network card, and so forth.","Various techniques may be described herein in the general context of software or program modules. Generally, software includes routines, programs, applications, objects, components, data structures, and so forth that perform particular tasks or implement particular abstract data types. An implementation of these modules and techniques may be stored on or transmitted across some form of computer readable media. Computer readable media can be any available medium or media that can be accessed by a computing device. By way of example, and not limitation, computer readable media may comprise \u201ccomputer storage media\u201d and \u201ccommunication media.\u201d","\u201cComputer storage media\u201d include volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules, or other data. Computer storage media include, but are not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by a computer. Computer storage media refer to media for storage of information in contrast to mere signal transmission, carrier waves, or signals per se. Thus, computer storage media refers to non-signal bearing media, and is not communication media.","\u201cCommunication media\u201d typically embody computer readable instructions, data structures, program modules, or other data in a modulated data signal, such as carrier wave or other transport mechanism. Communication media also include any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media include wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.","Generally, any of the functions or techniques described herein can be implemented using software, firmware, hardware (e.g., fixed logic circuitry), manual processing, or a combination of these implementations. The terms \u201cmodule\u201d and \u201ccomponent\u201d as used herein generally represent software, firmware, hardware, or combinations thereof. In the case of a software implementation, the module or component represents program code that performs specified tasks when executed on a processor (e.g., CPU or CPUs). The program code can be stored in one or more computer readable memory devices, further description of which may be found with reference to . In the case of hardware implementation, the module or component represents a functional block or other hardware that performs specified tasks. For example, in a hardware implementation the module or component can be an application-specific integrated circuit (ASIC), field-programmable gate array (FPGA), complex programmable logic device (CPLD), and so forth. The features of the policy based application suspension and termination techniques described herein are platform-independent, meaning that the techniques can be implemented on a variety of commercial computing platforms having a variety of processors.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The same numbers are used throughout the drawings to reference like features.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
