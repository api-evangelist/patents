---
title: Systems and methods for synchronizing data objects among participating systems via asynchronous exchange of messages
abstract: A computer-implemented method of, and system for, messaging in a computer network is disclosed. The computer network comprises at least two computer-based participant systems communicating through asynchronous exchange of messages. The first system maintains one or more data objects and notifies another system of modifications of the data objects by sending messages. Each time a data object is modified, the corresponding status object is updated and a modification status flag is checked. In response, a communication status flag is checked and a notification message is sent to the other system if necessary. The modification status flag is then reset. Upon receipt of a confirmation message from the other system, the communication status flag is then reset to the original status.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07302489&OS=07302489&RS=07302489
owner: SAP AG
number: 07302489
owner_city: Walldorf
owner_country: DE
publication_date: 20030801
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE DRAWINGS"],"p":["The present invention generally relates to methods of, and systems for, messaging in a computer network. More particularly, the invention relates to methods and systems where user modifications of one or more data objects maintained by a first participant system of the computer network are communicated to at least one other participant system of the computer network according to certain criteria.","In distributed computer networks, communication between the various distributed participant systems of the network is often through asynchronous exchange of messages. In asynchronous messaging, software program applications send and consume messages. The message exchange is asynchronous in that an application sending a message does not need to wait for a remote application to receive that message. Thus, there is no need for all elements of the infrastructure linking the computers on which the applications are run to be available at all times.","Generally, communication between participant systems of a distributed computer network can be according to a pessimistic communication protocol or an optimistic communication protocol. As an example, a computer system of a purchaser of goods may run a software program application that allows the purchaser to electronically place a purchase order. The purchase order application generates and stores locally a first data object representing the order, and effects sending of a message containing the data object, i.e., the order, via the computer network to an order processing software program application run on another computer system at the site of a supplier of the requested goods. The order processing application handles and processes incoming orders. Once the order processing application receives a new purchase order, it creates and stores locally a second data object that corresponds to the first data object.","In practice it frequently happens that a purchaser, after having successfully placed an order with a supplier, wishes to change (modify) his order, for example, because the quantity or size of the required goods has changed. Thereafter, the purchaser may wish to modify his order a second time, and perhaps yet even more times.","If a pessimistic communication protocol is used for communication between the purchaser and supplier systems, a modification of the order by the purchaser is allowed only until after a confirmation message sent from the supplier system has been received by the purchaser system in response to an earlier modification. In other words, the purchaser, who has just entered a modification into his system, has to wait until a message (answer) confirming receipt of the modification is received from the supplier system, before he is allowed to enter another modification. The supplier's confirmation can be positive (he accepts the modification) or negative (he rebuffs the modification). On the other hand, if an optimistic communication protocol is used, the purchaser can enter a modification of his order even before having received a confirmation of an earlier modification from the supplier system.","Pessimistic communication protocols are usually employed where conflicts between the participant systems may easily occur, e.g., where a supplier is not sufficiently flexible to respond to late modifications of an order short before start of a production run or to handle plural modifications within a short period of time. For example, if an order is sent from a purchaser to an outside supplier, modifications of the order are likely to be acceptable for the supplier only well before execution of the order. This is particularly true if the purchaser and supplier resort to software products from different providers for handling their electronic business matters. A standard pessimistic communication protocol often used in today's world of electronic commerce is, e.g., RosettaNet.","An optimistic communication protocol is convenient in a situation where the supplier is highly flexible and able to react on modifications of an order even short before commencing execution of the order. This is often true where purchaser and supplier, or more generally collaborating business partners, rely on software products from the same software provider using similar or the same standards, procedures, interfaces, data structures, instruction sets, etc. It is also determinative for the choice of the type of communication protocol used whether or not the systems are able to store and visualize process conflicts as part of their data design and business process.","When designing and programming a scheme for the communication between participant systems of an asynchronous messaging computer network, a software developer, or a team of developers, hitherto face a dilemma of choosing whether to implement an optimistic protocol or a pessimistic protocol. Voting for an optimistic communication protocol implies forgoing the openness of a pessimistic communication environment, i.e., the possibility of having most diverse software systems of different manufacturers collaborate through a computer network. Electing a pessimistic communication protocol means waiving flexibility and ease of use of an optimistic communication environment. Thus, it is highly desirable to have a communication protocol that preserves both openness of a pessimistic system and customer friendliness of an optimistic system.","The present invention provides in one aspect a computer-implemented method of messaging in a computer network, the computer network comprising a plurality of at least two computer-based participant systems communicating through asynchronous exchange of messages, a first one of the participant systems maintaining one or more data objects, the first participant system arranged to send messages to at least one other participant system to notify said other participant system of modifications of said one or more data object entered through the first participant system, the method comprising the steps of: providing a status object in relation to each data object, the status object comprising one or more status fields for storing information representative of at least one of a delta value applied to the respective data object as a result of one or more modifications and a total value of that data object after application of the one or more modifications; providing a modification status flag in relation to each data object; providing a communication status flag in relation to each data object; each time a modification of a respective data object is entered, updating the respective status object so as to reflect the modification, and checking the respective modification status flag; if it is determined that the modification status flag indicates a first modification status, setting the modification status flag to a second modification status; in response to setting the modification status flag to the second modification status, checking the respective communication status flag; if it is determined that the communication status flag indicates a first communication status, retrieving the respective status object and sending a notification message containing the retrieved status object from the first participant system to the other participant system; upon sending of the notification message, setting the respective communication status flag to a second communication status and resetting the respective modification status flag to the first modification status; and upon receipt of a confirmation message from the other participant system by the first participant system, resetting the respective communication status flag to the first communication status, the confirmation message confirming receipt of the notification message by the other participant system.","In another aspect, the present invention provides a computer-implemented system for messaging in a computer network, the system comprising a first computer adapted to run one or more software program applications in accordance with inputs, the first computer provided with a computer program product providing computer-executable program code that, when loaded into the computer, causes the first computer to: provide a status object in relation to each of one or more data objects maintained by said one or more software program applications, the status object comprising one or more status fields for storing information representative of at least one of a delta value applied to the respective data object as a result of one or more modifications entered by said user and a total value of that data object after application of the one or more modifications; provide a modification status flag in relation to each data object; provide a communication status flag in relation to each data object; each time a modification of a respective data object is entered, update the respective status object so as to reflect the modification, and check the respective modification status flag; if it is determined that the modification status flag indicates a first modification status, set the modification status flag to a second modification status; in response to setting the modification status flag to the second modification status, check the respective communication status flag; if it is determined that the communication status flag indicates a first communication status, retrieve the respective status object and send a notification message containing the retrieved status object to at least one second computer; upon sending of the notification message, set the respective communication status flag to a second communication status and reset the respective modification status flag to the first modification status; and upon receipt of a confirmation message from the second computer, reset the respective communication status flag to the first communication status, the confirmation message confirming receipt of the notification message by the second computer.","The present invention is based on a pessimistic global approach in that it requires, after sending of a notification message by the first participant system, receipt of a confirmation message from the other participant system before allowing the first participant system to send a next notification message. At the same time, the invention supports an optimistic local (internal) approach in that it allows a user to enter modifications at a time of his choosing, without requiring the user to wait for earlier modifications to be confirmed. In this way, advantages such as tolerance and flexibility of optimistic communication protocols and advantages such as openness of pessimistic communication protocols can be combined.","The status object is updated each time a modification is entered regardless of whether or not the pessimistic protocol used for communication between the participant systems allows sending of a notification message. Thus, in a case where a user makes multiple changes to a data object, the information contained in the status object reflect these multiple changes. Once the pessimistic protocol allows sending of a notification message (as indicated by the communication status flag being set to the first communication status), the current object status is read, which may be comprised of plural modifications. In this way, multiple modifications can automatically aggregate to one notification message.","The modification status flag indicates whether or not the respective data object is in a modified state that is yet to be communicated to the other participant system. Specifically, the first modification status indicates that the data object is either in its initial state or that any modifications of the data object have already been communicated to the other participant system. On the other hand, the second modification status indicates that the data object has been changed but no notification message has yet been sent that includes the respective change.","Checking a respective communication status flag preferably includes repeating checking that communication status flag if it is determined that the communication status flag indicates the second communication status, until it is determined that the communication status flag indicates the first communication status.","In a preferred embodiment, a first display item is presented on a display of a graphical output device in relation to every data object of which the modification status flag indicates the second modification status. Also, a respective second display item can be presented on the display in relation to at least one first display item, the second display item indicating part or all of the information contained in the status object of the corresponding data object. In this way, a graphical user interface can be generated that allows the user to keep himself informed of which modified data object(s) have still to be communicated to the other participant system.","In yet another aspect, the present invention provides a computer program product providing computer-executable instructions that, when executed by a computer, cause the computer to: provide a status object in relation to each of one or more data objects maintained by one or more software program applications running on the computer, the status object comprising one or more status fields for storing information representative of at least one of a delta value applied to the respective data object as a result of one or more modifications entered by a user of the computer and a total value of that data object after application of the one or more modifications; provide a modification status flag in relation to each data object; provide a communication status flag in relation to each data object; each time a modification of a respective data object is entered, update the respective status object so as to reflect the modification, and check the respective modification status flag; if it is determined that the modification status flag indicates a first modification status, set the modification status flag to a second modification status;\n\n",{"@attributes":{"id":"p-0022","num":"0022"},"figref":"FIG. 1","b":["100","110","111","112","120","110","111","112","120","110","130","140","150","160","170","110","111","112","110","130","170","110","120","110","111","112"]},"Computer station  can, e.g., be a desktop personal computer, a laptop or notebook computer, a workstation, a minicomputer, a multiprocessor computer, a mainframe computer, a mobile computing device, a programmable personal digital assistant, or the like. Processor  can, for example, be a central processing unit (CPU), a digital signal processor (DSP), a micro-controller, or the like.","Memory  symbolizes components that allow to store data and\/or instructions permanently or temporarily. Although memory  is illustrated in  as a distinct component part of computer station , it can be implemented by suitable storage resources within processor  itself (register, cache, etc.), in nodes of network , in other computer stations, or elsewhere. Specifically, memory  can include a read only memory (ROM) portion, e.g., for permanently storing program files, and\/or a random access memory (RAM) portion for storing data such as variables and operation parameters. It can be physically implemented by any type of volatile and non-volatile, programmable and non-programmable, magnetic, optical, semiconductor and other information storage means conventionally known in the art, for example, hard disk, floppy disk, CD-ROM, DVD, DRAM, SRAM, EPROM, EEPROM, memory stick, etc.","Memory  can store software program support modules such as, for exampie, a basic input\/output system (BIOS), an operating system, a program library, a compiler, an interpreter, communication programs, driver, protocol converters, and application software programs (e.g., text processor, browser, database applications, etc.).","The present invention is embodied in a computer program product (CPP) stored in memory  and\/or in a storage location outside computer workstation , e.g., on a separate program carrier  that can be inserted in, and read by, input device . The CPP generates program signals collectively called a \u201cprogram\u201d.","The CPP provides in a computer readable manner, program code executable by processor . The program code is comprised of instructions and, optionally, data and variables. When loaded, the program code causes processor  to carry out steps forming one embodiment of a method according to the present invention. A detailed description of the method steps will be given further below. The CPP controls operation of computer station  and, if necessary, its interaction with other components of computer system . It may be provided as source code in any suitable programming language, e.g., C++, or as object code in a compiled presentation.","Although  illustrates the CPP as stored in memory , it may as well be located on program carrier  outside computer workstation . If the CPP is stored on program carrier , input device  will be adapted to allow insertion of program carrier  into input device  to retrieve the CPP. Program carrier  can be any computer-readable information carrier medium such as, for instance, a magnetic or optical disk. Instead of storing the program code in memory  or on program carrier , the CPP can also be provided to processor  in the form of program signals delivered through network  from a remote computer. The steps embodied by the program code of the CPP can be carried out solely within computer station  or in a distributed manner using additional components of computer system .","Input device  serves to input data and\/or instructions for being processed by computer station . The term input device encompasses, for example, a keyboard, a pointing device (mouse, trackball, cursor direction keys), a reading device for reading information stored on a separate information carrier (e.g., a drive for reading information from a disk, or a card reader for retrieving data from a memory card), a receiver for receiving information transmitted to computer station  from other components of computer system  through a wired or wireless link, a scanner, etc.","Output device  serves to present in a graphical manner, information resulting from processing activities within computer station . Output device  can, e.g., include a monitor or display, a plotter, a printer, or the like. Similarly to input device , output device , while mainly communicating with a user through visual presentation of processing results, may also communicate with other components of computer system . Thus, output device  may communicate a processing result through a wired or wireless link to a remote recipient.","Input device  and output device  can be combined in a single device.","Bus  and network  provide logical and physical connections by conveying instruction and data signals. While connections and communications within computer workstation  are handled by bus , connections and communications between different computers stations of computer system  and handled by network . Network  may comprise gateway and router computers dedicatedly programmed to effect data transmission and protocol conversion.","Input and output devices ,  are coupled to computer workstation  through bus  (as illustrated in ) or through network  (optionally). While signals inside computer workstation  will mostly be electrical signals, signals occurring across network  can be any signal type, e.g., electrical, optical, or radio.","Network  can be any form of dedicated or public communications network providing wired and\/or wireless access and wired and\/or wireless signal transmission across network . It can, e.g., include the Internet, an intranet (a network linking some or all of the members of a specific group, such as within a company), a LAN, a WAN, a wireless LAN, a public switched telephone network (PSTN), an integrated services digital network (ISDN), or a mobile communications network such as a UMTS (Universal Mobile Telecommunications System), GSM (Global System for Mobile Communication), or CDMA (Code Division Multiple Access) network.","Communication between computers of computer system  can be effected using any suitable transmission protocols, mechanisms and data formats. A few examples include Transmission Control Protocol\/Internet Protocol (TCP\/IP), Hyper Text Transfer Protocol (HTTP), secure HTTP, Wireless Application Protocol (WAP), Unique Resource Locator (URL), Unique Resource Identifier (URI), Hyper Text Markup Language (HTML), Extensible Markup Language (XML), Extensible Hyper Text Markup Language (XHTML), Wireless Application Markup Language (WML), Electronic Data Interchange (EDI), which governs the electronic exchange of business information between or within organizations and their IT (Information Technology) infrastructure in a structured format, an application programming interface (API), etc.","Computer stations , ,  . . . are equipped with software systems that include one or more software program applications. Typically, each computer station's software system will be adapted to generate and maintain one or more databases for storing data and variables related to a particular application run by the respective computer station. Each computer station , ,  . . . equipped with its associated software system can be referred to as a participant system, or simply participant.","In a typical scenario, participant systems , ,  run suitable business program applications that collaborate through exchange of messages to execute a business activity electronically. Network  ensures transport and delivery of such messages in an asynchronous fashion. The messages are produced and consumed by the participants' software applications. The number of participants involved in a collaborative business activity will be at least two but can be any number greater than that. Messages sent from one participant can be directed to only one other participant. Alternately, a message can be addressed to more than one other participant, e.g., to all other participants or a selected group of participants, as the particular business activity may require.","A software program application is resident on computer station  that includes a program code portion for generating and maintaining one or more data objects DO, DO, DO. Data objects DO, DO, DO . . . represent business-related information objects such as, e.g., a customer order, a set of financial, budgeting, or accounting figures, a number of items on stock, etc. A modification applied to a respective one of data objects DO, DO, DO . . . can, e.g., correspond to a change in an order position in a customer order (different quantity, size, color or the like of goods ordered), an update of financial, budgeting, or accounting figures, an updated in the number of items on stock after execution of one or more customer orders, etc. The data of data objects DO, DO, DO . . . can be any data type and format including scalar data, structured data, or character\/string data.","The software program application resident on computer station  includes another program code portion for enabling a user to enter a modification of any of data objects DO, DO, DO. For example, this program code portion can be arranged to cause generation of a graphical user interface in which a document is opened that displays the data of a particular one of data objects DO, DO, DO . . . as presently stored. Entry of a modification can, e.g., be by means of a mouse device and a keyboard of computer station . The program may provide for an authorization check to determine whether or not the user is authorized to apply modifications to the particular data object. Of course, many other procedures and formats of entering modifications of data objects DO, DO, DO . . . are conceivable and available to those skilled in the art, and the invention is not intended to be limited to a particular procedure and format.","Yet another program code portion of the software program application resident on computer station  serves for generating and maintaining a status object SO, SO, SO . . . in relation to each data object DO, DO, DO. Each status object SO, SO, SO . . . provides a current view of the corresponding data object DO, DO, DO . . . , wherein the current view reflects any modifications applied to the corresponding data object DO, DO, DO. To this end, each status object SO, SO, SO . . . may comprise one or more status fields as can be seen from the enlarged view of status object SO in . There may be a first status field SF in each status object SO, SO, SO . . . for storing information on a delta value applied to the corresponding data object as a result of one or more modifications. The delta value represents an accrued delta indicating the accumulated change of the respective data object as a result of the one or more modifications. Initially, i.e., upon establishment of the corresponding data object but before a first modification thereof, the delta value is set to zero. Alternatively or additionally, there may be second status field SF for storing information on a total value of that data object after application of the one or more modifications. The total value represents an overall metric of the corresponding data object and is initially set to the data object's initial total value.","Optionally, there may be another status field SF for storing information on a modification history of the data object associated with the particular status object. The modification history may include a counter indicating the number of modifications entered and\/or include a time stamp in relation to every modification indicating the time of entry of the respective modification.","The data objects DO, DO, DO . . . and the associated status objects SO, SO, SO . . . are conveniently stored in memory  but can be deposited in any other persistent storage location outside computer station .","Each time a user of computer station  enters a modification of one or more of data objects DO, DO, DO . . . the program code portion maintaining the status objects SO, SO, SO . . . effects an update of the corresponding status object(s). Updating involves at least one, and preferably both, of updating the accrued modification delta value stored in status field SF and updating the total value stored in status field SF. Optionally, it may also include updating the modification history stored in status field SF.","As an example, it is assumed that data object DO stores the number of items available on stock with regard to a specific product. Initially, there may be 20 items on stock. Thus, the corresponding status object SO will initially be set to (0; 20; . . . ) where \u201c0\u201d indicates the delta value, \u201c20\u201d indicates the total value, and the ellipses stand for any further status elements that may be present in status object SO such as the modification history. In case a user operating on data object DO from computer station  removes five items from the stock, he enters the corresponding modification of data object DO, causing status object SO to be updated to (5; 15; . . . ). Thereafter, two items may be added by the user to the stock, resulting in an update of status object SO to (3; 17; . . . ).","Computer system  is configured as a distributed system where the same data can be worked on from different computers. To this effect, computer stations ,  . . . store \u201ccopies\u201d of one or more of data objects DO, DO, DO . . . stored on computer station  with these copies representing the same data as data objects DO, DO, DO. For example, and as illustrated in , computer station  may store a data object DO\u2032 that represents the same data as data object DO, and computer station  may store a data object DO\u2033 representing the same data as data object DO. Moreover, computer stations ,  may store data objects DO\u2032 and DO\u2033, respectively, representing the same data as data object DO. Each of computer stations ,  stores a respective status object in relation to each of its data objects. Correspondingly, computer station  stores status objects SO\u2032 and SO\u2032, and computer station  stores status objects SO\u2033 and SO\u2033.","Because asynchronous messaging is used for communication between computer stations , ,  . . . a user accessing a data object on one computer has no real time view of a corresponding data object stored on another computer. To synchronize the various data objects (or data sets), electronic messages are exchanged between users operating on the same data to notify each other of modifications applied to the data. When such a notification message is received by a computer station of a user, the corresponding data object stored on this computer station is adjusted accordingly. In this way, best possible up-to-dateness of all data objects representing the same data can be achieved.","In the following, the present invention will be set forth by way of an exemplary, non-limiting embodiment with reference to the flowchart diagram of  and the graphical presentation depicted in . In this exemplary embodiment, the invention is implemented using the network topology illustrated in, and explained with respect to, . The messaging methodology according to the present invention can be implemented regardless of the structure, format, and type of data that are hosted, stored, processed, etc.","In the exemplary embodiment, modifications are applied to data object DO by a user of computer station  and notification of these modifications is from computer station  to computer station . It is to be understood, however, that the principles of the present invention as laid out herein are likewise applicable to the notification of modifications in the opposite direction, i.e., from computer station  to computer station , between any other pair or group of participants, and in relation to any other data object. Thus, the following description of the exemplary embodiment is by no means intended to be limiting to the scope of the present invention. In particular, notification of modifications of one or more data objects can be from one participant to more than one other participant, for example, to all other participants of computer system  or only a part number of other participants. Also, one or more participants other than computer station  can be equipped with a computer program product embodying the messaging methodology of the present invention.",{"@attributes":{"id":"p-0049","num":"0049"},"figref":["FIG. 2","FIG. 2"],"b":["130","110","130","1","140","130","1","1","1","1","130","1","111","1","130"]},"If it is determined that flag MSF is \u201c0\u201d, the routine is not executed further as data object DO has not been changed since its generation or since any last notification message. On the other hand, if it is determined that flag MSF is set to \u201c1\u201d, this indicates that data object DO has been changed and the change needs to be communicated to computer station .","Thereafter, the routine advances to check another binary flag called communication status flag CSF. This flag serves to indicate a communication status in relation to modifications applied to data object DO. Specifically, a value \u201c0\u201d of flag CSF indicates that no notification message in relation to data object DO is underway or waiting for acknowledgment by computer station . Thus, value \u201c0\u201d of flag CSF indicates a free notification path, allowing computer station  to send a notification message to computer station . On the other hand, a value \u201c1\u201d of flag CSF indicates a busy notification path, requiring computer station  to wait for a confirmation message from computer station  before being allowed to send a further notification message.","It is to be understood that when referring to a busy notification path, no physical blockage due to, e.g., overload of network  or the like is meant. Rather, flag CSF simply reflects the concept of a pessimistic communication protocol where sending of a notification message is not allowed until confirmation of a previous notification message is received. In this regard, a busy notification path is a mere reference to a situation where a notification message has been sent off by computer station  and no acknowledgment of receipt of that notification message by computer station  has yet been received on the part of computer station .","Flag CSF will also be stored in memory  or in an internal register of processor . Suitable control signals will be generated by processor  to effect setting and resetting of flag CSF.","If it is determined that flag CSF is set to value \u201c1\u201d, no new notification message can be created and sent off. Then, the routine enters a waiting loop repeating checking flag CSF, which is only reset to \u201c0\u201d after receipt of a confirmation message from computer station  confirming receipt of an earlier notification message. On the other hand, if it is determined that flag CSF is set to \u201c0\u201d, processor  proceeds by reading status object SO and creating a notification message that contains the information read from status object SO. Thereafter, computer station  sends the notification message over network  to computer station .","The status information packed in a notification message can result from a single change to data object DO, or from multiple changes. The methodology of the present invention allows a user to enter modifications of data object DO regardless of whether or not the notification path from computer station  to computer station is busy. As changes made to data object DO are accumulated in status object SO, changes do not need to be communicated to computer station  as they are entered. Rather, whenever the notification path from computer station  to computer station  becomes available, the current status of data object DO is retrieved, which reflects all modifications applied up to now.","In the flowchart diagram of , in a next step following sending-off of the notification message, flag CSF is set to value \u201c1\u201d, indicating that the notification path from computer station  to computer station  is busy and cannot be used for sending a further notification message until an acknowledgment is received from computer station . At the same time, flag MSF is reset to value \u201c0\u201d, indicating that the present (modified) status of data object DO has been communicated to computer station . As soon as an acknowledgment in the form of a confirmation message is received by computer station , flag CSF is also reset to value \u201c0\u201d. After a notification message has been successfully sent off, the flow returns to the beginning of the routine to check on flag MSF. If no further modification of data object DO has been entered in the meantime by the user, flag MSF will still be set to \u201c0\u201d. If, however, the user has made a further change to data object DO, flag MSF will indicate \u201c1\u201d, and the procedure outlined above is executed again.",{"@attributes":{"id":"p-0057","num":"0057"},"figref":["FIG. 3","FIG. 3"],"b":["110","170","1","2","3","1","2","3","1","1","1","1","1"]},"In the other display window (status object window), a display item IT may be presented that indicates the current content of the status object of a data object. Particularly, only one status object may be presented at a time as controlled by the user selecting one of the data objects in the data object window with, e.g., a mouse pointer device.","Whenever a notification message has been sent, processor  may cause an update of the presentation in the data object window, and whenever the user enters a modification of a data object, processor may cause an update of the presentation in the status object window if the corresponding status object is presently displayed.","The present invention as implemented in computer system  allows changes to be made to a local data object, e.g., a purchase order object, without violating the requirements of a pessimistic communication protocol. It can be viewed as providing a mixed pessimistic\/optimistic protocol that supports open communication protocols like RosettaNet externally, i.e., for communication between computer stations , ,  . . . while at the same time supporting tolerant and flexible protocols internally, i.e., for entry of modifications locally at each computer station. The invention thus allows to realize and implement a secure and reliable messaging protocol in an open architecture computer system while providing unmatched flexibility and customer friendliness.","While the messaging methodology of the present invention can be used for communication between all participants of a distributed computer system, it is likewise conceivable to employ the messaging methodology of the present invention for communication between some of the participants only and use another communication protocol for communication between other participants. For example, the same sender application may communicate with two receiver applications, using the messaging methodology of the present invention for communication with one of the receiver applications and a pure optimistic protocol for communication with the other receiver application.","While the invention has been described with reference to a preferred embodiment, those skilled in the art will readily appreciate that various changes may be made without departing from the scope of the invention. The invention is therefore intended to include all embodiments that fall within the scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Further objects, features, and advantages of the present invention will become apparent from the following description taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0019","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0021"},"figref":["FIG. 3","FIG. 1"]}]},"DETDESC":[{},{}]}
