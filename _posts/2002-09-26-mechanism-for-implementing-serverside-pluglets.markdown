---
title: Mechanism for implementing server-side pluglets
abstract: A server-centric approach is disclosed for enabling a browser to handle content types that it cannot inherently process. Rather than executing plug-ins on a client, pluglets are executed on one or more servers. A pluglet can perform any function that a plug-in can perform. Because a pluglet resides and executes on a server, the shortcomings of the plug-in approach are overcome. Specifically, a client no longer needs to have large amounts of storage and processing resources since pluglets do not run on clients. Also, a user no longer needs to install plug-ins on a client. In addition, maintenance of the overall system is greatly simplified. To replace, add, or remove functionality, all that needs to be done is to replace, add, or remove pluglets from a relatively small number of servers. It is no longer necessary to maintain plug-ins on a relatively large number of clients. Thus, the server-centric approach enables the benefits of plug-in technology to be realized, but does so without suffering the associated shortcomings.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06973480&OS=06973480&RS=06973480
owner: Sun Microsystems, Inc.
number: 06973480
owner_city: Santa Clara
owner_country: US
publication_date: 20020926
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENT(S)","System Overview"],"p":["This invention relates generally to computing technology, and more particularly to a mechanism for implementing server-side pluglets.","In the process of accessing web pages from various servers on the Internet, a browser program encounters many different types of content. The browser has inherent functionality to render some types of content (e.g. simple HTML), but for other types of content (such as data in Adobe Acrobat format, audio\/visual data, Java applets, etc.), the browser needs some aid from other programs. To enable a browser to handle content types that the browser does not have inherent functionality to process, \u201cplug-ins\u201d are typically used. A plug-in is a set of code that plugs in to an interface of the browser. While a plug-in is a set of code separate from the browser, it can be invoked by the browser, via the interface, to process certain types of content. Thus, with plug-ins, it is possible to extend the types of content that a browser can handle.",{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1","b":["108","110","102","108","110","112","110","102","108","108","110"]},"In operation, when the browser  receives a web page from a server  across a network , it determines whether the web page contains any content which is of a type that the browser cannot inherently process. If so, the browser  determines the content type, determines the plug-in  registered to handle that content type, invokes the appropriate plug-in , and forwards the content to the plug-in  for processing. In this manner, the browser  is able to handle content types that it does not have inherent functionality to process.","While effective in some implementations, the above plug-in approach has some significant drawbacks. A first drawback is that the plug-ins  need to reside and execute on the client . Because of the many different types of content that can be found on web pages, there may need to be many different plug-ins  on the client . Also, some of these plug-ins  may be rather sophisticated, which means that they can be quite large. As a result, in order to implement the above approach, a client  needs to have a large amount of storage and a large amount of processing resources. For powerful clients, this is not a problem, but for less powerful clients, such as PDA's (personal digital assistants) and network computers, which have limited storage and processing resources, the above approach cannot be effectively implemented.","Another drawback of the above approach is that it is difficult for less sophisticated users to implement. Because a plug-in  resides on the client , it must be installed on the client  before it can be invoked. This usually involves downloading the plug-in  from some source, and then running an installation program to install the plug-in on the client . Users with little computer expertise may find this process difficult and, at the very least, inconvenient.","Yet another drawback of the above approach is that it is difficult to maintain for large-scale systems (i.e. systems with a large number of clients ). Because plug-ins  reside on clients , if a plug-in  needs to be replaced, added, or removed from an overall system, an administrator will have to replace, add, or remove the plug-in  from every single client  in the system. For large-scale systems, this can be a daunting and very time-consuming task.","The plug-in approach also has a performance drawback. Specifically, each time a user enters a page that invokes a plug-in, the plug-in is started and initialized. When the user exits that page, the plug-in is terminated. This overhead of starting, initializing, and stopping the plug-in every time the plug-in is invoked degrades the performance of the client.","In view of the shortcomings discussed above, it is clear that the plug-in approach to extending a browser's ability to handle different types of content is less than optimal. As a result, an improved approach is needed.","To overcome the shortcomings of the plug-in approach, there is provided a server-centric approach. In one embodiment, rather than executing plug-ins on a client, pluglets are executed on one or more servers. A pluglet can perform any function that a plug-in can perform. Because a pluglet resides and executes on a server, the shortcomings of the plug-in approach are overcome. Specifically, a client no longer needs to have large amounts of storage and processing resources since pluglets do not run on clients. Also, a user no longer needs to install plug-ins on a client. In addition, maintenance of the overall system is greatly simplified. To replace, add, or remove functionality, all that needs to be done is to replace, add, or remove pluglets from a relatively small number of servers. It is no longer necessary to maintain plug-ins on a relatively large number of clients. Thus, the server-centric approach enables the benefits of plug-in technology to be realized, but does so without suffering the associated shortcomings.","With reference to , there is shown a functional block diagram of a system  in which one embodiment of the present invention may be implemented. As shown, system  comprises a client , a server , and a network  for facilitating communication between the client  and the server . For purposes of the present invention, network  may be a LAN (local area network), a WAN (wide area network) such as the Internet, or any other mechanism that enables the client  to communicate with the server . For the sake of simplicity, only one client  and one server  are shown in system . It should be noted, however, that system  may comprise any number of clients  and servers .","Client","In one embodiment, the client  comprises a browser  and a client-side pluglet network interface . The browser  enables a user to access and to render content residing on one or more remote servers . Browser  may take the form of any known browser, such as Netscape Communicator, Internet Explorer, or any other browser. Basically, any mechanism capable of enabling a user to access and to render content residing on remote servers may serve as the browser .","In the course of accessing and rendering content, client  may interact with one or more pluglets . To facilitate this interaction, there is provided the client-side pluglet network interface . In one embodiment, network interface  performs a number of functions, including but not limited to: (1) maintaining a connection between client  and a server ; (2) receiving events from the browser ; (3) forwarding selected events to one or more appropriate pluglets ; (4) receiving updated processed data from the one or more pluglets ; and (5) forwarding the updated processed data to the browser  for rendering. Basically, network interface  acts as an intermediary between the pluglets  and the browser  to make interaction with the pluglets  transparent to the browser . The operation and interaction of the browser  and network interface  will be elaborated upon in a later section.","In one embodiment, the functionality of the browser  and the network interface  are implemented by having one or more processors (not shown) execute one or more sets of computer code. As an alternative, the functionality of these components ,  may be implemented using hardwired logic. For purposes of the present invention, these and other implementations may be used.","Server","In one embodiment, server  comprises a request processing module (RPM) , a pluglet manager , one or more pluglets , and a server-side pluglet network interface . The RPM  is the component that receives content requests from the browser . In response to a content request, the RPM  obtains a set of content specified by the request. In obtaining the content, the RPM  may simply retrieve the content from a data store (not shown) if the content is static, or the RPM  may dynamically generate the content. The RPM  may dynamically generate content by executing a Java servlet, a CGI (common gateway interface) program, a JSP (Java server page), or any other mechanism that gives rise to dynamically generated content.","After obtaining the requested content, the RPM  returns the content to the browser . In one embodiment, before sending the requested content to the browser , the RPM  first determines whether any subset of the requested content is of a type that cannot be inherently rendered by the browser . For example, a subset of the content may be in pdf format, which requires Adobe Acrobat to render. If so, then the RPM  enlists the aid of the pluglet manager . Specifically, the RPM  passes the subset of the content to the pluglet manager  for processing by one of the pluglets . In return, the RPM  receives from the pluglet manager  a set of processed data, which represents the subset of the content, but which is in a format that the browser  can inherently process. For example, the processed data may be a transformation of the content in pdf format into an image (e.g. a set of pixels) that the browser  can render. This processed data, along with the rest of the requested content, is sent to the browser  in response to the content request. Because the processed data is in a format that the browser  can inherently process, the browser  will be able to render all of the requested content. Hence, through the use of pluglets , the browser  is able to handle content types that it does not have inherent capability to process.","To enable the pluglets  to be properly managed, there is provided the pluglet manager . The pluglet manager  manages all aspects of the operation of the pluglets , including interaction with the RPM , interaction with the server-side pluglet network interface , and registration of the pluglets . Interaction between the pluglet manager  and the RPM  and network interface  will be elaborated upon in a later section. With regard to registration, whenever a pluglet  is added to the server , it is registered with the pluglet manager . In the registration process, the content type or types that the pluglet  can process is specified. Thus, after registration, the pluglet manager  knows which pluglet  to invoke for which content types. For purposes of the present invention, any number of pluglets  may be registered with the pluglet manager , and each pluglet  may implement any desired functionality. So long as a pluglet  can register and interact with the pluglet manager , it can be implemented in the server . In one embodiment, the pluglet manager  starts and initializes each pluglet  upon server start-up. Once started, each pluglet  keeps running throughout the course of normal operation. That way, when a pluglet  is invoked during normal operation, no delay or overhead is incurred for starting and stopping the pluglet .","The server-side pluglet network interface  enables the server  to interact with the client-side pluglet network interface  of the client . In one embodiment, the server-side pluglet network interface  performs various functions, including: (1) maintaining a connection with the client ; (2) receiving events from the client-side pluglet network interface ; (3) forwarding those events to the pluglet manager  for processing by one or more of the pluglets ; (4) receiving updated processed data from the pluglet manager ; and (5) forwarding the updated processed data to the client-side pluglet network interface . Basically, the server-side pluglet network interface  acts as an intermediary to facilitate pluglet-related information exchange between the client  and the server .","In one embodiment, the functionality of the RPM , pluglet manager , pluglets , and network interface  are implemented by having one or more processors (not shown) execute one or more sets of computer code. As an alternative, the functionality of these components , , ,  may be implemented using hardwired logic. For purposes of the present invention, these and other implementations may be used.","Operation","The various components of sample system  have been disclosed. With reference to , the operation of the system  in accordance with one embodiment of the present invention will now be described.  is an operational flow diagram illustrating the operation of the client .  is an operational flow diagram illustrating the operation of the server .","To initiate operation, a user causes the browser  to send () () a request for content to the server . The user may cause the browser  to send this request in various ways, including but not limited to selecting a link on a web page currently being rendered by the browser , or by typing in a URL (universal resource locator). In one embodiment, the browser  includes in this request a set of information pertaining to the client . This set of information may include, for example, an indication of the type of client (e.g. PDA, personal computer, network computer, etc.), what processor is running on the client , how much memory and storage the client  has, and any other information that indicates what resources are available on the client . As will be elaborated upon in a later section, this information enables a pluglet  to customize processed data for the client .","The request for content is received () () by the RPM  of the server . In response, the RPM  obtains () the content specified in the request. If the requested content is static content, the RPM  retrieves the content from a data content store (not shown). Otherwise, the RPM  may dynamically generate the requested content by executing a Java servlet, a CGI (common gateway interface) program, a JSP (Java server page), or any other mechanism that gives rise to dynamically generated content.","After the requested content is obtained, the RPM  determines () whether the content comprises any subsets of content that is of a special type that the browser  cannot inherently process. In one embodiment, a subset of content has a MIME type (multipurpose Internet mail extension type) associated therewith. If the MIME type associated with a subset of content is of a type that the browser  cannot inherently process, then the RPM  knows that the subset of content comprises special content. If the requested content does not comprise any subsets of special content, then the RPM  sends () the requested content back to the browser . However, if the requested content comprises any subset of special content, then the subset of special content is transformed () before the requested content is sent to the browser . For the sake of example, it will be assumed that the requested content comprises one subset of special content (although it should be noted that the requested content may comprise any number of subsets of special content).","To transform the subset of special content, the RPM  invokes the pluglet manager . In this invocation, the RPM  passes to the pluglet manager : (1) the information pertaining to the client  that was provided as part of the content request from the browser ; (2) the subset of special content; and (3) the type (e.g. the MIME type) of the special content. Based upon the content type, the pluglet manager  selects one of the pluglets  to process the special content (for the sake of example, it will be assumed that pluglet () is selected). The pluglet manager  then invokes the selected pluglet (), and passes to it: (1) the information pertaining to the client  that was provided as part of the content request from the browser ; and (2) the subset of special content.","In response to this invocation, the pluglet () creates a new session ID, since this is the first time the pluglet () is processing this subset of special content for this client . The session ID enables the pluglet () to uniquely identify this subset of special content for this client  so that it can maintain state. The pluglet () then proceeds to process the subset of special content to transform it into a set of processed data. In one embodiment, the processed data represents the transformation of the special content from a format that the browser  cannot inherently process into a format that it can inherently process. For example, the special content may be in pdf format, which the browser  cannot process, and the processed data may be an image (e.g. pixels) that the browser  can inherently render. In one embodiment, the processed data may further comprise one or more controls (e.g. one or more scroll buttons, an \u201cOK\u201d button, a \u201cCancel\u201d button, etc.). When activated, these controls may cause the processed data to have to be updated.","In deriving the processed data, the pluglet () may take into account the information pertaining to the client . For example, if the information indicates that the client  is a personal computer with large amounts of storage and processing resources, then the pluglet () may generate a set of processed data that is more elaborate (e.g. an image with high resolution). On the other hand, if the information indicates that the client  is a PDA, then the pluglet () may generate a bare-bones set of processed data. Because the pluglet () has information on the resources available to the client , the pluglet () can customize the processed data for the client .","After deriving the processed data, the pluglet () provides to the pluglet manager : (1) the session ID; and (2) the set of processed data. In turn, the pluglet manager  passes this information on to the RPM . In addition, the pluglet manager  provides to the RPM  a reference to the pluglet (). Upon receiving this information, the RPM  prepares () a set of return content to return to the browser . In one embodiment, this return content includes: (1) the part of the original requested content that did not contain special content; (2) the set of processed data from the pluglet (); (3) the reference to the pluglet (); (4) the session ID; and (5) an indication that the set of processed data is associated with a pluglet. In one embodiment, the subset of special content is replaced by the set of processed data and, hence, is not included in the return content. After the set of return content is prepared, the RPM  sends () the return content to the browser .","The return content is received () () by the browser . In response, the browser  renders the return content. Because everything in the return content, including the set of processed data, is in a format that can be inherently processed by the browser , the browser  is able to render the entire set of return content. To render () the set of processed data, the browser  sets aside a specific display area, and renders the processed data within that display area. In addition, from the indication inserted into the return content by the RPM , the browser  ascertains that the set of processed data is associated with a pluglet. That being the case, the browser  knows to interact with the client-side pluglet network interface . Specifically, the browser  sends to the network interface : (1) the reference to the pluglet (); (2) the session ID; and (3) information pertaining to the display area in which the processed data is rendered. In one embodiment, this information may include the coordinates of the upper left hand corner of the display area, and the dimensions of the display area. Thereafter, the browser  proceeds to monitor () for events.","In one embodiment, the browser  monitors for and forwards all events to the network interface . Events may include user interface events (such as mouse clicks, keyboard actions, etc.) and other events (such as events from the operating system). Upon receiving these events, the network interface  determines whether the events affect the processed data that is being displayed in the display area. In one embodiment, the network interface  makes this determination by determining whether an event took place within the display area (e.g. whether a mouse click occurred within the display area). If not, the network interface  ignores the event. If so, the network interface  forwards () the event to the pluglet () that originally generated the processed data for processing.","To forward the event to the pluglet (), the client-side pluglet network interface , in one embodiment, communicates with the server-side pluglet network interface . The first time these components ,  communicate, they interact to form a connection that can be used to carry out future communications. After the connection is formed, the client-side pluglet network interface  sends the following information to the server-side pluglet network interface : (1) the reference to the pluglet (); (2) the session ID; and (3) the event. The server-side pluglet network interface  receives () () this information, and forwards it to the pluglet manager , which, in turn, forwards the session ID and the event to the pluglet () for processing.","Using the session ID, the pluglet () accesses the state information pertaining to the processed data that it previously generated. After accessing the state information, the pluglet () processes () the event (which, for example, may be a mouse click), to determine whether the event causes the processed data to have to be updated. For example, the pluglet () may determine whether the mouse click occurred on a control (e.g. a scroll button). If the event does cause the processed data to have to be updated, then the pluglet () generates a set of updated processed data based upon the event. The set of updated processed data may, for example, show the next section of a pdf document after the document has been scrolled. Like the first set of processed data, the set of updated processed data may also comprise one or more controls. The pluglet () provides the set of updated processed data to the pluglet manager . In turn, the pluglet manager  forwards the updated processed data to the server-side pluglet network interface , which sends () the updated processed data to the client-side pluglet network interface .","The client-side pluglet network interface  receives () () the set of updated processed data, and provides it to the browser . In response, the browser  renders () the updated processed data in the display area to replace the processed data that was previously rendered in the display area. Thereafter, the browser  loops back to () to monitor for more events. This process of sending events to the pluglet () on the server  and receiving updated processed data from the pluglet () on the server  continues until the user closes the display area. In the manner described, a tight and active coupling is maintained between the client  and the pluglet () on the server  to enable the pluglet () to behave like a plug-in running on the client . Thus, plug-in functionality is achieved without storing and executing plug-ins on the client .","Hardware Overview","As noted previously, in one embodiment, the various components (e.g. , , , , , and ) shown in  are implemented as sets of instructions executable by one or more processors. The components may be implemented as part of an object oriented programming system, including but not limited to the JAVA\u2122 programming system manufactured by Sun Microsystems, Inc. of Palo Alto, Calif.  shows a hardware block diagram of a computer system  in which one embodiment of the client  and\/or the server  may be implemented. Computer system  includes a bus  or other communication mechanism for communicating information, and a processor  coupled with bus  for processing information. Computer system  also includes a main memory , such as a random access memory (RAM) or other dynamic storage device, coupled to bus  for storing information and instructions to be executed by processor . Main memory  may also be further used to store temporary variables or other intermediate information during execution of instructions by processor . Computer system  further includes a read only memory (ROM)  or other static storage device coupled to bus  for storing static information and instructions for processor . A storage device , such as a magnetic disk or optical disk, is provided and coupled to bus  for storing information and instructions.","Computer system  may be coupled via bus  to a display , such as a cathode ray tube (CRT), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","According to one embodiment, the functionality of the present invention is provided by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another computer-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The term \u201ccomputer-readable medium\u201d as used herein refers to any medium that participates in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or electromagnetic waves, such as those generated during radio-wave, infra-red, and optical data communications.","Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punchcards, papertape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.","Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface . The received code may be executed by processor  as it is received, and\/or stored in storage device , or other non-volatile storage for later execution. In this manner, computer system  may obtain application code in the form of a carrier wave.","At this point, it should be noted that although the invention has been described with reference to a specific embodiment, it should not be construed to be so limited. Various modifications may be made by those of ordinary skill in the art with the benefit of this disclosure without departing from the spirit of the invention. Thus, the invention should not be limited by the specific embodiments used to illustrate it but only by the scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 4","FIG. 2"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 5","FIG. 2"]}]},"DETDESC":[{},{}]}
