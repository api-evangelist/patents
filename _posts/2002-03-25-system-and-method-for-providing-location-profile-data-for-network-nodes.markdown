---
title: System and method for providing location profile data for network nodes
abstract: A system for providing relational data for a hierarchically-organized plurality of nodes is provided, such as for providing physical location data of a node in an enterprise network. The system includes a hierarchical database system storing network hierarchy data for the plurality of nodes, such as an LDAP database. A configuration repository system stores relational data associated with one or more of the nodes, such as the room and floor location of each node. The relational data of the configuration repository system is organized in a bottom-up order and the network hierarchy data of the hierarchical database system is organized in a top-down order, such that the location of a node in an organization can be determined by searching using an application programming interface that goes from the node location upwards through the network hierarchy.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07590618&OS=07590618&RS=07590618
owner: Hewlett-Packard Development Company, L.P.
number: 07590618
owner_city: Houston
owner_country: US
publication_date: 20020325
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application is related to U.S. Pat. Ser. No. 09\/435,300, entitled \u201cSystem and Method for Integrating Software Management and Distribution,\u201d filed Nov. 5, 1999.","The present invention pertains to the field of network information management. More specifically, the invention relates to a system and method for configuration information management that allows configuration data to be assigned in a relational database that is searchable in an inverse hierarchical manner.","Systems for generating configuration data are known in the art. For example, the Lightweight Directory Access Protocol (LDAP) allows data relating to each node in a network to be generated and stored in a top-down hierarchical structure, such that the location of a node in the network can be determined based on one or more parent nodes. For example, the LDAP generates node location data in the format parent1\/parent2\/node, where parent1 and parent2 are also nodes that have a hierarchical location in the network that is \u201cabove\u201d the node.","While LDAP and other network node data structuring systems allow nodes to be located relative to other nodes, they do not provide additional information about a node that is required in order to perform certain functions, such as to configure software for operation on the node. For example, a node may require access to a printer, but the printer that is physically located near the node cannot be determined without viewing a map having associated printer identification data. Likewise, the user of a node may require access to certain applications or files based on the user's function within the organization, but users having many different function may be located in the same location relative to a given parent node. This node-specific data must be determined for each user, and often requires an operator to be physically present in order to install software applications.","In accordance with the present invention, a system and method for providing configuration data for network nodes are provided that overcome known problems with systems and methods for determining configuration data that are location, application or user specific.","In particular, a system and method for providing configuration data are provided that use a hierarchical database generated using LDAP or other processes and a relational database that is synchronized to the hierarchical data, which can be searched in a reverse hierarchical order to determine location profile data for a node.","In accordance with an exemplary embodiment of the present invention, a system for providing relational data for a hierarchically-organized plurality of nodes is provided, such as for providing physical location data of a node in an enterprise network. The system includes a hierarchical database system storing network hierarchy data for the plurality of nodes, such as an LDAP database. A configuration repository system stores relational data associated with one or more of the nodes, such as the room and floor location of each node. The relational data of the configuration repository system is organized in a bottom-up order and the network hierarchy data of the hierarchical database system is organized in a top-down order, such that the location of a node in an organization can be determined by searching using an application programming interface that goes from the node location upwards through the network hierarchy.","The present invention provides many important technical advantages. One important technical advantage of the present invention is a system and method for providing configuration data that uses a hierarchical database to provide a network location of each node, and which synchronizes the hierarchical database with a relational database that stores profile data for each node based on one or more sets of data that are not related to the network hierarchy, such as physical location, the location of the user of the node within an organization, the applications that can be used on the node, or other suitable data. The relational database is synchronized to the hierarchical data, and application programming interfaces are provided that allow a reverse hierarchical order search to be used to locate data in the relational or hierarchical database.","Those skilled in the art will further appreciate the advantages and superior features of the invention together with other important aspects thereof on reading the detailed description that follows in conjunction with the drawings.","In the description that follows, like parts are marked throughout the specification and drawings with the same reference numerals, respectively. The drawing figures might not be to scale, and certain components can be shown in generalized or schematic form and identified by commercial designations in the interest of clarity and conciseness.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1","b":["100","100"]},"System  includes application distribution system , which can be implemented in hardware, software, or a suitable combination of hardware and software, and which can be one or more software systems operating on a general purpose server platform. As used herein, a software system can include one or more objects, agents, lines of code, threads, subroutines, databases, application programming interfaces (APIs), web browser plug-ins, or other suitable data structures, source code (human readable), object code (machine readable), and can include two or more different lines of code or suitable data structures operating in two or more separate software applications, on two or more different processing platforms, or in other suitable architectures. In one exemplary embodiment, a software system can include one or more lines of code or other suitable software structures operating in a general purpose software application, such as an operating system, and one or more lines of code or other suitable software structures operating in a specific purpose software application. In another exemplary embodiment, a software system can be implemented as a distributed software system, on a different processing platform than that shown in the exemplary embodiments herein, or in other suitable manners.","Application distribution system  is used to distribute packages of software that have been assembled for installation on an endpoint, such as using an assembly system and method described in U.S. Pat. Ser. No. 09\/435,300, entitled \u201cSystem and Method for Integrating Software Management and Distribution,\u201d filed Nov. 5, 1999, which is hereby incorporated by reference for all purposes. An endpoint can be a suitable processor platform, such as a laptop computer, a desktop computer, a workstation, a handheld device, a peripheral component such as a scanner, a printer, a copy machine, a fax machine or other suitable systems having a processor and processing capabilities.","Application distribution system  is coupled to primary router . As used herein, the term \u201ccouple,\u201d and its cognate terms such as \u201ccouples\u201d and \u201ccoupled,\u201d can include a physical connection (such as through a copper conductor), a virtual connection (such as through randomly assigned memory locations of a data memory device), a logical connection (such as through one or more logical devices of a semiconducting circuit), a hypertext transfer protocol connection, other suitable connections, or a suitable combination of such connections. In one exemplary embodiment, systems and components are coupled to other systems and components through intervening systems and components, such as through an operating system of a general purpose server platform.","Application distribution system  provides files to primary router  for distribution to a plurality of endpoints. Application distribution system  coordinates the transmission of files used for configuring the software applications so that the distribution of the software applications to the endpoints is optimized. Primary router  is used to distribute the files as a plurality of messages in a modified publish and subscribe format, where the address for each message is assigned by application distribution system  based on the location of the endpoints.","Primary router  can be implemented in hardware, software, or a suitable combination of hardware and software, and can be one or more software systems operating on a general purpose server platform. Primary router  is an application layer router, as opposed to a hardware layer router. In one exemplary embodiment, in the Open Systems Interconnection (OSI)networking model, an application layer router would operate in layer  of the OSI model, whereas a physical layer router would operate in layer  of the OSI model. Thus, primary router  can operate on a suitable network node that is normally not used for software distribution, such as a server, a workstation, or other suitable processing platforms. In this manner, primary router  can be selected based on an optimal network architecture, as opposed to using an existing hardware layer router that may not be optimally located for distribution of software in an enterprise.","Primary router controller  is coupled to primary router , and performs control of primary router . In one exemplary embodiment, primary router controller  can be implemented in hardware, software, or a suitable combination of hardware and software, and can be one or more software systems operating on a general purpose server platform. Primary router controller  receives messages from primary router  and stores the messages for subsequent transmission to other nodes in the distribution system. In one exemplary embodiment, primary router controller  stores messages that include one or more files, and then provides the messages to primary router  for transmission at predetermined times, upon the occurrence of predetermined events, or in other suitable manners. The processor resources of primary router  can thus be optimized, so as to facilitate rapid distribution of software throughout the enterprise from a centralized location.","Primary router  is coupled to secondary router  and secondary router , such as through a network. Secondary router , secondary router , secondary router controller  and secondary router controller  can each be implemented in a manner similar or identical to that of primary router  and primary router controller , respectively. Secondary router  and secondary router  receive messages containing files for distribution to endpoints from primary router . The messages are addressed and distributed in a modified publish and subscribe process that uses the connection between secondary router  and primary router  as a first channel, and the connection between secondary router  and primary router  as a second channel. In this manner, primary router  distributes messages to secondary router  and secondary router  by posting those messages to the corresponding channel. Thus, files to be distributed through primary router  and secondary router  and secondary router  can be addressed using a conventional publish and subscribe process where the message is addressed by identifying the channel to which the message should be routed, but where the \u201csubscription\u201d process is performed using standard network messaging functions.","Secondary router controller  and secondary router controller  are used to store and process the messages and files as they are received, so that the messages and files can then be routed through secondary router  and secondary router , respectively, in accordance with router processor capacity, bandwidth of the communications media, at predetermined times, in response to predetermined events, or based on other suitable criteria.","Secondary router  is coupled to endpoint  and endpoint , and secondary router  is coupled to endpoint  and endpoint , such as by a single network connection, two network connections as shown, or other suitable communications media. Files are transmitted in the form of messages from secondary router  to endpoints  and , and from secondary router  to endpoints  and , such as upon receipt of notification of a predetermined event, after the expiration of a period of time, or in accordance with other suitable routing commands. In addition, the addressing of messages from secondary router  to endpoint  and endpoint  is performed by using a modified publish and subscribe message format. In this manner, application distribution system  can address files for distribution to endpoints  through  by identifying the first channel to secondary router  or secondary router , and the second channel to the endpoint, where the existing network messaging software is used to install the files on the endpoints from the secondary routers. Thus, system  uses a modified publish and subscribe message format to distribute software in an enterprise, so as to deploy software systems on a large number of endpoints. System  allows the transmission of large numbers and sizes of files over application layer routers and communications media that does not overload the processor capabilities of the routers, and that does not overload the bandwidth of the communications media. In this manner, application distribution system  can sequence the distribution of files in a manner that optimizes the existing system architecture. Although two layers of routers are shown in this exemplary embodiment, a suitable number of routers can be used be used between endpoints. Likewise, the number of routers between application distribution system  and each endpoint does not need to be uniform. For example, some endpoints might be reached through a single router and associated publish and subscribe channels, whereas other endpoints might be reached through 10 or more router layers.","Gateway  can be implemented in hardware, software, or a suitable combination of hardware and software, can be one or more software systems operating on a general purpose server platform. In one exemplary embodiment, gateway  is an existing server node in a network that is used as an application layer gateway for the purpose of facilitating enterprise software distribution. The enterprise software distribution process may require response messages to be generated by endpoints  through  and transmitted back to application distribution system  or other suitable systems. Gateway  can be used to return messages in response to event notification messages or other data transmitted through primary router  to secondary routers  or  so as to trigger subsequent transmission of messages to endpoints  and . Gateway  is coupled to endpoints  through , such as through the network connection between secondary routers  and secondary router , or by other suitable means. Thus, gateway  can be used to receive and coordinate message transmissions from endpoints  through  to application distribution system  or other suitable systems.","In operation, system  can be used to distribute software in an enterprise that includes a large number of nodes in geographically dispersed areas. System  allows software to be transmitted to each node using modified publish and subscribe messaging that uses existing network communications systems and allows file transmission to be coordinated through timing or in response to events, and to optimize the use of application layer router processing capabilities and bandwidth of network connections. In this manner, application distribution system  can determine an optimal processor and bandwidth loading based on the distribution of software to endpoints, and can further address files for distribution to endpoints in a manner that does not require those files to be individually addressed, broadcast, or that does not require the endpoints to determine the files that are needed and to subscribe to channels to receive such files. In this manner, application distribution system  can provide a sequence of file distribution based on optimized routing practices, such as by transmitting messages to endpoints to determine configuration information and then sequencing specific software to endpoints based on geographical, functional, or other parameters and network bandwidth and resources.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2","b":["200","200","102","202","204","206","208","210","212"]},"Endpoint configuration system  includes endpoint configuration data for a plurality of endpoints in an enterprise. In one exemplary embodiment, endpoint configuration system  can include a database of processor configuration data that identifies the location of each processor, the applications that are required for each processor, the groups to which the processor operators are assigned, processors having multiple operators, and other suitable information. This processor configuration data is used by endpoint configuration system  to identify software that should be transmitted to each endpoint in an enterprise software distribution event.","Bandwidth allocation system  receives message routing data and provides bandwidth allocation data in response to the message routing data. In one exemplary embodiment, bandwidth allocation system  tracks bandwidth availability for a software distribution path based on message routing data, such as by using modified publish and subscribe routing in which each channel that is required to transmit a message to an endpoint is contained in the address for the message, in addition to the total number of endpoints that will be receiving the message. Bandwidth allocation system  can generate bandwidth availability data, such as in response to a query from application distribution system  or other suitable systems, so as to allow such other systems to sequence messages accordingly. Likewise, bandwidth allocation system  can receive message data that includes priority data, and can sequence the messages based upon available bandwidth and message routing data contained in the modified publish and subscribe format.","Response sequencing system  receives message routing data and provides response sequencing data in response to the message routing data. In one exemplary embodiment, response sequencing system  tracks bandwidth availability for a response message path based on message routing data, such as by determining the maximum response message load that can be generated when a plurality of endpoints generate a response to a transmitted message. Response sequencing system  can determine bandwidth availability or processor capacity data, and can provide a time, event, or priority ranking for transmitted messages to ensure that the response messages can be transmitted to the required destination.","Memory resource allocation system  receives message routing data and provides memory resource allocation data in response to the message routing data. In one exemplary embodiment, memory resource allocation system  tracks memory resource availability for a software distribution path based on message routing data, such as using modified publish and subscribe routing in which messages need to be stored at application routers in response to bandwidth availability or other variables. Memory resource allocation system  can generate memory resource availability data, such as in response to a query from application distribution system  or other suitable systems, so as to allow such other systems to sequence messages accordingly. Likewise, memory resource allocation system  can receive message data that includes priority data, and can sequence the messages based upon available memory resources and message routing data contained in the modified publish and subscribe format.","Processor resource allocation system  receives message routing data and provides processor resource allocation data in response to the message routing data. In one exemplary embodiment, processor resource allocation system  tracks processor resource availability for a software distribution path based on message routing data, such as using modified publish and subscribe routing in which each channel required to transmit a message to an endpoint is contained in the address for the message, in addition to the total number of endpoints that will be receiving the message. Processor resource allocation system  can generate processor resource availability data, such as in response to a query from application distribution system  or other suitable systems, so as to allow such other systems to sequence messages accordingly. Likewise, processor resource allocation system  can receive message data that includes priority data, and can sequence the messages based upon available processor resources and message routing data contained in a modified publish and subscribe format.","Event based sequencing system  generates event based sequencing control data for inclusion in a message. In one exemplary embodiment, event based sequencing system  can determine whether the occurrence of an event is required prior to transmitting a message. For example, receipt of a \u201cWakeOnLAN\u201d message may be required before files are transmitted, or receipt of a first file may be required prior to transmission of a second file. Event based sequencing system  can include event confirmation control data that requires receipt of confirmation data from application distribution system , nodes, or other system components before transmitting a message. Likewise, event based sequence system  can receive event notification from systems operating on a router or router controller, such as timer systems, bandwidth availability monitors, processor loading monitors or other suitable systems.","In operation, system  allows files to be organized as messages, and messages to be sequenced for distribution to a plurality of processors in an enterprise. System  allows the distribution of files to be organized so that files are transmitted in accordance with optimal bandwidth allocation, optimal memory resource allocation, optimal processor resource allocation, optimal response sequencing allocation for response gateways or other response systems, and optimal event based sequencing. System  thus allows files to be sequenced so as to facilitate file distribution in an optimal time period.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 3","b":["300","300","302","304","306","308","310","312"]},"File cache system  receives messages, including one or more files, and stores the messages for subsequent transmission to one or more endpoints. File cache system  can store the messages in a random access memory, a magnetic storage media, or other suitable storage media based on the expected amount of time that a given file will be stored. In one exemplary embodiment, file cache system  can determine whether a file will be stored for a predetermined amount of time or until an event occurs, and can store the file in a storage medium based upon the expected amount of storage time for the file.","Message receiving system  receives messages including routing data, such as publish and subscribe distribution data, and payload data that can include files for distribution and corresponding control data, event messages that are used to trigger event based message distribution (such as timing messages, processor availability messages, bandwidth availability messages, or other suitable messages), and other suitable payload data. Message receiving system  then performs a message preparation function on the message. In one exemplary embodiment, a message preparation function can include extracting payload data for processing by message timing system , event based message system , or other suitable systems, preparing the message for retransmission to another router through message transmission system , or other suitable message preparation functions.","Message transmission system  assembles address data and payload data into a message for transmission by a router. In one exemplary embodiment, the message transmission system  can assemble files into payload data and append publish and subscribe address data based on control data received from message timing system , event based message system , message receiving system , or other suitable systems. In another exemplary embodiment, message transmission system  can transmit data to another router or router controller, such as bandwidth availability data, processor capacity data or other suitable messages.","Message timing system  performs timing functions for distribution of messages. Message timing system  can sequence messages in accordance with timing control data associated with each message, can start one or more timers based on receipt of messages with associated timer control data, and can perform other suitable functions.","Event based message system  tracks messages with event based transmission functions and generates message transmission control data upon the occurrence of an event. In one exemplary embodiment, event based message system  can store a list or other suitable structures with the events, and can monitor event messaging to determine whether an event has occurred. In another exemplary embodiment, event based message system  can perform queries or other suitable functions to determine whether an event has occurred. Event based message system  can further compile files and other data into a message to be transmitted upon the occurrence of an event.","In operation, system  provides control for an application layer router in a software distribution system for an enterprise. System  allows modified publish and subscribe messaging to be used to distribute messages in an enterprise software distribution system, in which messages are published based upon priority, time, bandwidth capacity, processor capacity, events, or other occurrences. System  thus allows the existing network to be used in an enterprise to distribute software to a plurality of endpoints in a manner that optimizes the software distribution process.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 4","b":["400","400"]},"Method  begins at , where software distribution data is received. In one exemplary embodiment, the software distribution data can include data identifying suites of software to be distributed, where the suites further comprise a plurality of software components, where each component includes a plurality of files. Likewise, the software distribution data can identify classes of machines that should receive different software suites and components based upon the function of the node, the location of a node, the geographic location of a node, the location of a node within an organization, or other suitable functions. The method then proceeds to .","At , the endpoints associated with the software distribution data are identified. In one exemplary embodiment, endpoints can be classed based upon various geographical data, organizational data, functional data, or other suitable data, where the network address for the endpoint is correlated based on these various factors. After the endpoints are identified, the method proceeds to .","At , it is determined whether a response is required to the message. In one exemplary embodiment, a message can include a control command that causes the processor to perform a function, such as activating an Intel WakeOnLAN Network Interface Card that causes a computer that is off to activate, an inventory scan function that causes the computer to transmit a list of files stored on the computer, a heartbeat query that causes a computer to respond if it is active, or other suitable responses. If it is determined at  that a response is not required, the method proceeds to . Otherwise, the method proceeds to  where a response to sequencing is performed. In one exemplary embodiment, the response to sequencing can include an analysis of the priority in which responses should be received, the bandwidth available between endpoints that will be receiving the response message and the application requiring the response, such as an application distribution system , the processing capacity of an application layer gateway or other suitable systems that are used to coordinate transmission of responses to the application, and other suitable constraints or factors. The method then proceeds to .","At , the bandwidth requirements for the messages are determined. In one exemplary embodiment, bandwidth requirements can be based on total bandwidth required for a group of messages, the bandwidth required at various points and the message transmission path to endpoints, or other suitable bandwidth requirements. The method then proceeds to .","At , it is determined whether the amount of bandwidth required is greater than available bandwidth. If the amount of bandwidth required is not greater than available, the method proceeds to . Otherwise, the method proceeds to  where bandwidth sequencing is performed. In one exemplary embodiment, bandwidth sequencing can be performed by using the priority of messages, the priority of endpoints, can be based on an analysis of bottleneck constraints, such as areas in which the bandwidth is a constraint on distribution for other areas, or other suitable factors. The method then proceeds to .","At , resource requirements are determined for distribution of the messages throughout the enterprise. In one exemplary embodiment, resource requirements can include the processor requirements for receiving and transmitting messages, storing messages, bandwidth requirements, or other suitable resource requirements. The method then proceeds to .","At , it is determined whether the amount of resources required for distribution of the messages exceeds available resources. If the amount does not exceed available resources, the method proceeds to . Otherwise, the method proceeds to  where resource sequencing is performed. In one exemplary embodiment, resource sequencing can include ordering messages based upon the priority of the message, based upon the amount of resources required, based upon bottleneck resource constraints, such as areas in which the processor capacity or storage availability will limit the distribution of the messages or other suitable resource sequencing. The method then proceeds to .","At , it is determined whether any event based messages are included. If no event based messages are included, the method proceeds to  and terminates. Otherwise the method proceeds to  where event based sequencing is performed. In one exemplary embodiment, events can be sequenced based upon priority of the event, a sequence number for events, or other suitable data. The method then proceeds to  where the message sequencing is released.","In operation, method  allows a plurality of messages including file messages and control data messages to be sequenced so as to allow enterprise distribution of software to be performed over a network. Method  uses existing network resources to distribute software from one or more centralized locations to a plurality of endpoints in an efficient manner, so as to optimize available network resources to allow the software to be efficiently distributed.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 5","b":["500","500"]},"Method  begins at  where distribution priority is determined. In one exemplary embodiment, distribution priority can be determined based upon the software suite, the software component of a suite, the location of an endpoint, the function of an endpoint, a function that has to be performed by the endpoint, a function that has to be performed by an application layer router or gateway, or other suitable criteria. The method then proceeds to .","At , a message set is selected based upon the available bandwidth. In one exemplary embodiment, the message set can be selected by taking the highest priority messages in sequence until all available bandwidth has been allocated. In another exemplary embodiment, the message set can be selected based on priority in conjunction with other factors, such as the location of associated endpoints with priority messaging, bandwidth bottlenecks at certain locations, or other suitable functions. The method then proceeds to .","At , it is determined whether a priority violation has occurred. In one exemplary embodiment, a priority violation can include a sequencing of messages that results in a message not being transmitted at a required time, such as prior to transmission of other messages, in conjunction with transmission of other messages, or at other suitable times. If a priority violation has not occurred, the method proceeds to . Otherwise the method proceeds to  where operator notification is generated. In one exemplary embodiment, operator notification can request that the operator correct the priority violation, such as by reviewing the messages and selecting an operator override sequence. The method then proceeds to .","At , it is determined whether any remaining messages need to be sequenced. If messages remain, the method returns to . Otherwise, the method proceeds to  where sequencing of messages continues, such as response sequencing, resource sequencing, or event sequencing.","In operation, method  allows messages to be sequenced based upon available bandwidth so as to optimize message distribution in an enterprise software distribution system. Method  allows priority to be assigned to messages so as to ensure that messages are received in a predetermined order, such as messages that may require a response to be generated or other suitable messages.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 6","b":["600","600"]},"Method  begins at  where distribution priority is determined. The method then proceeds to , where a message set is selected based upon the available resources. In one exemplary embodiment, the message set can be selected based on processor requirements for processing the message, for generating responses, for processing responses, for operating timers, for storing files, processor capacity bottlenecks at certain locations, or other suitable resource sequencing functions. The method then proceeds to .","At , it is determined whether a priority violation has occurred. If a priority violation has not occurred, the method proceeds to . Otherwise the method proceeds to  where operator notification is generated. The method then proceeds to .","At , it is determined whether any remaining messages need to be sequenced. If messages remain, the method returns to . Otherwise, the method proceeds to  where sequencing of messages continues, such as response sequencing, bandwidth sequencing, event sequencing, or other suitable sequencing.","In operation, method  allows messages to be sequenced based upon available resources so as to optimize message distribution in an enterprise software distribution system. Method  allows priority to be assigned to messages so as to ensure that messages are received in a predetermined order, such as messages that may require a response to be generated or other suitable messages.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 7","b":["700","700"]},"Method  begins at  where a response priority is determined. In one exemplary embodiment, a response priority may be based upon control commands such as execution of an Intel WakeOnLAN Network Interface Card so that a processor is turned on prior to the transmission of messages to that processor. In this exemplary embodiment, the priority of the WakeOnLAN command would be greater than the priority for any other message. After the response priority is determined the method proceeds to .","At , response bandwidth is determined. In one exemplary embodiment, response bandwidth can include the available bandwidth between a plurality of endpoints and an application layer gateway, such as where the gateway is used to coordinate the transmission of response messages from the endpoints back to an application, such as an application distribution system . After the response bandwidth is determined, the method proceeds to .","At , it is determined whether the bandwidth required for the response is greater than available bandwidth. In one exemplary embodiment, the bandwidth can be determined based upon maximum response bandwidth required, the response bandwidth required at system bottlenecks, or other suitable bandwidth. If it is determined that the bandwidth is not greater than available, the method then proceeds to , where the messages are sequenced in accordance with the message priority. Otherwise, the method proceeds to .","At , a set of messages is selected based upon priority and bandwidth constraints. In one exemplary embodiment, bandwidth sequencing may have already been performed such that predetermined sets are available for response priority sequencing. In another exemplary embodiment, priority sequencing can be performed in conjunction with bandwidth sequencing, and the transmission sets can be selected based upon overlapping compatible sets. The method then proceeds to .","At , it is determined whether a priority violation has occurred. If a priority violation has not occurred, the method proceeds to . Otherwise, the method proceeds to  where a notification is generated requesting operator assistance. The method then proceeds to .","At , it is determined whether any remaining messages need to be sequenced. If remaining messages are available, the method returns to . Otherwise, the method proceeds to  where sequencing for other factors is performed, such as resource sequencing or event sequencing.","In operation, method  is used to perform response sequencing in an enterprise software distribution system, so as to prevent responses that may be generated following transmission of messages including files or control data from overloading system capacity. In this manner, system  prevents data loss from occurring, such as from undelivered messages, which can result in improper installation of files in an enterprise software distribution system.",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 8","b":["800","800","802","804"]},"At , it is determined whether there are any related events required for the message. In one exemplary embodiment, installation of components, bandwidth availability, processor availability, or other suitable events may need to occur before a message is transmitted, such as to prevent inadvertent non-delivery of the message, to ensure that predetermined events occur prior to transmission of the message, or for other suitable purposes. The method then proceeds to .","At , sequence commands are generated. In one exemplary embodiment, message sequencing can be generated based upon relative events, such that messages are sequenced after all messages have been processed. In another exemplary embodiment, messages can be assigned a sequence based upon absolute events, such as transmission of a message after a processor is on, transmission of a message after an operating system has been installed, or other suitable events. The method then proceeds to .","At , it is determined whether remaining messages need to be sequenced for event related sequencing. If any messages are remaining, the method returns to . Otherwise, the method proceeds to  where the process continues with any remaining sequencing, such as bandwidth sequencing, response sequencing, or resource sequencing.","In operation, method  allows messages to be sequenced based upon events that may be required prior to transmission of a message. Method  thus allows modified publish and subscribe messaging to be used in an enterprise software distribution system so as to allow the address of an endpoint to be determined centrally and for the message to be sequenced to the endpoint without inadvertent receipt of a message prior to predetermined events.",{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 9","b":["900","900"]},"System  includes building node , which can be implemented in hardware, software, or a suitable combination of hardware and software, which can be one or more software systems operating on a general purpose server platform. Building node  can be a server providing network communications services or other suitable services to nodes within a building, a group of buildings, or at other suitable locations.","Building node  is coupled to organization nodes  and , such as through a network connection. Organization nodes  and  can be implemented in hardware, software, or a suitable combination of hardware and software, and can be one or more software systems operating on general purpose server platforms and providing network communications services or other suitable services to organizations within a building or at other suitable locations. In this exemplary embodiment, organization node  is providing services to end points on floors A and B . Likewise, organization node  is providing services to end points on floors B and C . As can be seen in this exemplary embodiment, organization node  and organization node  both provide services to entities on floor B, however such entities are not related through an organization node. Thus, an entity on floor B could either inherit from organization node  or organization node , which makes identification of floor B in an hierarchical architecture, such as the lightweight directory access protocol (LDAP), unworkable.","Organization node  is coupled to end point  and end point  in room D , to end point  in room E , and to end point  and end point  in room F . The relationship between room D , room E , and room F  and floors A and B  is similarly non-hierarchical, as each room can only be on one floor. Thus, while organization node  can encompass two floors, each room can only encompass one floor. Thus, inheritance of a floor from organization node  to any of end points  through  would not be facilitated in an LDAP database or in other suitable hierarchical databases.","Configuration Repository system  is coupled to building node , organization node , organization node , and end points  through , and can provide a relational database architecture or other suitable architectures for providing inheritance of physical location data, association location data, application version data, user customization data, or other data that may similarly be nonhierarchical and a hierarchical database architecture for providing inheritance of data that may be hierarchical. In one exemplary embodiment, configuration repository system  can interface with a relational database or other suitable nonhierarchical database for receiving and updating physical location data, association location data, application location data, user location data, or other data that may similarly be nonhierarchical. Configuration Repository system  can interface with a hierarchical database such as an LDAP database, and can receive additional data for each node in a manner that allows reverse inheritance of data elements, so that a node hierarchy can be traversed from the bottom up until a requested data element is found.","In this exemplary embodiment, configuration repository system  allows the floor for an end point  to be determined by traversing a database from end point  to organization node , where the floor for end point  is provided through data related to organization node . Likewise, building node  can be associated with other geographical or functional data, such as a state or a network communication services provider. In this manner, relational data, hierarchical data, or other suitable data stored in Configuration Repository system  can be used to supplement hierarchical data provided through a relational database, a hierarchical database such as an LDAP database or other suitable databases, to allow data for nodes to be stored that may be required in operation, to install software in an enterprise, or in other suitable situations.","In one exemplary embodiment, in an enterprise software distribution system, it may be necessary to know the room in which an end point is located, the floor on which an end point is located, an association that an end point may have such as the role a user can play or the applications that a machine can have, a collection that holds multiple values in a specific order that can be referred to by any node, application data such as a buffer size for communication, the default number of retries, the default location of the log files, or other suitable data, user preferences such as the size, location, color of windows, or other suitable data. Configuration Repository system  allows such information to be provided in a relational database that is synchronized with hierarchical data that can be generated using LDAP or other similar directory or network driven processes. In this manner, software can be configured for distribution to end points without requiring operator assisted installation of the software on site, such as by allowing a centralized software distribution system to determine the closest printer, the applications that are to be installed on a machine, the function of the operator of the machine, or other suitable data that is relational and nonhierarchical.","In one exemplary embodiment, configuration repository system  can be hosted on a relational database or other suitable nonhierarchical database at a central node and on a LDAP or other suitable hierarchical database locally at distributed nodes. In this exemplary embodiment, configuration repository system  can be predominantly used for reading, accessing and other suitable functions at distributed nodes but for reading, accessing, writing, updating and other suitable functions at a central node. Further, information on the relational database or other suitable database at the central node or other suitable node can be transmitted to the LDAP or other suitable hierarchical database. In this manner, the LDAP is synchronized with the relational database.",{"@attributes":{"id":"p-0094","num":"0093"},"figref":"FIG. 10","b":["1000","1000"]},"System  includes Configuration Repository system  with floor A profile , floor B profile , floor C profile , and room D profile , room E profile , and room F profile , each of which can be implemented in hardware, software, or a suitable combination of hardware and software, and which can be logical entities in a relational database, hierarchical database such as an LDAP, or other suitable database in addition to building node , organization node  and organization node , and end points  through . As shown in , floor A profile  relates to end point , end point , and organization node . Thus, floor A profile  can be identified in a relational database for each of end point , end point , and organization node , or can be provided in a relational database for organization node  and with related hierarchical data for end points in floor A profile . In one exemplary embodiment, floor A profile  can be identified in a hierarchical database such as an LDAP for each of end point , end point , and organization node , or can be provided in a hierarchical database such as an LDAP for organization node  and with related hierarchical data for end points in floor A profile ","Likewise, room D profile  is related to end points  and , but not to organization node . In this manner, the determination of the room in which an end point is located can be determined by traversing the hierarchical organization database from the bottom up, such as by using an application programming interface (API) that first checks the relational data associated with an end point for data, and then moves up the hierarchy and checks the relational data associated with organizational node  for the data if it was not present in the relational data for the end point. Relocation of end point  to a different room would thus require updating the relational database, and could not be implemented using an automated process, such as a directory driven process.","In operation, system  allows relational data to be stored for a hierarchical organization of nodes, such as to facilitate the distribution of software in an enterprise, the identification of functions performed by nodes, or for other suitable purposes. System  allows a relational database and a hierarchical database to be coordinated to facilitate such functions.",{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIG. 11","b":["1100","1100","928","1102","1104"]},"Hierarchical database system  is a hierarchical database generated using the lightweight directory access protocol or other suitable directory access protocols or hierarchical protocols. Hierarchical database system  allows a hierarchical directory driven database to be generated in a top down manner, such as by determining directories for a given node, and then directories for nodes depending from that node. Hierarchical database system  provides well known advantages for determining hierarchical network relationships, but does not allow relationships that are not directly inherited to be provided for nodes.","Location database system  stores relational data that is synchronized with hierarchical database system . In one exemplary embodiment, location database system  can include hierarchical data, such as data provided by an LDAP and additional data, such as association data, collection data, application data, user data, miscellaneous data, or other nonhierarchical data that is related to nodes in a manner such that nodes can inherit the data in a bottom up manner, as opposed to the top down manner of a hierarchical database. Location database system  can further be synchronized with the hierarchical database of hierarchical database system , such as to identify changes in the hierarchical structure of data stored in hierarchical database system  and to flag such changes for attention by an operator. In this exemplary embodiment, if an end point node is moved from a first server to a second server, then the corresponding changes to the hierarchical database can cause notification data to be generated through location database system , so as to alert the operator to reconfirm the relational data for that end point node, to confirm that the end point node is still located in a associated room, is associated with a particular organization, particular user, particular applications, or other suitable relational data. Likewise, where such relational data can be assigned on a room basis, a floor basis, an organization basis, or in other suitable manners, inheritance of the relational data can be assigned using a bottom up relationship, such as where all nodes within a room are known to be providing certain functions, to be associated with a particular association, particular user, or other similar relational data. In one exemplary embodiment, the hierarchical database of hierarchical database system  can be synchronized with location database system , such as to maintain identical sets of data at distributed nodes and a central node or other suitable node.",{"@attributes":{"id":"p-0101","num":"0100"},"figref":"FIG. 12","b":["1200","1200","1104","1202","1204","1206","1208","1210","1212","1214"]},"Location node system  stores relational data that is location specific, such as region data, city data, building data, floor data, or other suitable location specific data. Location node system  is configured logically based on node locations, such that if a node is physically moved, it would be necessary to modify the location of the node through profile system .","Collection system  provides relational data for holding multiple values in a specific order. In one exemplary embodiment, the values can define files, settings, or dependencies for a node that is a function of a node's location, a node's associated organization, the user of the node, applications executed by the node, or other suitable data. Thus, changes to any of this relational data can result in notification data being generated for an operator to reconfirm the collection data related to a particular node through collection system .","Association system  stores relational data that can be shared logically by two or more nodes. The relational data can be unrelated to location data. In one exemplary embodiment, the roles a user can play within the organization or the applications that can be installed on a node based on its organizational location can be stored in association system .","Application node system  stores relational data for application specific implementation, such as buffer sizes for communication, a default number of retries, a default location for log files, or other suitable application specific data. In this exemplary embodiment, application node system  can be configured for all users of an application. In one exemplary embodiment, a room can hold a secretary and an engineer, such as where the secretary will have a first set of functions based upon the organization that the secretary is in, and where the engineer will have a second set of functions based upon the organization that the engineer is in. Thus, the roles that the user plays or the applications that the machine can have would be related to the specific node. Likewise, the end points serviced by a given server may be secretarial, such that the association information can be associated to the hierarchical database location for the server node. Thus, the relational database information for association system  can be assigned logically to a physical node based on various factors, such that any changes to that physical node may require generation of notification data for operators to confirm the association system  relational data.","Miscellaneous node system  holds data that does not fit into other categories. In one exemplary embodiment an application can store menu structure data in this branch, such that changes made to the menu structure will change the menu arrangement of the application dynamically without changing the application code. Likewise, network layout of an organization can be represented within miscellaneous node system , such as where the network layout can span several geographical regions.","User node system  holds user preferences, such as user-selected window size data, user-selected window location data, user-selected window color data, or other suitable data. For example, user node system  allows users to be relocated to different nodes without losing user-selected preferences.","Application interface system  provides one or more application programming interfaces to query data elements, where such application programming interfaces navigate the node hierarchy in a bottom up direction. In this exemplary embodiment, the application programming interface elements note the machine from which the query is performed and retrieve the data with respect to the machine's location in the hierarchical database and relational database. Thus, application interface system  can also generate notification data when such application programming interface queries are affected by changes to the relational database.","In operation, system  allows relational data to be associated with the hierarchical data stored in a relational database in a manner that facilitates centralized processing of data, such as centralized distribution of software in an enterprise, centralized monitoring of functions being performed (such as to update flight times displayed on a monitor based on the gate that the monitor is associated with) or other suitable functions. System  further allows the relational data to be logically associated to a suitable node, such that the bottom up traversal performed by application programming interfaces can be simplified to require the least number of modifications in the event of relocation of nodes, relocation of users, modification of applications, distribution of new applications, or other suitable changes to the configuration of nodes in an organization.",{"@attributes":{"id":"p-0110","num":"0109"},"figref":"FIG. 13","b":["1300","1300"]},"Method  begins at  where a hierarchical database and a relational database are generated. In one exemplary embodiment, an LDAP database or other suitable database can be used as the hierarchical database, such as one generated in a top down organization starting from a centralized node and going to lower layers of nodes until the bottommost layer of end points is reached. The method then proceeds to .","At , profile data is defined for each node. In one exemplary embodiment, the profile data can include location profile data that includes room data, floor data, building data, city data, country data, or other suitable location profile data, where the node association of the profile data is based on a reverse lookup paradigm. The method then proceeds to . At  the profile data is related to the hierarchical data stored in the relational database, such as by assigning physical location data to end points, servers, or other suitable nodes. In another exemplary embodiment, when profile data has previously been defined, an updated relational database can be synchronized with the existing profile data at , and notification data can be generated if changes in the hierarchical data stored in the relational database have occurred that may require the relational data to be redefined. The relational database can then be replicated to the hierarchical database. The method then proceeds to .","At , association data is defined for each node. In one exemplary embodiment, the association data can include role data for a user within an organization, applications that can be installed on a node, or other suitable association data, where the node association of the association data is based on a reverse lookup paradigm. The method then proceeds to . At  the association data is related to the hierarchical data stored in the relational database, such as by assigning association data to end points, servers, or other suitable nodes. In another exemplary embodiment, when association data has previously been defined, an updated relational database can be synchronized with the existing association data at , and notification data can be generated if changes in the hierarchical data stored in the relational database have occurred that may require the relational data to be redefined. The relational database can then be replicated to the hierarchical database. The method then proceeds to .","At , collection data is defined for each node. In one exemplary embodiment, the collection data can include multiple data values stored in a predetermined order, such as for installation or operation of software applications or other suitable functions, where the node association of the collection data is based on a reverse lookup paradigm. The method then proceeds to . At  the collection data is related to the hierarchical data stored in the relational database, such as by assigning collection data to end points, servers, or other suitable nodes. In another exemplary embodiment, when collection data has previously been defined, an updated relational database can be synchronized with the existing collection data at , and notification data can be generated if changes in the hierarchical data stored in the relational database have occurred that may require the relational data to be redefined. The relational database can then be replicated to the hierarchical database. The method then proceeds to .","At , miscellaneous data is defined for each node. In one exemplary embodiment, the miscellaneous data can include data sets that do not fit with other sets, such as to allow an application to store its menu structure in a manner that allows the menu arrangement of the application to be changed without changing the application code, to store the network layout of an organization that spans several geographical regions, or other suitable data, where the node association of the collection data is based on a reverse lookup paradigm. The method then proceeds to . At  the miscellaneous data is related to the hierarchical data stored in the relational database, such as by assigning miscellaneous data to end points, servers, or other suitable nodes. In another exemplary embodiment, when miscellaneous data has previously been defined, an updated relational database can be synchronized with the existing miscellaneous data at , and notification data can be generated if changes in the hierarchical data stored in the relational database have occurred that may require the relational data to be redefined. The relational database can then be replicated to the hierarchical database. The method then proceeds to .","At , application data is defined for each node. In one exemplary embodiment, the application data can include application-specific data, such as a buffer size for communication, a default number of retries, a default location for log files, or other suitable data, where the node association of the application data is based on a reverse lookup paradigm. The method then proceeds to . At  the application data is related to the hierarchical data stored in the relational database, such as by assigning application data to end points, servers, or other suitable nodes. In another exemplary embodiment, when application data has previously been defined, an updated relational database can be synchronized with the existing application data at , and notification data can be generated if changes in the hierarchical data stored in the relational database have occurred that may require the relational data to be redefined. The relational database can then be replicated to the hierarchical database. The method then proceeds to .","At , user data is defined for each node. In one exemplary embodiment, the user data can include user-selected window size data, user-selected window location data, user-selected window color data, or other suitable data, where the node association of the user data is based on a reverse lookup paradigm. The method then proceeds to . At  the user data is related to the hierarchical data stored in the relational database, such as by assigning user data to end points, servers, or other suitable nodes. In another exemplary embodiment, when user data has previously been defined, an updated relational database can be synchronized with the existing user data at , and notification data can be generated if changes in the hierarchical data stored in the relational database have occurred that may require the relational data to be redefined. The relational database can then be replicated to the hierarchical database.","In operation, method  allows relational data to be associated to nodes in the hierarchical data stored in a relational database, such as to provide bottom up hierarchical location of data relevant to nodes based on the location of the node, the function of the node, the organization in which node is being used, the user of the node, or other suitable functions. Method  also allows notification data to be generated when hierarchical data is synchronized to the relational database, such as when changes in the hierarchical location of nodes require operator reassessment of the relational database for that node.","Although exemplary embodiments of a system and method for performing the present invention have been described in detail herein, those skilled in the art will also recognize that various substitutions and modifications can be made to the systems and methods without departing from the scope and spirit of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
