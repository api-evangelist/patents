---
title: Texture roaming via dimension elevation
abstract: The present invention provides texture roaming via dimension elevation. A degree elevated texture is used to contain level of detail (LOD) levels (or tiles) of a clip-map across a degree elevated coordinate space. For example, a three-dimensional (3D) texture is used for two-dimensional (2D) clip-mapping, a four-dimensional (4D) texture is used for 3D clip-mapping, and a 2D texture is used for one-dimensional (1D) clip-mapping. Once the levels of a clip-map are placed in an extra dimension coordinate space, the extra dimension texture coordinate value can be computed based on clip-mapping rules.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07012614&OS=07012614&RS=07012614
owner: Silicon Graphics, Inc.
number: 07012614
owner_city: Mountain View
owner_country: US
publication_date: 20031023
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["Not applicable.","The present invention relates to computer graphics.","Texture is increasingly applied in a variety of computer graphics images and applications. Texture adds important visual information and surface detail. Texture increases the level of realism and immersion achievable for a given object or environment. Data representing a texture (also called a texture map or texel data) is often stored in texture memory in graphics hardware. During rendering, appropriate texel data is mapped to surfaces being rendered for display. See, e.g., the explanation of conventional texture mapping in Foley et al., 2edition in C, Addison-Wesley Publishing Co.: Reading, Massachusetts 1996), pp. 741\u2013744 (incorporated by reference herein).","Demand continues to grow for a wide range of larger and more complex textures. Textures such as satellite images, medical data, photographic images and other types of texture are used in many graphical applications. Large textures can easily exceed available texture memory. As a result, large textures may have to be stored in a larger texture database or other storage medium which are cheaper than texture memory but can not be accessed as quickly by a graphics or texture processor.","In many applications, users like to fly over or visualize aspects of texture data in real time. This is known as texture roaming. Texture roaming in real time becomes even more difficult or requires expensive graphics hardware with large texture memory as larger textures are used. For example, flight simulator applications must render frames in real time even when complex or voluminous source data, such as satellite images of the Earth or moon, are used as large texture motifs.","The problem of increasing texture size is further exacerbated in the case of mip-mapping where multiple copies of a texture image at different resolutions must also be stored. A mip-map consists of a texture pattern prefiltered at progressively lower or coarser resolutions and stored in varying levels of detail (LOD) maps. See, for instance, the examples of mip-mapping described in Foley et al., 2edition in C, at pp. 826\u2013828 and the article by C. Tanner et al., \u201cThe Clipmap: a Virtual Mipmap,\u201d Computer Graphics Proceedings Annual Conference Series, 1998, pp. 151\u2013158, especially section 3.1 (each of which is incorporated by reference herein). The benefit of mip-mapping is that filtering is only performed once on texel data when the mip-map is initially created and stored in a pyramid of LOD mip-maps. Thereafter, texels having a dimension commensurate with pixel size are obtained by selecting the closest LOD map having an appropriate resolution. By obtaining texels from pre-filtered LOD maps, filtering does not have to be performed during run time. Implementing a large texture mip-map quickly can become an expensive luxury since a large texture memory is needed to store the different pre-filtered LOD maps. Further, many portions of the stored mip-map are not used at a given display image.","Clip-map techniques have been developed to retain the benefits of pre-filtered multiple resolution texture storage while still allowing for fast access to relevant texel data in texture memory. A clip-map is a partial mip-map in which each level has been clipped to a specified size. The standard, full-size mip-map is stored in a host memory such as a database or other less expensive storage area. The clip-map, representing a subset of the complete mip-map and therefore requiring less memory, can be stored in texture memory which can be accessed quicker than the host memory or database. See, U.S. Pat. Nos. 5,760,783 and 6,417,860 issued to C. Migdal et al., and the article by C. Tanner et al., \u201cThe Clipmap: a Virtual Mipmap,\u201d Computer Graphics Proceedings Annual Conference Series, 1998, pp. 151\u2013158 (each of which is incorporated in its entirety herein by reference).",{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 1A","FIG. 1A"],"b":["100","110","100","130","100","130","100","105","100"]},"The structure of clip map  is often thought of as having two parts, a clip-map pyramid  and clip-map stack  as shown in . Clip-map pyramid  is made up of texel data in coarser resolution levels where an entire source texture map is included within each level. Clip-map stack  is made up of texel data in the finer resolution levels that have been clipped to avoid storage of texture of higher resolution texture data far from clip center eyepoint . For convenience, the maximum size of each level in clip-map  is referred to as the \u201cclip size.\u201d Clip-map  can be thought of then as a set of tiles made up of texel data corresponding to a source texture image filtered at different resolutions and clipped at a maximum clip size.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 2A","FIG. 2A","FIG. 2B"],"b":["200","210","220","200","220","220","210","210"],"i":["InfiniteReality: A Real","Time Graphics System, "]},"For texture roaming applications supported by clip-mapping, texel data is drawn from an appropriate level of detail within a clip-map cached in texture memory. The clip-map is centered about a clip center which can be an arbitrary texture space coordinate that defines the center of each clip-map level. Often the clip center is associated with an eye point in a graphical application. In this way, texture at the finest resolution can be provided near an eye point and coarser texture can be drawn from levels further away from the eye point. During texture roaming, an eye point can move sufficiently to require updating of the clip-map stack so that the texel data in the clip-map (especially the clip-map stack region) remains close to the eyepoint. One technique for updating a two-dimensional clip-map during texture roaming uses toroidal addressing. See, for instance, the example of updating and rendering with clip maps described in C. Tanner et al., \u201cThe Clipmap: a Virtual Mipmap,\u201d at 151\u2013158 (previously incorporated in its entirety herein by reference above).","Graphics applications have successfully used clip-mapping as described above, however, conventional approaches have required specialized graphics hardware designed to support clip-mapping. This has limited clip-mapping to machines having specialized graphic hardware that support clip-mapping, such as, InfiniteReality graphics hardware available from SGI, a Delaware Corp. See, J. Montrym et al., -, at 293\u2013302 (previously incorporated in its entirety herein by reference above). Many graphics applications including texture roaming applications, however, are now being called upon to run on commodity graphics hardware. Such commodity graphics hardware may or may not support clip-mapping.","What is needed is a technique for texture roaming that can leverage clip-map techniques without requiring specialized graphics hardware. In particular, a method and system is needed for supporting texture roaming over large textures on commodity graphics hardware.","The present invention overcomes the above mentioned problems and provides additional features and advantages as described herein.","The present invention provides texture roaming via dimension elevation. A degree elevated texture is used to contain level of detail (LOD) levels (or tiles) of a clip-map across a degree elevated coordinate space. For example, a three-dimensional (3D) texture is used for two-dimensional (2D) clip-mapping, a four-dimensional (4D) texture is used for 3D clip-mapping, and a 2D texture is used for one-dimensional (1D) clip-mapping.","Once the levels of a clip-map are placed in an extra dimension coordinate space, the extra dimension texture coordinate value can be computed based on clip-mapping rules. In one embodiment, a degree elevated texture having three dimensions addressed by texture coordinates (s,t,r) is used to store a 2D clip-map. The 2D clip-map is a clip map in (s,t) texture coordinates of a 2D texture.","The present invention provides methods and systems that apply in arbitrary dimensional texture space. The capabilities to do this only rely on the underlying graphics device to support a texture dimension that is one greater than the texture needed to render. In this way, commodity graphics hardware can be used to support clip-mapping via a dimension elevation according to the present invention.","According to an embodiment, clip levels can be referenced via a single texture unit while maintaining full precision to access each level of detail (LOD) from the extra coordinate dimension. This further eliminates the computation required for deciding the optimum range level of detail used to render a primitive.","Further features and advantages of the present invention, as well as the structure and operation of various embodiments of the present invention, are described in detail below with reference to the accompanying drawings.","The present invention is described with reference to the accompanying figures. In the figures, like reference numbers indicate identical or functionally similar elements. Additionally, the leftmost digit or digits of a reference number identify the figure in which the reference number first appears.","The present invention provides a method, a system, and a computer program product for texture roaming with degree elevated texture. According to embodiments of the present invention, a degree elevated texture is used to contain level of detail (LOD) levels (or tiles) of a clip-map across a degree elevated coordinate space. For example, a three-dimensional (3D) texture can be used to carry out two-dimensional (2D) clip-mapping, a four-dimensional (4D) texture can be used for 3D clip-mapping, and a 2D texture can be used for one-dimensional (1D) clip-mapping. Among other things, the present invention allows clip-mapping to be carried out on any graphics hardware having multi-dimensional texture memory, including but not limited to, commodity graphics hardware. The graphics hardware stores an extra-dimensional clip-map having an extra texture coordinate dimension associated with level of detail information.","Terminology","The following terms are defined so that they may be used to describe embodiments of the present invention. As used herein:","\u201cPixel\u201d means a data structure, which is used to represent a picture element. Any type of pixel format can be used.","\u201cReal-time\u201d or \u201cInteractive Rate\u201d refers to a rate at which successive display images can be redrawn without undue delay upon a user or application. This can include, but is not limited to, a nominal rate of between 30\u201360 frames\/second. In some example embodiments, such as some flight simulators or some interactive computer games, an interactive rate may be approximately 10 frames\/second. In some examples, real-time can be one update per second.","\u201cTexture\u201d means an array of texels. A texel can be a color or an intensity value. A texture can be any array of values that is used to determine a value for a pixel. As used herein, the term \u201ctexture\u201d includes, for example, texture maps, bump maps, and gloss maps, but is not limited thereto.","\u201cTexel\u201d means a texture element.","\u201cTexture sample\u201d means a sample selected from a texture map or texture. The sample can represent one texel value or can be formed from two or more texel values blended together. Different weighting factors can be used for each texel blended together to form a texel. The terms \u201ctexel\u201d and \u201ctexture sample\u201d are sometimes used interchangeably.","\u201cTexture unit\u201d refers to graphics hardware, firmware, and\/or software that can be used to obtain a texture sample (e.g., a point sample or a filtered texture sample) from a texture. A texture unit can in some instances obtain multiple texture samples from multiple textures.","\u201cClip-map\u201d refers to a data structure representing a set of tiles of texture data at multiple levels of detail (LOD). The set of tiles include at least one tile clipped to a clip size.","\u201cExtra-dimensional clip-map\u201d refers to a clip-map having an extra dimensional coordinate.","\u201cCommodity graphics hardware\u201d refers to any graphics hardware that includes or is coupled to texture memory that can store multi-dimensional texture.","Extra-Dimensional Clip-Map in a Degree Elevated Texture",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 3","b":["300","310","300","302","304"]},"According to the present invention, each level of detail is assigned to a corresponding extra-dimension coordinate (e.g, a z-axis coordinate). Texture data in each level is then addressed by three-dimensional coordinates (x,y,z), where the two-dimensional coordinates (x,y) correspond to conventional clip-map level coordinates and the extra-dimension coordinate (z) corresponds to a coordinate value for a particular level of detail. In one embodiment, texels in each level are then addressed by three coordinates (s,t,r), including texture coordinates (s,t) and an extra-dimension coordinate (r), each of which may range from 0 to 1 to facilitate addressing in commodity graphics hardware. The texture coordinates (s,t) can be the same as conventional clip-map level coordinates, or transformed (i.e., scaled and\/or translated) from conventional clip-map level coordinates. A scale factor for coordinates (s,t) can be based on the computed extra-dimension coordinate (r).","The pre-processing of an extra-dimension clip-map and texture roaming therewith according to further embodiments of the present invention is described below with respect to . Example computer systems with graphics hardware are described with respect to .","Pre-Processing of Extra-dimension Clip-Map",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 4","b":["400","410","430","410"]},"In step , a clip-map portion of the stored texture mip-map is generated. The clip-map portion can be any conventional clip-map having tiles drawn from the stored texture mip-map based on an eyepoint of a frame or any other desired referenced point and clipped to a desired clipsize as is well-known in the art and described earlier above with respect to . For instance, in the two-dimensional clip-map example of , each of the clip-map tiles (or levels) in cubical part  and pyramidal part  are generated. Each of the 2D tiles have different levels of detail and can be addressed with two-dimensional coordinates (x,y). In one implementation, step  includes generating clip-map coordinate values in texture space coordinates that range from 0 to 1 to facilitate texture addressing by many types of graphics hardware.","In step , extra-dimension coordinate values are assigned to the clip-map to obtain an extra-dimensional clip-map (ECM) according to the present invention. The extra-dimension coordinate values uniquely address each level of detail in the clip-map generated in step . For example, consider the example of . Each of the clip-map tiles (or levels) in cubical part  and pyramidal part  can be assigned unique extra-dimension coordinate (z). This assignment of the extra-dimension coordinate can be explicit where a value is assigned during pre-processing, or implicit in a particular ordering or sequence in which the levels are arranged for loading. Note steps  and  are described with respect to coordinates (x,y,z) which are intended to refer broadly to any three-dimensional coordinate space.","In step , the extra-dimensional clip-map generated in step  is loaded into texture memory that can store a degree elevated texture. In other words, a texture memory is used which is elevated by one degree compared to the dimension of the source texture image being used in rendering by an application. In the example of , clip-map  is a 2D clip-map drawn from a two-dimensional texture source image, however, step  generated a 3D ECM  which is loaded in step  into a three-dimensional texture memory in graphics hardware. Any conventional technique for loading designated texture to a graphics subsystem can be used. For example, appropriate parameters can be passed in a call to a graphics Application Programming Interface, such as, OPENGL, to load the extra-dimensional clip-map generated in step  into texture memory.","Texture Roaming with Extra-Dimensional Clip-Map",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 5","FIG. 4"],"b":["500","510","530"]},"Steps \u2013 are carried out to apply texture in a scene for an initial frame. Texture is applied to an object being rendered by mapping texel data from the ECM stored in texture memory to corresponding pixel data. For each pixel in the primitive (i.e., triangle) of a frame being rendered (loop ), steps  and  are carried out. First, an extra-dimension coordinate is determined based on the highest level of detail texture available in the loaded ECM which offers coverage for the (s,t) location being rasterized (step ). In one example, a distance from a clip center (e.g., a distance obtained by subtracting an original fragment texture coordinate from clipcenter) along with an invalid border for a clip map tile is used to determine the highest detail level texture available in texture memory which offers coverage of the location being rasterized (ClipLOD). Next, a final LOD value (LOD) is determined from the maximum of (ClipLOD) and a LOD value calculated according to conventional mip-mapping (LOD_mip). Finally, the extra-dimension coordinate can be determined from the final LOD value (LOD)\u2014since this is essentially the inverse of how the extra-dimension coordinate was originally assigned in step . Once the texture-dimension coordinate is available, texel data from the loaded ECM can then be mapped to a corresponding pixel (step ).","In the 3D ECM example discussed earlier, the above final LOD calculation from which the extra-dimension coordinate can be determined in step  is carried out using the following equations:","Distance from Clip-Center Computation:\n\ndist=ABS(\u2212center);\n\ndist=ABS(\u2212center); and\n\nmax_dist=MAX(dist, dist);\n\nwhere (s, t) are texture sample coordinates values, (center_s, center_t) are the clip center coordinates values, ABS is an absolute value function, sdist and tdist are distances from clip center for s and t coordinates, MAX is a maximum value function, and max_dist represents the output of the MAX function, that is the maximum of sdist and tdist.\n\nClipLOD Computation:\n\nClipLOD=log2 (max_dist)\u2212log2 ((clipsize\/2)\u2212invalid_border* (clipsize\/2));\n\nwhere clipsize is the clip size of the loaded ECM and invalid_border is a border set near an edge of a clip map tile as is known in conventional clip-mapping (see, e.g., C. Tanner article, section 3.2.3, p. 153 previously incorporated by reference above); and ClipLOD is an index for the highest detail level of texture in texture memory which offers coverage for the (s,t) location being rasterized.\n\nFinal LOD Computation:\n","LOD=MAX (LOD_mip, ClipLOD); where LOD_mip is a LOD value calculated according to conventional mip-mapping; and LOD is a final LOD value.","Extra-Dimension Coordinate:","r<---LOD; where r is the extra-dimension coordinate of the clip-map tile in loaded ECM associated with the final LOD value (LOD).","A frame buffer can then be loaded with appropriate (s,t,r) values. In practice, transformations (such as, scaling and\/or translation) can be performed. In one embodiment, (s,t) coordinates are transformed to (s\u2032,t\u2032) coordinates using a scale factor based on the r coordinate value (i.e., s\u2032=function (r,s), and t\u2032=function (r,t)). A frame buffer is then loaded with (s\u2032,t\u2032, r) values.","Subsequent frames can continue to be rendered using the loaded ECM until the eyepoint or field of view is changed, or the ECM otherwise needs to be updated (steps \u2013). For example, if a last frame has been rendered control proceeds from step  to end (step ), otherwise control proceeds from step  to determine is an update is needed (step ). If an update is not needed, control returns to loop  to render a new frame with texture mapped from the current loaded ECM.","Updates During Roaming","In step , updates are made to the extra-dimensional clip-map (ECM) loaded in texture memory. For instance, a new eye point over a texture mapped object is determined. For example, a position in a flight path of a jet over a terrain can be a new eyepoint of a scene. Texture data in the ECM is then updated to reflect the new eye point. An ECM can be updated using any conventional clip-map updating techniques except the extra-dimension coordinate values remain the same. For instance, a conventional toroidal addressing scheme can be used (see, e.g., C. Tanner article, section 4, pp. 153\u2013154 previously incorporated by reference above). In the 3D ECM case example, texture in each tile (addressed by two texture coordinates (s,t)) can be updated using toroidal addressing updates, while the extra-dimensional coordinate (r) remains the same value for a particular tile).","This updating technique has advantages in that it does not involve the loading of entire regions of texture memory, but rather a toroidal roaming algorithm is used where only extremely small chunks of texture need to be downloaded per frame. Such toroidal refresh requirements in clip-mapping minimizes the per frame texture download requirements as the eye point roams from frame to frame. The update of the texture is purely optional (and indeed an entire new ECM can be loaded in other embodiments), and is a tradeoff between the time it takes to render a frame and the visual quality of the frame.","Once the loaded ECM is updated, a new frame can be rendered and control proceeds back to loop . In this way, a new frame is rendered with texture mapped from the updated ECM. Note that not all levels of an ECM need to be completely updated. An ECM manager can keep track of a highest resolution level which is up-to-date and further limit ClipLOD to be no greater than this value. This also allows partially incomplete clip-maps to be rendered, such as clipmaps with high resolution insets. Updates are carried out from lower resolution levels to higher resolution levels.","Example Architecture of the Invention",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 6","b":"600"},"Architecture  includes six overlapping layers. Layer  represents a high level software application program. Layer  represents a three-dimensional (3D) graphics software tool kit, such as OPENGL PERFORMER. Layer  represents a graphics application programming interface (API), which can include but is not limited to OPENGL, available from Silicon Graphics, Incorporated. Layer  represents system support such as operating system and\/or windowing system support. Layer  represents firmware. Finally, layer  represents hardware, including graphics hardware. Hardware  can be any hardware or graphics hardware including, but not limited to, a computer graphics processor (single chip or multiple chip), a specially designed computer, an interactive graphics machine, a gaming platform, a low end game system, a game console, a network architecture, et cetera. Some or all of the layers \u2013 of architecture  will be available in most commercially available computers.","As will be apparent to a person skilled in the relevant art after reading the description of the invention herein, various features of the invention can be implemented in any one of the layers \u2013 of architecture , or in any combination of layers \u2013 of architecture . For instance, routines  and  can be carried out by a software control module in application layer  communicating with a graphics API, such as OPENGL in layer , that in turn passes instructions and data to commodity graphics hardware in layer  having texture memory in which an ECM can be loaded as would be apparent to person skilled in the art given this description. Examples of graphics hardware in layer  that can be used include, but are not limited to, graphics cards with multi-dimensional texture memory available from manufacturers Nvidia, ATI, and 3DLabs. In an embodiment, commodity graphics hardware is used that has multi-dimensional texture memory and a degree of programmability in a fragment shading stage, such as, support for the ARB_fragment_program OPENGL extension available from SGI.","Example System Embodiment of the Present Invention",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 7","FIG. 4","FIG. 5"],"b":["700","700","710","720","770","712","780","780","782","784","782","400","784","720","500","700"]},"Host system  comprises an application program , a hardware interface or graphics API , a processor , and a memory . Application program  can be any program requiring the rendering of a computer image. The computer code of application program  is executed by processor . Application program  assesses the features of graphics subsystem  and display  through hardware interface or graphics API . Memory  stores information used by application program . Memory  can also store an ECM generated by ECM generator  until is it loaded into graphics subsystem . A database  (or other mass storage device) can also be coupled to host system  to store a texture mip-map from which ECM generator  can load a source texture mip-map and generate an ECM as described above with respect to routine .","Graphics subsystem  comprises a vertex operation module , a pixel operation module , a rasterizer , a texture memory , and a frame buffer . Texture memory  can store one or more multi-dimensional textures . In one example, texture  can include an ECM generated by ECM generator  and passed to graphics subsystem  for loading into texture memory . Texture memory  is connected to a texture unit  by a bus (not shown). Rasterizer  comprises a texture unit  and a blending unit . Texture unit  and blending unit  can be implemented separately or together as part of a graphics processor. The operation of these features of graphics system  would be known to a person skilled in the relevant art given the description herein.","In embodiments of the present invention, texture unit  can obtain multiple point samples or multiple filtered texture samples from textures and\/or images stored in texture memory . Blending unit  blends texels and\/or pixel values according to weighting values to produce a single texel or pixel. In one embodiment, the ARB_fragment_program OPENGL extension can be used to support blending. The output of texture unit  and\/or blending unit  is stored in frame buffer . Display  can be used to display images stored in frame buffer .","The embodiment of the invention shown in  has a multipass graphics pipeline. It is capable of operating on each pixel of an image (object) during each pass that the image makes through the graphics pipeline. For each pixel of the image, during each pass that the image makes through the graphics pipeline, texture unit  can obtain at least one texture sample from the textures and\/or images stored in texture memory . Although the embodiment of the invention shown in  has a multipass graphics pipeline, the present invention is not so limited and other systems and methods embodiments of the invention can be implemented without a multipass graphics pipeline.","While specific embodiments of the present invention have been described above, it should be understood that they have been presented by way of example only, and not limitation. It will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the spirit and scope of the invention as defined in the appended claims. Thus, the breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS\/FIGURES","p":["The accompanying figures, which are incorporated herein and form part of the specification, illustrate the present invention and, together with the description, further serve to explain the principles of the invention and to enable a person skilled in the relevant art to make and use the invention.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 1A and 1B"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
