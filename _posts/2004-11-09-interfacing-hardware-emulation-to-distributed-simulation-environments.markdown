---
title: Interfacing hardware emulation to distributed simulation environments
abstract: A system for interfacing hardware emulation to software simulation environments may include a simulation node configured to simulate a first portion of a system under test and a hardware emulation node configured to emulate a second portion of the system under test. The hardware emulation node may also be configured to exchange simulation information (such as representations of signal values obtained as output from the emulated portion of the system under test) with the simulation node. The hardware emulation node may contain a field programmable gate array devices (FPGA) configured to perform the hardware emulation. The FPGA may be mounted on an expansion board, such as a PCI (Peripheral Component Interconnect) board.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07424416&OS=07424416&RS=07424416
owner: Sun Microsystems, Inc.
number: 07424416
owner_city: Santa Clara
owner_country: US
publication_date: 20041109
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["1. Field of the Invention","This invention relates to the field of computer systems and, more particularly, to distributed simulation environments.","2. Description of the Related Art","Generally, the development of components for an electronic system such as a computer system includes design verification of the components, which may be accomplished, for example, by simulation of models of the components. During simulation, the specified functions of each component may be tested and, when incorrect operation (a bug) is detected, the model of the component may be changed to generate correct operation. Once design verification is complete, the model may be fabricated to produce the corresponding component. Since many of the bugs may have been detected in design verification, the component may be more likely to operate as specified and the number of revisions to hardware may be reduced. Simulation models are frequently described in a hardware description language (HDL) such as Verilog, VHDL, etc.","Originally, simulations of electronic systems were performed on a single computing system. However, as the electronic systems (and the components forming systems) have grown larger and more complex, single-system simulation has become less desirable. The speed of the simulation (in cycles of the electronic system per second) may be reduced due to the larger number of gates in the model which require evaluation. Additionally, the speed may be reduced as the size of the electronic system model and the computer code to perform the simulation may exceed the memory capacity of the single system. In some cases, the simulators may not be capable of simulating the entire model. As the speed of the simulation decreases, simulation throughput is reduced.","To address these issues, distributed simulation has become more common. Generally, a distributed simulation system includes two or more computer systems (i.e. nodes) simulating portions of an electronic system in parallel. Furthermore, each node must communicate with other nodes to transfer information between different simulated portions of the electronic system. More particularly, a distributed simulation system may sample output signals from the portions of the system simulated by each node and communicate the corresponding signal values to other nodes. The received signal values are then driven as inputs to the models in those other nodes.","When a complex electronic system is partitioned into portions for design verification using simulations, in many cases the amount of processing required to simulate a given portion may differ from the amount of processing required to simulate another portion. As coordination and\/or synchronization between different nodes involved in the distributed simulation may be required after each node has completed processing for a particular simulated time interval, a given node may be unable to continue simulation until all other nodes have also completed processing for the same interval. Thus, the overall simulation throughput of a distributed simulation system may be limited by the speed of the slowest node in the system. Accordingly, nodes capable of quickly verifying the design of relatively large portions of a simulated electronic system in a cost-effective manner, while at the same time coordinating and synchronizing with other distributed simulation nodes and allowing for flexible reconfiguration, may be desirable.","Various embodiments of a system and method for interfacing hardware emulation to software simulation environments are disclosed. According to a first embodiment, the system may include a simulation node configured to simulate a first portion of a system under test and a hardware emulation node configured to emulate a second portion of the system under test. The hardware emulation node may also be configured to exchange simulation information (such as representations of signal values obtained as output from the emulated portion of the system under test) with the simulation node. The hardware emulation node may contain a field programmable gate array device (FPGA) configured to perform the hardware emulation. The FPGA may be incorporated within or mounted on an expansion board (e.g., a personal computer expansion board) such as a PCI (Peripheral Component Interconnect) board. In other embodiments, multiple expansion boards may be included in the hardware emulation node, with one or more FPGAs mounted on each expansion board.","Each FPGA may include logic under test (representing the portion of the system under test being emulated on the FPGA), a drive logic block, a sample logic block, and a PCI interface. The drive logic block may be configured to drive input signals to the logic under test. The input signals may be driven in response to drive messages generated by a software emulation controller included within the hardware emulation node. The drive messages, in turn, may be generated by the emulation controller in response to simulation information received from other nodes of the system (e.g., a simulation node or other hardware emulation nodes). The sample logic block may be configured to sample an output signal of the logic under test. The sampled output signal may be sent to the emulation controller via the PCI interface, mapped to a logical signal, formatted according to a grammar used by the nodes of the system, and sent to another node (such as a simulation node or other hardware emulation nodes). The sampled output signal may thereby be used to drive simulations and\/or emulations at other nodes, while the input signals may be generated in response to simulation events or emulation outputs at other nodes, thereby providing a mechanism for coordinated distributed design verification across the nodes of the system.","In one embodiment, the system may also include a distributed control node, configured to coordinate the simulations and emulations being performed at simulation and hardware emulation nodes, respectively. In another embodiment, the system may also include a hub configured to route messages (such as messages containing the simulation information, as well as other commands) between the remaining nodes of the system.","While the invention is susceptible to various modifications and alternative forms, specific embodiments are shown by way of example in the drawings and are herein described in detail. It should be understood, however, that drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the invention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","110","110","130","130","120","140","110","110","110"]},"Distributed design verification system  may be operable to verify the design of an electronic system, such as a computer system, by partitioning the electronic system into a plurality of portions, simulating some portions on SNs  and emulating other portions on HENs . The electronic system whose design is being verified may be referred to herein as a \u201csystem under test\u201d. A system under test representing a multiprocessor computer system may include, for example, multiple central processing units (CPUs), numerous application-specific integrated circuits (ASICs), and various processor boards, I\/O boards, and other boards. For such a system under test, a particular CPU may be emulated at a given HEN , one or more ASICs at an SN , and an I\/O or processor board at another SN . In one embodiment, the system under test could be a system on a chip (SOC). In some embodiments, a portion of a CPU, an ASIC or board may be emulated at a given HEN  or simulated at an SN , rather than the entire component. In other embodiments, multiple components, such as ASICs, may be emulated at a given HEN  or SN , as desired.","SNs , HENs , DCN  and hub  may all be referred to as nodes of DDVS . Generally, a node is the hardware and software resources for: (i) simulating a component or portion of the system under test; (ii) emulating a component or portion of the system under test; or (iii) running a test program or other code (e.g. communication routing code in the hub) for controlling or monitoring the simulation. A node may include one or more of: a computer system (e.g. a server or a desktop computer system), one or more processors within a computer system (and some amount of system memory allocated to the one or more processors) where other processors within the computer system may be used as another node or for some other purpose, etc. Multiple nodes may be incorporated within a single computer host or system in some embodiments. The interconnection between the nodes illustrated in  may therefore be a logical interconnection. For example, in one implementation, Unix sockets are created between the nodes for communication. Other embodiments may use other logical interconnection (e.g. remote procedure calls, defined application programming interfaces (APIs), shared memory, pipes, etc.). The physical interconnection between the nodes may vary. For example, the computer systems including the nodes may be networked using any network topology. Nodes operating on the same computer system may physically be interconnected according to the design of that computer system.","An SN  may include any simulator and a model of the portion of the system under test simulated in that node, as described below in further detail. For example, event-driven simulators may be used. Alternatively, cycle-based simulators may be used. Exemplary simulators may include the VCS simulator from Synopsys, Inc. (Mountain View, Calif.); the NCVerilog simulator from Cadence Design Systems, Inc. (San Jose, Calif.); the VerilogXL simulator from Cadence; or the SystemSim program from Co-Design Automation, Inc. of Los Altos, Calif., or any other simulator may be used. The model may be coded in any HDL (e.g. Verilog, VHDL, etc.) supported by the simulators used. The SNs  may further include control code used to exchange simulation information with other nodes, to control the simulation within the node, etc. Not all SNs  in DDVS  may use the same simulator; that is, different simulators may be employed at different SNs within a single DDVS . In addition, SNs  may differ from one another in processing capacity, I\/O capacity, memory capacity, etc.","An HEN  may comprise one or more expansion boards, each of which may contain programmable logic, such as one or more field programmable gate array devices (FPGAs) operable to emulate a portion of the system under test, as described below in further detail. Each HEN  may also further include software modules used to exchange simulation information with other nodes, to control the emulation within the HEN, etc. The term \u201csimulation information\u201d, as used herein, may refer to any combinations of signals or commands that may be used to control simulation and\/or emulation of one or more portions of the system under test, or to provide status on the simulation and\/or emulation of a portion of the system under test. Further information related to specific commands and signals included within simulation information is provided below in greater detail. Any suitable FPGA or FPGAs from any desired FPGA vendor (such as Xilinx, Altera, etc.) or combination of vendors, where the FPGA is programmable to emulate desired logic whose design is to be verified, may be used within an HEN. The configuration of different HENs within DDVS  may differ, for example in the number of expansion boards and\/or FPGAs included, the FPGA vendor, the processing, memory and\/or I\/O capacity of the HEN . Not all the slots available for expansion boards within an HEN may be used for hardware emulation at any given time; that is, it may be possible to increase or decrease the amount or complexity of hardware emulation being performed at an HEN by changing the number of expansion boards and corresponding FPGAs being utilized.","DCN  is a node which may execute a test program or other code which is not part of the system under test, but instead may be used to control the distributed design verification process (e.g., to coordinate simulation and hardware emulation being performed at other nodes), introduce some test value or values into the system under test (e.g. injecting an error on a signal), monitor the simulation for certain expected results or to log the simulation results, etc. It is noted that in some embodiments, multiple DCNs  may be employed within a DDVS . A DCN  may communicate with SNs  and\/or HENs  to provide a test value, to request a value of a physical signal or other hardware modeled in the component simulated or emulated in the SN  or HEN , to communicate commands to the simulator in the SN  or the emulator in an HEN , to control the simulation, etc.","Hub  may be provided for routing communications between the various other nodes in the distributed design verification system . Each SN , HEN , or DCN  transmits message packets to the hub, which parses the message packets and forwards message packets to the destination node or nodes for the message. Additionally, hub  may be the destination for some message packets (e.g. for synchronizing the simulation across the multiple SNs , HENs  and DCNs ). It is noted that in some embodiments, SNs , HENs  and DCNs  may be capable of sending messages directly to each other without the use of a hub , i.e., hub  may be omitted from DDVS  in some embodiments.","As mentioned above, communication between the nodes of DDVS  may be in the form of message packets. The format and interpretation of the message packets may be specified by a grammar implemented by the nodes. The grammar may be an extendable language comprising predefined commands for communicating between nodes, providing for command\/control message packets for the simulation\/emulation as well as message packets transmitting signal values (and optionally signal strength information). Message packets transmitting signal values may be referred to as signal transmission message packets, and the command in the message packet may be referred to as a transmit command. The grammar may allow for more abstract communication between the nodes, allowing for the communication to be more human-readable than the communication of only physical signals and values of those signals between the nodes. Because the grammar may be used to convey signal information among different SNs  employing different simulators, but not information specific to any given simulator, the grammar may be said to be simulator agnostic. The grammar may also be used to communicate configuration information (e.g., mappings of corresponding ports at different SNs and HENs), or to store configuration information in files at one or more nodes of DDVS . As used herein, a physical signal is a signal defined in the simulation model (e.g., at an SN ) or hardware emulation (e.g., at an HEN ) of a given component of the system under test. A logical signal is a signal defined using the grammar. Logical signals may be mapped to physical signals (or vice versa) using one or more grammar commands.","Generally, a message packet may be any communication between nodes in the distributed simulation system. The message packet may be encoded in any format (e.g. binary, a string of characters, etc.). Each message packet may include one or more commands. In one embodiment, each message packet may comprise one command. In one specific implementation, the command may comprise a string of one or more characters comprising the name of the command, a separator character (e.g. an open brace in one embodiment, although any character may be used), an optional set of arguments, and a second separator character (e.g. a close brace in one embodiment, although any character may be used) which marks the end of the command. A transmit command may include a source model instance or hardware emulation as an argument, as well as a model, hardware emulation and port list for the logical port or ports for which signal values are being provided. Other commands may include stop commands for pausing the simulation\/emulation, start commands for resuming the simulation\/emulation, a no-operation command (NOP) for simulation\/emulation synchronization and replying to commands, commands for the hub to synchronize timestep transitions or clock cycles, and optionally phases in the timestep or clock cycle, etc.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":["110","110","280","210","220","225","280","210","280","227","240","250","260","275","270","285","280"]},"Generally, MUT  may be a simulatable model of a component of a system under test. The model may be an HDL model (e.g. a Verilog model, a VHDL model, etc.). The model may be a register transfer level (RTL) model of the design of the component. Alternatively, the model may be a behavioral description of the operation of the component, again written in HDL. The model may be a behavioral or functional model written in a verification language such as Vera\u00ae. A hardware verification language may provide a higher level of abstraction than an HDL. The model may also be coded in other languages (e.g. high level programming languages such as C or C++).","Drivers  may be used to specify values for input signals to be received by MUT . In some embodiments, MUT may include bi-directional (\u201cbidi\u201d) signals, and drivers  may include drivers for such bi-directional signals. Simulation controller  may place a value to be driven on an input or bi-directional signal (e.g., based on transmit commands received from other nodes) and enable the driver to supply the proper state on the input or bi-directional signal.","Simulator  may generally be any commercially available simulator for the MUT . For example, Verilog embodiments may employ the NCVerilog program manufactured by Cadence Design Systems, Inc. (San Jose, Calif.); the VCS program manufactured by Synopsys, Inc. (Mountain View, Calif.); the VerilogXL simulator from Cadence; or the SystemSim program from Co-Design Automation, Inc. of Los Altos, Calif., among others. In one embodiment, simulator  may be an event driven simulator, although other embodiments may employ any type of simulator including cycle based simulators.","SN  may simulate MUT  as a series of timesteps in some embodiments. Generally, a timestep is the granule of simulation time by which the simulator  evaluates events and advances. For example, in one embodiment each time step may simulate the operation of the MUT  for one nanosecond. As described below, an HEN  may also emulate its portion of the system under test, which may be referred to as its \u201clogic under test\u201d (LUT) using timesteps. As used herein, the phrase \u201cevaluating the model\u201d may refer to processing, by a simulator such as simulator , of each of the then-scheduled events which occur in the current timestep.","In some embodiments, distributed design verification system  may include at least two phases within a simulated or emulated timestep: a zero time phase and a real time phase. Further details regarding emulated timesteps, including zero time phase emulation and real time phase emulation, are provided below. During the zero time phase, SNs , HENs , DCNs , and hub  may communicate with as many commands as desired (including commands which sample output signals of MUTs, and\/or change the values of input signals of MUTs) while the simulation and emulation is frozen. In other words, SNs  do not cause their simulators  to evaluate MUTs  during the zero time phase (even if the received commands would otherwise cause scheduling of one or more events in the simulator). In some embodiments, zero time model  may include one or more data structures such as queues to retain representations of events that may need to be simulated or emulated after the zero time phase completes. At the end of the zero time phase, any events scheduled as a result of activities in the zero time phase may be evaluated at SNs . Simulator  may be configured to interact with zero time model  of simulation controller  (for example, by calling zero time phase PLI functions implemented within zero time model ) to simulate zero time phase operations.","The zero time phase may be used to allow test programs (e.g. from a DCN  or another SN ) to transmit multiple commands to the various SNs and receive replies to those commands without the simulation progressing between the commands. Thus, for example, a first command may be sent to a SN to read a first signal value. Based on the returned value, the test program may send another command to read a second signal value. Since the simulator is frozen, the state of the second signal value is the same as it was when the first signal value was read (and vice versa). Accordingly, for example, a DCN  may assemble state information from multiple SNs , or from a single SN , using multiple commands and may be assured that the state returned for each command is consistent with the other state returned for the other commands (since the state of the simulation is frozen).","The real time phase may include the sampling and driving of signals from MUTs , and may also include time in which the responses to the driven signals are evaluated. The real time phase may further include evaluation of one or more commands received by the SN  (e.g. reading or writing signal values relative to a current state at the SN ). The sample and drive of signals (and a subsequent evaluation of the MUT ) may be iterated multiple times within a timestep. The sampling of signals may include reading the signal values from MUT  and transmitting one or more transmit commands with the sampled signal values. The driving of signals may include receiving one or more transmit commands with driven signal values and applying those signal values to the MUT  (e.g., using drivers ). The subsequent evaluation of the MUT  may determine if the driven signal values cause any changes to signal values within the current timestep (e.g. if the driven signal asynchronously changes an output signal) and may also schedule events for subsequent timestep(s) based on the driven signal values. If any output signals have changed, another phase of sampling and driving may occur. The sampling and driving may be repeated until each SN does not detect any changes to its output signals in the current timestep, at which time the current timestep may terminate and the next timestep may begin. By iteratively sampling, driving, and evaluating the model, asynchronous signals may be handled within the timestep (if the asynchronous output changes during the timestep). During real time phase processing, physical models  and logical models  may be used to map physical signal representations (e.g., derived from sampling output signals of MUT  represented in HDL) to user-defined logical signals, and vice versa. It is noted that, in one embodiment, the user-defined logical signals may be arranged in user-defined logical ports, and that the routing of signals from node to node may be done on a logical port basis.","As described above, SN  may be configured to exchange simulation information with other nodes of DDVS  (e.g., SN  may send output signal values based on samples from MUT , and receive input signal values to drive MUT ). Such inter-node communication may be facilitated using formatter , parser  and socket . Formatter  may be configured to format outgoing communications or messages from simulation controller  according to a grammar being used for inter-node communications. The formatted messages may be sent to hub  (or directly to other nodes) using socket . Incoming messages received on socket  from the hub  or from other nodes may be parsed according to the grammar and passed for further processing to other constituents of simulation controller . Socket  may be a generic Unix socket implementation for communicating with the hub , or a socket implemented according to the specifications of any desired operating system. While one socket  is shown with bi-directional communication with the hub  in the illustrated embodiment, other embodiments may include two independent sockets, each communicating in one direction (sending or receiving). Multiple unidirectional or bi-directional sockets may be used, as desired. In addition to the software modules described above, simulation controller  may also include other modules and\/or objects, not shown in , such as modules representing individual physical and logical signals, commands, etc.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 3","FIG. 3"],"i":["a ","a "],"b":["130","130","310","310","371","380","370","310","311","311","310","311","310","380","310","370","311","371","380","100","130","110","120","140"]},{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 3","FIG. 3","FIG. 3","FIG. 3"],"i":["b ","a ","b","a"],"b":["130","311","311","315","311","320","325","340","311","311","311","311","311","311","310"]},"Emulation controller  may comprise software used to control the emulation within the illustrated HEN and coordinate with other HENs, SNs, and DCNs, providing functionality generally similar to that provided by simulation controller  for an SN as described earlier. Emulation controller  may be configured to interact with each PCI board  and its components via PCI driver , which may be a software module configured to transmit commands and data in either direction over PCI bus  linking PCI boards  to the remaining components of the HEN. Various components providing similar functionality to the components of simulation controller , such as a zero-time model , one or more physical models , one or more logical models , a parser , a formatter , and a socket  may also be included within emulation controller . In addition, emulation controller  may also include other modules and\/or objects, not shown in , such as modules representing individual physical and logical signals, commands, etc.","The portion of system under test to be emulated at a PCI board  may be synthesized as LUT  within FPGA , for example using tools provided by the FPGA vendor or a third party vendor. Such tools, may, for example, allow a user to synthesize the portion of the system under test starting with an HDL representation, or a representation in another high-level language. Generally, LUT  may represent any emulatable portion or component of the system under test, such as part or all of a processor, an ASIC, a processor board, an I\/O board, or any combination of such components. Drive logic block  may provide one or more signal drivers to drive LUT input signals (which may include bi-directional signals) in response to drive messages from emulation controller  received via PCI interface  and PCI driver . The drive messages may be generated by emulation controller  in response to signals or commands received from other nodes of DDVS , such as an SN  or another HEN . Sample logic block  may include a number of signal samplers that latch the LUT's output signals (which may also include bi-directional signals). Such a latched output signal may be sent to emulation controller  via PCI interface  and PCI driver , received and mapped by emulation controller  to a logical signal (e.g., using physical models  and logical models ), formatted according to the grammar described above, and sent to other nodes of DDVS  such as an SN .","As seen by the rest of DDVS , the functionality provided by an HEN  in emulating its LUT  may be generally similar to the functionality provided by an SN  in simulating its MUT . That is, both HEN  and SN  may take commands (e.g., from a DCN ) or input signals generated at other nodes of DDVS  as inputs, and provide responses (e.g., in the form of output signals and\/or additional commands) representing the results of driving the input signals to their respective portions of the system under test. Thus, the functionality provided collectively by simulator , MUT , drivers  and PLI  may logically be similar to the functionality collectively provided by FPGA  and PCI driver , and the functionality provided by simulation controller  may be generally similar to that provided by emulation controller . As the LUT is emulated in hardware rather than being simulated entirely in software, however, the amount of logic that can be emulated within a given FPGA (as measured, for example, in gate count) or a combination of FPGAs within an HEN may exceed that which can be simulated within a single SN within the same time. Thus, combining HENs with SNs within DDVS  may allow for more complex parts of the system under test to be emulated using hardware emulation, while less complex portions may be simulated in software. In addition, using a combination of software simulation and hardware emulation may allow for flexible re-use of existing models or hardware emulations, without, for example, restricting design verification to either software simulation alone or hardware emulation alone. Furthermore, the use of inexpensive expansion boards such as PCI boards , rather than custom-built hardware emulators, may enable configurable and expandable design verification solutions to be implemented at relatively low cost.","As described earlier, just as SNs  may simulate MUTs  as a series of timesteps, in some embodiments, an HEN  may also be configured to emulate the behavior of its LUT  in a series of timesteps. An HEN  may also exchange simulation information with other HENs and\/or SNs, e.g., by sending formatted logical output signal values and\/or commands via socket , and receiving and parsing input signal values and\/or commands. The operation of one embodiment of a DDVS  wherein SNs perform simulation processing in a series of timesteps, and HENs perform hardware emulation in a series of timesteps, is described in further detail below in conjunction with the description of .","In some embodiments, as noted above, hardware emulation may also include at least two phases within an emulated timestep: a zero time phase and a real time phase. In such embodiments, zero time model  may provide generally similar functionality within emulation controller  as was provided within simulation controller . Thus, during the zero time phase of an emulated timestep, HENs , SNs , DCNs , and hub  may communicate with as many commands as desired (including commands which sample output signals of LUTs, and\/or change the values of input signals of LUTs or the values stored in emulated registers within an LUT) while the emulation is frozen at the HENs and the simulation remains frozen at the SNs. Clock logic included within FPGA  may be programmed to remain in a desired (i.e., unchanged) state during a period when emulation is frozen and zero time phase operations are performed, and to resume clock transitions after the zero time phase completes. It is noted that in one embodiment, zero time phase processing may be omitted from an HEN , and that zero time model  may be omitted or not used in such embodiments. In another embodiment, multiple zero time and\/or real time phases may be implemented.","The real time phase may include the sampling and driving of signals from LUTs , and may also include time in which the responses to the driven signals are emulated. The real time phase may further include evaluation of one or more commands received by the HEN  (e.g. reading or writing signal values relative to a current state at the HEN ). The sample and drive of signals (and a subsequent emulation step of the LUT ) may be iterated multiple times within a timestep. The sampling of signals may include reading the signal values from LUT  using the signal samplers within sample logic block , and transmitting one or more transmit commands with the sampled signal values. As in the case of SNs, physical models  and logical models  may be used to map physical signal representations (e.g., derived from sampling output signals of LUT ) to user-defined logical signals, and vice versa. In one embodiment, the user-defined logical signals may be arranged in user-defined logical ports, and the routing of signals from node to node may be done on a logical port basis. Logical signals may be formatted according to a grammar used for inter-node communication messages, prior to being transmitted to another node (e.g., via hub ). The driving of signals may include receiving one or more transmit commands with driven signal values. After receiving and parsing such a transmit command (e.g., from an SN or another HEN), emulation controller  may be configured to send a drive message (e.g., from physical models ) to driver logical block  via the PCI driver  and PCI interface . Driver logic block  may be configured to applying the driven signal values to the LUT . The subsequent emulation of the LUT  may determine if the driven signal values cause any changes to signal values within the current timestep (e.g. if the driven signal asynchronously changes an output signal). If any output signals have changed, another phase of sampling and driving may occur. The sampling and driving may be repeated until each HEN does not detect any changes to its output signals in the current timestep, at which time the current timestep may terminate and the next timestep may begin. By iteratively sampling, driving, and evaluating the model, asynchronous signals may be handled within the timestep (if the asynchronous output changes during the timestep). During real time phase processing, physical models  and logical models  may be used to convert physical signal representations (e.g., derived from sampling output signals of LUT ) to logical representations, and vice versa.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 4","FIG. 3"],"b":["100","130","110","410","110","130","311","130","311","140"],"i":"a"},"Once the partitions have been decided, the SNs  and HENs  may each be initialized (block ). During initialization, for example, emulated logic may be synthesized at the FPGAs  of the HENs , and MUTs  may be loaded or copied to SNs . After initialization is complete, the SNs  and HENs  may begin simulating\/emulating the first timestep (block ), for example in response to a command from a DCN . Depending on whether a given node is configured for hardware emulation or for software simulation (decision block ), a different set of steps may then be performed at the given node.","As shown, timestep processing for a hardware emulation node  may begin with a zero time phase emulation at FPGA  as described above (block ). In some embodiments, zero time phase emulation may also result in changes that require iterative emulation steps (not shown in ). When zero time phase emulation at an HEN  has completed, or if no zero time phase emulation is to be performed at the HEN, in one embodiment the HEN may send a message indicative of such a completion (such as a \u201cNOP\u201d or \u201cNo-Op\u201d command formatted in accordance with the grammar described above) to DCN . In such an embodiment, where DCN  is configured to coordinate the phases of a timestep, DCN  may be configured to wait until it receives zero time phase completion messages from all HENs and SNs. After such messages have been received from all participating SNs  and HENs , DCN  may be configured to send a message indicating the end of zero time phase processing to the SNs  and HENs  (such as a \u201cZT_Done\u201d command formatted according to the grammar). As noted above, in some embodiments, HENs may be configured to omit zero time phase emulation (i.e., to skip the step illustrated in block ), e.g., by immediately sending a message indicating a completion of zero time formatting to DCN . In another embodiment, DCN  may be configured to ignore HENs during zero time phase processing, and to coordinate zero time phase processing only among simulation nodes.","After zero time phase operations have been completed at all participating HENs and SNs, HEN  may proceed to begin performing real time phase emulation at FPGA  (block ). As described above, as a result of real time phase emulation, certain output signals from LUT  may be sampled using sample logic block , transformed or translated into a logical signal, formatted by formatter , and sent to one or more additional nodes (block ). In addition, during this step, input signals (e.g., from other HENs , or other SNs) may be received over socket , parsed by parser , transformed from a logical representation to a physical signal representation, and sent to FPGA  by PCI driver  via PCI interface . In some embodiments, input signals may also be received from other FPGAs within the same HEN during this step. In one embodiment, such input signals may be physical signals that do not require parsing and\/or logical-to-physical transformations, unlike signals received from other nodes.","If the value of any of the received input signals for LUT  has changed during the timestep (decision block ), driver logic block  within FPGA  may apply the input signal value or values to LUT  (block ) and begin another iteration of real time phase emulation (i.e., repeat step  and following steps as described above). If no input signal requires further processing within the current timestep, in one embodiment HEN  may be configured to send a message indicative of real time emulation completion (e.g., a \u201cNOP\u201d command) to DCN . When such messages have been received from all HENs  and SNs  participating in the device verification, DCN  may be configured to send a message indicating that processing for the next timestep should be initiated to each participating HEN and SN. Upon receiving such a message (detected at decision block ), HEN  may begin processing for the next timestep (i.e., go back to block ). If no more time steps remain to be simulated or emulated, the verification is considered to be completed (block ).","Timestep processing for a simulation node  may proceed through the steps starting with block , where events scheduled for the current timestep (e.g., as a result of a previous timestep) may be simulated. Subsequently, zero time phase simulation may be performed (block ), which may include zero time PLI interactions between simulator  and zero time model . As with zero time phase processing at HENs , zero time phase processing at an SN  may also include iterative steps not shown in . Real time phase simulation processing may then be begun (block ), e.g., using PLI . Output signals may be sampled and sent to other nodes after a physical-to-logical conversion and formatting, and input signals may be received from other nodes (block ). If new input signal values are received for simulation within the current timestep, real time phase processing may be repeated beginning with the step illustrated in block . Once real time phase simulation processing for the current timestep is complete at all participating HENs and SNs, if timesteps remain to be simulated, processing for the next timestep may begin (block ).",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 5","FIG. 5"],"b":["110","500","520","540","510","530"]},"In one embodiment, PLI  may be compatible with IEEE 1364-1995 standard. Generally, the PLI may comprise a set of simulator-defined and\/or user-defined functions called by the simulator  at certain predefined points within the timestep. The code comprising the functions may be part of the simulation controller  (e.g., in the zero time model  or the physical models ).","At the beginning of the timestep, the simulator  may evaluate all the scheduled events occurring within the simulation timestep (reference numeral ). The simulator  may then call the PLI function or functions forming the zero time phase (reference numeral ). In these functions, any zero time communication that is desired (e.g. testing various model signals\/resources and modifying signals\/resources) may be performed. The simulator  may then evaluate events which may have been scheduled due to zero time operations (if any) (reference numeral ). For example, the zero time operations may have modified a signal or register value, which results in evaluation events for each sensitive process. After evaluating any zero-time-generated events, the second PLI call (reference numeral ) to sample output signals (including bi-directional signals) and to drive input signals (including bi-directional signals) may be performed. The PLI function or functions may include the communication with hub  (and thus with other nodes) to send or transmit output signal values after sampling, and receive input signal values prior to driving (hence the label \u201csample-send-receive-drive\u201d). If new input signal values are driven, the PLI function may communicate to the simulator  (e.g. by scheduling a callback) that the PLI functions are to be called again after evaluating the events caused by the new input signal values. Repeating the sample-send-receive-drive calls and associated processing is shown as the dotted arrow  in .","The sample\/drive PLI function may schedule the callback each time new signal values are applied to the model. Thus, if an output signal changes within the current timestep (e.g. asynchronously), then the new value of the output signal may be transmitted within the current timestep. Similarly, if an input signal changes asynchronously, the new value of the input signal may be applied to the model during the current timestep (during the next iteration of the sample\/drive PLI function). Once a sample\/drive sequence occurs in which no input signal changes are applied and no output signal values change, the sample\/drive PLI function may not schedule the callback. When the real time phase processing is complete at all participating nodes, the timestep may end (moving to the next timestep).",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 6","FIG. 5","FIG. 5","FIG. 6","FIG. 5","FIG. 6"],"b":["130","311","600","311","610","620","530","315","315","610","620","650","380","311","130","315","220"]},"It is noted that while a PCI expansion board has been used for FPGA  in some of the embodiments described above, in other embodiments other types of expansion boards (such as PCI-X boards, or proprietary boards) and buses and interconnect technologies (such as PCI-X, proprietary buses, or serializer\/deserializer (SERDES) technology) capable of supporting the FPGA and interconnect functionality described above may be employed instead of, or in addition to, PCI boards and buses. It is also noted that the functions performed by the various software components or modules shown in  and (e.g., simulation controller  and its subcomponents, emulation controller  and its subcomponents, etc.) may be combined within a single executable program, or distributed among different executables in any combination.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 7","b":["700","710","100","710"]},"Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3","i":"a "},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3","i":"b "},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
