---
title: System and method for scheduling content updates in a content-based application
abstract: Described are various mechanisms and techniques for influencing or controlling a content update schedule for a content-based software application on a mobile device. A content server issues one or more commands to the mobile device that establish a content update schedule for the mobile device. The mobile device then performs content update sessions with the content server based on that schedule. During any one or more refresh sessions, the content server delivers another command to establish a new content update schedule. This system provides the advantage of allowing the content server to regulate how frequently the mobile device retrieves new content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08620994&OS=08620994&RS=08620994
owner: QUALCOMM Incorporated
number: 08620994
owner_city: San Diego
owner_country: US
publication_date: 20060223
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Field of the Invention","The present invention generally relates to content-based software applications. More particularly, the invention relates to software applications that periodically retrieve content from a remote location.","2. Description of the Related Art","Information is available today to a degree that eclipses anything humans have ever experienced. The Internet is one component responsible for making the dissemination of information so simple. The broad, even worldwide reach of the Internet makes information that develops anywhere on the planet instantly accessible to anyone else on the planet that happens to have an Internet connection. This degree of instant accessibility has transformed people's view of what \u201ccurrent information\u201d really is. For some people in some circumstances, information that is older than 15 minutes is ancient history\u2014yesterday's news.","But the Internet is not alone in the transformation of information accessibility. Wireless networking has also played a major role. As people have become more accustomed to having instant access to information on their desktop computers, they have become intolerant of not having that access while away from their computers. Even a short drive in the car makes some people nervous about what they are missing. The wireless industry, and in particular the wireless telecommunications industry, is addressing that need.","Today people can use mobile devices, such as cellular telephones and personal digital assistants (PDA's), to stay in touch while away from a more conventional means of communication. Mobile device manufacturers are empowering those devices with the ability to keep the user in touch with the information superhighway. New applications and services are constantly being developed to enable users to retrieve their valuable (and sometimes invaluable) information using their mobile devices.","However, information accessibility on mobile devices is still in its infancy, relatively speaking. Conventional, even cutting-edge technologies are often inefficient when retrieving new information. Conventional mechanisms constantly struggle to find the balance between trying to keep the user up-to-date on their mobile device, while not wasting bandwidth or network usage if no new information is available. For instance, a content-based application on a mobile device, by definition, doesn't know what is available at a content server until it connects to the content server. This paradox leads to one of the most stymieing problems facing the developers of mobile devices and content-based services\u2014how often should the mobile device connect to the server to retrieve new information?","An adequate solution to this problem has eluded those skilled in the art, until now.","The invention is directed at issuing commands to a mobile device on which resides a content-based application. In one aspect, the invention provides a system for influencing a content update schedule on a mobile device. The system includes a server configured with a processor, a memory, and a storage medium. The storage medium is encoded with a server application that, when executed by the processor, runs in the memory and causes the server to create a refresh command including a repeatdelay parameter that specifies a period during which a subsequent refresh command should not be executed. The server is further caused to issue the refresh command to a mobile device having a content-based application configured to retrieve content from a content server. The refresh command, if executed on the mobile device, causes the mobile device to initiate a content update session.","In another aspect, the invention provides a system for scheduling a content update. The system includes a mobile device configured with a processor, a memory, and a storage medium. The storage medium is encoded with a command queue and a content-based application that, when executed by the processor, runs in the memory and causes the mobile device to monitor the command queue for commands that are due for execution, and if a refresh command in the command queue is due for execution and is not prohibited from execution by a prior refresh command, to execute the refresh command by contacting a content server identified in the refresh command and requesting a content update session, and further to receive a new refresh command configured for execution at a predetermined time in the future.","In yet another aspect, the invention provides a method and a computer-readable medium encoded with instructions for influencing a content update schedule on a mobile device. The method and instructions include creating a refresh command that, if executed, causes a mobile device to perform a content update that includes contacting a content server to initiate a content update session, the refresh command including a parameter that specifies a time when the refresh command should be executed; and issuing the refresh command to the mobile device","In still another aspect, the invention provides a method and a computer-readable medium encoded with instructions for scheduling a content update. The method and instructions include receiving a refresh command that specifies a time when the refresh command should be executed and a period during which a subsequent refresh command should not be executed; storing the refresh command in a command queue on a mobile device; monitoring the command queue to determine if any commands in the command queue are due for execution; and when the refresh command has become due for execution, executing the refresh command by contacting a content server and initiating a content update session.","What follows is a detailed description of various mechanisms and techniques for controlling a content update schedule for a content-based software application on a mobile device. A content server issues one or more commands to the mobile device that establish a content update schedule for the mobile device. The mobile device then performs content update sessions with the content server based on that schedule. During any one or more refresh sessions, the content server delivers another command to establish a new content update schedule. The command may include a parameter that identifies a period during which the command should not be repeated. This system provides the advantage of allowing the content server to regulate how frequently the mobile device retrieves new content.","System Overview",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["100","100","122","123","122","122","122","112","116","118","120","122"]},"The WAN  may be any network that enables data communication between and among multiple computing devices. One example of such a computing device is a general purpose computer  that may be used to issue electronic messages to a mobile device, such as the mobile messaging device . The WAN  may be a privately accessible network, such as an enterprise network or the like, or it may be a publicly accessible network, such as the Internet. The WAN  and the wireless network  are also coupled via a communications channel  to enable the mobile devices to communicate with devices on the WAN .","Illustrated in  are an application server  and a content server . The content server  is a computing device that serves data or other content  that changes over time. Many different examples exist, such as news servers, stock quote servers, weather information servers, sports information portals, special purpose information portals, messaging servers, and the like. The type of information that can be made available is limitless, and very many different examples will be apparent to those skilled in the art. The content server  includes server software that is configured to provide the content  to requesting devices over the WAN .","The application server  is a computing device or system coupled to the wireless network  that makes software applications  available for download by the mobile devices. The applications  may be made available for free, for a fee, on a subscription basis, or in any other manner. Generally stated, the applications  are downloadable by the mobile devices, such as the cellular phone , for execution on those devices. In this particular implementation, at least one of the applications  served by the application download server  is a content-based application configured for execution on at least one of the mobile devices. The content-based application (the client) is configured to retrieve content from the content server  for presentation by the mobile device.","Briefly stated here and described in greater detail below, a mobile device, such as the cellular phone , includes a content-based application referred to as a \u201ccontent client\u201d or simply as a \u201cclient.\u201d The mobile device may come pre-configured with the client, or it may be downloaded from the application server . The client is configured to process commands issued by the content server  that influence, control, and\/or modify a content update schedule for the client's content. The content update schedule is the time period between successive content updates. In other words, when the client on a mobile device retrieves new content, the content server  may return one or more commands with the new data to control when the mobile device next automatically retrieves more new content. Alternatively, the content server  may issue asynchronous commands to the mobile device to schedule a content update. In these ways, the content server  may regulate how often the mobile device connects to retrieve new content. This feature has the advantage of enabling the content server , which has the best knowledge about when new content is or will be available, to control the client's content update schedule. Specific details about one particular implementation of this mechanism are provided below.","Specific Implementation Details",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2","b":["126","250","126","212","250","250","126","298","299"]},"The Server","The content server  includes a server application  and content . The server application  is operative to make the content  available for retrieval by or delivery to other computing devices, such as the mobile device . In this particular implementation, the content  is composed of individual \u201cunits\u201d , which are the basic structure of the data transmitted to the receiving devices. Briefly stated, a unit  may contain any form of usable digital data, such as a single bit of text, a single image, or the like. In addition, the unit  may contain more complex bundled content, such as a HyperText Markup Language (\u201cHTML\u201d) or a Synchronized Multimedia Integration Language (\u201cSMIL\u201d) document with multiple images, sounds, and script components. The units used in this particular implementation are described in greater detail below in conjunction with .","In addition to delivering content  upon request, the server application  includes a command generator  that is configured to generate one or more commands (e.g., command ) for delivery to the mobile device . A command may take the general form of:","Cmd:command<parameters>","In this example, the \u201cCmd:\u201d is a prefix that introduces what follows as a command, the \u201ccommand\u201d portion includes the name of the particular command being given, and the \u201c<parameters>\u201d portion includes one or more parameters that modify the command. A listing of several commands that may be used in this implementation are detailed in the \u201cCommands Table\u201d provided below in the Appendix. Of particular note is a \u201crefresh\u201d command, which when executed on the mobile device  causes it to perform a content update.","The command generator  may add one or more parameters to the command to affect how and when the command is executed. A listing of several parameters that may be used in this implementation are detailed in the \u201cParameters Table\u201d provided below in the Appendix. However, certain parameters of particular note are described here.","A \u201ctime\u201d parameter may be used to provide a date and time to execute the corresponding command. The use of the time parameter in combination with the refresh command allows the server application  to instruct the mobile device  to perform a content update at a particular date and time. For instance, a stock quote server could use this parameter to schedule stock quote subscribers to perform a content update when the markets close.","A \u201crepeatdelay\u201d parameter can be used to specify that a command should be executed only if a similar command has not already been performed within a certain time interval. A command that includes this parameter should be dropped if an identical command was executed within the specified time period. For example, in certain implementations commands may be delivered using a \u201cpush\u201d type of transport. If the mobile device  is powered down for an extended period of time, a series of similar or identical commands may accumulate. When the mobile device  is powered on, this backlog of commands may be received simultaneously. The \u201crepeatdelay\u201d parameter would allow only one of those commands to be executed, and the others would be discarded.","An \u201cexpires\u201d parameter can be used to indicate a particular date and\/or time after which the command is to be discarded if it has not been executed. This parameter is useful in a situation where time sensitive content becomes outdated in a predictable way, such as sports scores or weather reports.","Some parameters can be used to specify how to retry the command should it fail. A \u201cretrycount\u201d parameter can be used to specify the number of times to retry a command until successful completion. A \u201cretrymin\u201d parameter can be used to specify how long to wait between retries. If the command fails to properly execute due to some network problems, for example, these parameters can be used to re-schedule the command for later execution until either it completes successfully or until the number of retries has been exceeded.","The command generator  may be configured to actually generate the commands at any appropriate time, such as periodically and\/or asynchronously. Commands could be generated periodically in cases where the content changes regularly, such as stock quotes or the like. Asynchronous commands could be generated, for instance, when new content becomes available at the content server , such as when new electronic messages arrive. Additionally, the command generator  may generate commands in response to some event, such as the initiation of a content update session by the mobile device .","The server application  can be configured to transmit commands in different ways and at different times, likely depending on the way in which the mobile device  retrieves the content . For example, the server application  could be configured to deliver commands when the mobile device  contacts the content server  and requests a content update. This approach may be very practical in cases where regular content updates should occur. Alternatively, the server application  could be configured to deliver commands to the mobile device  at arbitrary times using a \u201cpush\u201d type delivery mechanism, such as the Short Message Service (\u201cSMS\u201d) or the like. This approach may be better in cases where it is unpredictable when new content may arrive, such as with critical news updates or electronic messages.","Commands may be sent to the mobile device  using any one or more of many different protocols. For example, if the HyperText Transfer Protocol (\u201cHTTP\u201d) is used to transmit the content , then the command  may be included in HTTP headers alongside the transmitted content itself. If the server application  provides the content  in a multipart message format, such as the Multipurpose Internet Mail Extensions (\u201cMIME\u201d) format, it may include the command  as a header within a preamble of the transmitted content. If the server application  provides the content  in a format that supports hyperlinks, it may include the command  directly in the transmitted content itself, which may be executed when invoked by the user. In addition, the server application  could push the command  to the mobile device  using a mechanism like SMS.","The Client","The mobile device  includes at least one content-based application (client ) that is operative to retrieve content  for display or use on the mobile device . There are many examples of the type of application that may be implemented by the client . For instance, the client  may be configured to retrieve stock quotes, news alerts, weather information, sports scores, electronic messages, or any other content. The client  is responsible for retrieving new content  based on some content update schedule.","In this implementation, the client  includes a content retrieval module  configured to retrieve the content  from the content server  and to store it as local content  in a local content cache . As mentioned above, the client  makes the local content  available for use on the mobile device , such as for viewing by a user, for manipulation by another installed application, or in any other way. The client  may optionally include a user interface  configured to render and display the local content . For example, referring briefly to , the mobile device may include a display  on which the user interface presents the content in some usable fashion. In this example, the client is a stock quote application and the content  being displayed includes stock quotes and stock new alerts.","Returning to , in this implementation, the client  is configured to display a default start-up unit, such as an \u201cindex\u201d unit . The default start-up unit may be identified in meta information  for the client . After start-up, the client  maintains the notion of a \u201ccurrent unit\u201d or last displayed unit. The \u201ccurrent unit\u201d is updated as the user navigates through different units using the client .","The client  presents functionality similar to conventional web browsers in that the client  retrieves content from remote locations over a wide area network. However, the client  differs from conventional web browsers in many important aspects. For instance, the client  can pre-fetch the content  to the local content cache  before a user requests to view or work with the content. In addition, the client  may be implemented without any user interface or controls of its own.","The client  receives commands, such as command , from the content server . As mentioned above, the commands may be received in one or more of many different ways, such as in an SMS message or with (or part of) the content tent  during a content update. When a command is received, the client  puts the new command  in a command queue .","A \u2018scheduler\u2019  continuously monitors the command queue  and performs actions on those commands as necessary. The scheduler  runs in the backgrounds ground even if the user is not actively using the client  or another application supported by the client . The scheduler  may evaluate the command queue  to determine which commands are due for execution. As mentioned above, commands may be scheduled for execution in the future through the use of certain parameters, such as the \u2018time\u2019 parameter.","The scheduler  may remove duplicates from the command queue , such as may occur if the content server  delivers the same command twice. Similarly, if a new command includes a \u201crepeatdelay\u201d parameter (described above), the scheduler  may determine if the same command has already been executed within the repeatdelay value. If so, the scheduler  may discard the new command. In addition, the scheduler  may eliminate any commands that have expired without being executed.","At the time specified in the command, the scheduler  causes the client  to execute the command if possible. In some cases it may not be possible to execute the command precisely at the specified time. For example, if the mobile device  is powered off or without a connection to the content server , the command might not be executed. In those cases, the command may be executed as soon as possible, such as when the mobile device  is powered back on or once again has network connectivity. If a command that includes retry parameters fails for some reason, the scheduler  places the command back into the command queue  and retries it later, as governed by these parameters. The scheduler  removes the commands from the command queue  once successfully completed or expired.","By way of example, suppose the new command  takes the following form:","Cmd:refresh?url=http:\/\/contentserver.com\/stuff;time=14Oct200713:16GMT","In this example, the command is a refresh command and includes two parameters separated by a semicolon (\u201c;\u201d). As mentioned above, the refresh command is an instruction to the client  to perform a content update. The first parameter in the command (\u201curl=\u201d) identifies the particular content to be retrieved and its location. More specifically, the unit \u2018stuff\u2019 is to be retrieved from the location \u201chttp:\/\/contentserver.com\u201d. The second parameter (\u201ctime=\u201d) specifies when the command is to be executed. In this implementation, the \u201ctime\u201d parameter is treated as a \u201cnot-earlier-than\u201d instruction, meaning that the command may be executed at any time after the specified time unless contravened by another parameter. Accordingly, this example instruction is intended to cause the client  to perform a content update on the 14 Oct. 2007 at 13:16 Greenwich Meridian Time by retrieving the unit \u201cstuff\u201d from the domain \u201ccontentserver.com\u201d using the HTTP protocol.","As demonstrated, a typical refresh command contains the address of the server to contact and identifies the content to fetch. The typical refresh command is scheduled to execute at some time in the future. However, in some cases the refresh command may be configured for immediate execution, such as to cause the client  to retrieve an important message that just arrived at the content server .","The refresh command could also instruct the client  to perform a content update but without fetching any content at all. This may be used to instruct the client  to simply connect and receive a future refresh command without downloading any other data.","When the client  executes the refresh command, it connects to the location specified in the command (e.g., the content server ) and requests the content specified in the command. The refresh command may instruct the client  to fetch all of the content  or any subset of the content , depending on how the content server  constructed the command. For instance, in situations where the content  is large but is mostly constant over time (that is, only small bits of it change), the content server  may construct refresh commands that instruct the client  to fetch only a small subset of the content . In one example, a stock application executing on a content server may have a fancy display page with images and other static resources. In this case, the stock application may issue refresh commands to the client to only fetch new stock prices (i.e., a subset of the content ). Conversely, in situations where most of the content changes at once, the content server  will instruct the client  to fetch all of the content rather than just parts. For example, a content server hosting an application that displays weather reports will typically instruct the client  to fetch everything, since the entire report changes from update to update.","In another example, the refresh command may include other parameters:","Cmd:refresh?url=XX;time=XX:00;repeatdelay=20;displayafter=result;playafter=tune","In this example, the refresh command will fetch content from some URL, abbreviated here as \u201cXX,\u201d at time \u201cXX:00.\u201d After the fetch is complete, the unit \u201ctune\u201d (e.g., a media file) will be played and the unit \u201cresult\u201d will be displayed to indicate completion. These two units may or may not have been downloaded with this refresh command.","In addition, the \u201crepeatdelay\u201d parameter defines 20 minutes as the period during which the command should not be repeated or executed again. Accordingly, any attempt to execute an identical refresh command within 20 minutes (the \u201crepeatdelay\u201d period) of executing the above command will be ignored. As mentioned, this is helpful in situations where several refresh commands may arrive at a mobile device at once, such as when the device is first powered on after a lengthy time powered off. In such a case, there is no need to execute the refresh command multiple times when once will do. Accordingly, the repeatdelay parameter allows those subsequent commands that attempt to refresh the same content to be ignored. It will be appreciated that a subsequent refresh command that refreshes different content should not be ignored, and should be unaffected by the earlier repeatdelay parameter.","Commands and parameters could also be abbreviated, and the \u201cCmd:\u201d prefix could be omitted. Thus one possible representation of a refresh command that causes the unit \u201cbaboon.jpg\u201d to be fetched from the domain \u201cserver.com\u201d could be:","r?u=http:\/\/server.com\/baboon.jpg","In this example, the \u201cr\u201d is an abbreviation for \u201crefresh,\u201d the \u201cu\u201d is an abbreviation for \u201cURL,\u201d and the prefix \u201cCmd:\u201d has been omitted. Abbreviating the commands is very useful when sent via a protocol with severe size restrictions like SMS where messages currently cannot exceed about 100 characters. Many other alternatives will also become apparent to those skilled in the art.","In summary, the use of the refresh command coupled with various parameters of the kind described above, allows the content server  to control or influence when the client  performs its content updates as well as what content to retrieve. In this way, the content server  can regulate the content update schedule of the client , which provides greater efficiency because the content server  has the best knowledge of what the content update schedule should be.","It should be noted that certain components have been described here as a single module of code to illustrate certain functionality provided by the client . However, that functionality equally may be embodied in a single executable software module or it may be distributed throughout different software modules of the client . The use of single components in this description is for simplicity of discussion only, and is not necessary to a proper functioning of any implementation of the invention.","What follows is a more focused description of the nature and structure of the \u201cunits\u201d that form the basic construct for content that is transmitted. Following that is a more focused description of particular implementations of the delivery transport that may be used to communicate the content, including commands, from the content server  to the mobile device .","One Implementation of \u201cUnits\u201d",{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 3","FIG. 2"],"b":["301","251"]},"The unit  could roughly correspond to a displayed page of content, like an HTML page, but this is only one use. For example the unit  could also be an image that is part of a Web page where the image is updated independent of the Web page.","The developer of a content-based application can design the particular format of its units based on various criteria, such as performance impact, network usage, available device storage, and the like. In that regard, fewer large units would be simpler to maintain and implement, but make updates larger and take longer. Conversely, a larger number of smaller units would make content updates quicker and more efficient, but would be more difficult to maintain.","Referring now to , the unit  includes three fundamental characteristics: a name , a type , and some content . The unit  could also optionally include other information , such as meta information about the unit . In its simplest form, the unit  could simply be a file, such as an image file. In one example, the unit  could be an image file named \u201cmonkey.jpg\u201d. The unit's name  would then be \u201cmonkey.jpg\u201d and its content  would be the digital image data. The unit's type could either be inferred from its name  (e.g., \u201c.jpg\u201d means a JPEG image) or implicit given the particular format of the content . The unit's type could also be explicit using a type indicator, such as a MIME type of \u201cimage\/jpeg\u201d or the like.","Alternatively, or in addition, the unit  could be more complex. For example, the unit  could be a MIME entity, such as a MIME structured RFC822 message formatted in HTML with embedded images. In this case, the name  could include the subject of the message (e.g., \u201cdear mom\u201d), the type  could include the unit's MIME type (e.g., \u201cmessage\/rfc822\u201d), and the content  could include the e-mail message.","Similarly, the unit  could be an HTML page whose type  is \u201cmultipart\/related\u201d, and the content  would then contain the HTML page and the page's constituent images, sounds, and the like. This MIME type is in common use for e-mail transmission, but is not commonly used with HTTP to transmit ordinary web pages.","The unit's content  can be of any format that is usable by the client and the mobile device on which the client resides. For example, the client could accept plug-ins for proprietary formats. In that case, the content  could be in those proprietary formats.","Although ordinarily only a single unit is transmitted at a time, in some cases it may be more efficient to transmit multiple units in the same transaction or message. For that reason, a special type of unit may be implemented to support transmitting multiple units as a single unit. In one example, a special aggregated MIME type may be used, such as \u201cmultipart\/x.content-aggregate.\u201d The aggregated MIME type may be a simple multipart structure the content of which is other units.","Illustrative Transport Implementations",{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 4","b":["426","410","450","451","410","451","499","410","451","465","470","465","451","450","470","426"]},"In this particular implementation, content can arrive at the mobile device  in one or more of three ways. The content could be installed on the mobile device  when the client  is initially installed, it may be pulled by the client  from the content server  using HTTP or a similar protocol, or it may be pushed to the client  using a similar protocol. In addition, pulling the content could be triggered by sending the client  an SMS message. What follows is a general discussion of particular implementation details for these transport mechanisms.","HTTP Transport","When the client  retrieves content using the HTTP protocol, such as by performing an HTTP fetch, headers may be exchanged between the client  and the server application  to facilitate the transaction. For example, the client  may send headers in the client-transmitted data  with a refresh request that describe the mobile device  or the state of the mobile device . Similarly, the server application  may return standard cookies in the server-transmitted data  for use in future content updates.","Headers may either be transmitted automatically or not. In one particular implementation, the desired headers are explicitly requested. One technique to achieve this is to include a \u201cheader\u201d parameter in the command that causes the communication between the client  and the server application , such as the refresh command described above. With this technique, a list of desired headers is specified with an \u201chdr\u201d parameter. One example of a command formatted in this manner might take the following form:","Cmd:refresh?url=http:\/\/contentserver.com\/flowers.jpg; hdr=min,pid","This command, being a refresh command, causes the client to fetch the file \u201cflowers.jpg\u201d from the domain \u201ccontentserver.com\u201d. Note that the command instructs the client  to transmit two headers with the HTTP fetch when executing the command: the phone number (\u201cmin\u201d) and the platform ID (\u201cpid\u201d) of the mobile device . It will be appreciated that the server application  can use this technique when constructing a refresh command that will be delivered to the client . By including the \u201chdr\u201d parameter in the refresh command when created, the server application  can ensure that the client  returns information that the server application  knows in advance it will need when handling the refresh command, thus increasing the efficiency of the process.","In another example, an \u201cAccept\u201d header may be sent by the client  each time a command is executed that causes communication between the client  and the server application , such as the refresh command. The \u201cAccept\u201d header may be sent regardless of whether the server application  requested it. The client  may send the \u201cAccept\u201d header to list the MIME types supported by and the screen size of the device. The following is one example of such a header that may be included in the client-transmitted data :","Accept: message\/x.bmime, text\/html, text\/plain, image\/png, multipart\/x.content-aggregate; width=100; height=120; depth=16","Note that this example \u201cAccept\u201d header identifies several MIME types that are supported by the mobile device , and the screen size of the mobile device  so that images returned my be appropriately sized for display.","The client  may transmit many other headers to include various information. However, some headers could reveal data about the mobile device  that may be considered private or restricted. For that reason, permission level requirements may be imposed on the client  and\/or the server application  to enable access to certain information. For example, the GPS location of the mobile device  may be available only to applications that are properly approved.","The server application  may also transmit headers to the client  in the server-transmitted data . For example, when transmitting content, the server application  should transmit a header that identifies the name of the unit being transmitted, such as a \u201cUnit-name\u201d header. The server application  may also send a \u201cContent-type\u201d header that identifies the MIME type of the corresponding unit being transmitted.","A more extensive list of headers that may be transmitted by either the client  or the server application  in conjunction with the HTTP or similar protocol is provided below in the Appendix.","SMS Trigger","In some situations, it may become beneficial for the server application  to cause the client  to perform an unscheduled content update. In those cases, the server application  may issue an asynchronous message to the mobile device  which is in turn intended for the client . The SMS transport is well suited to this purpose. In such an implementation, the format of the SMS message could be generally the same as commands. For example, the following SMS message may be sent:","Cmd:refresh?url=http:\/\/server.com\/baboon.jpg;url=http:\/\/server.com\/orange.jp g","In this example, the \u201ccmd:\u201d prefix indicates to the mobile device  that the SMS message is intended for the client . Accordingly, the message is passed to the client  for handling. In this particular implementation, the commands that can be sent using the SMS transport may be limited due to the lack of authentication using SMS. For instance, the \u201crefresh\u201d command could be the only command that will be executed when received in an SMS message since it forces a connection to the content server , which involves authentication. If another asynchronous transport is used that does provide for authentication, this limitation could be relaxed or eliminated.","It should be noted that abbreviating commands may be especially helpful when using SMS. Accordingly, the refresh command above may be abbreviated as:","r?u=http:\/\/server.com\/baboon.jpg;u=http:\/\/server.com\/orange.jpg","Furthermore, a \u201csetvar\u201d command (described below) may be used to further abbreviate the command. For example, the server may have previously issued the command:","setvar?baseurl=http%3A%2F%2Fserver.com","This would have achieved the purpose of setting a base URL of \u201chttp:\/\/server.com\u201d. Thus, enabling the above refresh command to be further abbreviated as:","r?u=baboon.jpg;u=orange.jpg","Aggregated Transport","As discussed above, it may sometimes be beneficial to transmit more than a single unit in one transaction. The special aggregated MIME type described above (i.e., \u201cmultipart\/x.content-aggregate\u201d) may be used for that purpose. When transmitting an aggregated unit, each sub-unit should have a \u201cUnit-Name\u201d header so that the sub-units may be distinguished. In addition, each sub-unit's type could be identified in the normal manner, such as with a \u201cContent-type\u201d header.","When the client  receives a unit of this aggregated type, the client  parses the aggregated unit and stores each of its constituent sub-units separately. In this particular implementation, an aggregated unit may be nested within another aggregated unit. In such a case, the topmost unit should be identified as an aggregated unit or the client  may not be able to determine that the unit should be parsed and expanded. However, particular design considerations may place a limit on how deep aggregated units may be nested. For instance, in one implementation, only one level of aggregated units may be allowed within the topmost aggregated unit.","Note again that the \u201cmultipart\/x.content-aggregate\u201d unit type is not intended to include content for display, although it could be adapted in that fashion. Rather, in this particular implementation it is used to bundle other units for transport.","Sample Computing Environments","What follows here are illustrative computing environments in which aspects of the invention may be implemented. First is a sample mobile device in which a content-based application may be implemented, and next is a sample computing device in which a content-based server application may be implemented.",{"@attributes":{"id":"p-0112","num":"0111"},"figref":"FIG. 6","b":["601","601"]},"The mobile device  has a computer platform  that can receive and execute software applications and display data. The computer platform  includes a processor , such as an application-specific integrated circuit \u201cASIC\u201d, digital signal processor (\u201cDSP\u201d), microprocessor, microcontroller, logic circuit, state machine, or other data processing device. The processor  executes the application programming interface (\u201cAPI\u201d) layer  that interfaces with any resident programs in the memory  of the mobile device. The memory  can include random-access or read-only memory (RAM or ROM), EPROM, EEPROM, flash memory, or any memory common to computer platforms. The computer platform  also includes a local storage  that can hold software applications, file, or data not actively used in memory , such as software applications or content downloaded from the content server  (). The local storage  is typically comprised of one or more flash memory cells, but can be any secondary or tertiary storage device as known in the art, such as magnetic media, EPROM, EEPROM, optical media, tape, or soft or hard disk.","The computer platform  also includes a display  that may be used by the software applications to display data. The display  may optionally include touch sensitive capability.","The components shown in  are typical of many types of mobile devices, but it will be appreciated that other components may be added to the mobile device  and in certain rare cases, some components shown in  may be omitted from the mobile device .",{"@attributes":{"id":"p-0116","num":"0115"},"figref":"FIG. 7","b":["701","701"]},"In this example, the computing device  includes a processor unit , a memory , a storage medium , and an audio unit . The processor unit  advantageously includes a microprocessor or a special-purpose processor such as a digital signal processor (DSP), but may in the alternative be any conventional form of processor, controller, microcontroller, or state machine. The processor unit  is coupled to the memory , which is advantageously implemented as RAM memory holding software instructions that are executed by the processor unit . In an alternate embodiment, the memory  could be composed of firmware or flash memory. In this embodiment, the software instructions stored in the memory  include an operating system  and one or more other applications , such as a contact-based server application.","The mobile device  also includes a communications module  that enables bidirectional communication between the computing device  and one or more other computing devices, such as the mobile device. The communications module  may include components to enable RF or other wireless communications, such as a cellular telephone network, Bluetooth connection, wireless local area network, or perhaps a wireless wide area network. Alternatively, the communications module  may include components to enable land-line or hard-wired network communications, such as an Ethernet connection, RJ-11 connection, universal serial bus connection, IEEE 1394 (Firewire) connection, or the like. These are intended as non-exhaustive lists and many other alternatives are possible. The audio unit  is a component of the mobile device  that is configured to convert signals between analog and digital format. The audio unit  is used by the mobile device  to output sound using a speaker  and to receive input signals from a microphone .",{"@attributes":{"id":"p-0119","num":"0118"},"figref":["FIG. 7","FIG. 7","FIG. 7"],"b":"701"},"Illustrative Processes Performed by Implementations of the Invention","Described next are several illustrative processes that may be implemented by computing and\/or telecommunications equipment to embody aspects of the invention. The mechanisms and devices described above may be used where appropriate, but it is envisioned that the following processes may be implemented using other mechanisms and devices equally without departing from the spirit and scope of the invention.",{"@attributes":{"id":"p-0122","num":"0121"},"figref":"FIG. 8","b":["800","801"]},"At step , the content server creates a refresh command that will, when executed, cause a mobile device to connect to the content server and request new content. The refresh command may take many forms, such as those described at length above. More specifically, the refresh command may include parameters or other mechanisms that allow the refresh command to be scheduled for future execution. In particular, the refresh command may include a repeatdelay parameter that identifies a time period during which an identical refresh command should not be executed again.","The refresh command may additionally identify what content to retrieve from the content server, or may simply indicate to connect to the content server and retrieve any new or changed content. Additionally, the refresh command could be configured to instruct the mobile device to connect to the content server and retrieve all available content, any subset of the available content, or even no content at all. From step , the process  may either continue at step  or at step , whichever is appropriate under the circumstances.","At step , the content server creates an asynchronous message for delivery to the mobile device that includes the refresh command. One example of a type of asynchronous message may be an SMS message, an MMS message, an e-mail message, or the like. Other types of asynchronous messages include Short Data Burst Messages, UDP Packets, and the like. The asynchronous message is used to transmit a command to the mobile device without waiting for the mobile device to connect to the content server. In one specific implementation, the asynchronous message may be an SMS message that includes the refresh command and any applicable parameters, such as the repeatdelay parameter.","At step , the content server receives a request to initiate a content update session from a mobile device. As described above, the mobile device is configured to connect to the content server, perhaps using a wireless connection. The content update session may be an HTTP session or the like. Once the request is received, the process  proceeds to step .","At step , the content server handles the content update session, such as by determining if any new or changed content is available at the content server. If so, the content server delivers the new or changed content to the mobile device. As mentioned above, although described here as new or changed content, the content update session could involve any manner of content delivery, such as new content, changed content, old content that has already been delivered, old content that has not yet been delivered, specific content identified by the mobile device, all content that is available at or through the content server, or the like.","It should also be mentioned that although returning new content is the most likely way to handle the content update session (meaning respond to the refresh command), other alternatives are possible. In fact, the server could handle the content update session in any arbitrary way, and is under no technical obligation to return new content. In fact, the client may be requesting certain content at the content server that simply hasn't changed since the last content update session. In this case, the content server may handle the request by ignoring it, or perhaps by returning content other than what was requested.","At step , the content server delivers to the mobile device the refresh command created at step . The delivery mechanism depends on how the process  arrived at this delivery step. In other words, if the process  arrived at the delivery step  as a result of the occurrence of a content update session, then the delivery mechanism may be to issue the refresh command using the HTTP protocol, or the like. Alternatively, if the process  arrived at the delivery step  in connection with the creation of an asynchronous message, the delivery mechanism may be the SMS protocol, or the like. These and many other delivery transports may be used to deliver the refresh command in either an asynchronous or interactive manner.","It should be noted that the order of the steps of process  as illustrated is not necessarily the only order in which they may be performed. To the extent possible, the steps of the process  may be performed in any arbitrary order. For example, it is possible that the refresh command may be created (step ) after the content update session has been initiated (step ) or even after the new or changed content has been delivered (step ). Accordingly, there should be no significance attached to the particular order of the steps as illustrated in  and described here.",{"@attributes":{"id":"p-0131","num":"0130"},"figref":"FIG. 9","b":"900"},"The process  begins with the mobile device in the idle state , where the mobile device awaits the occurrence of any one or more events that move the process  out of the idle state . Certain of those events are described below. While in the idle state , a component of the mobile device continuously monitors a command queue to determine if any commands in the queue are due for execution. The command queue is a repository for commands that may be executed at some point in the future. As those commands come due, the mobile device executes those commands as appropriate.","When a command comes due for execution (execute event ), the mobile device executes the command (step ) as appropriate for the particular command. In some cases, it may be appropriate to ignore the particular command. For instance, if a previous instance of the same command included a repeatdelay parameter, and the time specified by that parameter has not yet elapsed, it may be appropriate to omit the command.","Many different commands may be executed. In one example, the time may have come to execute a refresh command that was stored in the command queue. As described above, the refresh command instructs the mobile device to perform a content update to refresh any locally stored content on the mobile device, or otherwise retrieve new content from the content server. Accordingly, executing the refresh command may trigger a content update event . When the execution is complete, the mobile device returns to the idle state .","A content update event  occurs when the mobile device is instructed to perform a content update to retrieve content from the content server. The content update event  may occur for many reasons, such as a refresh command coming due as just described. However, the content update event  may also occur for many other reasons, such as the user manually activating a content update or the initialization of the content-based application on the mobile device.","In response to the content update event , the mobile device connects to the content server and performs a content update (step ). The content update may involve initiating a content update session with the content server, and retrieving new or changed content. The content update could also involve simply determining if new or changed content is available at the content server, or any other form of content. In addition, one or more new refresh commands may be retrieved from the content server (step ). The new refresh command may include information that instructs the mobile device to perform another content update at some predefined time in the future. It will be appreciated that the step of retrieving a new command (step ) is optional, as content updates may occur without a new command being retrieved.","An asynchronous message event  occurs if the mobile device receives an asynchronous message that includes a command, such as a new refresh command. One form of asynchronous message is an SMS message, as has been described. The asynchronous message includes the refresh command and may additionally include parameters that identify when the refresh command is to be performed and other criteria that affect the refresh command, as has been described. The asynchronous message may be received using ordinary messaging protocols and mechanisms.","At step , if a new command is received either during a content update (step ) or as a result of an asynchronous message event , the new command is stored in the mobile device's command queue(step ), and the process returns to the idle state . As mentioned above, at the idle state  the command queue is continuously monitored for commands that become due, such as the new refresh command. Thus, in due time, the new refresh command will be executed and the process  will continue.","It will be appreciated that the process  enables the content server to control or regulate how frequently and in what manner the mobile device performs a content update by issuing new refresh commands. Since the content server has the most current and accurate knowledge of when content is available, the process  avoids the need for the mobile device to repeatedly query the content server for new content. This feature improves network efficiency, and can save the user\/subscriber money in wireless network usage costs.",{"@attributes":{"id":"p-0140","num":"0139"},"figref":"FIG. 10","b":"1000"},"A content-based application (a \u201cclient\u201d) using the content update system described above typically receives at least one refresh command (and may receive multiple) each time it contacts the content server for a content update, thus maintaining a regular content update schedule via these chained refresh commands. If the client is running on a mobile device that is powered off for an extended period of time or is disconnected from the network in some other way, it is possible for the chain of refresh commands to break, thereby breaking the content update schedule.","For example, consider a weather report application (the client) that hasn't contacted the content server for the latest weather data within a few days because it has been powered down. Commands in the client's command queue may expire. When powered on, the client discards the expired commands, which may leave no remaining refresh commands to be executed. This breaks the refresh command chain.","The process  described here enables the content server to revive the content refresh schedule in such a case. The process  begins at step  where the content server passively monitors the content updates that have been performed by each subscribed client. The monitoring activity may be as simple as periodically evaluating the last time each client contacted the content server, or more complex such as maintaining information that compares the periodicity of the client's previous content update schedule to the time since the client's last contact.","At step , the content server detects that a particular client has not contacted the content server for more than some predetermined period of time. The period may be based on an elapsed time since the previous content update, or perhaps some period of time that the client is overdue for performing its next content update. Since the content server generally issues the refresh commands to keep the client on a regular content update schedule, the content server has knowledge of approximately when the client should initiate the next content update. Alternatively, the content server can use any other method of determining at what point the client is overdue for a content update.","At step , the content server, having determined that the client is overdue for a content update, sends the client an asynchronous message (e.g., an SMS message) containing a refresh command to be executed immediately. Upon receipt, the client would contact the content server for the latest content updates and receive a new refresh command, thus re-establishing the refresh command chain.",{"@attributes":{"id":"p-0146","num":"0145"},"figref":"FIG. 11","b":["1100","1100","1103"]},"At initial start-up, the process  moves to step , where the default unit, (e.g., an \u201cindex\u201d unit), is displayed. Displaying the default unit at start-up provides a mechanism to present the user with some content while new content is being retrieved. The name of the default unit can be stored in a second resource and can be overridden.","At step , the initial refresh command is executed. The initial refresh command can be complete with parameters, such as retryCount, and displayWhile. This allows the client to be distributed with minimal content and retrieve new content the first time it is launched. The initial refresh command can also be used as a mechanism for the application to register or activate itself when initialized. The initial refresh command could also be used as a mechanism for subscribing to a service if the client operates on a subscription basis and initializing the content update schedule. Alternatively, a button or link in the default unit could prompt the user to start the subscription.","Although the processes presented in this document have been illustrated and described sequentially in a particular order, in other embodiments, the steps of the processes may be performed in different orders, multiple times, and\/or in parallel. Further, in some embodiments, one or more steps described in the several processes may be performed as separate steps, combined into fewer steps, or possibly omitted entirely.","While the foregoing disclosure shows illustrative embodiments of the invention, it should be noted that various changes and modifications could be made to the described embodiments without departing from the spirit and scope of the invention as defined by the appended claims. Furthermore, although elements of the invention may be described or claimed in the singular, the plural is contemplated unless limitation to the singular is explicitly stated.","Appendix: Commands Table","The following commands may be used in implementations of the invention.",{"@attributes":{"id":"p-0153","num":"0152"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"238pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Command","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["refresh","Causes the client to initiate a content update session by contacting a content"]},{"entry":[{},"server and requesting new content as identified by parameters of the refresh"]},{"entry":[{},"command."]},{"entry":[{},"This command may be abbreviated with the letter \u201cr\u201d which is mostly of use"]},{"entry":[{},"when sent with SMS."]},{"entry":["delete-unit","Deletes the listed units. It is handled the same whether it occurs in a URL or a"]},{"entry":[{},"header, though putting it in a URL is probably not the most useful thing to do."]},{"entry":[{},"The arguments consist of a list of units to delete."]},{"entry":[{},"An example of the header is:"]},{"entry":[{},"Cmd: delete?unit=tarsier.jpg;unit=ayeaye.ctt"]},{"entry":[{},"This command may be abbreviated with the letter \u201cx.u."]},{"entry":["delete-all-units-","This command is similar to the above delete, but a little more powerful and"]},{"entry":["but","dangerous. Instead of listing to the units that should b deleted, the units that"]},{"entry":[{},"should be kept are deleted. All other units are deleted."]},{"entry":[{},"This command may be abbreviated with the letter \u201cy\u201d."]},{"entry":["display-unit","This command causes the client to display the named unit on the screen for"]},{"entry":[{},"the user. In the header format it sets the current displayed unit and next time"]},{"entry":[{},"the client displays something it will go to that unit. If multiple display-unit"]},{"entry":[{},"commands arrive, only the last one will have an effect."]},{"entry":[{},"Note that display-unit commands can arrive via pushed messages or via"]},{"entry":[{},"HTTP headers. That is it may be useful to put the display-unit command in"]},{"entry":[{},"content that arrives even when the user is not using the application. It will"]},{"entry":[{},"have an affect next time the user opens the application."]},{"entry":[{},"Here is an example of a header:"]},{"entry":[{},"Cmd: display-unit?drill.ctt"]},{"entry":[{},"This command may be abbreviated with the letter \u201cd\u201d which is mostly of use"]},{"entry":[{},"when sent with SMS."]},{"entry":["display-","This command instructs the client to display the previously displayed unit."]},{"entry":["previous-unit","This is similar to issuing a \u201cback\u201d command in a web browser. It allows the"]},{"entry":[{},"server to generate content that may be accessed from several paths:"]},{"entry":[{},"Cmd: display-previous-unit"]},{"entry":["playafter","This command instructs the client to play a previously downloaded unit. It"]},{"entry":[{},"does the same thing as a \u201cplayafter\u201d parameter in a refresh command. It takes"]},{"entry":[{},"the name of the unit to play, which must be present locally:"]},{"entry":[{},"Cmd: playafter?unit.ctt"]},{"entry":[{},"This command overrides the playafter parameter included with the refresh"]},{"entry":[{},"command. It provides the server a last minute method to alert the user to special"]},{"entry":[{},"content."]},{"entry":["beepafter","This command is similar to \u201cplayafter\u201d, except it plays a sound or vibrate built"]},{"entry":[{},"in to the device the client is running on. The tones the beepafter command can"]},{"entry":[{},"invoke are built into the client and are not sent by the server. This gives the"]},{"entry":[{},"server a quick and easy way to alert the user to special content in a way"]},{"entry":[{},"consistent with the UI of the device and without having to push a unit to play-"]},{"entry":[{},"The following values may be specified which map directly to some built-in"]},{"entry":[{},"beep types:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Alt","alert type beep"]},{"entry":[{},"Rmd","reminder type beep"]},{"entry":[{},"Msg","new message type beep"]},{"entry":[{},"Err","error beep"]},{"entry":[{},"Avb","short, alert type vibrate"]},{"entry":[{},"Rvb","longer, reminder type vibrate"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Cmd: beepafter?rvb"]},{"entry":[{},"This command overrides the beepafter parameter included with the refresh"]},{"entry":[{},"command. It provides the server a last minute method to alert the user to special"]},{"entry":[{},"content."]},{"entry":["setvar","This command allows the server to set a local variable (e.g. \u201cbaseurl\u201d) that"]},{"entry":[{},"affects the behavior of the client. The server may set the \u201cbaseurl\u201d variable as"]},{"entry":[{},"below:"]},{"entry":[{},"Cmd: setvar?baseurl=http%3A%2F%2Fsomeurl"]},{"entry":[{},"The client uses the \u201cbaseurl\u201d variable when interpreting refresh commands."]},{"entry":[{},"This is most useful for SMS refresh commands although it can be used"]},{"entry":[{},"throughout content to reduce size."]},{"entry":["save","Instructs the client to save a downloaded unit to a specific place. This could"]},{"entry":[{},"be used to save ringers, pictures, and the like in the appropriate places. The"]},{"entry":[{},"save command could take the following form:"]},{"entry":[{},"Cmd:save?unit=xxx;path=yyy"]},{"entry":[{},"Where \u201cxxx\u201d is the name of the unit to be saved and \u201cyyy\u201d indicates where to"]},{"entry":[{},"save the unit. If the path parameter is omitted, the client places the copy of"]},{"entry":[{},"the file in a shared directory."]},{"entry":[{},"If the client supports this functionality it will list \u201csave\u201d as one of the supported"]},{"entry":[{},"commands in a capabilities header."]},{"entry":["absave","This command is used to create an address book entry on the client. It may be"]},{"entry":[{},"included in a link off of a page of contact information for some person, for"]},{"entry":[{},"example, allowing the user to save the contact information to the address"]},{"entry":[{},"book if desired."]},{"entry":[{},"Cmd: absave?fieldl=valuelj;...i fieldn=valuen"]},{"entry":[{},"The save command includes a list of field value pairs. The fields map directly"]},{"entry":[{},"to supported address book fields."]},{"entry":[{},"Additionally, the link may include a \u201ccat\u201d parameter to specify the address"]},{"entry":[{},"book category."]},{"entry":[{},"If the client supports adding contacts to the address book, \u201cabsave\u201d will be"]},{"entry":[{},"listed in the capabilities header. If the client does not list this capability, the"]},{"entry":[{},"server should not include \u201cabsave\u201d links."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Appendix: Parameters Table","In general any parameter can be used with any command though some of the combinations may not be very useful.",{"@attributes":{"id":"p-0156","num":"0155"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Parameter","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["URL","Specifies a location from which to retrieve new content, and may identify a"]},{"entry":[{},"particular unit to fetch. The URLs are listed as arguments in URL standard"]},{"entry":[{},"query string. Thus a refresh fetching the URLs http:\/\/server.com\/baboon.jpg,"]},{"entry":[{},"http:\/\/server.com\/orang.jpg and http:\/\/server.com\/gibbon.jpg would be:"]},{"entry":[{},"Stein-cmd:refresh?url=http:\/\/server.com\/baboon.jpg;"]},{"entry":[{},"http:\/\/server.com\/orang.jpg;http:\/\/server.com\/gibbon.jpg"]},{"entry":[{},"Note that an alternative to listing a series of URLs as above is to put the three"]},{"entry":[{},"jpg files in a multipart\/x.content-aggregate structure and have one URL to get"]},{"entry":[{},"it. That causes only one HTTP transaction rather than three."]},{"entry":[{},"The client allows multiple URLs for greater flexibility. It may not be convenient"]},{"entry":[{},"to put all items into one aggregate because they come from different"]},{"entry":[{},"servers."]},{"entry":[{},"If the baseurl variable is set, the client win combine it with the URLs specified"]},{"entry":[{},"in the command according to RFC2396. This is particularly useful for"]},{"entry":[{},"refresh commands sent in SMS messages as these are very limited in length."]},{"entry":["Time","The time parameter gives a date and time when the command should be executed."]},{"entry":[{},"This allows the server to have commands executed in the future,"]},{"entry":[{},"which avoids complete dependency on SMS notifications. For example, the"]},{"entry":[{},"execution of a refresh command can retrieve another refresh command to be"]},{"entry":[{},"executed a few hours or days later."]},{"entry":[{},"The date format may be in accordance with RFC-822 format as modified by"]},{"entry":[{},"RFC-1123. Alternatively, a more compact date format could be used with the"]},{"entry":[{},"number of seconds since Jan. 1, 1970 (UNIX time) as hex digits."]},{"entry":[{},"Following the time value may be a keyword specifying whether time is absolute"]},{"entry":[{},"or relative to the local time zone. If the keyword is \u201cGMT\u201d or absent, the"]},{"entry":[{},"time is absolute, and will be executed at that time. This is useful for commands"]},{"entry":[{},"that may be sent to clients in different time zones but which should be"]},{"entry":[{},"executed at the same absolute time, such as to retrieve stock quotes at the"]},{"entry":[{},"opening and closing of the stock market."]},{"entry":[{},"If the keyword is \u201clocal\u201d then the time is based on the local time on the mobile"]},{"entry":[{},"device, whatever time zone it might be in. This format may be useful to"]},{"entry":[{},"cause content updates to happen at off hours like 2:00 am local time."]},{"entry":[{},"The keywords can be abbreviated as \u201cL\u201d for \u201clocal\u201d or \u201cG\u201d for \u201cGMT."]},{"entry":[{},"An example of the syntax is:"]},{"entry":[{},"time=17 Oct 2004 08:42 local"]},{"entry":[{},"Or:"]},{"entry":[{},"time=A745243 local"]},{"entry":[{},"Or:"]},{"entry":[{},"t=A7452434L"]},{"entry":[{},"This parameter may be abbreviated with the letter \u201ct\u201d."]},{"entry":["Expires","Specifies a date after which the corresponding command should not be executed."]},{"entry":[{},"The date format is the same as for the time parameter."]},{"entry":[{},"This parameter may be abbreviated with the letter \u201ce\u201d."]},{"entry":["RepeatDelay","Specifies a time in minutes during which this command should not be repeated"]},{"entry":[{},"if received again from the server. It does not affect commands executed"]},{"entry":[{},"on request of the user."]},{"entry":[{},"The value is an integer specifying a number of minutes, for example \u201c15\u201d."]},{"entry":[{},"Absence of this parameter is equivalent to the value 0. The value may also be"]},{"entry":[{},"the string \u201cinfinity\u201d."]},{"entry":[{},"Note that while \u201cinfinity\u201d implies the command should never be executed"]},{"entry":[{},"again, imposing this restriction in practice is impractical. The client would"]},{"entry":[{},"have to track every command it ever executed. In practice the client tracks"]},{"entry":[{},"the commands for as long as practical, which could be at least two days."]},{"entry":[{},"It is very useful, perhaps mandatory, to sometimes push the refresh command"]},{"entry":[{},"to the client. For example, if the phone has been turned off for a long period"]},{"entry":[{},"of time, there may be many refresh commands backed up to fetch the same"]},{"entry":[{},"content. It would be very wasteful to execute the refresh command over and"]},{"entry":[{},"over when the phone is first turned on again. If all the commands have a repeat"]},{"entry":[{},"delay of 30 minutes, then despite the number of commands, it will only"]},{"entry":[{},"be executed once in 30 minutes. This handles the case where SMS messages"]},{"entry":[{},"may trickle into a phone over a 30-minute period."]},{"entry":[{},"Note that subsequent commands that arrive during the RepeatDelay period of"]},{"entry":[{},"a first command are completely discarded. In particular any RepeatDelay parameters"]},{"entry":[{},"of those subsequent commands do not shorten or extend the current"]},{"entry":[{},"delay period set by the first command."]},{"entry":[{},"The server could respond to fetches of the same unit multiple times in many"]},{"entry":[{},"different ways. For instance, the server could return exactly the same data"]},{"entry":[{},"each time, it could return updated data each time, or it could change the entire"]},{"entry":[{},"state of the data each time. In the first case, the RepeatDelay should be very"]},{"entry":[{},"large (e.g., \u201cinfinite\u201d), in the second case the RepeatDelay should be similar"]},{"entry":[{},"to the frequency of update of the data, and in the last case it should be absent"]},{"entry":[{},"or zero."]},{"entry":[{},"This parameter may be abbreviated with the letter \u201cdt\u201d."]},{"entry":["RetryCount","Specifies a number of times to retry the corresponding command in the case"]},{"entry":[{},"of a failure. Failures can occur for many reasons, such as because a network"]},{"entry":[{},"connection cannot be obtained, because a voice call is active, because the"]},{"entry":[{},"server is unavailable, or the like."]},{"entry":[{},"If the RetryCount in unset it will default to 2."]},{"entry":[{},"This parameter may be abbreviated with the letter \u201cc\u201d."]},{"entry":["RetryMin","Specifies a number of minutes between each retries for an unsuccessful execution"]},{"entry":[{},"of the corresponding command. If \u201cE\u201d is appended to the value, the"]},{"entry":[{},"retry will back off exponentially by doubling the time for each retry until the"]},{"entry":[{},"retry count is reached. For example if you give value as \u201cRetryMin=3e\u201d then"]},{"entry":[{},"the retry will wait 3 minutes, then 6, then 12, then 24."]},{"entry":[{},"A default value, such as 10 minutes, could be used if RetryMin is unset."]},{"entry":[{},"This parameter may be abbreviated with the letter t\u201d."]},{"entry":["PlayAfter","Specifies a URL of a unit to play after the corresponding command has been"]},{"entry":[{},"executed. The URL should point to a local resource rather than one that must"]},{"entry":[{},"be fetched over the network. This parameter is most useful for the refresh"]},{"entry":[{},"command, in particular when some data for an application has been updated"]},{"entry":[{},"but the application is not running."]},{"entry":[{},"This parameter may be abbreviated with the letter \u201cp\u201d."]},{"entry":["PlayWhile","Specifies a URL of a unit to play while the corresponding command is being"]},{"entry":[{},"executed. It is most useful for commands that may execute for a relatively"]},{"entry":[{},"long period, such as the refresh command."]},{"entry":["BeepAfter","Instructs the client to play a certain beep tone or vibrate alert once the"]},{"entry":[{},"corresponding command has completed. The tones the BeepAfter parameter can"]},{"entry":[{},"invoke should be built into the client and not sent by the server. The following"]},{"entry":[{},"values may be specified, which could map directly to certain built-in beep"]},{"entry":[{},"types:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Alt","alert type beep"]},{"entry":[{},"Rmd","reminder type beep"]},{"entry":[{},"Msg","new message type"]},{"entry":[{},"Err","beep error beep"]},{"entry":[{},"Avb","short, alert type vibrate"]},{"entry":[{},"Rvb","longer, reminder type vibrate"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"This parameter may be abbreviated with the letter \u201cb\u201d."]},{"entry":["DisplayAfter","Specifies a URL of a unit to show after a command is executed. It is similar"]},{"entry":[{},"to executing a display-unit command."]},{"entry":[{},"This parameter may be abbreviated with the letter \u201ca\u201d."]},{"entry":["DisplayWhile","Specifies a URL of a unit to show while a command is being executed. It"]},{"entry":[{},"does not affect the currently displayed unit. The specified unit should be a"]},{"entry":[{},"local resource rather than one fetched from the network."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Appendix: HTTP Headers Table","The following table lists illustrative headers that may be passed in conjunction with a refresh command using HTTP as a transport protocol. The headers identified here are by way of example only, and this table does not include an exhaustive list.",{"@attributes":{"id":"p-0159","num":"0158"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Header","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Phone Number","Used to transmit the phone number of the mobile device. A special"]},{"entry":["(\u201cmin\u201d)","privilege may be required for this because some carriers and users restrict"]},{"entry":[{},"access to phone numbers because of privacy policy. In this case"]},{"entry":[{},"the value returned may be \u201c%EPRIVLEVEL\u201d."]},{"entry":[{},"On rare occasions the MIN on the handset can change. This occurs if a"]},{"entry":[{},"user changes his phone number. If an application wishes to accommodate"]},{"entry":[{},"this it should request the MIN every time."]},{"entry":[{},"An example of a returned header is:"]},{"entry":[{},"Stein-Min: 858-867-5309"]},{"entry":["Platform ID (\u201cpid\u201d)","An integer that indicates the make and model of the handset. Note that"]},{"entry":[{},"this should be used only if a detail about the handset cannot be discovered"]},{"entry":[{},"otherwise."]},{"entry":[{},"An example of a returned header is:"]},{"entry":[{},"Stein-PID: 100234"]},{"entry":["Carrier ID (\u201ccid\u201d)","An integer that indicates which home carrier or operator the handset is"]},{"entry":[{},"associated with. It does not change as the handset roams from one carrier"]},{"entry":[{},"to another."]},{"entry":[{},"An example of a returned header is:"]},{"entry":[{},"Stein-CID: 10042"]},{"entry":["Client Version","Returns the version of the client the handset has installed."]},{"entry":["(\u201cvers\u201d)","Stein-version: 1.0"]},{"entry":["Capabilities (\u201ccap\u201d)","Returns a list of capabilities to the server. Whether the client supports"]},{"entry":[{},"the ABSave or Save commands, for example, is indicated in this"]},{"entry":[{},"header. The supported commands will vary from handset to handset"]},{"entry":[{},"with different installed software."]},{"entry":[{},"An example of a returned header is:"]},{"entry":[{},"Stein-capabilities: ABSave, sa.vea,"]},{"entry":["GPS location (\u201cIoc\u201d)","Returns the current GPS location of the handset."]},{"entry":[{},"No example is given."]},{"entry":["IKeyMaker authentication","Returns an authentication credential."]},{"entry":["credentials","No example is given."]},{"entry":["Cookies","The client and server may basically support cookies like a web"]},{"entry":[{},"browser. A client can use them to identify the user. No special \u201chdr\u201d"]},{"entry":[{},"parameter is required for cookies."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["With reference to the figures in which like numerals represent like elements throughout:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
