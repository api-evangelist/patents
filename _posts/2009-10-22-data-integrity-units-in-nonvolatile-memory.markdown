---
title: Data integrity units in nonvolatile memory
abstract: An integrity unit can be calculated from a first data unit, and a first storage device can be requested to store the first data unit. A second storage device, which can be separate from and/or a different type of device from the first storage device, can be requested to store metadata, which includes the integrity unit, in nonvolatile memory. Also, a second data unit can be received from the first storage device in response to a request for the first data unit. The integrity unit can be received from the second storage device, and the second data unit and the integrity unit can be analyzed to determine whether the second data unit matches the first data unit. Alternatively, a first integrity unit can be stored in a metadata region of a nonvolatile memory block, where the block also stores the data from which the first integrity unit was calculated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08566689&OS=08566689&RS=08566689
owner: Microsoft Corporation
number: 08566689
owner_city: Redmond
owner_country: US
publication_date: 20091022
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["In computing, silent data corruption is the problem of receiving corrupted data from a storage device, such as a hard disk drive, where the operating system and\/or application receiving the data is unaware of the fact that the integrity of the received data has been compromised. As used herein, a \u201cstorage device\u201d is a device used to store data in a computing system, and can include devices such as hard disk drives, solid state drives, smart cards, floppy drives, etc. A storage device may be a logical drive, which can be spread across multiple physical drives and\/or take up only a portion of a physical drive. Corruption of the data could happen due to one or more problems, such as transmission errors over a physical link to storage device, or a bug in firmware on the storage device.","Computing systems have implemented techniques to discover corrupt data that is received from a storage device. For example, an operating system may compute a checksum, such as a cyclical redundancy check (CRC), for each block written to a hard disk drive storage device. The checksum can be kept in volatile system memory. Alternatively, the operating system may pass the checksum to the hard disk drive as metadata for each block along with each data write request. As yet another alternative, the operating system may store data on one hard disk drive, and store checksums for the data on a separate hard disk drive.","Upon receiving the data back from the storage device in response to a read request, the operating system can compute a new checksum from the received data. The new checksum can be compared to the previously-stored checksum. The two checksums indicate data integrity (i.e., that there was no corruption of the data) if the checksums match (i.e., they are the same to the extent they are expected to be the same to validate data integrity).","Embodiments described herein are directed to techniques and tools for improved data integrity checking using integrity units, and specifically to improved ways of storing integrity units in nonvolatile memory. The term \u201cintegrity unit\u201d is used herein broadly to refer to a unit of information that can be stored and used later to check the validity of data. For example, an integrity unit may include one checksum calculated from stored data. Also, an integrity unit may include multiple sub-units, such as multiple checksums calculated from stored data. An integrity unit can be included with other metadata. As used herein, metadata is data that relates to other data. For example, metadata for a set of data may include an integrity unit corresponding to the data, as well as other metadata for diagnosing and\/or correcting data errors related to the set of data. As used herein, nonvolatile memory refers to nonvolatile solid state storage devices. Examples of such memory include, but are not limited to, solid state drives, block addressable flash memory on a system bus such as the peripheral component interconnect (PCI) bus, and word addressable nonvolatile solid state memory such as phase change memory.","In one embodiment, the tools and techniques can include calculating an integrity unit from an original data unit. A first storage device can be requested to store the original data unit. A second storage device, which can be separate from the first storage device, can be requested to store metadata, which can include the integrity unit, in nonvolatile memory. A data unit can be received from the first storage device in response to a request for the first data unit. The integrity unit can be received back from the second storage device, and the received data unit and the received integrity unit can be analyzed to determine whether the received data unit matches the original data unit. For example, another integrity unit can be calculated from the received data unit, and that integrity unit can be compared with the received integrity unit.","In another embodiment of the tools and techniques, a first integrity unit can be calculated from a first data unit. A first storage device can be requested to store the first data unit. A second storage device, which can be a different type of storage device from the first storage device, can be requested to store metadata in nonvolatile memory. The metadata can include the integrity unit. A second data unit can be received from the first storage device in response to a request for the first data unit, and a second integrity unit can be calculated from the second data unit. The first integrity unit can be received from the second storage device, and it can be determined whether the second integrity unit matches the first integrity unit.","In yet another embodiment of the tools and techniques, a first integrity unit can be calculated from a first data unit, and a storage device can be requested to store the first data unit in a data region of a nonvolatile memory block. The storage device can also be requested to store metadata, which can include the integrity unit, in a metadata region of the nonvolatile memory block. Additionally, a second data unit can be received from the storage device in response to a request for the first data unit, and a second integrity unit can be calculated from the second data unit. The first integrity unit can be received from the storage device, and it can be determined whether the second integrity unit matches the first integrity unit.","Diagnostic information, such as details of physical topology and the path (such as the input-output, or I\/O, path) taken to store the data, may be calculated and stored along with the integrity unit. If an integrity violation is detected (e.g., where the integrity units calculated from the original and received data do not match), such diagnostic information can be retrieved and used to optimize troubleshooting and diagnosis of the storage system","This Summary is provided to introduce a selection of concepts in a simplified form. The concepts are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter. Similarly, the invention is not limited to implementations that address the particular techniques, tools, environments, disadvantages, or advantages discussed in the Background, the Detailed Description, or the attached drawings.","Problems exist with prior data integrity checking techniques, and in particular with the ways that data integrity units have been stored. For example, where the data integrity units are kept in volatile system memory, at least two problems may arise. First, volatile system memory for storing data integrity units may not scale with the size of hard disk drives increasing over the years. As an example, for a 120 G hard disk drive, 60 MB of memory may be needed to store 4 bytes of checksum per block. This can be a large consumption of pages in the system memory. Second, if the integrity units are in volatile system memory, they can be lost on system reboot or power loss. Thus, the checksums may need to be re-computed on each reboot. Such re-computations can impact performance, and there is a chance some data corruption will go undetected because the checking technique relies on the data on disk being un-corrupted each time the system reboots.","Where the operating system passes the checksum to the hard disk drive as metadata for each block along with each data write request, non-standard block sizes are produced by combining the checksums with the data. Thus, the operating system may need to be equipped for specialized handling of input-output to send the non-standard block size for the input-output requests. Also, specialized input-output controllers may be needed to handle the non-standard block sizes.","Where the operating system stores data on a separate hard disk drive from the corresponding checksums, performance can be adversely impacted because of the large latency of seek operations that can result from writing to and reading from both hard disk drives.","In contrast with such prior techniques, the tools and techniques described herein include storing data integrity units in nonvolatile memory. For example, when data is stored on one storage device, corresponding data integrity units can be stored in nonvolatile memory on a separate storage device, and the two storage devices may be different types. In one implementation, the data may be stored in a magnetic storage device such as a hard disk drive, and the corresponding data integrity units can be stored in a separate nonvolatile memory device, such as a phase change memory device. As another example, data may be stored in a data region of a nonvolatile memory block, and a data integrity unit for that data may be stored in a metadata region of that same memory block. Storing the checksums in ways such as these can allow for an improved balance between data integrity and performance. This may be done at least in part because of the characteristics of nonvolatile memory, which can include low latency for random access (reducing the seek time problems discussed above), non-volatility (reducing problems discussed above from loss of data in volatile memory), and\/or relatively large capacity as compared to DRAM (reducing problems discussed above from limited volatile system memory).","Accordingly, one or more substantial benefits can be realized from the tools and techniques described herein. The various techniques and tools described herein may be used separately or in combination to produce such benefits. However, the subject matter defined in the appended claims is not necessarily limited to the benefits described herein. A particular implementation of the invention may provide all, some, or none of the benefits described herein. Although operations for the various techniques are described herein in a particular, sequential order for the sake of presentation, it should be understood that this manner of description encompasses rearrangements in the order of operations, unless a particular ordering is required. For example, operations described sequentially may in some cases be rearranged or performed concurrently. Techniques described herein with reference to flowcharts may be used with one or more of the systems described herein and\/or with one or more other systems. Moreover, for the sake of simplicity, flowcharts may not show the various ways in which particular techniques can be used in conjunction with other techniques.","I. Exemplary Computing Environment",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":"100"},"The computing environment () is not intended to suggest any limitation as to scope of use or functionality of the invention, as the present invention may be implemented in diverse general-purpose or special-purpose computing environments.","With reference to , the computing environment () includes at least one processing unit () and memory (). In , this most basic configuration () is included within a dashed line. The processing unit () executes computer-executable instructions and may be a real or a virtual processor. In a multi-processing system, multiple processing units execute computer-executable instructions to increase processing power. The memory () may be volatile memory (e.g., registers, cache, RAM), nonvolatile memory (e.g., ROM, EEPROM, flash memory, phase change memory), or some combination of the two. The memory () stores software () implementing data integrity units in nonvolatile memory.","Although the various blocks of  are shown with lines for the sake of clarity, in reality, delineating various components is not so clear and, metaphorically, the lines of  and the other figures discussed below would more accurately be grey and fuzzy. For example, one may consider a presentation component such as a display device to be an I\/O component. Also, processors have memory. The inventors hereof recognize that such is the nature of the art and reiterate that the diagram of  is merely illustrative of an exemplary computing device that can be used in connection with one or more embodiments of the present invention. Distinction is not made between such categories as \u201cworkstation,\u201d \u201cserver,\u201d \u201claptop,\u201d \u201chandheld device,\u201d etc., as all are contemplated within the scope of  and reference to \u201ccomputer,\u201d \u201ccomputing environment,\u201d or \u201ccomputing device.\u201d","A computing environment () may have additional features. In , the computing environment () includes storage (), one or more input devices (), one or more output devices (), and one or more communication connections (). An interconnection mechanism (not shown) such as a bus, controller, or network interconnects the components of the computing environment (). Typically, operating system software (not shown) provides an operating environment for other software executing in the computing environment (), and coordinates activities of the components of the computing environment ().","The storage () may be internal or external (i.e., inside or outside a main host system), and removable or non-removable, and may include computer-readable storage media such as magnetic disks, magnetic tapes or cassettes, CD-ROMs, CD-RWs, DVDs, or any other medium which can be used to store information and which can be accessed within the computing environment (). The storage () stores instructions for the software ().","The input device(s) () may be a touch input device such as a keyboard, mouse, pen, or trackball; a voice input device; a scanning device; a network adapter; a CD\/DVD reader; or another device that provides input to the computing environment (). The output device(s) () may be a display, printer, speaker, CD\/DVD-writer, network adapter, or another device that provides output from the computing environment ().","The communication connection(s) () enable communication over a communication medium to another computing entity (as illustrated by the double arrow extending from the illustration of communication connection(s) ()). Thus, the computing environment () may operate in a networked environment using logical connections to one or more remote computing devices, such as a personal computer, a server, a router, a network PC, a peer device or another common network node. The communication medium conveys information such as data or computer-executable instructions or requests in a modulated data signal. A modulated data signal is a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media include wired or wireless techniques implemented with an electrical, optical, RF, infrared, acoustic, or other carrier.","The tools and techniques can be described in the general context of computer-readable storage media. Computer-readable storage media are any available media that can be accessed within a computing environment. By way of example, and not limitation, with the computing environment (), computer-readable storage media include memory (), storage (), and combinations of the above.","The tools and techniques can be described in the general context of computer-executable instructions, such as those included in program modules, being executed in a computing environment on a target real or virtual processor. Generally, program modules include routines, programs, libraries, objects, classes, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The functionality of the program modules may be combined or split between program modules as desired in various embodiments. Computer-executable instructions for program modules may be executed within a local or distributed computing environment. In a distributed computing environment, program modules may be located in both local and remote computer storage media.","For the sake of presentation, the detailed description uses terms like \u201cdetermine,\u201d \u201cchoose,\u201d \u201cadjust,\u201d and \u201coperate\u201d to describe computer operations in a computing environment. These and other similar terms are high-level abstractions for operations performed by a computer, and should not be confused with acts performed by a human being, unless performance of an act by a human being (such as a \u201cuser\u201d) is explicitly noted. The actual computer operations corresponding to these terms vary depending on the implementation.","II. System and Environment for Storing Data Integrity Units in Nonvolatile Memory Devices and Data in Data Storage Devices",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 2","FIG. 1"],"b":["200","200","200","210","220","230","220","230","220","210"]},"The operating system () can instruct the data storage device () to store data (), and the operating system () can request data () from the data storage device (). The operating system () can also request that the nonvolatile memory device () store integrity units () calculated from the data (), and can later request those integrity units () from the nonvolatile memory device () to check the integrity of corresponding data () received from the data storage device (). Such corresponding data () may be data () that is received in response to requests for data that was earlier sent to the data storage device () for storage.","For example, when the operating system () requests that data be stored in the data storage device (), an integrity module in the operating system () (such as a multi-pathing driver, a disk driver, or a separate module in the operating system ()) can calculate an integrity unit from the data (), and can request that the integrity unit () be stored in the nonvolatile memory device (). Later, when the operating system () requests from the data storage device () corresponding data () that is expected to match the data () previously requested to be stored (e.g., where the corresponding data is returned in response to a request for the previously-stored data), an integrity module in the operating system () can also request the corresponding stored integrity unit () (which was calculated from the previously-stored data) from the nonvolatile memory device (). The integrity module can also calculate a new integrity unit from the data () received back from the data storage device (). The integrity module of the operating system () can compare the stored integrity unit () received from the nonvolatile memory device with the new integrity unit. If the two integrity units match, this indicates that the data received from the data storage device () matches the data originally sent to the data storage device (), which is what the operating system () expects. Accordingly, a match between the two integrity units can indicate integrity of the data () received back from storage.","If the two integrity units do not match, this can indicate a lack of integrity in the data () received back from the data storage device (), where we assume nonvolatile memory device () has a higher reliability rating than the data storage device (). Accordingly, when this happens, the operating system () can take one or more appropriate actions, such as attempting to repair the received data, notifying a user and\/or a requesting application of the lack of integrity, logging facts about the mismatch, etc. This can be done using diagnostic information stored as metadata along with the integrity unit (). For example, the operating system () may log information about the data storage device () and a path that the data () took to and from the data storage device (). That path information may be stored as metadata along with the integrity unit () on the nonvolatile memory device (). If there are multiple paths to a data storage device (), and one of those paths results in repeated data integrity problems, the operating system () may reroute future data storage requests to the data storage device () through one or more other paths. The operating system () may also notify a user of a path and\/or storage device that repeatedly produces data integrity problems. This could help in troubleshooting storage-related problems with the computing environment ().","Referring still to , the environment can include an application (), which can be an application that requests the operating system () to store the data (). In addition to or instead of the operating system () calculating an integrity unit to be stored in the nonvolatile memory device (), the application () can calculate an integrity unit (). The application can send the application-calculated integrity unit () to the operating system (), such as via a defined operating system application programming interface. The operating system () may combine the application-calculated integrity unit () and an integrity unit calculated by the operating system () into a combined integrity unit () that can be stored in the nonvolatile memory device (), as discussed above.","When the application () requests that the operating system () retrieve the data () from storage, the application () can also request the integrity unit (). The operating system () can request the combined integrity unit () from the nonvolatile memory device (), and can request the data () from the data storage device (). Upon receiving the combined integrity unit () and the data (), the operating system () can calculate a new integrity unit from the received data () and can compare that new integrity unit with the stored integrity unit, which was previously calculated by the operating system () and was received back as part of the combined integrity unit (). The operating system () can also pass the data () and the application-calculated integrity unit () from the combined integrity unit () to the application (). The application () can calculate a new integrity unit from the received data, and can compare the new application-calculated integrity unit with the application-calculated integrity unit received back from the operating system (). The application () can then take appropriate action depending on whether the two application-calculated integrity units match. The application () can send and receive integrity units () to and from the operating system () by making application programming interface calls or in some other manner. Integrity mismatches may happen independently at the operating system level or the application level. Mismatches at these different levels may generate different actions. For instance, an operating system action in response to an integrity mismatch may be to report failed input-output, while an application action may be to trigger a user visible error message.","Of course, the configuration of  could be used without having an application outside the operating system () calculate its own integrity unit. Additionally, integrity units could be calculated and compared by one or more other components outside the operating system instead of, or in addition to, having an operating system component calculate and compare the integrity units.","III. System and Environment for Data Integrity Units in Metadata Regions of Nonvolatile Memory Blocks","Referring now to , a computing environment () for storing data integrity units in metadata regions of nonvolatile memory blocks will be described. The environment () can have computing components similar to those discussed above with reference to . The computing environment () can include a main host (), which can host an operating system () and an input\/output (I\/O) controller (). The I\/O controller () can control transmission of data and metadata () between the operating system () and one or more storage devices, such as a nonvolatile memory device (). For example, the I\/O controller () may be a host bus adapter.","The nonvolatile memory device () can include one or more nonvolatile memory media (), which can be organized into storage blocks (). Each storage block () can include a data region () and a metadata region (). Metadata regions () of nonvolatile memory blocks () are typically not available to operating systems to store information. Instead, they are reserved for use in storing metadata that is specific to the nonvolatile memory device (). However, the interface with the nonvolatile memory device () can be extended to allow a component, such as an operating system component or an I\/O controller (), to store information in the metadata regions (). Accordingly, the I\/O controller () or a component of the operating system () can calculate an integrity unit from data to be stored in the nonvolatile memory device (). The integrity unit can be passed to the nonvolatile memory device (), along with the data and possibly other metadata. The metadata can be stored in a metadata region () of a block (), and the corresponding data from which the integrity unit was calculated can be stored in the data region () of the same block ().","Before initially using integrity units in the configuration of , the I\/O controller () can report availability of the integrity unit storage feature. An operating system driver can then request a slot or offset in a metadata region () to be used for storing the integrity unit. If a slot or offset is not available, a controller interface may fail the operating system driver's request. If operating system level data integrity units are augmented with application level data integrity units (as discussed above with reference to ), the slot requested in the metadata region () can be requested as the sum of the individual integrity units. An operating system driver can expose a programmatic interface, enabling the operating system () and applications (not shown) to indicate sizes of the individual integrity units.","When the data is later requested by the I\/O controller (), the metadata (including the stored integrity unit) can be sent along with the data. If the I\/O controller () is acting as an integrity module, the I\/O controller can calculate a new integrity unit from the received data and compare that new integrity unit to the stored integrity unit received from the nonvolatile memory device (). The information from this comparison can be used as discussed above. For example, if the two integrity units match, this can indicate a match between the data that was originally sent to the nonvolatile memory device () and the data that was received back from the nonvolatile memory device ().","This configuration can be more efficient than other configurations where integrity units for data in multiple blocks () of a device are stored in the data region of another block (). In those configurations, an operating system () can request the data from one block, and can also request the corresponding integrity unit from another block, typically resulting in two requests being sent and two blocks being read for each block of data that is requested from a block-based storage device. In contrast, where the integrity unit and the data itself are in the same block () they can be requested in a single request, and returned in a single response as a single block.","IV. Techniques for Data Integrity Units in Nonvolatile Memory","Techniques for data integrity units in nonvolatile memory will now be discussed. These techniques can be performed in one or more computing environments such as those discussed above, or some other computing environment(s).","Referring to , a technique for data integrity units in nonvolatile memory will be discussed. In the technique, an integrity unit calculated from a first data unit can be calculated (). A first storage device can be requested () to store the first data unit in the storage device. In addition, a second storage device can be requested () to store metadata in nonvolatile memory in the second storage device. The metadata can include the integrity unit, and may also include diagnostic information, such as information about a path of the first data unit to the first storage device. Also, the second storage device can be separate from the first storage device. A second data unit can be received () from the first storage device in response to a request for the first data unit. For example, the second data unit may be a data unit that is expected to be the same as the first data unit. The integrity unit, and optionally also diagnostic information such as data path information, can be received () for the second storage device in response to a request. The second data unit and the integrity unit can be analyzed () to determine () whether the second data unit matches the first data unit. For example, the integrity unit can be a first integrity unit, and analyzing () can include calculating a second integrity unit from the second data unit and comparing the second integrity unit with the first integrity unit. One or more of the operations of  can be performed by one or more computing components comprising an operating system component.","The first and second storage devices may be different types of storage devices. For example, the first storage device can include one or more magnetic storage media, such as one or more hard disks. The nonvolatile memory can be, for example, a solid state drive memory, block addressable flash memory on a system bus, phase change memory, or some combination of the foregoing types of nonvolatile memory. The nonvolatile memory may be word addressable, and the integrity unit can be stored on the nonvolatile memory as part of an array of integrity units. The integrity unit can be indexed on the array by an address (such as a logical block address) of the first data unit in the first storage device. Alternatively, mapping tables could be used to locate integrity units in word addressable nonvolatile memory.","The integrity unit may be a first checksum, and analyzing the second data unit and the integrity unit can include calculating a second checksum from the second data unit and determining whether the two checksums match. The diagnostic information received from the second storage device can be analyzed to diagnose () an error if the second data unit does not match the first data unit. The diagnostic information can also be used to protect () against the error, such as by re-routing future data to avoid an error-prone data path. For example, the diagnostic information may include information about a path of the first data unit to the first storage device. The method can include receiving the information about the path from the second storage device.","Referring now to , another technique for data integrity units in nonvolatile memory will be discussed. In the technique, it can be determined () whether a first data unit, which is to be stored, is a high integrity unit. \u201cHigh integrity\u201d is an attribute of stored data indicating an intent to heighten integrity of the stored data, such as an attribute requested by an application or user. As an example, the determination () may be done by determining whether the first data unit is part of a high integrity directory in a file system, determining whether the first data unit is to be stored in a high integrity region (e.g., a block or group of blocks) of a storage device, determining whether the first data unit is part or all of a high integrity type of file, etc. If the first data unit is a high integrity unit, a number of operations can be performed. A first integrity unit can be calculated () from the first data unit. A first storage device can be requested () to store the first data unit. A second storage device can be requested () to store metadata in nonvolatile memory in the second storage device. The metadata can include the integrity unit. The first and second storage devices can be different types of storage devices. A second data unit can be received () from the first storage device in response to a request for the first data unit. A second integrity unit can be calculated () from the second data unit. The first integrity unit can be received () from the second storage device, and it can be determined () whether the first and second integrity units match.","If it is determined () that the first data unit is not a high integrity unit, then storage of the first data unit in the first device can be requested () and the second data unit can be received () from the first storage device, without performing the integrity operations (, , , , and ) discussed above with reference to . However, the integrity and storage operations (, , , , , , and ) may be performed without determining () whether the first data unit is a high integrity unit.","One or more operating system components can be executed to perform one or more of the operations discussed above with reference to . Also, the first type of storage device can be a magnetic-type storage device, such as a hard disk drive.","The technique of  may include additional operations associated with an application, such as receiving a third integrity unit from the application, including the third integrity unit in the metadata, receiving the third integrity unit from the second storage device, and passing the third integrity unit and the second data unit to the application.","Referring now to , yet another technique for data integrity units in nonvolatile memory will be discussed. In the technique, a first integrity unit can be calculated () from a first data unit. A storage device can be requested () to store the first data unit in a data region of a nonvolatile memory block in the storage device. The storage device can also be requested () to store metadata in a metadata region of the nonvolatile memory block. The metadata can include the first integrity unit. A second data unit can be received () from the storage device in response to a request for the first data unit. A second integrity unit can be calculated () from the second data unit, and the first integrity unit can be received () from the storage device. It can be determined () whether the second integrity unit matches the first integrity unit.","The operations discussed above with reference to  can be performed by one or more computing components, such as an operating system component. Alternatively, the instructions can be performed by a host adapter or some combination of a host adapter and an operating system component. In the latter case, negotiation of integrity functionality can be performed, for example, during initialization of the host adapter by an operating system driver. If both are capable of performing integrity validation, the operating system driver can make an arbitration decision and inform the host adapter via a defined interface.","The first and second integrity units can each include a checksum, such a cyclical redundancy check. Also, the first integrity unit can include one or more sub-units. For example, the first integrity unit may include one sub-unit calculated by a host adapter or operating system component and another sub-unit calculated by an application, as discussed above with reference to . Thus, at least one of the sub-units could be received from an application along with the first data unit and\/or passed to the application along with the second data unit.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
