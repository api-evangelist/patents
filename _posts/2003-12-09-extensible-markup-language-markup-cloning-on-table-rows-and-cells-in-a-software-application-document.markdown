---
title: Extensible markup language markup cloning on table rows and cells in a software application document
abstract: Methods and systems are provided for automatically replicating table rows and cells marked up with Extensible Markup Language (XML) data (markup) to create new table rows and cells containing the same XML markup as a selected row and cells from which the new row and cells are replicated. A table row with one or more cells may be selected for replication. The selected row (source row) is parsed to determine XML markup (XML elements (tags)) applied to the row or cells contained therein. A new row(s) and corresponding cell(s) is created. XML markup applied to the source row and its cells is automatically applied to the new row and cells contained therein.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07426690&OS=07426690&RS=07426690
owner: Microsoft Corporation
number: 07426690
owner_city: Redmond
owner_country: US
publication_date: 20031209
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COPYRIGHT NOTICE","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the United States Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","The present invention generally relates to use of table rows and cells in a computer-generated document. More particularly, the present invention relates to replication of a table row, including replication of application of Extensible Markup Language (XML) markup to a new table row or cell from a previous row or cell.","Computer software applications allow users to create a variety of documents to assist them in work, education, and leisure. For example, popular word processing applications allow users to create letters, articles, books, memoranda, and the like. Spreadsheet applications allow users to store, manipulate, print, and display a variety of alphanumeric data. Such applications have a number of well-known strengths including rich editing, formatting, printing, calculation, and on-line and off-line editing.","In computer-generated documents, tables are often used to represent information whose basic structure is repeated from row to row. For example, consider a table representing financial results of various companies. Each column may represent a specific piece of financial information, such as revenues, net profits, earnings per share, and the like, while each row may represent a different company. It is typical for each consecutive row in a table to follow the same structure as the previous row. That is, each consecutive row typically consists of the same number of cells, each of the same size and meaning as are contained in the previous row. Many prior art word processing applications take the number of cells and sizes of a previous row into account when creating a new row that is structurally similar to a previous row. That is, some prior art word processing applications allow for the automatic creation of a new row that contains the same number and sizes of cells as a previous row.","It has become desirable to annotate computer-generated documents with helpful structure such as that provided by the Extensible Markup Language (XML). User-defined XML markup may be applied to a given row in a table where the row or individual cells within the row are marked up with XML markup structure. Unfortunately, prior art word processing applications do not allow for the automatic creation of a new row in a table that contains a replication of the XML markup applied to selected or previous row. Therefore, the user must manually re-apply XML markup to a newly created row if the user desires that the newly created row have the same XML markup as the row from which the newly created row is replicated. It is known to copy and paste a previously XML-formatted row in order to create a new row containing the same XML formatting, but such a procedure is cumbersome, inefficient, and requires the user to review the pasted row to ensure that the XML-formatting from the previous or selected row has been properly applied to the newly created row.","It is with respect to these and other considerations that the present invention has been made.","The present invention provides methods and systems for automatically replicating table rows and cells marked up with Extensible Markup Language (XML) data (markup) to create new table rows and cells containing the same XML markup as a selected row and cells from which the new row and cells are replicated. According to aspects of the present invention, a table row with one or more cells may be selected for replication. The selected row (source row) is parsed to determine XML markup (XML elements (tags)) applied to the row or cells contained therein. A new row and corresponding cell(s) is created. XML markup applied to the source row and its cells is automatically applied to the new row and cells contained therein. According to one aspect of the invention, only the cell-level and row-level markup is replicated. The XML markup that has been applied to a level lower than the cell (e.g., a paragraph within the cell or a set of characters) is not replicated. User-entered data (non-XML markup) entered into the source row and cells is not replicated into the new row and cells. According to aspects of the invention, the new row and cells may be inserted above or below the selected source row. Accordingly, a new row may be automatically created having the same application of XML markup as a selected or previous row.","These and other features, advantages, and aspects of the present invention may be more clearly understood and appreciated from a review of the following detailed description of the disclosed embodiments and by reference to the appended drawings and claims.","Embodiments of the present invention are directed to methods and systems for automatically replicating table rows and cells marked up with Extensible Markup Language (XML) data to create a new table row with cells containing the same cell-level and row-level XML markup as a selected row or previous row from which the new row is replicated. In the following detailed description, references are made to the accompanying drawings that form a part hereof, and in which are shown by way of illustrations specific embodiments or examples. These embodiments may be combined, other embodiments may be utilized, and structural changes may be made without departing from the spirit or scope of the present invention. The following detailed description is therefore not to be taken in a limiting senses and the scope of the present invention is defined by the appended claims and their equivalents.","Referring now to the drawings, in which like numerals represent like elements through the several figures, aspects of the present invention and the exemplary operating environment will be described.  and the following discussion are intended to provide a brief, general description of a suitable computing environment in which the invention may be implemented. While the invention will be described in the general context of program modules that execute in conjunction with an application program that runs on an operating system on a personal computer, those skilled in the art will recognize that the invention may also be implemented in combination with other program modules.","Generally, program modules include routines, programs, components, data structures, and other types of structures that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","Turning now to , illustrative computer architecture for a personal computer  for practicing the various embodiments of the invention will be described. The computer architecture shown in  illustrates a conventional personal computer, including a central processing unit  (\u201cCPU\u201d), a system memory , including a random access memory  (\u201cRAM\u201d) and a read-only memory (\u201cROM\u201d) , and a system bus  that couples the memory to the CPU . A basic input\/output system containing the basic routines that help to transfer information between elements within the computer, such as during startup, is stored in the ROM . The personal computer  further includes a mass storage device  for storing an operating system , application programs, such as the application program , and data.","The mass storage device  is connected to the CPU  through a mass storage controller (not shown) connected to the bus . The mass storage device  and its associated computer-readable media, provide non-volatile storage for the personal computer . Although the description of computer-readable media contained herein refers to a mass storage device, such as a hard disk or CD-ROM drive, it should be appreciated by those skilled in the art that computer-readable media can be any available media that can be accessed by the personal computer .","By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EPROM, EEPROM, flash memory or other solid state memory technology, CD-ROM, DVD, or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the computer.","According to various embodiments of the invention, the personal computer  may operate in a networked environment using logical connections to remote computers through a TCP\/IP network , such as the Internet. The personal computer  may connect to the TCP\/IP network  through a network interface unit  connected to the bus . It should be appreciated that the network interface unit  may also be utilized to connect to other types of networks and remote computer systems. The personal computer  may also include an input\/output controller  for receiving and processing input from a number of devices, including a keyboard or mouse (not shown). Similarly, an input\/output controller  may provide output to a display screen, a printer, or other type of output device.","As mentioned briefly above, a number of program modules and data files may be stored in the mass storage device  and RAM  of the personal computer , including an operating system  suitable for controlling the operation of a networked personal computer, such as the WINDOWS XP operating system from MICROSOFT CORPORATION of Redmond, Wash. The mass storage device  and RAM  may also store one or more application programs. In particular, the mass storage device  and RAM  may store an application program  for creating and editing an electronic document . For instance, the application program  may comprise a word processing application program, a spreadsheet application, a contact application, and the like. Application programs for creating and editing other types of electronic documents may also be used with the various embodiments of the present invention. A schema file  and a namespace\/schema library , described below, are also shown.","Exemplary embodiments of the present invention are implemented by communications between different software objects in an object-oriented programming environment. For purposes of the following description of embodiments of the present invention, it is useful to briefly to describe components of an object-oriented programming environment.  is a simplified block diagram illustrating interaction between software objects according to an object-oriented programming model. According to an object-oriented programming environment, a first object  may include software code, executable methods, properties, and parameters. Similarly, a second object  may also include software code, executable methods, properties, and parameters.","A first object  may communicate with a second object  to obtain information or functionality from the second object  by calling the second object  via a message call . As is well know to those skilled in the art of object-oriented programming environment, the first object  may communicate with the second object  via application programming interfaces (API) that allow two disparate software objects ,  to communicate with each other in order to obtain information and functionality from each other. For example, if the first object  requires the functionality provided by a method contained in the second object , the first object  may pass a message call  to the second object  in which the first object identifies the required method and in which the first object passes any required parameters to the second object required by the second object for operating the identified method. Once the second object  receives the call from the first object, the second object executes the called method based on the provided parameters and sends a return message  containing a value obtained from the executed method back to the first object .","For example, in terms of embodiments of the present invention, and as will be described below, a first object  may be a third party customized application that passes a message to a second object such as an Extensible Markup Language schema validation object whereby the first object identifies a method requiring the validation of a specified XML element in a document where the specified XML element is a parameter passed by the first object with the identified method. Upon receipt of the call from the first object, according to this example, the schema validation object executes the identified method on the specified XML element and returns a message to the first object in the form of a result or value associated with the validated XML element. Operation of object-oriented programming environments, as briefly described above, are well known to those skilled in the art.","As described below, embodiments of the present invention are implemented through the interaction of software objects in the use, customization, and application of components of the Extensible Markup Language (XML).  is a block diagram illustrating interaction between a document, an attached schema file, and a schema validation functionality module. As is well known to those skilled in the art, the Extensible Markup Language (XML) provides a method of describing text and data in a document by allowing a user to create tag names that are applied to text or data in a document that in turn define the text or data to which associated tags are applied. For example referring to , the document  created with the application  contains text that has been marked up with XML tags , , . For example, the text \u201cGreetings\u201d is annotated with the XML tag <title>. The text \u201cMy name is Sarah\u201d is annotated with the <body> tag. According to XML, the creator of the <title> and <body> tags is free to create her own tags for describing the tags to which those tags will be applied. Then, so long as any downstream consuming application or computing machine is provided instructions as to the definition of the tags applied to the text, that application or computing machine may utilize the data in accordance with the tags. For example, if a downstream application has been programmed to extract text defined as titles of articles or publications processed by that application, the application may parse the document  and extract the text \u201cGreetings,\u201d as illustrated in  because that text is annotated with the tag <title>. The creator of the particular XML tag naming for the document , illustrated in , provides useful description for text or data contained in the document  that may be utilized by third parties so long as those third parties are provided with the definitions associated with tags applied to the text or data.","According to embodiments of the present invention, the text and XML markup entered into the document  may be saved according to a variety of different file formats and according to the native programming language of the application  with which the document  is created. For example, the text and XML markup may be saved according to a word processing application, a spreadsheet application, and the like. Alternatively, the text and XML markup entered into the document  may be saved as an XML format whereby the text or data, any applied XML markup, and any formatting such as font, style, paragraph structure, etc. may be saved as an XML representation. Accordingly, downstream or third party applications capable of understanding data saved as XML may open and consume the text or data thus saved as an XML representation. For a detailed discussion of saving text and XML markup and associated formatting and other attributes of a document  as XML, see U.S. patent application entitled \u201cWord Processing Document Stored in a Single XML File that may be Manipulated by Applications that Understanding XML,\u201d U.S. Ser. No. 10\/187,060, filed Jun. 28, 2002, which is incorporated herein by reference as if fully set out herein. An exemplary schema in accordance with the present invention is disclosed beginning on page 11 in an application entitled \u201cMixed Content Flexibility,\u201d Ser. No. 10\/726,077, filed Dec. 2, 2003, which is hereby incorporated by reference in its entirety.","In order to provide a definitional framework for XML markup elements (tags) applied to text or data, as illustrated in , XML schema files are created which contain information necessary for allowing users and consumers of marked up and stored data to understand the XML tagging definitions designed by the creator of the document. Each schema file also referred to in the art as a Namespace or XSD file preferably includes a listing of all XML elements (tags) that may be applied to a document according to a given schema file. For example, a schema file , illustrated in , may be a schema file containing definitions of certain XML elements that may be applied to a document  including attributes of XML elements or limitations and\/or rules associated with text or data that may be annotated with XML elements according to the schema file. For example, referring to the schema file  illustrated in , the schema file is identified by the Namespace \u201cintro\u201d the schema file includes a root element of <intro card>.","According to the schema file , the <intro card> element serves as a root element for the schema file and also as a parent element to two child elements <title> and <body>. As is well known to those skilled in the art, a number of parent elements may be defined under a single root element, and a number of child elements may be defined under each parent element. Typically, however, a given schema file  contains only one root element. Referring still to , the schema file  also contains attributes  and  to the <title> and <body> elements, respectfully. The attributes  and  may provide further definition or rules associated with applying the respective elements to text or data in the document . For example, the attribute  defines that text annotated with the <title> element must be less than or equal to twenty-five characters in length. Accordingly, if text exceeding twenty-five characters in length is annotated with the <title> element or tag, the attempted annotation of that text will be invalid according to the definitions contained in the schema file .","By applying such definitions or rules as attributes to XML elements, the creator of the schema may dictate the structure of data contained in a document associated with a given schema file. For example, if the creator of a schema file  for defining XML markup applied to a resume document desires that the experience section of the resume document contain no more than four present or previous job entries, the creator of the schema file  may define an attribute of an <experience> element, for example, to allow that no more than four present or past job entries may be entered between the <experience> tags in order for the experience text to be valid according to the schema file . As is well known to those skilled in the art, the schema file  may be attached to or otherwise associated with a given document  for application of allowable XML markup defined in the attached schema file to the document . According to one embodiment, the document  marked up with XML elements of the attached or associated schema file  may point to the attached or associated schema file by pointing to a uniform resource identifier (URI) associated with a Namespace identifying the attached or associated schema file .","According to embodiments of the present invention, a document  may have a plurality of attached schema files. That is, a creator of the document  may associate or attach more than one schema file  to the document  in order to provide a framework for the annotation of XML markup from more than one schema file. For example, a document  may contain text or data associated with financial data. A creator of the document  may wish to associate XML schema files  containing XML markup and definitions associated with multiple financial institutions. Accordingly, the creator of the document  may associate an XML schema file  from one or more financial institutions with the document . Likewise, a given XML schema file  may be associated with a particular document structure such as a template for placing financial data into a desirable format.","According to embodiments of the present invention, a collection of XML schema files and associated document solutions may be maintained in a Namespace or schema library located separately from the document . The document  may in turn contain pointers to URIs in the Namespace or schema library associated with the one or more schema files attached to otherwise associated with the document . As the document  requires information from one or more associated schema files, the document  points to the Namespace or schema library to obtain the required schema definitions. For a detailed description of the use of an operation of Namespace or schema libraries, see U.S. patent application entitled \u201cSystem and Method for Providing Namespace Related Information,\u201d U.S. Ser. No. 10\/184,190, filed Jun. 27, 2002, and U.S. patent application entitled \u201cSystem and Method for Obtaining and Using Namespace Related Information for Opening XML Documents,\u201d U.S. Ser. No. 10\/185,940, filed Jun. 27, 2002, both U.S. patent applications of which are incorporated herein by reference as if fully set out herein. For a detailed description of a mechanism for downloading software components such as XML schema files and associated solutions from a Namespace or schema library, see U.S. patent application entitled Mechanism for Downloading Software Components from a Remote Source for Use by a Local Software Application, U.S. Ser. No. 10\/164,260, filed Jun. 5, 2002.","Referring still to , a schema validation functionality module  is illustrated for validating XML markup applied to a document  against an XML schema file  attached to or otherwise associated with the document , as described above. As described above, the schema file  sets out acceptable XML elements and associated attributes and defines rules for the valid annotation of the document  with XML markup from an associated schema file . For example, as shown in the schema file , two child elements <title> and <body> are defined under the root or parent element <intro card>. Attributes ,  defining the acceptable string length of text associated with the child elements <title> and <body> are also illustrated. As described above, if a user attempts to annotate the document  with XML markup from a schema file  attached to or associated with the document in violation of the XML markup definitions contained in the schema file , an invalidity or error state will be presented. For example, if the user attempts to enter a title string exceeding twenty-five characters, that text entry will violate the maximum character length attribute of the <title> element of the schema file . In order to validate XML markup applied to a document , against an associated schema file , a schema validation module  is utilized. As should be understood by those skilled in the art, the schema validation module  is a software module including computer executable instructions sufficient for comparing XML markup and associated text entered in to a document  against an associated or attached XML schema file  as the XML markup and associated text is entered in to the document .","According to embodiments of the present invention, the schema validation module  compares each XML markup element and associated text or data applied to the document  against the attached or associated schema file  to determine whether each element and associated text or data complies with the rules and definitions set out by the attached schema file . For example, if a user attempts to enter a character string exceeding twenty-five characters annotated by the <title> elements , the schema validation module will compare that text string against the text string attribute  of the attached schema file  and determine that the text string entered by the user exceeds the maximum allowable text string length. Accordingly, an error message or dialogue will be presented to the user to alert the user that the text string being entered by the user exceeds the maximum allowable character length according to the attached schema file . Likewise, if the user attempts to add an XML markup element between the <title> and the <body> elements, the schema validation module  will determine that the XML markup element applied by the user is not a valid element allowed between the <title> and <body> elements according to the attached schema file . Accordingly, the schema validation module  will generate an error message or dialogue to the user to alert the user of the invalid XML markup.","XML Markup Cloning on Table Rows and Cells in a Computer-Generated Document","As briefly described above, embodiments of the present invention are directed to methods and systems for automatically replicating table rows and cells marked up with Extensible Markup Language data to create a new table row with cells containing the same XML markup as a selected row or previous row from which the new row is replicated. Consider for example that a user has created on expense report, as follows, which is a document based upon a template that contains a table listing expenses.","The table may be marked up with expense report specific XML by the template author. For example, the following two rows are a sample of an example expense report document prepared by a template author containing a table made up of two rows each row having two cells.",{"@attributes":{"id":"p-0036","num":"0035"},"chemistry":{"@attributes":{"id":"CHEM-US-00001","num":"00001"},"img":{"@attributes":{"id":"EMI-C00001","he":"9.65mm","wi":"71.54mm","file":"US07426690-20080916-C00001.TIF","alt":"embedded image","img-content":"chem","img-format":"tif"}}}},"The first row is marked up with the element <Product>. The first cell of that row is marked up with element <Name>. The second cell is marked up with element <Price>. According to an embodiment of the invention, even though the <Product> tags appear to be inside of the row (and inside of the cells) in the above example, the <Product> element is actually the parent element of that row and its appearance inside of the row (and cells) is just a side effect of the layout limitations of the user interface (UI). Similarly, the <Name> and the <Price> elements are actually parent elements of their corresponding cells and not children as the above may seem to suggest. There are UI implementations that are capable of showing the <Product> tags as surrounding the row (which they really are) and the <Price> and <Name> tags as surrounding the cells, and not as contained within the row or cell. This, however, is a display limitation and has no impact on the functionality of this invention.","The second row has identical XML markup elements as the first row. For purposes of example, user-entered data \u201cShoes\u201d is entered in the cell contained within the \u201cName\u201d element of row 1 and a price of \u201c$123.90\u201d is shown entered in the second cell of the first row, which is contained inside the <Price> element.","According to embodiments of the present invention, if the user desires to add additional rows to this table having the same XML markup of the previous rows, the user automatically generate a third row having the same physical structure, for example two cells, and having the identical XML markup around that row and those cells as the previous row. That is, the third row is a replication of the previous row including both the row's physical structure and the XML structure surrounding it. Accordingly, a new row is added to the table as follows.",{"@attributes":{"id":"p-0040","num":"0039"},"chemistry":{"@attributes":{"id":"CHEM-US-00002","num":"00002"},"img":{"@attributes":{"id":"EMI-C00002","he":"13.89mm","wi":"71.63mm","file":"US07426690-20080916-C00002.TIF","alt":"embedded image","img-content":"chem","img-format":"tif"}}}},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 4","b":["400","405","410"]},"The logic in determining the selected row in  is covered with the following cases.\n\n","At Block , an XML parser according to embodiments of the present invention parses the selected row(s) to determine the XML markup applied to the row. At Block , the new row is created. When the new row is created, the new row is created with identical physical structure including the number and shapes and sizes of cells. The method then proceeds to Block  and the XML markup applied to the row selected in  (and to its cells) is applied to the newly created row (and its cells). The method ends at Block .","As described above, embodiments of the present invention may be utilized for inserting a new table row. According to one embodiment of the present invention, the user may be provided with a user interface for allowing the user to select that a newly created row should be inserted above or below a selected row. Consider for example the following row in which the user has placed the insertion point or cursor in the second cell inside the <cell> element.",{"@attributes":{"id":"p-0045","num":"0047"},"chemistry":{"@attributes":{"id":"CHEM-US-00003","num":"00003"},"img":{"@attributes":{"id":"EMI-C00003","he":"11.43mm","wi":"96.60mm","file":"US07426690-20080916-C00003.TIF","alt":"embedded image","img-content":"chem","img-format":"tif"}}}},"If the user selects the option of inserting a new row below the insertion point, the following result will occur.",{"@attributes":{"id":"p-0047","num":"0049"},"chemistry":{"@attributes":{"id":"CHEM-US-00004","num":"00004"},"img":{"@attributes":{"id":"EMI-C00004","he":"16.93mm","wi":"91.27mm","file":"US07426690-20080916-C00004.TIF","alt":"embedded image","img-content":"chem","img-format":"tif"}}}},"It should be appreciated, that had the user selected to have the new row inserted above the insertion point, then the new row with the corresponding XML markup would have been inserted in the row immediately above the row in which the user's insertion point was originally placed and the XML markup applied to the new row would be that markup applied to the row in which the user's insertion point was placed.","According to embodiments of the present invention, multiple rows may be selected by the user as shown below. Suppose the first two rows are selected as follows.",{"@attributes":{"id":"p-0050","num":"0052"},"chemistry":{"@attributes":{"id":"CHEM-US-00005","num":"00005"},"img":{"@attributes":{"id":"EMI-C00005","he":"11.43mm","wi":"91.78mm","file":"US07426690-20080916-C00005.TIF","alt":"embedded image","img-content":"chem","img-format":"tif"}}}},"When the user selects from a user interface that the selected rows are to be inserted above or below the selected rows, new rows equaling the number of selected rows will be created and will be populated with the XML markup applied to the multiple selected rows following the logic described in . The example shown below is if the user has selected to insert new rows above the selection.",{"@attributes":{"id":"p-0052","num":"0054"},"chemistry":{"@attributes":{"id":"CHEM-US-00006","num":"00006"},"img":{"@attributes":{"id":"EMI-C00006","he":"22.01mm","wi":"91.86mm","file":"US07426690-20080916-C00006.TIF","alt":"embedded image","img-content":"chem","img-format":"tif"}}}},"As described above, the user may select the \u201cTab\u201d key in the last cell of a table and a new row containing the same XML markup of the row in which the insertion point is placed will be added immediately below the row in which the insertion point is placed. As shown below, the insertion point is placed in the last cell of the second row of the illustrated table. When the user selects the \u201cTab\u201d to create a new row, the new row is inserted immediately below the row in which the user's insertion point is placed, and the new row contains the XML markup applied to the last row.",{"@attributes":{"id":"p-0054","num":"0056"},"chemistry":{"@attributes":{"id":"CHEM-US-00007","num":"00007"},"img":{"@attributes":{"id":"EMI-C00007","he":"9.74mm","wi":"71.54mm","file":"US07426690-20080916-C00007.TIF","alt":"embedded image","img-content":"chem","img-format":"tif"}}}},"Then the user presses \u201cTab\u201d to create the next row. The new row gets all the row and cell level markup replicated as follows:",{"@attributes":{"id":"p-0056","num":"0058"},"chemistry":{"@attributes":{"id":"CHEM-US-00008","num":"00008"},"img":{"@attributes":{"id":"EMI-C00008","he":"13.89mm","wi":"71.63mm","file":"US07426690-20080916-C00008.TIF","alt":"embedded image","img-content":"chem","img-format":"tif"}}},"br":{}},"As described herein, methods and systems provide for automatically replicating table rows and cells marked up with Extensible Markup Language structure to create a new table row and corresponding cells containing the same XML markup as a selected row or a previous row from which the new row is replicated. It will be apparent to those skilled in the art that various modifications or variations may be made in the present invention without departing from the scope or spirit of the invention. Other embodiments of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the invention disclosed herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
