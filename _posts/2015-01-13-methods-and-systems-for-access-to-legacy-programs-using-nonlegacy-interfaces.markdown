---
title: Methods and systems for access to legacy programs using non-legacy interfaces
abstract: Development of interfaces for legacy programs. A system includes a client device displaying a series of screens output from a legacy program in a terminal emulator. The system further includes a tracking module logging activity in the terminal emulator in a trail file, and an analysis module adapted to analyze the trail file and produce, based on the analysis, a REST API based upon the analysis that supports a collection of different REST API calls corresponding to the series of screens output from the legacy program. The REST API is a stateless API utilized in a stateful manner in which each REST API call of the collection of REST API calls provides direct access to a corresponding screen of the series of screens.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09471405&OS=09471405&RS=09471405
owner: OPENLEGACY TECHNOLOGIES LTD
number: 09471405
owner_city: Kiryat Ono
owner_country: IL
publication_date: 20150113
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DEFINITIONS AND ACRONYMS","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["Benefit is claimed to U.S. Provisional Patent Application No. 61\/926,421, filed on Jan. 13, 2014; the contents of which are incorporated by reference herein in their entirety.","Various exemplary embodiments relate to development of interfaces for legacy programs.","Legacy programs are computer programs running on mainframe or host computers. Traditionally these programs are operated through standard terminal screen interfaces, such as the TN3270 screen protocol defined by IBM and others. Many legacy programs are in use throughout the world today. However the character based user interfaces most often employed by legacy programs are perceived as difficult to use by consumers that have become accustomed to graphical user interfaces such as those employed on the WWW, mobile communications device and home computers. In addition, updating of legacy programs with additional business logic has traditionally required many hours of work by human developers.","A broad aspect of the invention relates to simplifying access to legacy programs.","One aspect of some embodiments of the invention relates to automatic generation of APIs from legacy programs which serve as models for implementation of a web\/mobile interface. In some exemplary embodiments of the invention, the API uses metadata (e.g. POJOs) for modeling.","One aspect of some embodiments of the invention relates to automatic generation of a web\/mobile interface from APIs describing legacy programs. In some exemplary embodiments of the invention, metadata (e.g. POJOs) from the API serves as a template for the web\/mobile interface. Alternatively or additionally, in some embodiments the web\/mobile interface is generated automatically in a markup language.","One aspect of some embodiments of the invention relates to direct communication between a client device running a conventional web browser (e.g. Internet Explorer, Chrome, Firefox or Safari) and a host mainframe running a legacy program. In some exemplary embodiments of the invention, a REST API installed in the host mainframe facilitates the direct communication. Optionally, the REST API employs JSON.","It will be appreciated that the various aspects described above relate to solution of technical problems associated with operation of character based legacy programs by users accustomed to graphical user interfaces","Alternatively or additionally, it will be appreciated that the various aspects described above relate to solution of technical problems related to provision of graphical user interfaces for character based legacy programs.","In some exemplary embodiments of the invention there is provided a method including: (a) logging activity of a user in a terminal emulator displaying a series of screens output from a legacy program in a trail file stored in a computer hard drive; (b) analyzing the trail file with a screen processor adapted to produce an API; and (c) outputting the API to class files on a hard drive. In some embodiments, the logging includes recording input and output screens displayed in the emulator. Alternatively or additionally, in some embodiments the logging includes logging fields displayed within screens in the emulator. Alternatively or additionally, in some embodiments the analyzing includes assigning a screen type to each of the screens. Alternatively or additionally, in some embodiments the method includes preserving organization of screens in the emulator in the API. Alternatively or additionally, in some embodiments the method includes applying pre-determined rules stored in business rules files to identify patterns on the screens and outputting metadata definitions as part of the API. Alternatively or additionally, in some embodiments the method includes applying pre-determined rules stored in a business rules files to identify relationships between screens displayed in the emulator and output metadata definitions. Alternatively or additionally, in some embodiments the method includes defining screens and\/or fields in the legacy program as POJOs in the API. Alternatively or additionally, in some embodiments the method includes testing the API for correctness using the screens processor.","In some exemplary embodiments of the invention there is provided a system including: (a) a client device displaying a series of screens output from a legacy program in a terminal emulator; (b) a tracking module logging activity in the terminal emulator in a trail file; and (c) an analytic module adapted to analyze the trail file and produce an API based upon the analysis. In some embodiments, the tracking module is adapted to log input and output screens displayed in the emulator. Alternatively or additionally, in some embodiments the tracking module is adapted to log fields displayed within screens in the emulator. Alternatively or additionally, in some embodiments the analytic module is adapted preserve organization of screens in the emulator in the API. Alternatively or additionally, in some embodiments the system includes a set of pre-determined rules stored in a business rules files accessible by the analytic module. Alternatively or additionally, in some embodiments the analytic module is adapted to assign a screen type to each of the screens. Alternatively or additionally, in some embodiments the analytic module is adapted to define screens data in the legacy program as POJOs in the API. Alternatively or additionally, in some embodiments the system includes a testing module adapted to test the API for correctness.","In some exemplary embodiments of the invention there is provided a method including: (a) receiving screen buffers as data inputs and (b) rendering a web\/mobile application including pages based upon screen models of the screen buffers without pre-generating HTML code. Alternatively or additionally, in some embodiments the pages include menus for navigating to other pages. Alternatively or additionally, in some embodiments the menu provides access to all other screens models, which are accessible from any legacy menu. Alternatively or additionally, in some embodiments the web\/mobile application is in a markup language. Alternatively or additionally, in some embodiments each screen model of the screen models corresponds to a URL\/API call. Alternatively or additionally, in some embodiments at least one screen model of the screen models includes a widget. Alternatively or additionally, in some embodiments the method includes assigning a URL to each screen model of the web\/mobile application.","In some exemplary embodiments of the invention there is provided a system including: (a) an API stored in class files and (b) a rendering engine adapted to render a web\/mobile application including pages including form fields corresponding to screen models of the API with each page having a menu providing access to pages. Alternatively or additionally, in some embodiments the menu provides access to all other screens which are accessible from any legacy menu. Alternatively or additionally, in some embodiments rendering engine renders the form fields in a markup language. Alternatively or additionally, in some embodiments each screen model of the screen models corresponds to a URL\/API call. Alternatively or additionally, in some embodiments the rendering engine renders at least one of the form fields as a widget.","In some exemplary embodiments of the invention there is provided a method including: (a) transmitting a request from a client device to a mainframe host via an HTTP REST API; and (b) receiving the request at the mainframe host, implementing the request on a legacy program residing on the host and issuing a response to the client device; wherein there is no intervening tier or layer between the client device and the mainframe host. In some embodiments, the method includes installing a REST API service on the mainframe host. Alternatively or additionally, in some embodiments the REST API service employs JSON (JavaScript Object Notation).","In some exemplary embodiments of the invention there is provided a system including: (a) a mainframe host including a REST API communication service and running at least one legacy program and (b) one or more client devices submitting requests directly to the at least one legacy program on the mainframe host without an intervening tier or layer between the client device (s) and the mainframe host. In some embodiments, the REST API employs JSON (JavaScript Object Notation).","Unless otherwise defined, all technical and scientific terms used herein have the same meaning as commonly understood by one of ordinary skill in the art to which this invention belongs. Although suitable methods and materials are described below, methods and materials similar or equivalent to those described herein can be used in the practice of the present invention. In case of conflict, the patent specification, including definitions, will control. All materials, methods, and examples are illustrative only and are not intended to be limiting.","As used herein, the terms \u201ccomprising\u201d and \u201cincluding\u201d or grammatical variants thereof are to be taken as specifying inclusion of the stated features, integers, actions or components without precluding the addition of one or more additional features, integers, actions, components or groups thereof. This term is broader than, and includes the terms \u201cconsisting of\u201d and \u201cconsisting essentially of\u201d as defined by the Manual of Patent Examination Procedure of the United States Patent and Trademark Office. Thus, any recitation that an embodiment \u201cincludes\u201d or \u201ccomprises\u201d a feature is a specific statement that sub embodiments \u201cconsist essentially of\u201d and\/or \u201cconsist of\u201d the recited feature.","The phrase \u201cadapted to\u201d as used in this specification and the accompanying claims imposes additional structural limitations on a previously recited component.","The term \u201cmethod\u201d refers to manners, means, techniques and procedures for accomplishing a given task including, but not limited to, those manners, means, techniques and procedures either known to, or readily developed from known manners, means, techniques and procedures by practitioners of architecture and\/or computer science.","Implementation of the method and system according to embodiments of the invention involves performing or completing selected tasks or steps manually, automatically, or a combination thereof. Moreover, according to actual instrumentation and equipment of exemplary embodiments of methods, apparatus and systems of the invention, several selected steps could be implemented by hardware or by software on any operating system of any firmware or a combination thereof. For example, as hardware, selected steps of the invention could be implemented as a chip or a circuit. As software, selected steps of the invention could be implemented as a plurality of software instructions being executed by a computer using any suitable operating system. In any case, selected steps of the method and system of the invention could be described as being performed by a data processor, such as a computing platform for executing a plurality of instructions.","As used in this specification and the accompanying claims the term \u201clegacy program\u201d indicates an application running on a mainframe or host computer with a non-graphical user interface. Legacy programs are typically written in non-markup languages such as, for example, fortran, cobol, pascal, C+, C++ or basic.","As used in this specification and the accompanying claims the term \u201cAPI\u201d indicates application program interface.","As used in this specification and the accompanying claims the term \u201cPOJO\u201d indicates Plain Old Java Object.","As used in this specification and the accompanying claims the term \u201cterminal emulator\u201d refers to a terminal screen interface such as the IBM TN3270 or similar.","As used in this specification and the accompanying claims the term \u201cHTML\u201d indicates hypertext markup language.","As used in this specification and the accompanying claims the term \u201cURL\u201d indicates unique resource locator.","As used in this specification and the accompanying claims the term \u201cweb application\u201d indicates an application executable from a web browser.","As used in this specification and the accompanying claims the term \u201cREST API\u201d indicates representational state transfer API.","As used in this specification and the accompanying claims the term \u201cJSON\u201d indicates Java Script Object Notation.","As used in this specification and the accompanying claims the term \u201cGUI\u201d indicates graphical user interface.","Embodiments of the invention relate to methods and systems associated with use of legacy programs having a character based interface.","Specifically, some embodiments of the invention can be used to automatically create an API based upon a legacy program.","Alternatively or additionally, some embodiments of the invention can be used to automatically produce a web\/mobile interface from the API.","Alternatively or additionally, some embodiments of the invention can be used to facilitate direct communication between a client device with a GUI and a legacy program hosted on a mainframe computer.","The principles and operation of methods and\/or systems according to exemplary embodiments of the invention may be better understood with reference to the drawings and accompanying descriptions.","Before explaining at least one embodiment of the invention in detail, it is to be understood that the invention is not limited in its application to the details set forth in the following description or exemplified by the Examples. The invention is capable of other embodiments or of being practiced or carried out in various ways. Also, it is to be understood that the phraseology and terminology employed herein is for the purpose of description and should not be regarded as limiting.","Overview",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 1","b":"99"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 1","FIG. 1"],"b":"100"},"Exemplary API Generation Method",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 2","b":"200"},"Depicted exemplary method  includes logging  activity of a user in a terminal emulator displaying a series of screens output from a legacy program in a trail file. In some exemplary embodiments of the invention, the trail file is stored in a computer hard drive or other memory device. Depicted method  also includes analyzing  the trail file with a screen processor adapted to produce  an API and outputting  the API to class files on a hard drive or other memory device.","In some exemplary embodiments of the invention, logging  includes recording  input and output screens displayed in the emulator.","Alternatively or additionally, in some embodiments logging  includes logging fields  displayed within screens in the emulator. Fields may be defined, for example, with specified row and\/or column and\/or length and\/or content and\/or colors. Alternatively or additionally, in some embodiments the fields are editable.","In the depicted exemplary embodiment, analyzing  includes assigning  a screen type to each of said screens. Exemplary screen types include, but are not limited to login, messages, search menus, details, record selection and lookup window.","In some exemplary embodiments of the invention, method  includes preserving  organization of legacy screens presented in the emulator in the API.","In the depicted exemplary embodiment, analyzing  includes applying  pre-determined rules to identify patterns on the screens and outputting metadata definitions as part of said API. In some embodiments, the predetermined rules are stored as stored in business rules files.","In the depicted exemplary embodiment, analyzing  includes applying  pre-determined rules to identify relationships between screens displayed in said emulator and output metadata definitions in the format of API of said relationships. In some embodiments, the pre-determined rules are stored in a business rules files. In some exemplary embodiments of the invention,  and\/or  are performed automatically by computer hardware components.","In the depicted exemplary embodiment, producing  the API includes defining  screens and\/or fields in the legacy program as POJOs in the API.","In some exemplary embodiments of the invention, method  includes testing  said API for correctness using said screens processor.","Exemplary Rules",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 2","b":["199","200"]},"In some exemplary embodiments of the invention, implementation of the rule set begins with organizing screens (depicted as initialize screen entities ). Organization into groups relies upon, for example, using screen similarities and picking a representative from each group. This process contributes to a reduction in unwanted duplication.","An additional rule, , identifies windows. This can be accomplished, for example by looking for window border\/reverse video. In some cases, looking for fields which intercept each other and have specific text pattern (e.g.: + - - - +) serves this purpose. Rule  defines an area to look for fields, and prevents defining fields outside the window.","In the figure, the next rule, , relates to identification of screen types. While depicted as a single box for clarity, rule  is often a Collection of rules to identify screen types (e.g. login, menu, messages).","Rule  serves to identify tables (col1, col2) by looking for a collection of columns starting\/ending in the same row, which each column s combined with fields starting and ending in the same column. In some embodiments, all fields are removed from the screen (to avoid being recognized as regular fields).","Rule  serves to identify fields. In some embodiments, rule  finds leftover fields \u201clabel: [field]\u201d pattern for both read-only and editable fields, and removes them from the screen. In some embodiments, field types such as date and\/or Boolean and\/or numeric are handled by rule .","In some exemplary embodiments of the invention, rule  serves to identify field types. This rule, when implemented, adds data types to each found field in previous step, by predefined patterns (Y\/N, Specific date formats, numeric, etc).","Alternatively or additionally, in some embodiments rule  identifies read only fields (e.g. \u201cSome Field2\u201d). This rule finds in the leftover fields \u201clabel: [RO field]\u201d by specifying more strict regular expression for labels and Read-only field content","In the depicted exemplary embodiment, rule  serves to identify actions (e.g. \u201cF2=Save\u201d). This rule finds actions on the screen and expresses them as actions metadata.","In some exemplary embodiments of the invention, rule  serves to identify key fields, For example, by guessing the 1st numeric RO field.","Alternatively or additionally, in some embodiments rule  finds screen names (e.g. \u201cScreen1 title\u201d) by looking for a title for the screen in a configurable area and specific regular expression in the leftover fields.","Alternatively or additionally, in some exemplary embodiments of the invention, rule  serves to identify screen by looking for screen name and identifier fields (constants) with specific regular expression in the leftover fields.","At  screen entities defined by the above rules are finalized in some embodiments.","Rule  identifies navigation steps between the selected screens by recognizing the typed content on the matching output screen. In some embodiments, this includes drilldown recognition inside a table.","Rule  identifies child screens by finding child relations between entities and fields and associates them as child entities (to create composite API for screens).","In some embodiments, there is an additional rule (not depicted) which identifies lookup screens by finding relations between a field and his lookup window for values, and creates a relation between the field and the window screen, such that exposing the field possible values from the screen is enabled.","Exemplary API Generation System",{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 3","b":"300"},"Depicted exemplary system  includes a client device  displaying a series of screens output from a legacy program  in a terminal emulator  and a tracking module  logging activity in terminal emulator  in a trail file . In some embodiments, system  includes an analytic module  adapted to analyze trail file  and produce an API  based upon the analysis. In some embodiments, tracking module  is adapted to log input and output screens displayed in emulator . Alternatively or additionally, in some embodiments tracking module  is adapted to log fields displayed within screens in emulator . Alternatively or additionally, in some embodiments analytic module  is adapted preserve organization of screens in emulator  in API .","In some exemplary embodiments of the invention, system  includes a set of pre-determined rules  stored in a memory  (e.g. as one or more business rules files) accessible by analytic module . As described hereinabove, rules  identify patterns and\/or relationships between screens and\/or on the screens displayed in emulator . In some exemplary embodiments of the invention, analytic module  outputs metadata definitions of these patterns as part of API .","In some exemplary embodiments of the invention, analytic module  is adapted to assign a screen type to each of the screens in emulator . Alternatively or additionally, in some embodiments analytic module  is adapted to define screens data in legacy program  as POJOs in API .","In the depicted exemplary embodiment, system  includes a testing module  adapted to test API  for correctness.","Exemplary Annotation Language","In some exemplary embodiments of the invention, POJOs are used to define screen entities. This annotation system contributes to an ability to access a legacy program via a standard Java API. According to this strategy, simple java classes define fields. This approach involves analysis and re-mapping of only user interface objects [iputs\/outputs\/menus\/windows\/tables]","A POJO is a simple Java class without any special code, and just Java fields declarations and get\/set methods.","Generation of POJO based annotation includes creating a Java class which contains \u201c@ScreenEntity\u201d annotation.","\u201c@ScreenIndentifiers\u201d annotation is added. The annotation contains static content on the screen which identifies a legacy screens into a specific class and assigns a title to a plaintext screen.","In some embodiments \u201c@ScreenNavigation\u201d annotation is added to indicate what is the screen entity which this screen is accessed from, and with what terminal action. This notation defines relationships between screens","Together these notations permit navigation from any screen to any screen.","In some embodiments, Java fields are added to the class, each mapped to a position on the screen by row and column.","Popular data types such as List<SomeTableRecord>, Boolean, Integer, Date, Enum are all supported. Use of these data types enables simpler type safety relative to the plain text (character based) legacy program.","Some embodiments employ additional annotation for formatting to each type (@ScreenTable and\/or @ScreenBooleanField and\/or @ScreenDateField)","In some exemplary embodiments of the invention, a hidden Java class is generated (called Aspect), which contains get\/set methods for each field, and additional fields (focus field), to avoid manual writing of the get\/set methods.","Alternatively or additionally, in some embodiments multiple Java classes are created in a similar manner, each class containing unique identifiers, fields and navigation settings.","Exemplary API","Using the annotation system described above, an API according to an exemplary embodiment of the invention has a format in the following style:",{"@attributes":{"id":"p-0099","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003@ScreenEntity"},{"entry":"\u2003@ScreenIdentifiers (identifiers= (@Indetifier (row=1, coloun=5,"},{"entry":"value=\u201cScreen1 title\u201d))"},{"entry":"\u2003@ScreenNavigation\u2003\u2003\u2003(accessedFrom=SomeMenuScreen.class,"},{"entry":"assignedFields\u2003(fields=\u2003{@AssignField\u2003(name=\u201cmenuSelection\u201d,"},{"entry":"value=\u201c1\u201d), terminalAction=ENTER.class})"},{"entry":"\u2003public class SomeScreen1 {"},{"entry":"\u2003\u2003\u2003@ScreenField (row=2, column=15, displayName=\u201cSome Field1\u201d,"},{"entry":"editable=true)"},{"entry":"\u2003\u2003\u2003private String someField1;"},{"entry":"\u2003\u2003\u2003@ScreenField (row=3, column=15, displayName=\u201cSome Field2\u201d)"},{"entry":"\u2003\u2003\u2003private String someField2;"},{"entry":"\u2003\u2003\u2003private List<SomeTableRecord1> someTableRecords;"},{"entry":"\u2003\u2003\u2003@ScreenTable (startRow=6, endRow=7)"},{"entry":"\u2003\u2003\u2003public static class SomeTableRecord1 {"},{"entry":"\u2003\u2003\u2003\u2003ScreenColumn (startColumn=3, endColumn=4)"},{"entry":"\u2003\u2003\u2003\u2003private Integer column1;"},{"entry":"\u2003\u2003\u2003\u2003ScreenColumn (startColumn=10, endColumn=18)"},{"entry":"\u2003\u2003\u2003\u2003private String column2;"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"\u2003\u20031 3 5 7 9 11 14 17 20.."},{"entry":"\u2003\u2003-----------------------------"},{"entry":"\u20031 | Screen1 title |"},{"entry":"\u20032 | SomeField1: ___ |"},{"entry":"\u20033 | SomeField2: 482 |"},{"entry":"\u20034 | |"},{"entry":"\u20035 | col1 | col2 |"},{"entry":"\u20036 | 12 customer1 |"},{"entry":"\u20037 | 22 customer1 |"},{"entry":"\u2003. -----------------------------"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Exemplary Application Generation Method",{"@attributes":{"id":"p-0101","num":"0100"},"figref":"FIG. 4","b":"400"},"In the depicted exemplary embodiment, method  includes receiving  screen buffers as data inputs. In some exemplary embodiments of the invention, the screen buffers correspond to API  of . Depicted method  also includes rendering  a web\/mobile application comprising pages based upon screen models of the screen buffers. In some exemplary embodiments of the invention, rendering  is performed without pre-generating HTML code. In some exemplary embodiments of the invention, the pages of the web\/mobile application include menus for navigating to other pages. In some exemplary embodiments of the invention, the menus provide access to all other screens buffers, which are accessible from any legacy menu. Alternatively or additionally, in some embodiments the web\/mobile application is in a markup language (e.g. HTML). In some exemplary embodiments of the invention, each screen model of the screen models corresponds to a URL\/API call. Alternatively or additionally, in some embodiments least one screen model of the screen models comprises a widget (e.g.: String presented as textbox, numeric presented as spinner, date presented as calendar, Boolean presented as Checkbox and\/or radio button, List presented as table, enumeration presented as dropdown menu).","In some exemplary embodiments of the invention, method  includes assigning  a URL to each screen model of said web\/mobile application. In some embodiments, assigning a URL makes the web\/mobile application more easily accessible by the application users.","Exemplary Screen Model Types","Many legacy programs have common features which can serve as the basis for screen models. Several of these common features are listed here by way of example","A screen model of a \u201clogin\u201d screen containing fields of type: user, password and error message.","Some screen models contain one or more \u201cmenus\u201d with menu selection field. Some screen models are \u201capplicative\u201d and contain fields with the relevant data type (e.g. string and\/or numeric and\/or Boolean and\/or date and\/or enumeration and\/or list and\/or radio buttons).","In some embodiments, screen models define how they are accessible via a \u201cmenu\u201d screen or other \u201capplicative\u201d screen model, and what assigned fields (to the menu entries).","In some embodiments, screen models a primary key, and defines how to access the screen by key (table drilldown or search).","Alternatively or additionally, in some embodiments screen models contain \u201cactions\u201d definition which defines the possible actions (via F keys).","Alternatively or additionally, in some embodiments a screen model defines one or more \u201cchild\u201d screen models. Each \u201cchild\u201d defines access from the containing (parent) screen.","Once the relevant screen models are loaded into memory, they are organized (for example) as follows: The \u201cLogin\u201d screen model is displayed a predefined login web\/mobile page, corresponding to the 1legacy screen. Remaining screen models are organized as tree model according to their respective accessibility definitions. \u201cApplicative\u201d screen models which are accessible from \u201cmenu\u201d screens are leaves of the tree, and all the menus which are accessible from other menus are nodes. In some embodiments, the root node is the menu which has no accessibility definition.","For each screen model, the system traces its route from the model itself to the root menu using the accessibility definitions, and stores the route in memory, as a navigation hierarchy for the screen model.","In some embodiments, rendering  occurs dynamically using the following rules: The root URL shows a predefined login page (user, password, error, submit). The login page invokes the API, and performs login via the login model. In case the next model is still login, there is a in the form of an error message, in other cases a predefined menu page is displayed. In some embodiments, the predefined menu page contains a fixed side bar menu rendered from the menu tree. According to these embodiments each leaf is displayed as a URL for the model name.","In some embodiments, each link from the menu leads to an auto rendered page. Some of or all of these auto rendered pages are for an \u201capplicative\u201d mode. Applicative models have some or all of the following elements:","a navigation hierarchy show (e.g. on the top of the page) as breadcrumb showing the location in the application;","a fixed side menu allowing direct access to each application screen model;","a tab system indicating child screen models (if any). For example, n some embodiments the 1tab shows the parent model, and the 2and subsequent tabs display child screen models;","a toolbar containing all the model\/s actions for the page (or for each tab if child screen models are present);","auto-displayed graphical panels including a group of neighbor fields of the screen model, defined by the original row and column for each field; and","fields within a panel represented as widgets.","Each action in the toolbar invokes the matching legacy action, and returns a new screen model, which is auto displayed by the system in the same manner.","In some embodiments, a logoff button is provided to disconnect from the legacy program. Alternatively or additionally, in some embodiments of the invention closing of a browser window disconnects from the legacy program.","Exemplary Application Generation System",{"@attributes":{"id":"p-0124","num":"0123"},"figref":"FIG. 5","b":"500"},"Depicted exemplary system  includes an API  stored in class files . In some exemplary embodiments of the invention, storage of class files  is on a hard drive or other memory device.","Depicted exemplary system  also includes a rendering engine  adapted to render a web\/mobile application  comprising pages  (only 1 page is depicted for clarity) including form fields  (only 1 form field is depicted for clarity) corresponding to screen models of API  with each page  having a menu  providing access to other pages . In some exemplary embodiments of the invention, menus  are already present in API . In some embodiments, menu  provides access to all other screens (corresponding to pages ) which are accessible from any legacy menu. Alternatively or additionally, in some embodiments rendering engine  renders said form fields in a markup language (e.g. HTML). Alternatively or additionally, in some embodiments each screen model of said screen models corresponds to a URL\/API call (e.g. login and\/or applicative). Alternatively or additionally, in some embodiments rendering engine  renders at least one of form fields  as a widget.","Exemplary Direct Communication Method",{"@attributes":{"id":"p-0128","num":"0127"},"figref":"FIG. 6","b":"600"},"Depicted exemplary method  includes transmitting  a request from a client device to a mainframe host via an HTTP REST API and receiving  the request at the mainframe host, implementing  the request on a legacy program residing on said host and issuing  a response to the client device. In some exemplary embodiments of the invention, there is no intervening tier or layer between the client device and the mainframe host.","In some exemplary embodiments of the invention, method  includes installing  a REST API service on the mainframe host. In some embodiments, the REST API service employs JSON (JavaScript Object Notation).","Exemplary Direct Communication System",{"@attributes":{"id":"p-0132","num":"0131"},"figref":"FIG. 7","b":"700"},"Depicted exemplary system  includes a mainframe host  comprising a REST API communication service  and running at least one legacy program  and one or more client devices  (one is pictured for clarity) submitting requests  directly to said at least 1 legacy program on said mainframe host without an intervening tier or layer between client device (s)  and mainframe host . In some embodiments, REST API service  employs JSON (JavaScript Object Notation).","In some embodiments, requests  employ JavaScript.","One result of system  and\/or method  is that legacy programs become accessible from standard web browsers operating on computers, tablet devices or mobile communications devices.","It is expected that during the life of this patent many new communications protocols will be developed and the scope of the invention is intended to include all such new technologies a priori.","Although the invention has been described in conjunction with specific embodiments thereof, it is evident that many alternatives, modifications and variations will be apparent to those skilled in the art. Accordingly, it is intended to embrace all such alternatives, modifications and variations that fall within the spirit and broad scope of the appended claims.","Specifically, a variety of numerical indicators have been utilized. It should be understood that these numerical indicators could vary even further based upon a variety of engineering principles, materials, intended use and designs incorporated into the various embodiments of the invention. Additionally, components and\/or actions ascribed to exemplary embodiments of the invention and depicted as a single unit may be divided into subunits. Conversely, components and\/or actions ascribed to exemplary embodiments of the invention and depicted as sub-units\/individual actions may be combined into a single unit\/action with the described\/depicted function.","Alternatively, or additionally, features used to describe a method can be used to characterize an apparatus and features used to describe an apparatus can be used to characterize a method.","It should be further understood that the individual features described hereinabove can be combined in all possible combinations and sub-combinations to produce additional embodiments of the invention. The examples given above are exemplary in nature and are not intended to limit the scope of the invention which is defined solely by the following claims.","Each recitation of an embodiment of the invention that includes a specific feature, part, component, module or process is an explicit statement that additional embodiments not including the recited feature, part, component, module or process exist.","Specifically, the invention has been described in the context of legacy programs hosted on mainframe computers but might also be used in conjunction with applications having a character based interface on older desktop computers.","All publications, references, patents and patent applications mentioned in this specification are herein incorporated in their entirety by reference into the specification, to the same extent as if each individual publication, patent or patent application was specifically and individually indicated to be incorporated herein by reference. In addition, citation or identification of any reference in this application shall not be construed as an admission that such reference is available as prior art to the present invention.","The terms \u201cinclude\u201d, and \u201chave\u201d and their conjugates as used herein mean \u201cincluding but not necessarily limited to\u201d."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In order to understand the invention and to see how it may be carried out in practice, embodiments will now be described, by way of non-limiting example only, with reference to the accompanying figures. In the figures, identical and similar structures, elements or parts thereof that appear in more than one figure are generally labeled with the same or similar references in the figures in which they appear. Dimensions of components and features shown in the figures are chosen primarily for convenience and clarity of presentation and are not necessarily to scale. The attached figures are:",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 1","FIG. 1"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
