---
title: System and method for enabling users to interact in a virtual space
abstract: The present invention provides a highly scalable architecture for a three-dimensional graphical, multi-user, interactive virtual world system. In a preferred embodiment a plurality of users interact in the three-dimensional, computer-generated graphical space where each user executes a client process to view a virtual world from the perspective of that user. The virtual world shows avatars representing the other users who are neighbors of the user viewing the virtual word. In order that the view can be updated to reflect the motion of the remote user's avatars, motion information is transmitted to a central server process which provides positions updates to client processes for neighbors of the user at that client process. The client process also uses an environment database to determine which background objects to render as well as to limit the movement of the user's avatar.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08145998&OS=08145998&RS=08145998
owner: Worlds Inc.
number: 08145998
owner_city: Brookline
owner_country: US
publication_date: 20090319
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OP THE PREFERRED EMBODIMENT"],"p":["This application is a continuation of and claims priority from U.S. patent application Ser. No. 12\/353,218; filed Jan. 13, 2009 which is a continuation of and claims priority from U.S. patent application Ser. No. 11\/591,878, filed Nov. 2, 2006, now U.S. Pat. No. 7,493,558; which is a continuation of and claims priority from U.S. patent application Ser. No. 09\/632,154, filed Aug. 3, 2000, now U.S. Pat. No. 7,181,690; which is a continuation of and claims priority from U.S. patent application Ser. No. 08\/747,420, filed Nov. 12, 1996, now U.S. Pat. No. 6,219,045; which claims priority from U.S. Provisional Patent Application Ser. No. 60\/020,296, filed Nov. 13, 1995. The disclosures of all of the foregoing patent documents are incorporated herein by reference.","The present invention relates to the field of packet communications. More specifically, in one embodiment the invention provides an efficient communications network for client-server networks with large numbers of clients.","A client-server network is a network where one or more servers are coupled to one or more clients over a communications channel. Typically, each server and each client is assigned an address so that each can determine which network messages are directed to it. While such a system may have only one server, it typically has many clients. A server object is one which waits for a request from a client object and then performs some service in response to the client request. A client is an object that makes the request. The designation of a particular object (computer hardware and\/or software process) as a \u201cserver\u201d object or a \u201cclient\u201d object is not fixed. Thus, a given object can be a server for some services and a client of other services.","A typical computer network has one or more file and print servers with a number of clients, where the clients are the desktop computers or workstations of the computer users, all coupled to a high-speed network cable. Client-server communications in such a network are easily handled for several reasons. When clients are not all communicating with the server at once the server need not be designed to handle all the clients at one time. Another reason is that the network traffic is much less than the network capacity furthermore, the clients in a typical computer network need not necessarily be communicating in real-time with the server. However, where many client machines or processes are communicating with each other in real-time through the server, several problems arise.","For example, where a client-server system is used for real-time exchange of information, such as a distributed virtual reality network where users at client machines visually and aurally interact with other users at other client machines, communication is much more difficult, especially where the information is high-bandwidth data such as audio streams, graphic images and image streams. One application of such a client-server system is for game playing, where the positions and actions of each user need to be communicated between all the players to inform each client of the state changes (position, actions, etc.) which occurred at the other clients. The server might maintain global state information and serve as a data server for the clients as they request visual, program and other data as the game progresses.","Some game systems use a peer-to-peer architecture. In a peer-to-peer architecture, a copy of the data which is common to all clients is kept by the client and information which needs to pass between clients is broadcast over the network. This limits the number of clients which can be connected to the network, because the number of messages passing between clients is on the order of the square of the number of clients. With true broadcasting, one message is sent and all clients listen for it, but not all network topologies can handle broadcasts. Where less than all the clients are participating in a game, for example, messages cannot be broadcast because there are clients which should not be receiving the broadcast message. Instead, the broadcast between the players is handled by generating one message to each player client.","This architecture is further limited where the network is not a dedicated network, but is an open network, such as the Internet. As used herein, the term \u201cInternet\u201d refers to the global inter-network of networks which communicates primarily using packets sent according to TCP\/IP (Transport Control Protocol\/Internet Protocol) standards well known in the art of computer intercommunication. With Internet communications, true broadcasting is not even possible because the network's extent is not known or fixed. Thus, messages to all players must be sent as separate messages. An additional problem with Internet communications is that packet delivery is not guaranteed nor is it even as reliable as a dedicated network.","Therefore, what is needed is an efficient system for communication between many client systems over dedicated or open networks to provide graphical interaction between users operating the client systems.","The present invention provides a highly scalable architecture for a three-dimensional graphical, multi-user, interactive virtual world system. In a preferred embodiment a plurality of users interact in the three-dimensional, computer-generated graphical space where each user executes a client process to view a virtual world from the perspective of that user. The virtual world shows avatars representing the other users who are neighbors of the user viewing the virtual word. In order that the view can be updated to reflect the motion of the remote user's avatars, motion information is transmitted to a central server process which provides positions updates to client processes for neighbors of the user at that client process. The client process also uses an environment database to determine which background objects to render as well as to limit the movement of the user's avatar.","A further understanding of the nature and advantages of the inventions herein may be realized by reference to the remaining portions of the specification and the attached drawings.","Although the preferred embodiment of the present invention can be used in a variety of applications, as will be apparent after reading the below description, the preferred embodiment is described herein using the example of a client-server architecture for use in a virtual world \u201cchat\u201d system. In this chat system, a user at each client system interacts with one or more other users at other client systems by inputting messages and sounds and by performing actions, where these messages and actions are seen and acted upon by other clients.  is an example of what such a client might display.","Each user interacts with a client system and the client system is networked to a virtual world server. The client system are desktop computers, terminals, dedicated game controllers, workstations, or similar devices which have graphical displays and user input devices. The term \u201cclient\u201d generally refers to a client machine, system and\/or process, but is also used to refer to the client and the user controlling the client.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["10","10","13","18","18","18","10","10"]},"Each user is free to move his or her avatar around in the virtual world. In order that each user see the correct location of each of the other avatars, each client machine sends its current location, or changes in its current location, to the server and receives updated position information of the other clients.","While  shows two avatars (and implies a third), typically many more avatars will be present. A typical virtual world will also be more complex than a single room. The virtual world view shown in  is part of a virtual world of several rooms and connecting hallways as indicated in a world map panel , and may include hundreds or users and their avatars. So that the virtual world is scalable to a large number of clients, the virtual world server must be much more discriminating as to what data is provided to each clients. In the example of , although a status panel  indicates that six other avatars are present, many other avatars are in the room, but are filtered out for crowd control.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2","b":["20","18","10","20","22","20","24"]},"Typically, but not always, each client  is implemented as a separate computer and one or more computer systems are used to implement virtual world server . As used here, the computer system could be a desktop computer as are well known in the art, which use CPU's available from Intel Corporation, Motorola, SUN Microsystems, Inc., International Business Machines (IBM), or the like and are controlled by operation systems such as the Windows\u00ae program which runs under the MS-DOS operating system available from Microsoft Corporation, the Macintosh\u00ae O\/S from Apple Computer, or the Unix\u00ae operating system available from a variety of vendors. Other suitable computer systems include notebook computers, palmtop computers, hand-held programmable computing devices, special purpose graphical game machines (e.g., those sold by Sony, SEGA, Nintendo, etc.), workstations, terminals, and the like.","The virtual world chat system is described below with reference to at least two hypothetical users, A and B. Generally, the actions of the system are described with reference to the perspective of user A. It is to be understood that, where appropriate, what is said about user A applies to user B, and vice versa, and that the description below also holds for a system with more than two users (by having multiple users A and\/or B). Therefore, where an interaction between user A and user B is described, implied therein is that the interaction could take place just as well with users A and B having their roles reversed and could take place in the same manner between user A and user C, user D, etc. The architecture is described with reference to a system where each user is associated with their own client computer system separate from the network and servers, however a person of ordinary skill in the art of network configuration would understand, after reading this description, how to vary the architecture to fit other physical arrangements, such as multiple users per computer system or a system using more complex network routing structures than those shown here. A person of ordinary skill in the art of computer programming will also understand that where a process is described with reference to a client or server, that process could be a program executed by a CPU in that client or server system and the program could be stored in a permanent memory, such as a hard drive or read-only memory (ROM), or in temporary memory, such as random access memory (RAM). A person of ordinary skill in the art of computer programming will also understand how to store, modify and access data structures which are shown to be accessible by a client or server.","Referring now to , a block diagram is shown of a world system  in which a user A, at a first client system  (client A), interacts with a user B at a second client system  (client B) via a server . Client system  includes several databases, some of which are fixed and some of which are modifiable. Client system  also includes storage for program routines. Mechanisms for storing, reading and modifying data on computers such as client system  are well known in the art, as are methods and means for executing programs and displaying graphical results thereof. One such program executed by client system  is a graphical rendering engine which generates the user's view of the virtual world.","Referring now to , a detailed block diagram of client  used by a user, A is shown. The other clients used by other users are similar to client .","The various components of client  are controlled by CPU . A network packet processor  sends and receives packets over network connection . Incoming packets are passed to a network message processor  which routes the message, as appropriate to, a chat processor , a custom avatar images database , a short object ID lookup table , or a remote avatar position table . Outgoing packets are passed to network packet processor  by network message processor in response to messages received from chat processor , short object ID lookup table  or a current avatar position register .","Chat processor  receives messages which contain conversation (text and\/or audio) or other data received from other users and sends out conversation or other data directed to other users. The particular outgoing conversation is provided to chat processor  by input devices , which might include a keyboard, microphones, digital video cameras, and the like. The routing of the conversation message depends on a selection by user A. User A can select to send a text message to everyone whose client is currently on line (\u201cbroadcast\u201d), to only those users whose avatars are \u201cin range\u201d of A's avatar (\u201ctalk\u201d), or to only a specific user (\u201cwhispering\u201d). The conversation received by chat processor  is typically received with an indication of the distribution of the conversation. For example, a text message might have a \u201cwhisper\u201d label prepended to it. If the received conversation is audio, chat processor  routes it to an audio output device . Audio output device  is a speaker coupled to a sound card, or the like, as is well known in the art of personal computer audio systems. If the received conversation is textual, it is routed to a rendering engine  where the text is integrated into a graphical display . Alternatively, the text might be displayed in a region of display  distinct from a graphically rendered region.","Current avatar position register  contains the current position and orientation of A's avatar in the virtual world. This position is communicated to other clients via network message processor . The position stored in register  is updated in response to input from input devices . For example, a mouse movement might be interpreted as a change in the current position of A's avatar. Register  also provides the current position to rendering. engine , to inform rendering engine  of the correct view point for rendering.","Remote avatar position table  contains the current positions of the \u201cin range\u201d avatars near A's avatar. Whether another avatar is in range is determined a \u201ccrowd control\u201d function, which is needed in some cases to ensure that neither client  nor user A get overwhelmed by the crowds of avatars likely to occur in a popular virtual world.","Server  maintains a variable, N, which sets the maximum number of other avatars A will see. Client  also maintains a variable, N\u2032, which might be less than N, which indicates the maximum number of avatars client  wants to see and\/or hear. The value of N\u2032 can be sent by client  to server . One reason for setting N\u2032 less than N is where client  is executed by a computer with less computing power than an average machine and tracking N avatars would make processing and rendering of the virtual world too slow. Once the number of avatars to be shown is determined, server  determines which N avatars are closest to A's avatar, based on which room of the world A's avatar is in and the coordinates of the avatars. This process is explained in further detail below. If there are less than N avatars in a room which does not have open doors or transparent walls and client  has not limited the view to less than N avatars, A will see all the avatars in the room. Those avatars are thus \u201cneighboring\u201d which means that client  will display them.","Generally, the limit set by server  of N avatars and the limit set by client  of N\u2032 avatars control how many avatars A sees. If server  sets a very high value for N, then the limit set by client  is the only controlling factor. In some cases, the definition of \u201cneighboring\u201d might be controlled by other factors besides proximity. For example, the virtual world might have a video telephone object where A can speak with and see a remote avatar. Also, where N or more unfriendly avatars are in close proximity to A's avatar and they persist in following A's avatar, A will not be able to see or communicate with other, friendly avatars. To prevent this problem, user A might have a way to filter out avatars on other variables in addition to proximity, such as user ID.","In any case, remote avatar position table  contains an entry for each neighboring avatar. That entry indicates where the remote avatar is (its position), its orientation, a pointer to an avatar image, and possible other data about the avatar such as its user's ID and name. The position of the avatar is needed for rendering the avatar in the correct place. Where N\u2032 is less than N, the client also uses position data to select N\u2032 avatars from the N avatars provided by the server. The orientation is needed for rendering because the avatar images are three-dimensional and look different (in most cases) from different angles. The pointer to an avatar image is an index into a table of preselected avatar images, fixed avatar image database , or custom avatar images database . In a simple embodiment, each avatar image comprises M panels (where M is greater than two with eight being a suitable number) and the i-th panel is the view of the avatar at an angle of 360*i\/M degrees. Custom avatar images are created by individual users and sent out over network connection  to other clients  which are neighbors of the custom avatar user.","Short object ID lookup table  is used to make communications over network connection  more efficient. Instead of fully specifying an object, such as a particular panel in a particular room of a world avatar, a message is sent from server  associating an object's full identification with a short code. These associations are stored in short object ID lookup table . In addition to specifying avatars, the short object ID's can be used to identify other objects, such as a panel in a particular room.","Short object ID lookup table  might also store purely local associations. Although not shown in , it is to be understood that connections are present between elements shown and CPU  as needed to perform the operations described herein. For example, an unshown connection would exist between CPU  and short object ID lookup table  to add, modify and delete local short object ID associations. Similarly, CPU  has unshown connections to rendering engine , current avatar position register  and the like.","Client  includes a rooms database , which describes the rooms in the virtual world and the interconnecting passageways. A room need not be an actual room with four walls, a floor and a ceiling, but might be simply a logical open space with constraints on where a user can move his or her avatar. CPU , or a specific motion control process, limits the motion of an avatar, notwithstanding commands from input devices  to do so, to obey the constraints indicated in rooms database . A user may direct his or her avatar through a doorway between two rooms, and if provided in the virtual world, may teleport from one room to another.","Client  also includes an audio compressor\/decompressor  and a graphics compressor\/decompressor . These allow for efficient transport of audio and graphics data over network connection .","In operation, client  starts a virtual world session with user A selecting an avatar from fixed avatar image database  or generating a custom avatar image. In practice, custom avatar image database  might be combined with fixed avatar image database  into a modifiable avatar image database. In either case, user A selects an avatar image and a pointer to the selected image is stored in current avatar position register . The pointer is also communicated to server  via network connection . Client  also sends server  the current position and orientation of A's avatar, which is typically fixed during the initialization of register  to be the same position and orientation each time.","Rooms database  in a fixed virtual world is provided to the user with the software required to instantiate the client. Rooms database  specifies a list of rooms, including walls, doors and other connecting passageways. Client  uses the locations of walls and other objects to determine how A's avatar's position is constrained. Rooms database  also contains the texture maps used to texture the walls and other objects. Avatar database  specifies the bitmaps used to render various predefined avatars provided with the client system. Using rooms database  and the locations, tags and images of all the neighboring avatars, then a view of objects and other avatars in the virtual world can be rendered using the room primitives database and the avatar primitives database.","Instead of storing all the information needed for rendering each room separately, a primitives database can be incorporated as part of rooms database . The entries in this primitives database describe how to render an object (e.g., wall, hill, tree, light, door, window, mirror, sign, floor, road). With the mirrored primitive, the world is not actually mirrored, just the avatar is. This is done by mapping the avatar to another location on the other side of the mirrored surface and making the mirror transparent. This will be particularly useful where custom avatars are created, or where interaction with the environment changes the look of the avatar (shark bites off arm, etc.).","The typical object is inactive, in that its only effect is being viewed. Some objects cause an action to occur when the user clicks on the object, while some objects just take an action when their activating condition occurs. An example of the former is the clickable objects  shown in  which brings up a help screen. An example of the latter is the escalator object. When a user's avatar enters the escalator's zone of control, the avatar's location is changed by the escalator object automatically (like a real escalator).","The avatars in fixed avatar image database  or custom avatar images database  contain entries which are used to render the avatars. A typical entry in the database comprises N two-dimensional panels, where the i-th panel is the view of the avatar from an angle of 360*i\/N degrees. Each entry includes a tag used to specify the avatar.","In rendering a view, client  requests the locations, orientations and avatar image pointers of neighboring remote avatars from server  and the server's responses are stored in remote avatar position table . Server  might also respond with entries for short object ID lookup table . Alternatively, the updates can be done asynchronously, with server  sending periodic updates in response to a client request or automatically without request.","Rendering engine  then reads register , remote avatar position table , rooms database  and avatar image databases as required, and rendering engine  renders a view of the virtual world from the view point (position and orientation) of A's avatar. As input devices  indicate motion, the contents of register  are updated and rendering engine  re-renders the view. Rendering engine  might periodically update the view, or it may only update the view upon movement of either A's avatar or remote avatars.","Chat processor  accepts chat instructions from user A via input devices  and sends conversation messages to server  for distribution to the appropriate remote clients. If chat processor  receives chat messages, it either routes them to audio output device  or to rendering engine  for display.","Input devices  supply various inputs from the user to signal motion. To make movement easier and more natural, client  performs several unique operations. One such operation is \u201csquared forward movement\u201d which makes it easier for the user to move straight. Unlike ordinary mouse movements, where one mouse tick forward results in an avatar movement forward one unit and one mouse tick to the left or right results in side movement of one unit, squared forward movement squares the forward\/backward ticks or takes the square root of the sideways ticks or divides by the number of forward\/backward ticks. For example, if the user moves the mouse F mouse ticks forward, the avatar moves F screen units forward, whereas if the user moves the mouse F mouse units forward and L mouse units to the left, the avatar moves F units forward and L\/F screen units to the left. For covering non-linear distances, (F,L) mouse units (i.e., F forward, L to the side) might translate to (F,L) screen units.","As mentioned above, user input could also be used to signal a desire for interaction with the environment (e.g. clicking on a clickable object). User input could also be used to signal for a viewpoint change (e.g. head rotation without the avatar moving, chat inputs and login\/logout inputs.","In summary, client  provides an efficient way to display a virtual, graphical, three-dimensional world in which a user interacts with other users by manipulating the positions of his or her avatar and sends chat messages to other users.","Network connection  will now be further described. Commonly, network connection  is a TCP\/IP network connection between client  and server . This connection stays open as long as client  is logged in. This connection might be over a dedicated line from client , or might be a SLIP\/PPP connection as is well known in the art of network connection.","The network messages which pass over network connection  between client  and server  are described immediately below briefly, with a more detailed description in Appendix A. Three main protocols exist for messaging between client  and server : 1) A control protocol, 2) a document protocol, and 3) a stream protocol. The control protocol is used to pass position updates and state changes back and forth between client  and server . The control protocol works with a very low bandwidth connection.","The document protocol is used between client  and server  to download documents (text, graphics, sound, etc.) based on Uniform Resource Locators (URLs). This protocol is a subset of the well-known HTTP (Hyper-Text Transport Protocol). This protocol is used relatively sparingly, and thus bandwidth is not as much of a concern as it is with the control protocol. In the document protocol, client  sends a document request specifying the document's URL and server  returns a copy of the specified document or returns an error (the URL was malformed, the requested URL was not found, etc.).","The stream protocol is used to transfer real-time video and audio data between client  and server . Bandwidth is not as much a concern here as it is with the control protocol.","Each room, object, and user in a virtual world is uniquely identified by a string name and\/or numerical identifier. For efficient communications, string names are not passed with each message between client  and server , but are sent once, if needed, and stored in short object ID lookup table . Thereafter, each message referring to an object or a user need only refer to the short object ID which, for 256 or less objects, is only an 8-bit value. Rooms are identified by a unique numerical value contained in two bytes (16 bits).","The control protocol is used by client  to report the location and state information, such a \u201con\u201d and \u201coff\u201d states for a light object or other properties, for user A to server  and is used by server  to send updates to client  for remote avatar position table  and updates of characteristics of other objects in the virtual world environment. Server  also uses the control protocol to update client  on which avatars are in range of A's avatar. To allow for piecemeal upgrading of a virtual world system, client  will not err upon receipt of a message it does not understand, but will ignore such as message, as it is likely to be a message for a later version of client .","Each message is formed into a control packet and control packets assume a very brief form so that many packets can be communicated quickly over a narrowband channel. These control packets are not to be confused with TCP\/IP or UDP packets, although a control packet might be communicated in one or more TCP\/IP or UDP packets or more than one control packet might be communicated in one TCP\/IP packet. The format of a control packet is shown in Table 1.",{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["FIELD","SIZE","DESCRIPTION"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["PktSize","UInt8","Number of bytes in the control"]},{"entry":[{},{},"packet (including Pktsize byte)"]},{"entry":["ObjID","UInt8 (ShortObjID)","Identifies the object to which"]},{"entry":[{},"Ostring (LongObjID)","the command is directed"]},{"entry":["Command","UInt8 + arguments","Describes what to do with the"]},{"entry":[{},{},"object"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":"\u201cUInt8\u201d is an 8-bit unsigned integer. \u201c0string\u201d is a byte containing zero (indicating that a long object identifier is to follow) followed, by a string (which is defined to be a byte containing the size of the string followed by the characters of the string). Each control packet contains one command or one set of combined commands. The ObjID field is one of two formats: either a ShortObjID (0 to 255) or a LongObjID (a string). The ObjID field determines which object in the client's world will handle the command. Several ShortObjID values are preassigned as shown in Table 2."}},{"@attributes":{"id":"p-0057","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["ShortObjID","Object"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","A short ObjID of 0 indicates"]},{"entry":[{},"that a Long ObjID follows"]},{"entry":["1","The Client's Avatar"]},{"entry":["254","CO\u2014Combine Object"]},{"entry":["255","PO\u2014Protocol Object"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The other ShortObjID values are assigned by server  to represent objects in the virtual world. These assignments are communicated to client  in a control packet as explained below. The assignments are stored by client  in short object ID lookup table . The ShortObjID references are shorthand for an object which can also be referenced by a LongObjID.","When commands are directed at the CO object (ShortObjID=254), those commands are interpreted as a set of more than one command. When commands are directed at the PO object, the command applies to the communications process itself. For example, the REGOBJIDCMD command, which registers an association between a ShortObjID and a LongObjID, is directed at the PO object. Upon receipt of this command, client  registers the association in the short object ID lookup table.","A command takes the form of a command type, which is a number between 0 and 255, followed by a string of arguments as needed by the particular command.","The CO object is the recipient of sets of commands. One use of a set of commands is to update the positions of several avatars without requiring a separate control packet for each avatar, thus further saving network bandwidth. The form of the command is exemplified by the following command to move objects 2 and 4 (objects 2 and 4 are remote avatars):\n\n","In the above control packet, \u201cS>C\u201d indicates the direction of the packet (from server to client), CO is the object, SHORTLOCCMD is the command type, and the command type is followed by three abbreviated commands. The above control packet requires only fifteen bytes: one for packet size (not shown), one for the CO object ID, one for the command type and twelve for the three abbreviated commands. Note that the \u201cS>C\u201d indicator is not part of the control packet. The position of the boundaries between commands (indicated above with brackets, which are not actually communicated) is inferred from the fact that the SHORTLOCCMD command type requires four byte-wide arguments. Each abbreviated command in a command set is the same size, for easy parsing of the commands by the CO. Examples of abbreviated commands for which a CO command is useful are the Teleport, Appear, Disappear, and ShortLocation commands. These commands, and other commands, are described in more detail in Appendix A. Appendix A also shows the one byte representation of SHORTLOCCMD as well as the one byte representations of other command types. The contents of control packets described herein are shown in a readable form, however when transmitted over network connection , the control packets are compacted using the values shown in Appendix A.","The following examples show various uses of control packets. In the following sequences, a line beginning with \u201cS>C\u201d denotes a control packet sent from server  to client , which operates user A's avatar and interacts with user A. Similarly, a line beginning with \u201cC>S\u201d denotes a control packet sent from client  to server . Note that all of the lines shown below omit the packet size, which is assumed to be present at the start of the control packet, and that all of the lines are shown in readable format, not the compact, efficient format discussed above and shown in Appendix A.","The following is a control packet for associating ShortObjIDs with Long Object names:\n\n","The following is a control packet containing a chat message:\n\n","From user A's point of view, avatars will appear and disappear from A's view in a number of circumstances. For example, avatars enter and leave rooms and move in and out of visual range (as handled by crowd control rules described below). Avatars also teleport from room to room, which is different than moving in and out of rooms. Client  will send server  the following location and\/or room change commands under the circumstances indicated:\n\n","Two methods exist for updating the position of an actor (avatar). The LONGLOCCMD method uses full absolute position (X, Y, and Z) and orientation. The SHORTLOCCMD only updates the X and Y coordinates and the orientation. In addition, the short method limits the change in position to plus or minus 127 in the X and\/or Y coordinates and\/or +\/\u2212127 in the orientation. Client  sends a LONGLOCCMD to server  to update the client's position. Whenever possible, server  uses the combined SHORTLOCCMD to update all of the visible avatars at once. If an avatar has moved too great a distance, or has moved in the Z direction, server  then uses a LONGLOCCMD for that avatar.","The following is an example of a control packet sent from client  to server  to update user A's location:\n\n","The Server often uses the combined short location update command. This command concatenates several ShortLocationCommands. Rather than sending a command to each of the objects in question, a single combined command is sent to the combine object (CO). This object takes the command and applies it to a list of truncated commands. The truncated commands contain a ShortObjID reference to the object to be moved and a change in the X and Y positions and orientation. If server  wants to update the positions of objects ,  and , it would send the following:\n\n","When user A changes rooms by walking through a door, a RoomChangeCommand control packet is sent by client  to server  to inform server  that the room change occurred.\n\n","The first argument is the ObjID of the avatar that is leaving the room, the second argument is the command type (room change), and the third argument is the room that the avatar is entering. The next three arguments are the X, Y and Z positions at which to place the avatar in the room. The last argument is the direction the actor is facing (orientation). Note that the first argument is always the ObjID for the local avatar, CLIENT=1.","When user A teleports from one room to another, the is TeleportCommand is sent by client  to server  to inform server  that the teleport occurred. The method of leaving the room and entering the new one is sent to server . This allows server  to inform other clients to display explosions or clouds, smoke or other indications of the teleportation appearance\/disappearance of the avatar. The teleport command is as follows:\n\n","Client  is responsible for implementing some sort of caching mechanism for actors. When client  receives a TeleportCommand or AppearCommand for an avatar that is appearing, it must first determine if it currently has information for the specified object cached. If not, client  can issue a request for any needed information pertaining to the object. Suppose client  receives the following command specifying that \u201cMitra\u201d has arrived at room :\n\n","Crowd control is one of the tougher problems solved by the present system. Crowd control is handled using a number of commands. In a typical situation, the number of avatars in a room is too large to be handled by client  and displayed on display . The maximum number of avatars, N, is determined by server , but might also be determined for each client.","Server  addresses this problem by maintaining, for each user, a list of the N avatars nearest to the location of that user's avatar. This list may be managed by the server in any of a number of ways. When an avatar (B, for example) is removed from another user's (C, for example) list because avatar B can no longer be seen by C (i.e., B is no longer one of the N nearest avatars), Server  sends a DISAPPEARACTORCMD to the object for avatar B on client C. This occurs as a consequence of client B changing rooms with a ROOMCHANGECMD or TELEPORTCMD, or due to crowd control.","Client  does not necessarily delete an entry from remote avatar lookup table  or short object ID lookup table  if a remote avatar disappears, but just marks it as being non-visible. In some cases, a user can see another user's avatar, but that other user cannot see the first user's avatar. In other words, visibility is not symmetric. However, chat exchange is symmetric, i.e., a user can only talk to those who can talk to the user.","When A's avatar is to be added to user B's lists when A becomes visible to B by reason of movement, room change, crowd control, or the like, server  (more precisely the protocol object PO on server ) sends a REGOBJIDCMD control packet to the PO of B's client  and B's client  will add the association of Ads avatar with a short object ID to short object ID lookup table . Server  also sends an APPEARACTORCMD control packet to A's client giving the room and location of B. If A's client  does not have the appropriate information cached for B, A's client  sends a PropertyRequestCommand control packet to server  asking for the properties of B, such as the bitmap to use to display B's avatar. Server  will return the requested information, which it might need to obtain from B's client . For example, the control packet:\n\n","The server  shown in  will now be described. Server  comprises generally a network layer , protocol objects , user objects , room objects . In an object oriented software embodiment of the invention, each of these objects and layers are implemented as objects with their specific methods, data structures and interfaces. Where server  is implemented on a hardware running the Unix operating system, these objects might be objects in a single process or multiple processes. Where server  is implemented on hardware running the Windows(tm) operating system alone or in combination with the MS-DOS operating system or the like, the layers and objects might be implemented as OLE (Object Linking and Embedding) objects.","One protocol object  and one user object  are instantiated for each user who logs into server . Network layers  accepts TCP\/IP connections from clients . A socket is opened and command buffers are allocated for each client . Network layer  is responsible for instantiating a protocol object  for each TCP\/IP socket established. This layer handles the sending and receiving of packets, such as control packets, document packets and stream packets, over the network. All sockets are examined by server  on a periodic basis; completed control packets received from a client  are processed by server , and outgoing control packets to a client  which are pending are sent.","Protocol object  handles translation of internal messages to and from the cryptic and compressed form of the control packets which are sent over network connection , as explained in Appendices A and B. Protocol object  handles all session initialization and authentication for its client , and is responsible for instantiating a user object  for authenticated users.","User object  tracks the location of its user's avatar, which includes at least the room in which the user is located, the user's coordinates in the room and the user's orientation in that room. User object  also maintains a list of the N nearest neighboring remote avatars (i.e., avatars other than the avatar for the user object's client\/user) in the room. This list is used to notify the user object's client  regarding changes in the N closest remote avatars and their locations in the room. The list is also used in disseminating text typed by the user to only those users nearest him or her in the room. This process of notifying client  of only the N nearest neighbors is handled as part of crowd control.","One room object  is instantiated for each room in rooms database  and the instantiation is done when server  is initialized. Alternatively, room objects can be instantiated as they are needed. As explained above, the term \u201croom\u201d is not limited to a visualization of a typical room, but covers any region of the virtual world which could be grouped together, such as the underwater portion of a lake, a valley, or a collection of streets. The room object for a specific room maintains a list of the users currently located in that room. Room object  periodically analyzes the positions of all users in the room using a cell-based algorithm, and sends a message to each user object  corresponding to those users in the room, where the message notifies the user object of its user's N nearest neighbors.","Periodically, the locations of the users in each room are examined and a square two-dimensional bounding box is placed around the users' current locations in the room. This square bounding box is then subdivided into a set of square cells. Each user is placed in exactly one square. Then, for each user, the cells are scanned in an outwardly expanding wave beginning with the cell containing the current user of interest, until at least N neighbors of that user are found. If more than N are found, the list of neighbors is sorted, and the closest N are taken.","One or more world object  may be instantiated at the time server  is started. The world object maintains a list of all the users currently in the world and communicates with their user objects . The world object also maintains a list of all the rooms in the world and communicates with the room objects  for those rooms. The world object periodically initiates the analysis of user positions in each room and subsequent updating of avatar information to clients (). In addition, the world object periodically initiates the collection of statistics on usage (for billing, study of which rooms are most popular, security logs, etc.) which are logged to a file.","Server  also has a rooms\/world database  which is similar to the rooms\/world database  in client . Server  does not need the primitives databases because there is no display needed at the server. Server  does, however, include a user state database , which maintains state information on each user, such as address, log-in time, accounting information, etc.","Several interconnections are shown in . Path  between a protocol object  and a user object  carries messages between a client  and the user object  representing that client (before or after having been translated by a protocol object ). Typical messages from the client to the user object include:\n\n","Typical messages from the user object to the client are:\n\n","The path  between a client  and a user object  other than its own user object  is used to send whispers from user to user. Path  is used for internal messages sent directly between user objects . Messages taking this path typically go from a given user to those users who are among its N nearest neighbors. Typical messages include:\n\n","Path  is used for messages between a user object  and a room object . User objects  communicate their location to the room  they are currently in. Periodically, the room object will notify the user object of the identities and locations of the users' N nearest neighbors. Messages from the user object to the room include:\n\n","The only message that passes from the room object to a user object is the one that notifies the user of its N nearest neighbors. Path  is used for communications between protocol objects and world object . Protocol object  can query world object  regarding the memory address (or functional call handle) of the user object  representing a given user in the system. This is the method that is used to send a whisper message directly from the protocol object to the recipient user object. Path  is used for communications between user object  and world object  to query the world object regarding the memory address or function call handle of the room object  representing a given room in the world. This is required when a user is changing rooms.  is an illustration of the penguin avatar rotated to various angles.","The above description is illustrative and not restrictive. Many variations of the invention will become apparent to those of skill in the art upon review of this disclosure. The scope of the invention should, therefore, be determined not with reference to the above description, but instead should be determined with reference to the appended claims along with their full scope of equivalents.",{"@attributes":{"id":"p-0092","num":"0146"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"APPENDIX A"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Client\/Server Control Protocol Commands (in BNF)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003Valid CommandTypes are integers between 0 and 255. Several of"},{"entry":"these are shown below as part of the BNF (Backus-Nauer Format) "},{"entry":"description of the command structures. Per convention, words starting "},{"entry":"with uppercase characters are non-terminals while those in quotes or in "},{"entry":"lowercase are terminal literals."},{"entry":"Basics"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["a | b","= Either a or b."]},{"entry":["\u201cabc\u201d","= The exact string of characters a, b and c in the order shown."]},{"entry":["a+","= One or more occurrences of a."]},{"entry":["a*","= Zero or more occurrences of a."]},{"entry":["10","= A number 10. In the ASCII protocol, this is the ASCII"]},{"entry":[{},"string \u201c10\u201d, in the binary, form, it is a byte with a value of"]},{"entry":[{},"10."]},{"entry":["N..M","= A numerical range from N to M."]},{"entry":[{},"\u2003\u2003Equivalent to: N | N+1 | N+2 | ... | M\u22121 | M"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Command Structures",{}]},{"entry":["Packet","= PktSize Message"]},{"entry":["PktSize","= UInt8 (size includes PktSize field)"]},{"entry":["Message","= ObjID Command"]},{"entry":["ObjID","= LongObjID | ShortObjID"]},{"entry":["LongObjID","= 0String"]},{"entry":["ShortObjID","= UInt8"]},{"entry":["Command","= CommandType CommandData"]},{"entry":["CommandType","= UInt8"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"[Other commands might be added to these:]"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Command","= LongLocationCommand"]},{"entry":[{},"| ShortLocationCommand"]},{"entry":[{},"| StateCommand"]},{"entry":[{},"| PropertyCommand"]},{"entry":[{},"| PropertyRequestCommand"]},{"entry":[{},"| CombinedCommand"]},{"entry":[{},"| RoomChangeCommand"]},{"entry":[{},"| SessionInitCommand"]},{"entry":[{},"| SessionExitCommand"]},{"entry":[{},"| ApplicationInitCommand"]},{"entry":[{},"| ApplicationExitCommand"]},{"entry":[{},"| DisappearActorCommand"]},{"entry":[{},"| AppearActorCommand"]},{"entry":[{},"| RegisterObjIdCommand"]},{"entry":[{},"| TeleportCommand"]},{"entry":[{},"| TextCommand"]},{"entry":[{},"| ObjectInfoCommand"]},{"entry":[{},"| LaunchAppCommand"]},{"entry":[{},"| UnknownCommand"]},{"entry":[{},"| WhisperCommand"]},{"entry":[{},"| StateRequestCommand"]},{"entry":["TeleportCommand","= TELEPORTCMD NewRoom ExitType "]},{"entry":["Location","EntryType"]},{"entry":["RoomChangeCommand","= ROOMCHNGCMD NewRoom Location"]},{"entry":["LongLocationCommand","= LONGLOCCMD Location"]},{"entry":["DisappearActorCommand","= DISAPPEARACTORCMD"]},{"entry":["AppearActorCommand","= APPEARACTORCMD NewRoom "]},{"entry":[{},"Location"]},{"entry":["Location","= X Y Z Direction"]},{"entry":["X, Y, Z, Direction","= SInt16"]},{"entry":["StateCommand","= STATECMD SetFlags ClearFlags"]},{"entry":["SetFlags, ClearFlags","= UInt32"]},{"entry":["PropertyCommand","= PROPCMD Property+"]},{"entry":["PropertyRequestCommand","= PROPREQCMD VariableID*"]},{"entry":["StateRequestCommand","= STATEREQCMD"]},{"entry":["Property","= VariableID VariableValue"]},{"entry":["VariableID","= ShortVariableId | LongVariableId"]},{"entry":["ShortVariableId","= UInt8"]},{"entry":["LongVariableId","= 0String"]},{"entry":["VariableValue","= String"]},{"entry":["ShortLocationCommand","= SHORTLOCCMD DeltaX DeltaY "]},{"entry":[{},"DeltaO"]},{"entry":["DeltaX, DeltaY","= SByte"]},{"entry":["DeltaO","= SByte (plus 128 to \u2212128 degrees)"]},{"entry":["CombinedCommand","= CombinedLocationCommand"]},{"entry":[{},"| CombinedAppearCommand"]},{"entry":[{},"| CombinedTeleportCommand"]},{"entry":[{},"| CombinedDisappearCommand"]},{"entry":[{},"| UnknownCombinedCommand"]},{"entry":["CombinedLocationCommand","= SHORTLOCCMD "]},{"entry":[{},"AbbrevLocCommand+"]},{"entry":["AbbrevLocCommand","= ShortObjID DeltaX DeltaY DeltaO"]},{"entry":["CombinedAppearCommand","= APPEARACTORCMD "]},{"entry":[{},"AbbrevAppearCommand+"]},{"entry":["AbbrevAppearCommand","= ShortObjID NewRoom Location"]},{"entry":["CombinedDisappearCommand","= DISAPPEARACTORCMD "]},{"entry":[{},"AbbrevDisappearCommand+"]},{"entry":["AbbrevDisappearCommand","= ShortObjID"]},{"entry":["CombinedTeleportCommand","= TELEPORTCMD "]},{"entry":[{},"AbbrevTeleportCommand+"]},{"entry":["AbbrevTeleportCommand","= ShortObjID NewRoom ExitType"]},{"entry":[{},"EntryType Location"]},{"entry":["[for now:]",{}]},{"entry":["UnknownCombinedCommand","= 0..3, 5..10, 13..17, 19..255"]},{"entry":["NewRoom","= UInt16"]},{"entry":["ExitType, EntryType","= UInt8"]},{"entry":["SessionInitCommand","= SESSIONINITCMD Property+"]},{"entry":["SessionExitCommand","= SESSIONEXITCMD Property+"]},{"entry":["ApplicationInitCommand","= APPINITCMD Property+"]},{"entry":["ApplicationExitCommand","= APPEXITCMD Property+"]},{"entry":["RegisterObjIdCommand","= REGOBJIDCMD String ShortObjID"]},{"entry":["TextCommand","= TEXTCMD ObjID String"]},{"entry":["WhisperCommand","= WHISPERCMD ObjID String"]},{"entry":["LaunchAppCommand","= LAUNCHAPPCMD String"]},{"entry":["[for now:]",{}]},{"entry":["UnknownCommand","= 0, 15, 20..255"]},{"entry":["String","= StringSize Char*"]},{"entry":["StringSize","= UInt8 (size of string EXCLUDING "]},{"entry":[{},"StringSize field)"]},{"entry":["Char","= C datatype char"]},{"entry":["UInt32","= 0..4294967299 (32-bit unsigned)"]},{"entry":["SInt32","= \u22122147483650..2147483649"]},{"entry":[{},"(32-bit signed value)"]},{"entry":["UInt16","= 0..65535 (16-bit unsigned value)"]},{"entry":["SInt16","= \u221232768..32767 (16-bit signed value)"]},{"entry":["UInt8","= 0..255 (8-bit unsigned value)"]},{"entry":["SByte","= \u2212128..127 (8-bit signed value)"]},{"entry":["LONGLOCCMD","= 1"]},{"entry":["STATECMD","= 2"]},{"entry":["PROPCMD","= 3"]},{"entry":["SHORTLOCCMD","= 4"]},{"entry":["ROOMCHNGCMD","= 5"]},{"entry":["SESSIONINITCMD","= 6"]},{"entry":["SESSIONEXITCMD","= 7"]},{"entry":["APPINITCMD","= 8"]},{"entry":["APPEXITCMD","= 9"]},{"entry":["PROPREQCMD","= 10"]},{"entry":["DISAPPEARACTORCMD","= 11"]},{"entry":["APPEARACTORCMD","= 12"]},{"entry":["REGOBJIDCMD","= 13"]},{"entry":["TEXTCMD","= 14"]},{"entry":["LAUNCHAPPCMD","= 16"]},{"entry":["WHISPERCMD","= 17"]},{"entry":["TELEPORTCMD","= 18"]},{"entry":["STATEREQCMD","= 19"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CLIENT","= 1"]},{"entry":["CO","= 254"]},{"entry":["PO","= 255"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0093","num":"0147"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"APPENDIX B"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Additional Control packet Examples"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"B.1. State and Property Changes"},{"entry":"\u2003\u2003State changes change a string of boolean values. Either the"},{"entry":"Client or the Server can send these. Each object can have up to 32"},{"entry":"different state values. These are represented as bits in a bit string."},{"entry":"If the Client wants to set bit 3 of the state variable of an object, 137,"},{"entry":"it sends the following:"},{"entry":"\u2003C>S\u2003137\u2003STATECMD\u20034\u20030"},{"entry":"In binary (given as hexadecimal) this is:"},{"entry":"\u2003C>S 89\u200302 00000004 00000000"},{"entry":"\u2003\u2003Properties take more possible values than states. Similar to"},{"entry":"state variables, properties are referenced in order. Variables may be"},{"entry":"represented as a predefined ID (counting from 1) or by an arbitrary"},{"entry":"string."},{"entry":"\u2003\u2003Assuming that the Client has changed its local copy of a"},{"entry":"variable (with the tag 6) in object 23. It would send a command to the"},{"entry":"Server as follows:"},{"entry":"\u2003C>S 23\u2003PROPCMD\u20036\u2003\u201ca new value\u201d"},{"entry":"\u2003\u2003The variable ID is a predefined shorthand name for a variable"},{"entry":"name. These names are predefined and hardcoded into the Client. They"},{"entry":"generally can't be changed without changing the Client executable. An old"},{"entry":"Client that sees a variable ID it does not know must ignore the command."},{"entry":"\u2003\u2003Some variables will always be defined, \u201cbitmap\u201d for example."},{"entry":"These are defined in a fixed manner at the Client level. The Client will"},{"entry":"simply send these variable IDs to the Server which will transparently pass"},{"entry":"them on to other Clients."},{"entry":"The currently defined variable IDs are:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["VAR_APPNAME","= 1 \/\/ Name of Application to run"]},{"entry":["VAR_USERNAME","\u2003\u2003= 2 \/\/ User's id."]},{"entry":["VAR_PROTOCOL","\u2003\u2003= 3 \/\/ Version of protocol used by client (int)"]},{"entry":["VAR_ERROR","\u2003\u2003= 4 \/\/ Used in error returns to give error type"]},{"entry":["VAR_BITMAP","= 5 \/\/ Filename of Bitmap"]},{"entry":["VAR_PASSWORD","\u2003\u2003= 6 \/\/ User's password"]},{"entry":["VAR_ACTORS","= 7 \/\/ Suggested # of actors to show client (N)"]},{"entry":["VAR_UPDATETIME","\u2003\u2003= 8 \/\/ Suggested update interval (* 1\/10 sec.)"]},{"entry":["VAR_CLIENT","= 9 \/\/ Version of the client software (int)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"The client can request the values for one or more properties with the"},{"entry":"PROPREQCMD:"},{"entry":"\u2003C>S \u201cFred\u201d PROPREQCMD VAR_BITMAP"},{"entry":"\u2003S>C \u201cFred\u201d PROPCMD VAR_BITMAP \u201cskull.bmp\u201d"},{"entry":"A PROPREQCMD with no parameters will result in a PROPCMD being "},{"entry":"returned containing all the properties of the object the request was sent to."},{"entry":"If a PROPREQCMD is made with a request for a property that doesn't exist,"},{"entry":"an empty PROPCMD will be returned."},{"entry":"A STATEREQCMD requests the Server to respond with the current state."},{"entry":"B.2. Beginning and Exiting Sessions"},{"entry":"To begin a session, the Client requests a connection from the Server."},{"entry":"After the connection has been established, the Client sends a"},{"entry":"SessionInitCommand."},{"entry":"The SeasionInitCommand should contain the User's textual name "},{"entry":"(preferably, this textual name is unique across all applications) and the "},{"entry":"version of the protocol to be used. For example, the User named \u201cBo\u201d has "},{"entry":"established a connection and would now like to initiate a session."},{"entry":"C>S CLIENT SESSIONINITCMD VAR_USERNAME \u201cBo\u201d "},{"entry":"VAR_PROTOCOL \u201c11\u201d"},{"entry":"Currently defined variables for the SessionInitCmd are:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["VAR_USERNAME","The account name of the user"]},{"entry":["VAR_PASSWORD","User password (preferably a plain text string)"]},{"entry":["VAR_PROTOCOL","The protocol version (int)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"VAR_CLIENT\u2003Version of the client software being used (int)"},{"entry":"Note that the protocol defines the value as a string, but the (int)"},{"entry":"comment is a constraint on the values that may be in the string."},{"entry":"The Server will send an ack\/nak indicating the success of the request. An"},{"entry":"ack will take the form:"},{"entry":"\u2003S>C CLIENT SESSIONINITCMD VAR_ERROR 0"},{"entry":"A nak will take the form:"},{"entry":"\u2003S>C CLIENT SESSIONINITCMD VAR_ERROR 1"},{"entry":"where the value of VAR_ERROR indicates the nature of the problem."},{"entry":"Currently defined naks include:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003* ACK","\u20020","It's OK"]},{"entry":["\u2003* NAK_BAD_USER","\u20021","User name already in use"]},{"entry":["\u2003* NAK_MAX_ORDINARY","\u20022","Too many ordinary users"]},{"entry":["\u2003* NAK_MAX_PRIORITY","\u20023","Too many priority users"]},{"entry":["\u2003* NAK_BAD_WORLD","\u20024","World doesn't exist"]},{"entry":["\u2003* NAK_FATAL","\u20025","Fatal error (e.g. can't instantiate "]},{"entry":[{},{},"user)"]},{"entry":["\u2003* NAK_BAD_PROTOCOL","\u20026","Client running old or wrong protocol"]},{"entry":["\u2003* NAK_BAD_CLIENTSW","\u20027","Client running old, or wrong version"]},{"entry":["\u2003* NAK_BAD_PASSWD","\u20028","Wrong password for this user"]},{"entry":["\u2003* NAK_CALL_BILLING","\u20029","Access denied, call billing"]},{"entry":["\u2003* NAK_TRY_SERVER","10","Try different server"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"B.3. Beginning and Exiting Application"},{"entry":"\u2003\u2003To begin an application, the Client must have already"},{"entry":"established a session via the SessionInitcommand. To begin an"},{"entry":"application, the Client sends an ApplicationInitCommand specifying the"},{"entry":"desired application:"},{"entry":"\u2003C>S CLIENT APPINITCMD VAR_APPNAME \u201cStarBright\u201d"},{"entry":"The Server will respond with an ack\/nak to this command using the same"},{"entry":"technique discussed under session initialization."},{"entry":"B.4. Launching an Outside Application"},{"entry":"\u2003\u2003The Server may tell the Client to launch an outside"},{"entry":"application by sending the LaunchAppCommand to the Protocol Object. For"},{"entry":"example:"},{"entry":"\u2003S>C PO LAUNCHAPPCMD \u201cProshare\u201d"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
