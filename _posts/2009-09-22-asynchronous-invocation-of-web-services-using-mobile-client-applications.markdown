---
title: Asynchronous invocation of web services using mobile client applications
abstract: Implementations of the present disclosure provide methods of invoking a web service using a mobile client. In some implementations, a method includes defining a correlation between a plurality of input components of an application that is executed on the mobile client and a plurality of parameters of a web service application, generating a text file based on the correlation, storing the text file in memory of the mobile client, generating an invocation message at the mobile client based on the text file and a user input, and transmitting the invocation message to a server to invoke the web service application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08725847&OS=08725847&RS=08725847
owner: SAP AG
number: 08725847
owner_city: Walldorf
owner_country: DE
publication_date: 20090922
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["As mobile technologies develop, a number of new web services can be provided to mobile device users. Web services can be developed and provided to mobile devices using various techniques. For example, a developer can employ a development environment (e.g., NetBeans IDE) which can provide a number of wizards to create mobile client applications for consuming web services. In another example, a developer can generate and deploy Simple Object Access Protocol (SOAP) messages to access one or more web services.","Mobile application developers can use invocation codes to link mobile clients to web services. Service invocation codes typically define how to map client\/server input and output data to web service response data. Specifically, the service invocation codes may refer to both mapping client side inputs to input parameters of operations of web services, and mapping responses of operations of web services to client side outputs.","Implementations of the present disclosure provide computer-implemented methods of asynchronously invoking web services. In some implementations, a method includes receiving a correlation between a plurality of input components of an application that is executed on the mobile client and a plurality of parameters of a web service application, generating a text file based on the correlation, storing the text file in memory of the mobile client, generating an invocation message at the mobile client based on the text file and a user input, and transmitting the invocation message to a server to invoke the web service application.","In some implementations, the method further includes receiving a response message from the server at the mobile client, and generating an output to a user at the mobile client based on the response message and the text file.","In some implementations, the method further includes storing the text file in memory of the server, receiving the invocation message at the server, and generating a protocol message at the server based on the invocation message and the text file, the web service application being invoked based on the protocol message.","In some implementations, the method further includes storing the text file in memory of the server, receiving a protocol message at the server, the protocol message having been generated by the web service application, generating a response message at the server based on the protocol message and the text file, and transmitting the response message to the mobile client.","In some implementations, the method further includes executing a parser on the mobile client, and processing the user input using the parser, the parser accessing the text file and generating the invocation message.","In some implementations, the method further includes storing the text file in memory of the server, executing a parser on the server, and processing the invocation message using the parser, the parser accessing the text file and generating a protocol message to invoke the web service application.","In some implementations, the method further includes modifying the correlation between the plurality of input components and the plurality of parameters, generating a revised text file based on the correlation, and storing the revised text file in memory of the mobile client, wherein a subsequent invocation message is generated at the mobile client based on the revised text file and a user input.","Implementations of the present disclosure further provide a computer-readable storage medium coupled to one or more processors and having instructions stored thereon which, when executed by the one or more processors, cause the one or more processors to perform operations in accordance with implementations of the methods provided herein.","Implementations of the present disclosure also provide a system including a mobile client and a server. The mobile client and the server are operable to perform operations in accordance with implementations of the methods provided herein.","The details of one or more implementations of the present disclosure are set forth in the accompanying drawings and the description below. Other features and advantages of the present disclosure will be apparent from the description and drawings, and from the claims.","Like reference symbols in the various drawings indicate like elements.","Referring now to , a schematic illustration of an exemplar network architecture  is provided. The architecture  can, for example, manage the deployment of web services on one or more mobile clients  or other computing devices. Managing the deployment of web services may include facilitating mobile client applications to asynchronously invoke web services on one or more mobile client devices. The architecture  can employ structure to define correlations between a number of input components of an application executed on a mobile client , for example, and one or more parameters of a web service application running on a server .","At a high level, the architecture  may represent a distributed client\/server system supporting multiple computer systems and\/or mobile clients , and\/or one or more servers  that are connectively coupled for communication with one another over a network . In some implementations, the architecture  may store some data at a relatively central location (e.g., accessible over a WAN), while concurrently maintaining local data on mobile client  for redundancy and to allow processing during downtime. In other implementations, architecture  may be in a dedicated enterprise environment\u2014across a local area network (over LAN) or subnet\u2014or any other suitable environment without departing from the scope of the present disclosure.","The mobile client  is intended to represent various forms of processing devices including, but not limited to, a handheld computer, a personal digital assistant (PDA), a cellular telephone, a network appliance, a camera, a smart phone, an enhanced general packet radio service (EGPRS) mobile phone, a media player, a navigation device, an email device, a game console, or a combination of any two or more of these data processing devices or other data processing devices.","The mobile client device  can include processors, memory, input\/output devices such as a display , communication interfaces, and transceivers, among other components. For example, the mobile client device  can be provided with a keyboard, touch-screen and\/or stylus to enable user input to the device. The device  may also be provided with a storage device, such as a microdrive or other device, to provide additional storage. Components within device  are generally interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate.","Processors (not shown) in mobile client  can process instructions for execution within the mobile client , including instructions stored in memory. The processors may also include separate analog and digital processors. The processors may provide, for example, for coordination of the other components of the device , such as control of user interfaces, applications run by device , and wireless communication by device .","Processors may communicate with a user through a control interface and display interface coupled to a display . The display  may be, for example, a TFT LCD display or an OLED display, or other appropriate display technology. The display interface may include appropriate circuitry for driving the display  to present graphical and other information to a user.","The mobile client device  can present one or more graphical user interfaces on the display . The graphical user interfaces provide the user access to various system objects and convey information to the user. In some implementations, the graphical user interface can include one or more selectable entities. Example selectable entities may include device functions, applications, windows, files, alerts, events, or other selectable entities.","The display  can implement liquid crystal display (LCD) technology, light emitting polymer display (LPD) technology, or some other display technology. The display  can be sensitive to haptic and\/or tactile contact with a user. In some implementations, the display  can include a multi-touch-sensitive display. The multi-touch-sensitive display  can, for example, process multiple simultaneous touch points, including processing data related to the pressure, degree, and\/or position of each touch point. Such processing facilitates gestures and interactions with multiple fingers, chording, and other interactions.","The mobile client device  may include memory (not shown) for storing information within the mobile client . In some implementations, memory is a computer-readable storage medium. In some implementations, the memory is a volatile memory unit or units. In another implementation, the memory is a non-volatile memory unit or units. Expansion memory may also be provided and connected to device  through an expansion interface, which may include, for example, a SIMM card interface. Such expansion memory  may provide extra storage space for device , or may also store applications or other information for device .","The mobile client device  may communicate wirelessly through a communication interface (not shown), which may include digital signal processing circuitry where necessary. The communication interface may provide for communications under various modes or protocols, such as GSM voice calls, SMS, EMS, or MMS messaging, CDMA, TDMA, PDC, WCDMA, CDMA2000, or GPRS, among others. Such communication may occur, for example, through a radio-frequency transceiver (not shown). In addition, short-range communication may occur, such as using a Bluetooth, WiFi, or other such transceiver.","The mobile client  can include one or more input\/output (I\/O) devices and\/or sensor devices. For example, a speaker and a microphone can be included to facilitate voice-enabled functionalities, such as phone and voice mail functions. In some implementations, the mobile client  may include circuitry and sensors for supporting a location determining capability, such as that provided by the global positioning system (GPS) or other positioning systems (e.g., systems using Wi-Fi access points, television signals, cellular grids, Uniform Resource Locators (URLs)). In some implementations, a positioning system (e.g., a GPS receiver) can be integrated into the mobile client  or provided as a separate device that can be coupled to the mobile client  through an interface to provide access to location-based services.","The server  is intended to represent various forms of servers including, but not limited to a web server, an application server, a proxy server, a network server, a server farm. In general, the server  accepts user requests for web services and provides those services to any number of user devices over network . In some implementations, the server  can provide a central point through which service-providers can manage and access data related to web services. The network  can be provided as a large computer network, such as a local area network (LAN), wide area network (WAN), the Internet, a cellular network, or a combination thereof connecting any number of mobile clients  and servers .",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 2","FIG. 3"],"b":["200","200","200","200","202","204","200"]},"Typically, when a developer begins to build a client user interface, such as mobile client user interface , the developer inserts one or more input components including, but not limited to an input field, a radio box, a dropdown list, buttons, icons, hyperlinks and\/or combinations of the above components. The input components accept input values of users for purposes of assigning values to parameters of a target operation within the web service , for example. Each possible input in an input field is assigned a value. The value represents data and\/or a basic data type, such as string, a symbol, or a numeric value.","In some implementations, input values may not directly correlate to a parameter of a web service operation when, for example, the operation includes a complex data structure. In this example, the input value is instead correlated to internal leaf elements of one or more parameters that also have a basic data type. A leaf element represents a data element that does not have any element children that are descendants of (or the same as) the root. Leaf elements may have attributes, and may contain text, processing instructions, and\/or comments.","In some implementations, the input component correlation is represented in text, such as structured text in a text file. For example, a structured text file may be a text-based representation of an input component and the text in the text file may function as the unique name of the component. In some implementations, the correlation is represented in equation format. The equation may depict a relationship between an input component and a leaf element of a parameter.","Upon determining a correlation between components and parameters, each correlation is collected and stored in a structured matching configuration file . The structure matching configuration file  functions as a map for correlating input fields to parameters of a web service. The structured matching configuration file  may be saved in a text file, in some implementations. For example, the environment  can generate a text file (e.g., the structured matching configuration file ) based on a one or more determined correlations and can store the text file in memory on the mobile client . The text file  can be updated accordingly if changes occur to backend web services or changes occur to a mobile client, for example. In some implementations, a developer can create a correlation at design time which defines the contents of a particular text file. The preconfigured text file may define how the server side  matches a particular web service. This preconfigured text file can be stored in the environment  for future usage.","In some implementations, the structured matching configuration file  can function as a dictionary of definitions for use in future web service transactions. The dictionary can be used to match other client input\/output and web service input\/output on both a client side  and a server side . The environment  can also employ the dictionary to match and\/or correlate client input information to client output information and match communication messages and simple object access protocol (SOAP) messages. In some implementations, the use of a dictionary may reduce redundant message conversions in the system and allow environment  to parse requests at runtime.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 3","FIG. 2"],"b":["300","300","302","304","306","302","302","304","302","206"]},"The mobile client  includes an input\/output matching parser , which can be provided as a single parser or multiple parsers. The matching parser  is executed on the mobile client . The parser  can process user input, access text files, generate invocation messages, and process response messages. For example, the client side input matching parser  can directly convert client input information based on the pre-defined matching between input values and input parameters of the web service operations. This can be achieved by using the input matching to remove information about input components. Such an implementation can occur when a user submits an invocation to a web service operation from the mobile client , for example.","The middleware server  is operable to invoke web service applications based on invocation messages received from the mobile client device . The middleware server  can, for example, be a proxy server that is part of the server . In some implementations, the middleware server is located in the web server or other external location. In some implementations, the middleware server  represents the server side device  as shown in .","The middleware server  includes an input\/output matching parser , which can be provided as a single parser or multiple parsers. The matching parser  stores text files in a memory on the middleware server , executes on the server , and process invocation messages by accessing text files and generating protocol messages to invoke web service applications. For example, when the middleware server  receives invocation messages, it does not convert the message back to client input information, but instead employs the server side input matching parser  to convert the message to a SOAP message, for example, by directly obtaining input values of parameters from the invocation message. In this fashion, redundant parsing of client input information is avoided, because the input matching deployed on both the server side and the client side build an intermediate matching between client input components and web service input parameters.","Both the mobile client  and the middleware server  include respective copies of structured matching configuration (SMC) files (e.g., SMC text file  and SMC text file , respectively). For example, a copy of the SMC file  may be stored in one or both of client  and server . In some implementations, the SMC text file  and SMC text file  are identical. In other implementations, slight changes can be made to one or both files  and  independently of one another.","In general, the system  can deploy web service data (e.g., in the form of SMC text files  and ) on both the client and the server using structured text files without accessing web service invocation codes. As an advantage, the system  can skip compiling steps typically required when using web service invocation codes. This advantage also ensures that the system  continues processing messages and service requests without having to halt systems, apply changes, and restart applications, for example.","The web services  represents one or more servers or databases that store web service profiles used for the interoperability of web services on client devices. The profiles may include core specifications (e.g., SOAP, WSDL, REST, etc.) as well as specific versions and rules for the core specifications. For example, the web services  may store requirements to restrict the user of cores specifications. Example web service styles include Remote Procedure Calls (RPC), Service Oriented Architecture (SOA), Representational State Transfer (REST), or other proprietary or generic message style. Other web service types and styles are possible.","With continued reference to , the system  generates and transmits data content and messages between the mobile client , the middleware server , and the web services . In effect, the messaging facilitates homogeneous communications between the mobile client  and one or more backend servers. In addition, the system  is capacitated to correlate client input\/output data and web service input\/output data on both the mobile client side and the backend server side. The correlation processes may generate definition data for future correlation processes between client input\/output data and the correlation processes between communication messages and SOAP messages.","The definition data defines a structured format of communication messages. The format can be mapped to client input\/output on the mobile client  and input\/output of SOAP messages on the middleware server . Consequently, on the client side, a communication message could be converted to a client input\/output without referring to service definition, and on the server side. A communication message could be converted to a SOAP message without referring to client input\/output. As a result, the definition data reduces redundant message conversions and parsing at runtime.","The mobile client  receives client input, as shown by arrow . The client input can include data content and other user input. For example, client input may include data content entered into an application text box and a submission keystroke submitting the data content in an application. The mobile client  receives client input and employs the matching parser  to determine appropriate mapping between the input and operation parameters. For example, the matching parser  interprets a received input value when a user provides data in a particular input field. The input field is tied to a known parameter and operation. Accordingly, the matching parser  maps the client input to the appropriate parameter and operation correlated to the input field that received the client input. In addition, the client input invokes the matching parser  to convert the client input information to a correlation between input values and input parameters of the web service operations by using the input matching and SMC text file  to remove information about input components. Upon performing the parsing, the mobile client  generates an invocation message as shown by arrow  and submits the invocation message to the middleware server .","The middleware server  receives the invocation message and understands the message without converting the message back to the client input data state. The middleware server  understands the invocation message, because the server  is aware of the underlying structure tying input fields to entered client input. As such, rather than reverting to the original client data, the middleware server  accesses SMC text file , using matching parser,  to employ the structure to the incoming message and generate messages in the structure's format. The middleware server  uses the invocation message to generate a protocol message on the server  where the protocol message is based on the invocation message and the text file SMC text file, as shown by arrow . In general, the middleware server  generates a protocol message, such as a SOAP message, for example, and directly transfers the protocol message to the web service  without communicating back to the mobile client . The middleware server  invokes a web service application in web services  based on the protocol message.","Web services  respond to the protocol message by sending a protocol response, as shown by arrow . In general, the response of the invocation is processed in the reverse order as the above flow from the mobile client  to the web services . The response process typically employs the output matching parses in both parsers  and . In a similar fashion to the input case above, redundant parsing of client output information can also be avoided.","The middleware server  receives the protocol message generated by the a web service application (in web services ). The middleware server  can use the protocol message contents and the SMC text file  to generate a response message, as shown by arrow . The response message is then transmitted to the mobile client .","The mobile client  receives the response message from the middleware server  and generates an output to a user at the mobile client  based on the response message and the text file . The mobile client  can respond to the original client input with client output, as shown by arrow . The client output may be a response to the client input including but not limited to messages, text, files, web service, email, phone call, or other requested output. In some implementations, the client output simply invokes a requested web service application based on the invocation message received form the mobile client .","Similar to the structure matching configuration file , the text files  and  can represent a map for correlating input fields to parameters of a web service. In some implementations, stored SMC text files ,  may be modified if, for example, updates to particular web services are received. For example, if a new correlation between an input component and a parameter is received at the server, a modification can be made to the correlation in an existing text file. In particular, the system  can generate a revised text file based on any or all determined correlations between a plurality of input components and a plurality of parameters. The revised text file is then stored in memory on the mobile client . At this point, a subsequent invocation message is generated at the mobile client  based on the revised text file and a user input. For example, the revised text file can be redeployed on both the client side  and the server side . Here, the redeployment is simply an update to existing text files and thus, a recompilation is unnecessary. As such, the risk of recompilation and redeployment of program codes is reduced thereby simplifying maintenance of the system .","Referring to , a screen shot  of an exemplar text-based application is depicted. The screenshot  is an example of a mobile client user interface  (). The screen shot  includes a \u201clabel\u201d input field  and a send input button . Each input field  can represent a leaf element of one or more parameters. For example, the input field  is represented by its name \u201cel1input,\u201d which is built based on the \u201cXPath\u201d of this particular type of input element. In this example, a mobile client user can input a value into the \u201clabel\u201d input filed  and select the send input button . Selection of the input button  causes an underlying application to take action with respect to the inputted data.","Referring to , an exemplar text-based representation  depicts a leaf element of a parameter. Here, the representation  includes a parameter of a web service operation (A)  and two leaf elements (B)  and (C)  of the parameter (A) . In particular (C)  represents a leaf element of (A) . The text-based representation of (C)  is shown in text notation as \u201cA.B.C.\u201d . By way of non-limiting example, a correlation can be made between the input field \u201cel1input\u201d  and the text notation \u201cA.B.C.\u201d  by using the equation \u201cvalue [A.B.C]=el1input\u201d to represent a matched input and output. The equation implies that the value of the element (C)  is input from the input field \u201cel1input\u201d . In some implementations, the concrete format of the equation is described in a different notation depending upon the implementation. An output correlation between output components of a client user interface and responses of web service operations can be built in the similar way.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 5A","b":["500","500","500","502","504","506","502","506"],"sub":["\u2014","\u2014","\u2014"]},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 5B","b":["530","532","532","534","536","538","532","534","536","538","500","500","502","534","504","536","506","538","532","500"],"sub":["\u2014","\u2014","\u2014"]},{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIGS. 6A and 6B","FIG. 6A"],"b":["600","600","602","604","602","604"]},"At some point, a user entered contents into fields  and  and selected a send button . When the send button  is selected in the input screen , the user-entered input  and  will trigger an operation such as \u201cCustomerSimpleByNameAndAddressQueryResponse_In\u201d defined in a Web Service Description Language (WSDL) file. The WSDL file provides a model for describing particular web services. For example, the WSDL file includes input parameters, output parameters, and data types that define included operations. In a specific example, the \u201cCustomerSimpleByNameAndAddressQueryResponse_In\u201d operation may include an input parameter such as a \u201cCustomerSimpleByNameAndAddressQuery_sync\u201d parameter which is of type \u201cCustomerSimpleByNameAndAddressQueryMessage_sync.\u201d The operation may also include an output parameter such as a \u201cCustomerSimpleByNameAndAddressResponse_sync\u201d parameter, which is of type \u201cCustomerSimpleByNameAndAddressResponseMessage_sync.\u201d Using the above parameters, the WSDL file provides guidance as to which inputs and outputs should match particular input fields. For example, the input field \u201cel1input\u201d  may be required to match a specific country code of an input parameter such as \u201cCustomerSimpleByNameAndAddressQuery_sync.CustomerSimpleSelectionByNameA ndAddress.CustomerAddressCountryCode.\u201d Similarly, the input field \u201cel5input\u201d  may be required to match the region code of an input parameter such as \u201cCustomerSimpleByNameAndAddressQuery_sync.CustomerSimpleSelectionByNameA ndAddress.CustomerAddressRegionCode.#simpleContent.\u201d","Referring to , an exemplar output screen shot  is depicted. The output screen shot  that contains a table \u201cel3table.\u201d The \u201cel3table\u201d includes a first column  and a second column . The first column  matches a customer ID of an output \u201cCustomerSimpleByNameAndAddressResponse_sync.Customer.ID. #simpleContent.\u201d The second column  matches a FirstLineName of a common name of the customer of an output parameter \u201cCustomerSimpleByNameAndAddress Response_sync.Customer.BasicData.Common. Name.FirstLineName.\u201d Similar to the parameters described in , the above parameters can be found in a WSDL file in a hierarchy structure, for example.","As described above, the structure for matching input fields and input parameters of the web service operation and the matching between output files and output parameters of the operation is stored in the structured matching configuration file , for example. The following example input and output data reflects the input and output matching used for the sample applications depicted in .","Input Matching\n\n","Output Matching\n\n","Other information may also be stored and retrieved to deliver web services. Particularly, at runtime, a user triggers a query by clicking the send button , for example. The message sent to a server side may pertain to user entered data. For example, the parameter \u201c.CustomerSimpleByNameAndAddressQuery_sync.Customer SimpleSelectionByNameAndAddress.CustomerAddressCountryCode may provide a match if the \u201cUS\u201d input is received in the input field . Similarly, the parameter \u201c.CustomerSimpleByNameAndAddressQuery_sync.CustomerSimpleSelectionByNameA ndAddress.CustomerAddressRegionCode.#simpleContent\u201d may provide a match if the \u201cCA\u201d input is received in the input field . For example, the system can determine that the input value \u201cUS\u201d maps to the country code of the input parameter and the input value \u201cCA\u201d maps to the region code of the input parameter.","Codes which define particular operations can also be stored and retrieved. For example, in the above example, a sample text file may include the above parameters and codes such as \u201cconfide\u201d, \u201c323963561103156\u201d, \u201csId\u201d, and \u201cd6cfe405-26f7-4313-9c71-fdf09cd5704a.\u201d Specifically, the \u201cCustomerSimpleByNameAndAddressQuery Response_In\u201d operation may be defined as the code \u201c323963561103156.\u201d The operation name \u201cCustomerSimpleByNameAndAddressQueryResponse_In\u201d may be stored in another configuration file that is named by the code, rather than the name.","When the server side receives the above invocation, the server can trigger the \u201cCustomerSimpleByNameAndAddressQuery Response_In\u201d operation and can receive a response. The response is typically converted to the text message contained in another system file. The results for this particular example may be represented by the following description: \u201c{\u2018cutAt\u2019:null,\u2018CustomerSimpleByNameAndAddress Response_sync\u2019: {\u2018Customer\u2019: {\u2018ID\u2019:[\u2018513\u2019,\u2018516\u2019,\u2018517\u2019], \u2018FirstLineName\u2019:[\u2018Geoffrey Dean\u2019, \u2018Julia Chase\u2019,\u2018Maria Henderson\u2019]}}}\u201d. As shown in , columns  and  can be constructed using the information in the above description.",{"@attributes":{"id":"p-0071","num":"0073"},"figref":["FIG. 7","FIG. 7"],"b":["100","200","300"]},"In step , a correlation between a plurality of input components of an application executed on a mobile client and a plurality of parameters of a web service application is defined. In step , a text file based on the correlation is generated. In step , the text file is stored in memory of the mobile client. In step , an invocation message at the mobile client based on the text file and a user input is generated. In step , the invocation message is transmitted to a server to invoke the web service application.","Referring now to , a schematic diagram of an exemplar computer system  is provided. The system  can be used for the operations described in association with the method described in  according to one implementation. For example, the system  may be included in any or all of the server , the mobile client , the client , or the server . The system  includes a processor , a memory , a storage device , and an input\/output device . Each of the components , , , and  are interconnected using a system bus . The processor  is capable of processing instructions for execution within the system . In one implementation, the processor  is a single-threaded processor. In another implementation, the processor  is a multi-threaded processor. The processor  is capable of processing instructions stored in the memory  or on the storage device  to display graphical information for a user interface on the input\/output device .","The memory  stores information within the system . In one implementation, the memory  is a computer-readable medium. In one implementation, the memory  is a volatile memory unit. In another implementation, the memory  is a non-volatile memory unit. The storage device  is capable of providing mass storage for the system . In one implementation, the storage device  is a computer-readable medium. In various different implementations, the storage device  may be a floppy disk device, a hard disk device, an optical disk device, or a tape device. The input\/output device  provides input\/output operations for the system . In one implementation, the input\/output device  includes a keyboard and\/or pointing device. In another implementation, the input\/output device  includes a display unit for displaying graphical user interfaces.","The features described can be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. The apparatus can be implemented in a computer program product tangibly embodied in an information carrier, e.g., in a machine-readable storage device, for execution by a programmable processor; and method steps can be performed by a programmable processor executing a program of instructions to perform functions of the described implementations by operating on input data and generating output. The described features can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from, and to transmit data and instructions to, a data storage system, at least one input device, and at least one output device. A computer program is a set of instructions that can be used, directly or indirectly, in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.","Suitable processors for the execution of a program of instructions include, by way of example, both general and special purpose microprocessors, and the sole processor or one of multiple processors of any kind of computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally, a computer will also include, or be operatively coupled to communicate with, one or more mass storage devices for storing data files; such devices include magnetic disks, such as internal hard disks and removable disks; magneto-optical disks; and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, such as EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, ASICs (application-specific integrated circuits).","To provide for interaction with a user, the features can be implemented on a computer having a display device such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.","The features can be implemented in a computer system that includes a back-end component, such as a data server, or that includes a middleware component, such as an application server or an Internet server, or that includes a front-end component, such as a client computer having a graphical user interface or an Internet browser, or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include, e.g., a LAN, a WAN, and the computers and networks forming the Internet.","The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network, such as the described one. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","In addition, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. In addition, other steps may be provided, or steps may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other implementations are within the scope of the following claims.","A number of implementations of the present disclosure have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the present disclosure. Accordingly, other implementations are within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 6A and 6B"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
