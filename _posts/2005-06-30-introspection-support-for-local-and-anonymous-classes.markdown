---
title: Introspection support for local and anonymous classes
abstract: A technique in accordance with one embodiment of the present invention provides introspection support for anonymous and local classes. As a result of the technique, an enclosing class that defines a generic type variable that is not defined within a local or anonymous class that refers to the generic type variable can be determined. According to one embodiment of the invention, when a compiler determines that a particular class is a local or anonymous class, the compiler emits, into the particular class' binary class file, information that indicates which class encloses the particular class. In response to the invocation of a method (described herein) relative to a reflective proxy that corresponds to an enclosed class, information that identifies an enclosing class that encloses the enclosed class is returned. This is so even if the enclosed class is a local or anonymous class.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07669184&OS=07669184&RS=07669184
owner: Sun Microsystems, Inc.
number: 07669184
owner_city: Santa Clara
owner_country: US
publication_date: 20050630
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","Generic Types","Class Taxonomy","Introspection","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENT(S)","Overview","Emitting Enclosing Class Information at Compile-Time","Example Binary Class File Structure","Additional Introspective Methods","Hardware Overview"],"p":["The present application is related to U.S. patent application Ser. No. 11\/105,116, entitled \u201cINTROSPECTION SUPPORT FOR GENERIC TYPES,\u201d by Joseph D. Darcy, filed on Apr. 12, 2005, the entire contents of which are incorporated by reference for all purposes as though fully and originally disclosed herein.","Java\u2122 Development Kit (JDK) is a software development kit for producing Java\u2122 programming language (referred to as \u201cJPL\u201d herein) programs. JDK version 1.5 introduced several extensions to the JPL. One of these extensions is the introduction of \u201cgeneric types.\u201d","Generic types in JPL are analogous to, but not exactly the same as, templates in the C++ programming language. Generic types may be most easily understood through a discussion of the scenarios that make the use of generic types beneficial.","According to the syntactical rules of strongly typed programming languages such as JPL, the data type of a variable is supposed to be expressed in the declaration of that variable. The following declaration is illustrative:\n\nInteger x=new Integer(0);\n\nIn the above declaration, the variable \u201cx\u201d is declared to be of type \u201cInteger.\u201d Thus, any attempt to assign, to \u201cx,\u201d an object that not an instance of the \u201cInteger\u201d class or a subclass thereof, should be forbidden and should cause the compiler to alert the programmer that something is amiss in the assignment.\n","The following declaration is somewhat more sophisticated and informative:\n\nList myIntList=new LinkedList( );\n\nIn the above declaration, the variable \u201cmyIntList\u201d is declared to be of type \u201cList.\u201d When the above expression is evaluated, a new instance of the \u201cLinkedList\u201d class (i.e., a \u201cLinkedList\u201d object) is created (\u201cinstantiated\u201d) via the invocation of the \u201cLinkedList( )\u201d constructor method and assigned to \u201cmyIntList.\u201d The \u201cList\u201d and \u201cLinkedList\u201d classes are used as examples in the discussion below, but it should be understood that the behaviors of the classes discussed below are not limited only to these classes.\n","A variable of a particular type can be assigned objects that are of subtypes of that particular type. Like other variables of type \u201cList,\u201d the variable \u201cmyIntList\u201d can be assigned \u201cLinkedList\u201d objects, because type \u201cLinkedList\u201d is a subtype of type \u201cList.\u201d The \u201cLinkedList\u201d object is a linked list of other objects. Prior to the introduction of generic types in JPL, the compiler could not determine what the specific types of these other objects were. The type system is a conservative approximation of run-time behavior. For example, without generic types, if only \u201cFoo\u201d-type objects were \u201cinserted\u201d into a LinkedList, then the compiler could not determine, upon \u201cextraction\u201d of these objects from the LinkedList, that the objects were of type \u201cFoo.\u201d Without generic types, the compiler merely could determine that these objects were instances of some indeterminable subtype of the \u201cObject\u201d class; in JPL, all classes are subclasses of the \u201cObject\u201d class. Because this was as specific as the compiler could get, the \u201cextracted\u201d objects could only have the methods of the \u201cObject\u201d class (as opposed to the \u201cFoo\u201d class) invoked relative to them.","Because of this shortcoming, it often became necessary for a programmer to \u201ccast\u201d such a returned object into a particular data type prior to assigning that object to a variable that was declared to be of the particular data type. The following code is demonstrative:\n\nInteger x=(Integer) myIntList.iterator( ).next( );\n\nIn the above code, the \u201cObject\u201d type object returned by the method is expressly cast into an instance of class \u201cInteger.\u201d If this cast were not performed, then the compiler might complain that a non-\u201cInteger\u201d type object was being assigned to a variable of type \u201cInteger.\u201d Indeed, such a complaint would be beneficial, because if the compiler did not complain about such an assignment, then the compiled program might exhibit unexpected and unwanted behavior if and when the method returned an object that actually was not an Integer.\n","Having to cast objects in this manner usually irritates programmers and makes source code undesirably verbose and less readable. Some might even consider casting to be a \u201cdirty\u201d programming practice. Fortunately, the advent of generic types in JPL made casting unnecessary, at least for the purposes discussed above. A sample declaration that incorporates generic types follows:\n\nList<Integer> myIntList=new LinkedList<Integer>( );\n","This is similar to the non-generically typed declaration above, except that the declaration expressly indicates that the objects within the linked list assigned to \u201cmyIntList\u201d are going to be instances of class \u201cInteger.\u201d In light of the declaration, the compiler knows that every object returned by the \u201cmyIntList.iterator( ).next( )\u201d method is an \u201cInteger\u201d object. The compiler will not complain about the expression\n\nInteger x=myIntList.iterator( ).next( );\n\nbecause the compiler can determine that the object returned by the method must be an \u201cInteger\u201d object, and that variable \u201cx\u201d can reference objects of type \u201cInteger.\u201d A single declaration makes potentially many casts unnecessary.\n","It is also should be noted that generic types allow for specificity in this manner without requiring multiple separate implementations of the class. Although \u201cmyIntList\u201d is a \u201cList\u201d object that references \u201cInteger\u201d objects, it was not necessary for the programmer to specifically code an implementation of the \u201cList\u201d class to reference only \u201cInteger\u201d objects. Generic types allow a class to be defined once in a generic manner, and then invoked multiple times in different specific declarations.","Due to the more precise approximation of run-time behavior that generic types provide, generic types also help to avoid runtime failures.","An actual example of generic type declarations is shown below:",{"@attributes":{"id":"p-0014","num":"0013"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public interface List<E> {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"void add(E x);"]},{"entry":[{},"Iterator<E> iterator( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public interface Iterator<E> {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"E next( );"]},{"entry":[{},"boolean hasNext( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In the above generic type declarations, the angle bracket-enclosed parameters (e.g., \u201c<E>\u201d) are called the \u201cformal type parameters\u201d of the generic types. The specific invocation of such a generic type is called a \u201cparameterized type.\u201d For example, the following expression is a parameterized type:\n\nList<Integer>\n\nIn the foregoing parameterized type, \u201c<Integer>\u201d is an example of an \u201cactual type argument.\u201d Parameterized types specify actual type arguments that are to be put in the place of formal type parameters when the generic type declaration is invoked. Although examples provided below contain only one formal type parameters and only one actual type argument, it should be understood that generic type declarations may specify multiple formal type parameters, and parameterized types may specify multiple actual type arguments.\n","Although JPL generic types and C++ templates are somewhat similar syntactically and functionally, there are some significant differences between the two. The declaration of a JPL generic type is not expanded into multiple different specific declarations for different actual type arguments. Instead, much like with non-generic type declarations in JPL, a JPL generic type declaration is compiled into a single class file.","Because generic types are so useful, many of the non-generic type declarations that used to exist in the JPL libraries have been replaced with generic type declarations. Non-generic method declarations also have been replaced in these libraries with generic method declarations. In other words, the former non-generic type and method declarations have been \u201cgenerified.\u201d The existing libraries have been generified in a way that allows migration compatibility. Programmers who are writing new JPL programs can make use of the generic types and methods by putting parameterized types in their programs.","Classes may be categorized according to a taxonomy that is based to some extent on where those classes are declared relative to other classes. Some classes are top-level classes, and some classes are nested classes. Top-level classes are classes that are not declared within any other class. In contrast, nested classes are classes that are declared within another class, although perhaps not at the most immediate level.","Nested classes can be categorized further based on whether they are named and are declared immediately within another class. Nested classes that are named and declared immediately within another class are called \u201cmember classes.\u201d The class in which a member class is immediately declared (i.e., declared no more than one level down) is the \u201cdeclaring class\u201d relative to that member class. In other words, a member class is a \u201cmember\u201d of its declaring class, much in the same way methods and fields may be members of a declaring class.","Some nested classes are not \u201cmember\u201d classes. For example, some nested classes are declared within some method that is contained within another class. If a first class is declared within an method that is contained within a second class, then the second class is not a \u201cdeclaring\u201d class relative to the first class, because the first class is not immediately declared within the second class. Under such circumstances, although the second class is not the first class' \u201cdeclaring\u201d class, the second class is still the first class' \u201cenclosing\u201d class; the first class is contained within the second class, but is not immediately declared within the second class.","Among these non-member classes are two further subcategories of classes: local classes and anonymous classes. Local classes are declared within an intermediate executable block of code such as a method declaration. Anonymous classes are classes that have no declared name.","In the example code below, class \u201cLocal\u201d is a local class, because it is declared within the declaration of method \u201cfoo\u201d rather than immediately within the declaration of class \u201cTop.\u201d Class \u201cTop\u201d still encloses class \u201cLocal\u201d:",{"@attributes":{"id":"p-0023","num":"0022"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"class Top<T> {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<S> foo (T x) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"class Local {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"T baz(S s);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The next example below illustrates an example of an anonymous class with one method, \u201cbar( )\u201d:",{"@attributes":{"id":"p-0025","num":"0024"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Top<String> x = new Top<String>( ) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"T bar ( ) {return t;}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Variables of enclosing classes, including type variables, are included within the scope of the enclosed classes, so the enclosed classes and members thereof are allowed to refer to such variables.","It is often useful for a program to have a way of determining, at run time, characteristics of elements of the running program. The ability to determine such characteristics is called \u201cintrospection.\u201d The JDK Core Reflection Application Programming Interface (API) supports introspection about the classes in the current JPL Virtual Machine (JVM). The Core Reflection API also can be used to construct new class instances and new arrays, access and modify fields of objects and classes, invoke methods on objects and classes, and access and modify elements of arrays. The mechanisms of the Core Reflection API allow certain program elements (e.g., classes, fields, methods, etc.) to have a corresponding \u201creflective proxy\u201d that indicates information about those program elements.","For example, certain methods of the Core Reflection API return information about the signature of a method, including the types of the method's formal parameters, or the return type of the method. Such information may include generic type-specific information, such as the number and names of generic type parameters.","Because a class may refer to a generic type variable that is defined outside of that class, it is useful to have a way of determining the class in which a particular generic type variable has been defined. The Core Reflection API implements a method called \u201cgetDeclaringClass( ).\u201d When invoked relative to a reflective proxy that corresponds to a member class, the \u201cgetDeclaringClass( )\u201d method returns a reflective proxy that corresponds to the member class' declaring class. If the member class refers to a generic type variable that is defined in the declaring class, then the \u201cgetDeclaringClass( )\u201d method can be used to determine the class in which the generic type variable was defined. If the declaring class defines the generic type variable, then the reflective proxy that corresponds to the declaring class indicates this fact. If not, then the \u201cgetDeclaringClass( )\u201d method can be invoked relative to that reflective proxy to go one \u201cclass level\u201d higher. In many cases, the process may be continued until the class that defines the generic type variable has been determined.","However, in some cases, this process cannot be used to determine the class in which a particular generic type variable has been defined. If the \u201cgetDeclaringClass( )\u201d method is invoked relative to a reflective proxy that corresponds to a local or anonymous class, then the \u201cgetDeclaringClass( )\u201d method returns \u201cnull.\u201d This is an entirely correct result, because, as is discussed above, local and anonymous classes are not immediately declared within a class; therefore, there is no declaring class relative to such classes.","Thus, when a local or anonymous class refers to a generic type variable that is defined outside of that class, the \u201cgetDeclaringClass( )\u201d method does not provide any way of determining the class in which the generic type variable is defined.","In accordance with one embodiment of the present invention, there is provided a technique that provides introspection support for anonymous and local classes. As a result of the technique, the class that defines a generic type variable that is not defined within a local or anonymous class that refers to the generic type variable can be determined.","According to one embodiment of the invention, a method called \u201cgetEnclosingClass( )\u201d is implemented. In response to the invocation of the \u201cgetEnclosingClass( )\u201d method relative to a reflective proxy that corresponds to an enclosed class, information that identifies an enclosing class that encloses the enclosed class is returned. This is so even if the enclosed class is a local or anonymous class. In one embodiment of the invention, the reflective proxy of the enclosing class includes information that indicates which generic type variables are defined by the enclosing class.","According to one embodiment of the invention, when a compiler determines that a particular class is a local or anonymous class, the compiler emits, into the particular class' binary class file, information that indicates the identity of an enclosing class that encloses the particular class. The information in the particular class' binary class file can then be used at run-time to allow the \u201cgetEnclosingClass( )\u201d method to determine the particular class' enclosing class.","In accordance with one embodiment of the present invention, techniques are provided which support introspection for local and anonymous classes. An operational flow diagram, which illustrates a high level overview of the operation of one embodiment of the present invention, is shown in .","Referring to , in block , an invocation of a \u201cgetEnclosingClass( )\u201d method of a reflective proxy is detected. The reflective proxy corresponds to an enclosed class that may be a local or anonymous class. For example, the run-time environment of a virtual machine may detect the invocation of such a method. Although the method name \u201cgetEnclosingClass( )\u201d is used for purposes of illustration, embodiments of the invention may use a different name for a method that performs the same operations as those described herein in connection with \u201cgetEnclosingClass( ).\u201d","In block , in response to the invocation of the \u201cgetEnclosingClass( )\u201d method, an enclosing class that encloses the enclosed class is determined. For example, the run-time environment may determine such information from a binary class file that corresponds to the enclosed class.","In block , information that identifies the enclosing class is generated. The information may be returned as a result of the \u201cgetEnclosingClass( )\u201d method. For example, the run-time environment may generate and return the information.","In one embodiment, the enclosing class' reflective proxy indicates, among other information, the generic type variables that the enclosing class defines. Thus, in response to the invocation of a particular method of the enclosing class' reflective proxy (e.g., method \u201ctoGenericString( )\u201d), information including these generic type variables is returned at run-time.","In other aspects, the invention encompasses, in certain embodiments, computer apparatuses, computing systems, and computer-readable media configured to carry out the foregoing technique.","In one embodiment of the invention, the run-time environment determines a local or anonymous class's enclosing class based on information that is stored in a binary class file that corresponds to the enclosed class. Each class has a separate corresponding binary class file. According to one embodiment of the invention, a compiler stores the identity of the enclosing class in the binary class file in response to determining that an enclosed class is a local or anonymous class.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 2"},"In block , a class declaration is detected. In block , it is determined whether the class declaration is a declaration of a local class or an anonymous class. If the class declaration is a declaration of a local class or an anonymous class, then control passes to block . Otherwise, control passes to block .","In block , information that identifies the enclosing class of the local or anonymous class is emitted into the binary class file for the local or anonymous class. The information may be accessed by the run-time environment in response to the invocation of the \u201cgetEnclosingClass( )\u201d method of the reflective proxy that corresponds to the local or anonymous class.","Alternatively, in block , information that identifies the enclosing class is not emitted into the binary class file for the enclosed class whose declaration was detected in block .","According to one embodiment of the invention, if a particular named class' declaration is contained within a method declaration that is contained within another class' declaration, then the particular class' declaration is determined to be a local class declaration.","According to one embodiment of the invention, if a particular class is declared without a name, then the particular class' declaration is determined to be an anonymous class declaration.","An anonymous class' declaration may be contained in an initialization expression for a field of the enclosing class. In the following example code, an anonymous class is declared in the initialization expression for field \u201ct,\u201d which is a member of class \u201cFoo\u201d:",{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"class Foo<T> {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"T t = (new I( ) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"T bar ( ) {return null;}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}).bar( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"It is possible for a local or anonymous class to be nested within multiple classes. For example, a local or anonymous class may be nested within class \u201cFoo,\u201d which may be nested within class \u201cBar,\u201d which may be nested within class \u201cBaz.\u201d According to one embodiment of the invention, the enclosing class for a local or anonymous class is the class that most immediately encloses the class. In the previous example, the most immediately enclosing class of the anonymous class is \u201cFoo.\u201d","As is described above, in one embodiment of the invention, a compiler emits, into a binary class file that corresponds to a local or anonymous class, information that identifies the class that encloses the local or anonymous class\u2014even if this enclosing class is not a \u201cdeclaring\u201d class relative to the local or anonymous class. According to one embodiment of the invention, the binary class file contains a structure of the following form, where the types \u201cu2\u201d and \u201cu4\u201d indicate types for unsigned numbers that are two and four bytes long, respectively (for additional information on and definitions of types and constants discussed herein, the reader may refer to 2ed., which is by Tim Lindholm and Frank Yellin, and which is incorporated by reference for all purposes as though fully disclosed herein):",{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ClassFile {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"u4 magic;"]},{"entry":[{},"u2 minor_version;"]},{"entry":[{},"u2 major_version;"]},{"entry":[{},"u2 constant_pool_count;"]},{"entry":[{},"cp_info constant_pool[constant_pool_count\u22121];"]},{"entry":[{},"u2 access_flags;"]},{"entry":[{},"u2 this_class;"]},{"entry":[{},"u2 super_class;"]},{"entry":[{},"u2 interfaces_count;"]},{"entry":[{},"u2 interfaces[interfaces_count];"]},{"entry":[{},"u2 fields_count;"]},{"entry":[{},"field_info fields[fields_count];"]},{"entry":[{},"u2 methods_count;"]},{"entry":[{},"method_info methods[methods_count];"]},{"entry":[{},"u2 attributes_count;"]},{"entry":[{},"attribute_info attributes[attribute_count];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The \u201cattribute_info\u201d field contains an attributes table. Each value of the attributes table is an attribute structure. According to one embodiment of the invention, each attribute is a structure of the following form:",{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"attribute_info {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"u2 attribute_name_index;"]},{"entry":[{},"u4 attribute_length;"]},{"entry":[{},"u1 info[attribute_length];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The \u201cattribute_name_index\u201d is an index into the constant pool of the class. The \u201cconstant_pool\u201d entry at this index is a structure representing the name of the attribute. For additional information about some of the structures described herein, the reader may refer to ","According to one embodiment of the invention, one kind of attribute that may be contained in the attributes table is an \u201cEnclosingMethod\u201d attribute. According to one embodiment of the invention, only local and anonymous classes have an \u201cEnclosingMethod\u201d attribute. According to one embodiment of the invention, the \u201cEnclosingMethod\u201d attribute has the following format:",{"@attributes":{"id":"p-0060","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"EnclosingMethod_attribute {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"u2 attribute_name_index;"]},{"entry":[{},"u4 attribute_length;"]},{"entry":[{},"u2 class_index;"]},{"entry":[{},"u2 method_index;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The \u201cattribute_name_index\u201d is a valid index into the \u201cconstant_pool\u201d table. The \u201cconstant_pool\u201d entry is a structure representing the string \u201cEnclosingMethod.\u201d In the embodiment described above, the value of \u201cattribute_length\u201d is four.","The \u201cclass_index\u201d item is a valid index into the \u201cconstant_pool\u201d table. The entry at that index is a \u201cCONSTANT_Class_info\u201d structure that represents the innermost class that encloses the declaration of the current class. According to one embodiment of the invention, it is into this structure that the compiler emits information that identifies the enclosing class information for a local or anonymous class. In one embodiment of the invention, a \u201cCONSTANT_Class_info\u201d structure has the following form:",{"@attributes":{"id":"p-0063","num":"0062"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CONSTANT_Class_info {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"u1 tag;"]},{"entry":[{},"u2 name_index;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In one embodiment, the \u201ctag\u201d item has the value \u201cCONSTANT_Class,\u201d (as is further defined in ) and the value of the \u201cname_index\u201d is a valid index into the \u201cconstant_pool\u201d table. In one embodiment, the entry at that index is a structure that represents a valid fully qualified class or interface name, which may be encoded.","According to one embodiment of the invention, each reflective proxy implements a \u201cgetSimpleName( )\u201d method, which, when invoked, returns the simple name of the class that corresponds to the reflective proxy.","According to one embodiment of the invention, each reflective proxy implements a \u201cgetCanonicalName( )\u201d method, which, when invoked, returns the canonical name of the class that corresponds to the reflective proxy, as defined by the JPL Specification.","According to one embodiment of the invention, each reflective proxy implements an \u201cis AnonymousClass( )\u201d method, which, when invoked, returns \u201ctrue\u201d if the class that corresponds to the reflective proxy is an anonymous class, and returns \u201cfalse\u201d otherwise.","According to one embodiment of the invention, each reflective proxy implements an \u201cis LocalClass( )\u201d method, which, when invoked, returns \u201ctrue\u201d if the class that corresponds to the reflective proxy is a local class, and returns \u201cfalse\u201d otherwise.","According to one embodiment of the invention, each reflective proxy implements an \u201cis MemberClass( )\u201d method, which, when invoked, returns \u201ctrue\u201d if the class that corresponds to the reflective proxy is a member class (i.e., a class that is immediately declared within a \u201cdeclaring\u201d class), and returns \u201cfalse\u201d otherwise.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 3","b":["300","300","302","304","302","300","306","302","304","306","304","300","308","302","304","310","302"]},"Computer system  may be coupled via bus  to a display , such as a cathode ray tube (CRT), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","In computer system , bus  may be any mechanism and\/or medium that enables information, signals, data, etc., to be exchanged between the various components. For example, bus  may be a set of conductors that carries electrical signals. Bus  may also be a wireless medium (e.g. air) that carries wireless signals between one or more of the components. Bus  may also be a medium (e.g. air) that enables signals to be capacitively exchanged between one or more of the components. Bus  may further be a network connection that connects one or more of the components. Overall, any mechanism and\/or medium that enables information, signals, data, etc., to be exchanged between the various components may be used as bus .","Bus  may also be a combination of these mechanisms\/media. For example, processor  may communicate with storage device  wirelessly. In such a case, the bus , from the standpoint of processor  and storage device , would be a wireless medium, such as air. Further, processor  may communicate with ROM  capacitively. In this instance, the bus  would be the medium (such as air) that enables this capacitive communication to take place. Further, processor  may communicate with main memory  via a network connection. In this case, the bus  would be the network connection. Further, processor  may communicate with display  via a set of conductors. In this instance, the bus  would be the set of conductors. Thus, depending upon how the various components communicate with each other, bus  may take on different forms. Bus , as shown in , functionally represents all of the mechanisms and\/or media that enable information, signals, data, etc., to be exchanged between the various components.","The invention is related to the use of computer system  for implementing the techniques described herein. According to one embodiment of the invention, those techniques are performed by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another machine-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The term \u201cmachine-readable medium\u201d as used herein refers to any medium that participates in providing data that causes a machine to operate in a specific fashion. In an embodiment implemented using computer system , various machine-readable media are involved, for example, in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Transmission media includes coaxial cables, copper wire, and fiber optic cables, including the wires that comprise bus .","Common forms of machine-readable media include, for example, a floppy disk, a flexible disk, a hard disk, a magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punchcards, papertape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, or any other physical medium from which a computer can read.","Various forms of machine-readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remotecomputer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line. Appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the worldwide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface .","Processor  may execute the received code as the code is received and\/or stored in storage device  or other non-volatile storage for later execution. In this manner, computer system  may obtain application code in the form of a carrier wave.","In the foregoing specification, embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. Thus, the sole and exclusive indicator of what is the invention, and is intended by the applicants to be the invention, is the set of claims that issue from this application, in the specific form in which such claims issue, including any subsequent correction. Any definitions expressly set forth herein for terms contained in such claims shall govern the meaning of such terms as used in the claims. Hence, no limitation, element, property, feature, advantage or attribute that is not expressly recited in a claim should limit the scope of such claim in any way. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
