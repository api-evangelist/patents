---
title: Systems and methods for maintaining a virtual failover volume of a target computing system
abstract: Some of the methods provided herein may include periodically revising a mirror of the target computing system, according to a predetermined backup schedule, the mirror being stored on the virtual failover volume resident on an appliance that is operatively associated with the target computing system, by periodically comparing the mirror to a configuration of the target computing system to determine changed data blocks relative to the mirror, storing the changed data blocks as one or more differential files in the virtual failover volume, and incorporating the changed data blocks into the mirror. In some embodiments, the systems and methods may be utilized to resparsify the virtual failover volume.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09235474&OS=09235474&RS=09235474
owner: Axcient, Inc.
number: 09235474
owner_city: Mountain View
owner_country: US
publication_date: 20110217
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS"],"p":["This application relates to U.S. patent application Ser. No. 12\/895,275, entitled \u201cSYSTEMS AND METHODS FOR RESTORING A FILE,\u201d filed on Sep. 30, 2010, which is hereby incorporated by reference herein in its entirety, including all references cited therein.","The present invention relates generally to systems and methods for maintaining a virtual failover volume of a target computing system, and more specifically, but not by way of limitation, to systems and methods for maintaining a virtual failover volume of a target computing system that may be utilized by a virtual machine to create a virtual failover computing system that approximates the configuration of the target computing system, upon the occurrence of a failover event.","Generally speaking, the systems and methods provided herein may be adapted to maintain a \u201cready to execute\u201d virtual failover volume of a target computing system. The virtual failover system may be executed by a virtual machine to assume the functionality target computing system upon the occurrence of a failover event.","The systems and methods may maintain the virtual failover volume in a \u201cready to execute: state by periodically revising a mirror of the target computing system and store the periodically revised mirror in the virtual failover volume. The ability of the systems and methods to periodically revise the mirror of the target computing system ensures that upon the occurrence of a failover event, a virtual machine may execute the periodically revised mirror to create a virtual failover computing system that may assume the configuration of the target computing system without substantial delay.","According to exemplary embodiments, the present invention provides for a method for maintaining a virtual failover volume of a target computing system that includes: (a) periodically revising a mirror of the target computing system, according to a predetermined backup schedule, the mirror being stored on the virtual failover volume resident on an appliance that is operatively associated with the target computing system, by: (i) periodically comparing the mirror to a configuration of the target computing system to determine changed data blocks relative to the mirror; (ii) storing the changed data blocks as one or more differential files in the virtual failover volume, the one or more differential files being stored separately from the mirror; and (iii) incorporating the changed data blocks into the mirror; (b) upon the occurrence of a failover event, creating a bootable image file from at least one of the mirror and one or more differential files; and (c) booting the bootable image file via a virtual machine on the appliance to create a virtual failover computing system that substantially corresponds to the target computing system at an arbitrary point in time.","According to other embodiments, systems for maintaining a virtual failover volume of a target computing system may include: (a) a memory for storing computer readable instructions for maintaining a virtual failover volume of a file structure of a target computing system; and (b) a processor configured to execute the instructions stored in the memory to: (i) periodically revise a mirror of the target computing system, according to a predetermined backup schedule, the mirror being stored on the virtual failover volume resident on an appliance that is operatively associated with the target computing system, by: periodically compare the mirror to a configuration of the target computing system to determine changed data blocks relative to the mirror; store the changed data blocks as one or more differential files in the virtual failover volume, the one or more differential files being stored separately from the mirror; and incorporate the changed data blocks into the mirror; (ii) upon the occurrence of a failover event, create a bootable image file from at least one of the mirror and one or more differential files; and (iii) boot the bootable image file via a virtual machine on the appliance to create a virtual failover computing system that substantially corresponds to the target computing system at an arbitrary point in time.","In some embodiments, the present technology may be directed to non-transitory computer readable storage mediums. The storage medium may each have a computer program embodied thereon, the computer program executable by a processor in a computing system to perform a method for maintaining a virtual failover volume of a target computing system that includes: (a) periodically revising a mirror of the target computing system, according to a predetermined backup schedule, the mirror being stored on the virtual failover volume resident on an appliance that is operatively associated with the target computing system, by: (i) periodically comparing the mirror to a configuration of the target computing system to determine changed data blocks relative to the mirror; (ii) storing the changed data blocks as one or more differential files in the virtual failover volume, the one or more differential files being stored separately from the mirror; and (iii) incorporating the changed data blocks into the mirror; (b) upon the occurrence of a failover event, creating a bootable image file from at least one of the mirror and one or more differential files; and (c) booting the bootable image file via a virtual machine on the appliance to create a virtual failover computing system that substantially corresponds to the target computing system at an arbitrary point in time.","While this invention is susceptible of embodiment in many different forms, there is shown in the drawings and will herein be described in detail several specific embodiments with the understanding that the present disclosure is to be considered as an exemplification of the principles of the invention and is not intended to limit the invention to the embodiments illustrated.","Virtual failover volumes may often be utilized as redundancy mechanisms for backing up one or more target computing systems in case of failover events (e.g., minor or major failures or abnormal terminations of the target computing systems). The virtual failover volume may include an approximate copy of a configuration of the target computing system. In some embodiments, the configuration of the target computing system may include files stored on one or more hard drives, along with configuration information of the target computing system such as Internet protocol (IP) addresses, media access control (MAC) addresses, and the like. The configuration of the target computing system may additionally include other types of data that may be utilized by a virtual machine to create a virtual failover computing system that closely approximates the configuration of the target computing system.","When backing up the target computing system, the configuration of the target computing system may be transferred to a virtual failover volume according to a backup schedule.","According to some embodiments, methods for backing up the target computing system may include capturing a mirror (also known as a snapshot) of the target computing system. To save space on the virtual failover volume, rather than capturing subsequent mirrors, the systems and methods may capture differential files indicative of changes to the target computing system since the creation of the snapshot, or since the creation of a previous differential file. The differential files may be utilized to update or \u201crevise\u201d the mirror.","It will be understood that because of the relatively small size of differential files relative to the mirror, significant space may be save on the virtual failover volume relative to capturing multiple mirrors. It is noteworthy that differential files may also be known as incremental files, delta files, delta increments, differential delta increments, reverse delta increments, and other permutations of the same.","It will be understood that exemplary methods for creating mirrors and differential files of target computing systems are provided in greater detail with regard to U.S. patent application Ser. No. 12\/895,275, entitled \u201cSYSTEMS AND METHODS FOR RESTORING A FILE,\u201d filed on Sep. 30, 2010, which is hereby incorporated by reference herein in its entirety, including all references cited therein.","The systems and methods may capture the mirror of the target computing system and store the data blocks of the mirror in a virtual failover volume as a bootable image file by creating a substantially identical copy of the file structure of the target computing system at a given point in time.","As stated above, rather than capturing additional mirrors of the target storage volume, the systems and methods may capture one or more differential files indicative of changes to the target computing system at one or more points in time after the rendering of the mirror. These changes may be stored in files separate from the mirror and may be retained on the virtual failover volume for a predetermined period of time. The systems and methods may be able to utilize these differential files to walk backwards in time to recreate a virtual failover computing system indicative of the configuration of the target computing system at an arbitrary point in time in the past. It will be understood that the further back in time the systems and methods must go to recreate a virtual failover computing system of the target computing system, the longer the process becomes to launch the virtual failover computing system.","If a failover event occurs before the systems and methods have updated the mirror utilizing one or more differential files, the systems and methods may boot the bootable image file and additionally read changed blocks from one or more differential files on the fly by way of a copy on write functionality to create a virtual failover computing system (e.g., rendering a mirror of the target computing system) that approximates the configuration of the target computing system.","Additionally, because the systems and methods of the present technology may utilize a virtual failover volume having new technology file system (NTFS) file system, the systems and methods may be adapted to modify the allocation strategy utilized by the NTFS file structure to more efficiently utilize the virtual storage volume.","Referring now to the drawings,  includes a schematic diagram of an exemplary environment  for practicing the present invention. Environment  includes a plurality of target computing systems  that may each be operatively connected to an appliance , hereinafter referred to as \u201cappliance .\u201d Each of the target computing systems  may include a configuration that includes one or more target storage mediums  such as hard drives, along with additional operating data. It will be understood that in some embodiments, the target computing system  and the appliance  may be operative connected via a network  may include an encrypted VPN tunnel, a LAN, a WAN, or any other commonly utilized network connection that would be known to one of ordinary skill in the art with the present disclosure before them.","According to some embodiments, each appliance  may be associated with a remote storage medium  that facilitates long-term storage of at least a portion of the data (e.g., differential files) from the appliances  in one or more virtual failover volumes .","Generally speaking, the appliance  provides local backup services for maintaining a virtual failover volume of the target computing system  associated therewith. That is, the appliance  may capture a mirror indicative of the target computing system  (e.g., storage mediums, configuration information, etc.) and periodically capture differential files indicative of changes to the target computing system  relative to the mirror. Upon the occurrence of a failover event (e.g., full or partial failure or malfunction of the target computing system), the appliance  may boot the virtual failover volume in a virtual machine as a virtual failover computing system that approximates the target computing system  at an arbitrary point in time.","The appliance  may include computer readable instructions that, when executed by a processor of the appliance , are adapted to maintain a virtual failover volume of the target computing system  associated therewith.","According to some exemplary embodiments, both the target computing system  and the appliance  may be generally referred to as \u201ca computing system\u201d such as a computing system  as disclosed with respect to . However, it will be understood that the appliance  may be referred to as a particular purpose computing system adapted to maintain a virtual failover volume and execute the virtual failover volume utilizing a virtual machine to create a virtual failover computing system that assumes the configuration of the target computing system .","Referring now to , a schematic diagram is shown of an exemplary embodiment of the computer readable instructions, which in some embodiments includes an application having one or more modules, engines, and the like. For purposes of brevity, the computer readable instructions are hereinafter referred to as a virtual failover application  or \u201capplication .\u201d","According to some embodiments, the application  may generally include a disk maintenance module , an obtain mirror module , an analysis module , a revise mirror module , a render mirror module , a resparsification module , and a virtual machine . It is noteworthy that the application  may be composed of more or fewer modules and engines (or combinations of the same) and still fall within the scope of the present technology.","The disk maintenance module  may be adapted to create a virtual failover volume  on the appliance . According to some embodiments, the disk maintenance module  may allocate two terabytes of space for the virtual failover volume  for each drive associated with the target computing system . In some applications, the disk maintenance module  may be adapted to mount the virtual failover volume  and format the virtual failover volume  utilizing a new technology file system (NTFS) file system. While the disk maintenance module  has been disclosed as allocating and formatting a two terabyte virtual failover volume  utilizing a NTFS file system, other sizes and formatting procedures that would be known to one of ordinary skill in the art may likewise be utilized in accordance with the present technology.","In some embodiments, the virtual failover volume  may include a sparse file. Generally speaking, a sparse file may include a sparse file structure that is adapted to hold, for example, two terabytes worth of data. In practice, while two terabytes worth of space has been allocated, only a portion of the virtual failover volume  may actually be filled with data blocks. The rest of the data blocks of the virtual failover volume  may be empty or \u201cfree,\u201d in that they include no actual data other than metadata that may inform the NTFS file system that the blocks are available for writing. When read by the NTFS file system, the NTFS file system may transparently convert metadata representing empty blocks into free blocks filled with zero bytes at runtime.","Referring now to  and  collectively, according to some embodiments, the virtual failover volume  may include a backing store  that includes the data blocks copied or moved from the target computing system  via the obtain mirror module . For example, the backing store  may include data blocks such as data block and data block . It will be understood that data block and data block may correspond to a single file or a plurality of files on the target computing system , or may include configuration information (e.g., MAC address, IP address, etc.) indicative of the target computing system .","In addition to the backing store , the virtual failover volume  may include additional storage space for one or more differential files in a differential block store . For example, the differential block store  may include differential files , , and that are indicative of changes to one or more files of the target computing system  relative to the backing store .","It will be understood that the differential block store  may be stored separately from the backing store  on the virtual failover volume , along with sufficient working space to accommodate a copy of the set of differential files created during subsequent backups of the target computing system . Moreover, the virtual failover volume  may also include additional operating space (not shown) for the virtual machine  to operate at a reasonable level (e.g., files created or modified by the virtual failover computing system) for a given period of time, which in some cases is approximately one month.","It will be understood that because direct modification of the backing store  via the virtual machine  may lead to corruption of the backing store , the differential files may be stored separately from the backing store  in the differential block store . Therefore, the analysis module  may be adapted to utilize a copy on write functionality to store differential files separately from the backing store . An exemplary \u201cwrite\u201d operation  illustrates a differential file being written into the differential block store .","In some applications, changed data blocks included in the one or more differential files may be incorporated into the backing store  via the revise mirror module , as will be discussed in greater detail below. However, it will be understood that once the virtual machine  has booted the bootable image file of the virtual failover volume , the application  may read (rather than directly open) data blocks from the backing store  and the one or more differential files independently from one another, utilizing a copy on write functionality. Utilization of the copy on write functionality may prevent changes to the backing store  that may occur if the backing store  is opened by the NTFS file system. It is noteworthy that directly opening the backing store  may modify the backing store  and compromise the integrity of the backing store .","Upon an initial preparation of the virtual failover volume  by the disk maintenance module , each of the blocks of the backing store  is a \u201cfree\u201d or sparse block such that the obtain mirror module  may move or \u201ccopy\u201d the blocks of data from the target computing system  to the sparse blocks of the backing store . Exemplary empty or \u201cfree\u201d blocks of the backing store  are shown as free blocks . Moreover, the backing store  may include occupied blocks such as and indicative of data blocks copied from the target computing system .","As stated above, the obtain mirror module  may be executed to copy data blocks from the target computing system  into the backing store  to occupy at least a portion of the free blocks  to create a mirror or \u201csnapshot\u201d of the target computing system . It will be understood that the backing store  may be stored as a bootable image file, such as a Windows\u00ae root file system, that may be executed by the virtual machine . In some embodiments, the virtual machine  may utilize a corresponding Windows\u00ae operating system to boot the bootable image file.","The analysis module  may be executed periodically (typically according to a backup schedule) to determine the changed data blocks of the target computing device  relative to the data blocks of the backing store . The determined changed data blocks may be stored in the differential block store  as one or more differential files. In some embodiments, each execution of the analysis module  that determines changed blocks results in the creation of a separate differential file.","Changed blocks stored in the differential block store  that are obtained by the analysis module  may be utilized by the revise mirror module  to revise the mirror (e.g., backing store ) of the target computing system . It will be understood that the process of revising the mirror may occur according to a predetermined backup schedule.","Upon the occurrence of a failover event, the render mirror module  may utilize the mirror alone, or the mirror and the revised differential file, to render a bootable image file from one or more mirrors, and\/or one or more mirrors and one or more differential files to create a virtual failover computing system that approximates the configuration of the target computing system  at an arbitrary point in time. In contrast to backup methods that store data blocks to a backup storage medium in an unorganized (e.g., not substantially corresponding to a root file system of the target computing system) manner, the backup methods utilized by the appliance  (e.g., the mirror and differential files are stored in a virtual failover volume ) allow for the quick and efficient rendering of bootable disk images.","It will be understood that these bootable disk images may be utilized by the virtual machine  to launch a virtual failover computing system that approximates the configuration of the target computing system  at an arbitrary point in time without substantial delay caused by copying all of (or even a substantial portion) the backed-up data blocks from an unorganized state to a bootable image file that approximates the root file system of the target computing system upon the occurrence of the failover event.","According to some embodiments, to facilitate rapid failover to the virtual machine , the application  may be adapted to utilize a revisable differential file. As such, the analysis module  may be adapted to periodically update a revisable differential file. In some embodiments, the analysis module  may update the revisable differential file by comparing the revisable differential file to the current configuration of the target computing system to determine changed data blocks relative to the revisable differential file. Next, the analysis module  may combine the determined changed data blocks into the revisable differential file to create an updated differential file that takes the place of the revisable differential file. Moreover, rather than discarding the revisable differential file, it may be stored in a differential file archive located on at least one of the remote storage device  of the virtual failover volume .","As such, the virtual failover volume  may be kept in a \u201cready to execute\u201d format such that upon the occurrence of a failover event, the render mirror module  may be executed to render the mirror and the revisable differential file to create a bootable image file that is utilized by the virtual machine  to establish a virtual failover computing system that substantially corresponds to the configuration of the target computing system  as it existed right before the occurrence of the failover event.","During operation of the virtual machine , if the virtual machine  reads a file from the virtual failover volume , the virtual machine  may utilize data blocks from the differential block store , in addition to data blocks from the backing store . The virtual machine  may utilize copy on write functionalities to obtain data blocks from the backing store  along with data blocks from the differential block store  that are situated temporally between the mirror and an arbitrary point in time. The combination of the data blocks allows the virtual machine  to recreate the file approximately as it appeared on the target computing system  at the arbitrary point in time.","With particular emphasis on , in an exemplary operation , the virtual machine  may recreate a file  by utilizing a \u201cread\u201d copy on write functionality to read data blocks and from the backing store  and differential files and from the differential block store . The virtual machine  assembles the data blocks and differential files to create the file .","In addition to launching the virtual machine  to create a virtual failover computing system that approximates configuration of the target computing system , the virtual failover computing system may utilize additional configuration details of the target computing system , such as a media access control (MAC) address, an Internet protocol (IP) address, or other suitable information indicative of the location or identification of the target computing system . The virtual machine  may also update registry entries or perform any other necessary startup operations such that the virtual failover computing system may function substantially similarly to the target computing system .","During operation, the virtual machine  may also create, delete, and modify files just as the target computing system  would, although changed data blocks indicative of the modify files may be stored in the additional operating space created in the virtual failover volume . Moreover, data blocks may be deleted from the virtual failover volume .","Because the virtual failover volume  may utilize NTFS file system, allocation strategies may cause the virtual machine  to overlook deleted blocks that have not been converted to free blocks by the NTFS file system. For example, modifications to the backing store  by the revise mirror module  and routine deletion of differential files from the differential data store  may result in deleted blocks. It will be understood that a deleted block is a data block that has been marked for deletion by the NTFS file system, but that still retains a portion of the deleted data block.","Allocation strategies of the NTFS file system may cause data blocks that are being written into the virtual failover volume  to be written into the next available free block(s), leading to desparsification. To counteract this desparsification, the resparsification module  may be adapted to resparsify the virtual failover volume . In some embodiments, the NTFS file system may notify the underlying XFS file system of the appliance  (which holds the backing store ), to resparsify the one or more deleted blocks, returning them to the sparse state.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 3","b":["305","300","300","300","310","310","310","310","310","310","310","300","300","230","310","310","310"],"i":["a ","a ","c","b","d","e","f","i","a ","f","i","f","i ","f. "]},"The resparsification module  may be adapted to perform a resparsification operation on the backing store . For example, resparsification module  may be adapted to cause the NTFS file system to notify the underlying XFS file system of the appliance  (which holds the backing store ), to resparsify the deleted blocks , , and . As such, data may be written to the resparsified blocks , , , desparsifying only one data block ","While the resparsification module  has been disclosed within the context of maintaining virtual failover volumes of target computing systems, the applicability of resparsifying a virtual volume may extend to other systems and methods that would benefit from the ability of one or more virtual machines to efficiently store data on a virtual volume.","In additional embodiments, the application  may be adapted to optimize the virtual failover volume  by limiting metadata updates to the virtual failover volume  by the NTFS file system.","The backing store  may be utilized by the virtual machine  as a file (e.g., bootable disk image) that may be stored in an XFS file system on the appliance . Whenever data blocks are written to the appliance , the XFS file system may commit a metadata change to record an \u201cmtime\u201d (e.g., modification time) of a data block. Moreover, because some virtual machines  may utilize a semi-synchronous NTFS file system within the backing store , a very high quantity of 512 byte clusters may be written, each invoking a metadata update to the virtual machine XFS file system. These metadata updates cause the virtual machine XFS file system to serialize inputs and outputs behind transactional journal commits, causing deleterious performance of the virtual machine .","To alleviate the \u2018mtime\u2019 updates, the virtual machine  may be adapted to open files (comprised of data blocks or differential data blocks) using a virtual machine XFS internal kernel call that may open a file by way of a handle. The virtual machine  may use this method for both backup and restore functionality. Therefore, a file opened utilizing this method may allow the virtual machine  to omit \u201cmtime\u201d updates, thereby reducing journal commits and significantly improving write performance.","Moreover the virtual machine  may utilize memory efficient data block locking functionalities for asynchronous input and output actions. That is, the functionality utilized by the virtual machine  may be inefficient at memory utilization, especially when locking data blocks during asynchronous input and\/or output actions.","Therefore, the virtual machines  utilized in accordance with the present technology may be adapted to utilize alternate lock management systems which create locks as needed and store the locked data blocks in a \u2018splay-tree\u2019 while active. The splay tree is a standard data structure that provides the virtual machine  with the ability to rapidly lookup of node while modifying the root node to be near recently accessed data blocks. By storing only needed data locks in a small, fast, splay tree, the memory footprint of the appliance  may be reduced without an associated compromise of lookup speed. It will be understood that large virtual failover volumes may be access using this method.","According to some embodiments, upon repair of the target computing system , also known as a \u201cbare metal restore,\u201d the virtual machine  may be paused or \u201clocked.\u201d Pausing the virtual machine  preserves the state of the virtual failover volume . Moreover, the paused virtual failover volume  may be copied directly to the repaired target computing system allowing for a virtual to physical conversion of the virtual failover volume  to the target storage medium  of the repaired target computing device.","Upon the occurrence of the virtual to physical operation, the bootable image file created from the virtual failover volume  may be discarded and the virtual failover volume  may be returned to a data state that approximates the data state of the virtual failover volume  before the bootable image file was created by the obtain mirror module .","The virtual failover volume  may then be reutilized with the repaired target computing system.","Referring now to , an exemplary method  for maintaining a virtual failover volume of a target computing system is shown therein. The method  may include the step  of allocating a virtual failover volume having a two terabyte size, and a step  of formatting the virtual failover volume utilizing an NTFS file structure.","In some embodiments, the method  may include the step  of periodically obtaining a mirror of a target computing system on a virtual failover volume as a bootable image file. The step  may include periodically comparing the mirror to a configuration of the target computing system to determine changed data blocks relative to the mirror, and storing the changed data blocks as one or more differential files in the virtual failover volume, the one or more differential files being stored separately from the mirror. It will be understood that the periodically obtained mirrors may be stored on a virtual volume as a Windows\u00ae root file system.","Next, the method  may include the step  of receiving information indicative of a failover event (e.g., failure of the target computing system). Upon information indicative of a failover event, the method  may include the step  of rendering a bootable image file from the mirror that has been periodically revised.","Next, the method  may include the step  of booting the bootable image file via a virtual machine to create a virtual failover computing system. It will be understood that the configuration of the virtual failover computing system may closely approximate the configuration of the target computing system at the failover event.","In some embodiments, the method  may include an optional step  of rendering a bootable image file that approximates the configuration of the target computing system at an arbitrary point in time utilizing one or more mirrors and one or more differential files, rather than only utilizing the mirror. The step  may include walking the mirror back in time utilizing the one or more differential files to recreate the configuration of the target computing system as it was at the arbitrary point in time.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 5","FIG. 5","FIG. 5","FIG. 5"],"b":["500","500","105","105","110","500","510","520","520","510","520","500","530","540","540","550","560","560","570","570","580"]},"The components shown in  are depicted as being connected via a single bus . The components may be connected through one or more data transport means. Processor unit  and main memory  may be connected via a local microprocessor bus, and the mass storage device , peripheral device(s) , portable storage device , and display system  may be connected via one or more input\/output (I\/O) buses.","Mass storage device , which may be implemented with a magnetic disk drive or an optical disk drive, is a non-volatile storage device for storing data and instructions for use by processor unit . Mass storage device  may store the system software for implementing embodiments of the present invention for purposes of loading that software into main memory .","Portable storage device  operates in conjunction with a portable non-volatile storage medium, such as a floppy disk, compact disk, digital video disc, or USB storage device, to input and output data and code to and from the computer system  of . The system software for implementing embodiments of the present invention may be stored on such a portable medium and input to the computer system  via the portable storage device .","Input devices  provide a portion of a user interface. Input devices  may include an alphanumeric keypad, such as a keyboard, for inputting alpha-numeric and other information, or a pointing device, such as a mouse, a trackball, stylus, or cursor direction keys. Additionally, the system  as shown in  includes output devices . Suitable output devices include speakers, printers, network interfaces, and monitors.","Display system  may include a liquid crystal display (LCD) or other suitable display device. Display system  receives textual and graphical information, and processes the information for output to the display device.","Peripherals  may include any type of computer support device to add additional functionality to the computer system. Peripheral device(s)  may include a modem or a router.","The components provided in the computer system  of  are those typically found in computer systems that may be suitable for use with embodiments of the present invention and are intended to represent a broad category of such computer components that are well known in the art. Thus, the computer system  of  may be a personal computer, hand held computing system, telephone, mobile computing system, workstation, server, minicomputer, mainframe computer, or any other computing system. The computer may also include different bus configurations, networked platforms, multi-processor platforms, etc. Various operating systems may be used including Unix, Linux, Windows, Macintosh OS, Palm OS, Android, iPhone OS and other suitable operating systems.","It is noteworthy that any hardware platform suitable for performing the processing described herein is suitable for use with the technology. Computer-readable storage media refer to any medium or media that participate in providing instructions to a central processing unit (CPU), a processor, a microcontroller, or the like. Such media may take forms including, but not limited to, non-volatile and volatile media such as optical or magnetic disks and dynamic memory, respectively. Common forms of computer-readable storage media include a floppy disk, a flexible disk, a hard disk, magnetic tape, any other magnetic storage medium, a CD-ROM disk, digital video disk (DVD), any other optical storage medium, RAM, PROM, EPROM, a FLASHEPROM, any other memory chip or cartridge.","While various embodiments have been described above, it should be understood that they have been presented by way of example only, and not limitation. The descriptions are not intended to limit the scope of the technology to the particular forms set forth herein. Thus, the breadth and scope of a preferred embodiment should not be limited by any of the above-described exemplary embodiments. It should be understood that the above description is illustrative and not restrictive. To the contrary, the present descriptions are intended to cover such alternatives, modifications, and equivalents as may be included within the spirit and scope of the technology as defined by the appended claims and otherwise appreciated by one of ordinary skill in the art. The scope of the technology should, therefore, be determined not with reference to the above description, but instead should be determined with reference to the appended claims along with their full scope of equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
