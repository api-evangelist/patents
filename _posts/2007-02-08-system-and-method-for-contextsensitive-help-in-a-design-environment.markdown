---
title: System and method for context-sensitive help in a design environment
abstract: An intelligent tool for assisting a developer during the creation or maintenance of software generates an icon when triggered by input. Upon selection of the icon, options are displayed for potential selection. Upon selection of an entry, event associated with the entry are deployed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07937688&OS=07937688&RS=07937688
owner: Microsoft Corporation
number: 07937688
owner_city: Redmond
owner_country: US
publication_date: 20070208
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF THE INVENTION","CONCLUSION"],"p":["This application is a continuation of patent application Ser. No. 10\/218,222, filed Aug. 12, 2002, the entire disclosure of which is hereby incorporated by reference in its entirety.","This invention relates to the field of computing and in particular to the field of development tools.","Programming languages have become more powerful over time through the addition of features and capabilities. The increased power and capability of languages has been accompanied by an increase in complexity. As software increases in complexity, the development of software is becoming more and more difficult. Source code may exceed hundreds of pages in length and may involve the use of many different source code files and programming libraries. The number and complexity of functions available to a software developer has greatly increased. For example, multiple functions or methods within a class hierarchy may share the same name (or identifier), but have different numbers of parameters or different parameter types. A large number of identifiers may be used, including typedefs, variables, macros, parameters, namespaces, templates, attributes and so on. Each of these identifiers typically requires a type declaration and\/or definition specified. Hence programming tools that make development efforts easier and more accurate are widely desired.","One way to make the task of the developer more manageable is to establish an Integrated Development Environment (IDE). These environments typically include browsers and editors enabling developers to edit multiple source files. For object oriented languages, the IDE may also provide a browser that enables a developer to navigate and view the class hierarchy. To further assist the programming effort an IDE may support some kind of on-line statement building mechanism such as the one described in U.S. Pat. No. 6,311,323 B1 issued Oct. 30, 2001, entitled \u201cComputer Programming Language Statement Building and Information Tool\u201d. A help information mechanism may enable a developer to refer to on-line documentation describing varying function definitions. In addition, an IDE may provide automatic help modules displaying reference information associated with identifiers and so on, as described in U.S. patent application Ser. No. 09\/191,757, filed Nov. 13, 1998, entitled \u201cAutomated Help Information for Reference Information\u201d, now U.S. Pat. No. 6,502,233. A completion module for auto-completion of programming statements may also be available within the IDE, as described in U.S. Pat. No. 6,305,008 B1, issued Oct. 16, 2001 entitled, \u201cAutomatic Statement Completion\u201d. Such a tool may be invoked as a developer is writing code, and may display a list of potential completion candidates to the developer. The developer may then pick the desired candidate or continue typing, freeing the developer from having to consult printed or on-line documentation, class hierarchies or other source code files.","To date however, a tool that can intelligently understand what the user (e.g., developer) is doing and help the user accomplish the next set of tasks is not known. It would be helpful if there were a tool that could track the intentions of a user and proffer up a list of options of potential next tasks, based on the user's action.","A context-sensitive design time tool monitors user input during a program development or program maintenance operation and displays an icon when user input triggers a potential next task or tasks. Upon selection of the icon, the tool proffers a list of possible next tasks. Upon selection of an entry in the list, the task is automatically performed.","Exemplary Computing Environment",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},"Although not required, the invention can be implemented via an application programming interface (API), for use by a developer, and\/or included within the network browsing software which will be described in the general context of computer-executable instructions, such as program modules, being executed by one or more computers, such as client workstations, servers, or other devices. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers (PCs), automated teller machines, server computers, hand-held or laptop devices, multi-processor systems, microprocessor-based systems, programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["100","100","100","100"]},"With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus).","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CDROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk , such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB).","A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . A graphics interface , such as Northbridge, may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU, or host processing unit , and assumes responsibility for accelerated graphics port (AGP) communications. One or more graphics processing units (GPUs)  may communicate with graphics interface . In this regard, GPUs  generally include on-chip memory storage, such as register storage and GPUs  communicate with a video memory . GPUs , however, are but one example of a coprocessor and thus a variety of coprocessing devices may be included in computer . A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface , which may in turn communicate with video memory . In addition to monitor , computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","One of ordinary skill in the art can appreciate that a computer  or other client device can be deployed as part of a computer network. In this regard, the present invention pertains to any computer system having any number of memory or storage units, and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment, having remote or local storage. The present invention may also apply to a standalone computing device, having programming language functionality, interpretation and execution capabilities.","Context-Sensitive Help in a Development Environment","A context-sensitive design-time tool dynamically monitors user (e.g., developer) input during software development. When the tool intelligently determines a potential next task or tasks, an icon is generated. Upon selection of the icon, a list of potential next task(s) is displayed. Upon selection of an entry, the task is automatically performed. Automatically-performed tasks include, but are not limited to, automatically inserting code into a source program.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 2","FIG. 2"],"b":["205","203","204","202","201","206","201","206","206"]},"Editor  in one embodiment is part of an Integrated Development Environment (IDE) , and facilitates the development of the source code  of a computer program. Editor  may be a C++ editor, a C# editor, a Visual Basic editor, a J# editor or the like.","Language service  may be optimized for use with Visual C++ code, with Visual C# code, with Visual Basic code, with Visual Java # code or the like. The programming languages anticipated for inclusion in the list of available language services includes the above mentioned, COBOL and any other suitable languages associated with program development.","Language service  may include a dynamic parser as described in U.S. Pat. No. 6,367,068 B1 issued on Apr. 2, 2002, entitled \u201cDynamic Parsing\u201d. Such a parser may operate to parse the source code  according to the parsing rules applicable to the programming language (e.g., a C++ parser, a C# parser, a Visual Basic parser, a J# parser or the like). The parser may parse only a subset of the source code, (e.g., the current function or method being edited). The parser may include heuristics to ignore certain non-fatal errors, such as but not limited to missing statement terminators, missing closing parenthesis, missing function terminators and the like. Similarly language service  may include an automatic statement completion module, an automated help module and\/or a statement building and information tool as described above.","Language service  may include a compiler, such as but not limited to, a C++ compiler, a C# compiler, a Visual Basic compiler and\/or a J# compiler. Typically a compiler includes a parser and a component that builds executable code. A parser receives input in the form of sequential source program instructions, interactive online commands, markup tags, or some other defined interface and breaks them up into parts. For example a parser may break source code into nouns (objects), verbs (methods), and their attributes or options. A parser may also check to see that all necessary input has been provided.","Language service  preferably includes context-sensitive tool . Alternatively, the context-sensitive tool may exist external to language service . The context-sensitive next-task help tool  parses user keystrokes for a triggering character or sequence of characters, as the keystrokes are input. Upon detection of a triggering character or sequence of characters, the tool determines potential next tasks.","For example, in the case of adding method stubs to an interface, entering the interface name as part of the class definition is the triggering event.","For example, suppose the user types:","class CFoo:public IBar","the input of \u201cIBar\u201d following \u201cclass Cfoo:public\u201d triggers the display of an icon. Upon further user input, as described below, the automatic addition of stubs for all the methods of IBar can be effected.","As another example, assume that a developer has written an interface such as the following:",{"@attributes":{"id":"p-0037","num":"0036"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface IEmployee"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"string Name { get; set; }"]},{"entry":[{},"int Age { get; set; }"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Assume also, that the developer has written several classes that implement this interface. Each of these classes therefore have a \u2018Name\u2019 property and an \u2018Age\u2019 property, as required by the contract of the interface.","Next, say the developer realizes that the IEmployee interface also needs a \u2018Salary\u2019 property. Using the code editor, the developer may change the interface to look like this:",{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface IEmployee"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"string Name { get; set; }"]},{"entry":[{},"int Age { get; set; }"]},{"entry":[{},"decimal Salary { get; set; }"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"At the point when the newly added property is complete in the editor, an icon would appear, and when clicked or otherwise selected, an option to automatically add stub implementations of the \u2018Salary\u2019 property to all classes that implement Iemployee would be displayed.","Another exemplary triggering sequence is usage of some specific API (Application Programming Interface) such as \u201cSQLConnect\u201d. Entering \u201cSQLConnect\u201d indicates that the next set of tasks to be performed is to use the SQL connection to retrieve or input data to the database. It should be understood that the particular examples are exemplary only and other suitable triggering sequences are contemplated.","In determining potential next tasks, file\/database  may be accessed. File\/database  may include information on entities in the source code. File\/database  typically is a file comprising a database that, in one embodiment of the invention, is used by the parser to store information including, but not limited to, class definitions, member data types, and reference information such as source file names and line numbers where an identifier, token, or function name is defined or referenced, as described in co-pending application Attorney Docket No. MSFT-1249 filed concurrently herewith, entitled \u201cSystem and Method for Browse Information Parsing Without Compilation\u201d, and is populated and maintained by the parser. File\/database  typically also includes information not only from source code , but also includes information from other sources including system header files, Microsoft Foundation Class (MFC) header files and ActiveX Template Libraries (ATL), all of which are known in the art. In one embodiment of the invention, file\/database  is referred to as a No Compile Browse (NCB) file. File\/database  may include a compiler symbol table (for example, a C# or J# symbol table stored in a database), or a separate file (for example, a C++ file generated by a portion of the language service ). Alternatively, a file or database in memory (not shown) may be accessed, (for example, a Visual Basic compiler symbol table stored in a database in memory). Tables, files, databases and the like, whether stored in memory on persisted to a stable storage medium are contemplated by the invention. Alternatively, file\/database  while appearing as one database to the user, actually may be comprised of multiple stores or databases. For example, a first database (e.g., a project database) may be dynamically updated by the parser, as described above. In addition, the pre-built database may contain information that seldom changes, such as the operating system definitions and header files, and MFC\/ATL class definitions and header files referred to above. Those of ordinary skill in the art will recognize that other class definitions and header files could be included in the pre-built database. One or more pre-built databases may exist.","Continuing the example described above, in which method stubs for an interface can be automatically generated, assume the following line of code was entered:","class CFoo:public IBar","Upon entering \u201cIBar\u201d following \u201cclass CFoo:public\u201d, the methods of IBar are retrieved by accessing database . In this case database  includes a list of all the methods of IBar.","As another example, assume the developer is authoring a new class, and declares it to implement an interface called \u2018IEnumerable\u2019. At this point in accordance with one embodiment of the invention, an icon would be displayed, which, upon selection, provides an entry offering to provide stub implementations of all the members of IEnumerable to the new class, since that is a requirement of implementing the interface. The database  contains the information about the interface IEnumerable, including the names and signatures of the methods it has, what interfaces it extends, etc. It should be understood that the examples recited above are exemplary only and any suitable content for and use of database  is contemplated by the invention.","Thus, in accordance with one embodiment of the invention, the system of  operates as follows. A user (e.g., a developer) drafts source code  with editor . As the developer generates the source code , one of the components of IDE  detects an event and invokes context-sensitive help module . Context-sensitive help module  then displays an icon. If the icon is selected, context-sensitive help module  parses the code fragment using information from file\/database  to provide context-sensitive choices to the developer concerning potential next-tasks. Upon selection of one or more entries, the task or tasks associated with the entry or entries is performed. In one embodiment of the invention, the event invoking the context-sensitive help module  is the entry of certain pre-determined programming-language-defined constructs.","The icon in one embodiment of the invention is displayed in the editor near the triggering character or sequence of characters. In response to user selection of the icon by positioning a cursor over the icon or by selecting the icon in other ways known in the art, a window is generated, displaying a list. The list preferably includes one or more potential next task(s). Upon selection of an entry or a series of entries in the list by clicking on the entry (or entries) or by selecting the entry (or entries) using other ways known in the art, the task associated with the list entry is automatically performed.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 3","FIG. 4"]},"Within a design environment such as an Integrated Design Environment (IDE) , a C++ editor  enables the creation or editing of C++ source code  as depicted in window . Source code  is displayed within window . Context-sensitive help tool  generates icon  when triggered by the keystrokes input by the user. Upon selection of icon , icon  is dismissed and a list  of potential tasks is displayed.","For example, assume that a developer is writing C++ code using the C++ language service . Assume a public interface class: \u201cIFoo\u201d exists in database , interface IFoo having two member methods, method1 and method2. Because IFoo is an interface, method1 and method2 are pure methods and are not implemented. If, for example, a user types \u201cclass MyClass:public IFoo {\u201d into source code , the context-sensitive tool will detect that the user may intend to implement the IFoo interface so that the pure virtual methods of IFoo will need to be overridden in MyClass. Context-sensitive help tool  is triggered by the colon, the colon indicating to the tool  that the word that follows, (i.e., \u201cIFoo\u201d) probably is a class such as an interface or base class). The tool includes heuristics for determining possible next tasks (i.e., implement the interface by overriding any pure methods of interface IFoo) and thereby determines that the user will probably want to write function bodies for method1 and method2. Upon determining the possible next task or tasks, the tool displays an icon  in the vicinity of the user input, indicating that a potential next task has been determined. Upon selection of the icon by hovering the cursor over the icon, or otherwise selecting the icon using methods known in the art, the user is prompted with a statement such as but not limited to: \u201cDo you want to implement stubs for interface IFoo?\u201d. Upon selection of the entry, or otherwise indicating assent, using methods known in the art, the function body stub code would be automatically generated in the user's source code instance. For example, in this case, the following code may be generated:",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"void method 1 ( )"]},{"entry":[{},"{"]},{"entry":[{},"}"]},{"entry":[{},"void method2 ( )"]},{"entry":[{},"{"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"eliminating the need for the user to type in this code, and eliminating any mistakes the user might make in the process, and potentially increasing the productivity of the developer.","In the case of MFC\/ATL in C++, accepting the icon's changes preferably would also involve making the appropriate changes to the COM map, a macro wrapped structure used to track all the interfaces implemented by a given class. While the example above relates to interfaces, it will be understood that the tool is intended to handle regular base classes as well as interfaces. With base classes, a subset or all of the base's virtual methods can be overridden.","Similarly, it should be understood that although the above example is simple, to aid in understanding, the generation of code is not restricted to beginning and ending braces. For example, perhaps method1 is defined with attribute \u201cinteger\u201d. In this case, the return type, in accordance with C++ programming conventions, is an integer, which is reflected in the code generated by the tool. For example, in this case, the tool may generate the following:",{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int method 1 ( )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return 0;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT method1 ( )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"result S_OK;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Similarly, if method1 has an input parameter of int i and an output parameter of an integer pointer, (method1 ([in] int i, [out] int *p); the tool may generate code to make sure that p is not equal to null, and may initialize the pointer so that the following may be generated by the tool:","HRESULT method1 (int i, int *p);",{"@attributes":{"id":"p-0061","num":"0060"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"assert (p \u2260 null);"]},{"entry":[{},"*p=0;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"As much of the function body can be generated as can be determined from the information available. In addition, for example, address modifiers and parameters and the like can be generated.","As another example, in C#, interfaces may be implemented publicly or privately. When stubs are generated, methods can be marked private, in which case the method can only be called by casting an object to that specific interface. The context-sensitive tool provides the option of generating either.","When typing code to make a connection to a database (e.g., SQL\/OleDB), the context-sensitive tool generates code to retrieve a dataset and subsequently close the database, using ATL or SQL or other suitable database-handling languages. For example, suppose a user types the following connection string into source code:","SQL Connect (\u201cDatabase=MySQL, user=Shankar, PWD=\u201chello\u201d).","The context-sensitive tool, triggered in this case by the reference to a database and user followed by the sequence of letter \u201cPWD\u201d, denoting \u201cpassword\u201d, generates an icon which, when selected, proffers the option of hiding the password in a registry, for example. Upon selection of the option, code including that code needed to create the necessary user classes, etc. is generated, the appropriate existing code is removed and replaced with the tool-generated code.","When typing code, if a user sees a squiggly, a wavy line commonly used to denote an error condition of some sort, and hovers over the squiggly, the context-sensitive tool preferably generates an icon proffering ways to correct the code. The fix may include adding a missing semicolon or closing brace, or identifying and correcting a typographical error in an undefined type. Alternatively, Knowledge Base (KB) articles (a good source of information regarding common issues or questions) or websites such as www.msdn.com may be accessed by establishing a connection to the Internet to identify an appropriate correction.","When typing in a declaration of a function or method or other element, implementation can be automatically generated by accessing files generated by a compiler or dynamic parser.","Wizards presently invoked by identifying a correct node and right-clicking on classview followed by filling in requested information are preferably eliminated by providing an option in the list to perform the task previously performed by the wizard.","Preferably, the IDE is open such that third parties can author their own language services, thereby augmenting the features of the standard text editor to conform to their language (such as colorization of their syntax elements, providing formatting and automatic indent capabilities, and the like). Language services are also employed in the environment to provide information to the various browsers and help systems, and also to provide useful information to the debugger if appropriate. In the context of this invention, the language service is given the opportunity to make use of the context-sensitive help functionality in accordance with one embodiment of the invention so as to present the \u201cnext-task\u201d options while editing.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 5","b":"501"},"At step , if it is determined that the keystroke or sequence of keystrokes is not a context-sensitive help trigger, processing returns to step . At step , if it is determined that the keystroke or sequence of keystrokes is a context-sensitive help trigger, a context-sensitive help icon is generated and displayed close to the triggering keystroke(s) at step . At step , if the icon is not selected within a designated time period, the icon is dismissed at step  and processing returns to step . At step , if the icon is selected, a list of entries is generated and displayed at step . The list of entries includes possible next actions that a user might take. If one or more of the entries is selected at step , the action associated with the entry or entries is performed at step  and a section of code within a source code file may be added or a section of code originally included within the source code file may be removed and replaced with a section of code generated by the context-sensitive help engine or a section of code originally included within the source code file may be modified.","For example, suppose a user is modifying the declaration\/definition of a type or method, an icon may be displayed. Upon selection of the icon, an entry may be displayed suggesting to modify all the places where the type\/method is being referenced. Upon selection of the action, all the places where the type\/method are referenced are modified. It should be understood that the example cited is merely exemplary and any suitable actions and entries are contemplated by the invention.","If an entry is not selected at step , the list is dismissed at step , after a specified period of time or upon positioning the cursor elsewhere, and processing returns to step .","It is noted that the foregoing examples have been provided merely for the purpose of explanation and are in no way to be construed as limiting of the present invention. While the invention has been described with reference to various embodiments, it is understood that the words which have been used herein are words of description and illustration, rather than words of limitation. Further, although the invention has been described herein with reference to particular means, materials and embodiments, the invention is not intended to be limited to the particulars disclosed herein; rather, the invention extends to all functionally equivalent structures, methods and uses, such as are within the scope of the appended claims. Those skilled in the art, having the benefit of the teachings of this specification, may effect numerous modifications thereto and changes may be made without departing from the scope and spirit of the invention in its aspects."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of preferred embodiments, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, there is shown in the drawings exemplary constructions of the invention; however, the invention is not limited to the specific methods and instrumentalities disclosed. In the drawings:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
