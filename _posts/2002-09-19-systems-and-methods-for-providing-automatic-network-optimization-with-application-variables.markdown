---
title: Systems and methods for providing automatic network optimization with application variables
abstract: Systems and methods for automatic network optimization with application variables are provided. Operation of a protocol stack, such as an SCP stack, relies upon a number of persistent variables, which are remembered over power and reset cycles, used in connection with controlling protocol timing and behavior. These application variables are handled at the network layer of the protocol and may be assigned values by an address space arbitrator, which is an entity responsible for managing the logical network. Each node member of a logical network maintains a set of values for its application variables. This set can be handled by the protocol's network layer, and can be saved in persisted storage. Since the variable values may be modified asynchronously, they are treated as volatile and thus, when a variable is used, its value is obtained through an application interface exposed by a network layer, e.g., through polling. An exception to this procedure is a data link layer, which obtains some operating parameters on every call by the network layer. Optimization of application variables enables reliable operation of a logical network operating under low bandwidth network conditions, etc.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07453906&OS=07453906&RS=07453906
owner: Microsoft Corporation
number: 07453906
owner_city: Redmond
owner_country: US
publication_date: 20020919
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COPYRIGHT NOTICE AND PERMISSION","FILED OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["A portion of the disclosure of this patent document may contain material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent files or records, but otherwise reserves all copyright rights whatsoever. The following notice shall apply to this document: Copyright \u00a91999-2002, Microsoft Corp.","The present invention is directed to systems and methods for providing automatic network optimization. More particularly, the present invention is directed to systems and methods for providing automatic network optimization with application variables.","Distributed computing is a field of study that has received increased attention and study in recent years, as network interconnectivity, from wired to wireless, of computing devices and objects continues to mature and computing devices and objects of all kinds continue to proliferate. To this end, a variety of protocols can be used to enable computing devices and objects of all sorts to communicate with one another in a manner that is independent of the particularities of the source and target computing devices.","Examples of such protocols that have been developed include Simple Control Protocol (SCP), x10, and CEBus\u00ae. SCP, for instance, is a lightweight device-control protocol that allows manufacturers to create small, intelligent devices that can communicate with each other in a secure and robust manner over low-speed communication networks such as household power lines. With SCP, devices with limited computing power and memory resources\u2014such as light switches, alarm clocks, and appliances\u2014can be part of a peer-to-peer network of other SCP devices. Devices in an SCP network can also participate in more sophisticated Universal Plug and Play (UPnP) networks through a software component called a bridge, such as a UPnP to SCP bridge.","The following examples describe some typical scenarios that SCP and other protocols can make possible. Automated lights and light switches can be enabled using SCP such that light switches and fixtures can be controlled from a PC. A homeowner can change \u201cwhich switches control which lights\u201d without needing to call an electrician to rewire the physical circuits. Interactions among small appliances can also be enabled using SCP. For instance, an alarm clock can automatically start a coffee maker. Interactions among SCP and UPnP devices can also be enabled using SCP. For instance, a homeowner can place a tape in a UPnP-capable VCR and press \u201cPlay.\u201d The VCR then sends a UPnP event to a rules engine, which places the room into a home theater mode. The rules engine then turns the UPnP TV on and connects it to the VCR audio and video outputs. Then, through an SCP to UPnP bridge, the engine tells the SCP room lights to dim and closes the SCP blinds.","One can thus readily see that SCP, and other logical networks like SCP, are powerful vehicles for communication across a variety of computing devices. One can also appreciate that a variety of scenarios are possible with SCP, when one considers the possibility of any computing device or object being able to communicate simply and easily with any other computing device or object.","However, the above-described scenarios presume ideal, or near ideal, network conditions, and in contrast, often the actual physical medium utilized for communications in a logical network is not ideal. For instance, in the case of power line communications, data is not always guaranteed to arrive at its destination, or when it does, there may be some interference along the way that distorts the data or renders it unrecognizable. Similarly, on the reception side of data communications, interference can also be of impact. For instance, with compact fluorescent bulbs, there can sometimes be bad switching harmonic energy that interferes with data communications. Certain types of data modulation, while more expensive, can more reliably communicate data and thus, a set of network tuning parameters would be desirable for dynamic tuning of a network according to its condition(s). For another example, there are times when an acknowledgement of a unicast message is not received, and accordingly, it is unknown what happened to the unicast message. In certain circumstances, it would be desirable for the message to be re-unicast, and in some cases re-unicast multiple times. In connection with such logical network(s), therefore, it would be desirable to provide handling of application variables across logical network(s) for dynamic tuning of the logical network(s) according to the optimal conditions of the network. It would be further desirable to provide improved optimization of application variables across the logical network.","In view of the foregoing, the present invention provides systems and methods for automatic network optimization with application variables. Operation of a stack of a protocol, such as an SCP stack, relies upon a number of persistent variables, which are remembered over power and reset cycles, used to control protocol timing and behavior. These application variables are handled at the network layer of the protocol and may be assigned values by an address space arbitrator, which is an entity responsible for managing the logical network. Each node member of a logical network maintains a set of values for its application variables. This set can be handled by the protocol's network layer, and can be saved in persisted storage. Under normal operating circumstances, the values of the variables are the same for every node on the logical network. Since the variable values may be modified asynchronously, they are treated as volatile and thus, when a variable is used, its value is obtained through an application interface exposed by the network layer, e.g., through polling. An exception to this procedure is the data link layer, which obtains some operating parameters on every call by the network layer. The invention thus provides for optimization of application variables for reliable operation of a logical network operating under low bandwidth network conditions.","Other features and embodiments of the present invention are described below.","Overview","As described above, there is a need for improved optimization and handling of application variables across a logical network. The systems and methods of the invention thus provide automatic network optimization with application variables. In this regard, a stack of a network protocol relies upon various persistent variables, i.e., the variables are remembered over power and reset cycles, which variables control protocol timing and behavior. The application variables of the invention are handled at the network layer of the protocol and may be assigned values by an Address Space Arbitrator (ASA), the entity responsible for managing the logical network. These updates are transparent for the other layers of the protocol. Application variables allow dynamic tuning and optimization of the protocol under various operating conditions, which can be important for reliable operation on a low bandwidth physical media. Each node member of a logical network maintains a set of values for its application variables. This set is handled by the protocol's network layer, and saved in persisted storage, e.g., EEPROM. Some application variables are specific to the physical network, some are specific to the logical network. These application variables can be the same for every node on the logical network. Other application variables can be node specific. Since the variable values may be modified asynchronously, they must be treated as volatile. When a variable is used, its value can be obtained through an application interface exposed by the network layer. An exception applies to a data link layer, which obtains the operating parameters specified by application variables on every call by the network layer.","Exemplary Logical Network\u2014Overview of Simple Control Protocol (SCP)","As mentioned, embodiments of the invention apply to protocols. An overview of SCP is provided herein. Various implementations of SCP support networks that use standard electrical wiring as the physical medium connecting the devices, e.g., the Power Line Carrier (PLC) implementation of SCP. Other SCP implementations for other physical network media such as radio frequency and infrared transmissions can also be utilized.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["240","200","210","200","200","200"],"i":["asa, ","asa "]},"A protocol comprises an application protocol (AP) and a network control protocol. The application protocol side implements a session layer , a transport layer  and a network layer  which handle operations, transactions and messages, respectively. A data link layer  resides on top of the physical medium , and handles the message packets  delivered and received by the network layer . A protocol encrypts and decrypts communications for security purposes. Message communications make use of a logical address that includes a net ID , a node ID  and a network key , as illustrated in . These enable all nodes associated in a logical network to share a secret, which allows for each to communicate securely with other nodes on the logical network.","An SCP device is a component that uses the SCP to communicate with other devices connected to the same physical medium. SCP accommodates both \u201chard\u201d and \u201csoft\u201d devices. A hard device is a piece of hardware such as a dimmer switch or a motion sensor. For hard devices, SCP is implemented as a set of integrated circuit (IC) chips that handle all of the protocol-level communication tasks for a device. This chipset, when added to a device, forms a communication subsystem that handles of the protocol-level communication tasks for the device.","A soft device is a software application that runs on a PC under the SCP device emulation environment. This environment emulates the communication subsystem provided by the SCP chipset and allows multiple soft devices running on the same PC to share the same channel of communications to the physical network.","At its simplest, an SCP network consists of two or more SCP devices and the physical medium connecting the devices. A network can also include other software components that run on a PC, such as the SCP to UPnP bridge, the Address-Space Arbitrator, and the Physical Network Manager.","The SCP to UPnP bridge is a special soft device that allows SCP devices to interoperate with UPnP devices. The bridge extends the full capabilities of UPnP to small devices that are not capable of implementing TCP\/IP and native UPnP stacks. For example, the bridge allows the properties of an SCP device to be set by using messages sent across a TCP\/IP network. All SCP device property relationships are established at the UPnP level through the bridge and propagate down to the SCP device level. The bridge also allows SCP devices to interoperate with devices that use other control protocols. If a bridge exists between those devices and a UPnP network, SCP devices can use UPnP as a common communication language.","The Address-Space Arbitrator (ASA) is another special soft device that forms and manages a logical network of SCP devices. A logical network is a group of devices that are logically separate from other devices connected to the same physical network medium. SCP can support one or more logical networks within the same physical network. For example, a physical network can include a logical network for security devices, another for lighting devices, and yet another for audio-visual equipment. Logical networks are also used in environments such as apartment buildings where adjacent apartments share the same power line. Each apartment uses its own logical network so it does not interfere with the operation of the devices in a neighboring apartment.","The Physical Network Manager is a software component that runs on a PC. It manages the connection to the physical network, allowing multiple soft devices running on the same PC to share the same connection.","An SCP device presents itself on the network as a root device with optional nested sub-devices. Each device (or sub-device) supports one or more services. A service consists of a group of related properties and actions. Properties describe the state of a service, and actions change or access the state of a service. Taken together, the sub-devices, services, properties, and actions of a device are called its device model. The SCP device model is analogous to a programming object, where an object interface provides access to a set of properties and methods that operate on and describe the state of the object.","The SCP device model is based on the UPnP device model, e.g., the device model for an SCP device is a UPnP device description that has been augmented with SCP data. As a device developer, a device model is developed for the device, creating a binary version that the device uses at runtime.","SCP devices work by exposing their properties and actions to other devices, and by using operations to access the properties and actions of other devices on the network. The operation is the fundamental unit of communication among devices. A device uses operations to set and retrieve property values on other devices, to invoke actions on other devices, and to notify other devices when the value of a property changes.","Devices use operations to accomplish many tasks, and one of the primary tasks involves implementing subscriptions. A subscription is a relationship that one device, called the subscriber, sets up between itself and a property on another device, called the publisher. After a subscription is established, the publisher sends notification messages to the subscriber whenever the value of the property changes.","Devices use subscriptions as the basis for setting up property routes. A property route is a one-way connection between two properties: a source property on a publisher device and a destination property on a subscriber device. When the value of the source property changes on publisher device, the subscriber device updates its destination property with the new value.","To illustrate how subscriptions and property routes work, consider a device that exposes a simple timer service consisting of three properties: Increment, which specifies the timer countdown increment in milliseconds; Value, which specifies the current countdown time; and Trigger, which changes from False to True when Value goes to zero. The service also has three actions: Start, Stop and SetValue. For example, if it is desired that the Timer turn on some lights when the Timer's Value property goes to zero, a third-party (for example, a configuration utility) can tell each light to subscribe to the Timer's Trigger property and create a route between that property and the light's Intensity property. Then, when Trigger property becomes True, each light's Intensity property also changes to True, and the lights come on.","One creates an SCP device by integrating the SCP communication subsystem into the device. For a hard device, this involves incorporating the SCP chipset into the circuitry of the device. For a soft device, it involves implementing code in a Windows application that takes advantage of the SCP emulation environment.","The application subsystem connects to the SCP communication subsystem through a serial peripheral interface (SPI) connection. One of the main tasks (besides creating the device model) is to implement a software interface to the SPI connection that allows the device application, running on the application processor, to communication with the communication subsystem. Code is also implemented that allows the device application to control the communication subsystem, using it to communicate with other devices on the network.","To summarize, creating an SCP device involves accomplishing the following tasks. (1) Creating the device model that defines the services, properties, and actions provided by the device, (2) Implementing code in your device application that supports the SPI connection between the application subsystem and the SCP communication subsystem and (3) Implementing code in the application-processor that interacts with the communication subsystem to communicate with other devices in the network.","Commonly-assigned copending U.S. patent application Ser. No. 09\/556,279 (the '279 application), entitled \u201cSystem for Networked Component Address and Logical Network Formation and Maintenance\u201d describes a system for forming and maintaining one or more networks of devices connected to a shared media is provided. Aspects of the '279 application include processes for: (a) forming a logical network on the shared media; (b) discovering devices connected to the shared medium; (c) assigning (or acquiring) devices to a logical network; and (d) maintaining a logical network. Another aspect of the '279 application also defines a message format and protocol for communication over the shared media. The protocol uses a two-level address scheme (e.g., a logical network ID and a device ID) and defines several message types used to support the above processes and other useful features. Each device is expected to have a globally unique device ID, called the Device Serial Number (DSN).","A logical network includes an address space arbiter (ASA) and, typically, one or more devices attached to the shared media. An acquisition authority (AA), interacting with the ASA, is required to complete acquisition of a device by a logical network.","An ASA can form a logical network by selecting a possible logical network ID, when first attached to the physical media. The ASA then broadcasts a message addressed to the entire network to determine whether the possible ID is already taken. If the possible ID is not taken, the ASA adopts the ID as its logical network ID and can begin acquiring devices.","To join a logical network, a device attached to the shared media broadcasts an announce message addressed to the entire shared media. This is initiated at the request of an ASA attached to the shared media. ASAs receiving the announce message then determine whether the device is a \u201cdiscovered\u201d device. If the device is also not acquired, the AA decides whether to authorize the ASA to acquire the discovered device. If authorized, the ASA then assigns an available device ID to the device. The device ID must be unique within the logical network, but does not necessarily have to be globally unique. The ASA helps maintain the logical network by periodically sending a message to each device of the logical network and waiting for the appropriate response from that device.","One advantage is that the system provides a simple way to segment a shared media into several logical networks. In addition, the system provides an easy-to-use mechanism for connecting devices to a network suitable for the general public.","Exemplary Networked and Distributed Environments","One of ordinary skill in the art can appreciate that a computer or other client or server device can be deployed as part of a computer network, or in a distributed computing environment. In this regard, the present invention pertains to any computer system having any number of memory or storage units, and any number of applications and processes occurring across any number of storage units or volumes, which may be used in connection with the application variables of the invention. The present invention may apply to an environment with server computers and client computers deployed in a network environment or distributed computing environment, having remote or local storage. The present invention may also be applied to standalone computing devices, having programming language functionality, interpretation and execution capabilities for generating, receiving and transmitting information in connection with remote or local services.","Distributed computing facilitates sharing of computer resources and services by direct exchange between computing devices and systems. These resources and services include the exchange of information, cache storage, and disk storage for files. Distributed computing takes advantage of network connectivity, allowing clients to leverage their collective power to benefit the entire enterprise. In this regard, a variety of devices may have applications, objects or resources that may implicate the application variables of the invention.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 3A","FIG. 3A"],"b":["10","10","110","110","110","14","10","10","110","110","110"],"i":["a, ","b, ","a, ","b, ","c, ","a, ","b, ","a, ","b, ","c, "]},"In a distributed computing architecture, computers, which may have traditionally been used solely as clients, communicate directly among themselves and can act as both clients and servers, assuming whatever role is most efficient for the network. This reduces the load on servers and allows all of the clients to access resources available on other clients, thereby increasing the capability and efficiency of the entire network. Services that use the application variables in accordance with the present invention may thus be distributed among clients and servers, acting in a way that is efficient for the entire network.","Distributed computing can help businesses deliver services and capabilities more efficiently across diverse geographic boundaries. Moreover, distributed computing can move data closer to the point where data is consumed acting as a network caching mechanism. Distributed computing also allows computing networks to dynamically work together using intelligent agents. Agents reside on peer computers and communicate various kinds of information back and forth. Agents may also initiate tasks on behalf of other peer systems. For instance, intelligent agents can be used to prioritize tasks on a network, change traffic flow, search for files locally or determine anomalous behavior such as a virus and stop it before it affects the network. All sorts of other services may be contemplated as well. Since data may in practice be physically located in one or more locations, the ability to distribute services that make use of the application variables described herein is of great utility in such a system.","It can also be appreciated that an object, such as may be hosted on another computing device etc. or etc. Thus, although the physical environment depicted may show the connected devices as computers, such illustration is merely exemplary and the physical environment may alternatively be depicted or described comprising various digital devices such as PDAs, televisions, MP3 players, etc., software objects such as interfaces, COM objects and the like.","There are a variety of systems, components, and network configurations that support distributed computing environments. For example, computing systems may be connected together by wired or wireless systems, by local networks or widely distributed networks. Currently, many of the networks are coupled to the Internet, which provides the infrastructure for widely distributed computing and encompasses many different networks.","In home networking environments, there are at least four disparate network transport media that may each support a unique protocol, such as Power line, data (both wireless and wired), voice (e.g., telephone) and entertainment media. Most home control devices such as light switches and appliances may use power line for connectivity. Data Services may enter the home as broadband (e.g., either DSL or Cable modem) and are accessible within the home using either wireless (e.g., HomeRF or 802.11b) or wired (e.g., Home PNA, Cat 5, even power line) connectivity. Voice traffic may enter the home either as wired (e.g., Cat 3) or wireless (e.g., cell phones) and may be distributed within the home using Cat 3 wiring. Entertainment media, or other graphical data, may enter the home either through satellite or cable and is typically distributed in the home using coaxial cable. IEEE 1394 and DVI are also emerging as digital interconnects for clusters of media devices. All of these network environments and others that may emerge as protocol standards may be interconnected to form an intranet that may be connected to the outside world by way of the Internet. In short, a variety of disparate sources exist for the storage and transmission of data, and consequently, moving forward, computing devices will require ways of sharing data, such as data accessed or utilized incident to program objects, which make use of application variables in accordance with the present invention.","The Internet commonly refers to the collection of networks and gateways that utilize the TCP\/IP suite of protocols, which are well-known in the art of computer networking. TCP\/IP is an acronym for \u201cTransport Control Protocol\/Interface Program.\u201d The Internet can be described as a system of geographically distributed remote computer networks interconnected by computers executing networking protocols that allow users to interact and share information over the networks. Because of such wide-spread information sharing, remote networks such as the Internet have thus far generally evolved into an open system for which developers can design software applications for performing specialized operations or services, essentially without restriction.","Thus, the network infrastructure enables a host of network topologies such as client\/server, peer-to-peer, or hybrid architectures. The \u201cclient\u201d is a member of a class or group that uses the services of another class or group to which it is not related. Thus, in computing, a client is a process, i.e., roughly a set of instructions or tasks, that requests a service provided by another program. The client process utilizes the requested service without having to \u201cknow\u201d any working details about the other program or the service itself. In a client\/server architecture, particularly a networked system, a client is usually a computer that accesses shared network resources provided by another computer, e.g., a server. In the example of , computers etc. can be thought of as clients and computer etc. can be thought of as the server where server etc. maintains the data that is then replicated in the client computers etc.","A server is typically a remote computer system accessible over a remote network such as the Internet. The client process may be active in a first computer system, and the server process may be active in a second computer system, communicating with one another over a communications medium, thus providing distributed functionality and allowing multiple clients to take advantage of the information-gathering capabilities of the server.","Client and server communicate with one another utilizing the functionality provided by a protocol layer. For example, Hypertext-Transfer Protocol (HTTP) is a common protocol that is used in conjunction with the World Wide Web (WWW). Typically, a computer network address such as a Universal Resource Locator (URL) or an Internet Protocol (IP) address is used to identify the server or client computers to each other. The network address can be referred to as a URL address. For example, communication can be provided over a communications medium. In particular, the client and server may be coupled to one another via TCP\/IP connections for high-capacity communication. SCP, x10 and CEBus\u00ae are other examples of protocols used for logical network(s).","Thus,  illustrates an exemplary networked or distributed environment, with a server in communication with client computers via a network\/bus, in which the present invention may be employed. In more detail, a number of servers etc., are interconnected via a communications network\/bus , which may be a LAN, WAN, intranet, the Internet, etc., with a number of client or remote computing devices etc., such as a portable computer, handheld computer, thin client, networked appliance, or other device, such as a VCR, TV, oven, light, heater and the like in accordance with the present invention. It is thus contemplated that the present invention may apply to any computing device in connection with which it is desirable to implement logical network(s).","In a network environment in which the communications network\/bus  is the Internet, for example, the servers etc. can be Web servers with which the clients etc. communicate via any of a number of known protocols such as HTTP. Servers etc. may also serve as clients etc., as may be characteristic of a distributed computing environment. Communications may be wired or wireless, where appropriate. Client devices etc. may or may not communicate via communications network\/bus , and may have independent communications associated therewith. For example, in the case of a TV or VCR, there may or may not be a networked aspect to the control thereof. Each client computer etc. and server computer etc. may be equipped with various application program modules or objects  and with connections or access to various types of storage elements or objects, across which files may be stored or to which portion(s) of files may be downloaded or migrated. Any computer etc. may be responsible for the maintenance and updating of a database  or other storage element in accordance with the present invention, such as a database or memory  for storing application variable(s) or data processed according to the invention. Thus, the present invention can be utilized in a computer network environment having client computers etc. that can access and interact with a computer network\/bus  and server computers etc. that may interact with client computers etc. and other like devices, and databases .","Exemplary Computing Device",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 3B"},"Although not required, the invention can be implemented via an operating system, for use by a developer of services for a device or object, and\/or included within application software that operates in connection with application variables of the invention. Software may be described in the general context of computer-executable instructions, such as program modules, being executed by one or more computers, such as client workstations, servers or other devices. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations and protocols. Other well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers (PCs), automated teller machines, server computers, hand-held or laptop devices, multi-processor systems, microprocessor-based systems, programmable consumer electronics, network PCs, appliances, lights, environmental control elements, minicomputers, mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network\/bus or other data transmission medium. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices, and client nodes may in turn behave as server nodes.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 3B","b":["100","100","100","100"]},"With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus).","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CDROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk , such as a CD-ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A graphics interface , such as Northbridge, may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU, or host processing unit , and assumes responsibility for accelerated graphics port (AGP) communications. One or more graphics processing units (GPUs)  may communicate with graphics interface . In this regard, GPUs  generally include on-chip memory storage, such as register storage and GPUs  communicate with a video memory , wherein the application variables of the invention may have impact. GPUs , however, are but one example of a coprocessor and thus a variety of coprocessing devices may be included in computer , and may include a variety of procedural shaders, such as pixel and vertex shaders. A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface , which may in turn communicate with video memory . In addition to monitor , computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked or distributed environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks\/buses. Such networking environments are commonplace in homes, offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Exemplary Distributed Computing Frameworks or Architectures","Various distributed computing frameworks have been and are being developed in light of the convergence of personal computing and the Internet. Individuals and business users alike are provided with a seamlessly interoperable and Web-enabled interface for applications and computing devices, making computing activities increasingly Web browser or network-oriented.","For example, MICROSOFT\u00ae's .NET platform includes servers, building-block services, such as Web-based data storage and downloadable device software. Generally speaking, the .NET platform provides (1) the ability to make the entire range of computing devices work together and to have user information automatically updated and synchronized on all of them, (2) increased interactive capability for Web sites, enabled by greater use of XML rather than HTML, (3) online services that feature customized access and delivery of products and services to the user from a central-starting point for the management of various applications, such as e-mail, for example, or software, such as Office .NET, (4) centralized data storage, which will increase efficiency and ease of access to information, as well as synchronization of information among users and devices, (5) the ability to integrate various communications media, such as e-mail, faxes, and telephones, (6) for developers, the ability to create reusable modules, thereby increasing productivity and reducing the number of programming errors and (7) many other cross-platform integration features as well.","Automatic Network Optimization Using Application Variables","Application variables allow dynamic tuning and optimization of the protocol of logical network(s) under various operating conditions, which enables reliable operation in connection with low bandwidth physical media. When very high bandwidth physical media is utilized, some inefficiency can potentially be afforded because such inefficiency is hardly noticed from a performance perspective. When a lower bandwidth physical media, such as PLC, is utilized, however, with potential noise considerations as well, dynamic tuning of the network conditions is desirable. For instance, it may be the case that certain message requests from a particular client\/server node combination reach the server node quickly and efficiently, however, the return responses to the client over the same physical media periodically are lost, or arrive late. In such a case, it would be desirable to dynamically determine that increased attention to the return responses is desirable. Since such inefficiencies with the return responses may occur intermittently and infrequently, it would be desirable to be able to dynamically make such determinations. What follows in the below exemplary embodiments of the invention are exemplary non-limiting application parameters that may be utilized to tune the network optimally to operating conditions.","Each node member of an SCP logical network maintains a set of values for its application variables. This set is handled by the protocol's network layer, and saved in persisted storage, typically in EEPROM. Some values of the application variables are the same for every node on the logical network, e.g., application variables relating to the physical network and application variables related to the logical network, whereas other values of the application variables can be node-specific.","Since the variable values may be modified asynchronously, they are treated as volatile; thus, when a variable is used, the value of the variable is obtained, e.g., by polling, through an application interface exposed by the network layer. An exception to this general rule resides in the data link layer, situated below the network layer in the Open Systems Interconnection (OSI) model, for instance, which obtains some operating parameters on every call by the network layer.","OSI is a standard description or reference model for how messages should be transmitted between any two points in a telecommunication network. Its purpose is to guide product implementers so that their products will consistently work with other products. The reference model defines seven layers of functions that take place at each end of a communication. Although OSI is not always strictly adhered to in terms of keeping related functions together in a well-defined layer, many if not most products involved in telecommunication make an attempt to describe themselves in relation to the OSI model.","In accordance with the invention, the network control protocol handler, a component of the network layer, handles the servicing of the application variables as follows: (1) the network control protocol handler handles persistence of the variables value in storage, (2) the network control protocol handler provides the value of any variable to other protocol layers through an application interface, (3) the network control protocol handler accepts new variables values at the time the device is assigned to a logical network by the ASA, e.g., through a NetAssign message, (4) the network control protocol handler accepts and acknowledges new variables values when instructed so by the ASA, e.g., through a WriteVars message and (5) provides the values of its variables when asked by the ASA, e.g., through a ReadVars message.","The ASA updates application variables when a node is assigned to its logical network. The ASA can pass the variables through a NetAssign message along with the logical network information. This allows each node new to a network to become online with the right set of parameters.","The ASA also updates application variables when the network conditions have changed such that the variables need to be updated. The ASA can broadcast new application variables to all nodes on the logical network through a WriteVars message and each node acknowledges the message, e.g., using an exponential back off so that the communication channel is not flooded.","The ASA can use unicast ReadVars and WriteVars messages to verify and update nodes that may have missed the broadcast update, e.g., for nodes that were offline at the time of the update.","As mentioned above, operation of the protocol stack depends upon a number of persistent variables, remembered over power and reset cycles, which control protocol timing. These variables can have numeric identifiers, such as the exemplary set of variables listed in Tables VI, VII, VIII and IX below. Typically, a central facility, like the ASA, coordinates the application variables across all nodes within a given logical network. If a variable is changed for the network, the ASA continues to monitor for devices coming online that are to be updated with the current values. Mismatching application variable values can lead to a dysfunctional logical network.","Thus, when the ASA assigns network membership to a device according to the invention, it may reset any application variables. Afterwards, application variables can be changed, but care is taken to keep the values consistent across all nodes in a network. Application variables can be changed using NetAssign message(s). Application variables can be read\/changed using Read\/Write variable(s).","A set of diagnostic counters can be read using Read variable's Request\/Response network control protocol (NCP) messages for the purpose of tuning the network. The NCP is a media dependent protocol and is used to communicate across the entire physical network. The primary purpose of the NCP is to support the formation and maintenance of logical networks, while the purpose of the application protocol (AP) is to support peer-to-peer communication between nodes within a particular logical network.","Application variables are thus network tuning parameters for a logical network. Application variables can be distributed in a couple of different ways. Application variables can be set during a node acquisition step. Alternatively, application variables can be set by default into a device or object. For instance, an exemplary embodiment of a hypothetical device communicating over PLC is illustrated in . The device can have a processor  and a communications protocol controller chip , such as Itran\u00ae's IT800 chip, which is \u201cSCP ready.\u201d Chip  is connected to analog coupling circuitry , which in turn is connected to a power line . Application variables can be burned into EEPROM  in accordance with the invention. Any can be defaulted by the manufacturer. In this regard, in one embodiment, the application variables comprises a variable length table maintained by the network layer. This alternate option enables manufacturers a chance to write default variables.","As mentioned, some application variables are specific to the logical network, some are specific to the physical network and some are specific to particular nodes. Application variables can be dynamically changed during optimization of the system. The concepts behind application variables may be more broadly extended to protocol variables, some of which are described below.","In one non-limiting embodiment, an application variables element in a network membership assignment message and an application variables access message is a variable-length list of up to 32 variables, prefixed by a header, which consists of one or more bytes, interpreted as a list of two-bit nibbles. Each nibble value in the header represents the size of the protocol variable in the list (in the same order). The variable values list starts on the first byte following the header, and is interpreted as a list of four-bit nibbles. Each value is composed of 1, 2 or 4 nibbles from the stream, which can be interpreted in big-endian format, as defined by the header. It is noted that the variables list may be empty if the first nibble in the header is 0.","AP variables can be updated in three main ways in accordance with the invention. First, AP variables can be set by the manufacturer by default, as mentioned. Second, the ASA can update AP variables at the time of node acquisition via a NetAssign message. A NetAssign HiSec message exists for high security communications. Third, the ASA can update AP variables during network tuning via a Write VarsReq. Message.","The NCP_ReadVarsReq message is a protocol variables read request. A requesting device, typically an ASA, sends the NCP_ReadVarsReq message to request that the targeted node return the protocol variables requested via an NCP_ReadVarsResp message. Fields of the NCP_ReadVarsReq message include the following from Table I.",{"@attributes":{"id":"p-0087","num":"0086"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE I"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Fields of the NCP_ReadVarsReq message"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Description","Octets"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NCP_NetTime","Network time in milliseconds (in the","4"]},{"entry":[{},"clear)"]},{"entry":["NCP_ReqVarsRequested","Protocol variables requested","0.5"]},{"entry":["NCP_ReqTargetNodeId","Node ID of target device","1.5"]},{"entry":["NCP_ReqCount","Request counter (sent back in a","2"]},{"entry":[{},"corresponding response message)"]},{"entry":["NCP_MAC","Message authentication code (covers","4"]},{"entry":[{},"the NCP message type followed by"]},{"entry":[{},"all the above fields)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0088","num":"0087"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE II"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Values of the NCP_ReqVarsRequested field"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NCP_ReqVarsRequested","Protocol variables requested"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["0","application variables"]},{"entry":["1","data link configuration variables1"]},{"entry":["2","data link configuration variables2"]},{"entry":["8","Physical layer diagnostic counters (read"]},{"entry":[{},"only)"]},{"entry":["9","Data Link layer diagnostic counters"]},{"entry":["10\u2002","Media Access Control diagnostic counters"]},{"entry":["11\u2002","Network layer diagnostic counters"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The targeted node ignores the NCP_ReadVarsReq message if it is accidentally sent with an NCP_ReqTargetNodeId parameter with a value of the broadcast address (zero).","To allow correlation between requests and responses, the NCP_ReqCount parameter is a value the device should return in the corresponding NCP_ReadVarsResp message.","If the requesting device does not receive a response within a media-specific period of time, the requesting device missed the response or the targeted device did not receive the request. In this case, the requesting device makes a media-specific number of retry attempts prior to assuming an error situation exists.","The NCP_ReadVarsResp message is a protocol variables read response. A device sends the NCP_ReadVarsResp message in response to any NCP_ReadVarsReq message that it receives. Fields of the NCP_ReadVarsResp message include the following from Table III.",{"@attributes":{"id":"p-0093","num":"0092"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE III"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Fields of the NCP_ReadVarsResp message"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Description","Octets"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NCP_NetTime","Network time in milliseconds (in the","4"]},{"entry":[{},"clear)"]},{"entry":["NCP_ReqVarsRequested","Protocol variables requested (from","0.5"]},{"entry":[{},"the request message)"]},{"entry":["NCP_SourceNodeId","Node ID of replying device","1.5"]},{"entry":["NCP_ReqCount","Request counter (from the request","2"]},{"entry":[{},"message)"]},{"entry":["NCP_VarsValues","Protocol variables values stream","up to 64"]},{"entry":["NCP_MAC","Message authentication code (covers","4"]},{"entry":[{},"the NCP message type followed by"]},{"entry":[{},"all the above fields)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The NCP_VarsValues field includes a header followed by the actual variables. Each 2-bit value in the header specifies the size of the corresponding protocol variable. The following table III-A lists the possible values of each 2-bit value and that value's significance.",{"@attributes":{"id":"p-0095","num":"0094"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE III-A"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Protocol Variables Values"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Value","Significance"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["1","Corresponding variable is 4-bits in length."]},{"entry":["2","Corresponding variable is 1 byte in length."]},{"entry":["3","Corresponding variable is 2 bytes in length."]},{"entry":["0","Identifies end of header. (Subsequent bytes contain actual variable"]},{"entry":[{},"data.)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"For example, if the NCP_VarsValues field is 0x 56C0ABCDEF023, there would be a total of five variables in the stream with decimal values of: 10, 11, 12, 222 and 61,475 respectively.","The NCP_WriteVarsReq message is a protocol variables write request. A requesting device, typically an ASA, sends the NCP_WriteVarsReq message to request that the targeted node updates its protocol variables to the values passed in the message. Each targeted node replies with an NCP_WriteVarsResp message upon successfully updating its variables. This message may be broadcast such that all nodes on the logical network are targeted at once. Fields of the NCP_WriteVarsReq message include the following from Table IV.",{"@attributes":{"id":"p-0098","num":"0097"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE IV"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Fields of the NCP_WriteVarsReq message"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Description","Octets"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NCP_NetTime","Network time in milliseconds (in the","4"]},{"entry":[{},"clear)"]},{"entry":["NCP_ReqVarsRequested","Protocol variables requested","0.5"]},{"entry":["NCP_ReqTargetNodeId","Node ID of target device","1.5"]},{"entry":["NCP_ReqCount","Request counter (sent back in a","2"]},{"entry":[{},"corresponding response message)"]},{"entry":["NCP_VarsValues","Protocol variables values stream","up to 64"]},{"entry":["NCP_MAC","Message authentication code (covers","4"]},{"entry":[{},"the NCP message type followed by"]},{"entry":[{},"all the above fields)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"In one embodiment, only application variables can be written according to the NCP_WriteVarsReq message. To allow correlation between requests and responses, the NCP_ReqCount parameter is a value a device returns in the corresponding NCP_WriteVarsResp message. If the requesting device does not receive a response within a media-specific period of time, it may be presumed the requesting device missed the response or the targeted device did not receive the request. In this case, the requesting device makes a media-specific number of retry attempts prior to assuming an error situation exists.","Generally, read messages and write messages occur on a relatively frequent basis. Write messages can be unicast or broadcast in accordance with the invention. Additionally, generally, only the minimum number of application variables that are needed to make a determination are used for efficiency.","An NCP_WriteVarsResp message is a protocol variable write response. A device sends the NCP_WriteVarsResp message in response to a NCP_WriteVarsReq message that it receives. Fields of the NCP_WriteVarsResp message include the following from Table V.",{"@attributes":{"id":"p-0102","num":"0101"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE V"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Fields of the NCP_WriteVarsResp message"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Description","Octets"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NCP_NetTime","Network time in milliseconds (in the","4"]},{"entry":[{},"clear)"]},{"entry":["NCP_ReqVarsRequested","Protocol variables requested (from","0.5"]},{"entry":[{},"the request message)"]},{"entry":["NCP_SourceNodeId","Node ID of replying device","1.5"]},{"entry":["NCP_ReqCount","Request counter (from the request","2"]},{"entry":[{},"message)"]},{"entry":["NCP_MAC","Message authentication code (covers","4"]},{"entry":[{},"the NCP message type followed by"]},{"entry":[{},"all the above fields)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"When the request message is broadcast, replying nodes back off their reply up to a delay amount, defined by a delay application variable, eScpAPVars_Net_NCPTxHoldoffDelay.","The following variables and corresponding non-limiting default values for an exemplary SCP\/PLC implementation are illustrated in Tables VI, VII, VIII, IX and X corresponding to data link layer variables, network time synchronization variables, network presence variables, network layer variables and transport layer variables, respectively. Unless stated otherwise, times are in seconds.",{"@attributes":{"id":"p-0105","num":"0104"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE VI"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Data Link Layer"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ID","Name","Time"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["20","Blocked Transmit Timeout Ms","1500"]},{"entry":["21","Broadcast Burst Count","0 (implies send once in robust"]},{"entry":[{},{},"mode)"]},{"entry":["22","ACK Retry Count","3"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0106","num":"0105"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE VII"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Network Time Synchronization"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ID","Name","Time"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["1","Poll Holdoff Delay Ms","2000"]},{"entry":["2","Master Holdoff Delay Ms","1000"]},{"entry":["3","Query Poll Time","\u2003\u20025"]},{"entry":["4","Master Declaration Wait","\u200320"]},{"entry":["5","Subordinate Declaration Wait","\u2002150"]},{"entry":["6","Declaration Poll Time","\u200360"]},{"entry":["7","Master Response Wait","\u2003\u20028"]},{"entry":["8","Maximum Message Skew","\u2003\u20025"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0107","num":"0106"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE VIII"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Network Presence"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ID","Name","Time"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["\u20029","Slow Node Presence Base Id","1024"]},{"entry":["10","Fast Node Presence Refresh","\u200310"]},{"entry":["11","Fast Node Presence Timeout","\u200325"]},{"entry":["12","Slow Node Presence Refresh","\u200360"]},{"entry":["13","Slow Node Presence Timeout","\u2002150"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0108","num":"0107"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE IX"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Network Layer"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ID","Name","Time"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["14","Message Assembly Timeout","\u20023"]},{"entry":["15","NCP Transmit Holdoff Delay","10"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0109","num":"0108"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE X"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Transport Layer"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ID","Name","Time"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["16","Max Request Retry Count","3"]},{"entry":["17","Reply Wait Timeout Ms","1000 milliseconds"]},{"entry":["18","Max Reply Retry Count","4"]},{"entry":["19","Reply ACK Wait Timeout Ms","1000 milliseconds"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"In general, application variables in accordance with the invention can be thought of as relating to any one or more of the following concepts pertaining to network conditions: data link, time, presence, network and transport. Any one or more values from application variables can be determined to calculate the optimal conditions for the network operation, i.e., path qualities can be observed per addressor\/addressee and accumulated across the network in order to dynamically determine the best way to communicate data from one point in the network to another point. For instance, weak transmitters of data can be afforded specialized treatment, for instance, by using a more reliable modulation type applied to the data transmission. Weak receptors can be treated in a customized manner as well. In one embodiment NCP  effects distributed network management in accordance with a high level view of what is occurring across the network.","Application variables relating to timing can apply to a variety of communications and parameters. For instance, application variables include adaptive back off parameters, which are timing windows for communications. Application variables include thresholds for certain conditions, such as when to timeout on missing packets.","Network time synchronization is also relevant to the control process. SCP devices use a network time synchronization feature to detect and ignore \u201creplay\u201d messages. All SCP application protocol messages include the network time indicating when the messages were sent. SCP sends this time unencrypted and includes the time in the encryption key. If there is too great a difference between the send time and the receiver's idea of the current network time, SCP ignores the message.","SCP devices that are members of a logical network are in one of three time synchronization modes: Master, Subordinate and Unlocked. The Master mode uses a network time reference for other SCP devices. The Subordinate mode locks onto the master SCP device for network time. The Unlocked mode is not synchronized, neither in Master nor Subordinate mode.","Regardless of the operating mode, devices synchronize their network time to the time provided in a valid NetTimeAssert message received for their associated network. SCP tunnels this message through the application protocol network layer  to enable jamming protection against replay attack.","The following non exhaustive, non-limiting protocol variables are used with the following non-limiting default values.",{"@attributes":{"id":"p-0116","num":"0115"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE XI"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary Network Time Variables"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name","Default (in seconds)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"NetTimePollHoldoffDelayMs","5000 ms"]},{"entry":[{},"NetTimeMasterHoldoffDelayMS","1000 ms"]},{"entry":[{},"NetTimeQueryPollTime","8"]},{"entry":[{},"NetTimeMasterDeclWait","20"]},{"entry":[{},"NetTimeSubordinateDeclWait","300"]},{"entry":[{},"NetTimeDeclPollTime","120"]},{"entry":[{},"NetTimeMasterRespWait","12"]},{"entry":[{},"NetTimeMaxMessageSkew","6"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"A time master node can be any node on the network, and in one implementation is the first node to declare itself on the network. Each node synchronizes its time to a network time declared by the time master node. This network time is combined with the source node ID to create a unique number for every message, which changes every few milliseconds. The network time declared by the time master provides protection against \u201creplay attack,\u201d namely against someone or something attempting to record and replay message communications on the network attempting to use the same message key.","With respect to the use of the exemplary network time variables of Table XI, if a device in Master mode receives a valid NetTimeAssert message from a device whose address is lower, it switches into Subordinate mode.","If a device in Master mode receives a NetTimeAssert message from a device whose address is higher, it reasserts its mastership by immediately sending out its own NetTimeAssert message.","Devices always synchronize their network time to the time provided in a valid NCP_NetTimeAssert message for their network, regardless of current operating mode. So before reasserting mastership, a device synchronizes its network time to the time just received from the conflicting master declaration. Thus there should not be any additional time discrepancies due to the mastership change.","If a device is in Subordinate mode and it has been more than NetTimeSubordDeclWait plus a random time up to NetTimeMasterHoldoffDelay since the device received the last NetTimeAssert message, the device switches into Master mode. If multiple devices do this simultaneously, mastership eventually settles out to the device with the lowest address.","If a device is in Subordinate mode and it receives a NetTimeQuery message, and the master does not respond within NetTimeMasterRespWait plus a random time up to NetTimeMasterHoldoffDelay, the device switches into Master mode. This causes a NetTimeAssert message to be sent and prevents the querying device (a newcomer on the network) from asserting itself as master with an unsynchronized network time, if the time master just went offline.","The NetTimeMaxMessageSkew defines the maximum allowed+\/+ offset between the time stamp on an incoming secure message and a device's synchronized network time. A device ignores any secure messages with a time stamp outside of this window.","Simple Control Protocol wraps AP network layer messages in an encryption envelope with the following components: the message time, the message payload and the message authentication code. The Message time is the 32-bit logical network time (in milliseconds) at the source node when the message was sent. It is not encrypted. Simple Control Protocol refreshes this value and re-encrypts the rest of the message every time it sends a message. The message payload is the AP network layer message, which is encrypted. The 32-bit message authentication code (MAC) is for the message payload only, and it is encrypted.","In one embodiment, Simple Control Protocol encryption uses a stream cipher that is reinitialized for each message. The key for the cipher is a concatenation of the 128-bit network key, the 32-bit message time, and the source device address (zero-padded 16-bit network ID and node ID), in that order.","Simple Control Protocol uses the network time for two purposes. First, the network time randomizes the data sent on the physical medium so that identical message payloads look different each time they are sent. Second, messages received outside of a narrow time window (for example, 2-3 seconds) are invalid, thwarting replay attacks. This implies that the logical network time needs to be synchronized closely enough to allow messages to get through, and thus requires periodic re-synchronization.","Aspects of presence tracking using network time application variables are disclosed in commonly assigned copending U.S. patent application Ser. No. XX,YYY,ZZZ (Keep Alives Optimization), herein incorporated by reference, and thus not addressed in detail herein.","The address space is separated into two groups of devices that time out quickly or slowly, respectively. The ASA controls the operating mode and the quick and slow devices using AP variables. For more detailed information, see the exemplary protocol variables of Tables VI through X.","With respect to the data link layer, a collision avoidance mechanism can also be implemented. For instance, if a packet is unable to transmit within a predetermined period of time, the packet can be abandoned without further penalty. For instance, as illustrated in , in an exemplary non-limiting embodiment, a packet time window takes on the potential format of a backoff window , an addressing information window , a payload window , a jamming window  and an ack window . The backoff window  determines how long to wait to send a packet before giving up on sending the packet at all, depending upon quality and amount of network traffic. Thus, when transmitting a packet in the data link layer, this timeout variable helps determine how long is too long to wait to transmit. Additionally, as alluded to previously, in the unicast case, application variables can help determine how many times to retry in the event an ack packet is not received back from a unicast packet.","With reference to the variables in Table VI above, in the case of a broadcast packet to all nodes, there is no acknowledgment from any of the nodes that they have received the packet, and thus accordingly, the broadcast burst count defines the number of times to send the packet, more than once, based upon the conditions of the network and a likelihood that the nodes will receive the packet. The Ack retry count determines how many times to re-send a packet without having received an ack packet before giving up on the packet entirely.","With respect to the network layer, application variables also help determine NCP holdout delay or a message assembly timeout condition. For instance, if a message requires a reply, certain nodes will hold off, and stagger replies.","With respect to the transport layer, application variables help determine time out conditions and number of retries before dropping a message. For instance, if no reply message is received, the transport layer variables help to determine how much time should pass before retrying the message, and how many times to retry.","Application variables can help make determinations with respect to the following scenario illustrated in , wherein first a node A sends a request message to node B, then node B sends a reply message back to node B. In , first a node A sends a request message to node B, then node B sends a reply ack needed message back to node B and then node B waits for a reply ack message from node A. Application variables can determine how long to wait before sending any one or more of the request, reply and reply ack messages again, e.g., how many times the cycle is attempted before discontinuing the attempt.","Thus, optimization of a logical network in accordance with the invention involves taking diagnostic counter values as inputs and making determinations with respect to limited bandwidth, degraded signal quality on certain paths, amount of activity, signal quality and number and kinds of nodes. One constraint on such a system is that an infinite number of retries is not available, i.e., after a certain number of retries, it must be assumed that the message is unable to be delivered in order to continue with other aspects of the system eventually.",{"@attributes":{"id":"p-0135","num":"0134"},"figref":"FIG. 6","b":["1","2","3"]},"While some exemplary embodiments herein are described in connection with software residing on a computing device, one or more portions of the invention may also be implemented via an operating system, application programming interface (API) or a \u201cmiddle man\u201d object, hardware, firmware, such that application variables may be included in, supported in or accessed via all of NET's languages and services, and in other distributed computing frameworks as well. There are thus multiple ways of implementing the present invention, e.g., an appropriate API, tool kit, driver code, operating system, standalone or downloadable software object, etc. which enables applications and services to use the application variables to achieve more complex functionality and more efficient use of lower bandwidth media. The invention contemplates the use of the invention from the standpoint of an API (or other software object), as well as from a software or hardware object that communicates in connection with application variables. Thus, various implementations of the invention described herein have aspects that are wholly in hardware, partly in hardware and partly in software, as well as in software.","As mentioned above, while exemplary embodiments of the present invention have been described in connection with various computing devices and network architectures, the underlying concepts may be applied to any computing device or system in which it is desirable to implement application variables in a logical network. Thus, the techniques for providing automatic network optimization with application variables in accordance with the present invention may be applied to a variety of applications and devices. For instance, the algorithm(s) and hardware implementations of the invention may be applied to the operating system of a computing device, provided as a separate object on the device, as part of another object, as a downloadable object from a server, as a \u201cmiddle man\u201d between a device or object and the network, as a distributed object, as hardware, in memory, a combination of any of the foregoing, etc. While exemplary programming languages, names and examples are chosen herein as representative of various choices, these languages, names and examples are not intended to be limiting. One of ordinary skill in the art will appreciate that there are numerous ways of providing object code that achieves the same, similar or equivalent functionality achieved by the various embodiments of the invention.","As mentioned, the various techniques described herein may be implemented in connection with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus of the present invention, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers, the computing device will generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs that may utilize the application variables of the present invention, e.g., through the use of a data processing API or the like, are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language, and combined with hardware implementations.","The methods and apparatus of the present invention may also be practiced via communications embodied in the form of program code that is transmitted over some transmission medium, such as over electrical wiring or cabling, through fiber optics, or via any other form of transmission, wherein, when the program code is received and loaded into and executed by a machine, such as an EPROM, a gate array, a programmable logic device (PLD), a client computer, a video recorder or the like, or a receiving machine having the signal processing capabilities as described in exemplary embodiments above becomes an apparatus for practicing the invention. When implemented on a general-purpose processor, the program code combines with the processor to provide a unique apparatus that operates to invoke the functionality of the present invention. Additionally, any storage techniques used in connection with the present invention may invariably be a combination of hardware and software.","While the present invention has been described in connection with the preferred embodiments of the various figures, it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. For example, while exemplary network environments of the invention are described in the context of a networked environment, such as a peer to peer networked environment, one skilled in the art will recognize that the present invention is not limited thereto, and that the methods, as described in the present application may apply to any computing device or environment, such as a gaming console, handheld computer, portable computer, etc., whether wired or wireless, and may be applied to any number of such computing devices connected via a communications network, and interacting across the network. Furthermore, it should be emphasized that a variety of computer platforms, including handheld device operating systems and other application specific operating systems are contemplated, especially as the number of wireless networked devices continues to proliferate. Still further, the present invention may be implemented in or across a plurality of processing chips or devices, and storage may similarly be effected across a plurality of devices. Therefore, the present invention should not be limited to any single embodiment, but rather should be construed in breadth and scope in accordance with the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The systems and methods for providing automatic network optimization with application variables in accordance with the present invention are further described with reference to the accompanying drawings in which:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5C"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
