---
title: Method and apparatus for autonomic management of connection pools
abstract: A method and apparatus for autonomic management of a connection pool. One embodiment comprises initializing a connection pool with a set of initial settings, wherein the set of initial settings include a collection interval and a collection duration; collecting autonomic configuration data for the collection duration, the autonomic configuration data including a maximum number of connections observed during the collection interval; determining an set of optimal settings using the autonomic configuration data; and modifying the connection pool according to the set of optimal settings.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08244865&OS=08244865&RS=08244865
owner: International Business Machines Corporation
number: 08244865
owner_city: Armonk
owner_country: US
publication_date: 20041008
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["The present invention generally relates to methods and systems for managing access to computing resources. More particularly, the present invention relates to a method and system for autonomic management of connection pools.","This application is related to U.S. patent application Ser. No. 10\/767,043, filed Jan. 29, 2004 and entitled \u201cMethod and Apparatus for Managing a Connection Pool using Heuristic Information,\u201d which is herein incorporated by reference in its entirety.","The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time, computer systems have evolved into extremely complicated devices. Although today's computers are more sophisticated than EDVAC, the most basic requirements levied upon computer systems have not changed. Now, as in the past, a computer system's job is to access, manipulate, and store information. This fact is true regardless of the type or vintage of computer system.","Some of the most fundamental techniques that computer systems use to access, store and manipulate information are reading and writing information in a data source, such as a database. Today, most databases are stored on powerful computers called \u201cservers.\u201d Other computers, called \u201cclients,\u201d access the database by sending search requests to the server over a computer network. The server computer receives the request, performs the requested operation, and then returns the results to the client.","Although the client\/server model has many advantages, one drawback is that before a client can access the database, it must first connect to that database's server. Unfortunately, managing these connections requires a significant amount of overhead. That is, the server must use a certain amount of its computing resources to create the connections, to maintain the connections, and then release connections when they are no longer required. Those skilled in the art will appreciate that the total database overhead can be particularly significant for World Wide Web (\u201cWeb\u201d) based applications because each client application will usually use one or more isolated connections to request the desired operations and because most Web clients connect and disconnect frequently. As a result, more effort is often spent connecting and disconnecting the clients than is spent processing their requests. The creation overhead can be particularly significant because it decreases the perceived speed of the Web based application.","One partial solution to this problem is to use a technique called connection pooling. In this technique, special programs called application servers create a large number of connections, in advance, so that future client requests do not need to incur the creation overhead. When the request is satisfied and the response is returned to the user, the application server returns the resource to the connection pool for reuse. In essence, this technique spreads the connection overhead across several user requests so that each user request incurs a fraction of the total creation and disconnection cost.","Although connection pooling reduces the overhead required to create and destroy connections, one problem is that the pool itself requires some overhead to maintain. Thus, if the load decreases over time, maintaining a large number of connections in connection pool uses unnecessary resources. The conventional solution is to allow idle connections to \u201ctime-out.\u201d Unfortunately, this technique does not work well for applications that do not have a static load, because, when the load again increases, the number of connections currently in the pool will not be sufficient. Connections then have to be created as required, and client applications incur this creation cost.","U.S. patent application Ser. No. 10\/767,043, filed Jan. 29, 2004 and entitled \u201cMethod and Apparatus for Managing a Connection Pool using Heuristic Information,\u201d introduced an extension to the connection pooling architecture that used heuristic data to ensure that the connection pool contains the required number of connections for a given time period. This extension improved the performance for applications that use connection pooling architectures, such as Java Database Connectivity (\u201cJDBC\u201d) and Java 2 Connector (\u201cJ2C\u201d) connections, by attempting to predict when increased connections will be necessary. This extension also allowed the pool to populate itself with new connections during periods of lower workload instead of consuming system resources after the workload has begun to increase. One limitation of this extension, however, is that it still required manual intervention by a system administrator to collect the heuristic data and to configure the heuristic override section in the heuristic configuration file. These tasks can take considerable time and require considerable expertise.","Without a way for computer systems to configure their own connection managers, the promise of network computing may never be fully achieved.","The present invention provides a method, system, computer program product for autonomic management of datasource connection pools. One aspect of the present invention is a method and apparatus for autonomic management of a connection pool. One embodiment comprises initializing a connection pool with a set of initial settings, wherein the set of initial settings include a collection interval and a collection duration; collecting autonomic configuration data for the collection duration, the autonomic configuration data including a maximum number of connections observed during the collection interval; determining an set of optimal settings using the autonomic configuration data; and modifying the connection pool according to the set of optimal settings.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","b":["100","102","102","102","106","102","110","112","114","116","118","120","122","114","122","140","142","118","102","106","112","102","124","126","128","129","132","128","130","180","112","102","124","150","132"],"i":["a ","b ","b ","a ","a ","a","b ","b ","b"]},"In operation, the present invention provides for autonomic management of one or more connection pools . Autonomic computing generally refers to computing systems that have the ability to manage themselves and dynamically adapt to change in accordance with business policies and objectives. Self-managing environments can perform such activities based on situations they observe or sense in the information technology environment\u2014rather than requiring information technology professionals to initiate the tasks. In this way, autonomic computing systems can improve the return on investment of information technology by reducing total cost of ownership, improving quality of service, accelerating time to value, and managing complexity.","In one embodiment, the connection pool configuration file  contains configuration information for the application server . The application server  uses the configuration information to adjust the number of connections in the pool to handle increased loads at specific times and\/or specific days. In one example, the configuration file  for a typical e-commerce web site specifies a minimum number of connections (\u201cMinConnections\u201d) that will be available in the pool, a maximum connection pool size (\u201cMaxConnections\u201d) that can be contained in the pool, and a time-out period indicating how long an unused connection can remain in the pool before it is closed to reclaim resources. The configuration file  in this example contains the following configuration information:","00:00:00-08:00:00: MaxConnections=0;","08:00:00-09:00:00: MaxConnections=10;","09:00:00-11:00:00: MaxConnections=100;","11:00:00-14:00:00: MaxConnections=150;","14:00:00-18:00:00: MaxConnections=200;","18:00:00-19:00:00: MaxConnections=100;","19:00:00-20:00:00: MaxConnections=10;","20:00:00-00:00:00: MaxConnections=0;","The example configuration data described above indicates there is no load expected on the connection pool  from 00:00:00 through 08:00:00. Between 08:00:00 and 14:00:00, the load is expected to gradually increase. Between 18:00:00 and 20:00:00, the load is expected to gradually decrease. As will be discussed in more detail with reference to , when the application server  queries the pool size at 07:55:00, 08:55:00, 10:55:00, and 13:55:00, it will likely determine that the connection pool  requires additional connections and then will create those connections. When the application server  queries the pool size at 17:55:00, 18:55:00, and 19:55:00, it will determine that the connection pool  requires fewer connection and let the surplus expire. The determined number of new connections created by the application server  for a given time period is based on the following calculation:\n\n(number of new connections to be created)=(number of connections specified in the configuration file 130)\u2212(number of current connections).\n","The connection manager  in this embodiment dynamically collects pool connection usage data for specified time intervals. The connection manager  uses this usage data to automatically and dynamically update the configuration file . That is, the connection manager  in this embodiment monitors and records the required connection load over specified time intervals and persists this information to override section in the configuration file . After a sufficient period of operation (e.g., day, week, month and\/or year depending on the configuration), the connection manager  will change the configuration file  to reflect actual usage patterns. In this way, the connection manager  can collect new configuration data and apply the new data dynamically at run-time, rather than requiring a system administrator to manually monitor the required number of connection and manually modify the configuration file to reflect these heuristics.","In some embodiments, the system administrator can modify the configuration file  to instruct the connection pool manager  to stop gathering connection usage data and to use the configuration file  in a static manner. Also, in some embodiments, the system administrator can still manually edit the configuration file  to adjust for special periods when the connection usage is expected to differ from the collected data and\/or instruct the connection manager  to use the configuration file  in a static manner. Thus, for example, if the daily or weekly connection usage pattern used throughout the year may not be adequate to meet the needs of the Christmas buying season between Thanksgiving and Christmas or for the day after a major sale begins, the system administrator can provide special configuration settings for those particular time periods.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2","b":["132","202","102","132","150","102","204","126","132","129","206","132","102","208","132","126","132","126","132","129","210","132"],"i":["b ","a ","a "]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIGS. 3A-3B","b":["128","302","130","304","128","128","130","306","308","128","309","128","309","310","352"]},"At blocks -, if the application server  determines the interrupt received at block  is associated with a timer event, the application server  first compares the number of connections currently in the connection pool  to the MaxConnections value in the configuration file  associated with the current time-of-day. If the current number of connections is less than the MaxConnections associated with the current time-of-day, the application server  adds new connections to the pool at block . The application server  then initializes the timeout values for all available connections in the connection pool at block . This block ensures that none of the connections will expire until for a full time-out value after the timer event detected at block . The application server  then returns block  and waits for the next interrupt.","At blocks -, if the interrupt received at block  is associated with the connection timer, the application server  first determines if the number of connections is at or below the minimum connection pool size. If the number of connections is above the minimum pool size, the application server  destroys the timed-out idle connections at block . That is, the connection timer interrupt is used to destroy a connection that is currently in the pool and no longer required. This closes the physical connection to the database, which frees system resources and shrinks the connection pool size by a single connection. If the number of connections is at or below the minimum number of connections, the application server  resets the timer for that connection at block .","At blocks -, if the interrupt received at block  is an application connection request, the application server  first determines if the connection pool has an \u2018available\u2019 connection. If a connection is not available (i.e., all connections currently in the pool are being used to service other requests), the application server  determines at block  whether the number of connection currently in the pool  is less that the maximum number of connections specified in the configuration file . If the number of connections used is less than the maximum number allowed, the application server  creates a connection at block  and increments the count of the connections in the connection pool at block ; otherwise the application server  waits for a connection to be returned to the connection pool at block . At block , the application server  uses the existing connection or the newly created connection to honor the connection request, marks the used connection as \u2018unavailable\u2019 to indicates that it cannot be used to honor future connection requests, and resets that connection's \u201ctime-out\u201d value.","At blocks -, if the interrupt received at block  is associated with a close connection request, the application server  returns the connection to the connection pool by marking it as \u2018available.\u2019","At blocks -, if the interrupt received at block  is associated with a shutdown request, the application server  closes all connections to the database and destroys the connection pool.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 4","FIG. 4"],"b":["130","130","402","404","402","406","408","410","412","414","402","416","128","416","130","418","128","130","418","130"]},"In some embodiments, the default settings sections  further contain a connection management mode (\u201cconnectionManagementMode\u201d) , a connection data collection interval field (\u201ccollectionInterval\u201d) , a collection duration field (\u201ccollectionDuration\u201d) , and a collection run characteristic (\u201ccollectionRunCharacteristic\u201d) . The connection management mode field  in this embodiment can contain one of the following three connection management options:\n\n","The collectionDuration filed  in this embodiment contains a single value that can be selected from an enumerated list: \u201cDay,\u201d \u201cWeek,\u201d \u201cMonth\u201d or \u201cYear.\u201d This value indicates how long the connection the autonomic connection usage information is to be gathered and the way in which it is to be recorded in the configuration file . The collection run characteristic field  (\u201ccollectionRunCharacteristic\u201d) in this embodiment contains a single value that can be selected from an enumerated list: \u201crunOnce\u201d or \u201crunContinuously.\u201d This value tells the connection manager  whether it should collect the autonomic connection data through one cycle as defined by the collection duration field  and then stop, or whether it should continue to collect autonomic connection usage data and update the configuration file  continuously as long as the application server  remains running. This \u201crunOnce\u201d feature may be particularly desirable because it allows the connection manager  gather connection usage data and to construct the configuration file  after completing one cycle through the defined time period  and then operate in a static manner. This, in turn, may increase the performance of the application server  by removing the overhead associated with data collection, particularly when usage does not fluctuate significantly from time period  to the next.","The override section  comprises a plurality of overrides -. Each override  comprises a \u201cBeginTime\u201d section -, an \u201cEndTime\u201d section -, and an override value -. The BeginTime and EndTime sections ,  specify a time during which the application server should use the associated override value . The system administrator can use these overrides to reflect the expected usage data. Some embodiments may also specify a \u201cWeekDay\u201d section (not shown for clarity) that will allow the system administrator to adjust based on day of week (e.g., the expected load will be high during business days, but low at night and on weekends) and a \u201cholidays\u201d section (not shown for clarity) that will allow the system administrator to adjust specific days (e.g., the expected load will be high the day after Thanksgiving). The application server  can apply these settings by dynamically creating additional connections prior to these peaks using the process described with reference to . One advantage of the embodiment in  is that the connection pools have a one-to-one association with the database  and the configuration file , which allows the server's administrator can individually configure the connection pool of the present invention for each database  running on the server.","In operation, the connection pool manager  analyzes the current connection load based on the collectionInterval property  and updates the override section  of the configuration data file  for the relevant time period. The refreshInterval property allows the connection manager  to refresh its run-time connection data  at the specified interval, which in turn causes the connection pool to dynamically reflect the newly collected connection load data. The autonomic configuration features of the present invention are desirable because they allow the connection manager  to adjust the connection pool over time, rather than requiring a system administrator to manually monitor the connection usage and manually update the data file .",{"@attributes":{"id":"p-0044","num":"0046"},"figref":["FIG. 5","FIG. 3","FIG. 6"],"b":["500","502","180","130","130","402","406","504","180","505","180","506","430","507","508","509"]},{"@attributes":{"id":"p-0045","num":"0047"},"figref":"FIG. 6","b":["601","180","602","604","180","130","432","606","180","180","605","605","608"]},"At block , the connection manager  obtains the current system time and date (i.e., the timestamp). At block , the connection manager  uses the current timestamp to determine the BeginTime  and the EndTime  (see ) of the most recently completed time interval. At block , the connection manager  analyzes the autonomic configuration data to determine the maximum number of connections for the most recently completed time interval (e.g., using an application programming interface, such as prevMax=maxConnctionsInPool (startTime, endTime), that performs a statistical analysis on the autonomic configuration data). At block , the connection manager  determines whether the maximum connections calculated at block  is greater than or less than the corresponding values stored in the configuration file . If no changes are required, the connection manager  proceeds to block , otherwise the connection manager  updates (at block ) the record in the configuration file  for the most recently completed time interval (e.g., MaxConnections=prevMax).","At bock , the connection manager  parses the configuration file  to determine this datasource's collection run characteristic  (see ). If the collection run characteristic  is set to \u2018runOnce,\u2019 the connection manager  stops collecting the autonomic configuration data and runs in \u2018static\u2019 mode; however, if the collection run characteristic  is set to \u2018runContinuously,\u2019 the connection manager  returns to block .","Referring again to , the computer systems  in this embodiment are general-purpose programmable computing devices. Accordingly, the central processing units  may be any device capable of executing the program instructions stored in main memory , and may be constructed from one or more microprocessors and\/or integrated circuits. In this embodiment, when one of the computer systems  start up, the associated CPU  initially executes the program instructions that make up the operating system , which manages the physical and logical resources of the computer system . These resources include the central processing unit , the main memory , the mass storage interface , the display interface , the network interface , and the system bus . In addition, although each computer system  in  is shown to with only a single processing unit  and a single system bus , those skilled in the art will appreciate that the present invention may be practiced using a computer system  that has multiple processing units  and\/or multiple system buses . Moreover, the interfaces , , , and  may each include their own separate, fully programmed microprocessors and may be used to off-load compute-intensive processing from the main processing units .","The main memory  and the storage devices ,  may be any system capable of storing and retrieving data for the central processing units . These systems may utilize virtual addressing mechanisms that allow the computer systems  to behave as if they only have access to a large, single storage entity instead of access to multiple, smaller storage entities such as the main memory  and the DASD device . Therefore, while the operating systems , the application servers , and the databases  are shown to reside in main memory , those skilled in the art will recognize that these items are not necessarily all completely contained in main memory  at the same time, and may even reside in the virtual memory of other computer systems coupled to the computer system .","The display interface  is used to directly connect one or more display units  to the computer system . These display units  may be non-intelligent (i.e., dumb) terminals, such as a cathode ray tube, or may themselves be fully programmable workstations used to allow IT administrators and users to communicate with one or more of the computer systems . Note, however, that while the display interface  is provided to support communication with one or more displays , the computer systems  does not necessarily require a display  because all needed interaction with users and other processes may occur via network interface .","The communication medium  can be any device or system that allows the computer systems  to communicate with each other. The network interfaces , accordingly, can be any device that facilitates such communication, regardless of whether the network connection is made using present-day analog and\/or digital techniques or via some networking mechanism of the future. Suitable communication mediums  include, but are not limited to, the Internet, intranets, cellular transmission networks, wireless networks using one of the IEEE 802.1X specifications, and the like. Those skilled in the art will appreciate that many different network protocols can be used to implement the communication medium . The Transmission Control Protocol\/Internet Protocol (\u201cTCP\/IP\u201d) is an example of a suitable network protocol for Internet-based communication.","The embodiment described with reference to  generally uses a client-server network architecture. These embodiments are desirable because the clients can utilize the services of the web server computers without either computer system  requiring knowledge of the working details about the other. However, those skilled in the art will appreciate that other network architectures are within the scope of the present invention. Examples of other suitable network architectures include peer-to-peer architectures, grid architectures, and multi-tier architectures. Accordingly, the terms web server and client computer should not be construed to limit the invention to client-server network architectures.","One suitable web server computer is an eServer iSeries computer running the i5\/OS multitasking operating system, both of which are produced by International Business Machines Corporation of Armonk, N.Y. One client computer is an IBM ThinkPad running the Linux or Windows operating systems, also available from International Business Machines Corporation. However, those skilled in the art will appreciate that the mechanisms and apparatus of the present invention apply equally to any computer system  and operating system , regardless of whether one or both of the computer  are complicated multi-user computing apparatuses, a single workstations, lap-top computers, mobile telephones, personal digital assistants (\u201cPDAs\u201d), video game systems, or the like.","Although the present invention has been described in detail with reference to certain examples thereof, it may be also embodied in other specific forms without departing from the essential spirit or attributes thereof. For example, those skilled in the art will appreciate that the present invention is capable of being distributed as a program product in a variety of forms, and applies equally regardless of the particular type of signal bearing media used to actually carry out the distribution. Examples of suitable signal bearing media include, but are not limited to: (i) information permanently stored on non-writable storage media (e.g., read-only memory devices within a computer such as CD-ROM disks readable by a CD-ROM drive); (ii) alterable information stored on writable storage media (e.g., floppy disks within a diskette drive, a CD-R disk, a CD-RW disk, or hard-disk drive); or (iii) information conveyed to a computer by a communications medium, such as through a computer or telephone network, including wireless communications, and specifically includes information downloaded from the Internet and other networks. Such signal-bearing media, when carrying computer-readable instructions that direct the functions of the present invention, represent embodiments of the present invention.","Embodiments of the present invention may also be delivered as part of a service engagement with a client corporation, nonprofit organization, government entity, internal organizational structure, or the like. Aspects of these embodiments may include configuring a computer system to perform, and deploying software systems and web services that implement, some or all of the methods described herein. Aspects of these embodiments may also include analyzing the client's operations, creating recommendations responsive to the analysis, generating software to implement portions of the recommendations, integrating the software into existing processes and infrastructure, metering use of the systems, allocating expenses to users of the systems, and billing for use of the systems.","Those skilled in the art will appreciate that the present invention and its autonomic configuration manager may be particularly desirable for Java connections because version 3.0 of the JDBC Specification does not account for changes in connection load over time. However, the present invention can be applied to other architectures that use connection pooling in a manner that is similar to JDBC connection pooling. For example, the J2EE Connector Architecture (\u201cJ2C\u201d) architecture provides a connection pooling mechanism that uses a common connector architecture for connection to various resources, e.g. Java Message Service (\u201cJMS\u201d) connections, connections to legacy applications such as CICS, PeopleSoft, etc.","The accompanying figures and this description depicted and described embodiments of the present invention, and features and components thereof. Those skilled in the art will appreciate that any particular program nomenclature used in this description was merely for convenience, and thus the invention should not be limited to use solely in any specific application identified and\/or implied by such nomenclature. Thus, for example, the routines executed to implement the embodiments of the invention, whether implemented as part of an operating system or a specific application, component, program, module, object, or sequence of instructions could have been referred to as a \u201cprogram\u201d, \u201capplication\u201d, \u201cserver\u201d, or other meaningful nomenclature. Therefore, it is desired that the embodiments described herein be considered in all respects as illustrative, not restrictive, and that reference be made to the appended claims for determining the scope of the invention."],"heading":["RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 3A-3B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
