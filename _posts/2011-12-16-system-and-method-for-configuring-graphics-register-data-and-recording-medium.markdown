---
title: System and method for configuring graphics register data and recording medium
abstract: A system and method for configuring graphics register data and a recording medium are applied in a mobile device to store graphics operation data for displaying a picture. The system includes a plurality of register modules and an operation module. The operation module obtains unstored data from the graphics operation data, judges whether a register module already stored with data and having a configuration space sufficient for configuring the unstored data exists among all the plurality of register modules, so as to determine whether to store the unstored data into the register module already stored with data or a register module without storing-data, and when no register module without storing data exists and the configuration space of each register module already stored with data is insufficient for storing the unstored data, divides and stores the unstored data into a part of the plurality of register modules already stored with data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08988444&OS=08988444&RS=08988444
owner: Institute for Information Industry
number: 08988444
owner_city: Taipei
owner_country: TW
publication_date: 20111216
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Field of Invention","The present invention relates to a system and method for configuring register data and a recording medium, and more particularly, to a system and method for configuring graphics register data and a recording medium, which are capable of changing the data storage mode according to the data storage state of the register.","2. Related Art","Nowadays, electronic devices capable of displaying pictures from different manufacturers use different image display techniques. All the image display techniques use simple primitives to draw complex three-dimensional images. For example, an image display process of the Open Graphics Library Embedded System 2.0 (OpenGL ES2.0) with pipeline type shown in  is one of the image display techniques.","The process basically includes: issuing a drawing command by an application programming interface (API) (Step S), performing primitive processing (Step S) in combination with vertex buffer object processing (Step S), calculating a graphic shading start point and color distribution values according to graphic vectors generated after the primitive processing by a vertex shader (Step S), performing primitive assembly according to the processing results of the primitive processing and the vertex shader (Step S), analyzing and processing brightness and brightness contrast of graphic spaces and primitives by a rasterizer (Step S), performing shading processing on graphic fragments by a fragment shader (Step S), performing test and operation processes such as alpha test (Step S), depth stencil (Step S), color buffer blend (Step S) and dither (Step S), and then outputting graphics through a frame buffer (Step S).","However, such image display techniques rely on the design, combination and drive of hardware and software provided by manufacturers. Therefore, such techniques require the use of electronic computing devices having high computing performance and abundant hardware resources, for example, computers or servers configured with graphic acceleration hardware (for example, graphics acceleration cards, chips or processors). In such electronic computing devices, when a graphic processing unit (GPU) compiles graphics, sufficient hardware resources are available for assisting operations, for example, when the vertex shading operation and the fragment shading operation are performed, the memory space of the computer is sufficient for the GPU to temporarily store a large volume of data, and other graphic acceleration hardware is used to execute other numerical operations of the image formation process, so as to efficiently present high-precision images, or accelerate the image presentation operation.","However, a portable mobile device such as a smart phone has no advantages in aspects of hardware update, replacement and extension, as compared with the high-performance electronic computing devices described above. Therefore, the GPU of the smart phone can only perform the graphic formation operation with limited hardware resources. The most obvious problem of the GPU lies in register resources. The GPU usually accesses a plurality of numerical values at different registers in a multi-way or multi-vector form. Therefore, the values of graphics data are formed in a rather distributed manner and stored in the registers, with significantly different densities of data storage. In the portable mobile device, this problem leads to that all the registers are used, but the GPU cannot completely configure all the graphics register data into the registers. As the remaining spaces of the registers cannot configure subsequent graphics register data, the GPU cannot complete graphics operations to present a demanded picture, and meanwhile, a considerable amount of hardware resources become idle. What's worse, the system of the portable mobile device may even break down due to insufficient hardware resources.","Therefore, how to improve the utilization efficiency of registers during graphics display operations is a problem to be considered by manufacturers.","To solve the above problems, the present invention is directed to a system and method for configuring graphics register data and a recording medium, which are applied to graphic display operations of a mobile device and capable of changing the data storage mode according to the data storage state of the register.","The present invention provides a system for configuring graphics register data, applied in a mobile device to temporarily store a plurality of pieces of graphics operation data for displaying a picture. The system comprises a plurality of graphic registers and an operation processor.","The operation processor obtains a piece of unstored data from the graphics operation data, judges whether a graphic register already stored with data and having a remaining configuration space sufficient for configuring the unstored data exists among all the plurality of graphic registers, so as to determine whether to store the unstored data into the graphic register already stored with data or to store the unstored data into a graphic register without storing data among the plurality of graphic registers, and when no graphic register without storing data exists and the remaining configuration space of each graphic register already stored with data is insufficient for storing the unstored data, divides and stores the unstored data in a distributed manner into a part of the graphic registers already stored with data.","The present invention provides a method for configuring graphics register data, applied in a mobile device to temporarily store a plurality of pieces of graphics operation data for displaying a picture, wherein the mobile device comprises a plurality of graphic registers and an operation processor. The method comprises: obtaining a piece of unstored data from the graphics operation data by the operation processor; judging whether a graphic register already stored with data and having a remaining configuration space sufficient for configuring the unstored data exists among the plurality of graphic registers by the operation processor, so as to determine whether to store the unstored data into the graphic register already stored with data; when judging that the remaining configuration space of each graphic register already stored with data is insufficient for storing the unstored data and a graphic register without storing data exists among the plurality of graphic registers, storing the unstored data into the graphic register without storing data by the operation processor; and when judging that no graphic register without storing data exists and the remaining configuration space of each graphic register already stored with data is insufficient for configuring the unstored data, dividing and storing the unstored data in a distributed manner into a part of the graphic registers already stored with data by the operation processor.","The present invention further provides a non-transitory recording medium, storing a computer readable program code, wherein a mobile device reads the program code to execute a method for configuring graphics register data, and the mobile device comprises a plurality of graphic registers and an operation processor and is used for temporarily storing a plurality of pieces of graphics operation data for displaying a picture. The process of the method is as described above, so that the details will not be described herein again.","The present invention is characterized in that, the graphics register data can be compactly configured into the storage spaces of the plurality of graphic registers, thereby improving the utilization ratio of the storage spaces of the plurality of graphic registers, and reducing the hardware idle ratio. Secondly, the mobile device can implement complex graphics processing operations by limited hardware resources without requiring additional hardware components or circuits, thereby improving the quality of image presentation. Thirdly, in subsequent graphics processing operations, only a very short time is additionally required for distributed data recovery and data movement, as compared with the graphics processing flow in the prior art, so that the overall load of the graphics processing operations is not greatly increased, or even the user experience is not affected, and meanwhile, the image quality can be improved, thereby effectively improving the applicability and practicability of the mobile device.","Preferred embodiments of the present invention are described in detail below with reference to the accompanying drawings.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 2","FIG. 3A","FIG. 3F"],"b":["11","11"]},"Here, for example, four register modules are available, namely, a first register module , a second register module , a third register module  and a fourth register module . Each register module has a configuration space of four units (each block represents a unit), but the present invention is not limited thereto. The data volume of each unit is a bit, byte, or other units for calculating the data volume in the computer field, and the use of unit depends on hardware or program designers.","It is assumed that six pieces of graphics operation data need to be stored into the configuration spaces of the plurality of register modules. The first piece of graphics operation data  has a data volume of two units, the second piece of graphics operation data  has a data volume of three units, the third piece of graphics operation data  has a data volume of three units, the fourth piece of graphics operation data  has a data volume of two units, the fifth piece of graphics operation data  has a data volume of three units, and the sixth piece of graphics operation data  has a data volume of two units.","The operation module  obtains a piece of unstored data from all the graphics operation data. In this example, the operation module  first analyzes the graphics operation data to establish a storage sequence corresponding to the graphics operation data. There are two analysis modes:","(1) The operation module  sorts the graphics operation data according to data volumes. Therefore, the formed storage sequence is, for example, the fifth piece of graphics operation data , the second piece of graphics operation data , the third piece of graphics operation data , the first piece of graphics operation data , the sixth piece of graphics operation data , and the fourth piece of graphics operation data .","However, the arrangement sequence of the graphics operation data of the same data volume is not fixed, but depends on the sorting method used.","(2) Before one or more program codes or program segments corresponding to all the graphics operation data are executed, the operation module  analyzes the program codes to obtain a data read sequence according to which the graphics operation data is referred to by the program codes.","For example, the graphics operation data is read in the following sequence: the third piece of graphics operation data , the second piece of graphics operation data , the first piece of graphics operation data , the sixth piece of graphics operation data , the fourth piece of graphics operation data  and the fifth piece of graphics operation data . The operation module  uses the data read sequence as the storage sequence.","Here, an example is taken where the operation module  forms the storage sequence according to the read sequence of the graphics operation data.","Referring to  and , according to the storage sequence, the operation module  first obtains the third piece of graphics operation data , which is the unstored data accordingly. The operation module  first judges whether a register module already stored with data and having a remaining configuration space sufficient for configuring the unstored data exists among all the plurality of register modules.","However, as none of the plurality of register modules is stored with data currently, the operation module  judges that no register module already stored with data is available for configuring the third piece of graphics operation data . Then, the operation module  judges whether a register module without storing data exists among all the plurality of register modules. At this time, as none of the plurality of register modules is stored with data, the operation module  selects a register module without storing data to store the third piece of graphics operation data . In this example, the first register module  is used to store the third piece of graphics operation data .","Referring to  and , the operation module  obtains a piece of unstored data again from the remaining graphics operation data. According to the storage sequence, the operation module  obtains the second piece of graphics operation data  this time. The operation module  judges whether a register module already stored with data and having a remaining configuration space sufficient for configuring the unstored data exists among all the plurality of register modules. However, only the first register module  is a register module already stored with data, and the first register module  has a remaining configuration space of only one unit, which is insufficient for storing the second piece of graphics operation data . Therefore, the operation module  judges that no register module already stored with data is available for configuring the second piece of graphics operation data .","Then, the operation module  judges whether a register module without storing data exists among all the plurality of register modules. At this time, as the second register module  to the fourth register module  are without storing data, the operation module  selects a register module without storing data to store the second piece of graphics operation data . In this example, the second register module  is used to store the second piece of graphics operation data .","Referring to  and , the operation module  obtains a piece of unstored data again from the remaining graphics operation data. According to the storage sequence, the operation module  obtains the first piece of graphics operation data  this time. The operation module  judges whether a register module already stored with data and having a remaining configuration space sufficient for configuring the unstored data exists among all the plurality of register modules. However, the first register module  and the second register module  are register modules already stored with data, and the first register module  and the second register module  each have a remaining configuration space of only one unit, which is insufficient for storing the first piece of graphics operation data . Therefore, the operation module  judges that no register module already stored with data is available for configuring the first piece of graphics operation data .","The operation module  judges whether a register module without storing data exists among all the plurality of register modules. At this time, as the third register module  and the fourth register module  are register modules without storing data, the operation module  selects a register module without storing data to store the first piece of graphics operation data . In this example, the third register module  is used to store the first piece of graphics operation data .","Referring to  and , the operation module  obtains a piece of unstored data again from the remaining graphics operation data. According to the storage sequence, the operation module  obtains the sixth piece of graphics operation data  this time. The operation module  judges whether a register module already stored with data and having a remaining configuration space sufficient for configuring the unstored data exists among all the plurality of register modules. However, the first register module  to the third register module  are register modules already stored with data. The first register module  and the second register module  each have a remaining configuration space of only one unit, which is insufficient for storing the sixth piece of graphics operation data ; while the third register module  has a remaining configuration space of two units, which is sufficient for storing the sixth piece of graphics operation data . Therefore, the operation module  judges that a register module already stored with data is available for configuring the sixth piece of graphics operation data , and stores the sixth piece of graphics operation data  into the third register module .","Referring to  and , the operation module  obtains a piece of unstored data again from the remaining graphics operation data. According to the storage sequence, the operation module  obtains the fourth piece of graphics operation data  this time. The operation module  judges whether a register module already stored with data and having a remaining configuration space sufficient for configuring the unstored data exists among all the plurality of register modules. However, the first register module  to the third register module  are register modules already stored with data. The first register module  and the second register module  each have a remaining configuration space of only one unit, which is insufficient for storing the fourth piece of graphics operation data . Therefore, the operation module  judges that no register module already stored with data is available for configuring the fourth piece of graphics operation data .","Then, the operation module  judges whether a register module without storing data exists among all the plurality of register modules. At this time, the operation module  judges that the fourth register module  is without storing data, and accordingly, the operation module  stores the fourth piece of graphics operation data  into the fourth register module .","Referring to  and , the operation module  obtains a piece of unstored data again from the remaining graphics operation data. According to the storage sequence, the operation module  obtains the fifth piece of graphics operation data  this time. The operation module  judges whether a register module already stored with data and having a remaining configuration space sufficient for configuring the unstored data exists among all the plurality of register modules. However, the first register module  to the fourth register module  are register modules already stored with data, and each have a remaining configuration space insufficient for storing the fifth piece of graphics operation data . Therefore, the operation module  judges that no register module already stored with data is available for configuring the fifth piece of graphics operation data .","Then, the operation module  judges whether a register module without storing data exists among all the plurality of register modules. At this time, the operation module  judges that no register module without storing data exists, and therefore, the operation module  divides and stores the unstored data in a distributed manner into a part of the register modules already stored with data.","For this example, the operation module  divides the fifth piece of graphics operation data  into a plurality of data segments , which is stored in a distributed manner into a combination of at least two register modules selected from the first register module , the second register module  and the fourth register module .","Moreover, when judging whether a register module already stored with data and having a remaining configuration space for configuring the unstored data exists among the plurality of register modules, the operation module  compares a data volume of the unstored data with the remaining configuration space of each register module already stored with data in a spatial first fit manner, a spatial best fit manner, a spatial worst fit manner, a spatial next fit manner or a combination thereof.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 4","FIG. 2"],"b":["11","11","21","24","25","26"]},"During execution of an executive program corresponding to the graphics operation data, when judging demand data required by the executive program is a plurality of data segments stored in a distributed manner in a part of the register modules already stored with data, the operation module  moves the data segments to one of the data recovery register modules, so as to recover the demand data. For example, the demand data is the fifth piece of graphics operation data , and the fifth piece of graphics operation data  has been divided into a plurality of data segments  and stored in a distributed manner in the first register module  and the fourth register module . In this case, the operation module  moves the data segments  to the fifth register module  (or the sixth register module ), so as to recover the fifth piece of graphics operation data .","In addition, when dividing and storing the unstored data in a distributed manner into a part of the register modules already stored with data, the operation module  first analyzes the remaining configuration space of each register module already stored with data, obtains numbers of times of data movement required for recovering the unstored data when the data segments are configured in different combinations of the register modules already stored with data, and finds a minimum number of times of data movement, so as to store the unstored data in a distributed manner into a part of the register modules already stored with data corresponding to the minimum number of times of data movement.","For example, the operation module  obtains corresponding numbers of times of data movement when the fifth piece of graphics operation data  is configured in a distributed manner in a combination of the first register module  and the fourth register module , a combination of the second register module  and the fourth register module , and a combination of the first register module , the second register module  and the fourth register module . For example, for the combination of the first register module  and the fourth register module  and the combination of the second register module  and the fourth register module , the operation module  needs to perform data movement twice (the volumes of data to be moved are one unit and two units respectively); while for the combination of the first register module , the second register module  and the fourth register module , the operation module  needs to perform data movement three times (the volume of data to be moved is one unit each time). Therefore, the operation module  configures the fifth piece of graphics operation data  into the combination of the first register module  and the fourth register module , or the combination of the second register module  and the fourth register module .","Alternatively, when dividing and storing the unstored data in a distributed manner into a part of the register modules already stored with data, the operation module  divides the unstored data according to sizes of the remaining configuration spaces of the plurality of register modules already stored with data. For example, the operation module  analyzes the remaining configuration spaces of the first register module , the second register module  and the fourth register module , and learns that the fourth register module  has the largest remaining configuration space, which is of two units. The operation module  divides the fifth piece of graphics operation data  into a data segment  of two units and a data segment  of one unit, configures the data segment  of two units into the fourth register module , and configures the data segment  of one unit into the first register module  or the second register module .",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 5","FIG. 2","FIG. 4","FIG. 5"]},"The operation module  obtains a piece of unstored data from the graphics operation data (Step S). In this step, the operation module  analyzes the graphics operation data to establish a storage sequence corresponding to the graphics operation data, and obtains the unstored data from the graphics operation data according to the storage sequence.","The operation module  sorts the graphics operation data according to data volumes, so as to form the storage sequence. Alternatively, before a program code corresponding to the graphics operation data is executed, the operation module  analyzes the program code to obtain a data read sequence of the graphics operation data, and uses the data read sequence as the storage sequence.","The operation module  judges whether a register module already stored with data and having a remaining configuration space sufficient for configuring the unstored data exists among the plurality of register modules (Step S).","The operation module  compares a data volume of the unstored data with the remaining configuration space of each register module already stored with data in a spatial first fit manner, a spatial best fit manner, a spatial worst fit manner or a spatial next fit manner.","When the operation module  judges that a register module already stored with data and having a remaining configuration space sufficient for configuring the unstored data exists, the operation module  stores the unstored data into the found register module already stored with data (Step S).","On the contrary, when the operation module  judges that the remaining configuration space of each register module already stored with data is insufficient for storing the unstored data (also including the situation that no register module already stored with data exists), the operation module  judges whether a register module without storing data exists among all the plurality of register modules (Step S).","When judging that a register module without storing data exists, the operation module  stores the unstored data into the register module without storing data (Step S).","However, when judging that no register module without storing data exists and the remaining configuration space of each register module already stored with data is insufficient for configuring the unstored data, the operation module  divides and stores the unstored data in a distributed manner into a part of the register modules already stored with data (Step S).","The operation module  first analyzes the remaining configuration space of each register module already stored with data, obtains numbers of times of data movement required for recovering the unstored data when the unstored data is divided into data segments and configured in different combinations of the register modules already stored with data, and finds a minimum number of times of data movement, so as to store the unstored data in a distributed manner into a part of the register modules already stored with data corresponding to the minimum number of times of data movement.","The operation module  divides the unstored data according to sizes of the remaining configuration spaces of the plurality of register modules already stored with data, and stores the data segments into corresponding configuration spaces of the plurality of register modules already stored with data.","Then, the operation module  judges whether there is still a piece of unstored data to be processed (Step S). If yes, the process returns to Step S to obtain another piece of unstored data for data configuration operations; otherwise, the process is ended.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 6"},"The operation module  judges whether demand data required by execution of an executive program is divided into a plurality of data segments and stored in a distributed manner in a part of the register modules already stored with data (Step S). If yes, the operation module  moves the data segments to a data recovery register module, so as to recover the demand data (Step S); otherwise, the process returns to Step S.","The invention being thus described, it will be obvious that the same may be varied in many ways. Such variations are not to be regarded as a departure from the spirit and scope of the invention, and all such modifications as would be obvious to one skilled in the art are intended to be included within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention will become more fully understood from the detailed description given herein below for illustration only, and thus are not limitative of the present invention, and wherein:",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 3A","FIG. 3F"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
