---
title: Validation of function call parameters
abstract: In one embodiment, a method of validating an input parameter to a function call is provided. In this method, the function call for a function is received, and this function call includes an input parameter. A validation rule associated with the function is accessed from a file that is located separately from the function itself. The input parameter then is validated based on the validation rule associated with the function, and the function may then be called based on the validation of the input parameter.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08839420&OS=08839420&RS=08839420
owner: Adobe Systems Incorporated
number: 08839420
owner_city: San Jose
owner_country: US
publication_date: 20090501
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","DESCRIPTION OF EXAMPLE EMBODIMENTS"],"p":["The present disclosure relates generally to computer security. In one embodiment, the disclosure relates to the validation of function call parameters.","A type of attack against an exposed application programming interface (API) is by way of passing invalid input as parameters to API functions. A program application may not properly validate the format or structure of the input, providing a means for an attacker to gain control or access to a system.","Many attackers use a technique called \u201cfuzz\u201d testing to find unvalidated parameters. Attackers automated the generation of invalid input to API functions while monitoring the application for invalid behavior. This makes finding unvalidated parameters trivial.","Currently, to prevent such attacks, the program itself must be updated with a patch that remedies the security breach by adding validation. However, the development of a patch is labor-intensive and can take a long time because, for example, the patch needs to be tested to ensure that the program modification will not create other problems in the program.","The description that follows includes illustrative systems, methods, techniques, instruction sequences, and computing machine program products that embody various embodiments. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide an understanding of various embodiments of the inventive subject matter. It will be evident, however, to those skilled in the art that embodiments of the inventive subject matter may be practiced without these specific details. In general, well-known instruction instances, protocols, structures and techniques have not been shown in detail.","The embodiments described herein provide techniques for validating input parameters to function calls. Before a function is called, input parameters used by a function are initially validated based on validation rules. In an embodiment, as will be explained in more detail below, these validation rules are stored separately from the function such that the validation rules can be updated separately from the function itself. Depending on whether the input parameters are valid, the function may be executed or prevented from being executed.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 1","FIG. 1"]},"An \u201cinput parameter,\u201d refers to a variable that is given a specific value during the execution of the function. In the example of , the function \u201cfoo( )\u201d receives or takes in an input parameter by the name of \u201camount.\u201d This input parameter \u201camount\u201d is first validated before it is called and executed. In general, validation is the process of ensuring that a function operates on correct, secure, and\/or useful data (or input parameters). Here, input parameters are validated to ensure that, for example, they will not cause the function to break or cause any error. Validation uses validation rules that check for correctness, security, and\/or usefulness of data that is input to the system. As explained in more detail below, the input parameter \u201camount\u201d may be subjected to a variety of different types of validation rules, which are described in more detail below. In the example of , a value assigned to the input parameter \u201camount\u201d is checked to see whether it falls between the values 1 and 10. If the input parameter \u201camount\u201d falls between the values 1 and 10, then the input parameter \u201camount\u201d is valid and, as a result, the function \u201cfoo( )\u201d is executed based on this input parameter \u201camount.\u201d On the other hand, if the input parameter \u201camount\u201d falls outside the values between 1 and 10, then the input parameter \u201camount\u201d is invalid and, as a result, the function \u201cfoo( )\u201d is prevented from being executed.","In accordance with an embodiment, as explained in more detail below, the validation rules are located or stored separately from the function \u201cfoo( ).\u201d Unlike the function \u201cfoo( ),\u201d these validation rules can be edited with a variety of different document editing applications and, therefore, the validation rules can be updated, for example, without patching the functions. It should be noted that a patch is a small piece of software designed update a function by, for example, modifying the function's binary executable.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2","b":["200","200","200"]},"The computing device  executes an operating system  that manages the software processes and\/or services executing on the computing device . As depicted in , these software processes and\/or services may include an API , a validation engine module , and an API implementation module . Additionally, the computing device  stores validation rules  that are used by the validation engine module .","The API  is an interface by which an application program accesses services. For example, the API  specifies an interface and controls the behavior of objects specified in that interface. In particular, function calls may be made through the API  and, in turn, the API  transmits the function calls to the validation engine module . The API implementation module  stores the various functions , which may be called by the API  to perform various tasks, and also executes the various functions  when called. A script interpreter is an example of the API implementation module .","Before one or more functions  are executed, the validation engine module  is configured to validate input parameters to function calls passed from the API  and also configured to call the functions based on the validation. In particular, the validation engine module  is configured to validate by checking the input parameters to the function calls based on the validation rules . These validation rules  are stored in a file and, as depicted in , this file is located separately from the functions . That is, the file is stored separately from the functions . As an example, the file with the validation rules  can be located in one location of a nonvolatile memory while the functions  stored in the API implementation module  are located in a different location (as identified by a different memory address) of the same nonvolatile memory.","It should be appreciated that in other embodiments, the computing device  may include fewer, more, or different modules apart from those shown in . For example, in an alternate embodiment, the API  may be integrated with the API implementation module  to form a single module.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 3","FIG. 2","FIG. 3"],"b":["300","300","208","200","302","304"]},"After the validation rules associated with the function are accessed from the file, the input parameter included in the function call is validated at  based on at least one validation rule that is associated with the input parameter. If the validation identifies the input parameter to be valid or acceptable, then the function requested by the function call is called at . The function is called by passing the input parameter to the function, thereby resulting in the execution of the function. On the other hand, if the validation identifies that the input parameter is invalid or unacceptable, then the function is prevented from being called such that the non-execution of the function may avoid, for example, the introduction of potential errors and thereby reduces the likelihood of a security breach.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 4","b":["400","400","402","204","208","406","210","212","404"]},"The document  includes a function call for an exposed function named \u201cdisplaymessage( )\u201d , which is stored in the API implementation module . As used herein, a \u201cdocument\u201d refers to electronic media content that is accessible by computer technology. For example, the document  can be a file that is not an executable file or a system file and includes data for use by a computer program. Examples of the document  include a single or multiple files that are accessible by and\/or associated with electronic document processing applications such as word processing applications, document viewers, email applications, presentation applications, spreadsheet applications, diagramming applications, graphic editors, graphic viewers, enterprise applications, and other applications. The document  may be composed of alphanumeric texts, symbols, images, videos, sounds, and other data. It should be appreciated that the document  can have a variety of file formats that, for example, may be identified by data within the document  and\/or by the filename extension. Examples of file formats that may be associated with document  include Adobe Portable Document Format (PDF), Microsoft DOC format, Hypertext Markup Language (HTML) format, Extensible Markup Language (XML) format, Microsoft XLS format, and Tag Image File Format (TIFF).","In the example of , the function call for the exposed function \u201cdisplaymessage( )\u201d  includes an input parameter \u201cHello World!\u201d The API  receives the function call and passes it to the validation engine module . In an embodiment, the validation engine module  accesses the file , which includes the validation rules , upon receipt of the function call. In an alternate embodiment, the validation engine module  can access this file  and load it in memory before receipt of the function call. From this file, a validation rule associated with the particular function \u201cdisplaymessage( )\u201d  is accessed or retrieved from the file , and the validation engine module  then validates the input parameter \u201cHello World!\u201d based the validation rule.","If the validation engine module  identifies the input parameter \u201cHello World!\u201d to be valid, then the validation engine module  calls the exposed function \u201cdisplaymessage( )\u201d  by passing the function call (and the input parameter \u201cHello World!\u201d) to the API implementation module . The API implementation module  in turn executes the exposed function \u201cdisplaymessage( )\u201d . As depicted in , the execution of the function \u201cdisplaymessage( )\u201d  results in the rendering or display of the message \u201cHello World!\u201d on the monitor . On the other hand, if the validation engine module  identifies the input parameter \u201cHello World!\u201d to be invalid, then the validation engine module  prevents the function \u201cdisplaymessage( )\u201d  from being called by, for example, not calling the function \u201cdisplaymessage( )\u201d .",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 5","b":"500"},"In one embodiment, the file may be a data structure  that is configured to store the validation rules. In general, the data structure  provides context for the organization of data. Examples of data structures include tables, arrays, linked lists, databases, and other data structures. In addition to the validation rules, the data structure  may include the input parameters (or identifiers that identify the input parameters), functions (or identifiers that identifies the functions), and\/or associations between the input parameters and the validation rules. For example, as depicted in , the data structure  is in the form of a table that stores the validation rules and their associated input parameters and\/or functions. The table is organized in rows and columns. The elements associated with the column \u201cvalidation rule\u201d include the validation rules. The elements associated with the column \u201cfunction\u201d include the names of the functions associated with the validation rules. The elements associated with the column \u201cinput parameter\u201d include the names of the input parameters associated with the validation rules.","The associations can be identified by the placement or organization of the functions, input parameters, and\/or validation rules. In this table, elements across the same row are associated with each other. For example, the validation rule \u201cType=string\u201d is associated with the function \u201cdisplaymessage( )\u201d and associated with the input parameter \u201cmessage.\u201d Similarly, the validation rule \u201cRequired=Yes\u201d is associated with the function \u201crectanglearea( )\u201d and associated with the input parameter \u201cwidth.\u201d","There are a variety of different validation rules. For example, one validation rule identifies a parameter type used by the function. A \u201cparameter type,\u201d as used herein, refers to a classification of a type or kind of data. Examples of parameter types include string, floating-point, integer, date, time, and Boolean. In the example depicted in , the validation rule associated with the function \u201cdisplaymessage( )\u201d and the input parameter \u201cmessage\u201d defines a pre-defined parameter type \u201cstring.\u201d Here, the validation of the input parameter \u201cmessage\u201d includes an identification that a parameter type of a received input parameter matches the predefined parameter type \u201cstring.\u201d If the parameter type is not a string (e.g., an integer), then the function \u201cdisplaymessage( )\u201d cannot accept this parameter type and, therefore, this input parameter is invalid. Conversely, the validation rule may also identify the parameter type to include all parameter types except the one defined by the validation rule. For example, the validation rule may instead be interpreted as to include every parameter type except for the predefined parameter type \u201cstring.\u201d Therefore, parameter types such as integer and floating-point, which are a mismatch to the predefined parameter type \u201cstring,\u201d are acceptable to the function \u201cdisplaymessage( )\u201d and can be identified as being valid.","A second example of a validation rule defines a particular parameter range. A \u201cparameter range,\u201d as used herein, refers to limits between which variation of the input parameter is possible. The validation of the input parameter includes identifying the input parameter to be within or outside of the parameter range. In the example of , the function \u201crectanglearea( )\u201d calculates an area of a rectangle based on the input parameters \u201clength\u201d and \u201cwidth.\u201d The validation rule associated with the input parameter \u201clength\u201d defines the parameter range between 0 and 10,000. If the input parameter \u201clength\u201d is a value that falls between 0 and 10,000, then the input parameter is valid. On the other hand, if the input parameter is identified to be outside this parameter range, then the input parameter may be invalid. Conversely, in another example, if the input parameter \u201clength\u201d is a value that falls between 0 and 10,000, then the input parameter can also be invalid. If the input parameter is identified to be outside this parameter range, then the input parameter can also be valid. In addition to numbers, it should be appreciated that the parameter range may also apply to, for example, a character count. For example, a validation rule may define an input parameter to be a string of 100 or fewer characters.","A third example of a validation rule defines a requirement of the input parameter. That is, the validation rule defines whether the received input is necessary for the function. The validation of the parameter includes identifying the inclusion or exclusion of the parameter. In the example of , the validation rules associated with the \u201clength\u201d and \u201cwidth\u201d input parameters define that both of these input parameters are necessary for the function \u201crectanglearea( ),\u201d as an area of a rectangle cannot be calculated without both the length and the width. If the function call for the function \u201crectanglearea( )\u201d includes both the \u201clength\u201d and \u201cwidth,\u201d then the validation identifies that they are both included and as a result, the input parameters are valid. On the other hand, if either the input parameter \u201clength\u201d or \u201cwidth\u201d is excluded from the function call, then the validation identifies that one of the input parameters is invalid.","A fourth example of the validation rule defines a predefined structure of the input parameter. A \u201cstructure,\u201d as used herein, refers to a programming language construct. For example, the structure may refer to a class that is used as a blueprint to create objects. In another example, the structure may refer to a structure of an object (e.g., structure of object descriptions). This validation includes the identification that the structure of the input parameter matches or mismatches the predefined structure. For example, if the input parameter of a JavaScript Object has a structure:",{"@attributes":{"id":"p-0037","num":"0036"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{"]},{"entry":[{},"\u2003port: 8080,"]},{"entry":[{},"\u2003path: \u201c\/somefile.html\u201d"]},{"entry":[{},"},"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{"]},{"entry":[{},"\u2003url: \u201chttp:\/\/someurl\u201d,"]},{"entry":[{},"\u2003port: 8080,"]},{"entry":[{},"\u2003path: \u201c\/somefile.html\u201d"]},{"entry":[{},"},"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"A fifth example of the validation rule defines a predefined format of the input parameter. The validation of the parameter includes identifying the match or mismatch of the input parameter's format. For example, the validation rule may define or specify a string format to include only printable characters (as opposed to control characters). In another example, the validation rule may define or specify a string format that represents a valid a path or Uniform Resource Locator (URL).",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 6","FIG. 2","FIG. 6"],"b":["600","600","204","208","212","200","602","604","605","610"]},"On the other hand, if the validation engine module identifies the source to be not from a trusted source, then the validation engine module first validates the input parameter before calling the function. With the file loaded in memory, the validation engine module identifies a validation rule associated with the input parameter at  and validates the input parameter based on the identified validation rule at . If the input parameter is invalid, then the validation engine module prevents the function from being called by not calling the function as requested by the function call. On the other hand, if the input parameter is valid, then the validation engine module calls the function at  by passing the function call with the input parameter to the API implementation module, which executes the function.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 7","b":"200"},"The example of the computing device  includes a processor  (e.g., a central processing unit (CPU), a graphics processing unit (GPU) or both), a main memory , and a static memory , which communicate with each other via bus . The computing device  may further include a video display unit  (e.g., a plasma display, a liquid crystal display (LCD) or a cathode ray tube (CRT)), an alphanumeric input device  (e.g., a keyboard), a user interface (UI) navigation device  (e.g., a mouse), a disk drive unit , a signal generation device  (e.g., a speaker), and a network interface device .","The disk drive unit  includes machine-readable medium  on which is stored one or more sets of instructions and data structures (e.g., software ) embodying or utilized by any one or more of the methodologies or functions described herein. The software  may also reside, completely or at least partially, within the main memory  and\/or within the processor  during execution thereof by the computing device , where the main memory  and the processor  also constituting machine-readable, tangible media. The software  may further be transmitted or received over a computer network  via network interface device  utilizing any one of a number of well-known transfer protocols (e.g., HTTP).","While the machine-readable medium  is shown in an example embodiment to be a single medium, the term \u201cmachine-readable medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The term \u201cmachine-readable medium\u201d shall also be taken to include any medium that is capable of storing, encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present application, or that is capable of storing, encoding or carrying data structures utilized by or associated with such a set of instructions. The term \u201cmachine-readable medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, optical and magnetic media, and carrier wave signals.","Certain embodiments are described herein as including logic or a number of components, modules, or mechanisms. Modules may constitute either software modules (e.g., code embodied on a machine-readable medium or in a transmission signal) or hardware modules. A hardware module is tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments, one or more computer systems (e.g., a standalone, client or server computer system) or one or more hardware modules of a computer system (e.g., a processor or a group of processors) may be configured by software (e.g., an application or application portion) as a hardware module that operates to perform certain operations as described herein.","In various embodiments, a hardware module may be implemented mechanically or electronically. For example, a hardware module may comprise dedicated circuitry or logic that is permanently configured (e.g., as a special-purpose processor, such as a field programmable gate array (FPGA) or an application-specific integrated circuit (ASIC)) to perform certain operations. A hardware module may also comprise programmable logic or circuitry (e.g., as encompassed within a general-purpose processor or other programmable processor) that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module mechanically, in dedicated and permanently configured circuitry, or in temporarily configured circuitry (e.g., configured by software) may be driven by cost and time considerations.","Accordingly, the term \u201chardware module\u201d should be understood to encompass a tangible entity, be that an entity that is physically constructed, permanently configured (e.g., hardwired) or temporarily configured (e.g., programmed) to operate in a certain manner and\/or to perform certain operations described herein. Considering embodiments in which hardware modules are temporarily configured (e.g., programmed), each of the hardware modules need not be configured or instantiated at any one instance in time. For example, where the hardware modules comprise a general-purpose processor configured using software, the general-purpose processor may be configured as respective different hardware modules at different times. Software may accordingly configure a processor, for example, to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.","Modules can provide information to, and receive information from, other hardware modules. For example, the described hardware modules may be regarded as being communicatively coupled. Where multiple of such hardware modules exist contemporaneously, communications may be achieved through signal transmission (e.g., over appropriate circuits and buses) that connect the hardware modules. In embodiments in which multiple hardware modules are configured or instantiated at different times, communications between such hardware modules may be achieved, for example, through the storage and retrieval of information in memory structures to which the multiple hardware modules have access. For example, one hardware module may perform an operation, and store the output of that operation in a memory device to which it is communicatively coupled. A further hardware module may then, at a later time, access the memory device to retrieve and process the stored output. Hardware modules may also initiate communications with input or output devices, and can operate on a resource (e.g., a collection of information).","The various operations of example methods described herein may be performed, at least partially, by one or more processors that are temporarily configured (e.g., by software) or permanently configured to perform the relevant operations. Whether temporarily or permanently configured, such processors may constitute processor-implemented modules that operate to perform one or more operations or functions. The modules referred to herein may, in some example embodiments, comprise processor-implemented modules.","Similarly, the methods described herein may be at least partially processor-implemented. For example, at least some of the operations of a method may be performed by one or processors or processor-implemented modules. The performance of certain of the operations may be distributed among the one or more processors, not only residing within a single machine, but deployed across a number of machines. In some example embodiments, the processor or processors may be located in a single location (e.g., within a home environment, an office environment or as a server farm), while in other embodiments the processors may be distributed across a number of locations.","The one or more processors may also operate to support performance of the relevant operations in a \u201ccloud computing\u201d environment or as a \u201csoftware as a service\u201d (SaaS). For example, at least some of the operations may be performed by a group of computers (as examples of machines including processors), these operations being accessible via a network (e.g., the Internet) and via one or more appropriate interfaces (e.g., Application Program Interfaces (APIs)).","While the embodiment(s) is (are) described with reference to various implementations and exploitations, it will be understood that these embodiments are illustrative and that the scope of the invention(s) is not limited to them. In general, techniques for validating input parameters to function calls may be implemented with facilities consistent with any hardware system or hardware systems defined herein. Many variations, modifications, additions, and improvements are possible.","Plural instances may be provided for components, operations or structures described herein as a single instance. Finally, boundaries between various components, operations, and data stores are somewhat arbitrary, and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the invention(s). In general, structures and functionality presented as separate components in the exemplary configurations may be implemented as a combined structure or component. Similarly, structures and functionality presented as a single component may be implemented as separate components. These and other variations, modifications, additions, and improvements fall within the scope of the invention(s)."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["The present disclosure is illustrated by way of example and not limitation in the figures of the accompanying drawings, in which like references indicate similar elements and in which:",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
