---
title: Method and apparatus for transaction recording and visualization
abstract: Methods and apparatus for recording and visualizing transactions of a test bench simulation are disclosed. Transaction-specific data generated from a test bench simulation may be displayed in a sequence diagram view to provide a view of the transactions arranged sequentially in time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09081924&OS=09081924&RS=09081924
owner: Synopsys Taiwan Co., Ltd.
number: 09081924
owner_city: Taipei
owner_country: TW
publication_date: 20110314
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims the benefit under 35 U.S.C. \u00a7119(e) of U.S. Provisional Application Ser. No. 61\/318,627, filed on Mar. 29, 2010, which is incorporated by reference herein in its entirety.","This disclosure relates to methods and apparatus for recording and visualizing transaction-specific data for a test bench simulation.","The Open Verification Methodology (OVM) and Universal Verification Methodology (UVM) are examples of standard transaction-based methodologies used to verify semiconductor chip designs. The OVM test bench environment typically includes, for example, the hardware or device under test (DUT) and the software or test bench including clocks, signals sent, and signals received. The methodologies are transaction-based, meaning that transactions between test bench components are constructs that represent different states of a signal. For example, a transaction representing a memory write command may include the address, verify, write, etc. A transaction may include higher level transactions as well as lower level transactions.","Transaction data for a simulation recorded in a fast signal database (FSDB) may be opened in a waveform view, and example of which is shown in . A waveform view allows an integrated circuit designer to visualize the signal transitions over time and the relationship of those signals with other signals in an integrated circuit design. In the OVM waveform view, transactions are typically shown as boxes with each box containing detailed information about a specific transaction for an individual component. For a particular component, the boxes containing transaction information are arranged in relative temporal order. While the waveform view provides a visualization of the relative temporal sequence of transactions for a particular component and between components of a DUT, the waveform view does not readily provide a sense of the absolute temporal sequence of transactions for the simulation.","Various other views of a simulation have also been developed to facilitate verification of integrated circuit design. For example, a temporal flow view (TFV) provides a sequential view of hardware components, state diagrams show the relationship between hardware components, and Unified Modeling Language (UML) diagrams may provide information about structure, behavior, and\/or interactions of and\/or between the system components.","For example, digital logic hardware events may be displayed in sequential temporal order using tools such as SpringSoft Novas Temporal Flow View (TFV). On the software side, tools such as Unified Modeling Language (UML) provide graphical representations of software systems. An example of a UML sequence diagram is shown in . In particular, the UML sequence diagram shows test bench components and the interactions between these components in their relative sequential temporal order. The primary use of UML has been to document a program or system. However, to facilitate system design verification it may be useful to generate and display interactions representing the dynamic behavior of a test bench simulation.","The information of interest to the integrated circuit designer in a sequence diagram is the test bench components (OVM or UVM objects) and the transactions passing between these components. Using existing verification tools, detailed information about all transactions and test bench components including information concerning which test bench components are sending and receiving transaction-specific data may be recorded. A sequence diagram view may be generated from the data stored in the debug database during a test bench simulation and then displayed to provide an alternative and more intuitive view of the test bench behavior. When used in conjunction with traditional hardware-focused waveform views, a sequence diagram view provided by the present disclosure may serve as a useful tool for system development engineers to analyze, debug, and understand the design and verification environment of a DUT.","Leveraging SystemVerilog code, a flexible logging function that records messages into a debug database, an OVM library may be modified and implemented to automatically log transaction-level activity between an interface such as a sequencer making a request and a driver returning a response. In this manner each request transaction may be associated with a response transaction. While this information may be useful to a user in the context of waveform and table views of the simulation, the availability of transaction-specific information enables the user to generate a sequence diagram view of the specific transactions in simulation time that provides a more intuitive view of the test bench activity.","In a first aspect, methods are disclosed comprising running a simulation comprising transactions on a device under test, wherein the simulated transactions comprises multiple test bench components; generating a transaction database as a response to the simulation, wherein the transaction database comprises transaction-specific data elements for a specific transaction between the test bench components; generating a sequence diagram from the transaction database, wherein an element of the sequence diagram comprises a temporal relationship between two or more of the transaction-specific data elements; and displaying the sequence diagram, wherein the displayed sequence diagram comprises displaying at least two test bench components and displaying transactions between the at least two test bench components arranged temporally.","In a second aspect, apparatus are disclosed comprising a simulator for simulating transactions on a device under test, wherein the simulation comprises multiple test bench components; a transaction database for storing simulation results from the simulator, wherein the transaction database comprises transaction-specific data elements for a specific transaction between the test bench components; a sequence diagram generator for generating a sequence diagram from the transaction database, wherein an element of the sequence diagram comprises a temporal relationship between two or more of the transaction-specific data elements; and an output device for displaying the sequence diagram, wherein the displayed sequence diagram comprises an image of at least two test bench components and transactions between the at least two test bench components arranged temporally.","It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the claimed embodiments.","Reference will now be made in detail to certain embodiments, examples of which are illustrated in the accompanying drawings.","The components of an OVM-based transaction-level verification environment include a stimulus generator (sequencer) to create transaction-level traffic to a device under test (DUT), a driver to convert these transactions to signal-level stimuli at the DUT interface, a monitor to recognize signal-level activity on the DUT interface and to convert the activity into transactions, and an analyzer, such as a coverage collector or scoreboard, to analyze the transactions. In a typical SystemVerilog test bench there is a driver and one or more levels of sequencers. Transactions represent, for example, data passed between sequencers and between the lower-level sequencer and the driver. In general, it is useful to obtain data for the transactions between the sequencer and the driver, and between the monitor and the analyzer. Other transactions may also be of interest. The OVM library provides functions for extracting and recording information in the FSDB. Various OVM library commands may be defined and enabled by the user to generate a transaction database. For example, OVM library commands may be assigned transaction recording functions so that running a simulation will then result in transaction-specific data being recorded and stored in the FSDB.","During a simulation, transactions may be automatically recorded using the OVM transaction recording infrastructure. OVM library functions may be modified to provide a modified OVM library. Users may then link to the modified OVM library and apply the existing OVM (or UVM) transaction recording methodology to automatically record transaction-specific data to the FSDM file. For example, empty functions within the OVM library may be used to record the transactions and store transaction-specific data in a transaction data base. For example, empty OVM functions that may be implemented to record and store transaction-specific data include, for example, \u201covm_create_fiber\u201d, \u201covm_set_index_attribute_by_name\u201d, \u201covm_set_attribute_by_name\u201d, \u201covm_check_handle_kind, ovm_begin_transaction\u201d, \u201covm_end_transaction, ovm_link_transaction\u201d, \u201covm_free_transaction_handle\u201d, and others. The functions may be implemented to automatically record transactions during a simulation. For example, the following modified functions may be defined to record and store transaction-specific data:","\u201covm_create_fiber\u201d: Given a name, create a stream on which transactions are recorded.","\u201covm_set_index_attribute_by_name\u201d: Not used.","\u201covm_set_attribute_by_name\u201d: Add a named attribute to this transaction. Invoked by \u201covm_component::end_tr( )\u201d. For the monitor and driver, the user calls this application programming interface manually.","\u201covm_check_handle_kind\u201d: Return 1 if the type of the given \u2018handle\u2019 is htype, otherwise return 0. Legal hytpes are \u2018Stream\u2019 and \u2018Transaction\u2019.","\u201covm_begin_transaction\u201d: Return a handle to a new transaction. The new transaction has attributes such as whether it is active, the name, start time (now or at \u201cbegin_time\u201d), label, and description.","\u201covm_end_transaction\u201d: Given an open transaction handle, end it. If \u201cend_time\u201d is non-zero, then end the transaction at \u201cend_time\u201d.","\u201covm_link_transaction\u201d: Given two transaction handles, create a relationship between the handles.","\u201covm_free_transaction_handle\u201d: Given a transaction handle, release storage for the transaction. Calling \u201cfree_transaction_handle( )\u201d means that the handle is no longer to be used anywhere; after this call the transaction handle is invalid.","To enable transaction recording and storing, a user may first invoke the modified OVM library using function \u201covm_misc.sv\u201d by adding the command \u201cset_confi_int(\u201c*\u201d, \u201crecording_detail\u201d, OVM_FULL)\u201d in the build function of the test bench, which calls the command \u201cvoid\u2032(this.begin_tr( )) and ovm_component:end_tr( )\u201d in the driver and monitor. Other functions and\/or command definitions may be used to record and store the transaction-specific data to the FSDB.","The transactions may then be displayed, for example, in a waveform view showing all transactions between an interface such as between the sequencer and the driver for an OVM test bench. However, the modified OVM library may also be instrumented to automatically record information between a test bench component making a request (sequencer) with a test bench component returning a response (driver). In this way each request transaction may be associated with a response transaction. While this information is useful to the user in the context of the waveform view and the table view, the availability of such complete information may facilitate creating other views of the test bench activity such as a sequence diagram view.","An example of an OVM sequence diagram view of the test bench activity is shown in . In , the absolute time during the simulation (simulation time) is shown increasing from top to bottom on the left side of the image. A list of test bench components is displayed horizontally along the top of the sequence diagram. Transactions between test bench components are shown as blocks bounded by arrows pointing from the sending component to the receiving component. The blocks are also referred to as a sequence. A sequence represents a higher level transaction that includes one or more lower level transactions.","Transaction-specific data elements include, for example, the name of the specific transaction, the start time of the specific transaction, an end time or duration of the specific transaction, the interface on which the specific transaction takes place, the name of a variable associated with the specific transaction, and the value for the named variable associated with the specific transaction at an identified time. The interface on which a specific transaction takes place includes, for example, the name of a test bench component making a request and the name of a test bench component returning a response to the request. The test bench components may be, for example, one or more sequencers and one or more drivers. The sequence diagram may be displayed to show transactions between at least two components as an identifier relating the at least two components at the time the transaction occurred during the simulation. For example, as shown in , in certain embodiments, the identifier may be a horizontal arrow between the two components. Examples of displayed transactions include data that is passed between two sequencers and data that is passed between a sequencer and a driver. A displayed transaction may represent a single lower level transaction or may represent a higher level transaction consisting of multiple lower level transactions. A higher level transaction may be an intermediate higher level transaction such that the intermediate higher level transaction is an element of a still higher level transaction.","A sequence\/transaction may be selected and expanded to show the multiple lower level transactions. The lower level transactions include transactions between the two components that were initiated by a transaction that occurs earlier in simulation time. For example, referring to , by selecting the sequence between component . . . [0]#upper_sequencer and component . . . asters[0]#sequencer, the sequence may be expanded to show transactions at the next lower level, as shown in . Selecting a transaction may be done, for example, by activating a cursor while pointing at a specific transaction or by hovering a cursor over the specific transaction or sequence. Also, as shown in , the selected transaction may be highlighted. Other lower level transactions may be visualized by selecting the desired sequence. For example, by selecting the sequence \u201c . . . rite_seq.rand_sub_seq\u201d at simulation time  in , the sequence may be expanded to show the lower level transactions associated with the sequence arranged in order during simulation time as shown in . Again, the selected transaction as well as the request(s) and response(s) corresponding to the selected transaction may be highlighted. Specifically, as shown in , at time , component . . . [0]#upper_sequencer sends command \u201cd_sub_seq.req(WRITE)\u201d to component . . . asters[0]#sequencer. The command prompts a request \u201cwer_seq.1_item(WRITE)\u201d from component asters . . . [0]#sequencer to component . . . 0#masters[0]#driver, which returns response \u201c1_item(RESPONSE)\u201d to component . . . asters[0]#sequencer.","In addition to expanding a higher level transaction to show lower level transactions encompassed by the higher level transaction, multiple lower level transactions may be collapsed into their corresponding higher level transaction. For example, referring to , selecting the transaction \u201c . . . nd_sub_seq.req(READ)\u201d at time  in  collapses or hides the intermediate transaction \u201c . . . nd_sub_seq.req(READ)\u201d into the higher level sequence shown in . As shown in , all transactions corresponding to selected transaction \u201c . . . nd_sub_seq.req(READ)\u201d may be collapsed into the corresponding higher level sequence.","As illustrated in , transactions that are temporally ordered in simulation time may be selected and expanded or collapsed to facilitate the ability of a user to visualize related test bench transactions and to debug the DUT.","In certain embodiments, additional details or attributes of a specific transaction may be displayed by selecting a specific transaction. This feature is shown in , where the additional details or attributes of the transaction \u201cd_sub_seq.req(WRITE)\u201d at time  are displayed in an overlay when the user selects the transaction.","Related transactions may also be identified by selecting a specific transaction. For example, as shown in , selecting transaction \u201cd_sub_seq.req(WRITE)\u201d at time  causes the related write transaction \u201cwer_seq.1_item(WRITE)\u201d and response transaction \u201c1_item(RESPONSE)\u201d to be highlighted as solid horizontal and dashed lines, respectively. Also, as shown in , related transactions may be highlighted (see bold solid and dashed horizontal lines) even though the related transactions may not be contiguous in simulation time. In the figures, highlighting is indicated by bold solid and dashed lines. Alternatively, transactions may be highlighted using different colors or using other appropriate demarcation.","In certain embodiments, related transactions may be traced forward or backward in time. By selecting a specific transaction, a related transaction that initiated a selected transaction may be identified or a related transaction that was prompted by a selected transaction and occurs later in time may be identified. The selected transaction and the related transaction(s) may be identified, for example, by color. For example, as illustrated in  and , by selecting a specific transaction, in this case, \u201cwer_seq.1_item(READ)\u201d, between components . . . masters[0]#sequencer and . . . 0#masters[0]#driver in , the related transaction \u201cnd_sub_seq.req(READ)\u201d, which occurs earlier in time, becomes highlighted (bold dashed lines). Similarly, as shown in , related transactions may also be traced forward in time, where selecting transaction \u201c . . . nd_sub_seq.req(READ)\u201d highlights related transaction \u201c . . . wer_seq.1_item(READ)\u201d, which occurs later in time.","To further facilitate the ability of a user to debug a DUT, a sequence diagram view may be synchronized to and displayed with one or more other views of the simulation such as the source code view and\/or the waveform view. The simultaneous display of the source code view (upper left window), the waveform view (lower window), and the sequence diagram view (upper right window) for a simulation is illustrated in . The views are synchronized to display information about the test bench and transactions at a particular time during the simulation. The sequence diagram view may be synchronized with other views of the simulation such as a waveform view so that the selection of a particular transaction on the sequence diagram view may cause a cursor to move to a position in the waveform view corresponding to the time during the simulation at which the transaction takes place. Because views of both the hardware activity and the sequence diagram view may be obtained from the simulation, the views may be synchronized in simulation time and correlated to provide the user with additional information useful, for example, to debug a DUT. By combining the hardware and software views to show the details of the interface, such as the SystemVerilog interface, that is used to connect the test bench to the hardware, the user may understand how the relationship between the hardware and the software influences the performance of the DUT.","In general, the test bench and the hardware design are inter-related by the hardware interface. By incorporating hardware interface information into a sequence diagram users may trace test bench transactions into the corresponding hardware interface signals. For example,  illustrates a sequence diagram view for a communication between a sequencer and a driver and incorporates the interface showing the mappings between the test bench and the hardware in terms of input and output ports. The mappings, represented by the dashed lines in , may show the test bench functions only (as illustrated), or may show the values of the signals sent to the ports. In certain embodiments, the interface may be implemented to provide a menu to access displays of specific interfaces. As shown in , specific interfaces include, for example, the driver\/hardware interface, the driver virtual interface, the monitor\/hardware interface, and the monitor virtual interface.  shows the hardware interface corresponding to the transactions of a selected driver.  shows the virtual interface corresponding to the transactions of a selected driver.","The OVM sequence diagram view exhibits several attributes that distinguish it from other test bench simulation views such as the UML sequence view and the TFV view. A typical design and verification environment includes both hardware (device under test) and the simulation software (test bench). The waveform and TFV views provide visualizations of the hardware activity. However, the sequence diagram view provided by the present disclosure provides a visualization of the test bench activity. The simulation data used to render the sequence diagram is automatically generated from a supported simulator without the need for user intervention as is required, for example, to obtain UML sequence views. Another advantage of the sequence diagram view is that the transactions are displayed in absolute simulation time, whereas software operations in a UML sequence view are only displayed relative in time to other operations.","In certain embodiments, methods provided by the present disclosure include running a test bench simulation comprising transactions on a device under test, wherein the device under test comprises multiple components, generating a transaction database as a response to the simulation, wherein the transaction database comprises transaction-specific data elements for a specific transaction; generating a sequence diagram from the transaction database, wherein an element of the sequence diagram comprises a temporal relationship between two or more of the transaction-specific data elements; and displaying the sequence diagram, wherein the displayed sequence diagram comprises at least two components and transactions between the at least two components arranged temporally.","In certain embodiments, apparatus provided by the present disclosure include a simulator for simulating transactions on a device under test, wherein the simulated transactions comprise multiple test bench components; a transaction database for storing simulation results from the simulator, wherein the transaction database comprises transaction-specific data elements for a specific transaction; a sequence diagram generator for generating a sequence diagram from the transaction database, wherein an element of the sequence diagram comprises a temporal relationship between two or more of the transaction-specific data elements between the test bench components; and an output device for displaying the sequence diagram, wherein the displayed sequence diagram comprises an image of at least two test bench components and transactions between the at least two test bench components arranged temporally.","In certain embodiments, an apparatus provided by the present disclosure includes a waveform view generator for generating a waveform view of the transaction-specific data elements for the simulation.","In certain embodiments, an apparatus provided by the present disclosure includes an input device for selecting a displayed transaction. The input device may be used, for example, to expand or collapse a transaction, to trace a transaction forward or backward in time, and\/or to identify related transactions.","An apparatus provided by the present disclosure may also include a source code database for the simulation; a source code view generator for generating a source code view of the simulation from the source code database; a synchronizer for synchronizing the source code view of the simulation with the sequence diagram; and an output device for displaying the synchronized source code view and the sequence diagram. An apparatus may include a waveform view generator for generating a waveform view of the simulation from the transaction database; a synchronizer for synchronizing the waveform view of the simulation with the sequence diagram; and an output device for displaying the synchronized waveform view of the simulation and the sequence diagram. In certain embodiments, the synchronized views and the sequence diagram may be displayed on the same output device. The output device may also be used to display a test bench interface relating the simulation source code to the input and output ports for the test bench.","An example of a process used to generate transaction-specific data is summarized in the diagram shown in .","In this example, there are three components: an upper_sequencer, a sequencer, and a driver in the agent masters[0]. First, the upper_sequencer sends sequence \u201cupper_write_seq\u201d to the sequencer. The sequence \u201cupper_write_seq\u201d contains three sub-sequences: \u201crand_sub_seq\u201d, \u201cwrite_sub_seq\u201d, and \u201cread_sub_seq\u201d. Each sub-sequence contains a sequence item \u201creq\u201d. When the sequencer receives the sequence item \u201creq\u201d, the sequencer converts the sequence item into sequence \u201cupper_to_lower_seq\u201d and sends it to the driver. The sequence \u201cupper_to_lower_seq\u201d contains sequence item \u201c1_item\u201d. When the driver receives sequence item \u201c1_item\u201d, the driver makes a copy, renames it \u201cresponse_item\u201d and sends the renamed sequence item \u201cresponse_item\u201d back to the sequencer.","An example of code elements enabling the process described in the table are provided as follows:",{"@attributes":{"id":"p-0065","num":"0064"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"class upper_write_seq extend ovm_sequence {"},{"entry":"\u2003rand_sub_seq rand_sub_seq_handle;"},{"entry":"\u2003write_sub_seq rand_sub_seq_handle;"},{"entry":"\u2003read_sub_seq rand_sub_seq_handle;"},{"entry":"{grave over (\u2009)}ovm_sequence_utils(upper_writeseq, xbus_master_upper_sequencer)"},{"entry":"\u2003virtual task body( ){"},{"entry":"\u2003\u2003\u2003OVM_DO(rand_sub_seq_handle); \u2192 Send a rand_sub_seq sub-sequence now"},{"entry":"\u2003\u2003\u2003OVM_DO(write_sub_seq_handle); \u2192 Send a write_sub_seq sub-sequence now"},{"entry":"\u2003\u2003\u2003OVM_DO(read_sub_seq_handle); \u2192 Send a read_sub_seq sub-sequence now"},{"entry":"\u2003\u2003}"},{"entry":"};"},{"entry":"class rand_sub_seq extend ovm_sequence {"},{"entry":"\u2003\u2003\u2003req req_handle;"},{"entry":"{grave over (\u2009)}ovm_sequence_utils(rand_sub_seq, xbus_master_upper_sequencer)"},{"entry":"\u2003virtual task body( ){"},{"entry":"\u2003\u2003\u2003\u2003OVM_DO(req_handle); \u2192 send a req \u201csequence item\u201d now"},{"entry":"\u2003}"},{"entry":"}"},{"entry":"class write_sub_seq extend ovm_sequence {"},{"entry":"\u2003\u2003\u2003req req_handle;"},{"entry":"{grave over (\u2009)}ovm_sequence_utils(write_sub_seq, xbus_master_upper_sequencer)"},{"entry":"\u2003virtual task body( ){"},{"entry":"\u2003\u2003\u2003\u2003OVM_DO(req_handle); \u2192 send a req \u201csequence item\u201d now"},{"entry":"\u2003}"},{"entry":"}"},{"entry":"class read_sub_seq extend ovm_sequence {"},{"entry":"\u2003\u2003\u2003req req_handle;"},{"entry":"{grave over (\u2009)}ovm_sequence_utils(read_sub_seq, xbus_master_upper_sequencer)"},{"entry":"\u2003virtual task body( ){"},{"entry":"\u2003\u2003\u2003\u2003OVM_DO(req_handle); \u2192 send a req \u201csequence item\u201d now"},{"entry":"\u2003}"},{"entry":"}"},{"entry":"class req extend ovm_sequence_item {"},{"entry":"}"},{"entry":"class myTest extend ovm_test {"},{"entry":"virtual function void build( );"},{"entry":"\u2003\/\/ \u2192 send a upper_write_seq \u201csequence\u201d in myTest"},{"entry":"\u2003set_config_string(\u201cxbus_demo_tb0.xbus0.masters[0].upper_sequencer\u201d,"},{"entry":"\u2003\u2003\u201cdefault_sequence\u201d, \u201cupper_write_seq\u201d);"},{"entry":"\u2003\u2003\u2002super.build( );"},{"entry":"\u2002endfunction : build"},{"entry":"}"},{"entry":"class sequencer extend ovm_sequencer {"},{"entry":"}"},{"entry":"class upper_to_lower_seq extend ovm_sequence {"},{"entry":"\u2003\u2003\u2003{grave over (\u2009)}ovm_sequence_utils(upper_to_lower_seq, xbus_master_upper_sequencer)"},{"entry":"}"},{"entry":"class l_item extend ovm_sequnce_item {"},{"entry":"}"},{"entry":"class driver extend ovm_driver {"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Referring to the above codes, a simulation is initiated from \u201cmyTest\u201d when the upper_sequencer sends the \u201cupper_write_seq\u201d sequence to the sequencer. When OVM_DO is invoked, transaction-specific data elements including the starting time, ending time, and \u201cstream\u201d name of the transaction are automatically created and recorded in a signal value change file in the FDSB. The transaction \u201cstream\u201d name is used to determine which transaction \u201cfiber\u201d is to display the transaction. In addition, the following attributes, which may be used to construct the sequence diagram, are also recorded in FSDB:","sps_to_name: The destination of a sequence or sequence item;","full_seq_path: The full sequence name of a OVM sequence or sequence item;","sps_seq_id_arr: The identification array of a sequence or sequence item;","sps_payload: Used to highlight related sequences;","sps_tr_id: Unique identification for a sequence item; and","sps_is_response: Mark response item.","Component upper_sequencer is connected to sequencer through a port by the user test bench code. At an appropriate time, the upper_sequencer sends a \u201creq sequence_item\u201d to the port and is then received by the sequencer. The sequencer converts the \u201creceived req\u201d sequence item to \u201cupper_to_lower_sequence\u201d. The sequencer then sends \u201c1_item\u201d to a driver through another port.","The sequencer is connected to the driver through another port by the user test bench code. When the driver receives a \u201c1_item\u201d, it makes a copy, renames it \u201cresponse_item\u201d, and sends \u201cresponse_item\u201d to the sequencer. The main task performed by the driver is to set signal values on certain DUT input ports according to the data in \u201c1_item\u201d, e.g., the driver drives the inputs on the DUT based on the sequence items it receives.","An example of steps for generating a sequence diagram are as follows:","Traverse each stream stored in the FSDB file. Each stream represents a component in the sequence diagram. For example, there are four stream names, namely, sequencer, driver, monitor and reference model. These streams are the components of the sequence diagram;","Identify the driver component and the monitor component, and establish the interface between the driver and the monitor;","Analyze source codes and locate the statements between driver\/interface and monitor\/interface;","Traverse each transaction on the stream. A transaction may be associated with a component by the \u201csps_to_name\u201d attribute;","For transactions on the same component, determine whether the transactions may be collapsed by the \u201csps_seq_id_arr\u201d. For example, if there are two transactions in which \u201csps_seq_id_arr\u201d are \u201c1.2\u201d and \u201c1.3\u201d, then they may be collapsed because the transactions share the same parent sequence \u201c1\u201d;","If the attribute \u201csps_payload\u201d is assigned values and is associated with transactions between different components, a user may highlight the transactions displayed on the sequence diagram by selecting one of the transactions; and","If the attribute \u201csps_is_response\u201d is 1, the corresponding transaction is a response from driver.","An example of steps for displaying a sequence diagram are as follows:","Draw the components horizontally on the top of the sequence diagram;","Draw the time line vertically on the left of the sequence diagram;","For each component, draw the collapsed transactions from the source component to the destination component;","Draw the function names between the driver\/interface and the monitor\/interface; and","Drag and drop the statements to the TBBR source code window.","In the test bench, the driver transforms a transaction from a sequencer to signals, and then sends the signals to an interface. A monitor collects the signals from the interface and forms the signals into transactions. Therefore, there is no transaction between driver\/interface and monitor\/interface. To describe the transformation from transactions to signals and from signals to transactions, the names of the functions that perform the transformation between the driver\/interface and the monitor\/interface may be extracted from the source code (). These functions are written in the test bench source code (). Therefore, a user may drag and drop function names to the TBBR source code window to access details of the functions.","Other embodiments consistent with the present disclosure will be apparent to those skilled in the art from consideration of the specification and practice of the embodiments disclosed herein. The exact constructions of the embodiments described above and illustrated in the accompanying drawings are not meant to be limiting, and various modifications and changes may be made without departing from the scope thereof. It is intended that the scope of the disclosed embodiments only be limited by the appended claims. Furthermore, the claims are not to be limited to the details given herein, and are entitled their full scope and equivalents thereof."],"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DESCRIPTION OF THE EMBODIMENTS"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate embodiments consistent with the present disclosure and, together with the description, serve to explain the principles of the disclosed embodiments. Those skilled in the art will understand that the drawings, described herein, are for illustration purposes only. The drawings are not intended to limit the scope of the present disclosure.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 11A","FIG. 11B"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 19"}]},"DETDESC":[{},{}]}
