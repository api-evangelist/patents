---
title: System and methods for tracking local database access
abstract: Network based intrusion detection analyzes DB access attempts prior to transport into the host computer system and accordingly, mitigate resource overhead. However, host computer systems often employ local access such as a DBA account. Monitoring access attempts via the network monitor may not encompass such local access attempts. A data security device which intercepts both local and remote access attempts to the database resource monitors all database access attempts for auditing and security analysis. The data security device receives local access transactions via a local agent on the host. The local agent identifies and integrates with an interprocess communication (IPC) mechanism on the host computer system. The local agent implements an IPC interception mechanism to direct local database access attempts to the local agent, which then forwards the intercepted attempts to the data security device for further analysis. The network data security device therefore observes local access attempts via interception and transmission to the data security device, thereby consolidating analysis and logging of the data access attempts via the data security device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07426512&OS=07426512&RS=07426512
owner: Guardium, Inc.
number: 07426512
owner_city: Waltham
owner_country: US
publication_date: 20040217
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION"],"p":["In a data storage and retrieval environment, data security techniques enforce selective access to a protected resource such as a data storage repository, or database. A data security monitor analyzes incoming data access attempts, and determines the propriety of the access. The data security monitor examines security variables such as the originator or user of the access attempt and the data and\/or objects sought for access. The data security monitor analyzes the security variables against an access policy of rules or behavior which define allowable access attempts. Such selective access allows access attempts from authorized sources, and denies unauthorized access attempts as intrusions.","Conventional data security monitors typically enforce either a network based or host based approach to intrusion detection. A conventional host based monitor analyzes access attempts from the perspective of the computer system performing the access operations to database (DB) host, typically from an agent process executing on the host. The host based monitor analyzes incoming data access attempts employing local variables such as the local login account and method of access. A network based intrusion detection monitor operates on the outside network paths into the host. Such a network based approach operates on a remote computer system, such as a data security device, connected to the host. Such a conventional network based approach analyzes variables such as the source IP address and subnet, and may also have access to data specific fields such as objects and attributes. Database applications have a particular need for such intrusion detection because such applications control access to a substantial quantity of possibly sensitive data. In a Structured Query Language (SQL) database environment, for example, the network based device may have access to the tables and attributes of the corresponding SQL schema, and therefore be operable to apply SQL specific access policy to the incoming access attempts.","Conventional data security applications employ network based or host based approaches. Host based approaches monitor operations on the local computer system, or host, performing access to the protected resource, such as a database. In a conventional host based security monitor, however, the security monitor may impose substantial overhead on the primary communications path to the database. The conventional security monitor receives and analyzes each data access attempt, usually logging transactions and flagging those deemed as possible intrusions. Further, such conventional security monitors apply only after a successful connection into the host machine. Malicious or undesirable transmissions which elude analysis may have already established a local foothold, thus posing a greater security risk.","In contrast, network based intrusion detection analyzes DB access attempts prior to transport into the host computer system. Such network based monitors, therefore, do not consume CPU or storage resources on the host. A typical network based monitor may be provided in a standalone computer system on a network connection into the host computer system, or may be integrated with other computing systems such as an intranet gatekeeper or firewall system. Therefore, network based approaches allow monitoring, logging, and analysis of database access attempts without burdening the host computer, and also operate prior to transmission of the alleged intrusion into the host computer. However, host computer systems often employ local access techniques for maintenance, ad-hoc, and troubleshooting or mission-critical patches. Such local access techniques usually employ a conventional DBA database administrator account or trusted dial-up link. Such local access techniques may bypass the conventional network based monitoring, since the access attempt emanates locally at the host. Accordingly, operations such as auditing, logging, and monitoring database access attempts and transactions via the network monitor may not encompass such local access attempts.","Configurations of the invention are based, in part, upon the observation that conventional network based database monitoring mechanisms may not encompass local access attempts such as a local DBA login. Auditing and logging operations, as well as highly security-sensitive applications, may expect inclusion of all local and remote access attempts. Accordingly, it would be beneficial to identify an access point common to local and remote DB access attempts, intercept local access attempts to the database resource, and transport the intercepted access attempts to a data security device operable for network monitoring of the access attempts. It would be further beneficial if the interception of the local access attempts occurs via a minimal footprint implementation object to mitigate resource overhead. In this manner, a network data security device observes the local access attempts via interception by a local host agent that transmits access information to the data security device, and observes remote access attempts via the network, thereby consolidating analysis and logging of the data access attempts to the database resource via the data security device.","Configurations of the invention substantially overcome the above described shortcomings with conventional network based security by providing a lightweight local agent for rerouting local (i.e. host-based) access attempts to a network data security device. Therefore, the lightweight local agent effectively offloads security decisions, and accompanying overhead, to the data security device (appliance), relieving the host of the overhead typically associated with conventional host-based security measures. The data security device handles all network access, and also supports local access, thereby allowing complete security coverage for network and local access attempts from a single consolidated appliance.","The data security device, therefore, intercepts local access attempts to the database resource via the local agent. Accordingly, the data security device monitors all database access attempts for auditing, logging, and security analysis and reporting. The data security device receives local access transactions via a local agent on the host. The local agent identifies and integrates with an interprocess communication (IPC) mechanism employed by the database resource on the host computer system. Typical conventional database resources employ a common DB access gateway for access to the DB from a variety of local and remote sources. Typically, a network library (e.g. Netlib, as is known to those of skill in the art), is employed for providing a common API to the access gateway for the various types of DB access, such as TCP\/IP, shared memory, Windows Pipes, Unix sockets, and other IPC mechanisms. The local DB access attempts typically employ such shared memory, or another IPC mechanism, to transport communications between a local DB client and the database access gateway. In a particular configuration, discussed further below, the local agent implements an IPC interception mechanism by modifying the Netlib to direct local database access attempts to the local agent. The local agent then forwards the intercepted database access attempts to the data security device for further analysis, therefore completing the scope of monitoring, logging, and auditing by the remote data security device.","In further detail, the method of monitoring access to a protected database includes identifying a local attempt to access the database, in which the access attempt is directed to an access gateway of the database resource. An IPC intercept intercepts the identified attempt to access the database resource, in which intercepting the access attempt occurs in a prioritized manner with respect to receipt of the access attempt by the access gateway. The prioritized receipt (i.e. before receipt by the access gateway) is transmitted, in a nondestructive manner, to a local agent, in which the nondestructive manner preserves the intercepted access attempt for successive receipt by the access gateway, to maintain the underlying database transaction.","The intercepted access attempt may be indicative of a DB instruction, such as a SQL add, modify, or delete, and the local agent is in communication with the data security device operable to analyze the propriety of the access attempt from objects and data values referenced by the DB instruction. The interception of the access attempt occurs in a prioritized manner with respect to the DB access gateway, and therefore the IPC intercept receives the access attempt into an interception register prior to receipt by the access gateway. The local agent invokes a prioritized request to activate a reading operation of the interception register, in which the invocation occurs prior to activation of a read operation of the access attempt on behalf of the access gateway, and the local agent reads the access attempt from the interception register. The interception register subsequently appears undisturbed to the access gateway.","Prior to identification of the access attempt, the local agent establishes the IPC intercept to receive IPC communications directed to the access gateway prior to receipt of the IPC communication by the access gateway. Such identification of an access attempt involves listening, at a common access point, for an incoming connection to the database resource. Such a common access point is an access point or interface adapted to aggregate access attempts to the database resource from a plurality of access mediums. In the particular exemplary configuration described below, the common access point is a network application programming interface conversant in a plurality of protocols and operable to include dynamic interfaces between the plurality of protocols and the database resource. Such protocols may include, by way of example only, TCP\/IP, shared memory, Banyan Vines, Named Pipes, ports and sockets. In the exemplary configuration, the common access point is supported by the Netlib DLL aggregation of libraries supporting the various types of local and remote DB access, described further below.","In a particular configuration, intercepting the access attempt involves receiving, an indication of an IPC communication indicative of a DB access attempt from a notification object responsive to an event handler. The event handler and notification objects employ a signaling system supporting the IPC mechanism described further below. The notification object identifies an instruction register in a shared memory area, in which the instruction register has a database instruction corresponding to an access attempt. The notification object triggers a retrieval of the DB instruction from the identified instruction register, and the local agent transmits the retrieved DB instruction to the data security device.","In the exemplary configuration, establishing the interface wrapper further comprises integrating with the signaling system by identifying an event corresponding to a communication via the IPC mechanism. The local agent then identifying a local event object corresponding to the event, in which the local event object has a notification list adapted to include registrants of an occurrence of the event. The local agent is then registered (subscribed) to the event in the corresponding notification list, in which the local agent is registered before the access gateway in order to receive notifications prior to receipt of the notification by the registered access gateway.","Establishing the intercept includes first determining an IPC mechanism to be employed by a local client for accessing the DB resource. The local agent establishes an interface wrapper between the access gateway and the local client, in which the interface wrapper is operable to identify an IPC mechanism adapted to transport communications between the access gateway and the local client. The local agent then modifies the identified IPC mechanism to inform the local agent of the communications between the access gateway and the local client prior to informing the access gateway of the communication. Accordingly, the local agent establishes an IPC intercept from a common access point employed by database clients for accessing the DB resource, and receiving the access attempt at the local agent via the IPC intercept prior to receipt of the access attempt by the access gateway.","The local agent is a lightweight agent operable to intercept the access attempt and transmit the intercepted DB instruction to a data security device. Accordingly, the local agent has only a substantially insignificant effect on a DB host supporting the DB server. In this manner, the local agent need not perform the computations to monitor, analyze, and log the access attempt since it effectively offloads such processing to the data security device. Implementing the local agent therefore involves identifying a plurality of access paths to a protected DB resource, and identifying a common access point for the access paths to the protected resource, in which access attempts occurring exclusively via the identified access point for the identified access paths. In the exemplary configuration below, the IPC mechanism is a shared memory portion including a plurality of instruction registers, in which the instruction registers are operable to buffer a DB instruction for receipt by the access gateway.","The invention as disclosed above is described as implemented on a computer having a processor, memory, and interface operable for performing the steps and methods for monitoring access to a protected database as disclosed herein. Other embodiments of the invention include a computerized device such as a computer system, central processing unit, microprocessor, controller, electronic circuit, application-specific integrated circuit, or other hardware device configured to process all of the method operations disclosed herein as embodiments of the invention. In such embodiments, the computerized device includes an interface (e.g., for receiving data or more segments of code of a program), a memory (e.g., any type of computer readable medium), a processor and an interconnection mechanism connecting the interface, the processor and the memory. In such embodiments, the memory system is encoded with an application having components that when performed on the processor, produces a process or processes that causes the computerized device to perform any and\/or all of the method embodiments, steps and operations explained herein as embodiments of the invention to allow execution of instructions in a computer program such as a Java, HTML, XML, C, or C++ application. In other words, a computer, processor or other electronic device that is programmed to operate embodiments of the invention as explained herein is itself considered an embodiment of the invention.","Configurations of the invention substantially overcome the above described shortcomings of conventional network based intrusion detection and monitoring by intercepting local access attempts in addition to the substantial portion of database access attempts occurring via the network via the data security device. Auditing and logging operations, as well as highly security-sensitive applications, expect coverage of all local and remote access attempts. Therefore, the present claims define an IPC intercept to identify an access point common to local and remote DB access attempts, intercept local access attempts to the database resource, and transport the intercepted access attempts to a data security device operable for network monitoring of the access attempts. The IPC intercept performs interception of the local access attempts through a minimal footprint implementation object to mitigate resource overhead. In this manner, the remote network data security device observes both the local access attempts via interception at the DB host and transmission of the intercepted access attempts to the data security device, and the remote access attempts via the network, thereby consolidating analysis and logging of the data access attempts to the database resource via the data security device.","The data security device, therefore, intercepts both local and remote access attempts to the database resource. Accordingly, the data security device monitors all database access attempts for auditing, logging, and security analysis and reporting. The data security device receives local access transactions via a local agent on the host. The local agent identifies and integrates with an interprocess communication (IPC) mechanism such as shared memory\/Direct Memory Access (DMA) on the host computer system. Typical conventional database resources employ a DB access gateway for providing a common API for various types of DB access, such as TCP\/IP, shared memory, Windows Pipes, Unix sockets, and other IPC mechanisms. As indicated above, a common API known as \u201cNetlib\u201d is provided by certain vendors an implementation in certain products. Specifically, Microsoft\u00ae SQL Server and Sybase\u00ae employ the Netlib implementation in certain products for facilitating access from different mediums. In the exemplary configuration below, the local DB access attempts employ shared memory to transport communications between a local DB client and the access gateway. In the particular configuration, discussed further below, the local agent implements an IPC interception mechanism by modifying the common API to intercept and direct local database access attempts to the local agent. The local agent then forwards the intercepted database access attempts to the data security device for further analysis, therefore completing the scope of monitoring, logging, and auditing by the remote data security device.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 1","FIG. 1"],"b":["100","102","104","102","104","106","104","108","110","108","112","102"]},"A user initiates access to the database in the form of a user request , which passes through the network  for delivery to the DB access gateway  as an incoming request . A data security device  is connected via a switch  or other connectivity device such as a tap, router or bridge, on the path from the network  to the host . The data security device  includes a DB monitor  for receiving user requests  sent through the switch . The DB monitor receives and analyzes the incoming user request  as a tapped access attempt , which the DB monitor  analyzes according to a predetermined security or access policy. Such an access policy is discussed in greater detail in copending U.S. patent application Ser. No. 10\/762,660 entitled \u201cSYSTEM AND METHODS FOR ADAPTIVE BEHAVIOR BASED ACCESS CONTROL,\u201d filed Jan. 22, 2004, incorporated herein by reference. The data security device  then passes the tapped access attempt  to the access gateway (AG)  as an incoming request .","Typically, the database server  expects a substantial portion of DB traffic (user requests ) to arrive remotely via the network , and thus pass scrutiny under the data security device . However, as suggested above, a portion of database access attempts emanate locally from a local client , executing on the host , as local access attempts . The local access attempts  arrive at the access gateway  via an Interprocess Communication (IPC) mechanism . Such local access attempts  do not pass through the switch , and therefore may otherwise be operable to elude scrutiny of the data security device .","Configurations of the invention substantially overcome the above described shortcomings associated with such local clients  by employing an IPC intercept  for intercepting the local access attempt  and transporting the intercepted access attempt  to a local agent . The local agent  determines, by interrogating the IPC mechanism , a database instruction  corresponding to the local access attempts . The local agent  then transmits the determined database instruction  to the data security device  for analysis and further operations by the DB monitor . In this manner, the data security device  receives all local and remote access attempts ,  to the DB server  to more fully analyze, monitor, and guard against access attempts ,  which may be undesirable.","In a typical DB host , the local client  may employ a variety of IPC mechanisms  to transmit local access attempt  to the DB server . The exemplary configuration discussed below discloses a particular arrangement including shared memory as the IPC mechanism from which to intercept the access attempt . Alternate configurations may employ other IPC mechanisms and IPC intercepts .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIG. 1","FIG. 2"],"b":["140","200"]},"As indicated above, database management systems (DBMS) often employ IPC mechanisms  with a local client  on a DB host  for transport of the DB commands from the local client  to the DB server . The IPC intercept  interjects itself into the communication path between the local client  and the DB access gateway  responsive to the DB access attempts , . The IPC intercept  may be implemented in a variety of configurations, depending on the IPC mechanism  employed. In the exemplary configuration shown, the IPC mechanism  is a shared memory transport mechanism, discussed further below.","The IPC intercept  identifies the attempt  to access the database resource from the local client . Such access attempts are local to the host  and directed to an access gateway  of the database resource , as shown in step . The local client  initiating the local access  typically represents a local DBA account or a local user TELNET access for example. In the exemplary configuration, the majority of the access attempts  occur via the front end internet  access. The local agent, however, accesses  via the so-called \u201cback end\u201d to the DB host , which has the effect of avoiding the network data security device  by employing the IPC mechanism . Both local attempts  and remote attempts , however, are directed to the DB access gateway . Therefore, the local attempts  are identifiable by observing IPC communications to the gateway .","The IPC intercept  intercepts the identified attempt  to access the database resource , in which intercepting occurring in a prioritized manner with respect to receipt of the access attempt  by the access gateway , as depicted at step . Accordingly, the IPC intercept  allows the local agent  to capture and divert such a local access attempt . In the exemplary configuration, the prioritized receipt of the local access attempt  allows the IPC intercept  to receive the access attempt  before receipt by the DB access gateway . The local agent  then transmits the intercepted access attempt  in a nondestructive manner operable to preserve the intercepted access attempt for successive receipt by the access gateway , thereby not precluding the expected receipt of the access attempt by the access gateway , as depicted at step . Accordingly, by forwarding the access attempt  back to the data security device , the DB monitor  enforces the access policy uniformly for all accesses to the DB server .",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 3","FIG. 1","FIGS. 1 and 3","FIG. 3"],"b":["150","140","140","134","134","130","112","140","140","132","130","150"]},"The local agent  establishes the IPC intercept  to receive communications from the local client  in a prioritized manner before the access gateway  receives the same communication. By establishing the IPC intercept , the prioritized manner ensures that the IPC  mechanism delivers the local access attempt  to the local agent  as an intercepted access attempt , allowing actions to be performed by the local agent  before the database server  operates on the access attempt . In a particular configuration, the IPC intercept  may operate in a blocking manner so as to selectively restrict the receipt by the access gateway  according to the local agent .","In the exemplary configuration shown in , the local client  employs shared memory  as the IPC mechanism \u2032 for communication with the access gateway . In a typical DB server , the DB access gateway  is a DB vendor specific API which is common to the various transport protocols which transport access attempts ,  to the database server . In the exemplary configuration, the access gateway  provides a common access point for DB access attempts. The access gateway , therefore, receives the access requests into the database, for both local and remote accesses. The local access attempts  delivered by the shared IPC mechanism \u2032 therefore perform access via the gateway . The DB interface wrapper \u2032 provides the IPC intercept  for the shared memory IPC mechanism . The shared memory IPC mechanism \u2032 includes the shared memory  subdivided into a data transport portion , a local event objects portion , and a notification lists portion .","The shared memory IPC mechanism \u2032 operates, generally, via the data transport portion  of shared memory which is accessible to both the sender and receiver of the communication. In the present example, the communication is the database instruction  and the sending and receiving entities are the local client  and the access gateway , respectively. A signaling mechanism operates in conjunction with an event handler  to synchronize the IPC passing of the instruction . The event handler  associates an event with the expected types of database instructions . Interested entities, such as the IPC receiver, subscribe to an event. Similarly, a transmitting entity publishes the event after writing the IPC communication (instruction) to the data transport portion . The event handler  invokes subscribed entities upon publication of an event. The invocation identifies the signaled command and the location of the DB instruction  in the data transport portion . The subscribed (registered) recipient then retrieves the DB instruction  from the data transport portion .","The data transport portion  includes a set of intercept registers -.- (-N, generally) for receiving and storing DB instructions  from the local access attempts . The intercept registers -N may be a buffer area or other memory structure for storing the DB instructions  for accessing the database . In the exemplary configuration, the DB instruction  is a SQL command for execution (performance) by the DB server . The local event objects  portion includes local event objects -.- (-N, generally) corresponding to database operations requested by the local access attempts . Each of the local event objects -N corresponds to a particular DB operation, including, by way of example only, CLIENT_WRITE_POSTED, CLIENT READ POSTED, SERVER_WRITE_POSTED, and SERVER_READ_POSTED.","Each of the local event objects -N has a corresponding notification list -.- (-N generally) in the notification lists  portion. Note that the shared memory IPC intercept mechanism \u2032 may, in alternate configurations, be replaced with another IPC intercept . In such a configuration, the DB interface wrapper \u2032 is similarly set up to receive IPC communications in a prioritized manner, prior to receipt by the access gateway . The notification lists -N include entries  specifying a prioritized list of notifications to be made when the DB operation corresponding to the local event object  occurs in a local access attempt . In the typical IPC communication, the local client  writes the DB instruction  to an intercept register -N, and notifies the event handler  of the write.","The event handler  activates the local event object  corresponding to the written instruction , and the local event object -N traverses the corresponding notification list -N. The local client , therefore, establishes the DB interface wrapper \u2032 by modifying the notification lists -N entries  to store the local agent  LA as the first object to receive the notification of a DB instruction  being written to an intercept register -N. In order to modify the notification lists , the local agent  listens for a DB connect request from the local client , as will be described in further detail below with respect to . The DB interface wrapper \u2032 represents a modified DLL which replaces the standard shared memory DLL, such as that provided by Netlib or other common library. The modified DLL replaces, or spoofs, the access gateway  as the recipient of the local access attempts , described in further detail with respect to  below.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 4","FIG. 3","FIGS. 1 and 4","FIG. 4"],"b":["132","140","132","130","108","112","134","160","150","132","160"]},"The IPC intercept  from shared memory  employs the elements shown in , now summarized briefly and discussed in greater detail below with respect to . Note that  discloses an exemplary IPC interception  and alternate configurations may employ interception mechanisms of other IPC mechanisms. The local client  stores the DB instruction  included in the access attempt  in the instruction register -, in the data transport portion  of the shared memory , shown as message . The local client  publishes an event attesting to the DB instruction  write, and the event handler  receives the publication. In response, the event handler  commences invocation of subscribed entities  by signaling a corresponding local event object -N for servicing the published event by processing the corresponding notification lists . Accordingly, the event handler  finds the local agent  as the first listed subscriber  to the event, and notifies the local agent  accordingly.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIGS. 5-6","FIG. 3","FIGS. 5 and 6","FIG. 3","FIGS. 7 and 8","FIG. 4","FIGS. 3"],"b":["140","140","132","120","132","140","5","6","132","150","140","112","112","150","140","112","130","140","134","112","130","300"]},"In the exemplary configuration, the IPC mechanism  is the shared memory  transport mechanism. The shared memory  transport mechanism includes a set of events and corresponding subscribers and publishers. The set of events corresponds to IPC operations, such as CLIENT_WRITE_POSTED, CLIENT READ POSTED, SERVER_WRITE_POSTED, and SERVER_READ POSTED. Interested objects (i.e. the local agent ) subscribe to the events, meaning that such objects are to be informed upon event occurrence. Objects performing the IPC actions publish the event upon completion. Further, either the access gateway  (i.e. on behalf of server ) or the local client  may publish an event. Each event has a corresponding local event object - . . . - (-N, generally). The local event object -N maintains a notification list - . . . - of entries  indicative of an ordered list of subscribers, or objects, to notify. The event handler  receives event publications, and informs the local event object - . . . - to notify the subscribers included in the corresponding notification list -N.","Accordingly, establishing the interface wrapper \u2032 for the IPC intercept  further includes identifying an event corresponding to a communication via the IPC mechanism , or shared memory  in the exemplary configuration, as depicted at step . The local agent  then identifies a plurality of access paths to the protected database resource , as shown at step . In the exemplary configuration, remote access occurs via the network  through the switch . Local accesses occur via the IPC mechanism  of the local client , which is shared memory  in the exemplary configuration shown. Therefore, the IPC intercept  is to perform the interception from shared memory .","In order to isolate all access attempts ,  into the DB server , the local agent  identifies a common access point for the access paths to the protected DB resource , in which the access attempts ,  occur exclusively via the identified common access point for the identified access paths, i.e. switch  and local client , as depicted at step . In the exemplary configuration shown in , the access route to the database server  is the DB access gateway . Identification of such a common access point  provides assurances that complete coverage of access to the database  is provided. Alternate configurations may provide alternate or additional access routes which the IPC intercept mechanism  also covers.","In the exemplary configuration, the DB access gateway  is implemented as a general API, which implements a suite of common access invocation points from various transport mechanisms to provide a single unified API for DB access. The common API operates via a set of Dynamic Linked Libraries (DLLs) conforming to each expected transport medium transporting access attempts , . Typical transport mediums include TCP\/IP, shared memory, Banyan Vines, Named Pipes, ports and sockets, and may include others as the implementation dictates. In certain configurations, as indicated above, a Netlib suite is employed by certain vendors and provides a database  specific interface conformant to the various DLLs, but which may differ between DB vendors, also common in the art. Therefore, accesses to a particular DB  occur via the DB server  and the access gateway  configured for the database . In this manner the access gateway  provides a common access point for the DB server .","Upon identifying the common access point, the local client  identifies the IPC mechanism  to inform the local agent  of the communications between the access gateway  and the local client  prior to informing the access gateway  of the communication , as depicted at step . In the exemplary configuration, the local client  therefore identifies shared memory as the IPC mechanism  from which to establish the IPC intercept . The shared memory  includes the data transport portion , which has instruction registers -N for storing, or buffering, the DB instruction  in the data access attempt . Therefore, the local agent  determines, at step , that the IPC mechanism \u2032 includes a shared memory portion  including a plurality of instruction registers -N, in which the instruction registers -N are operable to buffer a DB instruction  for receipt by the access gateway .","Identifying the access attempt  further includes listening, at the common access point , for an incoming connection to the database resource . Accordingly, the local agent  listens for a connection attempt from the local client , as depicted at step . A local user initiates a connection attempt via the local client through a telnet request, for example, or other transport mechanism on the Db host , as shown by message . The local client  issues a connect request , and the listening local agent  receives the connect request  instead of the access gateway  because the access gateway  is the common access point for the DB  and the local agent  replaces the default DLL with the interface wrapper . The local agent  then forwards the connect request to the access gateway via message , which indicates the local agent  as the responsive entity to receive the acknowledgement indicative of the local event objects -N, for reasons which will be made apparent below.","Having received the connect request , the access gateway  processes the connection by directing the event handler  to establish local event objects -N for the various IPC operations which the local client  and the access gateway  may employ, via message . Accordingly, the event handler  instantiates the local event objects -N and corresponding notification lists -N, as shown by message .","The event handler  then notifies the originator of the connect request message , in this case the local agent  effectively spoofing the local client , of the identity of the local event objects -N for use as the IPC mechanism ,\u2032 shown by message . The message  allows the local agent  to identify the local event object - corresponding to the event, as depicted at step . The local event object -, for example, has a notification list - adapted to include registrants  of an occurrence of the event. Since the local agent  receives the identity message  before the local client , the local agent  may subscribe as the first entry - in the relevant notification list -.","Accordingly, using the identity from the message , the local agent  subscribes to the first notification entry - in the notification lists -N, as shown by message . The local agent  then forwards the identity message  back to the expecting local client  as message , which also employs the identity information of the local event object - to allow the local client  to subscribe via the notification lists - as entry -. For example, the local agent  selects a CLIENT_WRITE_POSTED event as indicative of the local access attempt . Other events may also be selected as indicative of incoming local access attempts .","At the time that the event handler  registers the access gateway  in the notification lists - as entry -, the local agent  is registered before the access gateway  to receive notifications prior to receipt of the notification by the subscribed access gateway , as shown at step . Therefore, by interjecting itself into the acknowledgement path between the access gateway  and the local client , the local agent  ensures that the first subscription notification entry - is the local agent , permitting the local client (LC)  or access gateway (AG)  to obtain the second or successive entries . Note that the above described example illustrates ingress communication to the DB server . Accordingly, depending on the direction of the IPC communication, either the local client LC or the access gateway AG may be listed in the notification entries -N. The local agent LA stores the first notification entry -N in the manner just described to ensure the operation of the interface wrapper \u2032.","In this manner, the local agent establishes the interface wrapper \u2032 as the exemplary IPC intercept  from the common access point (i.e. access gateway ) employed by database clients  for accessing the DB resource, as depicted at step . In particular configurations, the local agent  is a lightweight agent operable to intercept the access attempt and transmit the intercepted DB instruction to a data security device, the local agent  having a substantially insignificant effect on a DB host  supporting the DB server , as disclosed at step .","It should be noted that the event signaling occurring in the shared memory IPC mechanism \u2032 is typically specific to the access gateway  implementation, the DB vendor, and the incoming transport mechanism. In the exemplary configuration shown, the incoming transport mechanism is a shared memory IPC, and the DB is a SQL relational database such as an Oracle\u00ae database. Accordingly, the anticipated signaling occurring as an incoming access attempt  arrives occurs internally between the IPC mechanism , the event handler , and the access gateway . Runtime observation, typically employing runtime analysis tools for object and message examination, is employable to obtain the signaling information and identification of the local event objects -N corresponding to the signaled (i.e. published and subscribed) events. One such debugging tool is WinObj, known to those of skill in the art. Other tools and runtime evaluation methods may also be employed.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIGS. 8-9","FIG. 4","FIGS. 6-7","FIGS. 1"],"b":["140","4","8","9","110","110","112","350","132","170","351","1010","112","352"]},"The access attempt  is indicative or inclusive of a DB instruction , as depicted at step . In this manner, the interception register - in the data transport portion  of the shared memory  receives the identified attempt to access the database  into the interception register - prior to receipt of the access attempt  by the access gateway, as depicted at step .","The local client  identifies the event associated with the DB instruction (operation)  written to the instruction register -, and publishes the event accordingly, as shown by message . The event handler  is responsive to the published event and invokes the local event object - responsible for notifying subscribers to the published event, as shown by signaling message . Accordingly, the responsive local event object - initiates traversal of the corresponding notification list -. As indicated above, the local agent  LA occupies the first entry - in the notification list -, and accordingly, receives a signaling message  from the notification object - responsive to an event handler , as an event corresponding to an IPC communication indicative of a DB access attempt, as depicted at step . Responsive to the signaling message , the local agent  identifies the instruction register - in the shared memory portion  containing the database instruction  corresponding to the access attempt , as disclosed at step .","The local agent  retrieves the DB instruction  from the identified instruction register -, as depicted at step , and therefore invokes a prioritized request to activate a reading operation of the interception register -, invoking occurring prior to activation of a read operation of the access attempt  on behalf of the access gateway , as depicted at step . The local agent  retrieves the instruction , shown as signaling , from the register - immediately after having received the signaling message . The agent copies, but does not change or modify, the pending instruction. Accordingly, a successive signaling message  to the access gateway  based on the second entry AG - occurs following the retrieval, thus the local agent receives the access attempt  via the IPC intercept  prior to receipt of the access attempt  by the access gateway , as shown at step . Therefore, the interception register - subsequently appears undisturbed to the access gateway , as shown at step .","The copied instruction  representing the intercepted access attempt  is transmitted, in a nondestructive manner to the local agent in which the nondestructive manner operable to preserve the intercepted access attempt for successive receipt by the access gateway , as depicted at step . The local agent  then transmits the retrieved DB instruction  to the data security device  as message  for successive analysis and processing according to the security policy implemented by the DB monitor . In this manner, all local and remote access attempts ,  pass through the data security device under scrutiny of the DB monitor .","In alternate configurations, the local agent  performs a blocking access to the interception registers -N. The blocking access allows the data security device  to return an access decision, rather then unintrusively processing the DB instruction . Accordingly, the data security device  is operable to prevent access to the DB  if the data security device  computes a negative access decision.","The method of monitoring access to a protected database resource disclosed herein may encompass a variety of alternate deployment environments. In a particular configuration, the exemplary adaptive behavior based access control application discussed herein may be the SQL Guard application, marketed commercially by Guardium corporation of Waltham, Mass., assignee of the present application.","Those skilled in the art should readily appreciate that the programs and methods for monitoring access to a protected database resource as defined herein are deliverable to a processing device in many forms, including but not limited to a) information permanently stored on non-writeable storage media such as ROM devices, b) information alterably stored on writeable storage media such as floppy disks, magnetic tapes, CDs, RAM devices, and other magnetic and optical media, or c) information conveyed to a computer through communication media, for example using baseband signaling or broadband signaling techniques, as in an electronic network such as the Internet or telephone modem lines. The operations and methods may be implemented in a software executable object or as a set of instructions embedded in a carrier wave. Alternatively, the operations and methods disclosed herein may be embodied in whole or in part using hardware components, such as Application Specific Integrated Circuits (ASICs), state machines, controllers or other hardware components or devices, or a combination of hardware, software, and firmware components.","While the system and method for monitoring access to a protected database resource has been particularly shown and described with references to embodiments thereof, it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the scope of the invention encompassed by the appended claims. Accordingly, the present invention is not intended to be limited except by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other objects, features and advantages of the invention will be apparent from the following more particular description of preferred embodiments of the invention, as illustrated in the accompanying drawings in which like reference characters refer to the same parts throughout the different views. The drawings are not necessarily to scale, with emphasis instead being placed upon illustrating the embodiments, principles and concepts of the invention.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIGS. 5-6","FIG. 3"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIGS. 7-8","FIG. 4"]}]},"DETDESC":[{},{}]}
