---
title: Free-space reduction in cached database pages
abstract: A computing system stores a database comprising pages. Each of the pages is the same size. When a page is requested, a block of virtual memory addresses is associated with the page and a set of physical data storage locations is committed to the block of virtual memory addresses. A copy of the page is then stored into the set of physical data storage locations. Physical data storage locations committed to the virtual memory addresses associated with available free space in the copy of the page are deallocated, thereby allowing reuse of these physical data storage locations. A reference to the copy of the page is then returned.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08108587&OS=08108587&RS=08108587
owner: Microsoft Corporation
number: 08108587
owner_city: Redmond
owner_country: US
publication_date: 20090526
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Modern databases can include a very large number of database entries. Accordingly, it is important to use efficient techniques to identify the locations of desired database entries. Such techniques include the use of B+ trees. A B+ tree is a data structure comprising a set of data pages and one or more interior pages. Data pages are leaf nodes of the B+ tree and interior pages are non-leaf nodes of the B+ tree. The data pages contain the database entries of the database. The interior pages do not contain database entries, but rather contain information that enables a computing system to identify locations of desired database entries. For example, each of the interior pages contains a set of nodes. Each node in an interior page includes a key value and a reference. The key value specifies a value of a field of the database entries and the reference specifies another page in the B+ tree. The key values are ordered within an interior page in a predictable way. For example, if the key values are integers, the key values may be ordered within the interior page according to increasing numerical value.","When a computing system is attempting to identify the memory address of a desired database entry having a field specifying a particular value, the computing system identifies a node in an interior page having the highest-ordered key value that is less than or equal to the particular value. For example, if the particular value is 8 and the interior page has nodes having key values 3, 4, 7 and 9, the computing system identifies the node having the key value 7. After identifying the node, the computing system retrieves the page in the B+ tree indicated by the reference of the node. If the retrieved page is an interior page, the process repeats and the computing system retrieves another page in the B+ tree. If the retrieved page is a data page, the computing system identifies the desired database entry within the data page and returns the desired database entry.","Each of the pages have a fixed size. For example, each of the pages may have a size of 32 kilobytes (KB). In many instances, there are not enough nodes in the interior pages to completely fill the interior pages or not enough database entries in the data pages to completely fill the data pages. For example, an interior page may have a fixed size of 32 KB, but only contain 20 KB of data. In this example, the remaining 12 KB is unused free space.","A computing system stores a database comprising pages. Each of the pages is the same size. When a page is requested, a block of virtual memory addresses is associated with the page and a set of physical data storage locations is committed to the block of virtual memory addresses. A copy of the page is then stored into the set of physical data storage locations. Physical data storage locations committed to the virtual memory addresses associated with available free space in the copy of the page are deallocated, thereby allowing reuse of these physical data storage locations. A reference to the copy of the page is then returned.","This summary is provided to introduce a selection of concepts in a simplified form. These concepts are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter, nor is this summary intended as an aid in determining the scope of the claimed subject matter.","As briefly described above, this disclosure describes automatic reduction of free-space in cached database pages. The techniques of this disclosure are described with reference to the attached figures. It should be appreciated that the attached figures are provided for purposes of explanation only and should not be understood as representing a sole way of implementing the techniques of this disclosure.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 1","FIG. 11"],"b":["100","100"]},"In the example of , the computing system  comprises a data storage system . The data storage system  is a data storage system. As used in this disclosure, a data storage system is a set of at least one physical computer readable data storage medium. A computer readable data storage medium is a physical article of manufacture that is capable of storing computer-readable data. Example types of computer readable data storage media include hard disk drives, flash memory units, random access memory (RAM) modules, read-only memory (ROM) modules, CD-ROM discs, Digital Versatile Disc (DVD) ROM discs, BluRay discs, magnetic tape, floppy disks, solid state drives, solid state memory, and other articles of manufacture that are capable of storing computer-readable data.","Furthermore, in the example of , the computing system  comprises a processing unit . The processing unit  is a processing unit. As used in this disclosure, a processing unit is a set of at least one physical integrated circuit that executes software instructions. As used in this disclosure, a software instruction is a data structure that represents an operation of a processing unit. For example, a software instruction may be a data structure comprising an operation code and zero or more operand specifiers. In this example, the operand specifiers may specify registers, memory addresses, or literal data. Execution of a software instruction by a processing unit of a computing system causes the computing system to perform the operation represented by the software instruction.","In the example of , the computing system  also comprises a display device . The display device  is a display device. As used in this disclosure, a display device is a physical machine that is capable of displaying images. Example types of display devices include computer monitors, televisions, liquid crystal display (LCD) screens, light-emitting diode (LED) screens, plasma screens, and other types of physical machines that are capable of displaying images.","A user , in the example of , interacts with the computing system . The user  is an individual human being. The user  may be using the computing system  on behalf of an enterprise. As used in this disclosure, an enterprise is a natural or legal entity. Example types of legal entities include corporations, partnerships, proprietorships, companies, non-profit corporations, foundations, estates, governmental agencies, and other types of legal entities. The user  may interact with the computing system  in a variety of ways. For example, the user  may use an input device, such as a keyboard or mouse, directly connected to the computing system  to interact with the computing system . In another example, the user  may interact with the computing system  by interacting with a client computing system (not shown) that communicates with the computing system .","In the example of , the data storage system  comprises a database . The database  is stored on one or more persistent computer-readable data storage media within the data storage system . As used in this disclosure, a persistent computer-readable data storage medium is a computer-readable data storage medium that does not lose data when power to the computer-readable data storage medium is suspended. In one example implementation, the processing unit  executes software instructions in the data storage system  that cause the computing system  to store the database  onto the persistent computer-readable data storage media. The database  may be stored on the persistent computer-readable data storage media in a variety of ways. For example, the database  may be stored on the persistent computer-readable data storage media as a file.","The database  comprises a set of pages. A page is a fixed-size block of data. Each of the pages in the database  has the same size. For example, each of the pages in the database  may be 32 kilobytes (KB). In another example, each of the pages in the database  may be 8 KB. In some implementations, the size of the pages in the database  is determined by an administrator of the database  when the database is created. Each of the pages in the database  includes substantive data. The substantive data is data having meaning. In some example implementations, the substantive data includes one or more nodes. Furthermore, in some implementations, the substantive data includes metadata. In other implementations, the substantive data does not include metadata.","Each page in the database  is either a data page or an interior page. Each of the data pages stores one or more database entries. For example, if a first database entry has a size of 12 KB, a second database entry has a size of 8 KB, and pages are 32 KB, a single data page is able to store the first database entry and the second database entry. In some implementations, when a database entry has a size greater than the size of the data pages, the database entry is divided among two or more data pages.","As used in this disclosure, a database entry is a data structure comprising a set of one or more fields. A field is a data structure that stores a value. A field may store a wide variety of different types of values. For example, a field may store an integer, a floating point number, a date, a binary large object (BLOB), a currency amount, a photograph, a string, or another type of value. As used in this disclosure, a first database entry and a second database entry belong to the same type of database entry when the first database entry and the second database entry have the same set of fields. In various implementations, the data entries may contain a wide variety of data. For example, data entries in the database  may be e-mail messages, calendar appointments, contact information, sales information, inventory information, project information, and so on.","Each of the nodes in a data page contains a database entry. For example, a data page may include five nodes, each storing a database entry. The metadata in a data page contains information about the data in the data page. In various implementations, the data pages may contain a variety of metadata. For example, data pages may contain headers, tag arrays, and other types of metadata. The total size of the database entries and the metadata in a data page may be less than the size of the data page. When the total size of the substantive data in a data page is less than the size of the data page, the data page contains free space. In another example, metadata in a data page contains information about how the data in the data page related to other data pages.","The interior pages in the database  do not contain database entries, but rather contain information that enables the computing system  to identify locations of desired data pages in the database . Each of the nodes in an interior page includes a key value and a reference. The key value specifies a value of a field of databases entries in a particular type of database entries. The reference indicates another interior page or data page. For example, each of the pages in the database  may have a unique identifier. In this example, a reference in a node specifies the unique identifier of a page. Key values in an interior page are ordered in a predictable way. For example, if the key values are integers, the key values may be ordered within the interior page according to increasing numerical value.","The pages in the database  are organized into one or more B+ trees. Data pages are leaf nodes of the B+ trees and interior pages are non-leaf nodes of the B+ trees. The interior pages are so named because they are not leaf nodes. In some implementations, the database  may contain separate B+ trees for each table in the database . For example, if the database  is implemented according to a relational model and the database  includes two tables, the database  may contain two B+ trees, one for each of the tables.","As described in detail below, when the computing system  is attempting to identify the virtual memory address of a desired database entry having a field specifying a particular value, the computing system  identifies a node in an interior page having the highest-order key value that is less than or equal to the particular value. For example, if the particular value is 8 and the interior page has nodes having key values 3, 4, 7 and 9, the computing system  identifies the node having the key value 7. After identifying the node, the computing system  retrieves the page in the B+ tree indicated by the reference of the node. If the retrieved page is an interior page, the process repeats and the computing system retrieves another page in the B+ tree. If the retrieved page is a data page, the computing system  identifies the desired database entry within the data page and returns the desired database entry.","In addition to the nodes, the interior pages include metadata. The metadata in an interior page contains information about the data in the interior page. In various implementations, the interior pages may contain a variety of metadata. For example, interior pages may contain headers, tag arrays, and other types of metadata. Such headers and tag arrays are described in detail below. The total size of the nodes and the metadata in an interior page may be less than the size of the interior page. When the total size of the nodes and the metadata in an interior page is less than the size of the interior page, the interior page contains free space.","The database  may be implemented according to a variety of database models. For example, the database  may be implemented according to an Indexed Sequential Access Method (ISAM) model, a relational model, a hierarchical model, an object model, a network model, or another type of database model. When the database  is implemented according to a relational model, the database  may be implemented using a variety of schemas. In one example, the database  may be implemented using a star schema or a snowflake schema of tables to create Online Analytical Processing (OLAP) data cubes. Furthermore, in some instances, when the database  is implemented according to a relational model, the database  comprises a set of tables. In such instances, some the database entries in the database  are rows of the tables and the fields of the database entries are columns of the tables.","In the example of , the data storage system  contains a database cache . The database cache  is a logical set of physical data storage locations in one or more computer-readable data storage media in the data storage system . As used in this disclosure, a physical data storage location is a physical device capable of storing data associated with an individual memory address. For example, a physical data storage location may be a circuit comprising a set of transistors capable of storing a byte of data. The computer-readable data storage media of the database cache  are capable of providing data to the processing unit  faster than the data can be provided from the database . For example, the database cache  may be stored in one or more RAM modules, whereas the database  may be stored in one or more hard disk drives. As described in detail below, the computing system  uses the database cache  to cache interior pages and data pages of the database  for quick access. Typically, the database cache  is smaller than the database . Consequently, not all of the database  can typically be stored in the database cache .","In the example of , the data storage system  also stores an operating system . The operating system  comprises a set of software instructions. For ease of explanation, this disclosure includes statements that describe the operating system  performing actions. Such statements should be understood to mean that when the software instructions of the operating system  are executed by the processing unit , the computing system  performs the actions.","The operating system  manages and coordinates activities and sharing of resources of the computing system . The operating system  provides a software interface that includes methods that can be invoked by applications. As discussed in detail below, some of the methods enable applications to reserve blocks of virtual memory addresses, allocate blocks of physical data storage locations to commit to blocks of virtual memory addresses, load data from persistent computer-readable data storage media into memory, write data in memory to persistent computer-readable data storage media, and so on.","In the example of , the data storage system  stores an application . The application  comprises a set of software instructions. For ease of explanation, this disclosure includes statements that describe the application  performing actions. Such statements should be understood to mean that when the software instructions of the application  are executed by the processing unit , the computing system  performs the actions.","The application  may provide a wide variety of functionalities. In a first example, the application  may provide a web service. In this first example, the application  may process web content requests received by the computing system . In a second example, the application  may provide a database access service. In this second example, the application  may be the Microsoft ACCESS\u00ae database software.","The data storage system  also stores a database manager . The database manager  comprises a set of software instructions. For ease of explanation, this disclosure includes statements that describe the database manager  performing actions. Such statements should be understood to mean that when the software instructions of the database manager  are executed by the processing unit , the computing system  performs the actions. The database manager  manages the database . Managing the database  entails enabling users and applications to retrieve data from the database  and to store data into the database  in a consistent way. To enable applications to retrieve data from the database  and to store data into the database , the database manager  provides a software interface that includes methods that can be invoked by the applications. Invoking the methods causes the database manager  to retrieve data from the database  or to store data into the database  in a consistent way. In the example of , the application  uses the software interface provided by the database manager  to store data into the database  and to retrieve data from the database .","In the example of , the data storage system  stores a tree manager . The tree manager  comprises a set of software instructions. For ease of explanation, this disclosure includes statements that describe the tree manager  performing actions. Such statements should be understood to mean that when the software instructions of the tree manager  are executed by the processing unit , the computing system  performs the actions.","The tree manager  manages the B+ trees in the database . Otherwise stated, the tree manager  maintains the B+ trees in the database , uses the B+ trees in the database  to store data into the database , and uses the B+ trees in the database  to retrieve data from the database . To enable the database manager  to store data into the database  and to retrieve data from the database , the tree manager  provides a software interface that includes methods that can be invoked by the database manager . Invoking the methods causes the tree manager  to use the B+ trees in the database  to retrieve database entries from the database  or to use the B+ trees in the database  to store data into the database . In the example of , the database manager  invokes the methods of the tree manager  to retrieve data from the database  and to store data into the database . Because the tree manager  manages the B+ trees in the database , the database manager  does not need to include software instructions regarding the B+ trees in the database .","In the example of , the data storage system  stores a page manager . The page manager  comprises a set of software instructions. For ease of explanation, this disclosure includes statements that describe the page manager  performing actions. Such statements should be understood to mean that when the software instructions of the page manager  are executed by the processing unit , the computing system  performs the actions.","The page manager  manages pages in the database . Managing the pages entails enabling other software modules to retrieve information about the pages, enabling other software modules to read data within the pages, enabling other software modules to write data to the pages, and otherwise manipulating pages. To enable other software modules to manipulate the pages, the page manager  provides a software interface that includes methods that can be invoked by the other software modules.","In the example of , the data storage system  stores a buffer manager . The buffer manager  comprises a set of software instructions. For ease of explanation, this disclosure includes statements that describe the buffer manager  performing actions. Such statements should be understood to mean that when the software instructions of the buffer manager  are executed by the processing unit , the computing system  performs the actions.","As described in detail below, the buffer manager  manages the database cache . The buffer manager  is so named because the database cache  acts as a buffer for read and write operations to the database . Managing the database cache  entails enabling software modules to read copies of pages of the database  into the database cache , enabling software modules to write data to copies of pages of the database  stored in the database cache , controlling the size of the database cache , and other activities related to manipulating the content of the database cache . To enable software modules to read data into the database cache  and to store data to copies of pages in the database cache , the buffer manager  provides a software interface that includes methods that can be invoked by the software modules. In the example of , the page manager  invokes methods of the software interface provided by the buffer manager  to retrieve and store pages into buffers in the database cache .","Furthermore, management of the database cache  entails removing copies of pages from the database cache . In other words, the database  evicts copies of pages from the database cache . For example, when the buffer manager  is reading a new copy of a page in the database  into the database cache  when the database cache  is full, the buffer manager  selects one or more copies of pages already in the database cache  for removal. If a selected copy of a page is dirty, the buffer manager  writes the selected dirty copy of the page back to the database and frees the virtual memory addresses associated with the selected dirty copy of the page. Freeing the virtual memory addresses associated with the selected dirty copy of the page allows the virtual memory addresses to be re-used. For instance, the virtual memory address may be re-used by the buffer manager  or another software module. The buffer manager  also deallocates the physical data storage locations in the database cache  associated with the virtual memory addresses associated with the selected dirty copy of the page. Deallocating the available the physical data storage locations allows the operating system  to use the physical data storage locations to store other data. In this disclosure, the terms deallocating and decommitting are interchangeable. As used in this disclosure, a copy of a page is dirty if the copy of the page in the database cache  contains data different than the page itself in the database . If a selected copy of a page is not dirty (i.e. it is \u2018clean\u2019), the buffer manager  frees the virtual memory addresses associated with the selected copy of the page and deallocates the physical data storage locations associated with the virtual memory addresses of the page, but does not write the selected copy of the page back to the database .","In various implementations, the buffer manager  may use a variety of different schemes to select copies of pages in the database cache  for removal. For example, the buffer manager  may use a least-recently used scheme to select the copies of the pages in the database cache  for removal.","As described in detail below, when the application  needs to read one or more database entries in the database , the application  generates a request for the database entries. In one example implementation, the application  generates the request for the database entries by invoking a method of the database manager , specifying one or more criteria that identify the database entry. For example, when the application  invokes the method of the database manager , the application  may provide a query to the database manager . In this example, the query may be formatted in a variety of ways. For example, the query may be formatted using Structured Query Language (SQL), Lightweight Directory Access Protocol (LDAP), Multidimensional Expressions (MDX), cursor-based navigation by primary indexes or secondary indexes, or otherwise. The application  may need to read one or more database entries in the database  for a wide variety of reasons. For example, the application  may need to read one or more database entries in the database  to process a web content request.","In some example implementations, when the database manager  receives the invocation of the method, the database manager  processes the criteria to identify a requested value of a field or key of a type of data entry in the database . For example, the database manager  may process the criteria to identify the value \u201cHenry\u201d as the requested value of a \u201cNames\u201d field of \u201cEmployee\u201d database entries in the database . After the database manager  identifies the requested value of the field, the database manager  invokes a method of the tree manager  to retrieve data entries in the database  having the requested value of the field.","As described below with reference to , when the tree manager  receives the invocation of the method to identify database entries having fields that specify the requested value, the tree manager  uses a B+ tree in the database  to identify the database entries. When the tree manager  uses the B+ tree to identify the database entries, the tree manager  invokes a read method of the page manager  to retrieve pages in the database .","When the page manager  receives the invocation of the read method that specifies the requested page, the page manager  invokes a read method of the buffer manager  to obtain a reference indicating a virtual memory address in the database cache  associated with a copy of the requested page. In response to receiving the invocation of the read method, the buffer manager  determines whether the database cache  stores a copy of the requested page. If the database cache  stores a copy of the page, the page manager  provides a reference indicating a virtual memory address in the database cache  associated with the copy of the requested page. If the database cache  does not store a copy of the requested page, the buffer manager  invokes methods of the operating system  to reserve an initial block of virtual memory addresses in the database cache . The buffer manager  also invokes one or more methods of the operating system  to allocate a set of physical data storage locations committed to the initial block of virtual memory addresses. The buffer manager  then invokes a method of the operating system  to load a copy of the requested page into the set of physical data storage locations. Because the set of physical data storage locations is committed to the block of virtual memory addresses, applications can use virtual memory addresses in the block of virtual memory addresses to retrieve data from and store data to the set of physical data storage locations.","As discussed above, pages may contain free space. After a copy of a page is stored into the database cache , the buffer manager  deallocates the physical data storage locations committed to the virtual memory addresses associated with available free space in the copy of the page. Consequently, the operating system  is able to reallocate the physical data storage locations in the database cache  previously committed to the virtual memory addresses associated with the consolidated block of free space. This may enable the database cache  to store more pages of the database . Storing more pages of the database  in the database cache  may result in faster response times when servicing requests to read data from or write data to the database .","The application , the database manager , the tree manager , the page manager , and the buffer manager  may perform a similar operation when the application  needs to write data to a database entry in the database .",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":"200"},"As shown in the example of , the interior page  comprises a header , a node A, a node B, a node C, a tag array , a first block of free space A and a second block of free space B. This disclosure refers to the node A, the node B, and the node C collectively as \u201cthe nodes .\u201d Furthermore, this disclosure refers to the first block of free space A and the second block of free space B collectively as \u201cthe free space .\u201d In the example of , the header  and the tag array  are metadata.","The header  is a data structure containing information about the interior page . For example, the header  may contain a value indicating that the interior page  is an interior page as opposed to a data page. In an additional example, the header  may contain an available free space value indicating the size of the free space  in the interior page . In a third example, the header  contains a value indicating the size of the last contiguous block of available free space before the tag array  in the interior page . The header  is stored at the beginning of the interior page .","Each of the nodes  comprises a key value and a reference to another page in the database . As discussed briefly above, the key values in the nodes  are arranged in a predicable order. For example, if the key values are text strings, the key values in the nodes  may be arranged in alphabetical order. In another example, if the key values are dates, the key values in the nodes  may be arranged in chronological order. In a third example, if the key values are numbers, the key values in the nodes  may be arranged in increasing numerical order. There may be blocks of free space located between individual ones of the nodes . In the example of , the first block of free space A is located between the node B and the node C. It should be appreciated that other interior pages may have more or fewer nodes than the three shown in the example of .","The tag array  comprises offset values indicating virtual memory addresses of the nodes  relative to an initial virtual memory address of the interior page . For example, the tag array  may comprise a first offset value indicating that the node A starts at a virtual memory address  bytes after the initial virtual memory address of the interior page , a second offset value indicating that the node B starts at a virtual memory address 128 bytes after the initial virtual memory address of the interior page , and a third offset value indicating that the node C starts at a virtual memory address  bytes after the initial virtual memory address of the interior page . In the example of , the offset values in the tag array  are necessitated by the fact that the nodes  may not all be the same size and by the fact that there may be free space between individual ones of the nodes .","In some example implementations, data pages in the database  are structured in a manner similar to interior page . For instance, data pages may have headers equivalent to header  and may have tag arrays equivalent to tag array . However, the nodes in data pages contain database entries instead of references to other pages. In some implementations, the nodes in data pages contain keys. The keys in the nodes of data pages facilitate sorting of the database entries in the nodes. In such example instances, the offset values in the tag array of a database entry indicate virtual memory addresses of the database entries relative to an initial virtual memory address of the data page.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 3","FIG. 3","FIG. 3"],"b":"200"},"The interior page  illustrated in the example of  is the result of reorganizing the interior page  illustrated in the example of . As illustrated in the example of , the interior page  includes a header \u2032, the node A, the node B, the node C, and a tag array \u2032. Furthermore, the interior page  includes a block of unavailable free space \u2032.","As it can be seen in the example of , after the page manager  reorganizes of the interior page , the nodes  have been reorganized within the interior page  such that free space adjacent to one or more of the nodes  is reduced. As illustrated in the example of , the free space adjacent to the nodes  is reduced such that the header \u2032, the nodes , the block of unavailable free space \u2032, and the tag array \u2032 are associated with a first contiguous block of virtual memory addresses within the interior page . Furthermore, after the page manager  reorganizes the interior page , the interior page  contains a block of available free space  associated with a second contiguous block of virtual memory addresses within the interior page . The header \u2032, the nodes , the block of unavailable free space \u2032 and the tag array \u2032 are associated with contiguous virtual memory addresses at first end of the virtual memory addresses associated with the interior page . The block of available free space  is associated with virtual memory addresses at an opposite end of the virtual memory addresses associated with the interior page .","The block of unavailable free space \u2032 exists in the interior page  because operating systems typically do not allow applications to reserve blocks of virtual memory addresses smaller than a minimum commit size. In other words, the minimum commit size is the minimum number of bytes that the operating system  is configured to allocate. For example, the operating system  may address physical data storage locations at a per-byte level, but the operating system  may not allow applications to reserve blocks of virtual memory addresses smaller than 4 KB. As a result, when the total size of the header \u2032, the nodes , and the tag array \u2032 is not a multiple of the minimum commit size, a block of unavailable free space \u2032 is associated with a sufficient number of virtual memory addresses to ensure that the total size of substantive data (i.e., the header \u2032, the nodes , and the tag array \u2032 plus the block of unavailable free space \u2032 is a multiple of the minimum commit size. Because the block of unavailable free space \u2032 is not available to be removed from the interior page , this disclosure refers to the block of unavailable free space \u2032 as unavailable free space. In contrast, free space in addition to the block of unavailable free space \u2032 is available to be removed. Consequently, this disclosure refers to free space that is available to be removed as available free space. The size of the available free space is equal to the size of the requested page minus a smallest multiple of the minimum commit size that is greater than a size of the substantive data.","In some example implementations, after reorganization, the header \u2032 differs from the header  in the interior page  in that the header \u2032 indicates the size of the block of unavailable free space \u2032 as opposed to the block of unavailable free space \u2032 and the block of available free space  in the interior page . The tag array \u2032 differs from the tag array  in that the tag array \u2032 comprises different offset values to indicate the new virtual memory addresses of the nodes  relative to an initial virtual memory address of the interior page .","As mentioned above, data pages may, in some example implementations, have a similar structure to the interior page . In such example implementations, data page may be reorganized in a manner similar to the reorganization of the interior page  illustrated in the example of .",{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 4","FIG. 4","FIG. 4"],"b":"400"},"As illustrated in the example of , the B+ tree  comprises an interior page A, an interior page B, an interior page C, and an interior page D. This disclosure refers to the interior page A, the interior page B, the interior page C, and the interior page D collectively as \u201cthe interior pages .\u201d The B+ tree  also comprises a data page A, a data page B, a data page C, a data page D, a data page E, and a data page F. This disclosure refers to the data page A, the data page B, the data page C, the data page D, the data page E, and the data page F collectively as \u201cthe data pages .\u201d","In the example of , nodes are illustrated as white blocks within the interior pages , free space is illustrated as diagonally lined blocks within the interior pages , and metadata are illustrated as dotted blocks within the interior pages . Furthermore, in the example of , database entries are illustrated as white blocks within the data pages , free space is illustrated as diagonally lined blocks within the data pages , and metadata are illustrated as dotted blocks within the data pages . As illustrated in the example of , arrows extend from each of the nodes in the interior pages  to other ones of the interior pages  or to ones of the data pages . An arrow extending from a node to a page indicates that the node contains a reference to the page. In the example of , no nodes contain references to the interior page A. As used in this disclosure, when no node contains a reference to an interior page in a B+ tree, the interior page is the root interior page of the B+ tree.","In the example of , arrows extend from each of the data pages  to at least one other one of the data pages . An arrow from a first one of the data pages  to a second one of the data pages  indicates that the first one of the data pages  contains a reference to the second one of the data pages . The reference from the first one of the data pages  to the second one of the data pages  may enable sequential access of the data pages . In the example of , the arrows are double headed. A double-headed arrow between a first one of the data pages  and a second one of the data pages  implies that the first one of the data pages  contains a reference to the second one of the data pages  and the second one of the data pages  contains a reference to the first one of the data pages .",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 5","FIG. 5","FIG. 5"],"b":"400"},"The B+ tree \u2032 is the result of reorganizing the interior pages  and reducing free space on the interior pages  illustrated in the example of . As illustrated in the example of , the B+ tree \u2032 largely has the same structure as the B+ tree  illustrated in the example of . However, in the B+ tree \u2032, an interior page A\u2032 replaces the interior page A, an interior page B\u2032 replaces the interior page B, an interior page C\u2032 replaces the interior page C, and an interior page D\u2032 replaces the interior page D. This disclosure refers to the interior page A\u2032, the interior page B\u2032, the interior page C\u2032, and the interior page D\u2032 collectively as the interior pages \u2032. Furthermore, in the B+ tree \u2032, a data page A\u2032 replaces the data page A, a data page B\u2032 replaces the data page B, a data page C\u2032 replaces the data page C, a data page D\u2032 replaces the data page D, a data page E\u2032 replaces the data page E, and a data page F\u2032 replaces a data page F. The data pages \u2032 are reorganized versions of the data pages .",{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 6","FIG. 6","FIG. 6"],"b":["600","118","118","118","118","600","100","600"]},"As illustrated in the example of , the operation  starts when the tree manager  receives a database entry read request for a requested database entry (). As described above with regard to one example implementation, the tree manager  may receive the read request when the database manager  invokes a method of a software interface provided by the tree manager . The database entry read request specifies a requested value of a field of database items in the database . For example, the database entry read request may specify the value \u201c20.\u201d","After receiving the database entry read request, the tree manager  generates a page read request for a root interior page of a B+ tree in the database  (). In one example implementation, the tree manager  generates the page read request for the root interior page of the B+ tree by invoking a method in a software interface provided by the page manager . After the tree manager  has generated the page read request, the tree manager  receives in response to the page read request a reference indicating a virtual memory address associated with copy of the root interior page of the B+ tree (). The copy of the root interior page is stored in the database cache . In one example implementation, the reference to the copy of the root interior page indicates a first virtual memory address associated with the copy of the root interior page in the database cache .","Next, the tree manager  determines whether the reference indicates a virtual memory address associated with a copy of an interior page or a copy of a data page (). In one example implementation, the tree manager  determines whether the reference returned by the page manager  indicates a copy of an interior page or a copy of a data page by examining a header portion of the page referred to by the reference.","If the tree manager  determines that the reference returned by the page manager  indicates a virtual memory address associated with a copy of an interior page (\u201cYES\u201d of ), the tree manager  identifies a target node in the copy of the interior page associated with the requested value (). As used in this disclosure, a node is associated with the requested value when the node has, among the nodes in the copy of the interior page, the highest-ordered key value that is less than or equal to the requested value.","The tree manager  then generates a page read request for a target page indicated by the target node (). In one example implementation, the tree manager  generates the page read request for the target page indicated by the target node by invoking a method in a software interface provided by the page manager . Next, the tree manager  receives a reference in response to the page read request (). The reference indicates a virtual memory address associated with a copy of the target page indicated by the target node. The tree manager  then loops back and again determines whether the reference returned in response to the most recent page read request indicates a copy of an interior page or a copy of a data page ().","If the tree manager  determines that the reference does not indicate a virtual memory address of a copy of an interior page (i.e., a copy of a data page) (\u201cNO\u201d of ), the tree manager  identifies a database entry having the request value within the copy of the data page (). The tree manager  then returns a reference to the identified database entry as a response to the database entry read request ().",{"@attributes":{"id":"p-0079","num":"0078"},"figref":["FIG. 7","FIG. 7","FIG. 7"],"b":["700","120","120","120","120","700","100","700"]},"As illustrated in the example of , the operation  starts when the page manager  receives a page read request for a requested page (). In one example implementation, the page manager  receives the page read request when the page manager  receives an invocation of a method of a software interface provided by the page manager . Upon receiving the page read request, the page manager  generates a read request (). The read request indicates the requested page. In one example implementation, the page manager  generates the read request by invoking a method of the buffer manager . The read request causes the requested page to be copied from the database  to the database cache . In response to the read request, the page manager  receives a reference to a first virtual memory address of a copy of the requested page in the database cache  (). The page manager  then returns the reference to the first virtual memory address of the copy of the requested page in the database cache  as a response to the page read request for the page ().",{"@attributes":{"id":"p-0081","num":"0080"},"figref":["FIG. 8","FIG. 8","FIG. 8"],"b":["800","122","122","122","122","800","100","800"]},"In the example of , the operation  begins when the buffer manager  receives a page read request for a requested page (). In one example implementation, the buffer manager  receives the page read request when the page manager  invokes a method of a software interface provided by the buffer manager . The page read request specifies the requested page.","In response to receiving the page read request, the buffer manager  determines whether there is a write latch on a buffer in the database cache  (). The buffer is the set of the virtual memory addresses associated with the requested page. A write latch is a software construct for ensuring mutual exclusion. That is, a write latch on a buffer ensures that no process can read from any of the virtual memory address in the buffer while another process is writing to any of the virtual memory addresses in the buffer. If there is a write latch on any of the virtual memory addresses in the requested page (\u201cYES\u201d of ), the buffer manager  waits until there is no write latch on the requested page (). In this way, the buffer manager  implements a read latch on the buffer.","When there is no write latch on the requested page (\u201cNO\u201d of ), the buffer manager  determines whether the database cache  stores a copy of the requested page in the database cache  (). In one example implementation, the buffer manager  determines whether the database cache  stores a copy of the requested page by determining whether a hash table contains an entry for a page number of the requested page. If the database cache  stores a copy of the requested page (\u201cYES\u201d of ), the buffer manager  returns a reference indicating a first virtual memory address in a block of virtual memory addresses associated with the copy of the requested page ().","On the other hand, if the database cache  does not store a copy of the requested page (\u201cNO\u201d of ), the buffer manager  reserves an initial block of virtual memory addresses for the requested page and allocates a set of physical data storage locations to store data associated with the initial block of virtual memory addresses (). In one example implementation, when the operating system  launches a process, the operating system  provides the process with a virtual address space. The operating system  then maps the process's executable file to virtual memory addresses in the process's virtual address space and maps virtual memory addresses of shared libraries to virtual memory addresses in the process's virtual address space. In the example of , the application  is a process and virtual memory addresses of the database manager , the tree manager , the page manager , the buffer manager , and the operating system  are mapped to virtual memory addresses in the virtual address space of application . When the process executes, the process exclusively refers to virtual memory addresses in the process's virtual address space. For instance, the program counter of the process indicates a virtual memory address in the process's virtual address space. The operating system  is responsible for maintaining a mapping between virtual memory addresses in the process's virtual address space and addresses of the physical data storage locations of the computing system .","In some implementations, the buffer manager  reserves an initial block of virtual memory addresses for the requested page and allocates a set of physical data storage locations to store data associated with the initial block of virtual memory addresses by invoking one or more methods provided by the operating system . When the operating system  receives a request from the database cache  to reserve a block of virtual memory addresses, the operating system  reserves a block of virtual memory addresses in the virtual address space of the application . Reserving the block of virtual memory addresses ensures that the operating system  does not provide virtual memory addresses in the block of virtual memory addresses in response to a subsequent request to reserve virtual memory addresses. However, when the operating system  receives the request to reserve a block of virtual memory addresses, the operating system  does not necessarily commit physical data storage locations to store data associated with the block of virtual memory addresses. When the operating system  receives a request to allocate a set of physical data storage locations, the operating system  commits physical data storage locations in the database cache  to physically store data. In some implementations, the buffer manager  is able to reserve virtual memory addresses and allocate physical data storage locations in a single method call to the operating system .","In other implementations, the buffer manager  maintains a pool of unused virtual memory addresses. Each virtual memory address in the pool is reserved for use by the buffer manager , but is not currently associated with any meaningful data. In such implementations, the buffer manager  reserves the initial block of virtual memory addresses for the requested page by removing the initial block of virtual memory addresses from the pool of unused virtual memory addresses. In this way, the buffer manager  reserves the initial block of virtual memory addresses without invoking a function of the operating system . In such implementations, the buffer manager  may still invoke functions of the operating system  to allocate a set of physical storage locations to store data associated with the initial block of virtual memory addresses, if the virtual memory addresses are not already associated with a set of physical storage locations.","After reserving the initial block of virtual memory addresses for the requested page and allocating the set of physical data storage locations, the buffer manager  generates a read request to read a copy of the requested buffer from the database  into the set of physical data storage locations (). To generate the read request, the buffer manager  invokes a read method of the operating system . In one example implementation, the requested page is identified by a page number. For instance, the requested page may be identified by the page number . In this example implementation, when the buffer manager  generates the read request, the buffer manager  multiplies the page number of the requested page by the size of the pages in the database . The buffer manager , in this example implementation, then sets a file pointer of a file containing the database  to the resulting number. In this example implementation, the buffer manager  instructs the operating system  to read from a persistent computer-readable data storage medium a block of data having the size of the pages, starting at the file pointer of the file containing the database . For instance, if the pages in the database  are 32 KB, the buffer manager  instructs the operating system  to read 32 KB, starting at the file pointer of the file containing the database . In some implementations, the buffer manager  uses direct offset-based file Application Programming Interfaces (APIs) for reading data from the database . The direct offset-based file API do not require a file pointer.","When a copy of the requested buffer has been read into the set of physical data storage locations, the buffer manager  receives a read complete indicator (). For instance, if the buffer manager  generates the read request by invoking a read method of the operating system , the buffer manager  may receive the read complete indicator from the operating system .","The buffer manager  then determines a size of the free space in the interior page (). In one example implementation, the buffer manager  determines the size of the free space in the copy of the requested page by invoking a method of the page manager , specifying the first virtual memory address in the initial block of virtual memory addresses associated with the copy of the requested page. In this example implementation, the buffer manager  uses the page manager  to determine the size of the free space in the copy of the requested page because the page manager  understands the format of pages whereas the buffer manager  does not. In this example implementation, the page manager  returns to the buffer manager  the size of the free space in the copy of the requested page.","Next, the buffer manager  determines whether it would be useful to reduce the free space in the copy of the requested page (). In one example implementation, the buffer manager  determines whether it would be useful to reduce the free space in the copy of the requested page by comparing the amount of free space in the copy of the requested page to the minimum commit size of the computing system . For example, if the size of the free space in the copy of the requested page is greater than the minimum commit size of the computing system , it would be useful to reduce the free space in the copy of the requested page. In this example, the buffer manager  may compare the amount of free space in the copy of the requested page to the minimum commit size by comparing an available free space value in a header of the copy of the requested page to the minimum commit size. As discussed above, the available free space value indicates an amount of free space in the requested page. In this example, the buffer manager  may be able to compare the amount of free space in the copy of the requested page to the minimum commit size at order O(1) because the buffer manager uses the available free space value. In another example, the buffer manager  may be configured to determine that it would be useful to reduce the free space in the copy of the requested page when the size of the free space in the copy of the requested page is greater than two times the minimum commit size. If the buffer manager  determines that it would not be useful to reduce the free space in the copy of the requested page (\u201cNO\u201d of ), the buffer manager  returns a reference indicating the first virtual memory address of the initial block of virtual memory addresses associated with the copy of the requested page to the page manager  in response to the page read request ().","On the other hand, if the buffer manager  determines that it would be useful to reduce the free space in the copy of the requested page (\u201cYES\u201d of ), the buffer manager  reorganizes the copy of the requested page (). In one example implementation, the buffer manager  reorganizes the copy of the requested page by invoking a method of the page manager . In this example implementation, the buffer manager  uses the page manager  to reorganize the copy of the requested page because the page manager  understands the format of the copy of the requested page, whereas the buffer manager  does not. Reorganizing the copy of the requested page results in the header, all of the nodes or database entries in the copy of the requested page, the unavailable free space, and the tag array being associated with a first contiguous block of virtual memory addresses within the initial block of virtual memory addresses associated with the copy of the requested page. Furthermore, reorganization of the copy of the requested page results in the available free space being associated with a second contiguous block of virtual memory addresses within the initial block of virtual memory addresses associated with the copy of the requested page. , described above, illustrate the result of reorganizing a copy of an interior page . Reorganization of the copy of the requested page also results in the updating of offset values in the tag array in the copy of the interior page to reflect the new positions of the nodes within the copy of requested page.","After the buffer manager  reorganizes the copy of the requested page, the buffer manager  deallocates the block(s) of physical data storage locations committed to the virtual memory addresses associated with the available free space of the copy of the requested page (). For ease of explanation, this disclosure refers to the set of physical data storage locations committed to the virtual memory addresses associated with the available free space of the copy of the requested page as the available set of physical data storage locations. In one example implementation, the buffer manager  deallocates the available set of physical data storage locations by invoking a method of the operating system , indicating the virtual memory addresses associated with the available free space. Deallocating the available set of physical data storage locations allows the operating system  to use the physical data storage locations to store other data. In the example of , the buffer manager  does not unreserve the virtual memory addresses associated with the available free space of the copy of the requested page. Thus, the operating system  does not provide the virtual memory addresses associated with the available free space in response to a subsequent request to reserve virtual memory addresses in the virtual address space of the application . Once the buffer manager  has deallocated the available set of physical data storage locations, the buffer manager  returns a reference indicating a first virtual memory address in the initial block of virtual memory addresses associated with the copy of the requested page to the page manager  in response to the page read request ().",{"@attributes":{"id":"p-0094","num":"0093"},"figref":["FIG. 9","FIG. 9","FIG. 9"],"b":["900","122","122","122","122","900","100","900"]},"As illustrated in the example of , the operation  starts when the buffer manager  receives a request for a write latch for a block of virtual memory addresses associated with a copy of a target page in the database  (). In one example implementation, the buffer manager  receives the request for the write latch when the page manager  invokes a method of a software interface provided by the buffer manager . The request for the write latch specifies the block of virtual memory addresses associated with the target page.","After the buffer manager  receives the request for the write latch, the buffer manager  waits until there is no write latch or read latch for the block of virtual memory addresses (). When there is no write latch or read latch for the block of virtual memory addresses, the buffer manager  obtains the write latch for the block of virtual memory addresses ().","The buffer manager  then determines whether the size of the target page is less than the size of the block of virtual memory addresses (). Because copies of pages initially have the same size as the blocks of virtual memory addresses associated with the copies of the pages, the size of a copy of a page is only less than the size of the block of virtual memory addresses associated with the copy of the target page when the free space in the copy of the target page has been reduced. In one example implementation, the buffer manager  determines whether the size of the copy of the target page is less than a size of the block of virtual memory addresses by invoking a method of the page manager  that returns the size of the copy of the target page. In this example implementation, the buffer manager  then compares the size of the copy of the target page to the size of the block of virtual memory addresses. If the size of the copy of the target page is not less than the size of the block of virtual memory addresses (\u201cNO\u201d of ), the buffer manager  returns the write latch to the page manager  as a response to the request for the write latch ().","If the size of the copy of the target page is less than the size of the block of virtual memory addresses (\u201cYES\u201d of ), the buffer manager  allocates an additional set of physical data storage locations to store data associated with the virtual memory addresses of the block of available free space of the target page (). In one example implementation, the buffer manager  allocates the additional set of physical data storage locations by invoking a method provided by the operating system . The physical data storage locations in the additional set of physical data storage locations may or may not include same physical data storage locations that were originally committed to the addresses of the virtual memory addresses of the block of available free space.","After the buffer manager  allocates the additional set of physical data storage locations to store data associated with the virtual memory addresses of the available free space of the target page, the buffer manager  moves the tag array of the copy of the target page such that a last virtual memory address associated with the tag array is a last virtual memory address associated with the copy of the target page (). In one example implementation, the buffer manager  moves the tag array to the last virtual memory address associated with the copy of the target page by invoking a method of the page manager . The buffer manager  then returns the write latch to the page manager  as a response to the request for the write latch ().","Once the page manager  has obtained the write latch, the page manager  is free to write data to the copy of the target page. In one example implementation, after the page manager  has obtained the write latch, the page manager  invokes a method of the buffer manager  to write target data to the copy of the target page. When the buffer manager receives the request to write the target data, the buffer manager  writes the target data to the copy of the target page. After the page manager  is finished writing data to the copy of the target page, the page manager  releases the write latch on the buffer by invoking a method of the buffer manager .","Although the example of  describes an operation in which the buffer manager  expands the target page in response to a request for a write latch, it should be appreciated that the buffer manager  may expand a target page in other circumstances. For instance, the buffer manager  may expand the target page in response to receiving a notification that the page manager  intends to write new data to the target page. Furthermore, in the example of , the buffer manager  expands the target page to the size of the target page prior to reduction of free space in the target page. It should be appreciated that in some implementations, the buffer manager  may expand the target page to a size other than the previous size of the target page. For instance, the buffer manager  may expand the target page to a size just large enough to accommodate data to be stored in the target page.",{"@attributes":{"id":"p-0102","num":"0101"},"figref":["FIG. 10","FIG. 10","FIG. 10"],"b":["1000","122","112","122","112","122","122","1000","100","1000"]},"As illustrated in the example of , the operation  starts when the buffer manager  selects a copy of a page in the database cache  for removal (). The buffer manager  may select a copy of a page in the database cache  in response to a variety of conditions. For example, the buffer manager  may select a copy of a page in the database cache  when the database cache  is full and the buffer manager  has received a request to read an additional page into the database cache . In another example, the buffer manager  may periodically scan through the database cache  and select a copy of a page.","The buffer manager  may use a variety of algorithms to select the copy of the page. For example, the buffer manager  may select least-recently used copies of pages in the database cache . In another example, the buffer manager  may use a weighting scheme that favors copies of pages that have had their free space reduced. In other words, the buffer manager  is more likely to select full size copies of pages than copies of pages that have had their free space reduced.","After selecting the copy of the page in the database cache , the buffer manager  determines whether the selected copy of the page is dirty (). As discussed above, a copy of a page is dirty if the copy of the page contains data different than the page. In one example implementation, each of the copies of pages in the database cache  is associated with a clean\/dirty flag. In this example implementation, the buffer manager  sets the clean\/dirty flag associated with a copy of a page to dirty when the buffer manager  writes to data the copy of the page in the database cache . In this example implementation, the buffer manager  uses the clean\/dirty flag associated with the selected copy of the page to determine whether the selected copy of the page is dirty.","If the selected copy of the page is not dirty (\u201cNO\u201d of ), the buffer manager  removes the selected copy of the page from the database cache  (). When the buffer manager  removes the selected copy of the page from the database cache , the buffer manager  deallocates the set of physical data storage locations committed to the block of virtual memory addresses associated with the selected copy of the page. In addition, when the buffer manager  removes the selected copy of the page from the database cache , the buffer manager  frees the block of virtual memory addresses associated with the selected copy of the page. In different implementations, the buffer manager  may free the block of virtual memory addresses in different ways. For instance, in a first example implementation, the buffer manager  unreserves the block of virtual memory addresses, thereby indicating to the operation system  that the buffer manager  will no longer use the block of virtual memory addresses. In a second example implementation, the buffer manager  frees the block of virtual memory addresses by adding the block of virtual memory addresses to a pool of unused virtual memory addresses. Each virtual memory address in the pool of unused virtual memory addresses remains reserved for use by the buffer manager .","On the other hand, if the selected copy of the page is dirty (\u201cYES\u201d of ), the buffer manager  determines whether the size of the selected copy of the page is less than the size of the block of virtual memory addresses associated with the selected copy of the page (). Because copies of pages are initially the same size of the block of virtual memory addresses associated with the copies of the pages, the size of a copy of a page is only less than the size of the block of virtual memory addresses associated with the page when the free space in the copy of the page has been reduced. In one example implementation, the buffer manager  determines whether the size of the selected copy of the page is less than a size of the block of virtual memory addresses associated with the selected copy of the page by invoking a method of the page manager  that returns the size of the page. In this example implementation, the buffer manager  then compares the size of the selected copy of the page to the size of the block of virtual memory addresses associated with the selected copy of the page. If the size of the selected copy of the page is not less than the size of the block of virtual memory addresses associated with the selected copy of the page (\u201cNO\u201d of ), the buffer manager  stores the selected copy of the interior page to the database  (). After storing the selected copy of the interior page to the database , the buffer manager  removes the selected copy of the page from the database cache  ().","If the size of the selected copy of the page is less than the size of the block of virtual memory addresses associated with the selected copy of the page (\u201cYES\u201d of ), the buffer manager  allocates an additional set of physical data storage locations committed to the virtual memory addresses associated with the available free space of the selected copy of the page (). In one example implementation, the buffer manager  allocates the additional set of physical data storage locations by invoking a method of the operating system . Next, the buffer manager  moves the tag array of the selected copy of the page to an end of the virtual memory addresses associated with the selected copy of the page (). The buffer manager  then stores the selected copy of the page to the database  (). After storing the selected copy of the page to the database , the buffer manager  removes the selected copy of the page from the database cache  ().","It should be appreciated that the operation  is merely one example operation of the buffer manager  to flush copy of pages to the database . For example, in another example operation, the buffer manager  may not perform steps -.",{"@attributes":{"id":"p-0110","num":"0109"},"figref":["FIG. 11","FIG. 11"],"b":["1100","1100","1102","1102","1102"]},"In addition, the electronic computing device  comprises a processing unit . As mentioned above, a processing unit is a set of one or more physical electronic integrated circuits that are capable of executing software instructions. In a first example, the processing unit  may execute software instructions that cause the electronic computing device  to provide specific functionality. In this first example, the processing unit  may be implemented as one or more processing cores and\/or as one or more separate microprocessors. For instance, in this first example, the processing unit  may be implemented as one or more Intel Core 2 microprocessors. The processing unit  may be capable of executing software instructions in an instruction set, such as the x86 instruction set, the POWER instruction set, a RISC instruction set, the SPARC instruction set, the IA-64 instruction set, the MIPS instruction set, or another instruction set. In a second example, the processing unit  may be implemented as an ASIC that provides specific functionality. In a third example, the processing unit  may provide specific functionality by using an ASIC and by executing software instructions.","The electronic computing device  also comprises a video interface . The video interface  enables the electronic computing device  to output video information to a display device . The display device  may be a variety of different types of display devices. For instance, the display device  may be a cathode-ray tube display, an LCD display panel, a plasma screen display panel, a touch-sensitive display panel, a LED array, or another type of display device.","In addition, the electronic computing device  includes a non-volatile storage device . The non-volatile storage device  is a computer-readable data storage medium that is capable of storing data and\/or software instructions. The non-volatile storage device  may be a variety of different types of non-volatile storage devices. For example, the non-volatile storage device  may be one or more hard disk drives, magnetic tape drives, CD-ROM drives, DVD-ROM drives, Blu-Ray disc drives, solid state drives, solid state memory, or other types of non-volatile storage devices.","The electronic computing device  also includes an external component interface  that enables the electronic computing device  to communicate with external components. As illustrated in the example of , the external component interface  enables the electronic computing device  to communicate with an input device  and an external storage device . In one implementation of the electronic computing device , the external component interface  is a Universal Serial Bus (USB) interface. In other implementations of the electronic computing device , the electronic computing device  may include another type of interface that enables the electronic computing device  to communicate with input devices and\/or output devices. For instance, the electronic computing device  may include a PS\/2 interface. The input device  may be a variety of different types of devices including, but not limited to, keyboards, mice, trackballs, stylus input devices, touch pads, touch-sensitive display screens, or other types of input devices. The external storage device  may be a variety of different types of computer-readable data storage media including magnetic tape, flash memory modules, magnetic disk drives, optical disc drives, and other computer-readable data storage media.","In addition, the electronic computing device  includes a network interface card  that enables the electronic computing device  to send data to and receive data from an electronic communication network. The network interface card  may be a variety of different types of network interface. For example, the network interface card  may be an Ethernet interface, a token-ring network interface, a fiber optic network interface, a wireless network interface (e.g., WiFi, WiMax, etc.), or another type of network interface.","The electronic computing device  also includes a communications medium . The communications medium  facilitates communication among the various components of the electronic computing device . The communications medium  may comprise one or more different types of communications media including, but not limited to, a PCI bus, a PCI Express bus, an accelerated graphics port (AGP) bus, an Infiniband interconnect, a serial Advanced Technology Attachment (ATA) interconnect, a parallel ATA interconnect, a Fiber Channel interconnect, a USB bus, a Small Computer System Interface (SCSI) interface, or another type of communications medium.","The electronic computing device  includes several computer-readable data storage media (i.e., the memory unit , the non-volatile storage device , and the external storage device ). Together, these computer-readable storage media may constitute a single data storage system (e.g., the data storage system ). As discussed above, a data storage system is a set of one or more computer-readable data storage mediums. This data storage system may store software instructions executable by the processing unit . Activities described in the above description may result from the execution of the software instructions stored on this data storage system. Thus, when this description says that a particular logical module performs a particular activity, such a statement may be interpreted to mean that software instructions of the logical module, when executed by the processing unit , cause the electronic computing device  to perform the activity. In other words, when this description says that a particular logical module performs a particular activity, a reader may interpret such a statement to mean that the software instructions configure the electronic computing device  such that the electronic computing device  performs the particular activity.","The techniques of this disclosure may be realized in a wide variety of ways. For example, the techniques of this disclosure may be realized as a method of managing a database cache. The method comprises storing a database in one or more persistent computer-readable data storage media. The database comprises a set of pages. Each page in the set of pages has a fixed size. Each of the pages contains substantive data. The method also comprises receiving, at a computing system, a page read request for a requested page in the set of pages. In addition, the method comprises reserving, by the computing system, an initial block of virtual memory addresses having the fixed size. Furthermore, the method comprises allocating, by the computing system, a set of physical data storage locations committed to the initial block of virtual memory addresses. In addition, the method comprises reading, by the computing system, the requested page from the persistent computer-readable data storage media. The method also comprises storing, by the computing system, a copy of the requested page into the set of physical data storage locations. A minimum commit size is a minimum number of bytes that an operating system of the computing system is configured to allocate. The copy of the requested page comprises the substantive data of the requested page and available free space. The size of the available free space is equal to the fixed size minus a smallest multiple of the minimum commit size that is greater than a size of the substantive data. The substantive data is associated with a first set of virtual memory addresses within the initial block of virtual memory addresses. The available free space is associated with a second set of virtual memory addresses within the initial block of virtual memory addresses. Furthermore, the method comprises after storing the copy of the requested page, deallocating, by the computing system, an available set of physical data storage locations committed to the second set of virtual memory addresses. The method also comprises returning, by the computing system, a reference to the copy of the requested page as a response to the page read request.","In another example, the techniques of this disclosure may be realized as a computing system comprising a processing unit comprising at least one integrated circuit. The computing system further comprising a data storage system comprising at least one computer-readable data storage medium. The data storage system storing a database in one or more persistent computer-readable data storage media in the data storage system, the database comprising a set of pages, each page in the set of pages having a fixed size, each of the pages containing substantive data. The data storage system also stores a buffer manager comprising software instructions that, when executed by the processing unit, cause the computing system to receive a page read request for a requested page. The instructions also cause the computing system to in response to receiving the page read request reserve an initial block of virtual memory addresses having the fixed size. In addition, the instructions cause the computing system to allocate a set of physical data storage locations committed to the initial block of virtual memory addresses. Furthermore, the instructions cause the computing system to read the requested page from the persistent computer-readable data storage media. The instructions also cause the computing system to store a copy of the requested page into the set of physical data storage locations. In addition, the instructions cause the computing system to determine, after storing the copy of the requested page into the set of physical data storage locations, whether a size of available free space in the copy of the requested page is greater than a minimum commit size, the size of the available free space being equal to the fixed size minus a smallest multiple of the minimum commit size that is greater than a size of the substantive data, the minimum commit size being a minimum number of bytes that an operating system of the computing system is configured to allocate. In addition, the instructions cause the computing system to reorganize, when the size of the available free space is greater than the minimum commit size, the copy of the requested page such that the substantive data in the copy of the requested page is associated with a first contiguous block of virtual memory addresses within the initial block of virtual memory addresses and the available free space is associated with a second contiguous block of virtual memory addresses within the initial block of virtual memory addresses. The instructions also cause the computing system to deallocate, after reorganizing the copy of the requested page, an available set of physical data storage locations committed to the second contiguous block of virtual memory addresses. In addition, the instructions cause the computing system to return, after deallocating the available set of physical data storage locations, a reference to the copy of the requested page as a response to the page read request.","In another example, the techniques of this disclosure may be realized as a computer readable data storage medium storing instructions that, when executed by a processing unit of a computing system, cause the computing system to store a database in one or more persistent computer-readable data storage media. The database comprises a set of pages. Each page in the set of pages has a fixed size of 32 kilobytes. The set of pages comprises a set of data pages and an interior page. Each of the pages contains substantive data comprising a plurality of nodes, free space, and metadata. Each of the nodes in the interior page containing a key value and a reference to a page in the set of pages containing a database entry having a field that specifies the key value. Each of the nodes in each of the data pages containing a database entry, each of the database entries being e-mail messages. The free space consists of a block of available free space and a block of unavailable free space. The computer readable data storage medium also stores an application comprising instructions that, when executed by the processing unit, cause the computing system to generate a query specifying criteria to process a web content request received by the computing system. In addition, the computer readable storage medium also stores a database manager comprising instructions that, when executed by the processing unit, cause the computing system to process the criteria to identify a requested value of a particular field of the one or more database entries in the database. The instructions of the database manager also cause the computing system to generate a database entry read request specifying the requested value. The computer-readable data storage medium also stores a tree manager comprising instructions that, when executed by the processing unit, cause the computing system to receive the database entry read request from the database manager. The instructions of the tree manager also cause the computing system to generate, in response to the database entry read request, a second read request. The second read request indicates a requested page in the set of pages. The computer-readable data storage medium also comprises a page manager comprising instructions that, when executed by the processing unit, cause the computing system to receive the second read request. The instructions of the page manager also cause the computing system to generate, in response to the second read request, a third read request. The third read request indicating the requested page. In addition, the computer-readable data storage medium stores a buffer manager comprising instructions that, when executed by the processing unit, cause the computing system to perform the following in response to receive the third read request. The instructions of the buffer manager also cause the computing system to in response to receiving the third read request reserve an initial block of virtual memory addresses having the fixed size. The instructions of the buffer manager also cause the computing system to allocate a set of physical data storage locations committed to the initial block of virtual memory addresses. In addition, the instructions of the buffer manager cause the computing system to read the requested page from the persistent computer-readable data storage media. Furthermore, the instructions of the buffer manager also cause the computing system to store a copy of the requested page into the set of physical data storage locations. The instructions of the buffer manager also cause the computing system to determine, after storing the copy of the requested page into the set of physical data storage locations, whether a size of the block of available free space in the copy of the requested page is greater than a minimum commit size, the size of the block of available free space being equal to the size of the requested page minus a smallest multiple of the minimum commit size that is greater than a size of the substantive data, the minimum commit size being a minimum number of bytes that an operating system of the computing system is configured to allocate. In addition, he instructions of the buffer manager cause the computing system to reorganize, when the size of the free space is greater than the minimum commit size, the copy of the requested page such that the substantive data is associated with a first contiguous block of virtual memory addresses within the initial block of virtual memory addresses and the block of available free space is associated with a second contiguous block of virtual memory addresses within the initial block of virtual memory addresses. Furthermore, the instructions of the buffer manager cause the computing system to deallocate, after reorganizing the copy of the requested page, an available set of physical data storage locations committed to the second contiguous block of virtual memory addresses. The instructions of the buffer manager also cause the computing system to return, after deallocating the available set of physical data storage locations, a reference to the copy of the requested page as a response to the third read request. The instructions of the page manager, when executed by the processing unit, further cause the computing system to receive, in response to the third read request, the reference to the copy of the requested page. The instructions of the page manager also cause the computing system to return the reference to the copy of the requested page as a response to the second read request. The instructions of the tree manager, when executed by the processing unit, further cause the computing system to receive, in response to the second read request, the reference to the copy of the requested page. The instructions of the tree manager also cause the computing system to determine, after receiving the reference to the copy of the interior page, whether the requested page is the interior page. The instructions of the tree manager also cause the computing system to identify, when the requested page is the interior page, a target node in the requested page. The target node is one of the nodes in the requested page having a highest-order key value less than the requested value. The instructions of the tree manager further cause the computing system to generate a fourth read request. The fourth read request indicating a target page indicated by the target node. In addition, the instructions of the tree manager cause the computing system to receive a reference to a copy of the target page. The instructions of the tree manager also cause the computing system to identify the requested database entry in the target page and return a reference to the requested database entry in response to the database entry read request. The instructions of the database manager, when executed by the processing unit, further cause the computing system to provide the reference to the requested database entry as a response to the query. The instructions of the application, when executed by the processing unit, further cause the computing system to use the requested database entry to process the web content request.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
