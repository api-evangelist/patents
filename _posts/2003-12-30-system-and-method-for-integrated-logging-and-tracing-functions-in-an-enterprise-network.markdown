---
title: System and method for integrated logging and tracing functions in an enterprise network
abstract: An integrated tracing and logging system for an enterprise network. One embodiment of the integrated logging and tracing system has an object-oriented architecture which includes a controller class with two sub-classes: a tracing sub-class and a logging sub-class. Instances of the tracing sub-class (tracing modules) are associated with specified program code regions of network applications. The tracing modules receive method calls from the network applications and process the method calls based on defined severity levels. Instances of the logging sub-class (logging modules) are associated with specified “categories” related to the enterprise network (e.g., system, database, etc). The logging modules receive and process method calls from network components associated with the categories. The integrated logging and tracing system allows tracing and logging information to be collected and correlated in a variety of useful ways.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07606893&OS=07606893&RS=07606893
owner: SAP AG
number: 07606893
owner_city: Walldorf
owner_country: DE
publication_date: 20031230
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","Tracing","SUMMARY","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS","Embodiments of the Invention","Examples of Tracing\/Logging Operation"],"p":["1. Field of the Invention","This invention relates generally to the field of data processing systems. More particularly, the invention relates to a system and method for integrating tracing and logging features within an enterprise network.","2. Description of the Related Art","Logging is employed within virtually all data networks. \u201cLogging\u201d refers generally to recording network-related and\/or application-related information in response to one or more predefined network\/application events. For example, when an end-user opens a TCP connection to a server, or unsuccessfully attempts to gain access to network resources (e.g., by attempting to log in to a particular server), this information is typically recorded as an entry within a log file. Similarly, if a variable within an application rises above a specified threshold value, a log entry indicating the value and the date and time that the threshold value was exceeded may be stored within a log file. Logging techniques may be employed to record any specified network\/application event. Network administrators may then review the log files to identify security issues and\/or troubleshoot network problems.","Logging functionality is provided within the Java\u2122 2 Standard Edition (\u201cJ2SE\u2122\u201d) platform and the Java 2 Enterprise Edition \u201cJ2EE\u2122\u201d platform. Referring to , in a Java environment, Java applications  make logging calls on \u201clogger\u201d objects , , . Each logger object is used to log messages for a specific system or application component. Loggers are normally named using a hierarchical dot-separated namespace. Logger names can be arbitrary strings, but they are typically based on the package name or class name of the logged component (e.g., such as java.net or javax.swing). In addition, it is possible to create \u201canonymous\u201d loggers that are not stored in the logger namespace. Loggers are organized in a hierarchical namespace in which child loggers ,  may inherit logging properties from their parents  in the namespace.","Each logger , ,  may have a threshold \u201cLevel\u201d associated with it which reflects a minimum defined logging value (e.g., priority level) that the logger cares about. If a logger's level is set to null, then its effective level is inherited from its parent, which may in turn obtain it recursively from its parent, and so on up the tree.","In response to logging calls from applications , the logger objects , ,  allocate Log Record objects which are passed to handler objects  for publication. For example, a first type of handler object may write log records to an output stream, a second type of handler object may write log records to a file (or to a set of rotating log files) and a third handler may write log records to remote TCP ports. Developers requiring specific functionality may develop a handler from scratch or subclass one of the handlers in J2SE.","Both loggers , ,  and handlers  may use filters ,  to filter out certain designated types of log records. In addition, when publishing a log record externally, a handler may optionally use a formatter  to localize and format the message before writing it to a particular destination. For example, J2SE includes a \u201csimple formatter\u201d for writing short \u201chuman-readable\u201d summaries of log records and an XML formatter for writing detailed XML-structured information.","\u201cTracing\u201d is a technique used primarily by software developers to track the execution of program code. For example, when developing an application, developers trace the execution of methods or functions within certain modules to identify problems and\/or to determine if the program code may be improved. If a particular method takes an inordinate amount of time to complete, the developer may determine the reasons why and\/or change the program code to operate more efficiently.","Developers use trace tools to trace the execution of program code. Trace tools are proprietary application programs which use different techniques to trace the execution flows for an executing program. One technique, referred to as event-based profiling, tracks particular sequences of instructions by recording application-generated events as they occur. By way of example, a trace tool may record each entry into, and each exit from, a module, subroutine, function, method, or system component within a trace file (e.g., a time-stamped entry may be recorded within the trace file for each such event). Trace events may also be sent to a console or other output destination.","Thus, tracing and logging techniques rely on similar event-based triggers, employ similar messaging techniques and record log\/trace events to similar output destinations (e.g., trace\/log files, consoles, . . . etc) in a substantially similar manner. As such, it would be beneficial to develop an integrated application programming interface which takes advantage of the similarities of tracing and logging operations, and of the synergistic effects of handling both, while not neglecting the differences.","An integrated tracing and logging system for an enterprise network is described. One embodiment of the integrated logging and tracing system has an object-oriented architecture which includes a controller class with two sub-classes: a tracing sub-class and a logging sub-class. Instances of the tracing sub-class (tracing modules) are associated with specified program code regions of applications. The tracing modules receive method calls from the applications and process the method calls based on defined severity levels. Instances of the logging sub-class (logging modules) are associated with specified \u201ccategories\u201d related to the enterprise network (e.g., system, database, etc). The logging modules receive and process method calls from network components associated with the categories. The integrated logging and tracing system allows tracing and logging information to be collected and correlated in a variety of useful ways.","Described below is an integrated framework and method which supports both logging and tracing functions. Throughout the description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without some of these specific details. In other instances, well-known structures and devices are shown in block diagram form to avoid obscuring the underlying principles of the present invention.","A system architecture according to one embodiment of the invention is illustrated in . The architecture includes a plurality of controllers  managed by a log\/trace manager . The controllers  are configured to process trace\/logging events generated by a plurality of different applications . As used herein, the term \u201capplication\u201d is used broadly to refer to any type of program code executed on a computer and\/or transmitted over a network (e.g., using a particular network protocol). One embodiment of the invention is implemented in an object-oriented programming environment such as Java (e.g., within a J2EE platform\/engine). In this embodiment, each of the modules illustrated in  are represented by objects and\/or classes. The classes and\/or objects of this embodiment comprise an application programming interface (\u201cAPI\u201d) usable to configure logging and\/or tracing operations within a Java environment. It should be noted however, that the underlying principles of the invention are not limited to any particular programming environment.","In one embodiment, each controller  is an instance of a defined \u201ccontroller\u201d class (e.g., a Java class) which includes two sub-classes, a \u201ctracing\u201d sub-class and a \u201clogging\u201d sub-class (described in detail below), which provide features specific to tracing and logging operations, respectively. In an object-oriented environment such as Java, the tracing controller  illustrated in  represents an instance of the tracing sub-class and the logging controller  represents an instance of the logging sub-class. In one embodiment of the invention, tracing controllers  are associated with program code locations (e.g., locations within packages, classes, . . . etc) whereas logging controllers  are associated with system categories (e.g., logical system categories such as database, network, . . . etc).","The Controller Class","The controller class provides methods for associating log\/trace output destinations with specific controllers  and for controlling the actual writing of log\/trace messages. When a method is called, the writing of the log\/trace message to a log\/trace file , console  or other output destination  depends on the severity level associated with the message, the severity settings ,  of the relevant controller(s) , and the filtering configuration of one or more optional filters , . For example, in one embodiment, messages having a severity level greater than or equal to the effective severity of the relevant controller  are candidates for output and are forwarded to the output destinations  attached to the controller  (i.e., assuming that the messages are not filtered by one of the filters , ).","A variety of different severity levels may be defined. In one embodiment of the invention, illustrated in , the following severity levels are defined (from lowest to highest severity level): MINIMUM, DEBUG, PATH, INFO, WARNING, ERROR, FATAL, and MAXIMUM. The general description for each severity level is set forth in . In addition, as illustrated in , in one embodiment, logging and tracing may be totally enabled or disabled using the severity settings of ALL or NONE, respectively. As indicated in the second column of -, each of the descriptive threshold levels may have an associated numeric value (e.g., DEBUG=100, PATH=200, . . . etc).","Before (or after) evaluating the trace\/log message based on severity, filters  associated with the controller  may filter the messages based on predefined filtering criteria. By way of example, if a particular controller  is capable of writing to both a file and a console, a filter  may be assigned to filter messages directed to the file, thereby limiting output to the console only. Thus, using filters, a finer granularity of log controller  output may be defined, using variables other than merely severity. As illustrated in , filters may be associated with particular log controllers  and\/or with specific output destinations  (e.g., specific log\/trace files). As mentioned above, filters may be associated with both controllers  and\/or output destinations  to further restrict or alter the output tracing and logging behavior. In one embodiment, multiple filters having different filtering criteria may be allocated to each controller  and\/or destination .","The Logging Sub-Class","As mentioned briefly above, in one embodiment, the logging operations performed by the logging controller  are associated with particular \u201ccategories\u201d which may identify, for example, semantical topics which correspond roughly to administration tasks or problem areas. Typical areas identified by categories may include databases, networking, security and auditing.","In one embodiment, categories are named according to the hierarchical structure known from file systems on the network. For example, referring to , all categories of log messages associated with the system  may be logically grouped into sub-categories, such as database  or networking , identified by the names \u201c\/System\/Database\u201d and \u201c\/System\/Network,\u201d respectively. In this example, the category \u201c\/System\u201d  is the parent of categories \u201c\/System\/Database\u201d and \u201c\/System\/Network,\u201d and therefore passes on its settings (e.g., severity thresholds) and attached output destinations  to both of them. One benefit to this arrangement is that if all log messages are to be written to the same log file, the log file does not necessary need to be directly associated with both the database  and networking  categories, but simply to the common parent, System .","The Tracing Sub-Class","In one embodiment, in contrast to logging operations which are associated with categories, tracing operations performed by the tracing controllers  are associated with particular program code locations, identified by particular package, class, or function names. For example, in a Java environment, locations may be named according to the hierarchical structure known from Java packages.","In the example illustrated in , the location \u201ccom.sapmarkets\u201d  is logically grouped into technology and application sub-locations, identified by the controller names \u201ccom.sapmarkets.technology\u201d  and \u201ccom.sapmarkets.application\u201d , respectively. In this example, the location \u201ccom.sapmarkets\u201d  is the parent of locations \u201ccom.sapmarkets.technology\u201d  and \u201ccom.sapmarkets.application\u201d ,\u201d and therefore passes on its settings (e.g., severity thresholds) and attached output destinations  to both of them. As with the logging controllers, a benefit to this configuration is that if all trace messages are to be written to the same trace file, the trace file does not need to be directly associated with both the technology and application locations, but simply to the common parent, \u201ccom.sapmarkets\u201d .","As an additional example, to write all the messages from monitoring classes into a single log, the location named \u201ccom.sap.tc.monitoring\u201d may be called. All the messages from technology components (TC) may be directed to a common trace destination by simply assigning that destination to the parent location \u201ccom.sap.tc.\u201d The trace output destination is then passed on to all child locations (e.g., to \u201ccom.sap.tcmonitoring\u201d). Moreover, it is possible to include method signatures in location names. For example, \u201ccom.sap.tc.monitoring. Node.announce (java.lang.Object)\u201d is a location for a method named \u201cannounce\u201d with an argument of the class Object. In this way, overloaded methods can be identified and, by adding another suffix to such a name, even classes local to them. In a Java environment, the hierarchical components of the name should be compliant with Java identifier syntax, but illegal characters may be used, bracketing a component with single quotes (e.g., com.sap.\u2018great.technology\u2019).","In one embodiment, all locations are accessed via a defined static method \u201cLocation.getLocation.\u201d In one embodiment, the static method need not be called each time a trace message is to be generated. Instead, each class defines static fields to hold all the needed locations, and uses these fields to call logging\/tracing methods.","Controlling Severity Settings Using Inheritance","In one embodiment, the various controllers  are arranged into logical hierarchies in which each child controller inherits properties from its parent (e.g., its severity settings and its output destinations ). The effective severity of a child log controller is calculated from minimum and maximum defined severities, as well as the effective severity of its parent. The minimum severity setting specifies the minimum severity value for the trace\/log messages to be output via the child log controller. That is, if the effective severity of the parent log controller is higher than the minimum severity of the child, then the child inherits the parent's effective severity; otherwise the effective severity is set to the minimum severity.","By contrast, the maximum severity represents the severity that trace\/log messages must have for output to be guaranteed (notwithstanding intervention from filters). For example, if the effective severity of the parent log controller is lower than the maximum severity of the child then the child inherits the parent's effective severity; otherwise the child's effective severity is set to the maximum severity. This implies that if both minimum and maximum severity are set to the same value, the effective severity is set to that value regardless of the effective severity of the parent. Such a setting is therefore called dominant. For root log\/trace controllers the setting must be dominant, as separate minimum and maximum values are meaningless without a parent to inherit from.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 4","b":["202","302","202","301","302","302"]},"Similarly, tracing controller \u201ccom.sapmarkets.technology.monitoring\u201d , is programmed with a minimum severity of INFO and a maximum severity of ERROR. Accordingly, because the effective severity of its parent controller  (WARNING) is higher than its minimum severity, INFO, and lower than its maximum severity, ERROR, tracing controller  inherits its parent's effective severity of WARNING.","By contrast, tracing controller \u201ccom.sapmarkets.application\u201d  is manually configured with an effective severity of PATH, which overrides the effective severity of INFO inherited from its parent tracing controller \u201ccom.sapmarkets\u201d .","It should be noted, of course, that the specific details set forth above are used merely for the purpose of illustration. The underlying principles of the invention are not limited to any particular logging\/tracing controller hierarchy or any particular severity settings.","Output Formatters","As illustrated in , one embodiment of the invention includes a plurality of log\/trace formatters  to format the results of the log\/trace controllers , for example, based on the specified destination to which the controller output is directed. Three formatters are illustrated in : a list formatter , a human-readable formatter , and an XML formatter .","In one embodiment, the list formatter  translates the output of the log\/trace controllers into a format which may be further processed by an application, e.g. a log viewer, instead of being read directly by an end-user. In one embodiment, the format generated by the list formatter comprises hash-separated fields which may be readily interpreted by the other applications. For example: #1.3#10.48.27.165:4A5AB2:E99D42D4F4:-8000#Mon Jan 01 22:00:00PDT2001#com.sapmarkets.FooClass#com.sapmarkets.FooClas.fooMethod#main##0#0#Fatal##Plain###A sample fatal message#.","As its name suggests, the human readable formatter  translates the output of the log\/trace controllers into a human-readable format (e.g., ASCII text). As such, this formatted may be used when users\/administrators need to quickly understand what is occurring within a network or application. For example, the human readable formatter  may provide its formatted output to a trace\/log console for immediate viewing.","The markup language formatter  translates the output of the log\/trace controllers into a particular markup language such as the Extensible Markup Language (\u201cXML\u201d) format which may be interpreted by any application that includes support for XML (e.g., Microsoft Word).","Relationship Between Logging and Tracing Operations","Messages associated with a particular category may also be associated with (i.e., may be written with respect to) a source code area, or location, such as a component, a package, a class or a method. As the location may be associated with a particular tracing controller, the same method call can write a message simultaneously to, for example, the database log as well as to the location trace responsible for that part of the source code (i.e., save for the location having an appropriate severity setting). In one embodiment of the invention, both the trace message and the log message are generated with the same identification in order to facilitate cross-referencing among location and category logs. At the same time, the location provides a location description, that is a string, to the log message written to the database log. This may become tedious when a class implements a large number of methods. Therefore, as described in greater detail below, for each logging\/tracing method there is a version which takes in an additional parameter, referred to herein as \u201csubloc,\u201d which is a string that serves as suffix to the name of the used location, thus providing the option to give a complete location name whilst avoiding clutter.","For the purpose of illustration, one particular tracing\/logging example will now be described with respect to the method outlined in . The example describes how tracing\/logging may be enabled and configured within the architecture illustrated in . Briefly, the method is comprised of: identifying the source code area for which trace\/log output is desired (); assigning severity levels to the source code (); specifying the output destination for the logs\/traces (); and inserting messages with corresponding severity levels ().","The following sample code will be used for the example:",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"package com.sap.fooPackage;"]},{"entry":[{},"import com.sap.tc.logging.*;"]},{"entry":[{},"\u2003public class Node {"]},{"entry":[{},"\u2003\u2003private static final Location loc ="]},{"entry":[{},"\u2003Location.getLocation(\u201ccom.sap.fooPackage.Node\u201d);"]},{"entry":[{},"\u2003\u2003public void announce(Object o) {"]},{"entry":[{},"\u2003\u2003\u2003\u2003String method = \u201cannounce(java.lang.Object)\u201d;"]},{"entry":[{},"\u2003\u2003\u2003\u2002\u2009loc.entering(method);"]},{"entry":[{},"\u2003\u2003\u2003\u2003try{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\/\/ do something. . ."]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2002\u2009loc.debugT(method, \u201cConnecting to ...\u201d);"]},{"entry":[{},"\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003catch (Exception e) {"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003loc.fatalT(method,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cError processing object {0}\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003new Object[ ] {o});"]},{"entry":[{},"\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003loc.exiting( );"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Method elements  and  are not shown at this point, but assuming the severity level is set to be Severity.ALL (accept all severity levels and output everything) and output has been formatted using a human-readable formatter (e.g., and sent to a console) the output may look like the following:\n\n","The following four sections will further explain each step illustrated in .","Identifying the Source Code Area ()","As described above, the tracing subclass and the logging subclass are subclasses of the controller class. The tracing subclass is sometimes referred to below as the \u201cLocation\u201d subclass and the logging subclass is sometimes referred to below as the \u201cCategory\u201d subclass. Recall that Location is the source area that generates trace messages. Typically, it corresponds to the source code structure, and can be attached to the level of component, package, class or method. Category is the source area that generates log messages, corresponding to a distinguished problem area, such as networking, system and database.","Although the naming of a Location and Category may be quite flexible, as a general rule, a valid hierarchical naming convention may be useful. A common naming practice for Location is to use the full path of Java package name (See, e.g., ).","For the purpose of this example, the following static methods are provided for each class for easy access to a Location or Category:",{"@attributes":{"id":"p-0052","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Location.getLocation(<name of the Location>);"]},{"entry":[{},"Category.getCategory(<name of the Category>);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Alternatively, instead of passing the name manually, for Location the class instance may be passed (java.lang.Object) or the class itself (java.lang.Class). In either case, the Location object is by default referring to the class level, while using the string argument (java.lang.String) provides flexibility in the definition (e.g., to also include the method name to explicitly control logging over methods individually).","Once identified, the source is ready to be configured to generate messages. In one embodiment, It is recommended that initially, the handle may be configured to be static to improve efficiency:","static final Location loc=Location.getLocation (this.getClass( ))","Assign Severity to Source ()","Recall that the severity levels employed in one embodiment of the invention are set forth in -. Thus, the following predetermined constants may be used: Severity.DEBUG, Severity.PATH, Severity.INFO, Severity. WARNING, Severity.ERROR, Severity.FATAL Severity.MAX, Severity.ALL and Severity.NONE.","The severity may be assigned to the specified source using the following method: loc.setEffectiveSeverity(Severity.INFO); . Using this configuration, any messages with severity lower than INFO will be discarded. Others will be directed to the destination. The concepts associated with hierarchical severity were described above with respect to . Because of the hierarchical naming features of location or category, significant amount of time may be saved by assigning severity levels to the parent of a plurality of children. The children will then automatically inherit the assigned severity as well.",{"@attributes":{"id":"p-0057","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"static final Location loc ="]},{"entry":[{},"Location.getLocation(com.sap.fooPackage);"]},{"entry":[{},"loc.setEffectiveSeverity(Severity.INFO);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In one embodiment, by default, the source object (assuming the ascendant has not been assigned a severity level yet) is assigned Severity.NONE. As such, a developer may freely enable the output methods in the source code, but the actual logging is not activated until it is explicitly \u201cswitched on\u201d when ready.","Specify Output Destination ()","An output destination such as a log\/trace file, a console, an output stream, etc, is assigned to each Location sub-controller or Category sub-controller. This can be accomplished via a method such as the following:\n\n","There may be instances in which it is desirable to assign multiple output destinations to a single sub-controller. In such a case, a message generated from the sub-controller will be sent to all assigned output destinations simultaneously (e.g., to both a console and a file). This may be accomplished using the following:",{"@attributes":{"id":"p-0061","num":"0064"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"loc.addLog(new ConsoleLog( ));"]},{"entry":[{},"loc.addLog(new FileLog(\u201cC:\\\\temp\\\\testOutput.log\u201d);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In one embodiment, as a default configuration, console output destinations  are assigned human-readable formatters  and file output destinations  are assigned list formatters . Of course, the default configurations are not required. For example, to switch to an XML Formatter for a file output, the following exemplary method may be called:",{"@attributes":{"id":"p-0063","num":"0066"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"loc.addLog(new FileLog(\u201cC:\\temp\\testOutput.log\u201d, new"]},{"entry":[{},"XMLFormatter( ));"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":{"@attributes":{"id":"ul0005-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":"<filelog>.setFormatter(new XMLFormatter( ));\n\nEnable Output Messages ()\n"}}}},"After the source is defined, the severity levels are assigned and the destination is properly specified, output statements may be inserted in appropriate places in the program code. For the sake of explanation, the output methods may be logically categorized into three groups. (1) typical message output with severity; (2) output denoting the flow of a program; and (3) master gate.","(1) Typical Message Output With Severity: The following table illustrates the format for a typical output message with severity, where the designated severity level is masked with \u201cxxxx.\u201d The \u201cT\u201d designates a typical message output.",{"@attributes":{"id":"p-0066","num":"0070"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Location","Category"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"xxxxT(String message)","xxxxT(Location loc, String message)"]},{"entry":[{},"xxxxT(String subloc, String","xxxxT(Location loc, String subloc,"]},{"entry":[{},"message)","String message)"]},{"entry":[{},"xxxxT(String message,","xxxxT(Location loc, String message,"]},{"entry":[{},"Object[ ] args)","Object[ ] args)"]},{"entry":[{},"xxxxT(String subloc, String","xxxxT(Location loc, String subloc,"]},{"entry":[{},"message, Object[ ] args)","String message, Object[ ] args)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"A pattern exists in method overloading which evolves around the core argument: message. The addition of subloc, args offers the flexibility for developers to log messages using the level of detail that they need. Understanding these arguments helps when selecting the heavily overloaded methods.","loc:","One difference in the API between Location and Category is an additional loc argument in Category output methods. As described above, log messages are typically written with respect to a source code area. This proves to be very helpful for logging analysis. By specifying the loc argument, a programmer may indicate that the message should be written as a trace message associated with the loc object. By properly configuring loc, logging can be just performed once and piped for both message types (i.e., logs & traces) simultaneously. This technique works for Location as well, and the API is available to specify the category argument. These techniques are explained in more detail below (section entitled \u201cRelationship Between location and Category).","subloc:","The subloc argument is treated as the method name of the source class that the message is generated from. This is optional, but with this argument included in the trace\/log, the picture when doing analysis will be much clearer, for example, because different arguments can be specified for overloaded methods).","message:","The actual message to be output is placed in argument message. A designation should be selected that meaningfully describes the situation\/problem.","args:","Array of additional arguments that are informative, e.g. dynamic information to be included in the message. In one embodiment, this is achieved by using java.text.MessageFormat API to resolve arguments.","Referring again to the code example set forth above, the following is an example working from the object Location:",{"@attributes":{"id":"p-0077","num":"0081"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"package com.sap.fooPackage;"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003import com.sap.tc.logging.*;"]},{"entry":[{},"\u2003\u2003public class Node {"]},{"entry":[{},"\u2003\u2003\u2003private static final Location loc ="]},{"entry":[{},"\u2003\u2003\u2009Location.getLocation(\u201ccom.sap.fooPackage.Node\u201d);"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003public void announce(Object o) {"]},{"entry":[{},"\u2003\u2003\u2003\u2003String method = \u201cannounce(java.lang.Object)\u201d;"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003try {"]},{"entry":[{},"\u2003\u2003\u2003\u2003\/\/ do something. . .eg. connecting to DB, perform"]},{"entry":[{},"\u2003\u2003certain actions"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003loc.debugT(method, \u201cConnecting to ... .\u201d);"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/\/minor error in writing something"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003loc.warningT(method,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cProblems in row {0} to {1}\u201c,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003new Object[ ] {row1, rowN});"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/\/finish successfully"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003loc.infoT(method, \u201cDB action done"]},{"entry":[{},"\u2003\u2003successfully\u201c);"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2009catch (Exception e) {"]},{"entry":[{},"\u2003\u2003\u2009}"]},{"entry":[{},"\u2003} \u2003\/\/ method announce"]},{"entry":[{},"} \u2003\/\/ class Node"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Potential output is as follows, assuming the human-readable formatter is used (e.g., to display on a console):",{"@attributes":{"id":"p-0079","num":"0083"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"May 3, 2001 6:54:18 PM"]},{"entry":[{},"com.sap.fooPackage.Node.announce [main] Debug:"]},{"entry":[{},"Connecting to ... ."]},{"entry":[{},"May 3, 2001 6:54:18 PM"]},{"entry":[{},"com.sap.fooPackage.Node.announce [main] Warning:"]},{"entry":[{},"Problems in row 15 to 18"]},{"entry":[{},"May 3, 2001 6:54:18 PM"]},{"entry":[{},"com.sap.fooPackage.Node.announce [main] Info: DB"]},{"entry":[{},"action done successfully"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The following is another example, working from the object Category:",{"@attributes":{"id":"p-0081","num":"0085"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"package com.sap.fooPackage;"]},{"entry":[{},"import com.sap.tc.logging.*;"]},{"entry":[{},"public class Node {"]},{"entry":[{},"\u2003private static final Location loc ="]},{"entry":[{},"Location.getLocation(\u201ccom.sap.fooPackage.Node\u201d);"]},{"entry":[{},"\u2003private static final Category cat ="]},{"entry":[{},"Category.getCategory(\u201c\/System\/Database\u201d);"]},{"entry":[{},"\u2003public void store( ) {"]},{"entry":[{},"\u2003\u2003try {"]},{"entry":[{},"\u2003\u2003\u2002\/\/ Write object data to database . . ."]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003\u2003catch (FailedRegistrationException e) {"]},{"entry":[{},"\u2003\u2003\u2003cat.errorT(loc,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cstore( )\u201d,"]},{"entry":[{},"\u2003\u2003\u2009\u201cError storing node {0} in database.\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003new Object[ ] {this});"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003} \u2003\/\/ method store"]},{"entry":[{},"\u2002} \u2003\/\/ class Node"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Note that the output will be identical to the previous example, assuming the default setting is used (using a human-readable formatter).","(2) Output Denoting the Flow of a Program: This feature is typically only used for Location sub-controllers. Tracing the flow of a program is comprised of several components: (a) Entering, (b) Exiting, (c) Throwing, and (d) Assertion.","(a) Entering: Outputs a default message (e.g., \u201cEntering Method\u201d with Path severity) indicating that it is entering a source block:",{"@attributes":{"id":"p-0085","num":"0089"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Method","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Entering( )","Entering a source block in"]},{"entry":[{},"general"]},{"entry":["Entering(String subloc)","Specify the method name"]},{"entry":[{},"in subloc"]},{"entry":["Entering(Object[ ] args)","A general source block"]},{"entry":[{},"with arguments:"]},{"entry":[{},"\u201cEntering method with"]},{"entry":[{},"<args>\u201d"]},{"entry":["Entering(String subloc, Object[ ] args)","Same as above but with"]},{"entry":[{},"specific method name"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"(b) Exiting: Output a default message (e.g., \u201cExiting Method\u201d with Path severity) indicating that it is leaving a source block:",{"@attributes":{"id":"p-0087","num":"0091"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Method","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Exiting( )","Exiting a source block in"]},{"entry":[{},{},"general. As long as the"]},{"entry":[{},{},"methodname (subloc) is"]},{"entry":[{},{},"specified in \u2018entering\u2019, it is"]},{"entry":[{},{},"not necessary to provide"]},{"entry":[{},{},"subloc as argument here"]},{"entry":[{},{},"anymore. See the result of"]},{"entry":[{},{},"the following sample code."]},{"entry":[{},"Exiting(String subloc)","Specify the method name"]},{"entry":[{},"\/\/DEPRECATED","in subloc"]},{"entry":[{},"Exiting(Object res)","A general source block"]},{"entry":[{},{},"with result: \u201cExiting method"]},{"entry":[{},{},"with <res>\u201d"]},{"entry":[{},"Exiting(String subloc, Object res)","Same as above but with"]},{"entry":[{},{},"specific method name"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"To reiterate, refer to the sample code with method announce(Object o):",{"@attributes":{"id":"p-0089","num":"0093"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public void announce(Object o) {"]},{"entry":[{},"\u2003String method = \u201cannounce(java.lang.Object)\u201d;"]},{"entry":[{},"\u2003\u2009loc.entering(method);"]},{"entry":[{},"\u2003\u2009try {"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003catch (Exception e) {"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003\u2009loc.exiting( );"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Potential output, assuming the simplest case with ConsoleLog and default TraceFormatter:\n\n","(c) Throwing: Warning message (\u201cThrowing . . . \u201d), indicating that the source block is about to throw an exception:",{"@attributes":{"id":"p-0092","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Method","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"throwing(Throwable exc)","About to throw the exception exc"]},{"entry":[{},"Throwing(String subloc,","Same as above but with specific"]},{"entry":[{},"Throwable exc)","method name"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"(d) Assertion: used to test a condition and output an error message, normally with the assertion included (e.g., \u201cAssertion failed: <assertion test>\u201d) when the evaluation is false:",{"@attributes":{"id":"p-0094","num":"0100"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Method","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Assertion(Boolean assertion,","Evaluate the assertion, if false,"]},{"entry":[{},"String desc)","print desc with the default"]},{"entry":[{},{},"message: \u201cAssertion failed:"]},{"entry":[{},{},"<desc>\u201d where <desc> is the"]},{"entry":[{},{},"assertion test itself, e.g. 5 > 3"]},{"entry":[{},"Assertion(String subloc,","Same as above but with specific"]},{"entry":[{},"Boolean assertion, String desc)","method name"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"To reiterate, refer to the sample code with method announce(Object o):",{"@attributes":{"id":"p-0096","num":"0102"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public void announce(Object o) {"]},{"entry":[{},"String method = \u201cannounce(java.lang.Object)\u201d;"]},{"entry":[{},"\u2003\u2003loc.assertion(method, 5<3, \u2003\u201cStupid comparison\u201d);"]},{"entry":[{},"\u2003\u2003try {"]},{"entry":[{},"\u2003\u2003\u2003\u2003}"]},{"entry":[{},"catch (Exception e) {"]},{"entry":[{},"\u2003\u2002loc.throwing(method, e);"]},{"entry":[{},"\u2003\u2003\u2003\u2002}"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The following is the potential output, again assuming a human-readable log formatter:",{"@attributes":{"id":"p-0098","num":"0104"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003May 3, 2001 6:54:18 PM"]},{"entry":[{},"com.sap.fooPackage.Node.announce [main]"]},{"entry":[{},"Error: Assertion failed: Stupid comparison"]},{"entry":[{},"\u2003\u2003May 3, 2001 6:54:18 PM"]},{"entry":[{},"com.sap.fooPackage.Node.announce [main]"]},{"entry":[{},"Warning: Throwing java.io.FileNotFoundException:"]},{"entry":[{},"\u2003\u2003C:\\Not_Exist\\zzzzz.log (The system cannot find the"]},{"entry":[{},"path specified)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"(3) Master Gate:","In one embodiment, all of the other output methods (with severity) are ultimately routed through a method, referred to herein as Log T, to actually perform any logging\/tracing.","Location: These are similar to the first type of method, xxxxxT( ), but only with an additional severity argument at the beginning:",{"@attributes":{"id":"p-0102","num":"0108"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"logT(int severity, String message)"]},{"entry":[{},"logT(int severity, String subloc, String message)"]},{"entry":[{},"logT(int severity, String message, Object[ ] args)"]},{"entry":[{},"logT(int severity, String subloc, String message,"]},{"entry":[{},"Object[ ] args)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Category: (Similar Scenario to Location):",{"@attributes":{"id":"p-0104","num":"0110"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003logT(int severity, Location loc, String message)"]},{"entry":[{},"\u2003\u2003logT(int severity, Location loc, String subloc,"]},{"entry":[{},"String message)"]},{"entry":[{},"\u2003\u2003logT(int severity, Location loc, String message,"]},{"entry":[{},"Object[ ] args)"]},{"entry":[{},"\u2003\u2003logT(int severity, Location loc, String subloc,"]},{"entry":[{},"String message,"]},{"entry":[{},"\u2003\u2003Object[ ] args)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Often, it is useful to put several related messages together into one context. A typical example would be all trace messages stemming from one method call. In case of a database log, another example would be the messages representing the different database operations together forming one logical transaction. A formatter or log viewer can utilize this context information to visualize relations using, for example, indentation or tree controls. Groups are one mechanism to express such context information.","In one embodiment, a group is established via a call to openGroup. This call is based on the same conditions as output calls, that is, the group is opened depending on a severity and optional categories. After generating output the group is ended via a call to closeGroup. Note that there should be a balancing call of closeGroup for any call of openGroup. Even if an openGroup call did not open the group, closeGroup is matched with the call to openGroup. In case of success, in between the two calls, all output calls are assigned to the group. Messages may even be generated with the same condition as the group via the groupT and group output calls. These calls are also used to emit the opening and closing messages of a group, which are the first such messages emitted after the openGroup and closeGroup calls, respectively.","In the above method, for example, the following piece of code could be written. The message right after the openGroup call is the opening message of the group, the message after closeGroup its closing message. Note that the groupT calls do not need a severity, a location or a method name, as these are fetched from the active group.",{"@attributes":{"id":"p-0108","num":"0114"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"cat.openGroup(Severity.INFO,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003loc,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003method);"]},{"entry":[{},"cat.groupT(\u201cStart storing tree with root {0}.\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003new Object[ ] {this});"]},{"entry":[{},". . ."]},{"entry":[{},"cat.groupT(\u201cStoring subnode {0}.\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003new Object[ ] {node});"]},{"entry":[{},". . ."]},{"entry":[{},"cat.closeGroup( );"]},{"entry":[{},"cat.groupT(\u201cFinished storing tree.\u201d);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"It is a common practice to look at log messages and trace messages together when performing a diagnosis. A correlation between a problematic logical area and the source code location that generates the problem is highly desirable. For example, if an error occurs when closing the database, the actual location of the source code (from which class, which method, with what argument(s)) is reported as well.","An embodiment of the invention simplifies the generation of both log and trace messages in parallel, with the use of category and location. This will be illustrated with the following example. For simplicity, the example only shows the attachment of a location to a category (as used herein, a location associated with the category is referred to as a \u201crelative\u201d of the category). However, the same general principles apply to the attachment of a category to a location.","More than one category may be associated with a location at each logging. However, in one embodiment, only one location is assigned for one category. Refer to the output method APIs of each class:",{"@attributes":{"id":"p-0112","num":"0118"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Package com.sap.fooPackage;"]},{"entry":[{},"import com.sap.tc.logging.*;"]},{"entry":[{},"public class Node {"]},{"entry":[{},"\u2003private static final Location loc ="]},{"entry":[{},"Location.getLocation(\u201ccom.sap.fooPackage.Node\u201d);"]},{"entry":[{},"\u2003private static final Category objMgmt ="]},{"entry":[{},"Category.getCategory(\u201c\/Objects\/Management\u201d);"]},{"entry":[{},"\u2003public void announce(Object o) {"]},{"entry":[{},"\u2003\u2003final String method ="]},{"entry":[{},"\u201cannounce(java.lang.Object)\u201d;"]},{"entry":[{},"\u2003\u2003loc.entering(method,\u2009new\u2009Object[\u2009]\u2009{o});"]},{"entry":[{},"\u2003\u2003try {"]},{"entry":[{},"\u2003\u2003\u2003\/\/ Register object ..."]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003\u2003catch (RegistrationException e) {"]},{"entry":[{},"\u2003\u2003objMgmt.errorT(loc,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003method,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cError\u2009registering\u2009object\u2009{0}.\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003new\u2009Object[\u2009]\u2009{o});"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003loc.exiting(\u2009);"]},{"entry":[{},"} \u2003\/\/ method announce"]},{"entry":[{},"\u2002} \/\/ class Node"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In order to output all the trace and log messages highlighted in the example above, the following severity setting may be employed:",{"@attributes":{"id":"p-0114","num":"0120"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"loc.setEffectiveSeverity(Severity.PATH);"]},{"entry":[{},"objMgmt.setEffectiveSeverity(Severity.ERROR);"]},{"entry":[{},"conLog = new ConsoleLog( );"]},{"entry":[{},"loc.addLog(conLog);"]},{"entry":[{},"objMgmt.addLog(conLog);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"With respect to the output line from the category \u2018objMgmt\u2019, it will output two messages simultaneously: one log message and one trace message. They will have the same message id for cross-referencing each other. This greatly simplifies the analysis.","If the location has stricter severity setting (e.g. default Severity.NONE) all trace output may be suppressed, including the one from the category. In other words, that output line will NOT produce two messages simultaneously, but only the log message.","More advanced configuration may be employed regarding the correlated category and location source objects. For example, consider Category \u201c\/Objects\/Management\u201d where the only focus may be some extreme situations, that is, messages with severity FATAL. Several source code locations (\u2018com.sapmarkets.xxx.a\u2019, \u2018com.sapmarkets.xxx.b\u2019, . . . ) can result in a fatal condition in this logical area, and for certain reasons, one of them may be of particular interest (e.g. \u2018com.sapmarkets.xxx.a\u2019). As such, it would beneficial to have the ability to generate additional output messages, including all with severity INFO or above, related with this location only, while maintaining FATAL for the rest.","Embodiments of the invention may include various steps as set forth above. The steps may be embodied in machine-executable instructions which cause a general-purpose or special-purpose processor to perform certain steps. Alternatively, these steps may be performed by specific hardware components that contain hardwired logic for performing the steps, or by any combination of programmed computer components and custom hardware components.","Elements of the present invention may also be provided as a machine-readable medium for storing the machine-executable instructions. The machine-readable medium may include, but is not limited to, flash memory, optical disks, CD-ROMs, DVD ROMS, RAMs, EPROMs, EEPROMs, magnetic or optical cards, propagation media or other type of machine-readable media suitable for storing electronic instructions. For example, the present invention may be downloaded as a computer program which may be transferred from a remote computer (e.g., a server) to a requesting computer (e.g., a client) by way of data signals embodied in a carrier wave or other propagation medium via a communication link (e.g., a modem or network connection).","Throughout the foregoing description, for the purposes of explanation, numerous specific details were set forth in order to provide a thorough understanding of the invention. It will be apparent, however, to one skilled in the art that the invention may be practiced without some of these specific details. For example, although the embodiments of the invention described above are implemented within a Java programming environment, various alternate environments may be employed while still complying with the underlying principles of the invention.","Accordingly, the scope and spirit of the invention should be judged in terms of the claims which follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A better understanding of the present invention can be obtained from the following detailed description in conjunction with the following drawings, in which:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 6","i":["a","b "]}]},"DETDESC":[{},{}]}
