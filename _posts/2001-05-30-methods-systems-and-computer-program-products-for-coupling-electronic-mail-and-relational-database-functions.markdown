---
title: Methods, systems and computer program products for coupling electronic mail and relational database functions
abstract: Methods, systems and computer program products provide for generating an electronic mail message by automatically generating an electronic mail message responsive to an action being performed on a database entry. In particular embodiments of the present invention, performance of an action on the entry in the database is detected and a user defined function (UDF) of the database triggered which provides access to an electronic mail system. The UDF is triggered in response to the detection of performance of the action on the entry. The electronic mail system is accessed utilizing the UDF to generate the electronic mail message responsive to the UDF being triggered. Thus, an electronic mail message may be automatically generated via triggers and user defined functions which may be provided by the programmatic use of layering and abstraction.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06886173&OS=06886173&RS=06886173
owner: International Business Machines Corporation
number: 06886173
owner_city: Armonk
owner_country: US
publication_date: 20010530
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates to electronic mail (e-mail) and, more particulary, to the generation of e-mail.","In electronic business (e-business), where typically several companies may provide similar goods or services, loyalty of customers may be important in the success of a business. Such loyalty may, for example, be gained by being responsive to customers and by maintaining contact with customers on an ongoing basis. On tool for customer outreach and relationship building is electronic mail (e-mail). In fact, customer feedback (such as registration thank-you notes, target marketing offers, and order status updates) can become a positive market differentiator.","In such an environment, speed, efficiency, and responsiveness may be important to success. Therefore, e-mail outreach to customers should be accomplished in a timely manner and, preferably, as efficiently as possible.","Accordingly, the quality of the business process implementation can be just as important as the content of the e-mail message itself. Thus, a need exists for efficient e-mail message generation suitable for use, for example, in e-business.","Embodiments of the present invention provide methods, systems and computer program products for generating an electronic mail message by automatically generating an electronic mail message responsive to an action being performed on a database entry. In particular embodiments of the present invention, performance of an action on the entry in the database is detected and a user defined function (UDF) of the database triggered which provides access to an electronic mail system. The UDF is triggered in response to the detection of performance of the action on the entry. The electronic mail system is accessed utilizing the UDF to generate the electronic mail message responsive to the UDF being triggered.","In further embodiments of the present invention, detecting performance of the action and triggering a user defined function may be provided by establishing a database trigger associated with entries in the database which activates the UDF upon an action being performed on the entries associated with the trigger. Furthermore, the UDF may obtain electronic mail information associated with the entry in the database and provide the electronic mail information to an application program interface for the electronic mail system. Such an application program interface may provide abstract layering for the underlying electronic mail system. Also, the UDF may have a first class which obtains the electronic mail information and a second class which provides the electronic mail message information to the electronic mail system.","In particular embodiments of the present invention, the application program interface may be the JavaMail Application Program Interface. Furthermore, the action performed on the database entry which causes the trigger to be activated may be an insertion of the entry into the database. In certain embodiments of the present invention, the database is a DB2 database. Also, the electronic mail system may execute on a data processing system remote from a data processing system on which the database executes.","As will further be appreciated by those of skill in the art, while described above primarily with reference to method aspects, the present invention may be embodied as methods, apparatus\/systems and\/or computer program products.","The present invention now will be described more fully hereinafter with reference to the accompanying drawings, in which illustrative embodiments of the invention are shown. This invention may, however, be embodied in many different forms and should not be construed as limited to the embodiments set forth herein; rather, these embodiments are provided so that this disclosure will be thorough and complete, and will fully convey the scope of the invention to those skilled in the art.","As will be appreciated by one of skill in the art, the present invention may be embodied as a method, data processing system, or computer program product. Accordingly, the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment combining software and hardware aspects all generally referred to herein as a \u201ccircuit\u201d or \u201cmodule.\u201d Furthermore, the present invention may take the form of a computer program product on a computer-usable storage medium having computer-usable program code embodied in the medium. Any suitable computer readable medium may be utilized including hard disks, CD-ROMs, optical storage devices, a transmission media such as those supporting the Internet or an intranet, or magnetic storage devices.","Computer program code for carrying out operations of the present invention may be written in an object oriented programming language such as Java\u00ae, Smalltalk or C++. However, the computer program code for carrying out operations of the present invention may also be written in conventional procedural programming languages, such as the \u201cC\u201d programming language. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer. In the latter scenario, the remote computer may be connected to the user's computer through a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","The present invention is described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer-readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable memory produce an article of manufacture including instruction means which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","Various embodiments of the present invention will now be described with reference to the figures.  illustrates a system for e-mail generation according to embodiments of the present invention. As seen in , a database server  includes a database  and a user defined function (UDF)  which provides abstract layering for underlying electronic mail services, such as the e-mails service  provided by the e-mail server . When input is received by the database  which causes an action to be performed on an entry in the database , a database trigger of the database  invokes the e-mail user defined function . The user defined function  instructs the e-mail service  to send an e-mail message as a result of the action on the entry in the database .","As described above, embodiments of the present invention may use a database UDF to provide automatic generation of e-mails. In a relational database, UDFs can help streamline e-business operations. UDFs may facilitate close integration of object\/relational database system function and e-business processes. With UDFs, processes may be closely intergrated, data integrity may be ensured, and\/or costly application programming and reprogramming may be avoided. In addition, UDFs and other elements of server-side logic (such as stored procedures) may minimize the amount of network traffic necessary to accomplish a piece of work, resulting in higher performance.","While embodiments of the present invention are described herein with reference to , as will be appreciated by those of skill in the art in light of the present disclosure, the present invention may be utilized in other configurations. For example, while the e-mail server  and database server  are illustrated as separate data processing systems in , they could be combined onto a single data processing system. Furthermore, multiple data processing systems could be provided for either the database server  and\/or the e-mail server . Accordingly, embodiments of the present invention should not be construed as limited to the configuration illustrated in  as the present invention encompasses any configuration capable of carrying out the operations described herein.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2","b":["230","230","232","234","236","238","230","244","246","238","246","230"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 3","b":["238","236","348","238","236","230","236"]},"As shown in , the memory  may include several categories of software and data used in the data processing system : the operating system ; the application programs ; the input\/output (I\/O) device drivers ; and the data . As will be appreciated by those of skill in the art, the operating system  may be any operating system suitable for use with a data processing system, such as OS\/2, AIX or System390 from International Business Machines Corporation, Armonk, N.Y., Windows95, Windows98 or Windows2000 from Microsoft Corporation, Redmond, Wash., Unix or Linux configured to support an TCP\/IP-based protocol connection. The I\/O device drivers  typically include software routines accessed through the operating system  by the application programs  to communicate with devices such as the I\/O data port(s) , the data storage  and certain memory  components. The application programs  are illustrative of the programs that implement the various features of the data processing system  and preferably include at least one application which supports operations according to embodiments of the present invention. Finally, the data  represents the static and dynamic data used by the application programs , the operating system , the I\/O device drivers , and other software programs that may reside in the memory .","As is further seen in , the application programs  may include a database with e-mail UDF . The database with e-mail UDF  may carry out the operations described herein for generation of e-mails in response to an action being performed on an entry in the database. The data portion  of memory , as shown in the embodiments of , may include database tables .","While the present invention is illustrated, for example, with reference to a particular configuration in , as will be appreciated by those of skill in the art, other configurations may also be utilized while still benefitting from the teachings of the present invention. Thus, the present invention should not be construed as limited to the configuration of  but is intended to encompass any configuration capable of carrying out the operations described herein.","Operations according to embodiments of the present invention, will now be described with reference to the exemplary network diagram of FIG.  and the flowcharts of . As seen in , the database  receives input requesting performance of an action on a database entry (block ). Such an action may, for example, be creation of an entry (e.g. insertion of a row in a database table), deletion of an entry or modification of an entry. Performance of the action on the database entry causes a database trigger to invoke the e-mail user defined function (UDF)  (block ). The UDF  obtains information about the e-mail message to generate, such as the recipient, message content and the like, which are associated with the entry on which the action was performed and\/or with the action performed (block ). The UDF  sends the e-mail information to the e-mail service  to cause the e-mail message to be sent (block ).",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 5","FIG. 5"]},"In the present example, the JavaMail application programming interface (API) from Sun Microsystems Inc., provides a \u201cwrapper,\u201d or abstract layering, for underlying mail programs and protocols. This abstract layer declares classes, interfaces, and abstract methods to support the mail handling functions that are typically provided by mail systems. Part of this abstract layering of mail system functions is implemented using Internet standards. A wrapper may allow changes to be made without altering the underlying program. Instead of rewriting or modifying the underlying program, Java programming code may be provided that \u201cwrappers\u201d the function. By using Java Mail and the Java Application Framework (JAF), the existing mail infrastructure may be layered on top of so that the mail programs themselves need not be changed. If Sendmail changes or falls out of fashion, but the underlying protocols stay the same, the program should still work. If the message the UDF sends requires changing, the changes are made to the UDF, not the underlying mail program. In fact, a future maintenance programmer doesn't even have to fully understand the underlying mail program, only the Java wrapper.","To provide portability, the UDF may be written in Java, however, other programming languages may be used. In the present example, the Java UDF uses Sun's JavaMail 1.1.3 API and JAF v1.0.1. JavaMail makes the calls to the underlying transport protocol (in the present example, SMTP running on a remote AIX machine) and provides a common API for managing e-mail. The Java UDF uses the JavaMail API to send messages. The JavaMail API also provides the capability to access message stores and to compose and send messages. To achieve this functionality, the JavaMail API provides the four abstract classes: transport, message, folder, and store. When the UDF in these examples sends mail, it uses the message and transport classes to access services in the implementation layer. In the particular exemplary embodiments, an IBM RS\/6000 machine provides the SMTP transport services.","The JAF specification is a data typing and registry technology that is a standardized extension to the Java platform. JAF extends the Java Development Kit (JDK) activation framework by encapsulating access to data and instantiating components that correspond to mail operations on the e-mail data. The Sun JavaMail API and JAF may provide levels of abstraction and enhanced portability.","Returning to , the insertion of a new row into a database table is detected (block ). A database trigger associated with the table calls the UDF stored in the database, passing it e-mail parameters, such as address of the recipient, subject, and message (block ). The UDF itself is composed of two classes, UDFSend.class and Sender.class. The UDFSend.class receives the e-mail parameters and provides them to the Sender.class. Sender.class makes the call to SMTP services running on a remote mail server (block ). Responsive to receiving the call from Sender.class, the mail server sends the message (block ).","These operations will now be described in detail for the present exemplary embodiments. Blocks  and  describe a database trigger being activated when a row is inserted into a database table. Triggers in relational database systems define a set of actions that are activated, or triggered, by DELETE, INSERT, or UPDATE operations on a specified table. Triggers can be used to enforce data integrity and transitional business rules or, as in this example, to invoke functions that perform tasks. The Java code sample in Listing 1 (below) creates a trigger named AC, which is activated after INSERT into the RTPI1103. E-mail table.",{"@attributes":{"id":"p-0036","num":"0035"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Listing 1: Defining the trigger."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Create the e-mailUDF Trigger"]},{"entry":[{},"public static void"]},{"entry":[{},"registerTrigger (Connection con) throws Exception"]},{"entry":[{},"{ try"]},{"entry":[{},"{ Statement registerStmt = con.createStatement ( );"]},{"entry":[{},"System.out.println (\u201c Registering Java trigger: AC\u201d);"]},{"entry":[{},"registerStmt.executeUpdate ("]},{"entry":[{},"\u201c CREATE TRIGGER RTPI103.AC \u201d +"]},{"entry":[{},"\u201c AFTER INSERT ON RTPI103.Email \u201d +"]},{"entry":[{},"\u201c REFERENCING NEW AS N_ROW \u201d +"]},{"entry":[{},"\u201c FOR EACH ROW MODE DB2SQL \u201d +"]},{"entry":[{},"\u201c BEGIN ATOMIC \u201d +"]},{"entry":[{},"\u201c VALUES (EmailUDF (N_ROW.RECEIVER,"]},{"entry":[{},"N_ROW.SUBJECT,"]},{"entry":[{},"N_ROW.MESSAGE) ); \u201d +"]},{"entry":[{},"\u201c END \u201d );"]},{"entry":[{},"} . . ."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"UDFs in relational database systems are often extensions or additions to existing functions. Different types of UDFs may be provided, including column, table, and scalar functions. Like most functions, UDFs return some value. For example, table functions return a table and column and scalar functions return single values. In the present example, scalar functions are utilized. The code in Listing 2 (below) registers the external scalar UDF with DB2. The first section of the create function block illustrates how to declare the input parameters as type VARCHAR and the return value as type INT. The external name declaration defines the name of the UDF as emailUDF and the Java class associated with it as UDFsend class. The definition block also illustrates how to declare that the UDF has external action (in other words, it causes an action outside of the database system).",{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Listing 2: Registering the external scalar UDF."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Register the UDFs"]},{"entry":[{},"public static void"]},{"entry":[{},"registerUDFs (Connection con) throws Exception"]},{"entry":[{},"{ try"]},{"entry":[{},"{ Statement registerStmt = con.createStatement ( );"]},{"entry":[{},"\/\/ scalar emailUDF"]},{"entry":[{},"System.out.println (\u201c Registering Java UDF: emailUDF\u201d);"]},{"entry":[{},"registerStmt.executeUpdate ("]},{"entry":[{},"\u201c CREATE FUNCTION emailUDF ( VARCHAR(200),"]},{"entry":[{},"VARCHAR(200),"]},{"entry":[{},"VARCHAR(700) ) \u201d +"]},{"entry":[{},"\u201c RETURNS int \u201d +"]},{"entry":[{},"\u201c EXTERNAL NAME \u2018UDFsend!emailUDF\u2019 \u201d+"]},{"entry":[{},"\u201c LANGUAGE java \u201d +"]},{"entry":[{},"\u201c PARAMETER STYLE JAVA \u201d +"]},{"entry":[{},"\u201c DETERMINISTIC \u201d +"]},{"entry":[{},"\u201c FENCED \u201d +"]},{"entry":[{},"\u201c NOT NULL CALL \u201d +"]},{"entry":[{},"\u201c NO SQL \u201d +"]},{"entry":[{},"\u201c EXTERNAL ACTION \u201d +"]},{"entry":[{},"\u201c SCRATCHPAD \u201d +"]},{"entry":[{},"\u201c FINAL CALL \u201d +"]},{"entry":[{},"\u201c ALLOW PARALLEL \u201d +"]},{"entry":[{},"\u201c NO DBINFO\u201d);"]},{"entry":[{},"registerStmt.close ( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"To use the JavaMail program and JAF with the UDF code, two classes are created: UDFSend.class and Sender.class. Using two separate classes may facilitate development and debugging. The UDFSend.class was called by the emailUDF registered in Listing 2. The UDFSend.class performs two main functions: It accepts input arguments, such as address, subject, and message, and passes them to the Sender.class. The Sender.class actually makes the calls to the mail handling functions residing on the remote RS\/6000 machines.","In the sample of the UDFSend.class code in Listing 3 (below), UDFSend extends UDF. In the present example, it takes the address, subject, and message strings as inputs and returns the string length of the message, which was used for program debugging. Within the try and catch block a new instance of Sender is created, passing it the URL of our remote mail server. While not all of the code associated with UDFSend.class is illustrated, the EmailSend() and Email To() methods map to the Sender.class code.",{"@attributes":{"id":"p-0041","num":"0040"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Listing 3: A sample of the UDFSend.class code."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UDFSend.class:"]},{"entry":[{},"class UDFsend extends UDF"]},{"entry":[{},"{ \/\/ the emailUDF UDF"]},{"entry":[{},"public void"]},{"entry":[{},"emailUDF(String inputAddr, String inputSubject,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"String inputmessage,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int outputStrLen) throws Exception"]},{"entry":[{},"{ try"]},{"entry":[{},"{ \/\/ set(4, inputmessage.length( ) );"]},{"entry":[{},"Sender smtp = new Sender(\u201cxxx.yyy.zzz.com\u201d);"]},{"entry":[{},"\/* EmailTo( ) *\/"]},{"entry":[{},"if ( !smtp.EmailTo(inputAddr) ) {"]},{"entry":[{},"\/\/System.out.println(\u201c EmailTo failed\u201d);"]},{"entry":[{},"System.exit(1);"]},{"entry":[{},"}"]},{"entry":[{},"\/* Call EmailSend( ) *\/"]},{"entry":[{},"if ( !smtp.EmailSend(inputmessage) ) {"]},{"entry":[{},"System.out.println(\u201cSend Message failed\u201d);"]},{"entry":[{},"System.exit(1);"]},{"entry":[{},"}"]},{"entry":[{},"\/\/ System.out.println(\u201cSender successful\u201d);"]},{"entry":[{},"\/\/System.exit(0);"]},{"entry":[{},"}"]},{"entry":[{},"catch (Exception e)"]},{"entry":[{},"{ throw e;"]},{"entry":[{},"}"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0042","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Listing 4: Two methods in Sender.class."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Sender.class:"]},{"entry":[{},"class Sender { . . ."]},{"entry":[{},"\/\/ Host String containing the"]},{"entry":[{},"\/\/ address of the smtp mail host."]},{"entry":[{},"Sender(String host) {"]},{"entry":[{},"props = new Properties( );"]},{"entry":[{},"props.put(\u201cmail.smtp.host\u201d, host);"]},{"entry":[{},"session = Session.getDefaultInstance(props, null);"]},{"entry":[{},"session.setDebug(debug);"]},{"entry":[{},"message = new MimeMessage(session);"]},{"entry":[{},"}"]},{"entry":[{},"\/\/"]},{"entry":[{},"public boolean EmailTo(String emailto) {"]},{"entry":[{},"boolto=true;"]},{"entry":[{},"try {"]},{"entry":[{},"message.addRecipient(Message.RecipientType.TO,"]},{"entry":[{},"new InternetAddress(emailto));"]},{"entry":[{},"} catch (MessagingException mex) {"]},{"entry":[{},"return false;"]},{"entry":[{},"}"]},{"entry":[{},"return true;"]},{"entry":[{},"};"]},{"entry":[{},"\/\/"]},{"entry":[{},"public boolean EmailSend(String messageText) {"]},{"entry":[{},"if ( !boolto ) return false;"]},{"entry":[{},"if ( !boolfrom ) return false;"]},{"entry":[{},"if ( !boolsubject ) return false;"]},{"entry":[{},"try"]},{"entry":[{},"message.setSentDate(new Date( ));"]},{"entry":[{},"message.setText(messageText.toString( ));"]},{"entry":[{},"Transport.send(message);"]},{"entry":[{},"} catch (MessagingException mex) {"]},{"entry":[{},"return false;"]},{"entry":[{},"}"]},{"entry":[{},"return true; }"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The flowcharts and block diagrams of  illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products for e-mail generation according to various embodiments of the present invention. In this regard, each block in the flow charts or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the blocks may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be understood that each block of the block diagrams and\/or flowchart illustrations, and combinations of blocks in the block diagrams and\/or flowchart illustrations, can be implemented by special purpose hardware-based systems which perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","In the drawings and specification, there have been disclosed typical illustrative embodiments of the invention and, although specific terms are employed, they are used in a generic and descriptive sense only and not for purposes of limitation, the scope of the invention being set forth in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
