---
title: Accessible role and state information in HTML documents
abstract: Accessible role and state information may be included in hypertext markup language documents by encoding an accessibility definition into a class attribute. The accessibility definition corresponds with an object of a hypertext markup language document and comprises role information and state information if state information is applicable to the corresponding role information. A script is associated with the hypertext markup language document and is configured for parsing at least a portion of the hypertext markup language document to identify the accessibility definition. The script further maps the role information and the state information in the accessibility definition to corresponding namespaced role and state attributes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07895570&OS=07895570&RS=07895570
owner: International Business Machines Corporation
number: 07895570
owner_city: Armonk
owner_country: US
publication_date: 20051222
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates in general to hypertext markup language documents, and more particularly, to systems and methods for including accessible metadata, such as role and state information, in conventional hypertext markup language documents.","Hypertext Markup Language (HTML) is derived from a subset of the Standard Generalized Mark-Up Language (SGML) and defines the authoring language used to create HTML documents. A web-browsing software program executed on a computing device allows a computer user to access and interact with HTML documents over the World Wide Web. To promote a more interactive experience, HTML documents may include dynamic objects such as drop-down menus, tree views, checkboxes, and other graphical user interface components, which are designated by role information and optionally state information.","Role information is typically predefined and characterizes the function of a particular object. For example, a role may comprise a checkbox, a menu, a button, a window frame, or other desktop component. State information is associated with a given role and defines a current condition of that role. For example, a dynamic object implementing the role of a checkbox may have an associated state of checked or un-checked; an object implementing the role of a menu may have a state of expanded or collapsed, visible or hidden, etc. Thus, the set of valid states from which a given state may be specified for an associated object often depends on the corresponding role.","Some objects, such as checkboxes, are directly supported by the HTML specification. However, many desirable objects such as menus that dynamically change in response to user interaction are not directly supported in native HTML. In cases where desired objects are not supported directly in HTML, developers of web-based applications often define unique objects by utilizing HTML elements and by programming the desired behavior of such objects in a client-side scripting language.","According to one aspect of the present invention, accessible role and state information may be included in hypertext markup language documents by encoding an accessibility definition into a class attribute. The accessibility definition corresponds with an object of a hypertext markup language document and comprises role information and state information if state information is applicable to the corresponding role information. A script is associated with the hypertext markup language document and is configured for parsing at least a portion of the hypertext markup language document to identify the accessibility definition. The script further maps the role information and the state information in the accessibility definition to corresponding namespaced role and state attributes.","The accessibility definition may be encoded into a class attribute so as to define an accessibility data structure. The accessibility data structure comprises an accessibility header, the role information, and the state information, if applicable to the corresponding role information. The accessibility header uniquely identifies its associated class attribute as containing the accessibility data structure. The role information corresponds to a role or function of the associated object of the document and state information, where provided, corresponds to the current status of the associated role information.","The class attribute may further contain class information that is non-related to the accessibility definition. For example, any number of non-related classes may precede the accessibility header. Moreover, the accessibility definition may be encoded via the class attribute into a semantically meaningless hypertext markup language element, such as <span> or <div>.","The script may be configured to perform the parsing operation on the loading of the hypertext markup language document and\/or the script may be configured to perform the parsing operation each time a new element is added subsequent to the loading of the hypertext markup language document. Moreover, the script may map the role and state information into extended hypertext markup language namespaced attributes.","According to yet another aspect of the present invention, a computer program product for including accessible role and state information in hypertext markup language documents comprises a computer usable medium having computer usable program code embodied therein. The computer usable medium comprises computer usable program code configured to encode an accessibility definition into a class attribute that comprises role information and corresponding state information if applicable, where the accessibility definition is associated with an object of a hypertext markup language document. The hypertext markup language document is associated with a script configured for parsing at least a portion of the hypertext markup language document to identify the accessibility definition, and for mapping the role information and the state information of the accessibility definition to corresponding namespaced role and state attributes.","The script may comprise, for example, computer usable program code configured as a library of functions that can be called from the hypertext markup language document. The script may further comprise computer usable program code configured as a library of functions that can be called to parse a single element or any part of the document, including the entire document. In this regard, the script may be included directly with the document, or included as a separate file.","In the following detailed description of the illustrated embodiments, reference is made to the accompanying drawings that form a part hereof, and in which is shown by way of illustration, and not by way of limitation, specific embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and that changes may be made without departing from the spirit and scope of various embodiments of the present invention.","As will be appreciated by one of skill in the art, the various aspects of the present invention may be embodied as a method, system, or computer program product. Moreover, the various aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment combining software and hardware aspects. Furthermore, the present invention may take the form of a computer program product on a computer-usable storage medium having computer-usable program code embodied in the medium.","The software aspects of the present invention may be stored on any suitable computer usable or computer readable medium, including but not limited to, any medium that can contain, store, communicate, or transport the program for use by or in connection with an instruction execution system of a corresponding processing device. The computer readable medium may comprise, for example, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus or device. More specific examples of the computer-readable medium include an electrical connection having one or more wires, a portable computer diskette, a magnetic storage device, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc (CD ROM), digital video disk (DVD) or an optical storage device.","Computer program code for carrying out operations of various aspects of the present invention is typically written in a scripting language, such as ECMAScript. However, portions of the code may also be written in an object oriented programming language such as Java, Smalltalk, C++, or in conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through a local area network (LAN), a wide area network (WAN) or other network connection. For example, the connection may be made to an external computer, such as through the Internet using an Internet Service Provider.","The various aspects of the present invention are described herein with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to various embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer-readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable memory produce an article of manufacture including instruction means which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","Referring now to the drawings, and particularly to , a representative computer system  is illustrated in which Hypertext Markup Language (HTML) documents, also referred to herein as web pages, may be created and accessed using a subset of the conventional Internet paradigm, known as the World Wide Web. An HTML authoring entity such as a person, group of persons, software agent or other source creates an HTML document , e.g., using suitable document authoring software running on a first computer . The content of the HTML document  is then transmitted to a server computer  via a network . The network  may comprise for example, the Internet including the World Wide Web, an Intranet, an Extranet or any other suitable communications path. The computer system  will typically include other servers  for domain name resolution, routing and other control functions.","Once hosted on the server computer , the HTML document  may be accessed by a user agent. User agents may include for example, web-browsers such as graphical and\/or text based computer applications or non-visual browsers such as audio, Braille and other assistive technology devices. User agents may also include search robots, proxies, etc., thus a user need not directly interact with a corresponding user agent. The user agent typically renders the HTML document  into a presentable document , which is interpreted, converted or otherwise formatted such that a user or operator may view, hear, or otherwise interact with the rendered HTML document, such as on a client computer .","A representative client computer  may comprise a personal computer (PC), notebook computer, appliance or pervasive computing device, such as a personal data assistant (PDA), palm computer, cellular access processing device or other suitable device capable of communicating with other devices on the computer system . The client computer  typically includes an operating system and one or more Internet tools, including a user-agent such as a web-browser, for retrieving and processing HTML documents . Communications between the client computer  and the server computer  typically conform to the Hypertext Transfer Protocol (HTTP), and such communications may be made over a secure or an un-secure connection.","Each of the computing devices that communicate across the network , e.g., the first computer , the server ,  and the client computer , typically include at least one processor  for executing software code, system memory , such as random access memory (RAM) for storing software code that is being executed by the processor  and disk or other permanent storage  for storing files of information including software applications, data files etc. A handling mechanism  is typically provided to facilitate communication between the system memory  and the permanent storage . A plurality of input output devices (I\/O) devices  are also typically provided to allow external devices to communicate with the processor . For example, an I\/O device such as a network interface includes hardware and\/or software for interacting with the computer and for communicating across the network .","The typical computing device further includes suitable software including an operating system  and one or more applications , which are typically stored in the permanent storage  and are temporarily copied into the system memory  for execution. The representative computer may also include an application programming interface (API) . For example, an API  may provide extensions that enable application developers to extend and\/or customize the core functionality of HTML documents through software programs including plug-ins, and scripts.","With reference to , in general terms, an HTML document, such as the HTML document  illustrated in , comprises three general components, including an HTML version component , a header component  and a body component . The HTML version component  declares the version of the HTML code written in the document . The header component  is a declarative section that contains information about the document , and may include data such as the document title, keywords that may be useful to search engines, and other data that is not considered document content. The body component  contains the HTML document content, which is typically rendered into a formatted visual and\/or audible file that is presented to a user accessing the HTML file. For example, the body component  may be rendered into the presentable document  using a user agent such as a web-browser on the client computer  as described more fully herein.","As illustrated, the document  comprises a plurality of elements  (a total of n elements as shown) that describe parts of the HTML document . Each element  may include one or more attributes, which identify or describe the characteristics of the corresponding element. For example, an \u201cID\u201d attribute may be used to assign a name to an element , which must be unique in the HTML document .","With reference to , another attribute that may be used to characterize an element  is the class attribute . The class attribute is utilized by an HTML document developer to specify that an element  of the HTML document  is a member of a class. In practice, a given element  of the HTML document may be a member of more than one class, and any number of elements  can share the same class. In conventional HTML, the class attribute is represented by a space separated list of class names .","With reference to , an HTML class attribute  may be utilized to contain an accessibility definition . The accessibility definition  is utilized to assign role and state data to objects of the HTML document . In the example illustrated, the accessibility definition  comprises an accessibility header , role information  and optionally, state information , which generally corresponds to the particular role information. The state information  is shown in phantom lines in  to represent that there may or not be state information associated with a given accessibility definition , depending for example, upon the particular role information as described in greater detail herein. Thus, in the illustrated example, the accessibility definition  may be characterized as a data structure for organizing role and state data. Using conventional HTML class attribute syntax, a first one of the classes of the accessibility definition  comprises the accessibility header , a second one of the classes of the accessibility definition  comprises the role information  and the state information , if applicable, is encoded into subsequent ones of the classes of the accessibility definition . The accessibility header , the role information  and state information  are each separated by a white space.","Dynamic hypertext markup language (DHTML) controls or objects, which are not natively supported in HTML, may be readily created and utilized in HTML platforms by associating scripted event handlers and varied presentations with semantically meaningless HTML elements , such as <div> or <span>. These DHTML controls can have relevant accessibility definitions  associated with them via the class attribute. For example, the simplified HTML syntax for associated accessibility information with a DHTML control may be expressed generally as:",{"@attributes":{"id":"p-0037","num":"0036"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<body>"},{"entry":"<span class=\u201cnonrelated_classes accessibility_header role_information state_information\u201d>"},{"entry":"<\/span>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The accessibility header  defines a control sequence that identifies the particular class attribute as the accessibility definition . The accessibility header  should be unique to the existing class attributes  in the HTML document . However, the same accessibility header  is utilized repeated times within an HTML document  to indicate an occurrence of a new accessibility definition . In one exemplary implementation, the accessibility header  was chosen to comprise the word \u201caccessible\u201d. Thus, from a conceptual standpoint, each accessibility definition , and thus each corresponding DHTML control or object, may be thought of as a class of type \u201caccessible\u201d.","The role information  defines the role of the DHTML object, such as an alert, button, checkbox, column header, list item, menu bar or menu item, etc. The state information  defines the current status, i.e., the state of the corresponding DHTML object. For example, an HTML object defined by a role of a checkbox may have a state of checked=true or checked=false; an HTML object defined by a role of a list item may have a state of selected, read only, etc. In one exemplary implementation, each accessibility definition  is formatted to include a single accessibility header , e.g., the key word \u201caccessible\u201d, one occurrence of role information  and zero or more occurrences of state information . Other definition formats may alternatively be provided, depending upon the needs of the particular implementation.","Each occurrence of state information  may comprise a key-value pair, e.g., separated by a hyphen. For example, to represent that a checkbox control is currently checked, an exemplary HTML syntax may recite:",{"@attributes":{"id":"p-0041","num":"0040"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<body>"]},{"entry":[{},"<span class=\u201caccessible checkbox checked-true\u201d>"]},{"entry":[{},"<\/span>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Further, a true Boolean state may alternatively be represented by the state name without the hyphen and designating Boolean state, e.g.,",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<body>"]},{"entry":[{},"<span class=\u201caccessible checkbox checked\u201d>"]},{"entry":[{},"<\/span>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The class attribute  may further contain classes that are non-related to the accessibility definition, as represented by the classes  illustrated in phantom lines. For example, a web developer may create some specific cascading style sheets (CSS) styles for an object that is to be accessible. If the span element <span> is utilized to represent a tree item in a tree widget, a CSS style may be called \u201celegantTreeItem.\u201d Thus, the corresponding span class may become:",{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<span class=\u201celegantTreeItem accessible treeitem\u201d>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"In the above illustrative example of an accessibility definition , the accessibility header  is treated conceptually, as a marker to show where accessibility information begins within the class attribute. Thus, there may be classes within the class attribute that are before the accessibility header that may be used for anything else. However, the classes in a class attribute, including the role and state information, may be characterized in any order so long as rules can be devised to extract the role and state information out of the space delimited list of classes. Accordingly the accessibility header  may not be required in certain implementations.","Since the class attribute of HTML has been utilized to define a data structure, the user agent may be required to understand how to interpret the data structure of the accessibility definition . As an alternative, a client-side scripting library may be further provided, e.g., either with the HTML document  or otherwise accessible to a user agent when processing the HTML document , to define the role and state information ,  written into the accessibility definition . For example, script routines may be constructed using the ECMAScript library. Using scripts, the user agent need not comprehend the new data structure of the accessibility definition  as the script can be used to perform the necessary manipulation, an example of which is set out in greater detail below.","XML-based markup languages such as the Extended Hypertext Markup Language (XHTML) provide a way for web-based applications to define the accessible role and state metadata directly in a web-based document. However, the XHTML specification requires the declaration and use of namespaces to denote accessible role and state metadata. An XHTML namespace is a collection of names, identified by a Uniform Resource Identifier (URI), which are used as element types and attribute names. However, HTML documents do not support namespaces, so the required accessibility role and state metadata can not be included directly in native HTML documents. In particular, due to the nature of HTML, including the manner in which web-browsers parse HTML documents, HTML cannot support multiple namespaces. A typical web-browser constructs a document object model (DOM), i.e., a tree that contains representations of elements and attributes and renders the document from the document object model. The data structures used in the rendering process are standardized across all web-browsers. Thus, all HTML elements are written to memory in a common, default namespace.","However, once a web browser has constructed the document object model, that model does support multiple namespaces. Accordingly, after the document has been parsed by the web-browser, i.e., after the document has been loaded into memory, e.g., on the client computer , a script may be utilized to copy the role and state information from the accessibility definition(s) into the appropriate namespaced role and state attributes.","In XHTML and other XML-based markup language specifications, a modularized approach allows the web-browser to group core elements and attributes in a default namespace, and to allocate other elements and attributes to additional namespaces, such as for role information and for state information. The web-browser then takes all of the namespaces and constructs a unified object model to render the document.","According to one exemplary aspect of the present invention, role information and state information that has been encoded into the accessibility definition  is mapped to namespaced role and state attributes using conventional HTML and a suitable script. A suitable client-side scripting language, such as Javascript, is used to attach this information to each element via namespaced role and state attributes, in browsers that support namespaces. According to one aspect of the present invention, the accessibility definition  is mapped to the namespaced role and state formats, which can be processed and understood by compatible web-browsers and assistive technologies. This approach provides the HTML document author with the capability to encode role and state information in legacy HTML documents, and to utilize the flexibility of the role and state definitions, and the already built-in support for those definitions by the web-browser. Moreover, this approach will work with any web-browser that adopts support for XHTML, and will be ignored by web-browsers that do not support XHTML.","Accordingly, the developer can take full advantage of namespaced role and state information without having to conform the HTML code written in the HTML document  to the XHTML format. Rather, conventional and well supported HTML can continue to be used.","Graphics-based computer operating systems upon which web-browsers are executed, typically provide accessibility application programming interfaces (APIs) to facilitate interoperability with assistive technologies such as screen readers, screen magnifiers, and voice dictation software, etc. Essentially, these APIs allow a developer to provide information about document content, user interface controls and important events that assistive technologies need to interact with a user. Included in this information is the role and state information of the various objects associated with a given application.","As noted above, the manner in which the accessibility definition  is encoded into the HTML document , e.g., using an HTML element, results in the code having no adverse effect if XHTML is unsupported by the particular viewing web-browser. However, supporting web-browsers may implement a mapping from the role and state information ,  encoded into the accessibility definition  to the corresponding namespaced role and state information, which can then be mapped to the underlying accessibility architecture of the operating system that is executing on the client computer . Then assistive technologies can access the information through the same accessibility APIs that they already support for other graphical desktop applications on the graphics-based computer operating system of the client computer .","The use of the namespaces is convenient to both the web developer and the web-browser. However, the various aspects of the present invention also allow a developer to define unique namespaces for the role and state information , , so long as additional support is integrated into the underlying systems to accommodate those unique namespaces.","As one example, the accessibility definition  may be used to construct a dynamic checkbox. An exemplary partial pseudo-code section to implement a DHTML checkbox may be written as follows:",{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<html>"},{"entry":"<head>"},{"entry":"<title>DHTML Checkbox, HTML edition<\/title>"},{"entry":"<script type=\u201ctext\/javascript\u201d src=\u201crolestate.js\u201d><\/script>"},{"entry":"<script type=\u201ctext\/javascript\u201d>"},{"entry":"<![CDATA["},{"entry":"\/\/ Mouse and keyboard event handlers for controls"},{"entry":"function checkBoxEvent(event)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if((event.type == \u201cclick\u201d && event.button == 0) ||"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(event.type == \u201ckeydown\u201d && event.keyCode == 32)) {"]},{"entry":[{},"\/\/ Toggle checkbox"]},{"entry":[{},"var checkbox = event.target;"]},{"entry":[{},"if (checkbox.getAttributeNS(\u201c"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"http:\/\/www.w3.org\/2005\/07\/aaa\u201d, \u201cchecked\u201d) == \u201ctrue\u201d) {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"checkbox.removeAttributeNS(\u201c"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"http:\/\/www.w3.org\/2005\/07\/aaa\u201c, \u201cchecked\u201d);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"checkbox.setAttributeNS(\u201c"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"http:\/\/www.w3.org\/2005\/07\/aaa\u201d, \u201cchecked\u201d, \u201ctrue\u201d);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"return false; \/\/ Don't continue propagating event"]},{"entry":[{},"}"]},{"entry":[{},"return true; \/\/ Browser can still use event"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"};"},{"entry":"]]>"},{"entry":"<\/script>"},{"entry":"<style type=\u201ctext\/css\u201d>"},{"entry":"@namespace state url(\u201chttp:\/\/www.w3.org\/2005\/07\/aaa"},{"entry":"\u201d);"},{"entry":".checkbox:before {"},{"entry":"content: url(\u2018.\/unchecked.gif\u2019)"},{"entry":"}"},{"entry":".checkbox[state|checked=\u201ctrue\u201d]:before {"},{"entry":"content: url(\u2018.\/checked.gif\u2019)"},{"entry":"}"},{"entry":"<\/style>"},{"entry":"<\/head>"},{"entry":"<body>"},{"entry":"<span class=\u201caccessible checkbox checked\u201d id=\u201cchbox1\u201d tabindex=\u201c0\u201d"},{"entry":"onkeydown=\u201creturn checkBoxEvent(event);\u201d onclick=\u201creturn"},{"entry":"checkBoxEvent(event);\u201d>"},{"entry":"The checkbox label"},{"entry":"<\/span>"},{"entry":"<\/body>"},{"entry":"<\/html>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In general terms, the above pseudo-code defines a checkBoxEvent function that allows mouse and keyboard event handlers to update the status of the checkbox. If the checkbox is accessed and the box is currently checked, the check is toggled OFF. Conversely, if the checkbox is unchecked, the check is toggled ON. As the code suggests, the accessibility definition  is defined within the code as follows:",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<span class=\u201caccessible checkbox checked\u201d id=\u201cchbox1\u201d tabindex=\u201c0\u201d"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"onkeydown=\u201creturn checkBoxEvent(event);\u201d onclick=\u201creturn"]},{"entry":[{},"checkBoxEvent(event);\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/span>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The <span> element may contain other attributes in addition to the class attribute containing the accessibility definition . For example, as the above exemplary code further illustrates, it is left to the developer to further define the appropriate keyboard event handlers associated with the dynamic object. Moreover, it is left to the developer to provide any desired visual appearance to the checkbox, e.g., using code via CSS, etc.","The above-exemplary code uses a script library that is provided to map the role and state information in the accessibility definition  to the appropriate namespaced attributes.",{"@attributes":{"id":"p-0062","num":"0061"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<script type=\u201ctext\/javascript\u201d src=\u201crolestate.js\u201d><\/script>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The rolestate.js is an ECMAScript library, which implements a function that parses the role and state information ,  stored in an accessibility definitions  that is contained within a corresponding class attribute  of the HTML document , and copies the relevant data to the correct namespaced attributes. Thus, when assistive technologies want to get information about roles and states of DHTML controls within a legacy HTML document, e.g., a web page or web-based application, that includes an accessibility definition and corresponding script as set out more fully herein, the assistive technologies may only need to support the specification(s) corresponding the namespaced attributes, e.g., XHTML. It is also possible that the web-browser may map the role and state information from both HTML and XHTML to Microsoft Active Accessibility (MSAA), Accessibility Toolkit (ATK) or another desktop accessibility API.","From the assistive technology's point of view, the role and state information stored in legacy HTML documents using the accessibility definition and corresponding script as set out more fully herein, will \u201clook\u201d identical to accessibility information stored directly XHTML documents.","The mapping of the role and state information contained in the accessibility definitions  to XHTML namespaced role and state attributes is a convenient exemplary mapping. A developer may alternatively choose to define custom roles through the use of different namespaces. However, additional support may be required by the underlying system. For example, the web-browser should provide support for namespaces for the accessibility information encoded into the native HTML document to be identical to a corresponding specification with another namespace.","With reference to , in general terms, at least a portion of the HTML document  is parsed by a mapping script , which identifies and records the accessibility data  corresponding to the role and state information ,  coded into the accessibility definitions  within the parsed portions of the HTML document . For example, the script  may compile a list of the roles and states associated with one or more objects. The mapping script  maps the accessibility data  to a corresponding XHTML representation  and sets the appropriate namespaced role and state attributes . That is, a namespaced attribute referred to as \u201crole\u201d has a value that is itself a namespace qualified value. A role namespace contains a set of constants used to enumerate the possible roles. When the script parses the role keyword from the associated class attribute, it maps the role keyword to a corresponding constant defined in the role namespace and then sets an attribute in the XHTML namespace whose value is the namespaced role. For example, given the accessibility definition:",{"@attributes":{"id":"p-0067","num":"0066"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<span class=\u201caccessible checkbox\u201d>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":"78"},{"@attributes":{"id":"p-0068","num":"0067"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<span xhtml2:role=\u201cwairole:checkbox\u201d>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The <span> is given one new attribute, named xhtml2:role (the \u201crole\u201d attribute in the namespace whose prefix was defined earlier in the document as \u201cxhtml2\u201d). This new attribute has a value of \u201cwairole:checkbox\u201d, again where \u201cwairole\u201d is the prefix defined to correspond to the role namespace.","A web-browser  suitably equipped to read the namespaced role and state attributes can then display the associated dynamic objects even though the underlying code was written in conventional HTML. A web-browser  that is unable to read the namespaced role and state attributes can still interact with the native HTML document. The mapping may also be performed to user-defined namespaces so long as the web-browser can suitably read from those user-defined namespaces.","Accordingly, the script  defines a first module for parsing at least a portion of an HTML document  to identify occurrences of the accessibility definition  and for mapping occurrences of the accessibility definition  to corresponding namespaced role and state attributes.","With reference to , a more detailed flowchart illustrates one exemplary method  of implementing the mapping script . The mapping script of the method  compiles a first list of HTML elements within the HTML page to be parsed at . The first list of HTML elements may comprise, for example, a list of elements, such as <span>, <div> or other elements likely to have class attributes encoded therein. A decision at  determines whether all of the elements that were previously compiled in the first list at  have been considered. If all of the elements have been considered, then the method is terminated at . If there is still at least one element from the first list to be considered, then an element is selected for examination and a class attribute is read from the selected element. A second list is compiled at , which comprises a list of keywords in the class attribute of the selected element. A decision at  determines whether there are any keywords left in the second list to be considered. If all of the keywords have been considered, the control is returned at  to determine if there are any further elements left in the first list of HTML elements that need to be processed.","If a keyword is identified at , a decision is made at  to determine whether the selected keyword comprises an accessibility header . Keeping with the examples used herein, the exemplary method  checks for the keyword \u201caccessible\u201d, which designates that at least some of the classes listed in the class attribute actually define the data of the accessibility definition . As noted in greater detail herein, it is possible to include classes that are non-related to an accessibility definition in a given class attribute. As such, the first class of a class attribute need not be the accessibility header.","If the selected keyword is not the accessibility header , e.g., the keyword is not \u201caccessible\u201d, the method  loops back to the decision box at  to consider the next keyword. If the selected keyword is the accessibility header , e.g., the selected keyword is \u201caccessible\u201d, then the next keyword, which designates the role keyword, e.g., role information , is read from the class attribute at . The role information is copied to the XHTML role attribute, and the role attribute is copied to the XHTML namespace at .","A decision is made at  to determine if there are any keywords left in the second list that have not already been considered. If there are no keywords left, then the method  loops back to box  to determine whether there are any more elements that have not been considered. If there are keywords left in the second list, then those remaining keywords define state information. A state keyword, e.g., state information , is read from the second list at . A decision at  determines whether the state keyword contains a value. If the state keyword does contain a value, then the state keyword is split into a name and a value at , e.g., a name of checked and a value of TRUE. If, on the other hand, the state keyword does not contain a value, then the state name is the state keyword, and a default Boolean value is assigned to the state. In the illustrated example, the default Boolean value is TRUE, however, other default state values may alternatively be assigned. The state and value information, whether assigned at  or at  is copied to the XHTML state namespace at  and control is returned to .","An exemplary script for parsing at least a portion of an HTML document to extract and process accessibility definitions, e.g., generally in accordance with the method  flowcharted in  is as follows:","rolestate.js:",{"@attributes":{"id":"p-0077","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"function addEvent(elmTarget, sEventName, fCallback) {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var returnValue = false;"]},{"entry":[{},"if (elmTarget.addEventListener) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"elmTarget.addEventListener(sEventName, fCallback, true);"]},{"entry":[{},"returnValue = true;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else if (elmTarget.attachEvent) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"returnValue = elmTarget.attachEvent(\u2018on\u2019 + sEventName, fCallback);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"return returnValue;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"if (typeof document.documentElement.setAttributeNS != \u2018undefined\u2019) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"function setAttrNS(elmTarget, uriNamespace, sAttrName, sAttrValue) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"elmTarget.setAttributeNS(UriNamespace, sAttrName, sAttrValue);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"function getAttrNS(elmTarget, uriNamespace, sAttrName) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return elmTarget.getAttributeNS(uriNamespace, sAttrName);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"function removeAttrNS(elmTarget, uriNamespace, sAttrName) {"]},{"entry":[{},"return elmTarget.removeAttributeNS(uriNamespace,sAttrName);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"} else {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"function setAttrNS(elmTarget, uriNamespace, sAttrName, sAttrValue) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"elmTarget.setAttribute(uriNamespace + sAttrName, sAttrValue);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"function getAttrNS(elmTarget, uriNamespace, sAttrName) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return elmTarget.getAttribute(UriNamespace + sAttrName);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"function removeAttrNS(elmTarget, uriNamespace, sAttrName) {"]},{"entry":[{},"return elmTarget.removeAttribute(uriNamespace + sAttrName);"]},{"entry":[{},"}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"function setRolesAndStates(elmAccessible) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var NS_XHTML2 = \u201chttp:\/\/www.w3.org\/TR\/xhtml2\u201d;"]},{"entry":[{},"var NS_STATE = \u201chttp:\/\/www.w3.org\/2005\/07\/aaa\u201d;"]},{"entry":[{},"var STATE_MACHINE_BEGIN = 0;"]},{"entry":[{},"var STATE_MACHINE_IN_ACCESSIBLE = 1;"]},{"entry":[{},"var STATE_MACHINE_ROLE_IS_SET = 2;"]},{"entry":[{},"var sClass = elmAccessible.className;"]},{"entry":[{},"var arClassNames = sClass.split(\u2018\u2019);"]},{"entry":[{},"var machineState = STATE_MACHINE_BEGIN;"]},{"entry":[{},"for (j = 0; j < arClassNames.length; j++) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var sClass = arClassNames[j].replace(\/ \/g, \u201d);"]},{"entry":[{},"if(!sClass) { continue; }"]},{"entry":[{},"if (sClass == \u2018accessible\u2019) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/* found \u201caccessible\u201d keyword, rest of class is roles and states *\/"]},{"entry":[{},"machineState = STATE_MACHINE_IN_ACCESSIBLE;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} else if (machineState == STATE_MACHINE_IN_ACCESSIBLE) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/* found role, set it and move on *\/."]},{"entry":[{},"setAttrNS(elmAccessible, NS_XHTML2, \u201crole\u201d, \u201cwairole:\u201d +"]},{"entry":[{},"sClass);"]},{"entry":[{},"machineState = STATE_MACHINE_ROLE_IS_SET;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} else if (machineState == STATE_MACHINE_ROLE_IS_SET) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/* found state, set it and look for more *\/"]},{"entry":[{},"if(sClass.indexOf(\u2018\u2212\u2019) != \u22121) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/* state has specific value, parse it out and set it *\/"]},{"entry":[{},"var arValue = sClass.split(\/\u2212\/);"]},{"entry":[{},"\/* arValue[0] is state name, arValue[1] is value *\/"]},{"entry":[{},"setAttrNS(elmAccessible, NS_STATE, arValue[0],"]},{"entry":[{},"arValue[1]);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} else {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/* state is simply a name, value is true *\/"]},{"entry":[{},"setAttrNS(elmAccessible, NS_STATE, sClass, true);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"function findRolesAndStates(elmRoot) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if ((!elmRoot) || (!elmRoot.getElementsByTagName)) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"elmRoot = document;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"if (document.evaluate) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"var snapAccessibleElements = document.evaluate(\u201c.\/\/*[contains(@class,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2018accessible\u2019)]\u201d, elmRoot, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,"},{"entry":"null);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"for (var i = snapAccessibleElements.snapshotLength \u2212 1; i >= 0; i\u2212\u2212) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"setRolesAndStates(SnapAccessibleElements.snapshotItem(i));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} else {"]},{"entry":[{},"var arElements = (typeof elmRoot.all != \u2018undefined\u2019)? elmRoot.all:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"elmRoot.getElementsByTagName(\u2018*\u2019);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var iElementCount = arElements.length;"]},{"entry":[{},"for (var i = 0; i < iElementCount; i++) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (\/accessible \/.test(arElements[i].className)) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"setRolesAndStates(arElements[i]);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In the exemplary rolestate.js pseudo-code set out above, the provided library does not execute unless otherwise called within the HTML code. In order to activate the rolestate.js code, the findRolesAndStates( ) function should be called with a root element. Upon execution, the findRolesAndStates( ) function iterates through all the children of the given root element. If no root element is given, the findRolesAndStates( ) function iterates through all elements on the page (i.e. document is the default root element). The findRolesAndStates( ) may be automatically executed on page load, e.g., by adding a suitable command to the library and\/or HTML code. For example, an automatic execution may be realized using the above exemplary partial code by adding the line to the end of the library:\n\n","However, if a particular web application adds new elements that store role and state information in the class attribute to the page after page load, such new elements may need to call findRolesAndStates as a parameter.","Table 1, which is set out below, illustrates a non-exhaustive list of exemplary dynamic roles that a developer may wish to utilize. The dynamic object role is set out in column 1, labeled DHTML Role. The corresponding expressions in column 2, labeled HTML representation, illustrate exemplary accessibility definition syntax that should be encoded into the HTML document as set out in greater detail herein. The expressions in column 3, labeled XHTML representation, illustrate the XHTML role expression that is mapped to by the rolestate.js library based upon the corresponding accessibility definitions from column 2. The examples in the following table use the <span> element to represent the DHTML control, but any presented HTML element may be used. Moreover, the particular format of the accessibility definitions listed in column 2 is merely illustrative, and any desired format may be used so long as the particular implementation of the script, such as the exemplary rolestate.js script, maps the role and state data encoded in the HTML document to the appropriate namespaced role and state attributes.",{"@attributes":{"id":"p-0081","num":"0081"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"DHTML Roles and corresponding representations"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["DHTML",{},{}]},{"entry":["Role","HTML representation","XHTML Representation"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["alert","<span class=\u201caccessible","<span role=\u201cwairole:alert\u201d>"]},{"entry":[{},"alert\u201d>"]},{"entry":[{},"<span class=\u201caccessible","<span role=\u201cwairole:alert\u201d"]},{"entry":[{},"alert pressed\u201d>","state:pressed=\u201ctrue\u201d>"]},{"entry":[{},"<span class=\u201caccessible","<span role\u201cwairole:alert\u201d"]},{"entry":[{},"alert haspopup\u201d>","state:haspopup=\u201ctrue\u201d>"]},{"entry":["slider","<span class=\u201caccessible","<span role=\u201cwairole:slider\u201d"]},{"entry":[{},"slider valuemin-10","state:valuemin=\u201c10\u201d"]},{"entry":[{},"valuemax-50 value-30\u201d","state:valuemax=\u201c50\u201d"]},{"entry":[{},{},">state:value=\u201c30\u201d>"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"An example of a mapping is illustrated in the block diagram shown in . Assume that an HTML document wants to include an object , such as an alert, as identified in Column 1, Row 1 of Table 1. The HTML code in the HTML document  may include the exemplary accessibility definition syntax as seen in the Column 2, Row 1 of Table 1:",{"@attributes":{"id":"p-0083","num":"0083"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<body>"]},{"entry":[{},"<span class=\u201caccessible alert\u201d>"]},{"entry":[{},"<\/span>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Thus, the accessibility definition  is embedded in a class attribute as explained more fully herein. Upon execution of a script, e.g., as flowcharted in , and set out in the exemplary rolestate.js pseudo-code above, the script maps the accessibility definition  to a corresponding XHTML representation . For example, <span class=\u201caccessible alert\u201d> is mapped to the corresponding XHTML2 representation <span role=\u201cwairole:alert\u201d>. In this example, there is no state information provided. As Table 1 suggests, other exemplary objects may include both role and state information. Moreover, there may be multiple state entries, as illustrated by the accessibility definition for the slider object illustrated in Row 4 of Table 1. The XHTML representation  is then copied into namespaced role and state attributes .","That is, when the script parses the role keyword from the class attribute, the script maps the role keyword to a constant defined in the role namespace and then sets an attribute in the XHTML namespace whose value is the namespaced role. Thus, <span class=\u201caccessible alert\u201d> becomes <span xhtml2:role=\u201cwairole:alert\u201d>. The <span> is given one new attribute, named xhtml2:role (the \u201crole\u201d attribute in the namespace whose prefix was defined earlier in the document as \u201cxhtml2\u201d). This new attribute has a value of \u201cwairole:checkbox\u201d, again where \u201cwairole\u201d is the prefix defined to correspond to the role namespace.","The accessibility definitions and corresponding script library may be cross-platform compatible and may support each platform's event model, as well as the standard DOM event model supported by various web-browsers. The accessibility definitions and corresponding script library may also be compatible with both HTML and XHTML documents, served either with a \u201ctext\/html\u201d or \u201capplication\/xhtml+xml\u201d content type. Also, it may be desirable to allow the accessibility definitions and corresponding script library to utilize browser-specific optimization techniques, such as Firefox's support for client-side XPath queries, to minimize the performance impact.","The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and\/or groups thereof.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.","Having thus described the invention of the present application in detail and by reference to preferred embodiments thereof, it will be apparent that modifications and variations are possible without departing from the scope of the invention defined in the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":["The following detailed description of the preferred embodiments of various embodiments of the present invention can be best understood when read in conjunction with the following drawings, where like structure is indicated with like reference numerals, and in which:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
