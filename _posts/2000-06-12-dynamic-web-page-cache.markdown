---
title: Dynamic web page cache
abstract: A Web page cache that stores Web pages such that servers will be able to retrieve valid dynamic pages without going to a dynamic content server or origin Web server for the page every time a user requests that dynamic page. The dynamic content cache receives information that defines data upon which each dynamic page is dependent, such that when the value of any dependency data item changes, the associated dynamic page is marked as invalid or deleted. The dynamic page cache stores dependency data, receives change event information, and indicates when pages in the cache are invalidated or need to be refreshed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07096418&OS=07096418&RS=07096418
owner: Persistence Software, Inc.
number: 07096418
owner_city: San Mateo
owner_country: US
publication_date: 20000612
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims priority to co-pending U.S. provisional patent application with Ser. No. 60\/179811, entitled \u201cDynamic Web Page Cache\u201d, filed Feb. 2, 2000, and U.S. provisional patent application identified with Ser. No. 60\/201,166, entitled \u201cDynamic Web Page Cache\u201d, filed May 2, 2000, both by the same inventors as the present application. The disclosures of said provisional applications are hereby incorporated by reference.","1. Field of the Invention","This invention relates generally to computer network communications and, more particularly, to cache techniques for network documents.","2. Description of the Related Art","When a computer network user begins a communication session over the Internet, the user can request data files from an Internet-connected computer called an origin server using the hypertext transfer protocol (HTTP). An origin server is typically a web server on which a given resource resides or is to be generated. These data files are typically written or defined in a type of programming code or mark-up language called hypertext mark-up language (HTML), and can be viewed or displayed through a graphical user interface (GUI) program, such as \u201cNetscape Communicator\u201d from Netscape Communications Corporation or \u201cInternet Explorer\u201d from Microsoft Corporation. Such data files may specify a mixture of content including: text, graphics (image), audio, and video. The network nodes and collection of HTML are commonly referred to as the \u201cWorld Wide Web\u201d (\u201cWWW\u201d), and the GUI program to view the files is called a (\u201cweb browser\u201d). A collection of related data files under a common Internet network domain name is commonly referred to as a Web site.","A network user can request a Web page (or page) on a Web site by clicking on a link on a Web page in the browser window or by typing in a uniform resource locator (URL) address in the browser location toolbar. When a Web page from a Web site is requested, the browser takes charge of displaying the returned collection of data files as a complete Web page. For example, if a Web page includes text, animated images, and audio, the web browser will retrieve the Web page and display the text, show the images, and play the audio sounds. The browser request is sent from the user computer to a series of switches and routers toward the appropriate origin web server, where the requested Web page is identified and\/or generated, and returned to the user for display.","Because of extremely heavy data traffic over the Internet, cache techniques are being used to improve the speed of returning requested Web pages to network users. One way is by having a proxy server. A proxy server is a device that has a data store, cache, or cache memory that typically contains local copies of frequently requested Web pages. Proxy servers are distributed around the Internet so as to be readily accessible by various servers. Thus, if a user requests a Web page, for example, the proxy server checks the local data store to determine if it has the corresponding page in cache for the URL request just received. If the proxy server identifies that it has the Web page for the URL requested, it will return the cached Web page, found in the local proxy server, to the requesting user, rather than relaying the request all the way back to the origin server. This reduces the time for the Web pages to be returned to the user.","Often, Web pages are dynamically generated at the time they are requested to allow for content flexibility. (Dynamically created pages are hereafter referred to as dynamic pages or dynamic Web pages.) In conjunction with a web server, a script or program usually generates such dynamic pages. Typically, query parameters are also passed to the page-generating script, so that the data drawn from the data source is limited based on, for example, user's input or selection. (The process of generating Web pages is herein referred to as page generation.) One skilled in the art will recognize that Web pages may be generated via other programmed means, for example, generating Web pages using a high-level programming language, such as C++, without utilizing a web server. (Static pages are those pages that are not dynamically generated.)","Conventionally, a dynamic page is generated in response to a user request. Thus, if ten users request a dynamic page containing identical information, the origin server has to generate such page ten times to satisfy those ten requests even if no piece of information changed from the first request to the tenth request. For example, although a Web page containing a list of bids for an auction item does not change very often (probably, once every few hours during the initial posting of the item), it is likely implemented as a dynamic page and generated anew upon each user request. This unnecessary generation of Web pages, thus, adds a substantial load on the origin server's resources. Hence, a way to generate pages only when the Web page content is no longer valid and a way to alleviate the resource requirements on the origin server are highly desired.","Dynamic pages are typically not cached. Dynamic Web pages typically change frequently, often minute by minute. For example, dynamic Web pages may be used to communicate the latest bid information at an Internet auction site, or flight arrival information at a travel site, or may be used to post remaining inventory at a retail-shopping site. Because dynamic pages are not cached, all user requests for dynamic pages must travel all the way back to the origin server at the source Web site and, in addition, are generated by the origin server. This places a high demand on the origin servers for handling traffic and for generating dynamic Web pages, and can slow down the response time for web requests.","One way of caching dynamic pages is by having such pages be refreshed (i.e., replaced with a fresher or newer page) every few minutes, e.g., all cached dynamic pages that are fifteen minutes old or older are refreshed. This method, however, means that dynamic pages that are still valid (i.e., contain up-to-date information) are unnecessarily refreshed thereby needlessly taxing the resources of the system. Furthermore, users may also receive invalid web pages during the time frame when such pages have not been refreshed and contain invalid data.","Another way of caching dynamic pages enables developers to split up a dynamic page to different portions based on whether it contains static information, such as information that does not need to change, or whether it contains dynamic content, such as information drawn from a database. The system then composes a complete web page whenever a request is received. This method, however, involves redundant requests for dynamic contents considering that dynamic contents from previous requests may still be valid, as well as unnecessary delay considering that the request for dynamic content has to be sent all the way back to the origin server.","If dynamic pages were cached using conventional technology, the pages kept in cache could quickly become out of date, being superceded by more recent information from the origin server. Alternatively, if cached dynamic pages were refreshed with sufficient frequency to ensure they remain valid, the rate of refresh would likely be such that much of the cache operation would be devoted to handling refresh operations. This would tax the resources of the cache and reduce the effectiveness of the cache storage.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1","b":["100","102","104","105","106","108","110","102"]},"From the discussion above, it is apparent that there is a need for an Internet cache technique that can store dynamic pages thereby reducing the workload on web servers, but efficiently maintaining valid pages without unduly taxing cache resources. The present invention fulfills this need.","The present invention provides a cache in which data files, such as Web pages, are temporarily stored such that users are able to retrieve valid data files, without requesting such data files from a dynamic content server or origin server. The dynamic content cache receives information that defines data upon which each Web page is dependent. That is, when the value of any dependency data item changes, the associated page content also changes, thus, invalidating the associated page stored in cache. An event is defined to be a change in a page dependency value or attribute that results in a change in page content. The dynamic content cache stores dependency data, receives change event information, and invalidates or refreshes pages in the cache. In this way, the invention provides a cache that can store dynamic Web pages and efficiently refresh them to timely respond to requests for page content, and thereby reduce the workload on Internet origin servers.","The present invention also provides for a computer software product and a proxy server system, which provide the functions and features described above.","Other features and advantages of the present invention should be apparent from the following description of the preferred embodiment, which illustrates, by way of example, the principles of the invention.","The following detailed description illustrates the invention by way of example, not by way of limitation of the principles of the invention. This description will clearly enable one skilled in the art to make and use the invention, and describes several embodiments, adaptations, variations, alternatives and uses of the invention, including what we presently believe is the best mode of carrying out the invention.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2A","b":["200","202","204","206","202","206","208","210","202","212","206","214","226","206","226"]},"The dynamic content cache ,  maintains dependencies or page dependencies for the cached dynamic pages, and thereby determines when cached dynamic pages are invalid. Page dependency data or page dependencies indicate the underlying data source, such as the table, row, or field, from which the dynamic content of the page was obtained or derived. Any change in the underlying data source invalidates the pages because the dynamic contents of such pages are no longer accurate. These invalid dynamic pages are subsequently refreshed with valid dynamic pages from the origin dynamic content server  such that browser requests for dynamic Web pages are responded to with valid dynamic pages. The invalid dynamic pages are refreshed either when a possible change to the underlying dynamic data occurs or upon demand, when there is a user request to the dynamic content cache ,  for a dynamic page that is either no longer in data store or is invalid. This relieves the demand on the origin web server  and the dynamic content server  to generate a dynamic page every time a user request for that dynamic page is received and permits faster responses to browser requests. That is, the dynamic content cache generates a dynamic page only when a page dependency changes, rather than every time a dynamic page request is received.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 2B","FIG. 2A","FIG. 2A","FIG. 2B","FIG. 2A","FIG. 2B"],"b":["201","200","212","214","206","212","226","214","212","214"]},"Referring to both , in the preferred embodiment, the ISP configures their system so that browser requests are first routed to the dynamic content cache . Thus, the corresponding origin web server  and origin dynamic content server  need not be bothered with the request for dynamic pages already cached in the dynamic content cache . Optionally, a local proxy server  may be installed between the user  and the ISP proxy server  (in ) or between the user  and the dynamic content cache  (in ), so as to provide more quickly heavily requested static pages.","Referring again to , in the preferred embodiment, the dynamic content cache  recognizes incoming browser requests for Web pages and first attempts to satisfy such requests, rather than immediately relaying such requests to the corresponding origin web server . Dynamic pages that are not found in the dynamic content cache  are then satisfied by the origin web server , dynamic content server , and\/or from data files  of the Web site. Those skilled in the art will recognize that an optional reverse proxy server  (in ) may be included to respond to requests for static pages. (In , the functions of the optional reverse proxy server  found in  are also done by the dynamic content cache  in ). Static pages that are not found in the reverse proxy server  (in system  of ) or in the dynamic content cache  (in system  of ) are then satisfied by the origin web server , dynamic content server , and\/or from data files  of the Web site. (Generally, the origin web server  receives the request and the origin dynamic content server  generates the dynamic content, optionally, deriving data from data files .) Many dynamic Web pages are derived from information stored in an associated relational data base management system (RDBMS). The data files  may also include database(s) from which page contents are derived.","Requests for dynamic pages may be recognized in a variety of ways. For example, dynamic pages typically have a URL format with a recognizable extension, such as \u201cASP\u201d (Active Server Pages), \u201cJSP\u201d (Java Server Pages), \u201cCGI\u201d (Common Gateway Interface), \u201cCFM\u201d (Cold Fusion Markup Language), or the like. Such extensions, for example, indicate that the dynamic pages were generated by a certain scripting language. In accordance with the invention, a dynamic page may also be recognized by the dependencies encoded within the dynamic page. Dynamic pages may also be recognized via a configuration file. The configuration file contains templates, patterns, syntax, and rules indicating URL requests that generate dynamic pages, as well as the URLs that are to be cached. Alternatively, request header information received by a dynamic content cache, such as headers containing form data or cookies, may contain the requisite information to enable a dynamic content cache to identify a request for a dynamic page. (A cookie is a block of data that a web server stores on a client system for later retrieval.)","Parameters being passed to the origin server may be determined by parsing the URL address and\/or the request header information. A URL is the address of a resource on the Internet, with a syntax generally in the form \u201cprotocol:\/\/host\/localinfo?query,\u201d where protocol specifies the means of fetching the object (such as HTTP or FTP), host specifies the remote location where the object resides, localinfo is a string (often a file name) which indicates the local path, filename, or uniform resource identifier (URI), and query specifies a parameter list. For example, the URL request, \u201chttp:\/\/www.MyAuction.com\/createItem.asp?Seller=193682,\u201d indicates that \u201chttp\u201d is the protocol used, the origin server or host Web site is \u201cwww. MyAuction.com,\u201d the URI or local file is \u201ccreateItem.asp,\u201d and the parameter passed is \u201cSeller\u201d with a value of \u201c193682.\u201d","One skilled in the art will easily recognize that URL requests or request header information may be parsed, searched, and read to obtain parameter information being passed to the origin web server. For example, parameters may be obtained from cookies as well as from data information contained in header information. In some cases, the parameters passed are based on the URI or local information, such as the position within the URL address (herein called positional parameters). For example, if the URL request is \u201chttp:\/\/www.myAuction.com\/aw\/listings\/list\/all\/category513\/index.html,\u201d the parameter, \u201c513,\u201d is obtained from \u201ccategory513.\u201d A template, syntax, or pattern match of the URL address may be written to enable the dynamic content cache to extract only certain portions of the URL address.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 3","FIGS. 2A and 2B"],"b":["300","212","214","302","304","306","304","308","310","312"]},{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 4","FIGS. 2A and 2B"],"b":["200","201","402","202","212","404","406","410","426"]},"If the requested dynamic page, however, is not found in the ISP dynamic content cache, a \u201cno\u201d outcome at the decision box , the user request is then delegated to the origin dynamic content cache. The origin dynamic content cache in turn searches its local cache for the requested page, in step . If the requested dynamic page is available, a \u201cyes\u201d outcome at the decision box , the requested cached dynamic page is then returned to the requesting entity in step , which may be the ISP or the user depending on the system or network.","If the requested dynamic page is not available in either the ISP dynamic content cache (box  in ) or the origin dynamic content cache (box  in ), the requested dynamic page is generated in step  (usually by a script, a web server software, and a data source) by the origin web server , the origin dynamic content server , and\/or, optionally, deriving data from the data files . Once the requested dynamic page is generated, it is then received and stored in the origin dynamic content cache , in step , so as to be made available for future requesters. The generated dynamic page is then returned to the requesting entity in step . If the request was received from the ISP, a \u201cyes\u201d outcome at the decision box , the ISP dynamic content cache  receives the requested dynamic page and then stores the requested dynamic page into its own cache in step . The requested dynamic page is also sent to the user and is eventually received by the user, via the browser in step .","If the request, however, was received directly by the origin web server from the user, a \u201cno\u201d outcome at the decision box , the requested dynamic page is generally sent directly back to the user, in step . One skilled in the art will recognize that, similar to proxy servers widely known in the art, variations on the system  and , such as which dynamic content cache in the system is searched, depends on how the system is implemented and where dynamic content caches are placed. Furthermore, one skilled in the art will recognize that more than one dynamic content cache may be implemented in a system. A request by one dynamic content cache, for example, may be satisfied by another dynamic content cache without going to the origin Web site, depending on the system and network architecture.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 5A","b":["212","214","502"]},"In the preferred embodiment of the present invention, dependencies are written using the Extensible Markup Language (XML) specification. Similar to HTML, XML is a generalized markup language. Pieces of information are delimited by start tags, e.g., \u201c<Dependency>,\u201d and end tags, e.g., \u201c<\/Dependency>,\u201d with the end tag exactly like the start tag except a slash (\u201c\/\u201d) precedes the tag name. Data delimited by a start tag and an end tag are generally called elements. Thus, \u201c<Dependency>ItemChange(CatID=513)<\/Dependency>\u201d defines an element having a content or value of \u201cItemChange (CatID=513).\u201d","Once the dependencies are determined in step , the dynamic page, including its page dependencies, is stored in the cache memory of the dynamic content cache, in step . The system then automatically receives dependency change event information, typically as an event message, in step . Events may be received by the dynamic content cache from a variety of sources, further illustrated in  below. For example, a change in an associated RDBMS table will be communicated from the RDBMS to the cache controller . Events are also preferred to be written in the XML specification. (An event herein refers to any occurrence or transaction that invalidates a dynamic page. It is preferred that an event is represented as an XML-written event (further discussed below).)","In the next operation, based on the event message (or dependency change event information), cached dynamic pages whose dependencies are no longer valid (i.e., information is inaccurate) are invalidated in step . The dynamic content cache is then updated, in step , for example, by deleting invalid cached dynamic pages, requesting updated web pages, updating indices to cached pages, and the like. The update or portions of the update, in step , may occur immediately upon receipt of the event message or may be delayed until another user (or another dynamic content cache) sends another request for such Web page.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 5B","b":["212","214"]},"In the first step, the developer creates a configuration file (further discussed in detail below) in step . If events are received by the dynamic content cache, the \u201cEvent\u201d outcome at decision box , the dynamic content cache processes the events, in step , and updates the cache based on the events received in step , using the change event evaluator ( in ). If a URL request, the \u201cRequest\u201d outcome at decision box , however, is received by the dynamic content cache, the dynamic content cache checks if the Web page requested is in cache. If the requested page is in cache, a \u201cyes\u201d outcome at the decision box , a copy of the requested cached dynamic page is sent to the user at step . If the dynamic page requested, however, is not found, a \u201cno\u201d outcome at the decision box , the URL request is sent to the origin server at step . Once the requested page is received from the origin server, based on the configuration file, dependencies may be generated for the requested page in step . The requested page is then stored in cache, including any dependencies generated in step . Change events then may also be generated in step  and if necessary, the cache is updated in step .","To explain the features of the present invention, an example auction Web site, MyAuction.com, is exemplified. MyAuction is an auction Web site that enables persons, called bidders, to bid on items being auctioned by sellers. Each item belongs to exactly one category, for example, the \u201cCard A Set\u201d item may only belong to one category, \u201cPlaying Cards.\u201d A quantity of one is assumed for each item being auctioned.","MyAuction.com Web site obtains its information from four tables: an Item table, a Category table, a Bid table, and a Bidder table. The Item table contains items that are being or have been auctioned. An auction for an item is open or begins from the time the seller creates the item's entry (i.e., status is \u201copen\u201d) until the auction closes (i.e., the status is \u201cclosed\u201d). A seller provides the following field information for that specific auction or item: Title (description of the item), OfferAt (the initial or starting price), Closes (date and time when auction closes), and the CatID (category of the item). The system automatically generates the \u201cID,\u201d (the unique ID number for that auction item), the \u201cStatus,\u201d (\u201copen\u201d) and the \u201cSellerID\u201d (unique ID number for such seller) at time of creation. An auction is initially set to \u201copen\u201d but is automatically changed to a \u201cclosed\u201d status when the date and time when the auction period ends have been reached. In this example, the seller may only change the information contained in the \u201cTitle\u201d field once an item is created.","Table I below contains sample records of an Item table.",{"@attributes":{"id":"p-0054","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"center"}},"thead":{"row":{"entry":"TABLE I"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Item Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"8"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Ln","ItemID","CatID","Title","OfferAt","Closes","Status","Seller"]},{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"8"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"6","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","5112","211","Video Recorder","650.00","02\/24\/2000 05:35 pm","closed","817923"]},{"entry":["2","5390","131","Card A Set","11.99","02\/25\/2000 11:59 pm","open","595617"]},{"entry":["3","5853","131","Card B Set","1.49","02\/26\/2000 10:00 am","open","473124"]},{"entry":["4","5945","131","Card C Set","1.49","02\/26\/2000 11:59 am","open","327051"]},{"entry":["5","6021","301","2 nights, Ohio","125.00","02\/24\/2000 10:00 pm","closed","193682"]},{"entry":["6","6113","131","Card D set","11.49","02\/26\/2000 04:59 pm","open","273051"]},{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}}]}}]}}},"Table II below shows an example Category table containing some records. The CatID field of Table I is linked to the CatID of Table II.",{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE II"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Category Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Ln","CatID","Category_Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["1","101","Toys & Games"]},{"entry":["2","131","Playing Cards"]},{"entry":["3","211","Sony Digital Cameras"]},{"entry":["4","301","Vacation Travel"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Table III, below, shows an example Bid table containing some records.",{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE III"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Bid Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"77pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Ln","ItemID","BidderID","OfferPrice","BidPlaced"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["1","5390","476142","12.99","02\/24\/2000 06:43pm"]},{"entry":["2","5945","193682","16.99","02\/23\/2000 07:00am"]},{"entry":["3","6113","193682","16.99","02\/20\/2000 08:45pm"]},{"entry":["4","6113","284501","17.99","02\/22\/2000 09:41am"]},{"entry":["5","6113","476142","20.99","02\/24\/2000 05:30pm"]},{"entry":["6","5853","597315","17.99","02\/21\/2000 11:59pm"]},{"entry":["7","5945","476142","29.00","02\/23\/2000 07:09am"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"The Bid table contains records of bids. Each bid record identifies the item (i.e., the ItemID that is linked to the Item Table in Table I), the bidder (BidderID), the offer or bid price (OfferPrice), and when the bid was placed (BidPlaced). The winning bid is the bid with the highest bid price, or \u201cOfferPrice\u201d for a particular item. Once a customer places an initial bid, only updates and increases to the bid price (OfferPrice) are allowed.","Table IV below is a sample Bidder table, which is linked to the BidderID field in Table III.",{"@attributes":{"id":"p-0061","num":"0060"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE IV"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example Bidder Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Ln","BidderID","Name"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["1","193682","RJ of San Mateo, CA"]},{"entry":["2","284501","NZ of Columbia, MO"]},{"entry":["3","476142","LM of Albany, NY"]},{"entry":["4","595617","KB of Fort Worth, TX"]},{"entry":["5","597315","CF of Ft. Myers, FL"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"To determine whether a Web page is a good candidate for caching, a developer first determines whether the number of times a dynamic Web page is viewed is more than the number of times changes in the underlying table or tables occur. Once a determination is made that a Web page is a good candidate (because it is viewed more often than it is modified), an analysis has to be made on what changes affect the underlying data.","Using information contained in Tables I, II, and III,  shows a sample dynamic Web page, , displayed on the user's browser based on user's request , \u201chttp:\/\/www. MyAuction.com\/catItems.asp?CatID=131.\u201d The dynamic page  lists all open auction items currently available under the selected category, \u201cPlaying Cards\u201d (CatID is \u201c131,\u201d line 2 of Table II). The data or contents of the Web page are obtained from Table I lines 2, 3, 4, and 6; Table III lines 1, 5, 6, and 7; and Table II line 2. Based on the underlying data, several events invalidate the cached dynamic page ; for example, an entry of another auction item under the \u201cPlaying Cards\u201d category; another bid for any item under that same category (because winning bid column becomes inaccurate), an expiration or closing of any auction period under that same category, or any change on the Title (or description) of items under that same category.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 6B","b":["610","612","610"]},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 6C","b":["620","622","620"]},"To determine dependencies, for example, for , B, and C, a developer has to understand what underlying fields or data sources are used in the dynamic page, and based on those fields or data sources recognize what events invalidate the page. In the preferred embodiment, dependencies are specified with a start tag and closing tag, to be in the form \u201c<Dependency>event-name(parameter_name=parameter_value, . . . )<\/Dependency>.\u201d A dynamic page may contain a dependency data containing more than one dependency. The event-name may be any user-defined event name; however, event names defined in the dependencies must correspond or relate to those defined in the events (further discussed below).","Table V lists the dependency data that may be associated with the dynamic Web page .",{"@attributes":{"id":"p-0068","num":"0067"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE V"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Associated Dependencies for Dynamic Web Page 600 in FIG. 6A"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Ln","Dependency Data"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["1","<Dependency>AuctionStatus(CatID=131) <\/Dependency>"]},{"entry":["2","<Dependency>Bid(CatID=131)<\/Dependency>"]},{"entry":["3","<Dependency>ItemChange(CatID=131)<\/Dependency>"]},{"entry":["4","<Dependency>ItemAdd(CatID=131)<\/Dependency>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"In accordance with the present invention, the dynamic content cache parses URL addresses, including request header information, and obtains the parameters passed or sent to the origin server. The parameters sent dictate what underlying data are to be displayed. Referring back to , the parameter CatID with value \u201c131\u201d (i.e., \u201cPlaying Cards\u201d), obtained from URL request , is passed to the origin server; thus, only items under such category are displayed. The dynamic page  is dependent on the underlying data, and any change to the underlying data invalidates the dynamic page. In Table V, for example, line 1 indicates that the dynamic page  is dependent on having no status changed (from \u201copen\u201d to \u201cclosed\u201d) for any item listed under the \u201c131\u201d category; line 2 indicates that it is dependent on having no additional bid be placed on any item listed under the \u201c131\u201d category; line 3 indicates it is dependent on having no change made to the title of any item listed under \u201c131\u201d category; and line 4 indicates that it is dependent on having no additional item added under \u201c131\u201d category. Any events affecting the underlying data invalidate the page.","In the preferred embodiment, events are represented by event rules which have the following syntax: \u201c<EventRule>event-name(parameter-value, . . . )<\/EventRule>. Such events are also preferred to be incorporated into an event message. Based on events, the dynamic content cache searches for files whose dependencies match the content of the events received, and accordingly delete such pages from cache or refresh the pages, and accordingly update the indices to those files. (When pages are actually deleted from cache or refreshed depends on implementation. Pages may be deleted by marking them invalid and deleting them later at a specified time or just marking them invalid. Pages may be refreshed immediately or refreshed when subsequently requested.) Thus, one event may invalidate more than one cached dynamic page.","Table VI below is a list of events if received by the dynamic content cache invalidates the dynamic page .",{"@attributes":{"id":"p-0072","num":"0071"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE VI"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Associated Event Rules Invalidating Dynamic Web Page 600 in FIG. 6"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Ln","Events Or Event Rules"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["1","<EventRule>AuctionStatus(CatID=131)<\/EventRule>"]},{"entry":["2","<EventRule>Bid(CatID=131)<\/EventRule>"]},{"entry":["3","<EventRule>ItemChange(CatID=131)<\/EventRule>"]},{"entry":["4","<EventRule>ItemAdd(CatID=131)<\/EventRule>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Referring to Tables V and VI, the event names and parameters used in the dependencies match those event names and parameters used in the events (i.e., the contents of the Dependency elements match the contents of the EventRule elements). This enables the dynamic content cache to find the exact pages containing the now invalid dependencies on the underlying data source(s). Furthermore, the dynamic content cache only needs to receive any one of such events listed in Table VI to invalidate page . These events may be received from various sources, such as from the dynamic content cache itself, from a database, from a script, or from a custom software application.","In Table VI, line 1 indicates that the status of an item listed under category \u201c131\u201d has been changed (i.e., from \u201copen\u201d to \u201cclosed\u201d); line 2 indicates that a new bid was placed on an item listed under category \u201c131\u201d; line 3 indicates that the title of an item listed under category \u201c131\u201d has been changed; and line 4 indicates that an item was added under the category \u201c131.\u201d","Referring to , the URL request  invalidates the dynamic page  contained in . This is because the addition of the item \u201cCard E Set\u201d under the \u201cPlaying Cards\u201d category (\u201c131\u201d, Table II line 2) means that the list  in  is no longer valid or accurate. When a user clicks on the Open Auction button  in , events are generated to indicate that an item was added to the category \u201c131.\u201d One event generated is \u201c<EventRule>ItemAdd (CatID=31)<\/EventRule>.\u201d","A URL request, not shown in the figures, that adds another bid to the \u201cCard D Set\u201d (Table I line 6) invalidates the dynamic page  in , because the list of bidder  is no longer accurate or valid. Assuming the URL request for such a transaction is \u201chttp:\/\/www.MyAuction.com\/placeBid.asp?ItemID=6113,\u201d two events may be generated based on such transaction or URL request. Table V below shows two events that are generated for such URL request and which are sent to the dynamic content cache. (See also  lines 62 and 63).",{"@attributes":{"id":"p-0077","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE VII"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Ln","Events or Event Rules"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","<EventRule>Bid(CatID=131) <\/EventRule>"]},{"entry":["2","<EventRule>Bid(ItemID=6113)<\/EventRule>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Line 1 indicates that a new bid was added for category \u201c131\u201d (\u201cPlaying Cards\u201d) and line 2 indicates that a new bid was added for item \u201c6113\u201d (\u201cCard D Set\u201d). How such events are generated is further discussed below.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":["FIGS. 7A and 7B","FIGS. 7A and 7B"]},"Referring to , the EventTransportList element, lines 2 to 7, indicates to the dynamic content cache the method of delivering events to the dynamic content cache; how the dynamic content cache should receive events, the name of the dynamic library to be used to receive events, the protocol used, and the like. The WebSite element, lines 8 to 12, shows the root address (Web site or origin server) of the web pages that may be cached by the dynamic content cache. The HostName element, line 10, specifies the DNS address portion of the URL. The WebServer element, line 9, list all the HostName elements, line 10, for a particular logical origin server (in this example, the \u201caspSite\u201d). A logical origin server may consist of one physical server with multiple, equivalent DNS names, or of multiple physical servers in a load-balanced cluster.","The EventTemplateList element, lines 13 to 20, shows the pattern, template, or syntax of dependency\/event rules recognized by the dynamic content cache, without the actual parameter values. The EventTemplateList acts like a template or a pattern of URL requests that the dynamic content cache monitors. EventTemplate elements, lines 14 to 19, are preferred to be in the syntax of \u201c<EventTemplate>event-name(parameter-name, . . . )<\\EventTemplate>. The event-name is developer-defined. The event-name is preferred to describe the event that invalidates the underlying data in a dynamic page.","The RegularExpressionList element, lines 21 to 24, indicates to the dynamic content cache errors (contained in pages) that may be received from the origin server. In addition, in line 28, errors received in response to a request are indicated to be ignored, that is, not cached, as specified in the DoNotCacheIf element. Thus if a dynamic content cache receives a page containing \u201cAn error has occurred,\u201d such page is not cached by the dynamic content cache.","The CacheableObjectList element,  lines 25 to 34 and  lines 35 to 43, is used by the dynamic content cache, particularly by the Request-based dependency generator (further discussed below), to generate dependencies attached to a requested cached dynamic page.  line 26 indicates that if a dynamic page is received with a URL address starting with \u201chttp:\/\/www.MyAuction.com\/catItem.asp\u201d (see lines 9, 10, and 26 of ) dependency rules specified in lines 29 to 32 are attached or appended to such dynamic page. (The dynamic content cache knows that it is the \u201chttp:\/\/www.MyAuction.com\u201d Web site by looking at lines 9 to 12 of the configuration file.) Such dependency rules may be appended at the end of the dynamic page or are stored in a format enabling the dynamic content cache to associate such dependencies to such dynamic Web page.","The \u201cRequest.QueryString\u201d function in lines 29 to 32 is a function that parses the URL request received and returns a parameter list with values. Thus, if the URL address \u201chttp:\/\/www.MyAuction.com\/catItems.asp?CatID=131\u201d  of  is passed to the dynamic content cache, the Request.QueryString(\u201cCatID\u201d) function results in the \u201c131\u201d (CatID) parameter being returned to the dynamic content cache. One skilled in the art will recognize that a function may be created to parse header information, containing form data and\/or cookies, as well as parsing URL request containing positional parameters. For example, if the URL request is \u201chttp:\/\/www.myAuction.com\/aw\/listings\/list\/all\/category513\/index.html,\u201d a function may be created to extract \u201c513\u201d from the URL address. This positional URL address may also have to be indicated in the configuration file to obtain the positional parameter. This may be done, for example, by adding a PositionalParameter element containing the following rule, \u201c\/aw\/listings\/list\/all\/category\\[0\u20139]\\{1,\\1}\\}\\)\/index.html.\u201d Thus, the parameter \u201c513\u201d is returned if the Request.QueryString function is applied. Parameters from a header request containing form data may be obtained, for example, by using a Request.Form (a variant of the Request.QueryString) function, which extracts parameter list from the form data. Additionally, a cookie file called cookie1 containing \u201cCatID=7&ItemID=2345\u201d parameters may be obtained by a variant Request.Cookies function. One skilled in the art will recognize that these functions can easily be created.","Lines 26 to 33 indicate to the dynamic content cache that if a URL request with a pattern starting with \u201chttp:\/\/www.MyAuction.com\/catItem.asp\u201d (obtained from lines 9, 10, and 26) is received by the dynamic content cache, the dependency rules listed in lines 29 to 32 are to be generated and attached with the received dynamic page (if no dependency rules are already encoded in the page). Thus, Table V above lists the dependencies, indicated by lines 29 to 32, generated by the dynamic content cache and attached to the requested dynamic page . It, particularly, shows the dependencies attached to the request \u201chttp:\/\/www.MyAuction.com\/catItems.asp?CatID=131\u201d  in .",{"@attributes":{"id":"p-0086","num":"0085"},"figref":["FIG. 7B","FIG. 7A","FIG. 7A","FIG. 7B","FIG. 7A"]},"The NonCacheableObjectList element, in lines 44 to 66, indicates to the dynamic content cache that certain URL requests are to be ignored and not cached. Referring to , the dynamic page  allows a seller to enter an item for auction. Once the seller enters the information and selects the \u201cOpen Auction!\u201d button , the parameters or input information entered are either appended as part of the URL request address or are passed to the origin server as HTTP form parameters. Because such a request is unique to that transaction, caching such a dynamic page is inefficient. In addition, dynamic pages that are used to change information in an underlying data source rather than used for viewing or display, are not good candidates for caching. Thus, line 45 of  explicitly tells the dynamic content cache to ignore such URL request pattern (i.e., \u201chttp:\/\/www.MyAuction.com\/createItem.asp\u201d). Other URL request patterns (lines 52 and 59) are also not cached by the dynamic content cache. Thus, if the dynamic content cache receives \u201chttp:\/\/www.MyAuction.website\/updateItem?ItemID=6113\u201d (see line 52) or a URL request \u201chttp:\/\/www.MyAuction.website\/placeBid.asp?CatID=131&ItemID=\u201d (see line 59), such page requests are ignored and not cached in the dynamic content cache memory. One skilled in the art will recognize that various other patterns of URL request may be indicated in the configuration file.","The EventRuleList element, found in line 46, instructs the dynamic content cache that whenever it receives a URL request with pattern, \u201chttp:\/\/www.MyAuction.website\/createItem.asp,\u201d the dynamic content cache is to generate change events (or events) listed in lines 48 and 49. In the preferred embodiment, these events are incorporated in an event message. An event message may contain one or more event rules, is preferably written in XML or HTML and has the format described in Table VIII below.",{"@attributes":{"id":"p-0089","num":"0088"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":{"entry":"TABLE VIII"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Event Message"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Ln","Event Message Syntax or Format"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["1","<EventMessage>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["2",{},"<EventGroup webSiteID=URL eventSource=SourceID time=date-time>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["3",{},"<EventRule>event-name(parameter-name=value, . . .)<\/EventRule>"]},{"entry":["4",{},"<EventRule>event-name(parameter-name=value, . . .)<\/EventRule>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["5",{},"<\/EventGroup>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["6","<\/EventMessage>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"1116","figref":"FIG. 11"},"If the URL request \u201chttp:\/\/www.MyAuction.com\/createItem.asp?Seller=193682\u201d  in  is received by the dynamic content cache, an event message containing two events, \u201c<EventRule>AuctionStatus(CatID=131)<\/EventRule>\u201d and \u201c<EventRule>ItemAdd(CatID=)<\/EventRule>\u201d (, lines 48 and 49) are generated. This means that Web pages dependent on having no items added to their \u201c131\u201d category or dependent on having no status change for items in the \u201c131\u201d category are now invalid. Consequently,  is invalidated by such event. Referring to Table V, which contains the dependencies of dynamic page  (), the events generated by URL request  in  (mentioned in this paragraph) matches the dependencies for . The content of the first event, \u201cAuctionStatus(CatID=131)\u201d matches the dependency of the dynamic page , \u201cAuctionStatus (CatID=131)\u201d (Table V, line 1), and the second event \u201cItemAdd(CatID=131)\u201d matches the dependency of page  (Table V, line 4).","If a URL request starting with the string \u201chttp:\/\/www.MyAuction.website\/updateItem.asp\u201d is received, such as \u201chttp:\/\/www.MyAuction.website\/updateItem.asp? Item=6113\u201d (which is a Web page that enables a seller to update the title of the auction item), using lines 55 and 56 of the configuration file, , an event message illustrated in Table IX is generated.",{"@attributes":{"id":"p-0092","num":"0091"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE IX"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Sample Event Message"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Line","Event Message"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["1","<EventMessage>"]},{"entry":["2","<EventGroup webSiteID=\u201chttp:\/www.MyAuction.com\u201d"]},{"entry":[{},"eventSource=\u201cdynamicproxy.MyAuction.com\u201d"]},{"entry":[{},"time=\u201c2000\/04\/01\/15:13:32:287 PST\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["3",{},"<EventRule>ItemChange(CatID=131)<\/EventRule>"]},{"entry":["4",{},"<EventRule>ItemChange(ItemID=6113)<\/EventRule>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["5",{},"<\/EventGroup>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["6","<\/EventMessage>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The events listed in lines 3 and 4 indicate that cached dynamic pages are now invalid if they are dependent on having no change made (i.e., no change to the title field) to the particular item, \u201c6113\u201d (Card D set) or on having no change to the title of any items in the \u201c131\u201d category. The event in line 3 of Table IX, \u201cItemChange(CatID=131),\u201d also invalidates the dependency of dynamic page , because page  has a dependency also called \u201cItemChange(CatID=131)\u201d (Table V line 3). The EventSource and Time parameters in line 1 are optional items. One skilled in the art will recognize that other information may be added to the event message.","The configuration file may also contain information on when events are not to be generated. Line 54 of , \u201c<DoNotSendIf regexp=\u201cgenericError\u201d\/>, indicates that the event message listed in Table IX is not to be generated if the page requested contains the \u201cAn error has occurred\u201d expression. The \u201cgenericError\u201d variable contains the \u201cAn error has occurred\u201d expression as shown in  line 23.","In the preferred embodiment, each event name, either for dependencies or for events, includes a criteria parameter. In addition, it is preferred that all of the cached dynamic pages, including their dependencies, be indexed not only by their dependencies but also by their URL address (either partial or complete) so that the collection of pages with a dependency that matches a given event may be quickly derived.","One skilled in the art will also recognize that the dependencies and events may be modified such that additional data are passed to the dynamic content cache. For example, events and\/or dependencies may be modified to include the updated information, which particular record, field, or item was changed, the old data and the updated data, and the like. Furthermore, one skilled in the art will recognize that the dependencies and events may be denoted in many ways depending on implementation; for example, the dependency \u201cItemChange(CatID=131)\u201d may be denoted as a unique identification number, \u201cA11.\u201d Moreover, the name of the elements may be altered or replaced (e.g., \u201cNonCacheableObject\u201d may be changed to \u201cEventObject\u201d) without affecting the features of the present invention.","One skilled in the art will recognize that additional information may also be added to the configuration file to give the dynamic content cache more flexibility. For example, the configuration file may contain elements that indicate to the dynamic content cache which URL pages are to be deleted from cache on a specific day, or it may also contain elements containing special file extensions indicating to the dynamic content cache all dynamic pages generated for such Web site. One skilled in the art will also recognize that changing the configuration file is simple to do (e.g., by just adding, deleting, or modifying elements on the configuration file).",{"@attributes":{"id":"p-0098","num":"0097"},"figref":["FIG. 8","FIG. 8"],"b":["802","802","804","830","806","808"]},"In the preferred embodiment, the dynamic content cache  includes a Request-based dependency generator , cache memory , change event evaluator , and Request-based event generator . The cache memory  stores the dynamic pages, indices to cached pages, indices to dependencies, configuration file, and other information necessary for operating the dynamic content cache. The cache memory also includes not only random access memory (RAM) but also more permanent physical media, such as hard disk drives. It should be understood that the remaining components , , and  represent the functional blocks of the cache controller described above in conjunction with . The architecture of the cache controller  supports the dynamic page cache in accordance with the invention.","The Request-Based dependency generator  generates dependency using the URL request. In accordance with the present invention, a configuration file is used in conjunction with the dynamic content cache to generate such dependencies. (The Request-based dependency generator is discussed in detail below).","The change event evaluator  receives event messages and based on such event messages, particularly, the events received, updates the cache memory by refreshing or deleting cached dynamic pages no longer valid and updating the necessary indices, if appropriate. The event evaluator is further discussed in detail below.","The Request-based event generator , sits in-process with the dynamic cache, and generates events based on URLs that are received and served by the dynamic cache. The events are typically contained in an event message. The Request-Based event generator  is further discussed below.","In the preferred embodiment, events via event messages are communicated such that they do not overly tax the computing resources of the dynamic cache controller. Therefore, they are handled such that they have very low overhead, are asynchronous, and one-way in transmission to the change event evaluator . The architecture of a change event evaluator  is such that it receives event information and provides a cache controller that does not require code generation or modification when a new event type is added to the system. This keeps the dynamic content cache system as dynamic and flexible as possible. The system also provides reliable delivery, meaning that each change event data is either delivered successfully, or the sender is notified that the transmission failed.","The preferred embodiment supports dependency generation in two ways: through a Request-Based dependency generator  and through a script-based dependency generator . Generally, the Request-based dependency generator  generates dependencies based on the URL requests received. URL request patterns for dependency generation are contained in the configuration file. For example,  lines 29 to 32 are the dependency rules to be associated to such URL requests having the pattern \u201chttp:\/\/www.MyAuction.com\/catItems.asp\u201d (see lines 9, 10, and 26 of ).",{"@attributes":{"id":"p-0105","num":"0104"},"figref":"FIG. 9","b":["810","900","901","902","812","904","904","918"]},"If the dynamic page for the URL request is not found in cache, a \u201cno\u201d outcome at the decision box , the URL request is delegated to the origin server to be satisfied at step . Once the dynamic content cache receives the requested dynamic page, it checks if the configuration file contains dependency rules in step . (In the preferred embodiment, when dependency rules are contained in the configuration file, dependencies are not encoded in the dynamic page during the page generation process.) If dependencies are not found, that is, the dependencies are already encoded in the dynamic page received, (a \u201cno\u201d outcome at decision box ), the dynamic content cache stores in cache the dynamic page received in step . A copy of the requested dynamic page is then sent to the requesting user at step .","Typically the dynamic page is stored, including the page's URL address, to facilitate retrieval in case the dynamic content cache receives a future request for the exact dynamic page. For example, the complete URL address \u201chttp:\/\/www.MyAuction.com\/catItems.asp?CatID=131\u201d is stored associating it with the corresponding dynamic page, so that future URL requests asking for such URL or dynamic page may easily be satisfied by getting a copy from cache rather than delegating the request to the origin server. Dynamic pages are not only stored containing dependencies but are stored and indexed in such as a way so that files having a particular dependency or having a particular URL address are easily found. One skilled in the art will recognize that the dependency rules need not necessarily be stored in the same file containing the dynamic page. It could be stored in a separate file or an in-process data structure as long as such dependency rules may be associated to that dynamic page.","Referring back to , if dependency rules are found in the configuration file, a \u201cyes\u201d outcome at the decision box , the Request-based dependency generator  generates dependencies based on the dependency rules contained in the configuration file in step . This configuration file was read earlier by the Request-based dependency generator in step . For example, if the URL request  found in  is received by the dynamic content cache (\u201chttp:\/\/www.myAuction.com\/catItems.asp?CatID=131\u201d), the appropriate dependencies , shown in Table VI, are generated based on lines 29 to 32 (in ) of the configuration file. These generated dependencies are then associated with the dynamic page received (step ) and then stored in cache at step . The dynamic content cache then sends the requested dynamic page to the user at step .","One skilled in the art will also recognize that instead of determining whether the configuration file contains dependency rules, as shown in step , the system may check if the dynamic page received contains encoded or embedded dependencies and accordingly generate dependencies only if no encoded dependencies are found in the received dynamic page.","The second way of generating dependencies is via a script-based dependency generator  (shown in ), which sits in-process with the page generator. In accordance with the present invention, scripts generating the dynamic pages (within the page generator) are modified such that dependencies are generated and embedded within the dynamic page generated. Table X is an example of dependencies appended at the end of a Web page.",{"@attributes":{"id":"p-0111","num":"0110"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE X"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Dependencies attached to end of dynamic page 600 in FIG. 6A"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Ln","Dependency Rules"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["1","<!\u2014DynamicProxy"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["2",{},"<DependencyRule>AuctionStatus(CatID=131) <\/DependencyRule>"]},{"entry":["3",{},"<DependencyRule>Bid(CatID=131)<\/DependencyRule>"]},{"entry":["4",{},"<DependencyRule>ItemChange(CatID=131)<\/DependencyRule>"]},{"entry":["5",{},"<DependencyRule>ItemAdd(CatID=131)<\/DependencyRule>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["6","\u2014>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The dynamic content cache looks for dependencies within specially delimited comments (lines 1 and 6) as shown in Table X. In the preferred embodiment, the dependencies are formatted, using HTML or XML, as a comment at the end of the generated page. One skilled in the art will also realize that Web pages that are not generated but manually marked-up or coded may also be appended with appropriate dependencies and accordingly be processed and cached by the present invention.","Referring back to , in accordance with the present invention, events are generated in a number of ways. Typically, because dynamic Web pages are based on dynamic data obtained from databases, changes in the data contained in the databases are usually considered as events. Examples of such events include but are not limited to, a database insert (e.g., an item is added to be auctioned), a database update (e.g. an item's title is changed), or a database deletion (e.g., item no longer available). The preferred embodiment supports Request-based event  generation, trigger-based event generation , polling event generation  from a DBMS (database management system), script-based event generation , and custom event generation .",{"@attributes":{"id":"p-0114","num":"0113"},"figref":["FIG. 10A","FIGS. 7A and 7B","FIG. 10A","FIG. 7B"],"b":["818","818","1002","1004","1006","816","1008"]},"The DBMS trigger-based generator , in , sits in-process with the DBMS  in databases that support triggers that are capable of sending messages to external programs. A trigger is an action that causes a procedure to be carried out automatically when a user attempts to modify data. In some database systems, such triggers may call external programs, such as an Event API (application program interface) that sends event messages to the change event evaluator . This implementation requires that triggers be created or modified such that the necessary events are generated and sent to the change event evaluator  when certain database change occurs. The trigger-based generator  may also be implemented using a configuration file describing simple trigger-to-event mappings, and describing URL patterns, if necessary.","The polling event generator  is preferably a process separate from the DBMS that polls the relevant tables for changes. This type of event generator is preferred for use in situations where the addition of triggers to the database is not possible. It is preferred that a configuration file be used which indicates the data changes to be monitored, including the events to be generated and incorporated into an event message. The polling event generator  is a software program that monitors changes on specific data, and, based on those changes, sends event messages containing events to the change event evaluator .","The script-based event generator  is a script-accessible component that generates events that correspond to URL patterns defined in the configuration file. Alternatively, the script-based dependency generator  is preferably a script-accessible component that has methods for recognizing events as the code encounters them, as well as a method that codes the dependencies as a formatted HTML or XML comment at the end of the generated page. The script-based dependency generator components sit in-process with the origin dynamic content server. Typically, this involves modifying the script(s) used in page generation such that when changes to databases or files are executed, a corresponding event message containing events is sent to the change event evaluator . What events are to be generated may be hard-coded into the script itself, rather than indicating it in the configuration file (e.g., , lines 48 to 49, lines 55 to 56, and lines 62 and 63). However, for flexibility, the preferred embodiment is to have a configuration file indicating information to be monitored, including the appropriate events that have to be sent to the change event evaluator .","Finally, the custom event generator  is a software program that monitors changes in other data layouts or formats, or in conditions not covered by the above event generators. It may use a configuration file to indicate which particular data are to be monitored. In addition, a custom event generator  may support other event sources. In that case, an Application Programming Interface (API) is provided that facilitates the development of custom generators. In this way, a generator may be developed for any situation that might arise. The custom event generator is typically a software program written to monitor changes in specified data source and based on those changes, generate event messages to be sent to the change event evaluator .","One skilled in the art will recognize that depending on how events are generated, or the system implementation and design, the configuration file will vary for each event source.",{"@attributes":{"id":"p-0120","num":"0119"},"figref":["FIG. 10B","FIG. 8"],"b":["816","812","816","1010","1010","812","1012","1014","1016"]},{"@attributes":{"id":"p-0121","num":"0120"},"figref":"FIG. 11","b":["1100","202","206","208","210","222","226","300","1100","1102","1112","1110","1100","1104","1106","1114","1116","1100","1120","1108","1118"]},"The CPU  operates under control of programming steps that are temporarily stored in the memory  of the computer . When the programming steps are executed, the pertinent system component performs its functions. Thus, the programming steps implement the functionality of the system components illustrated in . The programming steps can be received from the DASD , through the program product , or through the network connection . The storage drive  can receive a program product, read programming steps recorded thereon, and transfer the programming steps into the memory  for execution by the CPU . As noted above, the program product storage device can comprise any one of multiple removable media having recorded computer-readable instructions, including magnetic floppy disks, CD-ROM, and DVD storage discs. Other suitable program product storage devices can include magnetic tape and semiconductor memory chips. In this way, the processing steps necessary for operation in accordance with the invention can be embodied on a program product.","Alternatively, the program steps can be received into the operating memory  over the network . In the network method, the computer receives data including program steps into the memory  through the network interface  after network communication has been established over the network connection  by well-known methods that will be understood by those skilled in the art without further explanation. The program steps are then executed by the CPU  to implement the processing of the present invention.","It should be understood that all of the computers of the systems  and  illustrated in  preferably have a construction similar to that shown in , so that details described with respect to the  computer  will be understood to apply to all computers of the systems  and . Any of the computers can have an alternative construction, so long as they can communicate with the other computers and support the functionality described herein.","One skilled in the art will recognize that variations in the steps, as well as the order of execution, may be done and still make the invention operate in accordance with the features of the invention. Furthermore, one skilled in the art will realize that although the examples described herein generally refer to dynamic pages that are programmatically generated, static Web pages or manually coded Web pages may also be cached by the present invention following the operative steps and logic described herein.","The present invention has been described above in terms of a presently preferred embodiment so that an understanding of the present invention can be conveyed. There are, however, many configurations for network cache systems not specifically described herein but with which the present invention is applicable. The present invention should therefore not be seen as limited to the particular embodiments described herein, but rather, it should be understood that the present invention has wide applicability with respect to network cache systems generally. All modifications, variations, or equivalent arrangements and implementations that are within the scope of the attached claims should therefore be considered within the scope of the invention."],"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENT"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 2A and 2B"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 3","FIGS. 2A and 2B"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 4","FIGS. 2A and 2B"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIGS. 5A and 5B","FIGS. 2A and 2B"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 6A","b":["6","6"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIGS. 7A and 7B"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIGS. 10A and 10B"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 11","FIGS. 2A and 2B"]}]},"DETDESC":[{},{}]}
