---
title: Attestation key memory device and bus
abstract: In an embodiment of the present invention, a technique is provided for remote attestation. An interface maps a device via a bus to an address space of a chipset in a secure environment for an isolated execution mode. The secure environment is associated with an isolated memory area accessible by at least one processor. The at least one processor operates in one of a normal execution mode and the isolated execution mode. A communication storage corresponding to the address space allows the device to exchange security information with the at least one processor in the isolated execution mode in a remote attestation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07013481&OS=07013481&RS=07013481
owner: Intel Corporation
number: 07013481
owner_city: Santa Clara
owner_country: US
publication_date: 20000331
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION","Architecture Overview","Attestation Key Memory (AKM) Device and Bus"],"p":["1. Field of the Invention","This invention relates to microprocessors. In particular, the invention relates to processor security.","2. Description of Related Art","Advances in microprocessor and communication technologies have opened up many opportunities for applications that go beyond the traditional ways of doing business. Electronic commerce (E-commerce) and business-to-business (B2B) transactions are now becoming popular, reaching the global markets at a fast rate. Unfortunately, while modern microprocessor systems provide users convenient and efficient methods of doing business, communicating and transacting, they are also vulnerable to unscrupulous attacks. Examples of these attacks include virus, intrusion, security breach, and tampering, to name a few. Computer security, therefore, is becoming more and more important to protect the integrity of the computer systems and increase the trust of users.","Threats caused by unscrupulous attacks may be in a number of forms. Attacks may be remote without requiring physical accesses. An invasive remote-launched attack by hackers may disrupt the normal operation of a system connected to thousands or even millions of users. A virus program may corrupt code and\/or data of a single-user platform.","Existing techniques to protect against attacks have a number of drawbacks. Anti-virus programs can only scan and detect known viruses. Most anti-virus programs use a weak policy in which a file or program is assumed good until proved bad. For many security applications, this weak policy may not be appropriate. In addition, most anti-virus programs are used locally where they are resident in the platform. This may not be suitable in a group work environment. Security co-processors or smart cards using cryptographic or other security techniques have limitations in speed performance, memory capacity, and flexibility. Redesigning operating systems creates software compatibility issues and causes tremendous investment in development efforts.","In the following description, for purposes of explanation, numerous details are set forth in order to provide a thorough understanding of the present invention. However, it will be apparent to one skilled in the art that these specific details are not required in order to practice the present invention. In other instances, well-known electrical structures and circuits are shown in block diagram form in order not to obscure the present invention.","One principle for providing security in a computer system or platform is the concept of an isolated execution architecture. The isolated execution architecture includes logical and physical definitions of hardware and software components that interact directly or indirectly with an operating system of the computer system or platform. An operating system and the processor may have several levels of hierarchy, referred to as rings, corresponding to various operational modes. A ring is a logical division of hardware and software components that are designed to perform dedicated tasks within the operating system. The division is typically based on the degree or level of privilege, namely, the ability to make changes to the platform. For example, a ring- is the innermost ring, being at the highest level of the hierarchy. Ring- encompasses the most critical, privileged components. In addition, modules in Ring- can also access to lesser privileged data, but not vice versa. Ring- is the outermost ring, being at the lowest level of the hierarchy. Ring- typically encompasses users or applications level and has the least privilege. Ring- and ring- represent the intermediate rings with decreasing levels of privilege.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1A","b":["50","50","50","0","10","1","20","2","30","3","40","52","52","50","50","52"]},"Ring-  includes two portions: a normal execution Ring-  and an isolated execution Ring- . The normal execution Ring-  includes software modules that are critical for the operating system, usually referred to as kernel. These software modules include primary operating system (e.g., kernel) , software drivers , and hardware drivers . The isolated execution Ring-  includes an operating system (OS) nub  and a processor nub . The OS nub  and the processor nub  are instances of an OS executive (OSE) and processor executive (PE), respectively. The OSE and the PE are part of executive entities that operate in a secure environment associated with the isolated area  and the isolated execution mode. The processor nub loader  is a protected bootstrap loader code held within a chipset in the system and is responsible for loading the processor nub  from the processor or chipset into an isolated area as will be explained later.","Similarly, ring- , ring- , and ring-  include normal execution ring- , ring- , ring- , and isolated execution ring- , ring- , and ring- , respectively. In particular, normal execution ring- includes N applications to and isolated execution ring- includes K applets to  .","One concept of the isolated execution architecture is the creation of an isolated region in the system memory, referred to as an isolated area, which is protected by both the processor and chipset in the computer system. The isolated region may also be in cache memory, protected by a translation look aside (TLB) access check. Access to this isolated region is permitted only from a front side bus (FSB) of the processor, using special bus (e.g., memory read and write) cycles, referred to as isolated read and write cycles. The special bus cycles are also used for snooping. The isolated read and write cycles are issued by the processor executing in an isolated execution mode. The isolated execution mode is initialized using a privileged instruction in the processor, combined with the processor nub loader . The processor nub loader  verifies and loads a ring- nub software module (e.g., processor nub ) into the isolated area. The processor nub  provides hardware-related services for the isolated execution.","One task of the processor nub  is to verify and load the ring- OS nub  into the isolated area, and to generate the root of a key hierarchy unique to a combination of the platform, the processor nub , and the operating system nub . The operating system nub  provides links to services in the primary OS  (e.g., the unprotected segments of the operating system), provides page management within the isolated area, and has the responsibility for loading ring- application modules , including applets to , into protected pages allocated in the isolated area. The operating system nub  may also load ring- supporting modules.","The operating system nub  may choose to support paging of data between the isolated area and ordinary (e.g., non-isolated) memory. If so, then the operating system nub  is also responsible for encrypting and hashing the isolated area pages before evicting the page to the ordinary memory, and for checking the page contents upon restoration of the page. The isolated mode applets to and their data are tamper-resistant and monitor-resistant from all software attacks from other applets, as well as from non-isolated-space applications (e.g., to ), dynamic link libraries (DLLs), drivers and even the primary operating system . Only the processor nub  or the operating system nub  can interfere with or monitor the applet's execution.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1B","b":["10","0","10","3","40","50","60"]},"The accessible physical memory  includes an isolated area  and a non-isolated area . The isolated area  includes applet pages  and nub pages . The non-isolated area  includes application pages  and operating system pages . The isolated area  is accessible only to elements of the operating system and processor operating in isolated execution mode. The non-isolated area  is accessible to all elements of the ring- operating system and to the processor.","The normal execution ring-  including the primary OS , the software drivers , and the hardware drivers , can access both the OS pages  and the application pages . The normal execution ring-, including applications to , can access only to the application pages . Both the normal execution ring-  and ring- , however, cannot access the isolated area .","The isolated execution ring- , including the OS nub  and the processor nub , can access to both of the isolated area , including the applet pages  and the nub pages , and the non-isolated area , including the application pages  and the OS pages . The isolated execution ring- , including applets to can access only to the application pages  and the applet pages . The applets to reside in the isolated area .",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1C","b":["100","100","110","120","130","140","150","160","170","175","180","182","184","186","130","150","130","100"]},"The processor  represents a central processing unit of any type of architecture, such as complex instruction set computers (CISC), reduced instruction set computers (RISC), very long instruction word (VLIW), or hybrid architecture. In one embodiment, the processor  is compatible with an Intel Architecture (IA) processor, such as the Pentium\u2122 series, the IA-32\u2122 and the IA-64\u2122. The processor  includes a normal execution mode  and an isolated execution circuit . The normal execution mode  is the mode in which the processor  operates in a non-secure environment, or a normal environment without the security features provided by the isolated execution mode. The isolated execution circuit  provides a mechanism to allow the processor  to operate in an isolated execution mode. The isolated execution circuit  provides hardware and software support for the isolated execution mode. This support includes configuration for isolated execution, definition of an isolated area, definition (e.g., decoding and execution) of isolated instructions, generation of isolated access bus cycles, and generation of isolated mode interrupts.","In one embodiment, the computer system  can be a single processor system, such as a desktop computer, which has only one main central processing unit, e.g. processor . In other embodiments, the computer system  can include multiple processors, e.g. processors , , , etc., as shown in . Thus, the computer system  can be a multi-processor computer system having any number of processors. For example, the multi-processor computer system  can operate as part of a server or workstation environment. The basic description and operation of processor  will be discussed in detail below. It will be appreciated by those skilled in the art that the basic description and operation of processor  applies to the other processors and , shown in , as well as any number of other processors that may be utilized in the multi-processor computer system  according to one embodiment of the present invention.","The processor  may also have multiple logical processors. A logical processor, sometimes referred to as a thread, is a functional unit within a physical processor having an architectural state and physical resources allocated according to some partitioning policy. Within the context of the present invention, the terms \u201cthread\u201d and \u201clogical processor\u201d are used to mean the same thing. A multi-threaded processor is a processor having multiple threads or multiple logical processors. A multi-processor system (e.g., the system comprising the processors , , and ) may have multiple multi-threaded processors.","The host bus  provides interface signals to allow the processor  or processors , , and to communicate with other processors or devices, e.g., the MCH . In addition to normal mode, the host bus  provides an isolated access bus mode with corresponding interface signals for memory read and write cycles when the processor  is configured in the isolated execution mode. The isolated access bus mode is asserted on memory accesses initiated while the processor  is in the isolated execution mode. The isolated access bus mode is also asserted on instruction pre-fetch and cache write-back cycles if the address is within the isolated area address range and the processor  is initialized in the isolated execution mode. The processor  responds to snoop cycles to a cached address within the isolated area address range if the isolated access bus cycle is asserted and the processor  is initialized into the isolated execution mode.","The MCH  provides control and configuration of memory and input\/output devices such as the system memory  and the ICH . The MCH  provides interface circuits to recognize and service isolated access assertions on memory reference bus cycles, including isolated memory read and write cycles. In addition, the MCH  has memory range registers (e.g., base and length registers) to represent the isolated area in the system memory . Once configured, the MCH  aborts any access to the isolated area that does not have the isolated access bus mode asserted.","The system memory  stores system code and data. The system memory  is typically implemented with dynamic random access memory (DRAM) or static random access memory (SRAM). The system memory  includes the accessible physical memory  (shown in ). The accessible physical memory includes a loaded operating system , the isolated area  (shown in ), and an isolated control and status space . The loaded operating system  is the portion of the operating system that is loaded into the system memory . The loaded OS  is typically loaded from a mass storage device via some boot code in a boot storage such as a boot read only memory (ROM). The isolated area , as shown in , is the memory area that is defined by the processor  when operating in the isolated execution mode. Access to the isolated area  is restricted and is enforced by the processor  and\/or the MCH  or other chipset that integrates the isolated area functionalities. The isolated control and status space  is an input\/output (I\/O)-like, independent address space defined by the processor  and\/or the MCH . The isolated control and status space  contains mainly the isolated execution control and status registers. The isolated control and status space  does not overlap any existing address space and is accessed using the isolated bus cycles. The system memory  may also include other programs or data which are not shown.","The ICH  represents a known single point in the system having the isolated execution functionality. For clarity, only one ICH  is shown. The system  may have many ICH's similar to the ICH . When there are multiple ICH's, a designated ICH is selected to control the isolated area configuration and status. In one embodiment, this selection is performed by an external strapping pin. As is known by one skilled in the art, other methods of selecting can be used, including using programmable configuring registers. The ICH  has a number of functionalities that are designed to support the isolated execution mode in addition to the traditional I\/O functions. In particular, the ICH  includes an isolated bus cycle interface , the processor nub loader  (shown in ), a digest memory , a cryptographic key storage , an isolated execution logical processor manager , and a token bus interface .","The isolated bus cycle interface  includes circuitry to interface to the isolated bus cycle signals to recognize and service isolated bus cycles, such as the isolated read and write bus cycles. The processor nub loader , as shown in , includes a processor nub loader code and its digest (e.g., hash) value. The processor nub loader  is invoked by execution of an appropriate isolated instruction (e.g., Iso_Init) and is transferred to the isolated area . From the isolated area , the processor nub loader  copies the processor nub  from the system flash memory (e.g., the processor nub code  in non-volatile memory ) into the isolated area , verifies and logs its integrity, and manages a symmetric key used to protect the processor nub's secrets. In one embodiment, the processor nub loader  is implemented in read only memory (ROM). For security purposes, the processor nub loader  is unchanging, tamper-resistant and non-substitutable. The digest memory , typically implemented in RAM, stores the digest (e.g., hash) values of the loaded processor nub , the operating system nub , and any other critical modules (e.g., ring- modules) loaded into the isolated execution space. The cryptographic key storage  holds a symmetric encryption\/decryption key that is unique for the platform of the system . In one embodiment, the cryptographic key storage  includes internal fuses that are programmed at manufacturing. Alternatively, the cryptographic key storage  may also be created with a random number generator and a strap of a pin. The isolated execution logical processor manager  manages the operation of logical processors operating in isolated execution mode. In one embodiment, the isolated execution logical processor manager  includes a logical processor count register that tracks the number of logical processors participating in the isolated execution mode. The token bus interface  interfaces to the token bus . A combination of the processor nub loader digest, the processor nub digest, the operating system nub digest, and optionally additional digests, represents the overall isolated execution digest, referred to as isolated digest. The isolated digest is a fingerprint identifying the ring- code controlling the isolated execution configuration and operation. The isolated digest is used to attest or prove the state of the current isolated execution.","The non-volatile memory  stores non-volatile information. Typically, the non-volatile memory  is implemented in flash memory. The non-volatile memory  includes the processor nub . The processor nub  provides the initial set-up and low-level management of the isolated area  (in the system memory ), including verification, loading, and logging of the operating system nub , and the management of the symmetric key used to protect the operating system nub's secrets. The processor nub  may also provide application programming interface (API) abstractions to low-level security services provided by other hardware. The processor nub  may also be distributed by the original equipment manufacturer (OEM) or operating system vendor (OSV) via a boot disk.","The mass storage device  stores archive information such as code (e.g., processor nub ), programs, files, data, applications (e.g., applications to ), applets (e.g., applets to ) and operating systems. The mass storage device  may include compact disk (CD) ROM , floppy diskettes , and hard drive , and any other magnetic or optical storage devices. The mass storage device  provides a mechanism to read machine-readable media. When implemented in software, the elements of the present invention are the code segments to perform the necessary tasks. The program or code segments can be stored in a processor readable medium or transmitted by a computer data signal embodied in a carrier wave, or a signal modulated by a carrier, over a transmission medium. The \u201cprocessor readable medium\u201d may include any medium that can store or transfer information. Examples of the processor readable medium include an electronic circuit, a semiconductor memory device, a ROM, a flash memory, an erasable programmable ROM (EPROM), a floppy diskette, a compact disk CD-ROM, an optical disk, a hard disk, a fiber optical medium, a radio frequency (RF) link, etc. The computer data signal may include any signal that can propagate over a transmission medium such as electronic network channels, optical fibers, air, electromagnetic, RF links, etc. The code segments may be downloaded via computer networks such as the Internet, an Intranet, etc.","I\/O devices  may include any I\/O devices to perform I\/O functions. Examples of I\/O devices  include a controller for input devices (e.g., keyboard, mouse, trackball, pointing device), media card (e.g., audio, video, graphics), a network card, and any other peripheral controllers.","The token bus  provides an interface between the ICH  and various tokens in the system. A token is a device that performs dedicated input\/output functions with security functionalities. A token has characteristics similar to a smart card, including at least one reserved-purpose public\/private key pair and the ability to sign data with the private key. Examples of tokens connected to the token bus  include a motherboard token , a token reader , and other portable tokens  (e.g., smart card). The token bus interface  in the ICH  connects through the token bus  to the ICH  and ensures that when commanded to prove the state of the isolated execution, the corresponding token (e.g., the motherboard token , the token ) signs only valid isolated digest information. For purposes of security, the token should be connected to the digest memory.","In an embodiment of the present invention, a technique is provided for remote attestation. The remote attestation is performed by a device operating in a remote manner with respect to the MCH  and the ICH  (). Examples of this device include one of the tokens . This device is referred to as an attestation key memory (AKM) device. This remote attestation is performed by using a public-private key pair to attest that the isolated execution mode is running with a particular software configuration. Depending on the need of the software utilizing the attestation, the results can be bonded to the platform embodying the secure environment such that future attestation is not required unless there is a significant change in the software configuration. The AKM device contains one or more key pair and may be inserted into the platform by the end user needed to perform the attestation.","The AKM device provide a simple model for users to understand when there are privacy and anonymity issues. It produces a tangible device that can be used to draw attention to the otherwise obscure investment going into security. In addition, the AKM device offers some advantages and benefits over a non-pluggable device approach.","The benefits of using an AKM device includes: distribution of the private key, replacement or removal of the private key if desired, usage of more than one key if desired, remote verification of software on an unknown machine by a remote server, provision of value-added features via the interface bus (e.g., the token bus  shown in ).","In an embodiment of the present invention, an interface maps a device (e.g., the AKM device) via a bus (e.g., the token bus  shown in ) to an address space of a chipset (e.g., the ICH  shown in ) in a secure environment for an isolated execution mode. The secure environment is associated with an isolated memory area accessible by at least one processor. The at least one processor operates in one of a normal execution mode and the isolated execution mode. A communication storage corresponding to the address space allows the device to exchange security information with the at least one processor in the isolated execution mode in a remote attestation.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 2","FIG. 1C"],"b":["159","159","210","220","270"]},"The interface  provides an interface between an external device (e.g., the tokens  shown in ) coupled to the token bus  ( and the chipset (e.g., the ICH ). The interface  includes a decoder . The decoder  decodes the address space onto the bus  so that an access to the chipset is passed to the device. Typically the address space is a subset of the address space of the chipset . In addition, the decoder  allows the device  to access the chipset storage .","The communication storage  is mapped to the address space and allows the device  to exchange security information with the chipset  or the processor . The communication storage  includes a configuration storage , a status register , a command register , and an input\/output block (IOB) . The configuration storage  stores configuration information . The status register  stores device status . The command register  stores device command . The IOB  stored input data  and output data .","The chipset storage  stores chipset information such as the system digest in the digest memory  (). In particular, the chipset storage  includes a processor nub loader hash , a chipset hash log , a software hash , and a nonce . The processor nub loader hash  and the chipset hash log  can be read directly by the AKM device  and cannot be intercepted by the running software. The software hash  and the nonce  are provided by the processor nub  ().",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 3","FIG. 2"],"b":["230","230","310","320","330","340","350","230"]},"The manufacturer identifier  identifies the manufacturer of the AKM device . The revision identifier  provides a revision number of the AKM device . The interface set identifier  identifies the interface set that is supported by the device . The static public key  is a public key with a short key identification. The key certificate  is a key certificate with a short key identification.","The interface set identified by the interface set identifier  identifies may include an initialization set , an attestation set , and a device interface set . For a typical remote attestation, the initialization set  is needed. The initialization set  may be hardcoded and is used to reset and initialize the device. The initialization set  includes an idle state , a reset command , a connect command , and a reserved operation . The idle state  indicates that the device is not performing any meaningful operation and is idle. The reset command  causes the device to reset and perform a self-test operation. The connect command  sets the connect bit in the status register . The reserved operation  is to be reserved for other operations or commands or for non-implemented operation. A command that corresponds to the reserved operation  results in a \u201cnot-supported\u201d error.","The attestation set  includes a signing operation , a public key enumeration , and a key certificate enumeration . The signing operation  provides the remote attestation to verify the validity of the platform running a particular software in the secure environment. The public key enumeration  enumerates any additional public keys that are not part of the static configuration information  (shown in ). The key certificate enumeration  enumerates any additional key certificates that are not part of the static configuration information  (shown in ).","The device interface set  is any additional interface set that can be supported by the AKM device in addition to the initialization set  and the attestation set .","When the device receives a command, it performs the operation as specified. During this time, the device may update the status register to report any conditions. When the operation is completed, the device writes the result in the IOB , clears a time estimate in the status register (discussed below), and clears the command register. When the host processor  polls the command register, a zero value indicates the device is idle. The processor  then can check the status register  for any device fatal error. If there is no fatal error, the host then reads the results from the IOB .",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 4","FIG. 3"],"b":["372","372","410","420"]},"The hash function  performs hashing on the processor nub loader hash , the chipset hash log , the software hash , and the nonce . The result of this hashing operation is then encrypted by the cryptographic function  using the private key  stored in the chipset. The result of the encryption becomes the output data  to be stored in the IOB . When the signing operation  is complete, the processor nub  retrieves the result from the IOB .",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 5","FIG. 3"],"b":["240","510","520","530","540"]},"The self-test field  provides a result of the self-test operation in response to the reset command. The result may include a failure. When there is a failure, all results from the device are ignored. This failure code is typically reset by a reset command or a system reset. The connection field  indicates that the device is responsive to the connect command. The estimate field  provides an estimate in some time unit (e.g., milliseconds) to indicate how long a current operation is expected to take. For example, a value zero indicates that it is less the a millisecond to complete. The reserved field  is reserved for future use.","While this invention has been described with reference to illustrative embodiments, this description is not intended to be construed in a limiting sense. Various modifications of the illustrative embodiments, as well as other embodiments of the invention, which are apparent to persons skilled in the art to which the invention pertains are deemed to lie within the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The features and advantages of the present invention will become apparent from the following detailed description of the present invention in which:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1C"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 2","FIG. 1C"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 5","FIG. 3"]}]},"DETDESC":[{},{}]}
