---
title: Automatic adjustment of floating point output images
abstract: A system adjusts floating-point-valued images prior to conversion to a display signal so that the dynamic range of the display device is effectively used. Images are adjusted using transfer functions to create an adjusted image within the dynamic range of the display device. The adjusted image also has a frequency distribution of pixel values to maximize the perception of visual detail. The system generates transfer functions from statistical attributes of one or more images. The transfer functions are applied to images on the fly as they are converted into a display signal. The statistical attributes of the image are computed on the fly as it is converted into a display signal. A first transfer function is applied to an image to produce an adjusted image in parallel with the generation of a second transfer function to be applied to a future image.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07071947&OS=07071947&RS=07071947
owner: NVIDIA Corporation
number: 07071947
owner_city: Santa Clara
owner_country: US
publication_date: 20030724
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates to the field of computer graphics. The human visual system can perceive images with extraordinary fidelity under a wide variety of lighting conditions. Dynamic range is the difference between the dimmest light and the brightest light that the human visual system can differentiate under a given lighting condition. For example, light values below the lower threshold of the dynamic range will all be perceived as black, while light values above the upper threshold will all be perceived as white. As lighting conditions change, the human visual system quickly adapts its dynamic range to the lighting conditions to maximize the perception of visual information.","Many computer graphic images are created by mathematically modeling the interaction of light with a three dimensional scene from a given viewpoint. This process, called rendering, generates a two-dimensional image of the scene from the given viewpoint, and is analogous to taking a photograph of a real-world scene. As the demand for computer graphics, and in particular for real-time computer graphics, has increased, specialized hardware for accelerating the rendering process has become widespread.","Typical display devices, for example computer monitors, have a very limited dynamic range as compared to the human visual system. If the rendering process generates pixel values exceeding the dynamic range of the display device, the details of the resulting image will be either too bright or too dark to be displayed correctly, similar to an overexposed or underexposed photograph.","The problems associated with the limited dynamic range of display devices are exacerbated as real-time rendering applications shift to floating-point rendering from integer rendering. In floating point rendering, each pixel is represented by one or more floating-point formatted values. Floating point formatted numbers can represent numbers over a much wider range than similarly sized integer formatted numbers. This allows applications to use more complicated rendering algorithms and to avoid the numerical rounding errors introduced by successive calculations on integer valued pixels. Because floating-point rendering greatly increases the numerical range of pixel values, the limited dynamic range of display devices becomes an even greater burden.","To compensate for the limited dynamic range of display devices, the mathematical model used by the rendering software can be modified so that the pixel values of the rendered image fall within the dynamic range of the display device. However, this approach requires application developers to extensively fine-tune the lighting in each scene, and decreases the visual quality of the rendered images. Alternatively, the rendered images can be adjusted in software to remap the dynamic range of the image to the dynamic range of the display device. However, this approach can be computationally intensive, making it unsuitable for real-time rendering applications.","It is desirable for computer graphics hardware to automatically adjust floating-point valued images to the dynamic range of the display device. It is also desirable for this adjustment to be performed with minimal computational burden on the software application, and without the need to manually fine-tune the lighting for each scene.","An aspect of the present invention is to adjust floating-point-valued images prior to conversion to a display signal so that the dynamic range of the display device is effectively used. Floating-point valued images are adjusted using one or more transfer functions that establish a correspondence, or mapping, between floating point pixel values in an image having a first dynamic range and floating point pixel values in an adjusted image having a dynamic range within the dynamic range of the display device. A further aspect of the invention creates an adjusted image having a specified frequency distribution of pixel values to maximize the perception of visual detail. An additional aspect of the present invention generates transfer functions from statistical attributes of one or more floating point images.","In an embodiment, the mapping process is performed on the fly as a floating point image is converted into a display signal. In an additional embodiment, the statistical attributes of the floating point image are computed on the fly as a floating point image is converted into a display signal. In yet another embodiment, a first transfer function is applied to an image to produce an adjusted image in parallel with the generation of a second transfer function to be applied to a future image.","In an embodiment, a graphics processing system creates an image having floating point valued pixels in a first dynamic range and outputs image output data values having a second dynamic range. The system includes a transfer function memory adapted to store transfer function values, and a transfer function processing unit configured to create image output data values for each of the floating point valued pixels in accordance with the plurality of transfer function values. In an embodiment, the transfer function processing unit creates an image output data value based on at least two of the transfer function values. In a further embodiment, the transfer function processing unit creates an image output data value by interpolating at least two of the transfer function values.","In an additional embodiment, the system includes an image statistics unit configured to compute a statistical attribute from at least one image and a transfer function generation unit configured to generate transfer function values in response to the statistical attribute. The transfer function generation unit is further configured to store the transfer function values in the transfer function memory. In an embodiment, the image statistics unit is configured to compute a statistical attribute of a type selected from the group consisting of averages, means, medians, variances, and minimums and maximums. In an embodiment, the statistical attribute is histogram data corresponding to the relative frequencies of floating point valued pixels in the image having a value within one of a number of predetermined ranges.","In a further embodiment, the predetermined ranges are based on one or more exponent bits of a floating point valued pixel. In another embodiment, the image statistics units is configured to generate a statistical attribute from an image as the image is scanned out. In yet another embodiment, the transfer function values generated by the transfer function generation unit in response to a statistical attribute of a first image are applied to a second subsequent image. In a further embodiment, the image statistics unit is configured to compute a statistical attribute according to a user specified parameter.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["100","100","105","110","105","115","120","100","125","100","100","105","110","115","120","125","160"]},"A graphics subsystem  is further connected with data bus  and the components of the computer system . The graphics subsystem  includes a graphics processing unit (GPU)  and graphics memory. Graphics memory includes a display memory  (e.g., a frame buffer) used for storing pixel data for each pixel of an output image. Pixel data can be provided to display memory  directly from the CPU . Alternatively, CPU  provides the GPU  with data and\/or instructions defining the desired output images, from which the GPU  generates the pixel data of one or more output images. The data and\/or instructions defining the desired output images is stored in additional memory . In an embodiment, the GPU  generates pixel data for output images from instructions and data defining the geometry, lighting, shading, texturing, motion, and\/or camera parameters for a scene.","In another embodiment, display memory  and\/or additional memory  are part of memory  and is shared with the CPU . Alternatively, display memory  and\/or additional memory  is one or more separate memories provided for the exclusive use of the graphics subsystem . The graphics subsystem  periodically outputs pixel data for an image from display memory  and displayed on display device . Display device  is any device capable of displaying visual information in response to a signal from the computer system , including CRT, LCD, plasma, and OLED displays. Computer system  can provide the display device  with an analog or digital signal.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIGS. 2A and 2B","FIG. 2A"],"b":["200","205","210","215","200","205","210","215","200","200"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2B","b":["235","200","235","220","225","230","235","220","230","225","235","220","230","225"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3","b":["300","300","305","310","300","305","310","310"]},"Step  generates a transfer function from the dynamic range of the image. The transfer function establishes a correspondence, or mapping, between every floating point color component value in the dynamic range of the image and a value within the dynamic range of the display device. An embodiment of step  generates a single transfer function for the sets of color components in the image. An alternate embodiment of step  generates a separate transfer function for each of the sets of color components in the image. A third alternate embodiment generates one or more transfer functions to be applied to the color components in the image following a color space transformation.","In an embodiment, the transfer function defines a linear relationship between color component values in the dynamic range of the image (the image color component values) and the corresponding color component values in the dynamic range of the display device (the adjusted color component values). A linear transfer function can be defined by specifying the parameters of a linear equation, for example, A=S*I+B, where A is the adjusted color component value for a pixel, I is the image color component value for a pixel, S is a scaling or contrast value and B is a bias or average brightness value. In this embodiment, step  calculates the values of S and B for the image, such that the resulting adjusted values are within the dynamic range of the display device.","In an alternate embodiment, step  generates a transfer function that defines a non-linear relationship between the image color component values and the corresponding adjusted color component values. Step  can specify the parameters of a non-linear mathematical function, such as a quadratic or cubic function, to define this relationship. Alternatively, step  can specify the correspondence between the image color component values and the adjusted color component values at one or more specific points. The correspondence between image color component values and adjusted color component values at other points can be determined through linear or non-linear interpolation.","In a further embodiment, step  provides application input to be used in generating the transfer function. In an embodiment, application input is provided through one or more functions in an application programming interface (API). Examples of APIs are OpenGL\u2122 and DirectX\u2122. OpenGL\u2122 is a cross-platform standard API for 3D rendering and 3D hardware acceleration. Microsoft DirectX\u2122 is a Microsoft Windows-based API for running and displaying applications using multimedia elements such as full-color graphics, video, 3-D animation, and surround sound. Application input can specify the transfer function parameters directly, or in an alternate embodiment, the application input specifies the desired statistical properties of the final adjusted image. In the latter embodiment, the application input can specify desired statistical properties for the adjusted image such as minimum values, maximum values, averages, means, medians, variances, standard deviations, percentiles, histogram data, and\/or other statistical information. The application can specify any combination of desired statistical properties. In response to the desired statistical properties received in step  and the statistical information computed at step , step  generates a transfer function that results in an adjusted image having the desired statistical properties and is within the dynamic range of the display device.","Step  applies the transfer function generated in step  to the floating point image. If the transfer function is defined as the parameters of a linear equation, step  applies the linear equation to each of the image color component values in the image to create an adjusted image. If the transfer function is a non-linear mathematical function, step  applies the non-linear function to each of the image color component values in the image to create an adjusted image. When the transfer function is specified as the correspondence between the image color component values and the adjusted color component values at one or more specific points, step  computes the adjusted color component values for each pixel using the values for the specific points defined at step  and, if necessary, linear or non-linear interpolation.","Following the completion of step , step  displays the adjusted image on the display device. In an embodiment, the adjusted image is a floating point valued image, with each color component value within a predetermined numerical range, for example, 0.0 to 1.0. The predetermined numerical range corresponds to the dynamic range of the display device. At step , the pixels of the adjusted image are converted into a digital or analog display signal and communicated with the display device.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 4","b":["400","405","410"]},"Step  creates a histogram data structure by reading a pixel value in the floating point image and matching the pixel value to the appropriate bin. The value of the bin is then updated to include the matched pixel value in its count. The process is repeated for each pixel value in the floating point image. In an embodiment, the value of the bin is initialized to zero and then incremented by one for each pixel value matched to the bin. In an alternate embodiment, the value of the bin is scaled by the total number of pixel values in the image.","In a further embodiment, pixel values are matched to the appropriate bin using the exponent values of the pixels' floating point color components. In this embodiment, each bin is associated with a set of pixel values having one or more bits of their exponent values in common. Each pixel value is matched to the appropriate bin by comparing all or part of its exponent value to the exponent value associated with each bin. Using the exponent values of the pixel values to create the histogram data structure, as opposed to the entire floating point color component value, simplifies the matching process. The entire exponent value can be used to match pixel values, or just a portion of the exponent value. If the exponent value is a five bit binary number, all five exponent bits can be used to match pixel values to one of thirty-two (2) available bins. Alternatively, only higher order exponent bits can be used when less histogram data precision is needed. For example, the upper three bits of a five bit exponent value can be used to match pixel values to one of 8 (2) available bins.","Following the computation of the histogram data structure at step , step  generates image statistics from the histogram data. Examples of image statistics include minimum values, maximum values, averages, means, medians, variances, standard deviations, percentiles, histogram data, and\/or other statistical information. At step , the transfer function is computed by comparing the image statistics with the dynamic range of the display device and optionally the desired statistical properties of the final adjusted image. In an embodiment, the desired statistical properties for the adjusted image are specified by the application through an API. Step  outputs a transfer function for adjusting a floating point image to have the desired statistical properties and fall within the dynamic range of the display device.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 5","b":["500","500","505"]},"Example transfer function  is a linear mapping of the pixels values in the example image to the dynamic range of the display device. In this example, the dynamic range of the display device corresponds to a predetermined numerical range of 0.0 to 1.0. Pixel values in the example image are linearly mapped to the numerical range of 0.0 to 1.0.","Example transfer function  is another linear mapping of the pixel values in the example image to the dynamic range of the display device. Percentile indicator  defines a set of pixel values comprising 2% of the total number of pixels in the example floating point image. The pixels to the left of percentile indicator  represent 2% of the total number of pixel values in the example image. Percentile indicator  defines a set of pixel values comprising 98% of the total number of pixels in the example floating point image. The pixels to the left of percentile indicator  represent 98% of the total number of pixel values in the example image. In example transfer function , pixel values between the percentile indicators  and  are linearly mapped between the numerical range of 0.0 to 1.0. Pixel values outside of the percentile indicators  and  are clamped to 0.0 and 1.0, respectively. The percentiles assigned to percentile indicator can vary, and in an embodiment, can be specified directly by an application. Additional percentile indicators can be used to define other sets of pixel values, allowing for more complex linear or non-linear mappings.","Example transfer function  is another mapping of the pixel values in the example image to the dynamic range of the display device. Percentile indicators  and  are used to define three mapping regions: , , and . Pixel values in region , representing the lowest 2% of the total pixel values in the example image, are mapped between the numerical range of 0.0 to 0.05. Pixel values in region , representing pixel values greater than the lowest 2% of the pixel values and less than the highest 2% of the pixel values, are mapped between the numerical range of 0.05 and 0.95. Similarly, pixel values in region , representing pixel values in the highest 2% of the pixel values, are mapped between the numerical range of 0.95 and 1.0. The mapping of pixel values in example transfer function  can be either a piecewise linear mapping within each region, or alternatively a non-linear mapping, such as a quadratic or cubic curve fitted to all of the regions.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 6","b":"600"},"Method  reads a floating point valued image at step . At step , the method  analyzes the floating point color component values for the pixels of the image  to determine the dynamic range of the image. As discussed above, the dynamic range of an image may be defined by statistical properties such as minimum values, maximum values, averages, means, medians, variances, standard deviations, percentiles, histogram data, and\/or other statistical information. Embodiments of method  calculate the dynamic range of the image separately for each set of color components, or alternatively, using the average value of the color components for each pixel, using a color space transformation of the color components to derive an intensity value for each pixel, or using the value of only one of the color components of each pixel as representative of the pixel's overall intensity value.","Step  generates a transfer function from the dynamic range of the image. An embodiment of step  generates a single transfer function for the sets of color components in the image. An alternate embodiment of step  generates a separate transfer function for each of the sets of color components in the image. A third alternate embodiment generates one or more transfer functions to be applied to the color components in the image following a color space transformation. As discussed above, the transfer function can define a linear or non-linear relationship between the image color component values and the corresponding adjusted color component values.","In a further embodiment, application input is used in generating the transfer function. Application input can be provided through one or more functions in an application programming interface (API), such as OpenGL\u2122 or DirectX\u2122. As discussed above, application input can specify the transfer function parameters directly, or in an alternate embodiment, the application input specifies the desired statistical properties of the final adjusted image. Step  generates a transfer function that results in an adjusted image having the desired statistical properties and is within the dynamic range of the display device.","In a further embodiment, step  receives input  of one or more transfer functions generated for previous frames. Step  constrains the presently generated transfer function to limit the difference between the presently generated transfer function and previously generated transfer functions. This prevents the introduction of visual artifacts from rapidly changing light sources. For example, in the rendering of a nighttime scene, the twinkling of stars should not affect the brightness of nearby trees. This feature also allows the application to simulate the human visual system's gradual adjustment to a rapid change in lighting. Step  can constrain the present transfer function by directly limiting its variation from a previous transfer function by a predetermined amount. Alternatively, step  can pass the present transfer function and one or more previous transfer functions through a low pass filter, moving average, or exponential decay function. In an embodiment, the user specifies one or more parameters of the filter or other function used to constrain the present transfer function.","Step  stores the transfer function generated in step  for use with the next frame. Simultaneously, step  outputs the transfer function generated from a previous frame for adjusting the present frame. If an execution of step  occurs during the first frame of a sequence and there is no previous transfer function available, step  can be skipped, displaying the first frame without adjustment, or steps  and  can be skipped, discarding the first frame.","Step  applies the transfer function generated in step  to the floating point image, as discussed above. In an embodiment, step  is performed in parallel with steps , , and . If necessary, linear or non-linear interpolation is used to compute the pixel values of the adjusted image. Because the transfer function applied to the present image was actually generated using the dynamic range of a previous image, there is a possibility that the dynamic range of the present image exceeds the dynamic range of the previous image. To avoid adjusted image pixel values falling outside of the dynamic range of the display device, step  can clamp pixel values to the minimum and maximum values of the dynamic range of the display device, for example 0.0 and 1.0. Following the completion of step , step  displays the adjusted image on the display device. At step , the pixels of the adjusted image are converted into a digital or analog display signal and communicated with the display device.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 7","b":["700","100","130","218","150"]},"System  adjusts the dynamic range of floating point images during the scan out process. A floating point frame buffer  stores the unadjusted floating point image that is being scanned out. The floating point frame buffer  is connected with a floating point image cache  via memory interface . The scan out process is typically very sensitive to timing. The floating point image cache stores a copy of a small portion of the unadjusted floating point image to provide the scan out hardware, for example, a digital-to-analog converter, with immediate, low latency access to the portion of the floating point image being scanned out.","The floating point image cache  is connected with the floating point image analyzer . As each portion of the floating point image is copied into the floating point image cache , the floating point image analyzer  analyzes the floating point color component values for the pixels of the image portion to determine a set of dynamic range information for the image. The set of dynamic range information may be defined by statistical properties such as minimum values, maximum values, averages, means, medians, variances, standard deviations, percentiles, histogram data, and\/or other statistical information. In an embodiment, the dynamic range information from each image portion can be combined by the image analyzer  to determine the dynamic range of the entire image.","In a further embodiment, the image analyzer  can determine one or more sets of local dynamic range information associated with different regions of the image instead of or in addition to the dynamic range information for the entire image (the global dynamic range information). In this embodiment, the regions of the image associated with the sets of local dynamic range information (the local regions) can be any size or shape and are not necessarily coincident with the portions of the image loaded into the floating point image cache . Image analyzer  includes hardware for defining the boundaries of the local regions and for determining dynamic range information for each local region.","The image analyzer  is connected with transfer function generator . As discussed in the method above, transfer function generator  generates either a single transfer function for all the color components in an image or separate transfer functions for each of the color components in the image. As discussed above, the transfer function can define a linear or non-linear relationship between the image color component values and the corresponding adjusted color component values.","A further embodiment of transfer function generator  uses application input, provided through one or more functions in an application programming interface (API), to generate one or more transfer functions. Additionally, the transfer function generator  can limit the differences between the presently generated transfer functions and previously generated transfer functions. Transfer function generator  constrains the present transfer functions by directly limiting its variation from a previous transfer function by a predetermined amount, or alternatively, by passing the present transfer functions and one or more previous transfer functions through a low pass filter, moving average, exponential decay function, or other limiting function. In an additional embodiment, transfer function generator  similarly generates transfer functions for each local region.","Transfer function generator  is connected with transfer function memory . Transfer function memory  stores one or more transfer functions to be applied to the floating point image as it is being scanned out. The transfer functions stored in transfer function memory  are read by transfer function processor . The transfer function processor reads pixel values from the portion of the image stored in the image cache . In an embodiment, the transfer function processor  reads pixel values from the image cache  in the order they are to be scanned out. Transfer function processor  applies one or more transfer functions to each pixel value to create the adjust output image. In an embodiment, transfer function processor  applies transfer functions generated from the dynamic range information of the current image. Alternatively, transfer function processor  applies transfer function generated from the dynamic range information of one or more previous images, as discussed above.","Transfer function processor  outputs the pixel values of the adjusted image to display signal generator . In an embodiment, transfer function processor  outputs pixel values directly to the display signal generator , such that the pixel values are converted into a display signal \u201con the fly\u201d. Alternatively, the pixel values of the adjusted image are temporarily stored until needed by the display signal generator . The display signal generator  creates a display signal from the pixel values of the adjusted image. The display signal may be a digital signal or an analog signal adapted to drive a display device. For example, the display signal generator  may include a digital to analog converter for generating a display signal for a CRT display, or a digital video signal for an LCD display.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 8","b":["800","800","805","820","820","815"]},"The global image statistics, application input , and optionally one or more prior global transfer functions  are used by global transfer function generator  to generate a global transfer function. The global transfer function is generated in a manner similar to the embodiments previously discussed. For example, prior global transfer functions  may be used by global transfer function generator  to limit the difference between the presently generated transfer function and previously generated transfer functions, and application input  can specify the desired dynamic range and pixel value frequency distribution of the adjusted image. The global transfer function processor  applies the global transfer function to the floating point image to create an intermediate adjusted image.","Similarly, one or more local histogram data structures  are used by image statistics generator  to generate one or more sets of local image statistics defining the dynamic range and pixel value frequency distribution of one or more local regions of the floating point image. The image statistics generator  also receives application input  that determines the type of local image statistics to be generated.","The sets of local image statistics, application input , and optionally one or more prior local transfer functions  are used by local transfer function generator  to generate one or more local transfer functions. The local transfer functions are generated in a manner similar to the embodiments previously discussed. The local transfer functions define mappings between pixel values in one or more local regions of the floating point image and the pixel values in one or more corresponding local regions of an adjusted image. The local transfer function processor  applies the local transfer functions to their associated local regions in the floating point image to create a second intermediate adjusted image. In an embodiment, the local transfer function processor  applies two or more local transfer functions to the pixel values in areas where local regions in the floating point image overlap.","Image blending processor  combines the first and second intermediate adjusted images to create a final adjusted image. The intermediate images can be added together or combined using a weighted sum or average function. Because the final adjusted image should be within the dynamic range of the display the device, the global and local transfer functions can be scaled to ensure the final adjusted image has the desired dynamic range and pixel value frequency distribution. In further embodiments, the functions of system  can be executed in parallel and\/or integrated into the scan out process, as described by the method of  and\/or the system of , by applying global and local transfer functions from a prior frame to the current frame and by integrating the analysis of floating point images into the scan out hardware.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 9","b":["900","905","910","930","905","915","930"]},"The rendering application  communicates data and instruction  and transfer function parameters  to the API and device driver . The API and device driver  allow the rendering application  to communicate with the graphics subsystem  on a functional level, without the need for a detailed understanding of the hardware of the graphics subsystem . The API and device driver  communicate the data and instructions  and the transfer function parameters  with the graphics subsystem . If necessary, the API and device driver reformat this information according to the requirements of the graphics subsystem .","Graphics subsystem  renders an image  from the data and instructions  provided by the rendering application . To adjust the rendered image to the dynamic range of the display device and the pixel value frequency distribution specified by the rendering application , the graphics subsystem  generates a histogram data structure  from the rendered image. The graphics subsystem  also generates image statistics  from the histogram data structure.","In an embodiment, the image statistics  are communicated with the API and device driver . The API and device driver  create one or more transfer functions  from the transfer function parameters  and the image statistics . In this embodiment, the histogram data structure  is not communicated to the API and device driver . This conserves bandwidth on the data bus of system . In an alternate embodiment, the histogram data structure  is communicated with the API and device driver . In a further embodiment, the API and device driver  create image statistics  from the histogram data structure .","The transfer functions  are communicated with the graphics subsystem . The graphics subsystem  applies the transfer function to the rendered image  to create an adjusted image. The adjusted image is output to the display device . System  illustrates the general division of functions for adjusting the dynamic range according to an embodiment of the invention. Alternate embodiments of the invention may divide the tasks differently among the various components of a system. Additionally, the specific functions used and their sequence of operation are described in  generally. The division of functions described in  may be applied to the methods and systems described in the other embodiments of the invention.","Those skilled in the art will appreciate that the present invention establishes system and method for automatically adjusting floating point images to the dynamic range of a display device and a desired pixel value frequency distribution. The present invention has been described in relation to particular embodiments that are intended in all respects to be illustrative rather than restrictive. Therefore, it should be understood that the method and apparatus of the present invention could be practiced with modification and alteration within the spirit and scope of the claims herein. Furthermore, the invention may be implemented in any combination of hardware and\/or software. Alternative embodiments will become apparent to those skilled in the art to which the present invention pertains without departing from its spirit and scope."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention will be described with reference to the drawings, in which:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 2A and 2B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
