---
title: Ad hoc geospatial directory of users based on optimizing non-Turing complete executable application
abstract: In one embodiment, a method comprises receiving from a user interface, by a computing device, a request for execution of at least one lambda function in an operation of a geospatial application, the geospatial application having lambda functions for operating on one or more entities of an ad hoc geospatial directory accessible by the computing device, the lambda functions having strongly typed definitions according to a prescribed symbol manipulation language that is a non-Turing complete language, that does not permit partial functions, and that is independent of any attribute of any computing system; optimizing execution by the computing device of the operation on the ad hoc geospatial directory; and the computing device returning to the user interface a response to the request based on the optimizing execution of the operation, the response including a data structure including at least one of the lambda functions for a corresponding at least one of generating a query of the ad hoc geospatial directory, modifying a state of at least a first of the entities, or accessing the first of the entities.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08380700&OS=08380700&RS=08380700
owner: Cisco Technology, Inc.
number: 08380700
owner_city: San Jose
owner_country: US
publication_date: 20110413
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DESCRIPTION OF EXAMPLE EMBODIMENTS","Overview","DETAILED DESCRIPTION"],"p":["The present disclosure generally relates to the writing, compiling, and execution of executable applications or programs on different computing systems having prescribed hardware and\/or software specific requirements. More particularly, the present disclosure relates to geospatial applications or programs that are written for generation of a directory of users in a distributed computing environment.","This section describes approaches that could be employed, but does not necessarily describe approaches that previously have been conceived or employed. Hence, unless explicitly specified otherwise, any approaches described in this section are not prior art to the claims in this application, and any approaches described in this section are not admitted to be prior art by inclusion in this section.","Processor-based applications or programs to date have been written in accordance with constraints imposed by hardware-specific and\/or software-specific constraints of the underlying computing system intended to execute the applications or programs. For example, assembly language instruction sets are designed for a specific processor circuit for manipulation of digital bits (i.e., having a value of either 0 or 1) that can be interpreted by the specific processor circuit either as an executable instruction, an address value for a register or memory location accessible by the specific processor circuit, or data: applications written using the assembly instruction sets must strictly follow the associated software and\/or hardware based requirements of the assembly language instruction sets (e.g., syntax, etc.). Operating systems (e.g., Microsoft Windows XP\u00ae, Unix, Linux, etc.) provide a level of abstraction that enables application developers to ignore at least some of the hardware or software-based constraints of the specific processor circuit; however, such operating systems in return impose their own hardware and\/or software based constraints that must be followed by an application executed using such operating systems to perform a prescribed function.","Consequently, substantial compatibility problems continue to exist when an attempt is made to employ an existing application (developed for a first computing system) on a second computing system that is not perfectly compatible with the first computing systems. Moreover, more complex computing systems are constantly being developed (e.g., newer processor circuits offering multithreading; parallel computing or blade computing; network-based distributed computing; cloud computing, etc.). Hence, application developers continue to confront the difficult requirement of understanding the features and requirements of the more complex computing system in order to modify existing applications for compatibility or develop a new application that operates without failure in the more complex computing system. The difficulty increases dramatically with the concurrent requirement in geospatial applications of responding to ad hoc events for ad hoc collaboration.","In one embodiment, a method comprises receiving from a user interface, by a computing device, a request for execution of at least one lambda function in an operation of a geospatial application, the geospatial application having lambda functions for operating on one or more entities of an ad hoc geospatial directory accessible by the computing device, the lambda functions having strongly typed definitions according to a prescribed symbol manipulation language that is a non-Turing complete language, that does not permit partial functions, and that is independent of any attribute of any computing system; optimizing execution by the computing device of the operation on the ad hoc geospatial directory; and the computing device returning to the user interface a response to the request based on the optimizing execution of the operation, the response including a data structure including at least one of the lambda functions for a corresponding at least one of generating a query of the ad hoc geospatial directory, modifying a state of at least a first of the entities, or accessing the first of the entities.","In another embodiment, an apparatus comprises an interface circuit configured for receiving, from a user interface, a request for execution of at least one lambda function in an operation of a geospatial application, the geospatial application having lambda functions for operating on one or more entities of an ad hoc geospatial directory accessible by the computing device, the lambda functions having strongly typed definitions according to a prescribed symbol manipulation language that is a non-Turing complete language, that does not permit partial functions, and that is independent of any attribute of any computing system; and an execution circuit configured for optimizing execution by the apparatus of the operation on the ad hoc geospatial directory, the execution circuit configured for returning to the user interface, via the interface circuit a response to the request based on the optimizing execution of the operation, the response including a data structure including at least one of the lambda functions for a corresponding at least one of generating a query of the ad hoc geospatial directory, modifying a state of at least a first of the entities, or accessing the first of the entities.","Outline of Detailed Description",{"@attributes":{"id":"p-0021","num":"0000"},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":"I. Introduction"}},"A. Overview","B. The Symbol Manipulation Language","C. A Distributed Services Engine\n\n","Particular embodiments enable executable applications to be written in a manner that is completely independent of any attribute of any computing system, i.e., independent of any computing system deployment model. In particular, the executable applications are written according to a prescribed symbol manipulation language (SML). Consequently, the particular embodiments provide an ad hoc geospatial directory of users in a distributed and decentralized system, based on optimizing an SML-based geospatial application. A description will first be provided of the symbol manipulation language, and optimization and execution thereof, followed by a description of a geospatial application written according to the prescribed symbol manipulation language for generation of an ad hoc geospatial directory of users in a distributed and decentralized computing system.","The term \u201capplication\u201d or \u201cprogram\u201d is defined as executable information stored on at least one non-transitory tangible medium and that can be configured for execution on one or more hardware-based processor circuits: the executable information can be stored as a single container (e.g., an executable file) on at least a single non-transitory tangible medium, described below; the executable information also can be stored as multiple components (e.g., fragments) on one or more non-transitory tangible media, where execution of the components by the same or distinct processor circuits can result in execution of the application (e.g., distributed computing). Unless specified otherwise, the execution of components by distinct processor circuits need not necessarily be concurrent, rather the components could be executed as distinct and independent events.","Deployment of any computing system requires establishing software or hardware specific requirements on the computing system. Hence, a \u201ccomputing system deployment model\u201d is defined herein as any computing system having at least one or more software or hardware specific requirements for deployment (i.e., physical and tangible execution) of the computing system. At least one software and\/or hardware specific requirement of any computing system can be used to establish a \u201ccomputing system deployment model\u201d. Hence, a computing system deployment model \u201cA\u201d will have at least one hardware or software specific requirement that distinguishes the computing system deployment model \u201cA\u201d from another computing system deployment model \u201cB\u201d.","I.A. Overview",{"@attributes":{"id":"p-0028","num":"0033"},"figref":["FIG. 1","FIG. 3","FIG. 3"],"b":["10","12","14","16","10","12","70","14","16","14","12","70","12"]},"Existing programming languages assume hardware-specific or software-specific parameters (i.e., requirements, constraints, etc.) for a particular computing system deployment model. Example hardware-specific requirements that have been assumed by existing programming languages for a particular computing system deployment model can include the type of microprocessor used (e.g., 32-bit or 64-bit, single core, dual core or multiple core, etc.), the manufacturer of the microprocessor (e.g., Intel processor vs. ARM processor or Motorola processor), whether the application is executed in a stand-alone computer, or in a network according to a prescribed computation model (e.g., client\/server, peer to peer, distributed computing, etc.). Example software specific requirements that have been assumed by existing programming languages for a particular computing system deployment model can include the type of operating system in use (e.g., UNIX, Windows, etc.) or a given version of the operating system in use by the computing system deployment model.","The prescribed symbol manipulation language (SML)  is distinctly different from existing programming languages, in that the prescribed symbol manipulation language is a purely functional language that enables an executable application  to be expressed as a logical specification that describes functions to be executed by any computing system, independent of any hardware specific or software specific requirements of any computing system. In other words, the executable application  can be expressed as a manipulation of symbols consisting only of the symbol manipulation language  elements, described below, in a manner that is independent of any computing system deployment model. Consequently, any application  written in the prescribed symbol manipulation language  can have absolutely no relationship to any attribute of any computing system deployment model. Hence, any application  written in the prescribed symbol manipulation language  is completely independent of any software and\/or hardware specific requirements of any computing system.","The transformation system  can provide a \u201cmapping\u201d between the application  and a particular computing system deployment model, for example certain hardware-based computing systems. The transformation system  can provide this \u201cmapping\u201d based on executing a fully nondestructive logical transformation of the application  into a transformed application \u2032 that is semantically equivalent to the application . This fully nondestructive logical transformation enables an unlimited number of logical transformations, as required, between the original application  and multiple variations (e.g., \u2032, ) of the original applications, where any one variation of the original application (i.e., program variant) can be an optimization for a prescribed computing system based on axioms and constraints that can be associated with a given computing system.","The transformation system  can be configured for implementing a fully nondestructive logical transformation in the form of an optimization of the original SML-based application  and\/or the transformed SML-based application \u2032 into an executable application  (e.g., and\/or ) based on prescribed hardware and\/or software-specific requirements  (e.g., and\/or ) of a prescribed computing system deployment model (e.g., a distributed computing system  containing two or more computing nodes  as in ). The executable application  generated by the transformation system  can include hardware and\/or software-specific executable code  (e.g., , ) optimized for the prescribed computing system deployment model. The executable application  also can include SML program elements  (e.g., and\/or ) that describe respective application function operations independent of any hardware or software-specific requirements of any computing system deployment model, and that are implemented by an SML program interpreter executed by the prescribed computing system deployment model.","I.B The Symbol Manipulation Language",{"@attributes":{"id":"p-0033","num":"0038"},"figref":"FIG. 4","b":["16","16","16","16","16","16","16"]},"In addition to the SML language  being a non-Turing complete and purely functional language, the SML language  also should be a higher-order language; the language  must be a strong and statically typed language: a language is \u201cstatically\u201d typed only if all expressions have their types determined prior to execution of the application (e.g., determined during compilation); a language has a \u201cstrong typing\u201d (i.e., strongly typed definitions) if the language does not permit one type to be treated as another type (e.g., treating an integer type as a string type). The symbol manipulation language  also must support \u201csymbols\u201d : a symbol  is a unique element (e.g., as in the Scheme programming language) that can be stored in one or more physical and tangible data structures (e.g., stored within at least one non-transitory storage medium ) and that can be compared with another symbol. The symbol manipulation language  also must support the following operations by providing the appropriate syntactic rules : Pair and Projection operations (for constructing and destructing tuples, described below); Tagged-Union and Case operations (for constructing and destructing union structures); Curry and Apply operations (for constructing and destructing new functions); Identity and Composition operations (for building complex operations from simpler ones).","The symbol manipulation language  also can provide support for Monads, Functors, Inductive and CoInductive types, Catamorphisms, and Anamorphisms. Example programming languages that can be used to implement the disclosed symbol manipulation language  can include Charity, Joy, and subsets of Standard ML, Scheme, and Haskell. In one embodiment, the symbol manipulation language  can be implemented using a subset of Haskell.","The symbol manipulation language  provides a logical specification for describing functions to be executed in a computing system, in that the symbol manipulation language serves as a metalanguage for functions based on describing the semantics (i.e., the meanings) of the functions. In particular, a function is a transformation of one and only one input to one and only one output: as described below, an \u201cinput\u201d and\/or an \u201coutput\u201d may be composed of multiple symbols , for example a \u201cpair\u201d as an input (e.g., a & b->c) or a \u201cpair\u201d as an output (e.g., a->(b & c)). The symbol manipulation language provides a logical specification for the description of the function, without describing the input or the output. In particular, the functional relationship between inputs and outputs can be described in terms of logical \u201ctypes\u201d, according to foundational mathematics, universal algebra and category theory: example logical types include at least a tuple, a sum, and a lambda type.","As described in further detail below, a given symbol  can be used to represent a particular value independent of form. In other words, a symbol  in one example represents a particular value that can be implemented as any one of an integer, string (alphanumeric), Boolean value (e.g., a bitmask), floating point, etc., without explicitly identifying the symbol as any one of the integer, string, Boolean value, floating point, etc. Note, however, that a symbol  is not a variable, because the value of a symbol  does not change: a symbol  is only ever one value, while a variable is some class of values, of which the variable currently is assigned one value at a time. Hence, a reference to an alphanumeric letter in this specification in quotes (e.g., \u201ca\u201d) refers to a symbol , and not a variable, unless explicitly identified otherwise as a \u201cvariable\u201d.","Hence, the symbols \u201ca\u201d and \u201cb\u201d  in an expression can be used to express the relationship between \u201ca\u201d and \u201cb\u201d, without identifying whether any one of the symbols is implemented as an integer, string, Boolean value, floating point, etc.","A tuple is a pairing (or association) between one symbol \u201ca\u201d and another symbol \u201cb\u201d, for example enabling description of a function that maps from the inputs \u201ca and b\u201d (i.e., (a & b)) to an output: the inputs \u201ca\u201d and \u201cb\u201d can be of the same type (e.g., \u201ca\u201d is an integer and \u201cb\u201d is an integer) or different types (e.g., \u201ca\u201d is an integer and \u201cb\u201d is a floating point). A sum (i.e., coproduct) identifies a relationship between one symbol \u201ca\u201d and another symbol \u201cb\u201d, for example enabling description of a function that maps an input \u201ca or b\u201d (i.e., a|b) to an output, where the inputs \u201ca\u201d and \u201cb\u201d can be either the same or different types; a sum also can be used to describe a conditional operation (e.g., \u201cif . . . then\u201d).","A lambda type (\u03bb) changes an existing function into a new function. The existing function (serving as an input to the lambda type) takes one pair as input and returns one output (a & b->c). The new function (output by the lambda type) takes one value as input, and returns a new function as output (a->(b->c)). The use of lambda types is the foundation for typed lambda calculus (excluding untyped lambda calculus).","These example logical types (tuples, sums and lambda types) can be used to derive additional functions or operations that combine symbols, for example products, exponentials, etc.","Hence, the symbol manipulation language  provides a logical and semantic specification for describing functions independent of any hardware-specific or software-specific requirements of any computing system, based on the tuple, sum, and lambda types that define the relationships between the symbols  that are manipulated by the functions. Category theory provides that repeating patterns can be described in a manner that is mathematically provable: the symbol manipulation language  is established based on defining a base category of symbols , and adding to the base category tuples, sums, and lambda types and other (optional) logical types that describe the functions to be performed.","By way of analogy, consider the construction of a building structure, for example a commercial office building or a home: the application written according to the prescribed symbol manipulation language is analogous to an architect's blueprint plan that can illustrate (graphically and with textual annotations) the structure of the building based on including plan views (e.g., floor plan views), elevation views, and\/or cross-sectional views, without any details as to the specific construction techniques for implementing the blueprint plan. In other words, the same blueprint plan can be used to build the same building structure using different construction techniques, depending on the time the building structure is built or the particular building codes in effect at the building site.","Consequently, an application written according to a prescribed symbol manipulation language  as described herein is independent of any hardware and\/or software-specific requirements of a prescribed computing system deployment model such as: explicit memory allocation, persistent storage, serial ordering constraints, messaging, threading, shared state, hardware access, operating system interaction, or real-time clocks. The symbol manipulation language  also is isolated from any and all interactions with any hardware or software attributes of the computing system deployment model, and isolated from any notion of the forward progression of time (e.g., as in runtime execution of an executable resource by the computing system).","In addition, since the symbol manipulation language  is based on category theory (which can provide mathematically-provable descriptions of repeating patterns), absolute backwards compatibility is guaranteed between a first application and a newer application. In particular, assume the first application is written in a first symbol manipulation language having an initial set of logical types. Assume further the newer application is written in a later symbol manipulation language having an expanded set of logical types that includes the initial set of logical types and newly added logical types having been discovered according to category theory. Category theory ensures that the first application written in the first symbol manipulation language is compatible with the newer application written in the later symbol manipulation language because the first symbol manipulation language is mathematically consistent with the later symbol manipulation language.","The application  written according to the prescribed symbol manipulation language  can be executed on any computing system deployment model based on execution of the application  by an interpreter that is native to the corresponding computing system deployment model (i.e., the interpreter is specific to the hardware and\/or software requirements of the corresponding computing system deployment model).","As illustrated in  and described in further detail below, new features can be injected based on the transformation system  injecting a new application containing the new feature (e.g., feature \u201cFn+1\u201d) into an existing application having existing features \u201ce.g., \u201cF, F, . . . , Fn\u201d), and executing the super-optimization  for generation of the modified application containing the existing features and the new feature (e.g., \u201cF, F, . . . , Fn, Fn+1\u201d).","As described in further detailed below, each original version of an SML application  can be retained (e.g., in the storage ); hence, the original version of an SML application  can be recompiled into new variants at any time, for example as new equality axioms , new primitive type sets , and\/or new program fragments (e.g., of ) become available. Since the combination of the SML application with the SML application is semantically equivalent to the modified application , and since the original versions of the SML applications and also can be retained by the transformation system , the transformation system  also can effectively split the modified application into the original application components and , or any variation thereof (including tens, hundreds, thousands, etc. of application components  and\/or replicas thereof) as desired depending on the preferred optimization for a given computing system deployment model (e.g., client\/server computing, peer to peer computing, distributed computing, cloud computing, etc.).","The injecting, splitting, and\/or replicating of an application  by the compilation and execution infrastructure of the transformation system  enables the transformation system  to build a distributed transaction processor (similar to a relational database system), and enables the transformation system  to provide a series of efficiency improvements based on relevant optimization operations.","I.C. A Distributed Services Engine","The compiler circuit  can be implemented based on batch-processing a single source SML application  into a single executable application . The compiler circuit  also can be implemented as a complete distributed services engine based on the compiler circuit  including an evaluator circuit , illustrated in .","The compiler circuit  and the evaluator circuit  in combination can immediately compile and evaluate incoming program fragments (e.g.,  of  and\/or of ). Results from the immediate compiling and evaluating of the incoming program fragments (e.g.,  and\/or ) can be returned to a submitting client device either as a transformed application (e.g., \u2032 of ) or as part of a modified application (e.g., of ) based on the incoming program fragment (of ) and another existing SML application (of ). Since results can contain functions as well as values, the transformation system  can implement behaviors needed for distributed services.","I.F.1. Evaluator","The evaluator circuit  can implement a runtime infrastructure required to execute an SML application  compiled according to the symbol manipulation language  and associated constraints , , and is analogous to a C runtime library, or a Java Virtual Machine. The evaluator circuit  for the SML  is configured for providing a non-destructive association with the hardware-specific and\/or software-specific attributes of the computing system deployment model that are required for execution of the SML application , example attributes including: memory management, persistence, networking, etc.","The evaluator circuit  can be implemented using any programming language (including SML ). The evaluator circuit  also can be supplied a program (e.g., SML application ) in a form of byte code, or statically linked with the program (e.g., ) as a native library that is loaded and executed by the compiler circuit  during the compilation process. Executable programs used to implement the evaluator circuit  can be general such that they work on any hardware or software platform, or specially designed and implemented (e.g., as a hardware-based logic circuit such as an application specific integrated circuit (FPGA)) for a particular platform or purpose.","At a minimum, any executable application  for a given computing system deployment model that is used to implement the evaluator circuit  must provide a primitive set  that establishes a nondestructive equivalence between native versions (i.e., hardware and\/or software specific expressions) of each primitive in the SML language , enabling all programs  to work with all evaluator circuits . Beyond this minimum, an evaluator circuit  can expose additional primitives, such as threading, vector processing, persistent storage, databases, networking, or other platform-specific features, described below in further detail in Section II. These features can be used when associated equality axioms  and metrics  are provided to the compiler circuit .","Thus, an SML application  compiled for an evaluator circuit  with persistence can cause the evaluator circuit  to store or retrieve data from a storage medium  during the computation of its results. The same SML application  compiled for an evaluator circuit  with networking could operate as a distributed computation.","I.F.2. Native Compilation","As described previously, the compiler circuit  can be configured for generating native code  for any platform, given the appropriate axioms  and metrics . The disclosed compiler circuit  has been demonstrated in experimental testing to compete favorably against expert human optimizations (i.e., manual optimizations), and to balance factors that are often overlooked (power efficiency, code size vs. execution speed, RF interference modeling, etc).","II. Geospatial Language Stack Having Segregated Language Primitives",{"@attributes":{"id":"p-0057","num":"0062"},"figref":["FIGS. 5 and 6","FIGS. 5 and 6"],"b":"14"},"For example,  illustrates a base semantic\/term level for defining semantics for basic terms of the geospatial application , including individual terms, tuples, sums, and lambdas. A \u201cTerm\u201d is a sequence of syntactic elements (e.g., characters, glyphs) with no interpretation. \u201cTerms\u201d are sequences of characters and\/or glyphs (i.e., non-verbal symbols conveying information) composed of prescribed allowable language syntax (e.g., letters, spaces, parenthesis, comma, digits, etc.). Example definitions at the semantic level in the geospatial application  illustrated in Table 1 below include \u201cString\u201d and \u201cInteger\u201d. For example, the term level may have the character sequences (shown in quotes) \u201cFoo\u201d, \u201c(b,c)\u201d \u201c(\\a->a+)\u201d, each of which are only sequences of characters (and\/or glyphs) that must satisfy a Term definition, for example the definition of a String (e.g., \u201cFoo\u201d), Integer, Tuple (e.g., \u201c(b,c)\u201d) or Lambda (e.g., \u201c(\\a->a+1)\u201d). Hence, no term can exist in the geospatial application  unless it is either explicitly defined at the semantic\/term level , or derived based on structural type construction using a combination of other terms explicitly defined at the semantic\/term level . In some cases, characters may satisfy multiple sets of constraints: for example, the sequence \u201c\u201d could be interpreted as an integer, a floating point decimal value, or a two-bit sequence. Hence, typing discipline is implemented using strongly typed definitions that enforce one and only one meaning to the sequence of characters, thereby eliminating unintended meanings.","The type level specifies precisely defined Types. A Type is a set of constraints on Terms to define some domain-specific meaning. In other words, a type is defined by one and only one precisely defined meaning. For example, a Type defined as \u201cInteger\u201d recognizes a contiguous sequence of digits without decimal points as a decimal (base Ten) value. Hence, a Term is of some Type if and only if the Term satisfies the constraints of the Type. Types are distinct from syntax, as types in general cannot be defined by the structure of the syntax. Example types defined in the geospatial application of Table 1 include \u201cName\u201d, \u201cEmail\u201d, \u201cPhone\u201d, \u201cIpAddr\u201d, etc. A type may contain a variable, in which the type can be fully determined as belonging to a predefined type (a \u201cconcrete type\u201d) once the variable is filled with a value.","Structural type construction enables types to be defined as combinations of existing types; in contrast, a monomorphic type is a type that is defined by one and only one type. In this specification, the terms \u201csum\u201d and \u201ccoproduct\u201d are equivalent and interchangable. A sum can be a type that is defined as a structural composition at the type level that is derived from other types in the type level : sums also are referred to as \u201cAlgebraic Data Types\u201d. Algebraic data types are a hierarchical combination of coproducts (i.e., sums) and products. Algebraic data types can be illustrated in the form of a tree, where a given coproduct forms the root of the tree. For example, the root coproduct \u201cItem\u201d can branch to any one of the products of type Person , Media , RFid , Inline , Video , or Name . Each node that branches from the coproduct \u201cItem\u201d in turn also can be defined as a coproduct containing one or more products. For example, the coproduct \u201cPerson\u201d (within the subtree rooted by the root coproduct \u201cItem\u201d ) can be defined as containing the products \u201cName\u201d , \u201cEmail\u201d, \u201cPhone\u201d, and \u201cIpAddr\u201d, each of which has a strongly typed semantic definition as a string.","Hence, the strongly typed definitions of tuples, sums, and\/or lambda functions guarantee that each of the tuples, sums, and lambda functions so defined can be represented in the form of a tree: if any tuple, sum, or lambda function (TSM) cannot be represented in the form of a tree structure, the TSM is deemed not to have a strongly typed definition.","Hence, a type (e.g., \u201cPerson\u201d in Table 1) can be defined as a structural composition of existing types, a form of abstraction independent from the type hierarchy. Note, however, that a type defined as a structural composition of existing types is distinct and not synonymous with its structural counterparts; hence a Name-type could be defined to be a string, however a String cannot be passed where a Name is required, except for unique Name-type constructor.","The kind level provides definitions for \u201cKinds\u201d. A \u201cKind\u201d is a set of constraints on \u201cTypes\u201d. For example, all term-level types are of the unique Kind \u201c*\u201d, while the advanced Kind \u201c*->*\u201d is a function that takes one type and return a new type (e.g., generating a list). For example, a list is a Kind which takes any type \u201cX\u201d and returns a new type which is a \u201clist of X\u201d. The Kind \u201c*->*\u201d is not a Type. A Type cannot have Kind \u201c*->*\u201d, it must have kind \u201c*\u201d. Hence, if the list-generating Kind \u201c*->* is applied to a Type (e.g., Integer), the result is a Type \u201clist of Integer\u201d, and since it is a Type, its Kind is \u201c*\u201d. A Kind is sometimes referred to as a \u201ctype of types\u201d, however since types cannot process themselves a function from some type to some type \u201c*->*\u201d cannot be a Type, it must be a Kind.","A sort defined at the sort level is a \u201ctype of Kinds\u201d. A Kind that contains a variable requires a sort over the Kinds. Sorts can contain a single concrete object (typically represented with a box symbol \u201c\u25a1\u201d), and the function type over kinds (\u201c\u25a1->\u25a1\u201d).","The use of the typing hierarchy of  enables strongly typed definitions to be established for elements of a geospatial application , while maintaining flexibility for newly added elements to the geospatial application . In particular, new elements can be added by creating a new type, and semantically combining the new type with another existing type to form a new sum (i.e., coproduct): creating a new type is preferable to redefining the existing type, as any attempt to redefine any existing element can have substantial ramifications if a new definition were to be applied to an existing type in an existing SML application. Hence, the typing hierarchy of  provides flexibility for new types while ensuring semantic compliance with existing types.",{"@attributes":{"id":"p-0066","num":"0071"},"figref":["FIG. 6","FIG. 6"],"b":"14"},"III. Example SML Application: GeoSpatial Application","Table 1 illustrates an example application , written according to the SML language  and implemented using the T programming language, that describes an example geospatial application  that includes an execution layer and a user interface  of . As described previously, the transformation system  can be configured for transforming the SML-based geospatial application in Table 1 into an SML-based executable application that can be optimized for a prescribed computing system deployment model.","Table 1 illustrates that the geospatial application  specifies strongly typed definitions (i.e., strongly typed declarations) for all data structures and functions, including declarations of primitives (e.g., categorical primitives, primitive functions). For example, the categorical primitive \u201cfst\u201d returns the first item in a tuple, and the categorical primitive \u201csnd\u201d returns the second item in a tuple; the combinators primitive \u201cconst\u201d returns a constant, the combinators primitive \u201cid\u201d is an identity function, etc. Table 1 also illustrates manipulation of tuples, sums, and lambdas using curry and uncurry operations according to lambda calculus. A curry operation can deconstruct a function having multiple inputs into an equivalent function that accepts only a single input, and as output the equivalent function returns another function that accepts only a single input, etc.","A detailed description of the geospatial application in Table 1 follows immediately after the listing of the geospatial application.",{"@attributes":{"id":"p-0070","num":"0075"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example Program Listing for GeoSpatial Application"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"-------------------------------"},{"entry":"-- Geo-Spatial Collaboration --"},{"entry":"-------------------------------"},{"entry":"-- Written in \u2018T\u2019 language for"},{"entry":"-- a model-driven distributed-"},{"entry":"-- computing architecture."},{"entry":"-------------------------------"},{"entry":"---------------"},{"entry":"-- Data Types"},{"entry":"--"},{"entry":"-- Assign unique types to some commonly used data."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["data Name","= Name","String;"]},{"entry":["data Email","= Email","String;"]},{"entry":["data Phone","= Phone","String;"]},{"entry":["data IpAddr","= IpAddr","String;"]},{"entry":["data Url","= Url","String;"]},{"entry":["data Mime","= Mime","String;"]},{"entry":["data MacAddr","= MacAddr","String;"]},{"entry":["data PosX","= PosX","Integer;"]},{"entry":["data PosY","= PosY","Integer;"]},{"entry":["data PosZ","= PosZ","Integer;"]},{"entry":["data Width","= Width","Integer;"]},{"entry":["data Height","= Height","Integer;"]},{"entry":["data Person","= Person","(Name, Email, Phone, IpAddr);"]},{"entry":["data Media","= Media","(Name, Mime, Url);"]},{"entry":["data Rfid","= Rfid","(MacAddr, Name, String, String);"]},{"entry":["data Location","= Location","(PosX, PosY, PosZ);"]},{"entry":["data Scale","= Scale","(Width, Height);"]},{"entry":["data Inline","= Inline","(Media, Scale);"]},{"entry":["data Video","= Video","(Name, String, IpAddr);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"----------------------"},{"entry":"-- Application Types"},{"entry":"--"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["data Item","= PersonItem","Person"]},{"entry":[{},"|\u2009 MediaItem","Media"]},{"entry":[{},"|\u2009 RfidItem","Rfid"]},{"entry":[{},"|\u2009 InlineItem","Inline"]},{"entry":[{},"|\u2009 VideoItem","Video"]},{"entry":[{},"|\u2009 StringItem","Name;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"data MapItem = MapItem (Item, Location);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["data MapItemEntity","= MapItemEntity (Integer, MapItem"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009\u2009 , (PosX \u2212> PosY \u2212> Void)","-- MoveTo"]},{"entry":[{},"\u2009\u2009 , (PosX \u2212> PosY \u2212> Void)","-- Offset"]},{"entry":[{},"\u2009\u2009 , (Name \u2212> Void)","-- Rename"]},{"entry":[{},"\u2009\u2009 , (PosZ \u2212> Void)","-- SetZ"]},{"entry":[{},"\u2009\u2009 );",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["data PersonMiEntity","= PersonMiEntity (Integer, MapItem"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009\u2009 , (PosX \u2212> PosY \u2212> Void)","-- MoveTo"]},{"entry":[{},"\u2009\u2009 , (PosX \u2212> PosY \u2212> Void)","-- Offset"]},{"entry":[{},"\u2009\u2009 , (Name \u2212> Void)","-- Rename"]},{"entry":[{},"\u2009\u2009 , (PosZ \u2212> Void)","-- SetZ"]},{"entry":[{},"\u2009\u2009 , (Email \u2212> Void)","-- Change Email"]},{"entry":[{},"\u2009\u2009 , (Phone \u2212> Void)","-- Change Phone"]},{"entry":[{},"\u2009\u2009 , (IpAddr \u2212> Void)","-- Change IpAddr"]},{"entry":[{},"\u2009\u2009 );",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["data MediaMiEntity","= MediaMiEntity (Integer, MapItem"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009\u2009 , (PosX \u2212> PosY \u2212> Void)","-- MoveTo"]},{"entry":[{},"\u2009\u2009 , (PosX \u2212> PosY \u2212> Void)","-- Offset"]},{"entry":[{},"\u2009\u2009 , (Name \u2212> Void)","-- Rename"]},{"entry":[{},"\u2009\u2009 , (PosZ \u2212> Void)","-- SetZ"]},{"entry":[{},"\u2009\u2009 , (Url \u2212> Void)","-- Change Url"]},{"entry":[{},"\u2009\u2009 );",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["data InlineMiEntity","= InlineMiEntity (Integer, MapItem"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009\u2009 , (PosX \u2212> PosY \u2212> Void)","-- MoveTo"]},{"entry":[{},"\u2009\u2009 , (PosX \u2212> PosY \u2212> Void)","-- Offset"]},{"entry":[{},"\u2009\u2009 , (Name \u2212> Void)","-- Rename"]},{"entry":[{},"\u2009\u2009 , (PosZ \u2212> Void)","-- SetZ"]},{"entry":[{},"\u2009\u2009 , (Width \u2212> Height \u2212> Void)","-- Change Scale"]},{"entry":[{},"\u2009\u2009 );",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"data Template = Template (Name, String);"},{"entry":"-- Tag Relations?"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["--","\u2009\u2009 \u2009entityID tag"]},{"entry":["--data PersonTag","= (Integer, Tag)"]},{"entry":["--data MediaTag","= (Integer, Tag)"]},{"entry":["--data RFIDTag","= (Integer, Tag)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"--------------------------------------"},{"entry":"-- GeoSpatial Data Type Constructors"},{"entry":"let"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"---------------------"]},{"entry":[{},"-- Data type constructor and accessor functions"]},{"entry":[{},"-- Location"]},{"entry":[{},"makeLocation x y z = Location (x, y, z);"]},{"entry":[{},"position_x loc = case loc of Location tp \u2212> (Fst tp);;"]},{"entry":[{},"position_y loc = case loc of Location tp \u2212> (Fst (Snd tp));;"]},{"entry":[{},"position_z loc = case loc of Location tp \u2212> (Snd (Snd tp));;"]},{"entry":[{},"intX a = case a of PosX x \u2212> x;;"]},{"entry":[{},"intY a = case a of PosY y \u2212> y;;"]},{"entry":[{},"intZ a = case a of PosZ z \u2212> z;;"]},{"entry":[{},"plusX a b = PosX (plus (intX a) (intX b));"]},{"entry":[{},"plusY a b = PosY (plus (intY a) (intY b));"]},{"entry":[{},"plusZ a b = PosZ (plus (intZ a) (intZ b));"]},{"entry":[{},"-- Person"]},{"entry":[{},"makePerson name email phone ipaddr = Person (name, email, phone,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"ipaddr);"},{"entry":"--\u2003\u2003personName (Person (Name n,_,_,_)) = n\u2003\u2003-- Preferred"},{"entry":"syntax.. (pattern match on person structure)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"personName","person = case person of Person tpl \u2212> (Fst tpl);;"]},{"entry":[{},"email","person = case person of Person tpl \u2212> (Fst (Snd"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"tpl));;"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"phone","person = case person of Person tpl \u2212> (Fst (Snd (Snd"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"tpl)));;"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"personIpAddr","person = case person of Person tpl \u2212> (Snd (Snd (Snd"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"tpl)));;"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"-- Media",{}]},{"entry":[{},"makeMedia","title mime url = Media (title, mime, url);"]},{"entry":[{},"makeMediaStr","title mime url = makeMedia (Name title) (Mime mime)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(Url url);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"title","media = case media of Media tpl \u2212> (Fst tpl);;"]},{"entry":[{},"mime","media = case media of Media tpl \u2212> (Fst (Snd tpl));;"]},{"entry":[{},"url","media = case media of Media tpl \u2212> (Snd (Snd tpl));;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"-- Rfid"]},{"entry":[{},"makeRfid mac name group category = Rfid (mac, name, group,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"category);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"macAddr","rfid = case rfid of Rfid tpl \u2212> (Fst tpl);;"]},{"entry":[{},"rfidName","rfid = case rfid of Rfid tpl \u2212> (Fst (Snd tpl));;"]},{"entry":[{},"group","rfid = case rfid of Rfid tpl \u2212> Fst (Snd (Snd tpl));;"]},{"entry":[{},"category","rfid = case rfid of Rfid tpl \u2212> Snd (Snd (Snd tpl));;"]},{"entry":[{},"-- Scale",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"makeScale","width height = Scale (width, height);"]},{"entry":[{},"makeScaleInt","width height = makeScale (Width width) (Height"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"height);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"width","scale = case scale of Scale tpl \u2212> (Fst tpl);;"]},{"entry":[{},"height","scale = case scale of Scale tpl \u2212> (Snd tpl);;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"-- InlineMedia"]},{"entry":[{},"makeInline media scale = Inline (media, scale);"]},{"entry":[{},"media inline = case inline of Inline tpl \u2212> (Fst tpl);;"]},{"entry":[{},"scale inline = case inline of Inline tpl \u2212> (Snd tpl);;"]},{"entry":[{},"-- Video"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"makeVideo","name brand ipaddr = Video (name, brand, ipaddr);"]},{"entry":[{},"videoName","video = case video of Video tpl \u2212> (Fst tpl);;"]},{"entry":[{},"brand","video = case video of Video tpl \u2212> (Fst (Snd tpl));;"]},{"entry":[{},"videoIpAddr","video = case video of Video tpl \u2212> (Snd (Snd tpl));;"]},{"entry":[{},"-- Item",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"makePersonItem","person","= PersonItem","person;"]},{"entry":[{},"makeMediaItem","media","= MediaItem","media;"]},{"entry":[{},"makeRfidItem","rfid","= RfidItem","rfid;"]},{"entry":[{},"makeInlineItem","inline","= InlineItem","inline;"]},{"entry":[{},"makeVideoItem","video","= VideoItem","video;"]},{"entry":[{},"makeStringItem","str","= StringItem","str;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"itemCase item pfunc mfunc rfunc ifunc vfunc sfunc"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"= case item of"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PersonItem","a \u2212> pfunc a;"]},{"entry":[{},"MediaItem","a \u2212> mfunc a;"]},{"entry":[{},"RfidItem","a \u2212> rfunc a;"]},{"entry":[{},"InlineItem","a \u2212> ifunc a;"]},{"entry":[{},"VideoItem","a \u2212> vfunc a;"]},{"entry":[{},"StringItem","a \u2212> sfunc a;;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"-- MapItem"]},{"entry":[{},"makeMapItem item loc = MapItem (item, loc);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"item","mapItem = case mapItem of MapItem tpl \u2212> Fst tpl;;"]},{"entry":[{},"location","mapItem = case mapItem of MapItem tpl \u2212> Snd tpl;;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"{-"},{"entry":"---------------------"},{"entry":"-- Build Generic Entity Structures"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"makeEntity -- ::(Integer \u2212> MapItem \u2212> a \u2212> Entity)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"eid::Integer"]},{"entry":[{},"mapItem::MapItem"]},{"entry":[{},"funcs = (eid, mapItem, funcs);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"firstFn ntt::(Integer,MapItem,a)","= Snd (Snd ntt);"]},{"entry":[{},"nextFn fnz::(a,b)","= Snd fnz;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"-}"},{"entry":"---------------------"},{"entry":"-- MapItem Entity"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"----------------------"]},{"entry":[{},"-- These are the state transition functions for the \u201cMapItem\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"state machine."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"-- \u2003Given the current state, and parameters for updating it,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"build the updated state."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"doMoveTo --","::(PosX \u2212> PosY \u2212> MapItem \u2212> MapItem)"]},{"entry":[{},{},"x::PosX"]},{"entry":[{},{},"y::PosY"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"mapItem::MapItem"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"let","loc","{-::Location-}","= location mapItem;"]},{"entry":[{},{},"z","{-::PosZ-}","= position_z loc;"]},{"entry":[{},{},"it","{-::Item-}","= item mapItem;"]},{"entry":[{},{},"ne","{-::Location-}","= makeLocation x y z;"]},{"entry":[{},"in",{},{},{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"makeMapItem it ne;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"doOffset","x::PosX"]},{"entry":[{},{},"y::PosY"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"mapItem::MapItem"]},{"entry":[{},"\u2002="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"let",{},{},{}]},{"entry":[{},{},"loc","{-::Location","-} = location mapItem;"]},{"entry":[{},{},"old_x","{-::PosX","-} = position_x loc;"]},{"entry":[{},{},"old_y","{-::PosY","-} = position_y loc;"]},{"entry":[{},{},"new_x","{-::PosX","-} = plusX x old_x;"]},{"entry":[{},{},"new_y","{-::PosY","-} = plusY y old_y;"]},{"entry":[{},{},"z","{-::PosZ","-} = position_z loc;"]},{"entry":[{},"in",{},{},{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"makeMapItem (item mapItem) (makeLocation"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"new_x new_y z);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"doSetZ","= (\\z mapItem \u2212>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"let","loc","= location mapItem;"]},{"entry":[{},{},"x","= position_x loc;"]},{"entry":[{},{},"y","= position_y loc;"]},{"entry":[{},"in",{},{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"makeMapItem (item mapItem) (makeLocation x"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"y z));"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"doRename new -- ::Name"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"mapItem {-::MapItem-} ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"makeMapItem"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(itemCase (item mapItem)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(\\person","\u2212> makePersonItem","(makePerson"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"new (email person) (phone person) (personIpAddr person)))"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(\\media","\u2002\u2212> makeMediaItem","(makeMedia"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"new (mime media) (url media)))"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(\\rfid","\u2212> makeRfidItem","(makeRfid"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(macAddr rfid) new (group rfid) (category rfid)))"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(\\inline","\u2212> makeInlineItem","(makeInline"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"(makeMedia new (mime (media inline)) (url (media inline)))"},{"entry":"(scale inline)))"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(\\video","\u2212> makeVideoItem","(makeVideo"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"new (brand video) (videoIpAddr video)))"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(\\str","\u2212> makeStringItem new)"]},{"entry":[{},")",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(location mapItem);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"----------------------"]},{"entry":[{},"-- API for MapItem Objects"]},{"entry":[{},"--"]},{"entry":[{},"getId ntt{-::MapItemEntity-} = case ntt of MapItemEntity tpl \u2212>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Fst tpl;;"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"entity ntt{-::MapItemEntity-} = case ntt of MapItemEntity tpl \u2212>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Fst (Snd tpl);;"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"moveTo eid::Integer x::PosX y::PosY = UpdateMapItem (doMoveTo x y,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Eid eid);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"offset eid::Integer x::PosX y::PosY = UpdateMapItem (doOffset x y,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Eid eid);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"rename eid::Integer new::Name = UpdateMapItem (doRename new, Eid"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"eid);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"setZ eid::Integer z::PosZ = UpdateMapItem (doSetZ z , Eid"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"eid);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"----------------------"]},{"entry":[{},"-- This builds a \u201cMapItem\u201d state machine, given the entity ID and"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"a reference state"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"--\u2003\u2003(the reference state is not used as the base for updates;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"updates are made to the database version directly)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"makeMapItemEntity"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"eid","::Integer"]},{"entry":[{},"mapItem","::MapItem"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{-funcs-} = MapItemEntity (eid, mapItem, moveTo eid,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"offset eid, rename eid, setZ eid {-, funcs-});"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"----------------------"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"entityMapItem","{-::(Integer \u2212> MapItem)-}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2002eid","{-::Integer-} = EntityMapItem (Eid eid);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"allEntityMapItem _\u2003= map (\\pr \u2212> makeMapItemEntity (Fst pr) (Snd"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pr) {-Null-}) (AllEntityMapItem);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"allEntityHistoryMapItem _ = map (\\tupl \u2212> let -- Flatten"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Historical items into an Entity List"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"eid","= Fst tupl;"]},{"entry":[{},"entry","= Fst (Snd"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"tupl);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"time","= Fst (Snd (Snd"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"tupl));"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ntt","= Snd (Snd (Snd"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"tupl));"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"in makeMapItemEntity eid"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ntt {-Null-}) (AllEntityHistoryMapItem);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"----------------------"]},{"entry":[{},"setZFromTop eid offZ {-::Integer-} = let"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"lst = AllEntityMapItem;"]},{"entry":[{},"max = catalist 0 (\\pr {-"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"::((Integer,MapItem),Integer)-} \u2212>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"let"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"mi","{-::MapItem-}","= Snd (Fst pr);"]},{"entry":[{},"loc","{-::Location-}","= location mi;"]},{"entry":[{},"curZ","{-::Integer-}","= intZ"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(position_z loc);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"max {-::Integer-} = Snd pr;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"in cond (\\_ \u2212> gt curZ max) ((\\_ \u2212>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"curZ), (\\_ \u2212> max)) 0) lst;"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"newZ = plus max offZ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"in setZ eid (PosZ newZ);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"----------------------"},{"entry":"-- Person Entity"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"doNewEmail","= (\\new mapItem \u2212>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"makeMapItem"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(itemCase (item mapItem)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(\\person \u2212> makePersonItem"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"(makePerson (personName person) new (phone person) (personIpAddr"},{"entry":"person)))"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"makeMediaItem"]},{"entry":[{},"makeRfidItem"]},{"entry":[{},"makeInlineItem"]},{"entry":[{},"makeVideoItem"]},{"entry":[{},"makeStringItem)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(location mapItem));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"doNewPhone","= (\\new mapItem \u2212>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"makeMapItem"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(itemCase (item mapItem)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(\\person \u2212> makePersonItem"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"(makePerson (personName person) (email person) new (personIpAddr"},{"entry":"person)))"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"makeMediaItem"]},{"entry":[{},"makeRfidItem"]},{"entry":[{},"makeInlineItem"]},{"entry":[{},"makeVideoItem"]},{"entry":[{},"makeStringItem)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(location mapItem));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"doNewIpAddr","= (\\new mapItem \u2212>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"makeMapItem"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(itemCase (item mapItem)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(\\person \u2212> makePersonItem"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(makePerson (personName person) (email person) (phone person) new))"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"makeMediaItem"]},{"entry":[{},"makeRfidItem"]},{"entry":[{},"makeInlineItem"]},{"entry":[{},"makeVideoItem"]},{"entry":[{},"makeStringItem)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(location mapItem));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"changeEmail eid::Integer new::Email = (UpdateMapItem)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"((doNewEmail new), (Eid eid));"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"changePhone eid::Integer new::Phone = (UpdateMapItem)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"((doNewPhone new), (Eid eid));"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"changeIpAddr eid::Integer new::IpAddr = (UpdateMapItem)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"((doNewIpAddr new), (Eid eid));"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pmeMoveTo","ntt = case ntt of PersonMiEntity tpl \u2212> Fst (Snd"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(Snd tpl));;"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pmeOffset","ntt = case ntt of PersonMiEntity tpl \u2212> Fst (Snd"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(Snd (Snd tpl)));;"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pmeRename","ntt = case ntt of PersonMiEntity tpl \u2212> Fst (Snd"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(Snd (Snd (Snd tpl))));;"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pmeSetZ","ntt = case ntt of PersonMiEntity tpl \u2212> Fst (Snd"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(Snd (Snd (Snd (Snd tpl)))));;"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pmeChangeEmail","ntt = case ntt of PersonMiEntity tpl \u2212> Fst (Snd"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(Snd (Snd (Snd (Snd (Snd tpl))))));;"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pmeChangePhone","ntt = case ntt of PersonMiEntity tpl \u2212> Fst (Snd"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(Snd (Snd (Snd (Snd (Snd (Snd tpl)))))));;"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pmeChangeIpAddr","ntt = case ntt of PersonMiEntity tpl \u2212> Snd (Snd"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(Snd (Snd (Snd (Snd (Snd (Snd tpl)))))));;"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"-- This builds a \u201cMapItemPerson\u201d state machine, given the entity"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ID and a reference state"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"--\u2003\u2003(the reference state is not used as the base for updates;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"updates are made to the database version directly)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"makeMapItemPersonEntity :: (Integer \u2212> MapItem \u2212> PersonMiEntity)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"eid ::Integer"]},{"entry":[{},"mapItemPerson::MapItem ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"PersonMiEntity (eid, mapItemPerson, moveTo"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"eid, offset eid, rename eid, setZ eid, changeEmail eid, changePhone"},{"entry":"eid, changeIpAddr eid);"},{"entry":"----------------------"},{"entry":"-- Media Entity"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"doNewUrl new mapItem ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"makeMapItem"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(itemCase (item mapItem)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"makePersonItem"]},{"entry":[{},"(\\media \u2212> makeMediaItem"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(makeMedia (title media) (mime media) new))"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"makeRfidItem"]},{"entry":[{},"makeInlineItem"]},{"entry":[{},"makeVideoItem"]},{"entry":[{},"makeStringItem)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(location mapItem);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"changeUrl eid::Integer new::Url = (UpdateMapItem) ((doNewUrl new),"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(Eid eid));"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"makeMapItemMediaEntity {-::(Integer \u2212> MapItem \u2212> MediaMiEntity)-}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"eid {-::Integer-}"]},{"entry":[{},"mapItemMedia {-::MapItem-} ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"MediaMiEntity (eid, mapItemMedia, moveTo"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"eid, offset eid, rename eid, setZ eid, changeUrl eid);"},{"entry":"----------------------"},{"entry":"-- Inline Entity"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"doNewScale","= (\\w h mapItem \u2212>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"makeMapItem"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(itemCase (item mapItem)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"makePersonItem"]},{"entry":[{},"makeMediaItem"]},{"entry":[{},"makeRfidItem"]},{"entry":[{},"(\\inline \u2212> makeInlineItem"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(makeInline (media inline) (makeScale w h)))"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"makeVideoItem"]},{"entry":[{},"makeStringItem)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(location mapItem));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"changeScale eid::Integer w::Width h::Height = (UpdateMapItem)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"((doNewScale w h), (Eid eid));"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"makeMapItemInlineEntity {-::(Integer \u2212> MapItem \u2212>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"InlineMiEntity)-}"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"eid {-::Integer-}"]},{"entry":[{},"mapItemInline {-::MapItem-} ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"InlineMiEntity (eid, mapItemInline, moveTo"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"eid, offset eid, rename eid, setZ eid, changeScale eid);"},{"entry":"----------------------"},{"entry":"-- Application Functions"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"---------------------"]},{"entry":[{},"-- Cannonical predicate filter for rectangular regions (curry-"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"able)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"regionFilter = (\\low high loc \u2212>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"let","lx","= (position_x low );"]},{"entry":[{},{},"ly","= (position_y low );"]},{"entry":[{},{},"hx","= (position_x high);"]},{"entry":[{},{},"hy","= (position_y high);"]},{"entry":[{},{},"ox","= (position_x loc );"]},{"entry":[{},{},"oy","= (position_y loc ); in"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(and (and (gte ox lx) (gte oy ly)) (and (lte ox hx) (lte oy"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"hy)))"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},");"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"----------------------"},{"entry":"-- Application Interface"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"-------------------------"]},{"entry":[{},"-- User Entities"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"nowhere","= makeLocation (PosX 0) (PosY 0) (PosZ 0);"]},{"entry":[{},"emptyP","= makePerson (Name \u201cNobody\u201d) (Email \u201c\u2009\u201d) (Phone \u201c\u2009\u201d)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(IpAddr \u201c\u2009\u201d);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"emptyPI","= makePersonItem emptyP;"]},{"entry":[{},"emptyPMI","= makeMapItem emptyPI nowhere;"]},{"entry":[{},"inlineZ","= PosZ 10;"]},{"entry":[{},"nonInlineZ","= PosZ 100;"]},{"entry":[{},"personZ","= PosZ 120;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"-------------------------"]},{"entry":[{},"-- Person Entities"]},{"entry":[{},"--"]},{"entry":[{},"-- Create a new user"]},{"entry":[{},"createPersonLoc nam emai phon ipadd loc ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case ((CreateMapItem) (makeMapItem (makePersonItem"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(makePerson nam emai phon ipadd)) loc)) of"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Fail","\u2212> Eid \u22121;"]},{"entry":[{},"CreatedEid eid","\u2212> Eid eid;;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"createPerson","= (\\nam emai phon ipadd \u2212> createPersonLoc nam"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"emai phon ipadd (makeLocation (PosX 0) (PosY 0) personZ));"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"getPerson eid","= makeMapItemPersonEntity eid (entityMapItem eid);"]},{"entry":[{},"newLoginLoc","= createPersonLoc;"]},{"entry":[{},"newLogin","= createPerson;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"newLoginStr n e p i = createPerson (Name n) (Email e) (Phone p)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(IpAddr i);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"-- Login an existing user (given an eid); returns copy of current"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"user structure."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"login","= getPerson;"]},{"entry":[{},"logout","= (\\eid \u2212> eid);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"isPersonWith {-::((Person \u2212> Truth) \u2212> MapItem \u2212> Truth)-}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"p::(Person \u2212> Truth) mi ="}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(itemCase (item mi)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"p","-- \u2018p\u2019 is a function from"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Person \u2212> Bool"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(\\media","\u2212> False)"]},{"entry":[{},"(\\rfid","\u2212> False)"]},{"entry":[{},"(\\inline","\u2212> False)"]},{"entry":[{},"(\\video","\u2212> False)"]},{"entry":[{},"(\\str","\u2212> False));"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"isPerson = isPersonWith (\\_ \u2212> True);"]},{"entry":[{},"getPersonByIp ip {-::String-} = map (\\pr \u2212>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"makeMapItemPersonEntity (Fst pr) (Snd pr))"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(filter (\\pr \u2212> isPersonWith (\\p {-"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"::Person-} \u2212> eq ip (personIpAddr p)) (Snd pr))"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(AllEntityMapItem));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"-------------------------"]},{"entry":[{},"-- MapItem Entities"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"createMapItem mi","=","case ((CreateMapItem) mi) of"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Fail","\u2212> Eid \u22121;"]},{"entry":[{},"CreatedEid eid","\u2212> Eid eid;;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"getMapItem \u2003eid","=","makeMapItemEntity eid (entityMapItem eid) {-"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Null-};"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"-------------------------"]},{"entry":[{},"-- Media Entities"]},{"entry":[{},"createMediaLoc titl mim ur loc ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case ((CreateMapItem) (makeMapItem (makeMediaItem"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(makeMedia titl mim ur)) loc)) of"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Fail","\u2212> Eid \u22121;"]},{"entry":[{},"CreatedEid eid","\u2212> Eid eid;;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"createMedia \u2003titl mim ur = createMediaLoc titl mim ur"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(makeLocation (PosX 0) (PosY 0) nonInlineZ);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"createMediaStr titl mim ur = createMedia (Name titl) (Mime mim)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(Url ur);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"getMedia \u2003eid = makeMapItemMediaEntity eid (entityMapItem eid);"]},{"entry":[{},"-------------------------"]},{"entry":[{},"-- Rfid Entities"]},{"entry":[{},"createRfidLoc mac name group category loc ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case ((CreateMapItem) (makeMapItem (makeRfidItem"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(makeRfid mac name group category)) loc)) of"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Fail","\u2212> Eid \u22121;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CreatedEid eid \u2212> Eid eid;;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"createRfid mac name group category = createRfidLoc mac name group"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"category (makeLocation (PosX 0) (PosY 0) nonInlineZ);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"createRfidStr mac name group category = createRfid (MacAddr mac)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(Name name) group category;"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"getRfid","= getMapItem;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"isRfidWith p mi {-::MapItem-} = (itemCase (item mi)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(\\person","\u2212> False)"]},{"entry":[{},"(\\media","\u2212> False)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"p \u2003\u2003\u2003\u2003\u2003\u2003-- \u2018p\u2019 is a function from"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Rfid \u2212> Bool"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(\\inline","\u2212> False)"]},{"entry":[{},"(\\video","\u2212> False)"]},{"entry":[{},"(\\str","\u2212> False));"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"isRfid = isRfidWith\u2003\u2002 (\\_ \u2212> True);"]},{"entry":[{},"getTagByMac m = map (\\pr \u2212> makeMapItemEntity (Fst pr) (Snd pr) {-"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Null-})"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(filter (\\pr \u2212> isRfidWith (\\r \u2212> eq m"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(macAddr r)) (Snd pr))"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(AllEntityMapItem));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"-------------------------"]},{"entry":[{},"-- InlineMedia Entities"]},{"entry":[{},"createInlineLoc media scale loc ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case ((CreateMapItem) (makeMapItem"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(makeInlineItem (makeInline media scale)) loc)) of"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Fail","\u2212> Eid \u22121;"]},{"entry":[{},"CreatedEid eid","\u2212> Eid eid;;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"createInline media scale = createInlineLoc media scale"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(makeLocation (PosX 0) (PosY 0) inlineZ);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"getInline eid \u2003= makeMapItemInlineEntity eid (entityMapItem eid);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"-- \u2003isInlineWith p mi::MapItem = (itemCase (item mi)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["--","(\\person","\u2212> False)"]},{"entry":["--","(\\media","\u2212> False)"]},{"entry":["--","(\\rfid","\u2212> False)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["--","p \u2003\u2003\u2003\u2003\u2003\u2003-- \u2018p\u2019 is a function"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"from Inline \u2212> Bool"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["--","(\\video","\u2212> False)"]},{"entry":["--","(\\str","\u2212> False));"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"-- \u2003isInline = isInlineWith (\\_ \u2212> True);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"isInline mi {-::MapItem-} = (itemCase (item mi)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(\\person","\u2212> False)"]},{"entry":[{},"(\\media","\u2212> False)"]},{"entry":[{},"(\\rfid","\u2212> False)"]},{"entry":[{},"(\\inline","\u2212> True )"]},{"entry":[{},"(\\video","\u2212> False)"]},{"entry":[{},"(\\str","\u2212> False));"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"-- \u2003getInlineByTitle n = map (\\pr \u2212> makeMapItemInlineEntity (Fst ."},{"entry":"pr) (Snd . pr) Null)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["--",{},"(filter (\\pr \u2212> isInlineWith (\\r \u2212> eq n"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(title (media r))) (Snd . pr))"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["--","(AllEntityMapItem));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"-------------------------"]},{"entry":[{},"-- Video Entities"]},{"entry":[{},"createVideoLoc video loc ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case ((CreateMapItem) (makeMapItem (makeVideoItem"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"video) loc)) of"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Fail","\u2212> Eid \u22121;"]},{"entry":[{},"CreatedEid eid","\u2212> Eid eid;;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"createVideo name brand ipaddr = createVideoLoc (makeVideo name"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"brand ipaddr) (makeLocation (PosX 0) (PosY 0) nonInlineZ);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"createVideoStr name brand ipaddr = createVideo (Name name) brand"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(IpAddr ipaddr);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"getVideo","= getMapItem;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"-------------------------"]},{"entry":[{},"-- String Entities"]},{"entry":[{},"createStringLoc str loc ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case ((CreateMapItem) (makeMapItem"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(makeStringItem str) loc)) of"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Fail","\u2212> Eid \u22121;"]},{"entry":[{},"CreatedEid eid","\u2212> Eid eid;;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"createString str = createStringLoc str (makeLocation (PosX 0)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(PosY 0) nonInlineZ);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"getString","= getMapItem;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"-------------------------"]},{"entry":[{},"-- Given a list of IDs, use the getter to generate all matching"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"items and concatenate the resulting list."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"getWithFilter getter {-::(a \u2212> TList b)-} list {-::(TList a)-} ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"catalist Null (\\pr \u2212> let"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"id","= Fst pr;",{}]},{"entry":[{},"lst","= Snd pr;",{}]},{"entry":[{},"pers","= getter id;","-- Returns a"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"list of items matching the filter (possibly Null)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"in cat pers lst) list;","-- Concatenate"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"the lists of items together"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"-------------------------"]},{"entry":[{},"-- Given a list of (ID, ARG), and a getter, get all the items and"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"zip them with the arguments provided"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"getAndZipWithFilter -- ::((a \u2212> TList b) \u2212> TList (a,c) \u2212> TList"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(a,c))"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"getter -- ::(a \u2212> TList b)"]},{"entry":[{},"listA {-::(TList (a,c))-} ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"catalist Null (\\pr \u2212> let"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"tupl","= Fst pr;",{}]},{"entry":[{},"lst","= Snd pr;",{}]},{"entry":[{},"id","= Fst tupl;",{}]},{"entry":[{},"arg","= Snd tupl;",{}]},{"entry":[{},"itm","= getter id;","--"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Returns a list of items matching the filter (possibly Null)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"iarg = map (\\i \u2212> (i,arg)) itm;","-- Zip"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"the argument with each item"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"in cat iarg lst) listA;","--"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Concatenate the lists of items together"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"applyOpToNttList op = catalist Void (\\pr \u2212> let"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"tupl","= Fst pr;"]},{"entry":[{},"vod","= Snd pr;"]},{"entry":[{},"ntt","= Fst tupl;"]},{"entry":[{},"arg","= Snd tupl;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"in op ntt arg);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"hysteresis new_x new_y old_x old_y = let"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"-- Returns True if the new value is within"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"some distance of the old value"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"-- \u2003(ie: True = no change)"]},{"entry":[{},"histX = 130; -- Units are in Inches."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"These values were chosen by watching the movement of the OQOs"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"histY = 90;\u2003--"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"under normal conditions in the cube for some minutes."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"newx","= intX new_x;"]},{"entry":[{},"newy","= intY new_y;"]},{"entry":[{},"oldx","= intX old_x;"]},{"entry":[{},"oldy","= intY old_y;"]},{"entry":[{},"lowx","= minus oldx histX;"]},{"entry":[{},"lowy","= minus oldy histY;"]},{"entry":[{},"highx","= plus oldx histX;"]},{"entry":[{},"highy","= plus oldy histY;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"in and (and (lte lowx newx) (lte lowy"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"newy)) (and (gte highx newx) (gte highy newy));"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"moveIfNewLoc move ntt newXY = let"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"mi","= entity ntt;"]},{"entry":[{},"loc","= location mi;"]},{"entry":[{},"x","= position_x loc;"]},{"entry":[{},"y","= position_y loc;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"in cond (\\pr \u2212> hysteresis (Fst pr)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["(Snd pr) x y)","-- Only update if (x,y) has moved enough."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"( (\\pr \u2212> Void)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"-- If no change, do nothing!"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},", (\\pr \u2212> move (getId ntt)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(Fst pr) (Snd pr))) -- If a change occured, move the item."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"newXY;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"updatePersonAndRfid listP listR = let"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"updateTags = applyOpToNttList (moveIfNewLoc"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"moveTo) (getAndZipWithFilter getTagByMac listR);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"updatePers = applyOpToNttList (moveIfNewLoc"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"moveTo) (getAndZipWithFilter getPersonByIp listP);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"in (updateTags, updatePers);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"In"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The GeoSpatial application specified in Table 1 is written in the SML language as described previously. For example, the GeoSpatial application does not express computing system operations to be performed, rather it is written as a specification that describes functions to be performed. Hence, operations such as reading\/writing a data structure from\/to a memory location, etc., are not specified because operations such as hardware-based attributes associated with memory persistence, memory pointers, data distribution etc. are opaque to the writer of the SML application, rather the SML application describes how data elements are extracted from existing data structures in order to create new data structures.","The GeoSpatial application specified in Table 1 utilizes the following example SML language syntax: a line starting with a double dash \u201c- -\u201d denotes a comment; a line starting with \u201cdata\u201d denotes a declaration of a data structure; an equal sign \u201c=\u201d denotes \u201cis\u201d; an expression ending with a semicolon \u201c;\u201d denotes an end of the expression; a line starting with a string other than \u201cdata\u201d defines the string as a lambda function, where space-separated values following the string denote required input parameters in a required ordering; an expression ending with a double semicolon \u201c;;\u201d denotes a condition; comma-separated items in parenthesis are presented in a required ordering; a dash and arrow \u201ca->b\u201d denotes that the example specified lambda function \u201ca\u201d returns \u201cb\u201d; a vertical line \u201c|\u201d represents a Boolean \u201cOR\u201d; values in parenthesis separated by a dash and arrow (e.g., \u201c(PosX->PosY->Void)\u201d denotes required parameters \u201cPosX\u201d and \u201cPosY\u201d for a lambda function that returns a typeless answer (\u201cVoid\u201d), where \u201cVoid\u201d is equivalent to a Null operation; a double colon \u201c::\u201ddenotes \u201cis of type\u201d; a dash and double colon sign (e.g., \u201c-::\u201d or \u201c-- ::\u201d) denotes \u201cis defined as\u201d; the reference \u201c_\u201d following a specified lambda function indicates that any input can be accepted, and \u201c\\pr\u201d is a lambda function indicating an input of any type is accepted so long as the input can be passed to a referenced lambda function. Additional syntax will become apparent from the following description.",{"@attributes":{"id":"p-0073","num":"0078"},"figref":["FIG. 6","FIG. 1"],"b":["16","74","38","32","34"]},"The geospatial application  relies on the base semantic types in providing strongly typed definitions for types at the type level in step , where each type can be a tuple, a sum, or a lambda function. For example, the data structure \u201cName\u201d (illustrated in  as within the data structures , , , , and\/or ) has a strongly typed definition at the semantic level to be a string, and to be of the type Name; the data structure \u201cPosX\u201d (representing a position in the \u201cx\u201d dimension in an x-y-z coordinate system) has a strongly typed definition at the semantic level to be an integer, and to be of the type \u201cPosX\u201d.","Declarations also can define in step  data structures as algebraic data types consisting of predefined types, i.e., strongly typed data attributes associated with an entity such as a user; for example, the data structure \u201cPerson\u201d of  has a strongly typed definition as a Sum consisting strongly typed data attributes of the predefined types Name, Email, Phone, and IpAddr, that are expressed in the specified order. Additional declarations provide strongly typed definitions of the Sums \u201cMedia\u201d , \u201cRfid\u201d , \u201cLocation\u201d , \u201cScale\u201d , \u201cInline\u201d , and \u201cVideo\u201d . Hence, a declaration providing a strongly typed definition of an algebraic data type consisting of a plurality of specified types will explicitly specify the ordering that is required for the specified types. Alternately, a Sum can be specified to have a strongly typed definition to include any one of multiple distinct predefined types: for example, the data structure \u201cItem\u201d is a Sum that can contain any one of a \u201cPerson\u201d data structure (referred to as a \u201cPersonItem\u201d) , a \u201cMedia\u201d data structure (referred to as a \u201cMediaItem\u201d) , a \u201cRfid\u201d data structure (referred to as a \u201cRfidItem\u201d) , an \u201cInline\u201d data structure (referred to as an \u201cInlineItem\u201d) , a \u201cVideo\u201d data structure (referred to as a \u201cVideoItem\u201d) , or a \u201cName\u201d data structure (referred to as a \u201cStringItem\u201d) ","Another data structure called \u201cMapItem\u201d has a strongly typed definition as having the algebraic data type \u201cMapItem\u201d (i.e., a Sum) consisting of the predefined types \u201cItem\u201d and \u201cLocation\u201d , in that order; hence, each MapItem data structure represents a particular item (of type \u201cPersonItem\u201d, \u201cMediaItem\u201d, \u201cRfidItem\u201d, \u201cInlineItem\u201d, \u201cVideoItem\u201d, or \u201cStringItem\u201d) having an identifiable location in the Geospatial application. The algebraic data type (i.e., Sum) \u201cMapItem\u201d also is used in the strongly typed definition of the data structure labeled \u201cMapItemEntity\u201d that is defined as having the algebraic data type \u201cMapItemEntity\u201d and consisting of, in order, the data structure \u201cInteger\u201d, the data structure \u201cMapItem\u201d , followed by four lambda functions  that return void results (i.e., no results), the four lambda functions are identified as \u201cMoveTo\u201d, \u201cOffset\u201d, \u201cRename\u201d, and \u201cSetZ\u201d.","Similar strongly typed definitions are provided in step  for the respective algebraic data types \u201cPersonMiEntity\u201d (also referred to as \u201cperson map item entity\u201d) , \u201cMediaMIEntity\u201d (also referred to as \u201cmedia map item entity\u201d) , and \u201cInlineMiEntity\u201d (also referred to as \u201cin-line map item entity\u201d , each algebraic data type defined as containing the prescribed types \u201cInteger\u201d and \u201cMapItem\u201d , plus prescribed lambda functions  for manipulation and\/or modification of the associated data structures.","In addition to the geospatial application of Table 1, prescribed primitives can be supplied to the transformation system  (e.g., in the form of an SML application with new features) that provides support for primitive types not defined explicitly in the geospatial application. For example, the following primitive types can be injected into the transformation system  to provide support for behaviors of an executable system that has inductive types and monads. Example primitive types that can be injected into the transformation system for support of the geospatial application include \u201cAllEntityHistory*\u201d (a primitive providing an inductive operation over a monad), \u201cAllEntity*\u201d (a primitive providing an inductive operation over a monad), \u201cEntity*\u201d (a primitive providing a monadic operation), \u201cUpdate*\u201d (a primitive providing a monadic operation), and \u201cCreate*\u201d (a primitive providing a monadic operation).","The geospatial application of Table 1 in step  provides strongly typed definitions (specified in the portion \u201cGeoSpatial Data Type Constructors\u201d) for lambda functions  (e.g., \u201cmakeLocation\u201d, \u201cmakePerson\u201d of , \u201cmakeMedia\u201d, \u201cmakeRfid\u201d, \u201cmakeScale\u201d, \u201cmakeInline\u201d, \u201cmakeVideo\u201d, \u201cmakeMapItem\u201d of ) for constructing prescribed data types. Additional strongly typed definitions define lambda functions  for constructing data structures that are specific to a type of item (PersonItem, MediaItem, RfidItem, InlineItem, VideoItem, and StringItem). For example, the \u201cmakeMapItem\u201d lambda function applies the inputs \u201citem\u201d and \u201cloc\u201d (in that order) and returns the data structure \u201cMapItem\u201d (of type \u201cMapItem\u201d) having the tuples \u201c(item, loc\u201d). The accessor lambda function \u201citem\u201d (listed below the \u201cmakeMapItem\u201d lambda function) can obtain the \u201cmapItem\u201d data structure (of type \u201cMapItem\u201d) as an input and return the \u201citem\u201d data structure from the first part of the tuple (\u201cFst tpl\u201d) from the retrieved (input) \u201cmapItem\u201d data structure ; the accessor lambda function \u201clocation\u201d can retrieve the \u201cmapItem\u201d data structure as an input and return the \u201clocation\u201d data structure from the second part of the tuple (\u201cSnd tpl\u201d) from the \u201cmapItem\u201d data structure (of type \u201cMapItem\u201d) . Additional strongly typed definitions (e.g., \u201cpersonName\u201d, \u201cemail\u201d, \u201cphone\u201d, \u201cpersonIpAddr\u201d, etc.) define lambda functions for extracting selected values from identified data structures of defined types based on validating that the extracted value satisfies the prescribed typing discipline (e.g., \u201cpersonName person=case person of Person tpl->(Fst tpl);;\u201d). As described below, these lambda functions can extract the selected data values for various operations in the geospatial application, including creating a new data structure, or initiating a multimedia communications session between selected entities within a geospatial region (two or three-dimensional) selected by a user.","The lambda function \u201cmakeEntity\u201d (following the comment \u201cBuild Generic Entity Structures\u201d) enables the construction of a generic Type in the geospatial application, referred to as \u201cEntity\u201d, that is a algebraic data type (e.g., a Sum) that contains the variables \u201ceid\u201d (entity identifier) of type Integer , \u201cmapItem\u201d of type MapItem , and zero or more lambda functions  in that order (the lambda functions \u201cfirstFn\u201d and \u201cnextFn\u201d also are declared for retrieving lambda functions from a set \u201ca\u201d of lambda functions  that are null terminated. As described in further detail below, the variable \u201ceid\u201d is an entity identifier that uniquely identifies a corresponding entity as the entity progresses over time throughout the GeoSpatial system.","A lambda function  also can have a strongly typed definition to perform a specified operation based on identifying a data structure as being an instance of a particular type, illustrated by the \u201citemCase\u201d lambda function: in the case that an item is an instance of type \u201cPersonItem\u201d, the lambda function \u201citemCase\u201d returns a function \u201cpfunc\u201d on an input \u201ca\u201d; in the case that the item is an instance of type \u201cMediaItem\u201d, the lambda function \u201citemCase\u201d returns a function \u201cmfunc\u201d on the input \u201ca\u201d, etc.","As described previously, the GeoSpatial application  provides a specification that describes functions to be performed; hence, the strongly typed definitions describe the data to be extracted (or the data structure to be created), without specifying the manner in which the data structure(s) are to be fetched or stored from memory (e.g., a non-transitory computer or machine-readable storage medium).","The geospatial application in step  also provides strongly typed definitions for creating new data structures that update a state attribute of a MapItem Entity . In particular, a particular attribute of the example embodiment is that no data structure is ever deleted or removed from the geospatial application, nor is any data structure ever overwritten or modified; to the contrary, all data structures are preserved, and each data structure has a corresponding monotonically increasing creation identifier attribute added at the time of its creation (e.g., a temporal attribute such as an epic time value or a time stamp), enabling a complete history of each and every attribute in the geospatial application to be retraced and recreated.","For example, the lambda function \u201cdoMoveTo\u201d can create a new instance of an existing MapItem data structure by obtaining the data structures \u201cPosX\u201d (of type \u201cPosX\u201d), \u201cPosY\u201d (of type \u201cPosY\u201d), and \u201cMapItem\u201d (of type \u201cMapItem\u201d), and returning a new data structure \u201cMapItem\u201d; in particular, the data structures \u201cloc\u201d, \u201cz\u201d, and \u201cit\u201d can be obtained based on applying the respective accessor lambda functions \u201clocation\u201d (with input \u201cmapItem\u201d), \u201cposition_z\u201d (with input \u201cloc\u201d), and \u201citem\u201d (with input \u201cmapItem\u201d) to the existing data structure \u201cmapItem\u201d, and a new location can be created using the lambda function \u201cmakeLocation\u201d using inputs \u201cx y z\u201d (expressed as \u201cmakeLocation x y z\u201d), and returned as variable \u201cne\u201d. Hence, the new data structure \u201cMapItem\u201d of type \u201cMapItem\u201d is created using the lambda function \u201cmakeMapItem\u201d (of ) using inputs \u201cit\u201d and \u201cne\u201d (expressed as \u201cmakeMapItem it ne\u201d), while maintaining the same entity identifier \u201ceid\u201d that establishes the prior data structure \u201cmapItem\u201d and the new data structure \u201cmapItem\u201d as representing the same entity at a different instance in time.","Hence, the history of a particular entity (e.g., a person, media, RFID, Inline, Video, or Name) can be determined based on obtaining all data structures having the same entity identifier \u201ceid\u201d; similarly, all entities having ever been at or near the same location can be determined by identifying all data structures having the same or similar Location data structures (as expressed by the PosX, PosY, and PosZ types); all entities having used the same Internet Protocol (IP) network address can be determined by identifying all data structures having the same value for \u201cIpAddr\u201d of type \u201cString\u201d, etc.","Additional declared lambda functions  for creating a new data structure that update a state attribute of a MapItem Entity can include \u201cdoOffset\u201d (to change the x y position from an existing \u201cmapItem\u201d data structure), \u201cdoSetZ\u201d (to change the z position from an existing \u201cmapItem\u201d data structure), and \u201cdoRename\u201d (to rename an existing \u201cmapItem\u201d data structure). For example, the \u201cdoRename\u201d lambda function  applies the input \u201cnew\u201d (of type \u201cName\u201d) to the data structure \u201cmapItem\u201d (of type \u201cMapItem\u201d) based on applying the lambda function \u201citemCase\u201d to select the lambda function to be applied for the corresponding determined type for the data structure \u201citem\u201d (e.g., type \u201cPersonItem\u201d, \u201cMediaItem\u201d, \u201cRfidItem\u201d, \u201cInlineItem\u201d, \u201cVideoItem\u201d, or \u201cStringItem\u201d): in the case that the data structure \u201cmapItem\u201d is of type \u201cPersonItem\u201d, the lambda function \u201cdoRename\u201d causes the lambda function \u201cmakePersonItem\u201d to apply the input \u201cnew\u201d as an input to the \u201cname\u201d variable in the \u201cmakePerson\u201d lambda function in \u201cmakePersonItem\u201d, the remaining variables for the \u201cmakePerson\u201d lambda functions retrieved from the existing data structure \u201cmapItem\u201d in the prescribed order by the respective lambda functions \u201cemail\u201d, \u201cphone\u201d, and \u201cpersonIpAddr\u201d (defined as part of the \u201cmakePerson\u201d lambda function); in the case that the data structure \u201cmapItem\u201d is of type \u201cMediaItem\u201d, the lambda function \u201cdoRename\u201d causes the lambda function \u201cmakeMediaItem\u201d to apply the input \u201cnew\u201d as an input to the \u201ctitle\u201d variable in the \u201cmakeMedia\u201d lambda function in \u201cmakePersonItem\u201d, the remaining variables for the \u201cmakeMedia\u201d lambda function retrieved from the existing data structure \u201cmapItem\u201d in the prescribed order by the lambda functions \u201cmime\u201d and \u201curl\u201d (defined as part of the \u201cmakeMediaStr\u201d lambda function), etc.","The geospatial application also can execute in steps  or  of  additional declared lambda functions that can include accessor methods for retrieving selected data structures from map item objects and creating new data structures accordingly. For example, the lambda function \u201cgetID\u201d can obtain the entity identifier \u201cntt\u201d as a local variable based on retrieving the first data structure from the first tuple of the \u201cMapItemEntity\u201d data structure , previously declared (under the \u201cApplication Types\u201d Declarations) as being of type \u201cInteger\u201d ; the lambda function \u201centity\u201d can be used to fetch the data structure of type \u201cMapItem\u201d from the second element of the \u201cMapItemEntity\u201d data structure (i.e., the first element of the second tuple); the declared lambda functions \u201cmoveTo\u201d, \u201coffset\u201d, \u201crename\u201d, and \u201csetZ\u201d  can effectively move, offset, rename, or change the elevation of a specified entity (identified by its entity identifier \u201ceid\u201d) based on applying the relevant inputs to the respective lambda functions \u201cdoMoveTo\u201d (using inputs \u201cx y\u201d), \u201cdoOffset\u201d (using inputs \u201cx y\u201d), \u201cdoRename\u201d (using input \u201cnew\u201d), and \u201cdoSetZ\u201d (using input \u201cz\u201d) in the lambda function \u201cUpdateMapItem\u201d.","Additional declared lambda functions can create in step  new map item entity data structures reflecting an update of a particular entity (identified by its entity identifier), effectively enabling the building of a temporal \u201cMapItem\u201d state machine based on tracking the sequence of map item entity data structures associated with a particular entity identifier. Hence, the geospatial application  can search all entities to find all data structures satisfying a selected criterion. For example, the lambda function \u201centityMapItem\u201d of  creates a new data structure having a new entity identifier \u201cEid\u201d (of type \u201cinteger\u201d) if no input is specified, else the lambda function returns the data structure of type \u201cMapItem\u201d and associated with the specified input \u201ceid\u201d; the lambda function \u201callEntityMapItem\u201d is described as a specification of a function that can create a curried list of any data structure to find all data structures satisfying the supplied input condition (the reference \u201c_\u201d indicates that any input can be accepted, and \u201c\\pr\u201d is a lambda function indicating an input of any type is accepted so long as the input can be passed to the lambda function \u201cmakeMapItemEntity\u201d); further, the specification of the lambda function \u201callEntityMapItem\u201d referencing itself enables function to be repeated for the next data structure, until a null condition is encountered.","Hence, applying the example input \u201cPersonItem\u201d would return a data structure in the form of a curried list of all items of type \u201cPerson\u201d (and labeled as \u201cPersonItem\u201d) in the geospatial application, where a null condition would be encountered upon completion that causes the lambda function \u201callEntityMapItem\u201d to complete its operations (in accordance with the requirements of being non-Turing complete). Similarly, applying the example input \u201cItem\u201d to the lambda function \u201callEntityMapItem\u201d would return a data structure in the form of a curried list of all items in the geospatial application. Hence, the lambda function \u201callEntityMapItem\u201d effectively executes as an infinite loop, except that non-Turing completeness is maintained by completing the operation upon encountering a null condition.","As apparent from the foregoing, the curried lists generated by the associated lambda functions  can be stored as data structures for further manipulation, for example adding newly created items to the curried lists, or performing filtering operations on the curried lists. Such manipulation of the curried lists enables optimization of the ad hoc geospatial directory, where any computing device can incrementally (and on an ad hoc basis) add new data structures that create new entities, update existing entities, or create\/update curried lists for optimization of queries on the ad hoc geospatial directory.","Similarly, the \u201callEntityHistoryMapItem\u201d lambda function enables the retrieval of an entity identifier (\u201ceid\u201d), an entity data structure (\u201centry\u201d), a time stamp (\u201ctime\u201d), and another entity (\u201cntt\u201d) until a null condition is encountered, in order to return a history of items into an Entity List that lists the history of all entities.","The declared lambda function can create a maximum or minimum value in an identified entity data structure relative to existing entities. For example the \u201csetZFromTop\u201d lambda function can set a maximum \u201cheight\u201d (expressed by its \u201cposition_z\u201d value) for an identified entity (identified by its entity identifier \u201ceid\u201d input) by adding a height offset (expressed by the height offset \u201coffZ\u201d input) relative to the maximum height (of type \u201cPosZ\u201d) of all other existing data structures of type \u201cMapItem\u201d. In particular, the \u201csetZFromTop\u201d lambda function first obtains a list of all map items, and determines the maximum based on concatenating the list of map items.","Additional lambda functions can be used for assigning new reachability for a person, for example \u201cdoNewEmail\u201d to create a new map item specifying a new e-mail address for reaching the person, \u201cdoNewPhone\u201d to create a new map item specifying a new phone number for reaching the person, \u201cdoNewIpAddr\u201d to create a new map item specifying a new IP address for reaching the person, or \u201cchangeEmail\u201d to create a new map item specifying an alternative e-mail address (superseding the prior e-mail) for reaching the person, or a lambda function for moving a \u201cperson map entity\u201d (\u201cpmeMoveTo\u201d), offsetting a person map entity (\u201cpmeOffset\u201d), renaming a person map entity (\u201cpmeRename\u201d), setting a height (\u201cz\u201d) of a person map entity (\u201cpmeSetZ\u201d), changing the e-mail address for a person map entity (\u201cpmeChangeEmail\u201d), changing a phone number for a person map entity (\u201cpmeChangePhone\u201d), or changing the IP address for a person map entity (\u201cpmeChangeIpAddr\u201d). Similar lambda functions can be used for assigning new parameters for different entities such as a media entity (e.g., \u201cdoNewURL\u201d, \u201cchangeUrl\u201d, \u201cmakeMapItemMediaEntity\u201d), or an in-line entities (e.g., \u201cdoNewScale\u201d, \u201cchangeScale\u201d, or \u201cmakeMapItemInlineEntity\u201d). As described previously, a data structure is never deleted from the system, hence the history of any entity can be traced throughout the geospatial application based on the corresponding entity identifier and indexed, for example, by the associated timestamp values.","Hence, the example embodiments enable precise tracing of events injected into the geospatial application. For example, if a data packet was injected into the system using a particular source IP address and caused a particular event at a certain time (e.g., a malicious attack or a denial of service attack), the example geospatial application can identify the entities that utilized that IP address, and at what point in time that IP address was utilized.","The portion of the geospatial application labeled \u201cApplication Functions\u201d declares a lambda function (\u201cregionFilter\u201d) that establishes a rectangular filter within the geospatial region: the inputs include x,y coordinates for a \u201clow\u201d position, x,y coordinates for a \u201chigh\u201d position, and x,y coordinates for an offset position, the lambda function \u201cregionFilter\u201d being of a type that includes lambda functions (as evidenced by the term \u201cin\u201d).","The foregoing primitive terms, types, tuples, sums, lambdas, and the typing on the lambdas described with respect to Table 1 are used to provide underlying semantic and type support for user interface lambda functions (as apparent from the foregoing, there are no explicit Kind types specified in Table 1: although there are Kind types in the types of the lambda functions in the form of type inference, the Kind types are not referenced explicitly in Table 1). As described in further detail below, the previously-described type and lambda functions are not accessible by users of the geospatial application, but provide underlying semantic, type, and application function execution support for user interface lambda functions that are accessible by users of the geospatial application. The previously-described lambda functions also enable optimization of lambda functions execution in the distributed system, based on creation and storage of curried lists, such as a curried list of all entities in a system, a curried list of a history of all entities of a system, etc. These curried lists can be combined, split, etc., as appropriate, for optimization of queries generated by users of the geospatial application.","The geospatial application in step  provides strongly typed definitions for lambda functions  to be used for providing a visualization by users in the graphical user interface (presentation layer)  of the geospatial application as \u201cApplication Interface\u201d. These example lambda functions can be called by users in the application layer (presentation layer) , implemented for example as a command line interface (CLI) or a graphic user interface (GUI), described below. Example lambda functions include the lambda function \u201cnowhere\u201d that establishes a location having a null position (0, 0, 0) in the (x, y, z) coordinate space, where the zeros are strongly typed as types \u201cPosX\u201d, \u201cPosY\u201d and \u201cPosZ\u201d. Another lambda function \u201cemptyP\u201d enables construction of an \u201cempty\u201d person data structure (i.e., a person is constructed but nothing is declared), where the type \u201cName\u201d has a value of \u201cNobody\u201d, and the data types \u201cEmail\u201d, \u201cPhone\u201d and \u201cIpAddr\u201d have empty values, the lambda function \u201cemptyPI\u201d enables construction of an empty person item based on the input of an empty person (\u201cemptyP\u201d), and the lambda function \u201cemptyPMI\u201d enables construction of an empty person map item that utilizes the \u201cmakeMapItem\u201d lambda function applying the inputs \u201cemptyPI\u201d and \u201cnowhere\u201d (default \u201cPosZ\u201d representations also are provided for \u201cinlineZ\u201d, \u201cnonInlineZ\u201d, and \u201cpersonZ\u201d).","A new user can be created in the geospatial application based on the lambda function \u201ccreatePersonLoc\u201d using the sequence of inputs of name, e-mail, phone number, IP address, and location. The lambda function \u201ccreatePerson\u201d can create a person that has a default location; in contrast to lower-level lambda functions permitting creation of a person with no location, at the geospatial application layer each person is assigned a location, at least a default location. Hence, a user of the geospatial application is not permitted to create an item that does not have a location. The lambda function \u201cgetPerson\u201d of  enables retrieval of a person data structure by their \u201ceid\u201d: if no such person exists yet in the system, in the geospatial application will create a new person map item entity (of type \u201cPersonMiEntity\u201d) based on executing the lambda function \u201cmakeMapItemPersonEntity\u201d of . The lambda function \u201cnewLoginLoc\u201d enables creation of a person data structure specifying a location by invoking the \u201ccreatePersonLoc\u201d lambda function , and the lambda function \u201cnewLogin\u201d enables creation of a person data structure without any supplied location data (in which case the default location is established using the \u201ccreatePerson\u201d lambda function). The lambda function \u201cnewLoginStr\u201d either creates the person data structure with the supplied strongly typed parameters associated with the user (\u201cn\u201d for Name, \u201ce\u201d for e-mail, \u201cp\u201d for phone number, and \u201ci\u201d for IP address), or retrieves an existing person data structure (identified by the corresponding EID) having the supplied parameters. The lambda functions \u201clogin\u201d () and \u201clogout\u201d also permit a user to login to the system based on the \u201cgetPerson\u201d lambda function, and (optionally) logout by nullifying the entity identifier \u201ceid\u201d.","The geospatial application  also can provide strongly typed definitions in step  of lambda functions available at the presentation layer  that can generate a concatenated list of items matching a filter constraint. For example, the lambda function \u201cisPersonWith\u201d enables the geospatial application  to determine if there is a person associated with a particular entity, enabling identification of one or more persons associated with a particular IP address (as implemented by the lambda function \u201cgetPersonByIp\u201d).","The lambda function \u201ccreateMapItem\u201d of  enables creation in step  of an item and returns the entity identifier to a client application executing the presentation layer, else a \u201c\u22121\u201d in the case of a fault during creation. The lambda function \u201cgetMapItem\u201d enables in step  retrieval of a list of all data structures having the specified entity identifier (\u201ceid\u201d), terminated by a null. Hence, any entity can be recalled by its entity identifier \u201ceid\u201d. Similar lambda functions in step  are specified for creating and accessing media entities, RFID entities, in-line media entities, video entities (for injecting a video camera), and string entities, including associating different entities together (for example, the lambda function \u201ccreateVideoStr\u201d enables injection of a video stream, and \u201cgetVideo\u201d enables retrieval of the video stream by retrieval of the Map item).","The lambda function \u201cgetWithFilter\u201d enables creation by the geospatial application in step  of a concatenated list of items that satisfy a filter requirement of a list of identifiers (a concatenated list is generated using the command \u201ccatalist\u201d; any data structure can be concatenated using the prefix \u201ccata\u201d). The lambda function \u201cgetAndZipWithFilter\u201d enables creation by the geospatial application in step  of a concatenated list of items that is \u201czipped\u201d with (i.e. wrapped by) arguments used to obtain the items, similar to a \u201cmap fold\u201d operation. For example, assume one wishes to move a list of items (e.g., people) to a new z axis, the function \u201cgetAndZipWithFilter\u201d can form a curry of left\/right pairs of people with moved z axis values. The lambda function \u201capplyOpToNttList\u201d enables the geospatial application to apply an operator to an existing entity list. The lambda function \u201chysteresis\u201d can be used with location operations to indicate that if new values for x-y coordinates (\u201cnew_x new_y\u201d) are within a prescribed distance (\u201chistX\u201d, \u201chistY\u201d) of an existing value (\u201cold_x old_y\u201d), then the entity is deemed to be at the same location. The lambda function \u201cmoveIfNewLoc\u201d enables the geospatial application to move an entity (by creating a new entity data structure) if the new location exceeds the hysteresis limit as specified in the lambda function \u201cmoveIfNewLoc\u201d. Hence, the lambda function \u201cUpdatePersonAndRfId\u201d enables the geospatial application to generate an updated list of updated RFID tags (by MAC address) and an updated list of Persons by IP address.","Hence, the above-described user interface lambda functions can be invoked by users in the presentation layer ( of ) of the geospatial application. The above-described lambda functions can be invoked based on the users submitting a request for execution of at least one lambda function in an operation of the geospatial application. Further, these application interface functions can be implemented as a command line interface (CLI), Application Programming Interfaces (APIs), or more commonly as a graphic user interface (GUI) to facilitate a executing one or more user functions based on the user submitting a graphic icon-based request that is mapped by the GUI to an explicit lambda function request or a prescribed reference that invokes one or more of the lambda functions.","IV. Example Hardware Overview",{"@attributes":{"id":"p-0103","num":"0108"},"figref":["FIG. 9","FIG. 3","FIG. 1"],"b":["70","70","70","14","12","70","70","44","100","102","104","106","106","106","102","94","102"],"i":["a","b","a ","b"]},"The graphic user interface circuit can include a browser cache  (implemented as part of or distinct from the storage medium ) configured for caching of previously loaded images, user information (e.g., cookies), etc. The graphic user interface circuit also can include browser controls , for example non-transitory executable logic configured for translating controls and commands (received via the API circuit  from the execution circuit ) into context-sensitive graphical commands that are available to a user via a browser interface (e.g., a pointing device such as a mouse, touch sensitive screen, etc.). The command line interface circuit can be configured for submitting commands and\/or data input by a user via a keyboard (not shown), and displaying results received from the execution circuit  via the API circuit .","Any of the disclosed circuits of the computing nodes , including the execution circuit , the network interface circuit , the API circuit , the user interface circuit or , or the compiler circuit  within the transformation system , can be implemented in multiple forms. Example implementations of the disclosed circuits include hardware logic that is implemented in a logic array such as a programmable logic array (PLA), a field programmable gate array (FPGA), or by mask programming of integrated circuits such as an application-specific integrated circuit (ASIC). Any of these circuits also can be implemented using a software-based executable resource that is executed by a corresponding internal processor circuit such as a microprocessor circuit (\u03bcP) and implemented using one or more integrated circuits, where execution of executable code stored in a memory circuit of a computing node  causes the integrated circuit(s) implementing the processor circuit in the computing node  to store application state variables in processor memory, creating an executable application resource (e.g., an application instance) that performs the operations of the circuit as described herein. Hence, use of the term \u201ccircuit\u201d in this specification refers to both a hardware-based circuit that includes logic for performing the described operations, or a software-based circuit that includes a processor circuit (implemented using one or more integrated circuits), the processor circuit including a reserved portion of processor memory for storage of application state data and application variables that are modified by execution of the executable code by a processor circuit. The memory circuit can be implemented, for example, using one or more integrated circuits implemented in the form of a non-volatile memory such as a programmable read only memory (PROM) or an EPROM, and\/or a volatile memory such as a DRAM, etc.","Further, any reference to \u201coutputting a message\u201d or \u201coutputting a packet\u201d (or the like) can be implemented based on creating the message\/packet in the form of a data structure and storing that data structure in a non-transitory tangible memory medium in the disclosed apparatus (e.g., in a transmit buffer). Any reference to \u201coutputting a message\u201d or \u201coutputting a packet\u201d (or the like) also can include electrically transmitting (e.g., via wired electric current or wireless electric field, as appropriate) the message\/packet stored in the tangible memory medium to another network node via a communications medium (e.g., a wired or wireless link, as appropriate) (optical transmission also can be used, as appropriate). Similarly, any reference to \u201creceiving a message\u201d or \u201creceiving a packet\u201d (or the like) can be implemented based on the disclosed apparatus detecting the electrical (or optical) transmission of the message\/packet on the communications medium, and storing the detected transmission as a data structure in a non-transitory tangible memory medium in the disclosed apparatus (e.g., in a receive buffer). Also note that the memory circuit can be implemented dynamically by the processor circuit in the computing node , for example based on memory address assignment and partitioning executed by the internal processor circuit.","Further, the steps described herein (e.g., with respect any of the ) can be implemented as executable code stored on a computer or machine readable non-transitory tangible storage medium (e.g., floppy disk, hard disk, ROM, EEPROM, nonvolatile RAM, CD-ROM, etc.) that are completed based on execution of the code by a processor circuit implemented using one or more integrated circuits; the steps described herein also can be implemented as non-transitory executable logic that is encoded in one or more non-transitory tangible media for execution (e.g., programmable logic arrays or devices, field programmable gate arrays, programmable array logic, application specific integrated circuits, etc.).","V. Optimization of Geospatial Application for Ad Hoc Geospatial Directory",{"@attributes":{"id":"p-0108","num":"0113"},"figref":["FIG. 10","FIG. 9"],"b":["70","70","70","108","14","70","106","14"],"i":["a","b "]},"The geospatial application  and the transformation system  of  can be implemented based on execution in hardware by the execution circuit  of any one or more of the computing devices . In particular, the geospatial application  and transformation system  can be initially executed solely by the execution circuit  of a first computing device (e.g., ) that establishes the initial ad hoc geospatial directory based on executing the login of the first user, namely the user of the first computing device ","Assume in step  of  that the network interface circuit  of a second computing device (e.g., user interface device ) establishes a wired or wireless communications link  with the network interface circuit  of the first computing device: in response to detecting the communications link , the execution circuit  in the computing device executing the geospatial application can transmit at least a portion of the geospatial application  (e.g., login) and at least a portion of the transformation system  to the second computing device (e.g., ). The execution circuit  of the computing device can be configured for selectively providing a substantial portion of the geospatial application  and the transformation system  based on the determined capabilities of the recently detected computing device . For example, if the execution circuit  of the computing device determines the recently detected computing device  is a tiny client incapable of performing distributed computing of the geospatial application  (e.g., a user device having limited processing capabilities and limited web browsing capabilities), the execution circuit  can limit transmission to basic user interface lambda functions such as the login lambda function of ; if, however, the execution circuit  of the computing device determines the recently detected computing device is a client device capable of performing distributed computing of the geospatial application , the execution circuit  of the computing device can transmit the transformation system  (if not already installed) and a substantial portion of the geospatial application  (if not already installed) to the computing device for distributed computing thereof. The execution circuit  of the second computing device (e.g., ) also can incrementally receive additional components of the geospatial application  and\/or data structures of the ad hoc geospatial directory  (e.g., ). Hence, the geospatial application  (and transformation system ) can be propagated to each computing device  as it joins the network  of computing devices .","Hence, the geospatial application  can be supplied to different computing devices  as they join the network , enabling ad hoc distributed execution of the geospatial application . As described in further detail below, the ad hoc distributed execution of the geospatial application  also enables the establishment of the ad hoc geospatial directory  based on the coordinated integration of the respective copies (e.g., , ) using distributed queries, data fusion, and feature injection, described below.","In response to the computing device receiving in step  at least a portion of the geospatial application  and transformation system  from the first computing device (e.g., ) via its network interface circuit , the execution circuit  of the second computing device (e.g., ) can initiate execution of the geospatial application . For example, the user interface device can receive the transformation system  and selected program fragments to enabling creation of new data structures for a new entity (e.g., a new person item entity), such as the lambda functions \u201cmakePerson\u201d , \u201cmakeMapItem\u201d , \u201cmakePersonItem\u201d , \u201cnewLoginLoc\u201d , \u201ccreatePersonLoc\u201d , etc.","The user browser executed in the computing device can execute one or more of the supplied lambda functions  in step  based on retrieving the available data (e.g., user name, user e-mail, user phone number, user IP address, name of user's organization (e.g., fire department, police department, medical response team, etc.) and rank) from device memory or the browser cache , and\/or presenting a graphical form for the user to complete any missing data using the browser controls . The user browser  also can access the user cache  to determine if the user cache  stores an entity identifier: if the user interface determines an entity identifier is stored in the user cache, the user interface uses that entity identifier to execute the login.","In response to the user posting the inputs using the browser controls  (or automatic posting by the browser automatically completing the requested fields), the user browser circuit can send the posted lambda function(s)  with the completed data, for example in the form of a request for execution of at least the one lambda function, to the execution circuit  in step . If the computing device  executing the user browser  is locally executing the geospatial application , the posted lambda functions  are received by the execution circuit  via the API circuit . If the user device executing the user browser  is a tiny client that is not executing the geospatial application , the corresponding network interface circuit  can forward the request for execution of the one or more lambda functions to a computing device  executing the geospatial application (e.g., ), where the execution circuit  of the computing device receives the request for execution via the network interface circuit .","Hence, the execution circuit  (executed locally or remotely) receives the user post from the graphic user interface as a request for execution of at least one lambda function in an operation of the geospatial application , for example creation of the data structures associated with logging in a new person (e.g., type Person , type PersonItem , type MapItem , and PersonMiEntity of ). The execution circuit  executes the relevant lambda functions  of the geospatial application , for logging in the user as requested, for example optimizing execution of the relevant lambda functions  based on creating in step  the relevant data structures (e.g., , , and ) for a new user, storing the newly created data structures in the local ad hoc geospatial directory , and returning a response to the request that specifies an entity identifier (EID) for the new user; the execution circuit  executes in step  the login lambda function using the EID of the new user for creation and storage in the local ad hoc geospatial directory of the data structure \u201cPersonMiEntity\u201d . As described previously, the data structure \u201cPersonMiEntity\u201d is stored in the local ad hoc geospatial directory and includes the EID of type \u201cInteger\u201d , the data structure MapItem of type \u201cMapItem\u201d (containing the \u201cPersonItem\u201d data structure of type \u201cPerson\u201d and the Location of type \u201cLocation\u201d ), and selected lambda functions  for selective modification of the corresponding MapItem data structure . As described previously, each data structure inherently has a monotonically increasing creation identifier (e.g., a temporal attribute such as a time stamp): the monotonically increasing creation identifier enables the tracking the tracking of any attribute of any entity over time (e.g., all use of a given IP address over time, all use of a given phone number at a given time, all entities having been near a given location (\u201cLoc\u201d) over time, tracking the location of any entity (person, video camera, RFID tag) over time, etc.).","The execution circuit  executing the transformation system  can optimize execution of the ad hoc geospatial directory based on injecting the new data structures associated with a new user into the geospatial system by executing a query (e.g., \u201callEntityMapItem\u201d) to create a new curried list representing a concatenated list of all the entities in the ad hoc geospatial directory , or add to an existing curried list, of all entities identified collectively within the ad hoc geospatial directory . For example, the transformation system  executed in the computing device can execute the lambda function \u201callEntityMapItem\u201d on the local ad hoc geospatial directory , and\/or can forward to the transformation system  executed in the computing device the lambda function \u201callEntityMapItem\u201d as a request to create a new curried list of all entities; in response to the computing device receiving a response to the request in the form of the curried list from the transformation system  executed in the computing device , the transformation system  executed in the computing device can update the curried list with the new user entity in step  (and any other locally stored entities in the local ad hoc geospatial directory ), store the updated curried list in the local directory , and return in step  the updated curried list to the user browser as a \u201cStatus\u201d of the ad hoc geospatial directory  within the geospatial application . The updated curried list is sent in the form of a data structure including the curried list of all the entities in the geospatial directory, the data structure including (e.g., as part of the curried list or distinct from the curried list) one or more lambda functions for generating a query, modifying a state of one of the entities, or accessing one of the entities (e.g., initiating a communication session).","As illustrated in , the user browser executed in the computing device can graphically display in step  the curried list of all the entities in the geospatial directory as a \u201cStatus of Geospace\u201d , where the entities in the curried list are displayed as icons  in a geospatial map , for example as a person entity icon (associated with a PersonItem), an RFID tag icon (associated with an RfidItem), a video tag icon (associated with a VideoItem for a video camera), a media tag icon (associated with a MediaItem), etc. Hence, a data structure (map item entity) can be displayed in the browser , including all the lambda functions, where the data structure received by the user interface includes executable code (in the form of lambda functions) that can be executed by the user interface in the browser , each of the elements of the map item entity (including the lambda functions) being strongly typed. Hence, the browser can recognize the different types, for example one data structure is of type \u201cperson item\u201d, and another data structure is of type \u201clocation\u201d, hence the \u201clocation\u201d data structure can be rendered by the browser as a location on the map, and the \u201cperson item\u201d data structure can be rendered as an icon at the corresponding location on the map, where the lambda functions of a data structure are accessible based on selecting the map icon associated with the data structure.","As described previously, each icon  is associated with a corresponding entity represented by a corresponding data structure having one or more lambda functions  that enable the user, via the geospatial map , to generate a query of the ad hoc geospatial directory  (for example, based on using the position controls or zoom to require additional population of entities based on moving or resizing the map ), modify a state of at least one of the entities (e.g., moved to a different location, offset, rename, set height (i.e., \u201cset Z\u201d), change e-mail address, change phone number, change IP address, etc.), or access one of the entities (e.g., initiating an IP phone call, a video call, a messaging session, etc.).","Hence, a user can view the geospatial application in a browser in the form of a map , where each of the lambda functions available to the user can be defined as buttons, menu items, drop-down lists, etc., and the data associated with a command (e.g., \u201cmakeRfid\u201d) can be displayed in a form on the screen, where the actual textual command with input parameters can be supplied by the browser to the execution engine residing in the computing node . If a user selects (e.g., \u201cclicks on\u201d) an icon  representing a map item entity, the selecting of an icon  can invoke a pop-up list for available actions to be performed on that particular map item entity, where the action to be performed is executing a particular lambda function that is available to the user: inside that map item entity will be a list of available lambda functions (e.g., changing a name, changing a z-axis value, changing an e-mail, changing a phone, changing the IP address), which can be presented as menu items for selection by the user. If the user selects one of the lambda functions, a general purpose visualizer for the selected lambda function can open a display window enabling the user to enter the necessary input parameters (e.g., new X location, new Y location, new e-mail address, new phone number, new IP address, etc.). In addition, the general purpose visualizer can open with the appropriate window according to the type to be input, for example one input window for input of an object of type string, another input window for input of an object of type integer, etc.","In response to the user executing another command via the browser controls , the user browser sends in step  the queries in response to the user inputs, and dynamically updates the \u201cStatus of Geospace\u201d in response to the updates executed by the transformation system  in step . As described previously, no data structure is ever deleted. Further, each entity data structure includes a monotonically increasing creation identifier identifying a creation time relative to other entities (e.g., a time stamp). Hence, the state of a map item entity is updated based on the transformation system  obtaining the entity identifier (EID) associated with entity to be modified from associated data structure (e.g., , , , ): typically the user browser  can supply the data structure (e.g., , , , ), the identification of the lambda function  to be invoked, and the relevant input parameters. The transformation system  in response can create a new entity data structure having the entity identifier, a unique time stamp, and at least one non-temporal attribute distinct from the original data structure (e.g., the new input parameter) and distinct from the monotonically increasing creation identifier. Hence, the original entity data structure and the new entity data structure represent a corresponding state change in associated entity.",{"@attributes":{"id":"p-0121","num":"0126"},"figref":["FIG. 12","FIG. 3","FIG. 9"],"b":["14","100","70","100","100","70","44","70","96"]},"Further, the transformation system  executed in each computing device is configured for optimizing execution of each lambda function prior to execution thereof based on recompiling the geospatial application  as described previously in Section I. Hence, the interface circuit in step  receives one or more requests for execution of at least one lambda function  in an operation of the geospatial application  for operating on one or more entities of the ad hoc geospatial directory  as accessible by the computing device . For example, the API circuit  can receive local requests from the local user interface , and the network interface circuit  can receive remote requests from a user browser of a tiny client device and\/or a second computing device executing a query.","The execution circuit  executing the transformation system  optimizes in step  the operations to be executed on the ad hoc geospatial directory . For example, the transformation system  can optimize the execution of the requests received in step  based on joining in step the multiple requests (for execution of respective operations) into a single local request (or a reduced number of local requests), and optionally one or more remote requests. For example, the transformation system  may receive multiple queries related to entities within overlapping regions of the geospace: the transformation system  can join the multiple queries in step into a single locally-executable request related to an area that is the union of all the overlapping areas; the transformation system  also can generate from the multiple queries a remote request, distinct from the locally executable request, for remote execution of a portion of the requests related to remote entities that are not within the local ad hoc geospatial directory ","The transformation system  can send in step the remotely executable request to a second computing device (e.g., ) for execution of the remotely executable request: the remotely-executable request can optionally include a request for a remotely-stored data structure associated with one of the entities of the ad hoc geospatial directory , or the request also can supply a locally-stored data structure from the ad hoc geospatial directory . If the second computing device receiving the request is unable to complete the request, it can either forward the request to another device, or return a void (null) result. The transformation system  as executed by the execution circuit  can optimize and execute the local requests in step , and supply any new data structures to remote computing nodes as needed (e.g., in response to an update query, etc.).","Assuming the transformation system  receives remote results from one or more remote computing nodes  in step (e.g., the remote results responsive to the previously-sent remotely executable request), the transformation system  can compile the remote results with the local results, as needed, to generate compiled results in step . The transformation system  also can selectively partition the compiled results (or the local result and remote result in uncompiled form) to generate the appropriate responses to the received requests, and return the responses to the requesting user interfaces .","As described previously, no data structures are ever deleted from the geospatial application, hence activities of any entity or list of entities can be traced over time based on any defined attribute, for example all entities that have been within a prescribed location, all entities having utilized a prescribed IP address, phone number, etc. Further, individual persons can be tracked based on any one of the defined attributes. Hence, queries such as \u201callNTT\u201d can be generated for selective retrieval of entities associated with any defined attribute.","As noted from the foregoing description of the geospatial application in Table 1, the geospatial application written according to the symbol manipulation language is expressed as a specification describing the operations to be performed; hence, the implementation and execution of the geospatial application by the transformation system  is transparent to the actual specification of the geospatial application  according to the prescribed symbol manipulation language as illustrated in Table 1.","Operations such as filtering and finding items within a bounded area  of  (e.g., using the \u201cregionFilter\u201d lambda function) can be executed based on the transformation system  building a list of all entities (e.g., map item entities using the \u201callEntityMapItem\u201d lambda function): the list of all entities can be generated by one or more computing devices  within the distributed system , and sent to any device requiring the list; similarly, a computing device  receiving the list can update the list and return the updated list back into the distributed system (e.g., by broadcasting to other computing devices or based on a prescribed data replication and distribution protocol), resulting in continuous updating of the list of all entities by different computing devices within the distributed system.","A computing device  executing at least a portion of the geospatial application  also can extract, from an existing list of entities stored in the ad hoc geospatial directory , a second list of entities that are within a bounded area specified according to a prescribed filtering function (e.g., \u201cgetWithFilter\u201d, \u201cregionFilter\u201d, etc.).","The testing section in Table 1 illustrates examples of calling the previously-described user interface lambda functions in Table 1. Hence, the testing portion illustrates example commands that could be entered into a command line interface (CLI) or a GUI ","More advanced operations illustrated in step include selecting multiple map item entities on the map  in order to simultaneously operate on all selected entities; example operations include simultaneously moving all the selected entities, or simultaneously setting up shared communication session such as a shared multimedia, audio, video, instant messaging, and\/or conference telephone communication session between all the selected entities based on invoking one or more accessor lambda functions for accessing the entities via respective access protocols.","Further, the use of strongly-typed definitions enables new features to be added dynamically to the geospatial application  while maintaining stability. For example, if a new type was to be added to the type \u201cPerson\u201d (e.g., pager number), the new type can be added, and the transformation system can recompile the geospatial application , enabling the added property (e.g., pager number) to be automatically added to the user interface as a new type, without the necessity of manually modifying the code in the geospatial application.","While the example embodiments in the present disclosure have been described in connection with what is presently considered to be the best mode for carrying out the subject matter specified in the appended claims, it is to be understood that the example embodiments are only illustrative, and are not to restrict the subject matter specified in the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Reference is made to the attached drawings, wherein elements having the same reference numeral designations represent like elements throughout and wherein:",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4","b":"16"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 8A and 8B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 12","FIG. 3","FIG. 9"]}]},"DETDESC":[{},{}]}
