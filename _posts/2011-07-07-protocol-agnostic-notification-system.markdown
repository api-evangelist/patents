---
title: Protocol agnostic notification system
abstract: Subscription notifications are provided by receiving a request from a subscriber to register a subscription, the request identifying (i) a topic, (ii) a protocol corresponding to a first adaptor and supported by the subscriber, and (iii) a parameter associated with the protocol. The request is validated based on the parameter, and subscription data is stored. The subscription data is organized as a hierarchical data structure including a plurality of topics and sub-topics, each of the topics and sub-topics being associated with one or more subscribers and adaptors. A message to be published for a topic is received from a publisher. A plurality of adaptors, which correspond to a plurality of protocols, respectively, to be used for the topic is identified in the subscription data. A plurality of notifications corresponding to the message is published by the plurality of adaptors using the plurality of protocols, respectively.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08832304&OS=08832304&RS=08832304
owner: IPC Systems, Inc.
number: 08832304
owner_city: Jersey City
owner_country: US
publication_date: 20110707
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF DESCRIPTION","DETAILED DESCRIPTION"],"p":["I. Field","Example aspects of the present invention generally relate to private line communication systems, and more particularly to an event signaling framework that is adaptable to, and independent of, both incoming and outgoing protocols.","II. Related Art","Typical notification systems deliver messages to a set of recipients by sending an electronic communication when a new topic has been added to an application, a status has changed, or an event has occurred. Certain computer and telecommunications applications implement notification services to provide a status indicator that conveys ability and willingness of a potential communication partner to communicate. This status indicator is sometimes referred to as a \u201cpresence indicator.\u201d The topic of presence is provided via a network connection to a presence service in the form of presence information (or presence state), which can be made available for distribution to users or clients on a network to convey availability for communication.","Notification topics have a wide application in many communication services. A turret system, for example, is a specialized telephony switching system that allows a relatively small number of users to access a large number of external lines and provides enhanced communication features such as hoot-n-holler, push-to-talk, intercom, video and large-scale conferencing. These features are often utilized in the financial industry such as trading floor environments, as well as security\/law enforcement, utilities, healthcare, and customer support (e.g. contact centers) environments. Users interface with a turret system through a turret device, which is a phone-like desktop device with multiple handsets and speakers and multiple buttons.","A turret is either implemented in dedicated hardware (sometimes referred to as a \u201chard\u201d turret) or general-purpose computer (sometimes referred to as a \u201csoft\u201d turret). With the advent of Voice over Internet Protocol (\u201cVoIP\u201d), VoIP turret devices have moved from a fixed environment of dedicated voice communications trading resources to a more virtualized trading environment across multiple sites. This virtual environment allows resources to be shared dynamically, when and where required, across a global corporate enterprise.","U.S. patent application Ser. No. 11\/943,800, entitled \u201cSystems, Methods, Apparatus and Computer Program Products for Sharing Resources Between Turret Systems and PBXs Using SIP\u201d, incorporated herein by reference in it is entirety, provides an advanced interface which allows sharing of resources across two telephony\/switching systems without the need for custom, non-standardized, vendor-specific computer telephony integration (\u201cCTI\u201d) solutions. Resources across a turret system and a telephone exchange are shared using an agent which registers into the telephone exchange as a predetermined device and to receive a state change notification of a resource from at least one of the telephone exchange and the turret system. Receipt of the state change notification causes the agent to change a state of a corresponding resource.","One technical challenge is in providing state change notifications in a manner that is adaptable to, and independent of, both the incoming and outgoing protocols. Another technical challenge involves providing notifications within a private line communications system environment without the need for dedicated notification servers.","The example embodiments described herein meet the above-identified needs by providing a methods, systems and non-transitory computer-readable medium products for providing subscription notifications by receiving, by a registrar, a request to register a subscription, determining an adaptor to associate with the subscription based on a protocol, and publishing, by the adaptor, a notification based on the subscription.","In another example aspect, a determination is made whether the adaptor was used prior to the request and the adaptor corresponding to the request is dynamically loaded if a determination is made that the adaptor has not been used prior to the request.","In yet another aspect, the adaptor validates the request to register the subscription and if a determination is made that the subscription data is valid, the subscription is stored as subscription data.","In another example aspect, a publisher receives a request to communicate a notification and a notifier is requested to provide an identification of the adaptor. The publisher, in turn, invokes a call to the adaptor to communicate the notification.","The subscription can include a designation of a topic, a destination of a subscriber for the topic, and a designation of the adapter.","The adaptor can be one of a plurality of adaptors, where each adaptor is associated with a distinct protocol. In another example aspect subscriptions are associated with each adaptor.","The present invention is directed to a system, method and computer-readable medium for providing a universal event signaling framework that is adaptable to, and independent of, both the incoming and outgoing protocols. Clients of the framework can utilize multiple, extensible protocols to subscribe to future events such as Hypertext Transfer Protocol (HTTP), Session Initiation Protocol (SIP), and the like, by direct invocation. A publishing Application Programming Interface (API) allows for event signaling to be initiated over multiple protocols.","Subscriptions can be dynamically bound to an extendable set of outbound protocols such as Java Naming and Directory Interface (JNDI), SIP and HTTP, and the like. This allows for varied languages, remote systems and local clients to share in a universal event notification experience and without the need for fixed boundaries of support or modification to the core functionality of either the notification system itself or the system or service which generates or receives the notifications.","Formats used to publish frequently updated works also can be incorporated into the framework without modification to the core functionality. For example, extensions utilizing Really Simple Syndication (RSS) formats, Simple Network Management Protocol (SNMP) and standards for logging program messages such as syslog can be added as necessary.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","102","1","102","2","102","102","106","116","1","116","2","116","116","120","1","120","2","120","120"],"i":["n ","n ","n "]},"Generally, notification system  provides a mechanism to register a subscription for future notifications on a topic and publishes the notifications. Endpoints  are protocol end-points which communicate over an external protocol to notification core  and can be incorporated programmatically using, for example, a SIP Servlet -, an HTTP Web Service -, and the like.","Notification core  includes a registrar , a publisher , subscriptions data  and a notifier . Adaptors -, -, . . . , -are constructed to validate and transmit content to subscribers -, -, . . . , -according to a protocol -, -, . . . , -and according to one or more subscription(s) associated with each subscriber . The terms \u201cadaptor\u201d and \u201cadapter,\u201d and\/or the plural versions of those terms, may be used interchangeably herein.","One or more endpoints , registrar  and subscriptions data  are used to register a subscription on a particular topic. Generally, subscriptions data  are data organized as data structures (e.g., in a memory) which are used to manage which subscribers have registered to receive notifications related to particular subscriptions. Subscriptions data  are also used to identify which groups of adapters  are associated with a given subscription and any values of parameters required by the adapters to communicate the notifications over a corresponding protocol . Storing subscriptions data  in memory allows a particular topic published such that subscriptions relevant to the topic can be rapidly found and organized by adaptor  and delivered in groups based on adaptor .","In one example embodiment, subscriptions data  are data structures organized as an ordered tree. Each data structure, also referred to as a \u201ctrie\u201d, can be organized hierarchically.","For example, news subscriptions can be organized as tree nodes \u201c.news.\u201d and tree sub-nodes (e.g., \u201c.news.weather.\u201d). When a publish occurs on only the topic \u201c.news.\u201d, the data structure is searched for the topic \u201c.news.\u201d and publications are made to all the subscriptions under the topic \u201c.news.\u201d in the tree. Similarly when a publish occurs on the sub-topic \u201c.news.weather\u201d, the data structure is searched for the sub-topic \u201c.news.weather\u201d and publications are made to all the subscriptions under that sub-topic in the tree.","This organizational structure thus allows index searches on partial matches to be organized by adapter . Different subscribers (also referred to as clients or users) can be subscribed to the same topic, where each subscriber has a different adapter, e.g., one having a SIP adapter and the other having an HTTP adapter. The topics within a tree can further be organized by adaptors . For example, a tree node corresponding to the topic (e.g., .news.) can further have a list of items identifying associated adapters. As subscriptions are added to the tree structure, they can be obtained on an adapter basis and handed off in bulk to respective adapters .","It should be understood that the subscriptions can be organized in a variety of different ways and that the above-described tree organization implementation is exemplary. For example, subscriptions can be organized by using a file, a database, memory stores, hash tables, other types of trees, and the like.","A request to register a subscription is communicated to registrar  through an interface, which in one embodiment is provided as a Java API. Particularly, the request to register is communicated through a Java API at the registrar  directly, or through an endpoint , e.g. SIP Servlet -, HTTP Web Service -.","In a case where the request to register is delivered by SIP Servlet - or HTTP Web Service -, a message carrying the request to register the subscription is forwarded over an external protocol to the Java API at the registrar . In this case, endpoints  (e.g., SIP Servlet - and HTTP Web Service -) act as protocol end-points. Upon reception of the request for a new topic subscription by registrar , notification core  stores that subscription as subscriptions data . Other topics corresponding to different applications or systems may be stored as subscription data  as well.","Thus, subscription data  contain a topic, a designation of adaptor(s)  that will ultimately deliver notifications on its behalf, as well as values of any parameters that adaptor(s)  use to make the delivery. Example parameters include an IP address, a port, a Uniform Resource Locator (URL) or other information related to the protocol that the chosen adaptor  operates over.","Notification system  allows for any number of adaptors  to be added and associated to a particular subscription. Example adaptors support HTTP, SIP, direct Java callback invocation, Java Naming and Directory Interface (JNDI), Simple Network Management Protocol (SNMP), RSS and the like.","Endpoints , publisher , subscriptions data , notifier , adapters  and subscribers  are used for publishing a notification. Publishing a notification can be achieved directly through a Java API or through an endpoint , e.g. through SIP Servlet - or HTTP Web Service -. As is the case with registering a subscription, an endpoint  forwards the incoming request to publish a topic over an external protocol to the Java API. In one embodiment, publisher  has an interface provided as a Java API. When publisher  receives a request to publish, it collects all subscriptions that exist for the given topic with the subscriptions data  and provides them to notifier . Notifier  organizes subscriptions with respect to corresponding adaptors . Subsequently, notifier  provides each adaptor  responsible for a subscription with a notification of the published topic.","In one embodiment, each adaptor  is given the set of subscriptions that are relevant for the topic at one time to carry out the notification across all subscriptions all at once. This provision, referred to as \u201cmulti-casting\u201d allows for greater performance for those protocols that are multicast capable. Once the subscriptions for a given adaptor  are delivered, adaptor  makes notifications to subscribers  over its supported protocol .","In an optional embodiment, an adaptor  is provided with instructions as to when to deliver a particularly publication, by notifier  or by a subscriber .",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 1","b":["120","1","120","2","120","116","1","116","2","116","116","116"],"i":["n ","n"]},{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 2","FIG. 2","FIG. 1"],"b":["201","2002","2002","102","102","1","102","2","2004","102","102","1","102","2"]},"In one embodiment, software components  making subscription requests are external to the notification system  running within an application, such as a J2EE web application. Requests for subscriptions for components running in the same virtual machine (e.g. a Java virtual machine) can be made directly to the registrar .","In step , notification service  processes the data for the subscription request by making a call on the registrar , e.g. registerSubscription( ), requesting registrar  to store the subscription as subscription data . Registrar , in turn, inspects the subscription information received from notification service , and determines the adaptor  which will communicate the notification corresponding to the subscription. If there are no subscribers, then the registrar need not do anything.","In one embodiment, registrar  dynamically loads the adaptor  if it has not previously been used. If an adaptor has subscriptions, then it will have been loaded as the first subscription is requested. Thus, even if an adaptor  of a certain type is available, the notification system need not dynamically load it unless required. In one example embodiment, dynamically loading the adaptor  loads all the necessary libraries (or binaries) into a memory, associates all necessary addresses of functions and variables contained in the library(ies) to be retrieved, and executes those functions or accesses those variables necessary to communicate a notification associated with the subscriptions when instructed to do so.","Once registrar  has determined which adaptor  will communicate the notification, registrar , in step , requests adaptor  to validate that the subscription has all of the parameters required to later make a notification on its behalf. The request to validate is performed by making a call, e.g. validateSubscription( ), to the appropriate adaptor .","In step , adaptor  responds with an indication as to whether the subscription is valid for later use during publishing by communicating a response back to registrar , e.g. \u201cSubscription is Valid\u201d. If the subscription passes validation, registrar  requests notifier  to store the subscription in subscriptions data  as a new registration, as shown in step . A response (e.g. \u201cOK\u201d) is communicated to software component , indicating that the subscription has been registered, as shown in steps ,  and . At this point, future publications on the subscription's respective topic will be delivered to its intended recipient through the appropriate adaptor , as designated within subscription data .","Registrar  is also responsible for deregistering subscriptions for a given topic. The process of deregistering a subscription is similar to registering a subscription described above with respect to . Instead of subscribing to a topic, software component  communicates a request to unsubscribe a topic. Notification service , in turn, communicates to registrar  a call to unregister the subscription, e.g., unregisterSubscription( ) (not shown). Registrar  then removes the subscription from subscription data . It is not necessary to validate a subscription when it is being unregistered.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 3","b":["301","2002","2004","2004","302","110"]},"Next the set of adaptors  needed to complete the publishing request are determined Particularly, at step , publisher  retrieves adaptors  associated with registered subscriptions for a topic by making a call upon notifier , e.g. getAdaptorsForTopic( ). In one embodiment, the associations of adaptors to subscriptions can be stored in an internal data structure. Upon retrieving the distinct set of adaptors, notifier  communicates the set to the publisher , as shown in step . In step , publisher  collects the subscriptions for relevant adaptors  and invokes a call to provide each adaptor  a set of subscriptions for the topic that it is responsible for, for example, by using a call, e.g. notifyForTopic( ), on each adaptor, correspondingly. Each adaptor  then transmits the notifications to the subscribers it is charged with notifying over the system protocol. System protocol refers to all available protocols  over which adaptors  use to convey notifications.","A public or private line communications system can execute applications which use and generate both transitory and persistent data. Transitory (short term or temporary) data are those data that remain alive only for a relatively short time period, typically not surviving the activation or execution of an application, such as the instantiation of a call session, whereas persistent (or long term) data are those data that are stored in a storage architecture for long-term, reliable retention, such as a contact which will be accessed after a call session has ended. Thus, transient data are typically manipulated by the programming language facilities and persistent data are manipulated by a file system or a database management system (DBMS).","In high performance or real-time communications environments, each type of data may have different needs. In addition to persistent and transient storage modes, a mixed (or \u201chybrid\u201d) storage mode can be provided in accordance with an exemplary embodiment, referred to as \u201cpersistent high-speed\u201d.","Persistent high-speed environment information is still stored as persistent data in storage, but it can be accessed more quickly as is transient storage. This is accomplished by, for example, provisioning an intermediate cache from the transient storage.","In one embodiment, a publication is triggered by a change in transient storage. The publishing of changes related to transients is done explicitly in the API code that handles the process of saving the transient.","Notification Use Case: Button Updates. In one exemplary use case, a software package utilizing the notification system  provides users with facilities that are used to make up primary features of a large scale turret system. This implementation acts as a server to a set of turrets. When a user configures their turret, they can create virtual buttons within its onboard display, which are later used as shortcuts. For example, a virtual button can be used to initiate phone calls to a given counterparty. Each button on the display has a label that is used to represent who the user will be calling if they press that button. The details related to each button are stored in a database. Any changes to a button will cause a notification to be published to subscribers on that button data according to the notification procedure discussed above with respect to .","Turrets require a user to log in for security reasons. Each login has a \u201cbutton sheet\u201d associated with it that is a collection of button definitions that will go on its display for that user. The buttons can be edited using either the phone's menu system or via a centralized administration application. If a change is made to a button that belongs to a user that is logged in, the turret needs to reload that button data and then reflect any changes that are visible. One primary example of this use case can be seen in the updating of the label on a button. If the change is made via the administration application, the turret updates its display to reflect the new label. When the user logged into the turret, it will have subscribed to notifications related specifically to its buttons. At the point where the change in the label is saved to the database, a notification will be published that relates to the specific change (e.g., a label). The turret will receive that notification because it has subscribed to this kind of change and responded to it by loading the new button data and updating its display. This achieves the effect of awareness of and dynamic updates due to changes in button data.","Notification Use Case: Line Status & Presence. Another use case example involves line status. Line status is used to propagate changes in the status of a line, such as a line seized by a turret, to all other turrets or devices within an installation. When a user of a turret picks up the receiver, they can select a line to make a phone call from. This act is commonly referred to as \u201cseizing a line.\u201d In one embodiment, the internal (e.g., cached) data related to the status of that line is updated. In one example implementation, a notification is published through the notification system  to all other subscribers. Each turret within the system subscribes to notifications related to lines that it has available to it by configuration. When a notification relating to a line status (also referred to as a \u201cline state\u201d) change is received (e.g., that the line has been seized), each turret in the configuration will update its display of that line status in a way that alerts the user of the current state of the line. That change in display may be performed, for example, by highlighting the line, changing its color, etc.","The notification system  thus provides a mechanism for alerting many subscribers to a change in data. This data pertains to the state of a physical thing in the real world and the reception of a posted notification message correspondingly updates a turret's display to coincide with that change.","\u201cPresence\u201d updates are achieved in a similar manner. Presence is the status of a user with respect to the environment of the turret system. A user can be in a number of presence states including logged in, logged out, and on the turret. Just as is the case for line status, changes in the (e.g., in-memory) state related to a given user are propagated via the notification system. When these notifications are received by the subscribers (e.g., the turrets), the display of a current status for a given user is updated.","The example embodiments described above such as, for example, the systems and procedures depicted in or discussed in connection with , or any part or function thereof, may be implemented by using hardware, software or a combination of the two. The implementation may be in one or more computers or other processing systems. While manipulations performed by these example embodiments may have been referred to in terms commonly associated with mental operations performed by a human operator, no human operator is needed to perform any of the operations described herein. In other words, the operations may be completely implemented with machine operations. Useful machines for performing the operation of the example embodiments presented herein include general purpose digital computers or similar devices.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 4","b":["400","400"]},"The computer  may include without limitation a processor device , a main memory , and an interconnect bus . The processor device  may include without limitation a single microprocessor, or may include a plurality of microprocessors for configuring the computer  as a multi-processor system. The main memory  stores, among other things, instructions and\/or data for execution by the processor device . The main memory  may include banks of dynamic random access memory (DRAM), as well as cache memory.","The computer  may further include a mass storage device , peripheral device(s) , portable storage medium device(s) , input control device(s) , a graphics subsystem , and\/or an output display . For explanatory purposes, all components in the computer  are shown in  as being coupled via the bus . However, the computer  is not so limited. Devices of the computer  may be coupled via one or more data transport means. For example, the processor device  and\/or the main memory  may be coupled via a local microprocessor bus. The mass storage device , peripheral device(s) , portable storage medium device(s) , and\/or graphics subsystem  may be coupled via one or more input\/output (I\/O) buses. The mass storage device  may be a nonvolatile storage device for storing data and\/or instructions for use by the processor device . The mass storage device  may be implemented, for example, with a magnetic disk drive or an optical disk drive. In a software embodiment, the mass storage device  is configured for loading contents of the mass storage device  into the main memory .","The portable storage medium device  operates in conjunction with a nonvolatile portable storage medium, such as, for example, a compact disc read only memory (CD-ROM), to input and output data and code to and from the computer . In some embodiments, the software for storing an internal identifier in metadata may be stored on a portable storage medium, and may be inputted into the computer  via the portable storage medium device . The peripheral device(s)  may include any type of computer support device, such as, for example, an input\/output (I\/O) interface configured to add additional functionality to the computer . For example, the peripheral device(s)  may include a network interface card for interfacing the computer  with a network .","The input control device(s)  provide a portion of the user interface for a user of the computer . The input control device(s)  may include a keypad and\/or a cursor control device. The keypad may be configured for inputting alphanumeric characters and\/or other key information. The cursor control device may include, for example, a mouse, a trackball, a stylus, and\/or cursor direction keys. In order to display textual and graphical information, the computer  may include the graphics subsystem  and the output display . The output display  may include a cathode ray tube (CRT) display and\/or a liquid crystal display (LCD). The graphics subsystem  receives textual and graphical information, and processes the information for output to the output display .","Each component of the computer  may represent a broad category of a computer component of a general and\/or special purpose computer. Components of the computer  are not limited to the specific implementations provided here.","Portions of the example embodiments of the invention may be conveniently implemented by using a conventional general purpose computer, a specialized digital computer and\/or a microprocessor programmed according to the teachings of the present disclosure, as is apparent to those skilled in the computer art. Appropriate software coding may readily be prepared by skilled programmers based on the teachings of the present disclosure.","Some embodiments may also be implemented by the preparation of application-specific integrated circuits, field programmable gate arrays, or by interconnecting an appropriate network of conventional component circuits.","Some embodiments include a computer program product. The computer program product may be a non-transitory computer-readable storage medium or media having instructions stored thereon or therein which can be used to control, or cause, a computer to perform any of the procedures of the example embodiments of the invention. The storage medium may include without limitation a floppy disk, a mini disk, an optical disc, a Blu-ray Disc, a DVD, a CD-ROM, a micro-drive, a magneto-optical disk, a ROM, a RAM, an EPROM, an EEPROM, a DRAM, a VRAM, a flash memory, a flash card, a magnetic card, an optical card, nanosystems, a molecular memory integrated circuit, a RAID, remote data storage\/archive\/warehousing, and\/or any other type of device suitable for storing instructions and\/or data.","Stored on any one of the computer readable medium or media, some implementations include software for controlling both the hardware of the general and\/or special computer or microprocessor, and for enabling the computer or microprocessor to interact with a human user or other mechanism utilizing the results of the example embodiments of the invention. Such software may include without limitation device drivers, operating systems, and user applications. Ultimately, such computer readable media further includes software for performing example aspects of the invention, as described above.","Included in the programming and\/or software of the general and\/or special purpose computer or microprocessor are software modules for implementing the procedures described above.","While various example embodiments of the invention have been described above, it should be understood that they have been presented by way of example, and not limitation. It is apparent to persons skilled in the relevant art(s) that various changes in form and detail can be made therein. Thus, the invention should not be limited by any of the above described example embodiments, but should be defined only in accordance with the following claims and their equivalents.","In addition, it should be understood that the figures are presented for example purposes only. The architecture of the example embodiments presented herein is sufficiently flexible and configurable, such that it may be utilized and navigated in ways other than that shown in the accompanying figures.","Further, the purpose of the Abstract is to enable the U.S. Patent and Trademark Office and the public generally, and especially the scientists, engineers and practitioners in the art who are not familiar with patent or legal terms or phraseology, to determine quickly from a cursory inspection the nature and essence of the technical disclosure of the application. The Abstract is not intended to be limiting as to the scope of the example embodiments presented herein in any way. It is also to be understood that the procedures recited in the claims need not be performed in the order presented."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
