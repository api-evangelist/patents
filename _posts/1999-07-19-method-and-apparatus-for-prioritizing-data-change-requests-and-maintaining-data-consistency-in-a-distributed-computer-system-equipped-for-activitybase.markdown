---
title: Method and apparatus for prioritizing data change requests and maintaining data consistency in a distributed computer system equipped for activity-based collaboration
abstract: A distributed, activity-based collaboration system can employ a data change request priority scheme for determining an order of execution of data change requests in effecting changes to local copies of data so as to optimize data consistency for collaborative activities. The data change request priority scheme can entail encoding sequence number information and dependency information in the data change requests, responsive to which data changes can be made, unmade and remade to the data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06859821&OS=06859821&RS=06859821
owner: Groove Networks, Inc.
number: 06859821
owner_city: Beverly
owner_country: US
publication_date: 19990719
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["The following co-pending, commonly-assigned U.S. patent applications are related to the present application, and incorporated by reference herein in their entirety:","Ser. No. 09\/356,930, entitled \u201cMethod and Apparatus for Activity-Based Collaboration by a Computer System Equipped with a Dynamics Manager,\u201d filed on even date herewith by Raymond E. Ozzie and Jack E. Ozzie, now U.S. Pat. No. 6,446,113 B1.","Ser. No. 09\/357,007, entitled \u201cMethod and Apparatus for Activity-Based Collaboration by a Computer System Equipped with a Communications Manager\u201d, filed on even date herewith by Raymond E. Ozzie, et al.","The invention relates generally to computers interconnected for communication over a network such as the Internet, and more particularly to a distributed computer-based system for coordinating and otherwise maintaining data pursuant to a distributed data model.","The Internet has established a dynamic, public environment for communication and interaction among its millions of users. In business, the Internet has redefined vendor-manufacturer, manufacturer-distributor, distributor-customer, and other relationships. With extension of the Internet technology into internal, secured networks of individual companies, the \u201cintranet\u201d or \u201cprivate Internet\u201d, as it is called, has enabled new forms of document and information sharing between individual employees and work groups using company directory and network infrastructure. On-line services, such as electronic bulletin boards and chat rooms, electronic commerce, and technical support for products, are available on the World Wide Web (\u201cWWW\u201d or \u201cWeb\u201d) operating over the Internet.","The Internet has, at its core, a server-client architecture, in which individual clients (i.e., Internet-content users) interface via computer-executable applications such as browsers with servers (i.e., Internet-content providers) to obtain documents from Web sites. Browsers are software programs that enable personal computers to request, receive (e.g., download), interpret, and present Internet documents, and generally navigate the Internet. Web servers typically have standard interfaces for running external programs, the most common is the Common Gateway Interface (CGI). Web sites are collections of documents, usually consisting of a home page and related, linked documents, located on servers remote from the client. The documents can be compound documents, containing data, graphics, video, sound, and\/or other types of media, as well as links to other documents. Essentially, the WWW is a web of interconnected documents, or, more precisely, document objects that are located at various sites on the Internet.","Among the types of document objects on the WWW are documents and scripts. A script is an executable program, or a set of commands stored in a file, that can be run by a Web server to produce a document that is then returned to the Web browser. Typical script actions include running library routines or other applications to get information from a file or database, or initiating a request to get information from another computer, or retrieving a document corresponding to a selected hypertext link. A script is run on the Web server when, for example, a user selects a particular hypertext link in the Web browser.","Underlying the Internet technology are advances in standardization, including personal computer hardware, software, network protocols, and infrastructural conventions (such as the \u201cUniform Resource Locator\u201d or \u201cURL\u201d). URLs provide location addresses for all document objects on the WWW. A URL uniquely references a document object and often defines an access algorithm using Internet protocols.","\u201cInternet protocols\u201d, as that expression is used herein, are defined as current or future language conventions and present or future communication protocols that are generally-accepted and used for generating messages including documents for transmission over the Internet, or for transmitting such messages over the Internet, respectively. Such language conventions include, for example, at present, Hypertext Markup Language (\u201cHTML\u201d) and extensible Markup Language (\u201cXML\u201d). Such communication protocols include, for example, at present, Hypertext Transfer Protocol (\u201cHTTP\u201d), TCP\/IP, FTP and GOPHER. Those skilled in the art will be familiar with these language conventions and protocols.","HTML is a language used for writing hypertext documents, containing multimedia content and links to other documents. An HTML document includes a hierarchical set of markup elements, where most elements have a start tag, followed by content, followed by an end tag. Tags are enclosed in angle brackets (\u201c<\u201d and \u201c>\u201d) and indicate how the document is structured and how to display the document, as well as destinations and labels for hypertext links. There are tags for markup elements such as titles, headers, text attributes such as bold and italic, lists, paragraph boundaries, external links to other documents, and internal links to other parts of the same document, graphic images, and many other document features. Many books are in wide circulation regarding programming using HTML.","XML is another of the language conventions included in the Internet protocols. XML is compatible with and complementary to HTML, at least in its current version. It is a standard way of describing a class of data objects as stored in computers, called XML documents, and behavior of programs that process these objects. XML documents are made up of storage units called entities, which contain either text or binary data. Text is made up of characters, some of which form the character content of the documents, and some of which form markup. Markup encodes a description of the document, such as its storage layout and logical structure. A software module called an XML processor is used to read XML documents and provide access to their content and structure. Further information regarding XML can be had with reference to Version 1.0 of the XML specification, available at <HTTP:\/\/www.w3.org\/XML>, and incorporated herein by reference.","A Web server and a Web browser communicate typically using the HTTP message protocol and the underlying TCP\/IP data transport protocol of the Internet. In HTTP, the Web browser establishes a connection to a Web server and sends an HTTP request message to the server. In response to the request message, the Web server checks authorization, performs any requested action such as downloading a document identified by its URL, and returns an HTTP response message containing either the HTML document resulting from the requested action or an error message. The returned document may simply be a static file stored on the Web server, or it may be generated dynamically using a script called in response to the request message.","To take advantage of the Internet, tools and resources have been developed in compliance with the Internet protocols, including company-critical applications such as e-mail. E-mail is electronic mail, by means of which documents are sent and received electronically at selected addresses. It has been estimated that a vast majority of Internet-based interaction is through the use of e-mail and other browser-based media that follow a \u201cdocument send and receive\u201d model. Perhaps due to that model, users often view the Internet as inherently \u201cpeer-to-peer\u201d, with individuals accessing in documents provided by other individuals, without intervention by a higher authority.","The Internet is dynamic and flexible in providing users with entertaining and useful ways of communicating, though it does not meet all the needs of users. While users interact increasingly through the Internet, they continue to interact \u201coff\u201d of the Internet in more conventional ways, such as through multi-medium (phone, fax, whiteboard), multi-temporal (real-time, overnight mail) and other informal means of communication.","It would be desirable to extend the Internet paradigm to personal and private communications and other shared and mutual activities between individuals and small groups in shared private spaces. Such interactions should preferably occur instantly, directly, and confidentially between participants' personal computers, or other network-capable devices, without exposing such interactions to server bottlenecks through which Internet traffic is typically funneled to third-party Web sites where communications can be intercepted and confidences violated.","It would also be desirable to provide a technique that allows users at various remote sites to share and edit documents on a peer-to-peer basis, while maintaining consistent copies of the documents at local sites. Such a technique should permit any of the users to issue change requests regarding the documents, which changes can then be made asynchronously to the copies at all the local sites in a coordinated fashion even if the sites are disconnected from the network when the change requests are issued. The technique should provide a high level of data consistency across all the sites so that each site presents essentially the same document for viewing and\/or editing by the various, geographically dispersed users.","The invention resides in an apparatus called an activity, which is operable in a personal computer system, communication appliance or other network-capable device, for performing a shared, focused task with other, remotely-located users, such as, for example, a \u201cchat\u201d, gaming, or business application. The activity includes a tool for generating data change requests, called deltas, responsive to user interactions. The activity also has a data-change engine for maintaining data in preferably non-volatile, persistent memory pursuant to a data model. The data-change engine includes a tool end for receiving deltas from the tool, providing the deltas with activity-specific commands for carrying out the request, and providing notification to the tool of data changes caused by delta execution. The data-change engine also includes a dynamics manager end for receiving, from a dynamics manager, data-change directions to execute the deltas, i.e., perform the deltas' commands to make the requested changes to the data.","In another aspect, the invention resides in a system for providing communications and other shared and mutual activities between individuals and small groups in shared private spaces, called \u201ctelespaces\u201d. In the system, participants or members of a telespace interact through network-capable devices, which can communicate with one-another over a network, e.g., the Internet and store individually local copies of telespace data. Each telespace is an instantiation of one or more activities operable on each of the network-capable devices of members of the telespace. Each activity includes one or more tools for initiating data change requests or deltas responsive to telespace member interactions. Each activity also includes one or more data-change engines, separate from the tools, for maintaining the local copy of telespace data pursuant to a common data model. The data model is, for example, activity-specific, and preferably telespace-wide. Each network-capable device also includes a dynamics manager, responsive to the deltas, for directing the data-change engine to execute the deltas by making the requested changes to the local copy of data, and for coordinating the execution of the deltas from the various network-capable devices.","In yet another aspect, the invention can be practiced in a networked system including plural, preferably network-capable devices at different locations connected for communication preferably in accordance with Internet protocols. Each network-capable device has (a) a memory for storing a local copy of activity-related data pursuant to a common data model, (b) one or more activities each including one or more tools and corresponding data-change engines as described above, (c) a communications manager for causing deltas to be shared among all the network-capable devices of the networked system that participate in the telespace to which the deltas pertain; and (d) a dynamics manager for coordinating execution of both locally-generated and remotely-generated deltas. The user interactions can be initiated, and the resulting deltas generated, at any of the network-capable devices of the networked system, and the deltas are transmitted to each of the devices preferably over the network. The dynamics managers direct the operation of their local data-change engines, preferably to prioritize execution of deltas and to maintain substantial consistency of the data across the networked system. The networked system thus allows users at various remote sites, e.g., to share and edit data or perform other activities independently, on a peer-to-peer basis, while maintaining substantially consistent copies of the data at each of the network-capable devices for use even when disconnected from the network.","In still another aspect, the invention can be implemented as an activity-based collaboration (ABC) system for interpersonal interaction. The ABC system includes plural, network-capable devices connectable, e.g., via public networks (e.g., the Internet or wide area networks (WANs)) or via private networks (e.g., local area networks (LANs) or intranets), by cable, fiberoptics, infrared (IR) or other forms of communication links, to form the above-described networked system. Each network-capable device is equipped with the above-described memory, and a framework including one or more dynamics managers. The network-capable devices are preferably plug-compatible with the public network infrastructure, personal desktop applications and infrastructure (sometimes called \u201cpersonal Internets\u201d), and, where applicable, a company intranet. The ABC system preferably uses dynamic, snap-in activity components, each for performing a specific task, such as \u201cchat\u201d, document editing, gaming, etc. The activity components can comprise software made available, for example, as shrink-wrapped products or downloaded over the network, e.g., the Internet. The activity components can operate through common application programming interfaces (API) with the framework. Accordingly, the framework can be viewed and function as a platform for applications in the form of the activity components.","Yet another aspect of the invention resides in a distributed technique for maintaining a high level of data consistency across the ABC system. In each peer unit, a dynamics manager implements a data change request priority scheme that determines an order for executing the data change requests to promote data consistency. In an exemplary embodiment of the data change request priority scheme, each data change request has (and preferably contains) request sequence number information and dependency information. The dynamics manager can cause the appropriate engine to make, roll-back (\u201cundo\u201d), and remake (\u201credo\u201d) data changes in response to this information. The dependency information can specify, for example, a single prior data change request, in which case the dynamics manager will ensure that the prior data change request has indeed been processed at the corresponding peer unit prior to processing the data change request that depended on that prior request. In case of a dependency collision between data change requests depending on the same prior request, a dependency collision resolution scheme can be employed. For example, priority can be awarded based on date or sponsor of telespace membership, characteristic of the endpoint (such as job title, work group or department), nature or document location of the change requested, or other considerations.","Thus, the invention can be implemented as separate commercial products and services, including provision of the individual activity components, the framework for individual network-capable devices, and\/or networked or ABC system, as well as communication services for effecting interactions between devices forming the system.","A. Terminology","It may prove useful to introduce at the outset certain terminology and abbreviations used in this specification, including: activity, client, communications manager, component, controller, delta, device, dynamics manager, engine, framework, identity, member, navigation, person, server, telespace, tool, URL, and XML.\n\n","B. Conventional Computer System",{"@attributes":{"id":"P-00061","num":"00061"},"figref":["FIG. 1","FIG. 1"],"b":["100","1"]},"The computer system  includes a central processing unit (CPU) , which may include a conventional microprocessor, random access memory (RAM)  for temporary storage of information, and read only memory (ROM)  for permanent storage of information. A memory controller  is provided for controlling system RAM . A bus controller  is provided for controlling bus , and an interrupt controller  is used for receiving and processing various interrupt signals from the other system components.","Mass storage may be provided by diskette , CD-ROM , or hard disk . Data and software may be exchanged with client computer  via removable media, such as diskette  and CD-ROM . Diskette  is insertable into diskette drive , which is connected to bus  by controller . Similarly, CD-ROM  is insertable into CD-ROM drive , which is connected to bus  by controller . Finally, the hard disk  is part of a fixed disk drive , which is connected to bus  by controller .","User input to the computer system  may be provided by a number of devices. For example, a keyboard  and a mouse  may be connected to bus  by keyboard and mouse controller . An audio transducer , which may act as both a microphone and a speaker, is connected to bus  by audio controller . It should be obvious to those reasonably skilled in the art that other input devices, such as a pen and\/or tablet and a microphone for voice input, may be connected to client computer  through bus  and an appropriate controller. DMA controller  is provided for performing direct memory access to system RAM . A visual display is generated by a video controller , which controls video display .","Computer system  also includes a network adapter  that allows the client computer  to be interconnected to a network  via a bus . The network , which may be a local area network (LAN), a Wide area network (WAN), or the Internet, may utilize general-purpose communication lines that interconnect multiple network devices.","Computer system  generally is controlled and coordinated by operating system software. Among other computer system control functions, the operating system controls allocation of system resources and performs tasks such as process scheduling, memory management, networking and I\/O services.","C. Conventional Approach to Controlling a Data Model",{"@attributes":{"id":"P-00068","num":"00068"},"figref":"FIG. 2","b":["200","200","202","204","206","208","202","204","206","206","202","204","204","200","200"]},"The conventional approach for controlling a data model as exemplified in the system  was appropriate in an age in which computer systems, whether mainframes or personal computers, operated in relative isolation. With the advent of the Internet, computer users demand improved ways of collaborating, and the invention provides what can be called \u201cmodel mediated control\u201d, in which a dynamics manager mediates changes effected by the data-change engine to the data model.","D. Internet Paradigm for Intercomputer Operation",{"@attributes":{"id":"P-00071","num":"00071"},"figref":["FIG. 3","FIG. 1","FIG. 1"],"b":["300","302","306","308","309","310","306","308","309","310","309","310","306","308","311","312","314","314","306","308","314"]},"As will be explained in more detail below, such peer-to-peer communications can be made directly or via a relay device . The relay device  is preferably a \u201cstore and forward\u201d, which can store messages destined to a peer unit  which is temporarily disconnected from the Internet, and later, on reconnection, can forward the messages to that peer unit.","E. ABC system Architecture and Operation",{"@attributes":{"id":"P-00074","num":"00074"},"figref":"FIG. 4","b":["400","314","314","314","402","404","406","402","404","402"]},"The framework  includes a user interface manager , identity manager , telespace manager , activity manager , storage manager , controller services manager , dynamics manager , and communications manager .","The user interface (UI) manager  is responsible for managing shared services for a number of user interface controllers (not separately shown). The UI manager  manages layout of activities within panes of a display window, and otherwise provides a desired \u201clook and feel\u201d for the user interface. The UI manager  also manages activity navigation (for example, go to, next, previous, etc.) and maintains a navigation history.","The identity manager  is responsible for maintaining identities of a telespace's member. As noted above, an identity is the name, and corresponding URL, by which each user is known by others. Individual users may have one or many identities. The identity manager  maintains a record or table, preferably in XML, of the identities. The identity manager  can also maintain a record or table, preferable in XML, of the URL's of telespace members and their corresponding device URL's. Alternatively, a separate member manager can be implemented.","The telespace manager  is responsible for managing each of the telespaces  that may be opened on the peer unit A. Each telespace  is an instantiation of one or more activities. Each telespace  has a corresponding activity manager .","The activity manager  is responsible for (a) adding new activities to a telespace, (b) opening existing activities in a telespace, and (c) updating telespace activities from new activity template versions. To add a new activity, the activity manager  is provided with the URL of an activity template, opens the template, and extracts and propagates the template information (such as component URLs) into the telespace. The template defines the initial activity configuration for a telespace. A user may add additional activities to the telespace  later as needed. After being added, an activity is \u201cpart of\u201d the telespace and visible to all telespace members. A telespace has a tag to identify its activity manager and bind the activity manager and data. Preferably, each document has a local registry linked to it, with XML tag names maintained in the registry to express mapping (reference pointers or associations) in an extensible, platform-independent way, between the document and its corresponding telespace. Each telespace member has a framework and an activity template for the telespace available on his or her peer unit A-D.","Each activity includes a tool, such as tool  and an engine, such as engine . The tool  provides the user interface (UI) capability for the activity, interacting via UI  with a member. UI interaction may include UI events initiated, for example, via the keyboard  () or mouse  (FIG. ). In response to such UI events, the tool  may request its corresponding engine  to effect data model changes, subscribing to the engine  for asynchronous data change notifications for updating UIs asynchronously when data changes occur. A tool  also implements application program interfaces (APIs) for interacting with background services provided under the direction of the controller manager . The engine  is responsible for maintaining and changing the data that supports the telespace  and\/or results from user interaction obtained through the tool. The engine  can modify persistent model data, and emit asynchronous data change notifications to the tool , both under the direction and control of the dynamics manager , as will be explained below. The storage manager  controls access to the stored data.","For creation of an activity template, a software developer may write or adapt a tool and engine for use within the framework. An activity template is a persistent representation of the tool and engine components comprising an activity. An activity template can be distributed, for example, as shrink wrapped software or downloaded, for example, over the Internet to peer unit A from a remote server. Activity components can be regarded as Web documents and are represented persistently via URLs. The activity template itself preferably has a URL, which allows for tracking activity design changes. The activity template can be a single activity template or an activity collection template. A single activity template pertains to only one activity, such as \u201cchat\u201d. An activity collection template pertains to a collection of activities, such as \u201cchat and outline\u201d.","For use, the ABC system  gets a member's identity via the identity manager , opens a telespace manager, requests the telespace manager to open a telespace via a URL, requests the telespace manager for an activity manager, and, then, the activity manager opens an activity, typically by using the activity's URL. Then, the ABC system  is ready for members to use the telespace to perform the shared, focused tasks offered by the particular activity.",{"@attributes":{"id":"P-00083","num":"00083"},"figref":"FIG. 5","b":["500","314","500","314","314"]},"As shown for peer unit A, the ABC system  includes a number of illustrative telespaces in which peer unit A is subscribed as a member, including a car designing telespace , a chat telespace , and a chess playing telespace . As also shown, peer unit  has a number of components used during operation of the telespaces , , . Peer unit A has a memory  that maintains a telespace record , which lists and describes each of the telespaces , ,  in which it is member, and a member record , which lists and describes each of the identities of telespace members that may participate in those telespaces. A UI  can receive user-initiated changes to the telespace and member records , .","Each of the telespaces , ,  instantiates a different one of the illustrated activities , , . (Alternatively, the illustrated activites , ,  could reside in a single telespace, in which case all members of the single telespace would have access to each of the activities.) Each activity , ,  includes a respective tool , ,  specific to the activity, and under control of a respective engine , ,  for carrying out changes to a corresponding data model , ,  contained in memory , and which is persisted in each of the telespaces , , . For example, the car design telespace  is an instance of an activity  that can include a tool  in the form of CAD (computer-aided design) software, and the chess-playing telespace  is an instance of an activity  that can include a tool  in the form of a software chess game.","Users pursue the activities , ,  of the telespaces , , , via the user interface , which interfaces with the tools , ,  for providing the tools with user requests. Responsive to the requests, the engines , ,  change the persistent state of a corresponding data model , ,  in memory , under the control of the dynamics manager  to reflect a current state. For example, the persistent state of the data for the chess-playing telespace  might include a chess board and locations of the chess pieces on the board; a user request may specify a chess piece move, which constitutes a change in the data, i.e., a delta; and the current state would reflect the execution of the delta and the consummation of the move.",{"@attributes":{"id":"P-00087","num":"00087"},"figref":"FIG. 6","b":["500","314","5","546","536","526","536","506","512","514","514","536","536","546","546","536"]},"More specifically, as indicated by line \u201ca\u2032\u201d, the tool  initiates creation of a delta by requesting its generation by the dynamics manager . The dynamics manager  creates the delta and returns it over line a\u2032 to the tool , and may record the created delta in case fault recovery is required.","As indicated at line \u201ca\u201d of , the tool  passes control of the delta through a tool interface  to a tool-end  of the engine , thereby invoking the engine. (This description shall from time to time state that deltas are passed or that control to deltas shall pass from one component to another. Preferably, the deltas are objects allocated in memory whose pointer is passed as XML elements.) The engine's tool interface  exposes a set of application programming interfaces for creating commands that can effectuate the requested change encoded in the delta, or, in other words, for filling a delta with appropriate, typically engine-specific commands in serial form to fulfill the user's intent. The engine  then passes control of the delta, now filled with the commands, back to the tool .","As indicated at line \u201cb\u201d of , the tool  passes control of (i.e., submits) the filled delta to the dynamics manager  for execution. The dynamics manager  may also receive inbound deltas over line \u201cb\u201d from other peer units B-D. The dynamics manager , along with the dynamics managers in peer units B-D, are responsible for maintaining consistency of executed changes to the data model  from one end of the ABC system to the other for all members who participate in the chess game telespace.","The dynamics manager  includes queue structures  and a dynamo process , preferably a computer-executable program containing the main logic of the dynamics manager. The dynamics manager , and its dynamo process , are in bi-directional communication with the communications manager . The dynamics manager  enqueues the received deltas in the queue structures  for ordering purposes, then the dynamo process  services the queue structure in processing the enqueued deltas, and directing the engine  to execute them in an appropriate order. More specifically, the dynamo process  of dynamics manager  sends a control signal in the form of a \u201cdelta command execution\u201d message through the interface  to the dynamics manager end  of the engine  over line \u201cc\u201d of FIG. . The delta command execution message directs the engine  to proceed with execution of the delta received from the tool  by making the requested change to the data model  contained in the memory , and which is persisted in the telespace.","The dynamo process  of dynamics manager  also disseminates all locally-initiated deltas to other endpoints via the communications manager , which transmits them over the network, e.g.,  to the peer units B-D. At each peer unit B-D, the respective dynamics manager enqueues received deltas in its local queue structures, and then passes them in a specified order to its respective engine for execution.","A single dynamics manager can support a single telespace or multiple telespaces, depending on the application, and thus can be responsible for directing a number of engines to execute deltas for the various telespaces. In systems having multiple telespaces, as illustrated in , the dynamics manager  determines which engine should execute a delta by examining the delta's information. The delta contains commands that are identified to a specific one of the engines, and tagged with an engine identifier or code carried in the delta's payload. When the enqueued delta is processed by the dynamics manager, the dynamics manager associates the engine code with the referenced delta, and directs the delta's execution by the appropriate engine.","Finally, as indicated at line \u201cd\u201d of , the engine  sends a \u201cdata change notification\u201d message to notify the tool  of the execution of the delta, and of a new current state of the data in the data model . The data change notification can be made by value or reference. That is, the notification can include the new data values themselves or can include a pointer to the new data in memory. In response to the notification, the tool  causes the user interface  to make the change available to the user, e.g., by displaying the move on a chess board graphic. If a user is viewing the display  (FIG. ), the user will be able to see the change to the chess game caused by execution of the delta; otherwise, the change is effected to the data in memory  without the user \u201cseeing\u201d the change at the time it is made.","Preferably, at substantially the same time that the change is being made by engine  to the data model  stored in memory  of peer unit A, the other peer units B-D are making the analogous change to their locally stored data so as to effect the intent of the delta in a consistent manner. Situations may arise where one or another of the peer units A-D is not connected to the network, e.g., the Internet. Where the peer unit A may be disconnected, the communications manager  employs a device presence detector  to ascertain whether the peer unit A is connected and, if not, stores outbound deltas in an outbound delta store  until such time as connection is restored, and then transmits the stored deltas. Where one or more destination peer units B-D are disconnected from the network, the communications manager  of peer unit A can proceed to transmit the outbound delta to relay  () without regard to whether the other peer units are disconnected. The relay  () receives such outbound deltas, stores them as necessary in an outbound delta store  (FIG. ), and forward them upon the destination peer unit B-D being reconnected. In operation, the communications manager  can send all outbound deltas to the URL of the relay , and the relay can utilize an on-board look-up table  to ascertain the endpoint URL of the destination peer unit B-D to be used for relaying the delta. The relay service can be provided, in practice, by an Internet Service Provider (ISP) or other Internet organizations.","It can be seen that, as between the tool  and the engine , user interface activities are effected directly only via the tool  and data model changes are effected directly only via the engine . In the vernacular, the tool  \u201cowns\u201d the UI and the engine  \u201cowns\u201d the data model. This can be contrasted with current, typical applications as illustrated in FIG. . For example, spreadsheet programs today typically combine the functions of the tool and the engine rather than separating them as in the foregoing embodiment of the invention. By separating the tool from the engine, and thus the UI from the data model, the dynamics manager can intervene and mediate between deltas originating from the various peer units, e.g., for purposes of maintaining data consistency. Moreover, separation of the tool from the engine permits the process of execution of deltas to be carried out asynchronously. This is useful because it takes time for the dynamics manager  and engine  to carry out their responsibilities in a manner, e.g., that will maintain data consistency for all telespace members. It is also useful because inbound deltas from other peer units B-D can affect timing of execution of locally-initiated deltas.",{"@attributes":{"id":"P-00097","num":"00097"},"figref":"FIG. 7","b":["700","700","702","704","706","706","700","706","702","704","700"]},"F. Communications manager, Presence Server, and Relay",{"@attributes":{"id":"P-00099","num":"00099"},"figref":["FIG. 8","FIG. 8"],"b":["800","802","803","802","314","802","804","805","807","806","802","806","803","802","808","830"]},"As noted, each communications manager A-D is responsible for managing all communications between its peer unit and the other peer units. For example, communications manager  manages bi-directional communications between peer unit A and peer units B-D. The communications can include messages sent either from the peer unit A to one or more of peer units B-D, or from one of the peer units B-D to peer unit A. The transmissions can be made directly and without intermediaries, provided the destination peer unit(s) B-D (in the former case) or peer unit A (in the latter case) are connected to the network, e.g., the Internet (\u201con-line\u201d). As noted above, a device presence server  can be employed to ascertain whether the intended destination is on-line, or temporarily disconnected (\u201coff-line\u201d). If the destination is off-line, the communications can be made via a relay  (as noted above), which then forwards the message on to its destination when it returns online.","Thus, if peer unit A seeks to send a message to peer unit C, and the presence server  has informed the communications manager A that peer unit C is on-line, then the communications manager A sends the message via the network, e.g., the Internet , directly to the URL of peer unit C. At peer unit C, the message is received by communications manager C, which passes the message to dynamics manager C.","On the other hand, if peer unit A seeks to send a message to peer unit C, and the device presence server  has informed the communications manager A that peer unit C is off-line, then the communications manager A sends the message via the network, e.g., Internet , to the URL of the relay . The relay  can be implemented as a high-performance file server, which stores the en route message until peer unit C returns on-line, and then forwards the message to the URL of peer unit C. At peer unit C, the message is received as noted before, and passed through communications manager C to dynamics manager C.","Accordingly, the presence server  can serve the purpose within the ABC system  of monitoring whether the peer units A-D are on-line, and notifying each of the peer units of the connection status of the other peer units. To fulfill this purpose, the presence server  can be configured, for example, as shown for computer system  of FIG. .","During operation, each of the peer units A-D can be responsible for notifying the presence server  of its connection status, i.e., whether it is on-line or about to go off-line. Alternatively, the presence server  can poll the peer units A-D from time to time to obtain their connection status. This information is stored in the presence server  in a preferably volatile memory  in a connection directory . The connection directory  is initially empty, and remains so until the peer units A-D provide the presence server  with their connection status, e.g., provide connection status notifications. Then, upon receipt of the status information, the connection directory  stores the notifying peer unit's URL and its connection status.","The presence server  can also provide a connection-status subscription service for the peer units A-D. The presence server  will notify each subscribing peer unit A-D of the connection status of each other peer unit A-D, and of a change in that connection status. The presence server  can send the connection status notifications to the subscribing peer units A-D either (a) upon request of status change notifications from the peer unit A-D \u201cWishing\u201d to send a message; (b) upon connection of the peer unit to the network, e.g., the Internet ; (c) from time to time, e.g., upon a change in status of any of the peer units; or (d) a combination of the foregoing. Preferably, all communications are made pursuant to Internet protocols. These protocols can include, among others, those mentioned above.","Each peer unit A-D can also subscribe to a membership-status service, and, by so doing, thereafter learn on an on-going basis of the membership of each telespace in which it is a member. To enable this service, the presence server  has a member directory  maintained in memory  for storing records for each member supported by the presence server. Each peer unit provides the presence server with its current membership status from time to time or, alternatively, upon any change it its membership status.","To illustrate, if peer unit A wishes to send a message, such as a delta, to peer unit B, peer unit A accesses the presence server  and obtains the URL of peer unit B to obtain its connection status. Assuming peer unit A subscribes to the subscription service, it will have received notification of the status of peer unit B. Thus the dynamics manager A will have passed the message to the communications manager A without knowledge of whether the destination peer unit B is connected to the network.","G. Distributed Data Consistency Model and Delta Processing","As noted above, the dynamics managers A-D in the peer units A-D are responsible for receiving locally-generated and remotely-generated deltas and maintaining a proper order for their execution by their respective engines A-D so as to maintain a high level of consistency of the data models across all the peer units A-D of the ABC system  participating in a telespace. This is made all the more difficult because deltas originating from one or another of the peer units may be received and\/or executed out of order, or even after significant delays due to peer units being temporarily disconnected from the network. Moreover, the deltas may be generated based on different and inconsistent local data states.","Theoretically, data consistency can be described in terms of three properties, each achievable to some degree in collaboration systems, namely causality preservation, intention preservation, and convergence. More specifically, these properties of consistency can be described as follows:\n\n","The ABC system  records the necessary information to maintain a high level of data consistency and imposes delta execution order constraints on deltas whose execution is dependent on the prior execution of other deltas. For example, where deltas are designated with capital letters A, B, C, D, assigned in the order of delta receipt by the dynamics manager A of peer unit A, it is possible that the deltas A, B, C, D may be properly executed in that order of receipt to preserve causality. This may even be the case if, e.g., deltas A and C originated locally from peer unit A and deltas B and D came from remote peer unit D. In some cases, however, execution of those deltas in the order of receipt will result in the changes being made out of order giving rise to a causality violation. This may arise, for example, because of differential latencies in the communication paths traversed by locally-generated and remotely-generated deltas, which can result in the deltas being received in an interleaved fashion. Moreover, even if causality preservation is achieved, the result may violate the intention preservation property, and the changes may even be nonsensical. For example, delta B may seek to insert \u201cfour\u201d before \u201clegs\u201d in the sentence \u201cA cow has legs.\u201d If delta A sought, without knowledge of delta B's change, to change \u201clegs\u201d to \u201ca head\u201d in that sentence, and is executed before delta B so as to change the context for delta B, the result is \u201cA cow has four a head.\u201d Indeed, this result makes no sense, and nor would the result if delta A were processed after delta B. As for convergence, a number of conditions may compromise the \u201csameness\u201d (i.e., replication) of the copies of the data at the peer units A-D. For example, communication faults in the network may prevent deltas from being received by some peer units A-D, causing different delta execution results. It is difficult, if not impossible, to achieve total convergence, causality preservation, and intention preservation in a practical system, but a high level of data consistency is desirable for collaboration between the peer units.","In order to achieve a high level of data consistency, each dynamics manager A-D preferably creates deltas of a predetermined format, and records in the deltas and in their respective memories certain information used to maintain data consistency. Specifically, each dynamics manager A-D assigns to each delta it creates a sequence number (\u201cSeq.No.\u201d) to indicate the sequencial position of the delta among all deltas created by that dynamics manager at the particular peer unit A-D. The dynamics manager A-D then records the assigned sequence number in the delta along with the endpoint identifier (\u201cEP\u201d) specifying the endpoint (peer unit and person) that originated the delta. The dynamics manager A-D also records in the delta at the time of its creation information specifying a single dependency. The dependency information recorded in the delta is, e.g., in the form of the sequence number and EP of the endpoint originating one other delta, for example, usually, the delta last executed immediately prior to the creation of the subject delta by the engine A-D for the same activity as the subject delta and at the originating peer unit for that delta.","Some deltas do not depend on prior deltas, for example, because the state of the telespace data is unimportant to their execution. They are called \u201cindependent deltas\u201d. For independent deltas, no such dependent sequence number need be provided. Each dynamics manager A-D extracts consistency information from the headers of received deltas, and maintains the information along with the rest of the delta information in memory.",{"@attributes":{"id":"P-00117","num":"00117"},"figref":"FIG. 9","b":["900","900","902","904","902","902","908","807"]},"The header  specifies consistency information, for example, as follows:\n\n",{"@attributes":{"id":"P-00121","num":"00121"},"figref":"FIG. 10","b":["1000","804","804","1002","1","2","804","1004","1002","1606","804","802","802","804","1008","314","1010","1012","1014","1016"]},"The vector  is important in this regard for storing Information used in maintaining a high level of data consistency, and thus deserves further discussion. The vector  stores, for example, the following consistency information regarding each received delta: (a) an originating endpoint identifier (\u201cUID\u201d), which is an identification of that endpoint that is unique across the telespace; (b) an endpoint-relative sequence number, which is a running count of deltas in the telespace received from each end-point, and corresponds essentially to a per-endpoint time stamp for ordering purposes of the received deltas; (c) a dependent sequence number for the deltas, which indicates, as of the time an endpoint created a delta, it did so based on a certain prior delta in the sequence that had been executed by that peer unit (i.e., the \u201cuser seen\u201d current state). In the preferred embodiment, all of this information can be extracted from the received deltas.","During operation, when a delta is received, for example, by the dynamics manager A, the dynamics manager places the received delta in either one of the local delta queue  or the inbound delta queue , depending on whether the received delta was locally initiated or remotely initiated. Some implementations can store only a pointer to each such delta in the appropriate queue. The queues ,  are implemented, for example, as FIFO (first-in-first-out) workload buffers. (Alternatively, a single queue can be utilized in some implementations for holding both inbound and local deltas.) The dynamics manager A processes the deltas from the queues ,  on a first in, first out basis. Some implementations can use an appropriate priority algorithm for processing deltas from one or the other of the local or inbound delta queues , , for example, for load balancing and\/or latency control. It may be desirable to process all inbound deltas in the inbound queue prior to local deltas in the local queue to constrain average latency in delta processing. Alternatively, the opposite order in which local deltas are processed with priority may avoid long latency in the event of a long inbound delta queue upon reconnection of the peer unit to the network.",{"@attributes":{"id":"P-00124","num":"00124"},"figref":["FIG. 11A","FIG. 11A"],"b":["1100","1102","804","1012","1014","1106","804","1006","1108","1110","11","1112","1110","804","1114","1116","1006","804","1006","1128","1106","1118","804","1006","1006","1122","1016"]},"In step , the dynamics manager A determines the order of delta processing, and then involves the subroutine  of , as described above. If the current delta is dependent on a previously executed delta and if no other received delta depends on the same prior delta, as indicated by the delta sequence numbers in the delta log , the current delta is immediately executed without further consistency concerns. On the other hand, if the current delta has the same dependent sequence number, i.e., Seq. No. @ EP as another pending delta registered in the delta log , then a collision condition occurs between those deltas.","In this embodiment, the ordering of execution of deltas in the event of a collision depends on the endpoint that originated the delta, although other implementations can alternatively use other priority schemes or default ordering to resolve collisions. As implemented, each endpoint that is a member of a telespace is assigned (e.g., by the first endpoint member of the telespace) a unique endpoint number, corresponding, for example, to the order in which the endpoint originally joined the telespace. Thus, if peer unit A was the first in the telespace, it may be numbered EP1, and successive new members receive numbers according to a hierarchical numbering scheme, for example, reflecting the sponsoring endpoint that invited the new member into the telespace. Thus, if endpoint EP1 invited two new members into the telespace, they may be numbered EP1.1 and EP1.2. Then, if endpoint EP1.1 invited three new members to join, the new members may be numbered EP1.1.1, EP1.1.2, and EP1.1.3. The digits from left to right in the endpoint numbers can be referred to as first order, second order, etc. Thus, in EP1.1.3, the number \u201cone\u201d on the left is the first order, the \u201cone\u201d in the middle digit position is the second order and the \u201cthree\u201d is the third order.","The foregoing numbering scheme has special qualities, particularly suited for assigning unique designations to endpoints for use in a peer-to-peer, fully distributed collaboration system, where members can join or discontinue membership at any time or connect or disconnect temporarily from the telespace at any time. As noted, this scheme assigns a unique designation to each endpoint of each of the telespace members. Each designation of a member indicates the order in which the member joined the telespace, and, for each member invited to join (or otherwise sponsored) by another telespace member (the \u201cinviting member\u201d), it also indicates the inviting member. As more and more members are invited to join by those new members, the designations add additional orders of digits to indicate the family tree or chain of inviting members. Accordingly, the designations can be thought of as indicating the ancestry of each member added to a telespace after the founding members of a telespace. Thus, where the designations comprise a number of orders, the first order designates a founding member of the telespace, and each successive order after the first order (e.g., second, third, etc, order) designates a member invited to join the telespace by an inviting member specified by the preceding order digit. The inviting member may be a founding member or another member of the telespace of intermediate seniority and with telespace membership sponsoring privileges. In one embodiment, each inviting member is responsible for assigning telespace numbers to members it sponsors.","With this numbering scheme, in step  of , the dynamics manager A resolves dependency collisions, maintaining total ordering. As shown in , dependency collision resolution can be performed by step  comparing EP numbers on an order by order basis, and step  determining a processing order based on that comparison so that deltas with the lowest numbers in the lowest orders are scheduled for processing first. Then, step  tests whether any of the deltas have already been processed out of order and ahead of other delta(s) that should have been processed first. If no deltas have been processed out of order, then step  processes the next delta. On the other hand, if any have been processed out of order, step  rolls-back such processing to the data state immediately prior to that delta execution, and then step  \u201credoes\u201d the processing of the deltas in the proper order.","Thus, this scheme of dependency conflict resolution assures that any endpoint number having, for example, a \u201cone\u201d in the first order will be processed ahead of an endpoint number with a \u201ctwo\u201d, \u201cthree\u201d or other higher value in the first order. Where deltas have the same number value in the first order, then the second order digits are compared, etc., until an order is specified, and then that order of delta execution is realized by performing a \u201cdo\u201d, and, where necessary, \u201cundo\u201d and \u201credo\u201d, operations on the deltas.","For example, the delta log  may for illustrative purposes contain deltas and related information in the form\n\n","The foregoing example relates to endpoint numbers having first and second order numbers only, though the principles illustrated apply equally well to other endpoint numbers having additional, higher orders, where collision resolution requires comparison of these higher orders, as described above. Accordingly, priority upon dependency collision is assigned in the order of membership sponsorship and then chronology based on membership date as described above.","Alternatively, priority upon dependency collision can be based on endpoint numbering assigned according to characteristics of the endpoint (e.g., job title, work group or department), nature of change requested (e.g., delete paragraph or add chapter), location of change in data (e.g., change document title or change document summary), or other considerations. To illustrate the principle behind each of these bases for awarding priority, deltas from endpoints having, for example, certain characteristics can be processed in cases of collision ahead of those having other characteristics, such as the deltas from a product design team prior to the deltas from a marketing team or vice versa.","Moreover, since roll-back and remaking of data changes (sometimes called UNDOs and REDOs) are expensive in terms of overhead, it may be desirable to provide in some implementations still other forms of prioritization of delta processing. Implementations may provide alternative priority strategies, for example, depending on activity. Some activities can have one type of conflict resolution or basis for awarding priority, while others can have other types, depending, for example, on the significance of data consistency for the particular activity. Real-time activities like chat rooms may avoid roll-back and remaking of changes in order to lower response time, particularly since order of execution may be less important.","Other implementations may execute deltas in delta clusters where they are related in some way, e.g., to changes to a certain part of a document being edited or to a certain type of change, so that they all may be made at about the same time. Furthermore, excessively-delayed deltas that have sequence numbers earlier by a predetermined value than the highest sequence number for the endpoint stored in the vector  can be discarded in some implementations to avoid thrashing due to excessive redo's.","Returning to , in step , the dynamics manager A determines if the hold queue  has any deltas that were not processed previously because they depended on the prior processing of the current delta. If so, the method returns to step  to process such deltas. After all such deltas have been processed by the loop of steps ,  and , the method  returns to step .","The foregoing method of processing deltas so as to optimize data consistency is particularly advantageous in implementations, such as that discussed herein, wherein A) peer units may be temporarily disconnected from the network and thus may not receive deltas until after a long delay during which local deltas may be processed out of order; B) endpoints may dynamically join or fall off membership lists; and C) overhead associated with data consistency is minimized and distributed among the peer units.","Yet other endpoint numbering schemes can be employed advantageously in particular embodiments of the invention. For example, a scheme could be implemented that uses a pseudo-random number generator to assign unique telespace member identifiers. Uniqueness can be guaranteed if the random number generator generates adequately random numbers and the seed is fairly unique. For example, using a network adapter's MAC address as a seed for the generator and creating a 32 byte value can quarantee uniqueness not only within the telespace but also within the ABC system.","The ABC system can be multitasking and multithreading in that each tool-engine combination forming an activity can correspond to a separate dynamics manager, and multiple dynamics managers can be provided to accommodate multiple simultaneously operating activities. While a one-to-one relationship between telespaces and dynamics managers may introduce the least latency in handling deltas, thread starvation could give rise to an error or fault condition. On the other hand, single dynamics managers supporting many telespaces could give rise to congestion problems. The optimal numbers of each component will depend on the hardware application, number of participating peer units, and traffic conditions.","The ABC system can comprise plural computer systems (CS), each with one or more telespaces (TS), each instantiating one or more activity components, each activity component having one or more tool (T), engine (E) pairs, each of whose operation is coordinated by a dynamics manager (DM). Thus, the ABC system can have multiple telespaces with one or more dynamics managers. Accordingly, the ABC system can be formed, for example, as follows:","ABC system=\n\n, where +E\n\n, where \n\n. . . \n\n. . . \n\n, where \n\nwhere all the activities AAand Areside in one or more telespaces, and \u201cn\u201d is a positive integer. Thus, by way of illustration, the following are examples of various telespace instantiations:\n\nTS\u2282A, or \n\n\u2003TS\u2282A+Aor\n\nTS\u2282A+A. . . A. \n\nor\n\nTS\u2282A\n\nTS\u2282A\n\nand\n\nTS\u2282A\n\nwhere the symbol \u201c=\u201d means \u201ca set comprising\u201d, and \u201cm\u201d is a positive integer. Accordingly, each telespace can instantiate of one or more activities, and the framework can have a single telespace; alternatively, each telespace can instantiate of one or more activities, and the framework can have multiple telespaces.\n","A software implementation of components of the above-described embodiment may comprise computer instructions and routines either fixed on a tangible medium, such as a computer-readable media, e.g. the diskette , CD-ROM , ROM , or fixed disk  of , or transmittable via a modem or other interface device, such as communications adapter  connected to the network  over a medium . Medium  can be either a tangible medium, including but not limited to optical or hard-wire communications lines, or may be implemented with wireless techniques, including but not limited to microwave, infrared or other transmission techniques. It may also be the Internet. A series of computer instructions embodies all or part of the functionality previously described herein with respect to the invention. Those skilled in the art will appreciate that such computer instructions can be written in a number of programming languages for use with many computer architectures or operating systems. Further, such instructions may be stored using any memory technology, present or future, including, but not limited to, semiconductor, magnetic, optical or other memory devices, or transmitted using any communications technology, present or future, including but not limited to optical, infrared, microwave, or other transmission technologies. It is contemplated that such a computer program product may be distributed as a removable media with accompanying printed or electronic documentation, e.g., shrink wrapped software, pre-loaded with a computer system, e.g., on system PROM or fixed disk, or distributed from a server or electronic bulletin board over a network, e.g., the Internet or World Wide Web.","Although an exemplary embodiment of the invention has been disclosed, it will be apparent to those skilled in the art that various changes and modifications can be made which will achieve some of the advantages of the invention without departing from the spirit and scope of the invention. It will be obvious to those skilled in the art that other components performing the same functions may be suitably substituted. Further, the methods of the invention may be achieved in either all software implementations, using the appropriate processor instructions, or in hybrid implementations that utilize a combination of hardware logic and software logic to achieve the same results. Further, aspects such as the size of memory, the specific configuration of logic and\/or instructions utilized to achieve a particular function, as well as other modifications to the inventive concept are intended to be covered by the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The above and further advantages of the invention may be better understood by referring to the following description in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"P-00025","num":"00025"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00026","num":"00026"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"P-00027","num":"00027"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00028","num":"00028"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"P-00029","num":"00029"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"P-00030","num":"00030"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"P-00031","num":"00031"},"figref":["FIG. 7","FIG. 4"],"b":"700"},{"@attributes":{"id":"P-00032","num":"00032"},"figref":["FIG. 8","FIG. 4"]},{"@attributes":{"id":"P-00033","num":"00033"},"figref":["FIG. 9","FIG. 4"]},{"@attributes":{"id":"P-00034","num":"00034"},"figref":["FIG. 10","FIG. 4"]},{"@attributes":{"id":"P-00035","num":"00035"},"figref":["FIGS. 11A and 11B","FIG. 4"]},{"@attributes":{"id":"P-00036","num":"00036"},"figref":"FIG. 12","b":"11"}]},"DETDESC":[{},{}]}
