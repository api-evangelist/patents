---
title: Method and an apparatus for developing software
abstract: A software component, is constructed on the basis of a set of predetermined rules, and by utilizing a source object, a token value and a parameter, wherein the source object is stored in a source object repository, and wherein the source object comprises a component value and/or a token value, wherein the component value may be associated with the token value. For constructing the software component, the token value is processed and a token result, obtained by processing the token value, is utilized for constructing the software component, wherein the parameter may also be utilized for the processing of the token value and/or constructing the software component.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08898628&OS=08898628&RS=08898628
owner: 
number: 08898628
owner_city: Lahore
owner_country: PK
publication_date: 20110923
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION\/EMBODIMENTS","1. Definitions","2. The Challenges in Software Development","3. The Causes of the Impediments in Software Development","4. What Needs to be Done","5. Inventive Concepts and Methodologies that Address the Challenges in Software Development","6. Embodiments and Drawings","7. An Embodiment According to an Aspect of the Invention (FIG. A)","8. An Embodiment According to an Aspect of the Invention (FIG. B)","9. An Embodiment According to an Aspect of the Invention (FIG. )","10. An Exemplary Environment for Carrying Out an Aspect of an Embodiment of the Invention","11. An Exemplary Mode for Carrying Out Certain Aspects of a Few Embodiments of the Invention (FIG. A to Z)","12. Concluding Remarks on Embodiments and Drawings","13. A Few Benefits and Commercial Applications of the Invention"],"p":["1. Field","This invention relates to the field of software development.","2. Description of the Related Art","Software development includes development of new software, maintenance of developed software, and quality assurance of developed software, wherein the maintenance includes a change and\/or a modification in developed software, and wherein the quality assurance includes testing and\/or debugging of developed software.","In software development, one of the biggest impediments is the large, many times prohibitive, amount of resources required for developing and maintaining even a small computer program. Moreover, the resources required for software development increase exponentially in proportion to the number of features required in a computer program. Also, the required resources can further grow astronomically for computer programs that must exclude any chance of an error and\/or a malfunctioning.","At the same time, the expectations and requirements from software are increasing rapidly because of the swiftly increasing processing power and capabilities of computers. However, because of the limitations of available resources, such as, human resource, financial resource, time resource, technical resource, and the like, the art is still unable to develop, and utilize software to its full potential.","To address the above serious impediment, various technologies have been developed over time, but none has been able to effectively solve this problem so far. Such technologies include CASE tools, data driven programming, table driven programming, object oriented programming, CORBA (Common Object Request Broker Architecture), MDA (Model-Driven Architecture), RAD (Rapid Application Development), software factories, and the like. All these technologies have reduced, to some extent, the resource requirements for software development. These technologies have also enabled, somewhat, efficient utilization of the resources required for software development. Simultaneously, though, ever-increasing complexities, as well as exponential rises in functional requirements from software have meant that whatever benefits emanated from such technologies have not been enough to meet the growing demands from software.","In addition to the above mentioned technologies, many computer programs and development environments have been developed for reducing the resource requirement for the software development process. Such computer programs and development environments include, but are not limited to, MS-VISUAL STUDIO, GNAT PROGRAMMING STUDIO, IBM RATIONAL APPLICATION DEVELOPER, POWERBUILDER, C++BUILDER, XCODE, NETBEANS, DELPHI, LAZARUS, CRYSTAL REPORTS, MICROSOFT ACCESS, ORACLE DATABASE, and MICROSOFT SQL SERVER. While these computer programs and development environments have managed to automate a small number of mechanical tasks, they have not been effective in reducing the excessive resource requirements for software development.","Consider, for instance, a computer application which is required to comprise a couple of hundred reports which are desired to be based on MICROSOFT SQL Server database and are specifically designed for MICROSOFT ACCESS reporting engine and a letter size paper. In the prior art, each report, along with its required query, would have to be developed by a software developer. This process may take tens of thousands of hours of a skilled computer programmer. If the same reports are required to be ported to an ORACLE platform and CRYSTAL REPORTS with report layouts for an A4 size paper, the resource expenditure might be even greater than what was required for the original development.","The humongous and unmanageable resource requirement for software development is not only related to reports and queries, but also to every stage and aspect of software development. However, despite the availability of so many technologies, environments and applications, the prior art has been unable to meet the challenge of minimizing the required resources for software development to a desired, and an effective level.","Software development should, ideally, achieve three objectives simultaneously: maximizing features, ensuring highest quality, and minimizing software development resources. However, the prior art has failed to achieve all three objectives in conjunction; in every software development, one or more of these objectives have to be compromised.","The major challenge in the prior art, that of minimizing resources, (man, technology, money, and time) required for software development, as well as in the maintenance and quality assurance of developed software, has been effectively met by the embodiments of the present invention.","According to an embodiment of the present invention, a new method for developing software is provided which empowers a machine (e.g. a computer) to function like a human software developer. A data token is defined, created and associated with a source code to enable the machine (e.g. a computer) to perform software development (enable the machine to generate or construct further source code, object code, and\/or an object).","According to another embodiment of the present invention, a method is provided to streamline and simplify a source code which is required to develop software. A source object is created and utilized as the source code by the machine (e.g. a computer) to perform software development.","According to another embodiment of the present invention, a method is provided for creating a source object repository to store a source object. The source object repository enables easy creation, manageability, and reusability of a source object.","According to another embodiment of the invention, a method is provided for associating a data token to a source object in a manner that enables a computer to generate a complete source code by utilizing the source object and the associated data token.","Embodiments of the present invention provide numerous technical and commercial advantages. For example, according to an embodiment of the present invention, the time and resources required for software development are reduced substantially. According to another embodiment of the present invention, the available features and options in developed software are increased substantially.","The extraordinary benefits of applying the principles of the present invention will change the way software development is conceived and carried out. The inventive concepts and principles will create endless new possibilities and horizons\u2014far beyond queries, reports, data entry forms, menus, business processing rules, help systems, exception handling systems, and the like\u2014that are unknown and unthinkable in the prior art.","Many more advantages will be readily apparent to one who is skilled in the art.","Some of the terms used herein are not commonly used in the art. The discussion of the present invention utilizes some terms in a specific sense. Therefore, the following definitions are provided in order to ensure clarity, as well as to facilitate the understanding of the detailed description that follows. However, the invention, as set forth in the claims, should not necessarily be limited by these definitions.","A \u201cdata value\u201d is a unit of data which comprises a piece of information and which requires at least one bit for a representation in a computer readable recording medium. Anything that can be stored in a computer readable recording medium is a data value. Examples of a data value may include, but are not limited to, a name, an age, a date, a time, a number, a text string, an object, an image, an audio, a video, a signal, a formula, a source code, an object code, a variable name, a variable value, a field name, an alphanumeric character, binary data, alphanumeric data, a bit, a short integer, a long integer, a NULL value, and an empty value.","A \u201csoftware component\u201d  refers to a source code of a computer programming language, an object code of a processor (real and\/or virtual), and\/or an object, which is at least one part of a software, wherein the one part of software is utilized during execution of the software or a part thereof, that is executed either by a processor or by another software (computer program) in case of virtualization, wherein the processor is either a real (physical) computer processor or an emulator (virtual computer processor). A software component comprises one or more source components which are put together on the basis of \u201ca set of predetermined rules\u201d  wherein each of the one or more source components is represented by at least one data value. A software component may comprise one or more other software components. Examples of a software component  may include, but are not limited to:","1. An SQL query is a software component.","2. A WHERE clause of an SQL query is a software component.","3. A report layout is a software component.","4. A software object created on a basis of a class model is a software component.","5. A font object is a software component.","6. A data structure is a software component.","7. A database view is a software component.","8. A database table is a software component.","9. A data entry form is a software component.","10. A spreadsheet is a software component.","Examples of a software component  comprising another software component may include, but are not limited to:\n\n","A \u201csource component\u201d  is represented by at least one data value, hereinafter called component value , in a software component . In other words, a source component  is just like a property of a software object, whereas a component value  is just like the value of the property of the software object. Examples of a source component  may include, but are not limited to:\n\n","Component values which represent the command in an SQL query may include, but are not limited to, SELECT, UPDATE, DELETE, INSERT INTO, CREATE DATABASE, ALTER DATABASE, and the like.\n\n","A \u201cset of predetermined rules\u201d  comprises one or more predetermined rules that are sufficient for constructing a software component. A set of predetermined rules is specified in terms of one or more source components, wherein each of the one or more source components is represented by at least one component value in a software component. Examples of a set of predetermined rules  may include, but are not limited to\n\n","A \u201cuser\u201d is someone who develops, installs, utilizes, and\/or configures a computer program. A user may include, but is not limited to, a human being, a machine, and a computer program. It is possible that a user is also a developer of the same computer program that the user utilizes.","A \u201cdata token\u201d  comprises a set of data token rules  and is represented by a data value, hereinafter called token value , wherein the token value is processed on the basis of the set of data token rules, and then the result of the processed token value, which is also a data value, hereinafter called token result , is utilized for constructing a software component. The set of data token rules is specified at the time of defining a data token, wherein the set of data token rules comprises one or more rules which specify one or more manners in which a token value can be associated with a component value of a source component of a software component, can be processed, and\/or can be utilized. The processing of a token value may include, but is not limited to, executing a function, performing a comparison, creating a component value, determining a manner in which a software component is constructed, identifying one or more component values for utilizing in a software component, or any combinations thereof. A token value may be determined by utilizing a parameter. A token value can also be associated with another token value. A token value can be nested in another token value of the same and\/or a different data token.","Following are a few examples of a data token :\n\n","A \u201csource object\u201d  comprises:\n\n","A \u201csoftware component constructor\u201d  is a computer program which is sufficient for constructing a software component , or a part thereof, on the basis of a set of predetermined rules  and by utilizing a source object , a component value , a token value , a token result , or any combinations thereof, wherein a source object , a component value , and\/or a token value  may be determined by utilizing a parameter value . A software component constructor may be a single computer program or a plurality of computer programs that are integrated and\/or interfaced with each other. A software component constructor may adapt a set of predetermined rules, on which the software constructor is based, in a manner that no rule of the set of predetermined rules is violated to an extent that a software component cannot be constructed on the basis of the adapted set of predetermined rules. For example, a query builder, a software component constructor, which constructs SQL queries for DB2, MICROSOFT ACCESS, MICROSOFT SQL Server, ORACLE, and\/or SYBASE, is a software component constructor. Another example of a software component constructor is a report creator which creates report layouts for CRYSTAL REPORTS.","A \u201csource object repository\u201d  comprises one or more data structures and is utilized for storing a source object  in a computer readable recording medium, wherein the source object repository is created on the basis of a data model which is suitable and sufficient for creating a source object repository that is suitable and sufficient for:\n\n","A data structure comprised by the source object repository may include, but is not limited to, a database table, a class, an array, a linked list, a variable, a multidimensional array, a multidimensional database, a conventional database, a flat file, a delimited text file, and a parameter.","A \u201ccomputer program\u201d, as used herein, is defined as an executable sequence of instructions designed for execution on a processor either directly and\/or via another computer program. The computer program may include, but is not limited to, a subroutine, a function, a procedure, an interpreter, an object method, and an object implementation in an executable application, an applet, a servlet, an executable source code, an object code, an ActiveX, and a shared library\/dynamic load library. A computer program is also known as software.","The terms \u201ca\u201d or \u201can\u201d, as used herein, are defined as one or as more than one. The term \u201cplurality\u201d, as used herein, is defined as two or as more than two. The term \u201canother\u201d, as used herein, is defined as at least a second or more.","The terms \u201cincluding\/include\/includes\u201d, and\/or \u201chave\/having\/has\u201d, as used herein, are defined as \u201ccomprising\/comprises\u201d (i.e., open language).","Creation, utilization, association, and\/or processing of a data token, as used herein, is defined as creation, utilization, association, and\/or processing of a token value of the data token.","Utilization of a parameter, as used herein, is defined as utilization of a parameter value of the parameter.","The headings in this detailed description have been inserted for ease of readability and have no interpretative role.","The main challenges in software development are minimization of:\n\n","The prior art in software development has failed to effectively address and meet the above challenges in software development because of the serious limitations that have been discussed in the \u2018BACKGROUND\u2019 section.","It is to be noted that, in the current environment, the expectations and requirements from software are rising rapidly because of the rapidly increasing processing power and capabilities of computers. However, because of the scarcity of available resources, such as human resource, financial resource, time resource, technical resource, and the like, the art is still unable to develop and utilize software to its full potential.","After extensive research and detailed analysis of a wide range of existing computer programs, as well as the existing software development technologies, methodologies, tools, environments, and applications, the inventor identified the following main causes of the prohibitive resource requirements for software development in the prior art:\n\n","After finding the primary causes of the impediments in software development, the inventor concluded that the following are required to address the above causes:\n\n","The major challenge in the prior art, that of minimizing the resources (man, technology, money, and time) required for software development, maintenance and quality assurance, has been effectively met by the inventor. According to an aspect of an embodiment of the invention, an inventive method enables a computer and\/or a machine to function like a human software developer, and to perform most of the software development. Moreover, the inventive method also streamlines and simplifies the remaining portion of the software development left for human software developers.","While the concept and methodology of the present invention can be practiced in many different forms and embodiments, the embodiments shown in the drawings herein, and described herein in detail, are only a few embodiments thereof with the understanding that the present disclosure is to be considered as exemplary regarding the principles of the invention and is not intended to limit the invention to the embodiments as illustrated in the attached drawings and the descriptions thereof. The invention is intended to cover alternatives, modifications and equivalents, which may be included within the spirit, principles and scope of the invention as defined by the appended claims","In the attached drawings, like reference numerals are used to refer to like elements throughout, and in the descriptions of the drawings, pertinent details have been set forth and explained so as to provide a thorough understanding of the present invention. However, it may be clarified that the present invention may be applied and\/or utilized without these specific details.",{"@attributes":{"id":"p-0082","num":"0145"},"figref":"FIG. 1A"},"According to an aspect of an embodiment of the invention, at operation , a source object repository  is created. A source object repository  is utilized to store one or more source objects comprising one or more token values and\/or one or more component values which represent one or more indeterminable source components . A source object repository  is based on a data model  which is created for a software component on the basis of rules based upon which a software component is written and\/or developed. By way of an example, and not a limitation, a data model for an SQL query will base on the syntax of the SQL query. By way of another example, and not a limitation, a data model for a report layout in CRYSTAL REPORTS will base on the object model for reports exposed by CRYSTAL REPORTS.","According to an aspect of an embodiment of the invention, a source object repository  is created on the basis of a data model .","According to an aspect of an embodiment of the invention, a data model  is created on the basis of a set of predetermined rules  of a software component  (a software source code) and by utilizing one or more indeterminable source components .","According to an aspect of an embodiment of the invention, following steps are taken for creating a data model :\n\n","According to an aspect of an embodiment of the invention, a data model  enables reusability of a source object , a data token value , and\/or a component value .","According to an aspect of an embodiment of the invention, source components of a software component (software source code)  are categorized in indeterminable source components and determinable source components , wherein categorization is done on the basis of:\n\n","By way of an example, and not a limitation, the starting command, which is a source component , of an SQL query is determinable source component  if the SQL query is to be utilized for viewing records from a database, because such query always starts with command \u201cSELECT\u201d. However, in an SQL query, which can update, insert, view, and\/or remove records from a database, the starting command, which is a source component , of the SQL query is an indeterminable source component , because starting command cannot be determined without knowing the type of SQL query. The above example shows that if a user wants to write queries only for viewing records from a database then the starting command is a determinable source component  because of the rules for writing queries for viewing records from a database. However, if a user wants to write queries for updating, inserting, viewing, and\/or removing records from a database then the starting command will be an indeterminable source component  because of the rules for writing queries for updating, inserting, viewing, and\/or removing records from a database.","According to an aspect of an embodiment of the invention, at operation , a software component constructor (source code generator) , which is a computer program, is created.","According to an aspect of an embodiment of the invention, a software component constructor  is utilized for constructing (generating) one or more software components . By way of an example, and not a limitation, a software component constructor  may be utilized for generating (constructing) an invoice entry form, which is a software component , at runtime according to a user's requirements which are specified by utilizing one or more parameters .","According to an aspect of an embodiment of the invention, a software component constructor  retrieves one or more source objects from one or more source object repositories for constructing one or more software components .","According to an aspect of an embodiment of the invention, a software component constructor  accepts one or more parameter values from a user at runtime for constructing one or more software components .","According to an aspect of an embodiment of the invention, a software component constructor  accepts a parameter value  at a user interface level of a computer program.","According to an aspect of an embodiment of the invention, a software component constructor  is utilized for constructing one or more software components at runtime.","According to an aspect of an embodiment of the invention, at operation , a software component  is constructed by a software component constructor  which utilizes a source object  which is created, before constructing the software component , and stored in a source object repository .","According to an aspect of an embodiment of the invention, a source object  can be utilized, with a parameter , for constructing a plurality of software components .",{"@attributes":{"id":"p-0098","num":"0173"},"figref":["FIG. 1B","FIG. 1A"],"b":["20","30","40"]},"At terminal , the exemplary flowchart starts.","According to an aspect of an embodiment of the invention, at operation , a \u201cset of predetermined rules \u201d is selected, wherein the set of predetermined rules  is sufficient for constructing a \u201csoftware component \u201d, wherein the software component  is a software component that is desired to be constructed. According to an aspect of an embodiment of the invention, the set of predetermined rules  may be adapted as may be desired as long as a predetermined rule in the set of predetermined rules  is not violated to an extent where the software component  cannot be constructed on the basis of the adapted set of predetermined rules. According to an aspect of an embodiment of the invention, a plurality of sets of predetermined rules (where n>=1) can be selected. According to an aspect of an embodiment of the invention, a plurality of software components can be constructed on the basis of the set of predetermined rules . According to an aspect of an embodiment of the invention, the plurality of software components can be constructed on the basis of one or more sets of predetermined rules .","Given below are a few examples of a selected set of predetermined rules. The embodiments of the invention are not limited to these examples:\n\n","Given below are a few examples of an adaptation of a selected set of predetermined rules. The embodiments of the invention are not limited to these examples:\n\n","According to an aspect of an embodiment of the invention, sub-operation illustrates that the set of predetermined rules  has to be sufficient for constructing the software component .","Given below are a few examples of a software component. The embodiments of the invention are not limited to these examples:\n\n","According to an aspect of an embodiment of the invention, sub-operation illustrates that the set of predetermined rules  is specified in terms of a source component . According to an aspect of an embodiment of the invention, the set of predetermined rules  can be specified in terms of a plurality of source components .","Given below are a few examples of a source component. The embodiments of the invention are not limited to these examples:\n\n","According to an aspect of an embodiment of the invention, sub-operation illustrates that the source component  is represented by a \u201ccomponent value \u201d in the software component . According to an aspect of an embodiment of the invention, the source component  can be represented by a plurality of component values .","Given below are a few examples of a component value. The embodiments of the invention are not limited to these examples:\n\n","According to an aspect of an embodiment of the invention, at operation  the source component  is categorized into:\n\n","According to an aspect of an embodiment of the invention, the indeterminable source component  is represented by a component value  which either:\n\n","According to an aspect of an embodiment of the invention, a source component  may be categorized into an indeterminable source component  or a determinable source component  on the basis of the desire of a user.","In other words, categorization of a source component  may also be done on the basis of the desire of a user. By way of an example, and not a limitation, paper size, which is a source component , for a report, which is a software component , may be categorized as an indeterminable source component  or as a determinable source component , depending on the desire of a user. If a user always wants to print a report on a specific size of paper then paper size will be categorized as a determinable source component , otherwise paper size will be categorized as an indeterminable source component .","According to an aspect of an embodiment of the invention, a component value , representing an indeterminable source component , is determined by one or more of the following:\n\n","Given below are a few examples of an indeterminable source component. The embodiments of the invention are not limited to these examples:\n\n","According to an aspect of an embodiment of the invention, a source component  that is not an indeterminable source component , can be a determinable source component .","Given below are a few examples of a determinable source component. The embodiments of the invention are not limited to these examples:\n\n","According to an aspect of an embodiment of the invention, at operation , a \u201cdata token \u201d is defined, wherein the data token  is desired to be utilized for constructing a software component .","According to an aspect of an embodiment of the invention, a data token  is to be defined for a source component  whose component value is to be determined at runtime for constructing a software component  and such value cannot be determined by utilizing a computer implementable logic and\/or a parameter . In other words a data token  is utilized by a software component constructor  for determining:\n\n","According to an aspect of an embodiment of the invention, a data token  is to be defined for:\n\n","In other words, a data token  has to be defined for determining, at runtime, a component value  and\/or a manner in which a software component  is to be constructed, wherein it is desired to determine, at runtime, a component value  and\/or a manner in which a software component  is to be constructed, and wherein such determination cannot be made by utilizing a computer implementable logic and\/or a parameter  for constructing software component .","According to an aspect of an embodiment of the invention, a data token  is defined to automate construction of a software component at runtime by utilizing a computer implementable logic.","According to an aspect of an embodiment of the invention, association of a token value  with a component value  enables a software component constructor  to determine a place where a specific type of computer implemented logic needs to be applied. In other words, association of a token value  with a component value  enables a software component constructor  to act like a human software developer.","In other words, a data token  is defined to enable a machine (computer) to a perform a task, during construction of a software component  at runtime, which normally requires human intelligence but can be performed by utilizing a computer implementable logic if a machine can determine what, when, and where a task has to be performed. A data token , represented by a token value , enables a machine to determine what, when, and where a task has to be performed.","According to an aspect of an embodiment of the invention, a data token  is created along with a set of data token rules  that specifies a manner in which a token value  can be created, a manner in which a token value  can be associated to a component value , and a manner in which a token value  can be processed, wherein processing of a token value  produces a token result , wherein the token result  is utilizable for constructing a software component .","According to an aspect of an embodiment of the invention, a token value  is retrieved by utilizing a parameter value .","According to an aspect of an embodiment of the invention, a token value  is utilized without being processed.","According to an aspect of an embodiment of the invention, a token value  is processed by utilizing a parameter value .","According to an aspect of an embodiment of the invention, a token value  is utilized without processing for constructing a software component .","According to an aspect of an embodiment of the invention, processing of a token value  comprises executing a set of instructions which are executable by a processor.","According to an aspect of an embodiment of the invention, a token value  is embedded in a component value .","According to an aspect of an embodiment of the invention, a token value  is implicitly (virtually) associated with a component value .","According to an aspect of an embodiment of the invention, a component value  is retrieved by utilizing a token value .","According to an aspect of an embodiment of the invention, a component value  is retrieved by utilizing a parameter value .","According to an aspect of an embodiment of the invention, sub-operation illustrates that a data token  is represented by a token value .","According to an aspect of an embodiment of the invention, sub-operation illustrates that a \u201ctoken result \u201d may be obtained by processing a token value , wherein the token value  is processed by utilizing a \u201cparameter\u201d .","According to an aspect of an embodiment of the invention, sub-operation illustrates that the data token  comprises a \u201cset of data token rules \u201d, wherein the set of data token rules  is defined along with the data token . According to an aspect of an embodiment of the invention, the set of data token rules  comprises one or more rules which specify one or more manners in which the data token  is desired to be utilized for constructing the software component . According to an aspect of an embodiment of the invention, the set of data token rules  specifies one or more manners in which the data token  is:\n\n","A token value  may be associated with a component value  implicitly, wherein implicit association is implemented in a software component constructor . By way of an example, and not a limitation, a software component constructor  may assume that a token value  is associated with each component value  of a source component . As another example a software component constructor  may assume that a token value  is associated with a specific type of component values of a source component .","A token value  may be associated with a component value  explicitly, wherein a token value  is explicitly associated with a component value  of a source component . Explicit association can be done in a source object  and\/or in a software component constructor .","The data token  is utilized to automate tasks, in constructing the software component , which are normally performed by a human being.","The data token  can be utilized to automate all tasks which are required for constructing the software component , and which can be performed on the basis of an algorithm and\/or a computer implementable logic.","According to an aspect of an embodiment of the invention, a token value  of a data token  may be determined by utilizing a parameter value  of a parameter .","Given below are a few examples of how data tokens may be utilized. The embodiments of the invention are not limited to these examples:\n\n","A data token  can also be utilized in numerous other ways to automate any part of constructing a software component  which can be automated on the basis of an algorithm and\/or a computer implementable logic.","A data token  can also be utilized for invoking any desired process and\/or a task. By way of an example, and not a limitation, upon processing a token value  of a data token , a network connection may be established, a new program may be started, an existing program may be terminated, a component value  may be resolved from a database table, a user input may be acquired, an interaction with a user may be invoked, one or more software components may be constructed, a machine may be started, a machine may be stopped, and the like.","A data token  can also be utilized for invoking a process on a hardware component and\/or in a software component; such components may include, but are not limited to, a remote computer, a local computer, a server, a networked computer, a software process, a storage device, a cellular device, a communication device, a PLC (Programmable Logic Controller), and a hardware connected to a computer.","According to an aspect of an embodiment of the invention, at operation , one or more parameters are defined.","According to an aspect of an embodiment of the invention, a parameter  is defined for enabling a user to define a component value  and\/or a token value  at runtime. In other words, a parameter  enables a user to control the construction of a software component  at runtime.","A parameter , represented by a parameter value , is utilized to enable a user to interact with and\/or direct\/control the process of constructing a software component , according to the desire and\/or requirement of the user, via input of component values and\/or token values in the form parameter of values . In other words, a component value , and\/or a token value  may be determined at runtime by a parameter value , wherein a parameter value is an input by a user, at runtime.","According to an aspect of an embodiment of the invention, a parameter  may be utilized by a software component constructor  for constructing a software component , wherein the software component constructor  determines a manner in which a software component  is constructed on the basis of a parameter .","According to an aspect of an embodiment of the invention, a parameter  is defined for determining a source object  which is to be utilized for constructing a software component .","According to an aspect of an embodiment of the invention, sub-operation illustrates that a parameter  is represented by a \u201cparameter value \u201d which is specified and\/or input by a user, wherein a parameter value  is a data value. The parameter  may also be defined with a default parameter value .","The parameter value  can be specified and\/or input by a user either each time the parameter  is utilized or only at a time when the user wants to change the parameter value  which the user has already specified; in the latter case, the parameter value  may:\n\n","According to an aspect of an embodiment of the invention, a parameter  may also be defined for determining a component value  of an indeterminable source component .","Given below are two examples of utilizing a parameter. These examples are neither exhaustive nor complete. Moreover, the invention is not, in any way, dependent on, or restricted by the following examples:\n\n","A user can specify a parameter value  by utilizing one or more methods, which may include, but are not limited to, a data entry via a keyboard, a touch screen, a voice command, a gesture, a blink of an eye, an eye scan, an analog signal converted into a digital signal, and by way of human identification, such as, finger print detection, eye detection, face detection, DNA identification, and the like.","According to an aspect of an embodiment of the invention, at operation , a data model  is created, wherein the data model  is suitable and is sufficient for creating a \u201csource object repository \u201d, wherein the source object repository  is suitable and sufficient for:\n\n","According to an aspect of an embodiment of the invention, the data model  comprises one or more attributes (which may also be called fields or columns) for storing component values for all indeterminable source components for which neither a data token  is defined, nor a parameter  is defined.","Sub-operation specifies that the data model , created at operation , is sufficient for storing a source object .","According to an aspect of an embodiment of the invention, the source object repository  is created, at operation , in a desired manner and on the basis of a data model . According to an aspect of an embodiment of the invention, the source object repository  is created by utilizing one or more of the following:\n\n","According to an aspect of an embodiment of the invention, a source object repository  may be created by utilizing any suitable data structure which may include, but is not limited to, a database table, a comma separated text file, a spreadsheet, a matrix, an object, an array, a set of variables, and a linked list.","According to an aspect of an embodiment of the invention, a source object repository  is sufficient for storing a source object , wherein a source object  comprises an indeterminable source component  represented by a component value , wherein the indeterminable source component  is to be utilized for constructing a software component .","According to an aspect of an embodiment of the invention, a source object repository  enables identification of a component value  in the source object repository  with reference to the source object  and an indeterminable source component  which is represented by the component value .","According to an aspect of an embodiment of the invention, a source object repository  comprises a token value  which can:\n\n","According to an aspect of an embodiment of the invention, a source object repository  comprises a plurality of source components in a desired hierarchy.","According to an aspect of an embodiment of the invention, a source object repository  comprises a plurality of component values in a desired order.","According to an aspect of an embodiment of the invention, a source object  stored in a source object repository  is uniquely identifiable.","According to an aspect of an embodiment of the invention, at operation , a \u201csoftware component constructor \u201d is created, wherein the software component constructor  is a computer program which is sufficient for constructing a software component  on the basis of a set of predetermined rules  and by utilizing one or more of the following:\n\n","According to an aspect of an embodiment of the invention, a software component constructor  utilizes a data model  of a source object  by way of a source object repository  for retrieving the source object .","According to an aspect of an embodiment of the invention, the software component constructor  comprises and implements the set of predetermined rules  of a software component .","According to an aspect of an embodiment of the invention, a set of predetermined rules  may also be adapted in a desired manner for creating a software component constructor  to the extent that a software component  can be constructed by utilizing the adapted set of predetermined rules .","According to an aspect of an embodiment of the invention, a set of predetermined rules  can be adapted, as may be desired and\/or required, for constructing a software component constructor , wherein the adaptation is done in a manner that no rule of the set of predetermined rules  is violated to the extent that a software component  cannot be constructed on the basis of the adapted set of predetermined rules. According to an aspect of an embodiment of the invention, a set of predetermined rules  has to be sufficient for enabling a software component constructor  to construct a software component  on the basis of set of predetermined rules  and by utilizing one or more of the following:\n\n","According to an aspect of an embodiment of the invention, a software component constructor  utilizes a data token  during construction of a software component , wherein a software component constructor  utilizes, at runtime, a data token  for determining:\n\n","In other words, a software component constructor  utilizes a data token  to work like a human developer for constructing a software component .","By way of an example, and not a limitation, a software component constructor  can be utilized for constructing a database query, a report layout, a data entry form, a menu, and\/or a customized inventory processing rule. The software component constructor  can also be integrated with a computer program for constructing, at runtime, as many software components as may be desired. The integration of software component constructor  can be done by either utilizing an API (Application Programming Interface) or directly incorporating software component constructor  in a computer program with which the integration of software component constructor  is desired.","According to an aspect of an embodiment of the invention, a software component constructor  constructs a software component  at runtime according to the desire, specified by way of a parameter , of a user. In other words, a layer of a computer program, which receives one or more parameters from a user, may be integrated with a software component constructor , wherein the software component constructor  constructs one or more software components in response to the input parameters .","According to an aspect of an embodiment of the invention, a software component constructor  may construct a plurality of software components by utilizing a source object , a data token , and a parameter . In other words, a parameter  and a data token  enable a software component constructor to construct more than one software components from a source object .","According to an aspect of an embodiment of the invention, three sub-operations , and are connected to the operation . Each of the sub-operations , and illustrates creation of a module, which is a computer program, wherein the module may be required for constructing a software component . Each of the modules created in sub-operations , and can be either:\n\n","According to an aspect of an embodiment of the invention, at sub-operation , a \u201cparameter value resolution module \u201d is created. The parameter value resolution module is utilized for resolving a parameter value . A parameter value  may be resolved by utilizing many different methods, which may include, but are not limited to:\n\n","According to an aspect of an embodiment of the invention, the parameter value resolution module may also resolve the parameter value  from a computer readable recording medium and\/or by utilizing an algorithm and\/or a computer executable logic.","According to an aspect of an embodiment of the invention, at sub-operation , a \u201cdata token processing module \u201d is created. The data token processing module is utilized for processing a token value . The data token processing module processes the token value  on the basis of the set of data token rules .","According to an aspect of an embodiment of the invention, at sub-operation , a \u201csource object resolution module \u201d is created. The source object resolution module is utilized for identifying a source object  and then resolving a component value  from the source object .","The source object  can be identified in many ways, which may include, but are not limited to, a utilization of a parameter value , a utilization of an algorithm and\/or a computer implementable logic, a utilization of a token value , and\/or any combinations thereof.","According to an aspect of an embodiment of the invention, while resolving a component value  from a source object , the source object resolution module may also utilize a parameter value  which is resolved by a parameter value resolution module , and\/or may utilize a token value  which is processed by a data token processing module ","According to an aspect of an embodiment of the invention, while resolving a component value from a source object , a source object resolution module may also resolve another component value from another source object , wherein the source object is referenced in the source object .","According to an aspect of an embodiment of the invention, while resolving the component value  from a source object , the source object resolution module may also resolve a plurality of component values from a plurality of source objects , wherein the plurality of source objects are referenced in the source object .","According to an aspect of an embodiment of the invention, while resolving the component value  from a source object , the source object resolution module may also change, drop, and\/or add a component value  on the basis of utilizing a token value .","According to an aspect of an embodiment of the invention, at operation , a source object  is created, wherein the source object  is sufficient for constructing a software component , and wherein the source object  is to be utilized for constructing the software component . The creation of the source object  may also include creation and association of a token value , to a component value  and\/or another token value , of a data token  on the basis of a set of data token rules . According to an aspect of an embodiment of the invention, the source object  is stored in a source object repository .","According to an aspect of an embodiment of the invention, at operation , a token value , representing a data token , may be created and associated with a component value  representing a source component  comprised by a source object .","According to an aspect of an embodiment of the invention, a source object  is created, wherein a source object  comprises a component value  which represents an indeterminable source component , and wherein the component value  is utilized for constructing a software component .","According to an aspect of an embodiment of the invention, a source object  is created in a manner that a token value  can be associated with a component value  in a manner that the token value  can be utilized and or processed.","According to an aspect of an embodiment of the invention, utilization of a token value  determines a manner in which a component value  is utilized for constructing a software component .","According to an aspect of an embodiment of the invention, utilization of a token value  determines that a component value  is not to be utilized for constructing a software component .","According to an aspect of an embodiment of the invention, utilization of a token value  determines that a component value  is to be processed, and then the processed component value is to be utilized for constructing a software component .","According to an aspect of an embodiment of the invention, utilization of a token value  determines that a component value  is to be modified, and then the modified component value  is to be utilized for constructing a software component .","According to an aspect of an embodiment of the invention, utilization of a token value  determines that a component value  is to be changed, and then the changed component value  is to be utilized for constructing a software component .","According to an aspect of an embodiment of the invention, utilization of a token value  determines that a component value  is to be utilized for creating another component value , and then another created component value  is to be utilized for constructing a software component .","According to an aspect of an embodiment of the invention, a token value  is embedded in a component value .","According to an aspect of an embodiment of the invention, a token value  is embedded in a source object .","According to an aspect of an embodiment of the invention, a source object  comprises a component value  which is not comprised in a software component .","According to an aspect of an embodiment of the invention, a source object  comprises a component value , which is not comprised in a software component , is determined by utilizing:\n\n","According to an aspect of an embodiment of the invention, utilization of a token result  determines a manner in which a component value  is utilized for constructing a software component .","According to an aspect of an embodiment of the invention, utilization of a token result  determines that a component value  is not to be utilized for constructing a software component .","According to an aspect of an embodiment of the invention, utilization of a token result  determines that a component value  is to be processed, and then the processed component value is to be utilized for constructing a software component .","According to an aspect of an embodiment of the invention, utilization of a token result  determines that a component value  is to be modified, and then the modified component value  is to be utilized for constructing a software component .","According to an aspect of an embodiment of the invention, utilization of a token result  determines that a component value  is to be changed, and then the changed component value  is to be utilized for constructing a software component .","According to an aspect of an embodiment of the invention, utilization of a token result  determines that a component value  is to be utilized for creating another component value , and then another created component value  is to be utilized for constructing a software component .","According to an aspect of an embodiment of the invention, at operation , a software component  is constructed by utilizing a software component constructor . An exemplary construction of the software component  is explained in greater detail in .","According to an aspect of an embodiment of the invention, following steps are performed by a software component constructor  for constructing a software component :\n\n","According to an aspect of an embodiment of the invention, a token value  is not processed for constructing a software component . In other words, a token value  may be utilized without being processed for constructing a software component .","According to an aspect of an embodiment of the invention, a parameter value  is not utilized for constructing a software component .","According to an aspect of an embodiment of the invention, a parameter value  is utilized for processing a token value .","According to an aspect of an embodiment of the invention, a component value  of a determinable source component  is not utilized for constructing a software component .","According to an aspect of an embodiment of the invention, a component value  of an indeterminable source component  is not utilized for constructing a software component .","At operation , it is decided whether another source object  is required or not. If another source object  is required, then the flow continues to operation . Otherwise, the flow moves to operation .","Creation of another source object  will be required whenever existing source objects are not sufficient for constructing a desired software component .","At operation , it is decided whether another software component  is to be constructed or not. If another software component  is to be constructed, then the flow continues to operation . Otherwise, the flow moves to terminal .","At terminal , this flowchart ends.","A terminal  is utilized as another starting point to illustrate that the source object , the software component constructor , and the source object repository  may be utilized as many times as desired.",{"@attributes":{"id":"p-0219","num":"0432"},"figref":["FIG. 2","FIG. 1B","FIG. 2"],"b":["170","122","170","170","126"]},"At terminal , software component constructor  starts.","According to an aspect of an embodiment of the invention, at operation , the parameter value resolution module resolves one or more parameter values wherein the parameter values are required for constructing one or more desired software components .","According to an aspect of an embodiment of the invention, at operation , source objects are identified by the source object resolution module , wherein the source objects are required to be utilized for constructing the desired software components .","According to an aspect of an embodiment of the invention, at operation , component values are resolved by the source object resolution module from the source objects . According to an aspect of an embodiment of the invention, the source object resolution module may also utilize, for resolving the component values , one or more of the following:\n\n","At operation , the software component constructor  constructs the desired software components on the basis of sets of predetermined rules , and by utilizing one or more of the following:\n\n","At terminal , the construction of the desired software components ends.",{"@attributes":{"id":"p-0226","num":"0446"},"figref":"FIG. 3","b":["300","300","302","330","332","334","336","338","340","342","344","302","354","354","302","350","352","302","350","356","302","354","350","302","326"]},"Computing system environment  in  illustrates only one example of an exemplary environment in which an embodiment of the invention can be implemented, but does not suggest any limitation as to the scope of use and\/or functionality of the invention. Moreover, the invention is neither dependent, nor restricted, in any way, on computing system environment  inclusive of all the exemplary components incorporated therein. Additionally, computing system environment  should not be interpreted as having any dependency on any one and\/or any combinations of the components illustrated in computing system environment . Furthermore, computing system environment  is not limited to the illustrated components; the number of components may be more or less in other configurations and\/or environments.","In addition to computing system environment , the embodiments of the invention can be implemented under any other general and\/or special purpose computing system environment and\/or configuration. By way of an example, and not a limitation, some of the well-known computing environments and\/or configurations that can utilize the invention may include, but are not limited to, a personal computer, a server computer, a hand-held computer, a laptop computer, a tablet device, a portable communication device, a cellular phone, a multiprocessor based system, a workstation, a programmable consumer electronic, a set top box, a game console, a network personal computer, a minicomputer, a mainframe computer, a super computer, a distributed computing environment that may include any of the above mentioned systems, a process control computer, a flight computer, a GPS device, a media player, and a computer that control automobiles.","The components illustrated in computer  include an exemplary processor , an exemplary bus , an exemplary computer memory , an exemplary ROM  (Read Only Memory), an exemplary BIOS  (Basic Input Output System), an exemplary RAM  (Random Access Memory), an exemplary auxiliary storage interface , an exemplary auxiliary storage , an exemplary video controller , an exemplary input\/output interface unit(s) , an exemplary expansion interface , and communication interface .","Processor , which may be utilized in a plurality, is connected to bus . Processor  may include, but is not limited to, a microprocessor, a RISC (Reduced Instruction Set Computer) processor, and a CISC (Complex Instruction Set Computer) processor.","Bus , which connects one or more components to processor  for facilitating data exchange between processor  and the connected one or more components, may comprise one or more of the following:\n\n","The system bus is also known as a local bus, a processor bus or an FSB (Front-Side Bus). The system bus may further comprise an address bus, a memory bus, a data bus, a Northbridge, an MCH (Memory Controller Hub), and the like. The peripheral bus is also known as an I\/O bus.","Bus  may include, but is not limited to, an ISA (Industry Standard Architecture) bus, an EISA (Extended Industry Standard Architecture) bus, an MCA (Micro Channel Architecture) bus, a VESA (Video Electronics Standard Association) bus, a VLB (VESA Local Bus), a PCI (Peripheral Component Interconnect) bus, a Multibus, a Unibus, a FireWire bus, an SCSI (Small Computer System Interface) bus, a RS-232 bus, an ATA (Advanced Technology Attachment) bus, a SATA (Serial Advanced Technology Attachment) bus, a PATA (Parallel Advanced Technology Attachment) bus, a USB (Universal Serial Bus), a serial bus, a CardBus, a PCMCIA (Personal Computer Memory Card International Association) bus, an AGP (Accelerated Graphics Port) bus, an ExpressCard bus, a wishbone bus, a CAN (Controller Area Network) bus, a FlexRay bus, and an STD bus. Moreover, the invention will also work with any type and combination of bus topologies which may include, but are not limited to, a parallel, a serial, a daisy-chain, and a multi-drop.","Bus  may also provide for adding one or more input\/output components to expansion interface  by utilizing expansion card . Expansion interface  and expansion card  may support one or more bus types that are supported by bus .","Expansion interface  may include, but is not limited to, an ISA (Industry Standard Architecture) interface, a PCI (Peripheral Component Interconnect) interface, a FireWire interface, a SCSI (Small Computer System Interface) interface, an RS-232 interface, an ATA (Advanced Technology Attachment) interface, a SATA (Serial Advanced Technology Attachment) interface, a PATA (Parallel Advanced Technology Attachment) interface, a USB (Universal Serial Bus) interface, a PCMCIA (Personal Computer Memory Card International Association) interface, an AGP (Accelerated Graphics Port) interface, and an ExpressCard interface.","Expansion card  may include, but is not limited to, a modem, a network card, a Bluetooth card, a USB interface card, a video card, a sound card, a PLC (Programmable Logic Controller) card, and a card that provides an interface to a special hardware.","Computer  typically requires a memory which is represented in  as computer memory . Computer memory  comprises ROM  and RAM . However, computer memory  is not limited to ROM  and\/or RAM , and may include any other type and\/or form of memory that may be accessed directly by processor . Computer memory  is connected to bus  for storing information and instructions to be executed by processor . Moreover, contents of computer memory  may also include contents that are being currently operated upon by processor . For this purpose, bus  connects computer memory  to processor .","For a start-up, computer  typically requires a set of start-up instructions, wherein the set of start-up instructions is stored in a non-volatile memory, which is represented by ROM  in the .","ROM  may include, but is not limited to, a ROM (Read Only Memory), also known as solid state ROM, a PROM (Programmable Read Only memory), an EPROM (Erasable Programmable Read Only Memory), and an EEPROM (Electronically Erasable Programmable Read Only Memory), also known as a flash memory.","ROM  typically stores BIOS , wherein BIOS  comprises computer start-up routines and other basic routines that facilitate transfer of information between various components of computer . ROM  may also store an operating system, a device driver, an application program, a data structure, other program modules, a static application data and the like.","Computer  also typically requires a volatile memory, which is represented by RAM  in the . RAM  is generally utilized for storing a computer program, and information\/instructions to be executed by processor . RAM  may also be utilized for storing temporary variables or other intermediate data during the execution of the instructions by processor .","RAM  is available in many forms, which may include, but are not limited to, an SRAM (StaticRAM), a DRAM (Dynamic RAM), an SDRAM (Synchronous DRAM), a DDR SDRAM (Double Data Rate SDRAM), an ESDRAM (Enhanced SDRAM), an SLDRAM (Synchronous Link DRAM), and a DRDRAM (Direct Rambus DRAM).","In computer , processor  can access the contents of ROM  and RAM  directly by utilizing bus . Moreover, the contents of ROM  and RAM  may include contents that are being currently operated upon by processor .","Auxiliary storage interface  facilitates connectivity between auxiliary storage  and computer  via bus . Auxiliary storage  may also be connected to computer  through communication link  as network auxiliary storage  and\/or through remote computer(s)  as remote auxiliary storage . Auxiliary storage  provides storage for software and data which may include, but are not limited to, a computer readable instruction, a data structure, an operating system, a device driver, an application computer program, other program modules, a database, and an application data.","Auxiliary storage interface  may include, but is not limited to, one or more of a hard disk interface, a floppy disk interface, a SCSI (Small Computer Serial Interface) interface, an optical disc interface, a Blu-ray disc interface, a magneto-optical interface, a magnetic tape interface, a DAT (Digital Audio Tape) interface, a DASD (Direct Access Storage Device) interface, an ATA (Advanced Technology Attachment) interface, a SATA (Serial Advanced Technology Attachment) interface, a PATA (Parallel Advanced Technology Attachment) interface, and a USB (Universal Serial Bus) interface.","Auxiliary storage  may be one or more of a non-volatile non-removable media, a non-volatile removable media, an associated drive for a non-removable media and any combinations thereof.","Auxiliary storage  may include, but is not limited to, one or more or any combinations of a hard disk, a fixed disk, a Winchester disk drive, a floppy disk drive and a media, a CD-ROM (Compact Disc Read Only Memory) drive and a media, a CD-R (Compact Disc Recordable) drive and a media, a CD-RW (Compact Disc Re-Writeable) drive and a media, a DVD (Digital Versatile Disc) drive and a media, a Blu-ray drive and a media, an optical disc storage device and a media, a magneto-optical storage device and a media, a magnetic cassette drive and a media, a magnetic tape drive and a media, a paper tape reader and a paper tape, a paper card reader and a paper card, a DAT (Digital Audio Tape) drive and a media, a DASD (Direct Access Storage Device) device and a media, a removable hard disk, and a RAID (Redundant Array of Independent Disks) based hard disk.","Display unit  is typically connected to computer  through an interface which is video controller  in computing system environment . Display unit  and video controller  may be used in a plurality.","Display unit  and video controller  may be of any type such as a CGA (Color Graphic Adapter), an EGA (Enhanced Graphics Adapter), a VGA (Video Graphics Array), an SVGA (Super Video Graphics Array), an XGA (eXtended Graphics Array), an SXGA (Super XGA), a QVGA (Quarter VGA), a WXGA (Widescreen XGA), an SXGA+, a WXGA+, a WSXGA, a WQVGA, an MDA, a Hercules, an MCGA (Multicolor Graphics Adapter), a UXGA, a WUXGA, a 2K (DLP Cinema Technology), a WQUXGA (Wide Quad Ultra eXtended Graphics Array), and the like.","Display unit  and video controller  may be connected to each other by utilizing a video interface standard, which may include, but is not limited to, VGA connector standard, DVI (Digital Visual Interface) standard, and HDMI (High-Definition Multimedia Interface) standard.","A touch screen panel (not shown in the ) may also be attached to display unit , wherein display unit  is utilized to display an output, and the touch screen is utilized as an input device.","Computing system environment  may include other output devices that may be connected to bus  through input\/output interface unit(s) .","Input\/output interface unit(s)  may include, but is not limited to, one or more or any combinations of a PS\/2 interface, a USB (Universal Serial Bus) interface, a parallel interface, a serial RS-232 interface, and an RS-762 interface.","In computing system environment , the following six input\/output devices have been illustrated:\n\n","However, such input\/output devices may include, but are not limited to, a thermal printer, a dot matrix printer, an ink jet printer, a laser printer, a line printer, a plotter, a multifunction printer, a headphone, an earphone, a projector, a mouse, a track ball, a pointing stick, a touch pad, a digitizer, a scanner, a game pad, a joystick, a barcode reader, a game paddle, a webcam, a fingerprint scanner, a web cam, a USB hub, a port replicator, a camera, an access control device, a flash memory key, and a removable hard disk. Moreover, the input\/output devices may be used in a plurality.","Computer  may also typically operate in a networked environment wherein computer  is connected to other computers, such as remote computer(s) , by utilizing communication link , wherein communication link  is established by utilizing communication interface , wherein communication interface  is coupled with bus .","Remote computer(s)  may include, but is not limited to, a computer similar to computer , a personal computer, a laptop computer, a tablet computer, a notebook computer, a server, a router, a PDA (Personal Digital Assistant), a cellular phone, a network PC, a peer device, other common network nodes, a public network, a cellular network, a mainframe computer, and a minicomputer.","Computer  and remote computer(s)  may communicate with each other by utilizing one or more technologies which may include, but are not limited to, a web service, a CORBA (Common Object Request Broker Architecture), an RPC (Remote Procedure Call), a CBSE (Component Based Software Engineering), a REST (REpresentational State Transfer), and an email.","Communication interface , which is coupled to bus , provides a two-way data communication coupling via communication link , wherein communication link  is utilized for connecting computer  with other components such as network auxiliary storage , remote computer(s) , and remote auxiliary storage .","Communication interface  may include, but is not limited to, one or more or any combinations of a physical connection, a logical connection, a protocol, a modem, a cable modem, a DSL (Digital Subscriber Line) modem, an ADSL (Asymmetric Digital Subscriber Line) modem, a router, a frame relay connection, an AIN (Advanced Intelligent Network) connection, a synchronous optical connection, a DSL connection, a digital T1 line, a digital T2 line, a digital E1 line, a DDS (Digital Data Service) connection, an Ethernet connection, an ISDN (Integrated Services Digital Network) line, a dial-up port, such as, a V.90, a V.34, or a V.34 bis analog modem connection, an ATM (Asynchronous Transfer Mode) connection, an HSSI (High Speed Serial Interface), an FDDI (Fiber Distributed Data Interface), and a CDDI (Copper Distributed Data Interface).","Communication link  facilitates establishment of networks which may include, but are not limited to, a LAN (Local Area Network), a MAN (Metropolitan Area Network), a WAN (Wide Area Network), a PAN (Personal Area Network), a SAN (Storage Area Network), a CAN (Campus Area Network), and a VPN (Virtual Private Network).","Communication link  may include, or may access any one or more of, a WAP (Wireless Application Protocol) link, a GPRS (General Packet Radio Service) link, a GSM (Global System for Mobile Communication) link, a CDMA (Code Division Multiple Access) or a TDMA (Time Division Multiple Access) link, such as a cellular phone channel, a GPS (Global Positioning System) link, a CDPD (cellular digital packet data), a RIM (Research in Motion Limited) duplex paging type device, a Bluetooth radio link, an IEEE 802.11-based radio frequency link, a #G Link, an HSPA link, and the like.","Communication link  may further include, or may access any one or more of, an RS-232 serial connection, an IEEE-1394 (Fiber wire) connection, an IrDA (infrared) port, a SCSI (Small Computer Serial Interface) connection, a USB (Universal Serial Bus) connection, and any other interface or connection, wired or wireless, digital or analog. The interfaces may include, but are not limited to, Ethernet interfaces, frame relay interfaces, cable interfaces, DSL interfaces, and token ring interfaces. Moreover, various very high-speed interfaces may be utilized; for example, fast Ethernet interfaces, Gigabit Ethernet interfaces, ATM interfaces, POS (Point Of Sale) interfaces, FDDI (Fiber Distributed Data Interface), and the like. An interface may include an appropriate port for a communication with an appropriate media.","Communication link  may be deployed by utilizing one or more topologies, which may include, but are not limited to, a bus topology, a star topology, a ring topology, a mesh topology, a star-bus topology, and a tree or a hierarchical topology.","Communication link  may utilize one or more protocols for communication which may include, but are not limited to, a IP (Internet Protocol), an IPv4, an IPv6, an ICMP (Internet Control Message Protocol), an IGMP (Internet Group Management Protocol), an IPsec (Internet Protocol Security), a TCP (Transmission Control Protocol), a UDP (User Datagram Protocol), an HTTP (Hypertext Transfer Protocol), an FTP (File Transfer Protocol), a Telnet, an IRC (Internet Relay Chat), a DSL (Digital Subscriber Line), and an ISDN (Integrated Service Digital Network).","Remote computer(s)  and communication link  may be used in a plurality and\/or in any combinations thereof, simultaneously or separately. More particularly, programming or configuring or causing an apparatus or device, for example, a computer, to execute the described functions of embodiments of the invention creates a new machine where in case of a computer, a general purpose computer, in effect becomes a special purpose computer once it is programmed or configured or caused to perform particular functions of the embodiments of the invention pursuant to instructions from program software. As discussed, a program\/software implementing the embodiments may be recorded on a computer-readable media, e.g., a non-transitory or persistent computer-readable medium.",{"@attributes":{"id":"p-0267","num":"0496"},"figref":"FIGS. 4A to 10Z","b":"142","sub":"n","ul":{"@attributes":{"id":"ul0098","list-style":"none"},"li":{"@attributes":{"id":"ul0098-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0099","list-style":"none"},"li":["1. Creating a source object repository  (an example of operation  illustrated in ), illustrated in . Creation of a source object repository  is further explained in detail as follows:\n        \n        ","2. Creating a software component constructor  (an example of operation  illustrated in ), illustrated in .","3. Constructing one or more software components (an example of operation  illustrated in ), illustrated in .\n        \n        "]}}}},{"@attributes":{"id":"p-0268","num":"0508"},"figref":"FIGS. 4A to 10Z"},"The term \u201cdesired query\u201d, wherever used in the detailed description of , is intended to refer to one or more queries, an example of software component , which is to be constructed by utilizing the embodiments illustrated in .","The term \u201cqueryBuilder\u201d, wherever used in the description of , is intended to refer to an example of the software component constructor . queryBuilder is an exemplary embodiment developed in accordance with certain principles of the invention and is illustrated in . However, the invention is not, in any way, dependent on or restricted by queryBuilder.","The syntax diagrams, of the exemplary sets of predetermined rules, illustrated in , are adapted for exemplary implementations of a few exemplary embodiments according to some aspects of the invention. However, all such adaptations are made in such a manner that no respective sets of predetermined rules are violated to an extent that a legitimate query cannot be constructed on the basis of the adapted sets of predetermined rules.","The embodiments illustrated in  do not include any error checking and\/or exception handling; it is assumed that all the embodiments are utilized correctly.","The embodiments illustrated in  are collectively sufficient, and are collectively utilized for constructing one or more desired queries at runtime, wherein each of the one or more desired queries can be constructed either for:\n\n",{"@attributes":{"id":"p-0274","num":"0517"},"figref":"FIG. 4A","b":["400","400","401","140","402","140"]},"The set of predetermined rules for ACCESS SELECT query  comprises only those predetermined rules which are required and sufficient for generating the desired queries for MICROSOFT ACCESS. MICROSOFT ACCESS may comprise additional predetermined rules, which are not selected in this example.","The set of predetermined rules for ORACLE SELECT query  comprises only those predetermined rules which are required and sufficient for generating the desired queries for ORACLE. ORACLE may comprise additional predetermined rules, which are not selected in this embodiment.",{"@attributes":{"id":"p-0277","num":"0520"},"figref":"FIGS. 4B to 4K","b":"401"},"A circle, such as , , , and the like, represents an entry point and an end point in a syntax diagram.","A terminal, a rectangle with round corners, is something that is written literally, such as \u201cSELECT\u201d (without quotes), whereas a non-terminal, a rectangle with right-angled corners, is expanded into other terminals and non-terminals. Terminals include , , , , , , , and the like. Each terminal is an example of the source component .","Non-terminals include , , , , , and the like.","Decision boxes illustrated from  are implemented in the flowchart illustrated in .","In  entry-point illustrates a starting point of ACCESS SELECT query , and end-point illustrates an ending point of ACCESS SELECT query .  also illustrates two non-terminal boxes  and , which are illustrated in greater detail in  and  respectively.",{"@attributes":{"id":"p-0283","num":"0526"},"figref":["FIG. 4C","FIG. 4C","FIG. 4C","FIGS. 4E"],"b":["410","410","410","410","412","413","414","412","413","414","4","4"],"i":["a ","b "]},{"@attributes":{"id":"p-0284","num":"0527"},"figref":["FIG. 4D","FIG. 4D"],"b":["411","411","411","411"],"i":["a ","b "]},{"@attributes":{"id":"p-0285","num":"0528"},"figref":["FIG. 4E","FIG. 4E","FIG. 4E","FIG. 4H"],"b":["412","412","412","412","415","415"],"i":["a ","b "]},{"@attributes":{"id":"p-0286","num":"0529"},"figref":["FIG. 4F","FIG. 4F","FIG. 4F","FIGS. 4I"],"b":["413","413","413","413","416","417","418","416","417","418","4","4"],"i":["a ","b "]},{"@attributes":{"id":"p-0287","num":"0530"},"figref":["FIG. 4G","FIG. 4G"],"b":["414","414","414","414"],"i":["a ","b "]},{"@attributes":{"id":"p-0288","num":"0531"},"figref":["FIG. 4H","FIG. 4H"],"b":["415","415","415","415"],"i":["a ","b "]},{"@attributes":{"id":"p-0289","num":"0532"},"figref":["FIG. 4I","FIG. 4I","FIG. 4I","FIG. 4C"],"b":["416","416","416","416","410","410"],"i":["a ","b "]},{"@attributes":{"id":"p-0290","num":"0533"},"figref":["FIG. 4J","FIG. 4J"],"b":["417","417","417","417"],"i":["a ","b "]},{"@attributes":{"id":"p-0291","num":"0534"},"figref":["FIG. 4K","FIG. 4K"],"b":["418","418","418","418"],"i":["a ","b "]},{"@attributes":{"id":"p-0292","num":"0535"},"figref":"FIGS. 4L to 4R","b":"402"},"In , entry-point illustrates starting point of the set of predetermined rules for ORACLE SELECT query  and end-point illustrates ending point of the set of predetermined rules for ORACLE SELECT query .  also illustrates two non-terminal boxes  and  which are illustrated in greater detail in  and  respectively.",{"@attributes":{"id":"p-0294","num":"0537"},"figref":["FIG. 4M","FIG. 4M","FIG. 4M","FIGS. 4N"],"b":["430","430","430","430","431","432","433","414","431","432","433","414","4","4","4"],"i":["a ","b "]},{"@attributes":{"id":"p-0295","num":"0538"},"figref":["FIG. 4N","FIG. 4N","FIG. 4N","FIG. 4Q"],"b":["431","431","431","431","434","434"],"i":["a ","b "]},{"@attributes":{"id":"p-0296","num":"0539"},"figref":["FIG. 4O","FIG. 4O","FIG. 4O","FIG. 4R"],"b":["432","432","432","432","435","435"],"i":["a ","b "]},{"@attributes":{"id":"p-0297","num":"0540"},"figref":["FIG. 4P","FIG. 4P"],"b":["433","433","433","433"],"i":["a ","b "]},{"@attributes":{"id":"p-0298","num":"0541"},"figref":["FIG. 4Q","FIG. 4Q"],"b":["434","434","434","434"],"i":["a ","b "]},{"@attributes":{"id":"p-0299","num":"0542"},"figref":["FIG. 4R","FIG. 4R","FIG. 4R","FIG. 4M"],"b":["435","435","435","435","430","430"],"i":["a ","b "]},{"@attributes":{"id":"p-0300","num":"0543"},"figref":"FIG. 4S","b":["148","148","146"],"sub":["1-24","1-24 "],"ul":{"@attributes":{"id":"ul0104","list-style":"none"},"li":{"@attributes":{"id":"ul0104-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0105","list-style":"none"},"li":["1. either cannot be generated by utilizing an algorithm and\/or a computer implementable logic, or","2. is desired not to be generated by utilizing an algorithm and\/or a computer implementable logic in at least one desired query."]}}}},{"@attributes":{"id":"p-0301","num":"0546"},"figref":"FIG. 4T","b":["150","150","146"],"sub":["1-15","1-15 "],"ul":{"@attributes":{"id":"ul0106","list-style":"none"},"li":{"@attributes":{"id":"ul0106-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0107","list-style":"none"},"li":["1. SELECT ","2. Whitespace ","3. FROM ","4. BY ","5. opening parenthesis ","6. closing parenthesis ","7. comma ","8. AND ","9. period ","10. AS ","11. srcAlaGrp ","12. equal sign ","13. srcAlaTbl ","14. ON , and","15. srcAla1 "]}}}},{"@attributes":{"id":"p-0302","num":"0562"},"figref":["FIG. 5A","FIG. 4S","FIG. 4T"],"b":"146"},"Data token qryGrp , which is an example of a data token , is represented by a token value  of a Boolean type, and can be represented by one of three possible token values: True, False and NULL. A set of data token rules  for qryGrp  is specified as follows:\n\n","qryGrp  can be associated with a component value  in a manner that queryBuilder can construct a desired query, either an aggregate query or a non-aggregate query, on the basis of a token value , which represents qryGrp . qryGrp  enables determination of a component value  for \u201cGROUP \u201d, which is an indeterminable source component .","Data token qryUni , which is an example of a data token , is represented by a token value  of a Boolean type, and can be represented by one of three possible token values: True, False and NULL. A set of data token rules  for qryUni  is specified as follows:\n\n","gryUni  can be associated with a component value  in a manner that queryBuilder can construct a desired query, either a UNION ALL query or a non-union query, on the basis of a token value , which represents gryUni . gryUni  enables determination of a component value  for \u201cUNION ALL \u201d which is an indeterminable source component .","Token value  of gryUni  could have been of another data type for catering to other operators, not illustrated in this example, such as, a UNION, a MINUS, and other similar operators, but in this exemplary implementation, gryUni  is utilized for catering only to the UNION ALL operator.","Data token srcUseCnd , which is an example of a data token , is represented by a token value  of a string type, which is either:\n\n","A token value , representing srcUseCnd , can be associated with a component value , which represents \u201ctable-name \u201d, which is an example of indeterminable source component , and be processed in conjunction with a parameter value  of a parameter prmUseCnd , which is an example of a parameter . The result of the processed token value , which is an example of a token result , representing srcUseCnd , is utilized to determine whether the component value , representing table-name , is desired to be utilized for constructing a desired query or not. The token value , representing srcUseCnd , can be processed at the time of:\n\n","srcUseCnd  is processed on the basis of the following set of data token rules :\n\n","For the implementation of srcUseCnd , it is mandatory that either:\n\n","Data token colUseCnd , which is an example of a data token , is represented by a token value  of a string type, which is either:\n\n","A token value , representing colUseCnd , can be associated with a desired component value , which represents fldAla , which is an example of an indeterminable source component , and is processed in conjunction with the parameter value  of a parameter prmUseCnd , which is an example of parameter . The result of the processed token value , which is an example of a token result , representing colUseCnd , is utilized to determine whether the component value , representing fldAla , is desired to be utilized for constructing the desired query. The token value , representing colUseCnd , can be processed at the time of:\n\n","colUseCnd  is processed on the basis of the following set of data token rules :\n\n","For the implementation of colUseCnd , it is mandatory that either:\n\n","Data token colReuse , which is an example of a data token , is represented by a token value  of a Boolean type and can comprise one of three possible token values: True, False and NULL. colReuse  is utilized in conjunction with a token value , which represents another data token tknMonth . colReuse  is to be associated with a component value  that represents fldAla . colReuse  enables queryBuilder to identify a component value  that represents fldAla , and it is desired to generate component values on the basis of token result  of tknMonth  and which is also associated with the component value which represents fldAla , wherein the token result  of tknMonth  is obtained by processing the token value , which represents tknMonth .","For implementing colReuse , it is mandatory that the component values, which are utilized with a component value , which represents fldAla , or which are directly dependent on the a component value  which represents fldAla , are to be structured in a manner that all component values, which are either utilized with the component value , which represents fldAla , or which are directly dependent on component value , which represents fldAla , can be generated together with the component value , which represents fldAla ","Data token tknAlias , which is an example of a data token , is represented by a token value \u201c!\u201d, an exclamation sign without quotes, as specified by a set of data token rules  for tknAlias . The set of data token rules  for tknAlias  also specifies that tknAlias  is implicitly associated with the source component table-name in such a manner that for each such new component value , which represents table-name , tknAlias  is utilized for generating a new and a unique table\/view alias comprising one or more alphabets. Since the association of tknAlias  is implicit, \u201c!\u201d (exclamation sign without quotes) is never utilized with any component value  that represents table-name ","tknAlias  enables determination of a component value  for srcAla , which is an indeterminable source component .","tknAlias  can also be associated with a component value  that represents fldNamCol and\/or fldXpr , wherein the association with the component value  which represents fldNamCol and\/or fldXpr is achieved by embedding \u201c!\u201d (exclamation sign without quotes) in a component value  which represents fldNamCol and\/or fldXpr . On processing, \u201c!\u201d (exclamation sign without quotes) will be replaced by a table\/view alias, followed by a period, which was generated for a component value  which represents fldNamCol and\/or fldXpr and is a source table\/view of the component value  which represents fldNamCol and\/or fldXpr , in accordance with the predetermined rules illustrated in . For example, if for tblA, a component value  representing table-name , which is a table\/view alias, and which is generated as a result of processing a token value , which represents tknAlias , is \u201cb\u201d (lowercase b without quotes), then the following are a few examples which illustrate component values which are related to the component value tblA and represent fldNamCol and\/or fldXpr , and which are also associated with \u201c!\u201d (exclamation sign without quotes):\n\n","Data token tknMonth , which is an example of a data token , is utilized for creating one or more component values that represent fldNamCol , fldAla , and\/or fldXpr . tknMonth  is processed on the basis of a token value , which represents colReuse , and a parameter value  of a parameter prmMthCnt , which is an example of a parameter . According to a set of data token rules  for the tknMonth , tknMonth  can be utilized in one of the following two formats:\n\n","The processing of tknMonth  is done on the basis of a token value , which represents colReuse , and the parameter value  of prmMthCnt , which is an example of a parameter .","An exemplary set of data token rules  for colReuse  specifies that if a token value which represents colReuse  is a NULL value or False, or the parameter value  of prmMthCnt  is either zero or not defined, then tknMonth  is processed on the basis of the following part of the set of data token rules  for tknMonth :\n\n","The set of data token rules  for colReuse  also specifies that if the token value , which represents colReuse , is True, and the parameter value  of prmMthCnt  is a positive integer, then the token value , which represents tknMonth , is processed in a manner that the component value  representing fldAla along with all component values, which are either related to the component value  representing fldAla or which are dependent on the component value  representing fldAla , are utilized for constructing a desired query as many number of times as specified by the parameter value  of prmMthCnt . For processing tknMonth , the parameter value  of prmBegMth , which is an example of a parameter , is also utilized. The component value  which represents fldAla along with all component values , which are either related to the component value  representing fldAla , or which are dependent on the component value  representing fldAla , are processed in a manner that all these component values are utilizable for constructing the desired query as many number of times as specified by the parameter value  of prmMthCnt . tknMonth  is processed on the basis of the following parts of the set of data token rules  for tknMonth :\n\n","Data token tknCurlyBrackets , which is an example of a data token , can be embedded in the component value  of the indeterminable source component whrXpr . Data token tknCurlyBrackets  is represented by curly brackets, which are always utilized in a pair; an opening curly bracket, which is an example of a token value  of tknCurlyBrackets , \u201c{\u201d (without quotes) and a closing curly bracket, which is an example of a token value  of tknCurlyBrackets , \u201c}\u201d (without quotes). The opening curly bracket is always on the left side of the closing curly bracket. The curly brackets may be nested.",{"@attributes":{"id":"p-0326","num":"0671"},"figref":"FIGS. 5B and 5C","b":["158","526","526","526"]},"The processing logic for tknCurlyBrackets  starts at operation ","At operation , whrXpr , represented as \u201ca target string\u201d in the flowchart, is assigned to a variable EmbStr. In this example, tknCurlyBrackets  can only be utilized in a component value representing whrXpr . However, tknCurlyBrackets  can be utilized in any other component value of a string type, if required and\/or desired.","At operation , the position of the last occurrence of \u201c{\u201d (without quotes) from the left side of EmbStr is stored in a variable Pos1.","At operation , it is checked whether the last occurrence of \u201c{\u201d (without quotes) is found or not. If the last occurrence of \u201c{\u201d (without quotes) is not found, then the flow advances to operation . Otherwise, the flow continues to operation . The last occurrence of \u201c{\u201d (without quotes) will not be found in EmbStr only in one of the following two cases (assuming that the curly brackets are not utilized incorrectly):\n\n","At operation , EmbStr is returned and processing of tknCurlyBrackets  is complete.","At operation , the first occurrence of \u201c}\u201d (without quotes) from the left side, after Pos1, is located and assigned to a variable Pos2.","At operation , the string between Pos1 and Pos2 (characters at Pos1 and Pos2 are not included) is assigned to a variable DtaTkn.","At operation , DtaTkn, which carries a token value representing a data token, is processed in a desired manner, and the result of the processed token value carried by DtaTkn is assigned to a variable TknResult. In this particular example, a parameter would be a result of the processing of the token value carried by DtaTkn. If the parameter corresponding to the token value of DtaTkn is found, then TknResult will comprise the found parameter. Otherwise, TknResult will comprise a NULL value.","At operation , a variable Pos3 is assigned a value of (Pos2+1).","At operation , it is checked whether the character at Pos3 in EmbStr is \u201c}\u201d (without quotes) or not. If the character at Pos3 in EmbStr is \u201c}\u201d, then the flow continues to operation . Otherwise, the flow continues to operation ","At operation , a variable Pos4 is assigned the position of the last occurrence of \u201c{\u201d (without quotes) just before Pos1 from the left side in EmbStr.","At operation , it is checked whether TknResult carries a NULL value or not. If TknResult carries a NULL value, then the flow continues to operation . Otherwise, the flow continues to ","At operation , TknResult is assigned a value: \u201c1=1\u201d (without quotes).","At operation , the string starting from Pos1 and ending at Pos2 (both Pos1 and Pos2 included) in EmbStr is replaced with the value carried by TknResult.","At operation , it is checked whether TknResult carries a NULL value or not. If TknResult carries a NULL value, then the flow continues to operation . Otherwise, the flow continues to ","At operation , TknResult is assigned a value: \u201c1=1\u201d (without quotes).","At operation , the string starting from Pos4 and ending at Pos3 (both Pos4 and Pos3 are included) in EmbStr is replaced with the value carried by TknResult.","At operation , the character at Pos3 is replaced with a space character.","At operation , the character at Pos4 is replaced with a space character.","At operation , the string starting from Pos1 and ending at Pos2 (both Pos1 and Pos2 included) in EmbStr is replaced with the value carried by TknResult.","Data token tknItemCodeBegin  is processed in conjunction with the parameter value  of a parameter prmItmBeg . An exemplary set of data token rules for tknItemCodeBegin  specifies that tknItemCodeBegin  is represented by \u201citmBeg\u201d (without quotes) and can only be embedded in a component value representing whrXpr . When processed, \u201citmBeg\u201d (without quotes) is replaced by the parameter value  of prmItmBeg .","A data token tknItemCodeEnd  is processed in conjunction with the parameter value  of a parameter prmItmEnd . An exemplary set of data token rules for tknItemCodeEnd  specifies that tknItemCodeEnd  is represented by \u201citmEnd\u201d (without quotes) and can only be embedded in a component value representing whrXpr . When processed, \u201citmEnd\u201d (without quotes) is replaced by the parameter value  of prmItmEnd .",{"@attributes":{"id":"p-0349","num":"0696"},"figref":["FIG. 6","FIG. 6"],"ul":{"@attributes":{"id":"ul0153","list-style":"none"},"li":{"@attributes":{"id":"ul0153-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0154","list-style":"none"},"li":["1. Parameter prmQryId , which is an example of a parameter , is of a string type. The parameter value  of prmQryId  is utilized to identify a source object, which is desired to be utilized for constructing a desired query.","2. Parameter prmMthCnt , which is an example of a parameter , is of a number type. The parameter value  of prmMthCnt  specifies the number of months which is utilized for processing a token value which represents tknMonth . The parameter value  of prmMthCnt  can be an integer ranging from 0 and 12, both inclusive.","3. Parameter prmBegMth , which is an example of a parameter , is of a number type. The parameter value  of prmBegMth  is utilized for specifying the starting month which is utilized for processing a token value which represents tknMonth . The parameters of prmBegMth  can be an integer ranging from 1 and 12, both inclusive.","4. Parameter prmOraQry , which is an example of a parameter , is of a Boolean type. The parameter value  of prmOraQry  is utilized for determining the database for which a desired query is to be constructed. If the parameter value  of prmOraQry  is True, then the desired query is constructed for ORACLE. Otherwise, the desired query is constructed for MICROSOFT ACCESS.","5. Parameter prmLftJoi , which is an example of a parameter , is of a Boolean type. The parameter value  of prmLftJoi  is utilized for determining the type of a JOIN which is to be used in a desired query. If the parameter value  of prmLftJoi  is True, then all joins in a desired query will be converted to LEFT joins. Otherwise, all joins in a desired query will be INNER joins. The parameter value  of the prmLftJoi  is utilized for determining a component value  of the following indeterminable source components:\n        \n        ","6. Parameter prmUseCnd , which is an example of a parameter , is of a string type. The parameter value  of prmUseCnd  is utilized for processing a token value, which represents srcUseCnd  and\/or colUseCnd .","7. Parameter prmItmBeg , which is an example of a parameter , is of a string type. The parameter value  of prmItmBeg  is utilized for processing \u201citmBeg\u201d (without quotes), which is the token value which represents tknItemCodeBegin .","8. Parameter prmItmEnd , which is an example of a parameter , is of a string type. The parameter value  of prmItmEnd  is utilized for processing \u201citmEnd\u201d (without quotes), which is the token value which represents tknItemCodeEnd ."]}}}},{"@attributes":{"id":"p-0350","num":"0708"},"figref":["FIG. 7A","FIG. 7B","FIG. 4S"],"b":["164","160","152"]},"Attributes, illustrated in , are given arbitrary names for the purpose of explanation, and reference. The names given to the attributes have no impact on the implementation of the principles of the invention. The following attributes are illustrated in :\n\n",{"@attributes":{"id":"p-0352","num":"0727"},"figref":"FIG. 7B","b":["164","168","168","168","164","164","168"],"ul":{"@attributes":{"id":"ul0162","list-style":"none"},"li":{"@attributes":{"id":"ul0162-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0163","list-style":"none"},"li":["1. storing one or more desired source objects as structured and\/or semi-structured data,","2. identifying and retrieving a desired source object out of the one or more desired source objects,","3. maintaining, in a desired manner, a desired hierarchy and\/or a desired relationship among all the indeterminable source components illustrated in ,","4. maintaining a desired order among one or more component values belonging to srcId .","5. maintaining a desired order among one or more component values belonging to colAla .","6. associating all token values of the data tokens illustrated in , either implicitly and\/or explicitly, with one or more component values of one or more of the source components represented by the attributes illustrated in , and","7. utilizing a source object and\/or a desired part thereof in another source object."]}}}},"The exemplary data model  comprises the following three entities:\n\n","Query  is the top level entity which is utilized to comprise information which is sufficient for identifying a source object and also information which is applicable to the entire query. Query  comprises the following attributes:\n\n","qryId  is an exemplary attribute which is utilized in query  for the identification of a specific source object. qryId  acts as a primary key, and is utilized for uniquely identifying each source object. In query , qryId  is implemented as a string, and may comprise any valid data value of a string type. Since qryId  is utilized only for identifying and referencing a source object, there are no specific rules for a data value which may be stored in qryId . However, in this example, the data value stored in qryId  must be unique for each source object, and may comprise only printable characters. qryId  is of a string type in this exemplary implementation; however, it may be of any other data type which is sufficient for implementing a primary key, such as, a long integer, a short integer, a GUID, and the like.","qryWhr  is utilized for storing a WHERE clause expression in this exemplary data model. qryWhr  is of a string type and should be of a sufficient size to store all the desired WHERE clause expressions, along with one or more token values representing tknCurlyBrackets , tknItemCodeBegin , and\/or tknItemCodeEnd . A component value stored in qryWhr  is a string, which:\n\n","qryGrp  is embedded in query , so as to enable queryBuilder to determine whether a desired query is an aggregate query or not.","qryUni  is embedded in query , so as to enable queryBuilder to determine whether a desired query is a UNION ALL query or not.","Query source  is a child entity of query , wherein query  has a one-to-many relationship  with query source . Query  also has another one-to-many relationship  with query source . The one-to-many relationship  is optional. Query  comprises following attributes:\n\n","srcQryId  is an exemplary attribute which is utilized in query source  for enabling a one-to-many relationship . srcQryId  is a foreign key which is related to qryId  of query . In query source , srcQryId  is implemented as a string data type, and is of the same size as of qryId . srcQryId  and srcId  serve as a composite primary key in query source .","srcOrd  is an exemplary attribute which is utilized in query source  for maintaining a desired order among a plurality of component values that are stored in srcId . In query source , srcOrd  is implemented as a long integer data type; however, srcOrd  can be implemented as any other data type which is sufficient for maintaining an order among a plurality of component values that are stored in srcId . Such data types may include, but are not limited to, a short integer, a string, and a floating point.","srcId  is utilized for specifying the name of a table\/view which is desired to be utilized for constructing a desired query. The component values stored in srcId  must be unique within one source object because srcId  is a part of the composite primary key of query source . srcId  may be represented by either:\n\n","srcReuseId  is an exemplary attribute which is utilized in query source  to enable a utilization of another source object in query source . srcReuseId  is a foreign key and may optionally comprise a value from qryId . For this example, srcReuseId  cannot comprise a data value which represents its parent qryId , because such a data value will cause an infinite recursive loop in this exemplary data model. The one-to-many relationship  is implemented by utilizing qryId  and srcReuseId .","srcUseCnd  is embedded in query source . If the processing of the token value comprised by srcUseCnd  determines that srcId  cannot be utilized for constructing a desired query, then the complete record, comprising the token value of srcUseCnd  and the data value of srcId , including all child records, will not be utilized for constructing a desired query.","srcJoinFld , srcJoinToFld , and srcJoinToSrc  are utilized to specify information which is required to join two tables, two views or one table and one view. srcJoinFld  is utilized to specify a field alias which belongs to a table\/view specified by srcId  of the current record. srcJoinToFld  is utilized to specify a field alias which belongs to the other table\/view which is to be joined with table\/view specified by srcId  of the current record, and is specified by the component value representing srcJoinToSrc . In this exemplary embodiment, self joins are not implemented.","Query field  is a child entity of query source , wherein query source  has a one-to-many relationship  with query field . Query field  comprises the following attributes:\n\n","colQryId  and colSrcId  are two exemplary attributes which are utilized in query field  for enabling the one-to-many relationship . colQryId  and colSrcId  are foreign keys which are related to srcQryId  and srcId  respectively. colQryId  and colSrcId  are implemented by utilizing a string data type and are of the same size as srcQryId  and srcId  respectively. colQryId , colSrcId , and colAla  serve as a composite primary key in query field .","colOrd  is an exemplary attribute which is utilized in query field  for maintaining a desired order among a plurality of those component values that are stored in colAla . In query field , colOrd  is implemented as a long integer data type; however, colOrd  could have been implemented as any other data type which is sufficient for maintaining a desired order among a plurality of component values which are stored in colAla . Such data types may include, but are not limited to, a short integer, a string, and a floating point.","colAla  is utilized to specify a valid column\/field alias for a desired query. colAla  is implemented as a string data type in this exemplary data model. A component value, which is stored in colAla , may also be embedded with % TknMth % which is a token value representing tknMonth . The component values stored in colAla  must be unique within one source object with reference to their parent component value, which is stored in srcId , because colAla  is a part of the composite primary key of query source .","colXpr  is utilized to specify a valid expression for a desired query. colXpr  is implemented as a string data type in this exemplary data model. A component value, which Is stored in colAla , may also be embedded with:\n\n","colUseCnd  is embedded in query field . If the processing of the token value comprised by colUseCnd  determines that colAla  cannot be utilized for constructing the desired query, the entire record, comprising the token value of colUseCnd  and component values of colAla , will not be utilized for constructing a desired query.","colGrpFun  is utilized for specifying a SUM function for columns\/fields which are desired to be summed in a desired query which is constructed as an aggregate query. In this exemplary embodiment, if colGrpFun  is represented by \u201cSUM\u201d (without quotes), then the SUM function is applied to the component value stored in colXpr . Otherwise, if colGrpFun  is represented by \u201cGroup\u201d (without quotes), then colAla  is utilized in a GROUP BY clause, otherwise the component value stored in colXpr  is treated as an expression and is not included in the GROUP BY clause. In this exemplary embodiment, the utilization of only the SUM function is illustrated; however, colGrpFun  can be utilized for implementing any other function, such as, AVG, MAX, MIN, and the like.","colReuse  is embedded in query field , and is utilized to specify those records of query field  which are desired to be replicated.",{"@attributes":{"id":"p-0374","num":"0789"},"figref":["FIG. 7C","FIG. 7B"],"b":["164","168","702","782","704","784","706","786"]},{"@attributes":{"id":"p-0375","num":"0790"},"figref":["FIGS. 8A to 8P","FIG. 5A","FIG. 6"],"b":["170","166","782","784","786"]},"In the exemplary flowchart, the UNION ALL operator is implemented for sub queries only.","In the exemplary flowchart, arguments argComp, argTrue and argFalse are utilized symbolically. However, the values comprised by these arguments will be utilized in each operation, wherever any of these arguments are utilized.","In the exemplary flowchart, it is implied that whenever tknMonth  is replaced in an operation, the complete representation of tknMonth , starting from the first % (percent sign) to the last % (percent sign), is replaced. For this exemplary flowchart, it is assumed that only one token value representing tknMonth  is embedded in one database field.","In the exemplary flowchart, a variable is considered empty if the variable:\n\n","In the exemplary flowchart, all variables, except for varCalCnt and varMthAry, are defined at the module level, and are created again on any recursive call to the function queryBuilder, with the previous variables retaining their respective values. However, the variables varCalCnt and varMthAry are not initialized on a recursive call to the function queryBuilder. All parameters, defined in , are defined at a global level, and are not initialized on any recursive call.","In the exemplary flowchart, double quotes are utilized for identifying a string value. The double quotes are never a part of the string in the exemplary flowchart. However, a single quote, whenever utilized, is a part of a string value.","The exemplary flowchart does not include any error and\/or exception handling; it is assumed that all the component values and token values are provided correctly, and are within the required ranges.","The exemplary flowchart is self-explanatory. However, for clarity, some operations have been described in greater detail.","In the exemplary flowchart illustrated in , the field names of tblQry , tblQrySrc , and tblQryFld  are utilized without their respective numerals. The field names of the aforementioned tables, which represent attributes of the exemplary data model, are listed below:\n\n","In addition to the above-mentioned field names, the following data tokens, parameters, and table names are also utilized without their respective numerals in the exemplary flowchart illustrated in :\n\n","In , at terminal , the function queryBuilder starts. queryBuilder receives a parameter for prmQryId , which is utilized to identify a desired source object from tblQry .","At decision box , it is checked whether this is the first call to queryBuilder or not. This check is required for a one-time initialization of the global variables, varCalCnt and varMthAry, which are initialized at operation and operation respectively. If this is the first call to queryBuilder, then the flow continues to operation . Otherwise, the flow continues to operation ","At operation , an object varQryRcd is initialized. The object varQryRcd is an exemplary ADO Recordset Object, and comprises information about a Recordset, which is opened by utilizing the object varQryRcd.","At operation , an object varSrcRcd is initialized. The object varSrcRcd is an exemplary ADO Recordset Object, and comprises information about a Recordset, which is opened by utilizing the object varSrcRcd.","At operation , an object varFldRcd is initialized. The object varFldRcd is an exemplary ADO Recordset Object, and comprises information about a Recordset, which is opened by utilizing the object varFldRcd.","At operation , an array variable varTblAry is initialized. varTblAry is a two dimensional array that is utilized for storing component values in srcId  along with a table\/view alias, which is generated, as a result of processing tknAlias , for srcId .","In , operations and are called only once for a query; these operations are not called for sub-queries.","At operation , varAlaCnt is initialized to zero. varAlaCnt is utilized for calculating an alias for tknAlias .","At operation , all parameters illustrated in  are resolved. The parameters may either be resolved by a direct input of a user, or be retrieved from a computer readable recording medium.","In , at operation , the object varQryRcd is opened, wherein the object varQryRcd comprises all fields of tblQry , wherein the data value of qryId  is equal to the parameter value  of prmQryId . Since qryId  is the primary key, the object varQryRcd will comprise maximum one record.","At operation , the object varSrcRcd is opened, wherein the object varSrcRcd comprises all fields of tblQrySrc , wherein the data value of srcQryId  is equal to the data value of qryId , and the order of the Recordset comprised by the object varSrcRcd is on the data values of srcOrd .","At operation , the varSrcAvl is assigned a result of the processed token value of srcUseCnd . The processing of the token value of srcUseCnd  is done in an exemplary function called CheckAvailability, which is illustrated in detail in . If the function CheckAvailability returns True, it implies that the current record pointed by the object varSrcRcd will be utilized by queryBuilder. If, on the other hand, the function CheckAvailability returns False, it implies that the current record pointed by the object varSrcRcd will not be utilized by queryBuilder.","At operation , tknAlias  is processed. tknAlias  is processed by an exemplary function NewAlias( ) which is illustrated in detail in . The alias generated by a function NewAlias( ) is then stored in a variable varCurAla.","In , at operation , queryBuilder is called recursively for constructing a sub-query, wherein the sub-query is identified by a data value of srcReuseId . The resultant sub-query is stored in a variable varSubQry.","At operation , the object varFldRcd is opened, wherein the object varFldRcd comprises all fields of tblQryFld , wherein the data value of colQryId  is equal to the data value of srcQryId , the data value of colSrcId  is equal to the data value of srcId , and the order of the Recordset represented by the object varFldRcd is on the data values of colOrd .","At operation , varFldAvl is assigned a result, which is an example of token result , of the processed token value of colUseCnd . The processing of the token value of colUseCnd  is done in the exemplary function CheckAvailability, which is illustrated in detail in . If the function CheckAvailability returns True, it implies that the current record pointed by the object varFldRcd will be utilized by queryBuilder. If, on the other hand, the function CheckAvailability returns False, it implies that the current record pointed by the object varFldRcd will not be utilized by queryBuilder.",{"@attributes":{"id":"p-0402","num":"0850"},"figref":"FIG. 8Q","b":["516","518","516","518","516","518"]},"At operation , the function CheckAvailability starts and receives a parameter prmCndTkn which comprises a parameter which will be either a token value representing srcUseCnd , or a token value representing colUseCnd , depending on the location from where the function CheckAvailability is called.","At operation , the parameter value  of prmUseCnd , which comprises either a list of comma-separated string values, or a single string value, is stored as an array in an array variable varCndPrm. The following are a few examples illustrating the storage of contents of prmUseCnd  as an array in varCndPrm:\n\n",{"@attributes":{"id":"p-0405","num":"0856"},"figref":"FIG. 8R","b":"522"},"At operation , the function NewAlias( ) starts.","At operation , MOD represents modulo operation, which finds the remainder of a division of the value of a variable varWrkCnt by 26.","At operation , INT represents an integer function, which returns only the integer part of a number without rounding the number.","At operation , CHR represents a function, which returns an ASCII character which is represented by the number that is passed to CHR as a parameter.","At operation , the function NewAlias( ) returns the newly calculated alias.",{"@attributes":{"id":"p-0411","num":"0862"},"figref":"FIG. 8S","b":["526","528","530"]},"At operation , the function WhereClause starts and receives two parameters, prmOrgWhr and prmNewWhr, wherein prmOrgWhr comprises an already built WHERE clause, which may be an empty string in certain cases, and prmNewWhr, which may be an empty string and which comprises a WHERE clause that is desired to be merged in prmOrgWhr.","At operation , the function WhereToken is utilized for processing tknCurlyBrackets , tknItemCodeBegin , and tknItemCodeEnd .",{"@attributes":{"id":"p-0414","num":"0865"},"figref":["FIGS. 8T to 8X","FIGS. 5B and 5C"],"b":["526","528","530","528","530"]},"In , at operation , the function WhereToken starts and receives a parameter prmRawWhr comprises a WHERE clause which may contain one or more token values representing tknCurlyBrackets , tknItemCodeBegin , and\/or tknItemCodeEnd .","In , at operation , varResult is replaced by either:\n\n",{"@attributes":{"id":"p-0417","num":"0871"},"figref":"FIGS. 9A to 9O","b":["782","784","786"]},{"@attributes":{"id":"p-0418","num":"0872"},"figref":"FIG. 9A","b":["782","782","782","732","901","618","620"],"i":"a "},"An exemplary segment of tblQrySrc  (represented as because it illustrates a specific exemplary segment of tblQrySrc ) comprises three records which are related to record . Each record in illustrates information relating to a table which is to be utilized in a desired query which is to be constructed by utilizing the exemplary source object qryA. illustrates:\n\n",{"@attributes":{"id":"p-0420","num":"0877"},"figref":"FIG. 9B","b":["786","786","786","901","901","784","784","784","786","901"],"i":["b ","a","a ","b ","b ","a"]},{"@attributes":{"id":"p-0421","num":"0878"},"figref":"FIG. 9C","b":["786","786","786","901","901","784","784","784","786","901"],"i":["c ","b","b ","c ","c ","b"]},{"@attributes":{"id":"p-0422","num":"0879"},"figref":"FIG. 9D","b":["786","786","786","901","901","784","784","784","786","901"],"i":["d ","c","c ","d ","d ","c"]},{"@attributes":{"id":"p-0423","num":"0880"},"figref":["FIG. 9E","FIG. 9G"],"b":["782","782","782","732","902","732"],"i":"e "},"An exemplary segment of tblQrySrc  (represented as because it illustrates a specific exemplary segment of tblQrySrc ) comprises one record which is related to record . Record illustrates a table which is to be utilized in a desired query that is to be constructed by utilizing the exemplary source object qryPur and\/or any other query, which queryBuilder constructs by utilizing a source object, which utilizes the exemplary source object qryPur.","In record , srcUseCnd  is represented by an exemplary token value comprising a list of comma separated string comprising two string values: TknPur and TknZon. Utilization of srcUseCnd  implies that during the construction of a desired query which utilizes the exemplary source object gryPur, record will be utilized only if the parameter value  of prmUseCnd  comprises at least one of the string values: TknPur and TknZon. In a case where record is not utilized, the records illustrated in an exemplary segment of tblQryFld  (represented as because it illustrates a specific exemplary segment of tblQryFld ) will also not be utilized.","Record will be utilized only if record is utilized. Record will be utilized only if srcUseCnd  comprises a string value TknZon. Record will be utilized only if srcUseCnd  comprises a string value TknPur. Record will be utilized only if srcUseCnd  comprises a string value TknSal. The string value TknSal is not included in record because record and its related records , , , and are not desired to be utilized for constructing a desired query if the parameter value  of srcUseCnd  comprises string value TknSal, but does not comprise any of the string values: TknPur and TknZon.","In records and , % TknMth %, which is a token value representing tknMonth , is embedded in the component value representing colAla .","In record , colXpr  comprises an exemplary token value  % TknMth,!purchaseMonth,!Amount,0% which represents tknMonth , wherein the token value representing tknMonth  also comprises two instances of \u201c!\u201d (sign of exclamation without quotes), which is a token value  representing tknAlias . This exemplary implementation illustrates a nesting of a token value representing tknAlias  in another token value representing tknMonth . The arguments purchaseMonth and Amount, which are utilized in colXpr  of record , are column names of tblPurchases, and 0 is a constant value.","In records and , col Reuse  is represented by an exemplary data value True. This implies that records and will be utilized for constructing a desired query if utilized on the basis of colUseCnd , as many times as specified by the parameter value  of prmMthCnt . In a case where the parameter value  of prmMthCnt  is zero, records and will be utilized only once.",{"@attributes":{"id":"p-0430","num":"0887"},"figref":["FIG. 9F","FIG. 9G"],"b":["782","782","782","732","903"],"i":"f "},"An exemplary segment of tblQrySrc  (represented as because it illustrates a specific exemplary segment of tblQrySrc ) comprises one record which is related to record . Record illustrates a table, which is to be utilized in a desired query that is to be constructed by utilizing the exemplary source object qrySal, and\/or any other query, which queryBuilder constructs by utilizing a source object, which utilizes the exemplary source object qrySal.","In record , srcUseCnd  is represented by an exemplary token value comprising a list of comma separated string comprising two string values; TknSal and TknZon. The utilization of srcUseCnd  implies that during the construction of a desired query which utilizes the exemplary source object qrySal, record will be utilized only if the parameter value  of prmUseCnd  comprises at least one of the string values: TknSal and TknZon. In a case where record is not utilized, the records illustrated in an exemplary segment of tblQryFld  (represented as because it illustrates a specific exemplary segment of tblQryFld ) will also not be utilized.","Record will be utilized only if record is utilized. Record will be utilized only if srcUseCnd  comprises a string value TknZon. Record will be utilized only if srcUseCnd  comprises a string value TknSal. Record will be utilized only if srcUseCnd  comprises a string value TknPur. The string value TknPur is not included in record because record , and its related records , , , and , are not desired to be utilized for constructing a desired query if the parameter value  of srcUseCnd  comprises a string value TknPur, but does not comprise any of the string values: TknSal and TknZon.","In records and , % TknMth %, which is a token value representing tknMonth , is embedded in the component value stored in colAla .","In record , colXpr  comprises an exemplary token value % TknMth,!saleMonth,!Amount,0% which represents tknMonth , wherein the token value representing tknMonth  also comprises two instances of \u201c!\u201d (sign of exclamation without quotes), which is a token value  representing tknAlias . This exemplary implementation illustrates a nesting of a token value representing tknAlias  in another token value representing tknMonth . The arguments saleMonth and Amount, which are utilized in colXpr  of record , are column names of tblSales, and 0 is a constant value.","In records and , col Reuse  is represented by an exemplary data value True. This implies that records and will be utilized for constructing a desired query if utilized on the basis of colUseCnd , as many times as specified by the parameter value  of prmMthCnt . In a case where the parameter value  of prmMthCnt  is zero, records and will be utilized only once.",{"@attributes":{"id":"p-0437","num":"0894"},"figref":"FIG. 9G","b":["782","782","782","732","904"],"i":"g "},"In record , qryUni  is represented by an exemplary token value True, which implies that a desired query, which is constructed by utilizing the exemplary source object qryUnion, will be a union query. Record  has two related records illustrated in an exemplary segment of tblQrySrc  (represented as because it illustrates a specific exemplary segment of tblQrySrc ). If both the exemplary records of , record and record , are utilized, then the desired query constructed by utilizing the exemplary source object qryUnion will be a union query which will utilize UNION ALL operator.","In record , srcReuseId  is represented by a data value qrySal, which specifies that the exemplary source object qrySal will be utilized, as a view, whenever the record will be utilized for constructing a desired query. A data value, qrySale, which represents srcId  of record , is an exemplary arbitrary name given to a desired query, which is constructed by utilizing the exemplary source object qrySal.","In record , srcReuseId  is represented by a data value qryPur, which specifies that the exemplary source object qryPur will be utilized, as a view, whenever record will be utilized for constructing a desired query. A data value qryPurchase, which represents srcId  of record , is an exemplary arbitrary name given to a desired query, which is constructed by utilizing the exemplary source object qryPur.",{"@attributes":{"id":"p-0441","num":"0898"},"figref":"FIG. 9H","b":["782","782","782","732","905"],"i":"h "},"In record , qryGrp  is represented by an exemplary token value True, which implies that the desired query constructed by utilizing the exemplary source object qryGroup will be an aggregate query. Record  has one related record illustrated in an exemplary segment of tblQrySrc  (represented as because it illustrates a specific exemplary segment of tblQrySrc ), which is represented by record ","Record has four related records illustrated in an exemplary segment of tblQryFld  (represented as because it illustrates a specific exemplary segment of tblQryFld ). In records and , colGrpFun  is represented by a component value \u201cGroup\u201d (without quotes), which implies that the columns mentioned by records and will be utilized in GROUP BY clause of a desired query, which is constructed by utilizing the exemplary source object qryGroup. In records and , colGrpFun  comprises an exemplary component value \u201cSUM\u201d (without quotes), which implies that SUM function will be applied on the columns mentioned by records and in a desired query which is constructed by utilizing the exemplary source object qryGroup.",{"@attributes":{"id":"p-0444","num":"0901"},"figref":"FIG. 9I","b":["782","782","782","732","906"],"i":"i "},"Record  has five related exemplary records illustrated in an exemplary segment of tblQrySrc  (represented as because it illustrates a specific exemplary segment of tblQrySrc ), which are represented by records , , , , and . The five exemplary records illustrated in represent four tables and one view, which may be utilized in a desired query which is constructed by utilizing the exemplary source object qryFinal. In , each of records , , , and comprises a definition of one table which may be utilized, on the basis of the token value representing srcUseCnd  of each respective record and the parameter value  of prmUseCnd , in a query which is constructed by utilizing the exemplary source object qryFinal. Record comprises a definition of a view, specified by \u201cqryGroup\u201d (without quotes), which is a data value representing srcReuseId , and which may be utilized, on the basis of the token value representing srcUseCnd  of its respective record and the parameter value  of prmUseCnd , in a desired query which is constructed by utilizing the exemplary source object qryFinal.",{"@attributes":{"id":"p-0446","num":"0903"},"figref":"FIG. 9J","b":["786","786","786","906","784","784","784","786","906"],"i":["j ","a","j ","j ","a"]},{"@attributes":{"id":"p-0447","num":"0904"},"figref":"FIG. 9K","b":["786","786","786","906","784","784","784","786","906"],"i":["k ","b","k ","k ","b"]},{"@attributes":{"id":"p-0448","num":"0905"},"figref":"FIG. 9L","b":["786","786","786","906","784","784","784","786","906"],"i":["l ","c","l ","l ","c"]},{"@attributes":{"id":"p-0449","num":"0906"},"figref":"FIG. 9M","b":["786","786","786","906","784","784","784","786","906"],"i":["m ","d","m ","m ","d"]},{"@attributes":{"id":"p-0450","num":"0907"},"figref":"FIG. 9N","b":["786","786","786","906","784","784","784","786","906"],"i":["n ","e","n ","n ","e"]},{"@attributes":{"id":"p-0451","num":"0908"},"figref":"FIG. 9O","b":["782","7820","782","732","907"]},"In record , qryWhr  is represented by an exemplary WHERE clause expression, wherein the exemplary WHERE clause expression is embedded with token values representing tknCurlyBrackets , tknItemCodeBegin , and tknItemCodeEnd . Record  has one related exemplary record illustrated in an exemplary segment of tblQrySrc  (represented as because it illustrates a specific exemplary segment of tblQrySrc ), which is represented by record ","Record has ten related records, which are illustrated in an exemplary segment of tblQryFld  (represented as because it illustrates a specific exemplary segment of tblQryFld ). In records and , colUseCnd  is represented by an exemplary token value \u201cTknItm\u201d (without quotes), which is utilized to enable the utilization of records and for constructing a desired query, which is constructed by utilizing the exemplary source object qryModify optionally on the basis of the parameter value  of prmUseCnd .",{"@attributes":{"id":"p-0454","num":"0911"},"figref":["FIGS. 10A to 10Z","FIGS. 8A to 8P","FIGS. 9A to 9O","FIGS. 10A to 10Z","FIG. 6","FIGS. 9A to 9O"]},{"@attributes":{"id":"p-0455","num":"0912"},"figref":["FIG. 10A","FIG. 10A"],"b":"1012","i":"a "},{"@attributes":{"id":"p-0456","num":"0913"},"figref":["FIG. 10B","FIG. 10B"],"b":"1012","i":"b "},{"@attributes":{"id":"p-0457","num":"0914"},"figref":["FIG. 10C","FIG. 10C"],"b":"1012","i":"c "},{"@attributes":{"id":"p-0458","num":"0915"},"figref":["FIG. 10D","FIG. 10D"],"b":"1012","i":"d "},{"@attributes":{"id":"p-0459","num":"0916"},"figref":["FIG. 10E","FIG. 10E"],"b":"1012","i":"e "},{"@attributes":{"id":"p-0460","num":"0917"},"figref":["FIG. 10F","FIG. 10F"],"b":"1012","i":"f "},{"@attributes":{"id":"p-0461","num":"0918"},"figref":["FIG. 10G","FIG. 10G"],"b":"1012","i":"g "},{"@attributes":{"id":"p-0462","num":"0919"},"figref":["FIG. 10H","FIG. 10H"],"b":"1012","i":"h "},{"@attributes":{"id":"p-0463","num":"0920"},"figref":["FIG. 10I","FIG. 10I"],"b":"1012","i":"i "},{"@attributes":{"id":"p-0464","num":"0921"},"figref":["FIG. 10J","FIG. 10J"],"b":"1012","i":"j "},{"@attributes":{"id":"p-0465","num":"0922"},"figref":["FIG. 10K","FIG. 10K"],"b":"1012","i":"k "},{"@attributes":{"id":"p-0466","num":"0923"},"figref":["FIG. 10L","FIG. 10L"],"b":"1012","i":"l "},{"@attributes":{"id":"p-0467","num":"0924"},"figref":["FIG. 10N","FIG. 10M"],"b":"1012","i":"m "},{"@attributes":{"id":"p-0468","num":"0925"},"figref":["FIG. 10P","FIG. 10O"],"b":"1012","i":"o "},{"@attributes":{"id":"p-0469","num":"0926"},"figref":["FIG. 10Q","FIG. 10Q"],"b":"1012","i":"q "},{"@attributes":{"id":"p-0470","num":"0927"},"figref":["FIG. 10R","FIG. 10R"],"b":"1012","i":"r "},{"@attributes":{"id":"p-0471","num":"0928"},"figref":["FIG. 10S","FIG. 10S"],"b":"1012","i":"s "},{"@attributes":{"id":"p-0472","num":"0929"},"figref":["FIG. 10T","FIG. 10T"],"b":"1012","i":"t "},{"@attributes":{"id":"p-0473","num":"0930"},"figref":["FIG. 10U","FIG. 10U"],"b":"1012","i":"u "},{"@attributes":{"id":"p-0474","num":"0931"},"figref":["FIG. 10V","FIG. 10V"],"b":"1012","i":"v "},{"@attributes":{"id":"p-0475","num":"0932"},"figref":["FIG. 10X","FIG. 10W"],"b":"1012","i":"w "},{"@attributes":{"id":"p-0476","num":"0933"},"figref":["FIG. 10Z","FIG. 10Y"],"b":"1012","i":"y "},"The present invention, although described above with reference to a few embodiments, may be embodied in numerous forms, too many to describe herein, and should not be limited by the above described exemplary embodiments, which are illustrative of the present invention, but not exhaustive. Accordingly, the invention is not to be considered limited to the specific examples and embodiments which have been described for the purpose of disclosure. Many alternatives, modifications, and variations will be apparent to those skilled in the art in the light of the above teaching. Accordingly, the invention is intended to embrace all alternatives, modifications, and variations that fall within the spirit and broad scope of the attached claims.","The embodiments of the invention can be implemented in a computing hardware (computing apparatus) and\/or software, which may include, but is not limited to, any computer or machine which can store, retrieve, process and\/or output data, and\/or communicate with other computers or machines, and any type of software, such as, computing system environment  of .","A software\/computer program which implements the embodiments may be provided by any computer readable recording media, and may be recorded on any volatile and\/or non-volatile memory. The software\/computer program which implements the embodiments may also be transmitted over a transmission communication media which may include, but are not limited to, a carrier-wave signal, and an optical signal, etc.","The invention can also be implemented in digital electronic circuitry or in computer hardware, firmware, software and\/or in any combinations thereof. The present invention can be implemented in a computer program product tangibly embodied in a machine readable storage device, or a machine for an execution by a programmable processor. The method of the present invention can be performed by a programmable processor executing a program of instructions to perform the functions of the invention.","The attached claims are to be read to include not only the elements or any combinations thereof which have been literally set forth above, but also all possible equivalent elements for effectively performing the same function in practically the same way to obtain substantially the same result. Therefore, the claims are to be understood to include what is specifically illustrated and described above, what is conceptually equivalent, and also what incorporates the essential idea and principles of the invention. The appended claims are intended to cover all such features and advantages of the embodiments, and their equivalents, that fall within the true spirit and scope thereof.","The benefits and advantages of this invention are numerous and overwhelming, and can readily be achieved in most computer programs. This invention also has huge commercial potential. Any commercial application based on this invention will have power and functionality well beyond what can be achieved in the prior art. Even existing commercial products and applications, like computer programs, can be made extremely powerful, flexible, dynamic, feature rich and cost effective by utilizing this invention. Utilization of this invention will open new horizons in software development and take it to a new programming paradigm which will be beneficial for software developers as well as software users.","It will be apparent to anyone familiar with the art that this invention can readily be applied\/utilized in almost every aspect of software development, particularly in almost any computer program, existing or new.","This invention will enable development of software which can easily develop software components on a user's demand, as and when required.","This invention will greatly simplify and streamline the development of software. Most of the complexities currently faced by software developers will be wiped out. This will lead to another vital advantage: extensive training of human beings for software development will no longer be required. As a result, productivity of human beings will be greatly enhanced, and result in substantial cost savings in terms of finance and time.","The streamlining and simplification of software development achieved under this invention will particularly reduce the time presently required for software development. The time required to develop a software program under this invention will only be a very small fraction of the time required in the prior art. For example:\n\n","By utilizing this invention, creating and managing database queries will become extremely efficient and cost effective. Hundreds of thousands of man hours of query writing, query testing, and query debugging can be saved for even one computer program. This will make creating, managing, maintaining, modifying, as well as providing quality assurance of database queries substantially easier than in the prior art. The extraordinary ease in query building will particularly benefit software developers.","The inventive concepts of a source object repository, a software component constructor, reusability, a data token, and a parameter will make it possible to substantially reduce the quantum of queries which, in the prior art, may span hundreds of thousands of query lines. Software development in general, and business intelligence in particular, will greatly benefit from such reduction. A few possibilities under this invention are discussed below:\n\n","This invention can be utilized in almost every type of software program and application. Therefore, it is next to impossible to list all possible applications of the present invention. However, some exemplary commercial applications and usages are mentioned below:\n\n","This invention makes it possible for a developed computer program, and its related resources, to be utilized, as many times as may be desired, in another computer program. Anyone familiar with the art will immediately capitalize on this advantage. For example, if a query building engine (which is a software component constructor) is developed on the basis of this invention, it can be utilized in any other computer program. By only porting the query building engine to any other platform, all the queries written by the query building engine can readily be utilized on other platforms.","The innovative software component constructor, which is developed on the basis of this invention, can easily be utilized for constructing billions and trillions of different software components, even from a single source object. This gives software development new potential which is unthinkable in the prior art.","Under this invention, the benefits of reusability and multiplicity of instantly available software components will be readily available for almost all software components, such as, reports, data entry forms, business processing rules, error management systems, knowledge base systems, web portals, computer games, and the like.","This invention makes it possible to develop software components in small pieces and test each piece individually and independently. This possibility enables a software developer to manage a computer in a way that each piece of a software component is developed and tested independently, and then all the pieces of the software component are combined together to work as a single software component. This power is achieved by utilizing the innovative source object repository, data tokens and reusability of one or more component values.","This invention enables creation of software factories which work as real factories thus making software industrialization a reality.","In the prior art, most computer programs are developed in a way that they have to be maintained at a huge cost in terms of time, human effort and financial resources. However, this invention makes maintenance of software so convenient and easy that is unimaginable in the prior art. Moreover, this invention teaches a software developer to develop software in such a manner that maintaining developed software is hassle-free and no more than a minor routine. For example, if a conventionally developed computer program utilizes a couple of hundred queries based on one database table, adding a new column in each database query may require tens of thousands of man hours. But, in a similar computer program which is developed on the basis of this invention, such a change will require only a few minutes.","In the prior art, the ability to develop software which is platform independent has been an ongoing challenge which has not been met effectively. This invention enables this ability to such a level that is unheard of in the prior art. By utilizing this invention, it is possible to develop a software component constructor which can construct software components for a plurality of platforms. For example, a reporting engine, which is a software component constructor, can be developed under this invention that can construct report layouts for CRYSTAL REPORTS, MICROSOFT ACCESS, and many other reporting programs from a single source object.","Software developed by utilizing this invention utilizes the available computing resources efficiently. Storage requirements for a computer program developed on the basis of this invention is substantially smaller than the storage requirements for a similar computer program developed according to the conventions used in the prior art. Moreover, utilization of network bandwidth is also optimized because of the much reduced size of the computer program developed under this invention. Hence, it is extremely efficient to deploy computer programs developed under this invention, in networked and\/or web based environments, such as cloud computing, client server architecture, and the like.","Software which is developed on the basis of this invention is also inherently resource efficient in terms of software support to a user. Because of the inherent architecture of such software, it is possible to upgrade and maintain such software very efficiently and at an extremely low cost. The resources required to support computer programs developed by utilizing this invention are only a fraction of the resources required to support similar programs developed in the prior art.","Utilization of this invention for software development will enable optimization for minimizing the software development resources and maximizing the software efficiency, flexibility and\/or output, and will enable a user to have: (1) precise control, (2) dynamic change, and\/or (3) any combinations thereof, in: (i) the behavior of software, (ii) the outcome of software, (iii) the reusability of program data, (iv) the ease of software development, and\/or (v) any combinations thereof; and all of the above, especially: (a) at runtime and\/or (b) by utilization of one or more control parameters.","Software developed on the basis of this invention also gives unmatched runtime power, flexibility, and dynamism to a user. Utilization of a source object repository, a data token, and a parameter enables developed software to also work as an intelligent component constructor which can instantly construct a software component on the basis of a user's desire at runtime; indeed, the user may utilize the developed software according to the ever-changing and growing business requirements. For example, it is possible, under this invention, to develop a reporting system which can produce almost any conceivable data combination instantly on a user's demand. Such possibilities are inconceivable in the prior art.","By utilizing this invention, it is possible to create computer programs which can cater to almost any future requirement, only by either changing one or more parameters, or by adding new component values, data tokens and\/or parameters, as may be pertinent for any new\/future requirement.","Since any software, developed on the basis of this invention, is very easy to maintain, it is possible to extend the life cycle of developed software by many years.","In a nutshell, this invention is a unique and breakthrough development. It will provide total flexibility and dynamism to a software developer and user in software development, especially at runtime. Moreover, this invention will cater to the complex and massive demands on software, precipitated by the exponential growth of computing power, accounting for both the current and future requirements. Indeed, the invention is unique in its nature and scope, and no similar prior art exists in this regard."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The concepts, principles, methods, specifications, embodiments and salient features of the invention are illustrated by way of examples, and not by way of any limitation, in the below listed figures along with their drawings and detailed descriptions, wherein like reference numerals refer to similar elements.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIGS. 4B to 4K"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIGS. 4L to 4R"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 4S","FIGS. 4B to 4R"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 4T","FIGS. 4B to 4R"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIGS. 5B and 5C"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 7A","FIG. 4S"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 7B"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 7C","FIG. 7B"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIGS. 8A to 8P"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 8Q"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 8R"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 8S"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIGS. 8T to 8X","FIGS. 5B and 5C"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIGS. 9A to 9O","FIG. 7C"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIGS. 10A to 10Z","FIGS. 9A to 9O"]}]},"DETDESC":[{},{}]}
