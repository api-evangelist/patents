---
title: Administering devices in dependence upon user metric vectors with optimizing metric action lists
abstract: Exemplary embodiments of the present invention include methods for administering devices. Such exemplary embodiments include creating a user metric vector comprising a plurality of disparate user metrics, creating a user metric space comprising a plurality of metric ranges, and determining whether the user metric vector is outside the user metric space. If the user metric vector is outside a user metric space, such embodiments include creating in dependence upon the user metric vector, a dynamic action list, identifying at least one action in the dynamic action list, executing the action, and determining whether a value of a user metric of the user metric vector that was outside a metric range of the user metric space before executing the action is outside the metric range after executing the action.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07151969&OS=07151969&RS=07151969
owner: International Business Machines Corporation
number: 07151969
owner_city: Armonk
owner_country: US
publication_date: 20030626
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS","Introduction","Definitions","Exemplary Architecture","Exemplary Classes and Class Cooperation","Administering Devices in Dependence Upon User Metrics","Administering Devices in Dependence Upon User Metric Vectors with Optimizing Metric Action Lists"],"p":["1. Field of the Invention","The field of the invention is data processing, or, more specifically, methods, systems, and products for administering devices.","2. Description of Related Art","Conventional networks contain various devices. A user often uses the various devices, or adjusts the particular settings of the devices in dependence upon the user's current condition. That is, a user's current condition often motivates the user to change the settings of devices so that the devices operate in a manner that more positively benefits the user's current condition. For example, a user with a headache may be disturbed by a powerful light. The user may dim the light, or turn the light off, so that the light no longer disturbs the user. Conventional networked devices, however, require user intervention to individually administer the specific device in response to user condition. It would be advantageous if there were a method of administering devices in dependence upon user condition that did not require user intervention.","Exemplary embodiments of the present invention include methods for administering devices. Such exemplary embodiments include creating a user metric vector comprising a plurality of disparate user metrics, creating a user metric space comprising a plurality of metric ranges, and determining whether the user metric vector is outside the user metric space. If the user metric vector is outside a user metric space, such embodiments include creating in dependence upon the user metric vector, a dynamic action list, identifying at least one action in the dynamic action list, executing the action, and determining whether a value of a user metric of the user metric vector that was outside a metric range of the user metric space before executing the action is outside the metric range after executing the action.","In many exemplary embodiments of the invention, determining whether a value of a user metric of the user metric vector that was outside a metric range of the user metric space before executing the action is outside the metric range after executing the action comprises identifying a user metric having a value that was outside a the metric range before executing the action, and comparing the user metric and the metric range. Typical embodiments of the invention also include identifying a new action. In many exemplary embodiments of the invention, identifying a new action comprises retrieving an action ID from an action table.","Some embodiments of the invention also include executing the new action. Many exemplary embodiments include determining whether a value of a user metric of the user metric vector that was outside a metric range of the user metric space before executing the new action is outside the metric range after executing the new action.","Typical embodiments of the invention also include adding the new action to a metric action list associated with the user metric. Many embodiments include deleting an action ID from a metric action list associated with the user metric of the user metric vector that was outside a metric range of the user metric space before executing the action.","The foregoing and other objects, features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.","The present invention is described to a large extent in this specification in terms of methods for administering devices. Persons skilled in the art, however, will recognize that any computer system that includes suitable programming means for operating in accordance with the disclosed methods also falls well within the scope of the present invention.","Suitable programming means include any means for directing a computer system to execute the steps of the method of the invention, including for example, systems comprised of processing units and arithmetic-logic circuits coupled to computer memory, which systems have the capability of storing in computer memory, which computer memory includes electronic circuits configured to store data and program instructions, programmed steps of the method of the invention for execution by a processing unit. The invention also may be embodied in a computer program product, such as a diskette or other recording medium, for use with any suitable data processing system.","Embodiments of a computer program product may be implemented by use of any recording medium for machine-readable information, including magnetic media, optical media, or other suitable media. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that, although most of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware, nevertheless, alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.","\u201c802.11\u201d refers to a family of specifications developed by the IEEE for wireless LAN technology. 802.11 specifies an over-the-air interface between a wireless client and a base station or between two wireless clients.","\u201cAPI\u201d is an abbreviation for \u201capplication programming interface.\u201d An API is a set of routines, protocols, and tools for building software applications.","\u201cBluetooth\u201d refers to an industrial specification for a short-range radio technology for RF couplings among client devices and between client devices and resources on a LAN or other network. An administrative body called the Bluetooth Special Interest Group tests and qualifies devices as Bluetooth compliant. The Bluetooth specification consists of a \u2018Foundation Core,\u2019 which provides design specifications, and a \u2018Foundation Profile,\u2019 which provides interoperability guidelines.","\u201cCoupled for data communications\u201d means any form of data communications, wireless, 802.11b, Bluetooth, infrared, radio, internet protocols, HTTP protocols, email protocols, networked, direct connections, dedicated phone lines, dial-ups, serial connections with RS-232 (EIA232) or Universal Serial Buses, hard-wired parallel port connections, network connections according to the Power Line Protocol, and other forms of connection for data communications as will occur to those of skill in the art. Couplings for data communications include networked couplings for data communications. Examples of networks useful with various embodiments of the invention include cable networks, intranets, extranets, internets, local area networks, wide area networks, and other network arrangements as will occur to those of skill in the art. The use of any networked coupling among television channels, cable channels, video providers, telecommunications sources, and the like, is well within the scope of the present invention.","\u201cDriver\u201d means a program that controls a device. A device (printer, disk drive, keyboard) typically has a driver. A driver acts as translator between the device and software programs that use the device. Each device has a set of specialized commands that its driver knows. Software programs generally access devices by using generic commands. The driver, therefore, accepts generic commands from a program and then translates them into specialized commands for the device.","\u201cField\u201d\u2014In this specification, the terms \u201cfield\u201d and \u201cdata element,\u201d unless the context indicates otherwise, generally are used as synonyms, referring to individual elements of digital data. Aggregates of data elements are referred to as \u201crecords\u201d or \u201cdata structures.\u201d Aggregates of records are referred to as \u201ctables\u201d or \u201cfiles.\u201d Aggregates of files or tables are referred to as \u201cdatabases.\u201d Complex data structures that include member methods, functions, or software routines as well as data elements are referred to as \u201cclasses.\u201d Instances of classes are referred to as \u201cobjects\u201d or \u201cclass objects.\u201d","\u201cHAVi\u201d stands for \u2018Home Audio Video interoperability,\u2019 the name of a vendor-neutral audio-video standard particularly for home entertainment environments. HAVi allows different home entertainment and communication devices (such as VCRs, televisions, stereos, security systems, and video monitors) to be networked together and controlled from one primary device, such as a services gateway, PC, or television. Using IEEE 1394, the \u2018Firewire\u2019 specification, as the interconnection medium, HAVi allows products from different vendors to comply with one another based on defined connection and communication protocols and APIs. Services provided by HAVi's distributed application system include an addressing scheme and message transfer, lookup for discovering resources, posting and receiving local or remote events, and streaming and controlling isochronous data streams.","\u201cHomePlug\u201d stands for The HomePlug Powerline Alliance. HomePlug is a not-for-profit corporation formed to provide a forum for the creation of open specifications for high speed home powerline networking products and services. The HomePlug specification is designed for delivery of Internet communications and multimedia to homes through the home power outlet using powerline networking standards.","The HomePlug protocol allows HomePlug-enabled devices to communicate across powerlines using Radio Frequency signals (RF). The HomPlug protocol uses Orthogonal Frequency Division Multiplexing (OFDM) to split the RF signal into multiple smaller sub-signals that are then transmitted from one HomPlug enabled-device to another HomePlug-enabled device at different frequencies across the powerline.","\u201cHTTP\u201d stands for \u2018HyperText Transport Protocol,\u2019 the standard data communications protocol of the World Wide Web.","\u201cID\u201d abbreviates \u201cidentification\u201d as used by convention in this specification with nouns represented in data elements, so that \u2018user ID\u2019 refers to a user identification and \u2018userID\u2019 is the name of a data element in which is stored a user identification. For a further example of the use of \u2018ID\u2019: \u2018metric ID\u2019 refers to a metric identification and \u2018metricID\u2019 is the name of a data element in which is stored a metric identification.","\u201cIEEE 1394\u201d is an external bus standard that supports data transfer rates of up to 400 Mbps (400 million bits per second). Apple, which originally developed IEEE 1394, uses the trademarked name \u201cFireWire.\u201d Other companies use other names, such as i.link and Lynx, to describe their 1394 products.","A single 1394 port can be used to connect up to 63 external devices. In addition to high speed, 1394 also supports isochronous data transfer\u2014delivering data at a guaranteed rate. This makes it ideal for devices that need to transfer high levels of data in real-time, such as video.","\u201cThe Internet\u201d is a global network connecting millions of computers utilizing the \u2018internet protocol\u2019 or \u2018IP\u2019 as the network layer of their networking protocol stacks. The Internet is decentralized by design. Each computer on the Internet is independent. Operators for each computer on the Internet can choose which Internet services to use and which local services to make available to the global Internet community. There are a variety of ways to access the Internet. Many online services, such as America Online, offer access to some Internet services. It is also possible to gain access through a commercial Internet Service Provider (ISP). An \u201cinternet\u201d (uncapitalized) is any network using IP as the network layer in its network protocol stack.","\u201cJAR\u201d is an abbreviation for \u2018Java archive.\u2019 JAR is a file format used to bundle components used by a Java application. JAR files simplify downloading applets, because many components (.class files, images, sounds, etc.) can be packaged into a single file. JAR also supports data compression, which further decreases download times. By convention, JAR files end with a \u2018.jar\u2019 extension.","\u201cJES\u201d stands for Java Embedded Server. JES is a commercial implementation of OSGi that provides a framework for development, deployment, and installation of applications and services to embedded devices.","\u201cLAN\u201d is an abbreviation for \u201clocal area network.\u201d A LAN is a computer network that spans a relatively small area. Many LANs are confined to a single building or group of buildings. However, one LAN can be connected to other LANs over any distance via telephone lines and radio waves. A system of LANs connected in this way is called a wide-area network (WAN). The Internet is an example of a WAN.","\u201cLonWorks\u201d is a networking platform available from Echelon\u00ae. Lon Works is currently used in various network applications such as appliance control and lighting control. The LonWorks networking platform uses a protocol called \u201cLonTalk\u201d that is embedded within a \u201cNeuron Chip\u201d installed within Lon Works-enabled devices.","The Neuron Chip is a system-on-a-chip with multiple processors, read-write and read-only memory (RAM and ROM), and communication and I\/O subsystems. The read-only memory contains an operating system, the LonTalk protocol, and an I\/O function library. The chip has non-volatile memory for configuration data and for application programs, which can be downloaded over a LonWorks network to the device. The Neuron Chip provides the first 6 layers of the standard OSI network model. That is, the Neuron Chip provides the physical layer, the data link layer, the network layer, the transport layer, the session layer, and the presentation layer.","The Neuron Chip does not provide the application layer programming. Applications for LonWorks networks are written in a programming language called \u201cneuron C.\u201d Applications written in Neuron C are typically event-driven, and therefore, result in reduced traffic on the network.","\u201cOSGI\u201d refers to the Open Services Gateway Initiative, an industry organization developing specifications for services gateways, including specifications for delivery of service bundles, software middleware providing compliant data communications and services through services gateways. The Open Services Gateway specification is a java based application layer framework that gives service providers, network operator device makers, and appliance manufacturer's vendor neutral application and device layer APIs and functions.","The \u201cOSI Model\u201d or Open System Interconnection, model defines a networking framework for implementing protocols in seven layers. Control is passed from one layer to the next, starting at the application layer in one network station, proceeding to the bottom layer, over the channel to the next network station and back up the hierarchy.","The seventh layer of the OSI model is the application layer. The application layer supports application and end-user processes. The application layer provides application services for file transfers, email, and other network software services.","The sixth layer of the OSI model is the presentation layer. The presentation layer provides independence from differences in data representation. The presentation layer translates from application data format to network data format, and vice versa. The presentation layer is sometimes called the \u201csyntax layer.\u201d","The fifth layer of the OSI model is the session layer. The session layer establishes, manages, and terminates connections between networked applications. The session layer sets up, coordinates, and terminates conversations, exchanges, and dialogues between networked applications.","The fourth layer of the OSI model is the transport layer. The transport layer provides transparent transfer of data between networked systems, or hosts. The transport layer is also responsible for flow control and ensures complete data transfer.","The third layer of the OSI model is the network layer. The network layer creates logical paths, known as virtual circuits, for transmitting data from one network node to another network node. Routing, forwarding, addressing, and packet sequencing are functions of the network layer.","The second layer of the OSI model is the data link layer. The data link layer decodes data packets into bits and codes bits into data packets. The data link layer provides a transmission protocol and manages data flow transmission in the in the physical layer.","The data link layer is divided into two sublayers. The first sublayer of the data link layer is the Media Access Control (MAC) layer. The MAC sublayer controls access and permission for a computer on a network to transmit data.","The second sublayer of the data link layer is the Logical Link Control (LLC) layer. The LLC layer controls data flow transmission in the physical layer.","The first layer of the OSI model is the physical layer. The physical layer transmits the bit stream (electrical impulse, light or radio signal) through the physical network at the electrical and mechanical level. The physical layer provides the hardware for sending and receiving data.","\u201cSMF\u201d stands for \u201cService Management Framework\u2122\u201d available from IBM\u00ae. SMF is a commercial implementation of OSGi for management of network delivered applications on services gateways.","\u201cUSB\u201d is an abbreviation for \u201cuniversal serial bus.\u201d USB is an external bus standard that supports data transfer rates of 12 Mbps. A single USB port can be used to connect up to 127 peripheral devices, such as mice, modems, and keyboards. USB also supports Plug-and-Play installation and hot plugging.","\u201cWAP\u201d refers to the Wireless Application Protocol, a protocol for use with handheld wireless devices. Examples of wireless devices useful with WAP include mobile phones, pagers, two-way radios, and hand-held computers. WAP supports many wireless networks, and WAP is supported by many operating systems. Operating systems specifically engineered for handheld devices include PalmOS, EPOC, Windows CE, FLEXOS, OS\/9, and JavaOS. WAP devices that use displays and access the Internet run \u201cmicrobrowsers.\u201d The microbrowsers use small file sizes that can accommodate the low memory constraints of handheld devices and the low-bandwidth constraints of wireless networks.","The \u201cX-10\u201d means the X-10 protocol. Typical X-10 enabled devices communicate across AC powerline wiring, such as existing AC wiring in a home, using an X-10 transmitter and an X-10 receiver. The X-10 transmitter and the X-10 receiver use Radio Frequency (RF) signals to exchange digital information. The X-10 transmitter and the X-10 receiver communicate with short RF bursts which represent digital information. A Binary 1 is represented by a 1 millisecond burst of 120 KHz. and a Binary 0 by the absence of 120 KHz burst followed by the presence of a burst.","In the X-10 protocol, data is sent in data strings called frames. The frame begins with a 4 bit start code designated as \u201c1110.\u201d Following the start code, the frame identifies a particular domain, such as house, with a 4 bit \u201chouse code,\u201d and identifies a device within that domain with a 4 bit \u201cdevices code.\u201d The frame also includes a command string of 8 bits identifying a particular preset command such as \u201con,\u201d \u201coff,\u201d \u201cdim,\u201d \u201cbright,\u201d \u201cstatus on,\u201d \u201cstatus off,\u201d and \u201cstatus request.\u201d",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 1","FIG. 1"],"b":"118"},"The domain () of  includes a services gateway (). A services gateway () is, in some exemplary architectures, an OSGi compatible services gateway (). While exemplary embodiments of methods for administering devices are described in this specification using OSGi, many other applications and frameworks, will work to implement the methods of administering devices according to the present invention, and are therefore also well within the scope of the present invention.","Commercial implementations of OSGi, such as JES and SMF, are also useful in implementing methods for administering devices.","In the exemplary architecture of , the services gateway () includes a services framework (). The services framework () of  is a hosting platform for running \u2018services.\u2019 Services are the main building blocks for creating applications in the OSGi. An OSGi services framework () is written in Java and therefore, typically runs on a Java Virtual Machine (JVM) ().","The exemplary architecture of  includes a DML (). \u201cDML\u201d () is an abbreviation for Domain Mediation Layer. In many embodiments of the architecture of , the DML () is application software useful in implementing methods of administering devices in accordance with the present invention. In some embodiments of the present invention, the DML is OSGi compliant application software, and is therefore implemented as a service or a group of services packaged as a bundle installed on the services framework (). In this specification, DMLs are often discussed in the context of OSGi. However, the discussion of OSGI is for explanation and not for limitation. In fact, DMLs according to various embodiments of the present invention can be implemented in any programming language, C, C++, COBOL, FORTRAN, BASIC, and so on, as will occur to those of skill in the art, and DMLs developed in languages other than Java are installed directly upon an operating system or operating environment rather than a JVM.","In the exemplary architecture of , the services gateway () is coupled for data communications with a metric sensor (). A metric sensor () is a device that reads an indication of a user's condition, and creates a user metric in response to the indication of the user's condition. An \u201cindication of a user's condition\u201d is a quantifiable aspect of a user's condition and a quantity measuring the aspect. For example, a quantifiable aspect of a user's condition is a body temperature of 99.2 degrees Fahrenheit. Examples of quantifiable aspects of a user's condition include body temperature, heart rate, blood pressure, location, galvanic skin response, and others as will occur to those of skill in the art.","A \u201cuser metric\u201d is a data structure representing an indication of user condition. In many examples of methods for administering devices in accordance with the present invention, a user metric is implemented as a data structure, class, or object that includes a userID field, a metricID field, and a metric value field. A typical userID field identifies the user whose indication of condition is represented by the metric. A typical metricID field identifies the quantifiable aspect of user condition the metric represents, such as, for example, blood pressure, heart rate, location, or galvanic skin response. A typical metric value field stores a quantity measuring the aspect of a user's condition.","Wearable and wireless heart rate monitors, galvanic skin response monitors, eye response monitors, and breathing monitors useful as or easily adaptable for use as metric sensors are currently available from Quibit Systems, Inc. The \u2018Polar\u2019 series of heart rate monitors from Body Trends, Inc., and the magnetoelastic gastric pH sensors from Sentec Corporation are other examples of readily available biomedical sensors useful as or easily adaptable for use as metric sensors.","In order for a conventional sensor, such as a biomedical sensor, to be useful as a metric sensor that transmits multiple metric types in a domain containing multiple users, the sensor advantageously transmits not only a value of the each aspect it measures, but also transmits a user ID and a metricID. The user ID is useful because typical embodiments of the present invention include a DML capable of administering devices on behalf of many users simultaneously. The metricID is useful because a single user may employ more than one metric sensor at the same time or employ a metric sensor capable of monitoring and transmitting data regarding more than one aspect of user condition. All wireless sensors at least transmit a metric value according to some wireless data communications protocol. To the extent that any particular sensor \u2018off-the-shelf\u2019 does not also transmit user ID or metricID, such a sensor is easily adapted, merely by small modifications of its controlling software, also to include in its transmissions user IDs and metricID.","Although it is expected that most DMLs will support metric IDs and user IDs, it is possible, under some circumstances within the scope of the present invention, to use an off-the-shelf sensor as a metric sensor even if the sensor does not provide metric ID and user ID in its output telemetry. Consider an example in which only a single person inhabits a domain having device controlled or administered by a DML tracking only a single metric, such as, for example, heart rate. A DML tracking only one metric for only one user could function without requiring a metric type code in telemetry received from the metric sensor because, of course, only one type of metric is received. In this example, strictly speaking, it would be possible for an off-the-shelf, Bluetooth-enabled heart rate sensor, such as a \u2018Polar\u2019 sensor from Body Trends, to function as a metric sensor. This example is presented only for explanation, because as a practical matter it is expected that most DMLs according to embodiments of the present invention will usefully and advantageously administer more than one type of metric (therefore needing a metric ID code in their telemetry) on behalf of more than one user (therefore needing a user ID in their telemetry).","In many embodiments of the present invention, the metric sensor is advantageously wirelessly coupled for data communications with the services gateway (). In many alternative embodiments, the metric sensor transmits the user metric to the DML through a services gateway using various protocols such as Bluetooth, 802.11, HTTP, WAP, or any other protocol that will occur to those of skill in the art.","In the exemplary architecture of , the domain () includes a device () coupled for data communications with the services gateway () across a LAN (). In many embodiments of the present invention, a domain () will include many devices. A home domain, for example, may include a home network having a television, numerous lights, a refrigerator, a freezer, a coffee pot, a dishwasher, a dryer, a CD player, a DVD player, a personal video recorder, or any other networkable device that will occur to those of skill in the art. For ease of explanation, the exemplary architecture of  illustrates only three devices (), but the use of any number of devices is well within the scope of the present invention.","To administer the device (), the DML must have the device class for the device containing accessor methods that get and set attributes on the device, and in some cases, a communication class that provides the protocols needed to communicate with the device. In some examples of the architecture of , a DML has pre-installed upon it, device classes and communications classes for many devices that the DML supports.","To the extent the DML does not have a preinstalled device class and communications class for a particular device, the DML can obtain the device class and communications class in a number of ways. One way the DML obtains the device class and communications class for the device is by reading the device class and the communications class from the device. This requires the device have enough installed memory to store the device class and communications class. The DML can also obtain the device class and communications class from devices that do not contain the device class or communications class installed upon them. One way the DML obtains the device class and communications class is by reading a device ID from the device, searching the Internet for the device class and communications class, and downloading them. Another way the DML obtains the device class and communications class is by reading a network location from the device downloading, from the network location, the device class and communications class. Three ways have been described for obtaining the device classes and communications classes needed to administer devices in accordance with the present invention. Other methods will also occur to those of skill in the art.","The exemplary architecture of  includes a non-domain entity () that is coupled for data communications with the services gateway () across a WAN (). A \u201cnon-domain entity\u201d is any computing device or network location coupled for data communications to the domain but not within the domain. The phrase \u201cnon-domain entity\u201d is broad and its inclusion in the architecture of  acknowledges that in many embodiments of architecture useful in implementing methods of administering devices in accordance with the present invention, a given domain is coupled for data communications with outside non-domain entities.","An example of a non-domain entity is a web server (outside the domain) of a manufacturer of the device () installed within the domain. The manufacturer may operate a website that makes available for download drivers for the device, updates for the device, or any other information or software for the device. Drivers, updates, information or software for the device are downloadable to the device across a WAN and through the services gateway.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 2","FIG. 2"],"b":["106","106","106"]},"OSGi Stands for \u2018Open Services Gateway Initiative.\u2019 The OSGi specification is a Java-based application layer framework that provides vendor neutral application and device layer APIs and functions for various devices using arbitrary communication protocols operating in networks in homes, cars, and other environments. OSGi works with a variety of networking technologies like Ethernet, Bluetooth, the \u2018Home, Audio and Video Interoperability standard\u2019 (HAVi), IEEE 1394, Universal Serial Bus (USB), WAP, X-10, Lon Works, HomePlug and various other networking technologies. The OSGi specification is available for free download from the OSGi website at www.osgi.org.","The services gateway () of  includes a service framework (). In many example embodiments the service framework is an OSGi service framework (). An OSGi service framework () is written in Java and therefore, typically runs on a Java Virtual Machine (JVM). In OSGi, the service framework () of  is a hosting platform for running \u2018services\u2019 (). The term \u2018service\u2019 or \u2018services\u2019 in this disclosure, depending on context, generally refers to OSGi-compliant services.","Services () are the main building blocks for creating applications according to the OSGi. A service () is a group of Java classes and interfaces that implement a certain feature. The OSGi specification provides a number of standard services. For example, OSGi provides a standard HTTP service that creates a web server that can respond to requests from HTTP clients.","OSGi also provides a set of standard services called the Device Access Specification. The Device Access Specification (\u201cDAS\u201d) provides services to identify a device connected to the services gateway, search for a driver for that device, and install the driver for the device.","Services () in OSGi are packaged in \u2018bundles\u2019 () with other files, images, and resources that the services () need for execution. A bundle () is a Java archive or \u2018JAR\u2019 file including one or more service implementations (), an activator class (), and a manifest file (). An activator class () is a Java class that the service framework () uses to start and stop a bundle. A manifest file () is a standard text file that describes the contents of the bundle ().","In the exemplary architecture of  includes a DML (). In many embodiments of the present invention, the DML is an OSGi service that carries out methods of administering devices. The DML () of  is packaged within a bundle () and installed on the services framework ().","The services framework () in OSGi also includes a service registry (). The service registry () includes a service registration () including the service's name and an instance of a class that implements the service for each bundle () installed on the framework () and registered with the service registry (). A bundle () may request services that are not included in the bundle (), but are registered on the framework service registry (). To find a service, a bundle () performs a query on the framework's service registry ().",{"@attributes":{"id":"p-0085","num":"0084"},"figref":["FIG. 3","FIG. 3"]},"The class diagram of  includes an exemplary DML class (). An instance of the exemplary DML class () of  provides member methods that carry out the steps useful in administering devices in accordance with the present invention. The exemplary DML class of  is shown with an Activator.start( ) method so that the DML can be started as a service in an OSGi framework. Although only one member method is shown for this DML, DMLs in fact will often have more member methods as needed for a particular embodiment. The DML class of  also includes member data elements for storing references to services classes, often created by the DML's constructor. In this example, the DML provides storage fields for references to a metric service (), a metric range service (), a communication service (), an action service (), a device service (), a metric vector service () and a metric space service (), and dynamic action list service ().","The metric service class () of  provides member methods that receive user metrics from a DML and create, in response to receiving the user metrics from the DML, an instance of a metric class. The metric service class () of  includes a createMetric(UserID, MetricID, MetricValue) member method (). The createMetric( ) member method is, in some embodiments, a factory method parameterized with a metric ID that creates and returns a metric object in dependence upon the metric ID. In response to getting a user metric from the DML, the exemplary instance of the metric service class () of  creates an instance of a metric class and returns to the DML a reference to the new metric object.","Strictly speaking, there is nothing in the limitations of the present invention that requires the DML to create metric object through a factory method. The DML can for example proceed as illustrated in the following pseudocode segment:",{"@attributes":{"id":"p-0089","num":"0088"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ receive on an input stream a metric message"]},{"entry":[{},"\/\/ extract from the metric message a userID,"]},{"entry":[{},"\/\/ a metric ID, and a metric value, so that:"]},{"entry":[{},"int userID = \/\/ userID from the metric message"]},{"entry":[{},"int metricID = \/\/ metricID from the metric message"]},{"entry":[{},"int metric Value = \/\/ metric value from the metric message"]},{"entry":[{},"Metric aMetric = new Metric( );"]},{"entry":[{},"aMetric.setUserID (userID);"]},{"entry":[{},"aMetric.setMetricID(metricID);"]},{"entry":[{},"aMetric.setMetricValue(metricValue);"]},{"entry":[{},"aMetric.start ( );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"This example creates a metric object and uses accessor methods to load its member data. This approach provides exactly the same class of metric object for each metric, however, and there are circumstances when metrics advantageously utilize different concrete class structures. In the case of metrics for heart rate and blood pressure, for example, both metric values may be encoded as integers, where a metric value for polar coordinates on the surface of the earth from a GPS transceiver, for example, may advantageously be encoded in a more complex data structure, even having its own Location class, for example. Using a factory method eases the use of more than one metric class. A DML using a factory method to create metric objects can proceed as illustrated in the following exemplary pseudocode segment:",{"@attributes":{"id":"p-0091","num":"0090"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ receive on an input stream a metric message"},{"entry":"\/\/ extract from the metric message a userID,"},{"entry":"\/\/ a metric ID, and a metric value, so that:"},{"entry":"int userID = \/\/ userID from the metric message"},{"entry":"int metricID = \/\/ metricID from the metric message"},{"entry":"int metricValue = \/\/ metric value from the metric message"},{"entry":"Metric aMetric = MetricService.createMetricObject(userID, metricID,"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"metricValue);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"aMetric.start( );"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"This example relies on the factory method createMetric( ) to set the parameter values into the new metric object. A metric service and a factory method for metric object can be implemented as illustrated in the following pseudocode segment:",{"@attributes":{"id":"p-0093","num":"0092"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ Metric Service Class"]},{"entry":[{},"\/\/"]},{"entry":[{},"class MetricService"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public static Metric createMetricObject(userID, metricID,"]},{"entry":[{},"metric Value)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Metric aMetric;"]},{"entry":[{},"switch(metricID)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"case 1: aMetric = new HeartRateMetric(userID,"]},{"entry":[{},"metricID, metricValue);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"break;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case 2: aMetric ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"new BloodPressureMetric(userID, metricID,"]},{"entry":[{},"metricValue);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"case 3: aMetric = new GPSMetric(userID,"]},{"entry":[{},"metricID metricValue);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"break;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} \/\/ end switch( )"]},{"entry":[{},"return aMetric;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} \/\/ end createMetric( )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} \/\/ end class MetricService"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"MetricService in this example implements a so-called parameterized factory design pattern, including a factory method. In this example, the factory method is a member method named \u2018createMetricObject ( ).\u2019 CreateMetricObject( ) accepts three parameters, a user ID, a metric ID, and a metric value. CreateMetricObject( ) implements a switch statement in dependence upon the metric ID to select and instantiate a particular concrete metric class. The concrete metric classes in this example are HeartRateMetric, BloodPressureMetric, and GPSMetric, each of which extends a Metric base class. CreateMetricObject( ) returns to the calling DML a reference to a new metric object. The call from the DML:\n\n",{"@attributes":{"id":"p-0095","num":"0095"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Class GPSMetric extends Metric {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int myUserID;"]},{"entry":[{},"int myMetricID"]},{"entry":[{},"class GPSLocation {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Latitude myLatitude;"]},{"entry":[{},"Longitude myLongitude;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"Class Latitude {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String direction;"]},{"entry":[{},"int degrees;"]},{"entry":[{},"int minutes;"]},{"entry":[{},"int seconds;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"Class Longitude {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String direction;"]},{"entry":[{},"int degrees;"]},{"entry":[{},"int minutes;"]},{"entry":[{},"int seconds;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"GPSLocation myLocation;"]},{"entry":[{},"GPSMetric(int userID, int metricID GPSLocation metric"]},{"entry":[{},"Value) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"myUserID = userID;"]},{"entry":[{},"myMetricID = metricID:"]},{"entry":[{},"myLocation = metricValue;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The example concrete class GPSMetric provides storage for latitude and longitude. GPSMetric provides a constructor GPSMetric( ) that takes integer arguments to set userID and metricID but expects its metricValue argument to be a reference to a GPSLocation object, which in turn provides member data storage for latitude and longitude.","The class diagram of  includes an exemplary metric class (). The exemplary metric class () of  represents a user metric. A user metric comprises data describing an indication of user condition. An indication of a user's condition is a quantifiable aspect of a user's condition and a quantity measuring the aspect. Examples of quantifiable aspects of a user's condition include body temperature, heart rate, blood pressure, location, galvanic skin response, or any other aspect of user condition as will occur to those of skill in the art.","The exemplary metric class () of  includes a user ID field (), a metric ID field (), a value field (). The user ID field () identifies the user. The metric ID () field identifies the user metric that an instance of the metric class represents. That is, the kind of user metric. The value field () includes a value of the user metric.","The exemplary metric class of  also includes data storage for a metric action list (). A metric action list is a data structure containing action IDs identifying actions that when executed administer devices. Typically action IDs in the metric action list are designed to affect the value of the metric. A metric for body temperature, for example, may have an associated metric action list including an action ID that when executed results in turning on a ceiling fan.","This exemplary metric class () is an example of a class that can in various embodiments be used in various embodiments as a generic class, instances of which can be used to store or represent more than one type of metric having identical or similar member data elements as discussed above. Alternatively in other embodiments, a class such as this example metric class () can be used as a base class to be extended by concrete derived classes each of which can have widely disparate member data type, also described above.","The class diagram of  includes a metric vector service (). The metric vector service class () of  provides member methods that create, in response to receiving the user metrics from the metric service, an instance of a metric vector class. In many example embodiments, the createMetricVectorObject( ) member method () identifies from a metric vector list a metric vector ID for the user metric vector in dependence upon the user ID, and the metric ID. If there is not a metric vector for the user and for that metric ID in the metric vector service's metric vector list, the metric vector service instantiates one and stores its metric vector ID in a metric vector table, indexed by the associated user ID and metric ID. Creating a metric vector object can be implemented as illustrated in the following pseudocode segment:",{"@attributes":{"id":"p-0102","num":"0102"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ receive a metric on input stream"]},{"entry":[{},"\/\/ extract its userID as an integer"]},{"entry":[{},"\/\/ instantiate a metric object"]},{"entry":[{},"Metric newMetric = metricService.createMetricObject(metricID);"]},{"entry":[{},"int MetricVectorID = 0;"]},{"entry":[{},"if((MetricVectorID = MetricVectorList.get(userID,"]},{"entry":[{},"metricID)) =\u2009= null) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MetricVector newMetricVector ="]},{"entry":[{},"MetricVectorService.createMetricVectorObject(userID,"]},{"entry":[{},"metricID);"]},{"entry":[{},"MetricVectorID = newMetricVector.MetricVectorID;"]},{"entry":[{},"MetricVectorList.add(MetricVectorID, newMetricVector)"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In the pseudocode example above, if the metric vector service receives a metric having a userID for which it has no metric vector identified in the metric vector service's metric vector table, the metric vector service creates a new metric vector having a new metric vector ID for the user and adds the metric vector to the metric vector list.","The class diagram of  includes a metric vector class (). Objects of the metric vector class represent a complex indication of user condition. A user metric vector typically includes a collection of a user metrics each representing a single quantifiable aspect of a user's condition and a quantity measuring the aspect. A user metric vector comprised of a plurality of disparate user metrics therefore represents a complex indication of user condition having multiple quantifiable aspects of a user's condition and multiple quantities measuring the aspects. The metric vector class () includes data elements for storing a user ID () identifying the user and a metric list () for storing references to a plurality of disparate metric objects.","The exemplary metric vector () of  also includes data storage for a dynamic action list (). A dynamic action list is a list of action IDs created in dependence upon metric action lists that are associated with the particular metrics of the user metric vector that are outside their corresponding metric ranges of the user metric space. That is, each metric of the metric vector that is outside its corresponding metric range has an associated metric action list. A dynamic action list includes action IDs identified in dependence upon those metric action lists associated with the particular metrics of a user metric vector outside their corresponding metric ranges of the user metric space. A dynamic action list advantageously provides a list of action IDs tailored to the user's current condition.","Objects of the exemplary metric vector class also typically include member methods for determining if the metric vector is outside a user metric space. The exemplary metric vector () of  includes a compareVector( ) member method () that in various alternative exemplary embodiments uses different methods to determine whether the user metric vector is outside of the user metric space. In some embodiments, compareVector( ) makes individual comparisons between the values of the metrics of the user metric space with their corresponding metric ranges of the user metric space and identifies the metrics that are outside their corresponding metric ranges. In some exemplary embodiments, compareVector( ) creates a vector value and a metric space value and compares the vector value and the metric space value to determine if the metric vector is outside the metric space.","The exemplary metric vector () of  includes a checkMetric( ) member method (). CheckMetric( ) identifies each user metric having a value that was outside its corresponding metric range prior to executing the action and, after executing an action from the dynamic action list, compares the value of the user metric its corresponding metric range. That is, checkMetric( ) identifies if a metric whose value was outside its metric range before executing the action continues to have a value outside its metric range. In many embodiments, if the value of the metric is inside the metric range, the executed action successfully affected a user's condition. In many embodiments, if the value of the metric is outside the metric range, the executed action was unsuccessful in affecting a user's condition.","This exemplary metric vector class is an example of a class that can, in various embodiments, be used as a generic class, instances of which can be used to store or represent more than one type of vector having identical or similar member data elements. Alternatively in other embodiments, a class such as this example metric vector class can be used as a base class to be extended by concrete derived classes each of which can have disparate member data types.","The class diagram of  includes metric range service class (). The metric range service class () provides member methods that instantiate an instance of a metric range class. The metric range service class () of  includes a createRangeObject(UserID, MetricID) member method (). The createRangeObject( ) member method is a factory method parameterized with a userID and a metric ID that creates a metric range object in dependence upon the userID and metric ID. The createRangeObject( ) factory method returns a reference to the metric range object to the metric object. The createRangeObject( ) is a parameterized factory method that can be implemented using the same design patterns outlined by the exemplary psuedocode provided in the description of the createMetricObject( ) factory method.","The class diagram of  includes an exemplary metric range class (). An instance of the exemplary metric range class represents a predefined metric range for a user for a metric. A maximum value and minimum value in a metric range object are compared with a metric value to determine whether the metric value of the metric object is outside a predefined metric range. The exemplary metric range class () of  includes range ID field () identifying the metric range, and a metric ID field () identifying the user metric. The exemplary metric range class () of  includes a user ID field () identifying the user. The metric range class also includes a Max field () and a Min field () containing a maximum value and a minimum value defining a metric range.","The exemplary metric range class () of  is an example of a so-called data object, that is, a class that serves only as a container for data, with little or no processing done on that data by the member methods of the class. In this example, objects of the metric range class are used primarily to transfer among other objects the minimum and maximum values of a metric range. The metric range class of  includes a default constructor (not shown), but strictly speaking, would need no other member methods. If the metric range class were provided with no other member methods, cooperating object could access its member data elements directly by coding, such as, for example: \u201csomeMetricRange.max\u201d or \u201csomeMetricRange.min.\u201d The particular example in this case (), however, is illustrated as containing accessor methods (, ) for the minimum and maximum values of its range, a practice not required by the invention, but consistent with programming in the object oriented paradigm.","The class diagram of  includes a metric space service class (). The metric space service class () includes a member method createMetricSpace( ) that searches a metric space list, or other data structure, to identify a metric space for a user. If no such metric space exists, createMetricSpace( ) instantiates one and stores the metric space ID in the metric space list. Creating a metric space object can be implemented by way of the following exemplary psuedocode:",{"@attributes":{"id":"p-0113","num":"0113"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ extract its userID and Metric Vector ID as an integer"]},{"entry":[{},"\/\/ instantiate a metric space object"]},{"entry":[{},"Metric Vector newMetricVector"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"=MetricVectorService.createMetricVectorObject(userID,MetricVectorID);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if((spaceID ="]},{"entry":[{},"MetricSpaceList.get(userID,metric vectorID)) =\u2009= null) {"]},{"entry":[{},"MetricSpace newMetricSpace ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"MetricSpaceService.createMetricSpace(userID, MetricVectorID);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SpaceID = newMetricSpace.SpaceID;"]},{"entry":[{},"MetricSpaceList.add(SpaceID, newMetricSpace)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In the pseudo code example above, the metric space service searches a metric space list for a metric space. If the list contains no metric space for the userID and metric vector ID, then MetricSpaceService.createMetricSpace(userID, MetricVectorID) creates a new metric space with a new metric space ID.","The class diagram of  includes a metric space class. The user metric space is comprised of a plurality of user metric ranges for disparate metrics. The exemplary metric space includes data elements for storing a user ID () identifying the user and a space ID () identifying the metric space. The metric space () of  also includes data storage () for a list of references to disparate metric ranges for a user. The disparate metric ranges of the metric space correspond in kind to the metrics in the user metric vector. That is, in typical embodiments, the user metric vector includes a set of disparate current metrics and the user metric space includes a set of corresponding metric ranges for the user.","The class diagram of  includes an action service class (). The action service class includes member methods that instantiate a metric action list for a metric, instantiate action objects, store references to the action objects in the metric action list, and return to a calling metric a reference to the action list, all of which can be implemented as illustrated by the following exemplary pseudocode ActionService class:",{"@attributes":{"id":"p-0117","num":"0117"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ Action Service Class"]},{"entry":[{},"\/\/"]},{"entry":[{},"class ActionService"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public static Action createMetricActionList(userID,"]},{"entry":[{},"MetricID)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MetricActionList aMetricActionList = new"]},{"entry":[{},"MetricActionList( );"]},{"entry":[{},"int actionID;"]},{"entry":[{},"\/\/ with finds of database action records storing data"]},{"entry":[{},"describing actions"]},{"entry":[{},"for(\/* each action record matching userID and"]},{"entry":[{},"metricID *\/) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ obtain action ID from each matching action"]},{"entry":[{},"record"]},{"entry":[{},"actionID = \/\/ action ID from matching database"]},{"entry":[{},"record"]},{"entry":[{},"\/\/ * the action constructors below obtain from"]},{"entry":[{},"a device"]},{"entry":[{},"\/\/ service a list of devices administered by the"]},{"entry":[{},"action object"]},{"entry":[{},"switch(actionID)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"case 1: Action anAction1 = new"]},{"entry":[{},"Action1(DeviceService, actionID);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"aMetricActionList.add(anAction1);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"case 2: Action anAction2 = new"]},{"entry":[{},"Action2(DeviceService, actionID);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"aMetricActionList.add(anAction2);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"case 3: Action anAction3 = new"]},{"entry":[{},"Action3(DeviceService, actionID);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"aMetricActionList.add(anAction3);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"case 4: Action anAction4 = new"]},{"entry":[{},"Action4(DeviceService, actionID);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"aMetricActionList.add(anAction4);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"case 5: Action anAction5 = new"]},{"entry":[{},"Action5(DeviceService, actionID);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"aMetricActionList.add(anAction5);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} \/\/ end switch( )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} \/\/ end for( )"]},{"entry":[{},"return aMetricActionList;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} \/\/ end createMetricActionListObject( )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} \/\/ end class ActionService"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The createMetricActionList ( ) method in ActionService class instantiates a metric action list for a user metric with \u201cMetricActionList aMetricActionList=new MetricActionList( ).\u201d CreateActionList( ) then searches an action record table in a database for records having user IDs and metric IDs matching its call parameters. For each matching record in the table, createMetricActionList( ) instantiates an action object through its switch statement. The switch statement selects a particular concrete derived action class for each action ID retrieved from the action record table. CreateMetricActionList( ) stores a references to each action object in the action list with \u201caMetricActionList.add( ).\u201d CreateMetricActionList( ) returns a reference to the action list with \u201creturn aMetricActionList.\u201d","The exemplary action service class of  includes a newAction( ) member method (). If after executing one or more actions in a dynamic action list, the value of a metric that was outside its metric range before executing the action continues to be outside its range, a calling newAction( ) returns a new action ID. NewAction is typically parameterized with action IDs from the metric action list associated with the user metric having a value that continues to be outside its metric range. In many embodiments, newAction( ) retrieves a new action ID from the action table in dependence upon the action IDs from the metric action list and returns to its caller a new action ID identifying a new action for execution.","The class diagram of  includes an exemplary action class (). An instance of the action class represents an action that when executed results in the administration of a device. The exemplary action class of  includes an action ID field (). The doAction( ) method () in the exemplary action class () is programmed to obtain a device list () from, for example, a call to DeviceService.createDeviceList( ). Action.doAction( ) () typically then also is programmed to call interface methods in each device in its device list to carryout the device controlling action.","The class diagram of  includes a dynamic action list service. The dynamic action list service of  includes a member method createDynamicList ( ) (). In many embodiments, createDynamicList is called by member methods within a user metric vector and parameterized with action IDs retrieved from metric action lists associated with the particular metrics that are outside their correspondingmetric ranges. CreateDynamicList creates a dynamic action list including action IDs identified in dependence upon the metric IDs retrieved from the metric action lists and returns to its caller a reference to the dynamic action list.","The class diagram of  includes a device service class (). The device service class provides a factory method named createDeviceList(actionID) that creates a list of devices and returns a reference to the list. In this example, createDeviceList( ) operates in a fashion similar to ActionService.createMetricActionlist( ) described above, by instantiating a device list, searching through a device table for device IDs from device records having matching action ID entries, instantiating a device object of a concrete derived device class for each, adding to the device list a reference to each new device object, and returning to a calling action object a reference to the device list. In this example, however, the factory method createDeviceList( ) not only retrieves a device ID from its supporting data table, but also retrieves a network address or communications location for the physical device to be controlled by each device object instantiated, as illustrated by the following exemplary pseudocode:",{"@attributes":{"id":"p-0123","num":"0123"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ Device Service Class"]},{"entry":[{},"\/\/"]},{"entry":[{},"class DeviceService"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public static Device createDeviceList(actionID)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DeviceList aDeviceList = new DeviceList( );"]},{"entry":[{},"int deviceID;"]},{"entry":[{},"\/\/ with finds of database device records storing data"]},{"entry":[{},"describing devices"]},{"entry":[{},"for(\/* each device record matching actionID *\/) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ obtain device ID and device address from each"]},{"entry":[{},"matching device record"]},{"entry":[{},"deviceID = \/\/ device ID from matching"]},{"entry":[{},"database record"]},{"entry":[{},"deviceAddress = \/\/ device ID from matching"]},{"entry":[{},"database record"]},{"entry":[{},"\/\/ reminder: the device constructors below"]},{"entry":[{},"obtain from a device"]},{"entry":[{},"\/\/ service a list of devices administered by"]},{"entry":[{},"the device object"]},{"entry":[{},"switch(deviceID)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"case 1: Device aDevice ="]},{"entry":[{},"new Device1(CommsService,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"deviceAddress, deviceID);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"case 2: Device aDevice ="]},{"entry":[{},"new Device2(CommsService"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"deviceAddress, deviceID);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"case 3: Device aDevice ="]},{"entry":[{},"new Device3(CommsService"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"deviceAddress, deviceID);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"case 4: Device aDevice ="]},{"entry":[{},"new Device4(CommsService"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"deviceAddress, deviceID);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"case 5: Device aDevice ="]},{"entry":[{},"new Device5(CommsService"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"deviceAddress, deviceID);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} \/\/ end switch( )"]},{"entry":[{},"aDeviceList.add(aDevice);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} \/\/endfor( )"]},{"entry":[{},"return aDeviceList;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} \/\/ end createDeviceListObject( )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} \/\/ end class DeviceService"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The createDeviceList ( ) method in DeviceService class instantiates a device list for a metric with \u201cDeviceList aDeviceList=new DeviceList( ).\u201d CreateDeviceList( ) then searches a device record table in a database for records having action IDs matching its call parameter. For each matching record in the table, createDeviceList( ) instantiates a device object through its switch statement, passing three parameters, CommsService, deviceAddress, and deviceID. CommsService is a reference to a communications service from which a device object can obtain a reference to a communications object for use in communicating with the physical device controlled by a device object. DeviceAddress is the network address, obtained from the device table as described above, of the physical device to be controlled by a particular device object. The switch statement selects a particular concrete derived device class for each device ID retrieved from the device table. CreateDeviceList( ) stores references to each device object in the device list with \u201caDeviceList.add( ).\u201d CreateDeviceList( ) returns a reference to the device list with \u201creturn aDeviceList.\u201d","The class diagram of  includes an exemplary device class (). The exemplary device class () of  includes a deviceID field () uniquely identifying the physical device to be administered by the execution of the action. The exemplary device class () of  includes an address field () identifying a location of a physical device on a data communications network. The exemplary device class () of  provides a communications field () for a reference to an instance of a communications class that implements a data communications protocol to effect communications between an instance of a device class and a physical device.","The device class of  includes an attribute field () containing a value of current attribute of the device. An example of a current attribute of a device is an indication that the device is \u201con\u201d or \u201coff.\u201d Other examples of current attributes include values indicating a particular setting of a device. The device class of  also includes accessor methods (, ) for getting and setting attributes of a physical device. While the exemplary device class of  includes only one attribute field and accessor methods for getting and setting that attribute, many device classes useful in implementing methods of the present invention can support more than one attribute. Such classes can also include an attribute ID field and accessor methods for getting and setting each attribute the device class supports.","The exemplary class diagram of  includes a communications service class (). The communications service class () provides a factory method named createCommsObject(deviceID, networkaddress) () that instantiates a communications object that implements a data communications protocol to effect communications between an instance of a device class and a physical device. The createCommsObject( ) method () finds a communications class ID in a communications class record in a communication class table having a device ID that matches its call parameter. In many embodiments, the createCommsObject( ) method () then instantiates a particular concrete derived communications class identified through a switch statement as described above, passing to the constructor the networkAddress from its parameter list, so that the new communications object knows the address on the network to which the new object is to conduct data communications. Each concrete derived communications class is designed to implement data communications according to a particular data communications protocol, Bluetooth, 802.11b, Lonworks, X-10, and so on.","Class diagram of  includes an exemplary communications base class (). In typical embodiments, at least one concrete communications class is derived from the base class for each data communications protocol to be supported by a particular DML. Each concrete communications class implements a particular data communications protocol for communications device objects and physical devices.","Each concrete communications class implements a particular data communications protocol by overriding interface methods (, ) to implement actual data communications according to a protocol.","Communications classes allow device classes () to operate independently with respect to specific protocols required for communications with various physical devices. For example, one light in a user's home may communicate using the LonWorks protocol, while another light in the user's home may communicate using the X-10 protocol. Both lights can be controlled by device objects of the same device class using communications objects of different communications classes, one implementing LonWorks, the other implementing X-10. Both device objects control the lights through calls to the same communications class interface methods, send( ) () and receive( ) (), neither knowing nor caring that in fact their communications objects use different protocols.",{"@attributes":{"id":"p-0131","num":"0131"},"figref":["FIG. 4","FIG. 3","FIG. 4","FIG. 4"]},"The exemplary class relationship diagram of  includes a DML class (). A DML object of the DML class () instantiates an object of the metric service class (), an object of the metric vector service class (), and an object of the metric space service class (). The DML object also instantiates an object of the metric range service class () an object of the action service class (), and an object of the dynamic action list service class (). The DML object also instantiates an object of the device service class () and an object of the communications service class ().","When the DML receives a metric () from a metric sensor, the DML uses a call such as:\n\n","As shown in the class relationship diagram of , a metric vector service () instantiates an object of the metric vector class (). In many embodiments, the metric vector service class receives a reference to a metric object and using a parameterized factory method, such as createMetricVectorObject( ), instantiates a metric vector object. As shown in the class relationship diagram of , an object of the metric vector class () contains a reference to an object of the metric class (), an object of the metric space service class (), an object of the metric space class (), an object of the dynamic action list service class () and a dynamic action list ().","As shown in the class relationship diagram of , a metric space service () instantiates an object of the metric space class (). In many example embodiments, a metric space service uses a parameterized factory method, such as createMetricSpace( ), to instantiate a metric space object. The metric space service passes a reference to the metric space object () to the metric vector object. The metric space object () contains a reference to objects of the metric range class ().","As shown in the class relationship diagram of , the metric range service () instantiates an object of the metric range class (). In many examples embodiments of the present invention, the metric range service () uses a parameterized factory method, such as createRangeObject( ), to instantiate the metric range (). The metric range service () passes to the metric space service () a reference to the metric range ().","As shown in the class relationship diagram of , an action service () instantiates a metric action list () and objects of action classes (). The metric action list () is instantiated with references to each of the instantiated actions (). Each action () is instantiated with a reference to the device service (). In typical examples of methods according to the present invention, the action service () uses a parameterized factory method, such as createMetricActionList( ), to instantiate a metric action list () and instantiate actions (). The action service () passes, to the metric (), a reference to the metric action list ().","As shown in , the dynamic action list service () instantiates a dynamic action list () and passes a reference to the dynamic action list () to calling methods in the metric vector (). In typical examples of methods according to the present invention, the dynamic action list service () uses a method, such as createDynamicActionList( ) to instantiate a dynamic action list. In many embodiments, createDynamicActionList( ) is parameterized with action IDs of metric action lists associated with user metrics that are outside their corresponding metric ranges. The dynamic action list () possesses references to objects of the action class ().","In the example of , the device service () instantiates a device list of the device list class () and instantiates a device object of the device class (). The device list () is instantiated with a reference to the device object (). The device object () is instantiated with a reference to the communications service (). In typical examples of methods according to the present invention, the device service () uses a parameterized factory method, such as createDeviceList( ), to instantiate a device list () and instantiate a device object (). The device service () passes, to the action (), a reference to the device list ()","In the example of , the communications service () instantiates a communications object of the communications class (). In typical examples of the methods according to the present invention, the communications service () uses a parameterized factory method, such as createCommsObject( ), to instantiate a communications object (). The communications service () passes, to the device object (), a reference to the communications object ().",{"@attributes":{"id":"p-0141","num":"0142"},"figref":["FIG. 5","FIG. 5"],"b":["302","206"]},"In typical embodiments of the present invention, a user metric is implemented as a user metric data structure or record (), such as the exemplary user metric () of . The user metric of  includes a userID field () identifying the user whose indication of condition is represented by the metric. The user metric () of  also includes a metric ID field () identifying the aspect of user condition the metric represents, such as, for example, blood pressure, heart rate, location, or galvanic skin response. The user metric () also includes a value field () containing the value of the aspect of the user's condition that the metric represents. An example of a value of a metric is a body temperature of 100\u00b0 Fahrenheit.","In many embodiments of the method of , receiving () a user metric includes receiving a user metric from a metric sensor (). In some examples of the method of , the metric sensor () reads an indication of a user's condition, creates a user metric in dependence upon the indication of a user's condition, and transmits the user metric to a DML. In many embodiments, the metric sensor transmits the user metric to the DML in a predefined data structure, such as the metric () of , to the DML using, for example, protocols such as Bluetooth, 802.11, HTTP, WAP, or any other protocol that will occur to those of skill in the art.","In the method of , receiving () a user metric includes receiving a user metric into metric cache memory (). That is, a user metric is received by a DML and then stored in cache. In many embodiments of the method of , metric cache memory () is cache memory available to a DML to facilitate carrying out steps of administering devices in accordance with the present invention.","The method of  includes determining () whether a value of the user metric is outside () of a predefined metric range. A predefined metric range includes a predetermined range of values for a given metric ID for a particular user. In many embodiments of the method of , the predefined metric range is designed as a range of typical or normal metrics values for a user. One example of a predefined metric range is a range of metric values representing a resting heart rate of 65\u201385 beats per minute.","In many examples of the method of , a predefined metric range for a user is implemented as a data structure or record such as the metric range () of . The metric range of  includes a metric ID field () identifying the kind of user metrics. The metric range of  includes a user ID field () identifying the user for whom the metric range represents a range of metric values. The metric range of , for example, includes a Max field () representing the maximum metric value of the metric range and a Min field () representing the minimum metric value of the metric range. That is, in typical embodiments, it is a maximum and minimum metric value in a range that defines a value range for the metric.","In many embodiments, determining () that the value of the user metric () is outside () of a predefined metric range includes comparing the metric value of a user metric with the maximum and minimum values from a metric range for that metric and for the same user. In many examples of the method of , determining that a user metric is outside a predefined metric range also includes determining that the metric value () of the user metric () is either greater than the maximum value () of the metric range () or below the minimum value () of the range in the metric range (). A user metric of metric ID identifying the metric as \u2018heart rate\u2019 having, for example, a metric value of 100 beats per minute is outside the exemplary metric range for resting heart rate of 65\u201385 beats per minute.","If the value of the user metric is outside the metric range, the method of  includes identifying () an action in dependence upon the user metric. An action includes one or more computer programs, subroutines, or member methods that when executed, control one or more devices. Actions are typically implemented as object oriented classes and manipulated as objects or references to objects. In fact, in this specification, unless context indicates otherwise, the terms \u2018action,\u2019 \u2018action object,\u2019 and \u2018reference to an action object\u2019 are treated more or less as synonyms. In many embodiments of the method of , an action object calls member methods in a device class to affect current attributes of the physical device. In many embodiments of the method of , action classes or action objects are deployed in OSGi bundles to a DML on a services gateway.","In the method of , identifying () an action includes retrieving () an action ID () from a metric action list () organized by user ID and metric ID. In the method of , retrieving an action ID from a metric action list includes retrieving from a list the identification of the action (the \u2018action ID\u2019) to be executed when a value of a metric of a particular metric ID and for a particular user is outside the user's predetermined metric range. The action list can be implemented, for example, as a Java list container, as a table in random access memory, as a SQL database table with storage on a hard drive or CD ROM, and in other ways as will occur to those of skill in the art.","As mentioned above, the actions themselves comprise software, and so can be implemented as concrete action classes embodied, for example, in a Java package imported into the DML at compile time and therefore always available during DML run time. Executing () an action () therefore is often carried out in such embodiments by use of a switch( ) statement in the DML. Such a switch( ) statement can be operated in dependence upon the action ID and implemented, for example, as illustrated by the following segment of pseudocode:",{"@attributes":{"id":"p-0151","num":"0152"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"switch (actionID) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Case 1: actionNumber1.take_action( ); break;"]},{"entry":[{},"Case 2: actionNumber2.take_action( ); break;"]},{"entry":[{},"Case 3: actionNumber3.take_action( ); break;"]},{"entry":[{},"Case 4: actionNumber4.take_action( ); break;"]},{"entry":[{},"Case 5: actionNumber5.take_action( ); break;"]},{"entry":[{},"\/\/ and so on"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} \/\/ end switch( )"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The exemplary switch statement selects a particular device controlling object for execution depending on the action ID. The device controlling objects administered by the switch( ) in this example are concrete action classes named actionNumber1, actionNumber2, and so on, each having an executable member method named \u2018take_action( ),\u2019 which carries out the actual work implemented by each action class.","Executing () an action () also is often carried out in such embodiments by use of a hash table in the DML. Such a hash table can store references to action object keyed by action ID, as shown in the following pseudocode example. This example begins by an action service creating a hashtable of actions, references to objects of concrete action classes associated with a particular metric ID, using action IDs as keys. In many embodiments it is an action service that creates such a hashtable, fills it with references to action objects pertinent to a particular metric ID, and returns a reference to the hashtable to a calling metric object.",{"@attributes":{"id":"p-0154","num":"0155"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Hashtable ActionHashTable = new Hashtable( );"]},{"entry":[{},"ActionHashTable.put(\u201c1\u201d, new Action1( ));"]},{"entry":[{},"ActionHashTable.put(\u201c2\u201d, new Action2( ));"]},{"entry":[{},"ActionHashTable.put(\u201c3\u201d, new Action3( ));"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Executing a particular action then can be carried out according to the following pseudocode:",{"@attributes":{"id":"p-0156","num":"0157"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Action anAction = (Action) ActionHashTable.get(\u201c2\u201d);"]},{"entry":[{},"if (anAction != null) anAction.take_action( );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Many examples in this specification are described as implemented with lists, often with lists of actions, for example, returned with a reference to a list from an action service, for example. Lists often function in fashion similar to hashtables. Executing a particular action, for example, can be carried out according to the following pseudocode:",{"@attributes":{"id":"p-0158","num":"0159"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"List ActionList = new List( );"]},{"entry":[{},"ActionList.add(1, new Action1( ));"]},{"entry":[{},"ActionList.add(2, new Action2( ));"]},{"entry":[{},"ActionList.add(3, new Action3( ));"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Executing a particular action then can be carried out according to the following pseudocode:",{"@attributes":{"id":"p-0160","num":"0161"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Action anAction = (Action) ActionList.get(2);"]},{"entry":[{},"if (anAction != null) anAction.take_action( );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The three examples just above use switch statements, hash tables, and list objects to explain executing actions according to embodiments of the present invention. The use of switch statements, hash tables, and list objects in these examples are for explanation, not for limitation. In fact, there are many ways of executing actions according to embodiments of the present invention, as will occur to those of skill in the art, and all such ways are well within the scope of the present invention.",{"@attributes":{"id":"p-0162","num":"0163"},"figref":["FIG. 6","FIG. 6"],"b":["380","214","316"]},"In the method of , executing an action includes identifying () a communication class () for the physical device (). To communicate the member methods of the device class to the physical device, a communications class implements a protocol for communicating with a physical device. Typical communications classes include member methods that construct, transmit, and receive data communications messages in accordance with the protocol implemented by a communication class. The member methods in a communication class transmit and receive data communications messages to and from a physical device. A communications class advantageously separates the protocols used to communicate with the physical device from the actions to be effected on the device, so that a device class interface comprising get( ) and set( ) methods, for example, can usefully communicate with a physical device by use of any data communications protocol with no need to reprogram the device class and no need to provide one device class for each combination of physical device and protocol.","For further explanation, consider the following brief use case. A user's metric sensor reads the user's heart rate at 100 beats per minute, and creates a metric for the user having a user ID identifying the user, a metric ID identifying the metric as \u201cheart rate,\u201d and a metric value of 100. The metric sensor transmits the user metric to the DML through a services gateway. The DML receives the user metric and compares the user metric with the user metric range for resting heart rates having a range of 65\u201385. The DML determines that the user metric is outside the predefined metric range. The DML uses the user ID and the metric ID to retrieve from a list an action ID for a predefined action to be executed in response to the determination that the value of the user's heart rate metric value is outside the user's metric range for heart rate. The DML finds a device controlling-action ID identifying an action object having a class name of \u2018someAction,\u2019 for example, and also having an interface member method known to the DML, such as the take_action ( ) method described above in the switch ( ) statement.","In this example, the DML effects the action so identified by calling someAction.take_action( ). The take_action( ) method in this example is programmed to call a device service for a list of references to device objects representing physical devices whose attributes are to be affected by the action. The device service is programmed with a switch( ) statement to create in dependence upon the action ID a list of references to device objects and return the device list to the callingaction object, or rather, to the calling take_action( ) method in the action object.","In creating the device list, the device service is programmed to instantiate each device having a reference entered in the list, passing as a constructor parameter a reference to a communications service. Each device so instantiated has a constructor programmed to call a parameterized factory method in the communications service, passing as a parameter an identification of the calling device object. The communications service then instantiates and returns to the device a reference to a communication object for the communications protocol needed for that device object to communicate with its corresponding physical device.","The principal control logic for carrying out an action typically, in embodiments of the present invention, resides in the principal interface method of an action class and objects instantiated from it. In this example, the take_action( ) method is programmed to carry out a sequence of controlling method calls to carry out the changes on the physical devices that this action class was developed to do in the first place. The take_action( ) method carries out this work with a series of calls to accessor methods (set( ) and get( ) methods) in the device objects in its device list.",{"@attributes":{"id":"p-0168","num":"0169"},"figref":["FIG. 7","FIG. 7"],"b":["306","206","210","206","206","405","407","409"]},"In the example of , a predefined metric range for a metric is represented in data as a metric range such as the metric range () of . The exemplary metric range () sets forth a maximum range value () and a minimum range value () for a particular user for a particular metric. The particular user and the particular metric for the exemplary range are identified respectively in a user ID field () and a metric ID field ().","In the method of , determining () that value of the user metric () is outside () of a predefined metric range () includes measuring () a degree () to which the user metric () is outside () the predefined metric range (). In many embodiments of the present invention, measuring () the degree () to which the user metric () is outside () the metric range () includes identifying the magnitude by which the value of the user metric is greater than the maximum metric value the metric range or the magnitude by which the value of the user metric value is less than the minimum value of the predefined metric range. To the extent that measuring the degree to which a metric is out of range includes identifying a measure as greater than a maximum range value or less than a minimum range value, the measurement often advantageously includes both a magnitude and an indication of direction, such as, for example, a sign (+ or \u2212), an enumerated indication such as, for example, \u2018UP\u2019 or \u2018DOWN\u2019, or a Boolean indication such as true for high and false for low.","In the method of , identifying () an action in dependence upon the user metric includes identifying () an action in dependence upon the degree () to which the value of the user metric () is outside () the metric range and also often in dependence upon the direction in which the metric is out of range. In many embodiments of the method of , identifying () the action in dependence upon the degree () to which the user metric is outside the predefined metric range includes retrieving an action ID from a metric action list organized by metric ID, user ID, degree, and direction.","In many DMLs according to the present invention are preinstalled device classes for all of the devices the DML supports. Newly acquired physical devices identify themselves as being on the network and the DML associates the device ID with the device class already installed on the DML. In such an example embodiment, the DML identifies the device by associating the device ID with the pre-installed device class.",{"@attributes":{"id":"p-0173","num":"0174"},"figref":["FIG. 8","FIG. 8"],"b":["604","606","206"]},"The term \u2018disparate\u2019 user metrics means user metrics of different kinds. A user metric vector () being comprised of a plurality of disparate user metrics is therefore a complex indication of a user's condition comprising a plurality of different kinds of aspects of user condition and plurality of quantities measuring those aspect. In many examples of the method of , the user metric vector () comprises references to the current user metric objects instantiated by a metric service.","In typical embodiments of the present invention, a user metric vector is implemented as a user metric vector data structure or record, such as the exemplary user metric vector () discussed above with reference to . The user metric vector () includes a user ID ( on ) identifying the user and a metric vector ID ( on ) uniquely identifying the user metric vector. The user metric vector () also includes data storage for a metric list ( on ) containing references to disparate user metrics.","In the method of , creating () a user metric vector () includes receiving () a plurality of disparate user metrics () having a plurality of metric values and a plurality of disparate metric IDs. In many embodiments of the method of , receiving () a plurality of disparate user metrics () includes receiving disparate user metrics from one or more metric sensors (). In some examples of the method of , the metric sensor () reads an indication of a user's condition, creates a user metric in dependence upon the indication of a user's condition, and transmits the user metric to a DML In many embodiments, the metric sensor transmits the user metric to the DML in a predefined data structure, such as the metric () of , to the DML using, for example, protocols such as Bluetooth, 802.11, HTTP, WAP, or any other protocol that will occur to those of skill in the art.","In the method of , creating () a user metric vector () includes associating () the plurality of disparate user metrics () with the user metric vector (). \u2018Associated,\u2019 generally in this disclosure and subject to context, means associated by reference. That is, saying that an object of one class is associated with another object means that the second object possesses a reference to the first. The objects can be mutually associated, each possessing a reference to the other. Other relations among objects, aggregation, composition, and so on, are usually types of association, and the use of any of them, as well as others as will occur to those of skill in the art, is well within the scope of the present invention. In the exemplary method of , associating () the plurality of disparate user metrics () with the user metric vector () is carried out by providing references to a plurality of disparate metric objects in the user metric vector ().","In the method of , creating () a user metric vector () comprising a plurality of disparate user metrics () includes associating () at least one metric action list () with each disparate user metric (). In many examples of the method of , a plurality of metric action lists are associated with each metric of the user vector. The action IDs included in a metric action list associated with a particular metric identify actions designed to administer devices in accordance with the particular aspect of user condition represented by that metric. That is, a metric action list is tailored to affecting the user condition represented by the metric. For example, a metric list associated with a body temperature metric may include actions that administer devices such as an air conditioner, a fan, a heater, automated window shades and the like.","In many examples of the method of , creating a user metric vector includes associating a plurality of metric action lists with a single user metric. Some such examples of the method of  include associating one metric action list with the user metric including action IDs for execution when the value of the user metric is above its corresponding metric range and another metric action list including action IDs for execution when the value of the user metric is below its corresponding metric range. Some examples of the method of  also include associating metric action lists with a user metric that include action IDs for execution in dependence upon the degree and direction that the user metric is outside its corresponding metric range.","The method of  includes creating () a user metric space () comprising a plurality of metric ranges (). A user metric space () is comprised of a plurality of disparate metric ranges for a user. That is, a metric space is defined by a plurality of disparate metric ranges for a plurality of disparate metric IDs. In many exemplary embodiments of the present invention, a metric space is implemented as a metric space data structure such as the exemplary metric space () of  including a user ID and data storage () for a list of references to disparate metric ranges for a user.","In many examples of the method of , a user metric space () is comprised of a plurality of disparate metric ranges that correspond in kind to the user metrics containing in the user metric vector. In the method of , creating () a user metric space () includes identifying () a plurality of metric ranges () for a plurality of disparate metrics () and associating () the plurality of disparate metric ranges () for the plurality of disparate metrics () with the user metric space ().","In many examples of the method of , identifying () a plurality of metric ranges () and associating () the plurality of metric ranges () the user metric space () is carried out by a metric space service that is instantiated by a DML. The metric space service receives, from a user metric vector, a user metric vector ID and searches a metric space list identified by metric vector ID for a metric space and returns to the user metric vector a metric space ID identifying a metric space for comparison with the user metric vector. If there is no metric space for the metric vector ID, the metric space service instantiates one and stores the metric space ID in the metric space table.","The method of  includes determining () whether the user metric vector () is outside () the user metric space (). In various alternative example embodiments determining () whether the user metric vector () is outside () a user metric space () is carried out using different methods. Methods of determining whether the user metric vector () is outside () a user metric space () range in complexity from relatively straightforward comparison of the user metrics of the metric vector with their corresponding metric ranges of the metric space to more complex algorithms. Exemplary methods of determining () whether the user metric vector () is outside () a user metric space () are described in more detail below with reference to .","If the user metric vector () is outside () a user metric space (), the method of  includes creating (), in dependence upon the user metric vector (), a dynamic action list (). In many examples of the method of , a dynamic action list is a list of action IDs created in dependence upon metric action lists that are associated with the particular metrics of the user metric vector that are outside their corresponding metric ranges of the user metric space. That is, each metric of the metric vector that is outside its corresponding metric range has an associated metric action list. The associated metric action list includes action IDs for execution when its associated metric is outside its corresponding metric range. A dynamic action list is an action list including action IDs identified in dependence upon those metric action lists associated with the particular metrics of a user metric vector outside their corresponding metric ranges of the user metric space. A dynamic action list advantageously provides a list of action IDs identifying actions that are tailored to the user's current condition.","In many example embodiments of the present invention, creating a dynamic action list includes calling member methods in a dynamic action service object. In many examples of the method of , creating a dynamic action list includes parameterizing a member method, such as createDynamicActionList( ), with action IDs retrieved from action lists associated with the particular user metrics of the user metric vector that are outside their corresponding metric ranges of the user metric space. In many examples of the method of , createDynamicActionList( ) returns to its caller in the user metric vector a dynamic action list including action IDs identified in dependence upon the action IDs contained in metric action lists. In various alternative examples of the method of , a dynamic action list can is implemented, for example, as a hashtable, Java list container, as a table in random access memory, as a SQL database table with storage on a hard drive or CD ROM, and in other ways as will occur to those of skill in the art.","The method of  includes identifying () at least one action () in the dynamic action list (). In typical embodiments of the method of , identifying an action includes retrieving from a dynamic action list the identification of the action (the \u2018action ID\u2019) to be executed.","An action typically includes one or more computer programs, subroutines, or member methods that when executed, control one or more devices. Actions are typically implemented as object oriented classes and manipulated as objects or references to objects. In fact, in this specification, unless context indicates otherwise, the terms \u2018action,\u2019 \u2018action object,\u2019 and \u2018reference to an action object\u2019 are treated more or less as synonyms. In many examples of the method of , an action object calls member methods in a device class to affect current attributes of the physical device.","In many examples of the method of , action classes or action objects are deployed in OSGi bundles to a DML on a services gateway.","The method of  includes executing () the action (). Executing an action therefore is often carried out in such embodiments by use of a switch( ) statement in the DML. Such a switch( ) statement can be operated in dependence upon the action ID and implemented, for example, as illustrated by the following segment of pseudocode:",{"@attributes":{"id":"p-0190","num":"0191"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"switch (actionID) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Case 1: actionNumber1.take_action( ); break;"]},{"entry":[{},"Case 2: actionNumber2.take_action( ); break;"]},{"entry":[{},"Case 3: actionNumber3.take_action( ); break;"]},{"entry":[{},"Case 4: actionNumber4.take_action( ); break;"]},{"entry":[{},"Case 5: actionNumber5.take_action( ); break;"]},{"entry":[{},"\/\/ and so on"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} \/\/ end switch( )"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The exemplary switch statement selects a particular device controlling object for execution depending on the action ID. The device controlling objects administered by the switch( ) in this example are concrete action classes named actionNumber1, actionNumber2, and so on, each having an executable member method named \u2018take_action( ),\u2019 which carries out the actual work implemented by each action class.","In many examples of the method of , executing an action is carried out use of a hash table in a DML. Such a hash table stores references to action object keyed by action ID, as shown in the following pseudocode example. This example begins by a dynamic action list service creating a hashtable of actions, references to objects of concrete action classes associated with a particular metric ID, using action IDs as keys. In many embodiments it is a dynamic action list service that creates such a hashtable, fills it with references to action objects pertinent to a particular metric ID of the user metric vector outside its corresponding metric range of the user metric space, and returns a reference to the hashtable to a calling vector object.",{"@attributes":{"id":"p-0193","num":"0194"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Hashtable DynamicActionHashTable = new Hashtable( );"]},{"entry":[{},"DynamicActionHashTable.put(\u201c1\u201d, new Action1( ));"]},{"entry":[{},"DynamicActionHashTable.put(\u201c2\u201d, new Action2( ));"]},{"entry":[{},"DynamicActionHashTable.put(\u201c3\u201d, new Action3( ));"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Executing a particular action then can be carried out according to the following pseudocode:",{"@attributes":{"id":"p-0195","num":"0196"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Action anAction = DynamicActionHashTable.get(\u201c2\u201d);"]},{"entry":[{},"if (anAction != null) anAction.take_action( );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Many examples of the method of  are also implemented through the use of lists. Lists often function in fashion similar to hashtables. Building such a list can be carried out according to the following pseudocode:",{"@attributes":{"id":"p-0197","num":"0198"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"List DynamicActionList = new List( );"]},{"entry":[{},"DynamicActionList.add(1, new Action1( ));"]},{"entry":[{},"DynamicActionList.add(2, new Action2( ));"]},{"entry":[{},"DynamicActionList.add(3, new Action3( ));"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Executing a particular action then can be carried out according to the following pseudocode:",{"@attributes":{"id":"p-0199","num":"0200"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Action anAction = DynamicActionList.get(2);"]},{"entry":[{},"if (anAction != null) anAction.take_action( );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The three examples just above use switch statements, hash tables, and list objects to explain executing actions according to embodiments of the present invention. The use of switch statements, hash tables, and list objects in these examples are for explanation, not for limitation. In fact, there are many ways of executing actions according to embodiments of the present invention, as will occur to those of skill in the art, and all such ways are well within the scope of the present invention.","In some examples of the method of , executing an action includes identifying a device class for the device. Typical device classes include member methods for administering the device. Typical member methods for administering the device include member methods for getting and setting values of device attributes in physical devices. In the case of a lamp supporting multiple settings for light intensity, for example, a member method get( ) in a device class can get from the lamp a value for light intensity, and a member method set( ) in a device class sets the light intensity for the lamp.","In many examples of the method of , executing an action includes identifying a communications class for the device. To communicate the member methods of the device class to the physical device, a communications class implements a protocol for communicating with a physical device. Typical communications classes include member methods that construct, transmit, and receive data communications messages in accordance with the protocol implemented by a communication class. The member methods in a communication class transmit and receive data communications messages to and from a physical device. A communications class advantageously separates the protocols used to communicate with the physical device from the actions effecting the device, so that a device class interface comprising get( ) and set( ) methods, for example, can usefully communicate with a physical device by use of any data communications protocol with no need to reprogram the device class and no need to provide one device class for each combination of physical device and protocol.","In many examples of the method of , executing one or more actions included in the dynamic action list affect the user's condition causing the values of the user metrics to change. Furthermore, in many examples of the method of , the actions are designed to affect more or more metrics. In typical examples of the method of , if the executed actions were effective in changing the metric values, the values of those metrics that were outside their corresponding metric ranges prior to executing the actions are inside their metric range after executing the action. That is, executing the effective actions often results in the values of user metrics being within their metric ranges.","The method of  includes determining () whether a value of a user metric () of the user metric vector () that was outside () a metric range () of the user metric space () before executing () the action () is outside () the metric range () after executing () the action (). In many examples of the method of , determining () whether a value of a user metric () of the user metric vector () that was outside () a metric range () of the user metric space () before executing () the action () is outside () the metric range () after executing () the action () includes waiting a period of time after the executing () the action () and comparing the value of the metric with its metric range. In many examples of the method of , the period of time is long enough to allow the effects on the user's condition caused by executing the action to manifest, but short enough so that the changes occurring in value of the user metric can be attributed to executing the action.",{"@attributes":{"id":"p-0205","num":"0206"},"figref":["FIG. 9","FIG. 9","FIG. 9"]},"In the method of , determining () whether a value of a user metric () of the user metric vector () that was outside a metric range () of the user metric space () before executing the action is outside the metric range () after executing the action includes identifying () a metric () having a value that was outside the metric range () before executing the action and comparing () the value of the user metric () and the metric range (). In typical examples of the method of , at least one metric having a value outside its corresponding metric range was identified when the user metric vector was determined to be outside the user metric space. In many examples of the method of , comparing () the user metric () and the metric range () includes comparing the value of the user metric to the maximum and minimum values of the metric range.","In some examples of the method of , determining () whether a user metric () of the user metric vector () that was outside () a metric range () of the user metric space () before executing () the action () is outside () the metric range () after executing () the action () includes calling a member method in a metric vector object. One example of such a member method, checkMetric( ) ( on ), identifies each user metric having a value that was outside its corresponding metric range prior to executing the action. CheckMetric( ) compares the value of the user metric with the metric range. In many examples of the method of , checkMetric( ) returns a Boolean indication identifying whether the metric value is within the metric range.","If the value of the user metric is outside its corresponding metric range, the method of  includes identifying () a new action (). A new action () is an action that was not previously executed or included in a metric action list in whose dependence the executed action was identified. That is, a new action is an action that was not previously included in the metric action list associated with the user metric that was outside its corresponding metric range before executing the action and was not included in the dynamic action list created in dependence upon that associated metric action list. The phrase \u2018new action\u2019 is used only to distinguish an action previously included in a metric action list or dynamic action list from an action not included in either a metric action list or the dynamic action list. The term new action is not used to imply age of the action. As discussed above, an action typically includes one or more computer programs, subroutines, or member methods that when executed, control one or more devices. When an action was actually created therefore has no bearing on whether the action is a new action in the context of this specification.","In many examples of the method of , identifying () a new action () comprises retrieving () an action ID () from an action table (). In many examples of the method of , an action table is a data structure including action IDs indexed by other action IDs. Some exemplary action tables include action IDs identifying actions designed to affect a particular metric indexed by other action IDs also designed to affect that metric. Some exemplary action tables include action IDs identifying superceding actions indexed by action IDs indexed by superceded actions. A superseding action is an action that when executed administers the same device in the same direction as another superseded action, but administers the device to a greater degree than the other superseding action. For example, the execution of an action ID that results in changing the value of a current attribute of a ceiling fan from \u201c5\u201d to \u201c4\u201d is superseded by the execution of an action ID that results in changing the same ceiling fan attribute from \u201c5\u201d to \u201c2.\u201d Action tables can be implemented, for example, as a table in random access memory, as a SQL database table with storage on a hard drive or CD ROM, and in other ways as will occur to those of skill in the art.","In some examples of the method of , an action table includes action IDs indexed by metric ID. That is, in some examples of the method of , actions designed to affect a particular metric are indexed by that metric ID. Such an action table facilitates identifying a new action in dependence upon the metric ID of the metric having a value that continues to be outside its corresponding metric range.","In many examples of the method of , identifying a new action includes calling member methods in an action service, such as newAction( ) ( on ). In some examples newAction( ) is parameterized with the action IDs of the metric action list associated with the user metric having a value continuing to be outside its metric range. NewAction retrieves a new action ID from the action table in dependence upon the action IDs from the metric action list and returns to its caller a new action ID not previously included in the metric action list. In other examples of the method of , newAction( ) new action is parameterized with the metric ID identifying the metric type. In some examples, NewAction looks up a metric type code on a table in dependence upon the metric ID, retrieves a new action ID in dependence upon the metric type code, and returns to its caller a new action ID not previously included in the metric action list.","The method of  includes executing () the new action (). In many examples of the method of , executing the new action is carried out by use of a switch( ) statement, a hashtable, a list, or any other way of executing an action that will occur those of skill in the art. The use of switch statements, hash tables, and list objects in these examples are for explanation, not for limitation. In fact, there are many ways of executing actions according to embodiments of the present invention, as will occur to those of skill in the art, and all such ways are well within the scope of the present invention.","After executing the new action, the method of  includes determining () whether a user metric () of the user metric vector () that was outside () a metric range () of the user metric space () before executing () the new action () is outside () the metric range () after executing () the new action (). The method of  typically includes waiting for a period of time and then comparing the value of the user metric with its corresponding metric range to determine if executing the action caused the value of the user metric to be inside its predetermined metric range. If the value of the user metric continues to remain outside its corresponding metric range, the steps of identifying () a new action () and executing the new action () until a new action is identified and executed that is effective. That is, the steps of identifying and executing a new action repeat until a new action is identified and executed that affects the user's condition causing the value of the user metric to be inside its corresponding the metric range.","The method of  also includes adding () the new action to the metric action list () associated with the user metric (). Many examples of the method of  include adding the action ID identifying the new action that effectively altered the user's condition causing the value of the user metric to be inside its corresponding metric range. In some examples of the method of , adding () the new action to the metric action list () associated with the user metric () includes calling a member method in the metric action list object such as aMetricActionList.add( ) parameterized with a new action ID identifying the new action. aMetricActionList.add( ) adds the new action ID to the metric action list.","In some examples of the method of , adding () an action ID () to a metric action list () associated with the user metric () comprises replacing () an action ID () included in the metric action list () with another action ID. In some examples of , where the new action is superseding action identified by another action ID in the metric action list, adding the new action to the metric action list includes replacing an action ID identifying a superceded action with an action ID identifying the new action.","So far the discussion of the method of  has described steps to be carried out in dependence upon an executing an ineffective action or set of actions. That is, steps to be carried out if executing the action identified in the dynamic action list does not result in changing a user's condition such that the value of a user metric that was outside its corresponding metric range before executing the action is inside the metric range after executing the action. When executing a plurality of actions effectively affects the user's condition, the possibility arises that one or more of the executed actions were unnecessary to affect the values of the user metric. That is, executing fewer actions would have affected the user's condition and resulted in the values of the user metrics being within their corresponding metric ranges. Executing these unnecessary actions is inefficient.","If after executing one or more actions in the dynamic action list, a value of a metric that was previously outside its corresponding metric range is inside its metric range, then the method of  includes deleting () an action ID () from a metric action list () associated with the user metric (). In some examples of the method of , deleting an action ID includes randomly selecting an action ID in the metric action list and removing the action ID from the metric action list. In some examples of the method of , deleting () an action ID () from a metric action list () include calling a member method in the metric action list object such as aMetricActionList.delete( ). aMetricActionList.delete( ) deletes the action ID from the metric action list.","The deleted action is no longer in the metric action list and is therefore not available for inclusion in the dynamic action list the next time the user metric is outside its metric range and the user metric vector is outside its metric space. If the next dynamic action list created in dependence upon that metric action list includes actions that successfully affect the user's condition, then the deleted action is, in many examples, considered ineffective and is deleted permanently. In some examples, however, deleting the action will cause the dynamic action list to lack an action that successfully affects the user's condition. In many examples of the method of , when an action ID is deleted from the metric action list, the action ID is recorded. If the next time an action or set of actions are executed from a dynamic action list created in dependence upon the associated metric action list do not effectively change the value of the user metric, then the deleted action ID is returned to the metric action list.","Adding effective actions and deleting ineffective actions over time optimize the metric action lists. Many examples of the present invention, the steps of  are carried out until an effective action list is created. Typically, new actions are identified and added to the metric action list until the metric action list consistently affects a user's condition such that the value of the metric associated with that metric action list is consistently changed. Once an effective metric action list is created, the inefficient actions are deleted until the metric action list no longer contains action IDs identifying ineffective actions.",{"@attributes":{"id":"p-0220","num":"0221"},"figref":"FIG. 10","b":["608","606","309","610","608","606","309","610","806","606","210","610"]},"In many exemplary embodiments of the present invention, determining whether the user metric vector is outside the metric space is a function of multiple individual comparisons between metric values and metric ranges. In various alternative embodiments of the present invention, different criteria are used to identify the number of metric values that must be outside their corresponding metric ranges, or the degree to which any metric value is outside its corresponding metric range to determine that the user metric vector is outside the metric space. In some embodiments using a strict criteria for determining if a user metric vector is outside a user metric space, if only one metric value is outside its corresponding metric range, then the user metric vector is determined to be outside the metric space. In other embodiments, using less strict criteria for determining if a user metric vector is outside a user metric space, a user metric vector is determined to be outside the user metric space if all of the metric values of the user metric vector are outside their corresponding metric ranges by a certain degree. In various embodiments, the number of metric values that must be outside their corresponding metric ranges, or the degree to which a metric must be outside its corresponding metric range to make a determination that the user metric vector is outside the metric space will vary, all such methods of determining whether a user metric vector is outside a metric space are well within the scope of the present invention.","The second illustrated method of determining () that the user metric vector () is outside the user metric space () illustrated in  includes calculating () a metric vector value () and calculating () a metric space value () and comparing () the metric vector value () to the metric space value (). One way of calculating a metric vector value is by using a predetermined formula to identify a single value that is a function of the metric values of the user metric vector. In one exemplary embodiment of the present invention, calculating a metric vector value includes averaging the metric values of the user metric vector. In another example embodiment, calculating a metric vector value includes prioritizing certain kinds of metrics and using a weighted average based on the priority of the metric to calculate a metric vector value.","In some exemplary embodiments, calculating () a metric space value () includes using a predetermined formula to determine a metric space value that is a function of the minimum and maximum values of each metric range of the user metric space. In one example embodiment, calculating a metric space value includes finding the center point of the minimum and maximum value of the each metric range and then averaging the center points.","The illustrated method includes comparing () the metric space value () and the metric vector value (). In various embodiments of the present invention, how the metric vector value and the metric space value are compared to determine whether the metric vector is outside the metric space will vary. In one example embodiment, the metric vector value is subtracted from the metric space value. If the result of the subtraction is within a predetermined range, then the user metric vector is determined to be within the metric space. In the same example, if the result of the subtraction is not within the predetermined range, then the metric vector value is not determined to be within the metric space.","The illustrated methods of  are provided for explanation and not for limitation. There are many other ways metric ranges and metric values can be compared, combined, manipulated, or otherwise used to make a determination that a user metric vector is outside a metric space. All such ways of comparing, combining, manipulating, or otherwise using metric values and metric ranges to make a determination that a user metric vector is outside a metric space are included within the scope of the present invention.",{"@attributes":{"id":"p-0226","num":"0227"},"figref":"FIG. 11","b":["624","606","626"]},"In the method of , creating (), in dependence upon the user metric vector (), a dynamic action list () includes identifying () a metric action list () for each user metric () of the user metric vector () having a value that is outside a metric range of the user metric space. In many examples of the method of , identifying () a metric action list () for each user metric () that is outside its corresponding a metric range includes retrieving a reference to the metric action list from a metric object previously identified as being outside its corresponding metric range when the user metric vector was determined to be outside the user metric space. The metric objects outside their metric ranges are, in many examples, identified when the metric objects are compared with their metric ranges to determine if the user metric vector is outside the metric space.","In many examples of the method of , a metric has a plurality of associated metric action lists. Each associated metric action list includes a set of action IDs for execution in dependence upon the degree and direction that the value of the metric is outside the metric range. In some examples of the method of  therefore, identifying () a metric action list () for each user metric () of the user metric vector () having a value that is outside a metric range of the user metric space includes identifying a metric list in dependence upon a degree to which the value of each user metric of the user metric vector is outside a metric rant of the user metric space. In another example of the method of , identifying () a metric action list () for each user metric () of the user metric vector () having a value that is outside a metric range of the user metric space includes identifying a metric list in dependence upon a direction that the value of each user metric of the user metric vector is outside a metric range of the user metric space.","In the method of , creating (), in dependence upon the user metric vector (), a dynamic action list () includes retrieving () at least one action ID () from each metric action list (). Some metric action lists include a plurality of action IDs and therefore many examples of the method of  include retrieving a plurality of action IDs from the metric action lists associated with each metric having a value outside its corresponding metric range.","In the method of , creating (), in dependence upon the user metric vector (), a dynamic action list () includes identifying () at least one action ID () for inclusion in the dynamic action list () in dependence upon the action IDs () retrieved from the metric action lists (). In many examples of the method of , identifying () at least one action ID () for inclusion in the dynamic action list () in dependence upon the action IDs () retrieved from the metric action lists () includes identifying an action ID retrieved directly from the metric action lists themselves for inclusion in the dynamic action list. That is, in some examples of the method of  the same action ID retrieved from a metric action list is included in the dynamic action list.","In the method of , identifying () at least one action ID () for inclusion in the dynamic action list () in dependence upon the action IDs () retrieved from the metric action lists () includes comparing () the action IDs () of the metric action lists () and omitting repetitious actions. In some examples of the method of , omitting repetitious actions includes determining that the same action ID is included in more than one metric action list. In such examples, creating a dynamic action list includes identifying metric action lists having the same action IDs and including the action ID only once in the dynamic action list.","In the method of , identifying () at least one action ID () for inclusion in the dynamic action list () in dependence upon the action IDs () retrieved from the metric action lists () includes retrieving () an action ID () from a dynamic action table () in dependence upon at least one action ID of the metric action lists. In many examples of the method of , a dynamic action table () is a data structure including action IDs indexed by other action IDs. That is, the dynamic action table is a data structure designed to index predetermined action IDs for inclusion in the dynamic action list in dependence upon the action IDs retrieved from the metric action lists.","Such a dynamic action table therefore is in many examples of the method of  designed to identify conflicting actions retrieved from the metric action lists, identify superseding actions retrieved from the metric action list, as well as identify further actions not included in the metric action lists. In some examples of the method of , identifying () at least one action ID () for inclusion in the dynamic action list () in dependence upon the action IDs () retrieved from the metric action lists () includes omitting conflicting actions. In many examples of the method of  a dynamic action table is used to identify action IDs that have been predetermined to conflict. For example, an action ID included in one metric action list that identifies a device controlling action to turn on a ceiling fan conflicts with an action ID identifying a device controlling action to turn off the same ceiling fan. Such conflicting action IDs are omitted from the dynamic action list.","In some examples of the method of , identifying () at least one action ID () for inclusion in the dynamic action list () in dependence upon the action IDs () retrieved from the metric action lists () includes omitting superseded actions. A superseded action is an action that when executed administers the same device in the same direction as another superseding action, but administers the device to a lesser degree than the other superseding action. That is, an action is superseded when another action administers the same device to a seater degree such that the execution of superseded action is cloaked by execution of the superseding action. For example, the execution of an action ID that results in changing the value of a current attribute of a ceiling fan from \u201c5\u201d to \u201c4\u201d is superseded by the execution of an action ID that results in changing the same ceiling fan attribute from \u201c5\u201d to \u201c2.\u201d In many examples of the method of , a dynamic action table is used to identify action IDs that have been predetermined to supersede other actions IDs. Many examples of the method of  include omitting the superseded action IDs from the dynamic action list and including the superseding action ID.","In the method of , identifying () at least one action ID () for inclusion in the dynamic action list () in dependence upon the action IDs () retrieved from the metric action lists () includes identifying an action ID for inclusion in the dynamic action list that is not included in any of the identified metric action lists (). In many examples of the method of , an action ID identified by a lookup in the dynamic action table () is not included in any of the identified metric action. In some of these examples, the dynamic action table is populated with action IDs that have been predetermined to affect the same user condition when executed as other action IDs. Such a dynamic action table is indexed to identify an action ID for execution when one or more other action IDs are retrieved from the metric action lists. In this way, dynamic action tables advantageously provide a vehicle for identifying and executing more actions to affect the user's current condition.","For further explanation of identifying action IDs that are not included in any metric action list associated with a user metric outside its corresponding range, the following example is provided. Two user metrics of a user metric vector are above their corresponding metric ranges of the user's metric space. The first metric represents body temperature and has a first action ID in its associated metric action list that when executed results in turning on a ceiling fan. The second metric represents heart rate and has a second action ID in its associated metric list that when executed turns on an air conditioner. A lookup in a dynamic action table in dependence upon the first action ID and the second action ID retrieves a third action ID that is not included in either metric action list of either metric. Executing the third action ID results in turning on the ceiling fan, turning on the air conditioner, and drawing automated window curtains. The added action of drawing automated window curtains is predetermined to affect the same user condition as turning on the air conditioner and the ceiling fan. A lookup on the dynamic action table identifies the third action ID for inclusion in the dynamic action list in dependence upon the first and second action IDs.","It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
