---
title: System and method for supporting one-way remote method invocation for session replication in a server cluster
abstract: A system and method can support one-way Remote Method Invocation (RMI) session replication in a middleware machine environment, such as a server cluster. The server cluster can include a primary application server and a secondary application server. The primary application server receives a request with a session from a client, maintain the session information, and replicate the session information to a secondary application server using one-way Remote Method Invocation (RMI). The primary application server can then respond to the client based on the session information after receiving a return message of the one-way RMI from a network socket associate with the primary application server. The benefit of using one-way RMI is that the primary application server does not have to wait for an acknowledgment from the secondary application server instance, since the underlying transport protocol guarantees that the session data has been successfully transmitted to the second server instance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08856352&OS=08856352&RS=08856352
owner: Oracle International Corporation
number: 08856352
owner_city: Redwood Shores
owner_country: US
publication_date: 20110915
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM OF PRIORITY","COPYRIGHT NOTICE","CROSS-REFERENCED APPLICATIONS","FIELD OF INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of priority on U.S. Provisional Patent Application No. 61\/383,285, titled \u201cMIDDLEWARE MACHINE PLATFORM\u201d, filed Sep. 15, 2010; and U.S. Provisional Patent Application No. 61\/384,227, titled \u201cMIDDLEWARE MACHINE PLATFORM\u201d, filed Sep. 17, 2010, each of which applications are herein incorporated by reference.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","This application is related to U.S. patent application Ser. No. 13\/109,849, titled \u201cSYSTEM AND METHOD FOR ZERO BUFFER COPYING IN A MIDDLEWARE ENVIRONMENT\u201d, filed May 17, 2011 and U.S. patent application Ser. No. 13\/167,636, titled \u201cSYSTEM AND METHOD FOR SUPPORTING LAZY DESERIALIZATION OF SESSION INFORMATION IN A SERVER CLUSTER\u201d, filed Jun. 23, 2011, each of which applications are herein incorporated by reference.","The present invention is generally related to computer systems and software such as middleware, and is particularly related to systems and methods for session replication in a middleware machine environment.","Within any large organization, over the span of many years the organization often finds itself with a sprawling IT infrastructure that encompasses a variety of different computer hardware, operating-systems, and application software. Although each individual component of such infrastructure might itself be well-engineered and well-maintained, when attempts are made to interconnect such components, or to share common resources, it is often a difficult administration task. In recent years, organizations have turned their attention to technologies such as virtualization and centralized storage, and even more recently cloud computing, which can provide the basis for a shared infrastructure. However, there are few all-in-one platforms that are particularly suited for use in such environments.","Session state can be used in the middleware machine platform for storing important user session information. A middleware machine system can replicate session state associated with user service request from one server instance to another server instance using Remote Method Invocation (RMI), in order to prevent the loss of user session information when one server instance fails. These are the generally areas that embodiments of the invention are intended to address.","Described herein is a system and method for supporting one-way Remote Method Invocation (RMI) session replication in a middleware machine environment, such as a server cluster. The server cluster can include a primary application server and a secondary application server. The primary application server receives a request with a session from a client, maintains the session information, and replicates the session information to a secondary application server using one-way RMI. The primary application server can then respond to the client based on the session information after receiving a return message of the one-way RMI from a network socket associated with the primary application server. A benefit of using one-way RMI is that the primary application server does not have to wait for an acknowledgment from the secondary application server instance, since the underlying transport protocol guarantees that the session data has been successfully transmitted to the second server instance.","In accordance with an embodiment, a system and method can provide a middleware machine or similar platform. In accordance with an embodiment the system (referred to herein in some implementations as \u201cExalogic\u201d) comprises a combination of high performance hardware, together with an application server or middleware environment, to provide a complete Java EE application server complex which includes a massively parallel in-memory grid, can be provisioned quickly, and can scale on demand. In accordance with an embodiment, the system can be deployed as a full, half, or quarter rack, or other configuration, that provides an application server grid, storage area network, and InfiniBand network, which support the execution of an application server, middleware or other functionality.","As described above, within any large organization, over the span of many years the organization often finds itself with a sprawling IT infrastructure that encompasses a variety of different computer hardware, operating-systems, and application software. Although each individual component of such infrastructure might itself be well-engineered and well-maintained, when attempts are made to interconnect such components, or to share common resources, it is often a difficult administration task. In recent years, organizations have turned their attention to technologies such as virtualization and centralized storage, and even more recently cloud computing, which can provide the basis for a shared infrastructure. However, there are few all-in-one platforms that are particularly suited for use in such environments.","To address this, described herein is a system and method for providing a middleware machine or similar platform. In accordance with an embodiment the system (referred to herein in some implementations as \u201cExalogic\u201d) comprises a combination of high performance hardware, e.g. 64-bit processor technology, high performance large memory, and redundant InfiniBand and Ethernet networking; together with an application server or middleware environment, such as WebLogic Suite, to provide a complete Java EE application server complex which includes a massively parallel in-memory grid, can be provisioned quickly, and can scale on demand. In accordance with an embodiment, the system can be deployed as a full, half, or quarter rack, or other configuration, that provides an application server grid, storage area network, and InfiniBand network. The middleware machine software can provide application server, middleware and other functionality such as, for example, WebLogic Server, JRockit or Hotspot JVM, Oracle Linux or Solaris, and Oracle VM. In accordance with an embodiment, the system can include a plurality of compute nodes, InfiniBand switch gateway, and storage nodes or units, communicating with one another via an InfiniBand network.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":["100","102","104","106","108","109","116","120","124","128","132","134","136","110","116","120","124","140","142","150"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["160","161","162","163","164","162","164","166","168","170","172","174","176"]},"One-way Remote Method Invocation (RMI) Session Replication","A middleware machine platform or environment can include one or more clusters of application servers. The system is able to recover from service failures, so that the middleware machine platform can provide high availability. Session state is used in the middleware machine platform for storing important user session information. The system can replicate session state associated with user service request from one server instance to another. The primary application server creates a primary session state on the server to which the client first connects, and a secondary replica on another server instance in the cluster. The replica is kept up-to-date so that it can be used if the primary application server, for example the server that hosts the servlet, fails.","In accordance with one embodiment, the system can support one-way Remote Method Invocation (RMI) session replication in a server cluster. Using one-way RMI session replication, the primary application server does not have to wait for a acknowledgment from the secondary application server instance. An underlying transport protocol can guarantee that the session data has been successfully transmitted to the second server instance, once a return message from a network socket associated with the underlying transport protocol is received at the primary application server.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 3","FIG. 3"],"b":["301","300","302","303","311","321","312"]},"In accordance with an embodiment, a one-way RMI session replication step  can be performed in order to replicate the session information from the primary application server to the secondary application server. The one-way RMI session replication can be implemented based on socket direct protocol (SDP). As shown in , in order to support one-way RMI session replication, a first SDP socket  can be set up on the primary application server side and a second SDP socket  can be set up on the secondary application server side. After successfully completing the one-way RMI session replication step, the primary application server can respond to the client based on the session information at step .","In accordance with an embodiment, the primary application server can serialize the session information before it is replicated to the secondary application server. The serialization of the session information is a process of converting a complex data structure, such as a parallel arrangement of data, into a serial form. The parallel arrangement of data transmits a number of bits at a time along parallel channels, while the serial form transmits one bit at a time. Serializing session data introduces some overhead for replicating the session state. The overhead increases as the size of serialized objects grows. For example, if a user plans to create very large objects in a HTTP session, the performance of a servlet may need to be tested to ensure that performance is acceptable.","In accordance with an embodiment, the session information can be maintained on the secondary application server in the form of serialized session information . Additionally, the secondary application server operates to generate deserialized session information  based on the serialized session information at step . When the primary application server fails, the secondary application server, or another application server in the middleware environment, can use the deserialized session information to respond to the client at step .","In accordance with an embodiment, RMI, such as JAVA RMI, is an application programming interface that performs the object-oriented equivalent of remote procedure call (RPC). RMI can be supported by the virtual machines, such as JAVA virtual machines, running underneath the application servers. Different data transport protocols can be automatically set up by the virtual machines for transmitting the session information across the server cluster. For example, the JAVA virtual machine can set up TCP sockets using the TCP\/IP protocol, or SDP sockets using the SDP protocol.","When TCP sockets are used for replicating session information in the server cluster, the primary application server has no knowledge on when the secondary application server will actually copy the session information stored in an operating system (OS) buffer unless the primary application server receives an acknowledgement from the secondary application server. Hence, the primary application server has to wait for an acknowledgment from the secondary application server to ensure that the session information has been successfully replicated before responding to the client.","When SDP sockets are used for replicating session information, only one-way RMI is needed. The SDP transport protocol can guarantee that the session data has been successfully transmitted to the second server instance, once a return message from the SDP socket is received at the primary application server. Hence, the primary application server does not have to wait for an acknowledgment from the secondary application server instance before responding to the client.","In one embodiment, the virtual machines can automatically set up a data transport protocol based on the underlying network. For example, the system can automatically set up a SDP socket instead of a TCP socket if an InfiniBand network is detected. Alternatively, the application server can set up with a flag that directs the virtual machine to set up a SDP socket.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 4","FIG. 4"],"b":["401","402","403","404","405","406","407","408","409"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 5","FIG. 5"],"b":["501","502","503","504"]},"Multiple Replication Channels","In accordance with an embodiment, multiple replication channels can be used to perform session replication between the primary application server and different secondary application servers.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 6","FIG. 6"],"b":["601","600","602","611","614","603","621","622"]},"In accordance with an embodiment, the system can configure multiple replication channels using different replication mechanism based on different data transport protocols. As shown in , the primary application server can perform one-way RMI session replication through a replication channel  to replication session information to a secondary application server C based on SDP protocol. Additionally, the primary application server can use other channels - that are configured to use TCP\/IP protocol to replicate session information to the secondary application servers A, B and D. However, when a channel is configured with TCP\/IP protocol, the primary application server needs to wait for a RMI response from the secondary application server to ensure the completion of the session replication.","When one-way RMI session replication is configured in a particular channel, the primary application server can closely monitor the operations in the particular channel that is handling the one-way session replication, in order to ensure that the primary application server is timely informed once the one-way RMI session replication is completed, in order to further improve efficiency. Additionally, the system can ensure that all the session information, which may be transmitted separately, are transmitted through the same channel, in order to prevent issues such as incomplete session information when the primary application server fails.","In accordance with an embodiment, a SDP socket can be automatically created for the primary application server detects that an InfiniBand network is associated with a particular channel. Also, using one-way RMI session replication, network failure does not affect the session replication since the primary application server can be certain that the session information has been successfully replicated to the secondary application server, as soon as the one-way RMI call returns. The chance that the secondary application server loses the session after a successful session replication is rare. Additionally, when a failure happens during the one-way RMI session replication, the system can throw an exception and then the primary application server can take necessary steps to replicate the session information using other available replication channels.","The present invention may be conveniently implemented using one or more conventional general purpose or specialized digital computer, computing device, machine, or microprocessor, including one or more processors, memory and\/or computer readable storage media programmed according to the teachings of the present disclosure. Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure, as will be apparent to those skilled in the software art.","In some embodiments, the present invention includes a computer program product which is a storage medium or computer readable medium (media) having instructions stored thereon\/in which can be used to program a computer to perform any of the processes of the present invention. The storage medium can include, but is not limited to, any type of disk including floppy disks, optical discs, DVD, CD-ROMs, microdrive, and magneto-optical disks, ROMs, RAMs, EPROMs, EEPROMs, DRAMs, VRAMs, flash memory devices, magnetic or optical cards, nanosystems (including molecular memory ICs), or any type of media or device suitable for storing instructions and\/or data.","The foregoing description of the present invention has been provided for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations will be apparent to the practitioner skilled in the art. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application, thereby enabling others skilled in the art to understand the invention for various embodiments and with various modifications that are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the following claims and their equivalence."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
