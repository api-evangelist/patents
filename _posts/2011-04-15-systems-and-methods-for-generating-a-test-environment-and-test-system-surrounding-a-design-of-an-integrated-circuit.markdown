---
title: Systems and methods for generating a test environment and test system surrounding a design of an integrated circuit
abstract: Systems and methods for generating and using a test environment and a test system surrounding a design are described. The systems and methods may involve using a same application software for creating a design and for receiving a selection to generate the test environment and the test system. In response to receiving the selection, the systems and methods may execute a verification tool to create the test environment and test system. Moreover, a user may not fill in templates of components of the verification tool. The verification tool is integrated within the application software.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08504973&OS=08504973&RS=08504973
owner: Altera Corporation
number: 08504973
owner_city: San Jose
owner_country: US
publication_date: 20110415
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application claims the benefit of and claims priority under 35 U.S.C. \u00a7119(e) to U.S. Provisional Application No. 61\/324,713, filed on Apr. 15, 2010, titled \u201cIP VERIFICATION TOOL\u201d, which is incorporated by reference herein in its entirety for all purposes.","The present embodiments generally relate to systems and methods for generating a test environment and test system surrounding a design of an integrated circuit.","Modern electronic systems are frequently implemented as a combined hardware\/software system built on a single silicon chip. The full system design is usually created by using a first tool.","In order to ensure that these chips will function properly, it may be useful to test the full-system design of the electronic system, before incurring the expenses of actually creating the physical silicon chips. The full-system design is typically simulated and tested by using a second tool, such as a simulator.","However, the use of two different tools may increase time and cost associated with testing the full-system design. For example, a user may need to exit the first tool to use the second tool. In addition, the user must provide a written description of components that is created using the first tool to the second tool. As such, two different tools are generally required, thereby increasing cost as well as the time required to create the written description of the components and to simulate them using a second tool.","Systems and methods for generating and using a test environment for a design are described. In various aspects, the methods include generating a design of a system on a programmable chip, receiving a selection to generate the test environment and test system, and creating the test environment and test system in response to receiving the selection.","In various embodiments, a same application software may be used to generate the design, and to receive the selection to create the test environment and test system, thereby reducing cost and saving time. Thus, a need to purchase two different tools to create the design and to generate the test environment and test system is eliminated. Using the same application software saves time because the need to modify a written description using a first tool, to exit a first tool, and to provide the written description to a second tool to generate the test environment and test system is eliminated. According to one embodiment, the application software may retrieve the written description instead of requiring a user to provide the written description. The application software may retrieve the design description from one or more design descriptions, and may execute a verification tool to generate the test environment and test system, all in response to a user initiating the generation of test environment and test system. The application software includes the verification tool for testing the generated design. The application software may also provide other features, such as dependency, merging callbacks, and transaction extension, to name a few.","In some embodiments, methods for generating a test environment and a test system may be integrated within a design creation application software. The design creation application software may be used to create a design of an integrated circuit. The integrated circuit may be an Application Specific Integrated Circuit (ASIC), a custom ASIC, or a programmable logic device (PLD).","In several embodiments, the systems and methods described herein may be used to create the test environment and the test system in response to receiving an input via an input device, e.g., mouse click, etc., after creation of the design.","Methods of various embodiments of the present invention may be implemented using a system level programming language, such as SystemC, SystemVerilog, and advanced verification methods, such as Universal Verification Methodology (UVM), Open Verification Methodology (OVM), or Verification Methodology Manual (VMM). It is appreciated that the methods of generating the test systems for various embodiments of the present invention may be executed by a processing unit, as described below.","Referring to , a system  may include a processing unit , a memory device , a network interface , an input device , an output interface , and an output device . Network interface , output interface , memory device , and processing unit  may be located within a housing  of system .","Processing unit  may be a central processing unit (CPU), a microprocessor, a floating point coprocessor, a graphics coprocessor, a hardware controller, a microcontroller, a programmable logic device programmed for use as a controller, a network controller, or other processing unit. Memory device  may be a random access memory (RAM), a read-only memory (ROM), or a combination of RAM and ROM. For example, memory device  may include a non-transitory computer-readable medium, such as a floppy disk, a ZIP\u2122 disk, a magnetic disk, a hard disk, a compact disc-ROM (CD-ROM), a recordable CD, a digital video disc (DVD), or a flash memory. Memory device  may store a program code for in accordance with embodiments of the present invention for execution by the processing unit . For example, memory device  may store the program code for creating a design of an integrated circuit, generating and using a test environment and test system, controlling a flow of information, converting a first protocol into a second protocol, etc., to name a few.","Network interface  may be a modem or a network interface card (NIC) that allows processing unit  to communicate with a network , such as a wide area network (WAN) or a local area network (LAN). Processing unit  may be coupled via a wireless connection or a wired connection to network . Examples of the wireless connection include a connection using Wi-Fi protocol or a WiMax protocol. The Wi-Fi protocol may be an IEEE 802.11, IEEE 802.11a, IEEE 802.11b, IEEE 802.11g, or IEEE 802.11i protocol. Examples of input device  include a mouse, a display device, a keyboard, a stylus, a microphone, a keypad, etc. Output device  may be a liquid crystal display (LCD) device, a plasma display device, a light emitting diode (LED) display device, or a cathode ray tube (CRT) display device. Examples of output interface  include a video controller that drives output device  to display one or more images based on instructions received from processing unit . In various embodiments, input device  and output device  may be integrated within the same device, such as a display device having a touch screen. Processing unit  accesses the program code stored on memory device  or stored on a remote memory device (not shown), similar to memory device , via network . The processor unit  executes the program code stored therein in order to implement the methods in accordance with various embodiments of the present invention. Processing unit , memory device , network interface , input device , output interface , and output device  communicate with each other via a bus .","In various embodiments, system  may not include input device  and\/or network interface . In some embodiments, network interface , output interface , memory device , and processing unit  may be located outside the housing  structure.","In some embodiments, multiple memory devices may be used instead of memory device . Moreover, in one embodiment, multiple processing units may be used instead of processing unit .","With reference to , a PLD  may be configured using system  of . In some embodiments, PLD  may include a two-dimensional array of programmable logic array blocks (LABs)  that are interconnected by a network of multiple column interconnects  and multiple row interconnects  of varying length and speed. Any of the LABs , e.g., LAB , can perform one or more functions, such as, digital signal processing (DSP), addition, multiplication, subtraction, etc. The network of column interconnects  and row interconnects  may include multiple switching circuits (not shown) that can be configured. LABs  may include multiple logic elements (LEs) (not shown) and each LE may include one or more registers (not shown). The LEs of one LAB may be coupled to LEs of another LAB via one or more of the switching circuits. A set of input\/output (I\/O) elements  may be located around the periphery of PLD  to support numerous single-ended and differential I\/O standards. PLD  may further include a set of buffers (Bs)  that couple to LABs . The buffers  may be used to store data that is transferred between LABs . PLD  may function synchronous or asynchronous with one or more clock signals received via a clock tree (not shown). The clock tree may be overlaid on the PLD .","Referring to , a method  for creating a design of an integrated circuit in accordance with one embodiment is shown. The created design may be subsequently used to generate configuration information for configuring the PLD . Processing unit  may access the program code, stored within memory device , for execution thereof in order to implement the method  in accordance with one embodiment.","Processing unit  may execute the program code for the method  to convert a user design in a given format, e.g., Hardware Description Language (HDL), into the configuration information. The PLD  is configured based on the configuration information in order to implement the user design.","At operation , a user design is converted into a register transfer layer (RTL) design of PLD . As an example, the RTL design may include a flow of signals between registers and logical operations that may be performed on the signals. At operation , the RTL design is synthesized into a set of logic gates. This set of logic gates may provide a synthesized design of PLD . At operation , the set of logic gates is mapped into a set of atoms. An atom is generally referred to irreducible constituents of a user design. The atoms may correspond to groups of logic gates and other components of the user design matching the capabilities of the LEs or other functional blocks of PLD . The user design may be converted into any number of different sets of atoms, depending upon the underlying hardware of PLD  used to implement the user design.","At operation , related atoms are grouped together to form clusters. At operation , the clusters of atoms are placed on multiple locations on PLD . At operation , configuration of the switching circuits of PLD  used to couple the atoms implementing the user design is determined. At operation , multiple signal delays, e.g., data delays, for the sets of atoms and their associated connections in the switching circuits are determined by using a timing model of the PLD . At operation , it is determined whether the implementation of the user design in PLD  will meet multiple long-path and short-path timing constraints. It is appreciated that in one embodiment, the timing constraints may be user specified via input device .","At operation , the configuration information is determined. The configuration information may include a configuration of each LE and the switching circuits used to couple the LEs. At operation , the configuration information is written in to a configuration file capable of being stored in the memory device  for access thereof. For example, the configuration file may be accessed by the processing unit  to configure the PLD .","Referring to , a system  may include a test program  that includes a test environment . System  may further include a test system . Test environment  may include a memory-mapped (MM) generator , an MM channel , an MM driver , a streaming (ST) generator , an ST channel , an ST driver , a custom generator , a custom channel , and a custom driver . Test system  may include an MM bus functional module (MM BFM) , an MM monitor , an ST BFM , an ST monitor , a custom BFM , and a design under test (DUT), referred to herein as a design . MM generator , MM driver , ST generator , ST driver , custom generator , and custom driver , MM BFM , MM monitor , ST BFM , ST monitor , custom BFM , or design  may be sometimes referred to herein as a module of system . All modules of system  except for design  may be generated by execution of a verification tool, described below.","Each of MM BFM  and custom BFM  may be a master or a slave. An MM master may be a processor, a direct memory access (DMA) controller, etc. An MM slave may be a memory device, a universal asynchronous receiver transmitter (UART), a timer, a tristate bridge, a register, etc.","It is appreciated that the ST BFM  may be a source or a sink. An ST source may be a transmitter or a data source and an ST sink may be a receiver or a data sink. A custom master may be a processor, a controller, a transmitter, etc., and a custom slave may be a timer, a UART, a receiver, a tristate bridge, a register, a memory device, etc.","MM driver  is coupled with MM BFM  via an Application Programming Interface (API) . ST driver  may be coupled with ST BFM  via an API , and custom driver  is coupled with custom BFM  via an API . MM monitor  may be coupled with design  via an MM interface . ST monitor  may be coupled with design  via an ST interface , and custom BFM  is coupled with design  via a custom interface . It is noted that in various embodiments, MM interface , ST interface , or custom interface  may include one or more wired connections.","MM generator , MM channel , MM driver , API , MM BFM , MM monitor , and MM interface  may be in compliance with an MM protocol. ST generator , ST channel , ST driver , API , ST BFM , ST monitor , and ST interface  may be in compliance with an ST protocol. Moreover, custom generator , custom channel , custom driver , API , and custom interface  may be in compliance with a custom protocol. The custom protocol may be different from the MM protocol and the ST protocol. Examples of the MM protocol and the ST protocol are provided in a document titled \u201cAvalon Interface Specifications\u201d, Version 1.3, August 2010, Altera Corporation\u2122, which is incorporated by reference herein in its entirety.","MM interface  communicates information between MM monitor  and design  by using the MM protocol. ST interface  communicates information between ST monitor  and design  by using the ST protocol, and custom interface  communicates information between custom BFM  and design  by using the custom protocol.","Design  may be the RTL design output at operation  or the synthesized design output at operation . Design  may be a design of an integrated circuit, which may be a System on a Programmable Chip (SOPC). For example, design  may be an MM master, an MM slave, an ST source, an ST sink, a custom master, and\/or a custom slave, to name a few. An example of the integrated circuit includes PLD , an ASIC, or a custom ASIC.","In various embodiments, test system  may not include design . For example, the design  may reside outside test system . In some embodiments, design  may comply with more than one protocol. For example, a first one of the design component may be in compliance with a first protocol, e.g., the MM protocol, and a second one of the design components may be in compliance with a second protocol, e.g., the ST protocol.","With reference to , a method  for generating and using the test program  is described. At operation , the processing unit  may create design . According to one embodiment, the design  may be created by executing an application software such as an SOPC Builder, Quartus Systems Editor (QSYS\u2122), etc. During an extraction phase, the RTL design of the SOPC may be generated by converting a description file, as described above at operation . The RTL design may be generated by converting a description file that is stored by processing unit  to create the design at operation .","Subsequent to creation of design , at operation , the processing unit  may wait for the user to select design  via input device . In one embodiment, the design  is one of many selectable designs on a list of designs stored in memory device . It is appreciated that the user may select design  or any other design on the list. Accordingly, the selection of design  is merely exemplary and not intended to limit the scope of the present invention. In this example, processing unit  may receive design  selected by the user. Processing unit  continues  to wait until design  is selected by the user.","Upon creating design  and receiving a selection of the design  from the user, processing unit  may determine  whether a selection, such as a single click of input device  () or a double click of the input device , is received from the user. The selection received at operation  may be an indication from the user to apply a verification tool. For example, the user may select an icon to perform the selection at operation . The verification tool may be a part of the application software. In response to the user selection of a design, e.g., design , and the selection at operation , verification tool may be applied to the selected design, e.g., design . In response to determining that the selection at operation  is not received, processing unit  may execute the program code for operation  to execute the program code for operations , , , , , , , and\/or .","On the other hand, upon determining that the user selection is received at operation , processing unit  may execute the application software to retrieve the description file from memory device  to create  test environment  and test system . For example, the processing unit  may retrieve the description file stored in the memory device  in response to receiving the selection of design . The description file may be a QSYS\u2122 description file, an SOPC description file, an SOPCINFO description file, etc. The description file may include one or more parameters of design components, one or more interface properties of design components, etc., associated with design .","To create test environment  and test system , processing unit  may obtain, based on the description file, the one or more parameters and the interface properties, and may generate a monitor, a BFM, a driver, a channel, and a generator based on the parameters and interface properties. As an example, the processing unit  generates a generator with a clock source in response to determining that a design component of design  uses a clock signal. A parameter in the description file may be associated with a frequency of the clock signal. The clock source may include an oscillator. Another example of a parameter is data width. In various embodiments, processing unit  may generate the clock source within a generator for each clock signal used by design . As another example, processing unit  may determine, whether a design component uses a reset signal. The processing unit  may generate a BFM that generates the reset signal for transmission to the design component if the processing unit  determines that a reset signal is used. Moreover, as yet another example, processing unit  may determine whether a design component, e.g., memory controller, controller, etc., is in compliance with the MM protocol, the ST protocol, the custom protocol, etc. Each protocol may be associated with an interface property.","Upon determining that a design component is in compliance with the MM protocol, processing unit  may generate MM monitor , MM interface , MM BFM , API , MM driver , MM channel , and MM generator , may couple MM monitor  to the design component via MM interface , may couple MM BFM  to MM monitor , may couple MM driver  to MM BFM  via API , and may couple MM generator  to MM driver  via MM channel . Moreover, upon determining that a design component is in compliance with the ST protocol, processing unit  may generate ST interface , ST monitor , ST BFM , API , ST driver , ST channel , and ST generator , may couple ST monitor  to the design component via ST interface , may couple ST BFM  to ST monitor , may couple ST driver  to ST BFM  via API , and may couple ST generator  to ST driver  via ST channel . Furthermore, upon determining that a design component is in compliance with the custom protocol, processing unit  may generate custom interface , custom BFM , API , custom driver , custom channel , and custom generator , may couple ST BFM  to the design component via custom interface , may couple custom driver  to custom BFM  via API , and may couple custom generator  to custom driver  via custom channel .","As still another example, processing unit  may determine to exclude a clock source within a generator in response to determining that a design component does not use a clock signal. As another example, in response to determining that a design component includes a memory device, processing unit  may determine to include an address source within a generator and the address source may be used to generate an address signal addressing a location within the memory device. The address signal is an example of the parameter. As yet another example, processing unit  may determine, based on the description file, that a design component uses a data signal, a clock signal, and a write signal. The data signal, the write signal, and the clock signal are examples of the parameters. As another example, processing unit  may determine, based on the description file, that a design component uses a valid signal, the data signal, an error signal, and a channel signal. The valid signal, the error signal, and the channel signal are examples of the parameters. As yet another example, processing unit  may determine, based on the description file, that a design component uses a trigger signal. The trigger signal is an example of the parameter.","Upon creation of test environment  and test system , processing unit  may create a top level file that includes system  () and may store the top level file within memory device . Processing unit  may execute the top level file to generate a coverage report. The coverage report includes an indication as to whether the design  is functional. For example, upon creation of test environment  and test system , processing unit  may execute a generator to randomly or periodically generate  a stimulus. The user may provide, via input device  (), to processing unit  whether to generate the stimulus randomly or periodically. A generator generates the stimulus based on interface properties and one or more parameters of a design component. For example, the stimulus may be a clock signal sent to a design component if the design component uses the clock signal. As another example, the stimulus may be a clock signal, a write signal, and a writedata signal sent to a design component. In this example, the design component may be a register that may include a data port to receive the writedata signal, a write port to receive the write signal, and a clock port to receive the clock signal. Moreover, in this example, the write signal may be used to enable a write to the design component and the writedata signal may carry data to write to the design component. Further, in this example, the write and\/or write data signal may be synchronous with the clock signal.","As another example, the stimulus may include the valid signal, the data signal, the error signal, and the channel signal. In this example, the design component may be a data sink that may include a valid port used to receive the valid signal, a data port used to receive the data signal, an error port used to receive the error signal, and a channel port used to receive the channel signal. Moreover, in this example, the valid signal may indicate that data sent to the data signal is valid. In this example, the data signal may carry information sent to the design component and the error signal may indicate an error in the data signal. Also, in the example, the channel signal may indicate a channel to send the data signal to the design component. The channel may be a port of the data sink or a timeslot during which the data signal is sent to the design component.","As yet another example, the stimulus may include a read user command or a write user command. In this example, a design component may be a memory controller and the memory controller may include a read user command port and a write user command port. The read user command port may receive the read user command and the write user command port may receive the write user command. The read user command may include a command addressed to the memory controller to read data from an address of a memory device and the write user command may include a command addressed to the design component to write data to an address of the memory device. As yet another example, a stimulus may include a trigger signal to an ALU of design  if the design  includes the ALU. The trigger signal is received at a trigger port of the ALU and the ALU may perform an arithmetic logic operation upon receiving the trigger signal. The ALU is an example of a design component. As yet another example, a generator may generate a stimulus having a byteenable signal. The byteenable signal may satisfy a constraint, such as having a value of 0 or 1, of the MM protocol. The byteenable signal may indicate to an MM slave of design  bytes of the writedata signal that may be ignored by the MM slave.","As still another example, a generator may generate a stimulus including an empty signal to design . In this example, the stimulus may include a start of packet signal indicating a start of the packet and an end of packet signal indicating an end of the packet. The empty signal may indicate that there is no information within a portion of a payload between the start of packet signal and end of packet signal. The empty signal may be received at an empty port of the design .","A driver may receive  a stimulus from a generator via a channel. For example, MM driver  may receive a stimulus generated by MM generator  via MM channel . As another example, ST driver  may receive a stimulus generated by ST generator  via ST channel . As yet another example, custom driver  may receive a stimulus generated by custom generator  via custom channel .","It is noted that in various embodiments, the list of designs may be in a form other than that of a waveform file or the description file. It is noted that the description file and the waveform file are examples of a formatted file. In some embodiments, processing unit  prevents the user from providing the formatted file describing design  to the processing unit  between a time of creation  and a time of creation . For example, the user is unable to provide, via input device , the formatted file to processing unit  between a time of creation  and a time of creation . In various embodiments, processing unit  prevents the user from providing the formatted file to processing unit  between the time of selection  and creation . In some embodiments, a module of test environment  is created by processing unit  by executing a program, such as System Verilog, System C, OMM, and\/or VMM.","In various embodiments, the user may use input device  to modify a computer code that describes custom generator  to insert the custom protocol into custom generator . Moreover, in one embodiment, the user may use input device  to provide the custom protocol as a custom extension to custom generator  after custom generator  is created. In further embodiments, the user may use input device  to provide the custom protocol as a plug in, which plugs into custom generator  and is executed by custom generator .","In various embodiments, a generator may act as a scenario generator that generates a scenario and the scenario includes stimuli including more than one stimulus. For example, a generator may generate a scenario including a first stimulus and a second stimulus. The second stimulus is sequential to the first stimulus. The first stimulus may include the read user command and the second stimulus may include the write user command. As another example, a generator may generate a scenario including a third stimulus, a fourth stimulus, and a fifth stimulus. In this example, the fifth stimulus is sequential to the fourth stimulus and the fourth stimulus is sequential to the third stimulus. Moreover, in this example, the third stimulus may be the write user command, the fourth stimulus may be the read user command, and the fifth stimulus may be a write user command.","In various embodiments, a generator may be an atomic generator that generates only a single type of stimulus. For example, an atomic generator may generate a read user command or a write user command but not both the read and write user commands. Processing unit  may provide an option to the user via output device  () to determine whether the user wishes to use the atomic generator or the scenario generator, and accordingly applies the determination received from the user.","In some embodiments, a monitor may not be available for the custom protocol. For example, processing unit  may not generate a custom monitor between custom BFM  and design . In one embodiment, processing unit  may determine, based on the description file, whether a design component is a memory controller, an UART, a memory, an Ethernet controller, a timer, a tri-state bridge, a register, a transceiver, a receiver, or a processor, to determine the one or more parameters. In various embodiments, processing unit  does not execute the program code for operations , , , , , , , and\/or  if a selection is not received  from the user.","In various embodiments, processing unit  may execute operation  and  immediately after performing operation  and without performing operation . For example, in response to determining that the user has selected  the design , the processing unit  may create  the test environment  and test system . As another example, in response to determining that the user has not selected  the design , the processing unit  executes  the operations , , , , , , , and\/or .","Referring further to , a driver may drive  a stimulus to a BFM via a corresponding API. For example, MM driver  may drive a stimulus to MM BFM  via API . As another example, ST driver  may drive a stimulus to ST BFM  via API . As yet another example, custom driver  may drive a stimulus to custom BFM  via API .","BFM may receive a stimulus from a driver to generate an event. For example, MM BFM  may receive a stimulus from MM driver  and generate an event by storing information regarding the stimulus within a memory device of the MM BFM . As another example, ST BFM  may receive a stimulus from ST driver  and generate an event by storing information regarding the stimulus within a memory device of the ST BFM . Any information regarding a stimulus stored within a BFM may include a time and\/or date the stimulus is received from a corresponding driver, a time and\/or date the stimulus is sent from the BFM to a corresponding monitor, and\/or information regarding a signal within the stimulus. The information regarding a signal within a stimulus may include information, such as, whether the signal is in compliance with the ST protocol, the MM protocol, or the custom protocol, and\/or a type of the signal, such as whether the signal is a control signal or a data signal. As another example, information regarding a stimulus may include whether the stimulus is sent from a BFM to a corresponding monitor. The control signal does not include data written to or read from design  but may control the data signal. The valid signal, the empty signal, the clock signal, the write signal, or the read signal is an example of a control signal, and the readdata signal or the writedata signal is an example of the data signal.","The event stored within MM BFM  or ST BFM  may include one or more stimuli to be sent by the BFM to a corresponding monitor, such as MM monitor  or ST monitor . The event may further include information regarding the one or more stimuli, one or more responses to be sent to a corresponding driver, such as MM driver  or ST driver , and\/or information regarding the one or more responses. A response responds to a stimulus.","A BFM may also act as a driver to drive a stimulus to a corresponding monitor. For example, MM BFM  may drive a stimulus received to MM monitor . As another example, ST BFM  may drive a stimulus to ST monitor . As yet another example, custom BFM  may drive a stimulus to design .","In sending the stimulus to a corresponding monitor or design , a BFM may be in compliance with a protocol, such as the MM protocol, ST protocol, or the custom protocol. For example, MM BFM  may hold and not send a stimulus to MM monitor  if MM BFM  has received a waitrequest signal from design  via MM monitor . As another example, ST BFM  may not send a stimulus to ST monitor  until a read signal is received from design  via ST monitor . As yet another example, custom BFM  may send a stimulus to design  regardless of whether a ready signal is received from the design .","A monitor may receive the stimulus from a corresponding BFM and may send  the stimulus to design  via a corresponding interface. As an example, MM monitor  may receive the stimulus from MM BFM  and may send the stimulus to design  via MM interface . As another example, ST monitor  may receive a stimulus from ST BFM  and may send the stimulus to design  via ST interface .","Design  may receive a stimulus from a corresponding monitor or custom BFM  and may generate  the response. For example, design  may receive a stimulus including the read signal, the address signal, and the clock signal from MM monitor  and generate the readdata signal to respond to the stimulus. In this example, the address signal may include an address of a location within a memory device of design . As another example, design  may receive the stimulus including the ready signal from ST monitor  and may generate the response. The response may include the valid signal, the data signal, the error signal, and the channel signal. In this example, the ready signal may indicate that ST generator  is ready to receive data from design . Moreover, the valid signal may include whether data carried in the data signal is valid and the error signal may indicate whether the data carried in the data signal has an error. The channel signal may indicated a channel for sending the data signal to ST monitor . As yet another example, design  may receive the stimulus including the write signal, the address signal, and the data signal from custom BFM  and generate the response. The response may include an acknowledgment signal. The write signal enables a write of data carried by the data signal to a location within a memory device of design  and the acknowledgment signal acknowledges to custom BFM  that the data is written to the memory device.","A monitor may monitor  whether the response is received from design , may store the response within a memory device of the monitor, and may determine whether the response complies with a protocol. As an example, MM monitor  may determine whether the response is received from design  and whether the response complies with the MM protocol. In this example, MM monitor  may store the response. As another example, ST monitor  may determine whether the response is received from design  and whether the response complies with the ST protocol. Moreover, in this example, the ST monitor  may store the response. A monitor may continue to monitor  whether the response is received until the monitor receives the response. Upon determining that the response is received, a monitor may send  the response to a corresponding BFM.","With further reference to , a BFM may receive the response from a corresponding monitor or design  () via a corresponding interface and may create  an event regarding the response. For example, MM BFM  () may receive the response from design  via MM interface  () and may generate the event by storing information regarding the response within a memory device of the MM BFM . As another example, ST BFM  () may receive the response from design  via ST interface  () and may generate an event by storing information regarding the response within a memory device of the ST BFM . As yet another example, custom BFM  () may receive the response from design  via custom interface  (). Any information regarding the response is stored within a BFM and may include a time and\/or date the response is received from design , a time and\/or date the response is sent from BFM to a corresponding driver, and\/or information regarding a signal within the response. The information regarding a signal within the response may include information, such as whether the signal is in compliance with the ST protocol, MM protocol, or custom protocol, and\/or the type of signal. As another example, information regarding the response may include whether the response is sent from a BFM to a corresponding driver.","A BFM may also act as a sampler to sample a response. For example, MM BFM  may sample a response received from MM monitor. As another example, ST BFM  may sample a response received from ST monitor  (). As yet another example, custom BFM  may sample a response received from design .","A BFM may in compliance with a protocol, such as the MM protocol, ST protocol, or the custom protocol, to determine whether to send a response to a corresponding driver. For example, MM BFM  may hold and not send a response received from MM monitor  to MM driver  via interface  if MM BFM  has received a waitrequest signal from MM generator  via MM driver  (). As another example, ST BFM  may not send a response received from ST monitor  to ST driver until a read signal is received from ST generator  via ST driver  (). As yet another example, custom BFM  may send a response received from design  to custom generator  regardless of whether custom generator  sends a ready signal to custom BFM  ().","A driver may receive  a response from a corresponding BFM via a corresponding API. For example, MM driver  receives a response from MM BFM  via API  (). As another example, ST driver  may receive a response from ST BFM via API  (). As another example, custom driver  may receive a response from custom BFM via API  ().","Processing unit  thereafter may return  to operation  or  (). For example, if the RTL design is used, processing unit  may return  to operation  and if the synthesized design is used, processing unit  may return  to operation .","In some embodiments, processing unit  may not return to operations  or  () after operation  is performed. It is noted that in various embodiments, MM driver  may drive the stimulus based on one or more events stored in the MM BFM  to control a flow of stimulus to the MM BFM  and ST driver  may drive a stimulus based on one or more events stored within ST BFM  to control a flow of stimulus to the ST BFM  (). For example, MM driver  may request MM BFM  to provide a number of events within MM BFM . Upon determining that the number of events exceeds a threshold, MM driver  may not send a stimulus to MM BFM  (). The threshold may be received from the user via input device . In this example, on the other hand, upon determining that the number does not exceed the threshold, MM driver  may send the stimulus to MM BFM  ().","In some embodiments, the custom driver  may drive the stimulus that may be based on a number of clock cycles of the clock signal. The clock signal may be generated by a clock source of the custom generator  (). For example, custom driver  may send a stimulus to custom BFM  at a number of clock cycles, such as one clock cycle or two clock cycles. In various embodiments, custom BFM  does not store an event based on the stimulus received from custom driver  or the response received from design  ().","In various embodiments, a driver may be modified by the user via input device  to apply a callback to a stimulus received from a generator. For example, MM driver  may be modified to apply the callback to change the read signal received from MM generator  into the write signal or change a write signal received from MM generator  () into a read signal. As another example, MM driver  () may be modified to apply the callback to change the write user command received from MM generator  into the read user command or change a read user command received from MM generator  into a write user command. As another example, ST driver  may be modified to apply the callback to remove the error signal received from ST generator . As yet another example, custom driver  () may be modified to apply the callback to remove a signal received from custom generator . As another example, a driver may be modified to apply the callback to retrieve the stimulus or the response stored within a corresponding BFM. As yet another example, a driver may be modified to apply the callback to the stimulus received from a corresponding generator by appending or prepending the callback to the stimulus. In this example, the driver may prepend the callback by applying the callback to the stimulus to generate a changed stimulus and by sampling the changed stimulus. The driver may then send the changed stimulus to design  (). The driver may append the callback to the stimulus by sampling the stimulus and then applying the callback to the stimulus to generate a modified stimulus. The driver may then send the modified stimulus to design .","In some embodiments, a driver may be modified by the user via input device  to apply a transaction extension to the stimulus received from a corresponding generator and to the response received from a corresponding BFM. For example, MM driver  may be modified to apply the transaction extension to the stimulus received from MM generator  and to the response received from MM BFM  (). In this example, the transaction extension may include a byteenable signal that is added to the stimulus and an address signal that is added to the response. As another example, ST driver  may be modified to apply the transaction extension to the stimulus received from ST generator  and to the response received from ST BFM  (). In this example, the transaction extension may be the valid signal added to the stimulus and the read signal added to the response. As another example, a driver may be modified to apply a configuration extension to the stimulus received from a corresponding generator. In this example, the driver may apply the configuration extension by adding a signal to or subtracting a signal from the stimulus. The signal added may be applied by the driver to design  and the signal subtracted may not be applied by the driver to design  (). As another example, a driver may be modified to apply the configuration extension to the response received from a corresponding BFM. As yet another example, a driver may be modified to apply a scenario extension to the scenario received from a corresponding generator. In this example, the scenario may be a combination of the read user command and the write user command and the scenario extension may be a read user command or a write user command. In this example, after application of the scenario extension, a combination of a read user command followed sequentially by a write user command further followed sequentially by a read user command or a write user command is achieved.","In one embodiment, a driver may not be modified by the user via input device  to apply the transaction extension at a time of testing design  (). For example, a driver may not be modified by the user to apply the transaction extension at a time of reception of the stimulus from a corresponding generator or at a time of reception of the response from a corresponding BFM.","In various embodiments, a generator that generates the scenario is modified by the user to apply the scenario extension. It is noted that test program  () may include one or more comments on applying the transaction extension, the configuration extension, the scenario extension, modifying a generator, modifying a driver, appending the callback, and\/or prepending the callback. It is further noted that the callback, the configuration extension, and the transaction extension are used to change the MM protocol, the ST protocol, or the custom protocol.","In some embodiments, the custom BFM  may not create the event based on the stimulus received from custom driver  (). For example, custom BFM  may not store information regarding the stimulus received from custom driver  ().","In various embodiments, the custom BFM  may not create the event based on the response received from design  (). For example, the custom BFM  may not store information regarding the response received from design  ().","In certain embodiments, a monitor, such as MM monitor  or ST monitor , may send a no response signal to a corresponding generator indicating that the response is not received from design  (). On the other hand, a monitor may send the response in response to determining that the response is received from design  ().","Moreover, in various embodiments, a monitor may send a noncompliance signal to a corresponding generator upon determining that the response does not comply with a corresponding protocol, such as the MM protocol or the ST protocol. A monitor may or may not send the response with the noncompliance signal to a corresponding generator.","Referring to , a system  may include a first generator , a first channel , an information controller , a third channel , a first driver , a first BFM , a second generator , a second channel , a fourth channel , a second driver , and a second BFM . First generator  may be MM generator , ST generator , or custom generator  (). Second generator  may be MM generator , ST generator , or custom generator  (). First channel  may be MM channel , ST channel , or custom channel  (). Third channel  may be in compliance with the same protocol as that complied by first channel  and fourth channel  may be in compliance with the same protocol as that complied by second channel . First driver  may be MM driver , ST driver , or custom driver  (). Similarly, second driver  may be MM driver , ST driver , or custom driver  (). Moreover, first BFM  may be MM BFM , ST BFM , or custom BFM  (). Second BFM  may be MM BFM , ST BFM , or custom BFM  (). Each of first generator , first channel , third channel , first driver , and first BFM  may be in compliance with the same protocol. Moreover, each of second generator , second channel , fourth channel , second driver , and second BFM  may be in compliance with the same protocol. As an example, information controller  may be a controller that may include a state machine and one or more registers. As another example, information controller  may be a processor or a CPU.","With reference to , a method  for controlling a flow of information is described. During creation  () of test environment  and test system  (), the user may determine whether to create dependency between a flow of information within first channel  and a flow of information within second channel  () and may provide  a selection, via input device , to processing unit  () regarding whether to create the dependency. Upon receiving a selection from the user to create the dependency, processing unit  may generate  information controller  to insert information controller  between first generator  and first driver  and second generator  and second driver  (). On the other hand, upon receiving a selection from the user not to create the dependency, processing unit  may not generate  information controller  and returns to continue the operation  ().","Upon generating information controller , processing unit  may create third channel  and fourth channel , and couple third channel  to information controller  (). The processing unit  may couple the third channel  to the first driver  and couple fourth channel  to information controller  (). The processing unit  may further couple the fourth channel  to the second driver  (). Third channel  may be coupled to a different port of information controller  than a port to which fourth channel  may be coupled. Moreover, upon generating information controller , processing unit  may create a dependency, such as a function, between a flow of information between first generator  and first driver  and a flow of information between second generator  and second driver . As an example, processing unit  may determine to synchronize, based on a clock signal, the stimulus sent by first generator  via first channel  and third channel  to first driver  with a stimulus sent by second generator  via second channel  and fourth channel  to second driver . As another example, processing unit  may copy the stimulus received by second driver  from second generator  to generate the stimulus received by first driver  from first generator .","In various embodiments, upon determining to create information controller , processing unit  may split MM channel , ST channel , or custom channel  () into first channel  and third channel  () and may split MM channel , ST channel , or custom channel  () into second channel  or fourth channel  to insert the information controller  ().","In some embodiments, processing unit  may create an information controller between any two modules, such as between MM driver  and MM BFM  and between ST driver  and ST BFM , of test environment  and test system  () in a similar manner in which information controller  () is created. For example, upon receiving a signal from the user to create a dependency of a flow of information between MM BFM  and design  on a flow of information between custom BFM  and design  (), processing unit  may create an information controller, similar to information controller  (), between MM BFM  and design  and between custom BFM  and design .","In various embodiments, any number of information controllers may be inserted between modules of test environment  and test system  () and the number may be received from the user via input device  (). In some embodiments, upon creation of information controller  () by processing unit , the dependency between a first flow of information and a second flow of information is provided by the user via input device  to processing unit  () for execution.","Referring to , a system  for converting a first protocol into a second protocol may include a first protocol generator , a first protocol channel , a first protocol to second protocol (FP-SP) converter , a second protocol channel , a second protocol driver , and a second protocol BFM . The first protocol may be the MM protocol, the ST protocol, the custom protocol, or a packet protocol. The second protocol may be the MM protocol, the ST protocol, the custom protocol, or a packet protocol, and is different than the first protocol. As an example, the first protocol generator  may be a packet generator, the first protocol channel  may be a packet channel, the FP-SP converter  may be a packet-to-ST converter, the second protocol channel  may be ST channel , the second protocol driver  may be ST driver , and the second protocol BFM  may be ST BFM  ().","The packet protocol may communicate information in the form of a packet that includes the start of packet signal, the payload, and the end of packet signal, and may not communicate information in a form other than that of the packet. For example, the packet protocol may not communicate information including the payload without having the start of packet signal prepended to the payload and the end of packet signal appended to the payload. As another example, the packet protocol may not communicate the start of packet signal without having the payload appended to the start of packet signal and the end of packet signal appended to the payload.","With reference to , a method  for converting the first protocol into the second protocol is described. During creation  () of test environment  and test system , processing unit  may determine  whether a first input indicating that the user wishes to use the second protocol or a second input indicating that the user wishes to use the first protocol is received. The first or second input may be received via input device  () from the user. In response to receiving the first input from the user indicating that the user wishes to use the second protocol, processing unit  may continue  creation  () by using a second protocol generator (not shown). The second protocol generator applies the second protocol. On the other hand, in response to receiving the second input from the user indicating that the user wishes to use the first protocol instead of the second protocol, processing unit  may generate  the first protocol generator , replace the second protocol generator with first protocol generator , and create  the first protocol channel  and the FP-SP converter  ().","First protocol generator  may generate  () a first protocol piece of information including a stimulus. For example, the first protocol generator  () may generate the packet including the start of packet signal, the payload, and the end of packet signal. As an example, the start of packet signal may identify a port of first protocol generator  and a port of FP-SP converter  to which the packet may be sent. As another example, the end of packet signal may include a checksum that checks the payload of the packet to determine whether an error occurred in the payload during a communication of the packet between the first protocol generator  and FP-SP converter  (). First protocol generator  may communicate the first protocol piece of information to FP-SP converter  via first protocol channel  ().","FP-SP converter  may receive the first protocol piece of information and may convert  the first protocol piece of information into a second protocol piece of information, which may be a stimulus. For example, FP-SP converter  may segregate the packet into the start of packet signal, the payload, and the end of packet signal, and send the signals via different ports of FP-SP converter  (). In this example, FP-SP converter  may receive the packet via a single port and may send the start of packet signal via a first output port of FP-SP converter , may send the payload via a second output port of FP-SP converter , and may send the end of packet signal via a third output port of FP-SP converter  ().","The use of first protocol generator , the first protocol channel , and the FP-SP converter  () may allow the user to deal with a transaction from a level of using the first protocol that may have a higher amount of abstraction than a level of using the second protocol. For example, the user may use input device  () to modify the packet generated by first protocol generator  without modifying a signal of the ST protocol. As another example, the user may use input device  () to modify the packet without modifying the start of packet signal of the packet, the payload of the packet, the end of packet signal of the packet, the valid signal, and\/or the ready signal. The valid signal may be sent with the packet to indicate that a portion of the payload sent during a clock cycle is valid. The ready signal may be communicated to indicate that the first protocol generator  () is ready to accept a data signal.","In some embodiments, the FP-SP converter  may send the start of packet signal via a first port of FP-SP converter  and send the payload and\/or the end of packet signal via a second port of FP-SP converter  ().","In various embodiments, the user may modify the packet to be sent by first protocol generator  by using the input device  () to insert the error signal in the packet. The error signal may include an error check value, such as a value created from the start of packet signal and the end of packet signal. The start of packet signal and the end of packet signal may be used by FP-SP converter  to determine whether there is an error in the packet, such as, whether the packet includes two or more start of packet signals, whether the packet includes the start of packet signal and excludes the payload and\/or the end of packet signal, whether the packet includes the end of packet signal and excludes the start of packet signal and\/or the payload, and\/or whether the packet includes the payload signal and excludes the start of packet signal and\/or the end of packet signal.","Referring to , a system  may include a third driver , a fourth driver , a base scoreboard , and an actual scoreboard . Third driver  may be MM driver , ST driver , or custom driver  (). Fourth driver  may be MM driver , ST driver , or custom driver  ().","With reference to , a method  for verifying functionality of design  is described. In some embodiments, during creation , processing unit  may provide  an option to the user to determine whether the user wishes to execute the program code for a merged callback or to obtain a determination of whether a design component satisfies criteria. The user may use input device  to indicate to processing unit  whether the user wishes to use execute the program code for the merged callback or to obtain the determination. Upon providing  the option, processing unit  may determine  whether a first indication that the user wishes to obtain the determination or a second indication that the user wishes to execute the program code for the merged callback is received. In response to receiving the first indication, processing unit  may add  actual scoreboard  () to test environment  and\/or test system  (). For example, processing unit  may couple actual scoreboard  to third driver  and fourth driver  (). Moreover, in response to receiving the second indication, processing unit  may determine to add  actual scoreboard  and base scoreboard  () to test environment  and\/or test system  (). For example, processing unit  may couple actual scoreboard  to third driver  and fourth driver  and may further couple actual scoreboard  to base scoreboard  ().","Processing unit  may execute  the program code for the actual scoreboard  to determine whether a design component satisfies the criteria. For example, processing unit  may determine whether the response is received by a driver within a time period after the stimulus is sent by a corresponding generator. In this example, the time period is an example of a criterion provided by the user via input device . Moreover, in this example, if processing unit  determines that the response is received by the driver within the time period, processing unit  may determine that the criterion is satisfied. On the other hand, if processing unit  determines that the response is not received by the driver within the time period, processing unit  may determine that the criterion is not satisfied. As another example, processing unit  may determine whether the response is received by a driver from a design component. In this example, the processing unit  may determine that a criterion is not satisfied upon determining that one or more signals of the response are not received by the driver. Further, in this example, processing unit  may determine that the criterion is satisfied upon determining that the one or more signals are received by the driver. In various embodiments, as an example, a signal of the response not received may include the valid signal of the ST protocol, the data signal of the ST protocol, the error signal of the ST protocol, or the channel signal of the ST protocol, and the stimulus may include the ready signal of the ST protocol. In some embodiments, as another example, the stimulus may include a power signal of the custom protocol to supply power to a design component and a signal of the response not received may include the acknowledgment signal of the custom protocol or a systemfunction signal of the custom protocol. The systemfunction signal indicates that the design component is operational. The acknowledgment signal acknowledges receipt of the power signal by the design component. As yet another example, the stimulus may include the address signal of the MM protocol, the read signal of the MM protocol, and the clock signal of the MM protocol, and a signal of the response not received may include the readdata signal of the MM protocol or the readdata valid signal of the MM protocol. In this example, the readdata valid signal is sent by a design component indicating that the readdata signal is valid.","Processing unit  may execute the top level file to generate the coverage report that indicates whether design  () satisfies the criteria in the form of one or more coverage points. For example, in response to determining that design  () satisfies the criterion, processing unit  assigns a high coverage point to that criterion. The high coverage point may range from 6-10 in a total range of 1-10 of the one or more coverage points. As another example, in response to determining that design  () does not satisfy the criterion, processing unit  assigns a low coverage point to that criterion. The low coverage point may range from 1-5. The user may determine in response to viewing the high coverage point that the design  is functional and may determine in response to viewing the low coverage point that the design  is nonfunctional.","Processing unit  may execute  the program code for the base scoreboard  to merge a first callback with a second callback () to generate and execute the program code for a merged callback. The merged callback includes the first and second callbacks. The first callback may be generated by third driver  and the second callback may be generated by fourth driver  (). Upon executing the program code for the base scoreboard , third driver  may apply the first callback and the fourth driver  () may apply the second callback simultaneously, such as within a same time period. In case of the second indication, the user may not need to access the first callback and second callback separately. The user may provide the second indication to access the merged callback and upon receiving the second indication, processing unit  applies the first and second callbacks simultaneously. This may reduce an amount of work performed by the user in accessing the first callback and second callback separately.","In various embodiments, processing unit  generates and executes the program code for the actual scoreboard  and base scoreboard  () in response to receiving the second indication.","In some embodiments, the operations , , , , , , , , , , , , , , , , , , , , , , , and\/or  may be executed by executing the application software.","It is appreciated that operations discussed herein within reference to flowcharts of , , , , , , and  may be performed in any convenient and appropriate order. For example, it is noted that the methods described in flowcharts of , , , , , and  may be performed between operation  and operation , between operation  and operation , or between operation  and operation .","Technical effects of the herein described systems and methods for generating and using a test environment surrounding a design component include being able to easily construct test environment  and test system  () without using a separate verification application software other than the application software. The application software applies at least a portion of the method  (). Moreover, systems and methods described herein allow for modification of any module of test environment  () by the user via input device  ().","Other technical effects include providing a fast turnaround time for verification of a design component. The fast turnaround time may be facilitated by the user or processing unit  not exiting the application software between creation of design  and verification of the design  (). Processing unit  creates and verifies a design component of design  by executing the application software and without executing the separate verification application software.","Although the foregoing systems and methods have been described in detail by way of illustration and example for purposes of clarity and understanding, it will be recognized that the above described systems and methods may be embodied in numerous other specific variations and embodiments without departing from the spirit or essential characteristics of the systems and methods. Certain changes and modifications may be practiced, and it is understood that the systems and methods are not to be limited by the foregoing details, but rather is to be defined by the scope of the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The systems and methods for generating and using a test environment and test system associated with a design of an integrated circuit may best be understood by reference to the following description taken in conjunction with the accompanying drawings, which illustrate various embodiments of the present systems and methods.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
