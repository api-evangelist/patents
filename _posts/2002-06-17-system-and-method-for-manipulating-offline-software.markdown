---
title: System and method for manipulating offline software
abstract: A system and method for manipulation of offline software. A software driver executing on a computer accesses and modifies target software while the target software is in an offline state. The software driver allows installation and configuration of an operating system and/or associated application programs to the target software when an operating system associated with the target software is not executing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07062764&OS=07062764&RS=07062764
owner: Microsoft Corporation
number: 07062764
owner_city: Redmond
owner_country: US
publication_date: 20020617
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates to the field of software manipulation. In particular, this invention relates to a system and method for manipulation by a computer of offline target software stored on one or more target computer-readable media of a target computer.","In some prior art systems, installing and configuring desirable features of a software product is complex and requires a significant length of time. In such systems, customizing an operating system and its installed applications can only be done by running that operating system and performing actions while in that context. Such online system manipulation actions include installing or uninstalling applications, customizing settings such as desktop wallpaper, or adding a new user. Booting into the operating system to make these changes is a time consuming process and requires validation of those changes thereby delaying deployment of the operating system. In addition, updating files or system settings for software that is actively executing may result in the software becoming inconsistent or unstable. Further, reboots may be required between updates.","In addition, the prior art systems fail to support scenarios in which an operating system requires certain changes prior to booting. For example, the operating system may require a certain device driver. In such cases, the prior art systems perform the changes after the operating system boots.","For these reasons, a system for offline system manipulation is desired to address one or more of these and other disadvantages.","The invention provides software for manipulation by a computer of offline target software stored on one or more target computer-readable media of a target computer. In particular, the invention includes a driver executing on the computer to provide access to the offline target software.","The invention includes software functionality that allows installation and configuration of an operating system and\/or associated application programs offline or otherwise outside the context of the operating system associated with the target software. That is, the invention includes a software installation and configuration technique performed without installing or traditionally running the target software or an operating system associated with the target software.","With the architecture of the invention, installation and configuration actions, data store manipulation, execution of application programming interface routines, file system manipulation, and other actions can be applied to an operating system and application programs while the operating system and application programs are in an offline state. Software of the invention redirects such actions performed in an online manner to the location of the files associated with the offline system. In addition, if a list of the actions is declared or otherwise available to the invention software, the invention software provides for performance of the actions natively (i.e., without redirection). The architecture of the invention can be used in both an online and offline manner to act on the operating system and application programs of the running system or on a set of files at another location, respectively.","With the invention, the user can modify software on one or more target computers without booting into an operating system associated with the software. In addition, changes can be made to the software without re-validating the software in its entirety or otherwise re-packaging the software.","In accordance with one aspect of the invention, a system provides manipulation of target software by a computer. The target software is stored on one or more target computer-readable media. The target software has an online state and an offline state. The system executes a driver on the computer to provide access to the target software. The driver includes one or more redirect components for manipulating the target software when the target software is offline. The manipulation occurs in response to at least one command received from a user.","In accordance with another aspect of the invention, a method provides manipulation of target software by a computer. The target software is stored on one or more target computer-readable media. The target software has an online state and an offline state. The method further includes accessing the target computer-readable media when the target software is offline in response to at least one command received from a user.","In accordance with another aspect of the invention, a computer-readable medium includes a data structure. The data structure represents a queue and is for use by a computer in manipulating target software stored on one or more target computer-readable media. The target software has an online state and an offline state. The manipulation occurs when the target software is in the offline state and in response to at least one command received from a user. Further, the data structure includes a queue field that stores a list of one or more tasks associated with the executable command.","In accordance with yet another aspect of the invention, a system adds one or more drivers to one or more target computer-readable media. The system performs the addition via a computer. The target software has an online state and an offline state. The system includes a user interface associated with the computer and adapted for creating a system preparation file. The system preparation file includes a list of the drivers to be added to the target software responsive to user input. The system further includes a software tool that executes on the computer. The software tool is responsive to the user interface and installs the drivers listed in the system preparation file to the target software when the target software is in the offline state.","Alternatively, the invention may comprise various other methods and apparatuses.","Other features will be in part apparent and in part pointed out hereinafter.","Corresponding reference characters indicate corresponding parts throughout the drawings.","The invention provides software for manipulation of offline target software in a scenario such as illustrated in . In particular, the invention software allows for manipulation by a computer of target software stored on one or more target computer-readable media when an operating system associated with the target software is not executing or is otherwise offline. Executing an operating system or an application program includes loading the machine code of the operating system or the application program into memory and then performing instructions in accordance with the machine code. In one embodiment, a server stores one or more images of target software that are offline. The target software has an online state and an offline state corresponding to the states of an operating system associated with the target software in which the operating system is running and not running, respectively. That is, the offline manipulation of the invention relates to manipulating the target software when an operating system associated with the target software is not running or executing. The online state and the offline state tend to be mutually exclusive. If the target software includes an operating system, the target software is online when the operating system is executing and offline when the operating system is not executing. If the target software includes an application program, the target software is online when the application program is executing and offline when the application program is not executing. Further examples of manipulation of offline software are described with respect to  below.","The system of the invention includes a driver executing on the computer to provide access to the target software (e.g., via the data communication system). The driver includes one or more redirect components for manipulating the target software when the target software is offline. The manipulating occurs in response to at least one command received from a user. Manipulation includes, but is not limited to, modifying files by adding, deleting, or editing files or system settings (e.g., registry keys).","The invention differs from other systems in various ways. For example, other systems provide for redirecting application programming interface calls in a virtual memory system. Similarly, other systems include computer systems that automatically provide some of their capabilities to a main computer without powering on to facilitate configuring such systems in their shipping packages. However, all the other systems execute the operating system associated with the target software. In contrast, the invention provides a system for manipulation of software without executing an operating system associated with the software as illustrated in .","The invention software facilitates the user selection of configuration options prior to installing a complete software image or other representation or state of a file or file system. The result is a fast installation and configuration of a software product with the desired features in a minimal amount of time. In addition, with the invention software, any online action can be redirected to be performed in an offline manner. Such actions include, but are not limited to, adding services (to the operating system and to any application programs), adding patches or fixes to software, adding hardware support (e.g., drivers), adding or removing functionality or entire application programs. Further, additional components can be added to offline images such as SKU and language components.","In one embodiment, re-direction is not specified for an action. For example, a software component may specify that an action is to be performed in the context of the installed, executing operating system to which the software component will be added. In such an embodiment, a manifest for the software component (e.g., service, patch, or application program) provides information relating to the action. Offline updates are performed to allow for the action to be performed when the operating system is installed and executing (i.e., performed in an online manner).","The functionality illustrated in  may be accessed by the user via a graphical user interface such as user interface .","Referring first to , an exemplary block diagram illustrates a computer  connected to a server . The server  includes one or more target computer-readable media  storing target software  that is offline. By way of example and not limitation, computer-readable media comprise computer storage media and communication media as described with reference to . In operation, the computer  responds to commands received from a user and manipulates the target software  stored on the server .","In one embodiment, the computer  and server  (or the target software ) are connected via a data communication system such as network . The data communication system includes, but is not limited to, networked connections as well as direct connections such as serial, parallel, infrared, cellular, or other wired or wireless connection, or any other network such as described with reference to . For example, an operating system associated with the computer  is executing while the server  such as a file server simply provides access to the target software . The target software  may include an installed operating system. The operating system included or otherwise associated with the target software  is not executing. The computer  accesses the target computer-readable media  storing the target software  to make modifications to the target software  that is offline. The target computer-readable media  can be accessed by the computer  as a network share or as a local medium.","Those skilled in the art will note that the illustration of  including the network  is merely exemplary. In another embodiment, the target computer-readable media  is locally accessible by the computer . That is, network  and server  are not included in that the target software  is not physically on another computer attached via a network or other connection. The target software  can be another volume, a logical set of folders, or an image on the computer . In this embodiment, an operating system associated with the target software  is not currently active or running in the context of the operating system associated with the computer . For example, the computer  may be the same computer used to install the operating system of the target software  to the target computer-readable media . In this example, the computer  halts execution of the installed operating system of the target software  and boots another operating system (e.g., via a removable computer-readable medium). The computer  boots the other operating system or some environment, separate from the target software , which executes with the invention software to manipulate the offline target software . For example, the computer  may boot off a floppy or a CD-ROM. In the context of this booted operating system, a user could modify the target software  stored on local computer-readable medium such as the C:\\drive. Such modification occurs offline in that the computer  is booted, but not into an operating system associated with the target software . For example, the invention software allows complex modifications to occur in this offline fashion by re-directing all tasks associated with the installation of an application program to the offline target software . After re-directing performance of the tasks and after a reboot into the operating system associated with the target software , the application program has been installed.","Generally, the invention provides software (such as driver software  in ) to access the data on the target computer-readable medium . In one scenario of the invention as described above, the user locally boots from a bootable removable media to modify local, offline software. In another scenario of the invention, the user boots a local system to modify remote, offline software. In one embodiment, the invention software mounts the target computer-readable medium  using mounting methods known in the art to provide basic file input\/output access. For example, an image foo.img can be mounted and appear to the online system as X:\\ (i.e., X:\\system, X:\\config, etc.). The invention also provides software routines to modify system settings associated with the target computer . In one embodiment, the invention provides an application programming interface to allow a user to modify such system settings (e.g., registry values). For example, an API of the invention allows a user to load a registry hive associated with the target software  in the computer . Using the API, the user can modify the loaded registry hive to effect changes in the target software . For example, the following registry key illustrates a registry hive loaded from offline software such as target software  into the computer .","HKLM\\offline_system\\setup\\Setupinprogress=1","After loading the registry hive, the loaded registry hive points to the mounted, offline software image. As in the previous example, the offline registry hive points to the image foo.img at X:\\ (i.e., X:\\system, X:\\config, etc.). All registry key updates are directed to the loaded, offline registry hive. In an alternative embodiment, all the registry key updates that occur during modification of the offline file system are queued and then applied after the modifications to the offline file system are complete.","Referring next to , an exemplary block diagram illustrates the target computer-readable medium  that stores target software . The target software  includes an operating system  and\/or an application program . The operation system  includes one or more operating system files  such as file #1 through file #N. The application program  includes one or more application program files  such as file #1 through file #M.","Referring next to , an exemplary block diagram illustrates the driver software components of the computer  that communicate with the target software  stored on the target computer-readable media . In this example, the computer  includes an online operating system  and driver software . While the computer  is shown connected to the target computer-readable media  via network , such a connection is optional as described above.","The driver software  includes components that can be executed when the computer  receives a command from the user. In one embodiment, driver software  includes a registry application programming interface (API) component , a setup API component , a service install API component , a file input and output (I\/O) component , and a mass storage device component . The registry API component  updates one or more system settings on the for the target software  by modifying one or more files (e.g., a registry) on the target computer-readable media . The setup API component  configures the next boot state of the target software  (e.g., out of box, first boot, or audit boot) and configures setup configuration options such as the install directory. The service install API component  adds or removes a service to or from the target software  by installing one or more files associated with the service to the target computer-readable media . The file I\/O component  performs file input and file output operations on the target computer-readable media . The mass storage device component  adds at least one device driver for a mass storage device controller to the target software  by installing one or more files associated with the device driver to the target computer-readable media . In addition, the components of the driver software  may configure system settings (e.g., registry keys) for the target software  via the registry API component . The components of the driver software  operate on the offline target software .","Those skilled in the art will appreciate that the driver software  may include other components not specifically described herein that allow the computer  to manipulate the target software  while the target software  is offline. It is contemplated by the inventors that such alternate embodiments of the driver software  are within the scope of the invention. For example, the mass storage device component  is one example of a device component installing a device driver, but other device components installing other device drivers, hardware or software, are contemplated by the inventors to be within the scope of the invention.","Referring next to , an exemplary flow chart illustrates the operation of the driver software  components. At step , the target software  is identified from a command received from a user. A list of one or more tasks associated with execution of the command is generated at step . Generating a list of one or more tasks associated with the execution of a command occurs dynamically, or on-the-fly, in that the tasks are not hard-coded into the driver components. The driver components dynamically generate the list of tasks to be performed and store the list in a queue. At step , the list of one or more tasks is stored in a queue accessible by the computer . The list of one or more tasks stored in the queue are modified at step  such that the tasks are directed to operate on the target computer-readable media . That is, the list is modified such that an operating system of the computer  such as operating system  will execute the listed tasks to manipulate or otherwise operate on the target software . The driver components edit the list of tasks stored in the queue to point to the offline image loaded in the online system. For example, the driver component may edit a string in the list of tasks from \u201cD:\\i386\\System32\u201d to \u201cC:\\opsysdir\\System32.\u201d At step , the queue is committed to perform each of the modified tasks. Alternatively, the computer  may generate, store, and modify the tasks while the target software  is online and then commit the queue to perform the tasks when the target software  is offline.","Referring now to , a block diagram illustrates an exemplary computer-readable medium  storing a queue . In this instance, the queue  is a data structure that can be used by the computer  to manipulate the target software  stored on the target computer-readable media . The queue  has a queue field  that stores a list of one or more tasks  such as task # through task #N that are associated with execution of a command received from a user.","In one embodiment, the computer  modifies the list of tasks  stored in the queue field  to direct the tasks  to operate on the target computer-readable media . Further, the computer  commits the queue to perform each of the modified tasks  stored in the queue field.","Referring next to , a block diagram illustrates the exemplary elements of software for offline manipulation of mass storage device drivers. As described above, the computer  is connected to the target software  via network . In this example, the computer  includes user interface , a system preparation file , and a software tool . The target software  includes a device database . The device database  stores mass storage device drivers. While the computer  is shown connected to the target software  via network , such a connection is optional as described above.","The user interface  is, for example, a graphical user interface (GUI) that allows the user to create the system preparation file . In this instance, the system preparation file  includes a list of drivers  to be added to the target software  in response to the input received from the user, identification data  for each of the drivers, and configuration information  for each of the drivers. For example, the list of drivers  may include a text-based description of each driver. In addition, the identification data  may include a unique identifier corresponding to each driver. Further, the configuration information  may specify parameters for use when installing each driver.","The software tool  executes executable instructions on the computer  in response to input received by the user interface . The software tool  includes a command-line interface  for parsing command-line options received via the user interface . In one embodiment, the command-line options identify the system preparation file  (e.g., via a path), the target computer-readable medium  (e.g., via a path), and\/or the target software . The execution of the executable instructions by software tool  and the command-line interface  allows manipulation of the target software . By way of example, and not limitation, the manipulation of the target software  includes: installing the list of drivers  to the target software , enabling the drivers by adding the identification data  from the system preparation file  to the device database , configuring the drivers according to the configuration information , and updating one or more system settings for the server  as needed by the installed drivers.","In an alternative embodiment, the invention software is operable in an offline fashion with images or target software  that have not been fully applied, installed, or otherwise integrated. For example, the invention software can modify application programs that have been pre-installed or staged. Similarly, a software patch can be applied to an offline image prior to the first out of the box experience by the user. In a further example, an original equipment manufacturer (OEM) can add a driver that is necessary for booting from an offline image that includes an operating system. The offline image can then boot after the OEM adds the necessary driver. In another example, an OEM can add a service pack or other patch to numerous offline images that have not yet been applied or integrated.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 7","b":["130","130","130","132","134","136","134","132","136"]},"The computer  typically has at least some form of computer readable media. Computer readable media, which include both volatile and nonvolatile media, removable and non-removable media, may be any available medium that can be accessed by computer . By way of example and not limitation, readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. For example, computer storage media include RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired in information and that can be accessed by computer . Communication media typically embody computer readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal, which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media, such as a wired network or direct-wired connection, and wireless media, such as acoustic, RF, infrared, and other wireless media, are examples of communication media. Combinations of the any of the above are also included within the scope of computer readable media.","The system memory  includes computer storage media in the form of removable and\/or non-removable, volatile and\/or nonvolatile memory. In the illustrated embodiment, system memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. For example  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media.  also shows a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or write to a removable, nonvolatile optical disk  such as a CD-ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a non-volatile memory interface, such as interface .","The drives or other mass storage devices and their associated computer storage media discussed above and illustrated in , provide storage of computer-readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies.","A user may enter commands and information into computer  through input devices or user interface selection devices such as a keyboard  and a pointing device  (e.g., a mouse, trackball, pen, or touch pad). Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are connected to processing unit  through a user input interface  that is coupled to system bus , but may be connected by other interface and bus structures, such as a parallel port, game port, or a Universal Serial Bus (USB). A monitor  or other type of display device is also connected to system bus  via an interface, such as a video interface . In addition to the monitor , computers often include other peripheral output devices (not shown) such as a printer and speakers, which may be connected through an output peripheral interface (not shown).","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and global computer networks (e.g., the Internet).","When used in a local area networking environment, computer  is connected to the LAN  through a network interface or adapter . When used in a wide area networking environment, computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, is connected to system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to computer , or portions thereof, may be stored in a remote memory storage device (not shown). By way of example, and not limitation,  illustrates remote application programs  as residing on the memory device. It will appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Generally, the data processors of computer  are programmed by means of instructions stored at different times in the various computer-readable storage media of the computer. Programs and operating systems are typically distributed, for example, on floppy disks or CD-ROMs. From there, they are installed or loaded into the secondary memory of a computer. At execution, they are loaded at least partially into the computer's primary electronic memory. The invention described herein includes these and other various types of computer-readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. The invention also includes the computer itself when programmed according to the methods and techniques described herein.","For purposes of illustration, programs and other executable program components, such as the operating system, are illustrated herein as discrete blocks. It is recognized, however, that such programs and components reside at various times in different storage components of the computer, and are executed by the data processor(s) of the computer.","Although described in connection with an exemplary computing system environment, including computer , the invention is operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of the invention. Moreover, the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, executed by one or more computers or other devices. Generally, program modules include, but are not limited to, routines, programs, objects, components, and data structures that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","In operation, the computer  such as computer  executes computer-executable instructions such as those illustrated in  to manipulate the target software  stored on the target computer-readable media  of the server .","The following examples illustrate the invention.","An exemplary software tool according to the invention such as software tool  allows OEMs to add mass storage device drivers to an offline image without rebooting the image or rebuilding the operating system. As a result, OEMs can reduce the number of images they maintain. The software tool  also increases the life span of the images because the images do not need to be rebuilt for new devices. In this example, the software tool  is a mass storage device installation tool (e.g., msdinst.exe). The software tool  allows OEMs to change existing offline images without booting into or recreating those images. The software tool  works with various offline images including, but not limited to, offline images that are accessible via a network such as network  and need new mass storage device drivers. For example, the software tool  can update drivers that already exist on the image. The software tool  also allows OEMs to update areas in the registry. In one embodiment, the software tool  executes in a minimal operating system environment.","The user creates a Sysprep.inf file with only the [SysprepMassStorage] section. In the [SysprepMassStorage] section, the user lists each new mass storage devices by a unique identifier (ID) that need to be added. The user accesses the software tool , for example, by installing the tool on a computer that is connected to a network such as network  and is running a minimal operating system. The user opens a command window and starts execution of the software tool  with command-line options. The command-line options include, but are not limited to, the path to the new Sysprep.inf file and the path to the directory that contains the image to be updated. For example, the following command may be used.","D:\\i386\\system32>msdinst.exe A:\\Sysprep.inf E:\\Tools\\Image1","In response to the command, the software tool  adds each ID from the new Sysprep.inf to a critical device database such as device database  enabling the mass storage device driver to boot the system. In addition, the software tool  installs the necessary driver files and configures those drivers to start as specified in the Sysprep.inf file. Further, the software tool  updates the Sysprep-clean section with all the new and updated registry information. Also, the software tool  searches Sysprep.inf for driver files in the file system related to the drivers identified in Sysprep.inf. In particular, the software tool  searches the regular and compressed versions of the driver's .inf files in the same directory as originally specified in the new Sysprep.inf. For example, supermsd.sys may be the .inf file for one of the drivers. The software tool  looks for supermsd.sys first and also looks for any compressed versions of supermsd.sys if they exist. The software tool  also searches all the files in the offline image's driver.cab, all the files in the offline image's driver.cab present in the source media, and the offline image's sourcepath directory for the regular and compressed versions of each driver's .inf file.","When introducing elements of the present invention or the embodiment(s) thereof, the articles \u201ca,\u201d \u201can,\u201d \u201cthe,\u201d and \u201csaid\u201d are intended to mean that there are one or more of the elements. The terms \u201ccomprising,\u201d \u201cincluding,\u201d and \u201chaving\u201d are intended to be inclusive and mean that there may be additional elements other than the listed elements.","In view of the above, it will be seen that the several objects of the invention are achieved and other advantageous results attained.","As various changes could be made in the above constructions, products, and methods without departing from the scope of the invention, it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
