---
title: Apparatus and method for automatically learning control sequences of application programs
abstract: The invention includes a technique to automatically learn control sequences of a set of computer application programs. The invention makes use of a data structure into which control sequences from a set of computer application programs can be loaded. The data structure may then be used by other applications to execute the learned control sequences.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07133141&OS=07133141&RS=07133141
owner: Zoran Corporation
number: 07133141
owner_city: Sunnyvale
owner_country: US
publication_date: 20001027
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application is a continuation-in-part of Ser. No. 09\/495,459, filed Feb. 1, 2000, entitled, \u201cApparatus and Method for Automated Testing of Print Drivers in a Computer System.\u201d","This invention relates generally to testing computer systems. More particularly, this invention relates to a method and apparatus for automatically learning control sequences associated with a set of computer application programs.","Typically computer systems have a processor, memory, display, an input device and a printer. A computer program, called a print driver, is stored in the memory and is executed by the processor to communicate with the printer. When a new printer is attached to the computer system, typically a new print driver is also installed. Sometimes a new print driver is installed for an existing printer to fix software problems or enhance the printer's operation. Computer systems often store many different types of application programs that use the printer to print different types of documents. For example, the application programs may include a word processing program, a spreadsheet program and a drawing program.","The printing process under MICROSOFT WINDOWS\u2122 (Registered Trademark of Microsoft Corporation) is as follows. The application translates the document to be printed into an intermediate representation with the aid of a MICROSOFT WINDOWS\u2122 module called Graphics Device Interface (GDI). The GDI also displays graphics and text on a display. MICROSOFT WINDOWS\u2122 instructs the print driver to translate the intermediate representation to the specific language of the printer, such as Hewlett-Packard's PCL\u2122 (Registered Trademark of Hewlett Packard Company) and Adobe's POSTSCRIPT\u2122 (Registered Trademark of Adobe Systems Inc.).","Printing a document tests and exercises a print driver because the driver translates from the intermediate representation to the language of the printer. The more varied the documents, the better the testing because more aspects of the print driver are tested. Using different types of applications and documents increases the likelihood that the print driver is tested properly.","When a print driver is changed or a new print driver is added, the system is tested to make sure the print driver operates properly. Traditionally, two techniques have been used to test print drivers\u2014a manual technique and a partially automated technique. In the manual technique, the tester manually performs a series of steps to test the print driver. For example, the user opens an application, such as Microsoft WORD, and opens a document via Microsoft WORD. The user manually calls the print driver through Print Setup, sets options, such as orientation and paper size, and approves the options by hitting an OK or Apply button. The user instructs the application to print the document. The problem with the manual technique is that it is tedious, time-consuming and error-prone. Because users often forget the sequence of steps, if a problem arises, it is difficult to retrace the user's steps to identify the source of the problem.","In the partially automated technique, a programmer writes a test program that \u201chard codes\u201d the names and behaviors of the applications, documents and drivers in the test program. When executed, the test program opens the application and document, sets the values of the driver options, prints the document, and closes the document and application. The problem with the partially automated technique is that adding new applications, drivers, or driver options may involve rewriting or modifying the test program. The test program is designed to test a set of specified applications using specified drivers with specified sets of options. However, the test program may not be able to test a print driver when new applications are added, when the operation of the specified driver has changed, or when options are added. In any of these cases, the test program must either be modified or rewritten. Although the test program can be designed using modular programming and common procedures to reduce the number and magnitude of modifications, the test program must still be at least modified.","In view of the foregoing, it would be desirable to provide a method and system to automatically test drivers. This method and system should allow applications, documents, drivers and driver options to be easily added, modified and deleted. Thus, the technique should be able to automatically learn control sequences associated with a set of computer application programs.","The invention includes a technique to automatically learn control sequences of a set of computer application programs. The invention makes use of a data structure into which control sequences from a set of computer application programs can be loaded. The data structure may then be used by other applications to execute the learned control sequences.","Like reference numerals refer to corresponding parts throughout the drawings.","As shown in , a driver has numerous control options which can be set interactively using the driver's graphical user interface (GUI) . In the print driver GUI , print options are set using control objects. A control object is a predefined graphical object. For example, there are many different types of control objects including a button , a tab control  with its associated tabbed pages - to -, and a combo box . In this description, control objects may also be referred to as controls.","The non-programmatic automated print driver tester automatically learns at least a subset of the control objects of the print driver. To test the print driver, the non-programmatic automated print driver tester automatically exercises the learned control objects. A control object is exercised by selecting a specified setting of the control object and then reading back that setting of the control object to be sure the control object has the specified setting.","In , a computer system  implements non-programmatic automated print driver testing in accordance with an embodiment of the present invention. The computer system  includes:\n\n","The memory  stores a number of different programs, sometimes called procedures. The print driver testing control programs are executed by the system's processor . In a typical implementation, the memory  includes:\n\n","In , an overview of the testing technique in accordance with an embodiment of the present invention is shown. In step , an application  () is registered using the registration procedure  (). In one embodiment, the registration procedure  is implemented by a procedure called \u201cEdit Known App\u201d which will be described in detail with reference to . In step , the ADT procedure  () invokes the test-engine  () to open at least a subset of associated registered applications and documents, setting specified print options, if desired, of a driver-test data structure  (), and printing the document to test the print driver  ().","In , a graphical user interface (GUI)  displayed by the registration procedure  () is shown. When the registration procedure  () is invoked, the registration procedure  () presents the user with the GUI  in which to provide registration information about the applications. Each application  is a separate entry with data that is entered in an \u201cApplication's KnownApp Entry\u201d area  of the GUI . The \u201cApplication's KnownApp Entry\u201d area  includes a set of text fields \u2013, not all of which may be populated, that describe the application. For each entry, the text fields \u2013 are as follows:\n\n","Some applications display a sequence of pop-up windows in response to certain commands. To provide predefined responses to these pop-up windows, each text field \u2013 can store multiple keystroke sequences. To form a string of keystroke sequences, multiple keystroke sequences are entered in a text field separated by semi-colons. Each keystroke sequence is terminated by a semi-colon and is a response to a particular pop-up window.","In , an exemplary set of registration information for an application known as MICROSOFT WORKS is shown. The plus sign \u201c+\u201d is a visual representation indicating a key combination, but the plus sign is not stored internally. The alternate (ALT), control (CNTL) and escape (ESC) characters are combined with the next alpha-numeric character. For instance, \u201cAlt+f+o\u201d means that the keys for the Alt and f keys are combined and played, followed by the key for the \u201co\u201d character. Internally, the ADT procedure stores a string representing the \u201cAlt+f+o\u201d key sequence as follows:\n\n","In a preferred embodiment, the entry fields \u2013 of the \u201cEdit KnownApp\u201d window  are read only, and the user double clicks on the desired entry field to pop-up a window that allows the user to add, change and delete text for that entry field. In an alternate embodiment, the entry fields \u2013 of the \u201cEdit KnownApp\u201d window  can also be written to, so that the user can manually add, change and delete the text in the entry fields.","In an entry control area  of the registration window , the number of the current entry is displayed in a current entry field  and the total number of entries is displayed in a total entry field . A new button  is used to add a new entry. A remove entry button  is used to delete an entry. A \u201cGo To\u201d button  provides a shorthand way of navigating to different entries. A clone entry button  creates a new entry with the same registration information as the current displayed entry. The Up and Down arrow buttons,  and , display a previous or next entry, respectively. A save button  saves the registration information in the registration file  (). The registration information of the text fields of the Application's KnownApp Entry area  for each application is stored in the registration file  (). The backup and restore buttons,  and , are used to backup and restore registration information, respectively. The exit button  closes the registration window  () and terminates the registration procedure  ().","In , to update an entry field \u2013 of the \u201cEdit KnownApp\u201d window  (), the user double clicks on the desired entry field and an \u201cEdit KnownApp Entry\u201d pop-up window  is displayed. The \u201cEdit KnownApp Entry\u201d pop-up window  provides a text field  for displaying the entered key sequences. A set of checkboxes  allow the user to specify predefined key sequences. When checked, check box - places the keystroke for the escape (ESC) key in the entry field. When checked, check box - places the keystroke for the enter (ENTER) key in the entry field. When checked, check box - places a set of keystrokes for the combination of the control (CTRL) key and a specified key, followed by up to two additional keys in the entry field. When checked, check box - places a set of keystrokes for the combination of the alternate (ALT) key and a specified key, followed by up to two additional keys in the entry field. When checked, check box - allows a user to specify a delay between keystroke sequences in seconds. When the \u201cAcceptUntitledLabel\u201d checkbox - is checked, the \u201cAcceptUntitledLabel\u201d text box - can be populated. The \u201cAcceptUntitledLabel\u201d checkbox - and text box - are used when an application displays a predefined generic name when opening a document, rather than the actual name of the document. For example, when some applications open a document designated as read-only, those applications open a copy of the document with a generic name such as \u201cuntitled-.\u201d The generic name is entered into the \u201cAcceptUntitledLabel\u201d text box -. When opening a document, the test-engine uses the generic name rather than the actual name of the document to confirm that the correct document was opened. A clear entry button  clears the current entry field being edited. An \u201cOK\u201d button  updates the specified entry field with the entered key sequence. Based on the selected checkboxes  and \u02dc, the registration procedure generates and stores the appropriate keystroke sequence to be played. In this way, by using checkboxes  rather than directly typing keystrokes, the user can specify complex keystroke sequences and the number of errors from entering incorrect sequences is reduced.","Referring to , a flowchart of operating the ADT procedure  () to test a print driver is shown. Once at least one application has been registered in the registration file  (), the ADT procedure  () can be invoked to test a print driver  (). In step , the ADT procedure  () invokes the ADT window procedure  () to display an ADT window, which will be described in detail with reference to . In step , a print driver is selected. In step , one or more applications are selected. In step , one or more documents are selected. The user associates subsets of the documents with each selected application. In step , printer options are selected and modified, if desired. In step , from the ADT window, the user invokes the test-engine  () to test the selected print driver using the selected applications, documents, and printer options.","In , in a noteworthy aspect of the invention, a graphical interface is provided to select the print driver. The graphical interface is an ADT window , generated by the ADT window procedure  (). A title bar  of the ADT window displays \u201cADT\u201d to identify the non-programmatic automated print driver test. A menu bar  provides well-known command buttons including \u201cFile\u201d , \u201cEdit\u201d , \u201cRun\u201d , \u201cView\u201d  and \u201cHelp\u201d . A tool bar , below the menu bar , provides additional command buttons including: \u201cSelect driver\u201d , \u201cOpen application\u201d , \u201cOpen multiple documents\u201d , \u201cCreate spreadsheet\u201d , \u201cRun\u201d , \u201cAuto-learn\u201d , \u201cManual learn\u201d , \u201cFix-it\u201d , \u201cCall driver\u201d , \u201cView log\u201d , \u201cEdit associate file\u201d  and \u201cHelp\u201d .","Referring also to the flowchart of , when the user activates the \u201cSelect Driver\u201d button , in step , the ADT window procedure  () displays a \u201cList Driver Name\u201d window  which lists the installed print drivers of the computer system. The user selects an installed print driver  for testing, and activates the \u201cOK\u201d button . In step , the ADT window procedure  () identifies a selected print driver. In step , the ADT window procedure  () checks the learned-controls index file  () to determine whether the selected print driver  has already been auto-learned by the auto-learn procedure  (). If the selected print driver  has already been auto-learned, the name, as it appeared in the \u201cList Driver Name\u201d window , will be found in the learned-controls index file  ().","If the selected print driver has not been auto-learned, the name of the selected print driver is not in the learned-controls index file  (). In step , the ADT window procedure  () provides a pop-up auto-learn window that asks the user if they want ADT to auto-learn the print driver. If the user selects a \u201cYes\u201d button, the ADT window procedure invokes the auto-learn procedure  () which generates the learned-controls file  () for the driver, and updates the learned-controls index file  () with the driver name and the name of the learned-controls file for that driver. In step , the ADT window procedure  () generates a display similar to  except that the body of a spreadsheet is empty, excluding the first three rows. If the user selects a \u201cNo\u201d button, the ADT window procedure does not update the learned-controls file  () and learned-controls index file  (), and proceeds to generate a display as shown in , except that no driver or control options are shown.","Referring to , after a print driver has been selected, the ADT window procedure  () displays an update panel  which provides a graphical user interface to implement the flowchart of . The title , menu bar  and tool bar  are the same as in . The ADT window procedure  () displays the name of the selected driver in a driver name text box  in the update panel . An application list area  displays a scrolling list of names of application programs  () that were registered by the registration procedure  (). Alternately, when the user clicks on the \u201cOpen Application\u201d  menu button, the ADT window procedure displays a pop-up window that allows a user to select applications to add to the scrolling list of the application list area . Once these applications are added to the list, they are stored so the user need not repeat that addition again until there are new applications to add to the list.","A documents list area  displays a scrolling list of document names using the full-path name. The ADT window procedure identifies documents by allowing the user to add selected documents to the scrolling list of the documents list area  by clicking the open documents button . When the user clicks on the open documents menu button , the ADT window procedure displays a pop-up window that allows a user to select documents to add to the scrolling list of the documents list area . After the documents are displayed, the documents can be used to create a new spreadsheet for a learned or for a not-yet-learned driver, or to update an older spreadsheet. A driver's option setting area  displays a scrolling list of learned-controls for the selected print driver from the learned-controls file  for the selected driver. Each learned control includes a controlID, a control type, the control's class name, the control's ordinal number, the control's relative location with respect to the top left corner of the driver control window, the height and width of the control, and one or more selectable control values for that control.","In another noteworthy aspect of the present invention, a spreadsheet area  displays a spreadsheet  which allows a user to easily associate applications and documents, and to control the printer options for each combination of application and document, if desired. The user may create a new spreadsheet. Alternately, the user may select an existing spreadsheet.","A control area  has buttons to help the user to build a spreadsheet which will control the driver and the application. The control area  will be described in further detail below. Initially, the spreadsheet area  is empty, except for the first three rows which list print driver options if a print driver has been specified. As shown in , the spreadsheet area  displays a spreadsheet which has been populated.","The spreadsheet has cells which are organized in rows and columns,  and , respectively. Columns one and two of the spreadsheet store predefined types of data. Column one stores the names of the applications and column two stores the names of documents. The third row of the spreadsheet displays the captions for the columns. The caption for column one is \u201cApplication,\u201d and the caption for column two is \u201cDocument Files.\u201d The captions for each control are shown in column three to the last column. The captions for the controls are from the learned-controls file  ().","The user uses the mouse to populate the spreadsheet. To select applications to test, the user uses the mouse to drag and drop the name of an application from the application list area  anywhere in one row of the spreadsheet area . The ADT procedure automatically places the name of the application in the first column. To select documents to test, the user uses the mouse to drag and drop the name of one or more documents from the documents list area  into a row. The ADT procedure automatically drops the document name in that row. Subsequent documents are dropped in consecutive rows. The ADT procedure automatically places document names in column two.","To select print driver options, the user drags and drops the value of a control from the driver's option setting area  into a row. The ADT procedure automatically finds the column associated with that control, and drops that value in that associated column of the row. Alternately, to select values for the driver options, the user double clicks on the cell, the ADT procedure displays an options window which will be described below, and the user selects a value for the driver option. In addition, the user can globally search and replace in the cells. When all the selected documents is a spreadsheet are the same, but the paths have changed, the user can globally change the paths to eliminate the need for the user to manually enter data. For example, sometimes print drivers need to be tested with different sizes of paper. Using the spreadsheet, the user can globally change the paper size in the entire spreadsheet, such as changing a paper size of A4 to Legal size.","In the control area , additional controls increase the ease of creating, modifying and saving spreadsheets. A run area  includes a print log check box , a toggle comment button , and a clear driver button . When the print log check box  is checked, the ADT procedure  () prints a portion of the test-log associated with that document after the document is printed. The toggle comment button  allows a user to selectively exclude a row from being executed by the test-engine  (). When a row is excluded, an exclusion symbol is placed at the beginning of the row. When the row is included, no exclusion symbol is present. The clear driver button  removes the print driver from the update panel  leaving all other information except print driver options. The clear driver button  facilitates the selection of a new print driver, and applying the new print driver to existing applications and documents in the spreadsheet area. The clear driver button  also aids in the creation of templates.","In an edit area  of the control area , another set of buttons, \u2013 and , allow a user to edit the spreadsheet. To perform copy and paste operations, a copy button  allows a user to copy selected items from list areas ,  and , or the contents of selected cells of the spreadsheet; and, a paste button  allows the user to paste the contents of any copied information to a portion of the spreadsheet. In the case of selections from the driver's option setting area , the ADT procedure  () copies the values of the print options. When pasted, the ADT procedure  () places the copied values in the appropriate columns of the current row in the spreadsheet. A move button  allows the user to move selected cells of the spreadsheet. A cut button  allows the user to delete selected text from the spreadsheet. A clear all button  clears the entire update panel . An add a row button  adds an empty row to the spreadsheet, and a delete a row button  deletes the current row from the spreadsheet. A delete column button  deletes the column from the spreadsheet. Application and document columns,  and , respectively, cannot be deleted. Control options columns  can be deleted. An insert pause button  inserts a pause command into the spreadsheet. When the test-engine  () recognizes the pause command, the test-engine  () stops execution until the user instructs the test-engine to proceed.","In a file area  of the control area , another set of buttons allows a user to manage spreadsheet files. An open button  opens a previously created spreadsheet using its spreadsheet name. A save button  saves the current spreadsheet. A save as button  saves the current spreadsheet under a different specified name. A clear SP button  clears the spreadsheet area  except for the first three rows of the spreadsheet. A new SP button  creates a new spreadsheet with an \u201cuntitled\u201d title. A close SP button  allows the user to close the entire update panel .",{"@attributes":{"id":"p-0059","num":"0097"},"figref":["FIG. 9","FIG. 8"],"b":"350"},{"@attributes":{"id":"p-0060","num":"0098"},"figref":["FIG. 10","FIG. 8"],"b":"352"},"When the save or save as buttons are selected, the ADT procedure saves the contents of the spreadsheet in a driver-test data structure having a predefined format. The driver-test data structure includes all the specifications that the user has selected using the ADT window. In one implementation, the driver-test data structure is a spreadsheet file. The spreadsheet file is a tab separated text file and has a \u201c.spd\u201d extension, and will be discussed in further detail below.","Once the spreadsheet is updated, the test-engine  () can be executed to test the specified print driver in accordance with the specifications of the spreadsheet. To invoke the test-engine, the user selects the run menu button  in the menu bar  or the run button  in the tool bar . In response, the test-engine  () processes the driver-test data structure to open the associated applications and documents, set any printer options, and thereby test the print driver.","The test-engine  () opens the driver-test data structure and processes the information row-by-row. Starting at column one, the test-engine  () parses the row. If a new application is specified, the test-engine  () closes the previous application and opens the new application, otherwise the test-engine  (FIGS. ) uses the previous application. When an application is executing, an application window is displayed. To determine whether the application window is displayed, the test-engine  () issues commands to retrieve a handle of the application window that is currently the active window. The test-engine  () determines the state of the application and the application's associated window. In a first state, the application may not be executing. In a second state, the application may be the top most window with no pop-up windows being displayed or special conditions needing a response. In a third state, the application may be the top most window with a pop-up dialog box associated with that application (a child dialog box) being displayed. In a fourth state, the application may be executing but may not be the top most window, and is hidden by other application windows. In particular, another application may display a pop-up window and place the cursor in that window. For example, a dialog box notifying the user of an email message may be displayed while the application that the test-engine launched is being executed. This new application has superceded the application launched by the test-engine in the list of processes in the operating system.","These states are identified using process handles, executable names and the application's own title in a succession of inquiries to the operating system. Often, an application has not finished loading and the ADT procedure waits for a predetermined amount of time for the loading to complete. The title of the application is in the application's registration entry item APPTITLE  (). Once the application is loaded, to confirm the identity of the application, the test-engine  () retrieves the name of the application from it's title and compares it to the name entered in the APPTITLE entry item of the registration file.","For the state in which the application is on top and there are no pop-up windows, the test-engine  () opens the document.","For the state in which the application is on top and there is a pop-up dialog window, the test-engine  () dismisses that dialog box using the user supplied key sequence that is associated with that condition, in the APPOPENCOND field of the registration file. If the pop-up window is not dismissed after playing the user supplied key sequence, the test-engine  () takes a guess as to the appropriate key sequence. The guess depends on a state of the test-engine. When opening applications and documents, or if printing, the test-engine selects the default choices of the dialog box by playing an enter key character. Alternately, when the enter key fails to dismiss the dialog box, the ADT procedure may execute an algorithm to dismiss the dialog box.","For the state in which the application is hidden behind a window of another application, the test-engine  () attempts to bring the application window of the application launched by the test-engine to the top (foreground) and make it the active window. Using a loop, the test-engine waits for a predetermined amount of time for the application window of the application launched by the test-engine to return to the top. After the predetermined amount of time, if the application window of the application launched by the test-engine does not return to the top, then either the application has a software problem, the operating system failed because of resource shortages, the application was not installed properly, or another failure has occurred. The test-engine  () stops execution of the rows associated with this application, and updates the log file to indicate that the rows associated with this application will not be processed. The test-engine begins processing the rows associated with a different application.","Once the application has displayed its application window that allows the user to select a document, the test-engine  () opens the document specified in column two in the current row of the spreadsheet using the key sequence specified in the APPOPEN text field  () of the registration file for the application. The APPOPENDOC field  () in the registration file for the application ensures that the name of the document is in the correct place in an \u201cOpen file\u201d dialog box. When the \u201cOpen file\u201d dialog box is approved for a document and the document is being opened, if a pop-up window interferes with that document's opening, the test-engine accesses the user supplied information in the APPOPENDOCCOND field  () in the registration file to determine the responsive keystroke sequence, if any. If there is no keystroke sequence or if the keystroke sequence fails to dismiss the interfering dialog box, the test-engine proceed to guess, as described above.","The test-engine  () then determines whether any print driver options are specified in the row. If so, the test-engine  () activates the print driver, which displays a print driver window. The test-engine  () sets and responds to the controls of the print driver window as specified in the option setup window for that control. To ensure that the specified print driver options are set appropriately, the test-engine  () determines whether the print option that the test-engine just set has been recorded in the print driver by querying the control for that print option for the current value of the print option. If the current value of the control for the print option does not match the specified value from the spreadsheet, the setting of that print option failed, and the test-engine records a message that identifies the failure to set that option in the test-log file. For example, the test-engine  () writes the following in the test-log  (.): \u201cFailure could not set specified option value . . . \u201d with the date and time. The test-engine also prints the document so that the user may visually observe the failure. The combination of the test-log and the printed document helps engineering fix the print driver. Sometimes, the print driver indicates that a print option is set, but, the printed document demonstrates otherwise. In this case, the user can identify the failure by visually inspecting the printed document.","The print driver window is activated once for each row. Once all the options are set, the test-engine  () automatically approves the print driver options by sending the keystroke sequence that effectively clicks the OK button, and dismisses the print driver window. The document is then printed by the test-engine  by exercising the key sequence in the APPPRINT field  () of the registration file which invokes the application's own dialog box for printing. Because each such dialog box may be different for each application, and all such dialog boxes cannot be learned by the ADT procedure, the test-engine retrieves and exercises the key sequence, if any, specified in the APPPRINTCOND  () field of the registration file to automatically respond to the application's dialog box for printing to approve the printing process. Typically, the key sequence for the APPPRINTCOND  () field is the ENTER key. The typical application print dialog box has the OK button highlighted as a default selection, and exercising the ENTER key approves the printing of the document. When finished with all or selected rows, the test-engine simply displays the term \u201cDone\u201d in a message box.","Once created, a spreadsheet can be used many times. If the driver is modified, the user can request that the auto-learn procedure be executed to update the learned-controls file for that driver. In one embodiment, the user selects the auto-learn button  () to invoke the auto-learn procedure  ().","Alternately, the ADT procedure provides a way for a user to test a subset of the applications, documents and selected controls in a portion of the spreadsheet. When a user highlights a subset of rows in the spreadsheet, the test-engine  () processes a portion of the driver test data structure associated with the highlighted rows, and thereby tests the print driver with the applications, documents, and selected controls of only the highlighted rows.","For those controls that are clicked or unclicked, such as radio buttons, push buttons and check boxes, the ADT procedure visually represents available state(s) of those controls to the user using values of \u201cClick\u201d, \u201cOn\u201d and \u201cOff.\u201d When the ADT procedure presents \u201cClick\u201d to the user and the user selects \u201cClick\u201d for the value, the ADT procedure will apply a left-mouse button click to that control. For check boxes, the \u201cClick\u201d value toggles the check box between opposite values. If the check box includes a check mark, the \u201cClick\u201d will remove the check mark; if the check box is empty, the \u201cClick\u201d will place a check mark in the check box. For radio buttons, in general, the \u201cClick\u201d value selects a radio button, but does not unselect an already selected radio button. The \u201cOn\u201d and \u201cOff\u201d values allow the user to set a check box to a specific value. This is often better for check boxes because it ensures that the driver option is either set or not set. A \u201cClick\u201d is allowed but not recommended for check boxes. For radio buttons and pushbuttons, the \u201cOn\u201d and \u201cOff\u201d values do not apply, and are not presented as an available value to the user.","In this way, the present invention, automated driver testing (ADT), makes it easy to add, modify and delete, drivers, applications, documents, and driver options to be tested. It also makes it easy to expand the number and nature of the options to be tested.","As shown in , to select options, the option setup window  is displayed when the user double clicks on a cell in the control values area  () of the spreadsheet. To generate the exemplary option setup window  of , the user double-clicked on the control option for 300 dpi in row three. In the option setup window , the option caption , type of control , and row number  are displayed. A \u201clist of option(s)\u201d area  displays available settings or values for the control option. In this example, the only setting or value for the option  is \u201cClick.\u201d","Alternately, print option controls of a driver are placed on tab controls (, ). The auto-learn process determines which tab control the driver option is on, if there is more than one tab control in the driver, and which page of that tab control that print driver option is on. The value of the tab control and which page of that tab control that the driver option is on is recorded in a numerical string, called the controlID, so that the test-engine  () may easily navigate among the controls during testing. For example, for the tabbed pages  of  at least four available settings will be displayed (the number of available settings depends on the number of pages in the tab control); each setting selects a different page.","When the print driver displays a secondary pop-up dialog box from an option in the driver being selected, a predefined response to the secondary pop-up box may be provided using a subsequent action and their buttons text box . The subsequent action and their buttons text box  works with the OK, CANCEL, IGNORE, ESC, EXIT, PAUSE, YES, NEXT and NO buttons, , , , , , , ,  and , respectively, to allow the user to specify subsequent button settings to be activated on the secondary pop-up dialog box. The test-engine  () uses the specified subsequent button setting in the subsequent action and their buttons text box  to automatically respond to the secondary pop-up dialog box, after learning it.","The option setup window  allows a user to globally find and replace text in the control options portion of the spreadsheet. A \u201cFind This\u201d text box  specifies characters to search for. A \u201cReplace with\u201d text box  specifies the replacement characters. A find button  allows a user to initiate a search for the specified characters in the \u201cFind This\u201d text box . A \u201cReplace Next\u201d button  replaces the specified found characters with the replacement characters, and performs another search for the specified characters. A \u201cReplace All\u201d button  globally replaces the specified text with the replacement characters in the control options of the entire spreadsheet.","A down radio button  and an up radio button  specify the direction of the search. A selected text check box  allows a user to only search and replace among highlighted or selected cells of the spreadsheet.","An unselect button  allows the user to unselect a selected option in the list of options area . A clear action button  allows the user to clear the Subsequent Action and Their Buttons text box . A Cancel button  clears the option setup pop-up window  from the display and does not change the spreadsheet. An OK button  closes the option setup pop-up window  and makes the specified changes to the spreadsheet.","When a problem arises, some applications display a pop-up window informing the user of the problem. For example, an application may display a pop-up window stating \u201cCan't find \u2018specified file\u2019 you should have installed for the document to run,\u201d \u201cCan't find fonts,\u201d \u201cFile is read-only, do you want to open it anyway,\u201d \u201cFile needs conversion to new format.\u201d and \u201cDo you want to save.\u201d To respond to these pop-up windows and continue testing, the test-engine retrieves the characters specified in one of the conditional text entries of the registration file. The conditional text entries are designated with the term \u201cCOND\u201d at the end of their field name in the registration procedure.","The conditional responses are associated with specific events. When the event that is associated with the conditional response occurs, the test-engine accesses the registration file to retrieve the conditional response for that event. If the registration file has a conditional response for that event, the test engine executes the predefined keystrokes of the conditional response. For example, when some applications are opened, a pop-up window is displayed and the application waits for the user to respond to the pop-up window. The test-engine will access the APPOPENCOND registration information in the registration file to retrieve the conditional response, if any. If a conditional response is found, the test-engine executes the keystrokes to automatically respond to the pop-up window to continue testing. If no pop-up windows interrupt the testing, the instructions in the conditional text entry fields that are defined in the registration procedure and stored in the registration file are ignored.","For example, for one application, the APPPRINTCOND response is:\n\n","When this APPRINTCOND response is executed, the enter character will be played, then the test-engine will wait one second, as designated by the sequence: \u21921\u2192. The N character will be played, followed by playing the character corresponding to simultaneously hitting the \u201cALT\u201d and \u201cd\u201d keys, and followed by the character corresponding to simultaneously hitting the \u201cALT\u201d and \u201co\u201d keys.","Using the conditional responses, the test-engine has enhanced flexibility to automate the testing of print drivers with many different application programs, and reduce or eliminate user interaction with the print driver testing.","Sometimes the auto-learn procedure  () does not correctly identify a control. The ADT procedure provides a way for the user to correct improperly identified controls.","Referring back to , the user highlights the column in the spreadsheet  for which the driver option was incorrectly learned, then clicks on the fixit button  () on the tool bar to invoke a fixit procedure  (). The fixit procedure  () calls the print driver, navigates to the control of driver option which was incorrectly learned, and points a red arrow at the top left of the print driver option control that was incorrectly learned so the user can see the control of the print driver option. The fixit procedure  () presents the user with a fixit window that allows the user to change either the label by which the driver option control is recognized or the control type of the driver option control. When the user selects and approves a change, the fixit procedure  () modifies the learned-controls file  () accordingly.","In an alternate embodiment, referring back to , in the ADT window , a user can double click on a control in the driver's option setting area  and manually enter the correct information.","The auto-learn procedure  () automatically identifies and stores information describing the controls of a driver in a learned controls file  () for each driver. Sometimes the auto-learn procedure  () does not identify a control. However, the user can force the auto-learn procedure to learn the control. To force the auto-learn procedure to learn the control, the user manually activates the print driver and selects the omitted control. The user then activates the manual-learn button  and the auto-learn procedure will learn the control and update the learned-controls file for that driver.","The learned-controls index file  () associates each driver, by name, with a learned-controls file  (). An exemplary learned-controls index file is as follows:",{"@attributes":{"id":"p-0091","num":"0130"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Print Driver 1","00001.fnd"]},{"entry":[{},"Print Driver 2","00002.fnd"]},{"entry":[{},"Print Driver 3","00003.fnd"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The test-engine  () automatically logs predefined events with dates and times. The predefined events at least include a date and time of the test, the name of the spreadsheet used for the test, when a row of the spreadsheet begins execution, when the application is opened, the result of opening the application, opening a document and the result of opening the document, and exercising a control and the result of exercising the control. An exemplary log of the processing of one row, row , is as follows:","5\/5\/99, 10:10:43 AM",">>>Tab separated text file is: C:\\QA\\TOOLS\\ADT\\ACCPT9\u02dc1.SPD",">>>\u2014\u2014\u2014\u2014\u2014",">>>5\/5\/99, 10:10:58 AM: Running Row # 3 of the Spreadsheet.",">>>\u2014\u2014\u2014\u2014\u2014",">>>5\/5\/99, 10:11:21 AM: Success: Application Adobe Illustrator opened.",">>>5\/5\/99, 10:11:21 AM: Opening Document:","k:\\DRIVERQA\\TESTFILE\\ACC95NT\\AI41G123.AI",">>>5\/5\/99, 10:11:45 AM: played APPOPENDOCCOND ({ENTER})",">>>5\/5\/99, 10:11:45 AN: Success Document","k:\\DRIVERQA\\TESTFILE\\ACC95NTAI41G123.AI is opened.",">>>5\/5\/99, 10:11:51 AM: Driver successfully started.",">>>5\/5\/99, 10:11:56 AM: Control #1.1.5, &Portrait:",">>>Exercising OptionBox &Portrait",">>>5\/5\/99, 10:12:10 AM: Success: OptionBox Clicked.",">>>5\/5\/99, 10:12:21 AM: Control #1.1.13, Paper &source::",">>>Exercising ComboBox Paper &source:",">5\/5\/99, 10:12:28 AM: Success: exercised ComboBox item AutoSelect Tray.",">>>5\/5\/99, 10:12:36 AM: All Options in row have been exercised.",">>>5\/5\/99, 10:12:36 AM: OK button will be clicked to validate settings next",">>>5\/5\/99, 10:12:37 AM: Control #0.0.10, OK:","=>>>Exercising PushButton OK",">>>5\/5\/99, 10:12:51 AM: Success: Button Clicked.",">>>5\/5\/99, 10:12:54 AM: Completed setting options for this row.",">>>5\/5\/99, 10:13:01 AM: Printing document.",">>>5\/5\/99, 10:13:23 AM: Looking for unknown popups.",">>>5\/5\/99, 10:13:23 AM: Pop-up is child of app. Looking for spooler pop-up . . .",">>>5\/5\/99, 10:13:34 AM: Found app back.",">>>5\/5\/99, 10:13:34 AM: Spooled job. On its way to the printer . . .",">>>5\/5\/99, 10:14:05 AM: Success Closing Application Adobe Illustrator.",">>>5\/5\/99, 10:14:07 AM: Done.","Because the test-engine automatically generates a detailed log, as shown above, the user can quickly and easily identify applications, documents and control options in which failures occurred.","The spreadsheet file has at least four lines. The first line of the spreadsheet tile names the driver and, in one embodiment, appears as follows:","The second line of the spreadsheet file describes all tab control objects (, ). In this description, the term \u201ctab stop\u201d refers to a tab control \u201cPage.\u201d An exemplary second line of the spreadsheet file is follows:\n\n","In the exemplary second line above, the \u201c1.0.0\u201d is the control identifier (ID) assigned by the auto-learn procedure to the one tab control object found. \u201cTabControl\u201d is the ADT control type designation of the control. \u201cSysTabControl\u201d is the class name. The control's ordinal number is \u201c1.\u201d The control's relative location with respect to the screen position of the driver on the display is 29,9. The control's height and width are 375 and 349, respectively. The \u201c4\u201d indicates the total number of tab stops or tab pages for the tab control.","The control ID is an internal classification number that is associated with each control option. The control ID is a numerical string sequence of three numbers, delimited by periods. Each control is associated with a specific page of a Tab Control. Within each Tab Control page, ADT navigates to the controls using the tab character. The first number indicates the tab control that the print driver option control is on. The second number indicates the page (tab stop) of that tab control that the driver option is on. The third number is a unique number representing a specific printer control option, and only that printer control option. For example, for the fifth printer control option, the numerical sequence is \u201c1.2.5.\u201d Because Tab Controls are at the highest level of control options, the third number is zero for Tab Controls. More generally, for Tab Controls, the second and third numbers are equal to zero. For example, if a print driver has three tab controls, the first, second and third tab controls will be associated with the controlIDs of \u201c1.0.0,\u201d \u201c2.0.0\u201d and \u201c3.0.0,\u201d respectively. The third line of the spreadsheet file describes the controls found in the driver except for their labels or captions which are described below. The description includes driver control characteristic such as the controlID, control type, control's class name, control's ordinal number, and the control's location with respect to the top left corner of the driver control window. The driver control characteristics are delimited by commas. The controls are separated by tab characters. For example, a portion of the third line is as follows:\n\n","The print driver control characteristics are used to set driver options and to read back the driver options using predefined functions in VISUAL TEST\u2122 (Registered Trademark of Rational Software Corporation) as well as the WINDOWS application programming interface. In an alternate embodiment, the driver control characteristics are used to set driver options and to read back the driver options using predefined functions in the MICROSOFT WINDOWS\u2122 application programming interface.","The class name is the name of the object to which that control belongs. The control's class name is assigned by either the operating system, such as MICROSOFT WINDOWS\u2122, or by the print driver designer. The class name may not resemble the function of the control itself. For example, the class name for the Microsoft WORD open dialog box version 8.0 is \u201cbosa_sdm_Microsoft Word 8.0.\u201d In addition, class names may be used ambiguously. As shown in the exemplary third line of the spreadsheet above, both an OptionBox and a PushButton have a class name of \u201cButton.\u201d","To more quickly identify the control type of a print driver option control, the ADT procedure is installed with a list of common and well known classes and their associated control types. This list is stored in a known-class file called \u201cKwnClass.txt.\u201d When the ADT procedure is executed, the known-class file is loaded into memory like the registration file. An exemplary portion of the known-class file for a combo box control type is as follows:",">>[ComboBox]",">>",">>ComboBox",">>ThunderComboBox",">>TcomboBox","The text in the square brackets includes the ADT procedure's internal name for the control type. Subsequent lines list the known classes that implement the combo box control. For example, when the auto-learn procedure identifies a control with a class name of TcombBox, the auto-learn procedure  () accesses the known-class file, and identifies the control as a ComboBox based on its class name of TcombBox.","When two control types have the same class name, or when the class name is not listed in the known-class file, the auto-learn procedure uses other techniques to identify the control, based on a control's properties and behavior. If those techniques fail, the user has the option of using the \u201cfixit\u201d procedure of the ADT procedure.","In one technique for learning a control type of an unidentified control, the auto-learn procedure pretends that the unidentified control is one of the known controls in the known-controls file. The auto-learn procedure exercises the unidentified control as if it were each of the controls in the known-controls file. After exercising the unidentified control as if it were a particular control type, the auto-learn procedure reads bark a response from exercising the unidentified control. The response is known for each type of control and differs based on the type of control. For example, the auto-learn procedure may pretend that the unidentified control is a checkbox, and attempt to read its value. If the auto-learn procedure receives an expected response, such as \u201cchecked\u201d, the auto-learn procedure attempts to confirm the control type by setting the control to its opposite value, such as \u201cunchecked\u201d. The auto-learn procedure then attempts to read the current value of the unidentified control. For the checkbox, if the current value is still \u201cchecked\u201d, that control is not a checkbox and a control type of \u201ccheck box\u201d is eliminated. If the current value is \u201cunchecked\u201d, the auto-learn procedure places the control type of \u201ccheck box\u201d on a list of potential control types for that control. The auto-learn procedure continues to attempt to eliminate control types based on the properties and behaviors of the unidentified control when exercised as though it were each known control in the known-controls file. In most cases, a single control type will remain on the list of potential control types and the control is identified.","Sometimes, the list of potential control types has multiple potential control types. In this case, the unidentified controls are often either an option box, a check box or a command button (also known as a push button). The auto-learn procedure uses the ordinal number properties. A control of a particular type on a tab stop rarely has the same ordinal number as that of a different control of the same type on the same tab stop. For instance, if two push buttons are on tab stop three of the same tab control, those two push buttons probably have different ordinal numbers. When the unidentified control has the same ordinal number as a known control on the same tab stop, that known control type is eliminated from the list of potential control types. The auto-learn procedure compares the ordinal number for the unidentified control, to the ordinal number for each identified control for that tab stop and eliminates control types having the same ordinal number from the list of potential control types. In this way, the auto-learn procedure identifies the control type for most unidentified controls.","The control type is a reserved internal ADT designation for the control. A set of internal control types includes the following control types: TabControl, ListBox, CmdButton, EditBox, OptionBox, CheckBox, ComboBox, FileListBox, DirListBox and DriveListBox. In particular, to determine the control type, the auto-learn procedure uses a process of elimination. There are a predefined number of different controls. Each control has predefined operational characteristics. To identify the controls, the auto-learn procedure executes the print driver and retrieves the handle for each control. The handle is used to access the control to retrieve information from and to set the control to a specified value. For each control, using the handle, the auto-learn procedure operates that control as if the control were each of the predefined controls. When a control is accessed incorrectly, an error will be returned. Therefore, when a control is successfully accessed as a particular predefined control, the auto-learn procedure has correctly identified the control despite its class name.","The control's ordinal number is a unique number per control type per tab stop which is set by the operating system, such as MICROSOFT WINDOWS\u2122, or the driver designer. For example, if a first option box has ordinal number one on tab stop two, a second option box on the same tab stop most likely does not have the ordinal number of one because that ordinal number is used by the first option box. The second option box has an ordinal number of two.","The relative location of the control is with respect to the top left corner of the driver window rather than from the top left corner of the display. The first number of the geographical location is the vertical value of the control with respect to the absolute vertical position of the driver window on the display. The second number is the horizontal position with respect to the leftmost absolute screen position of the driver. The third number is the height of the control, and the fourth is the width of the control.","Some of the control characteristics are used to retrieve the handle that the operating system, such as MICROSOFT WINDOWS\u2122, assigns to each control. The handle is used to access and exercise the control and is retrieved when the driver is executed. The handle for each control is unique and typically does not change while the driver is executing. The handle does change at separate executions of the driver.","The fourth line of the spreadsheet file lists the captions or labels of the controls. The captions are the text descriptions of the controls that are displayed such as \u201cLandscape\u201d and \u201cPaper Size.\u201d The captions are also displayed on the spreadsheet. An exemplary fourth line is shown below:",{"@attributes":{"id":"p-0110","num":"0152"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Application\u2002Document Files\u2002&Portrait\u2002&Landscape\u2002More& Options . . ."},{"entry":"A&bout . . . Restore\u2002&Defaults1 OKCancel\u2003&Apply Paper"},{"entry":"&source:Paper:si&ze: &None &Coarse\u2003&Fine &line art &Error diffusion"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"After listing the \u201cApplication\u201d and \u201cDocument Files\u201d labels, the controls are separated by tabs. The ampersands designate that the next character is to be underlined when displayed.","The fifth and following lines of the spreadsheet file (corresponding to rows four and up of the GUI spreadsheet) describe the application's full path name, the document's full path name, and selected driver option values, separated by tabs. For example, if the control is a combo box listing paper sizes, one entry may appear as follows: \u201cA4 210\u00d7297 mm.\u201d If the third and fourth lines place the control option to designate the paper size in the fifth column, that entry in the fifth and following lines would be preceded by four tab characters.","A user may create and open a template file  (). A template file  () is the same as a spreadsheet file without driver information, including driver control options. The template file is especially useful when the user has a large number of application programs and documents and wants to use those same application programs and documents to test many print drivers. Using the ADT window, the template file can be retrieved, a new driver may be selected, driver control options may be set, and the resulting combination of applications, documents, driver and driver control options may be stored in a spreadsheet.","In one implementation, the ADT window was created using MICROSOFT VISUAL BASIC 5.0\u2122 (Registered Trademark of Microsoft Corporation). The test-engine, also known as ADTRun, also sends the document to the printer, sets the driver options, and monitors the spooler so that the spooler does not interfere with the testing. In one implementation, the test-engine and the auto-learn procedure were designed using VISUAL TEST 4.0\u2122 (Registered Trademark of Rational Software Corporation) and compiled into pseudo-code. Alternately, the test-engine and auto-learn procedures are compiled to generate object code.",{"@attributes":{"id":"p-0115","num":"0157"},"figref":["FIG. 12A","FIG. 12B","FIGS. 4A and 4B","FIG. 2","FIG. 2"],"b":["1200","213","1204","213","1206","1200","60","60"]},"As illustrated in , the LearnApp GUI  includes the command buttons \u201cNew List\u201d , \u201cSave List\u201d , \u201cOpen List\u201d , \u201cAdd an Application\u201d , \u201cAdd a Document\u201d , \u201cLearn All\u201d , \u201cLearn Highlighted Only\u201d , and \u201cRun Current Row\u201d . The LearnApp GUI  also includes a spreadsheet control  that has rows - to -N, where N is a variable maximum number of rows, and columns - to -X, where X is a variable maximum number of columns. For the purposes of illustration, reference will be made to row -A and -B, which represents any two consecutive rows within the set of rows - to -N. The values stored in the cells corresponding to intersecting rows and columns (e.g., row -, column - is the upper left cell), was discussed earlier (see e.g. ).","In order for the program to register (learn) an application, the user opens a new list of applications by selecting the \u201cNew List\u201d  command button. When a list is opened, the user selects \u201cAdd an Application\u201d  to add an application to the list. The new application name will appear in row -, column -. Additional applications may be added in the same manner and the names of additional applications will appear in row -B, column -, where row -A is the last row with data entered. The \u201cAdd a Document\u201d  command button may be used to associate documents with applications, as discussed previously with reference to . The \u201cSave List\u201d  command button saves the list so that it may be opened with the \u201cOpen List\u201d  command button with a subsequent use of the LearnApp GUI. . Finally, the user selects one of the command buttons \u201cLearn All\u201d , \u201cLearn Highlighted Only\u201d , or \u201cRun Current Row\u201d  to learn the application. The \u201cLearn All\u201d  command button executes the LearnApp procedure  once for each application in the list (see ). The \u201cLearn Highlighted Only\u201d  command button executes the LearnApp procedure  once for each application in the list that the user has highlighted. The \u201cRun Current Row\u201d  command button executes the LearnApp procedure  once for the application on which the cursor is on. In an embodiment of the program, documents are associated with applications in the list by selecting the \u201cAdd a Document\u201d  command button and selecting the document to associate with the relevant application, as discussed previously (see ).",{"@attributes":{"id":"p-0118","num":"0160"},"figref":["FIG. 13","FIG. 4A","FIGS. 14A","FIG. 4A"],"b":["1300","1310","1320","1330","1340","1350","1360","1370","1320","1360","104","134","102","14","14","14","14","1300","104","134"],"ul":{"@attributes":{"id":"ul0014","list-style":"none"},"li":{"@attributes":{"id":"ul0014-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0015","list-style":"none"},"li":["APPEXE  is the name of the executable file of the application.","APPNAME  is the user's common name for the application.","APPTITLE  is the captioned name displayed on the title bar of the application.","APPOPEN  is a predetermined keystroke sequence to open a document or file in the application.","APPOPENDOC  is a predetermined keystroke sequence to place a cursor at a field where the document name is to be entered to open a new document in the application.","APPOPENDOCCOND  is a predetermined keystroke sequence to respond to a dialog box that may be presented on the display in response to the keystroke sequence of APPOPENDOC. Not all applications will display a dialog box when opening a document.","APPOPENCOND  is a predetermined keystroke sequence to respond to a dialog box that may be presented on the display when an application begins execution. Not all applications will display a dialog box when opening a document.","APPEMPTYDOC  is a default name given to a new document by the application.","APPPRINT  is a predetermined keystroke sequence that opens a print dialog box to print an open document in the application.","APPPRINTCOND  is a predetermined keystroke sequence that instructs the print dialog box to start printing the document.","APPCLOSE  is a predetermined keystroke sequence to close a document in the application.","APPCLOSECOND  is a predetermined keystroke sequence to respond to a dialog box that may be presented on the display in response to closing the document. Not all applications will display a dialog box when closing a document.","APPSAVPOPUP  is a predetermined keystroke sequence to respond negatively to a dialog box that may be presented on the display when closing a document asking if the document is to be saved.","APPNEW  is a predetermined keystroke sequence to respond to a dialog box that may be presented when a new document is created.","APPPAGSETUP  is a predetermined keystroke sequence to display a page set-up window in the application to control the appearance of the document.","APPEXIT  is a predetermined keystroke sequence to exit the application."]}}}},"As illustrated in , the first subroutine following the START learnapp  is the Learn variables not on the menu subroutine . The Learn variables not on the menu subroutine  consists of steps \u2013. In step , learnapp checks to see if the application that is to be learned has been learned before. If the application has been learned already, learnapp displays a warning that the application has already been learned (step ). The user may opt to continue even if the application has already been learned (step ). If the user does not wish to continue, learnapp terminates (step ) and no variables are changed for the application. Note that when learnapp terminates (step ), the knownapp file is not updated, but the accumulated information remains in the logfile. If the user wishes to continue, the user must decide whether to overwrite the learned application (step ). If the user decides to overwrite, the previous entry regarding the learned application is deleted (step ). In an embodiment of the procedure, the actual deletion of step  could be canceled prior to reaching the end of the procedure, retaining the variable settings of the previously learned application. If the user decides not to overwrite, the previous entry is not deleted and a duplicate entry, another version for the application, is created (step ). In step , APPEXE  is set to the executable name of the application. In step , APPNAME  is set to the executable name minus the extension. In step , APPOPENCOND  is set to an ESCAPE sequence. In step , APPEXE  is executed to start the application. Some applications display a dialog box when they are executed. If a dialog box opens (step ), APPOPENCOND  is played in an attempt to respond to the dialog box (step ). If the dialog box remains open (step ), the user may enter a key sequence in an attempt to close the dialog box (step ).  illustrates a graphical user interface that may be used to enter a key sequence. The graphical user interface allows a control key to be specified along with one to four associated keys.","If the key sequence does not close the dialog box (step ), then a message is sent to the user that both APPOPENCOND  and the user-entered key sequence; failed (step ), the failure is logged (step ), and learnapp is canceled (step ). If the user-entered key sequence successfully closes the dialog box, APPOPENCOND  is set to the user-entered key sequence (step ). In any case, if there is initially no dialog box (step ) or when the dialog box is successfully closed, in the last step , learnapp learns all of the menu items for the application for processing in subroutines \u2013. Note that in alternative embodiments of the learnapp procedure , variables could be learned at different times throughout the procedure.","As illustrated in , in the first step  of the Learn open document variables subroutine , APPTITLE  is set to the title displayed in the application bar. As is the case for some of the other variables set with the learnapp procedure , some applications might not have a relevant APPTITLE  value. Next, learnapp searches the menu items learned in step  (see ) for any that resemble \u201copen document\u201d (step ), such as \u201copen document\u201d or \u201copen file.\u201d If learnapp finds only one reasonable \u201copen\u201d choice (step ) in the menu items learned in step , APPOPEN  is set to the keystroke sequence that selects that menu item (step ). If learnapp cannot choose a menu item learned in step  because none or more than one may be applicable (step ), learnapp displays a listbox containing all of the possible \u201copen\u201d choices (step ). The user selects the appropriate \u201copen\u201d choice from the list displayed in step  or some other \u201copen\u201d choice (step ) and APPOPEN  is set to the user-entered keystroke sequence that activates that menu item. In step , APPOPEN  is played to get an \u201copen\u201d dialog box. In step , learnapp searches the title of the dialog box for the word \u201copen.\u201d If the \u201copen\u201d dialog box does not have the word \u201copen\u201d in the title (step ), and the user indicates that the dialog box is not the \u201copen\u201d dialog box (step ), learnapp halts (step ). If learnapp finds the word \u201copen\u201d in the title of the \u201copen\u201d dialog box (step ) or if the user indicates that despite the absence of the word \u201copen\u201d in the title of the dialog box that the dialog box is the \u201copen\u201d dialog box (step ), APPOPENDOC  is played to ensure the application is ready to have the name of the document entered (step ). In step , learnapp enters the document name, followed by ENTER, causing the application to attempt to search for the document entered. If a dialog box opens (step ), learnapp plays an ESCAPE sequence (step ) to attempt to close the dialog box. If the dialog box closes (step ), APPOPENDOCCOND  is set to the ESCAPE sequence (step ). If the dialog box does not close (step ), a user may enter a key sequence (step ). One embodiment of the invention allows the user to implement the key sequence using the GUI of . If the user-entered key sequence successfully closes the dialog box (step ), APPOPENDOCCOND  is set to the user-entered key sequence (step ). If the user-entered key sequence does not close the dialog box (step ), learnapp halts (step ).","As illustrated in , learnapp searches the menu items learned in step  (see ) for any that resemble \u201cprint\u201d or \u201cplot\u201d (step ). If there is only one reasonable \u201cprint\u201d or \u201cplot\u201d choice in the menu items learned in step  (step ), APPPRINT  is set to the keystroke sequence that selects that menu item (step ). If learnapp cannot choose a menu item learned in step  because none or more than one may be applicable (step ), learnapp displays a listbox containing all of the possible \u201cprint\u201d or \u201cplot\u201d choices (step ). The user may select an appropriate \u201cprint\u201d or \u201cplot\u201d choice from the listbox (step ) and APPPRINT  is set to the selected \u201cprint\u201d or \u201cplot\u201d choice (step ). In the present embodiment, APPPRINTCOND  is always set to the keystroke ENTER (step ). Alternative embodiments could set APPPRINTCOND  in an alternative manner, just as for other variables set in the learnapp procedure . In step , APPRINT  is played in order to print the document that was opened in subroutine . If no dialog box is opened (step ), the document is printed (step ). If a dialog box does open (step ) when APPRINT  is played (step ), then APPRINTCOND  is played (step ) and continues to be played until dialog boxes are no longer open (step ), then, if no dialog boxes are open (step ), the document is printed (step ). In the present embodiment, step  is executed up to three times and if a dialog box is still open (step ) then learnapp halts (step ).","As illustrated in , in the Learn close and save document variables subroutine , learnapp first searches the menu items learned in step  (see ) for any that resemble \u201cclose document\u201d (step ). If there is only one reasonable \u201cclose\u201d choice in the menu items learned in step  (step ), APPCLOSE  is set to the keystroke sequence that selects that menu item (step ). If learnapp cannot choose a menu item learned in step  because none or more than one may be applicable (step ), learnapp displays a listbox containing all of the possible \u201cclose\u201d choices (step ). The user selects the appropriate \u201cclose\u201d choice from the listbox (step ) and APPCLOSE  is set to the user-entered keystroke sequence that activates that menu item (step ). In step , APPCLOSE  is played to attempt to close the document. If a dialog box does not open (step ), then the document is closed (step ). If a dialog box opens (step ), then SAVECOND is set to TRUE if it is a save dialog box (steps  and ) and SAVECOND is set to FALSE if it is not a save dialog box (steps  and ). The user then enters a key sequence to respond to the dialog box (step ). If the key sequence does not work (step ), learnapp halts (step ). If the key sequence does work (step ), then APPSAVPOPUP  is set to the key sequence (step ) if SAVECOND is TRUE (step ) and APPCLOSECOND  is set to the key sequence (step ) if SAVECOND is FALSE (step ). If another popup dialog box is open (step ), then steps \u2013 are repeated (step ) and if a dialog box is still open after step , then a message is sent to the user that the document could not be closed (step ) and learnapp halts (step ). Otherwise, the document is closed (step ).","As illustrated in , in the Learn exit application variables subroutine  learnapp first searches the menu items learned in step  (see ) for any that resemble \u201cexit\u201d (step ). If there is only one reasonable \u201cexit\u201d choice in the menu items learned in step , APPEXIT  is set to the keystroke sequence that selects that menu item (step ). If learnapp cannot choose a menu item learned in step  because none or more than one may be applicable (step ), learnapp displays a listbox containing all of the possible \u201cexit\u201d choices (step ) from which the user may select the appropriate \u201cexit\u201d choice (step ); then APPEXIT  is set to the selected \u201cexit\u201d choice (step ). In step , APPEXIT  is played in order to exit the application. If the application is not successfully exited (step ), then the user can indicated that the APPEXIT  is the correct sequence (step ) in which case learnapp halts (step ) or enter the correct sequence (step ), which is then played (step ). If the key sequence does not allow exit from the application (step ), then learnapp halts (step ). The END learnapp terminator  indicates the end of the learnapp routine  for the application.","In an embodiment of the invention, an automatic suite driver test generation procedure allows testers to set option combinations in the driver and run batch jobs. Batch jobs allow testing of multiple driver option combinations, but are functionally similar to multiple tests of the test driver, as discussed above.","In an embodiment of the invention, an autolearning procedure learns page setup control sequences for applications. This ensures that the options set in the driver are reflected in the printed document since some applications refuse to follow the printer and, instead, enforce their document setup on the printer for the duration of the job by changing page setup of documents at runtime. The autolearning procedure is similar to the procedures used to extract control sequences from applications (see ).","The foregoing description, for purposes of explanation, used specific nomenclature to provide a thorough understanding of the invention. However, it will be apparent to one skilled in the art that the specific details are not required in order to practice the invention. In other instances, well known circuits and devices are shown in block diagram form in order to avoid unnecessary distraction from the underlying invention. Thus, the foregoing descriptions of specific embodiments of the present invention are presented for purposes of illustration and description. They are not intended to be exhaustive or to limit the invention to the precise forms disclosed, obviously many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications, to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the following claims and their equivalents."],"BRFSUM":[{},{}],"heading":["BRIEF DESCRIPTION OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Selecting Options","Conditional Responses","Fixing an Auto-Learned Control","Learning an Omitted Control","An Exemplary Learned-Controls Index File","LOG","Internal Structure of the Spreadsheet File","Driver Name: Print Driver ","A Template File","An Exemplary Implementation","An Automated Procedure for Registering Applications","Additional Features of an Exemplary Implementation"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a better understanding of the invention, reference should be made to the following detailed description taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 4B","FIG. 4A"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 5","FIG. 3"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 8","FIG. 5"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 9","FIG. 8"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 10","FIG. 8"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 12A"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 12B"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 14A"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 14B"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 14C"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 14D"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 14E"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
