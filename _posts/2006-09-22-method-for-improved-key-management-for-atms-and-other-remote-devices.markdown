---
title: Method for improved key management for ATMs and other remote devices
abstract: A method, article, and system for providing an effective implementation of a data structure comprising instructions that are cryptographically protected against alteration or misuse, wherein the instructions further comprise a trusted block that defines specific key management policies that are permitted when an application program employs the trusted block in application programming interface (API) functions to generate or export symmetric cryptographic keys. The trusted block has a number of fields containing rules that provide an ability to limit how the trusted block is used, thereby reducing the risk of the trusted block being employed in unintended ways or with unintended keys.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07908474&OS=07908474&RS=07908474
owner: International Business Machines Corporation
number: 07908474
owner_city: Armonk
owner_country: US
publication_date: 20060922
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","TRADEMARKS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application is related to commonly assigned U.S. patent application Ser. No. 11\/534,236, entitled METHOD FOR CONTROLLING SECURITY FUNCTION EXECUTION WITH A FLEXIBLE, EXTENDABLE, AND NON-FORGABLE BLOCK, filed on Sep. 22, 2006. This application is incorporated by reference herein in its entirety.","IBM\u00ae is a registered trademark of International Business Machines Corporation, Armonk, N.Y., U.S.A. Other names used herein may be registered trademarks, trademarks or product names of International Business Machines Corporation or other companies.","1. Field of the Invention","This invention relates generally to cryptographic coprocessors employed in server computer systems, and more particularly to providing a method, article, and system for the effective implementation for securely transferring symmetric encryption keys to remote devices, such as Automated Teller Machines (ATMs), PIN entry devices, and point of sale terminals. It may also be used to transfer symmetric keys to another cryptographic system of any type, such as a Host Security Module (HSM) in a computer server.","2. Description of the Related Art","Automated Teller Machines (ATMs), PIN entry devices, and point of sale terminals have become a central feature of modern life and have become quite prevalent in and out of the work environment. For example, during the course of the day, a user may utilize an ATM to conduct financial transactions, purchase gas for an automobile from a point of sale terminal in the form of a fuel pump via a credit or debit card, and purchase food at the grocery store in a checkout line with a point of sale terminal also with a credit or debit card. In all these instances, security is a prime concern, and an individual's data (card number, passwords, account numbers, etc.) must be kept secure and out of reach from unintended parties. In addition, access to controls and machine settings must be secured. The securing of sensitive data is normally accomplished through the use of encryption or encoding of the data. Encrypted data is only supposed to be accessible to an intended party with use of an encryption key to decipher the encoded information. The widespread use of electronic transaction processing applications has increased the demands for improved features, ease of use, and improved security.","Remote Key Loading refers to the process or loading symmetric encryption keys to a remotely located device, such as an ATM, from a central administrative site. The process encompasses two phases of key distribution:\n\n","A new ATM, when it is delivered from the manufacturer and being put into operation, has none of the affiliated bank's or service provider's security keys pre-installed. The process of getting the first key securely loaded in the ATM is a difficult one. Loading the first KEK into each ATM manually, in multiple cleartext key parts has typically been the security key loading process. In this process, two separate people must carry key part values to the ATM, and load them manually. Once inside the ATM, they are combined to form the actual KEK. In this manner, neither of the two people has the entire key, protecting the key value from disclosure or misuse. This method is labor-intensive and error-prone, making it expensive for the banks or service providers.","When an ATM is in operation, the bank or service provider can install new keys as needed by sending them enciphered under a KEK it installed at an earlier time. This is straightforward in concept, but the cryptographic architecture in the ATMs is often different from that of the host system sending the keys, and it is difficult to export the keys in a form understood by the ATM. For example, cryptographic architectures often enforce key usage restrictions, in which a key is bound to data describing limitations on how it can be used. The encoding of these restrictions and the method used to bind them to the key itself differs among cryptographic architectures, and it is often necessary to translate the format to that understood by the target device before a key can be transmitted. It is difficult to do this without reducing security in the system by making it possible to arbitrarily change key usage restrictions. The reduction in the level of security could potentially introduce holes that could permit misuse of the key management functions to attack the system.","The present invention is directed to addressing, or at least reducing the effects of, one or more of the problems set forth above, through the introduction of a new secure data structure called a trusted block. This disclosure describes a new and novel method for providing the necessary cryptographic functions to create and manage the special key forms needed for remote key distribution of this type. The invention described here also provides a mechanism through which the system owner can securely control these translations, preventing the majority of attacks that could be mounted by modifying usage restrictions.","Glossary","Access Control\u2014A mechanism for regulating access to resources, data or services based on the role and identity of individual users.","AND\u2014When capitalized in this fashion, refers to the \u201cAND\u201d boolean operation.","API Function\u2014Application programming interface is the interface that a computer system, library, or application provides in order to allow requests for services to be made of it by other computer programs, and\/or to allow data to be exchanged between them.","BER encoding\u2014Basic Encoding Rules for ASN.1 (Abstract Syntax Notation One, defined in the X.208 standard). ASN.1 is a flexible notation that allows one to define a variety of data types, from simple types such as integers and bit strings to structured types such as sets and sequences, as well as complex types defined in terms of others. BER describes how to represent or encode values of each ASN.1 type as a string of eight-bit octets.\n\nCBC\u2014Cipher Block Chaining mode of encryption.\n\nCCA\u2014The Common Cryptographic Architecture, a cryptographic architecture and related APIs developed by IBM and used in many IBM cryptographic products.\n\nCCA token\u2014A key structure used to carry CCA keys in various formats. The token can be either an internal token or an external token as defined below.\n\nCleartext\u2014The form of a message or data that is transferred or stored without cryptographic protection.\n\nConfounder\u2014A bit string that is used to initialize the encryption-block chaining value so that the encrypted result is different each time a data value is encrypted.\n\nControl vector, or CV\u2014That portion of a CCA key token that describes how the key may be used. This information is defined in published IBM documentation: IBM PCI Cryptographic Coprocessor CCA Basic Services Reference and Guide.\n\nCVG\u2014The Control Vector Generate service. This service generates a CV based on a key type.\n\nDES\u2014Data Encryption Standard\u2014DES works by encrypting groups of 64 message bits, which is the same as 16 hexadecimal digits. To do the encryption, DES uses \u201ckeys\u201d where are also apparently 16 hexadecimal digits long, or apparently 64 bits long. However, every 8th key bit is ignored in the DES algorithm, so that the effective key size is 56 bits. But, in any case, 64 bits (16 hexadecimal digits) is the round number upon which DES is organized\n\nDouble length CV\u2014A control vector that is 16 bytes in length.\n\nDouble length Key\u2014A DES key that is 16 bytes in length.\n\nDSV service\u2014The Digital Signature Verify service. This service performs a digital signature verification using the public key found within the trusted block.\n\nEDE\u2014Encrypt, Decrypt, Encrypt. This describes a method of implementing Triple DES.\n\nExporter key\u2014A type of transport key, which is used to wrap a key that will be used at a different node.\n\nExternal key\u2014A key that is for exchange with another cryptographic device. This key is encrypted with a transport key, also called a key-encrypting key (KEK). The KEK is shared with the other device to which the key may be transmitted.\n\nIMP-PKA\u2014A limited authority importer KEK (key encrypting key) used to protect PKA (public-key algorithm) structures when they are in external form.\n\nImporter key\u2014A type of transport key, which is used to unwrap a key that will be used at a node.\n\nIV\u2014Initial vector. This is a value used in CBC mode encryption.\n\nInput block\u2014A trusted block token, which gets updated during the trusted block creation process.\n\nInternal key\u2014A key that is for use on the local cryptographic device. This key is encrypted with a master key associated with the cryptographic device.\n\nKey encrypting key (KEK)\u2014A symmetric key that is used to encrypt a key for transport to another device. Both devices must have the same KEK key value so that one can encrypt a key with it, and the other can decrypt the key after it is received. Also called a Transport key.\n\nKeyword\u2014An option that will direct the specific processing of a process or routine.\n\nKVP\u2014A Key Verification Pattern. This is a cryptographically-calculated hash of a key's cleartext value, which can be used to verify that the correct key value is used, without disclosing any information about any bits of the key itself.\n\nLabel\u2014A string which can be used to reference a key token that has been stored in a file or other repository.\n\nMAC\u2014A Message Authentication Code. This is a cryptographically-computed checksum, which uses a cryptographic key to produce a fixed-length hash of a variable-length message string. The MAC will change if any portion of the message is changed, or if the wrong key is used.\n\nMAC key\u2014A key designated for the purpose of computing a MAC (Message Authentication Code).\n\nMaster key\u2014A key stored in a secure cryptographic device for the purpose of encrypting keys to be used in that device which are stored externally in unprotected storage.\n\nMDC-2\u2014The 2-encryption per stage version of the Modification Detection Code hashing algorithm discussed in the CCA Basic Services Reference and Guide (available from IBM Corporation, Armonk, N.Y., and at www.ibm.com\/security\/cryptocards).\n\nMKVP\u2014Master key verification pattern.\n\nPKA Master Key\u2014Public Key Algorithm master key\u2014a master key used to encrypt keys for public-key algorithms such as RSA.\n\nPKCS 1.0\u2014Digital Signature Hash Block  Formatting Method described in the PKCS #1 v2.0 standard at website: www.rsasecurity.com\/rsalabs\/pkcs.\n\nPKCS 1.1\u2014Digital Signature Hash Block  Formatting Method described in the PKCS #1 v2.0 standard at website: www.rsasecurity.com\/rsalabs\/pkcs.\n\nPKCS 1.2\u2014A method of formatting keys described in the PKCS #1 v2.0 standard at website: www.rsasecurity.com\/rsalabs\/pkcs.\n\nPKI service\u2014The Public Key Import service. This service converts an RSA key or trusted block from external form to internal form. The PKI service is used to implement the Trusted Block Import service.\n\nRKX service\u2014The Remote Key Export service is a method of secured transport of DES keys from a security module (e.g. the 4764 Cryptographic Coprocessor) to a remote device, e.g. Automated Teller Machine or vise versa, using asymmetric or symmetric techniques. The DES keys to be transported are either key encrypting keys that are generated within the 4764, or alternately, operational keys or replacement KEKs enciphered under a KEK currently installed in a remote device. This service accepts as input parameters: a public key certificate, a transport key, a rule ID to identify the appropriate rule section to be used within a trusted block, an importer key, a source key, optional extra data that can be used as part of the OAEP key wrapping process, and key check parameters that are required to calculate the key check value. This service outputs a symmetric encrypted key, an optional asymmetric encrypted key, and an optional key check value.\n\nRKX token, or RKX key token\u2014A data structure used to encase a key that is generated, or exported by the RKX service. The RKX token contains: a length field indicating the size of the data it contains, an 8 byte confounder, an encrypted key that is either 8, 16, or 24 bytes in size, a rule ID identifying the trusted block rule that was used to create the RKX token, and a MAC value. The MAC value is an ISO-16609 TDES CBC mode MAC that is computed over the RKX token starting at offset zero in the token and including all fields up to but not including the MAC value field itself.\n\nRSA OAEP\u2014A method of formatting a key for secure transport described in the PKCS #1 v2.0 standard at website: www.rsasecurity.com\/rsalabs\/pkcs.\n\nSingle Length Key\u2014A DES key that is 8 bytes in length.\n\nSingle Length CV\u2014A control vector that is 8 bytes in length\n\nTBC service\u2014Trusted Block Create service. This service creates a trusted block in external form under dual or multiple control.\n\nTDES\u2014Triple DES\n\nTriple DES\u2014A mode of the DES encryption algorithm in which each block of data is encrypted three times with either two or three different eight-byte keys in order to provide increased security.\n\nTLV\u2014Acronym for \u201cTag Length Value\u201d. This refers to a data structure design in which there exists: a tag field identifying the data structure as a particular type; a length field of the entire structure including the tag, length, and value fields; and a value field which may be any number of bytes long.\n\nToken\u2014A data structure representing a series of bytes that are to be treated as an entity. The structure can contain cryptographic key material, control vectors or other data related to the key.\n\nTransport key\u2014See Key encrypting key.\n\nTriple Length Key\u2014A DES key that is 24 bytes in length.\n\nTrusted Block\u2014A data structure protected by a MAC that typically contains an RSA public key and optional information (rules) to control export of other keys associated with the device(s) that use that public key. For remote key distribution, the public key will be the root certification key for the remote device vendor, and it will be used to verify the signature on public key certificates for individual remote devices. In this case, the Trusted Block will also contain Rules that will be used to generate or export DES keys for the ATM or other remote devices. It is also possible for the Trusted Block to be used simply as a trusted public key container, and in this case the Public Key in the block will be used in CCA functions such as Digital Signature Verify. In summary, the trusted block is a data structure formatted to contain (1) zero or one trusted public key section, (2) zero or more rule sections, (3) zero or one trusted block label section, (4) one trusted block information section, and (5) zero or one application defined data section.\n\nVariant\u2014A value used to modify a key value. The variant is generally a binary string of the same length as the key, and it is exclusive-ORed with the key value to produce a variant key that is used for some cryptographic operation.\n\nXOR\u2014This refers to the \u201cexclusive OR\u201d Boolean operation.\n","Embodiments of the present invention include a data structure comprising instructions that are cryptographically protected against alteration or misuse. The instructions further comprise a trusted block that defines specific key management policies that are permitted when an application program employs the trusted block in application programming interface (API) functions to generate or export symmetric cryptographic keys. The API functions further comprise: a Trusted_Block_Create (TBC) function, and a Remote_Key_Export (RKX) function. The TBC function creates the trusted block, while the RKX function uses the trusted block to generate or export symmetric keys according to a set of parameters in the trusted block. In addition, the trusted block has a number of fields containing rules that provide an ability to limit how the trusted block is used, thereby reducing the risk of the trusted block being employed in unintended ways or with unintended keys.","The trusted block comprises: zero or one trusted public key section, zero or more rule sections, zero or one trusted block label section, one trusted block information section, and zero or one application defined data section. The application defined data section is an optional field that an application program can use to include its own data in the trusted block, and a cryptographic module does not use or examine this application program data in any way, but the application defined data is carried in the trusted block and protected in the same way as the other contents of said trusted block. The trusted block is protected by a MAC, which is calculated over the contents of the trusted block. The trusted block contains the public key and optional rules to control export of the symmetric cryptographic keys associated with device(s) that use the public key. In the case of remote key distribution the public key serves as the root certification key for the remote device(s). The public key may also serve to verify the signature on public key certificates for device(s), in which case said public key acts as a digital signature verifier.","The rules in the rules section of the trusted block are created and approved by a cryptographic module under dual control; and the rules are protected from modification. The rules in the rules section define how symmetric keys will be generated or exported under control of said trusted block.","The TBC function employs dual control (multiple control) to create the trusted block, where the dual control requires at least two separate individuals to create the trusted block. The TBC function comprises parameters that determine the length and structure and content of the trusted block. The MAC, which is a cryptographically-computed checksum that uses a cryptographic key to produce a fixed-length hash of a variable-length message string, will change if any portion of the trusted block is changed, or if a wrong key is used with said trusted block.","The structure of the trusted block used by the RKX function holds the encrypted symmetric keys so as to bind them to the trusted block, and allows sequences of RKX calls to be bound together as if they are an atomic operation. The RKX function provides for secure transport of the symmetric keys from a security module to a remote device. The RKX function creates a RKX token. The RKX token is a data structure used to encase the symmetric key. The RKX token further comprises: a length field indicating the size of the data contained within said RKX token; a 8 byte confounder; an encrypted key that is either 8, 16, or 24 bytes in size; a rule ID identifying said trusted block rule that was used to create said RKX token; and a MAC value.","The symmetric keys of the present novel invention maybe Data Encryption Standard (DES) key. The DES keys to be transported are either key encrypting keys (KEK) that are generated within the security module, or alternately, operational keys or replacement KEKs enciphered under a KEK installed in the remote device.","Embodiments of the present invention also include a method for securely transferring symmetric cryptographic keys to remote devices. The method utilizes a data structure comprising instructions that are cryptographically protected against alteration or misuse. The instructions further comprise a trusted block that defines specific key management policies that are permitted when an application program employs the trusted block in application programming interface (API) functions to generate or export symmetric cryptographic keys.","A system for implementing the method of the present invention, as well as, an article comprising one or more machine-readable storage media containing instructions that when executed enable a processor to carry out the method, are also provided.","Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention. For a better understanding of the invention with advantages and features, refer to the description and to the drawings.","The detailed description explains the preferred embodiments of the invention, together with advantages and features, by way of example with reference to the drawings.","The trusted block concept provides a great deal of flexibility and power, but at the same time it gives the security administrators the ability to tightly control what can be done with the cryptographic keys used by their applications. The new methods define new procedures for distributing and loading these keys using public key cryptographic techniques, which allow banks or other service providers to load the initial KEKs without sending anyone to the ATMs, or to exchange keys with other types of cryptographic systems. These methods will make the process quicker, more reliable, and much less expensive for the banks or other service providers. This disclosure describes a new and novel method for providing the necessary cryptographic functions to create and manage the special key forms needed for remote key distribution of this type. The invention described also provide a mechanism through which the system owner can securely control these translations, preventing the majority of attacks that could be mounted by modifying usage restrictions. An example of a cryptographic coprocessor used with server systems that would implement the present invention is the IBM 4764, which is also known as the PCIXCC or the Crypto Express2 (CEX2).","The trusted block is the central data structure to support all remote key loading functions. The trusted block provides great power and flexibility, but this means that it must be designed and used with care in order to have a secure system. The required security is provided through several features of the design.\n\n","Table 1 provides an overview of the structure of the trusted block.",{"@attributes":{"id":"p-0044","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Structure version information"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Public key","Modulus"]},{"entry":[{},"Exponent"]},{"entry":[{},"Attributes"]},{"entry":["Trusted Block Protection","MAC key"]},{"entry":["Information","MAC"]},{"entry":[{},"Flags"]},{"entry":[{},"KVP"]},{"entry":[{},"Activation\/Expiration dates"]},{"entry":["Trusted Block name\/label (optional)","Label"]},{"entry":["Rules","Rule 1"]},{"entry":[{},"Rule 2"]},{"entry":[{},"Rule 3"]},{"entry":[{},". . ."]},{"entry":[{},"Rule N"]},{"entry":["Application defined data","Data defined and understood only"]},{"entry":[{},"by the application using the trusted"]},{"entry":[{},"block"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The elements of table 1 are as follows:\n\n","The \u201cTrust\u201d in the Trusted Block is established by creating the block under dual control. Once that trust has been established, it is ensured using cryptographic techniques. The trusted block does not contain any data that has to be kept secret, but it is essential that its contents be protected against unintended modification. In order to accomplish this, the block is protected using a MAC, calculated using a symmetric key. The MAC key is randomly generated when the MAC is first calculated on the trusted block.","The MAC is calculated in the following way, for a trusted block B.","1. Make a temporary copy of the trusted block B. Call this temporary copy T.","2. Fill the following fields in block T with binary zeroes.\n\n","3. Calculate the MAC over the entire block T using the MAC key.","4. Insert the MAC into the MAC field of the trusted block B.","The MAC key itself is encrypted and embedded in the trusted block. If the trusted block is in internal form, the MAC key is encrypted with a variant of the device master key. If the block is in external form, it is encrypted using a key-encrypting key. In either case, the MAC key is prepended with a randomly generated confounder, which is equal to the block length of the encryption algorithm (For DES or Triple-DES the confounder is eight bytes in length) before it is encrypted. Encryption is in CBC mode, however alternative encryption modes will also work without altering the intent of the invention. ECB mode is not acceptable, however; encryption must use a mode that chains successive blocks of text so that each encryption depends on the content of the current message block and the preceding blocks.  illustrates the MAC key  encrypted in the CBC mode. The MAC key has two parts the confounder , and the key  itself.","For an internal format trusted block, the string shown in  is encrypted in CBC mode using a variant of the master key, with a zero IV (initialization vector). The variant is a fixed, randomly generated string of bytes with length equal to the master key. If the master key is a DES or Triple-DES key, each byte of the variant must have even parity so that the parity of the resulting key is not altered (Keys used with DES algorithms have odd parity in each byte of the key, so the variant must be constructed so that the resulting key after applying the variant still has odd parity in each byte.) The KVP for the device master key is stored in the KVP field of the trusted block so that availability of the correct master key can be verified when the block is used. For an external format trusted block, the string is encrypted in CBC mode using a provided key-encrypting key. Before it is used to encrypt the MAC key, the KEK is XORed with a variant in order to ensure the key cannot be misused in other CCA services. The variant value is a fixed, randomly generated value equal in length to the KEK. Like the variant for the master key described above, each byte of this variant must have even parity if it is used with a DES or Triple-DES key so that it does not affect the parity of the key.","The Trusted Block can have one or more rules, which define how symmetric keys will be generated or exported under control of the block. These are generally the keys that will be shared with the remote device, such as an ATM. As a part of the Trusted Block, the rules are created and approved by the cryptographic device owner under dual control, and protected from modification.","The IBM CCA cryptographic architecture uses control vectors exclusive-ORed with its symmetric keys, but most non-CCA cryptographic devices use variants, or use no modifying value at all. An important feature of the rules is the ability to specify arbitrary values to be XORed with the key being generated or exported. For additional flexibility, a second value can be specified to be XORed with the KEK used to wrap the key being generated or exported. These values can be CCA control vectors, variants, or zero. These values can be CCA control vectors, variants, or zero. This gives complete flexibility in sending keys to different types of cryptographic systems.","The Trusted Block rules can contain the following values to control key generation and export.\n\n","Table 2 provides information on the content of the Trusted Block structure, including the rules it can contain.",{"@attributes":{"id":"p-0058","num":"0092"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Section","Optional?","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Trusted","Yes","This includes the public key itself. Please note"]},{"entry":["public",{},"that the Trusted Block contains cryptographic"]},{"entry":["key",{},"information that guarantees the integrity of this"]},{"entry":[{},{},"public key and binds it to the local system."]},{"entry":["A rule","Yes","A trusted block may have zero or more rules"]},{"entry":[{},{},"sections. If no rules are present, the block is"]},{"entry":[{},{},"simply a trusted public key. If there are rules,"]},{"entry":[{},{},"each is uniquely identified by its rule ID, and"]},{"entry":[{},{},"the block can be used by the RKX function to"]},{"entry":[{},{},"generate or export symmetric keys."]},{"entry":["Trusted","Yes","This value can be used to identify the trusted"]},{"entry":["block",{},"block. One example of its use is for a host"]},{"entry":["label",{},"access control system such as RACF to verify"]},{"entry":[{},{},"that the application has the authority to use the"]},{"entry":[{},{},"trusted block identified by this label."]},{"entry":["Trusted","No","This section contains control and security"]},{"entry":["block",{},"information related to the Trusted Block. It is"]},{"entry":["information",{},"separated from the public key and other"]},{"entry":[{},{},"sections, because this section is mandatory"]},{"entry":[{},{},"while the others are optional."]},{"entry":["Application-","Yes","This section can be used to include application-"]},{"entry":["defined data",{},"defined data in the Trusted Block. The data is"]},{"entry":[{},{},"not examined or used in any way by the CCA"]},{"entry":[{},{},"code, but it is cryptographically bound to the"]},{"entry":[{},{},"block so it can be trusted."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The trusted public key section (Table 2) contains the public key modulus, exponent, and key usage flags to control how the key can be used. Table 3 summarizes the features and example applications of the public key. It should be noted that the public key is not a required part of a trusted block. In some applications, trusted blocks are used only in relation to symmetric key based key management, and in those cases the Trusted Block may not contain a public key section.",{"@attributes":{"id":"p-0060","num":"0094"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Trusted Public Key Section contents"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Public key exponent, e."},{"entry":"Modulus, n."},{"entry":"Key usage flags"},{"entry":"These flags indicate how the public key can be used."},{"entry":"Examples include restrictions that would permit the key to be used as"},{"entry":"follows:"},{"entry":"Use the key only in digital signature operations."},{"entry":"Use the key only in key management operations."},{"entry":"Use the key in both digital signature and key management operations."},{"entry":"These are only examples. Other key usage restrictions could also be"},{"entry":"defined."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The Trusted Block information section (Table 2) contains control and security related to the trusted block. It is required in all Trusted Blocks as indicated by its non-optional status. Table 4 summarizes the Trusted Block information section.",{"@attributes":{"id":"p-0062","num":"0096"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Trusted block information"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Activation status.","This status can have one of the two following values."]},{"entry":["INACTIVE","Trusted block is Inactive and will not be accepted for"]},{"entry":[{},"any purpose other than activation with the TBC"]},{"entry":[{},"function."]},{"entry":["ACTIVE","Trusted block is Active and can be used in CCA"]},{"entry":[{},"functions such as RKX, TBC, and DSV."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Trusted block information objects. This is a variable-length series of data"},{"entry":"objects for the trusted block information section. They are described"},{"entry":"below. Most are optional and are only present if needed."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The following objects (Table 4) contain optional parts of the trusted block information section. If used, the objects are included in the structure shown above.","The protection information object (Table 5) is required, and contains the data used to secure the trusted block. By making this a separate object, the opportunity to replace the protection mechanism in the future; for example, with a different MAC or HMAC algorithm is preserved.",{"@attributes":{"id":"p-0065","num":"0099"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Protection information object"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Encrypted MAC key. This includes the encryption of both the confounder"},{"entry":"and the key."},{"entry":"MAC"},{"entry":"KVP for the device master key. This is set to binary zeroes if the trusted"},{"entry":"block is in external format."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The activation and expiration dates object (Table 6) is optional, and contains activation and expiration dates for the trusted block. It also contains a flag to indicate whether the cryptographic device should check the dates before using the block.",{"@attributes":{"id":"p-0067","num":"0101"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 6"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Activation and expiration date object"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CHECK-DATE - a Boolean flag indicating whether the cryptographic"]},{"entry":[{},"device should check the activation and expiration dates before using"]},{"entry":[{},"the trusted block."]},{"entry":[{},"Activation date for the trusted block."]},{"entry":[{},"Expiration date for the trusted block."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The Trusted Block label section (Tables 2 and 7) is optional and contains a label to identify the Trusted Block.",{"@attributes":{"id":"p-0069","num":"0103"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 7"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Trusted block label"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Label"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The application-defined data section (Tables 2 and 8) is optional, and contains arbitrary data defined by the application program that creates the trusted block. It is not examined or used in any way by the device, but is bound to the trusted block by the MAC and can be used by the application program. An example is the use of this section to hold a public-key certificate for the trusted public key. The data is variable-length, but it must not cause the entire trusted block to exceed its maximum allowable size.",{"@attributes":{"id":"p-0071","num":"0105"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 8"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Application-defined data"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Length of application-defined data - values can be 0-400, inclusive."]},{"entry":[{},"Application-defined data"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The rule section (tables 2 and 9) of the Trusted Block is used to define a rule for key generation or export. The trusted block can have zero or more rules sections, where each section defines a different rule. Each rule has an embedded name that is used to identify it, so that a selected rule can be used when the trusted block is passed to the RKX function. The rules section consists of a set of fixed fields, followed by a variable number of optional objects. The optional objects are concatenated at the end of the fixed portion of the section structure, and only those objects that are needed are included in the structure. Table 9 summarizes the key features of the rule section.",{"@attributes":{"id":"p-0073","num":"0107"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 9"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Rule"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Rule ID. A character string value identifying the rule. The Rule ID for this"},{"entry":"rule must be different from the ID used in any other rules in this trusted"},{"entry":"block."},{"entry":"Generate\/Export flag. This Boolean flag indicates whether the rule is for"},{"entry":"generation of a new symmetric key, or for export of an existing key."},{"entry":"Generated key length. This specifies the length, in bytes, of the key to be"},{"entry":"generated if this rule is for generation. If the rule is for key export, this"},{"entry":"value must be zero."},{"entry":"Key check algorithm identifier. This value identifies an algorithm to be"},{"entry":"used to compute a check value on the key. Examples include the"},{"entry":"following."},{"entry":"Do not compute a key check value."},{"entry":"Encrypt a block of binary zeroes with the key."},{"entry":"Compute a hash of the key using the SHA-1 algorithm."},{"entry":"Compute a hash of the key using the MDC-2 algorithm."},{"entry":"These are only examples, and other options are also possible."},{"entry":"Symmetric-encrypted output key format"},{"entry":"This is used to specify the format of the output key, which is either"},{"entry":"encrypted under the transport key or in an RKX token. The following"},{"entry":"formats are defined."},{"entry":"The generated key is output in an RKX token."},{"entry":"The key is output in an external key token, encrypted by the transport"},{"entry":"key identified by the transport_key_identifier parameter to RKX. A"},{"entry":"transport key variant (see Transport Key Variant TLV) and\/or a CCA"},{"entry":"Control Vector (see Common Export Key Parameters) may be applied"},{"entry":"to the transport key. If both are applied, the variant is applied first,"},{"entry":"and then the CV."},{"entry":"Other formats are also possible."},{"entry":"Asymmetric-encrypted output key format"},{"entry":"This is used to specify the format of the output key which is encrypted"},{"entry":"under the RSA key provided as input to the RKX function.. The following"},{"entry":"formats are defined."},{"entry":"Do not output an asymmetric-encrypted copy of the key. The"},{"entry":"asymmetric-encrypted key length parameter of RKX will be set to"},{"entry":"zero on output."},{"entry":"The key is output in PKCS 1.2 format."},{"entry":"The key is output in RSAOEAP format. This format can make use of"},{"entry":"Extra Data, and that data can be provided in a parameter that is part of"},{"entry":"the RKX API."},{"entry":"Other formats are also possible."},{"entry":"Objects for optional fields. This is a series of zero or more objects. The"},{"entry":"objects are defined below."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The following objects contain optional parts of the trusted block rule section. If used, the objects are concatenated to the end of the base rule section structure defined above. The objects can appear in any order.","The transport key variant object is optional. It is used to hold a variant, which is XORed into the cleartext value of the transport key before that key is used to encrypt the key RKX is generating or exporting. The length must be greater than or equal to the length of the transport key that is supplied to RKX when this rule is used. If the variant is longer than the transport key, it is truncated on the right to the length of the key before it is used. Please note that if the transport key is in an RKX token, the variant is XORed with only the key itself, and not with the confounder that precedes the key in the token.","The transport key rule reference object is optional. If present, it contains the rule ID of the rule that must have been used to create the transport key being used to encrypt the key being generated or exported. This reference can only be used if the transport key is provided in an RKX token, which contains the rule ID for the rule used to create that key.","The common export key parameter object is required when exporting a key, and is optional when generating a key. It holds the parameters that are used to process the key being exported. This includes:\n\n",{"@attributes":{"id":"p-0078","num":"0115"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 10"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Common Export Key Parameters object"},{"entry":"Flags (reserved)"},{"entry":"Export key minimum length, in bytes. (For example, 8 for a single-length"},{"entry":"DES key)"},{"entry":"Export key maximum length, in bytes"},{"entry":"Output key variant length, in bytes."},{"entry":"Output key variant. This is applied to the cleartext value of the key being"},{"entry":"exported or generated."},{"entry":"Transport key CV length, in bytes."},{"entry":"Transport key CV, to be applied to the transport key before using it to"},{"entry":"export the key."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The source key rule reference object is optional, and is used to hold a rule reference for a source key that is provided to the RKX function in the form of an RKX token. That token contains the name of the rule that was used to create the token, and the source key rule reference, if present, is compared with that value in the RKX token. If the two do not match, execution of RKX aborts and an error is returned.","The export key CCA token parameters object is optional and is only used if the export key parameter is in the form of a CCA token. It is ignored (if present) when the export key is provided as an RKX token. The object contains fields that are compared with values in the CCA token, or associated with that token. Table 11 summarizes key aspects of the source key label object.",{"@attributes":{"id":"p-0081","num":"0118"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 11"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"Export key CCA token parameters object"]},{"entry":[{},{},"Flags (reserved)"]},{"entry":[{},{},"Export key CV limit mask."]},{"entry":[{},{},"Export key CV limit template."]},{"entry":[{},{},"Source key label template.."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The Source key label template is a template that can be matched against the key label for the source key, when that key is specified using a key label. If the actual label for the key does not match the template (which can contain wildcards), the request is rejected. The CV limit mask and CV limit template have the same length, which is the length defined in the field Export key maximum length.","The following API functions support the creation of Trusted Blocks, and generation and export of keys using those blocks. In the presentation of the API functions below, the following terminology is used to describe option values passed to the functions.","Rule Array\u2014The rule array is a variable-length array of 8-character text strings, each of which contains a keyword defining an option to be passed to the API function. The length of the array is determined by the number of options that are to be passed to the function, and it may vary for different invocations of the same function when different processing options are used.\n\nRule Array Count\u2014The rule array count parameter specifies the number of 8-character option keywords that are contained in the rule array.\n\nPlease note that alternative methods can be used to pass options to an API function. The rule array is just used as the method in this description of the operations of these functions.\n","The Trusted Block create (TBC) function is used to create a Trusted Block under dual control. The block will be in external form, encrypted under a transport key (KEK). The format of the TBC function is shown in table 12.",{"@attributes":{"id":"p-0086","num":"0123"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 12"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TBC (",{}]},{"entry":[{},"\u2003return_code","Output"]},{"entry":[{},"\u2003rule_array_count","Input"]},{"entry":[{},"\u2003rule_array","Input"]},{"entry":[{},"\u2003input_block_length","Input"]},{"entry":[{},"\u2003input_block","Input"]},{"entry":[{},"\u2003transport_key_identifier","Input"]},{"entry":[{},"\u2003trusted_block_length","In\/Output"]},{"entry":[{},"\u2003trusted_block )","Output"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0015","list-style":"none"},"li":[{"@attributes":{"id":"ul0015-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0016","list-style":"none"},"li":["This parameter contains the length of the value in the input_block parameter, in bytes.\n\ninput_block\n","This parameter contains the complete trusted block structure, which will be updated by the function and returned in parameter trusted_block. The length of the input_block string is indicated by parameter input_block_length. Its content is dependent on the rule array keywords supplied to the function.\n        \n        "]}},"transport_key_identifier This contains a key label (identifying name) or key token for a key encrypting key that is used to protect the trusted block.","trusted_block_length This parameter contains the length of the value in parameter trusted_block, in bytes.","trusted_block This is a buffer provided by the caller for the trusted block constructed by the function. On input, its length in parameter trusted_block_length contains the size of the buffer. On output, the length parameter is updated with the actual byte length of the trusted block written to the buffer. The trusted block consists of the data supplied in parameter input_block, but with the MAC protection and Active flag updated according to the rule array keyword that is provided. See table 13 and the description of the rule array keywords below for details on the actions."]}},{"@attributes":{"id":"p-0087","num":"0131"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 13"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Keyword","Meaning"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Operation (one required)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"INACTIVE","Create the trusted block, but in inactive form. The"]},{"entry":[{},{},"MAC key is randomly generated, encrypted with"]},{"entry":[{},{},"the transport key, and inserted into the block. The"]},{"entry":[{},{},"Active flag is set to False (0), and the MAC is"]},{"entry":[{},{},"calculated over the block and inserted in the"]},{"entry":[{},{},"appropriate field. The resulting block is fully"]},{"entry":[{},{},"formed and protected, but it is not usable in any"]},{"entry":[{},{},"other CCA services. Use of the INACTIVE"]},{"entry":[{},{},"keyword is authorized by the access control system"]},{"entry":[{},{},"separately from the ACTIVATE operation."]},{"entry":[{},"ACTIVATE","Activate the supplied trusted block by turning on"]},{"entry":[{},{},"the Active flag and then recalculating the MAC"]},{"entry":[{},{},"using the key that is already present in the block."]},{"entry":[{},{},"This makes the trusted block usable in CCA"]},{"entry":[{},{},"services. Use of the ACTIVATE keyword is"]},{"entry":[{},{},"authorized by the access control system separately"]},{"entry":[{},{},"from the INACTIVE operation."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Either INACTIVE or ACTIVATE must be supplied to indicate the action. The two options are authorized separately, so that they can be assigned to different people. The same person should not be authorized to execute both the INACTIVE and ACTIVATE operations.","For keyword INACTIVE, the trusted block is constructed and protected with the MAC. The following steps summarize the INACTIVE operation.\n\n","For keyword ACTIVATE, the trusted block is validated, and the Active flag is set so that the block can be used in other cryptographic services. The following steps summarize the operation.\n\n","The remote key export (RKX) function uses the trusted block to generate or export symmetric keys for local use and for distribution to an ATM or other remote device. The application program indicates what rule in the trusted block is to be used. The function can either generate a new key, or export an existing key. The specified rule is examined to determine whether a generate or export operation is to be performed.","The RKX function uses a special structure to hold encrypted symmetric keys in a way that binds them to the trusted block, and allows sequences of RKX calls to be bound together as if they were an atomic operation. Incorporating the following three features into the RKX key structure does this.\n\n",{"@attributes":{"id":"p-0093","num":"0160"},"figref":"FIG. 2"},"The format of the RKX is shown in table 14.",{"@attributes":{"id":"p-0095","num":"0162"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 14"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"RKX (",{}]},{"entry":[{},"\u2003return_code","Output"]},{"entry":[{},"\u2003rule_array_count","Input"]},{"entry":[{},"\u2003rule_array","Input"]},{"entry":[{},"\u2003trusted_block_length","Input"]},{"entry":[{},"\u2003trusted_block","Input"]},{"entry":[{},"\u2003certificate_length","Input"]},{"entry":[{},"\u2003certificate","Input"]},{"entry":[{},"\u2003certificate_parms_length","Input"]},{"entry":[{},"\u2003certificate_parms","Input"]},{"entry":[{},"\u2003transport_key_length","Input"]},{"entry":[{},"\u2003transport_key","Input"]},{"entry":[{},"\u2003rule_id_length","Input"]},{"entry":[{},"\u2003rule_id","Input"]},{"entry":[{},"\u2003Importer_key_length","Input"]},{"entry":[{},"\u2003Importer_key","Input"]},{"entry":[{},"\u2003source_key_length","Input"]},{"entry":[{},"\u2003source_key","Input"]},{"entry":[{},"\u2003asym_encrypted_key_length","Input\/Output"]},{"entry":[{},"\u2003asym_encrypted_key","Output"]},{"entry":[{},"\u2003sym_encrypted_key_length","Input\/Output"]},{"entry":[{},"\u2003sym_encrypted_key","Output"]},{"entry":[{},"\u2003extra_data_length","Input"]},{"entry":[{},"\u2003extra_data","Input"]},{"entry":[{},"\u2003key_check_parameters_length","Input"]},{"entry":[{},"\u2003key_check_parameters","Input"]},{"entry":[{},"\u2003key_check_length","Input\/Output"]},{"entry":[{},"\u2003key_check_value )","Output"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The description of the RKX parameters are as follows:\n\n","It should be noted that the RKX rule could contain a source key label template, which is matched against the key label for the source_key parameter if that key is specified using a label. Since the host CCA software replaces a label with the actual key token read from the key storage file, the label must be passed to the cryptographic module in another way. The host CCA API software for the RKX function accomplishes this. If the application program passes the source_key parameter as a key label, the RKX API code includes that label in the request parameter block that is sent to the cryptographic module. In this way, the device receives both the key token itself, and the key label that can be matched against the template in the rule.","The generate and export operations both begin with the following steps:\n\n","The generate operation comprises the following steps:\n\n","The export operation comprises the following steps:\n\n","Additional API functions must be provided in order to have a workable system. Many cryptographic systems will already have functions that could be enhanced to provide the specific operations described below.","The Trusted Block Import function is used to import trusted blocks, which are created in external form, but must be in internal form when used.","For the purpose of importing a trusted block, the parameters will be as follows:",{"@attributes":{"id":"p-0103","num":"0000"},"ul":{"@attributes":{"id":"ul0035","list-style":"none"},"li":["source_key will contain the trusted block in external form, as produced by the Trusted_Block_Create function.","transport_key will contain the KEK that was used in Trusted_Block_Create to protect the trusted block MAC key.","target_key will receive the internal form of the trusted block, in which the MAC key is enciphered under the proper variant of the device master key instead of the KEK."]}},"The Trusted Block Import function operates as follows:\n\n","A digital signature verification function (DSV) must be able to verify digital signatures using public keys that are contained in trusted blocks. The DSV could do this with any trusted block, regardless of whether the block also contains rules to govern its use when generating or exporting keys with the RKX function.","The parameters will be as follows:",{"@attributes":{"id":"p-0106","num":"0000"},"ul":{"@attributes":{"id":"ul0037","list-style":"none"},"li":["public_key will contain the public key to be used in verifying the signature. This can be a trusted block, but if the DSV function is implemented to be general in nature it may also be possible for this to be a public key in other forms.","hash will contain the hash of the message string to be verified.","signature will contain the digital signature that is to be verified."]}},"The DSV function will operate as follows:\n\n","The reencipher Trusted Block function is used when the Trusted blocks are in internal form and use the device master key to encrypt the embedded MAC key. When the master key is changed, the Reencipher Trusted Block function must be able to reencipher this under the new master key so that the trusted blocks are still usable.","The parameters will be as follows:","trusted_block will contain the trusted block that is to be reenciphered.","The reencipher Trusted Block function will operate as follows.\n\n","In a first preferred embodiment of the Remote Key Loading design, the Trusted Block create function will be described further with the creation of the Trusted Block under dual control. The Trusted Block is a data structure that typically contains an RSA public key and optional information (rules) to control export of other keys associated with the devices that use the public key. This structure is protected by an ISO-16609 CBC mode TDES Message Authentication Code (MAC). The trusted block will contain the rules that will be used to generate or export DES keys. The trusted block could also serve as a trusted public key container, and in this case the public key in the trusted block can be used in digital signature verification services. The first step in preparing a trusted block is to call the trusted block create routine.","The trusted block create (TBC) routine or service has three primary inputs: the input block, transport key and a keyword. The input block contains all the fields of a trusted block token but will be updated by this service to contain a valid MAC and MAC key. The transport key is the key encrypting key that is used to wrap or protect the trusted block. There are two valid keywords: INACTIVE and ACTIVATE. The keywords are options, which will direct the specific processing of the routine.","The first step in the Trusted Block creation is to call the TBC service specifying the INACTIVE keyword. This service call will produce an inactive, external trusted block token. The trusted block is fully formed and protected with a MAC at this point but, it is not usable by any other service. A second person with different authorization can then perform the second step. The result of step one is input to the second call to the trusted block create service along with the transport key and the ACTIVATE rule keyword. This call produces an external, active, trusted block token. The trusted block is now usable in other services. After activation, another service is called to put the trusted block into internal format. The public key import verb performs this operation. The next two tables will describe the application programmer's interfaces (API) for the trusted block create (TBC) and public key import (PKI) services. The charts that follow will describe the processing flow of each service.","The API outlined in Table 15 for the TBC service highlights the major input and output fields used by the preferred embodiment for this verb. The first column contains the API parameter name. The second column indicates whether the parameter is an input to or an output from the service. The third column indicates whether the item is an integer or a string.",{"@attributes":{"id":"p-0114","num":"0268"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 15"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"rule_array_count","Input","Integer"]},{"entry":[{},{},"rule_array","Input","String"]},{"entry":[{},{},"input_block_length","Input","Integer"]},{"entry":[{},{},"input_block_identifier","Input","String"]},{"entry":[{},{},"transport_key_identifier","Input","String"]},{"entry":[{},{},"trusted_block_length","In\/Output","Integer"]},{"entry":[{},{},"trusted_block_identifer","Output","String"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}}}},"The parameters are as follows:","rule_array_count The rule_array_count parameter is a pointer to a string variable containing the number of elements in the rule_array variable. The value must be one.\n\n",{"@attributes":{"id":"p-0117","num":"0272"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 16"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Keyword",{}]},{"entry":["(Operation)","Meaning"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["INACTIVE","Create the trusted block, but in inactive form. The MAC"]},{"entry":[{},"key is randomly generated, encrypted with the"]},{"entry":[{},"transport key, and inserted into the block. The Active"]},{"entry":[{},"flag is set to False (0), and the MAC is calculated"]},{"entry":[{},"over the block and inserted in the appropriate field."]},{"entry":[{},"The resulting block is fully formed and protected,"]},{"entry":[{},"but it is not usable in any other services."]},{"entry":["ACTIVATE","Use of this keyword makes the trusted block usable in"]},{"entry":[{},"other services. The Active flag is set to True (1),"]},{"entry":[{},"and the MAC is calculated over the block and inserted"]},{"entry":[{},"in the appropriate field. The resulting block is fully"]},{"entry":[{},"formed and protected."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0043","list-style":"none"},"li":["input_block_length The input_block_length parameter is a pointer to an integer variable containing the number of bytes of data in the input_block_identifier parameter.","input_block_identifier The input_block_identifier parameter is a pointer to a string variable containing a trusted block label or complete trusted block token, which will be updated by the verb and returned in parameter trusted_block_identifier. The length of the input_block_identifier string is indicated by parameter input_block_length. Its content is dependent on the rule array keywords supplied to the verb.\n    \n    ","transport_key_identifier The transport_key_identifier parameter is a pointer to a string variable containing a key label or key token, which has special usage restrictions, that is used to protect the trusted block. The usage restrictions are indicated by the presence of an IMP-PKA control vector in the transport key token.","trusted_block_length The trusted_block_length parameter is a pointer to an integer variable containing the number of bytes of data in the trusted_block_identifier parameter. If the trusted block length is not a multiple of 8 bytes, the code handling this API will pad the trusted block with zero bytes up to the next multiple of 8 bytes so that an ISO-16609 CBC mode triple DES MAC can be performed successfully on the trusted block within the adapter.","trusted_block_identifier The trusted_block_identifier parameter is a pointer to a string variable containing a trusted block label or trusted block token for the trusted block constructed by this API. On input, its length in parameter trusted_block_length, contains the size of the buffer. On output, the trusted_block_length parameter is updated with the actual byte length of the trusted block written to the buffer if the trusted_block_identifier is a token. The trusted block consists of the data supplied in parameter input_block_identifier, but with the MAC protection and Active flag updated according to the rule array keyword that is provided.\n    \n    "]}},"The API outlined in table 17 for the Trusted Block Import function highlights the major input and output fields used by the preferred embodiment. The first column contains the API parameter name. The second column indicates whether the parameter is an input to or an output from the service. The third column indicates whether the item is an integer or a string.",{"@attributes":{"id":"p-0119","num":"0282"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 17"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"rule_array_count","Input","Integer"]},{"entry":[{},"rule_array","Input","String"]},{"entry":[{},"Source_key_token_length","Input","Integer"]},{"entry":[{},"Source_key_token","Input","String"]},{"entry":[{},"transport_key_identifier","Input","String"]},{"entry":[{},"target_key_identifier_length","In\/Output","Integer"]},{"entry":[{},"target_key_identifier","In\/Output","String"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0046","list-style":"none"},"li":["rule_array_count The rule_array_count parameter is a pointer to an integer variable containing the number of elements in the rule_array variable. The value must be zero for this verb.","rule_array The rule_array parameter is a pointer to a string variable containing an array of keywords. The keywords are eight bytes in length, and must be left-justified and padded on the right with space characters. The rule_array parameter is not presently used in this service, but must be specified.","source_key_token_length The source_key_token_length parameter is a pointer to an integer variable containing the number of bytes of data in the source_key_token variable. If the source_key_token parameter is an external Trusted Block key token which is not a multiple of 8 bytes, the code handling this API will pad the trusted block with zero bytes up to the next multiple of 8 bytes so that an ISO-16609 CBC mode triple DES MAC can be performed successfully on the trusted block within the adapter.","source_key_token The source_key_token parameter is a pointer to a string variable containing the trusted block in external form as produced by the Trusted Block Create (CSNDTBC) verb with the ACTIVATE keyword. This API will be used to encipher the MAC key within the trusted block under a fixed variant of the PKA master key instead of the transport key-encrypting key.\n    \n    ","transport_key_identifier The transport_key_identifier parameter is a pointer to a string variable containing either a key-encrypting-key token, a key label of a key-encrypting-key token, or a null key-token.\n\nIf the source key token is a trusted block, then this key must be a KEK with special usage controls. The usage restrictions are indicated by the presence of an IMP-PKA control vector in the transport key token. It will be used to decrypt the MAC key contained within the trusted Block in the source_key_token.\n","target_key_identifier_length The target_key_identifier_length parameter is a pointer to an integer variable containing the number of bytes of data in the target_key_identifier variable.\n    \n    ","target_key_identifier The target_key_identifier parameter is a pointer to a string variable containing either a key label identifying a key record that is stored in a key storage repository such as a disk or other means; or is other information that will be overwritten with the imported key, such as a trusted block whose MAC key is now enciphered under the PKA master key."]}},"The flowcharts (, B, A, B, A and B) outline the key steps required to create a trusted block under dual control and transform it into an operational entity.","Step  () of the creation of the Trusted Block is as follows (Creation of the Inactive, External Trusted Block starting at  in ):\n\n","Step  () of the creation of the Trusted Block is as follows (Creation of the Active, External Trusted Block starting at  in  and center on authorization, validation, and initialization):\n\n","Step  () of the creation of the Trusted Block is as follows (Convert the Active, External Trusted Block to Internal Trusted Block Format starting at  in FIG. A\u2014The public key import service (PKI) implements the Trusted Block Import function and is used to convert the trusted block form external format to internal format. When the trusted block is in internal format it is considered operational and can be used on the local system):\n\n","A preferred embodiment of the present invention utilizes functions that use the trusted block to perform cryptographic operations. These functions include:\n\n","The Remote Key Loading method of a preferred embodiment of the present invention involves encipherment of a newly generated or preexisting key under a key encrypting key and optionally, under a public key. A group of services in the preferred embodiment accomplish the Remote Key Loading. The service directly responsible for the remote key loading methodology is known as the Remote Key Export (RKX) service. The Trusted Block Create (TBC) service creates a \u201ctrusted block\u201d containing not only the rules governing how the Remote Key Export service is to operate, but also containing a trusted root public key used to verify the digital signature in a certificate which in turn contains a public key that is used ultimately for the encipherment of the newly generated or preexisting key.","Additional contents of the trusted block of a preferred embodiment of the present invention include a Message Authentication Code (MAC) key and MAC value. A MAC value is computed over the entire content of the trusted block except for the encrypted MAC key field, MAC value field, and master key verification pattern field of the trusted block. The trusted block is created in external form, meaning that the MAC key used to create the trusted block's MAC value is enciphered under a key encrypting key. Prior to use by the Remote Key Export service, the trusted block must be converted to internal form, meaning that the MAC key contained in the trusted block must be changed from being enciphered under a key encrypting key to being enciphered under a variant of the PKA (or asymmetric) master key. This trusted block conversion from external form to internal form is accomplished via the Public Key Import (PKI) service. In the preferred embodiment, the PKI service is used to implement the Trusted Block Import Function.","Using the Remote Key Loading methodology of a preferred embodiment of the present invention, a key can be enciphered under one of two possible schemes by the RKX service resulting in asymmetric encrypted output, symmetric encrypted output, or both. (1) Using the RKX service, a key may be enciphered under a public key located in an input parameter certificate. The certificate will contain a digital signature, which must be verified with a root public key located in the trusted block input parameter. The output will be placed into the asymmetric encrypted key output parameter. (2) Using the RKX service, a key may be enciphered under a DES key located in the transport key input parameter. The output will be placed into the symmetric encrypted key output parameter.","The key that is output by the RKX service may be randomly generated within the adapter. When this is the case, the output will include a symmetric encrypted key and an optional asymmetric encrypted key. Symmetric encrypted output key format for this randomly generated key is always the RKX token format, encrypted under a variant of the MAC key. Asymmetric encrypted output key format may be either RSA OAEP or PKCS1.2 format according to the rule section in the trusted block whose rule ID matches the rule ID input parameter. The public key contained in the input certificate parameter is used to encrypt the generated key.","The RKX service will generate a random number key whose length is defined by the rule section in the trusted block that was selected by the rule ID input parameter. The output produced will consist of a symmetric encrypted external RKX token and optionally, an asymmetric encrypted key enciphered under the public key contained in the certificate input parameter. In the preferred embodiment, the output of this generate routine will never be an external CCA token. In order to create an output external CCA token from random number key generation, the RKX service may be invoked twice; once to generate the RKX token, and subsequently to use the newly generated RKX token as an input parameter source key identifier in a call to the RKX service. In this subsequent call, a rule ID may be provided to the RKX service that selects a rule different from the first rule ID used to generate the RKX token, and which defines the \u201cexport\u201d of the source key (e.g. an RKX token) to an external CCA token.","The key that is to be exported by the RKX service is not limited to being a source key in the form of an RKX token. Additionally, the key to be exported may be an encrypted form of a preexisting key that is supplied to the RKX service as a source key parameter in the form of an internal CCA DES token or an external CCA DES token. Four basic steps are involved in exporting a preexisting key by the RKX service.","In step one, the encrypted source key input parameter is converted into cleartext form. If the source key is an RKX key token\u2014the key must be decrypted under a variant of the MAC key that is located within the trusted block input parameter, provided that the rule ID in the RKX token matches the rule ID contained in the Rule Section of the trusted block. The MAC key in the trusted block must be decrypted under a fixed variant of the PKA master key before being used to decrypt the key in the RKX token. If the source key is an external CCA key token, the key must be decrypted under the importer key encrypting key input parameter, which first must be decrypted by the DES master key. If the source key is an internal CCA key token\u2014the key must be decrypted under the DES master key.","In step two, the source key now in cleartext form is optionally checked and modified. If the source key input parameter was either an internal CCA key token or external CCA key token, the source key's control vector (CV) is checked for acceptability for key exportation. The trusted block's CV Mask determines which source key CV bits should be checked. The trusted block's CV Limit Template contains the required values for those source key CV bits that are to be checked. The CV mask and template are located in the trusted block's rule section that is selectable by the rule ID input parameter to the RKX service. If the source key input parameter is a key label for an internal CCA key token that is contained in key storage, verify that the label is valid by comparing it to the Source Key Label Template in the trusted block's rule section that is selectable by the rule ID input parameter to the RKX service. For the modification phase of step two, optionally apply the output key variant to the cleartext source key using an exclusive-or technique if specified to do so in the trusted block's rule section that is selected by the rule ID input parameter.","Step three is performed when the symmetric encrypted output key is determined to be in a CCA token format. In step three, the transport key is prepared for use on the modified source key from the previous step. The transport key may be either an RKX key token or an internal DES key token. Preparation of the transport key involves the optional application of a transport key variant and the optional application of a control vector. Both the transport key variant and control vector are found in the trusted block's rule section that is selected by the rule ID input parameter. If the transport key is contained in an RKX key token, the key must be decrypted under a fixed variant of the MAC key located within the trusted block input parameter, provided that the rule ID in the RKX token matches the rule ID contained in the rule section of the trusted block. The MAC key in the trusted block must be decrypted by the fixed variant of the PKA master key before being used to decrypt the transport key in the RKX token. If the transport key is an internal CCA token, the key must be decrypted under the DES master key.","A variant may be applied to cleartext transport key using an exclusive-or technique, if there is a transport key variant specified in the trusted block's rule section that is selected by the rule ID input parameter. Next, if there is a CV specified in the trusted block's rule section that is selected by the rule ID input parameter, the CV is applied to the transport key. If both the variant and the CV are applied to the cleartext transport key, then the variant is applied first, then the CV.","In step four, the rule section within the trusted block may indicate that the symmetric encrypted output should be either an RKX key token encrypted under a fixed variant of the MAC key, or a CCA key token. If the former is true, the transport key is ignored. If the latter is true, optionally encipher the modified (or unmodified) source key from step two with the modified (or unmodified) transport key from step three according to the rule section in the trusted block whose rule ID matches the rule ID input parameter. If a CV was applied to the transport key in step three, then the output symmetric encrypted CCA token will also contain this same CV. Likewise if no CV was applied to the transport key, then the output encrypted CCA token will contain a zero CV.","For asymmetric encrypted output, encipher the key under the public key contained in the certificate input parameter to the RKX service. This encipherment will follow the format option according to the rule section in the trusted block whose rule ID matches the rule ID input parameter. The output option may be either RSA OAEP or PKS1.2 format.","The trusted block is a data structure that contains several sections. In a preferred embodiment there are 5 types of sections (Please note that those skilled in the art of data structure design may find a multitude of ways to design a trusted block): the Trusted Public Key section, the Trusted Block Information section, the Trusted Block Label section, the Application Defined Data section, and the Rule section. Some of these sections have subsections that will be defined in the paragraphs that follow. Preceding these main sections is a Trusted Block Key Token Header that contains a token identifier, a header structure version number, and length of the entire trusted block structure.","The Trusted Public Key section is optional and if present, only one such section is allowed in the trusted block. This section includes the public key itself including a set of flags to indicate how the public key is to be used. The section includes a section identifier to indicate \u201cTrusted RSA Public Key\u201d, a structure version number, length of the section, RSA public key exponent length in bytes, RSA public key modulus length in bits, RSA public key modulus length is bytes, RSA public key exponent, RSA public key modulus, and the flags. The flags field will indicate whether the public key contained in this section can be used in digital signature operations only, key management operations only, or both digital signature and key management operations.","The Trusted Block Information section is required and only one such section is allowed in the trusted block. The section includes a section identifier to indicate \u201cTrusted Block Information\u201d, a structure version number, length of the section, a flags field, one required subsection, and one optional subsection. The flags indicate whether the trusted block is in an inactive state or active state. The trusted block is created in the inactive state and placed into the active state under dual control by the TBC service. A required subsection, named the Protection Information subsection, includes: the encrypted form of an 8 byte confounder and 24 byte MAC key, an 8 byte ISO-16609 CBC mode TDES MAC value, and a 16 byte PKA master key verification pattern computed using MDC4. The PKA master key verification pattern is set to zero if the trusted block is external, meaning that the confounder and MAC key are encrypted under a key encrypting key. The PKA master key verification pattern is nonzero when the trusted block is internal, meaning that the confounder and MAC key are encrypted under a fixed variant of the PKA (or asymmetric) master key. An optional subsection, named the Activation and Expiration Date subsection, includes: flags indicating whether or not the activation and expiration dates should be checked by the 4764 cryptographic adapter; activation date in year, month, day of month format; and expiration date in year, month, day of month format.","The Trusted Block Label section is optional and if present, only one such section is allowed in the trusted block. The section includes a section identifier to indicate \u201cTrusted Block Label\u201d, a structure version number, length of the section, and a label. In the preferred embodiment, the length of the label is 64 bytes. Host software can use this label to perform access control checking on the trusted block.","The Application Defined Data section is optional and if present, only one such section is allowed in the trusted block. The section includes a section identifier to indicate \u201cApplication Defined Data\u201d, a structure version number, length of the section, length of the application data, and the application defined data. In a preferred embodiment, the length of the application data may be between 0 and 400 bytes inclusive. The application-defined data may be used to hold a public key certificate for the trusted public key contained in the Trusted Public Key section.","The Rule section is optional. Zero, one, or more than one, rule sections may be present in the trusted block. When a trusted block has zero rule sections, typically the Trusted Public Key section is present and the trusted block is used for digital signature verification purposes only. At least one rule section is required when generating a new random key, or exporting a preexisting key with the RKX service. Multiple rule sections are typically used whenever the RKX service is used to create a key hierarchy. The basic concept is that RKX tokens generated by the RKX service may be used as a source key and\/or transport key in subsequent RKX service invocations using the same trusted block.","Each Rule section contains a section identifier, a structure version number, length of the section, rule ID, export\/generate flag, generated key length, key check algorithm identifier, symmetric encrypted output key format flag, asymmetric encrypted output key format flag, and up to five possible subsections. The subsections include: an optional Transport Key Variant subsection, an optional Transport Key Rule Reference subsection, a Common Export Key Parameters subsection that is required only if the RKX service is to export a preexisting key to an output format that is either an RKX token format or CCA token format, a Source Key Rule Reference subsection that is required only if the RKX service is exporting a source key that is in RKX token format, and an optional Export Key CCA Token Parameters subsection. The latter subsection is used when the source key input parameter is a CCA token. The key type of the CCA token can be filtered by using the CV limit mask and template contained in the subsection.","The rule ID field of the Rule section is a value identifying the rule. The rule ID for one rule section must differ in value from rule IDs used in other rule sections within the trusted block. A particular Rule section is chosen for use by the RKX service according to the value of the Rule ID input parameter of the RKX service.","The export\/generate flag in the Rule section indicates whether a new key should be generated or a preexisting key located in the source key input parameter, should be exported. If a key is to be generated, the \u201cgenerated key length\u201d field will indicate the length in bytes of the generated key.","The key check algorithm identifier field may indicate either \u201cno action\u201d in which case no key check value is computed, encrypt an 8-byte block of binary zeroes with the key, or compute the MDC2 hash of the key and return the 16 byte value. For the case when the key check algorithm specifies an encryption of an 8-byte block of binary zeroes, and if the key to be generated or exported is single length, then the key encodes the 8 bytes of zeroes. If the key to be generated or exported is double length, the key triple encodes the 8-byte value as follows: the left half key encodes the 8-byte zero value, this result is decoded by the right key half, and that result is encoded by the left key half. If the key is single length, return the leftmost 3 or 4 bytes of the result of the encryption according to the value of the key check length input parameter as follows: (1) if the key is single length and if the key check length input parameter is set to 3, then 3 bytes will be returned. (2) If the key is single length and if the key check length input parameter is set to a value between 4 and 8 bytes inclusive, 4 bytes will be returned. (3) If the key is longer than single-length, return the entire 8 byte encryption result. Under no circumstances will there be 1, 2, 5, 6, or 7 byte encryption result returned.","The symmetric encrypted output key format flag indicates the output symmetric key formats allowed by the rule section. The output may be either an RKX token encrypted under a variant of the MAC key, or a CCA token encrypted under a transport key. The transport key input parameter to the RKX service may be an RKX token, a CCA token, or a label of a CCA token. A transport key variant contained in the Transport Key Variant subsection and\/or a control vector contained in the Common Export Key Parameters subsection may be applied to the transport key. If both are applied, the variant is applied first, and then the control vector.","The asymmetric encrypted output key format flag indicates the output asymmetric key formats allowed by the rule section. Either no asymmetric key should be output, asymmetric output should be in PKCS 1.2 format, or asymmetric output should be in RSA-OAEP format. This latter format can make use of the Extra Data input parameter to the RKX service.","The Rule section's Transport Key Variant subsection is optional. If present, the subsection includes a tag identifier to indicate \u201cTransport Key Variant\u201d, length of the subsection, a structure version number, length of the variant, and the variant. The variant is to be exclusive-OR'ed (XOR) into the cleartext transport key. The length of the variant must be greater than or equal to the length of the transport key that is supplied to the RKX service when this rule is used. If the variant is longer than the transport key, it is truncated on the right to the length of the key before it is used. This variant is used if two conditions are satisfied: the length of the variant must be nonzero, and the output symmetric encrypted key format is set to indicate CCA token format. Transport keys are not used for output symmetric encrypted keys that are RKX tokens.","The Rule section's Transport Key Rule Reference subsection is optional but should be present if the transport key input parameter to the RKX service is an RKX token, otherwise the RKX token transport key will not be accepted for use. If present, the subsection includes a tag identifier to indicate \u201cTransport Key Rule Reference\u201d, length of the subsection, a structure version number, and the rule ID. The rule ID identifies the rule section that must have been used to create the RKX token transport key.","The Rule section's Common Export Key Parameters subsection is required for a key export request to the RKX service. The subsection includes a tag identifier to indicate \u201cCommon Export Key Parameters\u201d, length of the subsection, a structure version number, the exported key's minimum length in bytes which also applies to the source key input parameter, the exported key's maximum length in bytes which also applies to the source key input parameter, the output key variant length in bytes, the output key variant, the length of the CV in bytes, and the CV. If the output key variant length is zero, then the output key variant is not used. Otherwise, the output key variant will be exclusive-OR'ed with the cleartext value of the key being exported (or generated). This variant must be at least as long as the longest key that will be exported using the rule, or as long as the key being generated using the rule. If the variant is longer than the key, the leftmost bytes of the variant are used, up to the key length. e.g. if the variant is 24 bytes and the key is 16 bytes, the first 16 bytes of the variant are exclusive-OR'ed with the key and the remaining 8 bytes of the variant are not used. The CV within this subsection, if used, will be exclusive-OR'ed with the transport key.","The rules governing the usage of the control vector (CV) in the Common Export Key Parameters subsection that are defined whenever the symmetric encrypted output key is to be a CCA token format, are as follows:","(1) If the length of the CV in this subsection is zero, and if the source key input parameter is a CCA token, then the source key's CV will be used when encrypting the source key under the transport key. The source key's CV will be preserved in the symmetric encrypted output if the output is to be in the form of a CCA token. If the length of the CV in this subsection is zero, and if the source key input parameter is an RKX token, then no CV will be used.","(2) If the length of the CV in this subsection is nonzero, then it must be greater than or equal to the length of the source key input parameter. The CV length in this subsection may be either single or double length. If the source key is single length, and if the CV length in this subsection is double length, and if the left half of the double length CV in this subsection is nonzero with key form bits set to \u201csingle length key\u201d, then the right half of this double length CV will be ignored. Note: CCA service CVG (Control Vector Generate) will generate a CV for a single length key by building a CV of double length with the right half of the CV set to binary zeroes. This CV may be placed into this subsection when building the trusted block.","(3) If the CV length in this subsection is double length and the CV is equal to 16 bytes of binary zeroes, then all CV bit definitions are ignored. Furthermore, if the symmetric encrypted output key is in CCA token format, the token will have a flag set to indicate that a CV is present, but the CV value in the output CCA token will contain 16 bytes of binary zeroes. Furthermore, if the source key input parameter is a single length key, the key will not be replicated to a double length key.","(4) If the access control point for \u201cReplicate Key Allowed\u201d is active, and if the source key input parameter contains a single length key in either RKX token or CCA token format, and if the CV in this subsection is double length with both halves nonzero, and if the CV's key form bits do not specify \u201csingle length key\u201d and do not specify \u201cguaranteed unique halves\u201d, then the key in the source key input parameter is replicated, meaning that both halves of the double length key are identical in value.","(5) If the symmetric encrypted output key format flag is set to indicate that an RKX token will be output by the RKX service, then the CV in this subsection will be ignored since a transport key is not used for output symmetric RKX tokens.","The Rule section's Source Key Rule Reference subsection is optional but must be present if the source key input parameter to the RKX service is an RKX token, otherwise the RKX token source key will not be accepted for use. If present, the subsection includes a tag identifier to indicate \u201cSource Key Rule Reference\u201d, length of the subsection, a structure version number, and the rule ID. The rule ID identifies the rule section that must have been used to create the RKX token source key.","The Rule section's Export Key CCA Token Parameters subsection is optional for key export of CCA tokens. If using a CCA token as a source key input parameter, its key type can be \u201cfiltered\u201d by using the CV limit mask and template in this subsection. If present, the subsection includes a tag identifier to indicate \u201cExport Key CCA Token Parameters\u201d, length of the subsection in bytes, a structure version number, the export key CV limit mask length in bytes, the export key CV limit mask, the export key CV limit template, the source key label template length in bytes, and the source key label template.","If the export key CV limit mask length is zero, then the export key CV limit mask and the export key CV limit template are both nonexistent. The export key CV limit mask and the export key CV limit template work together to restrict the acceptable control vectors for CCA keys to be exported. The CV limit mask indicates which CV bits should be checked. The CV limit template contains the required values for those CV bits that are to be checked. The CV for the key to be exported is first AND'ed with the CV Limit Mask, and then the result is compared with the CV Limit Template. If the two do not match, the request is rejected with an error. The export key CV limit mask length must not be less than the Export Key Minimum Length set in the Common Export Key Parameters subsection. The export key CV limit mask length must be equal in length to the actual length of the source key input parameter to the RKX service, otherwise the RKX service request will be rejected with an error.","The source key label template length in bytes must be set to either 0 or 64. No other values are allowed. If this length is zero and a source key label is present, then the label will not be checked. If this length is 64 and a source key label is not present, an error will be returned by the RKX service. A single asterisk (wildcard) in the source key label template field will not be interpreted to accept the absence of a source key label. In the preferred embodiment, if the source key label template length is nonzero, the label template is left justified in the source key label template field. The label template must conform to the following rules in the preferred embodiment (note that other methodologies may be employed): The first character cannot be between 0x00-0x1F, nor can it be 0xFF; the first character cannot be numeric, 0x30-0x39; a label is terminated by a space on the right; the only special characters permitted are 0x23 (#), 0x24 ($), 0x40 (@), 0x2E (.), and wildcard 0x2A (*); the wildcard 0x2A (*) is permitted as the first character, the last character, or only character; once a space is encountered, every character to the right up to the 64 byte length must be spaces; only alphanumeric characters are allowed a-z, A-Z, 0-9, the aforementioned four special characters, the wildcard (*), and the space (0x20).","The sequence of services leading up to the RKX service is as follows:","First a trusted block is created under dual control in two parts. An external trusted block is created with all its sections and subsections by one individual having a role and\/or profile differing from a second individual's role and\/or profile, by using the TBC service with keyword set to INACTIVE. The confounder and MAC key contained in the trusted block's Protection Information subsection under the Information section is encrypted under a variant of the IMP-PKA key encrypting key located in the transport_key_identifier input parameter. The trusted block is termed inactive because its flag in the trusted block Information section is set to \u201cinactive\u201d. The second individual having a role and\/or profile differing from the first individual uses the TBC service with keyword set to ACTIVATE. The flag in the trusted block information section is set to \u201cactivated\u201d, making the resulting trusted block \u201cactive\u201d.","Second, the active trusted block is provided as an input parameter to the PKI service, which in turn converts the trusted block to internal format, by virtue of the fact that the MAC key contained within the trusted block will be encrypted under a fixed variant of the PKA (or asymmetric) master key.","Finally, the internal format of the trusted block is now ready to be used as an input parameter to the RKX service.","The RKX uses a special structure to hold encrypted symmetric keys in a way that binds them to the trusted block, and allows sequences of RKX calls to be bound together as if they were an atomic operation. Table 18 shows a conceptual view of the RKX key structure, which is also known as an RKX key Token.",{"@attributes":{"id":"p-0167","num":"0383"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 18"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Offset","Length",{}]},{"entry":["(bytes)","(bytes)","Description of RKX token field"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","1","Token Type 0x02 (external key token)"]},{"entry":["1","3","Reserved, must be 0x00.00.00"]},{"entry":["4","1","Version Number 0x10"]},{"entry":["5","1","Reserved, must be 0x00"]},{"entry":["6","1","Flag (reserved, must be 0x00)"]},{"entry":["7","1","Key length in bytes, including confounder"]},{"entry":["8","32","Encrypted confounder and key."]},{"entry":["40","8","Rule ID for the trusted block rule section that was"]},{"entry":[{},{},"used to create this RKX token."]},{"entry":["48","8","Reserved, must be filled with 0x00 bytes."]},{"entry":["56","8","MAC Value - ISO-16609 TDES CBC-mode MAC."]},{"entry":[{},{},"The MAC is computed over the 56 bytes starting at"]},{"entry":[{},{},"offset 0 in this token, and including the encrypted key"]},{"entry":[{},{},"value and the rule ID using the same MAC key that is"]},{"entry":[{},{},"used to protect the trusted block itself."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The confounder begins at offset  and the key begins at offset . The key field uses 8, 16, or 24 bytes to hold its value. Unused bytes in this field must be set to 0x00. The key is left justified starting at offset  in the event that the key is less than 24 bytes in length. The layout of the confounder and key is as follows: confounder (8 bytes), key left (8 bytes), key middle (8 bytes), and key right (8 bytes).","A fixed, randomly derived variant is exclusive-OR'ed with the MAC key located within the trusted block in the Trusted Block Information section before it is used to encipher or decipher the generated or exported confounder and key at offset  of the RKX key token above. The random variant has the following hex value:","EB 4B 1D F5 D8 1B 63 8D-5F DE 17 B1 00 27 35 AC-55 BB 05 78 AF DI B8 18","The MAC key within the trusted block, when in internal format, can be recovered by decipherment under the PKA master key. The trusted block is originally created in external form by the TBC service and then converted to internal form by the PKI service (Note that this PKI service implements the Trusted Block Import Function), prior to the RKX call. A fixed, randomly derived variant is exclusive-OR'ed with the PKA master key before it is used to encipher or decipher the MAC key within the trusted block when the trusted block is in internal format. The random variant has the following hex value:\n\nC9 2EBB 35 D2 AA 56 D8-9C 66 E4 12 2B E7 A0 A3-B4 55 FF E4 D7 E7 F6 41\n","A call to the RKX service can use an RKX token and a trusted block whose rule section references the rule ID that must have been used to create the RKX token. The trusted block rule section's Rule ID can be compared with the RKX token's Rule ID for verification purposes.","In the preferred embodiment, the Rule ID is an 8-byte ASCII character string, with no null terminator. The acceptable characters for the Rule ID are A-Z, a-z, 0-9, - (hyphen), and _ (underscore). If the Rule ID is less than eight characters long, it must be left justified and padded on the right with space characters. Other implementations besides the preferred embodiment may use other characters.","The MAC value at offset  guarantees that the key and the rule ID cannot be modified without detection, providing integrity, and binding the rule ID to the key itself. In addition, the MAC will only verify with the same trusted block that created the key, thus binding the key structure to that specific trusted block.",{"@attributes":{"id":"p-0174","num":"0390"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0175","num":"0391"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 19"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Step number and",{}]},{"entry":["brief summary","Detailed description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["600, 602 - Validate","See FIG. 7 - validate block( ) for details. Verify that all"]},{"entry":["the trusted block","these conditions are met:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"A.","No unknown sections have been built into the trusted"]},{"entry":[{},{},"block,"]},{"entry":[{},"B.","The trusted block token identifier is internal,"]},{"entry":[{},"C.","The Active flag is enabled,"]},{"entry":[{},"D.","Fields within the trusted block have valid lengths and"]},{"entry":[{},{},"valid values."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"If these conditions are not met, abort operation with an error."]},{"entry":["604 - Recover","See FIG. 8 - decrypt tb mac key( ) for details."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["trusted block MAC","A.","Decrypt the confounder and MAC key located in the"]},{"entry":["key",{},"Protection Information section of the trusted block under a"]},{"entry":[{},{},"variant of the PKA Master Key and using an IV of binary"]},{"entry":[{},{},"zeroes."]},{"entry":[{},"B.","The variant is the following hexadecimal string where"]},{"entry":[{},{},"each byte has even parity so that the parity of the XOR"]},{"entry":[{},{},"result of the PKA master key with the variant is not"]},{"entry":[{},{},"altered: C9 2E BB 35 D2 AA 56 D8 - 9C 66 E4 12 2B E7"]},{"entry":[{},{},"A0 A3 - B4 55 FF E4 D7 E7 F6 41."]},{"entry":[{},"C.","Decryption is performed using triple DES CBC mode."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["606 - Compute","See FIG. 9 - compute tb mac( ) for details."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["MAC value over","A.","Copy the trusted block to some temporary_block."]},{"entry":["the trusted block","B.","Fill in the following Protection Information section fields"]},{"entry":[{},{},"of the temporary block with binary zeroes: encrypted"]},{"entry":[{},{},"MAC key, ISO-16609 TDES CBC MAC value, MKVP"]},{"entry":[{},{},"(master key verification pattern)."]},{"entry":[{},"C.","Compute an ISO-16609 CBC mode TDES MAC over the"]},{"entry":[{},{},"entire temporary block contents using the recovered TDES"]},{"entry":[{},{},"MAC key and an IV of binary zeroes."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["608 - Computed","The computed MAC from step 3 is compared to the MAC value"]},{"entry":["MAC = stored","contained in the trusted block Protection Information section."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["trusted block","A.","If equal, proceed to step 610,"]},{"entry":["MAC?","B.","Else, abort operation with an error."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["610 - Verify the","This routine obtains the MDC4 hash of the current PKA master"]},{"entry":["MKVP in the","key and compares the result to the MKVP contained in the"]},{"entry":["trusted block","Protection Information section of the trusted block. If a"]},{"entry":[{},"mismatch occurs, the MDC4 hash of the old PKA master key is"]},{"entry":[{},"obtained and compared to the MKVP contained in the"]},{"entry":[{},"Protection Information section of the trusted block. If a"]},{"entry":[{},"mismatch still occurs, abort the operation with an error."]},{"entry":["612 - Locate rule","Locate a Rule section in the trusted block with an ID equal to"]},{"entry":["section in trusted","the value in the input parameter, rule_id. This will be the rule"]},{"entry":["block","section that is used during the RKX service being requested. If"]},{"entry":[{},"not found, abort operation with an error."]},{"entry":["614 - Is the","If all the following conditions are true, proceed to step 616."]},{"entry":["transport KEK","Else, proceed to step 618."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["needed?","A.","A transporter KEK was provided in the transport key"]},{"entry":[{},{},"identifier input parameter, or a transporter KEK key label"]},{"entry":[{},{},"was provided in the transport key identifier input"]},{"entry":[{},{},"parameter. In the latter case, retrieval of the transporter"]},{"entry":[{},{},"KEK from the key storage repository was successful."]},{"entry":[{},"B.","The rule section in the trusted block selected in step 612"]},{"entry":[{},{},"indicates that an export key operation is to take place."]},{"entry":[{},"C.","The rule section in the trusted block selected in step 612"]},{"entry":[{},{},"indicates that the symmetric encrypted key output is to be"]},{"entry":[{},{},"in CCA token format."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["616 - Process","See FIG. 10 - process transport key( ) for details."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["transport KEK","A.","If the transporter KEK is a CCA token, triple decrypt the"]},{"entry":[{},{},"transporter KEK under the DES master key using the"]},{"entry":[{},{},"transport KEK's CV."]},{"entry":[{},"B.","If the transporter key is an RKX token, decrypt the"]},{"entry":[{},{},"confounder and key contained in the token, under a"]},{"entry":[{},{},"variant of the MAC key located in the trusted block's"]},{"entry":[{},{},"Protection Information section."]},{"entry":[{},"C.","If a transport key variant exists in the trusted block rule"]},{"entry":[{},{},"section selected in step 612, then XOR the transport key"]},{"entry":[{},{},"variant with the cleartext transport key."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["618 - Is the","If the following conditions are true, proceed to step 620. Else,"]},{"entry":["importer KEK","proceed to step 622:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["needed?","A.","An importer KEK was provided in the importer key"]},{"entry":[{},{},"identifier input parameter, or an importer KEK key label"]},{"entry":[{},{},"was provided in the importer key identifier input"]},{"entry":[{},{},"parameter. In the latter case, retrieval of the importer KEK"]},{"entry":[{},{},"from the key storage repository was successful."]},{"entry":[{},"B.","The rule section in the trusted block selected in step 612"]},{"entry":[{},{},"indicates that an export key operation is to take place."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["620 - Process","See FIG. 11 - process importer key( ) for details."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["importer KEK","A.","If the operation is export, verify that the importer key's CV"]},{"entry":[{},{},"is an IMPORTER type."]},{"entry":[{},"B.","If the operation in import and the importer key is a CCA"]},{"entry":[{},{},"token, verify that the importer key's CV matches the"]},{"entry":[{},{},"Import Key CV mask and template in the Import Key CCA"]},{"entry":[{},{},"Token Parameters."]},{"entry":[{},"C.","If the importer key is a CCA token, triple decrypt the"]},{"entry":[{},{},"importer key under the master key with importer key's CV."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["622 - Exporting a","If the following conditions are true, proceed to step 624. Else,"]},{"entry":["key?","proceed to step 630:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"A.","A source key was provided in the source key identifier"]},{"entry":[{},{},"input parameter, or a source key label was provided in the"]},{"entry":[{},{},"source key identifier input parameter. In the latter case,"]},{"entry":[{},{},"retrieval of the source key from the key storage repository"]},{"entry":[{},{},"was successful."]},{"entry":[{},"B.","The rule section in the trusted block selected in step 612"]},{"entry":[{},{},"indicates that an export key operation is to take place."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["624 - Process","See FIG. 12 - process source key( ) for details. Process the"]},{"entry":["source key","source key differently according to whether the source key is"]},{"entry":[{},"an RKX token, an internal CCA token, or external CCA token."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"A.","If the source key is an RKX token, decrypt the confounder"]},{"entry":[{},{},"and key contained in the token, under a variant of the"]},{"entry":[{},{},"MAC key located in the trusted block's Protection"]},{"entry":[{},{},"Information section."]},{"entry":[{},"B.","If the source key is either an external or internal CCA"]},{"entry":[{},{},"token, verify the source key's CV against the trusted"]},{"entry":[{},{},"block's selected rule section's CV mask and template."]},{"entry":[{},{},"Verify that the key may be exported. Verify that if the"]},{"entry":[{},{},"source key was a key label, the trusted block's rule"]},{"entry":[{},{},"section's key label template allows the source key's label."]},{"entry":[{},"C.","If the source key is an external CCA token, then decrypt"]},{"entry":[{},{},"the key contained in the token, under the importer KEK"]},{"entry":[{},{},"from step 620."]},{"entry":[{},"D.","If the source key is an internal CCA token, triple decrypt"]},{"entry":[{},{},"the key under the master key with source key's CV. If the"]},{"entry":[{},{},"source key is single length, and if key replication is"]},{"entry":[{},{},"allowed, replicate the single length key to a double length"]},{"entry":[{},{},"key."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["626 - Exporting a","If the following conditions are true, proceed to step 628. Else,"]},{"entry":["key to CCA token","proceed to step 630:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["format?","A.","The rule section in the trusted block selected in step 612"]},{"entry":[{},{},"indicates that an export key operation is to take place."]},{"entry":[{},"B.","The rule section in the trusted block selected in step 612"]},{"entry":[{},{},"indicates that the symmetric encrypted output format is to"]},{"entry":[{},{},"be a CCA token format."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["628 - Verify","If the transporter key is an RKX token, double length, with"]},{"entry":["transport KEK has","equal halves; or if the transporter key is a CCA token, type"]},{"entry":["unique halves","EXPORTER, with equal halves, then abort operation with an"]},{"entry":[{},"error."]},{"entry":["630 - Asymmetric","If the rule section in the trusted block selected in step 612"]},{"entry":["encrypted output","indicates that an asymmetric encrypted key will be output, then"]},{"entry":["needed?","proceed to step 632, otherwise proceed to step 640."]},{"entry":["632 - Trusted block","When producing asymmetric encrypted key output and if the"]},{"entry":["public key exists?","trusted block does not have a Trusted Public Key section, abort"]},{"entry":[{},"the operation with an error."]},{"entry":["634 - Trusted block","When producing asymmetric encrypted key output, verify that"]},{"entry":["public key usage","the trusted block's Trusted Public Key section has a public key"]},{"entry":["correct?","usage flag consistent with the RKX service. This implies that"]},{"entry":[{},"the key usage flag be set to allow either key management"]},{"entry":[{},"operations only, or both digital signature and key management"]},{"entry":[{},"operations. If the key usage flag is set to allow digital signature"]},{"entry":[{},"operations only, then abort the operation with an error."]},{"entry":["636 - Verify input","See FIG. 13 - verifyCertParms( ) for details. This routine"]},{"entry":["certificate","verifies the validity of the certificate_parms_length input"]},{"entry":["parameters","parameter as well as the lengths contained in the certificate"]},{"entry":[{},"parms table. The lengths in the certificate parms table include"]},{"entry":[{},"modulus length, exponent length, digital signature length, and"]},{"entry":[{},"length of the certificate data hashed to compute the digital"]},{"entry":[{},"signature. The lengths of these parameters contained in the"]},{"entry":[{},"certificate along with their offsets, are used to determine if the"]},{"entry":[{},"parameters overlap, which would indicate an error."]},{"entry":["638 - Hash the","Compute the SHA-1 hash on the certificate input parameter"]},{"entry":["certificate and","located by adding the offset of the first byte of certificate data"]},{"entry":["verify its signature.","to be hashed (the offset being located in the certificate parms"]},{"entry":[{},"input parameter) to the beginning of the certificate input"]},{"entry":[{},"parameter for a length found in the certificate parms input"]},{"entry":[{},"parameter that represents the amount of data to be hashed."]},{"entry":[{},"Once the hash is obtained, prepend the BER encoded string to"]},{"entry":[{},"hash. Verify certificate signature using the PKCS 1.0\/1.1"]},{"entry":[{},"encryption method.."]},{"entry":["640, 642, 644 -","Referring to the rule section in the trusted block selected in"]},{"entry":["Generate or export","step 612, determine whether to generate a key or export a key."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["a key?","A.","If generating a new key, proceed to FIG. 14 -"]},{"entry":[{},{},"rkx generate( )."]},{"entry":[{},"B.","If exporting a preexisting key found in the source key"]},{"entry":[{},{},"identifier input parameter, proceed to FIG. 15 -"]},{"entry":[{},{},"rkx export( )."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Once a key is either generated or exported, or if an error"]},{"entry":[{},"occurred in the process that would prematurely abort the"]},{"entry":[{},"process, a response message is built to send to the host from"]},{"entry":[{},"the cryptographic adapter as described in the next step, step"]},{"entry":[{},"646."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["646 - Send a data","A.","A symmetric encrypted output key will always be returned"]},{"entry":["packet to the host",{},"to the host from the cryptographic adapter from this"]},{"entry":["containing the",{},"service."]},{"entry":["symmetric","B.","An asymmetric encrypted key may or may not be returned"]},{"entry":["encrypted output",{},"based upon the contents of the rule section selected in step"]},{"entry":["key, optional",{},"612. For example, if the rule section's Asymmetric"]},{"entry":["asymmetric",{},"Encrypted Output Key Format flag is set to \u201cno"]},{"entry":["encrypted output",{},"asymmetric key\u201d, then only a symmetric encrypted key"]},{"entry":["key, and optional",{},"will be returned to the host."]},{"entry":["key check value.","C.","The key check value may or may not be returned based"]},{"entry":[{},{},"upon the contents of the rule section selected in step 612."]},{"entry":[{},{},"If the rule section's Key Check Algorithm identifier field"]},{"entry":[{},{},"specifies \u201cDo not compute a key check value\u201d, then no"]},{"entry":[{},{},"key check value will be returned and the key check value"]},{"entry":[{},{},"length will be set to zero. Otherwise return the key check"]},{"entry":[{},{},"value from FIG. 17, step 614 (if the RKX service"]},{"entry":[{},{},"generated a key) or from FIG. 18, step 606 (if the RKX"]},{"entry":[{},{},"service exported a key)."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["648 - RKX","The service is complete."]},{"entry":"complete"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0176","num":"0392"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0177","num":"0393"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 20"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":[{},"Detailed description"]},{"entry":["Step number and","The Validate_block routine (700) verifies that the trusted block"]},{"entry":["brief summary","is valid for use by the calling service."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["702 - Parse the","This routine will parse the trusted block; filling in a buffer that"]},{"entry":["trusted block.","holds a table of pointers to structures that hold the counts of each"]},{"entry":[{},"section, the pointers to these sections, and the pointers to each"]},{"entry":[{},"section's required and\/or optional subsections. This routine will:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"A.","Verify that the total size of the trusted block is equal to the"]},{"entry":[{},{},"sum of the lengths of all sections, then"]},{"entry":[{},"B.","Locate and save the Active flag contained in the"]},{"entry":[{},{},"Information section."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"The table of pointers to these structures will be organized in such"]},{"entry":[{},"as way as to easily locate a particular section and subsection"]},{"entry":[{},"within the trusted block, whose sections and subsections may be"]},{"entry":[{},"organized in any order upon creation of the trusted block."]},{"entry":["704 - Verify","This routine will:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["validity of the","A.","Verify the existence of the Information section,"]},{"entry":["Information","B.","Verifies that the length of the section is not less than the"]},{"entry":["section",{},"sum of the lengths of the subsections; namely, the"]},{"entry":[{},{},"Protection Information section (required to be present) and"]},{"entry":[{},{},"the Activation and Expiration Date subsection (optionally"]},{"entry":[{},{},"present),"]},{"entry":[{},"C.","Verifies that there is only one Protection Information"]},{"entry":[{},{},"subsection,"]},{"entry":[{},"D.","Verifies that the trusted block activation date is valid:"]},{"entry":[{},{},"month is in the range of 1-12; days are not zero; days not"]},{"entry":[{},{},"greater than the maximum number of days in the specified"]},{"entry":[{},{},"month,"]},{"entry":[{},"E.","Verifies that the trusted block expiration date is valid"]},{"entry":[{},{},"month is in the range of 1-12; days are not zero; days not"]},{"entry":[{},{},"greater than the maximum number of days in the specified"]},{"entry":[{},{},"month,"]},{"entry":[{},"F.","Verifies that the activation date is less than or equal to the"]},{"entry":[{},{},"expiration date."]},{"entry":[{},"G.","Verifies that the expiration date is not less than or equal to"]},{"entry":[{},{},"the cryptographic adapter's real time clock data and time."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["706 - Obtain the","This routine verifies that the trusted block token is either internal"]},{"entry":["state of the trusted","or external, and active or inactive, based upon both the value of"]},{"entry":["block","the trusted block's token identifier located in the Trusted Block"]},{"entry":[{},"Key Token Header, and the service that called the validateblock"]},{"entry":[{},"routine. This routine verifies that only the TBC, PKI, DSV,"]},{"entry":[{},"KTC, and RKX services call this routine. Any other service that"]},{"entry":[{},"calls this routine results in an error."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"A.","If the TBC service calls validate_block with the"]},{"entry":[{},{},"INACTIVE keyword parameter, the token identifier in the"]},{"entry":[{},{},"Trusted Block Key Token Header is ignored and the active"]},{"entry":[{},{},"flag in the Trusted Block Information section is ignored."]},{"entry":[{},"B.","If the TBC service calls validate_block with the"]},{"entry":[{},{},"ACTIVATE keyword parameter, the token identifier in the"]},{"entry":[{},{},"Trusted Block Key Token Header must be an external"]},{"entry":[{},{},"token and the active flag in the Trusted Block Information"]},{"entry":[{},{},"section must be in the inactive state."]},{"entry":[{},"C.","If the RKX service calls validate_block the token identifier"]},{"entry":[{},{},"in the Trusted Block Key Token Header must be an internal"]},{"entry":[{},{},"token and the active flag in the Trusted Block Information"]},{"entry":[{},{},"section must be in the active state."]},{"entry":[{},"D.","If the PKI service calls validate_block the token identifier"]},{"entry":[{},{},"in the Trusted Block Key Token Header must be an"]},{"entry":[{},{},"external token and the active flag in the Trusted Block"]},{"entry":[{},{},"Information section must be in the active state."]},{"entry":[{},"E.","If the DSV service calls validate_block, the token identifier"]},{"entry":[{},{},"in the Trusted Block Key Token Header must be an internal"]},{"entry":[{},{},"token and the active flag in the Trusted Block Information"]},{"entry":[{},{},"section must be in the active state."]},{"entry":[{},"F.","If the KTC service calls validate_block the token identifier"]},{"entry":[{},{},"in the Trusted Block Key Token Header must be an internal"]},{"entry":[{},{},"token and the active flag in the Trusted Block Information"]},{"entry":[{},{},"section must be in the active state."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["708 - Verify","This routine checks for the presence of Public Key section"]},{"entry":["validity of the","within the Trusted Block. If the Public Key section is present,"]},{"entry":["Public Key","the routine:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["section if present","A.","Verifies that the length of this section is greater than or"]},{"entry":[{},{},"equal to the sum of its constituent parts: section identifier,"]},{"entry":[{},{},"structure version number, length field, public key exponent"]},{"entry":[{},{},"byte length field, public key modulus bit length, public key"]},{"entry":[{},{},"modulus byte length, public key exponent, public key"]},{"entry":[{},{},"modulus, and usage flags;"]},{"entry":[{},"B.","Verifies that the modulus bytes length is not trivial (i.e."]},{"entry":[{},{},"zero length);"]},{"entry":[{},"C.","Verifies that the exponent byte length is not trivial (i.e. zero"]},{"entry":[{},{},"length);"]},{"entry":[{},"D.","Verifies that the modulus length in bits is not greater than"]},{"entry":[{},{},"the modulus length in bytes;"]},{"entry":[{},"E.","Verifies that the modulus length in bits does not exceed the"]},{"entry":[{},{},"maximum value used for encrypting with symmetric RSA"]},{"entry":[{},{},"keys as set forth by the function control vector resident"]},{"entry":[{},{},"within the cryptographic adapter;"]},{"entry":[{},"F.","Verifies that the modulus length in bits is not less than 512"]},{"entry":[{},{},"bits;"]},{"entry":[{},"G.","Verifies that the public key usage flags are set to a valid"]},{"entry":[{},{},"value;"]},{"entry":[{},"H.","Verifies that the public key exponent has odd parity."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["710 - Verify","This routine verifies that the length of this section is valid and"]},{"entry":["validity of the","that the label contains valid characters. Wildcard characters are"]},{"entry":["Label section if","allowed."]},{"entry":"present"},{"entry":["712 - Verify","This routine verifies that the length of this section is valid."]},{"entry":"validity of the"},{"entry":"Application"},{"entry":"Defined Data"},{"entry":"section if present"},{"entry":["714 - Verify","This routine checks the validity of all rule sections present in the"]},{"entry":["validity of all","trusted block. At least one rule section must be present if the"]},{"entry":["Rule sections that","RKX service called the validate_block routine."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["are present","A.","Verify that the length of the rule section is greater than or"]},{"entry":[{},{},"equal to the sum of its constituent parts; defined as the sum"]},{"entry":[{},{},"of the section identifier, structure version number, length"]},{"entry":[{},{},"field, rule ID field, flags field, generated key length field,"]},{"entry":[{},{},"key check algorithm identifier, symmetric encrypted output"]},{"entry":[{},{},"key format flag, and asymmetric encrypted output key"]},{"entry":[{},{},"format flag."]},{"entry":[{},"B.","Verify that each rule ID field of each rule section is unique"]},{"entry":[{},{},"in value, i.e. not equal to another rule ID of another rule"]},{"entry":[{},{},"section contained in the trusted block."]},{"entry":[{},"C.","Verify that the rule ID is an ASCII string with no NULL"]},{"entry":[{},{},"terminator, and follows the acceptable character set of A-Z,"]},{"entry":[{},{},"a-z, hyphen (-), and underscore (_). If the rule ID is less"]},{"entry":[{},{},"than 8 characters, then the rule ID must be left justified and"]},{"entry":[{},{},"padded on the right with spaces."]},{"entry":[{},"D.","Verify that the Generated Key Length field is zero if the"]},{"entry":[{},{},"Flags field indicates that an export operation is to occur;"]},{"entry":[{},{},"and either 8 (for single length key), 16 (for double length"]},{"entry":[{},{},"key), or 24 (for a triple length key) if the Flags field"]},{"entry":[{},{},"indicates that a generate operation is to occur."]},{"entry":[{},"E.","Verify that the Key Check Algorithm field indicates that"]},{"entry":[{},{},"either: no key check should be done; the key check"]},{"entry":[{},{},"algorithm will involve encryption of 8 bytes of zeroes with"]},{"entry":[{},{},"the key being generated or exported; or an MDC2 hash of"]},{"entry":[{},{},"the generated or exported key will be performed."]},{"entry":[{},"F.","Verify that the Symmetric Encrypted Output Format flag is"]},{"entry":[{},{},"set to either RKX token format or CCA token format."]},{"entry":[{},"G.","Verify that the Asymmetric Encrypted Output Format is set"]},{"entry":[{},{},"to either no asymmetric output, PKCS1.2 formatted output,"]},{"entry":[{},{},"or RSA-OAEP formatted output."]},{"entry":[{},"H.","Verify that the lengths of the subsections in each rule"]},{"entry":[{},{},"section are valid, and that none of the subsections per given"]},{"entry":[{},{},"rule section are duplicated."]},{"entry":[{},"I.","Validity checks are tailored to each subsection as follows:"]},{"entry":[{},"J.","For a Transport Key Variant subsection, verify that the"]},{"entry":[{},{},"transport key variant length, if not zero, should be at least"]},{"entry":[{},{},"as long as a single length key, and verify the transport key"]},{"entry":[{},{},"variant has even parity."]},{"entry":[{},"K.","For a Transport Key Rule Reference subsection, verify that"]},{"entry":[{},{},"the transport key rule ID is an ASCII string with no NULL"]},{"entry":[{},{},"terminator, and follows the acceptable character set of A-Z,"]},{"entry":[{},{},"a-z, hyphen (-), and underscore (_). If the rule ID is less"]},{"entry":[{},{},"than 8 characters, then the rule ID must be left justified and"]},{"entry":[{},{},"padded on the right with spaces."]},{"entry":[{},"L.","For a Common Export Key Parameters subsection,"]},{"entry":[{},{},"Verify that the Export Key Maximum Length is less"]},{"entry":[{},{},"than or equal to the value of the CV Length field if the"]},{"entry":[{},{},"CV length is not zero with the exception of the"]},{"entry":[{},{},"following case: If the Export Key Maximum length is"]},{"entry":[{},{},"24 bytes, then the CV Length may be equal to 16 bytes"]},{"entry":[{},{},"if the CV value in this subsection is set to either all"]},{"entry":[{},{},"binary zeroes, or all binary zeroes with the key-part bit"]},{"entry":[{},{},"and parity bit turned on."]},{"entry":[{},{},"If the Output Key Variant Length is not zero, verify"]},{"entry":[{},{},"that the Output Key Variant has even parity, verify that"]},{"entry":[{},{},"its length is greater than or equal to the Generated Key"]},{"entry":[{},{},"Length value in the Rule section if a generate operation"]},{"entry":[{},{},"is to take place, and verify that its length is greater than"]},{"entry":[{},{},"or equal to the Export Key Maximum Length in this"]},{"entry":[{},{},"subsection if an export operation is to be performed."]},{"entry":[{},{},"If an export operation is to be performed, verify that the"]},{"entry":[{},{},"Export Key Minimum Length is not zero, is a multiple"]},{"entry":[{},{},"of 8 bytes, is not greater than 24 bytes, and is not"]},{"entry":[{},{},"greater than the Export Key Maximum Length."]},{"entry":[{},{},"Furthermore, verify that the Export Key Maximum"]},{"entry":[{},{},"Length is not zero, is a multiple of 8 bytes, and is not"]},{"entry":[{},{},"greater than 24 bytes."]},{"entry":[{},{},"If the CV Length is not zero, perform the validity"]},{"entry":[{},{},"checks on the CV in this subsection such that the CV"]},{"entry":[{},{},"bits conform to control vector standards as documented"]},{"entry":[{},{},"in the CCA Basic Services Reference and Guide"]},{"entry":[{},{},"Appendix C: CCA control-vector definitions and key"]},{"entry":[{},{},"encryption."]},{"entry":[{},"M.","For a Source Key Rule Reference subsection, verify that"]},{"entry":[{},{},"the source key rule ID is an ASCII string with no NULL"]},{"entry":[{},{},"terminator, and follows the acceptable character set of A-Z,"]},{"entry":[{},{},"a-z, hyphen (-), and underscore (_). If the rule ID is less"]},{"entry":[{},{},"than 8 characters, then the rule ID must be left justified and"]},{"entry":[{},{},"padded on the right with spaces."]},{"entry":[{},"N.","For an Export Key CCA Token Parameters subsection,"]},{"entry":[{},{},"Verify that if the Export Key CV Limit Mask Length is"]},{"entry":[{},{},"nonzero, then its value is either 8 bytes or 16 bytes."]},{"entry":[{},{},"Furthermore, the Export Key CV Limit Mask's length"]},{"entry":[{},{},"must equal the length of the Export Key CV Limit"]},{"entry":[{},{},"Template."]},{"entry":[{},{},"Verify that the Source Key Label Template Length is"]},{"entry":[{},{},"equal to either zero or 64 bytes. If the latter is true,"]},{"entry":[{},{},"verify that there are no binary zeroes in the Source Key"]},{"entry":[{},{},"Label Template field."]},{"entry":[{},{},"Verify that the CV Limit Mask Length is equal to the"]},{"entry":[{},{},"Export Key Maximum Length field in the Common"]},{"entry":[{},{},"Export key Parameters subsection."]},{"entry":[{},{},"If there are any invalid subsections encountered, abort"]},{"entry":[{},{},"the operation with an error."]},{"entry":"716 - Return to"},{"entry":"caller"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0178","num":"0394"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0179","num":"0395"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 21"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":[{},"Detailed description"]},{"entry":[{},"Decrypt trusted block MAC key 800 with either the old or"]},{"entry":[{},"current PKA master key according to whether the trusted"]},{"entry":[{},"block's MKVP matched the old or current PKA MKVP. A"]},{"entry":["Step number","variant will be exclusive-OR'ed with the cleartext PKA"]},{"entry":["and brief","master key before the decryption is performed. The decrypted"]},{"entry":["summary","24-byte MAC key will be exclusive-OR'ed with a variant."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["802 - Obtain","This routine obtains the MDC4 hash of the current PKA"]},{"entry":["PKA master key.","master key and compares the result to the MKVP contained in"]},{"entry":[{},"the Protection Information section of the trusted block. If a"]},{"entry":[{},"mismatch occurs, the MDC4 hash of the old PKA master key"]},{"entry":[{},"is obtained and compared to the MKVP contained in the"]},{"entry":[{},"Protection Information section of the trusted block. If a mismatch still"]},{"entry":[{},"occurs, abort the operation with an error."]},{"entry":["804 - Triple","The current or old master key, chosen based upon the match"]},{"entry":["decrypt MAC","found in step 802, is exclusive-OR'ed with the PKA master"]},{"entry":["key","key variant, defined as 0xC9 2E BB 35 D2 AA 56 D8, 9C 66"]},{"entry":[{},"E4 12 2B E7 A0 A3 B4 55 FF E4 D7 E7 F6 41. The"]},{"entry":[{},"confounder and MAC key located in the Protection"]},{"entry":[{},"Information of the trusted block is then triple decrypted using"]},{"entry":[{},"the cipher-block chaining mode."]},{"entry":["806 - XOR MAC","The MAC key variant, defined as 0xEB 4B 1D F5 D8 1B 63"]},{"entry":["key with variant","8D 5F DE 17 B1 00 27 35 AC 55 BB 05 78 AF DI B8 18, is"]},{"entry":[{},"exclusive-OR'ed with the cleartext MAC key. The"]},{"entry":[{},"confounder, having served its purpose in step 804, is ignored in this"]},{"entry":[{},"step."]},{"entry":"808 - Return to"},{"entry":"caller."},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0180","num":"0396"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0181","num":"0397"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 22"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":[{},"Detailed description"]},{"entry":["Step number and","The compute tb mac routine (900) computes the MAC over a trusted"]},{"entry":["brief summary","block."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["902 - Copy trusted","Copy trusted block to a temporary block."]},{"entry":"block to a"},{"entry":"temporary block"},{"entry":["904 - Zeroize fields","Fill the following temporary block fields with binary zeroes"]},{"entry":["used to make the","in the Protection Information section of the trusted block:"]},{"entry":["MAC value and","MAC key field that includes the confounder, MAC value"]},{"entry":["which are parts of","field, and MKVP field."]},{"entry":"the MAC value."},{"entry":["906 - Compute","Compute ISO-16609 cipher-block chaining mode, triple DES"]},{"entry":["MAC value","MAC over temporary block using the cleartext MAC key"]},{"entry":[{},"obtained in FIG. 8, step 804. The cleartext MAC key does"]},{"entry":[{},"not have the MAC key variant exclusive-OR'ed to it during this step."]},{"entry":"908 - Return to"},{"entry":"caller."},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0182","num":"0398"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0183","num":"0399"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 23"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":[{},"Detailed description"]},{"entry":[{},"The process transport key routine 1000 verifies that the"]},{"entry":[{},"transporter key is either a valid RKX token or a valid CCA"]},{"entry":[{},"token. If valid, the key is decrypted. If a transport key"]},{"entry":["Step number and","variant exists, it is exclusive-OR'ed with the cleartext"]},{"entry":["brief summary","transport key."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1002 - Does","This routine is called whenever the RKX service is to"]},{"entry":["transporter key","perform a key export operation. If the RKX API input"]},{"entry":["exist?","parameter, transport_key_identifier, contains a NULL token,"]},{"entry":[{},"defined as a token whose first byte is set to 0x00; or if the"]},{"entry":[{},"transport_key_identifier was NULL, then abort the operation"]},{"entry":[{},"with an error."]},{"entry":["1004 - Is","If the transporter key token type is external and the version"]},{"entry":["transporter key an","number is 0x10 indicating an RKX token, proceed to step"]},{"entry":["RKX token?","1008. Else proceed to step 1006."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1008 - Decrypt the","A.","Verify that the RKX token's key length field is set"]},{"entry":["transport key in the",{},"equal to the sum of either the confounder length and a"]},{"entry":["RKX token.",{},"single length key, the confounder and a double length"]},{"entry":[{},{},"key, or the confounder and a triple length key."]},{"entry":[{},"B.","If the RKX token's key length field is set equal to the"]},{"entry":[{},{},"sum of the confounder length and a single length key,"]},{"entry":[{},{},"abort the operation with an error because a transporter"]},{"entry":[{},{},"key must not be single length in the preferred"]},{"entry":[{},{},"embodiment."]},{"entry":[{},"C.","Using the trusted block's Protection Information"]},{"entry":[{},{},"section's cleartext MAC key exclusive-OR'ed with the"]},{"entry":[{},{},"MAC key variant from FIG. 8, step 806, compute the"]},{"entry":[{},{},"ISO-16609 cipher-block chaining mode triple DES"]},{"entry":[{},{},"MAC over the RKX token starting at offset 0 up to but"]},{"entry":[{},{},"not including offset 56 in Table 18."]},{"entry":[{},"D.","Compare computed MAC against RKX token MAC"]},{"entry":[{},{},"value at offset 56. If unequal, abort the operation with"]},{"entry":[{},{},"an error (1012). Else, decrypt the RKX token's"]},{"entry":[{},{},"confounder and key using the trusted block's Protection"]},{"entry":[{},{},"Information section's cleartext Mac key exclusive-"]},{"entry":[{},{},"OR'ed with the MAC key variant from FIG. 8, step"]},{"entry":[{},{},"806."]},{"entry":[{},"E.","Verify that the trusted block's Transport Key Rule"]},{"entry":[{},{},"Reference subsection's rule ID matches the transporter"]},{"entry":[{},{},"key RKX token's rule ID at offset 40 of Table 18. If"]},{"entry":[{},{},"unequal, abort the operation with an error."]},{"entry":[{},"F.","Using the trusted block's Common Export Key"]},{"entry":[{},{},"Parameter's subsection, determine if the CV length for"]},{"entry":[{},{},"the key to be exported is nonzero. If nonzero, then"]},{"entry":[{},{},"verify that the RKX token's key length field is not set"]},{"entry":[{},{},"equal to the sum of the confounder length and a triple"]},{"entry":[{},{},"length key. If so, abort the operation with an error"]},{"entry":[{},{},"because a triple length transporter key is not compatible"]},{"entry":[{},{},"with control vectors."]},{"entry":[{},"G.","If a Transport Key Variant subsection within the Rule"]},{"entry":[{},{},"section exists, exclusive-or the variant contained in the"]},{"entry":[{},{},"Transport Key Variant subsection with the cleartext"]},{"entry":[{},{},"transporter key, saving the result for later use."]},{"entry":[{},"H.","If the transporter key does not have odd parity, create a"]},{"entry":[{},{},"warning message for the host response, but continue to"]},{"entry":[{},{},"use the transporter key"]},{"entry":[{},"I.","Proceed to step 1014."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1006 - Is","If the transporter key token type is internal, proceed to step"]},{"entry":["transporter key an","1010. Else, abort operation with an error."]},{"entry":"internal CCA"},{"entry":"token?"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1010 - Decrypt the","A.","Verify that the CCA token has a nonzero CV. Perform"]},{"entry":["transporter key in",{},"the validity checks on the CV in this token such that the"]},{"entry":["the CCA token.",{},"CV bits conform to control vector standards as"]},{"entry":[{},{},"documented in the CCA Basic Services Reference and"]},{"entry":[{},{},"Guide Appendix C: CCA control-vector definitions and"]},{"entry":[{},{},"key encryption."]},{"entry":[{},"B.","Verify the validity of the token validation value"]},{"entry":[{},{},"contained within the CCA token."]},{"entry":[{},"C.","Verify that the transporter key is a double length key."]},{"entry":[{},"D.","Using the transporter key token's MKVP, determine"]},{"entry":[{},{},"whether to use the current or old DES master key to"]},{"entry":[{},{},"decrypt the transporter key. Decrypt the transporter"]},{"entry":[{},{},"DES key under the corresponding DES master key"]},{"entry":[{},{},"using the transporter key token's CV according to the"]},{"entry":[{},{},"CCA Basic Services Guide and Reference Appendix C."]},{"entry":[{},"E.","If a Transport Key Variant subsection within the Rule"]},{"entry":[{},{},"section exists, verify that the transport key variant has"]},{"entry":[{},{},"even parity. If not, abort the operation with an error."]},{"entry":[{},"F.","If a Transport Key Variant subsection within the Rule section"]},{"entry":[{},{},"exists, exclusive-or the transport key variant with the cleartext"]},{"entry":[{},{},"transporter key."]},{"entry":"1014 - Return to"},{"entry":"caller"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0184","num":"0400"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0185","num":"0401"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 24"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":[{},"Detailed description"]},{"entry":[{},"The process importer key routine (1100) will verify that"]},{"entry":["Step number and","the importer key, if present, is a valid internal CCA token."]},{"entry":["brief summary","If valid, the importer key is decrypted for later use."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1102 - Is the","If the source_key_identifier is an RKX token which"]},{"entry":["importer key","requires the MAC key within the trusted block for"]},{"entry":["needed?","decryption, or if the source_key_identifier is an internal"]},{"entry":[{},"CCA token which requires a DES master key for"]},{"entry":[{},"decryption, then ignore the importer key and proceed to"]},{"entry":[{},"step 1114. Else, proceed to step 1104."]},{"entry":["1104 - Does the","If the importer_key_identifier contains a NULL token,"]},{"entry":["importer key exist?","defined as a token whose first byte is set to 0x00; or if the"]},{"entry":[{},"importer_key_identifier is NULL, and the source key is an"]},{"entry":[{},"external CCA token, abort the operation with an error."]},{"entry":[{},"Else, proceed to step 1106."]},{"entry":["1106 - Is the","If the importer_key_identifier is an internal CCA token,"]},{"entry":["importer key an","proceed to step 1108. Else, abort the operation with an"]},{"entry":["internal CCA","error 1112."]},{"entry":"token?"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1108 - Decrypt the","A.","Verify that the CCA token has a nonzero CV."]},{"entry":["importer key in the",{},"Perform the validity checks on the CV in this token"]},{"entry":["CCA token",{},"such that the CV bits conform to control vector"]},{"entry":[{},{},"standards as documented in the CCA Basic Services"]},{"entry":[{},{},"Reference and Guide Appendix C: CCA control-vector"]},{"entry":[{},{},"definitions and key encryption."]},{"entry":[{},"B.","Verify the validity of the token validation value contained"]},{"entry":[{},{},"within the CCA token."]},{"entry":[{},"C.","Verify that the importer key is a double length key."]},{"entry":[{},"D.","Using the importer key token's MKVP, determine"]},{"entry":[{},{},"whether to use the current or old DES master key to"]},{"entry":[{},{},"decrypt the importer key. Decrypt the importer DES"]},{"entry":[{},{},"key under the corresponding DES master key using the importer"]},{"entry":[{},{},"key token's CV."]},{"entry":[{},"E.","If the importer key does not have odd parity, create a"]},{"entry":[{},{},"warning message for the host response, but continue to use the"]},{"entry":[{},{},"importer key."]},{"entry":"1114 - Return to"},{"entry":"caller."},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0186","num":"0402"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0187","num":"0403"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 25"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":[{},"Detailed description"]},{"entry":[{},"The process_source_key routine 1200 Verify that the"]},{"entry":[{},"source key is either a valid RKX token or a valid CCA"]},{"entry":[{},"token. If valid, the key is decrypted. If an output key"]},{"entry":["Step number and","variant exists, it is exclusive-OR'ed with the cleartext"]},{"entry":["brief summary","source key."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1202 - Does the","If the source_key_identifier contains a NULL token,"]},{"entry":["source key exist?","defined as a token whose first byte is set to 0x00; or if the"]},{"entry":[{},"source_key_identifier is NULL, then abort the operation"]},{"entry":[{},"with an error. Else, proceed to step 1206."]},{"entry":["1206 - Is source key","If the source key token type is external and the version"]},{"entry":["an RKX token?","number is 0x10 indicating an RKX token, proceed to step"]},{"entry":[{},"1214. Else proceed to step 1208."]},{"entry":["1214 - Verify","This description is written to accommodate either a source"]},{"entry":["source key length","that is an RKX token or a source key that is a CCA token,"]},{"entry":["and trusted block","and is implemented as a subroutine in the preferred"]},{"entry":["Rule section CV","embodiment."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Length.","A.","Verify that the source key length is not larger than the"]},{"entry":[{},{},"CV Length in the Rule section's Common Export Key"]},{"entry":[{},{},"Parameters subsection. In the event that the CV Length"]},{"entry":[{},{},"is zero, the source key length will not be compared to"]},{"entry":[{},{},"the CV Length."]},{"entry":[{},"B.","If the CV Length is single (meaning 8 bytes in length),"]},{"entry":[{},{},"and the source key length is double (meaning 16 bytes"]},{"entry":[{},{},"in length), abort the operation with an error."]},{"entry":[{},"C.","If the source key is contained within an RKX token, a"]},{"entry":[{},{},"source key length of triple length (meaning 24 bytes)"]},{"entry":[{},{},"and a nonzero CV is considered an error since a triple"]},{"entry":[{},{},"length key is not compatible with control vectors which"]},{"entry":[{},{},"are designed for single and double length keys;"]},{"entry":[{},{},"however, if the CV Length in the Common Export Key"]},{"entry":[{},{},"Parameters subsection is zero or if the CV length is"]},{"entry":[{},{},"nonzero but the CV value is all binary zeroes, then the"]},{"entry":[{},{},"source key length restriction is waived."]},{"entry":[{},"D.","Verify that the length of the source key is greater than"]},{"entry":[{},{},"or equal to the Export Key Minimum Length in the"]},{"entry":[{},{},"Common Export Key Parameters subsection."]},{"entry":[{},"E.","Verify that the length of the source key is less than or"]},{"entry":[{},{},"equal to the Export Key Maximum Length in the"]},{"entry":[{},{},"Common Export Key Parameters subsection."]},{"entry":[{},"F.","Verify that the length of the source key is less than or"]},{"entry":[{},{},"equal to the Output Key Variant Length in the"]},{"entry":[{},{},"Common Export Key Parameters subsection provided"]},{"entry":[{},{},"that the Output Key Variant Length is nonzero (if the"]},{"entry":[{},{},"Output Key Variant Length is zero, then this"]},{"entry":[{},{},"comparison step is not performed)."]},{"entry":[{},"G.","If the CV Length in the Common Export Key"]},{"entry":[{},{},"Parameters subsection is greater than the source key"]},{"entry":[{},{},"length, then this would imply that the CV Length is 16"]},{"entry":[{},{},"and the source key length is 8 bytes. (Note that the"]},{"entry":[{},{},"possible CV Lengths are 0, 8, or 16; while the possible"]},{"entry":[{},{},"source key lengths are 8, 16, or 24 bytes). Therefore, in"]},{"entry":[{},{},"this case, the source key may be replicated (meaning"]},{"entry":[{},{},"that the 8-byte value is replicated to 16 bytes such that"]},{"entry":[{},{},"there are 2 equal halves), if the CV value in the"]},{"entry":[{},{},"Common Export Key Parameters subsection permits"]},{"entry":[{},{},"the replication and furthermore if the replication does"]},{"entry":[{},{},"not exceed the Export Key Maximum Length in the"]},{"entry":[{},{},"Common Export Key Parameters subsection."]},{"entry":[{},"H.","If the Rule section Symmetric Encrypted Output Key"]},{"entry":[{},{},"Format flag is set for CCA token output, and if the CV"]},{"entry":[{},{},"Length in the Common Export Key Parameters"]},{"entry":[{},{},"subsection is set to zero, then preserve the source key's"]},{"entry":[{},{},"CV value for the case of the source key being a CCA"]},{"entry":[{},{},"token. If the source key is an RKX token, the issue is"]},{"entry":[{},{},"moot since there is no CV contained in the token to be"]},{"entry":[{},{},"preserved."]},{"entry":[{},"I.","Various combinations of source key length, Common"]},{"entry":[{},{},"Export Key Parameter CV Length, and Common"]},{"entry":[{},{},"Export key Parameter CV value are examined for"]},{"entry":[{},{},"validity."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1)","If the Common Export Key Parameters subsection"]},{"entry":[{},{},"contains a CV Length that is neither zero, single"]},{"entry":[{},{},"length, nor double length, then abort the operation"]},{"entry":[{},{},"with an error."]},{"entry":[{},"2)","If the CV Length is set to single or double, the"]},{"entry":[{},{},"source key is single length, and the Common"]},{"entry":[{},{},"Export Key Parameters subsection contains a CV"]},{"entry":[{},{},"value that is set to binary zeroes, proceed to step"]},{"entry":[{},{},"1228."]},{"entry":[{},"3)","If the CV Length is double, the source key is"]},{"entry":[{},{},"double length, and the Common Export Key"]},{"entry":[{},{},"Parameters subsection contains a CV value that is"]},{"entry":[{},{},"set to binary zeroes, proceed to step 1228."]},{"entry":[{},"4)","If the source key length is triple, the CV Length is"]},{"entry":[{},{},"double, and the Common Export Key Parameters"]},{"entry":[{},{},"subsection contains a CV value that is set to binary"]},{"entry":[{},{},"zeroes, proceed to step 1228."]},{"entry":[{},"5)","If the source key length is triple, the CV Length is"]},{"entry":[{},{},"double, and the Common Export Key Parameters"]},{"entry":[{},{},"subsection contains a CV value that is nonzero,"]},{"entry":[{},{},"then abort the operation with an error."]},{"entry":[{},"6)","If the source key length is triple and the CV Length"]},{"entry":[{},{},"is single, then abort the operation with an error."]},{"entry":[{},"7)","If the CV Length is single, but the Common Export"]},{"entry":[{},{},"Key Parameters subsection contains a CV value"]},{"entry":[{},{},"that indicates that the key to which this CV is to be"]},{"entry":[{},{},"associated with must be double, then abort the"]},{"entry":[{},{},"operation with an error."]},{"entry":[{},"8)","If the CV Length is double, the source key length is"]},{"entry":[{},{},"double, and the Common Export Key Parameters"]},{"entry":[{},{},"subsection contains a CV value that has a nonzero"]},{"entry":[{},{},"left half, but the CV left half indicates that the key"]},{"entry":[{},{},"to which this CV is to be associated with must be"]},{"entry":[{},{},"single, then abort the operation with an error."]},{"entry":[{},"9)","If the CV Length is double, the source key length is"]},{"entry":[{},{},"double, and the Common Export Key Parameters"]},{"entry":[{},{},"subsection contains a CV value that has a nonzero"]},{"entry":[{},{},"left half, the CV left half indicates that the key to"]},{"entry":[{},{},"which this CV is to be associated with must be"]},{"entry":[{},{},"double, but the CV value has a binary zero right"]},{"entry":[{},{},"half, then abort the operation with an error."]},{"entry":[{},"10)","If the CV Length is double, the source key length is"]},{"entry":[{},{},"double, and the Common Export Key Parameters"]},{"entry":[{},{},"subsection contains a CV value that has a nonzero"]},{"entry":[{},{},"left half, the CV left half indicates that the key to"]},{"entry":[{},{},"which this CV is to associated with must be double,"]},{"entry":[{},{},"the CV value has a nonzero right half, but the left"]},{"entry":[{},{},"half of the CV does not indicate that the CV is a left"]},{"entry":[{},{},"half or the right half of the CV does not indicate"]},{"entry":[{},{},"that the CV is a right half, then abort the operation"]},{"entry":[{},{},"with an error."]},{"entry":[{},"11)","If the CV Length is double, the source key length is"]},{"entry":[{},{},"double, and the Common Export Key Parameters"]},{"entry":[{},{},"subsection contains a CV value that has a nonzero"]},{"entry":[{},{},"left half, the CV left half indicates that the key to"]},{"entry":[{},{},"which this CV is to associated with must be double,"]},{"entry":[{},{},"the CV value has a nonzero right half, the left half"]},{"entry":[{},{},"of the CV indicates that the CV is a left half, and"]},{"entry":[{},{},"the right half of the CV indicates that the CV is a"]},{"entry":[{},{},"right half, then perform the validity checks on the"]},{"entry":[{},{},"CV in the Common Export Key Parameters"]},{"entry":[{},{},"subsection such that the CV bits conform to control"]},{"entry":[{},{},"vector standards as documented in the CCA Basic"]},{"entry":[{},{},"Services Reference and Guide Appendix C: CCA"]},{"entry":[{},{},"control-vector definitions and key encryption. If"]},{"entry":[{},{},"there is a validity check failure, abort the operation"]},{"entry":[{},{},"with an error."]},{"entry":[{},"12)","If the CV Length is single and the source key"]},{"entry":[{},{},"length is double, then abort the operation with an"]},{"entry":[{},{},"error. IF the CV Length is double, the source key"]},{"entry":[{},{},"length is single, the left half of the CV value in the"]},{"entry":[{},{},"Common Export Key Parameters subsection"]},{"entry":[{},{},"contains a nonzero value and its value indicates that"]},{"entry":[{},{},"the key to be associated with this CV must be"]},{"entry":[{},{},"single length, then perform the validity checks on"]},{"entry":[{},{},"the CV in the Common Export Key Parameters"]},{"entry":[{},{},"subsection such that the CV bits conform to control"]},{"entry":[{},{},"vector standards as documented in the CCA Basic"]},{"entry":[{},{},"Services Reference and Guide Appendix C: CCA"]},{"entry":[{},{},"control-vector definitions and key encryption. If"]},{"entry":[{},{},"there is a validity check failure, abort the operation"]},{"entry":[{},{},"with an error."]},{"entry":[{},"13)","If the CV Length is double, the source key length is"]},{"entry":[{},{},"single, the left half of the CV value in the Common"]},{"entry":[{},{},"Export Key Parameters subsection contains a"]},{"entry":[{},{},"nonzero value, the right half of the CV value in the"]},{"entry":[{},{},"Common Export Key Parameters subsection"]},{"entry":[{},{},"contains a nonzero value, the left half of the CV"]},{"entry":[{},{},"indicates that the CV is a left half, and the right half"]},{"entry":[{},{},"of the CV indicates that the CV is a right half, then"]},{"entry":[{},{},"perform the validity checks on the CV in the"]},{"entry":[{},{},"Common Export Key Parameters subsection such"]},{"entry":[{},{},"that the CV bits conform to control vector standards"]},{"entry":[{},{},"as documented in the CCA Basic Services"]},{"entry":[{},{},"Reference and Guide Appendix C: CCA control-"]},{"entry":[{},{},"vector definitions and key encryption. If there is a"]},{"entry":[{},{},"validity check failure, abort the operation with an"]},{"entry":[{},{},"error."]},{"entry":[{},"14)","If the CV Length is double, the source key length is"]},{"entry":[{},{},"single, the left half of the CV value in the Common"]},{"entry":[{},{},"Export Key Parameters subsection contains a"]},{"entry":[{},{},"nonzero value, the right half of the CV value in the"]},{"entry":[{},{},"Common Export Key Parameters subsection"]},{"entry":[{},{},"contains a nonzero value, the left half of the CV"]},{"entry":[{},{},"indicates that the CV is a left half, and the right half"]},{"entry":[{},{},"of the CV fails validity checks, then perform the"]},{"entry":[{},{},"validity checks on the left half of the CV in the"]},{"entry":[{},{},"Common Export Key Parameters subsection such"]},{"entry":[{},{},"that the CV bits conform to control vector"]},{"entry":[{},{},"standards. If there is a validity check failure, abort"]},{"entry":[{},{},"the operation with an error. Since the key is single"]},{"entry":[{},{},"length, a bad value for the CV right half is ignored."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1222 - Decrypt the","A.","Verify that the RKX token's key length field is set"]},{"entry":["source key in the",{},"equal to the sum of either the confounder length and a"]},{"entry":["RKX token.",{},"single length key, the confounder and a double length"]},{"entry":[{},{},"key, or the confounder and a triple length key."]},{"entry":[{},"B.","If the RKX token's key length field is set equal to the"]},{"entry":[{},{},"sum of the confounder length and a single length key,"]},{"entry":[{},{},"abort the operation with an error because a transporter"]},{"entry":[{},{},"key must not be single length in the preferred"]},{"entry":[{},{},"embodiment."]},{"entry":[{},"C.","Using the trusted block's Protection Information"]},{"entry":[{},{},"section's cleartext MAC key exclusive-OR'ed with the"]},{"entry":[{},{},"MAC key variant from FIG. 8, step 806, compute the"]},{"entry":[{},{},"ISO-16609 cipher-block chaining mode triple DES"]},{"entry":[{},{},"MAC over the RKX token starting at offset 0 up to but"]},{"entry":[{},{},"not including offset 56 in Table 18."]},{"entry":[{},"D.","Compare computed MAC against RKX token MAC"]},{"entry":[{},{},"value at offset 56 of Table 18. If unequal, abort the"]},{"entry":[{},{},"operation with an error. Else, decrypt the RKX token's"]},{"entry":[{},{},"confounder and key using the trusted block's"]},{"entry":[{},{},"Protection Information section's cleartext Mac key"]},{"entry":[{},{},"exclusive-OR'ed with the MAC key variant from"]},{"entry":[{},{},"FIG. 8, step 806."]},{"entry":[{},"E.","Verify that the trusted block's Source Key Rule"]},{"entry":[{},{},"Reference subsection's rule ID matches the source key"]},{"entry":[{},{},"RKX token's rule ID at offset 40 of Table 18. If"]},{"entry":[{},{},"unequal, abort the operation with an error."]},{"entry":[{},"F.","Determine whether source key replication is needed. If"]},{"entry":[{},{},"the input key length is single, the CV Length in the"]},{"entry":[{},{},"Common Export Key Parameters subsection is double"]},{"entry":[{},{},"length, the Rule section's Symmetric Encrypted Output"]},{"entry":[{},{},"key Format flag is set to CCA token format output, the"]},{"entry":[{},{},"left and right halves of the CV value in the Common"]},{"entry":[{},{},"Export Key Parameters subsection contain key-form"]},{"entry":[{},{},"bits indicating that the key to which this CV is to be"]},{"entry":[{},{},"associated with, has left and right halves that are not"]},{"entry":[{},{},"identical, then verify that the user's role has access"]},{"entry":[{},{},"control permissions enabled which would allow the"]},{"entry":[{},{},"replication of the single length source key to become a"]},{"entry":[{},{},"16 byte (double length) key with the first 8 bytes equal"]},{"entry":[{},{},"to the second 8 bytes."]},{"entry":[{},"G.","Generate a warning message if the resultant key does"]},{"entry":[{},{},"not have odd parity, but continue to use the key. Do"]},{"entry":[{},{},"not abort the operation."]},{"entry":[{},"H.","Proceed to step 1228."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1208 - Is the source","If the source key is an external CCA DES token, proceed"]},{"entry":["key an external","to step 1212. Else proceed to step 1210."]},{"entry":"CCA token?"},{"entry":["1212 - Verify","If the importer_key_identifier contains a NULL token,"]},{"entry":["importer key","defined as a token whose first byte is set to 0x00; or if the"]},{"entry":["validity,","importer_key_identifier is NULL, then abort the operation"]},{"entry":[{},"with an error."]},{"entry":["1216 - Verify source","Follow the procedure outlined in step 1214 of this figure."]},{"entry":"key length and"},{"entry":"trusted block Rule"},{"entry":"section CV Length."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1220 - Verify","A.","If the trusted block's rule section selected in FIG. 6,"]},{"entry":["source key label",{},"step 612, contains an Export Key CCA Token"]},{"entry":["template, and verify",{},"Parameters subsection that has a nonzero Source Key"]},{"entry":["permission of",{},"Label Template Length, and the source_key_identifier"]},{"entry":["external CCA token",{},"was not a key label, abort the operation with an error."]},{"entry":["export.","B.","If the external CCA token's CV bit referred to as the"]},{"entry":[{},{},"\u201cexport OK\u201d bit 17 is equal to binary zero, abort the"]},{"entry":[{},{},"operation with an error."]},{"entry":["1224 - Decrypt the","A.","Verify that the external CCA token contains a valid"]},{"entry":["source key within",{},"TVV (token validation value), version number, and"]},{"entry":["the external CCA",{},"token fields."]},{"entry":["token.","B.","If the version number of the external token is 1, verify"]},{"entry":[{},{},"that the source key's CV contains binary zeroes and"]},{"entry":[{},{},"furthermore verify that the source key's length is either"]},{"entry":[{},{},"double or triple. A single length source key with a"]},{"entry":[{},{},"version number set to 1 will result in an error and the"]},{"entry":[{},{},"operation will be aborted."]},{"entry":[{},"C.","Verify that the importer key does not have a zero CV"]},{"entry":[{},{},"value. If so, abort the operation with an error."]},{"entry":[{},"D.","Verify that the importer key does not have equal halves"]},{"entry":[{},{},"(i.e. the left and right 8 byte quantities are not equal). If"]},{"entry":[{},{},"so, abort operation with an error."]},{"entry":[{},"E.","Triple decrypt each 8-byte section of the source key"]},{"entry":[{},{},"using the importer key from FIG. 11, step 1114. If"]},{"entry":[{},{},"the CV Length in the Common Export Key Parameters"]},{"entry":[{},{},"subsection is greater than the source key length, then"]},{"entry":[{},{},"this would imply that the CV Length is 16 and the"]},{"entry":[{},{},"source key length is 8 bytes. (Note that the possible"]},{"entry":[{},{},"CV Lengths are 0, 8, or 16; while the possible source"]},{"entry":[{},{},"key lengths are 8, 16, or 24 bytes). Therefore, in this"]},{"entry":[{},{},"case, the source key may be replicated (meaning that"]},{"entry":[{},{},"the 8-byte value is replicated to 16 bytes such that"]},{"entry":[{},{},"there are 2 equal halves), if the CV value in the"]},{"entry":[{},{},"Common Export Key Parameters subsection permits"]},{"entry":[{},{},"the replication and furthermore if the replication does"]},{"entry":[{},{},"not exceed the Export Key Maximum Length in the"]},{"entry":[{},{},"Common Export Key Parameters subsection."]},{"entry":[{},"F.","Generate a warning message if the source key does not"]},{"entry":[{},{},"have odd parity, but continue to use the key. Do not"]},{"entry":[{},{},"abort the operation."]},{"entry":[{},"G.","Proceed to step 1228."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1210. Is the source","If the source key is an internal CCA DES token, proceed to"]},{"entry":["key an internal","step 1218. Otherwise abort the operation with an error."]},{"entry":"CCA token?"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1218. Verify source","A.","If the trusted block's rule section selected in FIG. 6,"]},{"entry":["key label template,",{},"step 612, contains an Export Key CCA Token"]},{"entry":["and verify",{},"Parameters subsection that has a nonzero Source Key"]},{"entry":["permission of",{},"Label Template Length, and the source_key_identifier"]},{"entry":["internal CCA token",{},"Was not a key label, abort the operation with an error."]},{"entry":["export.","B.","If the trusted block's rule section selected in FIG. 6,"]},{"entry":[{},{},"step 612, contains an Export Key CCA Token"]},{"entry":[{},{},"Parameters subsection that has a nonzero Source Key"]},{"entry":[{},{},"Label Template Length, and the source_key_identifier"]},{"entry":[{},{},"was a key label, indicating that the source key resides"]},{"entry":[{},{},"in a key storage repository:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1)","Verify that the Source Key Label Template"]},{"entry":[{},{},"Length is 64 bytes,"]},{"entry":[{},"2)","Verify that the first character in the template is not"]},{"entry":[{},{},"be between 0x00-0x1F, nor can it be 0xFF;"]},{"entry":[{},"3)","Verify that the first character in the template is not"]},{"entry":[{},{},"numeric, 0x30-0x39; verify that the label in the"]},{"entry":[{},{},"template is terminated by a space on the right and"]},{"entry":[{},{},"that the remainder of the 64 byte field is padded"]},{"entry":[{},{},"with space characters (0x20);"]},{"entry":[{},"4)","Verify that the only special characters which may"]},{"entry":[{},{},"occur in the label template are 0x23 (#), 0x24 ($),"]},{"entry":[{},{},"0x2E (.), and 0x40 (@);"]},{"entry":[{},"5)","Verify that the wildcard 0x2A (*) is permitted as"]},{"entry":[{},{},"the first character, the last character, or only"]},{"entry":[{},{},"character;"]},{"entry":[{},"6)","Verify that once a space is encountered, every"]},{"entry":[{},{},"character to the right of that space character, up to"]},{"entry":[{},{},"the 64 byte length, must be spaces as well;"]},{"entry":[{},"7)","Verify that only alphanumeric characters are"]},{"entry":[{},{},"present in the label template: a-z, A-Z, 0-9, and"]},{"entry":[{},{},"the 4 special characters, #, $, ., and (@."]},{"entry":[{},"8)","Once the key label template has been verified for"]},{"entry":[{},{},"validity, compare the template with the source key"]},{"entry":[{},{},"label. If a miscompare results, abort the operation"]},{"entry":[{},{},"with an error."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"C.","If the external CCA token's CV bit referred to as the"]},{"entry":[{},{},"\u201cexport OK\u201d bit 17 is equal to binary zero, abort the"]},{"entry":[{},{},"operation with an error."]},{"entry":["1226 - Decrypt the","A.","Verify that the CCA token has a nonzero CV. Perform"]},{"entry":["source key within",{},"the validity checks on the CV in this token such that"]},{"entry":["the internal CCA",{},"the CV bits conform to control vector standards as"]},{"entry":["token.",{},"documented in the CCA Basic Services Reference and"]},{"entry":[{},{},"Guide Appendix C: CCA control-vector definitions and"]},{"entry":[{},{},"key encryption."]},{"entry":[{},"B.","Verify the validity of the token validation value"]},{"entry":[{},{},"contained within the CCA token."]},{"entry":[{},"C.","Verify source key length and trusted block Rule section"]},{"entry":[{},{},"CV Length by following the procedure outlined in step"]},{"entry":[{},{},"1214."]},{"entry":[{},"D.","Verify that the source key is a double length key, or a"]},{"entry":[{},{},"triple length key having a binary zero value for its CV."]},{"entry":[{},{},"Using the source key token's MKVP, determine"]},{"entry":[{},{},"whether to use the current or old DES master key to"]},{"entry":[{},{},"decrypt the source key. Decrypt the source DES key"]},{"entry":[{},{},"under the corresponding DES master key using the"]},{"entry":[{},{},"source key token's CV according to the CCA Basic"]},{"entry":[{},{},"Services Guide and Reference Appendix C."]},{"entry":[{},"E.","If the CV Length in the Common Export Key"]},{"entry":[{},{},"Parameters subsection is greater than the source key"]},{"entry":[{},{},"length, then this would imply that the CV Length is 16"]},{"entry":[{},{},"and the source key length is 8 bytes. (Note that the"]},{"entry":[{},{},"possible CV Lengths are 0, 8, or 16; while the possible"]},{"entry":[{},{},"source key lengths are 8, 16, or 24 bytes). Therefore, in"]},{"entry":[{},{},"this case, the source key may be replicated (meaning"]},{"entry":[{},{},"that the 8-byte value is replicated to 16 bytes such that"]},{"entry":[{},{},"there are 2 equal halves), if the CV value in the"]},{"entry":[{},{},"Common Export Key Parameters subsection permits"]},{"entry":[{},{},"the replication and furthermore if the replication does"]},{"entry":[{},{},"not exceed the Export Key Maximum Length in the"]},{"entry":[{},{},"Common Export Key Parameters subsection."]},{"entry":[{},"F.","Generate a warning message if the resultant key does"]},{"entry":[{},{},"not have odd parity, but continue to use the key. Do not"]},{"entry":[{},{},"abort the operation."]},{"entry":"1228 - Return to"},{"entry":"caller."},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0188","num":"0404"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0189","num":"0405"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 26"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":[{},"Detailed description"]},{"entry":[{},"The verifyCertParms( ) routine 1300 verifies the validity"]},{"entry":["Step number and","of the certificate parms length field as well as the validity"]},{"entry":["brief summary","of the lengths contained within the certificate parms table."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1302 - Is certificate too ","Verify that the certificate_length input parameter is not"]},{"entry":["large?","greater than some predefined maximum value. If so, abort"]},{"entry":[{},"operation with an error. Else, proceed to step 1304."]},{"entry":["1304 - Asymmetric output","If the rule section chosen in FIG. 6, step 612, specifies"]},{"entry":["desired?","asymmetric encrypted output, proceed to step 1306. Else,"]},{"entry":[{},"proceed to step 1318."]},{"entry":["1306 - Certificate length","Verify that the certificate_length is not zero. If zero, abort"]},{"entry":["zero?","operation with an error. Else proceed to step 4."]},{"entry":["1308 - Certificate","Verify that the certificate_parms input parameter is"]},{"entry":["parms present?","present and that the certificat_parms_length is large"]},{"entry":[{},"enough to accommodate all the elements that are needed;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"A.","The offset of the public key modulus within the"]},{"entry":[{},{},"certificate,"]},{"entry":[{},"B.","The length of the public key modulus,"]},{"entry":[{},"C.","The offset of the public key exponent within the"]},{"entry":[{},{},"certificate,"]},{"entry":[{},"D.","The length of the public key exponent,"]},{"entry":[{},"E.","The offset of the digital signature within the"]},{"entry":[{},{},"certificate,"]},{"entry":[{},"F.","The length of the digital signature,"]},{"entry":[{},"G.","The identifier for the hash algorithm used,"]},{"entry":[{},"H.","The identifier for the digital signature hash"]},{"entry":[{},{},"formatting method,"]},{"entry":[{},"I.","The offset of the block of data within the certificate"]},{"entry":[{},{},"that is to be hashed to compute the digital signature,"]},{"entry":[{},{},"and"]},{"entry":[{},"J.","The length of the certificate data hashed to compute"]},{"entry":[{},{},"the digital signature."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"If the certificate_parms parameter is not present, or does"]},{"entry":[{},"not meet the aforementioned requirements, abort the"]},{"entry":[{},"operation with an error (1316). Else proceed to step 1310."]},{"entry":["1310 - Trusted","Verify the public key section within the trusted block"]},{"entry":["block public key","exists. If not, abort operation with an error. Else, proceed"]},{"entry":["present?","to step 1312."]},{"entry":["1312 - Certificate","Verify that neither"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["parms lengths valid?","A.","The certificate parms modulus length, nor"]},{"entry":[{},"B.","The certificate parms exponent length, nor"]},{"entry":[{},"C.","The certificate parms signature length, nor"]},{"entry":[{},"D.","The certificate parms data-to-hashed length is zero."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"If any of these lengths are zero, abort operation with an"]},{"entry":[{},"error (1318). Else proceed to step 1314."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1314 - Verify the","A.","Verify that the sum of the modulus offset and the"]},{"entry":["validity of the",{},"modulus length does not exceed the length of the"]},{"entry":["certificate parameters",{},"certificate;"]},{"entry":[{},"B.","Verify that the sum of the exponent offset and the"]},{"entry":[{},{},"exponent length does not exceed the length of the"]},{"entry":[{},{},"certificate;"]},{"entry":[{},"C.","Verify that the sum of the signature offset and"]},{"entry":[{},{},"signature length does not exceed the length of the"]},{"entry":[{},{},"certificate;"]},{"entry":[{},"D.","Verify that the sum of the offset of the block of data"]},{"entry":[{},{},"within the certificate that is to be hashed and the"]},{"entry":[{},{},"length of this block does not exceed the length of the"]},{"entry":[{},{},"certificate."]},{"entry":[{},"E.","Verify that the modulus value within the certificate,"]},{"entry":[{},{},"pointed to by the modulus offset in the certificate"]},{"entry":[{},{},"parms, is not all binary zeroes."]},{"entry":[{},"F.","Verify that the exponent value within the certificate,"]},{"entry":[{},{},"pointed to by the exponent offset in the certificate"]},{"entry":[{},{},"parms, is not all binary zeroes."]},{"entry":[{},"G.","Verify that the certificates signature size, which may"]},{"entry":[{},{},"be less than the value of the signature length field but"]},{"entry":[{},{},"padded on the left with zero bits, is less than or equal"]},{"entry":[{},{},"to the size in bytes of the trusted block's public key"]},{"entry":[{},{},"modulus. If the certificate signature size is exactly"]},{"entry":[{},{},"equal to the size of the trusted block's public key"]},{"entry":[{},{},"modules, then compare the values of the certificate"]},{"entry":[{},{},"signature and trusted block public key modulus to"]},{"entry":[{},{},"verify that the value of the signature is less than the"]},{"entry":[{},{},"value of the modulus."]},{"entry":[{},"H.","Using the certificate parms offsets and lengths for"]},{"entry":[{},{},"modulus, exponent, and signature; verify that the"]},{"entry":[{},{},"modulus, exponent, and signature do not overlap each"]},{"entry":[{},{},"other."]},{"entry":[{},"I.","Verify that the public key modulus bit length in the"]},{"entry":[{},{},"certificate, pointed to by the certificate parms public"]},{"entry":[{},{},"key modulus offset, does not exceed the maximum"]},{"entry":[{},{},"allowable size set within the cryptographic adapter."]},{"entry":"1318 - Return to caller"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0190","num":"0406"},"figref":"FIG. 14","b":"1400"},{"@attributes":{"id":"p-0191","num":"0407"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 27"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Step number and",{}]},{"entry":["brief summary","Detailed description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1402 - Construct","Build an RKX token data structure consisting of the"]},{"entry":["an RKX token data structure","following parts: an external key token type 0x02 and"]},{"entry":[{},"version number 0x10 per Table 18; the rule ID retrieved"]},{"entry":[{},"from the rule section selected in FIG. 6 step 612; the sum"]},{"entry":[{},"of the Generated Key Length in bytes retrieved from the"]},{"entry":[{},"rule section selected in FIG. 6 step 612 and the length of a"]},{"entry":[{},"confounder (8 bytes); an 8 byte random number for the"]},{"entry":[{},"confounder; and either an 8, 16, or 24 byte random number"]},{"entry":[{},"for the key."]},{"entry":["1404 - Does an","If the Common Export Key Parameter subsection of the rule"]},{"entry":["output key variant exist?","section selected by the rule ID input parameter in FIG. 6,"]},{"entry":[{},"step 612, exists and furthermore contains an output key"]},{"entry":[{},"variant, then proceed to step 1406. Else proceed to step"]},{"entry":[{},"1408."]},{"entry":["1406 - Apply the","Exclusive-or the variant contained in the Common Export"]},{"entry":["output key variant","Key Parameter subsection of the rule section selected by the"]},{"entry":[{},"rule ID input parameter in FIG. 6, step 612, with the"]},{"entry":[{},"generated random number key portion. If the output key"]},{"entry":[{},"variant length is greater than the generated key length, then"]},{"entry":[{},"the leftmost bytes of the variant are used, up to key length."]},{"entry":[{},"If the output key variant length is less than the length of the"]},{"entry":[{},"generated key portion, then abort the operation with an"]},{"entry":[{},"error."]},{"entry":["1408 - Encrypt","An ISO-16609 triple DES Cipher Block Chaining Mode"]},{"entry":["confounder and key","encryption of the confounder prepended to the random key"]},{"entry":[{},"portion (after the output key variant is applied per step"]},{"entry":[{},"1406 of this figure if the output key variant was present, or"]},{"entry":[{},"after step 1402 of this figure if the output key variant is not"]},{"entry":[{},"present) is performed using an initial vector set to zero."]},{"entry":["1410 - Compute","Compute the ISO-16609 triple DES Cipher Block Chaining"]},{"entry":["MAC over RKX token","Mode MAC over the RKX token between offsets 0 and 55"]},{"entry":[{},"inclusive, and place the 8-byte MAC value into the RKX"]},{"entry":[{},"token at offset 56."]},{"entry":["1412 - Key check required?","If the rule section selected by the rule ID in FIG. 6, step"]},{"entry":[{},"612, indicates that a key check is to be performed, proceed"]},{"entry":[{},"to step 1414 in this figure. Else, proceed to step 1416 in"]},{"entry":[{},"this figure."]},{"entry":["1414 - Perform a key check","If the key check algorithm identifier in the rule section"]},{"entry":[{},"selected by the rule ID in FIG. 6, step 612, indicates that"]},{"entry":[{},"an encryption of 8 bytes of zeroes is to be performed with"]},{"entry":[{},"the cleartext key from step 1402 of this figure, then execute"]},{"entry":[{},"the following actions:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"A.","If the generated key is single length, then output only 3"]},{"entry":[{},{},"bytes of the resultant encryption in FIG. 6, step 646, if"]},{"entry":[{},{},"the input key_check_length parameter value was set to"]},{"entry":[{},{},"3;"]},{"entry":[{},"B.","Otherwise if the input key_check_length parameter"]},{"entry":[{},{},"value was set to a value between 4 and 8 inclusive,"]},{"entry":[{},{},"output only 4 bytes in FIG. 6, step 646. An input"]},{"entry":[{},{},"key_check_length parameter value of 0, 1, or 2 will"]},{"entry":[{},{},"result in an error due to insufficient length to hold the"]},{"entry":[{},{},"result, and the operation will be aborted."]},{"entry":[{},"C.","If the generated key is double or triple length, then"]},{"entry":[{},{},"output the full 8 bytes of the resultant encryption in"]},{"entry":[{},{},"FIG. 6, step 646, provided that the input"]},{"entry":[{},{},"key_check_length parameter value is set to 8."]},{"entry":[{},{},"Otherwise, abort the operation with an error due to"]},{"entry":[{},{},"insufficient length to hold the result."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"If the key check algorithm identifier in the rule section"]},{"entry":[{},"selected by the rule ID in FIG. 6, step 612, indicates that"]},{"entry":[{},"an MDC-2 hash of the cleartext key from step 1 is to be"]},{"entry":[{},"performed, then"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"a)","Odd-parity adjust each byte of the cleartext key and"]},{"entry":[{},"b)","Execute the MDC2 hash algorithm on the odd-parity"]},{"entry":[{},{},"adjusted key without the use of padding. Return the 16-"]},{"entry":[{},{},"byte value in FIG. 6, step 646, provided that the input"]},{"entry":[{},{},"key_check_length parameter is set to 16. A length less"]},{"entry":[{},{},"than 16 will result in an error and the operation will be"]},{"entry":[{},{},"aborted."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1416 - Produce asymmetric","Using the trusted block rule section selected from FIG. 6,"]},{"entry":[{},"step 612, determine whether asymmetric encrypted output"]},{"entry":["encrypted output?","is to be produced. If not, proceed to step 1420. Else,"]},{"entry":[{},"proceed to step 1418."]},{"entry":["1418 - Encrypt the","Determine from the rule section selected from FIG. 6,"]},{"entry":["generated key with","step 612, whether PKCS1.2 output or RSA-OAEP output"]},{"entry":["the public key","format is desired."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["contained in the","A.","If RSA-OAEP output is specified in the rule section,"]},{"entry":["certificate",{},"then format the generated key from step 1402 if no"]},{"entry":[{},{},"output key variant was used, or format the result of the"]},{"entry":[{},{},"generated key exclusive-OR'ed with the output key"]},{"entry":[{},{},"variant from step 1406, into an OAEP encryption block"]},{"entry":[{},{},"according to the method described in the RSA DSI"]},{"entry":[{},{},"PKCS#1-v2.0 documentation for RSAES-OAEP."]},{"entry":[{},"B.","If PKCS1.2 output was specified in the rule section,"]},{"entry":[{},{},"then format the generated key from step 1402 if no"]},{"entry":[{},{},"output key variant was used, or format the result of the"]},{"entry":[{},{},"generated key exclusive-OR'ed with the output key"]},{"entry":[{},{},"variant from step 1406, into a PKCS 1.2 encryption"]},{"entry":[{},{},"block according to the method described in the RSA"]},{"entry":[{},{},"DSI PKCS #1 documentation for block type 2. In the"]},{"entry":[{},{},"RSA PKCS #1 v2.0 standard, RSA terminology"]},{"entry":[{},{},"describes this as the RSAES-PKCS1-v1_5 format."]},{"entry":"1420 - Return to caller"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0192","num":"0408"},"figref":"FIG. 15","b":"1500"},{"@attributes":{"id":"p-0193","num":"0409"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 28"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Step number and",{}]},{"entry":["brief summary","Detailed description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1502 - Retrieve","Extract the key and key length out of the source key token"]},{"entry":["cleartext source key","that has been recovered into cleartext form in FIG. 12."]},{"entry":["1504 - Key check required?","If the rule section selected by the rule ID in FIG. 6, step"]},{"entry":[{},"612, indicates that a key check is to be performed,"]},{"entry":[{},"proceed to step 1506 in this figure. Else, proceed to step"]},{"entry":[{},"1508 in this figure."]},{"entry":["1506 - Perform a key check","If the key check algorithm identifier in the rule section"]},{"entry":[{},"selected by the rule ID in FIG. 6, step 612, indicates"]},{"entry":[{},"that an encryption of 8 bytes of zeroes is to be performed"]},{"entry":[{},"with the cleartext key from step 1502 of this figure, then"]},{"entry":[{},"execute the following actions:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"A.","If the source key is single length, then output only 3"]},{"entry":[{},{},"bytes of the resultant encryption in FIG. 6, step 646,"]},{"entry":[{},{},"if the input key_check_length parameter value was set"]},{"entry":[{},{},"to 3;"]},{"entry":[{},"B.","Otherwise if the input key_check_length parameter"]},{"entry":[{},{},"value was set to a value between 4 and 8 inclusive,"]},{"entry":[{},{},"output only 4 bytes in FIG. 6, step 646. An input"]},{"entry":[{},{},"key_check_length parameter value of 0, 1, or 2 will"]},{"entry":[{},{},"result in an error due to insufficient length to hold the"]},{"entry":[{},{},"result, and the operation will be aborted."]},{"entry":[{},"C.","If the source key is double or triple length, then output"]},{"entry":[{},{},"the full 8 bytes of the resultant encryption in FIG. 6,"]},{"entry":[{},{},"step 646, provided that the input key_check_length"]},{"entry":[{},{},"parameter value is set to 8. Otherwise, abort the"]},{"entry":[{},{},"operation with an error due to insufficient length to"]},{"entry":[{},{},"hold the result."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"If the key check algorithm identifier in the rule section"]},{"entry":[{},"selected by the rule ID in FIG. 6, step 612, indicates that"]},{"entry":[{},"an MDC-2 hash of the cleartext key from step 1502 is to"]},{"entry":[{},"be performed, then"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"a)","Odd-parity adjust each byte of the cleartext key and"]},{"entry":[{},"b)","Execute the MDC2 hash algorithm on the odd-parity"]},{"entry":[{},{},"adjusted key without the use of padding, per the"]},{"entry":[{},{},"MDC-2 description in the CCA Basic Services Guide"]},{"entry":[{},{},"and Reference; Appendix 10. Return the 16-byte value"]},{"entry":[{},{},"in FIG. 6, step 646, provided that the input"]},{"entry":[{},{},"key_check_length parameter is set to 16. A length less"]},{"entry":[{},{},"than 16 will result in an error and the operation will be"]},{"entry":[{},{},"aborted."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1508 - Does an","If the Common Export Key Parameter subsection of the"]},{"entry":["output key variant exist?","rule section selected by the rule ID input parameter in"]},{"entry":[{},"FIG. 6, step 612, contains an output key variant, then"]},{"entry":[{},"proceed to step 1510. Else proceed to step 1512."]},{"entry":["1510 - Apply the","Exclusive-or the variant contained in the Common Export"]},{"entry":["output key variant","Key Parameter subsection of the rule section selected by"]},{"entry":[{},"the rule ID input parameter in FIG. 6, step 612, with the"]},{"entry":[{},"cleartext source key from step 1502 of this figure. If the"]},{"entry":[{},"output key variant length is greater than the source key"]},{"entry":[{},"length, then the leftmost bytes of the variant are used, up"]},{"entry":[{},"to key length. If the output key variant length is less than"]},{"entry":[{},"the length of the source key, then abort the operation with"]},{"entry":[{},"an error."]},{"entry":["1512 - Create an","If the rule section of the trusted block selected by the rule"]},{"entry":["RKX token for the","ID input parameter in FIG. 6, step 612, indicates that"]},{"entry":["symmetric encrypted","the symmetric encrypted output key format should be an"]},{"entry":["output key?","RKX token, proceed to step 1516. Else, proceed to step"]},{"entry":[{},"1514."]},{"entry":["1516 - Build an RKX token","Build an RKX token data structure consisting of the"]},{"entry":[{},"following parts:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"A.","An external key token type 0x02 and version number"]},{"entry":[{},{},"0x10 per Table 18;"]},{"entry":[{},"B.","The rule ID retrieved from the rule section selected in"]},{"entry":[{},{},"FIG. 6 step 612;"]},{"entry":[{},"C.","The sum of the key length in bytes retrieved from the"]},{"entry":[{},{},"source key token in step 1502 of this figure and the"]},{"entry":[{},{},"length of a confounder (8 bytes);"]},{"entry":[{},"D.","An 8 byte random number for the confounder;"]},{"entry":[{},"E.","And either an 8, 16, or 24 byte value that is either:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1)","The result of the exclusive-or operation between"]},{"entry":[{},{},"the cleartext source key from step 1502 and the"]},{"entry":[{},{},"output key variant from step 1510, or"]},{"entry":[{},"2)","The cleartext source key alone, from step 1502, in"]},{"entry":[{},{},"the event that no output key variant is present."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1520 - Encrypt","An ISO-16609 triple DES Cipher Block Chaining Mode"]},{"entry":["confounder and key","encryption of the confounder and key portion built in step"]},{"entry":[{},"1516, is performed using an initial vector set to zero."]},{"entry":["1524 - Compute","Compute the ISO-16609 triple DES Cipher Block"]},{"entry":["MAC over RKX token","Chaining Mode MAC over the RKX token between"]},{"entry":[{},"offsets 0 and 55 inclusive, and place the 8-byte MAC"]},{"entry":[{},"value into the RKX token at offset 56. Proceed to step"]},{"entry":[{},"1522."]},{"entry":["1514 - Encrypt key","Perform validity checks on the source key using the value"]},{"entry":["to be exported with","of the control vector (CV) in the Common Export Key"]},{"entry":["the transport key","Parameters subsection of the rule section selected in"]},{"entry":[{},"FIG. 6, step 612, and the source key's 8-byte, 16-byte, or"]},{"entry":[{},"24 byte value as follows:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"A.","If the CV Length in the Common Export Key"]},{"entry":[{},{},"Parameters subsection is 8 bytes and if the source key"]},{"entry":[{},{},"is 16 bytes in length, abort the operation with an error;"]},{"entry":[{},"B.","if the CV Length in the Common Export Key"]},{"entry":[{},{},"Parameters subsection is 16 bytes and if the source"]},{"entry":[{},{},"key is 16 bytes in length, and the CV contained in the"]},{"entry":[{},{},"Common Export Key Parameters subsection indicates"]},{"entry":[{},{},"that the source key should be a single length key, then"]},{"entry":[{},{},"abort the operation with an error;"]},{"entry":[{},"C.","if the CV Length in the Common Export Key"]},{"entry":[{},{},"Parameters subsection is 16 bytes and if the source"]},{"entry":[{},{},"key is 16 bytes in length with the two halves being"]},{"entry":[{},{},"equal, and the CV contained in the Common Export"]},{"entry":[{},{},"Key Parameters subsection indicates that the source"]},{"entry":[{},{},"key should have unique halves, then abort the"]},{"entry":[{},{},"operation with an error;"]},{"entry":[{},"D.","if the source key is triple length with all parts being"]},{"entry":[{},{},"unique, then the CV Length in the Common Export"]},{"entry":[{},{},"Key Parameters subsection must be either 0 or 16"]},{"entry":[{},{},"bytes. In the latter case the CV contained in the"]},{"entry":[{},{},"Common Export Key Parameters subsection must"]},{"entry":[{},{},"contain binary zeroes, otherwise the operation is"]},{"entry":[{},{},"aborted with an error."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Obtain the transporter key length and key parts from"]},{"entry":[{},"FIG. 10."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1)","If the transporter key is contained in an RKX token, its"]},{"entry":[{},{},"length must be either double or triple. A single length"]},{"entry":[{},{},"transporter key will result in an error and the operation"]},{"entry":[{},{},"will be aborted."]},{"entry":[{},"2)","If the transporter key is contained in a CCA token, its"]},{"entry":[{},{},"length must be double. A single or triple length"]},{"entry":[{},{},"transporter key from a CCA token will result in an"]},{"entry":[{},{},"error and the operation will be aborted."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Perform EDE encryption on each 8-byte quantity of the"]},{"entry":[{},"source key according to the EDE multiple encipherment"]},{"entry":[{},"procedure using a CV as specified in the CCA Basic"]},{"entry":[{},"services Guide and Reference: Appendix C."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"i.","The CV which will be used may be either the CV"]},{"entry":[{},{},"located in the Common Export Key Parameters"]},{"entry":[{},{},"subsection of the trusted block;"]},{"entry":[{},"ii.","or if the CV Length contained in the Common"]},{"entry":[{},{},"Export Key Parameters subsection is 0, then the"]},{"entry":[{},{},"source key's CV will be used."]},{"entry":[{},"iii.","If the source key's CV is to be used, and if the"]},{"entry":[{},{},"source key is an RKX token which by definition"]},{"entry":[{},{},"does not contain a CV, then the CV value to be"]},{"entry":[{},{},"used will be 16 bytes of binary zeroes."]},{"entry":[{},"iv.","If the source key's CV is to be used, and if the"]},{"entry":[{},{},"source key is a CCA token of single length, then"]},{"entry":[{},{},"the preferred embodiment does not allow a CV of"]},{"entry":[{},{},"zero value to be used. A source key of single length"]},{"entry":[{},{},"and zero value CV is checked for in FIG. 12, step"]},{"entry":[{},{},"1224 part B, as well as in FIG. 12, step 1226 part"]},{"entry":[{},{},"A."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Two methods of EDE multiple encipherment will be"]},{"entry":[{},"allowed depending upon the value of the CV:"]},{"entry":[{},"Method 1: The CV to be used is not all binary zeroes."]},{"entry":[{},"In this case, the source key can be either single or"]},{"entry":[{},"double length. A triple length source key may be"]},{"entry":[{},"exported with a CV containing all binary zeroes, but"]},{"entry":[{},"cannot be exported with a CV that is nonzero. When"]},{"entry":[{},"the CV to be used contains a nonzero value, the"]},{"entry":[{},"preferred embodiment requires that the transporter key"]},{"entry":[{},"be double length; however, it is possible that in future"]},{"entry":[{},"revisions of the invention, a triple length transporter"]},{"entry":[{},"key may be allowed. If the source key is either single"]},{"entry":[{},"or double length:"]},{"entry":[{},"then the left half of the CV is exclusive-OR'ed"]},{"entry":[{},"with the transporter key's left half, making Key1"]},{"entry":[{},"and Key3;"]},{"entry":[{},"and the left half of the CV is exclusive-OR'ed with"]},{"entry":[{},"the transporter key's right half, making Key2."]},{"entry":[{},"If the source key is double length:"]},{"entry":[{},"then the right half of the CV is exclusive-OR'ed"]},{"entry":[{},"with the transporter key's left half, making Key4"]},{"entry":[{},"and Key6;"]},{"entry":[{},"and the right half of the CV is exclusive-OR'ed"]},{"entry":[{},"with the transporter key's right half, making Key5."]},{"entry":[{},"If the source key is single length, then the EDE"]},{"entry":[{},"multiple encipherment procedure is performed on the"]},{"entry":[{},"source key with Key1, Key2, and Key3."]},{"entry":[{},"If the source key is double length; then an EDE"]},{"entry":[{},"multiple encipherment procedure is performed on the"]},{"entry":[{},"source key's left half with Key1, Key2, and Key3; and"]},{"entry":[{},"an EDE multiple encipherment procedure is"]},{"entry":[{},"performed on the source key's right half with Key4,"]},{"entry":[{},"Key5, and Key6."]},{"entry":[{},"Method 2: The CV to be used is all binary zeroes. In"]},{"entry":[{},"this case, the source key can be double length or triple"]},{"entry":[{},"length, not single. The transporter key may be either"]},{"entry":[{},"double length if contained in an RKX token or CCA"]},{"entry":[{},"token, or triple length if contained in an RKX token. If"]},{"entry":[{},"the source key is double length and the transporter key"]},{"entry":[{},"is double length:"]},{"entry":[{},"The transport key's left half will be used as Key1,"]},{"entry":[{},"Key3, Key4, and Key6."]},{"entry":[{},"The transport key's right half will be used as Key2"]},{"entry":[{},"and Key5."]},{"entry":[{},"The EDE multiple encipherment procedure is"]},{"entry":[{},"performed on the source key's left half with Key1,"]},{"entry":[{},"Key2, and Key3."]},{"entry":[{},"The EDE multiple encipherment procedure is"]},{"entry":[{},"performed on the source key's right half with"]},{"entry":[{},"Key4, Key5, and Key6."]},{"entry":[{},"If the source key is triple length and the transporter"]},{"entry":[{},"key is double length:"]},{"entry":[{},"The transporter key's left half will be used as"]},{"entry":[{},"Key1, Key3, Key4, and Key6."]},{"entry":[{},"The transporter key's right half will be used as"]},{"entry":[{},"Key2 and Key5."]},{"entry":[{},"The EDE multiple encipherment procedure is"]},{"entry":[{},"performed on the source key's first third with"]},{"entry":[{},"Key1, Key2, and Key3."]},{"entry":[{},"The EDE multiple encipherment procedure is"]},{"entry":[{},"performed on the source key's middle third with"]},{"entry":[{},"Key4, Key5, and Key6."]},{"entry":[{},"The EDE multiple encipherment procedure is"]},{"entry":[{},"performed on the source key's last third with Key1,"]},{"entry":[{},"Key2, and Key3."]},{"entry":[{},"If the source key is double length and the transport"]},{"entry":[{},"key is triple length:"]},{"entry":[{},"The transport key's first third will be used as Key1"]},{"entry":[{},"and Key4."]},{"entry":[{},"The transport key's middle third will be used as"]},{"entry":[{},"Key2 and Key5."]},{"entry":[{},"The transport key's last third will be used as Key3"]},{"entry":[{},"and Key6."]},{"entry":[{},"The EDE multiple encipherment procedure is"]},{"entry":[{},"performed on the source key's left half with Key1,"]},{"entry":[{},"Key2, and Key3."]},{"entry":[{},"The EDE multiple encipherment procedure is"]},{"entry":[{},"performed on the source key's right half with"]},{"entry":[{},"Key4, Key5, and Key6."]},{"entry":[{},"If the source key is triple length and the transporter"]},{"entry":[{},"key is triple length:"]},{"entry":[{},"The transport key's first third will be used as Key1"]},{"entry":[{},"and Key4."]},{"entry":[{},"The transport key's middle third will be used as"]},{"entry":[{},"Key2 and Key5."]},{"entry":[{},"The transport key's last third will be used as Key3"]},{"entry":[{},"and Key6."]},{"entry":[{},"The EDE multiple encipherment procedure is"]},{"entry":[{},"performed on the source key's first third with"]},{"entry":[{},"Key1, Key2, and Key3."]},{"entry":[{},"The EDE multiple encipherment procedure is"]},{"entry":[{},"performed on the source key's middle third with"]},{"entry":[{},"Key4, Key5, and Key6."]},{"entry":[{},"The EDE multiple encipherment procedure is"]},{"entry":[{},"performed on the source key's last third with Key1,"]},{"entry":[{},"Key2, and Key3."]},{"entry":["1518 - Build the","Build an external CCA token."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CCA external key token","A.","Set the CCA token's version number to 0."]},{"entry":[{},"B.","If the source key being exported is either double or"]},{"entry":[{},{},"triple length and the Common Export Key Parameters"]},{"entry":[{},{},"subsection of the Rule section selected in FIG. 6,"]},{"entry":[{},{},"step 612, contains a CV Length of 16 bytes and the"]},{"entry":[{},{},"CV value in this section is equal to 16 bytes of binary"]},{"entry":[{},{},"zeroes, then set the external token's version number to"]},{"entry":[{},{},"1."]},{"entry":[{},"C.","If the source key being exported is either double of"]},{"entry":[{},{},"triple length and the Common Export Key Parameters"]},{"entry":[{},{},"subsection of the Rule section selected in FIG. 6,"]},{"entry":[{},{},"step 612, contains a CV Length of 0 and the CV value"]},{"entry":[{},{},"in the source key is equal to 16 bytes of binary zeroes"]},{"entry":[{},{},"(or if the source key was an RKX token), then set the"]},{"entry":[{},{},"external token's version number to 1."]},{"entry":[{},"D.","Copy the CV contained in the Common Export Keys"]},{"entry":[{},{},"Parameters subsection to the CCA token's CV field if"]},{"entry":[{},{},"the CV Length in this subsection is nonzero;"]},{"entry":[{},{},"otherwise copy the CV contained in the source key to"]},{"entry":[{},{},"the CCA token's CV field."]},{"entry":[{},"E.","Calculate the Token Validation Value (TVV) and"]},{"entry":[{},{},"place it into the CCA token."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1522 - Produce","Using the trusted block rule section selected from FIG."]},{"entry":["asymmetric","6, step 612, determine whether asymmetric encrypted"]},{"entry":["encrypted output?","output is to be produced. If not, proceed to step 1528."]},{"entry":[{},"Else, proceed to step 1526."]},{"entry":["1526 - Encrypt the","Determine from the rule section selected from FIG. 6,"]},{"entry":["key to be exported","step 612, whether PKCS1.2 output or RSA-OAEP output"]},{"entry":["with the public key","format is desired."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["contained in the","A.","If RSA-OAEP output is specified in the rule section,"]},{"entry":["certificate",{},"then format the source key from step 5021 if no"]},{"entry":[{},{},"output key variant was used, or format the result of"]},{"entry":[{},{},"the source key exclusive-OR'ed with the output key"]},{"entry":[{},{},"variant from step 1510, into an OAEP encryption"]},{"entry":[{},{},"block according to the method described in the RSA"]},{"entry":[{},{},"DSI PKCS#1-v2.0 documentation for RSAES-OAEP."]},{"entry":[{},"B.","If PKCS1.2 output was specified in the rule section,"]},{"entry":[{},{},"then format the source key from step 1502 if no"]},{"entry":[{},{},"output key variant was used, or format the result of"]},{"entry":[{},{},"the source key exclusive-OR'ed with the output key"]},{"entry":[{},{},"variant from step 1510, into a PKCS 1.2 encryption"]},{"entry":[{},{},"block according to the method described in the RSA"]},{"entry":[{},{},"DSI PKCS #1 documentation for block type 2. In the"]},{"entry":[{},{},"RSA PKCS #1 v2.0 standard, RSA terminology"]},{"entry":[{},{},"describes this as the RSAES-PKCS1-v1_5 format."]},{"entry":"1528 - Return to caller."},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The following example of RKX usage takes the previously defined functions and illustrates how the function might be combined in an application to distribute a key to a remote device such as an ATM and keep a copy for local use. Some of the terminology used reflects typical terms used in ATM networks. The example illustrates a fairly complex real-world key distribution scenario, in which the following values are produced.\n\n","It takes seven steps to produce these keys using the RKX service. These steps use a combination of four rules that would be contained in a single trusted block. The rules are referred to as GENERATE, GENERATE, EXPORT, EXPORT, and EXPORT.","The GENERATE Rule section includes the following information:\n\n","The GENERATE Rule section includes the following information:\n\n","The EXPORT Rule section includes the following information:\n\n","The EXPORT Rule section includes the following information:\n\n","The EXPORT Rule section includes the following information:\n\n","The Digital Signature Verify service (DSV) is used to verify a digital signature by providing the digital signature, the public key, the hash formatting method, and the hash of the data to be validated. Digital signatures may be verified using public keys that are contained in trusted blocks regardless of whether the trusted block also contains rules to govern its use when generating or exporting keys with the RKX verb (API).","A keyword named \u201cTPK-ONLY\u201d, when provided as an input parameter to the DSV service, blocks the use of regular CCA RSA key tokens and only permit the use of public keys contained in trusted blocks to execute the digital signature verification. If the keyword TPK-ONLY (Trusted Public Key only) is present, the DSV service will abort with an error if the public key supplied in the PKA_public_key_identifier parameter is not a trusted block containing a trusted public key. This allows an application to have assurance that a sensitive signature verification operation can be limited to operation with trusted public keys.","Table 29 summarizes application programming interface used to carry out digital signature verification.",{"@attributes":{"id":"p-0204","num":"0471"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 29"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"rule_array_count","Input","Integer"]},{"entry":[{},"rule_array","Input","String"]},{"entry":[{},"PKA_public_key_identifier_length","Input","Integer"]},{"entry":[{},"PKA_public_key_identifier","Input","String"]},{"entry":[{},"hash_length","Input","Integer"]},{"entry":[{},"hash","Input","String"]},{"entry":[{},"signature_field_length","Input","Integer"]},{"entry":[{},"signature_field","Input","String"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"The elements of table 29 are as follows:","rule_array_count",{"@attributes":{"id":"p-0206","num":"0000"},"ul":{"@attributes":{"id":"ul0071","list-style":"none"},"li":{"@attributes":{"id":"ul0071-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0072","list-style":"none"},"li":["The rule_array_count parameter is a pointer to an integer variable containing the number of elements in the rule_array variable. The value must be zero, one, or two for this verb.\n\nrule_array\n","The rule_array parameter is a pointer to a string variable containing an array of keywords. The keywords are eight bytes in length, and must be left justified and padded on the right with space characters."]}}}},{"@attributes":{"id":"p-0207","num":"0475"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Keyword","Meaning"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Digital signature hash formatting method (one, optional, for RSA)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["X9.31","Format the hash according to the ANSI X9.31 standard and"]},{"entry":[{},"compare to the digital signature."]},{"entry":["PKCS-1.1","Format the hash as specified in the RSA Data Security, Inc.,"]},{"entry":[{},"Public Key Cryptography Standards #1 block type 01 and"]},{"entry":[{},"compare to the digital signature. The RSA PKCS #1"]},{"entry":[{},"standard refers to this as RSASSA-PKCS-v1_5 when"]},{"entry":[{},"you BER encode the hash as described under the second note"]},{"entry":[{},"to the hash parameter."]},{"entry":["ISO-9796","Format the hash according to the ISO 9796-1 standard and"]},{"entry":[{},"compare to the digital signature."]},{"entry":["PKCS-1.0","Format the hash as specified in the RSA Data Security, Inc.,"]},{"entry":[{},"Public Key Cryptography Standards #1 block type 00 and"]},{"entry":[{},"compare to the digital signature."]},{"entry":["ZERO-","The supplied hash value is placed in the low-order bit"]},{"entry":["PAD","positions of a bit-string of the same length as the modulus"]},{"entry":[{},"with all non-hash-value bit positions set to zero. After"]},{"entry":[{},"ciphering the supplied digital signature, the result is"]},{"entry":[{},"compared to the hash-extended bit string."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"PKA public key token type (optional)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["TPK-","The PKA_public_key_identifier must be a trusted block"]},{"entry":["ONLY","that contains two sections: (1) Trusted Block Information"]},{"entry":[{},"section which is required for all trusted blocks, and (2)"]},{"entry":[{},"Trusted Public Key section which contains the trusted public"]},{"entry":[{},"key and usage rules that indicate whether or not the trusted"]},{"entry":[{},"public key can be used in digital signature operations."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":"Notes:"},{"entry":"1. The hash for PKCS-1.1 and PKCS-1.0 should have been created using MD5 or SHA-1 algorithms."},{"entry":"2. The hash for ISO-9796 and ZERO-PAD can be obtained by any hashing method."}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul0073","list-style":"none"},"li":{"@attributes":{"id":"ul0073-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0074","list-style":"none"},"li":["The PKA_public_key_identifier_length parameter is a pointer to an integer variable containing the number of bytes of data in the PKA_public_key_identifier variable.\n\nPKA_public_key_identifier\n","The PKA_public_key_identifier parameter is a pointer to a string variable containing either a key label identifying a key-storage record of a registered public-key, a key label identifying a key-storage record of a Trusted Block, an RSA key token, or an internal Trusted Block key token.\n\nhash_length\n","The hash_length parameter is a pointer to an integer variable containing the number of bytes of data in the hash variable.\n\nhash\n","The hash parameter is a pointer to a string variable containing the hash information to be verified."]}}}},"Notes:\n\n",{"@attributes":{"id":"p-0209","num":"0487"},"figref":"FIG. 16","b":"1600"},{"@attributes":{"id":"p-0210","num":"0488"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 30"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Step number and",{}]},{"entry":["brief summary","Detailed description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1600 - Keyword","If the input keyword parameter is set to \u201cTPK-ONLY\u201d, proceed to step"]},{"entry":["set to \u201cTPK-","1604. Else, proceed to step 1620."]},{"entry":"ONLY\u201d?"},{"entry":["1604 - Validate the","See FIG. 7 - validate_block( ) for details. Verify that all these"]},{"entry":["trusted block","conditions are met:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"E.","No unknown sections have been built into the trusted block,"]},{"entry":[{},"F.","The trusted block token identifier is internal,"]},{"entry":[{},"G.","The Active flag is enabled,"]},{"entry":[{},"H.","Fields within the trusted block have valid lengths and valid values."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"If these conditions are not met, abort operation with an error (1618)."]},{"entry":["1606 - Recover","See FIG. 8 - decrypt_tb_mac_key( ) for details."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["trusted block MAC","D.","Decrypt the confounder and MAC key located in the Protection"]},{"entry":["key",{},"Information section of the trusted block under a variant of the PKA"]},{"entry":[{},{},"Master Key and using an IV of binary zeroes."]},{"entry":[{},"E.","The variant is the following hexadecimal string where each byte has"]},{"entry":[{},{},"even parity so that the parity of the XOR result of the PKA master"]},{"entry":[{},{},"key with the variant is not altered: C9 2E BB 35 D2 AA 56 D8-9C"]},{"entry":[{},{},"66 E4 12 2B E7 A0 A3-B4 55 FF E4 D7 E7 F6 41."]},{"entry":[{},"F.","Decryption is performed using triple DES CBC mode."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["1608 - Compute","See FIG. 9 - compute_tb_mac( ) for details."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["MAC value over","D.","Copy the trusted block to some temporary_block."]},{"entry":["the trusted block","E.","Fill in the following Protection Information section fields of the"]},{"entry":[{},{},"temporary block with binary zeroes: encrypted MAC key, ISO-"]},{"entry":[{},{},"16609 TDES CBC MAC value, MKVP (master key verification"]},{"entry":[{},{},"pattern)."]},{"entry":[{},"F.","Compute an ISO-16609 CBC mode TDES MAC over the entire"]},{"entry":[{},{},"temporary block contents using the recovered TDES MAC key and"]},{"entry":[{},{},"an IV of binary zeroes."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1610 - Computed","The computed MAC from step 1608 is compared to the MAC value"]},{"entry":["MAC = stored","contained in the trusted block Protection Information section."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["trusted block","C.","If equal, proceed to step 1612,"]},{"entry":["MAC?","D.","Else, abort operation with an error."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1612 - Verify the","This routine obtains the MDC4 hash of the current PKA master key and"]},{"entry":["MKVP in the","compares the result to the MKVP contained in the Protection Information"]},{"entry":["trusted block","section of the trusted block. If a mismatch occurs, the MDC4 hash of the"]},{"entry":[{},"old PKA master key is obtained and compared to the MKVP contained in"]},{"entry":[{},"the Protection Information section of the trusted block. If a mismatch still"]},{"entry":[{},"occurs, abort the operation with an error (1618)."]},{"entry":["1614 - Does trusted","If the trusted block does not contain a Trusted public Key section, abort"]},{"entry":["block contain a","the operation with an error. Else, proceed to step 1616."]},{"entry":"Trusted Public Key"},{"entry":"section?"},{"entry":["1616 - Verify","The Flags field in the Trusted Public Key section of the trusted block"]},{"entry":["Public Key's usage","must be set to indicate that the public key in this section may be used in"]},{"entry":["flags in the Trusted","digital signature operations. If not, then abort the operation with an error"]},{"entry":["Public Key section","(1618). Else, proceed to step 1620."]},{"entry":"of the trusted block"},{"entry":["1620 - Perform the","The digital signature operation is perform using either the public key"]},{"entry":["digital signature","within the Trusted Public Key section verified in step 8, or a public key"]},{"entry":["operation","supplied in the PKA_public_key_identifier when the keyword is not set"]},{"entry":[{},"to \u201cTPK-ONLY\u201d."]},{"entry":["1622 - DSV","The service is complete."]},{"entry":"complete"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The flow charts\/diagrams depicted herein are just examples. There may be many variations to these charts\/diagrams or the steps (or operations) described therein without departing from the spirit of the invention. For instance, the steps may be performed in a differing order, or steps may be added, deleted or modified. All of these variations are considered a part of the claimed invention.","As described above, the embodiments of the invention may be embodied in the form of computer-implemented processes and apparatuses for practicing those processes. Embodiments of the invention may also be embodied in the form of computer program code containing instructions embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other computer-readable storage medium, wherein, when the computer program code is loaded into and executed by a computer, the computer becomes an apparatus for practicing the invention. The present invention can also be embodied in the form of computer program code, for example, whether stored in a storage medium, loaded into and\/or executed by a computer, or transmitted over some transmission medium, such as over electrical wiring or cabling, through fiber optics, or via electromagnetic radiation, wherein, when the computer program code is loaded into and executed by a computer, the computer becomes an apparatus for practicing the invention. When implemented on a general-purpose microprocessor, the computer program code segments configure the microprocessor to create specific logic circuits.","While the preferred embodiment to the invention has been described, it will be understood that those skilled in the art, both now and in the future, may make various improvements and enhancements which fall within the scope of the claims which follow. These claims should be construed to maintain the proper protection for the invention first described."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The subject matter that is regarded as the invention is particularly pointed out and distinctly claimed in the claims at the conclusion of the specification. The foregoing and other objects, features, and advantages of the invention are apparent from the following detailed description taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0024","num":"0025"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0025","num":"0026"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0026","num":"0027"},"figref":"FIGS. 3A and 3B"},{"@attributes":{"id":"p-0027","num":"0028"},"figref":"FIGS. 4A and 4B"},{"@attributes":{"id":"p-0028","num":"0029"},"figref":"FIGS. 5A and 5B"},{"@attributes":{"id":"p-0029","num":"0030"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0030","num":"0031"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0031","num":"0032"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0032","num":"0033"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0033","num":"0034"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0034","num":"0035"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0035","num":"0036"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0036","num":"0037"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0037","num":"0038"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0038","num":"0039"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0039","num":"0040"},"figref":"FIG. 16"}]},"DETDESC":[{},{}]}
