---
title: Packed storage commands and storage command streams
abstract: A packed command can be received at a storage device. The packed command can include an indicator of a source data location in the storage device and an indicator of a destination data location in the storage device. In response to receiving the packed command, a storage map table in the storage device can be updated. Also, a storage processing guide can be sent to a storage device. The processing guide can include a stream indicator associating the processing guide with a storage command stream. A set of storage commands can also be sent to the storage device. One or more of the commands in the set can each include a stream indicator that matches the stream indicator in the processing guide and identifies the command with the stream.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08683145&OS=08683145&RS=08683145
owner: Microsoft Corporation
number: 08683145
owner_city: Redmond
owner_country: US
publication_date: 20091109
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Data storage commands often originate in applications that either make incorrect assumptions or are limited in their ability to make assumptions about the behavior or limitations of the underlying hardware and storage busses that hold the applications' data. These data storage commands are often decomposed into a series of hardware media commands that are interwoven with other hardware media commands over a period of time and passed to storage devices. As used herein, data storage commands are commands that request some operation on stored data. Examples of data storage commands include, but are not limited to, read commands, write commands, etc. A hardware media command is a type of data storage command that requests an operation on hardware storage media at either a source data location or a destination data location, but not both. Examples of hardware media commands include reading data from the media, writing data to the media, and finalizing data that has been written to the media. As an example of decomposition of a data storage command into hardware media commands, a copy storage operation may be decomposed into access hardware media commands that requests existing data from a source data location in a storage device, a write hardware media command that requests the storage device to write the data to a destination data location in the storage device, and another access hardware media command that requests the storage device to finalize the data written to the permanent media. Other related or unrelated hardware media commands may be interwoven between these three commands in ways that are unknown to the application and often unknown to the underlying operating system.","Whatever the advantages of previous storage tools and techniques, they have neither recognized the packed storage command and storage command stream tools and techniques described and claimed herein, nor the advantages produced by such tools and techniques.","In one embodiment, the tools and techniques can include receiving a packed command at a storage device. As used herein, a packed command is a command that indicates a data source data location and a data destination data location. The source and destination data locations may be expressed in different ways and may be translated between different namespaces in different levels of a computing system. For example, source data locations and destination data locations may be expressed in terms of directories and filenames, in terms of logical block addresses, in terms of physical block addresses, etc. The packed command may also indicate an operation to be performed on data between the source and destination data locations, or such an operation may be implied (e.g., from the context of the command or from default settings). For example, a packed copy command can request that data be copied from the source data location to the destination data location, a packed move command can request that data be moved from the source data location to the destination data location, and a packed soft link command can request that an additional storage map table entry link to the data. Other packed commands could also be used, such as packed compression commands, packed encryption commands, and packed RAID p and q calculation commands. In response to receiving the packed command at the storage device, a storage map table in the storage device can be updated. The term storage map table is used herein broadly to refer to any data structure that associates logical location addresses to physical media locations. In addition to storage map table updating, other operations may also be performed in response to the command. For example, these other operations could include reading stored data from the source data location, writing data to new physical locations, etc.","In another embodiment of the tools and techniques, a processing guide can be sent to a storage device. The processing guide can include a stream indicator associating the processing guide with a storage command stream. As used herein, a processing guide is a set of information, which requests that one or more storage commands be processed in a particular way. A stream is an identified set of one or more storage commands, which can be a subset of commands sent to a storage device. One or more of the commands in the set can include a stream indicator that matches the stream indicator in the processing guide and identifies the command with the stream. As used herein, one stream indicator matches another if the two stream indicators can be identified with each other (and with the associated stream) by comparing the indicators, and possibly by performing some calculations on the indicators, but without reference to the positions or order of the commands and guides as they are transmitted to the storage device.","As an example, a processing guide may be a flush processing guide that identifies a subset of storage commands sent to a storage device to be flushed to permanent storage. For example, the subset may be all pending write operations (e.g., simple write operations, packed commands including write operations, etc.) identified with one or more streams.","This Summary is provided to introduce a selection of concepts in a simplified form. The concepts are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter. Similarly, the invention is not limited to implementations that address the particular techniques, tools, environments, disadvantages, or advantages discussed in the Background, the Detailed Description, or the attached drawings.","Embodiments described herein are directed to improved data storage techniques and tools. Such improvements may result from the use of various techniques and tools separately or in combination.","Such techniques and tools may include using packed storage commands that each indicate a data source data location, a data destination data location, and typically an operation to perform on the data (e.g., copy, move, soft link, etc.). This packing of what could have been multiple hardware media operations into a single command can decrease the overhead associated with sending multiple commands to a storage device (potentially including data to be stored), and receiving multiple responses (potentially including stored data). Instead of having multiple \u201croundtrips\u201d across a storage bus and other computing components, the packed command can be sent to the storage device, the device can perform the requested operation (which can include updating a storage map table), and a single response can be sent back from the storage device.","In addition to overhead for roundtrips to and from storage devices, there are risks associated with data modification operations. Such risks can result in errors that applications and even storage subsystem software often assume is not possible. Examples of such errors include torn writes (where a failure occurs when only part of a write has completed) and delayed write errors (where a failure occurs when a component has responded as if a write occurred, but the write is being delayed\u2014such as in a lazy write technique). The techniques and tools described herein can include identifying streams of storage commands sent to a storage device, and sending processing guides to control the way that one or more particular streams are processed. For example, an application or operating system can use processing guides and streams to dictate dependencies between storage commands in the streams, to dictate the order in which storage commands in a stream are processed, and\/or to otherwise dictate the timing of processing storage commands in a stream. By dictating dependencies, timing, and\/or ordering of commands some errors such as torn writes and delayed write errors may be avoided.","Accordingly, one or more substantial benefits can be realized from the tools and techniques described herein. For example, a packed command may decrease the number of direct memory access operations performed, which may or may not include transfer across a storage bus. Operation improvements may also come from lessening error handling needed when one of a series of simple commands fails, leaving a complex operation in an inconsistent state. By sending a packed command, the device can handle all or none of the operations requested by the packed command, so that even if the packed command fails, it can fail atomically. However, the subject matter defined in the appended claims is not necessarily limited to the benefits described herein. A particular implementation of the invention may provide all, some, or none of the benefits described herein. Although operations for the various techniques are described herein in a particular, sequential order for the sake of presentation, it should be understood that this manner of description encompasses rearrangements in the order of operations, unless a particular ordering is required. For example, operations described sequentially may in some cases be rearranged or performed concurrently. Techniques described herein with reference to flowcharts may be used with one or more of the systems or environments described herein and\/or with one or more other systems or environments. Moreover, for the sake of simplicity, flowcharts may not show the various ways in which particular techniques can be used in conjunction with other techniques.","I. Exemplary Computing Environment",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":"100"},"The computing environment () is not intended to suggest any limitation as to scope of use or functionality of the invention, as the present invention may be implemented in diverse general-purpose or special-purpose computing environments.","With reference to , the computing environment () includes at least one processing unit () and memory (). In , this most basic configuration () is included within a dashed line. The processing unit () executes computer-executable instructions and may be a real or a virtual processor. In a multi-processing system, multiple processing units execute computer-executable instructions to increase processing power. The memory () may be volatile memory (e.g., registers, cache, RAM), non-volatile memory (e.g., ROM, EEPROM, flash memory), or some combination of the two. The memory () stores software () implementing packed storage commands and storage command streams.","Although the various blocks of  are shown with lines for the sake of clarity, in reality, delineating various components is not so clear and, metaphorically, the lines of  and the other figures discussed below would more accurately be grey and fuzzy. For example, one may consider a presentation component such as a display device to be an I\/O component. Also, processors have memory. In addition, some input and output devices, such as network adapters, may also be considered communications connections. The inventors hereof recognize that such is the nature of the art and reiterate that the diagram of  is merely illustrative of an exemplary computing device that can be used in connection with one or more embodiments of the present invention. Distinction is not made between such categories as \u201cworkstation,\u201d \u201cserver,\u201d \u201claptop,\u201d \u201chandheld device,\u201d etc., as all are contemplated within the scope of  and reference to \u201ccomputer,\u201d \u201ccomputing environment,\u201d or \u201ccomputing device.\u201d","A computing environment () may have additional features. In , the computing environment () includes storage (), one or more input devices (), one or more output devices (), and one or more communication connections (). An interconnection mechanism (not shown) such as a bus, controller, or network interconnects the components of the computing environment (). Typically, operating system software (not shown) provides an operating environment for other software executing in the computing environment (), and coordinates activities of the components of the computing environment ().","The storage () may be removable or non-removable, and may include computer-readable storage media such as magnetic disks, magnetic tapes or cassettes, CD-ROMs, CD-RWs, DVDs, or any other medium which can be used to store information and which can be accessed within the computing environment (). The storage () stores instructions for the software ().","The input device(s) () may be a touch input device such as a keyboard, mouse, pen, or trackball; a voice input device; a scanning device; a network adapter (which may also facilitate communication connection(s) ()); a CD\/DVD reader; or another device that provides input to the computing environment (). The output device(s) () may be a display, printer, speaker, CD\/DVD-writer, network adapter, or another device that provides output from the computing environment ().","The communication connection(s) () enable communication over a communication medium to another computing entity. Thus, the computing environment () may operate in a networked environment using logical connections to one or more remote computing devices, such as a personal computer, a server, a router, a network PC, a peer device or another common network node. The communication medium conveys information such as data or computer-executable instructions or requests in a modulated data signal. A modulated data signal is a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media include wired or wireless techniques implemented with an electrical, optical, RF, infrared, acoustic, or other carrier.","The tools and techniques can be described in the general context of computer-readable media. Computer-readable media are any available media that can be accessed within a computing environment. By way of example, and not limitation, with the computing environment (), computer-readable media include memory (), storage (), and combinations of the above.","The tools and techniques can be described in the general context of computer-executable instructions, such as those included in program modules, being executed in a computing environment on a target real or virtual processor. Generally, program modules include routines, programs, libraries, objects, classes, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The functionality of the program modules may be combined or split between program modules as desired in various embodiments. Computer-executable instructions for program modules may be executed within a local or distributed computing environment. In a distributed computing environment, program modules may be located in both local and remote computer storage media.","For the sake of presentation, the detailed description uses terms like \u201cdetermine,\u201d \u201cchoose,\u201d \u201cadjust,\u201d and \u201coperate\u201d to describe computer operations in a computing environment. These and other similar terms are high-level abstractions for operations performed by a computer, and should not be confused with acts performed by a human being, unless performance of an act by a human being (such as a \u201cuser\u201d) is explicitly noted. The actual computer operations corresponding to these terms vary depending on the implementation.","II. Packed Storage Commands and Storage Command Streams System and Environment","An example of a suitable computing storage environment will now be discussed with reference to . The operation of the storage environment with packed storage commands and storage command streams will then be discussed.","A. Storage Environment",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 2","FIG. 2"],"b":["200","200","210"]},"The storage environment () can include some instructions (e.g., applications) executing in a user mode (), and others (e.g., a file system kernel) executing in a kernel mode (). A file system () can execute primarily in kernel mode, which can provide the file system () with access to resources to perform typical file system tasks. In a first logical storage environment () (which can be a storage volume associated with a physical backing store, as discussed below), such as a virtual environment or some other storage environment configured to store application information in a logical drive (labeled C: in ), a first application () can be running in user mode (). The first application () can perform file operations such as by making application programming interface function calls () to the file system (). A second application () can also be running in the first logical storage environment () in user mode (), and can perform file operations such as by making application programming interface function calls () to the file system (). Moreover, in a second logical storage environment (), a third application () can be running in user mode (), and can perform file operations such as by making application programming interface function calls () to the file system (). The function calls (, , and ) can include processing guides generated by the respective applications (, , and ), such as by making separate processing guide function calls or by specifying processing guides within the storage function calls. The function calls (, , and ) can be held in queues as they are passed out of the applications (, , and ), and to the file system ().","The file system () can receive the functions calls (, , and ), and create corresponding volume storage commands (). The volume storage commands () can include processing guides that are interspersed with, or part of, the commands (), such as processing guides specified in the function calls (, , and )). The file system (), volume manager, and\/or other component(s) may also create their own storage commands and processing guides () in addition to or instead of the processing guides and commands specified in the function calls (, , and ) from the applications (, , and ). In , commands and guides () from a particular application (, , or ) are illustrated with the same cross hatching as function calls from the same application. In creating the storage commands (), the file system () can translate targets from the function calls (, , and ) to storage volume byte offsets in the storage commands (). The file system () can include queues () for handling the storage commands and processing guides (). For example, the file system () may include a separate queue (or multiple queues) for each logical storage environment ( and ), as well as a separate file system cache () (or multiple caches) for each logical storage environment ( and ). Thus, the commands and guides () that came from calls ( and ) from the applications ( and ) in the first logical storage environment () can be interleaved and reordered together in one file system queue (). The commands and processing guides () that came from calls () from the third application () in the second logical storage environment () can be kept separate because it is the only application running in that logical storage environment (). However, the order of the commands and processing guides () that came from calls () from the third application () may be changed as the commands and processing guides are handled by the file system ().","A volume manager (not shown) can take storage volume offsets from the commands () and can calculate device addresses (sector addresses, logical block addresses, etc.) using corresponding partition offsets. The file system () and volume manager together can generate device commands and processing guides () at the request of application function calls (, , and ), and those device commands and processing guides () can include packed commands, as well as storage processing guides.","The volume manager and the file system (), including the queues () and caches (), can generally operate in standard ways, except that the volume manager and file system () can be configured to create and\/or translate packed commands and processing guides. Also, it may be desirable for the queues () and caches () to be configured to handle packed commands and processing guides in appropriate ways, such as by honoring processing guides such as write barriers (by not reordering commands in a stream around write barriers for that stream).","The device storage commands and processing guides () can be passed from the volume manager down to storage drivers (). Because both logical storage environments ( and ) are mapped to a single storage device in this example (i.e., a single storage device is operating as the physical backing for both logical storage environments or volumes ( and )), the storage commands and processing guides () from calls (, , and ) sent by all three applications (, , and ) can be interleaved and reordered by the storage drivers () in storage driver queues (). The storage drivers () and storage driver queues () can operate in standard ways, except that the storage drivers () and storage driver queues () can be configured to appropriately handle packed storage commands and storage processing guides in appropriate ways (e.g., by not reordering commands in a stream around write barriers for that stream).","The storage drivers () can pass the device storage commands and processing guides () to a storage device (), such as by passing the storage commands and processing guides () across a storage bus (not shown). The storage device () can operate as a physical backing store for the logical storage environments ( and ). However, in other configurations, a virtual storage device that includes multiple physical devices could operate as a physical backing store for a single logical storage environment, and the volume storage commands and processing guides () could be appropriately transformed as needed before passing the resulting device storage commands and processing guides () to the appropriate physical device(s).","The storage device () can include one or more queues, buffers, and\/or caches, such as a queue and internal cache (). The command queue and cache () can be controlled by a processor such as standard storage device controller (). The controller () can also execute firmware instructions to appropriately pass commands and guides through the queue and cache (), and to process the commands according to standard practices and according to the processing guides, as will be discussed more below. The controller () can also control the storage of information on storage media (), such as solid state media or magnetic storage media such as hard disk drives.","B. Packed Storage Commands","Referring to  and still to , packed storage commands () will be discussed. As illustrated in , a packed storage command () can include one or more data source indicators () and one or more data destination indicators (), as well as one or more operation parameters (), such as parameters that identify an operation (copy, move, soft link, etc.) to be performed on the data. Thus, any of multiple different data storage operations that can be described in terms of one or more data source data locations, one or more data destination data locations, and one or more parameters may be advantageously requested in a packed command, rather than a series of individual storage commands for the individual hardware media operations. For example, a standard application programming interface between one or more applications (, , and ) and the file system () can allow the applications (, , and ) to represent the desired source data location(s), destination data location(s), and parameter(s) in application programming interface calls to the file system (). Likewise, interfaces between other components in the storage environment () can allow the packed commands to be transmitted along with other commands and processing guides ( and ).","The use of packed commands may be particularly beneficial for solid state devices because solid state devices traditionally use storage map tables, and solid state devices typically do not write data in-place. In storage map tables, logical addresses, such as logical block addresses, are typically linked to physical addresses where data is stored in the storage media. For example, if data is to be modified, it is often written in a new storage area in the solid state storage media, and the storage map table is updated to link a logical address for the data to the physical address for the new storage area. Many other types of storage devices, such as hard drives, may also use storage map tables, which can make efficient use of packed commands. Because logical addresses used outside storage devices with storage map tables need not correspond directly to the physical addresses within the storage devices, part or all of many storage operations can be performed using storage map tables, without making multiple round trips with information across a storage bus.","For example, if a packed move command () is sent to the storage device (), the move operation can be performed by including an additional map table entry that links the destination indicator (such as a logical block address) with the physical address that was linked with the source indicator (such as a logical block address). Because the entire packed command can be sent to the storage device, no read or write data commands or read or write data operations within the storage device need to be performed. One example where such move operations can be used is with defragmenting a file. For example, a drive may be able to defragment its logical fragments of a file within its storage map table without performing data reads or writes\u2014by merely moving entries within the storage map table.","Another example of a beneficial type of packed command is a soft link command, where two entries in a storage map table can point to the same physical data location. If a packed soft link command () is sent to the storage device (), the soft link operation can be performed by including an additional storage map table entry that links the destination indicator (such as a logical block address) with the physical address that was originally linked with the source indicator (such as a logical block address), but without invalidating the original entry that linked the physical address with the source indicator. Such a storage map table update can be considered to create a soft link copy of the data which would have to be properly updated in a storage map table on a copy on write of either version of the data. As discussed above, writes typically are not done in-place on a solid state storage device, so the copy on write can be done with no more overhead than a single write operation\u2014by writing the modified data to a new physical location and linking the logical address for the modified data with the physical address for the new physical location.","Another example of a beneficial type of packed command is a copy command, which may be performed, for example, where data is copied across partitions in a partitioned drive. If a packed copy command () is sent to the storage device (), the copy operation can be performed by writing data to which a source indicator () is linked to a physical location with a new physical address, and including an additional storage map table entry that links the destination indicator () (such as a logical block address) with the new physical address. This can be done without passing the data across a storage bus if the physical addresses corresponding to the source indicator () and the destination indicator () are both in the same drive. Additionally, this would be no more expensive than a single write operation for the physical drive.","Other examples of packed commands that could be used include compression, encryption, and RAID p (and q) calculations. However, each of these would include some standard compression, encryption, and RAID calculations in addition to writing and storage map table update operations discussed above. Such calculations may be performed by some storage devices that are configured for such calculations, such as storage devices that are configured to perform encryption calculations.","C. Storage Command Streams","Referring now to , storage command streams will be discussed.  illustrates a set of storage commands () interleaved with guides similar to the storage commands and processing guides (, , and ) being sent to the storage device () of . As noted above, a stream is a subset within a set of issued storage commands, and processing guides can be used to request that storage commands in a stream be processed in a desired way. This can be done with corresponding stream indicators in the processing guides and the storage commands. Commands may include multiple stream indicators, so that the commands belong to multiple streams. Also, guides may include multiple stream indicators so that they apply to the processing of multiple streams. However, for the sake of simplicity and brevity,  will be discussed with reference to commands and guides each having either a single stream indicator or no stream indicators. The set of storage commands () can include a first stream that includes all the commands (, , , and ) in the set of issued commands () that include a first stream indicator (). For example, the indicator () may be included in command parameters that communicated the commands (, , , and ) to the storage device. Additionally, a processing guide () can include a stream indicator (), which indicates that the processing guide applies to commands (, , , and\/or ) in the first stream, if any, that meet its criteria. For example, the stream indicators may be a particular number corresponding to a particular stream. For example, if in the illustration of , the commands and guides arrived at a storage device in order from top to bottom, the guide () may apply to all commands (, , and ) that precede the guide () and are not yet completed, or to all commands that follow the guide () until some point, such as the appearance of another corresponding guide.","The set of issued commands () can also include a second stream that includes a subset of commands (, , and ) that each include a second stream indicator (). In addition, a pair of processing guides ( and ) can include second stream indicators (), indicating that those processing guides ( and ) are requesting specified processing of commands in the second stream that meet specified criteria. For example, one guide () may be a start guide and the other guide () may be an end guide, indicating that the guides apply to all commands ( and ) in the second stream between those two guides ( and ).","Some commands (, , , and ) may not include stream indicators, and may not be part of a stream, even though they are interleaved within the stream commands in the command set ().","Using the processing guides and corresponding stream indicators, a subset of issued storage commands can be identified and the dependencies and order limitations between just these storage commands can be specified. This can allow applications and storage subsystem software to operate on subsets of storage operations without having to fight the race conditions and windows of risk associated with keeping track of which operations are still outstanding to a storage device at any given time. This can be done without knowing ahead of time all the commands that will be in a particular stream, and without prohibiting commands outside the stream from being interleaved with commands that are part of the stream.","Streams and associated processing guides can be particularly beneficial for operations in solid state storage devices because of the use of storage map tables in such devices and because such devices typically do not update data in-place. As will be seen, streams and processing guides can be useful in implementing atomic transactions, targeted flush operations, and write barriers.","Atomic transactions (transactions that are finalized all together or not at all) can be performed by a solid state device with little effort, as long as the device knows which storage commands are requesting operations that are to be committed atomically before the commands arrive. The commands to be included in an atomic transaction can be identified to a storage device by bookending a slice of the stream with guides indicating the beginning of a series to be atomically committed, and another guide indicating the end of that series. Computing components at all levels of the computing system can keep the slice of the stream between the bookending guides so that the commands for the atomic transaction will still be between the bookending guides when they reach the storage device. For example, in , the first guide () for stream  can indicate the beginning of a series of commands ( and ) to be atomically committed, and the second guide () for stream  can indicate the end of that series. A storage device with a storage map table may performs writes (which could be sole write commands, packed copy commands where data is to be written, etc.) for those commands as it receives them, but wait to update the storage map table until the last write is made permanent. At that time, the storage device can update all relevant entries in the storage map table together, performing the atomic commit. If power is lost before the last of the write operations and the storage map table update occurs, then the new data may be lost, but the old data, which was never overwritten, can be continued to be used.","For targeted flush commands, pending write operations (including uncommitted data in the write cache or queue) that match this operator's indicator are made permanent (i.e., they are flushed to permanent storage). Because the targeted flush command only applies to pending writes in the identified stream (rather than all pending writes), the targeted flush can decrease the performance impact of flush operations, as existing flush commands that apply to all pending writes. For example, an application can request that only its data be flushed (rather than requesting that all data from all applications be flushed) by including stream indicators for a particular stream in all its storage commands, and then sending a targeted flush processing guide that indicates the same stream.","For write barrier guides, when the data in the stream is made permanent no write operations are reordered around the write barrier guides. This limitation on reordering can be honored by all the computing components that receive the write barrier guides, including file system components, device drivers, and storage devices themselves. Thus, for example, referring to , if the guide () for the first stream is a write barrier, then all the storage commands (, , and ) in the stream that precede the associated guide () are made permanent before any of the commands () that follow the guide (). An application can include a checkpoint after a write barrier. If the checkpoint is made permanent on disk, then the application can be assured that the storage commands up to the write barrier were processed and made permanent, even if a failure such as a power loss has occurred.","Streams can be particularly helpful when seeking to perform ACID (Atomic, Consistent, Isolated, and Durable) operations. For example, atomic transaction stream processing guides can help perform \u201catomic\u201d operations, write barrier stream processing guides can help perform \u201cconsistent\u201d operations, and targeted flush stream processing guides can help perform \u201cdurable\u201d operations. Other types of guides may also be helpful in specifying processing for streams of storage commands.","III. Packed Storage Commands and Storage Command Stream Techniques","Referring to , a packed storage command technique will be discussed. This technique and the others discussed below can be performed in computing and storage environments such as those discussed above, or in some other computing environment. In the technique, a packed command can be received () at a storage device, such as a solid state storage device. The packed command can include an indicator of a source data location in the storage device and an indicator of a destination data location in the storage device. For example, the source and destination indicators can each be an indicator of one or more logical block addresses. In response to receiving the packed command at the storage device, a storage map table in the storage device can be updated ().","In addition to the source and destination indicators, the packed command may also include an operation parameter. For example, the operation parameter may indicate a soft link operation, and the storage map table can be updated () to include multiple valid storage map table entries linking to the same set of data. As another example, the operation parameter may indicate a move operation, and the storage map table can be updated () by invalidating a link between the indicator of the source data location and a set of data, and committing a link between the indicator of the destination data location and the set of data. As yet another example, the operation parameter can indicate a copy operation, and the storage map table can be updated () by writing data from an existing storage location linked with the indicator of the source data location to a new storage location, and committing a new link between the indicator of the destination data location and the new storage location.","Referring to , a storage command stream technique will be discussed. In the technique, a set of storage commands can be sent () to a storage device. One or more of the commands in the set can each include a stream indicator that identifies the command with a stream. A processing guide can also be sent () to the storage device. The processing guide can include a stream indicator associating the processing guide with a storage command stream. Additionally, the stream indicator in each of the one or more commands can be matched () with the stream indicator in the guide at the storage device. Additionally, the one or more commands can be processed () according to the guide. The processing guide can be one of various guides, such as an atomic transaction processing guide, a targeted flush processing guide, or a write barrier processing guide. The set of storage commands can include one or more packed commands, which can each include an indicator of a source data location in the storage device and an indicator of a destination data location in the storage device.","Another processing guide can be sent to the storage device, and that processing guide can include a stream indicator associating the processing guide with the stream. Thus, multiple processing guides can be sent to dictate the processing of a single stream. For example, a targeted flush processing guide and a write barrier processing guide could both identify the same stream (although they may not apply to the processing of the same commands within that stream). Also, one or more commands in the set of commands can each include an additional stream indicator associating the command with a second stream. Another processing guide can be sent to the storage device, and that processing guide can include a stream indicator associating the processing guide with the second stream.","Referring now to , a targeted flush technique will be discussed. In the technique, a set of storage commands can be sent () to a storage device. A flush processing guide can also be sent () to the storage device, where the flush processing guide identifies a subset of the storage commands to be flushed to permanent storage. The flush processing guide and the storage commands in the subset can each include a stream indicator that identifies the stream. In response to the flush command, the technique can also include identifying () pending storage commands of the subset and flushing () the identified commands to permanent storage. Moreover, a confirmation that the targeted flush is complete can be sent () after flushing the identified commands to permanent storage. For example, the confirmation can be sent to an application that sent () the flush processing guide.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
