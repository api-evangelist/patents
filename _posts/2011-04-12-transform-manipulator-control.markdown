---
title: Transform manipulator control
abstract: A method, apparatus, system, article of manufacture, and computer readable storage device provides the ability to manipulate an object in a three-dimensional (3D) modeling system. A first object is displayed and then selected in the 3D modeling system. In response to the selecting, a transform manipulator is displayed displaying coincident with the first object. The transform manipulator includes a two-dimensional (2D) control plane object and grips located on the 2D control plane object. One of the grips is activated and used to manipulate the first object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08860726&OS=08860726&RS=08860726
owner: Autodesk, Inc.
number: 08860726
owner_city: San Rafael
owner_country: US
publication_date: 20110412
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","The present invention relates generally to manipulating graphic objects, and in particular, to a method, apparatus, and article of manufacture for manipulating graphic objects in a three-dimensional (3D) modeler using a two-dimensional (2D) graphic manipulator that is placed on a control plane of an object.","2. Description of the Related Art","Navigation within 3D scenes can be difficult, often disorienting the user by failing to provide an appropriate perspective or indication of the current view. When modifying an object, the user usually has to select a plane or vector of \u201cinteraction\u201d to modify and then use controllers (e.g., glyphs or grips) to adjust certain aspects of the object. Such controllers are often attached to the object at a particular point (referred to as a \u201cpivot point\u201d) and provide limited editing functionality. Such prior art restrictions and limitations may be better understood with an explanation of prior art object modification in a 3D modeling environment.","Most 3D modelers have adopted a traditional 3D transform paradigm that is based on an in-canvas manipulator commonly called a \u201ctransform gizmo.\u201d The different transform gizmos let users translate an object (e.g., move an object in space on a plane or on an axis), scale an object (e.g., proportionally or in an axis direction), and\/or rotate an object (e.g., around one of the axis). Using a prior art transform gizmo, a user can quickly choose one or two axes when translating a selection with the mouse. A user can choose an axis by placing the mouse over any axis of the in-canvas manipulator, and then drag the mouse to translate the selection along that axis. In addition, when moving or scaling an object, users can use other areas of the gizmo to perform transforms along any two axes simultaneously. However, regardless of the manipulation performed, all actions are based off of a single fixed point on the object (either a pivot point, point of movement, point of scaling, or point of rotation).","In certain applications, there are three separate gizmos that are each configured to perform different actions. For example,  illustrate three different gizmos for moving (), scaling (), and rotating () an object. To differentiate axis within a 2D representation of a 3D model, each axis may be assigned one of three colors: e.g., X-axis red, Y-axis green, and Z-axis blue. In other applications the different transform operations (Move\/Rotate\/Scale) may be merged into a unified gizmo where each handle type represents a transform operation: e.g., pyramid\/triangle for move, box for scale, sphere for rotation.  illustrates a single unified gizmo of the prior art. However, determining the viewing perspective and editing an object once one of the gizmos of  is displayed in a 3D modeler (i.e., on an object) can be confusing.","As illustrated in , prior art object manipulators utilize three (3) axes \u201ckabob\u201d style transform manipulators for move, scale, and rotate operations. Axial movement with such transform manipulators are explicit in that the user must indicate the movement by clicking\/selecting a specific part of the gizmo (e.g., the square, sphere, or pyramid). Further, such gizmos may limit manipulations to those transform operations that are pivot based. Also, transform operations using such prior art transform manipulators are not made \u201caware\u201d of other objects in a 3D scene. In addition to the above, the three (3) axes \u201ckabob\u201d style transform manipulators of  may have one or more of the following further shortcomings:","Unfamiliarity: While the traditional three (3) axes manipulator is fairly ubiquitous within 3D applications, its functions are quite dissimilar to the sort of manipulation paradigms that are common to 2D graphic interactions;","Graphically Dense: There is a lot of functionality clustered tightly together around a single point. Making interactions and behaviors more explicit adds to this density. Removing graphics associated with behavior descriptions makes the manipulator less discoverable.","Graphically Unsophisticated: Adding stylistic details only adds to the graphic density in addition to consuming more draw processing power on limited capacity\/capability processors (e.g., mobile solutions or thin client devices such as cellular phones, personal digital assistants, tablet computers [e.g., Apple\u2122 IPAD\u2122, Motorola\u2122 Xoom\u2122, etc.], and or any other type of portable computing device).","Entirely Pivot Based: The notion of a pivot (or \u201creference\u201d) point is powerful however it is also unfamiliar to graphic software users. In addition, it can be time consuming to manage the pivot point when every interaction is dependent upon it. Such a pivot or reference point specifies a point where the gizmo is attached to the object.","Lack of Flow: As illustrated in , separate and distinct gizmos or tools may be used to manipulate an object. The primary issue with separate tools is due to the number of times a user must switch back and forth when they are attempting to hone in on a particular shape and object placement.","In view of the above, the prior art fails to provide an easy-to-use object modification gizmo\/mechanism for a 3D modeler.","Embodiments of the invention provide a 2D graphic that is used as a transform manipulator. However, rather than utilizing a restrictive manipulator that is clustered around a single object pivot point, embodiments of the invention provide a manipulator that is spread out around an object on a plane that is automatically selected based on the user's dominant view direction. Further, a single gizmo\/transform manipulator is used to present most interactions that would be expected from a pivot-based triad object manipulator of the prior art but additionally supports object based transforms, implicit axial inferencing, and object matting functionality for easy position of objects with respect to each other.","Thus, embodiments of the invention provide a unique in-canvas manipulator that is closely linked to the concept of a control plane that is automatically driven by the view direction.","In the following description, reference is made to the accompanying drawings which form a part hereof, and which is shown, by way of illustration, several embodiments of the present invention. It is understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention.","Overview","Embodiments of the invention provide a 2D planar transform manipulator that enables the user to manipulate an object in a 3D model while orienting the planar transform in an intuitive manner based on the dominant view direction\/orbit.","Hardware Environment",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2","b":["200","202","202","202","204","204","204","206","202","214","216","228","202","232"]},"In one embodiment, the computer  operates by the general purpose processor A performing instructions defined by the computer program  under control of an operating system . The computer program  and\/or the operating system  may be stored in the memory  and may interface with the user and\/or other devices to accept input and commands and, based on such input and commands and the instructions defined by the computer program  and operating system  to provide output and results.","Output\/results may be presented on the display  or provided to another device for presentation or further processing or action. In one embodiment, the display  comprises a liquid crystal display (LCD) having a plurality of separately addressable liquid crystals. Each liquid crystal of the display  changes to an opaque or translucent state to form a part of the image on the display in response to the data or information generated by the processor  from the application of the instructions of the computer program  and\/or operating system  to the input and commands. The image may be provided through a graphical user interface (GUI) module A. Although the GUI module A is depicted as a separate module, the instructions performing the GUI functions can be resident or distributed in the operating system , the computer program , or implemented with special purpose memory and processors.","Some or all of the operations performed by the computer  according to the computer program  instructions may be implemented in a special purpose processor B. In this embodiment, the some or all of the computer program  instructions may be implemented via firmware instructions stored in a read only memory (ROM), a programmable read only memory (PROM) or flash memory within the special purpose processor B or in memory . The special purpose processor B may also be hardwired through circuit design to perform some or all of the operations to implement the present invention. Further, the special purpose processor B may be a hybrid processor, which includes dedicated circuitry for performing a subset of functions, and other circuits for performing more general functions such as responding to computer program instructions. In one embodiment, the special purpose processor is an application specific integrated circuit (ASIC).","The computer  may also implement a compiler  which allows an application program  written in a programming language such as COBOL, Pascal, C++, FORTRAN, or other language to be translated into processor  readable code. After completion, the application or computer program  accesses and manipulates data accepted from I\/O devices and stored in the memory  of the computer  using the relationships and logic that was generated using the compiler .","The computer  also optionally comprises an external communication device such as a modem, satellite link, Ethernet card, or other device for accepting input from and providing output to other computers .","In one embodiment, instructions implementing the operating system , the computer program , and the compiler  are tangibly embodied in a computer-readable medium, e.g., data storage device , which could include one or more fixed or removable data storage devices, such as a zip drive, floppy disc drive , hard drive, CD-ROM drive, tape drive, etc. Further, the operating system  and the computer program  are comprised of computer program instructions which, when accessed, read and executed by the computer , causes the computer  to perform the steps necessary to implement and\/or use the present invention or to load the program of instructions into a memory, thus creating a special purpose data structure causing the computer to operate as a specially programmed computer executing the method steps described herein. Computer program  and\/or operating instructions may also be tangibly embodied in memory  and\/or data communications devices , thereby making a computer program product or article of manufacture according to the invention. As such, the terms \u201carticle of manufacture,\u201d \u201cprogram storage device\u201d and \u201ccomputer program product\u201d as used herein are intended to encompass a computer program accessible from any computer readable device or media.","Of course, those skilled in the art will recognize that any combination of the above components, or any number of different components, peripherals, and other devices, may be used with the computer .","Although the term \u201cuser computer\u201d or \u201cclient computer\u201d is referred to herein, it is understood that a user computer  may include portable devices such as cell phones, notebook computers, pocket computers, or any other device with suitable processing, communication, and input\/output capability.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 3","FIG. 2"],"b":["300","302","202","306","302","202","306"]},"A network  such as the Internet connects clients  to server computers . Network  may utilize ethernet, coaxial cable, wireless communications, radio frequency (RF), etc. to connect and provide the communication between clients  and servers . Clients  may execute a client application or web browser and communicate with server computers  executing web servers . Such a web browser is typically a program such as MICROSOFT INTERNET EXPLORER\u2122, MOZILLA FIREFOX\u2122, OPERA\u2122, APPLE SAFARI\u2122, etc. Further, the software executing on clients  may be downloaded from server computer  to client computers  and installed as a plug in or ACTIVEX\u2122 control of a web browser. Accordingly, clients  may utilize ACTIVEX\u2122 components\/component object model (COM) or distributed COM (DCOM) components to provide a user interface on a display of client . The web server  is typically a program such as MICROSOFT'S INTERNET INFORMATION SERVER\u2122.","Web server  may host an Active Server Page (ASP) or Internet Server Application Programming Interface (ISAPI) application , which may be executing scripts. The scripts invoke objects that execute business logic (referred to as business objects). The business objects then manipulate data in database  through a database management system (DBMS) . Alternatively, database  may be part of or connected directly to client  instead of communicating\/obtaining the information from database  across network . When a developer encapsulates the business functionality into objects, the system may be referred to as a component object model (COM) system. Accordingly, the scripts executing on web server  (and\/or application ) invoke COM objects that implement the business logic. Further, server  may utilize MICROSOFT'S\u2122 Transaction Server (MTS) to access required data stored in database  via an interface such as ADO (Active Data Objects), OLE DB (Object Linking and Embedding DataBase), or ODBC (Open DataBase Connectivity).","Generally, these components - all comprise logic and\/or data that is embodied in\/or retrievable from device, medium, signal, or carrier, e.g., a data storage device, a data communications device, a remote computer or device coupled to the computer via a network or via another data communications device, etc. Moreover, this logic and\/or data, when read, executed, and\/or interpreted, results in the steps necessary to implement and\/or use the present invention being performed.","Although the term \u201cuser computer\u201d, \u201cclient computer\u201d, and\/or \u201cserver computer\u201d is referred to herein, it is understood that such computers  and  may include portable devices such as cell phones, notebook computers, pocket computers, or any other device with suitable processing, communication, and input\/output capability.","Of course, those skilled in the art will recognize that any combination of the above components, or any number of different components, peripherals, and other devices, may be used with computers  and .","Software Embodiments","Embodiments of the invention are implemented as a software application on a client  or server computer . The software application may implement a 3D modeling application in which objects may be graphically manipulated by a user via a cursor control device. In one or more embodiments of the invention, a transform manipulator control (referred to herein as a \u201cfaultless gizmo\u201d or \u201cmanipulator\u201d) provides the ability to manipulate\/edit an object in a unique manner.","The transform concept of embodiments of the invention is based around the idea of a 2D transform manipulation graphic that is placed on a \u201ccontrol plane\u201d that intersects with the center of the selected object(s). Such a premise serves to provide the user access to a number of transformation tools, most of which are constrained to the control plane. Use of the transform manipulator on a control plane as described herein gives the user quick access to manipulation along two (2) axes.","Constraining most interactions to a plane is based on a concept that users generally do not wish to manipulate an object at an angle that is acute to the camera view (e.g., move the object directly towards or away from the camera) as it does not provide enough visual feedback to understand the consequences of the operation.","Embodiments of the invention resolves such issues (as descried herein) in one or more of the following ways:\n\n","Control Plane","The transform manipulator provides a 3D transform manipulation graphic that is placed on a \u201ccontrol plane.\u201d The initial issue is to determine which plane to use as a control plane. Embodiments of the invention programmatically and automatically (i.e., without additional user input) establishes the control plane based on the active view direction. Thus, the plane or vector of \u201cinteraction\u201d is automatically selected based on the users dominant view direction, thereby eliminating the step of the user manually selecting a plane or vector of interaction. Such an automatic selection enables a more intuitive use of the transform manipulator.","The control plane may be system controlled (no explicit user facing controls). Which control plane appears is view dependant.  illustrates a sphere that represents the complete visual space used to determine the control plane in accordance with one or more embodiments of the invention. Different areas - of the sphere may be used to determine the current view of the modeling space. The sphere may rotate with the modeling space. Depending on the area - that is most present in the user's view, a particular control plane may be selected.  illustrates the active control planes that correspond to each area of the sphere in accordance with one or more embodiments of the invention. As illustrated, the modeling space may be viewed as a sphere divided into six equal regions A, B, A, B, A, and B. The system determines which control plane is active based on which region - the viewpoint is looking from.","The spheres of  may not be visible to the user but are used to determine the active control plane by the system without user input. Instead, the user may view the control plane that contains the transform manipulator. Accordingly, once a view direction\/perspective has been established, the system identifies an active control plane.","As an example, if the user elects to move the camera angle of a model to view an object from the side instead of the front, the sphere representing the visual space will rotate as well. In this regard, certain viewing angles may be preferable for performing object modifications. The user can rotate the visual space of the model to select such an optimal view for modifying an object. For example, if the user is attempting to move an object on the z-axis, a top-down view from above is not preferred because it is difficult to view the depth and to predict how much the object is being moved. Similarly, to perform an object translation\/transformation along the x-y plane, a top-down view would be preferred. Once the view space has been rotated (e.g., if the user orbits in the view space to a different camera\/view position), the system will examine the area - that is the most visible and select the active control plane based thereon.","Transform Manipulator",{"@attributes":{"id":"p-0059","num":"0063"},"figref":["FIG. 5","FIG. 5"],"b":["500","500"]},"Squares A-D may be used for non-proportional scaling. Moving a square  scales the object in two axes. The scale is based on the bounding box in that the scale is anchored at the opposite corner point to the corner being moved. Thus, if the user is moving square A, the object is scaled while the bounding box is anchored to square C.","Moving any of the lines A-D of the bounding box also enables the user to perform non-proportional scaling. Moving a line A-D scales in one (1) axis. The scale is based on the bounding box in that the scale is anchored at the opposite line to the line being moved (e.g., when scaling using line A, the scale is anchored to line C).","Moving the L-shaped manipulator  enables the user to perform a proportional scale such that the object is scaled equally in three (3) axes. Proportional scaling using L-shaped manipulator  is pivot based in that the scale is anchored at a pivot\/reference point.","Moving the short line  enables the user to perform a non-proportional scale in one (1) axis. The scale is anchored at the pivot\/reference point.","Points  and  are pivot\/reference points. Moving point  provides for a snap move operation where the object is moved with snap (e.g., to a grid, to other objects, to alignment boxes, to shape extensions, to guides, to shape intersections, to shape handles, to shape vertices, to connection points, etc.). Point  is the pivot point itself. Moving point  moves the pivot point with snap turned on (e.g., to various reference snap locations per the above examples). Once the pivot point  is moved, any operations that rely on the pivot point  will use the new location of the pivot point . For example, a rotation or scale may be performed around the pivot point .","Grip  is a rotate grip that enables the user to rotate the object around an axis  that runs perpendicular to the plane that intersects the pivot point .","Thus, the transform manipulator  consists of various grips and graphical interface components - that enable the user to modify an object. As described above, the manipulator  may be partially transparent or displayed in a manner that does not obscure the user's view.",{"@attributes":{"id":"p-0067","num":"0071"},"figref":"FIG. 6","b":["500","600"]},"The placement and manifestation of the transform manipulator\/faultless gizmo is based on both the active control plane and the bounding box of the selected object. In this regard, the transform manipulator may utilize the bounding box of the object that the gizmo is controlling and adds another ten-twenty percent (10-20%) of buffer space. Thus, as illustrated in , the gizmo  may be constructed of a bounding box for object  plus suffer buffer space to allow additional space for manipulating the object.","The manipulator  may be displayed when the user selects an object, or a face, vertex, or plane of an object. Depending on what part of an object is selected, certain aspects of the manipulator  may\/may not be displayed to a user. For example, if an operation utilizes a pivot operation, the pivot point  will be displayed. However, if a pivot operation is not being performed, the pivot point  may not be displayed. Similarly, once a glyph has been activated, a different icon may be displayed (e.g., as the cursor) that indicates what operation is being performed (e.g., an icon representative of a scale operation may be displayed as the cursor). In another embodiment, if a square scale  operation is activated, other glyphs on the manipulator  may be displayed. In yet another embodiment, if the user is moving an object along an axis , an additional glyph may be displayed indicating which axis (e.g., x, y, or z) direction the object is being transformed\/translated on. Thus, different operations may be enabled once a control plane\/transform manipulator  is activated. Each glyph - of the manipulator  has a specific icon representation that is displayed once the glyph has been activated or during a rollover\/hover of the cursor over the glyph.","As described above, the control plane may be based on the view direction. However, the selection of certain properties in a model may override such a view direction dependent control plane. For example, if a planar surface of an object is selected, the system may not use the view direction but instead may use the direction of the selected face (in combination with the view direction) to display the control plane. In this regard, the control plane may be placed on the selected planar face itself. In one or more embodiments, if a planar surface (e.g., a planar face of an object) is selected, scale functions of the manipulator  are separated from the rotate and move functions. When scaling a planar surface, the scale operation may always take place in the same plane as the planar face itself. However, rotate and move functions are likely associated with the control plane.",{"@attributes":{"id":"p-0071","num":"0075"},"figref":"FIG. 7A","b":["702","700","702","700","500","700","500","702","704","702","702","500","702"]},"For example, if the user orbits the viewing angle (e.g., rotates the camera view), the control plane and transform manipulator  may rotate to a different local coordinate space.  illustrate the rotation\/change in the viewing angle and a corresponding change in the local coordinate space used by the transform manipulator  in accordance with one or more embodiments of the invention. In , the transform manipulator  is displayed on the x-z plane and is coplanar with the selected planar face . However, if the view is rotated, the transform manipulator may rotate to the y-z plane () or x-y plane () (i.e., such that it is no longer coplanar with planar face ) while the planar face  remains selected. In other words, the transform manipulator  will rotate to allow the user to perform manipulations of the selected planar face  on different local coordinate systems. The control plane that the transform manipulator  is displayed on continues to be based on the view space (i.e., from the user's perspective), while restricting manipulations to the selected planar face .","Such a restriction of the transform manipulator  to the selected planar face  upon the selection of the planar face  may be distinguished from selecting the object in other ways (e.g., selection of the object's vertex, edge, or object selection glyph) after which the rotation\/orbit of the view would rotate the transform manipulator  in the world coordinate space of the object  in a manner that makes the most sense to the user (i.e., based on the view as described above).","Axial Implicit Inferencing","In one or more embodiments of the invention, the transform operation provides the ability to automatically select an axis that can be used to restrict the transform operation.  illustrates the manipulator  displayed on a face\/surface  while the user is moving cursor .",{"@attributes":{"id":"p-0076","num":"0080"},"figref":"FIG. 9A","b":["800","802","804","802"]},"When the user's cursor  enters a region (e.g., within fifteen [15] pixels of the Y-axis, on either side; thirty [30] pixel region width total), a Y-axis dashed line may be invoked visually. However, no changes to the behavior of the user's cursor may result.  illustrates the entry of such a region  and a resulting display of a dashed line  in accordance with one or more embodiments of the invention. Note that such regions are only displayed in the figures for purposes of illustration and are not actually displayed to the user.","As illustrated in , when the user's cursor  enters the middle region  (e.g., within five [5] pixels of the Y-axis, on either side: ten [10] pixel region width total), the cursor  may switch to the \u201caxis constrained move cursor\u201d  (also referred to as dragging mode). The \u201caxis-constrained move cursor\u201d  may have a different color move point (e.g., green) than before (e.g., pink), and the point of the cursor  may snap to the Y-axis . The cursor  may not change position\/snap. As long as the cursor remains in the middle region , the move point (one more operation) remains snapped to the axis .","In addition to the two axes that belong to the dominant plane, the user may also be able to move perpendicular to the control plane along a single axis. Similar to that displayed in , using the manipulator, the user can enter the transform\/move\/translate mode at which point the move cursor  appears. The user can begin a free move and the start point  (along with a perpendicular axis) may be displayed. When the user moves into the outside regions , a full axis (e.g., similar to dashed line ) may be displayed coincident with the perpendicular axis. Further, when the user enters the middle region , the cursor  may change (e.g., into cursor ) and the move point and operation may snap to the perpendicular axis. If the outside regions  and middle region  for two axes coincide, the perpendicular axis may take precedence for controlling cursor movement.","Object Mating","Embodiments of the invention may also use the control plane as a bounding box snap mechanism to mate objects together. This behavior assists with the positioning of objects with respect to each other. Further, such object mating as described herein may also be utilized with internal planes of an object.","The general idea is to detect when the control plane is touching another bounding box from a scene object, then move that controlled object inside the plane itself (so the object is not centered in the plane anymore). This condition is maintained as the user is dragging until the control plane itself touches the other side of the controlled object, at which time the system repositions the controlled object in the center of the plane thus relaxing the mating behavior.",{"@attributes":{"id":"p-0083","num":"0087"},"figref":["FIGS. 10A-10E","FIG. 10A"],"b":["1000","1002","1000","1002","1000","1002","1004","1000","1006"]},"The manipulator  moves with the object . As illustrated in , at a certain point during the translation\/move operation, the manipulator  bounding box\/plane \u201ctouches\u201d the bounding box of the other object . Embodiments of the invention detect the \u201ctouching\u201d and move the controlling object  to the right side of the manipulator  plane.",{"@attributes":{"id":"p-0085","num":"0089"},"figref":["FIG. 10C","FIGS. 10B and 10C"],"b":["1002","1000","1002","1000","1006","1002","1000","1002","1000","1000","1004","1002","1006","1000"]},{"@attributes":{"id":"p-0086","num":"0090"},"figref":"FIG. 10D","b":["1000","1002","1004","1006","1000","1002","1004"]},"When the left plane of the manipulator  reaches the left side of the controlled object , the system releases the matting and moves back the controlled object  to the center of the manipulator  plane. As illustrated in , the object  has moved and is recentered within the manipulator  plane. Thereafter, the translation operation can continue with the object  not matted to the previously detected bounding box of object .","Thus,  illustrate a translation operation using a manipulator  plane in accordance with one or more embodiments of the invention. The manipulator  plane controls an object as the user moves a cursor  to perform the translation operation. Once the manipulator  plane \u201ctouches\u201d (e.g., is within a threshold distance from) a bounding box for a second object , the controlled object  automatically (i.e., without additional user input) snaps or moves (within the manipulator  plane) adjacent to the detected bounding box for object . As the translation operation continues, the controlled object  remains matted to the detected bounding box of object  while the manipulator  plane continues to move. Once the far edge of the manipulator  plane moves within a threshold distance of the edge of object , object  is unmated (i.e., from object ) and resets\/moves to the center of manipulator  plane. The manipulator  plane can then continue moving with the object .","Logical Flow",{"@attributes":{"id":"p-0089","num":"0093"},"figref":"FIG. 11"},"At step , a first object is displayed, on a display device (e.g., a computer monitor), in the 3D modeling system.","At step , the first object is selected. Such selection may be performed using a cursor control device to select a planar face, vertex, or edge of the first object.","At step , in response to the selecting, a transform manipulator is displayed coincident with the first object. The transform manipulator includes a 2D control plane object and one or more grips located on the 2D control plane object. Such grips may be spread out around the 2D control plane object. The grips may include different categories of grips that may\/may not be simultaneously displayed including pivot based grips and object-based transform grips. In this regarded, the grips displayed on the 2D control plane object may include one or more of the following:","(a) a first non-proportional scale grip, that is bounding box based, for scaling the first object in two axes;","(b) a second non-proportional scale based grip, that is bounding box based, for scaling the first object in one axis;","(c) a proportional scale based grip, that is pivot based, for scaling the first object;","(d) a third non-proportional scale based grip, that is pivot based, for scaling the first object in one axis;","(e) a move grip, for translating the first object;","(f) a pivot point grip; and","(g) a rotation grip, that is pivot based, for rotating the first object.","Displaying the transform manipulator can be based on what makes the most sense from the viewing perspective. Thus, a viewpoint of the first object in the modeling system is determined. Based on the viewpoint, a currently active control plane is determined\/computed. The 2D control lane object is then displayed on the currently active control plane. However, if a planar face of the first object is selected, the 2D control plane object may be displayed on the same plane as that of the planar face. Further, if a vertex of the first object is selected, rather than displaying multiple grips, only single move grip (and no additional grips) may be displayed on the 2D control plane object.","At step , one of the one or more grips is activated (e.g., by selecting the grip, hovering over the grip, etc.).","At step , the activated grip is used to manipulate the first object. The activating of the grip may be used to perform specific types of unique operations (e.g., a translation\/move operation where two objects may be mated\/snap to each other). During a translation\/move operation, the first object may be centered within the 2D control plane object. As the move grip is moved\/translated, the 2D control plane object is moved\/translated. During such a translation of the control plane object, the first object is also moved while remaining centered in the 2D control plane object. When an edge of the 2D control plane object is within a first threshold distance (e.g., when it \u201ctouches\u201d a bounding box) of a second object, the first object is translated within the 2D control plane object such that an edge of the first object is aligned with and mated to an edge of the second object (or a bounding box of the second object). Further translation of the 2D control plane object can continue but while mated, the first object does not move (i.e., only the 2D control plane object continues to move). Such a translation\/movement of the 2D control plane object continues until a second edge of the control plane object is within a threshold distance of the opposite edge of the first object. When such a threshold distance has been reached, the first object is unmated from the second object edge\/bounding box, and resets such that the first object moves and is once again centered within the control plane object.","Conclusion","This concludes the description of the preferred embodiment of the invention. The following describes some alternative embodiments for accomplishing the present invention. For example, any type of computer, such as a mainframe, minicomputer, or personal computer, or computer configuration, such as a timesharing mainframe, local area network, or standalone personal computer, could be used with the present invention.","In summary, embodiments of the invention provide the ability to manipulate\/edit an object in a 3D modeling application using a unique transformation manipulator. Aspects\/properties of the transformation manipulator may include one or more of the following:\n\n","The foregoing description of the preferred embodiment of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIGS. 1A-1C","FIG. 1A","FIG. 1B","FIG. 1C"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 7A-7D"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 9A"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 9B"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 9C"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIGS. 10A-10E"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
