---
title: System and method for synchronizing execution of a test sequence
abstract: A system and method for synchronizing execution of multiple processes or threads executing to perform tests of one or more units under test. One or more synchronization steps may be included in a test executive sequence, in response to user input requesting inclusion of the synchronization steps. Each synchronization step may be configured to perform a synchronization operation, in response to user input specifying the synchronization operation. The test executive sequence may then be executed multiple times concurrently, e.g., by multiple threads or processes, and the one or more synchronization steps in the test executive sequence may coordinate the execution of the multiple threads or processes to test the unit(s) under test.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07093249&OS=07093249&RS=07093249
owner: National Instruments Corporation
number: 07093249
owner_city: Austin
owner_country: US
publication_date: 20010302
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","DESCRIPTION OF THE RELATED ART","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present invention relates to the field of synchronizing software execution, e.g., synchronizing threads or processes. One embodiment of the invention also relates to the field of computer-based testing of products or devices.","In the software arts, when working with multiple threads or processes, the problem of execution synchronization often arises. As used herein, execution synchronization may refer to any of various techniques enabling multiple threads or processes to execute together effectively. For example, one aspect of execution synchronization pertains to coordinating multiple threads or processes to share data or resources. For example, when one thread is writing to a file, other threads may need to be prevented from doing so at the same time in order to prevent data errors in the file. Also, threads may need to be prevented from reading from the file while it is being written to, in order to ensure that partial or incorrect data is not read.","Another aspect of execution synchronization pertains to defining and enforcing a series of operations that must be performed atomically. For example, consider a program where one thread updates a static data structure containing X and Y coordinates for items to be displayed by another thread. If the update thread alters the X coordinate for an item and is preempted before it can change the Y coordinate, the display thread may be scheduled before the Y coordinate is updated, resulting in the item being displayed at the wrong location.","Other aspects of execution synchronization include: forcing a group of threads to wait for each other until proceeding past a specified location; enabling threads to pass data to each other, e.g., so that a consumer thread can use data produced by a producer thread; notifying one or more threads when a particular event or condition occurs; defining and synchronizing a group of threads to execute as a batch; etc.","Various types of \u201csynchronization objects\u201d may be used in synchronizing execution among multiple threads and processes. For example, one type of synchronization object is a mutex. A mutex (short for mutual exclusion) may be used to guarantee exclusive access to a shared resource, typically by controlling access to the resource through \u201clock\u201d and \u201cunlock\u201d operations. For example, referring to the above example of the update and display threads, to solve this X,Y coordinate update problem, the update thread may lock (acquire) a mutex indicating that the coordinate data structure is in use before performing the update. The update thread may then unlock (release) the mutex after both coordinates have been processed. The display thread must wait for the mutex to be unlocked before updating the display. This technique of waiting for a mutex is often called \u201cblocking\u201d on a mutex because the thread or process is blocked and cannot continue until the mutex is released. Other types of synchronization objects known in the prior art include semaphores and queues.","Programmers often find it difficult to properly implement execution synchronization using synchronization objects. One reason for this is that in the prior art, program instructions for performing execution synchronization are defined by the programmer at the code-level, using either user-defined or operating system-provided synchronization objects. Thus, in the prior art, the programmer is entirely responsible for coding and managing execution synchronization. This responsibility includes: properly releasing synchronization objects; defining and implementing timeout behavior when waiting to acquire a synchronization object; etc. In a complex application, this can require a significant amount of detailed work on the part of the programmer and can be difficult to accomplish.","One common synchronization problem which often occurs when multiple processes or threads execute concurrently is the problem of \u201cdeadlock\u201d, which can result in an application stalling or freezing. For example, a common scenario is for a thread A to block and wait until a thread B does some work. If thread A owns some resource which thread B requires, then the system comes to a halt because thread B cannot run until thread A releases the resource, but thread A is waiting for thread B to do something. Another deadlock scenario is for a thread to end up waiting for itself, e.g., by attempting to acquire a resource that the thread already owns.","Thus, execution synchronization can be difficult to implement correctly and serious problems can arise when not implemented correctly. Therefore, an improved system and method for synchronizing execution of software activities (i.e., processes or threads) is desired. It would be desirable for the improved system and method to simplify the task of implementing execution synchronization for an application. In particular, it would be desirable to abstract this task above the code-level, so that the programmer can work at a more intuitive level, e.g., using a graphical user interface (GUI). It would also be desirable to automate certain commonly performed aspects of managing execution synchronization. For example, it may be desirable to enable the programmer to specify via a GUI that a thread should automatically release a synchronization object when the thread ends execution. As another example, it may be desirable to enable the programmer to easily specify the timeout behavior for a synchronization operation via a GUI.","Execution synchronization is a common problem in many types of systems and software environments. One class of systems which has heretofore suffered from a lack of ability to manage execution synchronization is the class of computer-based \u201ctest executive\u201d systems. In modem testing environments, software referred to as test executive software may be used to control or perform tests. The test executive typically allows the user to organize and execute a sequence of test modules, e.g., via a graphical user interface. For example, a test sequence may comprise a series of steps, wherein each step references a test module, and wherein each test module is executable to perform and\/or control a test of one or more units under test (UUTs). Each step may have a parameter or property configuration that affects execution of the step. Test step parameters or properties may affect or control a wide variety of test aspects, such as whether data-logging is enabled for the test step, whether the step is executed in a loop, etc., as well as product-specific test aspects.","Thus, when executed, test modules corresponding to the steps in the test sequence may be operable to perform a desired sequence of tests on the unit under test. For example, various test modules may interact with instruments that measure and\/or control the unit under test. For example, in a manufacturing environment, test executive software may be used to test manufactured products or devices, e.g., by executing various test modules that interact with instruments that measure and\/or control the products.","Thus, test executive software operates as the control center for an automated test system. More specifically, the test executive allows the user to create, configure, and\/or control test sequence execution for various test applications, such as production and manufacturing test applications. Test executive software typically includes various features, such as test sequencing based on pass\/fail results, logging of test results, and report generation, among others.","The following comprises a glossary of test executive nomenclature used herein:","Code Module\u2014A program module, such as a Windows Dynamic Link Library (.dll), Java class file, LabVIEW VI (.vi), etc., that contains one or more functions that perform a specific test or other action.","Test Module\u2014A code module that performs a test.","Step\u2014Any action, such as calling a test module or step module to perform a specific test, that the user can include within a sequence of other actions.","Step Module\u2014The code module that a step calls.","Sequence\u2014A series of steps that the user specifies for execution in a particular order. Whether and when a step is executed can depend on the results of previous steps.","Subsequence\u2014A sequence that another sequence calls. The user specifies a subsequence call as a step in the calling sequence.","Sequence File\u2014A file that contains the definition of one or more sequences.","Sequence Editor\u2014A program that provides a graphical user interface for creating, editing, and debugging sequences.","Run-time Operator Interface\u2014A program that provides a graphical user interface for executing sequences on a production station. A sequence editor and run-time operator interface can be separate application programs or different aspects of the same program.","Test Executive Engine\u2014A module or set of modules that provide an API for creating, editing, executing, and debugging sequences. A sequence editor or run-time execution operator interface uses the services of a test executive engine.","Application Development Environment (ADE)\u2014A programming environment such as LabVIEW, LabWindows\/CVI, or Microsoft Visual C++, in which the user can create test modules and run-time operator interfaces.","Unit Under Test (UUT)\u2014A device or component that is being tested; may include software and\/or hardware elements.","In the prior art, test executive software has not provided users with the ability to manage execution synchronization. For example, it would be desirable to enable test executive users to use various synchronization objects. In particular, it may be desirable to enable test executive users to insert various types of \u201csynchronization steps\u201d into a test sequence and configure the steps, so that execution synchronization for a test sequence can be defined and managed at a high level.","One embodiment of the present invention comprises a system and method for synchronizing software execution in a computer system. Synchronizing software execution may comprise synchronizing the execution of threads and\/or processes executing in the computer system. The threads or processes may be synchronized through the use of various types of synchronization objects. In various embodiments, various types of synchronization objects may be supported, such as: mutex synchronization objects, semaphore synchronization objects, rendezvous synchronization objects, queue synchronization objects, notification synchronization objects, and batch synchronization objects. These types of synchronization objects are described in detail below.","In one embodiment of the method, user input indicating a desire to specify a synchronization object operation may be received. This user input may specify a particular type of synchronization object on which to perform the operation. For example, the user may select a \u201cConfigure Mutex\u201d menu item. A graphical user interface, e.g., a dialog box or window, may be displayed in response to the user input indicating the desire to specify a synchronization object operation. The graphical user interface may be useable to specify a plurality of synchronization object operations, e.g., a plurality of operations that are specific to a specified type of synchronization object. For example, for a mutex synchronization object, the plurality of operations may comprise a \u201ccreate\u201d operation for creating a new mutex synchronization object; a \u201clock\u201d operation for locking an existing mutex synchronization object; an \u201cunlock\u201d operation for unlocking an existing mutex synchronization object; a \u201cget status\u201d operation for obtaining information regarding a mutex synchronization object; etc. As another example, for a queue synchronization object, the plurality of operations may comprise a \u201ccreate\u201d operation for creating a new queue synchronization object; an \u201cenqueue\u201d operation for adding an element to the queue; a \u201cdequeue\u201d operation for removing an element from the queue; a \u201cflush\u201d operation to flush the queue; a \u201cget status\u201d operation for obtaining information regarding the queue synchronization object; etc.","The graphical user interface may enable the user to select a desired operation to perform on a synchronization object. User input specifying a first synchronization object operation may be received. Depending on which operation is chosen, the user may also specify additional configuration information for the operation. For example, for a mutex lock operation, the user may specify a name of a mutex synchronization object to lock, a desired lifetime for the lock, a timeout value, etc. Exemplary dialog boxes for various types of synchronization object operations are described below.","In response to the specified synchronization object operation, program instructions that are executable to perform the synchronization object operation may be programmatically created. These program instructions may subsequently be executed to perform the specified synchronization object operation. In various embodiments, the steps of creating and executing the program instructions may be performed in any of various ways. These steps may depend on the type of software implementing the method or the context in which the software is used. For example, in one embodiment, an application development environment may implement the method. In this embodiment, the application development environment may provide tools, e.g., dialog boxes such as described above, for simplifying the task of writing program code to perform execution synchronization for a multi-threaded application under development. Thus, in this example, creating the program instructions may comprise automatically including one or more lines of code, e.g., function or method calls, in the user's program, wherein the included code is operable to perform the specified synchronization object. Executing the program instructions may comprise executing the instructions that are created when the included source code is compiled or interpreted.","Any of various other types of software may also implement embodiments of the method. For example, in another embodiment, the method may be implemented in a test executive software application. The method may be employed to enable the user to specify execution synchronization behavior for multiple processes or threads executing to perform tests of one or more units under test.","As described above, test executive software may enable the user to create a test sequence to test a unit under test, wherein the test sequence comprises a plurality of steps. In one embodiment, one or more synchronization steps may be included in the test sequence, in response to user input requesting inclusion of the synchronization steps. Each synchronization step may be configured to perform a synchronization operation, in response to user input specifying the synchronization operation. For example, the user input may be received via a graphical user interface for configuring the synchronization step, similarly as described above. In one embodiment, there may be multiple synchronization step types available for inclusion in a test sequence, wherein each synchronization step type corresponds to a particular type of synchronization object, such as a mutex synchronization object, a semaphore synchronization object, a rendezvous synchronization object, a queue synchronization object, a notification synchronization object, a batch synchronization object, etc. Thus, the synchronization operation specified for a synchronization step may be an operation specific to a particular type of synchronization object. One embodiment of a set of synchronization step types that may be included in a test sequence and their associated synchronization operations is described.","Configuring a synchronization step to perform a synchronization operation may comprise associating program instructions with the synchronization step, such that the program instructions are executable to perform the specified synchronization operation. User input specifying configuration information for each synchronization operation may be received, such as a name of a synchronization object on which to perform the operation or a timeout value for the operation. The configuration information may be used in associating the appropriate program instructions with the synchronization steps.","The test sequence may then be executed, wherein executing the test sequence comprises executing the one or more synchronization steps, i.e., executing the program instructions associated with the one or more synchronization steps in order to perform the specified synchronization operations. The test sequence may be executed multiple times concurrently, e.g., by multiple threads or processes, and the one or more synchronization steps in the test sequence may coordinate the execution of the multiple threads or processes to test a unit under test, according to the synchronization operations specified by the user.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and are herein described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.","Incorporation by Reference","The following references are hereby incorporated by reference in their entirety as though fully and completely set forth herein.","U.S. Pat. No. 6,401,220 titled \u201cTest Executive System and Method Including Step Types for Improved Configurability,\u201d issued Jun. 4, 2002.","FIG. \u2014Instrumentation System",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","102","102","102","150","102"]},"The one or more instruments may include a GPIB instrument  and associated GPIB interface card , a data acquisition board  and associated signal conditioning circuitry , a VXI instrument , a PXI instrument , a video device  and associated image acquisition card , a motion control device  and associated motion control interface card , and\/or one or more computer based instrument cards , among other types of devices.","The GPIB instrument  is coupled to the computer  via a GPIB interface card  provided by the computer . In a similar manner, the video device  is coupled to the computer  via the image acquisition card , and the motion control device  is coupled to the computer  through the motion control interface card . The data acquisition board  is coupled to the computer , and optionally interfaces through signal conditioning circuitry  to the UUT. The signal conditioning circuitry  preferably comprises an SCXI (Signal Conditioning eXtensions for Instrumentation) chassis comprising one or more SCXI modules .","The GPIB card , the image acquisition card , the motion control interface card , and the DAQ card  are typically plugged in to an I\/O slot in the computer , such as a PCI bus slot, a PC Card slot, or an ISA, EISA or MicroChannel bus slot provided by the computer . However, these cards , ,  and  are shown external to computer  for illustrative purposes. The cards , ,  and  may also be implemented as external devices coupled to the computer , such as through a serial bus.","The VXI chassis or instrument  is coupled to the computer  via a serial bus, MXI bus, or other serial or parallel bus provided by the computer . The computer  preferably includes VXI interface logic, such as a VXI, MXI or GPIB interface card (not shown), which interfaces to the VXI chassis . The PXI chassis or instrument is preferably coupled to the computer  through the computer's PCI bus.","A serial instrument (not shown) may also be coupled to the computer  through a serial port, such as an RS-232 port, USB (Universal Serial bus) or IEEE 1394 or 1394.2 bus, provided by the computer . In typical instrumentation control systems an instrument will not be present of each interface type, and in fact many systems may only have one or more instruments of a single interface type, such as only GPIB instruments.","The instruments are coupled to the unit under test (UUT) or process , or are coupled to receive field signals, typically generated by transducers. Other types of instruments or devices may be connected to the system, as desired.","The computer system  preferably includes a memory medium on which one or more computer programs according to the present invention are stored. The memory medium may store software operable to receive user input specifying synchronization object operations via a graphical user interface and operable to programmatically create program instructions in response to the user input, wherein the program instructions are executable to perform the specified synchronization object operations. In one embodiment, the memory medium may store test executive software for creating and\/or controlling an automated test system. The test executive software may allow the user to create, configure, and\/or control test sequence execution for various test applications, such as production and manufacturing test applications. As described below, the test executive software may provide support for including various synchronization steps in a test sequence, wherein the synchronization steps perform synchronization object operations specified by the user when the test sequence is executed.","The term \u201cmemory medium\u201d is intended to include an installation media, e.g., a CD-ROM, or floppy disks , a computer system memory such as DRAM, SRAM, EDO RAM, etc., or a non-volatile memory such as a magnetic medium, e.g., a hard drive, or optical storage. The host computer CPU executing code and data from the memory medium may comprise a means for receiving user input specifying synchronization object operations and creating program instructions executable to perform the specified synchronization object operations according to the methods described below.","FIG. \u2014Computer System Block Diagram",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 2","FIG. 1","FIG. 2","FIG. 1"]},"The computer  includes at least one central processing unit or CPU  which is coupled to a processor or host bus . The CPU  may be any of various types, including an \u00d786 processor, e.g., a Pentium class, a PowerPC processor, a CPU from the SPARC family of RISC processors, as well as others. Main memory  is coupled to the host bus  by means of memory controller .","The main memory  may store computer programs according to one embodiment of the present invention. The main memory  may also store operating system software as well as other software for operation of the computer system, as well known to those skilled in the art. The operation of computer programs stored in the main memory  is discussed in more detail below.","The host bus  is coupled to an expansion or input\/output bus  by means of a bus controller  or bus bridge logic. The expansion bus  is preferably the PCI (Peripheral Component Interconnect) expansion bus, although other bus types can be used. The expansion bus  includes slots for various devices such as the data acquisition board  (of ) and a GPIB interface card  which provides a GPIB bus interface to the GPIB instrument  (of ). The computer  further comprises a video display subsystem  and hard drive  coupled to the expansion bus .","As shown, a reconfigurable instrument  may also be connected to the computer . The reconfigurable instrument  may include configurable logic, such as a programmable logic device (PLD), e.g., an FPGA, or a processor and memory, which may execute a real time operating system. Program instructions may be downloaded and executed on the reconfigurable instrument . In various embodiments, the configurable logic may be comprised on an instrument or device connected to the computer through means other than an expansion slot, e.g., the instrument or device may be connected via an IEEE 1394 bus, USB, or other type of port. Also, the configurable logic may be comprised on a device such as the data acquisition board  or another device shown in .","FIG. \u2014Method for Synchronizing Software Execution",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 3","FIGS. 1 and 2"]},"In step , user input indicating a desire to specify a synchronization object operation may be received. This user input may specify a particular type of synchronization object on which to perform the operation. For example, the user may select a \u201cConfigure Mutex\u201d menu item.","In step , a graphical user interface, e.g., a dialog box or window, may be displayed in response to the user input indicating the desire to specify a synchronization object operation. The graphical user interface may be useable to specify a plurality of synchronization object operations, e.g., a plurality of operations that are specific to a type of synchronization object specified in step . For example, for a mutex synchronization object, the plurality of operations may comprise a \u201ccreate\u201d operation for creating a new mutex synchronization object; a \u201clock\u201d operation for locking an existing mutex synchronization object; an \u201cunlock\u201d operation for unlocking an existing mutex synchronization object; a \u201cget status\u201d operation for obtaining information regarding a mutex synchronization object; etc. As another example, for a queue synchronization object, the plurality of operations may comprise a \u201ccreate\u201d operation for creating a new queue synchronization object; an \u201cenqueue\u201d operation for adding an element to the queue; a \u201cdequeue\u201d operation for removing an element from the queue; a \u201cflush\u201d operation to flush the queue; a \u201cget status\u201d operation for obtaining information regarding the queue synchronization object; etc.","The graphical user interface may enable the user to select a desired operation to perform on a synchronization object. In step , user input specifying a first synchronization object operation may be received. Depending on which operation is chosen, the user may also specify additional configuration information for the operation. For example, for a mutex lock operation, the user may specify a name of a mutex synchronization object to lock, a desired lifetime for the lock, a timeout value, etc. Exemplary dialog boxes for various types of synchronization objects and synchronization object operations are described below.","In step , program instructions that are executable to perform the synchronization object operation specified in step  may be programmatically created. In step , these program instructions may be executed to perform the specified synchronization object operation. In various embodiments, steps  and  may be performed in any of various ways. These steps may depend on the type of software implementing the method or the context in which the software is used. For example, in one embodiment, an application development environment may implement the method of . In this embodiment, the application development environment may provide tools, e.g., dialog boxes such as described above, for simplifying the task of writing program code to perform execution synchronization for a multi-threaded application under development. Thus, in this example, step  may comprise automatically including one or more lines of source code, e.g., function or method calls, in the user's program, wherein the included source code is operable to perform the specified synchronization object operation. Step  may comprise executing the instructions that are created when the included source code is compiled or interpreted.","Any of various other types of software may also implement embodiments of the method of . For example, in another embodiment, the method may be implemented in a test executive software application. As described below, the method may be employed to enable the user to specify execution synchronization behavior for multiple processes or threads executing to perform tests of one or more units under test.","Test Executive Software Components",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 4","FIG. 4","FIG. 4","FIG. 4","FIG. 4"],"b":["202","202","202"]},"The test executive software of  also includes a sequence editor  for editing test sequences. The sequence editor  and the operator interface programs  interface to the test executive engine . One or more process models  couple to the test executive engine . The test executive engine  interfaces through an adapter interface  to one or more adapters . The adapters shown in  include the LabVIEW standard prototype adapter, the C\/CVI prototype adapter, the DLL flexible prototype adapter, and the sequence adapter. The LabVIEW standard prototype adapter interfaces to programs having a VI extension, i.e., LabVIEW graphical programs. The C\/CVI prototype adapter interfaces to programs having a .dll, .lib, .obj, or .c extension. The DLL flexible prototype adapter interfaces to programs having a .dll extension. The sequence adapter interfaces to sequence file programs.","As shown in , the test executive engine  plays a pivotal role in the test executive architecture. The test executive engine  runs test sequences. Sequences comprise steps that can call external code modules. By using module adapters  that have the standard adapter interface , the test executive engine  can load and execute different types of code modules. Test executive sequences can call subsequences through the common adapter interface . The test executive may use a special type of sequence called a process model to direct the high-level sequence flow. The test executive engine  exports an ActiveX Automation API used by the sequence editor  and run-time operator interfaces .","Test Executive Sequence Editor","The sequence editor  is an application program in which the user creates, modifies, and debugs sequences. The sequence editor  provides the user easy access to the test executive features, such as step types and process models. The sequence editor  may include debugging tools found in application development environments such as LabVIEW, LabWindows\/CVI, and Microsoft Visual C\/C++. These may include features such as breakpoints, single stepping, stepping into or over function calls, tracing, a variable display, and a watch window.","In one embodiment, in the sequence editor , the user may start multiple concurrent executions. Multiple instances of the same sequence can be executed, and different sequences can be executed at the same time. Each execution instance has its own execution window. In trace mode, the execution window displays the steps in the currently executing sequence. When execution is suspended, the execution window may displays the next step to execute and provide single-stepping options. As described below, the user may utilize the sequence editor  to interactively create a test sequence which includes various synchronization steps to coordinate multiple concurrent executions of the sequence.","Test Executive Engine","The test executive engine  may be used for creating, editing, executing, and debugging sequences. The test executive engine  may also provide an application programming interface (API) that enables another program to interface with the test executive engine  in order to perform these actions. In one embodiment, the test executive engine  comprises a set of DLLs that export an object-based or component-based API, preferably an ActiveX Automation API. The sequence editor  and run-time operator interfaces  may use the Test Executive Engine API (Engine API). In one embodiment, the Engine API may be called from any programming environment that supports access to ActiveX Automation servers. Thus, the Engine API may be called from test modules, including test modules that are written in LabVIEW and LabWindows\/CVI, Visual C++, etc.","FIG. \u2014Method for Synchronizing Multiple Concurrent Test Sequence Executions",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 5","b":"400"},"In step , the synchronization step may be configured to perform a synchronization operation, in response to user input specifying the synchronization operation, wherein said configuring the synchronization step to perform the synchronization operation comprises associating program instructions with the synchronization step, such that the program instructions are executable to perform the specified synchronization operation.","In step , the test sequence may be executed, wherein said executing the test sequence comprises executing the synchronization step, wherein said executing the synchronization step comprises executing the program instructions associated with the synchronization step to perform the specified synchronization operation.","The sections below describe one embodiment of a set of synchronization step types that may be included in a test sequence and their associated synchronization operations.","Synchronization Step Types","This section describes step types used to synchronize, pass data between, and perform other operations in multiple threads of an execution or multiple running executions in the same process. The user may configure these synchronization steps using dialog boxes. In the preferred embodiment, the user is not required to write code modules for synchronization steps.","Synchronization Objects","Synchronization step types may create and\/or control a particular type of synchronization object. In one embodiment, the types of synchronization objects include:\n\n","In one embodiment, the user does not have to create a batch. For example, within the TestStand test executive environment, the TestStand Batch process model does this for the user. The model uses Batch Specification steps to group TestSocket execution threads together so that the user can use Batch Synchronization steps to synchronize them in the user sequence file. If the user wants to create a synchronized section around a single step, the user can do so using the Synchronization tab of the Step Properties dialog box rather than by using explicit Batch Synchronization steps. For more information on the TestStand Batch process model, please refer to the section of the chapter of the TestStand product documentation, available from National Instruments Corporation.","Common Attributes of Synchronization Objects","Synchronization objects may share various common attributes. In one embodiment, the user may specify the following attributes in the step type configuration dialog box for each synchronization object:\n\n","In one embodiment, if the user specifies an empty string as the name for a synchronization object, then an unnamed synchronization object may be created that the user can access through an ActiveX reference variable. To associate an unnamed synchronization object with an ActiveX reference variable, the user may select an object lifetime of \u201cUsing ActiveX Reference\u201d. To access a synchronization object across threads without creating a reference in each thread, the user may store a reference to the synchronization object in an ActiveX reference variable and access the object from multiple threads using the variable.","In one embodiment, by default, a synchronization object is accessible only from the process in which the user creates it. However, in one embodiment the user can make a synchronization object accessible from other processes, such as multiple instances of an operator interface, by using an asterisk (*) as the first character in the name. In addition, the user can create a synchronization object on a specific machine by beginning the name with the machine name, such as \u201c\\\\machinename\\syncobjectname\u201d. The user can then use this name to access the synchronization object from any machine on the network. For example, the user may set up the TestStand test executive engine as a server for remote execution, e.g., through DCOM.\n\n","In one embodiment, the reference lifetime choices are \u201cSame as Thread\u201d, \u201cSame as Sequence\u201d, or \u201cUsing ActiveX Reference\u201d. If the user refers to the synchronization object only by name, then the user may set its reference lifetime to \u201cSame as Thread\u201d or \u201cSame as Sequence\u201d. This guarantees that the object lives as long as the thread or sequence in which the user creates the reference. If the user wants to control the lifetime of the object reference explicitly, or if the user wishes to refer to the object using an ActiveX reference variable, the user may choose the \u201cUsing ActiveX Reference\u201d option. The user can use the ActiveX reference to the object in place of its name when performing operations on the object. The user can also use the reference from other threads without performing a Create operation in each thread. An ActiveX reference releases its object when the user sets the variable equal to Nothing, reuses the variable to store a different reference, or the variable goes out of scope. When the last ActiveX reference to a synchronization object releases, the object may be automatically disposed of.","Some synchronization objects have an operation, such as Lock or Acquire, for which the user can specify a lifetime that determines the duration of the operation.\n\n","In the preferred embodiment, for each type of synchronization object, a corresponding step type is provided to create and\/or control objects of that synchronization object type. For the batch synchronization object, there are two step types, Batch Specification and Batch Synchronization. For other synchronization objects, the name of the step type is the same as the name of the synchronization object type the step type controls. Also, in various embodiments there may be additional synchronization step types. For example, the following two synchronization step types may be provided:\n\n","To use any synchronization step type, the user may insert a step of that type and may configure the step, e.g., using a dialog box or wizard. For example, the user may select a \u201cConfigure\u201d item from a context menu for the step to display a configuration dialog box. In the configuration dialog box, the user may select an operation for the step to perform. The user can then specify settings for the selected operation. Some operations may store output values to variables the user specifies. If the control for an output value is labeled as an optional output, the user can leave the control empty.","Configuring Synchronization Steps","The following sections describe the functionality, the configuration dialog box, and the custom properties of various synchronization step types.","Mutex Step Type","Mutex steps may be used to ensure that only one thread can access a particular resource or data item at a time. For example, if the value of a global variable is examined and updated from multiple threads or executions, the user can use a mutex to ensure that only one thread examines and updates the global variable at a time. If multiple threads are waiting to lock a mutex, they preferably do so in first in first out (FIFO) order as the mutex becomes available.","In one embodiment, a thread can lock the same mutex an unlimited number of times without unlocking it. To release the mutex, the thread may balance each lock operation with an unlock operation.","Create Operation","To use a mutex, the user may first create a reference to a new or existing mutex object. For example, to create a mutex reference, the user may insert a Mutex step. The user may then configure the Mutex step, e.g., by selecting a \u201cConfigure Mutex\u201d item from a context menu for the step.  illustrates an exemplary dialog box for configuring a Mutex step, in which a \u201cCreate\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Create operation:\n\n","To use a mutex to guarantee that only one thread executes certain steps at a time, the user may insert a Mutex step before the steps the user want to protect and configure the Mutex step to perform a Lock operation.  illustrates an exemplary dialog box for configuring a Mutex step, in which a \u201cLock\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Lock operation:\n\n","To release the lock before the lock lifetime expires, the user may insert a Mutex step and configure the Mutex step to perform an Early Unlock operation.  illustrates an exemplary dialog box for configuring a Mutex step, in which an \u201cEarly Unlock\u201d option has been selected for the operation. The following GUI control enables the user to configure the Early Unlock operation:\n\n","To obtain information about an existing mutex or to determine if a particular mutex exists, the user may insert a Mutex step and configure the Mutex step to perform a Get Status operation.  illustrates an exemplary dialog box for configuring a Mutex step, in which a \u201cGet Status\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Get Status operation:\n\n","The Mutex step type may define various Mutex step properties in addition to the common custom properties. For example,  illustrates the following Mutex step properties:\n\n","Semaphore steps may be used to limit concurrent access to a resource to a specific number of threads. A semaphore stores a numeric count and allows threads to increment (release) or decrement (acquire) the count as long as the count stays equal to or greater than zero. If a decrement would cause the count to go below zero, the thread attempting to decrement the count blocks until the count increases. When multiple threads are waiting to decrement a semaphore, the semaphore preferably unblocks the threads in first in first out (FIFO) order whenever another thread increments the semaphore count.","A semaphore with an initial count of one may behave like a mutex, with one exception. Like a mutex, a one-count semaphore may restrict access to a single thread at a time. However, in one embodiment, unlike a mutex, a thread cannot acquire a one-count semaphone multiple times without releasing it each time. In the preferred embodiment, when a thread attempts to acquire the semaphore a second time without releasing it, the count is zero and the thread blocks.","Create Operation","To use a semaphore, the user may first create a reference to a new or existing semaphore object. For example, to create a semaphore reference, the user may insert a Semaphore step. The user may then configure the Semaphore step, e.g., by selecting a \u201cConfigure Semaphore\u201d item from a context menu for the step.  illustrates an exemplary dialog box for configuring a Semaphore step, in which a \u201cCreate\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Create operation:\n\n","To access a resource that a semaphore protects, the user may perform an Acquire (decrement) operation on the semaphore.  illustrates an exemplary dialog box for configuring a Semaphore step, in which an \u201cAcquire (decrement)\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Acquire (decrement) operation:\n\n","The Release (increment) operation may be used when the user wants direct control over the count or if the user uses semaphores in a way that requires unmatched increments and decrements. If the user enables Auto Release in the Acquire operation, the semaphore should not be explicitly released using the Release (increment) operation.  illustrates an exemplary dialog box for configuring a Semaphore step, in which a \u201cRelease (increment)\u201d option has been selected for the operation. The following GUI control enables the user to configure the Release (increment) operation:\n\n","The Release (increment) operation immediately increments the count for the semaphore. If the user performs the Acquire operation with the Auto Release option enabled, the Release (increment) operation should not be used. Typically, the user uses the Release (increment) operation only on semaphores that require unmatched increments and decrements. For example, if the user creates a semaphore with an initial count of zero, all threads block when they perform an Acquire. The user can then perform Release (increment) operations to release the threads when desired.","Get Status Operation","To obtain information about the current state of the semaphore, the user may insert a Semaphore step and configure the Semaphore step to perform a Get Status operation.  illustrates an exemplary dialog box for configuring a Semaphore step, in which a \u201cGet Status\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Get Status operation:\n\n","The Semaphore step type may define various Semaphore step properties in addition to the common custom properties. For example,  illustrates the following Semaphore step properties:\n\n","A rendezvous synchronization object may be used to make threads wait for each other before they proceed past a location the user specifies. As each thread performs the rendezvous operation, the thread blocks. When the number of blocked threads reaches the total specified by the user when the user creates the rendezvous, the rendezvous unblocks all its waiting threads and the threads resume execution.","Create Operation",{"@attributes":{"id":"p-0102","num":"0162"},"figref":"FIG. 16","ul":{"@attributes":{"id":"ul0016","list-style":"none"},"li":["Rendezvous Name Expression\u2014This control may be used to specify a unique name for the synchronization object using a string literal or an expression that evaluates to a string. Synchronization object names are described in more detail above.","Already Exists\u2014This control may be used to specify a location to store a Boolean value that indicates whether the synchronization object already exists.","Rendezvous Reference Lifetime\u2014This control may be used to specify a lifetime for the reference to the synchronization object.","Number of Threads Per Rendezvous\u2014This control may be used to specify the number of threads that must rendezvous before the step permits the threads to continue execution past the rendezvous point. This value must be greater than zero. If the user knows that the rendezvous already exists, the user can leave this setting blank. If the user specifies a value different than the setting in the existing rendezvous, the step may report an error at run time.\n\nRendezvous Operation\n"]}},{"@attributes":{"id":"p-0103","num":"0167"},"figref":"FIG. 17","ul":{"@attributes":{"id":"ul0017","list-style":"none"},"li":["Rendezvous Name or Reference Expression\u2014This control may be used to specify the rendezvous on which to perform the operation. The user can specify the rendezvous by name or by an ActiveX reference received when the rendezvous is created with the Using ActiveX Reference lifetime option.","Timeout Enabled, Timeout Expression, Timeout Causes Run-Time Error\u2014These controls may be used to specify a timeout and timeout behavior when waiting to rendezvous with other threads. If a timeout occurs, the property Step.Result.TimeoutOccurred is set to True.\n\nGet Status Operation\n"]}},"To obtain information about the current state of the rendezvous, the user may use the Get Status operation.  illustrates an exemplary dialog box for configuring a Rendezvous step, in which a \u201cGet Status\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Get Status operation:\n\n","The Rendezvous step type may define various Rendezvous step properties in addition to the common custom properties. For example,  illustrates the following Rendezvous step properties:\n\n","Queue steps may be used to synchronize the production and consumption of data among threads. A queue has two primary operations, Enqueue and Dequeue. The Enqueue operation places a data item on the queue and the Dequeue operation removes an item from the queue. Normally, the Enqueue operation blocks when the queue is full and the Dequeue operation blocks when the queue is empty. If multiple threads block on the same queue operation, the threads preferably unblock in first in first out (FIFO) order.","Create Operation","To use a queue, the user may first create a reference to a new or existing queue object. For example, the user may insert a Queue step and then configure the Queue step, e.g., by selecting a \u201cConfigure Queue\u201d item from a context menu for the step.  illustrates an exemplary dialog box for configuring a Queue step, in which a \u201cCreate\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Create operation:\n\n","The Dequeue operation may be used to remove an element and\/or store the data from an element.  illustrates an exemplary dialog box for configuring a Queue step, in which a \u201cDequeue\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Dequeue operation:\n\n","The Flush operation may be used to empty the queue and optionally retrieve all its elements.  illustrates an exemplary dialog box for configuring a Queue step, in which a \u201cFlush\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Flush operation:\n\n","The Get Status operation may be usedto obtain information about the current state of a queue.  illustrates an exemplary dialog box for configuring a Queue step, in which a \u201cGet Status\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Get Status operation:\n\n","The Queue step type may define various Queue step properties in addition to the common custom properties. For example,  illustrates the following Queue step properties:\n\n","Notification steps may be used to notify one or more threads when a particular event or condition has been met. The user also can pass data to the notified threads.","Create Operation","To use a notification, the user may first create a reference to a new or existing notification object. For example, the user may insert a Notification step and then configure the Notification step, e.g., by selecting a \u201cConfigure Notification\u201d item from a context menu for the step.  illustrates an exemplary dialog box for configuring a Notification step, in which a \u201cCreate\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Create operation:\n\n","The Set operation may be used to notify one or more threads that an event has occurred or a condition has been met. When the notification is in a Set state, Wait operations on the notification succeed immediately.  illustrates an exemplary dialog box for configuring a Notification step, in which a \u201cSet\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Set operation:\n\n","The Clear operation may be used to clear the state of a notification so that subsequent Wait operations block until the next Set operation.  illustrates an exemplary dialog box for configuring a Notification step, in which a \u201cClear\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Clear operation:\n\n","The Pulse operation may be used to notify one or all currently waiting threads. This operation differs from the Set operation in that it notifies only threads that are already waiting when the Pulse operation occurs. Threads that wait on the notification after a Pulse operation occurs block until a Set or Pulse operation is performed on the notification again. A Pulse operation places the notification in a Cleared state, even if the notification was in a Set state before the Pulse operation.  illustrates an exemplary dialog box for configuring a Notification step, in which a \u201cPulse\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Pulse operation:\n\n","The Wait operation may be used to wait until a Set or Pulse operation is performed on the notification. If the notification is already in a Set state, the Wait operation completes immediately.  illustrates an exemplary dialog box for configuring a Notification step, in which a \u201cWait\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Wait operation:\n\n","The Get Status operation may be used to get information about the state of the notification object.  illustrates an exemplary dialog box for configuring a Notification step, in which a \u201cGet Status\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Get Status operation:\n\n","The Notification step type may define various Notification step properties in addition to the common custom properties. For example,  illustrates the following Notification step properties:\n\n","When the user writes a process model, the user can use Batch Specification steps to define a group of threads where each thread in the group runs an instance of the client sequence. The user can define a group so that batch synchronization operations can be performed on the threads in the group. For example, the TestStand Batch process model uses Batch Specification steps to create a batch that contains a thread for each TestSocket. For more information on the TestStand Batch process model, please refer to the section on the Batch process model in the Process Models chapter of the TestStand User manual, available from National Instrument Corp. For more information on batch synchronization, please see the section below on the Batch Synchronization step type.","Create Operation","To create a reference to a new or existing batch object, the user may insert a Batch Specification step and configure the step, e.g., by selecting a \u201cConfigure Batch Specification\u201d item from a context menu for the step.  illustrates an exemplary dialog box for configuring a Batch Specification step, in which a \u201cCreate\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Create operation:\n\n","The Add Thread operation may be used to add a thread to a group of batch threads.  illustrates an exemplary dialog box for configuring a Batch Specification step, in which an \u201cAdd Thread\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Add Thread operation:\n\n","The Remove Thread operation may be used to remove a thread from a group of batch threads.  illustrates an exemplary dialog box for configuring a Batch Specification step, in which a \u201cRemove Thread\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Remove Thread operation:\n\n","The Get Status operation may be used to obtain information about the current state of the batch.  illustrates an exemplary dialog box for configuring a Batch Specification step, in which a \u201cGet Status\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Get Status operation:\n\n","The Batch Specification step type may define various Batch Specification step properties in addition to the common custom properties. For example,  illustrates the following Batch Specification step properties:\n\n","Batch Synchronization steps may be used to define sections of a sequence in which to synchronize multiple threads that belong to one batch. Typically, the user uses these steps in a sequence executed using the Batch process model.","Synchronized Sections","Batch Synchronization steps may be used to define synchronized sections by placing a step at the beginning and end of a section of steps in a sequence and specifying an Enter operation for the beginning step and an Exit operation for the ending step. The Enter and Exit steps may be placed in the same sequence, but do not have to be placed in the same step group. There may be various types of synchronized sections. For example, in one embodiment, there are three types of synchronized sections: \u201cserial section\u201d, \u201cparallel section\u201d, and \u201cone-thread-only section\u201d. In one embodiment, all synchronized sections have the following properties in common:\n\n","A serial section may be used to ensure that each thread in the batch executes the steps in the section sequentially and in the order specified when the batch is created. When all threads in a batch arrive at their respective instances of an Enter step for a serial section, the threads may be released one at a time in ascending order according to Order Numbers assigned to the threads when the threads are added to the batch using the Batch Specification step. As each thread reaches the Exit step for the section, the next thread in the batch may proceed from the Enter step. After all the threads in the batch arrive at the Exit step, they exit the section together.","Parallel Sections","When all threads in a batch arrive at their respective instances of an Enter step for a parallel section, the threads may be released all at once. Each thread that arrives at the Exit step for the section may block until all threads in the batch reach that step.","One-Thread-Only Sections","A one-thread-only section may be used to specify that only one thread in the batch executes the steps in the section. Typically, this section type is used to perform an operation that applies to the batch as a whole, such as raising the temperature in a test chamber. When all threads in a batch arrive at their respective instances of an Enter step for a one-thread-only section, only the thread with the lowest Order Number may be released. When that thread arrives at the Exit step for the section, all remaining threads in the batch step may jump from the Enter step to the Exit step, skipping the steps within the section. The threads in the batch may then exit the section together.","Mismatched Sections","Sections become \u201cmismatched\u201d when all threads in a batch are blocked at an Enter or an Exit operation, but they are not all blocked at the same Enter or Exit operation. This can occur when a sequence has a conditional flow of execution due to preconditions, post actions, or other flow control operations. In one embodiment, when mismatched sections are detected, the situation may be handled as follows:\n\n","Nesting of sections can occur either within the same sequence or as a result of calling a subsequence inside of a synchronized section when the subsequence also contains a synchronized section. When one section is nested inside another, the inner section may be honored if the type of the outer section is Serial or Parallel. For example, if one serial section is nested in another serial section, each thread that enters the outer section may proceed only until the Enter step of the inner section and may then wait for the other threads to reach the same step. The inner section may be ignored if the type of the outer section is \u201cOne-Thread-Only\u201d.","Enter Synchronized Section Operation","The Enter Synchronized Section operation may be used to mark the beginning of a synchronized section and to define the type of synchronization for that section.  illustrates an exemplary dialog box for configuring a Batch Synchronization step, in which an \u201cEnter Synchronized Section\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Enter Synchronized Section operation:\n\n","The Exit Synchronized Section operation may be used to mark the end of a synchronized section.  illustrates an exemplary dialog box for configuring a Batch Synchronization step, in which an \u201cExit Synchronized Section\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Exit Synchronized Section operation:\n\n","The Exit All Sections in Current Sequence operation may be used to exit all the sections that a thread has entered in the current sequence. This is useful when the flow of execution for a thread jumps out of a synchronized section into a Cleanup step group because of a run-time error. Putting an Exit All Sections in Current Sequence step in the Cleanup step group ensures that the thread does not cause other threads to block at the end of that synchronized section or any nested synchronized sections.  illustrates an exemplary dialog box for configuring a Batch Synchronization step, in which an \u201cExit All Sections in Current Sequence\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Exit All Sections in Current Sequence operation:\n\n","The Batch Synchronization step type may define various Batch Synchronization step properties in addition to the common custom properties. For example,  illustrates the following Batch Synchronization step properties:\n\n","Wait steps may be used to wait for an execution or thread to complete or for a time interval to elapse.","Wait for Time Interval Operation","The Wait for Time Interval operation may be used to cause a thread to wait for a specified duration. The thread may sleep while waiting, thus relinquishing its processing time to other threads.  illustrates an exemplary dialog box for configuring a Wait step, in which a \u201cTime Interval\u201d option has been selected for the wait type. The following GUI controls enable the user to configure the Wait for Time Interval operation:\n\n","The Wait for Time Multiple operation may be used to cause a thread to wait until the value of the internal timer becomes a multiple of the specified time. A common use of the Wait for Time Multiple operation is to force a loop to cycle at a specific rate.  illustrates an exemplary dialog box for configuring a Wait step, in which a \u201cTime Multiple\u201d option has been selected for the wait type. The following GUI controls enable the user to configure the Wait for Time Multiple operation:\n\n","The Wait for Thread operation may be used to wait until an asynchronous sequence call thread completes and to retrieve its results.  illustrates an exemplary dialog box for configuring a Wait step, in which a \u201cThread\u201d option has been selected for the wait type. The following GUI controls enable the user to configure the Wait for Thread operation:\n\n","The Wait for Execution operation may be used to wait for the completion of an execution.  illustrates an exemplary dialog box for configuring a Wait step, in which an \u201cExecution\u201d option has been selected for the wait type. The following GUI controls enable the user to configure the Wait for Execution operation:\n\n","The Wait step type may define various Wait step properties in addition to the common custom properties. For example,  illustrates the following Wait step properties:\n\n","The Thread Priority step may be used to boost or lower the priority of a thread so that it receives more or less CPU time than other threads. The previous priority value of the thread may be saved and restored once the thread no longer requires the altered priority value.","Set Thread Priority Operation","The Set Thread Priority operation may be used to raise or lower the priority of the current thread.  illustrates an exemplary dialog box for configuring a Thread Priority step, in which a \u201cSet Thread Priority\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Set Thread Priority operation:\n\n","The Get Thread Priority operation, may be used to get the current priority setting for the current thread.  illustrates an exemplary dialog box for configuring a Thread Priority step, in which a \u201cGet Thread Priority\u201d option has been selected for the operation. The following GUI controls enable the user to configure the Get Thread Priority operation:\n\n","The Thread Priority step type may define various Thread Priority step properties in addition to the common custom properties. For example,  illustrates the following Thread Priority step properties:\n\n","Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A better understanding of the present invention can be obtained when the following detailed description of the preferred embodiment is considered in conjunction with the following drawings, in which:",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIGS. 6\u201353"}]},"DETDESC":[{},{}]}
