---
title: Low-privilege debug channel
abstract: A browser-based debugger application is configured to debug a second browser based application. A channel repeater module is invoked to establish a bidirectional communication channel between the debugger application and the second application. A start indication is transmitted from the second application through the channel repeater module. The second application enters a blocked wait state. A debug operation is performed on the second application. A debug request message is transmitted to the second application through the channel repeater module to cause the second application to transition from the blocked wait state to a run state and to perform a debug action indicated by the debug request message. A response to the debug request message is received from the second application through the channel repeater module. The second application transitions to the blocked wait state from the run state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08346870&OS=08346870&RS=08346870
owner: Microsoft Corporation
number: 08346870
owner_city: Redmond
owner_country: US
publication_date: 20090506
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","I. Introduction","II. Debuggers and Privilege","III. Example Low Privilege Debugging Embodiments","A. Example Embodiments for Establishing a Bidirectional Communication Channel","B. Example Embodiments for Initiating Debugging","C. Example Embodiments for Performing Debugging","D. Example Embodiments for Terminating Debugging","E. Example Communication Protocol Embodiments","IV. Example Low Privilege Debugging Pipeline Embodiments","V. Further Example Embodiments","VI. Conclusion"],"p":["A debugger is a tool which enables a programmer to monitor the execution of a program. A debugger can stop execution of a program being debugged, re-start execution of the program, set breakpoints in the program, and\/or access or change values in memory. A debugger can enable a program to be run step by step (called stepping), to stop at a particular line of code when a breakpoint is encountered (breaking), and can enable the value of variables to be inspected when the program is at a breakpoint or while the program is running (inspection). Some debuggers can also modify program state while the program is running, in addition to observing and reporting on program state. Hence, debuggers can be very useful.","Debugger processes are typically provided with a relatively high level of privilege so that they are enabled to debug programs in this manner. However, this same functionality that enables a debugger to be useful for finding bugs also enables a debugger to be a useful software cracking tool that can be used to breach security, including retrieving sensitive information, evading copy protection, circumventing digital rights management, and so on. Thus, the privilege level that is provided to debugger processes must be carefully managed.","For instance, in some cases, it may be desirable to use a browser based application running at a client computer to debug an application at a server. However, applications running at a client computer typically do not have sufficient privilege to debug applications at the server. A large security issue would arise if applications running at a client did have sufficient privilege to debug applications at the server. To raise the privilege level of the client-based browser based application to a sufficient level to debug the server-based application, enabling software must typically be installed at the client computer. For example, a debug DLL (dynamic link library) or other form of debug API (application programming interface) configured to raise the privilege of the client computer-based application may need to be installed at the client computer. Such APIs may not be available for many applications. To gain access to such APIs, an application may need a user to install a more privileged debugging stack (e.g., Microsoft\u00ae ICorDebug) through a normal .MSI (Microsoft\u00ae Installer) or through referencing an ActiveX control, or may need to perform other complex processes.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","Methods, systems, and computer program products are provided for enabling a browser based debugger application to debug a browser based debuggee application without requiring an elevation of privilege.","In one implementation, a method for a browser-based debugger application to debug a second browser based application is provided. A channel repeater module is invoked to establish a bidirectional communication channel between the first browser based application and a second browser based application. A start indication is transmitted from the second browser based application through the channel repeater module. The second browser based application enters a blocked wait state. One or more debug operations may be performed on the second browser based application. For example, a debug request message may be transmitted to the second browser based application through the channel repeater module to cause the second browser based application to transition from the blocked wait state to a run state and to perform a debug action indicated by the debug request message. A response to the debug request message may be received from the second browser based application through the channel repeater module. The second browser based application transitions to the blocked wait state from the run state.","In another implementation, a browser based debugger application is provided. The browser based debugger application includes a channel establisher module, a debug initiation module, and a debugger module. The channel establisher module is configured to invoke a channel repeater module to establish a bidirectional communication channel between the browser based debugger application and a second browser based application. The debug initiation module is configured to receive a start indication from the second browser based application through the channel repeater module. The debugger module is configured to perform one or more debug operations on the second browser based application. The debugger module includes a debug instruction transmit module and a debug response receiver module. The debug instruction transmit module is configured to transmit a debug request message to the second browser based application through the channel repeater module. The debug request message is configured to cause the second browser based application to transition from a blocked wait state to a run state. The second browser based application performs a debug action indicated by the debug request message. The debug response receiver module is configured to receive a response to the debug request message from the second browser based application through the channel repeater module. The second browser based application transitions to the blocked wait state from the run state.","Computer program products are also described herein for the debugger application to debug the debuggee application.","Furthermore, methods, systems, and computer program products are described herein for the debuggee application, the channel repeater module, and for further embodiments as described herein","Further features and advantages of the invention, as well as the structure and operation of various embodiments of the invention, are described in detail below with reference to the accompanying drawings. It is noted that the invention is not limited to the specific embodiments described herein. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art(s) based on the teachings contained herein.","The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings, in which like reference characters identify corresponding elements throughout. In the drawings, like reference numbers generally indicate identical, functionally similar, and\/or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit(s) in the corresponding reference number.","The present specification discloses one or more embodiments that incorporate the features of the invention. The disclosed embodiment(s) merely exemplify the invention. The scope of the invention is not limited to the disclosed embodiment(s). The invention is defined by the claims appended hereto.","References in the specification to \u201cone embodiment,\u201d \u201can embodiment,\u201d \u201can example embodiment,\u201d etc., indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic. Moreover, such phrases are not necessarily referring to the same embodiment. Further, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the art to effect such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.","Many modem processor architectures have CPU modes that allow operating systems to run at different privilege levels. For instance, processes, resources and instructions which access resources are tagged with a privilege level. When a process tries to use a resource or attempts to execute a privileged instruction, the processor determines whether or not the process has permission to do so, and either permits or denies the operation. This prevents user processes from damaging the operating system or other processes running on the machine. Various numbers of levels of privilege may exist. For example, some processors support two levels of privilege, such as user (low privilege) and supervisor (high privilege). Other processors have four levels, with level #0 having the most privileges (high privilege) and level #3 having the least privileges (level #2 and level #3 may be considered low privilege).","A debugger is a tool which enables a programmer to monitor the execution of a program. In general, a debugger process is a high privilege process and a debuggee (the program being debugged or the debug target) is typically a low privilege process. When debugging locally, (e.g., a user is debugging a program on his own computer) it typically does not matter which of the two (debugger or debuggee) is more privileged because all the information on the computer typically belongs to the same user. Remote debugging (debugging a program running on a system accessible through a network connection) is more problematic. Remote debugging is typically performed in a client-server environment (e.g., where a client-server relationship exists).","A client-server relationship is a relationship between two computer programs running on two different computers in which one program, the client, makes a service request of another program, the server. Typical networked functions such as email exchange, web access and database access, are based on the client-server model. The term \u201cserver\u201d in general usage refers both to the process running on the computer that services requests and to the actual computer on which the service runs. A server is typically dedicated to providing one or more services over a computer network, typically through a request-response protocol. A service is typically furnished by a server application designed to handle multiple concurrent requests. Examples of server applications include mail servers, file servers, web servers, and proxy servers. A server is typically high privilege so that it can service requests and access the information it needs to access to service the requests.","A client is an application or computer that accesses a remote service on a server via a network. The client-server model is widely used on the Internet, where a user may connect to a service operating on a remote system through the internet protocol suite. A web browser is a client program (or process, i.e., a program that is executing is a process) at the user computer that can access information at any web server in the network and retrieve web pages for display on the user computer. Such a client is typically low privilege to protect confidential, privileged or sensitive information and for tamper-protection purposes.","For instance, in some cases, it may be desirable to use a browser based application running at a client computer to debug a server application. However, a browser based application running at a client computer typically does not have sufficient privilege to debug applications at the server. The privilege level of the client-based application is kept low relative to the server so that the client-based application cannot damage the operating system or other processes running on the server. To raise the privilege level of the client-based browser based application to a sufficient level to debug the server-based application, enabling software must typically be installed at the client computer. For example, a debug DLL (dynamic link library), or other form of debut API (application programming interface) configured to raise the privilege of the client computer-based application, may need to be installed at the client computer.","Embodiments of the present invention overcome deficiencies of conventional techniques for debugging applications in client-server environments. Examples of such embodiments are described in the following sections.","The example embodiments described herein are provided for illustrative purposes, and are not limiting. Furthermore, additional structural and operational embodiments, including modifications\/alterations, will become apparent to persons skilled in the relevant art(s) from the teachings herein.","Embodiments of the present invention relate to the debugging of applications. In embodiments, a debugger application running at a client computer is enabled to debug a server-based application without elevating the privilege level of the browser based application running at the client computer. Because the privilege level of the debugger application need not be raised, security issues at the server are avoided. In an embodiment, a bidirectional communication channel is established between the debugger application and the debuggee application. Debug-related messages are enabled to be transmitted between the debugger and debuggee applications through the bidirectional communication channel. In an embodiment, the messages arrive unmodified and in the same sequence sent by the particular sender (either the debugger or debuggee application). In an embodiment, the debuggee application is configured to be able to block its own thread of execution while waiting for debug requests from the debugger application.","In embodiments, various protocols may be used by the debugger and debuggee applications to communicate through the bidirectional communication channel. For example, in an embodiment, the bidirectional communication channel may be configured according to HTTP (hypertext transfer protocol). In this manner, standard web security mechanisms may be used by the communications.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","106","108","110","100"]},"Client computer  and server computer  may each be any suitable type of computing device described herein or otherwise known, including a desktop computer, a mobile computer or computing device, or other type of computer. Network  is configured to communicatively couple client computer  and server computer . Network  may include one or more communication links and\/or communication networks, wired and\/or wireless, such as a PAN (personal area network), a LAN (local area network), a WAN (wide area network), or a combination of networks, such as the Internet, and may include one or more telecommunications networks, wired or wireless, such as a GSM (Global System for Mobile communications) network, a 3G network, and\/or further networks.","Server computer  includes (e.g., stores in memory and\/or associated storage) a debugger application  and a debuggee application . Debugger application  includes debug capability, and may include further capabilities. For example, debugger application  is configured to be capable of debugging debuggee application . Debugger and debuggee applications  and  may be the same type of application or process or may be different types of applications or processes. As shown in , client computer  is configured to execute a browser . In an embodiment, debugger and debuggee applications  and  may be browser based applications that are capable of being loaded and run by a browser, such as browser . For example, debugger and debuggee applications  and  may be executed directly by browser  and\/or by a \u201cplug-in\u201d or \u201cadd-in\u201d to browser . Examples of such plug-ins include Silverlight\u2122, published by Microsoft Corporation of Redmond, Wash., Javascript\u2122 plug-ins (Javascript\u2122 is published by Sun Microsystems, Inc., of Santa Clara, Calif.), Adobe Flash Player developed by Adobe Systems Inc. of San Jose, Calif., and further plug-ins. Thus, debugger and debuggee applications  and  may be Silverlight\u2122 processes, Javascript\u2122 processes, Flash processes (e.g., .SWF files), and further applications\/scripts. Browser  may be any type of web browser, including Microsoft Internet Explorer\u00ae, Google Chrome, Mozilla Firefox, etc.","As indicated by dotted line in , browser  may load debugger application . For example, browser  may navigate (e.g., by user interaction with browser ) to a web page served by server computer  that includes debugger application . As a result, debugger application  is downloaded to client computer . At client computer , a user may interact with debugger application  (e.g., through browser ) to debug debuggee application . According to an embodiment, a bidirectional communication channel is established between debugger application  and debuggee application  through which debugger application  is enabled to debug debuggee application .","For instance,  shows a block diagram of a debug system , according to an example embodiment. As shown in , system  includes debugger application , debuggee application , a channel repeater module , and a bidirectional communication channel . As shown in , debugger application  transmits debug-related messages  to debuggee application  through bidirectional communication channel , and debuggee application  transmits debug-related messages  to debugger application  through bidirectional communication channel . In an embodiment, debug-related messages  and  arrive at debuggee application  and debugger application , respectively, in an unmodified form and in the same sequence as they were transmitted. In an embodiment, messages  and  between debugger application  and debuggee application  flow through channel repeater module  in bidirectional communication channel . Channel repeater module  enables debugger application  to debug debuggee application  through bidirectional communication channel  without the need to elevate the privilege level of debugger application .","Debugger application  and debuggee application  may be configured in various ways to enable debugging through bidirectional communication channel . For instance,  shows a block diagram of a debugger application , according to an example embodiment. Furthermore,  shows a block diagram of a debuggee application , according to an example embodiment. Debugger application  is an example of debugger application , and debuggee application  is an example of debuggee application . Debugger application  and debuggee application  are described as follows.","As shown in , debugger application  includes a channel establisher module , a debug initiation module , and a debugger module . In the example of , debugger module  includes a debug instruction transmit module  and a debug response receiver module . Channel establisher module  is configured to invoke channel repeater module  to establish bidirectional communication channel  between debugger application  and debuggee application . Debug initiation module  is configured to receive a start indication  from debuggee application  of  through channel repeater module . Debugger module  is configured to perform one or more debug operations on debuggee application . Debug instruction transmit module  is configured to transmit a debug request message  to debuggee application  through channel repeater module . Debug response receiver module  is configured to receive a debug performed message  as a response to debug request message  from debuggee application  through channel repeater module .","As shown in , debuggee application  includes a debug control module  and an application execution module . Debug control module  is configured to conduct debugging of debuggee application , as controlled by communications from debugger application  through channel repeater module . Application execution module  enables execution of application code of debuggee application  as controlled by debug control module . In the example of , debug control module  includes a debug start module , an execution blocking module , and a debug response transmit module . Debug start module  is configured to enable debugging of debuggee application . For example, as shown in , debug start module  generates a start indication  to indicate that debugging of debuggee application  may proceed. Start indication  is received by debug initiation module  in  through channel repeater module  as start indication .","As shown in , execution blocking module  receives a block signal  from debug start module . Debug start module  generates block signal  upon transmitting start indication . Execution blocking module  maintains a state for debuggee application , and is configured to enter a blocked wait state upon receiving block signal . Furthermore, execution blocking module  generates an execution enable\/disable signal , which is received by application execution module . In a blocked wait state for execution blocking module , execution enable\/disable signal  is generated to cause execution of code of debuggee application  in application execution module  to be disabled (i.e., halted or blocked).","As further shown in , execution blocking module  may receive a debug request message  from channel repeater module , which is debug request message  received by channel repeater module . Debug request message  indicates one or more debug actions\/operations to be performed on the code of debuggee application . Upon receiving debug request message , execution block module  transitions to a run state, and generates execution enable\/disable signal  to cause execution of code of debuggee application  in application execution module  to be enabled (e.g., a value of execution enable\/disable signal  is toggled or changed relative to a value configured to disable application execution module ). Thus, execution of code of debuggee application  by application execution module  may proceed. As shown in , application execution module  generates an execution output , which is received by debug response transmit module . Execution output  indicates a current point of execution in the code being executed by application execution module , one or more variable values, and\/or further information of interest with regard to the execution of the code of debuggee application .","Furthermore, execution blocking module  generates a debug instruction . Debug instruction  is a debug instruction extracted from debug request message  (from debug request message  of ). Debug instruction  may include one or more of a variety of debug operation instructions to be performed on the code of debuggee application , including an instruction to set a breakpoint and run, to set a breakpoint and step, etc. Debug instruction  is received by debug response transmit module . Debug response transmit module  monitors execution output , and determines when debug instruction  is fulfilled, such as a breakpoint being reached, a step being completed, etc. When debug response transmit module  determines that debug instruction  is fulfilled, debug response transmit module  generates a block signal , which is received by execution blocking module . Execution blocking module  is configured to transition to a blocked wait state upon receiving block signal , and generates execution enable\/disable signal  to cause execution of code of debuggee application  in application execution module  to be disabled. Furthermore, when debug response transmit module  determines that debug instruction  is fulfilled, debug response transmit module  generates a debug performed message . Debug performed message  is transmitted to channel repeater module , which transmits debug performed message  to debug response receiver module  as debug performed message . Debug performed message  indicates that the debug request message  has been completed, and may optionally include further information, including information of execution output .","Referring back to , debugger application  may perform debugging of debuggee application  in various ways. For instance,  shows a flowchart  providing a process for a debugger application to perform debugging of debuggee application , according to an example embodiment. For example, flowchart  may be performed by debugger application  and by debugger application  of . Other structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart . Flowchart  is described in the following subsections.","As shown in , flowchart  begins with step . In step , a channel repeater module is invoked to establish a bidirectional communication channel between the first browser based application and a second browser based application. Referring to , for example, channel repeater module  may be invoked to establish bidirectional communication channel  between debugger application  (the first browser based application) and debuggee application  (the second browser based application). For example, in an embodiment, channel repeater module  may be invoked by channel establisher module  shown in . When channel repeater module  is invoked, channel repeater module  becomes enabled to receive messages from debugger application  and transmit them to debuggee application , and to receive messages from debuggee application  and transmit them to debugger application . Debugger and debuggee applications  and  are enabled to communicate using a communication protocol enabled by a browser in which they are loaded, such as browser  shown in . For example, the communication protocol may be enabled by the browser directly (e.g., HTTP) and\/or by an add-on\/plug-in to the browser. This enables debugger and debuggee applications  and  to communicate through the bidirectional communication channel to debug debuggee application , without an elevation of privilege.","In one embodiment, channel repeater module  may be included in debugger application . In such an embodiment, channel establisher module  may invoke channel repeater module  in debugger application  when debugging of an application is to be performed. In another embodiment, channel repeater module  may external to debugger application , such as being included in a same computer system or a different computer system than a computer system in which debugger application  is included. In such an embodiment, channel establisher module  may invoke channel repeater module  by transmitting a channel invocation signal  (shown in ) to channel repeater module  when debugging of an application is to be performed.","For instance,  shows a block diagram of a debug system , according to an example embodiment. Debug system  is an example of debug system  shown in . As shown in , system  includes debugger application , debuggee application , channel repeater module , bidirectional communication channel , a first browser , a second browser , and server computer . In , first browser runs and provides a user interface for debugger application , and second browser  runs and provides a user interface for debuggee application . First browser and second browser may be included in a same browser (e.g., being separate windows or tabs of browser  in ), or may be separate browser invocations. In the embodiment of , channel repeater module  is included in server computer . Thus, as described above, channel establisher module  shown in  may invoke channel repeater module  by transmitting a channel invocation signal  to channel repeater module  at server computer  when debugging of an application is to be performed.","As shown in , debugger application  transmits debug-related messages  to debuggee application  through channel repeater module  at server computer  (e.g., through network  shown in ). For instance, debugger application  transmits a debug-related message (e.g., message  of ) to channel repeater module  at server computer , which transmits the same message as debug-related message (e.g., message  of ) to debuggee application . Furthermore, debuggee application  transmits debug-related messages  to debugger application  through channel repeater module  at server computer . For instance, debuggee application  transmits a debug-related message (e.g., start indication  or message  of ) to channel repeater module  at server computer , which transmits the same message as debug-related message (e.g., start indication  or message  of ) to debugger application .",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 7","FIG. 2","FIG. 7","FIG. 7","FIG. 3","FIG. 6"],"b":["700","700","200","700","102","104","202","204","112","112","108","202","204","106","302","202","106","202","102"],"i":["a","b"]},"As shown in , debugger application  transmits debug-related messages  to debuggee application  through channel repeater module  in client computer . For instance, debugger application  transmits debug-related message (e.g., message  of ) to channel repeater module  in client computer , which transmits debug-related message (e.g., message  of ) to debuggee application . Furthermore, debuggee application  transmits debug-related messages  to debugger application  through channel repeater module  client computer . For instance, debuggee application  transmits debug-related message (e.g., start indication  or message  of ) to channel repeater module  in client computer , which transmits debug-related message (e.g., start indication  or message  of ) to debugger application .","Example embodiments for the initiation of debugging are described in this subsection. Debugging of debuggee application  may be initiated in various ways. Referring back to , in step  of flowchart , a start indication is received from the second browser based application through the channel repeater module. Referring to , for example, debuggee application  may transmit a start indication to debugger application  through channel repeater module  to initiate debugging of debuggee application .",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 8","FIG. 8","FIG. 2","FIG. 8","FIGS. 9-12","FIG. 9","FIGS. 10 and 11","FIG. 12","FIG. 8"],"b":["800","104","800","200","102","104","202","204","104","900","1000","1100","1200","900","1000","1100","1200","800"]},"As shown in , flowchart  begins with step . In step , a start indication is transmitted to the first browser based application through the channel repeater module. For example, referring to , debuggee application  may transmit start indication  to channel manager module , and channel manager module  may transmit start indication  to debugger application  as start indication . As described above with respect to , debug start module  may generate start indication , and as shown in , debug initiation module  may receive start indication .","In step , the second browser based application transitions to a blocked wait state. For example, upon transmitting start indication , debuggee application  may transition to a blocked wait state. For instance, as described above with respect to , execution blocking module  may generate execution enable\/disable signal  to cause execution of code of debuggee application  in application execution module  to be disabled (i.e., halted or blocked). In this manner, execution of code of debuggee application  may be blocked, even prior to a first code line of debuggee application .","With regard to debugger application , initiation of debugging of debuggee application  may be performed in various ways. Flowcharts  and  () show example embodiments for initiating debugging of debuggee application  in debugger application . For example, as shown in , flowchart  includes step . In step , the start indication is asynchronously received from the channel repeater module as a result of a start indication transmitted by the second browser based application to the channel repeater module. For example, referring to , start indication  may be asynchronously received from channel manager module . In such an embodiment, debugger application  need not necessarily wait or provide an indication that debugger application  is waiting for start indication .","In the embodiment of , flowchart  begins with step . In step , a wait indication is transmitted to the channel repeater module. For example, as shown in , debugger application  may transmit a wait indication  to channel manager module . For instance, referring to , debug initiation module  may be configured to transmit wait indication .","In step , a browser navigates to an address for the second browser based application. For example, as described above, debugger application  may have previously been invoked, such as by navigating browser  to a web page at server computer  that includes debugger application . In step , browser  may navigate to the address (e.g., uniform resource locator (URL) of a web page) for debuggee application  at server computer . In this manner, debuggee application  is loaded for debugging by debugger application .","In step , a response to the posted wait indication from the channel repeater module is waited for. For example, referring to , after transmitting wait indication , debugger application  may be configured to wait for start indication  to be received. Step  is optional, and in other embodiments, debugger application  may not necessarily wait for start indication  (e.g., debugger application  may perform other functions in the meantime).","In step , the start indication is received from the channel repeater module in response to the wait indication and as a result of a start indication transmitted by the second browser based application to the channel repeater module. For example, referring to , start indication  may be received from channel manager module  in response to wait indication  being transmitted to channel repeater module .","As described above, channel repeater module  performs a repeater function for signals transmitted by debugger application  and debuggee application . Referring to , flowchart  begins with step . In step , a wait indication is received from the first browser based application. For instance, as shown in , wait indication  is received by channel repeater module  from debugger application . Step  is optional.","In step , the start indication is received from the second browser based application. For example, as shown in , start indication  is received by channel repeater module  from debuggee application .","In step , the start indication is transmitted to the first browser based application. For example, as shown in , start indication  is transmitted by channel repeater module  to debugger application  as start indication .","Example embodiments for the performance of debugging are described in this subsection. Referring back to , in step  of flowchart , a debug operation is performed on the second browser based application. Referring to , for example, debugger application  may perform one or more debug operations on debuggee application  through channel repeater module .","Debugging of debuggee application  by debugger application  may be performed in various ways. For instance,  show flowcharts for performing debugging, according to example embodiments.  show flowcharts  and  for processes performed in a debugger application for debugging.  shows a flowchart  for a debuggee application during debugging.  shows a flowchart  for a channel repeater module during performance of debugging. Flowcharts , , , and  are described with respect to debug system  shown in , for purposes of illustration. Other structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowcharts , , , and , and system  of .","As shown in , flowchart  begins with step . In step , a debug request message is transmitted to the second browser-based application through the channel repeater module to cause the second browser based application to transition from the blocked wait state to a run state and to perform a debug action indicated by the debug request message. For example, as shown in , debugger application  may transmit debug request message  to channel manager module . For instance, referring to , debug instruction transmit module  may be configured to transmit debug request message . Debug request message  may include one or more debug operations, as described elsewhere herein, to be performed on debuggee application .","In step , a response to the debug request message is received from the second browser-based application through the channel repeater module. For example, referring to , debug performed message  is received by debugger application  as a response to debug request message  from debuggee application  through channel repeater module . Referring to , debug response receiver module  may be configured to receive debug performed message . Upon receiving debug performed message , execution of code of debuggee application  is blocked. Thus, a user (e.g., interacting with browser ) may be enabled to perform debug analysis of debuggee application  at its current execution state.","Debugger application  may optionally wait for the response to debug request message . For example, in such an embodiment, debugger application  may perform flowchart  of  according to flowchart  shown in . As shown in , flowchart  begins with step . In step , the debug request message is transmitted to the channel repeater module. For example, as shown in , debugger application  may transmit debug request message  to channel manager module .","In step , a response to the debug request message from the channel repeater module is waited for. For example, referring to , after transmitting debug request message , debugger application  may be configured to wait for debug performed message  to be received. Step  is optional, and in other embodiments, debugger application  may not necessarily wait for debug performed message  (e.g., debugger application  may perform other functions).","In step , a response to the debug request message is received from the channel repeater module that includes a debug performed message transmitted by the second browser based application to the channel repeater module. For example, referring to , debug performed message  is received by debugger application  as a response to debug request message  from debuggee application  through channel repeater module .","With regard to debuggee application , debugging may be performed in various ways. For instance, as shown in , flowchart  begins with step . In step , the debug request message is received from the channel repeater module in response to a previous transmission. For example, referring to , debug request message  transmitted to channel repeater module  is received by debuggee application  as debug request message . As described above with respect to , execution blocking module  may receive debug request message . In an embodiment, debug request message  is received by debuggee application  in response to a previous transmission to channel repeater module . For example, debug request message  may be received from channel repeater module  in response to debuggee application  transmitting start indication  to channel repeater module  (e.g., at initiation of debugging) or in response to transmitting a previous debug performed message  to channel repeater module  (e.g., during an immediately previous debug cycle).","In step , the second browser based application transitions from the blocked wait state to a run state. For example, upon receiving debug request message , debuggee application  may transition from a blocked wait state to a run state. For instance, as described above with respect to , execution blocking module  may generate execution enable\/disable signal  to cause execution of code of debuggee application  in application execution module  to be enabled.","In step , a debug action indicated by the debug request message is performed. Debuggee application  performs a debug action indicated by debug request message . For example, as shown in , execution blocking module  generates a debug instruction . Debug instruction  is a debug instruction extracted from debug request message . Debug instruction  may include one or more of a variety of debug operation instructions to be performed on the code of debuggee application , including an instruction to set a breakpoint and run, to set a breakpoint and step, or other debug operation described herein or otherwise known.","In step , a debug performed message is transmitted to the channel repeater module. For example, referring to , debug performed message  is transmitted to channel repeater module  by debuggee application . As described above with respect to , debug response transmit module  may generate debug performed message .","As described above, channel repeater module  performs a repeater function for signals transmitted by debugger application  and debuggee application . Referring to , flowchart  begins with step . In step , the debug request message is received from the first browser based application. For instance, as shown in , debug request message  is received by channel repeater module  from debugger application .","In step , the debug request message is transmitted to the second browser based application in response to a previous transmission to the channel repeater module from the second browser based application. For instance, as shown in , debug request message  is transmitted to debuggee application  from channel manager module  as debug request message . In an embodiment, as described above, debug request message  may be transmitted as a response to a previous transmission to channel repeater module  from debuggee application .","In step , the debug performed message is received from the second browser based application. For instance, as shown in , debug performed message  is received at channel manager module  from debuggee application .","In step , the debug performed message is transmitted to the first browser based application in response to the debug request message. For instance, as shown in , debug performed message  is transmitted to debugger application  from channel manager module  as debug performed message . In an embodiment, debug performed message  may be transmitted to debugger application  as a response to a previous transmission to channel repeater module  from debugger application , such as debug request message .","Note that as described above, debugging of debuggee application  by debugger application  through channel repeater module  may be performed in various ways. For instance, in one embodiment, debuggee application  may be debugged in a multi-threaded manner, where debug start module  executes in a first thread, and application execution module  executes in a second thread, and the first and second threads cooperate to perform debugging, in a similar fashion as described above with respect to flowchart .","In another embodiment, flowchart  may be performed using procedure calls to debug debuggee application . For example, in such an embodiment, execution blocking module  may be configured to insert calls into the code of debuggee application . Application execution module  is configured to execute the code (step  of ) after being enabled (step ) by debug request message  being received by debug control module  (step ). Application execution module  executes the code until an inserted call is reached in the code. At such point, application execution module  is blocked from executing further code by message  being sent to the debug control module  as a method invocation, and debug performed message  is transmitted from debug control module  (step ). Each time another debug request message  is received, application execution module  returns from the method invoked by message  and executes the code until a next call is reached, at which point execution of the code is blocked by a next method invocation of message , and a debug performed message  is transmitted. An embodiment using procedure calls in this manner may be executed using a single thread, if desired. In such case, the thread may be capable of blocking itself when calls are reached in the executing code, as described above. This can be accomplished, for example, by transmitting messages  and  using a non-asynchronous form of the send method of XMLHttpRequest (which is an API that provides scripted client functionality for transferring data between a client and server). The send method returning would then act as receiving message . While the send method is blocked, application execution module  is blocked (as required above) waiting for message  to return, which in turn is blocked waiting for message  to arrive.","In an embodiment, debugging of debuggee application  by debugger application  may be terminated. Such termination of debugging may be implemented in various ways. For instance,  show flowcharts , , and  for terminating debugging, according to example embodiments.  are described with respect to debug system  shown in , for purposes of illustration. Other structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding , and system  of .","For instance,  shows a step  that may be performed by debugger application  to terminate debugging, according to an example embodiment. In step , a terminate message is transmitted to the channel manager module. For instance, as shown in , debugger application  transmits a terminate message  to channel manager module . Referring to , for example, terminate message  may be generated by debug instruction transmit module . For instance, a user that is debugging debuggee application  may determine that debugging is complete, and may cause debugger application  (e.g., by interacting with debugger application  at browser ) to transmit terminate message . Alternatively, terminate message  may be transmitted by closing debuggee application , by closing a browser that is running debuggee application , or in another manner.",{"@attributes":{"id":"p-0087","num":"0086"},"figref":["FIG. 18","FIG. 8"],"b":["1800","202","1802","804","202","102"]},"In step , the terminate message is transmitted to the second browser based application. For example, as shown in , terminate message  is transmitted from channel manager module  as terminate message  to debuggee application .",{"@attributes":{"id":"p-0089","num":"0088"},"figref":["FIG. 19","FIG. 8"],"b":["1900","104","1902","104","806","806","202","104","424","202"]},"In step , execution is terminated. In an embodiment, upon receiving terminate message , debuggee application  terminates.","Note that as described above, in embodiments, various protocols may be used by debugger application  and debuggee application  to communicate through bidirectional communication channel . For example, in an embodiment, bidirectional communication channel  may be configured according to HTTP (hypertext transfer protocol), and thus communications may be performed through bidirectional communication channel  using standard web security mechanisms. Using standard HTTP protocols enables a first browser based application to debug another browser based application. For instance, a first Silverlight\u2122 application may be enabled to debug a second Silverlight\u2122 application without elevation of privilege in this manner.","In an embodiment, bidirectional communication channel  may be implemented using a HTTP server (e.g., server computer ) and standard HTTP protocols. The channel participants may send and receive messages through bidirectional communication channel  by performing HTTP posts to an HTTP server. For example, referring to , wait indication , start indication , debug request message , debug performed message , and terminate message  may each be transmitted to channel manager module  as HTTP posts. Start indication , debug request message , debug performed message , and terminate message  may each be transmitted from channel manager module  as responses to the corresponding HTTP posts by debugger application  and debuggee application . In an embodiment, bidirectional communication channel  can be secured by using HTTPS (hypertext transfer protocol secure) instead of HTTP. With regard to authorization, in an embodiment, standard HTTP authorization techniques can be used, including SharedKey, etc.","Elevation of privilege is not needed if server computer  is the server of origin of debugger application , as described above, and is the domain of origin for debuggee application . If not, standard cross-site scripting techniques can be used by debugger application . Debuggee application  may use cross-site scripting techniques that enable blocking of execution.","A server can support multiple simultaneous channels by using URI parameters to designate which channel is being used. In an embodiment, this technique may be used, as well as ASP.NET's IHttpAsyncHandler to implement the request handlers to minimize the number of threads consumed while the channel participants are waiting for messages.","The format of messages transmitted through bidirectional communication channel  can be any sequence of octets, such as XML (extensible markup language) documents, or other message format type.","As described above, debuggee application  is configured to block execution when a breakpoint is reach or a step operation is complete. For example, execution blocking module  may enable such blocking, as described above.","In an embodiment, bidirectional communication channel  may be configured as a low privilege debug channel. For example, a low privilege debugging pipeline may be configured that uses bidirectional communication channel  to perform communications between debugger application  and debuggee application . In an embodiment, the domain of origin HTTP server (e.g., server computer ) may facilitate communications between debugger application  and debuggee application by providing a low privilege debugging pipeline.","For instance,  shows a step  that may be performed by server computer , according to an example embodiment. In step , the bidirectional communication channel is configured as a low privilege debugging pipeline.  illustrate an example of a system  that enables low privilege debugging in accordance with other aspects of the subject matter disclosed herein. System  may include one or more of the following: one or more server computers such as server , etc., and\/or one or more client computers , , etc. Server  is an example of server computer , and client computers  and  are examples of client computer .","A client-to-client debugging connection may be established by connecting a first client process (e.g., browser client  ) to a server (e.g., server computer ) via a first connection (e.g., internet protocol connection ), connecting a second client process (e.g., browser client  ) to the server computer  via a second connection (e.g., internet protocol connection ), and then removing the server from the communication channel, as shown in , allowing the client processes (e.g., browser client   and browser client  ) to communicate directly via a low-privilege pipeline (e.g., low privilege debug pipeline ), instead of having the first client download a privileged component that could debug the second client, as in traditional debug models.","For example, suppose an Internet user navigates to a webpage on server  via the user's browser (e.g., browser client  ) and downloads a JAVA applet, some Microsoft Silverlight code, or other application that typically runs on the client within a browser, typically a low privilege component. Suppose that application (the JAVA applet or Silverlight code) opens a second browser (e.g., browser client  ) so that now the client machine has two browser clients running on it. Suppose the application has a number of lines of script code running inside of it. The first browser client (e.g., browser client ) can debug the downloaded code by publishing a low privilege debug pipeline (e.g., low privilege debug pipeline ) through the use of a low-privilege debug pipeline publisher. The first browser client communicates back to the server  via the low privilege debug pipeline . The server  can forward the low privilege debug pipeline  to the second browser client . The server thus acts as a conduit between the first and second browsers on the client computer . The server  can be optimized out of the connection so that communications, instead of going from one browser on the client machine to a server and back down to the other browser on the client machine, go directly between client browsers on the client computer . That is, the routing of communications can be optimized so that communications are established via the low privilege debug pipeline directly between the two low-privileged browsers running on the client machine, establishing a client-to-client low privilege debug session.","In an embodiment, bidirectional communication channel  (including channel repeater module ) may be implemented in debug pipeline  to enable debugger application  and debuggee application  to communicate as described herein in a low privilege manner. Further description and examples of a low privilege debugging pipeline applicable to embodiments of the present invention are described in commonly assigned, co-pending U.S. application Ser. No. 12\/339,111, titled \u201cLow Privilege Debugging Pipeline,\u201d filed on Dec. 19, 2008, which is incorporated by reference herein in its entirety.",{"@attributes":{"id":"p-0102","num":"0101"},"figref":["FIG. 22","FIGS. 1","FIGS. 1 and 6","FIGS. 21A and 21B","FIGS. 21A and 21B"],"b":["2200","106","6","7","108","2118","2102","2200","2200","2200","2200","2200"]},"As shown in , computer  includes a processing unit , a system memory , and a bus  that couples various system components including system memory  to processing unit . Bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. System memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS) is stored in ROM .","Computer  also has one or more of the following drives: a hard disk drive  for reading from and writing to a hard disk, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM, DVD ROM, or other optical media. Hard disk drive , magnetic disk drive , and optical disk drive  are connected to bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer-readable instructions, data structures, program modules and other data for the computer. Although a hard disk, a removable magnetic disk and a removable optical disk are described, other types of computer-readable media can be used to store data, such as flash memory cards, digital video disks, random access memories (RAMs), read only memories (ROM), and the like.","A number of program modules may be stored on the hard disk, magnetic disk, optical disk, ROM, or RAM. These programs include an operating system , one or more application programs , other program modules , and program data . Application programs  or program modules  may include, for example, computer program logic (and\/or other suitable means) for implementing browser , debugger application , debuggee application , channel repeater module , channel establisher module , debug initiation module , debugger module , debug instruction transmit module , debug response receiver module , debug control module , debug start module , execution blocking module , debug response transmit module , application execution module , debug pipeline , browser client , browser client , flowcharts , , , , , , , , , , , , and\/or  (including any step of flowcharts , , , , , , , , , , ,  and\/or ), and\/or any further embodiments as described above.","A user may enter commands and information into the computer  through input devices such as keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to bus , but may be connected by other interfaces, such as a parallel port, game port, or a universal serial bus (USB).","A monitor  or other type of display device is also connected to bus  via an interface, such as a video adapter . In addition to the monitor, computer  may include other peripheral output devices (not shown) such as speakers and printers.","Computer  is connected to a network  (e.g., the Internet) through a network interface or adapter , a modem , or other means for establishing communications over the network. Modem , which may be internal or external, is connected to bus  via serial port interface .","As used herein, the terms \u201ccomputer program medium\u201d and \u201ccomputer-readable medium\u201d are used to generally refer to media such as the hard disk associated with hard disk drive , removable magnetic disk , removable optical disk , as well as other media such as flash memory cards, digital video disks, random access memories (RAMs), read only memories (ROM), and the like.","As noted above, computer programs and modules (including application programs  and other program modules ) may be stored on the hard disk, magnetic disk, optical disk, ROM, or RAM. Such computer programs may also be received via network interface  or serial port interface . Such computer programs, when executed or loaded by an application, enable computer  to implement features of embodiments of the present invention discussed herein. Accordingly, such computer programs represent controllers of the computer .","The invention is also directed to computer program products comprising software stored on any computer useable medium. Such software, when executed in one or more data processing devices, causes a data processing device(s) to operate as described herein. Embodiments of the present invention employ any computer-useable or computer-readable medium, known now or in the future. Examples of computer-readable mediums include, but are not limited to storage devices such as RAM, hard drives, floppy disks, CD ROMs, DVD ROMs, zip disks, tapes, magnetic storage devices, optical storage devices, MEMs, nanotechnology-based storage devices, and the like.","While various embodiments of the present invention have been described above, it should be understood that they have been presented by way of example only, and not limitation. It will be understood by those skilled in the relevant art(s) that various changes in form and details may be made therein without departing from the spirit and scope of the invention as defined in the appended claims. Accordingly, the breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS\/FIGURES","p":["The accompanying drawings, which are incorporated herein and form a part of the specification, illustrate the present invention and, together with the description, further serve to explain the principles of the invention and to enable a person skilled in the pertinent art to make and use the invention.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 6 and 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 9-12"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 13-16"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 17-19"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 21A and 21B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 22"}]},"DETDESC":[{},{}]}
