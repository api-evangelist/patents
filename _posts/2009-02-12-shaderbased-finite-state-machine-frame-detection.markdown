---
title: Shader-based finite state machine frame detection
abstract: Embodiments for shader-based finite state machine frame detection for implementing alternative graphical processing on an animation scenario are disclosed. In accordance with one embodiment, the embodiment includes assigning an identifier to each shader used to render animation scenarios. The embodiment also includes defining a finite state machine for a key frame in each of the animation scenarios, whereby each finite state machine representing a plurality of shaders that renders the key frame in each animation scenario. The embodiment further includes deriving a shader ID sequence for each finite state machine based on the identifier assigned to each shader. The embodiment additionally includes comparing an input shader ID sequence of a new frame of a new animation scenario to each derived shader ID sequences. Finally, the embodiment includes executing alternative graphics processing on the new animation scenario when the input shader ID sequence matches one of the derived shader ID sequences.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08237720&OS=08237720&RS=08237720
owner: Microsoft Corporation
number: 08237720
owner_city: Redmond
owner_country: US
publication_date: 20090212
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","CONCLUSION"],"p":["A video game may consist of a plurality of animation scenarios, and each animation scenario may consist of a frame or an animated sequence of frames. The detection of upcoming rendering of a particular animation scenario in real-time during the execution of the video game may enable the individualized manipulation of the detected animation scenario prior to and\/or during rendering.","This Summary is provided to introduce a selection of concepts in a simplified form that is further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","Described herein are embodiments of a shader-based finite state machine animation scenario detection mechanism that detects the upcoming use of a particular sequence of shaders to render a specific frame of an animation scenario. As used herein, a \u201cshader\u201d generally refers to a set of software instructions that may execute on a graphics processing unit (GPU) to render graphics that may be displayed on a computer display. The ability to detect the upcoming use of a particular sequence of shaders to render a specific frame of the animation scenario may provide flexibility in the manipulation of the corresponding animation scenario graphics data prior to and\/or during animation scenario rendering. For example, the use of shader-based finite state machine frame detection may enable the insertion of additional data (e.g., graphical advertisements related to the animation scenario) during the rendering of the detected animation scenario. In another example, the use of shader-based finite state machine frame detection may enable the rendering of an animation scenario to be performed via alternative software and\/or hardware platforms.","At least one embodiment of shader-based finite state machine frame detection for providing alternative graphical processing on an animation scenario includes assigning an identifier to each shader used to render animation scenarios. The at least one embodiment also includes defining a finite state machine for a key frame in each of the animation scenarios, whereby each finite state machine represents a plurality of shaders that renders the key frame in each animation scenario. The at least one embodiment further includes deriving a shader identifier (ID) sequence for each finite state machine based on the identifier assigned to each shader. The at least one embodiment additionally includes comparing an input shader ID sequence of a new frame of a new animation scenario to each derived shader ID sequences. Finally, the at least one embodiment includes executing alternative graphics processing on the new animation scenario when the input shader ID sequence matches one of the derived shader ID sequences.","Other embodiments will become more apparent from the following detailed description when taken in conjunction with the accompanying drawings.","This disclosure is directed to a shader-based finite state machine frame detection mechanism that detects the upcoming use of a particular sequence of shaders to render a specific frame of an animation scenario. The animation scenario may be a frame or an animated sequence of frames. As used herein, a \u201cshader\u201d generally refers to set of software instructions that may execute on a graphics processing unit (GPU) to render graphics that may be displayed on a computer display. In various embodiments, a plurality of different shaders may be used to render a specific frame.","Accordingly, the shader-based frame detection mechanism may define a finite state machine for each key frame, whereby the nodes of the finite state machine may represent the shaders executed for each partial rendering of the frame, and the edges between the nodes may represent the execution order of the shaders. The order in which the shaders are executed, as represented by state transition between the nodes of the finite state machine, may then be used to identify the key frame and\/or the upcoming animation scenario that includes the key frame.","The ability to detect the upcoming animation scenario may provide flexibility in the manipulation of the graphics data of the animation scenario prior to and\/or during animation scenario rendering. For example, the use of shader-based finite state machine frame detection may enable the insertion of additional graphical elements (e.g., graphical advertisements related to the animation scenario) during the rendering of the detected upcoming animation scenario. In another example, the use of shader-based finite state machine frame detection may enable the rendering of an animation scenario to be performed via alternative software and\/or hardware platforms. The use of alternative software and\/or hardware platforms may enable the animation scenario to be presented using legacy hardware and\/or software, thereby facilitating backward compatibility. Various examples of the shader-based finite state machine frame detection mechanism in accordance with the embodiments are described below with reference to .","Exemplary Scheme",{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIGS. 1","FIG. 1"],"i":["a ","b ","a"],"b":["1","100","100","102","104","106","102","104","104","104","104","104","104","104","104","104"]},"Each of the shaders  may be one of a vertex shader, pixel shader, a geometry shader, or the like. As further described below, each of the shaders  may be in the form of computer-readable instructions, data structures, program modules, and\/or other data that execute on a graphics processing unit (GPU). Additionally, the shaders  may work cooperatively with other graphics processing software instructions that execute on the GPU, such as rasterizers, to render computer graphics that are suitable for presentation on a computer display. Accordingly, an application (e.g., video game) may activate the shaders , as well other graphics processing software instructions, to render various frames of an animation scenario.","In various embodiments, the rendering performed by the various shaders  in rendering a frame, such as frame , may be defined using a finite state machine. In such a finite state machine, the plurality of shaders  may be represented by the nodes of the machine, and the edges between the nodes may be indicative of the execution order. Accordingly, by assigning a unique identifier (ID) to each of the shaders , the finite state machine defined for a frame, such as the frame , may be identified using a unique shader ID sequence.","For example, in order to render the frame  of an animation scenario, the shader A A (e.g., pixel shader) may be used to build image pyramids by determining an average value of the pixels that are adjacent to each pixel in the frame . Subsequently, the shader B B (e.g., pixel shader) may be used to generate final lighting density for the frame .","Accordingly, the use of shaders A A and shader B B in this example may be defined in the form of finite state machine . As shown in the example finite state machine , Shader A A may transform an initial state (e.g., some precursor graphics of the frame ) into a \u201cState \u201d . Subsequently, Shader B B may transform \u201cState \u201d  of the finite state machine  into the final rendered frame . Moreover, the finite state machine  may be represented by a unique ID sequence that denotes the execution sequence of the finite state machine . For instance, in the case of the finite state machine , the execution order of the finite state machine  may be represented by a unique ID sequence  (i.e., A*B). In various embodiments, the ID sequence  may be stored in the data storage .","Likewise, in another example, a frame  of an animation scenario may be rendered with the execution of the shader A A, followed by the shader B B, then by the shader C C, and once again by the Shader A A. Thus, the rendering of the frame  in this example may be represented by the example finite state machine . As shown in the finite state machine , Shader A A may transform an initial state (e.g., some precursor graphics of the frame ) into a \u201cState \u201d . Subsequently, \u201cState \u201d  of the finite state machine  may be transformed in \u201cState \u201d  by the Shader B B. Next, \u201cState \u201d  of the finite state machine  may be transformed into \u201cState \u201d  by the shader C C. Finally, \u201cState \u201d  of the finite state machine  may be rendered into the frame  by the re-execution of the Shader A A. Accordingly, the execution order of the finite state machine (i.e., A*B*C*A), may be represented by an ID sequence  that is stored in the date storage .","It will be appreciated that the data storage  may store a plurality of other ID sequences, such as ID sequences -, that correspond to other finite state machines (not shown) of additional frames in different animation scenarios.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","i":"b ","b":["112","126","132","106","102","106"]},"During graphics rendering, the computing device  may execute a plurality of shaders , as well other graphics processing software instructions on a GPU to render various animation scenarios. The computing device  may perform the execution under the direction of an application (e.g., video game, video viewing program, etc.).","In various embodiments, the computing device  may identify the plurality of different shaders  that are to be executed for the rendering of a particular frame of an animation scenario. This shader identification information may be referred to as an input shader ID sequence. In such embodiments, the computing device  may identify an input shader ID sequence prior to executing the shaders identified in the input shader ID sequence. The computing device  may then compare the input shader ID sequence to one or more ID sequences that are stored in the data storage . Thus, if the shader ID sequence matches a particular stored sequence ID of a finite state machine, the computing device  may provide alternative processing to the particular frame and\/or the animation scenario that includes the frame.","For example, the computing device  may become aware that a finite state machine  is called by the application to render a particular frame. The finite state machine  may specify that the precursor graphics of the particular frame is to be transformed into a \u201cState \u201d  by a shader A A prior to being further transformed by shader B B. Accordingly, the computing device  may determine that the ID sequence (A*B) of the finite state machine  match the ID sequence  stored in the data storage . Based on this detection, the computing device  may further determine that the particular frame to be rendered by at least some of the shaders  is the frame . Thus, the computing device  may provide alternative processing to the frame  and\/or the animation scenario that includes the frame .","Likewise, in another example, the computing device  may become aware that a finite state machine  is called by the application to render a particular frame. The finite state machine  may specify that the precursor graphics of the particular frame is to be transformed into a \u201cState \u201d  by a shader A A, into a \u201cState \u201d  by a shader B B, and into a \u201cState \u201d  by a shader C C prior to being transformed once more by the shader A A. Accordingly, the computing device  may determine that the ID sequence (A*B*C*A) of the finite state machine  match the ID sequence  stored in the data storage . Based on this detection, the computing device  may further determine that the particular frame to be rendered by at least some of the shaders  is the frame . Thus, the computing device  may provide alternative processing to the frame  and\/or the animation scenario that includes the frame .","In various embodiments, the alternative processing may include adding additional graphical elements into the identified animation scenario (e.g., animation scenario that includes the frame ). In a non-limiting example, visual advertisements may be added to the identified animation scenario. Various special visual effects may be added to the identified animation scenario in another non-limiting example.","In other embodiments, the alternative processing may include a diversion of the identified animation scenario (e.g., animation scenario that includes the frame ) for processing by alternative hardware\/software. In a non-limiting example, an application may specify that the identified animation scenario is to be rendered by legacy software, such as a shader that is no longer implemented on the computing device  or a special hardware GPU that is no longer available to the computing device . Accordingly, the identified animation scenario may be diverted to an alternative algorithm (e.g., software patch) that generates a substitute animation scenario using different graphics processing instructions and\/or hardware.","In some embodiments, the substitute animation scenario may be identical, or substantially similar, in visual appearance to the identified animation scenario. In other embodiments, the substituted animation may differ (e.g., less visually complex or more visually complex) from the identified animation scenario. In at least some of these embodiments, the substitute animation scenario may seamlessly replace the original identified animation scenario to provide a similar viewing experience for a user.","Exemplary Components",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":["102","102","202","204","206","204","102"]},"The memory  may include volatile and\/or nonvolatile memory, removable and\/or non-removable media implemented in any method or technology for storage of information, such as computer-readable instructions, data structures, program modules or other data. Such memory may include, but is not limited to, random accessory memory (RAM), read-only memory (ROM), electrically erasable programmable read-only memory (EEPROM), flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, RAID storage systems, or any other medium which can be used to store the desired information and is accessible by a computer system.","The memory  may store program instructions. The program instructions, or modules, may include routines, programs, objects, components, and data structures that perform particular tasks or implement particular abstract data types. The selected program instructions for implementing a shader-based animation scenario detection mechanism may include graphics processing modules , a user interface module , an assignment module , a finite state machine module , a sequence module , a shader monitor module , a comparison module , an insertion module , an emulation module , and a data storage module .","The graphics processing module  may include the shaders  (), rasterizers, as well as other rendering components necessary for generating graphics for display.","The user interface module  may interact with a user via a user interface (not shown). The user interface may include a data output device such as a display, and one or more data input devices. The data input devices may include, but are not limited to, combinations of one or more of keypads, keyboards, mouse devices, touch screens, microphones, speech recognition packages, and any other suitable devices or other electronic\/software selection methods.","The assignment module  may be used to assign a unique identifier (ID) to each of the shaders  that is used to render graphics. In at least one embodiment, the assignment module  may present each of the shaders  to a user via the user interface module  to enable the user to manually assign an identifier to each of the shaders . In other embodiments, the assignment module  may automatically assign unique IDs to each of the shaders  without user intervention. The unique ID assigned to each of the shaders  may be stored in the data storage module .","The finite state machine module  may be used to define one or more finite state machines, whereby each finite state machine corresponds to a frame (e.g., a key frame from an animation scenario). In this way, each key frame may be used to identify a particular animation scenario. As described above, one or more of the plurality of shaders  used to render a key frame may be represented by the nodes of a finite state machine, and the edges between the nodes may be indicative of the execution order. Accordingly, by assigning a unique identifier (ID) to each of the shaders , the finite state machine defined for a particular key frame, such as the frame , may be identified by a unique shader ID sequence. In various embodiments, the one or more key frames from the corresponding animation scenarios may be identified by a user. The user may then interact with the finite state machine module  via the user interface module  to define a finite state machine for each key frame. In some embodiments, the user may input the one or more key frames into the finite state machine module , and the module  may define a finite state machine for each key frame.","Since the finite state machine for each frame represents the shaders used to render the frame as well as the execution order of the shaders, and each shader is represented by a unique shader ID, the finite state machine definition module  may further using a sequence module  to derive a unique shader ID sequence for each frame.","The sequence module  may derive a shader ID sequence for each finite state machine based on the nodes and the edges of the finite state machine. As described above, the nodes of a finite state machine represent the shaders used to render a frame, and the edges represent the execution order of the shaders. For example, a finite state machine may include a first shader, such as shader A A, that transforms the precursor graphics of a frame to a first state (e.g., \u201cstate \u201d ), and a second shader, such as shader B B, that transform the first state into a rendered frame. For such a finite state machine, the sequence module  may derive the Shader ID sequence \u201cA*B\u201d for such a finite state machine.","The sequence module  may store may store the one or more derived shader ID sequences in the data storage module . In various embodiments, the derived shader ID sequences may be stored in the data storage module  in the form of a state machine transition table. It will be appreciated that in some embodiments, the sequence module  may be an integral part of the finite state machine module .","The shader monitor module  may monitor the shaders  that are to be executed for each frame in various animation scenarios, as graphics are rendered by the GPU under the direction of an application (e.g., video game). The shader monitor module  may then retrieve the shader ID assigned to each of the shaders  that are to be executed. The shader monitor module  may then derive a shader ID sequence for each of the frame to be rendered. In various embodiments, the shader monitor module  may use the finite state machine module  and the sequence module  to retrieve and derive the shader ID sequence for each of the frames to be rendered. The shader monitor module  may then pass each execution shader ID sequence to the comparison module .","The comparison module  may receive the one or more input shader ID sequences from the shader monitor module , whereby each input shader ID sequence corresponds to a finite state machine. In turn, the comparison module  may load the derived shader ID sequences of the finite state machines for the frames of interest. In various embodiments, the derived shader ID sequences may be in the form of a state machine transition table.","The comparison module  may then compare each of the execution shader ID sequences to the derived shader ID sequences for the frames of interest. As previously described, the derived shader ID sequences are derived by the finite state machine definition module  and stored in the data storage module . When the comparison module  determines that an input ID sequence from the shader monitor module  matches a derived shader ID sequence of a finite state machine stored in the data storage module , the comparison module  may determine that a particular animation scenario that is to be rendered has been identified and alert the insertion module  or the emulation module . In various embodiments, the comparison module  may perform comparisons that detect the frames of the various animation scenarios by combining the multiple simple state machines for each key frame into one comprehensive finite state machine.","The insertion module  may cause the graphics processing component  to insert one or more additional graphical elements into one or more frames of the indentified animation scenario. In various embodiments, the additional graphical elements may include, but is not limit to, advertisements, announcements, other visual effects, and\/or the like.","The emulation module  may include an emulator that diverts the graphical processing of the identified animation scenario to alternative software and\/or hardware. In a non-limiting example, an application may specify that the identified animation scenario is to be rendered by legacy software, such as a shader that is no longer implemented on the computing device  (and ) or a special hardware GPU that is no longer available on the computing device . Accordingly, the emulation module  may divert the identified animation scenario to an alternative algorithm (e.g., software patch) that generates a substitute animation scenario using different graphics processing instructions and\/or hardware. In at least one embodiment, the substitute animation scenario may seamlessly replace the original identified animation scenario to provide a similar viewing experience for a user.","It will be appreciated that some embodiments, the finite state machine module , the sequence module , the shader monitor module , the comparison module , the insertion module  may be incorporated into the emulation module .","The data storage module  may be configured to store data in a portion of memory  (e.g., a database). The data storage module  may include the data storage  (). In various embodiments, the data storage module  may be configured to store the shader IDs assigned to each of the shaders . The data storage module  may also store the finite state machines defined for various frames, as well as the unique ID sequences derived for the frames. In at least some embodiments, the derived shader ID sequences may be stored in the data storage module  in the form of a state machine transition table.","Exemplary Process",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 3","FIG. 3","FIGS. 1"],"b":["300","300","102","1","2"],"i":["a","b"]},"At block , the shader-based detection mechanism may assign a unique identifier (ID) may to each of the shaders  that are used to render a plurality of animation sequences via a graphics processing unit (GPU), such as GPU  (). For example, the shaders  may facilitate the rendering of the animation sequences under the direction of application (e.g., video game). In various embodiments, the assignment of the ID to each of the shaders  may be accomplished manually by a user, or by an assignment module  ().","At block , the shader-based detection mechanism may identify a key frame from each of the animation sequences of interest. The animation sequences of interest are sequences that may be designated for alternative graphics processing (e.g., insertion of additional of graphical elements during processing, processing using alternative hardware and\/or software, etc.). A key frame may be a frame that, once encountered during graphics processing, enables the transition of its corresponding animation scenario to alternative processing mechanisms. In various embodiments, the key frame may be designated by a user based on analyzing the underlying offline source code, and\/or by executing the application that calls the rendering of the animation scenario.","At block , the shader-based detection mechanism may define a finite state machine for each key frame. In various embodiments, the one or more of the shaders  used to render each key frame may be represented by the nodes of a finite state machine, and the edges between the nodes may be indicative of the execution order.","At block , the shader-based detection mechanism may derive a shader ID sequence for each finite machine state. In various embodiments, each shader ID sequence may be derived based on the unique IDs of the one or more shaders  used to render the corresponding key frame. The derived shader ID sequences may be stored in a data storage, such as data storage  (, ). In this way, the finite state machine defined for each key frame, such as the frame  (, ), may be identified using a corresponding unique shader ID sequence.","At block , the shader-based detection mechanism may identify the input shader ID sequence of a frame that is to be rendered during execution of the application (e.g., video game). In various embodiments, the unique shader ID for each of the shaders  that are to be executed for the rendering of the frame may be obtained to derive a corresponding input shader ID sequence. In various embodiments, the input shader ID sequence for a frame that is to be rendered may be derived by defining a finite state machine for the frame in the same way as for a key frame.","At block , the shader-based detection mechanism may compare the input shader ID sequence of the frame that is to be rendered with the derived shader ID sequences that are stored in the data storage  (, ). In various embodiments, the comparison may be performed by combining the multiple simple state machines for each key frame into one comprehensive finite state machine during the comparison.","At decision block , the shader-based detection mechanism may determine whether the input shader ID sequence matches one of the one or more derived shader ID sequences that are stored in the data storage  (, ). If it is determined that the input shader ID sequence matches one of the one or more derived shader ID sequences (\u201cyes\u201d at decision block ), the process  may proceed to block .","At block , the shader-based detection mechanism may provide the animation scenario that includes the key frame having the matching input Shader ID sequence with alternative processing. In some embodiments, additional graphical elements (e.g., visual advertisements) may be inserted into the animation scenario. In other embodiments, the animation scenario may be diverted to emulation software and\/or hardware for alternative graphical rendering.","However, if it is determined that the input shader ID sequence does not match one of the one or more derived shader ID sequences (\u201cno\u201d at decision block ), the process  may proceed to block .","At block , the shader-based detection mechanism may execute the animation scenario that includes the key frame using original graphical processing. In various embodiments, the graphical processing may involve one or more of the shaders  identified at block , as well as other graphical processing components.","At decision block , the shader-based detection mechanism may determine whether there are additional frames to be analyzed. For example, the application may provide that other animation scenarios that include additional frames are to be processed using the one or more shaders . Thus, if it is determined that there are additional frames to be processed (\u201cyes\u201d at decision block ), the process  may loop block to block , where additional frames may be analyzed. However, if it is determined that there are no additional frames to be process (\u201cno\u201d at decision block ), the process  may end at block .","Exemplary Computing Environment",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 4","FIGS. 1 and 2","FIG. 4"],"b":["400","102","400","400","400"]},"In a very basic configuration, computing system  typically includes at least one central processing unit , a graphics process unit (GPU) , and system memory . Depending on the exact configuration and type of computing device, system memory  may be volatile (such as RAM), non-volatile (such as ROM, flash memory, etc.) or some combination of the two. System memory  typically includes an operating system , one or more program modules , and may include program data . The operating system  includes a component-based framework  that supports components (including properties and events), objects, inheritance, polymorphism, reflection, and provides an object-oriented component-based application programming interface (API), such as, but by no means limited to, that of the .NET\u2122 Framework manufactured by the Microsoft Corporation, Redmond, Wash. The device  is of a very basic configuration demarcated by a dashed line . Again, a terminal may have fewer components but will interact with a computing device that may have such a basic configuration.","Computing system  may have additional features or functionality. For example, computing system  may also include additional data storage devices (removable and\/or non-removable) such as, for example, magnetic disks, optical disks, or tape. Such additional storage is illustrated in  by removable storage  and non-removable storage . Computer storage media may include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information, such as computer readable instructions, data structures, program modules, or other data. System memory , removable storage  and non-removable storage  are all examples of computer storage media. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computing system . Any such computer storage media may be part of device . Computing system  may also have input device(s)  such as keyboard, mouse, pen, voice input device, touch input device, etc. Output device(s)  such as a display, speakers, printer, etc. may also be included. These devices are well known in the art and are not discussed at length here.","Computing system  may also contain communication connections  that allow the device to communicate with other computing devices , such as over a network. These networks may include wired networks as well as wireless networks. Communication connections  are some examples of communication media. Communication media may typically be embodied by computer readable instructions, data structures, program modules, etc.","It is appreciated that the illustrated computing system  is only one example of a suitable device and is not intended to suggest any limitation as to the scope of use or functionality of the various embodiments described. Other well-known computing devices, systems, environments and\/or configurations that may be suitable for use with the embodiments include, but are not limited to personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-base systems, set top boxes, game consoles, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and\/or the like.","The ability to detect the upcoming animation scenario may provide flexibility in the manipulation of the graphics data of the animation scenario prior to and\/or during animation scenario rendering. For example, the use of shader-based finite state machine frame detection may enable the insertion of additional graphical elements during the rendering of the detected upcoming animation scenario. In another example, the use of shader-based finite state machine frame detection may enable the rendering of an animation scenario to be performed via alternative software and\/or hardware platforms.","In closing, although the various embodiments have been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended representations is not necessarily limited to the specific features or acts described. Rather, the specific features and acts are disclosed as exemplary forms of implementing the claimed subject matter."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The detailed description is includes references to the accompanying figures. In the figures, the left-most digit(s) of a reference number identifies the figure in which the reference number first appears. The use of the same reference number in different figures indicates similar or identical items.",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIGS. 1","i":["a ","b "],"b":"1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
