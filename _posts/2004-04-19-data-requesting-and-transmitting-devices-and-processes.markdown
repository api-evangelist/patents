---
title: Data requesting and transmitting devices and processes
abstract: The present invention concerns a data requesting device enabling flexible obtaining of data, notably AV (Audio/Video) data, with possibly limited required resources in terms of processing, memory and storing, included from a remote server through a WAN. The requesting device of the invention may notably allow to pause and retrieve a movie being played from such a server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09191702&OS=09191702&RS=09191702
owner: THOMSON LICENSING
number: 09191702
owner_city: Boulogne-Billancourt
owner_country: FR
publication_date: 20040419
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["The present invention relates, among other things and without restriction, to data requesting and transmitting devices and processes, notably for VOD (for \u201cVideo On Demand\u201d), as well as to corresponding products.","According to existing techniques available for PCs (for \u201cPersonal Computers\u201d), it is possible to order video and\/or audio data (hereinafter noted \u201cAV data\u201d) from a server through the Internet, by connecting a requesting PC to the server and giving thereto the IP (for \u201cInternet Protocol\u201d) address of the PC. This is applied for example to trailers or advertisements. Those techniques, which rely on streaming, enable not only to download AV data in storing spaces for later displaying, but also to get the AV data at the same time as they are displayed.","However, such achievements require correspondingly high local resources at the PCs, in terms of CPU (for \u201cCentral Processing Unit\u201d) processing and of memory, to store and exploit suitably the received data. Otherwise, risks are relatively high of having problems at the receiving side, like for example overflow or data loss.","It is also known to obtain AV data from a server with a PC through a local network, by reading selected information stored in the server and transferring it in a buffer of the PC, and by playing the AV data accumulated in the buffer at the same time the data continue to be read, as soon as the buffer contains enough information (typically a few seconds).","Such a technique is only available for networks of limited sizes, and is notably not appropriate for WANs (for \u201cWide Area Networks\u201d), since the correct playing of AV data by a PC requires regular and fast access to the server in which they are stored.","Document JP 2002-215516 discloses a downloading control method, in which parts of data are sequentially requested from a server by a terminal (like a portable telephone), for those data being streamed to the terminal and exploited therein. To avoid overflow, the terminal repeatedly requires transfer of partial data of a maximum size, based on remaining available size in a buffer memory used in the terminal. Also, requests are sent to the server when a remaining amount of data in the buffer decreases below a predetermined threshold.","Though that technique enables flexible adaptation of the server to the terminal, even using a small size buffer in the latter, it requires repeated operations for computing the available space and communicating it to the server. Also, the streaming rate adaptation at the server side may become heavy to execute when several terminals are simultaneously requiring data.","The present invention concerns a data requesting device enabling flexible obtaining of data, notably AV (Audio\/Video) data, with possibly limited required resources in terms of processing, memory and storing, included from a remote server through a WAN. The requesting device of the invention may notably allow to pause and retrieve a movie being played from such a server.","The invention also concerns a data requesting process, data transmitting device and process, and products, corresponding to that requesting device and able to offer similar advantages.","To that effect, the invention is related to a data requesting device as defined in claim .","Surprisingly, the invention relies on an adaptation of the server streaming to the resources of the receiver, but without requiring repeated operations and communications from the receiver to the server during the streaming. By contrast, a mere initial negotiation between both may be enough.","Also, the invention appears to make possible sensibly improved shared pass band between simultaneous transmissions from a server to several receivers. This is due to the fact that for a given data transmission to a receiver, between the sending of two consecutive data portions, the server is free to work on other tasks.","The first and second communication networks used with the data requesting device may consist in a single bi-directional communication network. In various embodiments, they consist in WAN networks like for example the Internet, or in LAN networks (for \u201cLocal Area Network\u201d) such as for example home networks or networks used locally for Companies or for restricted geographic areas (e.g. for a building). Also, the first communication networks may comprise a broadcasting network for streaming the requested data and a bi-directional network (for example telephone link) to transmit control information.","The data requesting device is preferably compliant with any of dependent claims  to .","Notably, in embodiments involving pause control signals, the production of the latter at the data requesting device may in particular be triggered intentionally by a user via a user interface, or triggered automatically so as to avoid overflow in a central memory.","Also, the resuming of the data streaming after pausing at the server side may in particular be automatic after a given duration (that may notably be transmitted by a user within a pause control signal, for example a five minutes pause), or triggered by the sending of a resume control signal from the data requesting device.","The invention also concerns a decoder comprising a data requesting device according to the invention, and a data requesting process as defined in claim .","The invention further relates to a data transmitting device as defined in claim , and preferably to one of the embodiments mentioned in any of claims  to , and to a data transmitting process as defined in claim .","A further object of the invention is a computer program product comprising program code instructions for executing the steps of the data requesting process or the data transmitting process according to the invention, when that program is executed on a computer. By \u201ccomputer program product\u201d, it is meant a computer program support, which may consist not only in a storing space containing the program, such as a diskette or a cassette, but also in a signal, such as an electrical or optical signal.","In , the represented blocks are purely functional entities, which do not necessarily correspond to physical separated entities. Namely, they could be developed in the form of software, or be implemented in one or several integrated circuits.","A server  () provided with a data transmitting device  is able to stream data to at least one receiver , provided with a data requesting device , through a first network . The receiver  is for its part able to transmit information to the server  via a return path through a second network . For example, the first network  is a broadcast network, which may rely notably on satellite, radio broadcasting, or cable, while the second network  is a telephone network. Both networks  and  may also be constituted by a unique bi-directional network, for example based on DSL communication (for \u201cDigital Subscriber Loop\u201d).","The data transmitting device  of the server  () comprises:\n\n","The data requesting device  of the receiver  comprises ():\n\n","A detailed specific embodiment, with reference to , will enable to better understand the functioning of the data transmitting device  and data requesting device  described above.","A communication environment () comprising the server  and IRDs (IRD . . . IRDn) respectively noted - . . . -(each of them being similar to the receiver  above, the reference \u201c\u201d being used below as a generic notation) communicate through PSTN wires (for \u201cPublic Switch Telephone Network\u201d) which constitute both networks  and  (same networks) as a PSTN network . That environment provides a real video streaming system fitting on the Internet world. The server  is connected to a first VDSL modem (for \u201cVery high speed Digital Subscriber Loop\u201d)  by means of an Ethernet link, while the IRDs are for instance respectively associated with TV sets and are connected to a second VDSL modem  via a switch , through an Ethernet link.","The VDSL modems  and  enable a high bit rate, up to 60 Mbit\/s. Thus, the described communication environment offers a real Video-On-Demand system, where end-users may choose their dedicated programs from a catalogue, and ask for playing and pausing them, without useless bandwidth usage.","As an example, the described communication environment comprises set-top-boxes (hereinafter \u201cSTBs\u201d) - to -with LAN connectivity (for \u201cLocal Area Network\u201d) constituting the IRDs, VDSL modems  and , and a PC server  based on the Linux technology. Of course, an operating system other than Linux could be used.","Each of the IRDs comprises a requesting device , while the server  comprises an associated transmitting device .","In variants:\n\n","A\/ System Description: Specificities","The main requirement is to serve on request a video\/audio stream to a user. The limit is fixed to up to 5 simultaneous streams according to the present embodiment in other embodiments, there may be a different limit, or no limit at all.","The end-users of the TV sets have notably the capability to choose one program from a catalogue, play it, stop it and pause\/resume it.","A1\/ Network","The VDSL modems  and , as the ADSL ones, use the actual user local telephone line. They have Ethernet or USB (for \u201cUniversal Serial Buses\u201d) connectors.","The transport format is an MPEG2 (for \u201cMoving Picture Experts Group\u201d) SPTS (for \u201cSimple Program Transport Stream\u201d), several audio information sets being possibly transported for language purpose. In this way, the STBs have naturally the capability to play this type of stream easily.","At the server side, the PC  is connected through an Ethernet 100BT link (for \u201c100Base-T\u201d) to the modem .","At the user side, the STBs (up to four) are connected through an Ethernet 10BT link to the switch , which is a 100BT\/10BT switch. Any of the users may then share its VDSL line for different usages, like a home PC, other room STBs, and so on. Also, by using the switch, the collision spaces are split, thus no collision propagation may occur.","In the illustrated example, a specific protocol above UDP (for \u201cUser Datagram Protocol\u201d) protocol stack is used. Advantages of that solution (insofar as the links are fair enough), rely on the bandwidth delay introduced by the modem and on the current availability of STBs for which the Ethernet interface has only half-duplex capabilities; then, there is no need of a more complicated and less efficient protocol. Namely, experimentation shows that TCP (for \u201cTransmission Control Protocol\u201d) protocol stack has real limitation with this network environment, even using the so-called \u201cWindow Scale Option\u201d.","A2\/ Server ","Based on Linux, it:\n\n","The server  is advantageously in a central office, just linked to DSLAM (for \u201cDigital Subscriber Line Access Multiplexer\u201d). Its catalogue is then managed by operators in an efficient way (refresh method, cache algorithms . . . ).","A3\/ Set-Top-Boxes - . . . -","They are able to:\n\n","B\/ The Protocol","B1\/ Specificities","The server  and STBs - . . . -are connected each other on TCP\/IP LAN. In practice (), one of the STBs  connects socket to server  and requests an audio\/video file. The server  then puts that file from a hard disk driver  through a buffer socket  in a loop process only ended by a later STB request.","The file is transmitted via the network  to the socket buffer  of the STB . From there, it is transferred to the central memory  constituted here by a FIFO (for \u201cFirst In, First Out\u201d) having for example a size of 1 Mbyte, and then to an MPEG MLMP buffer  (for \u201cMain Level Main Profile\u201d).","File transfer protocol, specifically designed, allows:\n\n","The protocol is built to:\n\n","This makes UDP quite appropriate as lower protocol.","The system may be seen as if a client (namely at one of the IRDs) requests data from a storage medium, which here is in a network. Thus, the client regulates the data streaming, according to the MPEG decoding processes.","Server Computations","The protocol being based on UDP, and the server  having big bandwidth capacity, the server has to take care not to overflow the client. Parameters are given by the client at a setup time to ensure this. These parameters are:\n\n","The server  streams data according to these parameters. It computes a value \u201cUNIT_SIZE\u201d, giving a size of the portions to be sequentially sent to the requesting STB, from the socket buffer size. In an advantageous example, that value is given by:\n\nUNIT_SIZE=CSOCKBUFSZ\/8.\n","The factor \u201c8\u201d enables to have portions of small sizes at the server side, which proves to fragment efficiently the streamed data. Namely, the probability of overflow at the receiving side becomes very low, and the high partitioning may improve share pass band with respect to other streams. Lower factor is however possible (up to 2 for example), as well as higher factor if the server enables it.","The server  loops sending data putting a ceiling corresponding to that value (looping \u201cUNIT_SIZE\u201d by \u201cUNIT_SIZE\u201d), and inserting a delay in order to not override the CBW bit rate. A period \u201cPERIOD\u201d for sending the successive data portions is defined as\n\nPERIOD=UNIT_SIZE\/CBW.\n","That period is typically much shorter than the keep alive sending period.","Client Computations","Two parameters are computed by the client in order to pause\/resume data transmission without any hole in the needed bandwidth for streaming a file. These parameters are giving thresholds of a filling level in the central FIFO memory  of the STB , having a size \u201cFIFO-SIZE\u201d, intended to temporally store the data coming from the input buffer , before their processing. On one hand, a low FIFO threshold \u201cLFIFO\u201d gives a downward limit for ordering resuming of data streaming when it has been paused, by means of a specific message thereto called \u201cXON\u201d. On the other hand, a high FIFO threshold \u201cHFIFO\u201d, gives an upward limit for pausing the data streaming from the server  when that threshold is exceeded in spite of data processing, by means of specific message thereto called \u201cXOFF\u201d.","Both threshold values LFIFO and HFIFO are chosen so that:\n\nLFIFO<=HFIFO\n\nFIFO-SIZE\u2212HFIFO>=CBW*RTT\/2\n\nLFIFO>=CBW*RTT\/2\n\nwhere \u201cRTT\u201d is the Round-Trip-Time, namely the delay between sending a packet and getting its acknowledgement (the size of the FIFO is big enough so that: FIFO-SIZE>CBW*RTT). This time is measured by the client at the setup time, and may be re-evaluated in a periodic basis. It is representative of the amount of data possibly remaining to be received in the network when communication from the server is interrupted.\n","Input Socket Buffers ","These input buffers are embedded with UDP\/IP stack. They are large enough to not overrun the STB . The server  computes its streaming portion according to the client socket buffer size.","Central FIFO ","This central buffer  is used to deal with burst side-effects. The client starts decoding only when this FIFO has enough data, which is determined by means of a third FIFO threshold, which is a middle threshold \u201cMFIFO\u201d having a value comprised between low and high thresholds LFIFO and HFIFO. That threshold MFIFO for triggering processing of the data (transfer to processing unit is in an efficient embodiment equal to the low threshold LFIFO. As mentioned above, the client also pauses the server streaming when the FIFO is full (threshold HFIFO), and resumes the server streaming when the FIFO is low (threshold LFIFO).","The pausing and resuming above are respectively done by means of the XOFF and XON messages sent to the server  from the STB . The same signals may be used by the client to decide at any moment to pause the streaming and later to resume it.","Further, in the advantageous achievement described here, the keep alive messages continue to be sent regularly and checked by the server, even during a pause state.","In a first specific implementation, the thresholds are chosen with the following values:\n\nLFIFO=MFIFO=\u00bcFIFO-SIZE; HFIFO=\u00beFIFO-SIZE.\n\nWith FIFO-SIZE being worth 1 Mbytes, this gives:\n\nLFIFO=MFIFO=250 kbytes, HFIFO=750 kbytes.\n","Now, in the case the data are received at the streaming rate of CBW=6 Mbits\/s and the data processing rate is a decoding rate which corresponds to an encoding bit rate \u201cEBR\u201d equal to 4 Mbits\/s, streaming periods (\u201cXON\u201d) of 2 seconds alternate with pause periods (\u201cXOFF\u201d) of 1 second. Indeed, the effective filling rate of the FIFO when streaming is on is (CBW-EBR) (here 2 Mbits\/s), while the emptying rate when streaming is off is EBR (here 4 Mbits\/s).","In a second specific implementation, the thresholds are chosen with following values:\n\nLFIFO=MFIFO=CBW*RTT\/2\n\nHFIFO=FIFO-SIZE CBW*RTT\/2\n\nWith FIFO-SIZE=1 Mbytes and RTT=100 msec, this gives:\n\nLFIFO=MFIFO=39,321 bytes, HFIFO=960,679 bytes.\n","Now, in the case the streaming rate is CBW and is worth 6 Mbits\/s and the processing rate is EBR equal to 4 Mbits\/s, streaming periods of 7.4 s alternate with pause periods of 1.85 s.","MLMP MPEG Buffers ","These buffers are provided for correctly decoding an MPEG2 PES (for \u201cPacket Elementary Stream\u201d) stream. The STB embedded audio\/video decoder stack is used. The Main-Level\/Main-Profile is implemented.","Because there is no encoding process at server side, the PCRs (for \u201cProgram Clock References\u201d) are not managed, but the local VCXO (for \u201cVoltage Control Crystal Oscillator\u201d) is set to 27 MHz. In any way, audio is synchronized on video using video and audio PTSs (for \u201cProgram Time Stamps\u201d). The decoding processes is buffer-underflow tolerant, and does not reset or flush the MLMP buffers  on errors.","B2\/Protocol Stack","The protocol and streaming state transition diagrams are respectively represented on  and , from server side.","Protocol stack used is as follows:",{"@attributes":{"id":"p-0088","num":"0130"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Layer","Protocol"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"5\/7 (application)","Application specific socket"]},{"entry":[{},"4 (transport)","UDP"]},{"entry":[{},"3 (network)","IP"]},{"entry":[{},"2 (link)","Ethernet"]},{"entry":[{},"1 (physical)","Ethernet 802.3"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Socket is open over UDP protocol.","B3\/Application Protocol","Process is cut in the following steps:\n\n","Packets built in application layer are messages. All messages have a generic format\n\n","All data types are network aligned, that is big-endian (MSB, for \u201cMost Significant Bit\u201d).","The main protocol operations from server side are as follows (, where \u201crecv\u201d stands for \u201creceive\u201d):\n\n","The streaming operations from the server side are as follows ():\n\n","Thanks to that process, the server  is able to be quite adapted to the receivers  specificities for the video streaming. Further, that process may possible to use only the bandwidth that is effectively necessary for the client to really exploit the streamed data.","In an advantageous embodiment, the time limit for triggering the alarm is given by the expected period time increased by a duration depending on the round-trip time RTT, for example three or four RTT.","In an improved version regarding the checking at the server side of correct reception of the streamed data at the client side, the alarm is only triggered in case no keep alive message is received for a duration sensibly longer than the keep alive period, for example during three time that period. This enables to take into account possible delays in the transmission between the STB and the server.","According to a further improvement in the checking method, once the expected time for receiving the keep alive message at the server side has passed and no such message has arrived, the server warns the client STB, which then immediately sends back again a keep alive message if still in an active reception state. This improves the reliability of the system, by considerably decreasing risks of erroneous interruptions of the streaming process due to transmission problems in the network, notably due to packet loss.","Both features above (determination of the critical time and warning messages) are advantageously combined.","a\/ Connect Socket",{"@attributes":{"id":"p-0102","num":"0168"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Server","STB"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Socket",{},"Socket"]},{"entry":["SetOption",{},"SetOption"]},{"entry":"Bind"},{"entry":"RecvFrom (IN port ="},{"entry":"1040, OUT ClientIpAddr)"},{"entry":[{},{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00001","he":"2.46mm","wi":"2.79mm","file":"US09191702-20151117-P00001.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}},"SendTo (IN portDest = 1040,"]},{"entry":[{},{},"IN IpAddrDest)"]},{"entry":"Fork"},{"entry":"Socket"},{"entry":"SetOption"},{"entry":"Bind(IN port ephemeral,"},{"entry":"IN ClientIpAddr)"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"IP addresses are constants.","b\/ Initialize Connection",{"@attributes":{"id":"p-0105","num":"0171"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Server","STB"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Read( . . . )",{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00002","he":"2.46mm","wi":"2.79mm","file":"US09191702-20151117-P00001.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}},"Write(AL_CONNECT)"]},{"entry":["Write(AL_CONNECT_ACK)","\u2192","Read( . . . )"]},{"entry":[{},{},"Compute RTT"]},{"entry":["Read( . . . )",{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00003","he":"2.46mm","wi":"2.79mm","file":"US09191702-20151117-P00001.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}},"Write(AL_CONNECTED,"]},{"entry":[{},{},"CBW, CSOCKBUFSZ,"]},{"entry":[{},{},"KEEPALIVE repeat period)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["AL_CONNECT = 0x03","Unused (4 longs)"]},{"entry":["(1 long)","(4 longs)"]},{"entry":["AL_CONNECT_ACK = 0x04","Unused (4 longs)"]},{"entry":["(1 long)","(4 longs)"]},{"entry":["AL_CONNECTED = 0x05","Client max bitrate (CBW) in Kbit\/sec"]},{"entry":["(1 long)","(1 long)"]},{"entry":[{},"Client buffer socket size"]},{"entry":[{},"(CSOCKBUFSZ) in bytes (1 long)"]},{"entry":[{},"Client keep alive message"]},{"entry":[{},"(KEEPALIVE) repeat period in msec"]},{"entry":[{},"(1 long)"]},{"entry":[{},"Unused (1 long)"]},{"entry":[{},"(4 longs)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"c\/ Open\/Close a Stream",{"@attributes":{"id":"p-0107","num":"0173"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Server",{},"STB"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Read( . . . )",{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00004","he":"2.46mm","wi":"2.79mm","file":"US09191702-20151117-P00001.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}},"Write(AL_FILE_LIST)"]},{"entry":"Open file"},{"entry":["Write(AL_FILE_LIS_ACK,","\u2192","Read( . . . )"]},{"entry":"DATA_PACKET_LEN)"},{"entry":["Write(AL_FILE_LIST","\u2192","Read( . . . )"]},{"entry":"_DATA, . . . )"},{"entry":["Wrtie(AL_FILE_LIST","\u2192","Read( . . . )"]},{"entry":"_DATA, . . . )"},{"entry":[". . .","\u2192",". . ."]},{"entry":["Read( . . . )",{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00005","he":"2.46mm","wi":"2.79mm","file":"US09191702-20151117-P00001.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}},"Write(AL_OPEN,"]},{"entry":[{},{},"file_index)"]},{"entry":["Read( . . . )",{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00006","he":"2.46mm","wi":"2.79mm","file":"US09191702-20151117-P00001.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}},"Write(AL_CLOSE)"]},{"entry":"Close file"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["AL_FILE_OPEN = 0x01","File index in the catalogue (1 long)"]},{"entry":["(1 long)","Unused (3 longs)(4 longs)"]},{"entry":["AL_CLOSE = 0x02","Unused (4 longs)"]},{"entry":["(1 long)","(4 longs)"]},{"entry":["AL_FILE_LIST = 0x01","Unused (4 longs)"]},{"entry":["(1 long)","(4 longs)"]},{"entry":["AL_FILE_LIST_ACK = 0x04","Number of AL_FILE_LIST_DATA"]},{"entry":["(1 long)","packets following in the stream"]},{"entry":[{},"(1 long)"]},{"entry":[{},"Unused (3 longs)"]},{"entry":[{},"(4 longs)"]},{"entry":["AL_FILE_LIST_DATA = 0x04","Catalogue description data, format"]},{"entry":["(1 long)","to be defined (4 long)"]},{"entry":[{},"(4 longs)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"d\/ Streaming",{"@attributes":{"id":"p-0109","num":"0175"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Server",{},"STB"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Write(stream_data)","\u2192","Read( . . . )"]},{"entry":["Write(stream_data)","\u2192","Read( . . . )"]},{"entry":[". . .",". . .",". . ."]},{"entry":["Read( . . . )",{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00007","he":"2.46mm","wi":"2.79mm","file":"US09191702-20151117-P00001.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}},"Write(AL_KEEP_ALIVE)"]},{"entry":"Restart timer alarm"},{"entry":["Write(AL_KEEP_ALIVE_ACK)","\u2192","Read( . . . )"]},{"entry":["Restart timer alarm",{},"Compute RTT"]},{"entry":["Write(stream_data)","\u2192","Read( . . . )"]},{"entry":["Write(stream_data)","\u2192","Read( . . . )"]},{"entry":[". . .",". . .",". . ."]},{"entry":["Read( . . . )",{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00008","he":"2.46mm","wi":"2.79mm","file":"US09191702-20151117-P00001.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}},"Write(AL_XOFF)"]},{"entry":"Pause streaming"},{"entry":"Wait for XON"},{"entry":["Read( . . . )",{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00009","he":"2.46mm","wi":"2.79mm","file":"US09191702-20151117-P00001.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}},"Write(AL_XON)"]},{"entry":"Resume streaming"},{"entry":["Write(stream_data)","\u2192","Read( . . . )"]},{"entry":["Write(stream_data)","\u2192","Read( . . . )"]},{"entry":[". . .",". . .",". . ."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["AL_KEEP_ALIVE = 0x08","Unused (4 longs)"]},{"entry":["(1 long)","(4 longs)"]},{"entry":["AL_KEEP_ALIVE_ACK = 0x0B","Unused (4 longs)"]},{"entry":["(1 long)","(4 longs)"]},{"entry":["AL_XOFF = 0x07","Unused (4 longs)"]},{"entry":["(1 long)","(4 longs)"]},{"entry":["AL_XON = 0x06","Unused (4 longs)"]},{"entry":["(1 long)","(4 longs)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"e\/ End Exchange and Close Sockets",{"@attributes":{"id":"p-0111","num":"0177"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Server","STB"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Alarm triggers because of",". . .","Exit, standby or crash"]},{"entry":[{},"no keep alive message"]},{"entry":[{},"Close socket",". . ."]},{"entry":[{},"Exit process"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"C\/ Set-Top-Boxes ","Once one of the STBs  sends \u201cAL_OPEN\u201d message, it waits until the server  sends stream data packets (reception is non blocking). The STB  reads as much as possible data from the socket, and releases the CPU (for \u201cCentral Processing Unit\u201d) for injection and decoding processes to be scheduled. One suitable algorithm consists in reading half buffer socket size at each schedule of the data pump , the latter being part of the requesting device  incorporated in the STB .","With presently available STB designs, the maximum measured sustained bit rate is around 6 Mbit\/s, which is high enough for good MPEG2 video and audio quality.","The data pump  gives directly to the input socket buffer  the \u201cWrite\u201d pointer of the central FIFO  and the contiguously available space of that FIFO (this avoids intermediate copy from socket buffer to FIFO buffer).","The volume of data taken during each transfer from the central FIFO  for processing, given by a \u201cLenAsked\u201d value, is half FIFO size and avoids heavy scheduling works. After such a FIFO transfer is fulfilled, LenAsked is the contiguously available size according to consumer pointer. The injector  being part of the requesting device  is intended to manage it.","If the user zaps from one flow to another, the socket, the FIFO  and the bit buffers  may be flushed.","The server  does not anticipate the read file. The read length and sent length are constant and smaller than internal input socket buffer  (CSOCKBUFSZ) in order to avoid burst transfers: protocol also regulates transmit rate with respect to consumer rate (CBW parameter central FIFO  managed by data pump  on STB ).","The IRD processing overview is explained below (see ), the various described elements being parts of the IRD requesting device.\n\n","For transmissions, a unit size of 32 kbytes is for example chosen (with a unit size of 50 kbytes, a transmission takes 20 ms). Namely, considering a rate of 4 Mbits\/s, it takes 2 seconds to fill the central FIFO , a full FIFO corresponding also to 2 seconds decoding.","Taking a chunk of 8 kbytes in the server file, it takes 16 msec to reach the client socket buffer. The same data are transferred into the FIFO  at an approximate rate of 2 to 4 kbytes\/msec, depending on the CPU embedded in the STB. Thus, the STB transferring process is negligible.","The central FIFO  absorbs the possible jitter from the server  and the network. Preferably, the bandwidth rate CBW of the client is greater than the encoding rate EBR. In cases where the values of EBR and CBW are close, the FIFO  may be smaller.\n\n","The injector  and its functions are now detailed (with reference to ).","Injection of data to SWTS input  is paced using a \u201cSWTS_REQ\u201d signal that is routed through the PTI \u201cDMA3\u201d channel. That SWTS_REQ signal is asserted when the internal SWTS FIFO  has room for at least 16 bytes. Each time the SWTS_REQ is low and there is data to be read from the X-Mbytes FIFO , a programmable number of bytes is transferred to the SWTS input . At the end of the complete transfer, an interrupt is set to signal injector task that data have been transferred.","In case of the SWTS entry, the destination pointer is fixed in video and audio compressed data FIFO, respectively noted  and : that injection is processed like \u201cCD_FIFO\u201d. A SWTS register address replaces CD_FIFO address and no increment is programmed directly by \u201cPTI_DMA3SETUP\u201d register (so: \u201cDMA3BLOCKMOVE=0\u201d).","PTI  Version Driver","The PTI driver is able to provide software support for DMA injection. It runs in \u201cPTI3\u201d hardware used in \u201cPTI1\u201d backwards compatible mode. In the presented embodiment, the only restriction is that interrupt mode is not allowed for signalling DMA transfer end: the call to the \u201cpti_data_dma_synchronize\u201d function blocks until the end of the DMA transfer.","Interconnecting PTI DMA3 with TSMUX ","The \u201cSWTS_REQ\u201d signal is multiplexed to the \u201cPTI NOT_CDREQ3\u201d signal by configuring \u201cCONFIG_CONTROL_A\u201d register (namely: \u201cPTIA_CDREQ3_MUXSEL[3:0]=TSSUB_SWTS_REQ\u201d).","The injector task needs to know the level of occupation of Video and Audio bit buffers respectively noted  and , before injecting data in the PTI . Supposing that each stream contains a video and an audio component and audio bit buffer  capacity is sufficient to avoid overflow and underflow, monitoring only video bit buffer level may be acceptable.","To do this, a \u201cVID_VBL\u201d register is read, which gives the current level of Video bit buffer  in units of 2 kbits (256 bytes). The size of free space in this buffer is then immediately deduced. The injector task starts DMA transfer from user central FIFO  to the PTI  through the TSMUX , the size of transfer being:\n\nmin(RVBB,central FIFO available data)\n\nwhere RVBB (\u201cRemaining space in Video Bit Buffer\u201d) stands for the remaining free space in the VBB (\u201cVideo Bit Buffer\u201d) .\n","Thus, the transfer is computed taking into account only VBB . This implies that the ABB (for \u201cAudio Bit Buffer\u201d)  is large enough to not overflow.","For a flow at 4 Mbits\/s (500 kbytes\/s), the transfer of 50 kbytes of data appends every 100 ms. According to SWTS pace rate fixed to 40 Mbits\/s (5 Mbytes\/s), the transfer duration takes at least 10 ms. So, the corresponding thread sleeps for 90 ms between each transfer.","C2\/ Audio\/Video Stack ","Audio\/Video Stack  has three main functions:\n\n","It is not necessary to pause or freeze video, mute sound or display still picture.","The synchronization of Audio from Video decoders is made thanks to Audio PTS and Video PTS. The PCRs from flow are not managed, the VCXO is set to 27 MHz.","STC value is set with first Video PTS. The synchronisation algorithm already exists in audio driver. The only need is to modify a function in order to set STC value with Video PTS. This can be processed as follows.","Watching video PTS is not aborted in the case an error occurs in the stream (STC\/video PTS distance is updated every time a PTS occurs).","The stack is also tolerant regarding bit-buffers underflow, i.e. neither decoding process reset, nor bit-buffer reset.","The bit-buffers (VBB  and ABB ) are correctly sized for a PULL model, that is the decoder process regulates the data streaming. As concerns the VBB , it is sized for MLMP feature, around 356 Kbytes. To size the ABB , the ratio between the lowest video bit rate and the highest audio bit rate is computed. This ratio is applied as follows to size the ABB , with mVBR standing for the minimum video bit rate and MABR standing for the maximum audio bit rate:\n\nABB size=MABR\/mVBR*(MLMP VBB size).\n","For example, mVBR and MABR are respectively worth 1 Mbits\/s and 448 kbits\/s.","As additional features, the clients may send to the server , control messages for slow or fast motion.","In a particular embodiment for slow motion, the period PERIOD for sending the data portions is made longer (the periodicity modification depending on the slowing level requested by the client), while the periodicity for the keep alive messages is kept unchanged.","In a particular variant embodiment for fast motion and reverse motion, the client is further able to send to the server  specific control messages \u201cSEEK\u201d for ordering a positioning in a data file to be streamed, which may be a number of bytes with respect to a beginning or an end of that file. The SEEK messages may then contain both a direction and an offset. The client then uses the SEEK messages between XOFF and XON messages, so as to master the playing speed as well as the quantities of chosen data, and to compensate for underflows in case of fast motion. The sequence of the sent orders if then: XOFF\/SEEK(direction, offset)\/XON\/XOFF . . . .","Further, in that particular embodiment, the client is intended to send to the server  information on a chosen decoding algorithm for fast motion, for example to take only images of \u201cI\u201d type in GOPs (Groups of Pictures) for decoding.","The client is then in charge of steady playing, through appropriate determination of the positioning.","Also, like for slow motion, the periodicity for the keep alive messages is kept unchanged."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"p":["The invention will be better understood and illustrated by means of the no limitative following examples of embodiments and of putting in practice, with reference to the appended figures on which:",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 6","FIG. 4"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 7","FIG. 4"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 8","FIG. 4"]},"and  illustrates functionalities of an injector in one of the IRDs of ."]},"DETDESC":[{},{}]}
