---
title: Pulse amplitude modulation (PAM) data communication with forward error correction
abstract: The present invention is directed to data communication system and methods. More specifically, embodiments of the present invention provide an apparatus that receives data from multiple lanes, which are then synchronized for transcoding and encoding. A pseudo random bit sequence checker may be coupled to each of the plurality of lanes, which is configured to a first clock signal A. Additionally, an apparatus may include a plurality of skew compensator modules. Each of the skew compensator modules may be coupled to at least one of the plurality of lanes. The skew-compensator modules are configured to synchronize data from the plurality of lanes. The apparatus additionally includes a plurality of de-skew FIFO modules. Each of the de-skew compensator modules may be coupled to at least one of the plurality of skew compensator modules.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09564990&OS=09564990&RS=09564990
owner: INPHI CORPORATION
number: 09564990
owner_city: Santa Clara
owner_country: US
publication_date: 20140613
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCES TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This patent application claims priority to U.S. Provisional Patent Application No. 61\/885,985, filed 2 Oct. 2013, entitled \u201cPAM DATA COMMUNICATION WITH FORWARD ERROR CORRECTION\u201d, which is incorporated by reference herein for all purposes.","This patent application is related to U.S. patent application Ser. No. 13\/791,201, filed 8 Mar. 2013, titled \u201cOPTICAL COMMUNICATION INTERFACE UTILIZING CODED PULSE AMPLITUDE MODULATION\u201d and now granted as U.S. Pat. No. 9,020,346, which claims priority from U.S. Provisional Patent Application No. 61\/714,543, filed 16 Oct. 2012, titled \u201c100G PA CODED MODULATION\u201d, and U.S. Provisional Patent Application No. 61\/699,724, titled \u201cADAPTIVE ECC FOR FLASH MEMORY\u201d, all of which are incorporated by reference herein for all purposes.","The present invention is directed to data communication systems and methods.","Over the last few decades, the use of communication networks exploded. In the early days Internet, popular applications were limited to emails, bulletin board, and mostly informational and text-based web page surfing, and the amount of data transferred was usually relatively small. Today, Internet and mobile applications demand a huge amount of bandwidth for transferring photo, video, music, and other multimedia files. For example, a social network like Facebook processes more than 500 TB of data daily. With such high demands on data and data transfer, existing data communication systems need to be improved to address these needs.","Over the past, there have been many types of communication systems and methods. Unfortunately, they have been inadequate for various applications. Therefore, improved communication systems and methods are desired.","The present invention is directed to data communication systems and methods. More specifically, embodiments of the present invention provide an apparatus that receives data from multiple lanes, which are then synchronized for transcoding and encoding. There are other embodiments as well.","According to an embodiment, the present invention provides an apparatus for encoding and decoding 25 Gigabit (25G), 40 Gigabit (40G), 50 Gigabit (50G), or 100 Gigabit (100G) signals in a communication network. The apparatus includes a plurality of lanes configured for 25G, 40G, or 100G. The apparatus includes a pseudo random bit sequence checker coupled to each of the plurality of lanes, which is configured to a first clock signal A. Additionally, the apparatus includes a plurality of skew compensator modules. Each of the skew compensator modules is coupled to at least one of the plurality of lanes. The skew-compensator modules are configured to synchronize data from the plurality of lanes. The apparatus additionally includes a plurality of de-skew FIFO modules. Each of the de-skew compensator modules is coupled to at least one of the plurality of skew compensator modules.","A first bus is coupled to an output of each of the de-skew compensator modules. A clock rate converter device is coupled to the output of first bus, and is configured to a second clock signal B. A second bus coupled to the output of the clock rate converter module. According to an embodiment, the operation of the de-skew compensator modules and the de-skew FIFO modules are controlled by a control module. For example, the control modules comprises state machines for the de-skew compensator modules and the de-skew FIFO modules.","The apparatus additionally includes a transcoder module coupled to an output of the second bus, and is configured to a third clock rate C. A third bus is coupled to an output of the transcoder module. The apparatus includes a forward error correction encoder module coupled to an output of the third bus, and is configured to the third clock signal C. A plurality of bus lanes is coupled to an output of the FEC encoder module. A pre-coder module is coupled to the plurality of bus lanes from the FEC encoder module. A plurality of gear box modules is coupled to the plurality of bus lanes. Each of the plurality of gear box modules is coupled to a pattern generator module. A first MUX device is coupled to a first output of a first gear box module out of a plurality of gear box modules. A second MUX device is coupled to a second output of the second gear box module out of the plurality of gear box modules. A first gray mapping PAM encoding module is coupled to an output of the first MUX device. A second gray mapping PAM encoding module is coupled to an output of the second MUX device.","There are other embodiments as well.","The present invention is directed to data communication system and methods. More specifically, embodiments of the present invention provide an apparatus that receives date from multiple lanes, which are then synchronized for transcoding and encoding. There are other embodiments as well.","The following description is presented to enable one of ordinary skill in the art to make and use the invention and to incorporate it in the context of particular applications. Various modifications, as well as a variety of uses in different applications will be readily apparent to those skilled in the art, and the general principles defined herein may be applied to a wide range of embodiments. Thus, the present invention is not intended to be limited to the embodiments presented, but is to be accorded the widest scope consistent with the principles and novel features disclosed herein.","In the following detailed description, numerous specific details are set forth in order to provide a more thorough understanding of the present invention. However, it will be apparent to one skilled in the art that the present invention may be practiced without necessarily being limited to these specific details. In other instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention.","The reader's attention is directed to all papers and documents which are filed concurrently with this specification and which are open to public inspection with this specification, and the contents of all such papers and documents are incorporated herein by reference. All the features disclosed in this specification, (including any accompanying claims, abstract, and drawings) may be replaced by alternative features serving the same, equivalent or similar purpose, unless expressly stated otherwise. Thus, unless expressly stated otherwise, each feature disclosed is one example only of a generic series of equivalent or similar features.","Furthermore, any element in a claim that does not explicitly state \u201cmeans for\u201d performing a specified function, or \u201cstep for\u201d performing a specific function, is not to be interpreted as a \u201cmeans\u201d or \u201cstep\u201d clause as specified in 35 U.S.C. Section 112, Paragraph 6. In particular, the use of \u201cstep of\u201d or \u201cact of\u201d in the Claims herein is not intended to invoke the provisions of 35 U.S.C. 112, Paragraph 6.","Please note, if used, the labels left, right, front, back, top, bottom, forward, reverse, clockwise and counter clockwise have been used for convenience purposes only and are not intended to imply any particular fixed direction. Instead, they are used to reflect relative locations and\/or directions between various portions of an object.","In various embodiments, the present invention provides a system for data communication at high speed. For example, the system can include a 40G\/100G PAM Tx device, which is configured as a transmit IP. In various embodiments, the device is implemented with a CAUI-Rx (e.g., receiving communication interface) on the host side and Mach Zehnder Driver on the line side, 40G\/100G PAM systems according to embodiments of the present invention provide a transmit solution that addresses both 40G and 100G rates for optical communication applications. In some specific embodiments, 40G PAM4 for SMF cabling, 100G PAM4 for SMF cabling, and other types of applications are supported.","In certain implementations, the following features are provided:","Line-side interface operating at\n\n","Host-side interface operating at\n\n","Protocol Locking\n\n",{"@attributes":{"id":"p-0040","num":"0057"},"figref":"FIG. 1","b":["100","100"]},"The communication apparatus  is configured to, among other things, encoding and decoding 40G, 50G, and\/or 100 G signals in a communication network. The communication device  has a plurality of input lines (e.g., including input line ) for receiving data, which are to be processed. For example, the incoming data as shown can be 16b, 32b, or 40b wide, and they are processed by the virtual lane lock modules that perform BIP check. In certain embodiments, the input lines as shown can have different formats. For example, the lines are configured for 25G, 40G, and\/or 100G. It is to be understood that other bandwidths and formats are possible as well.","The pseudo random bit sequence (PRBS) checker  is coupled to each of the plurality of lanes. The PRBS checker  is configured to use a first clock signal A as shown. For example, the PRBS checker is configured to check the following test patterns: PRBS-9, 7, 11, 13, 15, 23, and 31. In various embodiments, the PRBS checker  supports \u201cAuto-PRBS lock\u201d that allows for detecting reception of any supported PRBS.","Since data coming in from the input lines can have different data rates, skew compensation is provided to achieve block synchronization. For example, skew compensation can be achieved by a plurality of skew compensator modules, or virtual lane locks that perform BIP check. The virtual lane locks (e.g., including virtual lane lock ) provide protocol locking, which is used to achieve block synchronization (block locking) and virtual lane lock, and to write the code-word to the alignment and deskew FIFO for the following types of frame. For example, for 40GBase-R that uses 64b\/66b encoding, four block synchronization modules are provided. Other considerations are possible, such as 4\u00d710G or 2\u00d720G. For 100GBase-R that also uses 64b\/66b encoding, twenty block synchronization modules are used. For example, various implementations may support one of the five modes (4\u00d710Ge, 2\u00d720Ge, 100Ge, OTL3.4 or OTL4.4) at a time and the mode is configurable via MDIO.",{"@attributes":{"id":"p-0044","num":"0061"},"figref":["FIG. 2","FIG. 2","FIG. 1","FIG. 2","FIG. 2"],"b":["201","202","203","203","204","205","203","203","203","203","203","202","210","220","230","240","250","260"],"i":["a","a ","b","a","d"]},"In the 40G or 100G Ethernet mode, the Block Lock FSM  looks for 64 consecutive sync headers to declare a block lock. For example, a valid sync header is either \u2032B10 or \u2032b01. Once block lock is achieved, it takes a count of 65 invalid sync headers in a 1024 sync window to declare a loss of block lock. To reduce switching power, a configurable mode is provided, where the search of valid sync headers is disabled once in the lock state, and enabled once an invalid sync header is observed.","For used in communication system, the block lock device complies with various communication standards. In an implementation, the block lock state machine adheres to Clause 82 of IEEE 802.3, FIG. 82-10 of IEEE 802.3-2012. For example, the receive clocks (rx_clk [3:0]) from all lines needs to be frequency locked with transmit clock (clk_b), and there cannot be a ppm offset between them. The internals of the Block Lock FSM, Virtual Lane Lock FSM and Frame Alignment Signal Lock (used by OTL3.4 and OTL4.4) are shown in .  is a simplified block diagram illustrating block locking mechanism according to embodiments of the present invention. This diagram is merely an example, which should not unduly limit the scope of the claims. One of ordinary skill in the art would recognize many variations, alternatives, and modifications. For example, the block locking mechanism in  corresponds to lock block  in . Incoming data rx_data  is coupled to mux selectors (e.g., mux , mux , etc.), which are coupled to block  as shown.  further illustrates a plurality of flip flops , a plurality of multiplexers , block circuits  and , and an XOR gate . The operation of the block locking mechanism is illustrated in .  is a simplified flow diagram illustrating operation of block locking operation according to an embodiment of the present invention. This diagram is merely an example, which should not unduly limit the scope of the claims. One of ordinary skill in the art would recognize many variations, alternatives, and modifications. For example, various steps may be added, removed, repeated, rearranged, modified, and\/or overlapped. Functional blocks in  are listed in Table 1 below:",{"@attributes":{"id":"p-0047","num":"0064"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Block Lock FSM Description"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["State","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["LOCK_INIT","This is the default state of the Block lock "]},{"entry":[{},"FSM. State is entered on reset."]},{"entry":["RESET_CNT","Reset both the valid and invalid sync header "]},{"entry":[{},"counts. The next state is TEST_SH, when the "]},{"entry":[{},"timer to look for sync header expires, which is"]},{"entry":[{},"indicated by test_sh and block is not locked."]},{"entry":[{},"If the block is locked the next state is "]},{"entry":[{},"TEST_SH2."]},{"entry":["TEST_SH","Check if the Sync header is valid or not. If "]},{"entry":[{},"valid, then go to VALID_SH else go to SLIP."]},{"entry":["TEST_SH2","Check if the Sync header is valid or not. "]},{"entry":[{},"If valid, then go to VALID_SH2 else go to "]},{"entry":[{},"INVALID_SH."]},{"entry":["VALID_SH","Increment the Valid Sync header count by 1, "]},{"entry":[{},"which is indicated by sh_cnt. If the sh_cnt "]},{"entry":[{},"is 64, then go to 64_GOOD state, else if "]},{"entry":[{},"sh_cnt is less than 64 and test_sh is true, "]},{"entry":[{},"then go to TEST_SH."]},{"entry":["64_GOOD","Assert block_lock to be true. Next state is "]},{"entry":[{},"RESET_CNT "]},{"entry":["VALID_SH2","Increment Valid Sync header counter by 1,"]},{"entry":[{},"which is indicated by sh_cnt. If sh_cnt is"]},{"entry":[{},"1024, then go to RESET_CNT, else if sh_cnt"]},{"entry":[{},"is less than 1024 and test_sh is true then "]},{"entry":[{},"go to TEST_SH2."]},{"entry":["INVALID_SH","Increment the sh_cnt and sh_inv_cnt. If "]},{"entry":[{},"sh_cnt is 1024 and sh_inv_cnt is less than 65, "]},{"entry":[{},"then go to RESET_CNT, else if sh_inv_cnt "]},{"entry":[{},"is 65, then go to SLIP, else if test_sh is true "]},{"entry":[{},"and sh_cnt is less than 1024 and sh_inv_cnt "]},{"entry":[{},"is less than 65, then go to TEST_SH."]},{"entry":["SLIP","Assert block_lock to be false. Next state is "]},{"entry":[{},"RESET_CNT"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"In addition to performing block lock, virtual lane lock can also be performed. More specifically, once block lock is achieved, the virtual lane lock FSM begins obtaining alignment marker lock to align data signal received from the four input lanes. In a specific implementation, the alignment marker is configured to be detected every 16383 code words (66b) on each Virtual Lane. Writing operation is performed to Deskew FIFO (e.g., block  in ) for each virtual lane starting with second marker that matches the previous marker. For example, The Alignment Marker (Virtual Lane Lock) state machine as implemented uses the values from Table 82-2 from the 100GBASE-R Alignment marker encoding, or Table 82-3 from the 40GBASE-R alignment marker encoding.  is simplified diagram illustrating a virtual lane lock mechanism according to an embodiment of the present invention. This diagram is merely an example, which should not unduly limit the scope of the claims. One of ordinary skill in the art would recognize many variations, alternatives, and modifications. The virtual lane lock FSM is shown .",{"@attributes":{"id":"p-0049","num":"0066"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0050","num":"0067"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Alignment Marker Detection FSM Description"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["State","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["VL_RST","Initialize Virtual Line Valid variable (vl_valid) to "]},{"entry":[{},"zero and load Current Virtual Line variable (current_vl) "]},{"entry":[{},"with Virtual ID (vl_id) variable. Virtual ID variable "]},{"entry":[{},"is initialized to \u201c31\u201d by reset, unlocked block or loosing "]},{"entry":[{},"Virtual Line locking. FSM remains on this state until "]},{"entry":[{},"test_sh and vl_req are asserted. Test_sh is asserted by "]},{"entry":[{},"Block Lock FSM and vl_req (Virtual Line Request) "]},{"entry":[{},"is asserted by Virtual Lane Lock FSM."]},{"entry":["VL_M0","Once the block lock is achieved and Virtual Line Lock "]},{"entry":[{},"FSM requests finding the next marker, then M0 match "]},{"entry":[{},"is searched for 40Ge or M0 and M1 match for 100Ge. "]},{"entry":[{},"If m0_match for 40Ge, then go to VL_M1, "]},{"entry":[{},"else if M0 and M1_match for 100G2, then go to "]},{"entry":[{},"VL_M2, else go to VL_FAIL."]},{"entry":["VL_M1","Look for a M1 match. If m1_match, then go to VL_M2, "]},{"entry":[{},"else go to VL_FAIL. It is not possible to make it to "]},{"entry":[{},"this state for 100Ge mode."]},{"entry":["VL_M2","Look for a M2 match. If m2_match, then for 40Ge go "]},{"entry":[{},"to VL_B3 or go to VL_M4 for 100Ge, else go "]},{"entry":[{},"to VL_FAIL."]},{"entry":["VL_B3","Transition to VL_M4 state. It is not possible to make it "]},{"entry":[{},"to this state for 100Ge mode."]},{"entry":["VL_M4","Look for an m4_match for 40Ge or m4m5_match for "]},{"entry":[{},"100Ge. If m4_match, then go to VL_M5, else if "]},{"entry":[{},"m4m5_match, then go to VL_M6, else go to VL_FAIL."]},{"entry":["VL_M5","Look for a M5 match. If m5_match, then go to VL_M6, "]},{"entry":[{},"else go to VL_FAIL."]},{"entry":["VL_M6","Look for a M6 match. If m6_match, then go to "]},{"entry":[{},"VL_SLOT, else go to VL_FAIL."]},{"entry":["VL_SLOT","Set vl_valid to 1 and go to VL_RST."]},{"entry":["VL_FAIL","Set vl_valid to 0 and go to VL_RST state."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Now referring back to . As explained above, once the lanes are synchronized, de-skewing is performed. For example, de-skewing is performed by a plurality of de-skewing FIFO modules (e.g., block ). The deskew FIFO modules are needed to account for the skew and skew variations across the physical lanes in 40G mode and virtual and physical lanes in 100G mode. Additionally, the FIFO accounts for the phase differences between the Rx clock from CAUL-RX and Tx clock. For example, the de-skew FIFO modules are implemented in accordance to communication standard(s), such as the IEEE 802.3ba-2012 standard, where the maximum skew and skew variation from Table 80-4 \u2018Summary of skew constraints\u2019 and Table 80-5 \u2018Summary of skew variation constraints\u2019 at the Tx PMD interface is described under Table 3 below:",{"@attributes":{"id":"p-0052","num":"0069"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Skew Constraints"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Summary of Skew Constraints"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Skew ","Max","Max skew for","Max skew for"]},{"entry":[{},"Points","Skew(ns)","40GBase-R(UI)","100GBase-R(UI)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"SP2","43","\u2248443","\u2248222"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Summary of Skew Variation constraints"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Skew","Max Skew","Max skew variation","Max skew for"]},{"entry":[{},"Points","Variation(ns)","for 10.3125GBd(UI)","25.78125GBd(UI)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"SP2","0.4","\u22484","\u224810"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},"The determination of the FIFO depth in the 4\u00d710G and 2\u00d720G mode is as follows:","Max skew is 443 UI and Max skew variation is \u00b14 UI","Sum of all differences is 443+4+66 (sync clk+read)=513 UI","For example, the FIFO operates on 66b word, and so the depth of the FIFO is 8 (513\/66=7.78) per lane.","The determination of the FIFO depth in the 4\u00d725G mode is as follows:","Max skew is 222 UI and Max skew variation is \u00b110 UI","Sum of all differences is 222+10+66*2 (sync clk+read 264b)=364 UI","The FIFO operates on 66b word, and so the depth of the FIFO is be 6 (364\/66=5.51) per lane.","In a 4\u00d710G mode, each lane has an 8-deep, 66b wide FIFO. In a 2\u00d720G mode, given only two lanes, each lane will have 8-deep, 66b wide FIFO. In a 4\u00d725G mode, each lane will have 5 6-deep, 66b wide FIFO. Combining the FIFO's for the above modes, of the 5 virtual lanes, VL0 and VL1 will have 8-deep, while VL2, VL3 and VL4 will have 6-deep each.","The wr_addr starts incrementing once both the block lock and virtual lane lock are true. The rd_addr increments is controlled through the de-skew state machine and is common to all the FIFO's lanes. The first code word from all FIFO's is the Alignment Marker.","For the alignment and de-skew functions to work, they are by one or more control module (e.g., control module  shown in ). The alignment Mux in block  re-orders the Virtual Lines from deskew FIFO's to be forwarded sequentially to the transcoder module . For example, after all Virtual Lines are locked, the Alignment Mux re-orders virtual lines from 0 to 19. The virtual lane ID's are used to re-order VL's from arbitrary Tx slots into correct VL order.  is a simplified block diagram illustrating an alignment Mux according to an embodiment of the present invention. This diagram is merely an example, which should not unduly limit the scope of the claims. One of ordinary skill in the art would recognize many variations, alternatives, and modifications. Module  provides deskew control, align mux control, BER monitor, and BIP checking. Module  receives vl_lock and vl_ld as input. Outputs include deskew_rstn, rd_addr, all_block, block_lock, hi_ber, ber_count, bip_count, lane_map, vls_lock, cw_valid, and am_valid as shown.  further illustrates a plurality of flip flops , a plurality of multiplexers , one or more multiplexers , and a block circuit .","For 4\u00d710G configuration, only one virtual line from each channel (physical line) is staged every four clock cycles. All four code words from all channels are available to the transcode module at the same time. For 2\u00d720G configuration, the first two channels have two virtual lanes available from each channel to be forwarded to the transcode module. The alignment mux stages all four virtual lanes at the same time. All four code words are available at the same time for transcode module, which is the same as 4\u00d710G.","For 4\u00d725G configuration, the Alignment Mux forwards four code words at a time from the deskew FIFO's to the Transcode module. The Alignment Mux forwards all 20 Virtual Lanes to the Transcode module after five cycles. The transcode module processes all four code words every cycle.","As a part of the control module , the de-skew control provides a de-skew state machine that is triggered once the alignment lock is achieved on all lanes. It remains in the de-skew \u201cdone\u201d state until either a loss of alignment lock or re-acquire lock is triggered.  is a simplified flow diagram illustrating the de-skew state machine. This diagram is merely an example, which should not unduly limit the scope of the claims. One of ordinary skill in the art would recognize many variations, alternatives, and modifications. As an example, the de-skew states are provided below in Table 4:",{"@attributes":{"id":"p-0067","num":"0084"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Deskew FSM Description"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["State","Description:"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["DS_RESET","This is the default state of the Deskew FSM. State is "]},{"entry":[{},"entered on reset. Transition to DS_DONE occurs once "]},{"entry":[{},"AM lock is achieved, indicated by vls_valid"]},{"entry":["DS_DONE","This is the Deskew done state and once AM lock is set, "]},{"entry":[{},"the FSM remains in this state. Loss of AM lock will "]},{"entry":[{},"transition to DS_RESTART state. The rd_addr to the "]},{"entry":[{},"FIFO is incremented in this state."]},{"entry":["DS_RESTART,","Deskew restart state. The FIFO write and read pointers "]},{"entry":["DS_D1,","are reset."]},{"entry":["DS_D2,",{}]},{"entry":"DS_D3"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The control module  further comprises a BER monitor, as shown. The BER Monitor monitors the aggregated signal from all virtual lines. In an embodiment, the high BER is flagged when 97 invalid 66b sync header are detected within 500 us (xus_timer) for 100G or 1.25 ms (xus_timer) for 40G. The high BER flag is cleared when there are less than 97 invalid headers within specified time.  is a simplified flow diagram illustrating the BER operation. This diagram is merely an example, which should not unduly limit the scope of the claims. One of ordinary skill in the art would recognize many variations, alternatives, and modifications.","In various embodiments, protocol lock module has an interface that is described in Table 5 below:",{"@attributes":{"id":"p-0070","num":"0087"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"center"}},"thead":{"row":{"entry":"TABLE 5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Protocol Lock Interface Description"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Signal Name","Direction","width","Reference clock","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Datapath interface"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["rx_clk","Input","4",{},"Receive clock from CAUI-Rx lane"]},{"entry":[{},{},{},{},"0 to 3. Note that there 4 receive"]},{"entry":[{},{},{},{},"clocks, each clock is used by one"]},{"entry":[{},{},{},{},"instance of the Protocol Lock"]},{"entry":[{},{},{},{},"module"]},{"entry":["rx_data","Input","4 \u00d7 40","rx_clk[3:0]","Receive data from CAUI-Rx lane 0"]},{"entry":[{},{},{},{},"to 3"]},{"entry":["rx_mode","Input","3","Register clock","Rx Mode:"]},{"entry":[{},{},{},{},"000-4x10G Mode"]},{"entry":[{},{},{},{},"001-2x20G Mode"]},{"entry":[{},{},{},{},"010-4x25G Mode"]},{"entry":[{},{},{},{},"100-OTL3.4"]},{"entry":[{},{},{},{},"110-OTL4.4"]},{"entry":["blk_lock","Output","20","rx_clk[3:0]","Block locked status for each lane."]},{"entry":[{},{},{},{},"There are 4 Protocol Lock"]},{"entry":[{},{},{},{},"instances and each Protocol Lock"]},{"entry":[{},{},{},{},"instance drives 5 ports, each port is"]},{"entry":[{},{},{},{},"1b."]},{"entry":["vl_lock","Output","20","rx clk[3:0]","Virtual lane lock status, each"]},{"entry":[{},{},{},{},"Protocol Lock instance drives 5"]},{"entry":[{},{},{},{},"ports. Same as blk_lock."]},{"entry":["vl_id","Output","4 \u00d7 5 \u00d7 5","rx_clk[3:0]","Virtual lane ID [4:0]. There are 4"]},{"entry":[{},{},{},{},"channels and each channel drives"]},{"entry":[{},{},{},{},"five ID, each ID is 5b wide."]},{"entry":["vl_write","Output","20","rx_clk[3:0]","Virtual lane write, used by Deskew"]},{"entry":[{},{},{},{},"FIFO. Five ports for each Protocol"]},{"entry":[{},{},{},{},"Lock instance."]},{"entry":["cw_write","Output","20","rx_clk[3:0]",{}]},{"entry":["algn_data","Output","264","tx_clk_b","[263:0] used by 4x25G mode"]},{"entry":[{},{},{},{},"[65:0] used by 40G mode"]},{"entry":["algn_block_lock","Output","20","rx_clk_625m_x","Block lock status for each lane"]},{"entry":["algn_am_lock","Output","1","rx_clk_625m_x","AM lock status"]},{"entry":["algn_am_valid","Output","1","rx_clk_625m_x","AM Valid marker, which signifies"]},{"entry":[{},{},{},{},"the output data carries the"]},{"entry":[{},{},{},{},"Alignment marker on the cycle."]},{"entry":["tcode_req","Input","1","tx_clk_625m","Request read operation from"]},{"entry":[{},{},{},{},"Transcode"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Test Interface"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["tx_scan_mode","Input","1","Test clock","Scan mode"]},{"entry":["tx_scan_in","Input","X","Test clock","Scan in"]},{"entry":["tx_scan_en","Input","1","Test clock","Scan enable"]},{"entry":["algn_scan_out","Output","X","Test clock","Scan out"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Clock\/Reset interface"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["rx_clk_625m_0","Input","1",{},"Rx clock of lane 0"]},{"entry":["rx_clk_625m_1","Input","1",{},"Rx clock of lane 1"]},{"entry":["rx_clk_625m_2","Input","1",{},"Rx clock of lane 2"]},{"entry":["rx_clk_625m_3","Input","1",{},"Rx clock of lane 3"]},{"entry":["tx_clk_625m","Input","1",{},"Tx clock, to be used for 40G"]},{"entry":["tx_clk_390m","Input","1",{},"Tx clock, to be used for 100G"]},{"entry":["rx_reset_clk625m_0_n","Input","1","rx_clk_625m_0","Active low reset synchronized to"]},{"entry":[{},{},{},{},"rx_clk_625m_0"]},{"entry":["rx_reset_clk625m_1_n","Input","1","rx_clk_625m_1","Active low reset synchronized to"]},{"entry":[{},{},{},{},"rx_clk_625m_1"]},{"entry":["rx_reset_clk625m_2_n","Input","1","rx_clk_625m_2","Active low reset synchronized to"]},{"entry":[{},{},{},{},"rx_clk_625m_2"]},{"entry":["rx_reset_clk625m_3_n","Input","1","rx_clk_625m_3","Active low reset synchronized to"]},{"entry":[{},{},{},{},"rx_clk_625m_3"]},{"entry":["tx_reset_clk625m_n","Input","1","tx_clk_625m","Active low reset synchronized to"]},{"entry":[{},{},{},{},"tx_clk_625m"]},{"entry":["tx_reset_clk390m_n","Input","1","tx_clk_390m","Active low reset synchronized to"]},{"entry":[{},{},{},{},"tx_clk_390m"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"Now referring back to . After alignment is performed, the received data are transcoded, by transcoder module .  is a simplified block diagram illustrating a transcoder according to an embodiment of the present invention. This diagram is merely an example, which should not unduly limit the scope of the claims. One of ordinary skill in the art would recognize many variations, alternatives, and modifications. The transcoder module  in  performs the 64\/66 to 256\/257b conversion in both 40G-PAM4 and 100G-PAM8 applications. The module takes in 264b input every cycle for 100G and it takes 264b input every four cycles for 40G mode. The module concatenates four consecutive 66b words to form a single 264b word to be transcoded in the 40G mode. For example, transcoder in  includes, among other features, a mode selector that receives an rx mode input. The data align_data is processed by transcode bock  and then scramble block .  further illustrates a plurality of flip flops  and a plurality of multiplexers .","In order to describe the transcoding, the 264b word is split into four 66b words, marked as align_data[3:0][65:0]. The rules for transcoding are described as follows.","All data blocks\n\n","Valid control blocks with and without data blocks\n\n","Case 2: DCDD, Data followed by Control followed by 2 data\n\n","Case 3: DDCD, 2 Data followed by Control followed by 1 data\n\n","Case 4: DDDC, 3 Data followed by Control\n\n","Invalid control blocks\n\n","Alignment Marker\n\n","The 257b tx_xcoded data is then scrambled according to the following equation. The alignment marker code word bypasses the scrambling stage.","tx_scrambled[256:0]={tx_xcoded[256:5],tx_xcoded[12:8]^tx_xcoded[4:0]};","In the 40G mode, the 257b data is fed to the BCH Encoder module in 4 clocks as 65b data and 1b valid and will follow these rules.","Cycle 1: Valid is true and data is 65b","Cycle 2 to 4: Valid is false and data is 64b","As an example, the data rate after transcoding is given by the following equation.",{"@attributes":{"id":"p-0085","num":"0122"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mn":["10.3125","4"],"mo":["\u2062","\u2062","\u00d7"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mi":"Gbps"},{"mrow":[{"mn":"41.25","mo":["\u2062","\u2062","\u00d7","\u00d7"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mi":"Gbps","mfrac":[{"mn":["64","66"]},{"mn":["257","256"]}]},{"mn":"40.15625","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mi":"Gbps"}],"mo":"="}],"mo":"="}}}},"The transcoder block will run at 625 Mhz in 40G mode.","In the 100G mode, the entire 257b data is fed to the BCH Encoder module and so the data rate after transcoding is given by the following equation:",{"@attributes":{"id":"p-0088","num":"0125"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mn":"103.125","mo":["\u2062","\u2062","\u00d7","\u00d7"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mi":"Gbps","mfrac":[{"mn":["64","66"]},{"mn":["257","256"]}]},{"mn":"100.390625","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mi":"Gbps"}],"mo":"="}}}},"For example, the transcoder block runs at 390.625 Mhz in 100G mode.","The transcoder module interface is provided in Table 6 below:",{"@attributes":{"id":"p-0091","num":"0128"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"center"}},"thead":{"row":{"entry":"TABLE 6"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Transcoder Interface Description"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},{},"Reference",{}]},{"entry":["Signal Name","Direction","Width","Clock","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Datapath interface"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["algn_txd_40g","Input","66","tx_clk_625m","66 b Aligned data used in 4x10G or"]},{"entry":[{},{},{},{},"2x20G mode"]},{"entry":["algn_txd_100g","Input","264","tx_clk_390m","264 b Aligned data used in 4x25G"]},{"entry":[{},{},{},{},"mode"]},{"entry":["tx_mode","Input","2","Register clock","Rx Mode:"]},{"entry":[{},{},{},{},"00-4x10G Mode"]},{"entry":[{},{},{},{},"01-2x20G Mode"]},{"entry":[{},{},{},{},"10-4x25G Mode"]},{"entry":["algn_am_valid","Input","1","rx_clk_625m_x","AM Valid marker, which signifies"]},{"entry":[{},{},{},{},"the output data carries the"]},{"entry":[{},{},{},{},"Alignment marker on the cycle."]},{"entry":["map_wd_req","Input","1","tx_clk_625m","Request read operation"]},{"entry":["trsc_txd_100g","Output","257","tx_clk_390m","257 b Transcoded data for 100G"]},{"entry":[{},{},{},{},"mode"]},{"entry":["trsc_txd_vld","Output","1","tx_clk_625m","Valid when true indicates 65 b data"]},{"entry":[{},{},{},{},"else 64 b data in 40G mode"]},{"entry":["trsc_txd_40g","Output","65","tx_clk_625m","65 b Transcoded data for 40G mode"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Test Interface"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["tx_scan_mode","Input","1","Test clock","Scan mode"]},{"entry":["tx_scan_in","Input","X","Test clock","Scan in"]},{"entry":["tx_scan_en","Input","1","Test clock","Scan enable"]},{"entry":["trsc_scan_out","Output","X","Test clock","Scan out"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Clock\/Reset interface"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["tx_clk_625m","Input","1",{},"Tx clock, to be used for 40G"]},{"entry":["tx_clk_390m","Input","1",{},"Tx clock, to be used for 100G"]},{"entry":["tx_reset_clk625m_n","Input","1","tx_clk_625m","Active low reset synchronized to"]},{"entry":[{},{},{},{},"tx_clk_625m"]},{"entry":["tx_reset_clk390m_n","Input","1","tx_clk_390m","Active low reset synchronized to"]},{"entry":[{},{},{},{},"tx_clk_390m"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"In various embodiments, a PAM-4 BCH encoder is used. The design uses a (n=1440,k=1285,t=14) BCH Encoder and a GF(2) field. This code uses 1 dummy bit to make up for 1440 bits after 154b of parity is added to the incoming message. The selected code is a 9% overhead code, as given by the following equation.",{"@attributes":{"id":"p-0093","num":"0130"},"maths":{"@attributes":{"id":"MATH-US-00003","num":"00003"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mn":["4","10.3125"],"mo":["\u00d7","\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mi":"G"},{"mn":"41.25","mo":["\u2062","\u2062","\u00d7","\u00d7","\u00d7"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mi":"G","mfrac":[{"mn":["64","66"]},{"mn":["257","256"]},{"mn":["1440","1285"]}]}],"mo":"="}}}},"Implementation of PAM-4 module interface is provided in the table 7 below.",{"@attributes":{"id":"p-0095","num":"0132"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"center"}},"thead":{"row":{"entry":"TABLE 7"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"PAM-4 Encoder Interface Description"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},{},"Reference",{}]},{"entry":["Signal Name","Direction","Width","Clock","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Datapath interface"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["trsc_txd_vld","Input","1","tx_clk_625m","Valid when true indicates 65 b data"]},{"entry":[{},{},{},{},"else 64 b data in 40G mode"]},{"entry":["trsc_txd_40g","Input","65","tx_clk_625m","65 b Transcoded data for 40G mode"]},{"entry":["p4enc_dummy","Input","8","Register clock","8 b Dummy bits"]},{"entry":["p4enc_txd_40g","Output","66","tx_clk_625m","66 b BCH Encoded data"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Test Interface"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["tx_scan_mode","Input","1","Test clock","Scan mode"]},{"entry":["tx_scan_in","Input","X","Test clock","Scan in"]},{"entry":["tx_scan_en","Input","1","Test clock","Scan enable"]},{"entry":["p4enc_scan_out","Output","X","Test clock","Scan out"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Clock\/Reset interface"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["tx_clk_625m","Input","1",{},"Tx clock, to be used for 40G"]},{"entry":["tx_reset_clk625m_n","Input","1","tx_clk_625m","Active low reset synchronized to"]},{"entry":[{},{},{},{},"tx_clk_625m"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"The transcoder  additionally provides alignment marker mapping. For example, the transcoder outputs the 257b as 1 cycle of 128b followed by 1 cycle of 129b and this repeats. In the 100G PAM4 mode, the Alignment Marker mapping function operates on twenty 66b aligned and reordered alignment markers. Of the 66b, the 2b synchronization header is stripped and the remaining 64b are mapped as shown in . Five padding bits are added such that 1 padding bit is added after every four AM markers. This equates to 64*20+5=1285, which is five blocks of 257b.","Because of the dual-lambda transmitter and subsequently receiving 2 lanes of 50G PAM4, the transmit data needs to ensure that a 64b AM marker is not split between the two lanes. This helps achieve synchronization and de-skew of the data across the two lanes. Also, this implies that the data leaving the gearbox is two sets of data, each N bits wide. For example, N is determined based on the implementation. In various implementations, the alignment marker mapping of the twenty aligned and reordered alignment markers follow the mapping as shown in .","For example, the mapping function adheres to one or more of the following rules:\n\n","The sum total of all the above bits is 1440(1285 AM+154 Parity+1 dummy), which is the FEC block size.","In the 40G PAM4 mode, the alignment markers includes four 66b aligned markers and is treated as all control blocks by the transcoder. The transcoder compresses the four 66b alignment marker into one 257b block as shown in . This is a slight variation to the IEEE 802.3bj\/D2.0 specification. The variation is to keep the 64b Alignment marker intact. In contrast, certain markers according to the IEEE 802.3bj\/D2.0 are discarded.","In the 40G PAM4 mode, the alignment marker mapping is relatively straight forward and all four alignment markers appear on lane 0 as shown in . The padding bit, P0, appears on the 129bit.","According to various implementations, the alignment markers appear once every 16384\u00d720\u00d766 bit blocks in 100G Mode and 16384\u00d74\u00d766 bit blocks in 40G Mode. Four of the 66b block goes through a 257\/256 Transcode. In the 100G Mode, the resulting bits are 16384\u00d720\u00d764\u00d7257\/256, which is equivalent to 16384\u00d75\u00d7257, as shown in . This equates to 16384 BCH code words with each code word of 1285 bits.","In case of 40G Mode, the resulting bits are 16384\u00d74\u00d764\u00d7257\/256, which is equivalent to 16384\u00d7257. This equates to 3276.8 BCH code words with each code word of 1285 bits, which leaves with residual bits to be transmitted after the next alignment marker. There will be four cycles with residual bits and every 5cycle, the code words will line up with no residual bits. The no of residual bits are 257,514,771 and 1028 respectively for the 1to 4cycle. This is needed to determine where the boundary of the BCH code words resides on the receiving side.  shows the residual bits of the code word along with Alignment Markers.","Now referring back to . The data from the encoder  is provided to the gearbox  and . The gearbox is required to translate the 1440b code words streaming out of the FEC Encoder into two streams of 80b for the 100G Mode and one stream of 64b for the 40G mode. As an example, the baud rates for the two modes is given by the following equations:",{"@attributes":{"id":"p-0105","num":"0148"},"maths":[{"@attributes":{"id":"MATH-US-00004","num":"00004"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mn":["4","10.3125"],"mo":["\u00d7","\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"1.1em","height":"1.1ex"}}},"mi":"G"},{"mrow":[{"mn":"41.25","mo":["\u2062","\u2062","\u00d7","\u00d7","\u00d7"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mi":"G","mfrac":[{"mn":["64","66"]},{"mn":["257","256"]},{"mn":["1440","1285"]}]},{"mfrac":{"mrow":[{"mn":"45","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mi":"G"},{"mn":"2","mo":"\u2062","mrow":{"mo":["(",")"],"mrow":{"mi":"PAM","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"4"}}}]},"mo":"=","mrow":{"mn":"22.5","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mi":"G"}}],"mo":"="}],"mo":"="}}},{"@attributes":{"id":"MATH-US-00004-2","num":"00004.2"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mn":["4","25.78125"],"mo":["\u00d7","\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mi":"G"},{"mrow":[{"mn":"103.125","mo":["\u2062","\u2062","\u00d7","\u00d7","\u00d7"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mi":"G","mfrac":[{"mn":["64","66"]},{"mn":["257","256"]},{"mn":["1440","1285"]}]},{"mfrac":{"mrow":[{"mn":"112.5","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mi":"G"},{"mn":"2","mo":"\u2062","mrow":{"mo":["(",")"],"mrow":{"mi":["Dual","\u03bb"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}}}}]},"mo":"=","mrow":{"mfrac":{"mrow":[{"mn":"56.25","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mi":"G"},{"mn":"2","mo":"\u2062","mrow":{"mo":["(",")"],"mrow":{"mi":"PAM","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"4"}}}]},"mo":"=","mrow":{"mn":"28.125","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mi":"G"}}}],"mo":"="}],"mo":"="}}}]},"For example, in the 100G mode, the 1440b is split across two lanes, each having 720b and in the 40G mode, the entire 1440b is transmitted on a single lane. The stream of data out of the FEC Encoder follows the sequence of 128\/129\/128\/129\/128\/78 or 129\/128\/129\/128\/129\/77 split into two lanes for the 100G mode and 128\/129\/128\/129\/128\/129\/128\/129\/128\/129\/78\/77 on a single lane for the 40G mode. To keep the alignment markers intact on a lane, it would make sense to have two gearboxes, one for each lane in the 100G mode, and enable one in the 40G mode, while disabling the second.",{"@attributes":{"id":"p-0107","num":"0150"},"figref":"FIG. 16"},"The Transcoder will outputs alternating cycles of 128b and 129b with am_tx_0\/1 lining up to be 128b as the start of Alignment Marker. The FEC Encoder will output alternating cycles of 128b and 129b for 4 cycles and on the 5cycle, the FEC Encoder outputs 206b, which would be 128b+78b for Gearbox 0 and 129b+77b for Gearbox 1.","For each Gearbox, FEC encoded data is written in 720b over 5 cycles, while the read at 80b would take 9 cycles in the 100G mode. In the 40G mode using Gearbox 0 only, data is written in 1440b over 10 cycles, while the read at 80b would take 18 cycles. So looking at both modes of operation, the ratio of write to read is 5:9. The write operation, on average, is 144b(720\/5 or 1440\/10) on each cycle.","The gearbox  is coupled to the pattern generator .  is a simplified diagram illustrating a pattern generator according to an embodiment of the present invention. This diagram is merely an example, which should not unduly limit the scope of the claims. One of ordinary skill in the art would recognize many variations, alternatives, and modifications. Selector  receives input from PRBS generator , square_wave, and cust_pattern, and p4enc_tx_data. Output of selector  is connected to error set mask logic . Selector  selects between the output of selector  and inverted output of selector  from the invertor . Output of the selector  is connected to the selector , which provides quelch function. Output of selector  is connected to selector , which provides swap function.  further illustrates a flip flop. Among other things, a pattern generator module performs the following functions:","PRBS Generation of PRBS7, PRBS9, PRBS11, PRBS15, PRBS23 and PRBS31","Square Wave Pattern Generation of 16\u2032hFF00","Custom Pattern Generation based on 33\u00d764 configured memory","IEEE Test patterns like JP03A, JP03B and Quad PRBS13","Error Injection using an error mask register (e.g., selector )","Transmit Polarity inversion (e.g., selector )","Transmit disable feature (e.g., selector )","Bit swap feature (e.g., selector )","Among other things, the PRBS generation mode of the pattern generator  supports the transmission of the following PRBS patterns and its inverse.","PRBS7: 1+x+x","PRBS9: 1+x+x","PRBS11: 1+x+x","PRBS15: 1+x+x","PRBS23: 1+x+x","PRBS31: 1+x+x","In various embodiments, the PRBS enable, selection and the inverse functions are user configurable. The output width is designed to be a parameterized one depending on the mode of the chip is running","Custom Pattern Generation function of the pattern generator supports the transmission of a Custom Pattern as configured in 33\u00d764b Memory. For example, the pattern is written via MDIO as 132 locations of 16b. The MDIO Write is done as read-modify-write operation into the memory. On enabling the custom pattern enable bit, the programmed pattern is read out starting with location 0 and incrementing up to 32 and then restarting at 0. This pattern is repeated on every 2112b of data until the enable bit is cleared. In various implementations, the custom pattern enable and the pattern memory are user configurable via MDIO. The memory can also be read out via MDIO.","Square Wave Generation functions is provided to support the transmission of a square wave pattern defined to be 16\u2032hFF00. The pattern is programmed into the low 16b location of address 0 of custom pattern memory. This pattern is read out and repeated until the square wave enable bit is cleared. The square wave enable is user configurable.","IEEE Test Pattern Generation is provided to support the transmission of JP03A, JP03B and Quad PRBS13 as defined in IEEE 802.3bj Draft 2.1. For example, the JP03A Test pattern consists of sending {0,3} symbols in 40G-PAM4 mode and 100G-PAM4 mode. This translates to 4b, which is written via MDIO into location 0 of custom pattern memory. This pattern is read out and repeated until the JP03A enable bit is cleared. The JP03A enable is user configurable.","The JP03B Test pattern consists of sending 15 {0,3} symbols followed by 16 {3,0} in 40G-PAM4 mode and 100G-PAM4 mode. This translates to 124b, which is written via MDIO into location 0, 1 and 2 of custom pattern memory. This pattern is read out and repeated until the JP03B enable bit is cleared. The JP03B enable is user configurable.","The Quad PRBS13 Test pattern, which applies in 40G-PAM4 and 100G-PAM4 mode, consists of sending 3 full cycles of 8191 bits followed by 1 cycle of 6523 bits. This translates to 31096 bits repeated. The bits in the first and third cycle are non-inverted while bits in the second and fourth cycle are inverted. The PRBS13 is initialized at the end of every cycle. The design includes a 92b wide PRBS to support this feature, following the above rules. This 92b is then translated to 66b output to be sent out. The Quad PRBS13 enable is user configurable.","Error Injection function supports an Error Injection capability into the transmit stream using an Error Set Mask register. The Error Set Mask register is user configurable and will be defined to be the width of the widest transmit stream. If the Error Set Mask register is cleared, then no Errors are injected. If the bits of the Error Set Mask register are set to 1, then the corresponding transmit bits are inverted.","Transmit Polarity, Swap and Disable functions are provided to support polarity inversion of each transmit bit, swap of each transmit bit and transmit disable. Each one of the feature is user configurable independently. In terms of sequence of the configuration, polarity gets applied first followed by disable and finally swap. This order is fixed in design and cannot be altered.","As an example, an exemplary pattern generator interface is shown in the Table 8 below:",{"@attributes":{"id":"p-0135","num":"0178"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"center"}},"thead":{"row":{"entry":"TABLE 8"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Pattern Generator Interface Description"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},{},"Reference",{}]},{"entry":["Signal Name","Direction","Width","Clock","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Datapath interface"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["mreg_prbs_en","Input","1","Register clock","Tx PRBS Enable"]},{"entry":["mreg_prbs_mode","Input","3","Register clock","3 b PRBS Select,"]},{"entry":[{},{},{},{},"0 - PRBS31, 1 - PRBS9,"]},{"entry":[{},{},{},{},"2 - PRBS7, 3 - PRBS11, "]},{"entry":[{},{},{},{},"4 - PRBS15,"]},{"entry":[{},{},{},{},"5 - PRBS23"]},{"entry":["mreg_prbs_inv","Input","1","Register clock","PRBS Invert enable"]},{"entry":["mreg_prbs_ld_init","Input","1","Register clock","Load PRBS with a init value of"]},{"entry":[{},{},{},{},"1"]},{"entry":["mreg_sq_wave_en","Input","1","Register clock","Tx Square Wave Enable"]},{"entry":["mreg_cust_pat_en","Input","1","Register clock","Tx Custom Pattern Enable"]},{"entry":["mreg_cust_pat_clr_mem","Input","1","Register clock","Clear Custom pattern memory"]},{"entry":["mreg_cust_pat_wr","Input","1","Register clock","Write strobe for Custom Pattern"]},{"entry":[{},{},{},{},"memory"]},{"entry":["mreg_cust_pat_ rd","Input","1","Register clock","Read strobe for Custom Pattern"]},{"entry":[{},{},{},{},"memory"]},{"entry":["mreg_cust_pat_wraddr","Input","8","Register clock ","Write address for Custom"]},{"entry":[{},{},{},{},"pattern memory"]},{"entry":["mreg_cust_pat_rdaddr","Input","8","Register clock","Read address for Custom pattern"]},{"entry":[{},{},{},{},"memory"]},{"entry":["mreg_cust_pat_wrdata","Input","16","Register clock","Write data for Custom pattern"]},{"entry":[{},{},{},{},"memory"]},{"entry":["mreg_tx_err_mask_en","Input","1","Register clock","Error Mask enable"]},{"entry":["mreg_tx_err_mask","Input","66","Register clock","66 b Error Set Mask"]},{"entry":["mreg_tx_invert_en","Input","1","Register clock","Tx Polarity Inversion Enable"]},{"entry":["mreg_tx_squelch_en","Input","1","Register clock","Tx Disable configuration"]},{"entry":["mreg_tx_swap_en","Input","1","Register clock","Tx bit Swap enable"]},{"entry":["mreg_jp03a_en","Input","1","Register clock","JP03A Enable"]},{"entry":["mreg_jp03b_en","Input","1","Register clock","JP03B Enable"]},{"entry":["mreg_qprbs13_en","Input","1","Register clock","Quad PRBS13 Enable"]},{"entry":["mreg_tx_mode","Input","3","Register clock","Tx mode"]},{"entry":["p4enc_txd_40g","Input","66","tx_clk_625m","66 b Tx data"]},{"entry":["p4enc_txd_100g","Input","264","tx_clk_625m","264 b Tx data"]},{"entry":["pgen_txd_out","Output","264","tx_clk_625m","66 b or 264 b Tx Data output"]},{"entry":["pgen_cust_pat_rddata","Output","16","tx_clk_625m","16 b MDIO read data"]},{"entry":["pgen_cust_pat_gap_en","Output","1","tx_clk_625m","Custom pattern gap clock enable"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Test Interface"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["tx_scan_mode","Input","1","Test clock","Scan mode"]},{"entry":["tx_scan_in","Input","X","Test clock","Scan in"]},{"entry":["tx_scan_en","Input","1","Test clock","Scan enable"]},{"entry":["pgen_scan_out","Output","X","Test clock","Scan out"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Clock\/Reset interface"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["pgen_tx_clk","Input","1",{},"Tx clock, to be used for 40G"]},{"entry":["pgen_tx_gap_clk","Input","1",{},"Tx clock, to be used for 40G"]},{"entry":["mreg_clk","Input","1",{},"Register clock"]},{"entry":["pgen_tx_reset_n","Input","1","pgen_tx_clk","Active low reset synchronized to"]},{"entry":["pgen_tx_clk",{},{},{},{}]},{"entry":["mreg_reset n","Input","1","mreg_clk","Active low reset synchronized to"]},{"entry":["mreg_clk",{},{},{},{}]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"Now referring back to . The outputs of the gearboxes are coupled to a first MUX  and a second MUX . The MUXes, among other things, allow the system to select between output of the gearboxes (i.e., actual transcoded data) and pattern generator (e.g., test data). The PAM Gray maps  and  are configured to encode the transcoded data for transmission.","In various embodiments, MDIO\/I2C Interface is provided. The configuration and status registers in the design are all accessible via 2-pin MDIO or 2-pin I2C interface. Since this IP will reside in a Transmit chip, the design will also provide read\/write access to all the configuration and status registers in the chip. The I2CSEL pin, when true, indicates the access is via I2C interface and when false, indicates the access is via MDIO interface. The MDIO and I2C interface are both designed to be slave interface.","In order to figure out the MMD device addresses and from IEEE 802.3ba-2010, Annex 83C, 83C.1.2, the design will assign MMD=30 for the IP, and MMD=31 for registers external to IP. The MMD device addresses are","MMD=1 will be assigned for the Receive chip","MMD=30 and 31 for the Transmit chip","The PHY address can be the same for both the Rx and Tx chips.","The design incorporates a MDIO Slave protocol state machine, I2C Slave protocol state machine, MMD device 30 registers and MMD device 31 register interfaces. The block diagram of the MDIO interface block is shown in . This diagram is merely an example, which should not unduly limit the scope of the claims. One of ordinary skill in the art would recognize many variations, alternatives, and modifications. As shown, MDIO controller  is connected to the IC2 controller . Output of MDIO controller  is connected to selector . Selector  output is provided to address decode block , which is connected to MMD 30 registers  and MMD 31 register interface .  further illustrates a plurality of multiplexers .","In an embodiment, the MDIO Controller in  adheres to Clause 45 of IEEE 802.3 specification and is implemented as a Slave interface running at the MDC frequency. As an example,  is a simplified diagram illustrating operation of a MIDO controller according to embodiments of the present invention. This diagram is merely an example, which should not unduly limit the scope of the claims. One of ordinary skill in the art would recognize many variations, alternatives, and modifications. Table 19 provides a description for the process:",{"@attributes":{"id":"p-0144","num":"0187"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"center"}},"thead":{"row":{"entry":"TABLE 9"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"MDIO Controller FSM Description"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["State","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["MD_IDLE","This is the default state of the MDIO Controller FSM. State is entered on reset."]},{"entry":["MD_PRE","Ensure 32 MDC clocks of Preamble are seen before every transaction."]},{"entry":[{},"Transition to MD_ST once at least 32 MDC clocks of Preamble is seen, "]},{"entry":[{},"else MD_IDLE."]},{"entry":["MD_ST","Start of MDIO transaction state. Expect to see 2 MDC clocks of "]},{"entry":[{},"consecutive 0's and then transition to MD_OPC, else MD_IDLE"]},{"entry":["MD_OPC","Opcode transaction state. This is a wait of 2 MDC clocks."]},{"entry":["MD_PHYA","Phy Address state. Wait for 5 MDC clocks and then transition to"]},{"entry":[{},"MD_MMDA if the PhyAddr matches the configured value, else transition to"]},{"entry":[{},"MD_IDLE."]},{"entry":["MD_MMDA","Device Address state. Wait for 5 MDC clocks. On a read transaction and"]},{"entry":[{},"MMD being either 30 or 31, transition to MD_TARD state. On a write"]},{"entry":[{},"transaction and MMD being either 30 or 31, transition to MD_TAWR "]},{"entry":[{},"state, else transition to MD_IDLE."]},{"entry":["MD_TARD","Read Turn-around state. 2 cycle state. 1cycle output enable is disabled "]},{"entry":[{},"and 2cycle, output enable is enabled and a 0 is driven"]},{"entry":["MD_READ","Read data state. 16 cycle state. Shift out the 16 b read data serially."]},{"entry":["MD_TAWR","Write Turn-around state. 2 cycle state. Expect to see \u2032b10 and then "]},{"entry":[{},"transition to MD_WRIT state, else MD_IDLE"]},{"entry":["MD_WRIT","Write data state. 16 cycle state. Assert write strobe on the 15cycle for a"]},{"entry":[{},"write opcode. Capture address on the 16cycle for MMD = 30 or 31 and"]},{"entry":[{},"Address cycle."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"In various embodiments, I2C controllers are used. The I2C implementation maps Clause 45 MDIO transactions onto I2C 16 bit Read and Write operations.\n\n","In order to map Clause 45 MDIO functionality onto the I2C bus, I2C device address bits are used to provide transaction type and MMD select information. Note that I2C addresses are customarily shown as right justified 8 bit hex number\u2014despite being 7 bits in length. They are labeled A7 through A1, with A7 being the MSB.","The LS I2C address bit \u201cA1\u201d is used in conjunction with IC R\/\u02dcW bit to indicate transaction type, as shown in Table 10:",{"@attributes":{"id":"p-0148","num":"0194"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 10"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"I2C Transaction Mapping"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"154pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["R\/~W","A1","MDIO Transaction Type"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["0","0","Address Write"]},{"entry":["0","1","Data Write"]},{"entry":["1","0","Data Read - post read address increment"]},{"entry":["1","1","Data Read"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The address bit \u201cA2\u201d is used to select between the two MMDs implemented in the Tx IP:","A2=0 selects MMD30; A2=1 selects MMD31","The MS 5 address bits \u201cA7-A3\u201d are used to select the device. A7:A3 must match PHYADR4\/3\/2\/1\/0. Eight device mappings are available for the Tx IP, selected by the PHYADR pins. Each map uses 4 device addresses to differentiate between transaction types and MMDs. The following table shows device addresses used by each mapping, as shown in Table 11:",{"@attributes":{"id":"p-0152","num":"0198"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 11"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"I2C Address Mapping"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"MMD30","MMD31"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Address","Data Write","Address Write","Data Write"]},{"entry":[{},"Write Or","Or","Or","Or"]},{"entry":["PHYADR2:0","Data Read++","Data Read","Data Read++","Data Read"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["000","0x00","0x02","0x04","0x06"]},{"entry":["001","0x08","0x0A","0x0C","0x0E"]},{"entry":["010","0x10","0x12","0x14","0x16"]},{"entry":["011","0x18","0x1A","0x1C","0xlE"]},{"entry":["100","0x20","0x22","0x24","0x26"]},{"entry":["101","0x28","0x2A","0x2C","0x2E"]},{"entry":["110","0x30","0x32","0x34","0x36"]},{"entry":["111","0x38","0x3A","0x3C","0x3E"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"As an example, the Tx IP is designed to operate with 16 bit (two byte) IC operations.\n\n","Note that data carried by Tx IP I2C bus transactions is in \u201cBig Endian\u201d (MSB first) format, as in Clause 45 MDIO.",{"@attributes":{"id":"p-0155","num":"0205"},"figref":"FIGS. 20 and 21"},"As an example, I2C timing my operate in one or more modes. In various embodiments, The Tx IP devices support Standard-mode, Fast-mode and Fast-mode Plus I2C timings. The timing of the I2C interface is defined in the I2C-bus specification and user manual (NXP Semiconductors UM10204).","Note that the I2C State Machine does not use SCL (MDC) as its clock (unlike the MDIO SM which is clocked by MDC). The I2C SM uses the nominally 10 MHz clock (clk_10m) from the clock prescaler as its clock. SCL and SDA are asynchronously sampled using this clock to implement the I2C protocol, and provide glitch suppression.","In various embodiments, MMD 30 Registers are provided. According to various implementations, the MMD 30 Registers are allocated for the configuration and status information of the registers internal to the Tx IP design. An overview of the registers for this particular MMD is specified in the table 12 below:",{"@attributes":{"id":"p-0159","num":"0209"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"center"}},"thead":{"row":{"entry":"TABLE 12"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"MMD 30 Register Overview"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Register address",{}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Decimal","Hex","Register name","Notes"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["30.0","30.0000","Device Control 1",{}]},{"entry":["30.1","30.0001","Device Status 1","Read as zeroes, writes have no"]},{"entry":[{},{},{},"effect"]},{"entry":["30.2,30.3","30.0002-30.0003","Device identifier","Tx IP identifier"]},{"entry":["30.4","30.0004","Reserved","Read as zeroes, writes have no"]},{"entry":[{},{},{},"effect"]},{"entry":["30.5,30.6","30.0005-30.0006","Devices in Package","Vendor specific device 1"]},{"entry":[{},{},"registers","present bits"]},{"entry":["30.7","30.0007","Reserved","Read as zeroes, writes have no"]},{"entry":[{},{},{},"effect"]},{"entry":["30.8","30.0008","Status register",{}]},{"entry":["30.9-30.13","30.0009-30.000D","Reserved","Read as zeroes, writes have no"]},{"entry":[{},{},{},"effect"]},{"entry":["30.14,30.15","30.000E-30.000F","Package identifier","Read as zeroes, writes have no"]},{"entry":[{},{},{},"effect"]},{"entry":["30.16-30.31","30.0010-30.001F","Chip Control and Status","16 16 b registers"]},{"entry":["30.32-30.223","30.0020-30.00DF","Pattern Generator block","192 16 b registers"]},{"entry":["30.224-30.255","30.00E0-30.00FF","Protocol Lock and FIFO","32 16 b registers"]},{"entry":[{},{},"blocks",{}]},{"entry":["30.256-30.287","30.0100-30.011F","Transcoder block","32 16 b registers"]},{"entry":["30.288-30.351","30.0120-30.015F","BCH Encoder blocks ","64 16 b registers"]},{"entry":["30.352-30.359","30.0160-30.0167","Mapper blocks ","8 16 b registers"]},{"entry":["30.360-30.375","30.0168-30.0177","Channel Training","16 16 b registers"]},{"entry":[{},{},"Registers",{}]},{"entry":["30.376-30.391","30.0178-30.0187","Misc Registers","16 16 b registers"]},{"entry":["30.392-","30.0188-30.FFFF","Reserved","Read as zeroes, writes have no"]},{"entry":["30.65535",{},{},"effect"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"As an example, an MMD 31 Register Interface is provided for configuration and\/or other functions. The MMD 31 Registers are allocated for the configuration and status information of the registers external to the Tx IP design, but within the Tx Chip that includes the Tx IP. These registers are to be implemented outside the IP. The IP will provide the clock, register address, register read and write strobe and the register write data. The external block will use these to interface to the registers and provide the read data back to the IP as shown .","An overview of the registers for the particular MMD is specified in the table 13:",{"@attributes":{"id":"p-0162","num":"0212"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"center"}},"thead":{"row":{"entry":"TABLE 13"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"MMD 31 Register Overview"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Register address",{}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Decimal","Hex","Register name","Notes"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["31.0","31.0000","Vendor Specific Device",{}]},{"entry":[{},{},"Control 1",{}]},{"entry":["31.1","31.0001","Reserved","Read as zeroes, writes have no"]},{"entry":[{},{},{},"effect"]},{"entry":["31.2,31.3","31.0002, 31.0003","Vendor Specific device","Tx Chip identifier, probably same"]},{"entry":[{},{},"identifier","as 30.2 and 30.3"]},{"entry":["31.4","31.0004","Reserved","Read as zeroes, writes have no"]},{"entry":[{},{},{},"effect"]},{"entry":["31.5,31.6","31.0005, 31.0006","Devices in Package","Vendor specific device 2 present"]},{"entry":[{},{},"registers","bits"]},{"entry":["31.7","31.0007","Reserved","Read as zeroes, writes have no"]},{"entry":[{},{},{},"effect"]},{"entry":["31.8","31.0008","Vendor Specific Status",{}]},{"entry":[{},{},"register",{}]},{"entry":["31.9-31.13","31.0009-31.000D","Reserved","Read as zeroes, writes have no"]},{"entry":[{},{},{},"effect"]},{"entry":["31.14,31.15","31.000E-31.000F","Vendor Specific","Read as zeroes, writes have no"]},{"entry":[{},{},"package identifier","effect"]},{"entry":["31.16-","31.0010-31.FFFF","External registers","~64k 16 b registers"]},{"entry":"31.65535"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"The MDIO\/I2C interface is given in the table 14 below:",{"@attributes":{"id":"p-0164","num":"0214"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 14"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"MDIO\/I2C Interface Description"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Direc-",{},"Reference",{}]},{"entry":["Signal Name","tion","Width","Clock","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Controller interface"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["mic_mdio_in","Input","1","mic_mdc","MDIO Input data"]},{"entry":["mic_i2csel","Input","1","Register ","I2C Select pin, "]},{"entry":[{},{},{},"clock","1-I2C interface,"]},{"entry":[{},{},{},{},"0-MDIO interface"]},{"entry":["mic_mdio_out","output","1","mic_mdc","MDIO output data"]},{"entry":["mic_mdio_out_en","Output","1","mic_mdc","MDIO output data"]},{"entry":[{},{},{},{},"enable"]},{"entry":["mic_phyaddr","Input","5","mic_mdc","Phy Address pins"]},{"entry":["mic_extreg_addr","Output","16","mic_mdc","16b Register "]},{"entry":[{},{},{},{},"address"]},{"entry":["mic_extreg_wr","Output","1","mic_mdc","1b register write"]},{"entry":["mic_extreg_rd","Output","1","mic_mdc","1b register read"]},{"entry":["mic_extreg_wrdata","Output","16","mic_mdc","16b register write "]},{"entry":[{},{},{},{},"data"]},{"entry":["mic_extreg_rddata","Input","16","mic_mdc","16b register read "]},{"entry":[{},{},{},{},"data"]},{"entry":["mic_control","Output","N","mic_mdc","N bit control for "]},{"entry":[{},{},{},{},"IP blocks"]},{"entry":["mic_status","Input","M","mic_mdc","M bit status from "]},{"entry":[{},{},{},{},"the IP block"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Test Interface"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["tx_scan_mode","Input","1","Test clock","Scan mode"]},{"entry":["tx_scan_in","Input","X","Test clock","Scan in"]},{"entry":["tx_scan_en","Input","1","Test clock","Scan enable"]},{"entry":["mic_scan_out","Output","X","Test clock","Scan out"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Clock\/Reset interface"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["mic_mdc","Input","1",{},"MDC clock"]},{"entry":["mic_clk10m","Input","1",{},"10 Mhz clock for "]},{"entry":[{},{},{},{},"I2C"]},{"entry":["mic_reset_mdc_n","Input","1","mic_mdc ","Active low reset "]},{"entry":[{},{},{},{},"synchronized to"]},{"entry":[{},{},{},{},"mic_mdc"]},{"entry":["mic_reset_clk10m_n","Input","1","mic_clk10m","Active low reset "]},{"entry":[{},{},{},{},"synchronized to"]},{"entry":[{},{},{},{},"clk10m"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"While the above is a full description of the specific embodiments, various modifications, alternative constructions and equivalents may be used. Therefore, the above description and illustrations should not be taken as limiting the scope of the present invention which is defined by the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8A"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 10-15"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIGS. 20 and 21"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 22"}]},"DETDESC":[{},{}]}
