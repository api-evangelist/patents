---
title: System and method enabling execution stop and restart of a test executive sequence(s)
abstract: A system and method for enabling execution stop and re-start of a test executive sequence or hierarchy of test executive sequences. Execution progress of a test executive sequence or test executive sequence hierarchy may be periodically stored. This may comprise performing or taking “snapshots” of the execution at various points during the execution. Performing a snapshot may comprise saving all data needed to restore and re-start the execution at the respective point. The criteria of when and where to perform the snapshots may be any of various criteria and may be specified in any of various ways.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07076692&OS=07076692&RS=07076692
owner: National Instruments Corporation
number: 07076692
owner_city: Austin
owner_country: US
publication_date: 20010831
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","DESCRIPTION OF THE RELATED ART","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present invention relates to the field of test executive software for organizing and executing test executive sequences. In particular, the invention relates to a system and method enabling execution stop and restart of a test executive sequence or hierarchy of test executive sequences.","Test executive software is specialized software that allows a user to organize and execute sequences of reusable test modules to test units under test (UUTs). For example, the test modules may interact with one or more hardware instruments to test the UUT(s). The test modules often have a standard interface and typically can be created in a variety of programming environments. The test executive software operates as a control center for the automated test system. More specifically, the test executive software allows the user to create, configure, and\/or control test sequence execution for various test applications, such as production and manufacturing test applications. Text executive software typically includes various features, such as test sequencing based on pass\/fail results, logging of test results, and report generation, among others.","Test executives include various general concepts. The following comprises a glossary of test executive nomenclature, as used herein:","Code Module\u2014A program module, such as a Windows Dynamic Link Library (.dll), LabVIEW VI (.vi), ActiveX component, or other type of program module or component, that implements one or more functions that perform a specific test or other action.","Test Module\u2014A code module that performs a test of a UUT.","Step\u2014An action that the user can include within a sequence of other actions. A step may call a test module to perform a specific test.","Step Module\u2014The code module that a step calls.","Sequence\u2014A series of steps that the user specifies for execution in a particular order. Whether and when a step is executed can depend on the results of previous steps.","Sequence File\u2014A file that contains the definition of one or more sequences.","Sequence Editor\u2014A program that provides a graphical user interface for creating, editing, and debugging sequences.","Run-time Operator Interface\u2014A program that provides a graphical user interface for executing sequences on a production station. A sequence editor and run-time operator interface can be separate application programs or different aspects of the same program.","Test Executive Engine\u2014A module or set of modules that provide an API for creating, editing, executing, and debugging sequences. A sequence editor or run-time execution operator interface uses the services of a test executive engine.","Application Development Environment (ADE)\u2014A programming environment such as LabVIEW, LabWindows\/CVI, Microsoft Visual C++, Microsoft Visual Basic, etc., in which the user can create test modules and run-time operator interfaces.","Unit Under Test (UUT)\u2014The device or component that is being tested.","Thus, the user may use the sequence editor to construct a test executive sequence comprising a plurality of steps. The test executive sequence may then be executed to perform tests of a system or UUT.","Testing certain systems requires a very long time. For example, in the case of testing a satellite, the tests may run for days. Unfortunately, during execution of the test executive sequence(s) that test these systems, some type of failure occasionally occurs. Many types of failures are possible, such as an operating system crash, power failure, network failure, etc. Thus, it would be desirable to provide a test executive system operable to re-start the sequence execution at or near the point of the failure, so that the execution progress is not lost.","In many cases, the system under test can be logically or physically divided into sub-components that can be tested in a hierarchical manner. For example, consider a computer system having a chassis with several expansion slots and expansion boards attached to the expansion slots. Each expansion board may in turn have various elements, such as I\/O channels, etc. In this example, the system as a whole may be viewed as a hierarchy of sub-components, e.g., the expansion slots, the various boards connected to the slots, I\/O channels and other elements on the expansion slots, etc.","In a system comprising a hierarchy of sub-components such as described above, test developers often desire to organize test software in such a way as to mimic the system hierarchy. For example, one technique for achieving this is to create a hierarchy of test executive sequences, where each sequence maps to a sub-component of the system. Thus, in the example above, a first test executive sequence may be responsible for testing an expansion slot, e.g., physical connections for the slot. During execution of the first test executive sequence, the first test executive sequence may call a second test executive sequence to test an expansion board connected to the slot. This second test executive sequence may in turn call one or more additional test executive sequences to test the various sub-components of the expansion board.","When executing such a hierarchy of test executive sequences, a failure may occur in a sequence at any level within the hierarchy. Thus, an additional problem is how to re-start execution of the hierarchy of test executive sequences at some point within the hierarchy. One aspect of the problem is due to interactions among the test executive sequences. For example, when a first test executive sequence calls a second test executive sequence, the second test executive sequence often uses data that is set by the first test executive sequence. Therefore, without the first test executive sequence executing first to set this data correctly, the second test executive sequence may not execute correctly. Thus, it would be desirable to provide a test executive system operable to re-start the sequence execution at a particular test executive sequence within a test executive sequence hierarchy, such that execution is performed correctly.","One embodiment of the present invention comprises a system and method for enabling execution stop and re-start of a test executive sequence or hierarchy of test executive sequences. In one embodiment, execution progress of a test executive sequence or test executive sequence hierarchy may be periodically stored. For example, this may comprise performing or taking \u201csnapshots\u201d of the execution at various points during the execution. Performing a snapshot may comprise saving all data needed to restore and re-start the execution at the respective point. The snapshots may be persistently stored, e.g., in a file system or database. In various embodiments, the criteria of when and where to perform the snapshots may be any of various criteria and may be specified in any of various ways.","The snapshots may then be used to re-start execution of the test executive sequence(s) from the point in the execution corresponding to the snapshot, i.e., the point at which the snapshot was performed. For example, snapshots may be performed at various points, and in the case of an execution failure such as described above, the execution may be re-started from the most recent snapshot. In one embodiment, the user may specify a snapshot from which to re-start the execution. The ability to re-start the execution may also be useful to allow a user to request the execution to stop at a certain point, e.g., for debugging purposes, to enable the user to examine variable values, etc.","Any information related to the execution of the test executive sequence(s) that is necessary to successfully re-start an execution may be stored in a snapshot. In one embodiment, this may comprise storing information such as global variable values, sequence local variable values, runtime step property values, previous execution results, etc.","In one embodiment, execution may be able to be re-started from virtually every point in the test executive sequence or test executive sequence hierarchy. For example, snapshots may be performed after each step executes. In another embodiment, execution may not be able to be re-started from every point. Thus, it is possible that in the event of a failure requiring restart of the execution, a most recent portion of the execution will not be able to be restored.","In one embodiment, the system may be operable to perform snapshots using certain criteria inherent to or programmed into the test executive software. In another embodiment, the user may specify criteria for when to perform the snapshots.","In one embodiment, snapshots may be performed at certain time intervals. For example, the system may automatically perform a snapshot after a certain amount of time elapses, or the user may specify the time intervals at which the snapshots are desired. In another embodiment, snapshots may be taken based on results of the execution. For example, Boolean expressions or variables may be evaluated, and if the expressions or variables evaluate to True, then snapshots may be taken. The Boolean expression components or variable values may be set as a result of executing the test sequence(s).","In one embodiment, a separate or explicit step operable to perform the snapshot may be included in the test sequence. In another embodiment, the user may configure snapshots to be taken by setting a parameter or property of a sequence, and the snapshots are not necessarily performed by a separate step.","In one embodiment, execution of the test executive sequence may be stopped due to a failure of some kind, such as a software or hardware failure. In another embodiment, the user may request to stop the execution. For example, the user may desire to view certain variable values of the sequence, in order to debug the execution of the sequence.","In one embodiment, the test executive sequence being executed may be a nested sequence within a test executive sequence hierarchy. For example, the hierarchy of test executive sequences may be operable to test a hierarchical system such as described above. Each test executive sequence may map to a sub-component of the system and may be operable to test the respective sub-component. Thus, re-starting the execution may comprise re-creating or simulating an execution state for the entire chain of test executive sequences leading up to the point at which the snapshot is taken. This may include re-creating partial execution results for the sequence being executed when the snapshot was taken, i.e., for the portion of the sequence leading up to the point at which the snapshot is taken.","Snapshot information may be used to re-start execution of a test executive sequence or test executive sequence hierarchy in any of various ways. In one embodiment, the stack frame of the computer system may be re-created so that it is just as if the execution had run to the re-start point.","In one embodiment, in addition to re-creating data in memory, it may also be necessary to initialize states of one or more external (or internal) hardware devices used in the testing process. For example, assume a test executive sequence hierarchy in which a sequence being executed includes a first step that calls an external code module operable to set a first state of a first hardware device to a first value X. Suppose that execution fails in a subsequence of this sequence which is called after the first step, wherein the subsequence depends on the value X. If when the execution is subsequently re-started, the first state of the first hardware device is not set to X, then the subsequence may not execute correctly because the first step in the parent sequence which is operable to set the first state to X will not be executed again. Thus, the method may initialize states of one or more hardware devices, or software objects, used in the testing process.","In one embodiment, this problem may be solved by organizing test executive sequences in step groups. For example, a test executive sequence may comprise a setup group of steps, a main group of steps, a cleanup group of steps, etc. Steps which initialize hardware devices may be placed in the setup group. When execution of the test sequence hierarchy is re-started from within the subsequence, steps in the setup groups of sequences above the subsequence in the hierarchy may be executed. In other words, the sequences above the subsequence may be partially executed. Steps in other groups, such as a main group or cleanup group may not be executed. Any results from steps in these groups necessary to re-start execution may be stored when the snapshots are performed.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and are herein described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.","Incorporation by Reference","The following references are hereby incorporated by reference in their entirety as though fully and completely set forth herein.","U.S. patent application Ser. No. 09\/259,162 titled \u201cTest Executive System and Method Including Step Types for Improved Configurability,\u201d filed Feb. 26, 1999.","U.S. patent application Ser. No. 09\/943,988 titled \u201cSystem and Method Enabling Hierarchical Execution of a Test Executive Subsequence,\u201d filed Aug. 31, 2001.","FIG. \u2014Instrumentation System",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","102","102","102","150"]},"In one embodiment, the UUT may be a system comprising a plurality of sub-components organized in a hierarchical manner. The computer  may execute a test executive sequence or test executive sequence hierarchy to perform automated tests of the system or portions of the system. As described below, the computer  may perform snapshots of the execution at various points during the execution, such that the snapshots can be used to re-start the execution in the event of a failure or requested stop of the execution.","The one or more instruments may include a GPIB instrument  and associated GPIB interface card , a data acquisition board  and associated signal conditioning circuitry , a VXI instrument , a PXI instrument , a video device  and associated image acquisition card , a motion control device  and associated motion control interface card , and\/or one or more computer based instrument cards , among other types of devices.","The GPIB instrument  may be coupled to the computer  via a GPIB interface card  provided by the computer . In a similar manner, the video device  may be coupled to the computer  via the image acquisition card , and the motion control device  may be coupled to the computer  through the motion control interface card . The data acquisition board  may be coupled to the computer , and optionally interfaces through signal conditioning circuitry  to the UUT. The signal conditioning circuitry  preferably comprises an SCXI (Signal Conditioning eXtensions for Instrumentation) chassis comprising one or more SCXI modules .","The GPIB card , the image acquisition card , the motion control interface card , and the DAQ card  are typically plugged in to an I\/O slot in the computer , such as a PCI bus slot, a PC Card slot, or an ISA, EISA or MicroChannel bus slot provided by the computer . However, these cards , ,  and  are shown external to computer  for illustrative purposes. The cards , ,  and  may also be implemented as external devices coupled to the computer , such as through a serial bus.","The VXI chassis or instrument  may be coupled to the computer  via a serial bus, MXI bus, or other serial or parallel bus provided by the computer . The computer  preferably includes VXI interface logic, such as a VXI, MXI or GPIB interface card (not shown), which interfaces to the VXI chassis . The PXI chassis or instrument is preferably coupled to the computer  through the computer's PCI bus.","A serial instrument (not shown) may also be coupled to the computer  through a serial port, such as an RS-232 port, USB (Universal Serial bus) or IEEE 1394 or 1394.2 bus, provided by the computer . In typical systems an instrument will not be present of each interface type, and in fact many systems may only have one or more instruments of a single interface type, such as only GPIB instruments.","The instruments are coupled to the unit under test (UUT) or process , or are coupled to receive field signals, typically generated by transducers. Other types of instruments or devices may be connected to the system, as desired.","The computer system  may include a memory medium on which test executive software according to one embodiment of the present invention is stored. The test executive software may allow a user to create, configure, and\/or control test executive sequence execution for various test applications, such as production and manufacturing test applications. As described below, the test executive software may include functionality for performing snapshots of the execution of a test executive sequence.","The term \u201cmemory medium\u201d is intended to include an installation medium, e.g., a CD-ROM, floppy disks , or tape device; a computer system memory or random access memory such as DRAM, SRAM, EDO RAM, Rambus RAM, etc.; or a nonvolatile memory such as a magnetic media, e.g., a hard drive, or optical storage. The memory medium may comprise other types of memory as well, or combinations thereof. In addition, the memory medium may be located in a first computer in which the programs are executed, or may be located in a second different computer that connects to the first computer over a network, such as the Internet. In the latter instance, the second computer may provide program instructions to the first computer for execution. The host computer CPU executing code and data from the memory medium may comprise a means for implementing the methods described below.","FIG. \u2014Computer System Block Diagram",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 2","FIG. 1","FIG. 2","FIG. 1"]},"The computer  includes at least one central processing unit or CPU  that is coupled to a processor or host bus . The CPU  may be any of various types, including an x86 processor, e.g., a Pentium class, a PowerPC processor, a CPU from the SPARC family of RISC processors, as well as others. Main memory  is coupled to the host bus  by means of memory controller .","The main memory  may store software according to one embodiment of the present invention, such as test executive software with functionality as described above with reference to . The main memory  may also store operating system software as well as other software for operation of the computer system, as well known to those skilled in the art.","The host bus  is coupled to an expansion or input\/output bus  by means of a bus controller  or bus bridge logic. The expansion bus  is preferably the PCI (Peripheral Component Interconnect) expansion bus, although other bus types can be used. The expansion bus  includes slots for various devices such as the data acquisition board  (of ) and a GPIB interface card  that provides a GPIB bus interface to the GPIB instrument  (of ). The computer  further comprises a video display subsystem  and hard drive  coupled to the expansion bus .","As shown, a reconfigurable instrument  may also be connected to the computer . The reconfigurable instrument  may include a functional unit, also referred to as configurable logic, such as a programmable logic device (PLD), e.g., an FPGA, or a processor and memory, which may execute a real time operating system. Program instructions may be downloaded and executed on the reconfigurable instrument . In one embodiment, at least a portion of the test executive software described herein may execute on the reconfigurable instrument . In various embodiments, the functional unit may be comprised on an instrument or device connected to the computer through means other than an expansion slot, e.g., the instrument or device may be connected via an IEEE 1394 bus, USB, or other type of port. Also, the functional unit may be comprised on a device such as the data acquisition board  or another device shown in .","Test Executive Software Components",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 3","FIG. 3","FIG. 3","FIG. 3","FIG. 3"],"b":["202","202","202"]},"The test executive software of  also includes a sequence editor  for creating and editing test executive sequences. The sequence editor  and the operator interface programs  interface to the test executive engine . One or more process models  couple to the test executive engine . The test executive engine  interfaces through an adapter interface  to one or more adapters . The adapters shown in  include the LabVIEW standard prototype adapter, the C\/CVI prototype adapter, the DLL flexible prototype adapter, and the sequence adapter. The LabVIEW standard prototype adapter interfaces to program modules having a .VI extension, i.e., LabVIEW graphical programs. The C\/CVI prototype adapter interfaces to program modules having a .dll, .lib, .obj, or .c extension. The DLL flexible prototype adapter interfaces to program modules having a .dll extension. The sequence adapter interfaces to sequence files.","The test executive engine  manages the execution of test executive sequences. Sequences comprise steps that may call external code modules. By using module adapters  that have the standard adapter interface , the test executive engine  can load and execute different types of code modules. Thus, the test executive may be independent from particular application development environments (ADEs) used to create the code modules. In one embodiment, the test executive may use a special type of sequence called a process model to direct the high-level sequence flow. The test executive engine  may implement an API used by the sequence editor  and run-time operator interfaces .","Test Executive Sequence Editor","The sequence editor  may be an application program in which the user creates, modifies, and\/or debugs test executive sequences. The sequence editor  may have a graphical user interface (GUI) enabling a user to efficiently create a test executive sequence for testing a system or unit under test. For example, the sequence editor  may provide the user with easy access to test executive features, such as step types, step properties, sequence parameters, step result collection, etc.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 4","FIG. 4","FIG. 5","FIG. 5"],"b":"212"},"In some cases, test executive sequences may be created to test a system that includes a plurality of sub-components. Often, the system sub-components may be conceptualized as a hierarchy of sub-components, e.g., as in the example given above with sub-components of expansion slots, expansion boards, elements on the expansion boards, etc. To test such a system, a user may utilize the sequence editor  to create a plurality of test executive sequences. Each test executive sequence may map to a sub-component of the system. (In some cases, only a portion of the system under test may be conceptualized as a hierarchical system; in this case the plurality of test executive sequences may map to the plurality of sub-components in this portion of the system.)","Thus, the plurality of test executive sequences may also be seen as a hierarchy analogous to the hierarchy of the system. It is noted, however, that in some embodiments there may not be an exact mapping of test executive sequences to system sub-components. For example, some of the test executive sequences may be operable to perform tests that do not specifically test a system sub-component. These test executive sequences may not have a corresponding system sub-component. However, the hierarchy of test executive sequences may still mimic the system hierarchy, at least loosely.","In one embodiment, the hierarchy of test executive sequences may be structured in a tree form, wherein each child test executive sequence in the tree is called by a parent test executive sequence. For example, when a test executive sequence at the root of the tree is executed, this root test executive sequence may call its child test executive sequences, which then call their child test executive sequences, etc. The tree may be traversed in any of various ways in order to execute the test executive sequences. It is noted that in other embodiments, the plurality of test executive sequences may be structured using any of various other hierarchical techniques, instead of as a tree structure.","In one embodiment, the sequence editor  may enable users to structure and display the plurality of test executive sequences hierarchically in a GUI of the sequence editor. For example,  illustrates a GUI display of a tree of test executive sequences. In this example, the root test executive sequence is named \u201cAsync Markov Call\u201d. As illustrated, sequences named \u201cPreset Bits\u201d and \u201cSector 1\u201d are located one level below the root test executive sequence. The \u201cSector 1\u201d sequence has child sequences named \u201cPrset Markov Call\u201d, \u201cSynchronization Step\u201d, \u201cSimulate Forward Users\u201d, and \u201cCEM slot 1\u201d, etc.","In other embodiments, the plurality of test executive sequences may execute in a hierarchical manner, but the sequence editor  may not necessarily provide the ability to display the sequences hierarchically. As an example, a hierarchy or chain of three test executive sequences, sequence A, sequence B, and sequence C may be created, wherein sequence A calls sequence B, and sequence B calls sequence C. In this example, each of these three sequences may be created independently, and the sequence editor  may not provide the ability to visually indicate the sequence hierarchy.","In one embodiment, the sequence editor  may also include an execution window that provides debugging tools, e.g., those found in application development environments such as LabVIEW, LabWindows\/CVI, Microsoft Visual C\/C++, Microsoft Visual Basic, etc. These may include features such as breakpoints, single stepping, tracing, a variable display, and a watch window.","In one embodiment, in the sequence editor , the user may start multiple concurrent executions. Multiple instances of the same sequence can be executed, and different sequences can be executed at the same time, e.g., as separate threads in a multi-threaded system. Each execution instance has its own execution window. In trace mode, the execution window may display the steps in the currently executing sequence. When execution is suspended, the execution window may display the next step to execute and provide single-stepping options.","Test Executive Engine","The test executive engine  may be used when creating, editing, executing, and debugging test executive sequences. The test executive engine  may also provide a test executive engine application programming interface (API) that enables another program to interface with the test executive engine  in order to perform these actions. In one embodiment, the test executive engine  may export an object-based or component-based API, which in one embodiment may be an ActiveX Automation API. The sequence editor  and run-time operator interfaces  may use the test executive engine API. The engine API may be called from any programming environment able to use the API. For example, where the API comprises an ActiveX Automation API, the engine API may be called from any programming environment that supports access to ActiveX Automation servers. Thus, in various embodiments, the engine API may be called from test modules written in various programming environments, including test modules that are written in LabVIEW, LabWindows\/CVI, Microsoft Visual C++, Microsoft Visual Basic, Java, etc.","One task performed by the test executive engine  is to manage the execution of test executive sequences. Executing a sequence may comprise executing steps included in the sequence. Not all steps in the sequence are necessarily executed. For example, the user may configure some steps to be skipped, e.g., depending on execution results of previous steps. For a step that references a user-supplied code module, executing the step may comprise executing the respective code module. In addition to these user-supplied code modules being executed, for each step, additional program instructions may be executed, wherein these additional program instructions implement additional functionality specified for the step. These additional program instructions may be specified by the test executive software, rather than being defined by the respective user-supplied code module for the step. As one example, when including a step in a sequence, the user may configure execution results of the step to be collected. In this example, when the step is executed, program instructions to store the step results accordingly may be executed in addition to the program instructions of a user-supplied code module that the step references. It is noted that not all steps may reference a user-supplied code module. For example, the test executive may provide some step types that primarily affect various aspects of sequence execution and are not designed to reference user-supplied code modules.","FIG. \u2014Restarting Execution of a Test Executive Sequence",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 7"},"In step , a test executive sequence may be created, e.g., using a sequence editor such as described above.","In step , the test executive sequence may be executed, e.g., under control of a test executive engine such as described above.","In step , one or more snapshots of the execution of the test executive sequence may be performed during execution of the test exacutive sequence in step , to store execution progress of the test executive sequence. Each snapshot may be performed at a particular point during execution of the test executive sequence. Performing a snapshot may comprise saving all data needed to restore and re-start the execution at the respective point. In one embodiment, the snapshots may be persistently stored, e.g., in a file system or database. In various embodiments, the criteria of when and where to perform the snapshots may be any of various criteria and may be specified in any of various ways.","Any information related to the execution of the test executive sequence that is necessary to successfully re-start an execution may be stored in a snapshot. In one embodiment, this may comprise storing information such as global variable values, sequence local variable values, runtime step property values, previous execution results, etc.","In one embodiment, the method may perform a \u201cfull\u201d backup interspersed with various \u201cincremental\u201d backups, wherein incremental backups store only the changes relative to a prior full backup.","In step , execution of the test executive sequence may be stopped after a particular snapshot is performed, e.g., due to an execution failure or user-requested stop. For example, in one embodiment, execution of the test executive sequence may be stopped due to a failure of some kind, such as a software or hardware failure. In another embodiment, the user may request to stop the execution. For example, the user may desire to view certain variable values of the sequence, in order to debug the execution of the sequence.","In step , execution of the test executive sequence may be re-started from the point at which the particular snapshot was performed. Re-starting execution of the test executive sequence may comprise using the stored information of the particular snapshot to restore an execution environment of the computer system so that the test executive sequence can execute correctly from the point at which the particular snapshot was performed.","The execution may be re-started from any snapshot. For example, in one embodiment, the execution may be re-started from the most recent snapshot. In another embodiment, the user may specify a snapshot from which to re-start the execution. In one embodiment, the user may graphically specify a snapshot from which to re-start execution using a GUI.","In one embodiment, execution may be able to be re-started from virtually every point in the test executive sequence or test executive sequence hierarchy. For example, snapshots may be performed after each step executes. In another embodiment, execution may not be able to be re-started from every point. Thus, it is possible that in the event of a failure requiring restart of the execution, a most recent portion of the execution will not be able to be restored.","In one embodiment, the system may be operable to perform snapshots using certain criteria inherent to or programmed into the test executive software. In another embodiment, the user may specify criteria for when to perform the snapshots.","In one embodiment, snapshots may be performed at certain time intervals. For example, the system may automatically perform a snapshot after a certain amount of time elapses, or the user may specify the time intervals at which the snapshots are desired. In another embodiment, snapshots may be taken based on results of the execution. For example, Boolean expressions or variables may be evaluated, and if the expressions or variables evaluate to True, then snapshots may be taken. The Boolean expression components or variable values may be set by the execution of the test sequence(s).","In one embodiment, a separate or explicit step operable to perform the snapshot may be included in the test sequence. In another embodiment, the user may configure snapshots to be taken by setting a parameter or property of a sequence, and the snapshots are not necessarily performed by a separate step.","Snapshot information may be used to re-start execution of a test executive sequence in any of various ways. In one embodiment, the stack frame of the computer system may be re-created so that it is just as if the execution had run to the re-start point. The states of one or more data structures may also be recreated in memory.","In one embodiment, in addition to re-creating data in memory, it may also be necessary to initialize states of one or more external hardware devices used in the testing process. For example, assume a test executive sequence hierarchy in which a sequence being executed includes a first step that calls an external code module operable to set a first state of a first hardware device to a first value X. Suppose that execution fails in a subsequence of this sequence which is called after the first step, wherein the subsequence depends on the value X. If when the execution is subsequently re-started, the first state of the first hardware device is not set to X, then the subsequence may not execute correctly because the first step in the parent sequence which is operable to set the first state to X will not be executed again.","In one embodiment, this problem may be solved by organizing test executive sequences in step groups. For example, a test executive sequence may comprise a setup group of steps, a main group of steps, a cleanup group of steps, etc. Steps which initialize hardware devices may be placed in the setup group. When execution of the test sequence hierarchy is re-started from within the subsequence, steps in the setup groups of sequences above the subsequence in the hierarchy may be executed. In other words, the sequences above the subsequence may be partially executed. Steps in other groups, such as a main group or cleanup group may not be executed. Any results from steps in these groups necessary to re-start execution may be stored when the snapshots are performed.","FIG. \u2014Restarting Execution of a Test Executive Sequence","In one embodiment, the test executive sequence being executed may be a nested sequence within a test executive sequence hierarchy. For example, the hierarchy of test executive sequences may be operable to test a hierarchical system such as described above. Each test executive sequence may map to a sub-component of the system and may be operable to test the respective sub-component.  is a flowchart diagram illustrating one embodiment of a method for re-starting execution of a test executive sequence hierarchy.","In step , a plurality of test executive sequences that execute as a hierarchy may be created, e.g., using a sequence editor such as described above. In the plurality of test executive sequences may be displayed hierarchically. For example,  illustrates one example of a GUI display of a tree of test executive sequences.","In step , the test executive sequence hierarchy may be executed, e.g., under control of a test executive engine such as described above.","In step , one or more snapshots of the execution of the test executive sequence hierarchy may be performed, to store execution progress of the test executive sequence hierarchy. Each snapshot may be performed at a particular point during execution of the test executive sequence hierarchy. Performing a snapshot may comprise saving all data needed to restore and re-start the execution at the respective point. In one embodiment, the snapshots may be persistently stored, e.g., in a file system or database. In various embodiments, the criteria of when and where to perform the snapshots may be any of various criteria and may be specified in any of various ways.","Any information related to the execution of the test executive sequence hierarchy that is necessary to successfully re-start an execution may be stored in a snapshot. In one embodiment, this may comprise storing information such as global variable values, sequence local variable values, runtime step property values, etc.","In step , execution of the test executive sequence may be stopped after a particular snapshot is performed, e.g., due to an execution failure or user-requested stop. For example, in one embodiment, execution of the test executive sequence hierarchy may be stopped due to a failure of some kind, such as a software or hardware failure. In another embodiment, the user may request to stop the execution.","In step , execution of the test executive sequence hierarchy may be re-started from the point at which the particular snapshot was performed. Re-starting execution of the test executive sequence hierarchy may comprise using the stored information of the particular snapshot to restore an execution environment of the computer system so that the test executive sequence hierarchy can execute correctly from the point at which the particular snapshot was performed.","Thus, re-starting the execution may comprise re-creating or simulating an execution state for the entire chain of test executive sequences leading up to the point at which the snapshot is taken. This may include re-creating partial execution results for the sequence being executed when the snapshot was taken, i.e., for the portion of the sequence leading up to the point at which the snapshot is taken.","Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A better understanding of the present invention can be obtained when the following detailed description of the preferred embodiment is considered in conjunction with the following drawings, in which:",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
