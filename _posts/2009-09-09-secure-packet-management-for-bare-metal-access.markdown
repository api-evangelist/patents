---
title: Secure packet management for bare metal access
abstract: Secure networking processes, such as packet encapsulation and decapsulation, can be executed upstream of a user or guest operating system provisioned on a host machine, where the user has substantially full access to that machine. The processing can be performed on a device such as a network interface card (NIC), which can have a separate network port for communicating with mapping systems or other devices across a cloud or secure network. A virtual image of the NIC can be provided to the user such that the user can still utilize at least some of the NIC functionality. In some embodiments, the NIC can work with a standalone processor or control host in order to offload much of the processing to the control host. The NIC can further handle headers and payload separately where possible, in order to improve the efficiency of processing the various packets.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08959611&OS=08959611&RS=08959611
owner: Amazon Technologies, Inc.
number: 08959611
owner_city: Reno
owner_country: US
publication_date: 20090909
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["As an increasing number of applications and services are being made available over networks such as the Internet, an increasing number of content, application, and\/or service providers are turning to technologies such as cloud computing. Cloud computing, in general, is an approach to providing access to electronic resources through services, such as Web services, where the hardware and\/or software used to support those services is dynamically scalable to meet the needs of the services at any given time. A user or customer typically will rent, lease, or otherwise pay for access to resources through the cloud, and thus does not have to purchase and maintain the hardware and\/or software needed.","In some cases, users may want special hardware or full access to specific resources. Such access comes with risks for providers of those resources, however, as in a cloud or other shared environment there typically will be other users sharing those resources at various times, and a modification of the resource by one user can potentially be detrimental to subsequent users. In cases where users have a virtual address space, such that the customer network functions as a single virtual network without the restrictions or additional addresses of one or more additional physical networks, it can be desirable to provide secure networking functionality such as packet encapsulation and firewalling to allow the user to utilize addresses in the virtual address space that can be mapped or directed to the appropriate physical resources. Often the encapsulation and other such processes are performed on the host, which in the case of full or \u201cbare metal\u201d access on a machine can potentially enable a user to modify the encapsulation, firewalling, and similar procedures to redirect packets and perform other such operations, which can be undesirable in many instances.","Systems and methods in accordance with various embodiments of the present disclosure may overcome one or more of the aforementioned and other deficiencies experienced in conventional approaches to managing resources in an electronic environment. In various embodiments, users are provided with full or substantially full or \u201cnative\u201d access to one or more hardware resources in a network, cloud, or other shared environment. In other embodiments, users have access to only one or more devices or components, such as a network interface card (NIC) graphics processing unit (GPU) on a peripheral component interconnect (PCI) bus, on a host machine. In situations where the users having access to such a resource can change frequently, it can be desirable to prevent users from modifying, or at least or at least track or act upon the attempted modifying, of firmware or other configuration or processing information for the resource, which can affect an ability of a subsequent user to effectively or securely utilize the resource.","Systems and methods in accordance with various embodiments provide for the secure management and\/or processing of packets for host machines and other hardware devices where a user or guest can potentially have substantially full access to those devices. Secure networking processes such as encapsulation, decapsulation, and firewalling of packets can be performed using hardware devices or other interfaces or components that are \u201cupstream\u201d of the user, guest OS, or host system CPU, for example. These \u201cupstream\u201d components can include, for example, network interface cards (NICs), smart switches, and edge devices. Further, network interfaces are not necessarily provided via a separate \u201ccard\u201d, as network access can be provided by the I\/O Control Hub or \u201csouth bridge\u201d chipset on modern motherboards and not necessarily by a separate card plugged into, for example, a peripheral device bus like PCI. In this sense, the \u201cdevice\u201d may be a virtual presentation that is physically implemented either in an off-CPU chipset or even in the CPU itself (for example in System-on-a-Chip designs). Either way, the interface might not be a physically separable device from the rest of the host computing resources.","Such components can work alone, or in cooperation with dedicated processors that also are inaccessible to the user or a guest operating system (OS) on the host device. Secure networking processes also can include various security functions such as auditing, traffic analysis (e.g., for billing), and stateful firewalling. Utilizing a hardware device upstream of the user can protect both internal networked assets inside a cloud or secured environment as well as other customer partitions. A guest OS provisioned on the host device can be substantially prevented from intercepting and routing messages and other data packets for other customers, etc.","Systems and methods in accordance with other embodiments can, instead of or in addition to performing secure network processing upstream of the customer, provide the customer with a virtual network interface, and can utilize additional components with the NIC or upstream component such that much of the processing does not have to be performed on the upstream device, which can have limited memory, processing power, etc. A dedicated processor or \u201ccontrol host\u201d can be used to implement complex firewall, encapsulation, and decapsulation logic while retaining most of the advantages of direct assigned network devices. The NIC or upstream processing device also can separate the headers and payload for efficient processing.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","100","102","104","106"]},"The illustrative environment includes at least one application server  and a plurality of resources, servers, hosts, instances, routers, switches, data stores, and\/or other such components defining what will be referred to herein as a data plane , although it should be understood that resources of this plane are not limited to storing and providing access to data. It should be understood that there can be several application servers, layers, or other elements, processes, or components, which may be chained or otherwise configured, which can interact to perform tasks such as obtaining data from an appropriate data store. As used herein the term \u201cdata store\u201d refers to any device or combination of devices capable of storing, accessing, and retrieving data, which may include any combination and number of data servers, databases, data storage devices, and data storage media, in any standard, distributed, or clustered environment. The application server can include any appropriate hardware and software for integrating with the data store as needed to execute aspects of one or more applications for the client device, handling a majority of the data access and business logic for an application. The application server provides admission control services in cooperation with the data store, and is able to generate content such as text, graphics, audio, and\/or video to be transferred to the user, which may be served to the user by the Web server in the form of HTML, XML, or another appropriate structured language in this example. In some embodiments, the Web server , application server  and similar components can be considered to be part of the data plane. The handling of all requests and responses, as well as the delivery of content between the client device  and the application server , can be handled by the Web server. It should be understood that the Web and application servers are not required and are merely example components, as structured code can be executed on any appropriate device or host machine as discussed elsewhere herein.","The environment also includes a development and\/or testing side, which includes a user device  allowing a user such as a developer, data administrator, or tester to access the system. The user device  can be any appropriate device or machine, such as is described above with respect to the client device . The environment also includes a development server , which functions similar to the application server  but typically runs code during development and testing before the code is deployed and executed on the production side and is accessible to outside users, for example. In some embodiments, an application server can function as a development server, and separate production and testing storage may not be used.","The data stores of the data plane  can include several separate data tables, databases, or other data storage mechanisms and media for storing data relating to a particular aspect. For example, the data plane illustrated includes mechanisms for storing production data  and user information , which can be used to serve content for the production side. The data plane also is shown to include a mechanism for storing testing data , which can be used with the user information for the testing side. It should be understood that there can be many other aspects that may need to be stored in a data store, such as for page image information and access right information, which can be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the data plane . The data plane  is operable, through logic associated therewith, to receive instructions from the application server  or development server , and obtain, update, or otherwise process data, instructions, or other such information in response thereto. In one example, a user might submit a search request for a certain type of item. In this case, components of the data plane might access the user information to verify the identity of the user, and access the catalog detail information to obtain information about items of that type. The information then can be returned to the user, such as in a results listing on a Web page that the user is able to view via a browser on the user device . Information for a particular item of interest can be viewed in a dedicated page or window of the browser.","Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server, and typically will include a computer-readable medium storing instructions that, when executed by a processor of the server, enable the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available, and are readily implemented by persons having ordinary skill in the art, particularly in light of the disclosure herein.","The environment in one embodiment is a distributed computing environment utilizing several computer systems and components that are interconnected via communication links, using one or more computer networks or direct connections. However, it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus, the depiction of the system  in  should be taken as being illustrative in nature, and not limiting to the scope of the disclosure.","An environment such as that illustrated in  can be useful for various content providers or other such entities, wherein multiple hosts and various types of resources might be used to perform tasks such as serving content, authenticating users, allocating resources, or performing any of a number of other such tasks. Some of these hosts may be configured to offer similar functionality, while other servers might be configured to perform at least some different functions. The electronic environment in such cases might include additional components and\/or other arrangements, such as those illustrated in the configuration  of , discussed in detail below.","Systems and methods in accordance with one embodiment provide at least one resource access gateway, or control plane, either as part of the data environment or in a path between the user and the data plane, that enables users and applications to access shared and\/or dedicated resources, while allowing customers, administrators, or other authorized users to allocate resources to various users, clients, or applications and ensure adherence to those allocations. Such functionality enables a user to perform tasks such as storing, processing, and querying relational data sets in a cloud without worry about latency degradation or other such issues due to other users sharing the resource. Such functionality also enables guest users to obtain access to resources to perform any appropriate functionality, such as to render and\/or serve streaming media or perform any of a number of other such operations. While this example is discussed with respect to the Internet, Web services, and Internet-based technology, it should be understood that aspects of the various embodiments can be used with any appropriate resources or services available or offered over a network in an electronic environment. Further, while various examples are presented with respect to shared access to disk, data storage, hosts, and peripheral devices, it should be understood that any appropriate resource can be used within the scope of the various embodiments for any appropriate purpose, and any appropriate parameter can be monitored and used to adjust access or usage of such a resource by any or all of the respective users.","A resource gateway or control plane  can be used in some environments to provide and\/or manage access to various resources in the data plane . In a cloud computing environment, this can correspond to a cloud manager  or similar system that manages access to the various resources in the cloud. In one embodiment, a set of application programming interfaces (APIs)  or other such interfaces are provided that allow a user or customer to make requests for access to various resources. Once access is established, a resource is allocated, etc., a user can communicate directly with the resource to perform certain tasks relating to that resource, such as data storage or processing. The user can use direct interfaces or APIs to communicate with the data instances, hosts, or other resources once access is established, but uses the control plane component(s) to obtain the access.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 2","b":["200","202","206","208","206","212"]},"The control plane can include one or more resource allocation managers , each responsible for tasks such as validating the user or client associated with the request and obtaining or allocating access to the appropriate resource(s). Such a system can handle various types of request and establish various types of connection. Such a system also can handle requests for various types of resources, such as specific graphic processors or other types of hardware or hardware functionality, and can provide access to the appropriate resource(s). Components of the data plane, or the resource layer of the cloud, can perform the necessary tasks to provide the resource. For access to a data instance, for example, this can include tasks such as provisioning a data store instance, allocating a volume of off-instance persistent storage, attaching the persistent storage volume to the data store instance, and allocating and attaching an IP address based on a DNS mapping or other address, port, interface, or identifier which the customer can use to access or otherwise connect to the data instance. For tasks such as obtaining processing of an instruction using a particular type of hardware, for example, the components of the data plane, in conjunction with the control plane, can perform actions such as provisioning a device for a user and providing shared and\/or dedicated access to the resource for a period of time at a particular level of access to the resource. In this example, a user can be provided with the IP address (based on the DNS mapping) and a port address to be used to access a resource. A user then can access the resource directly using the IP address and port, without having to access or go through the control plane .","The control plane  in this embodiment also includes at least one monitoring component . When a data instance or other resource is allocated, created, or otherwise made available in the data plane, information for the resource can be written to a data store accessible to the control plane, such as a monitoring data store . It should be understood that the monitoring data store can be a separate data store or a portion of another data store. A monitoring component  can access the information in the monitoring data store  to determine information such as the past usage of resources by various users, a current number or type of threads or resources being allocated to a user, and other such usage information. A monitoring component also can call into components of the data environment to determine information such as the number of active connections for a given user in the data environment and aspects about the usage of each connection. A monitoring component can constantly monitor the usage of each resource by a user, client, etc., having an allocation provided through the connection manager. A monitoring component also can access information stored in an administrative (\u201cAdmin\u201d) or similar data store , which can store information such as the general allocation granted to a user, throttling or limiting information for a user, resource permissions for a user, or any other such information that can be specified and\/or updated by an administrator or other such user.","In an example where users request connections to various data instances, each instance  in the data environment can include at least one data store  and a host manager component  for the machine providing access to the data store. A host manager in one embodiment is an application or software agent executing on an instance and\/or application server, such as a Tomcat or Java application server, programmed to manage tasks such as software deployment and data store operations, as well as monitoring a state of the data store and\/or the respective instance. A host manager can be responsible for managing and\/or performing tasks such as setting up the instances for a new repository, including setting up logical volumes and file systems, installing database binaries and seeds, and starting or stopping the repository. A host manager can monitor the health of the data store, monitoring the data store for error conditions such as I\/O errors or data storage errors, and can restart the data store if necessary. A host manager can also perform and\/or manage the installation of software patches and upgrades for the data store and\/or operating system. A host manager also can collect relevant metrics, such as may relate to CPU, memory, and I\/O usage.","The resource manager  can communicate periodically with each host manager  for which a connection has been established, or to an administration server or other component of the resource environment, to determine status information such as load, usage, capacity, etc.","As discussed, once a resource is provisioned and a user is provided with an IP address derived from DNS mappings or other address or location, the user can communicate \u201cdirectly\u201d with components or resources of the data plane  through the network using a Java Database Connectivity (JDBC) or other such protocol to directly interact with that resource . In various embodiments, as discussed, the data plane takes the form of (or at least includes or is part of) a computing cloud environment, or a set of Web services and resources that provides data storage and access across a \u201ccloud\u201d or dynamic network of hardware and\/or software components. An IP address derived from DNS mappings is beneficial in such a dynamic cloud environment, as instance or availability failures, for example, can be masked by programmatically remapping the IP address to any appropriate replacement instance for a use. A request received from a user  or application , for example, can be directed to a network address translation (NAT) router , or other appropriate component, which can direct the request to the actual resource  or host corresponding to the mapped address of the request. Such an approach allows for instances to be dynamically moved, updated, replicated, etc., without requiring the user or application to change the IP address or other address used to access the instance. In some cases, a resource  such as a data instance can have at least one backup instance  or copy in persistent storage.","As discussed, a resource can be shared among multiple users, clients, applications, etc., either concurrently or at different times, with varying levels of access or allocation. When a user has dedicated access to a machine or resource, the user might also have native or \u201cbare metal\u201d access to the resource for a period of time, depending on the type of access needed, and other such factors. Providing this level of access to a resource comes with potential risks for a provider of the resource, as a user having native access to the device can have the ability to modify firmware or other configuration information for the resource, which can affect the ability of a subsequent user to utilize the resource without first re-imaging or otherwise verifying the state of the resource.","Systems and methods in accordance with various embodiments enable a provider to grant a user or customer with substantially full access to a hardware resource with a reasonable level of security. This native-level access to remote hardware can be provided for resources such as servers, hosts, and cluster instances, for example. For resources such as cluster instances, customers may have native access to a subset of the hardware resources, such as may include peripheral devices connected using a component such as a peripheral component interconnect (PCI) bus. These peripheral devices can include network interface cards (NICs), graphics processing units (GPUs), and similar devices that would often be virtualized in a current cloud environment. In the some cases, a customer might have full access to an entire machine, or groups of machines, including any or all devices incorporated therein. For a group of machines such as a rack of servers, a user might be granted substantially full access to the entire rack, including any switches or other devices or components provided as part of the rack.","Certain providers present such hardware resources as a virtualized abstraction, such that management of the physical hardware can occur in a \u201cmore trustworthy\u201d execution context, and can provide additional benefits such as the ability to migrate customers to different resources without interrupting execution and, since customers or \u201cguests\u201d are not tied to specific hardware, the ability for vendors to compete to provide the best utility computing value for price. Also, fewer and more simple guest instance images can be used, as guests do not need a multitude of hardware-specific drivers. Such virtualization can come with potentially significant costs, however, as virtualization can incur order-of-magnitude performance penalties for hardware that does not include native acceleration for virtualization, and virtualization of a particular hardware device can consume substantial resources unrelated to that device (e.g., a processor and\/or memory used to virtualize a network interface). Also, virtualization support can lag years behind commodity availability of new hardware (e.g., video cards), and certain appliance hardware is often too specific or \u201cniche\u201d to ever warrant compelling virtualization support. There are potentially large market opportunities in supporting high-margin niche appliances or in being the first-to-market for cloud support of new hardware types. Providing such support through native access, however, can leave vulnerable various aspects of the internal cloud, such as provisioning technology, billing, resource utilization and balancing, and the network layer-2 layout, for example, and can violate threat models well beyond customer requirements.","Systems and methods in accordance with various embodiments can provide for \u201cpartial\u201d or \u201csubstantially\u201d full access to a resource, such as a host server, by providing users with native access to the host hardware or specific devices, such as cards plugged into a peripheral control bus or similar hardware datapath. In certain embodiments where specific levels of performance are an issue, technology such as an input\/output memory management unit (I\/O MMU) can be used to \u201cassign\u201d peripheral devices to guest operating systems (e.g., virtualization technology for directed I\/O (Intel's VT-D)), effectively giving guests native access to only those peripheral devices. As should be apparent to one of ordinary skill in the art, a guest operating system (OS) can refer to different systems in different embodiments, such as a virtual machine hosting an running OS with at least partial non-virtualized access to some hardware or machine state that the OS or hypervisor depends upon including BIOS, configuration, etc., that is not under the administrative control of the hosting provider. In other embodiments, the guest OS might refer to an OS that is not under the administrative control of the hosting provider running without full virtualization. In one embodiment, an MMU can logically connect a direct memory access (DMA)-capable I\/O bus (e.g., a PCI bus) to main memory on a host, and can manage mapping of I\/O devices to physical addresses to regulate the flow of information from a guest to various PCI or similar devices. These devices can include, for example, graphics processing unit (GPU) co-processors, high-performance NICs, disk controllers, or other \u201cniche\u201d co-processing devices, such as cryptographic cards or hardware codecs. In some instances, virtualization or other such technology can be used to provide a level of separation between guests and host machines from the central system hardware (e.g., CPU, memory, etc), with native access potentially being available for specific devices on a given host. In other embodiments, native access can be provided to any hardware included in, or available for, a specific host.","One of the main issues with providing customers with native access to specific hardware is that customers may have the ability to modify privileged configuration or BIOS (basic I\/O system) settings, or other firmware images on host hardware. These changes can persist across a reboot of the physical system, such that the hardware may not return to the same state that the hardware was in before that customer was granted access to the host or its device(s). In the case of dynamically configurable settings for a virtual machine monitor (VMM) managed by a Ring-1 hypervisor, for example, the changes would in general not persist across reboot, but could persist across instantiations of guest operating systems in a virtualized environment (e.g., chipset settings to support IOMMU technology). This ability for a customer to modify settings or firmware that otherwise should be immutable can have serious security implications. For example, malicious software (e.g., Trojans or viruses) can be inserted into firmware for various devices. Even if firmware changes do not involve intentionally malicious programming, however, the changes still can still be unintentionally damaging by causing performance and\/or compatibility issues. Firmware flashing can potentially physically destroy the hardware irreparably (a.k.a. \u201cbricking\u201d the hardware). Certain technologies have been developed that may address at least some of these challenges, particularly for motherboard firmware or chipset configurations. These technologies include, for example, Trusted Platform Module (TPM), LaGrande Technology (LT) from Intel, measured boot technology, trusted boot technology, Dynamic Root of Trust (DRTM), and Static Root of Trust (SRTM) technology. None of these solutions, however, are known to address various issues specific to device firmware, entire hosts, and other such hardware aspects.","Systems and methods in accordance with various embodiments can prevent and\/or monitor the access and\/or manipulation of firmware images or configuration information by guests in a cloud or similar electronic environment. In certain embodiments, a customer can be provided with dedicated guest access to a hardware resource for any desired period of time, such as a matter of hours or even minutes.  illustrates an example of a configuration  that can be used to provide such native access to a customer in accordance with one embodiment. This example will be discussed with respect to granting a user access to a peripheral device in a host machine using conventional PCI-based technology, but it should be understood that this is merely an example and that approaches within the scope of the various embodiments can be used with any appropriate hardware (including based on different bus technologies or with greater or lesser degrees of system integration within individual components or \u201cchips\u201d), software, and protocols currently used or subsequently developed for such purposes.","This example configuration  includes a set of host devices , such as servers or similar devices, that each can have a series of network ports . Some of these ports can function as \u201cproduction\u201d ports which connect each host to at least one network switch  capable of processing and routing network traffic to\/from each device. In some embodiments the network switch can be a \u201csmart\u201d network switch, while in other embodiments segregation can happen at a higher level in the network than the first tier of switches. In a data center example, there might be one smart switch for each rack of servers , for example. At least one of these network ports  can host network traffic for a guest operating system, where the guest is effectively operating \u201con top of\u201d at least one central processing unit (CPU)  in the allocated or partitioned host device (e.g., server)  that has access to this production network port. The host device  also can have at least one console port  and a console controller , which can connect to a separate console network . This \u201cconsole network\u201d also can be implemented using the same network technology as the \u201cproduction network,\u201d such as Ethernet technology. In some embodiments, at least some of these ports can be merged but logically separated (e.g., muxed on the same physical port). Each host device also can have one or more dedicated power supply units (PSUs) , which can be accessed by the console controller and\/or the main CPU, whereby the machine can be powered off via either the host CPU or a device on the network, for example. The power supply for every server in a rack can be connected to a rack power distribution unit (PDU) , which can be connected by a higher power cable to one or more data center PDUs , each of which can support multiple rack PDUs. In some cases, the hosts  can be powered on and off by running a line to the console controller from the rack PDU with relays or other such components to power cycle each device.","At least one router  can connect the host devices to one or more provisioning systems , and the switch and\/or router can manage access to these provisioning systems. In some embodiments, network traffic within a rack is aggregated in order to minimize the number of cables leaving each rack. In some embodiments a capability such as a preboot execution environment (PXE) exists on a host machine  at the production network port , such that power can be cycled using the console and when the machine boots the PXE code can execute on the network port. PXE access could also be enabled or disabled depending on the type of reboot that has been authorized. For example, reboots could be allowed from local images on the host for customer initiated reboots, but PXE access can be disabled upstream. When the switch  is configured to connect a host machine  to the provisioning systems, the PXE can connect the device to the provisioning systems and boot the machine into a RAM (random access memory) disk or other block of storage, for example, which enables control operations such as firmware flashing or provisioning of a new customer image. A RAM disk with specialized drivers in one embodiment can be used to boot and\/or run an untrusted or unknown image, which might not otherwise be able to boot on a specific machine. Provisioning images thus can be received, over the network to the PXE, which contain provisioning code or firmware flashing code. Once provisioning is completed, authorized customer networks  can interact with the devices  via the switch . The provisioning and control systems can control the switch in real time with no humans involved, as the automatic switching of that path can be based on provisioning events and external coordination, for example. The coordination can be provided and\/or managed by an external system, such as a cloud manager database and system , or other such control plane or control system as discussed elsewhere herein, which can instruct the provisioning system(s) , console network , and rack components to perform certain actions. The cloud manager  can include one or more workflow systems that work with a central database, in one embodiment, to perform various aspects of resource management.","In an environment such as a cloud computing environment where different physical servers may be used to host customers at different times, it can be desirable to provide a level of abstraction for a user or customer network to avoid dependencies on resource allocations that can change over time. Virtual network equipment presentation such as customer network routers and customer network firewalls can also be achieved using overlay networking technology. For example, a customer's virtual local network or other virtual network between multiple computing nodes may be provided in at least some embodiments by creating an overlay network over one or more intermediate physical networks separating the multiple computing nodes. The overlay network may be implemented in various ways in various embodiments, such as by encapsulating communications and embedding virtual network address information for a virtual network in a larger physical network address space used for a networking protocol of the one or more intermediate physical networks.","This allows customers to utilize a standardized address space for addressing resources in the customer network. By utilizing a standardized address space, a customer can create a \u201cvirtual\u201d or overlay network that can use common base addresses, sub-networks, etc., without the restrictions that the substrate network places on the physical address space.","Using virtualization, a number of virtual machine instances can be generated that appear and function to a user as being a part of the customer network, but that are mapped to actual servers or other physical resources in a separate or remote cloud, network, etc. As discussed, using a standardized address space can require the building and maintaining of a mapping between the physical substrate addresses and the virtual overlay addresses that are used for the customer address space. In some existing approaches, a central processing unit running on a host device can control the mapping of the virtual and physical addresses, such that a request received from a customer can be directed to the appropriate resource. This can take the form of data packet encapsulation and decapsulation, for example, wherein the physical address and\/or header information can \u201cco-exist\u201d at various times with the virtual address and\/or header information, such that a packet can be addressed to the virtual address by a source on the customer network, but can be properly routed to the appropriate physical address by adding the physical header information when in the cloud or remote network infrastructure.","For example,  illustrates an example wherein a packet  received from a customer or \u201coverlay\u201d network is encapsulated in order to be routed within a physical substrate network on which the virtual cloud environment is hosted, in accordance with one embodiment. In this example, the received customer packet  includes three main parts: a virtual address  (such as a \u201cvirtual IP address\u201d relevant to the customer overlay network, here denoted \u201cIP\u201d), a protocol header  (such as an original transmission control protocol header as found in the Internet Protocol suite, here denoted \u201cTCP\u201d), and a data or \u201cpayload\u201d portion . The virtual IP address can be an address relevant only to the customer or overlay network. In order to properly route the packet to the intended destination host, this packet can be encapsulated to include an \u201cexternal\u201d data structure or frame that can route the packet within the substrate network or cloud or other such grouping of resources. In this example, the encapsulation process is shown to produce a \u201csubstrate\u201d packet or datagram , which includes the IP, TCP, and payload of the original customer packet, but has appended thereto additional \u201cheader\u201d information, here including a physical or \u201creal\u201d address  (such as the IP address or \u201cIP\u201d within the substrate network of the cloud) and a control header  (such as a protocol header useful by the control plane to process and\/or route the packet). Without the appending any of this \u201creal\u201d information, the routers and other such components which host the cloud infrastructure would generally not be able to properly route the packets to the appropriate destination(s), since the customer routing information (e.g., embodied by ) is only meaningful to the customer's overlay network and not the physical networking infrastructure to which the cloud host resources are connected. In some embodiments, any customer packet being received to a device in the cloud can be encapsulated to include this physical routing information to be used within the cloud. Since the first device to receive a packet in the cloud can be considered to be on the \u201cedge\u201d of the cloud, these devices will be referred to herein as \u201cedge\u201d devices. An \u201cedge\u201d device as used herein can refer to any device in hardware and\/or software capable of receiving a packet of information from outside the cloud, and\/or capable of transmitting a packet of information from inside the cloud. The encapsulation process can happen at any appropriate edge device in some embodiments, while in other embodiments the edge devices can route the packets to an encapsulation component or other device capable of encapsulating or decapsulating the packets. As should be understood, when a packet is to be transmitted back to the customer network, or otherwise transmitted outside the cloud, a \u201cdecapsulation\u201d process can be performed wherein the IP and a control header  are removed and the packet can be routed using the virtual address space information for the customer network. For purposes of simplicity the process of encapsulation will be discussed with respect to various embodiments, but it should be understood that a decapsulation process can also be performed using such components and processes in accordance with the various embodiments.","Certain conventional approaches perform a level of encapsulation on hardware such as host devices and servers. In these approaches, a central processor can perform the encapsulation procedure in order to route packets received to a network port, network interface card (NIC), or similar device. The encapsulation process in general is not exposed to the user. In some embodiments, the driver for the NIC would be directly accessible by the processor, such that the processor can access a mapping mechanism or distributed mapping service to map physical packets to virtual packets, and vice versa, before routing packets to, or from, the customer networks via the NIC. In some cases, the mapping information can be distributed from a centralized service to each appropriate node across the cloud.","As discussed, however, a resource provider might want the ability to provide users or customers with substantially full native access, or \u201cbare metal\u201d access, to a hardware resource such as a host machine. If the mapping is managed by an application executing on a CPU of the host machine, for example, then that mapping can potentially be accessed by a user or guest operating system (OS) executing on the host machine. Such access can potentially compromise the mapping service, and can enable a guest operating system to redirect packets, reject packets, or otherwise impact the processing of packets in the cloud network. Further, such functionality could be compromised such that packets can be sent to unintended locations outside the cloud. Other potential problems include \u201cpacket spoofing,\u201d wherein a host sends packets which appear to originate from a different host or location. This is often used to obfuscate where adversarial attacks are coming from, and also can be the basis of \u201cACK-based\u201d Denial of Service (DoS) attacks, where acknowledgement packets that are part of standard network protocols are sent to hosts that never initiated transmissions, etc. Various other potential issues arise when the guest OS or CPU potentially has access to the mapping and\/or encapsulation functionality.","Accordingly, systems and methods in accordance with various embodiments can provide substantially \u201cbare metal\u201d access to resources by various users, while performing operations such as encapsulation, decapsulation, and stateful firewalling operations using components that are not exposed to the customer, guest OS, CPU on a provisioned host machine, or other such potential sources of manipulation.  illustrates an example of a configuration  that can be used to perform packet-processing and other secure networking functions in accordance with various embodiments. In this example, packets are encapsulated \u201cupstream\u201d of the customer-accessible host resources, here at the network card level, such as just before a packet is framed for physical interconnect transmission (e.g., Ethernet framing). In this example, it can be seen that the NIC  has an external port  that can communicate with components such as the cloud manager  and a mapping service . The external port  can enable these components to communicate with the NIC independent of the CPU  on the host machine , or any guest image  or guest OS provisioned on the host machine. Using such an approach, any packet transmitted to, or from, the cloud can be processed independent of the guest-accessible portions, such that the mapping is not accessible to, or modifiable by, the user. In this example, the NIC can have memory  and a processing device  capable of performing at least basic mapping, encapsulation, decapsulation, and\/or similar such functions. This will be referred to generally herein as \u201cNIC-based\u201d encapsulation, although it should be understood that other peripheral devices or hardware components can perform similar functionality, and that the functionality is not limited to encapsulation but can also include other functions such as decapsulation, firewalling, etc. A NIC can function as an embedded system in the host machine that is not exposed to the user or guest operating system. In cases where the user might want native access to at least some of the functionality of the NIC, the NIC can have only certain memory portions mapped for the guest OS, such that only some functionality can be accessed. In some embodiments this can take the form of a virtual NIC image, wherein the guest OS can discover and\/or utilize portions of the NIC, but cannot access portions utilized for secure actions such as encapsulation.","NIC-based encapsulation functionality can be provided on a per-host basis, or at least for those host machines capable of receiving and\/or transmitting packets, and\/or capable of having a customer image provisioned thereon. In such cases, the cloud manager  or a similar component or system can manage the distribution of mapping information to the various hosts and\/or nodes, as well as other such aspects and configuration information useful for such processes. In such cases, the cloud manager can communicate with a NIC  via the external port  to update configuration information, firmware, or other information useful for performing encapsulation and similar such actions. Processes for updating configuration information via an external channel are disclosed in co-pending U.S. patent application Ser. No. 12\/554,690, filed Sep. 4, 2009, [ATTY DOCKET 026014-010700US], which is hereby incorporated herein by reference. Using such an approach, the firmware and\/or configuration information for the NIC can be updated to perform the desired functionality, as well as to communicate with the mapping service  or other appropriate component(s) as needed. The configuration can be updated periodically, as can be managed by the cloud manager and\/or mapping system(s), such as to send large payloads or otherwise adjust functionality of the NIC.","In some embodiments, encapsulation and similar processes can be executed at other components that are not exposed to the user, such as a smart switch  configured to route messages to, and from, a NIC  and\/or network port  of a host machine . Such a switch can include a processor  operable to perform operations such as encapsulation of packets, whereby the switch can process and route packets to the appropriate addresses in physical and\/or virtual address space. In such cases, the host machine can be considered (from an address space perspective) as being outside the cloud, or trusted environment, whereby the switch can function as an edge device and modify packets received from the virtual address space of the host machine (and client networks) to the physical address space of resources in the cloud. Various other components can be used as well, such as routers or dedicated edge devices, within the scope of the various embodiments.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 6","b":["600","602","604","606","608","610","612","614","616"]},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 7","b":["700","702","704","706","708","712","714"]},"In some embodiments, however, the NIC or other such device might not have the processing capability to perform the necessary encapsulation or other such functionality. In other embodiments, the NIC-based encapsulation approaches might not be able to provide the throughput desired for all applications or users. In such cases, it can be desirable to offload at least some of the processing responsibility to components that are able to more easily process the packet information, while still securing this functionality from access by a user or guest OS.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 8","b":["800","802","804","806","808","810","806"]},"As discussed, it can be desirable to offload some of the functionality from the NIC in order to allow for more complex and\/or faster processing operations. In this example, at least one of the processors  (and associated RAM or other such components) can be separated or segmented from the remaining processors, at least from the perspective of the guest OS. The remaining processors can operate in a cache-coherent fashion as a symmetric multiprocessing (SMP) unit , or an \u201cSMP machine\u201d as known in the art, such that each of the processors in the SMP machine will be visible to a guest operating system provisioned on the host machine. The remaining processor group  will not be part of the user-visible SMP machine, and cache coherency and RAM for each group of processing elements will be completely segregated, such that the remaining processor group may be prevented from being exposed to the guest OS. Such an architecture can be advantageous at least for the reason that the separate processor group can function as a quasi-control plane, or a \u201ccontrol host,\u201d operable to work with the NIC to perform encapsulation and similar operations independent of the guest OS. The I\/O hub can maintain memory address mappings that allow portions of the NIC  to only communicate with the control host , in order to enable the processor  of the control host to perform at least some of the encapsulation and similar operations for packets of the host machine.","Using such an architecture, a guest operating system (OS) can still be loaded onto at least one of the cache-coherent RAM modules during a boot or similar process, such that the guest can be provided with substantially native access to at least a portion of the hardware on the host device. The guest operating system can view and access the processors and components in the SMP device, but cannot see the processor(s) and\/or other components of the control host. Each control host processor in one embodiment can have a separate OS, firmware type, boot-up mechanism, etc., and can be used to manage at least certain I\/O aspects for the host machine. Such an architecture can allow for the management and implementation of the NIC-based encapsulation from the standalone processor and\/or any other device on the host or across the cloud that is assigned from the standalone processor. The guest OS in some embodiments can still have access to the NIC, a portion of the NIC, or a virtual NIC images as discussed herein. By exposing a virtual NIC image, a guest doing a PCI scan or similar discovery procedure will be able to detect and utilize a NIC device. In an embodiment where there can be multiple guests on a machine, the host can expose multiple virtual NIC images to the guests, which also would be visible during such a scan.","The control host  can work closely with the NIC to perform operations such as the encapsulation, decapsulation, and stateful firewalling of packets. For example, when the NIC receives a packet, the NIC can initially examine or view only the header(s) for the packet, and can submit the header(s) to the control host instead of the entire packet. During processing of the headers, the control host can perform a number of different operations, such as to chain the header using an encapsulation or decapsulation process, or decide not to deliver the packet, effectively firewalling the packet. Further, based on information in the header, the control host also can maintain state information as to which connections are going to the guest or other destinations, in order to perform stateful firewalling. The control host also can perform basic operations to indicate that the packet header has been changed to a format that is expected by the client or guest, such as by applying rules or policies for encapsulation for the guest. The NIC thus can co-operate with at least one other processing component to provide functionality such as mapping, firewalling, encapsulation, and decapsulation, where the operations are primarily performed by the control host and not in the NIC itself. Once the encapsulation or decapsulation is done, or the packet is otherwise processed, the control host can direct the NIC to deliver the packet straight to the guest. If the control host instead rejects the headers, the NIC can effectively delete the packet such that the packet is not delivered.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 9","b":["900","902","904","906","908","910","912","914","914"]},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 10","b":["1000","1002","1004","1006","1008","1010","1012","1014","1016"]},"In some embodiments a technology such as I\/O acceleration (e.g. Intel I\/O AT technology) can be used to improve throughput or other such aspects of the encapsulation and other such processes. When using I\/O acceleration, for example, the control host can push the packet headers into processor cache for the control host before reading the header information. Such an approach can be used, for example, to enable a user to transmit and receive packets to and from the NIC, which are addressed to the virtual network or virtual address space. The NIC will not communicate anything relating to the physical network or control host to the user, and instead can just communicate packets back and forth to the user. Information for the user packets can be placed into the cache (e.g., queued) and the guest host can pull information directly from, and place information directly into, the cache and process the packets without knowledge of the user. In some embodiments there can be at least two queues, including a queue for information from the user or guest OS to the NIC, and a header queue from information from the guest host to the NIC. The use of such queues can introduce a small amount of latency, but other sources of latency such as interrupt latency can be reduced or eliminated, such as by using a polling model or adaptive polling-based approach.","Further, even though a NIC can buffer several packets, at some point the data can be written to main memory. Payload packets are typically much larger than the packet headers, such that it can be desirable to copy the payload as few times as possible. Various approaches can be utilized to address such issues. For example, several headers can be copied into a cache or queue for the guest host, with the payload being copied into processor cache, providing better cache locality. Further, concatenation of the payload can be particularly effective for the NIC to control processor communication. Various other approaches can be used as well as should be apparent.","As discussed above, the various embodiments can be implemented in a wide variety of operating environments, which in some cases can include one or more user computers, computing devices, or processing devices which can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers, such as desktop or laptop computers running a standard operating system, as well as cellular, wireless, and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially-available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices, such as dummy terminals, thin-clients, gaming systems, and other devices capable of communicating via a network.","Various aspects also can be implemented as part of at least one service or Web service, such as may be part of a service-oriented architecture. Services such as Web services can communicate using any appropriate type of messaging, such as by using messages in extensible markup language (XML) format and exchanged using an appropriate protocol such as SOAP (derived from the \u201cSimple Object Access Protocol\u201d). Processes provided or executed by such services can be written in any appropriate language, such as the Web Services Description Language (WSDL). Using a language such as WSDL allows for functionality such as the automated generation of client-side code in various SOAP frameworks.","Most embodiments utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially-available protocols, such as TCP\/IP, OSI, FTP, UPnP, NFS, CIFS, and AppleTalk. The network can be, for example, a local area network, a wide-area network, a virtual private network, the Internet, an intranet, an extranet, a public switched telephone network, an infrared network, a wireless network, and any combination thereof.","In embodiments utilizing a Web server, the Web server can run any of a variety of server or mid-tier applications, including HTTP servers, FTP servers, CGI servers, data servers, Java servers, and business application servers. The server(s) also may be capable of executing programs or scripts in response requests from user devices, such as by executing one or more Web applications that may be implemented as one or more scripts or programs written in any programming language, such as Java\u00ae, C, C# or C++, or any scripting language, such as Perl, Python, or TCL, as well as combinations thereof. The server(s) may also include database servers, including without limitation those commercially available from Oracle\u00ae, Microsoft\u00ae, Sybase\u00ae, and IBM\u00ae.","The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations, such as on a storage medium local to (and\/or resident in) one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments, the information may reside in a storage-area network (\u201cSAN\u201d) familiar to those skilled in the art. Similarly, any necessary files for performing the functions attributed to the computers, servers, or other network devices may be stored locally and\/or remotely, as appropriate. Where a system includes computerized devices, each such device can include hardware elements that may be electrically coupled via a bus, the elements including, for example, at least one central processing unit (CPU), at least one input device (e.g., a mouse, keyboard, controller, touch screen, or keypad), and at least one output device (e.g., a display device, printer, or speaker). Such a system may also include one or more storage devices, such as disk drives, optical storage devices, and solid-state storage devices such as random access memory (\u201cRAM\u201d) or read-only memory (\u201cROM\u201d), as well as removable media devices, memory cards, flash cards, etc.","Such devices also can include a computer-readable storage media reader, a communications device (e.g., a modem, a network card (wireless or wired), an infrared communication device, etc.), and working memory as described above. The computer-readable storage media reader can be connected with, or configured to receive, a computer-readable storage medium, representing remote, local, fixed, and\/or removable storage devices as well as storage media for temporarily and\/or more permanently containing, storing, transmitting, and retrieving computer-readable information. The system and various devices also typically will include a number of software applications, modules, services, or other elements located within at least one working memory device, including an operating system and application programs, such as a client application or Web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example, customized hardware might also be used and\/or particular elements might be implemented in hardware, software (including portable software, such as applets), or both. Further, connection to other computing devices such as network input\/output devices may be employed.","Storage media and computer readable media for containing code, or portions of code, can include any appropriate media known or used in the art, including storage media and communication media, such as but not limited to volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage and\/or transmission of information such as computer readable instructions, data structures, program modules, or other data, including RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disk (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the a system device. Based on the disclosure and teachings provided herein, a person of ordinary skill in the art will appreciate other ways and\/or methods to implement the various embodiments.","The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense. It will, however, be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Various embodiments in accordance with the present disclosure will be described with reference to the drawings, in which:",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
