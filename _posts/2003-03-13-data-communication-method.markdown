---
title: Data communication method
abstract: A data communication function table relating to communication functions is shared between devices. Whether a communication device can operate in an autonomous communication mode or request/response communication mode can be therefore determined, the data type can be determined, the data size and data identification information can be acquired, and a file can be divided to an optimum size for transmission. Network traffic is therefore reduced and the effective communication speed is improved for data communication between devices over a network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07295550&OS=07295550&RS=07295550
owner: Matsushita Electric Industrial Co., Ltd.
number: 07295550
owner_city: Osaka
owner_country: JP
publication_date: 20030313
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","Embodiment 1","Embodiment 2","Embodiment 3","Embodiment 4","Embodiment 5","Embodiment 6","Embodiment 7","Embodiment 8"],"p":["1. Field of the Invention","The present invention relates to a communication method for data transfers between two communication devices connected over a network.","2. Description of the Background Art","Even if a network connection is established between two communication devices, data communication between the devices is not possible or the transferred data will be invalid unless two conditions are met. First, data sending and receiving between the devices needs to be enabled, second, both devices need to handle the desired data types, data formats, data size, and other parameters. Communication between devices has conventionally been handled with proprietary communication methods defined by the equipment manufacturers. Examples of these communication methods include the device on the data transmission side determining whether it can transmit data or whether it can send the requested data; comparing the types of data that can be sent by the transmission-side device and the types of data that are valid on the reception-side device to determine whether the data types are compatible between the sending and receiving sides; and acquiring the type and size of data that can be transmitted by the transmission-side device and data identification information for communication. Parts of these different methods can be omitted or combined together to build a desirable communication system and method for executing a specific communication sequence. This is described, for example, in Japanese Patent Laid-Open Publication (kokai) H9-244942.","When data communication is attempted using various combinations of data types, formats, and size, communication traffic increases and the data transmission rate decreases due to the increased traffic resulting from sending and receiving invalid data and the communication devices sending data back and forth to report and confirm the communication format.","Furthermore, when data is communicated according to a defined communication sequence between the same communication devices over plural occasions, previously communicated information must be exchanged again, thus increasing the transmitted data (traffic) and lowering the data transmission rate.","In a communication environment in which a large file, for example, must be divided for sending and receiving, how files are divided, the size of each divided data, and other parameters are individually defined by application vendor with the above-described communication techniques, and devices running different applications cannot communicate with each other.","A data communication method according to an exemplary embodiment of the present invention is useful for data communication between two communication devices connected to a network. A data communication function table for storing functions relating to data communication and a data communication control unit are disposed in memory in the communication devices, and data communication between the communication devices is accomplished by the data communication control unit writing and reading to the data communication function table. This method effectively reduces network traffic because it is not necessary to send the same data. Furthermore, because data communication is completed in less time, this data communication method has from the perspective of the communication devices the same effect as increasing the data communication rate.","By sharing a function table related to communication, a data communication method according to an exemplary embodiment of the present invention as described above makes it possible to identify communication devices capable of data communication by means of autonomous communication or request\/response communication, identify the type of transmitted data, get the data size and various data identification information, and divide the data to an optimal size for communication, and can thereby reduce traffic and effectively increase data communication throughput.","The data communication function table could contain codes indicating the types of data that can be transmitted or the types of data that can be received. Network traffic can be reduced by eliminating requests for data that cannot be transmitted and transmissions of data that cannot be received or is invalid.","These data communication function tables could contain a field indicating whether a communication device has an autonomous communication function or a request\/response communication function. Network traffic can be reduced by sending data only to communication devices that can operate in an autonomous communication mode, or sending data only to communication devices that can respond to request\/response communication requests.","Furthermore, the data communication function table could have a field denoting a divisional size enabling maximum data communication efficiency. This enables data communication at the communication rate that is most efficient for a network configured from a desired communication media.","The communication device stores the data communication function table for storing functions related to data communication in memory, and has a data communication controller for communicating data with other communication devices by writing and reading the data communication function table.","The data communication function table contains at least one of the following: autonomous transmission data type, autonomous reception data type, response transmission data type, and request reception data type.","The data communication function table also stores at least one of the following: transmission data description, data transfer status, data unit count per data type, divisional data count, and transfer data.","The data communication function table of the destination device stores at least one of the following: autonomous transmission data type, autonomous reception data type, response transmission data type, request reception data type, transmission data description, data transfer status, data unit count per data type, divisional data count, and transfer data.","The transmission-side and reception-side devices can also share this information. By sharing information it is not necessary to send the same data again, and network traffic can therefore be reduced. Because less data communication time is needed, the effect for each communication device is the same as increasing the data communication rate.","The communication device stores the data communication function table for storing functions related to data communication in memory, and has a data communication controller for communicating data with other communication devices by writing and reading the data communication function table.","The data communication function table contains at least one of the following: autonomous transmission data type, autonomous reception data type, response transmission data type, and request reception data type.","The data communication function table of the destination device stores at least one of the following: autonomous transmission data type, autonomous reception data type, response transmission data type, and request reception data type.","The transmission-side and reception-side devices can also share this information. By sharing information it is not necessary to send the same data again, and network traffic can therefore be reduced. Because less data communication time is needed, the effect for each communication device is the same as increasing the data communication rate.","An exemplary embodiment of the present invention also provides a data communication method recording medium for storing a program enabling a computer to execute the data communication method of the invention. This program can be recorded to any computer-readable medium.","An exemplary embodiment of the present invention can also be provided as a computer-executable program enabling a computer to execute the data communication method of the invention.","The communication device stores the data communication function table for storing functions related to data communication in memory, and has a data communication controller for communicating data with other communication devices by writing and reading the data communication function table.","The data communication function table contains at least one of the following: autonomous transmission data type, autonomous reception data type, response transmission data type, and request reception data type.","The data communication function table also stores at least one of the following: transmission data description, data transfer status, data unit count per data type, divisional data count, and transfer data.","The data communication function table of the destination device stores at least one of the following: autonomous transmission data type, autonomous reception data type, response transmission data type, request reception data type, transmission data description, data transfer status, data unit count per data type, divisional data count, and transfer data.","The transmission-side and reception-side devices can also share this information.","The communication device stores the data communication function table for storing functions related to data communication in memory, and has a data communication controller for communicating data with other communication devices by writing and reading the data communication function table.","The data communication function table contains at least one of the following: autonomous transmission data type, autonomous reception data type, response transmission data type, and request reception data type.","The data communication function table of the destination device stores at least one of the following: autonomous transmission data type, autonomous reception data type, response transmission data type, and request reception data type.","The transmission-side and reception-side devices can also share this information.","Other objects and attainments together with a fuller understanding of the invention will become apparent and appreciated by referring to the following description and claims taken in conjunction with the accompanying drawings.","Preferred embodiments of the present invention are described below with reference to the accompanying figures. A basic concept of the present invention is described first below.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 50","b":["100","100","1","2","3"]},"As an example of a communication system  according to an exemplary embodiment of the present invention, a local area network in the home (\u201chome LAN\u201d) for interconnecting home appliances so that they can communicate with each other is used herein. The communication devices  and  are appliances having basically the same communication functions and configuration. An air conditioning system, refrigerator, microwave oven, and exterior security cameras are exemplary of such appliances. The electrical lines used to supply power to the appliances are used for the network . By using the electrical lines for the network , the communication rate of the network  is relatively slow at a maximum 9600 bps typically. A wireless network with an even slower communication rate of a maximum 2400 bps, for example, could also be used in place of this home LAN. In either case, however, no new wiring is required to construct the network . It will also be obvious that the network  could be a normal communication network.","It is assumed in the following description that communication device  sends a data file to communication device , and communication device  processes the received file. For example, if the communication device  is a security camera for monitoring visitors and communication device  is a control terminal (simply a controller below) with a monitor, then an image data file captured by the security camera is sent from communication device  over the network  to communication device  for display on the controller's monitor.","It should be noted that \u201cdata file\u201d is also used herein with reference to data communicated without having a filename assigned thereto.","This communication device  has application software , service middleware , a service API (Application Programming Interface) , basic API - and -, communication processor (communication middleware) , service object , low-level communication software , and common low-level communication interface . As will be apparent from the \u201csoftware\u201d labels used here, the configuration of the communication device  shown in  is a conceptual model of communication function layers in the communication device . A block diagram of a corresponding physical configuration is described further below with reference to .","One of important feature of the exemplary embodiment of the present invention is that service middleware  and service object  are disposed to both communication devices  and  of the communication system , and a uniform procedure is followed for communication. Because different functions are required in the communication device  on the data file transmission-side and in the communication device  on the side receiving the data file, the specific content of the service middleware  and service object  is also different on the sending and receiving sides. However, by predefining the data required to receive the data file and following a defined procedure for communication, communication data can be posted and confirmed and an efficient communication system can be achieved. Valid data and the device with which data is to be communicated can thus be easily determined. Sufficient practical utility can thus be assured even on a network  with a relatively slow data transmission rate.","The application software  is a program for running major processes on the communication devices. In the case of communication device  the application software  is a program for capturing and encoding images with the exterior security camera. For communication device  it is a program for decoding and displaying the received images. The application software  can be a single program or it could be a set of multiple programs each performing specific processes.","The service middleware  is a program for handling the shared basic operations of the application software . More specifically, the service middleware  handles sending and receiving relatively large data files, that is, managing the data file transmission sequence and reassembling (decoding) received divisional data files. The service middleware  is part of a specific application program. The service middleware  therefore uses basic API - when using the functions of the communication middleware  in internal processes. From the perspective of the communication middleware , the service middleware  therefore operates as application software .","Using the service middleware  to define shared processes makes application development easier, enables software vendors to focus on developing the essential functions and performance of the system and devices, and therefore makes it possible to provide system peripherals and devices that are more beneficial for the user. This service middleware  is therefore described more fully below.","The service API  is an API for accessing the service middleware  from the application software . The service API  is provided by the service middleware . By using the service API , the application software  can pass requests to the service middleware , or the application software  can receive process results from the service middleware .","An application programming interface (API) generally refers to an interface enabling an application to call specific functions provided by the OS. API specifications are generally publicly available so that the API can be used as a tool enabling efficient application development.","Basic API - and - are interfaces used for the application software  to exchange data files with the communication middleware . Because the service middleware  is part of the application program from the perspective of the communication middleware , the basic APIs are shared by both. For easier understanding, however, basic API - is used to communicate with the application software , and basic API - is used to communicate with the service middleware .","The communication middleware  runs the communication process for sending and receiving data files using device object  and service object . More specifically, the communication middleware  runs frame processes for interpreting messages received over the network , processes determined by the properties of the service object , and writing to and reading from the service object . These data files include files received from the application software  and\/or service middleware , and files received from the network .","The device object  part of the communication middleware  is described next. A device object  defines various parameters related to a particular device. Parameters of the device object  include the device's network class, properties, and property values. If the device is a camera, for example, the device object  defines the ID number identifying a particular camera, a flag indicating the current operation status of the camera, the camera's shutter speed, lens aperture, and exposure parameters, and where captured images are stored. Based on the class and the instance, a memory area of the device object  is specified to retrieve information.","The service object  is an object model describing the functions and settings of service middleware  available to the network. More specifically, the service object  is an object model of class specifications defining the specific functions, services, and properties of the service middleware . The purpose of defining the service object  is to efficiently construct a system by accessing the service middleware  over the network . The service object  defines a code denoting the types of data files that can be sent and received, and flags denoting an autonomous communication function or request\/response communication function. Examples of specific configurations of the service object  are shown in the function tables in  and , and are described more fully in the embodiments below.","The low-level communication software  runs a process enabling access to the network . More specifically, the low-level communication software  absorbs differences between protocols of various transmission medium to receive\/send data from\/to common low-level communication interface  commonly defined. The common low-level communication interface  mediates data file transmission. Conversely, when a data file to be sent to the network  is received from the communication middleware , the low-level communication software  receives the data file through the common low-level communication interface  and sends the data file over the network  using a specific protocol.","The configuration of the communication device  with respect to its communication functions is described above. The basic configuration of communication device  is substantially identical to communication device , except that because it functions as a controller it must also communicate with devices other than communication device . This means that communication device  may have multiple service objects , one for each device it communicates with.","The service middleware , which is an important feature of an exemplary embodiment of the present invention, is next described in detail. The service middleware  supports file transfers for sending and receiving data files over a network  with a relatively small transmission capacity. This file transfer process is called a \u201cfile transfer service.\u201d","The data file transmission sequence managed by the service middleware  can be divided into two major parts. First is the communication sequence whereby the communication device  autonomously sends a data file. This type of communication is referred to as \u201cautonomous communication\u201d or \u201cPUSH type data communication.\u201d More specifically, this communication sequence is used when a camera (communication device ) autonomously sends an image data file to the controller (communication device ).","Second is a sequence whereby communication device  asks communication device  to send a data file, and communication device  sends the requested data file in response. This type of communication is called \u201crequest\/response communication\u201d or \u201cPULL type data communication.\u201d A specific example of this sequence is when the user wants to see the image captured by the camera (communication device ) and operates the controller (communication device ) to request the image data file from the camera (communication device ). The camera (communication device ) receiving the request then captures an image and sends the image data file to the controller (communication device ).","Both of these communication sequences are further described in detaile in the embodiments below.","The service middleware  divides data files based on the transmission capacity of the network  and the data size that can be handled in a single communication by the destination communication device . The service middleware  of the camera (communication device ) may detect the current transmission capacity of the network  based on information from the low-level communication software  when the power turns on. When the destination communication device  is identified, it also gets the data size that can be handled in a single communication by the destination communication device  by polling a service object  of the communication device . If the data file to be sent is larger than the indicated data size, the data file is divided and sent in blocks that are a size within the transmission capacity of the network .","Assume that the data size that can be sent and received at one time on the network  is a maximum 131 bytes, and the size of image data captured by the camera is 5 k bytes (approximately 5000 bytes). In this case the service middleware  of the camera considers the size of data that can be handled by the controller (communication device ) and divides the image data into 131 byte blocks for transmission to the controller (communication device ). The service middleware  sets the data division information required for sending data in the service object . This data division information includes the size of the data blocks that can be handled in a single communication by the camera (communication device ) on the data transmission side. Other information contained in the service object  includes a unique ID, the order and the number identifying each of the divided image data.","The controller (communication device ) on the receiving side receives each of the divided image data. The service middleware  of the communication device  polls the service object  of the camera (communication device ) to confirm whether all of the divided data were received. If not, the service middleware  asks the camera (communication device ) to resend the remaining divided data. If all the divided data were received, the service middleware  reassembles the divided data based on the data division information set in the service object  of the camera (communication device ) to get the image data file. The service middleware  supplies the image data file through the service API  in response to a request from the application program .","Service objects  and  as they relate to the above-noted file transfer service are described in further detail below.","In order to transmit data files the transmission-side communication device  has a service object  relating to sending files (i.e., a file transmission service object ). The reception-side communication device  has a service object  relating to receiving files (i.e., file reception service object ). Both file transmission and file reception service objects store the properties required for the file transfer method (i.e., PUSH or PULL type transfers). These properties are respective expressions on attributes and functions of the service itself, such as operational condition, transmission condition, and transmitted content of the file transfer service.","The file transmission service object  posts the transmission settings, transmission conditions, and transmission content. The specific content is shown in , ,  and .","The file reception service object  is the object for receiving data files. The specific content of this service object  is shown in  and .","It should be noted that the object data for push transmission\/reception describes the types of data that can be sent and received in the PUSH mode, and the object data for PULL type transmission\/reception describes the types of data that can be sent and received in the PULL type.",{"@attributes":{"id":"p-0106","num":"0105"},"figref":["FIG. 1","FIG. 50"],"b":["100","100","1","2","3"]},"Communication device  has a central processing unit (CPU) , memory , data communication controller , memory manager , and network controller .","The CPU  handles overall control of operations of communication device . The other components (i.e., memory , data communication controller , memory manager , and network controller ) operate at appropriate timing as controlled by the CPU  to perform various processes.","A data communication function table  is stored in memory . The data communication function table  stores information defining data communication functions and information relating to communication procedures. The memory  also stores the software programs run on the communication device , that is, the application software  and service middleware . The memory  also stores middleware (not shown in the figure) for operating the communication middleware .","The data communication controller  has a table sharing controller  and controls the table sharing process described further below.","The memory manager  has a table reading unit , table writing unit , and table sharing processor , and based on the content of the data communication function table  runs a sharing process with another communication device .","The network controller  controls communications with other communication devices.","Communications device  could also be configured identically to communication device . In the embodiment shown in  the communication device  has a CPU , memory , data communication controller , memory manager , and network controller . Data communication function table , application program , and service middleware  are stored in memory . It should be noted that while the components of the communication device  are identified by different reference numerals, parts having the same name in communication device  and communication device  have the same configuration and function. Further description of the individual components of the communication device  is therefore omitted below.","Referring again to , the correlation between elements in the model communication device  shown in  and specific elements shown in  is described next.","The application software  and service middleware  are stored to memory  as shown in . The service middleware  is read from memory  () and run by the CPU  (). Based on the instructions in service middleware , the CPU  accesses the device object  and service object  stored to memory  () and runs the processes. The application software  is also read from memory  () and run by the CPU  (). When processing the application software , the CPU  uses the process results from the service middleware  by way of the service API , or sends requests to the service middleware , based on the instructions of the application software .","The device object  and service object  correspond to the data communication function table  (), and are both stored in a table format.","The communication middleware  is stored to memory  (). Based on middleware (not shown in the figure) for managing communication by the communication device , CPU  controls operation of the data communication controller  () and memory manager  () while appropriately accessing the data communication function table  () in memory .","The low-level communication software  and common low-level communication interface  correspond to the network controller  (). The network controller  () is a communication module such as an interface card or board having an RS-232C or other serial interface. The low-level communication software  is stored in memory (such as EEPROM) in the communication module and is run by a separate CPU on the module to communicate according to a specific protocol.","The correlation between elements in  and  for communication device  is the same as for communication device . This means that the device objects and service objects of the communication device  correspond to the data communication function table  (). Note, however, that the data communication function table  in communication device  and the data communication function table  in communication device  store different device objects and service objects. If communication device  is a node on the data transmission side and communication device  is a node on the data receiving side, the service object  of the communication device  () is a file transmission service object, and the service object  of communication device  is a file reception service object.","Data communication by the present embodiment is described next referring first to an autonomous data transfer from a terminal device to the controller. In this example the communication device  connected to the network is assumed to be an air conditioner with an autonomous transmission function, and the other communication device  is a controller with a function for receiving autonomous transmissions, i.e., an autonomous reception function, for centrally controlling equipment such as an air conditioner. Communication through such autonomous transmission and autonomous reception is referred to herein as \u201cautonomous communication.\u201d","When a network connection is established or data communication is to start, the data communication controller  of the air conditioner  sends a command to confirm whether or not the other (destination) communication device is a device with a data communication function table. This confirmation is accomplished by sending a predefined communication message to the destination device and getting a response from the destination device.","When confirming whether the device has a data communication function table or not it is also possible to determine if the destination device has an autonomous reception function by querying specific information in the data communication function table.","This confirmation could be done between the controller  and each of the connected devices either before data communication or at some regular interval.","Furthermore, by querying specific information in the data communication function table of the destination communication device, the controller  can detect whether a particular device has an autonomous transmission function.",{"@attributes":{"id":"p-0125","num":"0124"},"figref":["FIG. 2","FIG. 3","FIG. 4"],"b":["15","1","25","2","15","25","1","2"]},"The following information is stored in the data communication function table  of the air conditioner  before data communication, that is, before the fields are filled.","The autonomous transmission data type  is a value denoting the types of data that can be autonomously transmitted by the air conditioner . There are two types in this embodiment, CSV meaning table format data, and TXT meaning text data.","The autonomous reception-side data type  denotes the data types that can be handled by the destination device receiving the autonomous transmission. This field is initially blank because the capabilities of the destination device are unknown.","The transmission data description  is the data format as shown in  that is used when the air conditioner  autonomously transmits data. As shown in  this includes the data type, data title, date, and size. This field is also initially blank.","The data transfer status  indicates whether transmission is in progress, and is initially set to NOT-SENDING.","The data division information  denotes the size of divided data that can be handled by the autonomous reception side, and is initially unknown and therefore undeclared.","The transmission data  is the data that is actually sent. This field is also initially blank.","The following information is initially stored to the data communication function table  of the controller .","The autonomous reception data type  is a value denoting the type of data that can be handled by the controller  receiving an autonomous transmission, and is initially set to TXT.","The transmission data description  is the data format as shown in  that is used when the air conditioner  autonomously transmits data. As shown in  this includes the data type, data title, date, and size. This field is also initially blank because the message format that will be received is unknown.","The data transfer status  indicates whether transmission is in progress, and is initially set to NOT-SENDING.","The data division information  denotes the size of divided data that can be handled by the autonomous reception side, that is, by the controller , and is set to .","The transmission data  stores the received data and is initially blank because no data has been transmitted (received).","The air conditioner  confirms whether the controller  is a communication device that could be a destination device for autonomous transmissions as follows.","The table sharing controller  of the air conditioner  sends a command to share the autonomous reception-side data type  data to the table sharing processor . The table sharing processor  receiving the command instructs the network controller  to send to a message for sharing the autonomous reception-side data type to a communication device, in this example the controller , that has already been confirmed to be configured with a data communication function table.","The controller  that received the message sends the received information from the network controller  to the table sharing processor . The table sharing processor  reads the data communication function table  by means of the table value reader , that is, reads the TXT value in the autonomous reception data type  field of the data communication function table  shown in , and returns it to the table sharing processor . The table sharing processor  then instructs the network controller  to send the read value (TXT) to the device from which the query message was received.","When the air conditioner  gets this response it sends the information from the network controller  to the table sharing processor . The table sharing processor  then instructs the table writing unit  to write the acquired value to the data communication function table . The value TXT is thus written to the autonomous reception-side data type  field of the data communication function table  in the air conditioner  as shown in field  in  so that the same value is recorded in the data communication function tables of the sending and receiving devices.","The table sharing processor  of the air conditioner  then notifies the data communication controller  that the autonomous reception-side data type  is set to the same value as the autonomous reception data type  of the autonomous reception-side device. The data communication controller  then compares the TXT value written to the autonomous reception-side data type  with the values (CSV and TXT) in the autonomous transmission data type  field, and thus knows that transmission is possible because there is a matching data type. If there is not a matching data type, the air conditioner  knows that an autonomous transmission cannot be addressed to the queried destination device. If a value denoting \u201call types\u201d is written to the autonomous reception data type  in the data communication function table  of the controller , the air conditioner  knows that all data types recorded in its autonomous transmission data type  field can be transmitted.","In order to autonomously transmit data, the data communication controller  of the air conditioner  sets the value of the data transfer status  in the data communication function table  to SENDING as shown in field  in  by issuing a command to the table reading unit . It then issues another command to the table reading unit  to set the transmission data description  in the data communication function table  to the most recent values, that is, the data type , data title , date , and byte size , as shown in . This transmission data description  is for reporting the format of the data to be transmitted to the autonomous reception side. The transmission data , i.e., the data to be sent, is also updated to the most recent data. These settings are indicated in fields  and  in .","The data communication controller  then shares the transmission data description  using the table sharing controller . More specifically, the table sharing processor  tells the table reading unit  to read the set transmission data description , passes it to the network controller , and sends it to the controller . The table sharing processor  of the controller  that received the transmission data description  then writes the transmission data description  to the transmission data description  in the data communication function table  by way of the table writing unit .","The data communication controller  is then informed that the transmission data description has been shared. The data communication controller  then determines if data can be received from the data type and block size in the description in the transmission data format, and if it can set the data transfer status  of the data communication function table  to SENDING by means of the table writing unit . The table sharing controller  of the data communication controller  then instructs the table sharing processor  to read the data division information  from the data communication function table , and sends the retrieved divided size ( in this embodiment) from the network controller  to the air conditioner .","The air conditioner  then stores the received data division information  () to the data division information  field of the data communication function table  and thus shares the same value with the controller .","This completes preparations for autonomous data transmission. The data communication controller  therefore instructs the table sharing controller  to share the transmission data  () in the data communication function table . More specifically, it divides the transmission data  () into 1024-byte blocks and autonomously sends the data from the air conditioner  to the controller . The controller  then writes the data received from the air conditioner  to the transmission data  () field in the data communication function table  on the controller  side.","Finally, when the data communication controllers ,  of the air conditioner  and controller , respectively, determine that sharing the transmission data is completed, the data transfer status ,  is rewritten to STANDBY, NOT-SENDING, or UNDECLARED to restore the state shown in fields , . The shared values set to fields other than the data transfer status field are kept. Further communication to share the same information is therefore unnecessary.","It should be noted that the data division information  could be sent simultaneously to or immediately after sending the autonomous reception data type .","Request\/response communication in which the controller asks a terminal device to send data is described as a second embodiment of the present invention. This embodiment considers data communication between a lighting fixture and a controller for centrally controlling the lighting fixture and other devices. The configuration shown in  and described above can also be used in this embodiment. In this embodiment the communication device  shown in  is a lighting fixture , and communication device  is the controller . In this example the controller  requests a data transmission from the lighting fixture , the lighting fixture  responds, and the controller  receives the response. This data communication mode is referred to herein as \u201crequest\/response communication.\u201d",{"@attributes":{"id":"p-0152","num":"0151"},"figref":["FIG. 5","FIG. 6"],"b":["15","25","1","2","15","25"]},"As shown in table  in , the data communication function table  of the lighting fixture  initially stores the following information.","The response transmission data type  stores a value indicating the type of data that the lighting fixture  can transmit. In this embodiment the lighting fixture  can transmit CSV data, meaning data in a table format.","The transmission data description  is the data format as shown in  that is used when the lighting fixture  sends a data response. As shown in  this includes the data type, data title, date, and size. This field is initially blank.","The data transfer status  indicates whether transmission is in progress, and is initially set to NOT-SENDING.","The data division information  denotes the size of divided data that can be handled by the request reception side (i.e., the side that requested the data), and is initially unknown and therefore undeclared.","The transmission data  is the data that is actually sent. This field is also initially blank.","The data count per type  field declares the number of units of each data type (CSV or TXT) that is transmitted. The unit could be a file or other unit of data. Note that in this embodiment the response transmission data type  is initially set to CSV and the data count per type  is set to 1 as shown in .","As shown in table  in , the data communication function table  of the controller  initially stores the following information.","The response transmission data type  stores a value indicating the type of data sent by the responding device (i.e., the device transmitting a response to a received request). This data type is initially unknown and the response transmission data type  is therefore undeclared.","The transmission data description  is the data format as shown in  that is used when the responding device, i.e., lighting fixture  in this embodiment, transmits data. As shown in  this includes the data type, data title, date, and size. This field is also initially blank because the message format that will be received is unknown.","The data transfer status  indicates whether transmission is in progress, and is initially set to NOT-SENDING.","The data division information  denotes the size of divided data that can be handled by the reception side, that is, by the device (controller)  that sent the request and receives the response, and is set to  in this embodiment.","The transmission data  field is where the requested data is stored and is initially blank because no data has been transmitted by (received from) the responding terminal.","The data count per type  field declares the number of units of each data type (CSV or TXT) that is transmitted. This value is initially unknown and the field is therefore blank.","The request reception-side data type  is a value denoting the type of data that can be handled by the controller . As shown in the function table , the controller  can receive both CSV and TXT data types in this embodiment.","Data communication in this embodiment of the invention is described next.","When a network connection is established or data communication is to begin, the data communication controller  of the controller  first sends a command to confirm if the destination communication device is a device with a data communication function table as described above. This confirmation is accomplished by sending a predefined communication message to the destination device and getting a response from the destination device.","When confirming whether the device has a data communication function table or not it is also possible to determine if the destination device is a device with a response transmission function by querying specific information in the data communication function table.","This confirmation could be done between lighting fixture  and each of the connected devices either before data communication or at some regular interval.","The lighting fixture  can also confirm if the requesting device has a request reception function by querying specific information in the data communication function table of the destination communication device.","When a network connection is established or data communication is to begin, the controller  having a transmission request function determines whether transmission can be requested from the communication device by means of a command from the data communication controller  as follows.","Using the table sharing controller  of the data communication controller , the controller  copies the response transmission data type , which is set to CSV, from the function table  shown in  in the data communication function table  of the lighting fixture  to the response transmission data type  in the data communication function table  of the controller . To do this the table sharing processor  instructs the network controller  to create and send to the lighting fixture  a message requesting response transmission type data.","The network controller  of the lighting fixture  interprets the received message, and passes the requested content to the table sharing processor . The table sharing processor  gets the value of the response transmission data type , i.e., CSV, through the table reading unit , stores it to the response message and returns it to the controller  by means of the network controller , that is, responds to the request. The controller  gets the value of the response transmission data type  (CSV) from the received response message, and writes it to the data communication function table  as the response transmission data type  shown in . The table sharing controller  of the controller  then compares the written response transmission data type (CSV) with the request reception-side data type  values CSV and TXT. Because there is a matching data type, the table sharing controller  knows the response transmission can be received. If a matching data type is not detected, the request response cannot be received.","To get information about the requestable data types, the table sharing controller  of controller  requests sharing the data count per type  information, and sets the value (i.e., 1) of the data count per type  as the data count per type  value in the data count per type  field of the controller . This information can be shared using a message exchange similar to that for writing the response transmission data type ,  to fields , . Because the data count is 1, the number of data units that can be requested is 1.","To request data, the table sharing controller  of the controller  sets the data transfer status  in the data communication function table  to SENDING as shown in field , , and then sets the data transfer status  of the lighting fixture  to SENDING. Sharing this value can also be accomplished with a message exchange as described above. This assembles the information needed to set the newest values ,  to the transmission data  and transmission data description  fields in the data communication function table  of the lighting fixture .","The same procedure described in the first embodiment above can thereafter be used to send data from the lighting fixture  to the controller .","Once the data communication controllers ,  of the lighting fixture  and controller  determine that sharing the transmission data ,  has been completed, the data transfer status ,  fields are set to COMPLETED. The shared values set to fields other than the data transfer status field are kept. Further communication to share the same information is therefore unnecessary.","Request\/response communication in which a terminal device asks a controller to send data is described as a third embodiment of the present invention. In this embodiment communication device  shown in  is a controller  for centrally controlling a group of terminal devices, and communication device  is a microwave oven .",{"@attributes":{"id":"p-0181","num":"0180"},"figref":["FIG. 7","FIG. 8"],"b":["15","25","1","2","15","25"]},"As shown in table  in , the data communication function table  of the controller  initially stores the following information.","The response transmission data type  stores a value indicating the type of data that the controller  can transmit. In this embodiment the controller  can transmit HTM and TXT data types, respectively denoting HTML data and text data.","The transmission data description  is the data format as shown in  that is used when the controller  sends a data response. As shown in  this includes the data type, data title, date, and size. The transmission data description shown in  is stored for each data type (HTM and TXT) that the controller  can return.","The data transfer status  indicates whether transmission is in progress, and is initially set to NOT-SENDING.","The data division information  denotes the size of divided data that can be handled by the request reception side (i.e., the side that requested the data), and is initially unknown and therefore undeclared.","The transmission data  is the data that is actually sent. This field is also initially blank.","The data count per type  field declares the number of units of each data type (HTM or TXT) that is transmitted. The unit could be a file or other unit of data. Note that in this embodiment the data count per type  is set to 10 for HTM data, and 5 for TXT data.","As shown in table  in , the data communication function table  of the microwave oven  initially stores the following information.","The response transmission data type  stores a value indicating the type of data sent by the responding device (i.e., the device transmitting a response to a received request). This data type is initially unknown and the response transmission data type  is therefore undeclared.","The transmission data description  is the data format as shown in  that is used when the responding device, i.e., controller  in this embodiment, transmits data. As shown in  this includes the data type, data title, date, and size. This field is also initially blank because the message format that will be received is unknown.","The data transfer status  indicates whether transmission is in progress, and is initially set to NOT-SENDING.","The data division information  denotes the size of divided data that can be handled by the reception side, that is, by the device (microwave oven)  that sent the request and receives the response, and is set to 1024 in this embodiment.","The transmission data  field is where the requested data is stored and is initially blank because no data has been transmitted by (received from) the responding terminal.","The data count per type  field declares the number of units of each data type (HTM or TXT) that is transmitted. This value is initially unknown and the field is therefore blank.","The reception-side data type  is a value denoting the type of data that can be handled by the microwave oven . As shown in the function table , the microwave oven  can receive only HTM data in this embodiment.","Data communication in this embodiment of the invention is described next.","When a network connection is established or data communication is to begin, the microwave oven  with a transmission request function first confirms if it can operate as a transmission request device as follows. Specifically, using the table sharing processor , the microwave oven  acquires the response transmission data type  from the data communication function table  of the 1 and stores the acquired HTM and TXT values as the response transmission data type in field . It them compares these values with the value (HTM) of the request reception-side data type , and thus knows that it can receive data when the controller  transmits HTM data.","Next, using the table sharing processor , the microwave oven  stores the data count per type  values ( and ) from the data communication function table  of the controller  to the corresponding field . To select the data to be acquired from the target data, the controller  shares the transmission data description  information from the data communication function table of the controller  using the table sharing processor . Because the controller  stores the transmission data description for all data that can be transmitted as shown in field , the microwave oven  can get the transmission data description  for all target data and store it to the data communication function table  as transmission data description . It is therefore possible to select the requested data from among plural available transmission data descriptions. However, because only HTM data can be received in this embodiment, it is only possible to select and request HTM data.","Next, if multiple subfiles or segments are being transmitted and the third file or segment is being sent, for example, the data communication controller  of the microwave oven  sets the data transfer status  in the data communication function table  to SENDING # as shown in field  in  to request the third HTM data file or segment from the data types acquired in the transmission data description . Then using the table sharing controller  it sets the data transfer status  of the controller  to SENDING # as shown in field  in . The data communication controller  of the controller  can thus update the transmission data  and transmission data description  to the most recent data.","The specified data can thereafter be sent from the controller to the microwave oven using the same control process described in the first embodiment.","Furthermore, if the data in the controller is variable, that is, if the data count per type, the transmission data format for each data type, and the transmission data values are variable, writing is disabled while the data transfer status is SENDING. Writing can also be disabled separately from when the data transfer status is SENDING so that the data count per type, the transmission data format for each data type, and the transmission data values cannot be changed.","Once the data communication controllers ,  of the controller  and microwave oven  determine that sharing the transmission data has been completed, the data transfer status is set to COMPLETED. The shared values set to fields other than the data transfer status field are kept. Further communication to share the same information is therefore unnecessary.","The configuration, operation, and procedure of the present invention enabling a communication device on an initiation side requiring data transmission (the trigger side) and a destination device that the trigger-side communication device communicates with to share information in their respective data communication function tables have been described in the above three embodiments. In the first embodiment the autonomous transmission side of an autonomous communication matches the data type of the autonomous reception-side device. In the second and third embodiments the request-reception side of a request\/response communication transaction matches the data type of the response-transmission side (i.e., the device responding to the request).","Because data transmission is not possible if both sides cannot handle the same data type, one or both of the communication devices could also report that data transmission is not possible.","Alternatively, a separate communication device with a function for converting data types could be connected to the network and data transmissions could be routed through this conversion device. If the data types of the communicating devices do not match but this conversion function is provided in one or both of the communication devices, data could be converted to an accessible data type for transmission and reception.","Furthermore, a separate communication device that can receive the desired data type could receive and then forward the transmission data.","Yet further, if the data types do not match, a separate communication device could be queried for a transmission sequence matching the desired data type or a program able to process transmission data of the desired data type, the queried transmission sequence or program could be downloaded from the separate communication device to the communication device  or communication device  that is incompatible with the data type so that the incompatible device can handle the desired data type according to the desired type data count and divided data.","On the other hand, if the two communication devices share multiple common data types, data can be communicated using any desirable data type. Because the transmission data types are normally predefined, such as TXT, CSV, and HTM, the data type must be set to a type matching the content of the desired data file. It is therefore also possible to determine the data type of the required file and then select and share the corresponding type from among the multiple available data types.","The data communication function table used in the present invention works to define a procedure, that is, an object, for data communication, and the table itself is handled as an object. Negotiations between both communication devices starting a data communication session are smoothed and unnecessary communication traffic can be reduced by sharing information relating to data communication as a transmission task object, that is, by sharing an object rather than sharing each data field.","The autonomous transmission data type, transmission data description, data transfer status, transmission data, autonomous reception-side data type, response transmission data type, request-reception data type, data divisional size, and data count per type information described above are parameters known as \u201cproperties\u201d for determining the type of data communication service. Various methods can be used to determine these parameters, and one specific method is described below with reference to , , and .  and  show properties related to [A] Data transmission services.","(1) Data Types Handled for PUSH Type Transmissions (Autonomous Transmission Data Type)","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n","Handled Type Information for PULL Type Transmissions (Response Transmission Data Type)","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n","(3) Number of Data Units Per Date Type for PULL Type Transmissions (Data Count Per Type)","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n","(4) Transmission Data Description","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n","(5) Data Transfer Status","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n","(6) Data Transfers","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n",{"@attributes":{"id":"p-0230","num":"0261"},"figref":"FIG. 11"},"(1) Data Types Handled for Receiving PUSH Type Transmissions (Data Types on the Autonomous Reception Side)","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n","(2) Data Types Handled for PULL Type Reception (Data Types on the Request-Receiving Side)","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n","(3) Data Division Information","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n","Exemplary messages using the properties shown in , , and  for executing the data communication methods and procedures of the three embodiments described above are described next below.","When data is transferred by autonomous transmission from the transmission-side in an autonomous communication process for PUSH type data communication, the data types for PUSH type reception handled on the reception-side are requested and the transmission data type is confirmed. The transmission data description is then reported, the data transfer, i.e., response, from the reception-side is confirmed, and the data is then transferred from the transmission-side by means of a divided data transmission. A typical communication sequence for autonomous communication (PUSH type data communication) is shown in . In this process data is transmitted automatically by means of an internal trigger on the transmission-side. Summary of processing of autonomous communication (PUSH type data communication) is now described.","<Pre-processing>","(1) Data Type Information Requested (Transmission-side\u2192Reception-side)","The transmission-side sends a read request to the reception-side for the data types handled for PUSH type reception.","(2) Handled Type Information Response (Reception-side\u2192Transmission-side)","The reception-side sends the requested data types handled for PUSH type reception to the transmission-side.","<Data Transmission Process>","(3) Transmission data Description Report (Transmission-side\u2192Reception-side)","The transmission-side writes the transmission data count and sets the data transfer status field to SENDING, and then reports the transmission data size, checksum, and other transmission data to the reception-side. The reception-side determines if data reception is possible from the transmission data description; if it is not, the reception-side sets the data transfer status to TERMINATED DUE TO ERROR.","(4) Divided Data Information Report (Reception-side\u2192Transmission-side)","If the reception-side decides that reception is possible, it sends the maximum byte count per data packet that it can receive.","(5) Divided Data Transfer (Transmission-side\u2192Reception-side)","The transmission-side divides and continuously transmits the data to the reception-side.","(6) Specified Data Divisional Request (Reception-side\u2192Transmission-side)","After the reception-side receives the last divided data, or if there is a divided data that could not be normally received when a time-out occurs while waiting for a divided data, a transmission request specifying a particular divisional data number is sent from the reception-side to the transmission-side.","(7) Specified Divided Data Transmission (Transmission-side\u2192Reception-side)","If a request for a particular divided data is received from the reception-side, the transmission-side sends the requested divided data.","(8) Data Transfer Completed (Reception-side\u2192Transmission-side)","If the data is correctly received, or if the data transfer process is terminated for some reason, the reception-side sends data setting the data transfer status to COMPLETED to the transmission-side.","There are also cases in which this frame is not sent. Therefore, the data transmission side runs a process for inserting a timeout in the process waiting for a specific divided data request and data transfer completion setting frame, and changing the data transfer status from SENDING to COMPLETED.",{"@attributes":{"id":"p-0261","num":"0304"},"figref":["FIG. 13","FIG. 13"],"b":["14","15","1","2"]},"When there is a data communication request from the reception-side In a request\/response communication process (PULL type data communication), after the PUSH type transmission data type is requested from the transmission-side and the transmission data is confirmed, a data collection process is run as needed and the reception-side then sends a start data transfer trigger. When the data transmission side receives this trigger, it reports the transmission data description for the specified data and then runs the same data transfer process used with PUSH type transmissions.","A typical communication sequence for request\/response communication (PULL type data communication) is shown in , and the messages used therein are described below.","<Pre-processing>","(1) Handled Type Information Request (Reception-side\u2192Transmission-side)","The transmission-side sends a read request to the reception-side for the data types handled for PULL type transmission.","(2) Handled Type Information Response (Transmission-side\u2192reception-side)","The reception-side sends the requested data types handled for PULL type transmission to the transmission-side.","<Target Data Description Collection Process>","The data selection process is described below. Each of the following processes are run as needed. The processes can also be run independently of data transfers.","(3) Data Transfer Status Request (Reception-side\u2192Transmission-side)","The reception-side requests the data transfer status from the transmission-side. The transmission-side responds to the request by sending the data transfer status.","(4) Data Transfer Status Response (Transmission-side\u2192Reception-side)","The transmission-side sends a data transfer status response to the reception-side. If the data transfer status is unprocessed or data transfer is completed, the reception-side sends a write-prohibit or start data transfer trigger.","(5) Write-Prohibit (Reception-side\u2192Transmission-side)","The data transfer status is set to a write-prohibit state so that the transmission-side cannot rewrite the current data type or data. A write-prohibit is applied as needed. After a write-prohibit state is set it is necessary to either set the data count to the data transfer status and start data transfer, or set the data transfer status to COMPLETED.","(6) Data Count Per Type Request (Reception-side\u2192Transmission-side)","The data count for each transmitted data type is requested as needed to collect information immediately before data transfer starts.","(7) Data Count Per Type Response (Transmission-side\u2192Reception-side)","The data count per data type is returned per the request.","(8) Specified Transmission Data Description Request (Reception-side\u2192Transmission-side)","To get the data that will be sent before the data transfer process, a data number is specified and sent to request the transmission data description.","(9) Specified Transmission Data Description Response (Transmission-side\u2192Reception-side)","The transmission-side returns the specified transmission data description as requested.","<Transmission Process>","(10) Start Data Transfer Trigger (Reception-side\u2192Transmission-side)","The reception-side sends a start data transfer trigger to the transmission-side by sending a frame setting the data transfer status to PROCESSING. The transmission-side runs the following process after receiving this trigger (frame).\n\n",{"@attributes":{"id":"p-0288","num":"0332"},"figref":["FIG. 15","FIG. 16"]},"Another embodiment of the data communication function table according to the present invention is described next with reference to  and . In  and  the data communication function table  of communication device  has the following fields: autonomous transmission data type , autonomous reception data type , response transmission data type , request reception data type , transmission data description , data transfer status , data count per type , divisional data count , and transfer data .","The data communication function table  of communication device  likewise has the following fields: autonomous transmission data type , autonomous reception data type , response transmission data type , request reception data type , transmission data description , data transfer status , data count per type , divisional data count , and transfer data .","Each data area is divided into () and (b) where each communication device stores its own information in (a) and data for the other communication device in (b). Of the data stored in (a), the data types, data unit count per data type, and divisional data number that the communication device can handle is stored to autonomous transmission data type , ; autonomous reception data type , ; response transmission data type , ; request reception data type , ; data count per type , ; and divisional data count , , respectively. Furthermore, the values stored for the following fields are determined during the data communication process and are therefore initially blank: transmission data description , , and data transfer status , , respectively. \u201cUndeclared\u201d with reference to the data transfer status ,  means \u201cnot transmitted.\u201d Because the values of the destination device are initially unknown, each of the values in data area (b) is initially null.","Autonomous communication initiated by communication device  is described first. First, communication device  sends a message to send the autonomous reception data type () and divisional data count () information to communication device , and communication device  then sends data in response. Communication device  stores the received autonomous reception data type () and divisional data count () to () and (), respectively, and compares the values with autonomous transmission data type () and divisional data count () to detect common values. It then selects the desired data type from among the common types and writes to transmission data description (). In the example shown in  the HTM type is common to both fields () and (), and  is common to both fields () and ().","Communication device  thus knows to autonomously transmit an HTM format file A, sets data type HTM, filename A, date 2002\/3\/10, and byte count  to the transmission data description () according to the format shown in , and sends this information to the communication device . Communication device  then stores the received data to transmission data description (b). Communication device  also prepares file A in the transfer data () field, sets the data transfer status () to SENDING and sends the data transfer status  to communication device  to notify communication device  of the start of transmission. Communication device  then stores the received data transfer status () to (), and prepares to receive a file.","Next, communication device  divides file A in transfer data () into 1024 byte segments and transmits the divided data. Communication device  stores the file A received in segments in the order received to transfer data (). If file A consists of plural subfiles, the transfer status and subfile numbers can be managed by changing the data transfer status () according to the subfile number. For example, when sending subfile number , the data transfer status could be set to SENDING #. Communication device  could also manage the data transfer status and subfile numbers using field (). If when sending the transmission data description () the data count per type () is also sent either simultaneously or separately, the communication device  will know in advance the number of files to be sent and can therefore determine when transmission is completed.","As thus described communication device  or  obtains the data types, divisional data count, data unit count per data type, and other information from the other device and compares this information with its own processing capabilities so that both communication devices share the same processing capabilities. Furthermore, when a file or other transmission data is selected and sent, the data type, filename; and other information related to the transmission data is also shared between the terminals. The transmission data is then shared between the devices by sending the data.","By thus using a data communication function table and sharing information about each communication device with the other communication device, negotiations between the communication devices ,  can be completed with less network traffic.","The data communication function tables shown in  and  assume that both communication devices  and  can operate in autonomous transmission, autonomous reception, response transmission, and request reception modes, but if a communication device can only operate in some subset of these operating modes unnecessary data areas, that is, (a) or (b) or both (a) and (b), can be omitted. Embodiments 1, 2, and 3 above are equivalent to such cases.","It is preferable for the transmission-side device to match its communication capabilities, that is, the data types handled, data divisional information, and data unit count per type, for example, to the specifications of the other device, but the reception could also prepare to receive data by adjusting its operation to the capabilities of the transmission side. This is particularly applicable when the reception-side adapts to the attributes and status of the transmission data received.","In the data communication function tables shown in  and  the autonomous transmission data type  and response transmission data type  could be combined as a single transmission data type , the autonomous reception data type  and request reception data type  could be combined as a single reception data type , and fields  and  could be omitted. In autonomous communication in this case the reception data type of the destination is acquired, and the transmission-side device compares the transmission data type with the reception data type. Furthermore, in request\/response communication the transmission data type of the destination is acquired, and the initiating device compares its reception data type with the transmission data type of the destination device.","As also described above the data communication function table could be sent as a single object to share the data therein instead of sending and sharing the individual properties according to a defined procedure. In this case the values in the data communication function table that the communication device needs to acquire are left blank (undeclared) in the table object sent to the other device. While a single transmission may be sufficient in some cases, it generally necessary to send the tables back and forth plural times between communication devices  and .","An autonomous data transmission from a terminal device to the controller is described in this embodiment with reference to a terminal device and controller configured as shown in . In this example an air conditioner  is the terminal device autonomously transmitting data, the controller  is on the reception-side. The air conditioner  accumulates maintenance data for a specified period of time and then autonomously sends the accumulated data to the controller .","As shown in  the air conditioner  stores transmission function table  and the controller  stores a reception function table . Both terminal devices send and receive data by reading and writing the tables of the other device over a communication network. This transmission function table and reception function table are collectively referred to below as communication function tables.","The transmission function table  stores the following information.","The operation status  is a binary value indicating whether the transmission function table  is valid or not; 0x30 denotes the table is valid (ON) and 0x31 denotes the table is not valid (OFF).","The data-providing device\/function information  is a code denoting the type and functions of the device providing the transmission data. If the device is an air conditioner that sends maintenance data at a regular interval, the value 0x013001F0 combining the air conditioner code 0x013001 and maintenance data code 0xF0 is stored to field  in this example. It should be noted that all codes shown herein are by way of example only. The combination of device and function codes generates a unique code.","The transmission data description  describes the data format as shown in , including a data type (bitmap or text, for example), data title (filename), data date, and data size.","The data transmission status  indicates whether transmission is in progress.","The data division information  denotes the size of data that can be handled by the reception side controller .","The transmission data  is the data that is actually sent.","The following information is stored to the reception function table .","The operation status  is a binary value indicating whether the reception function table  is valid or not; 0x30 denotes the table is valid (ON) and 0x31 denotes the table is not valid (OFF).","The data-providing device\/function information  is the same as the data-providing device\/function information , i.e., a code denoting the type and functions of the device providing the transmission data.","The data reception status  indicates whether reception is in progress.","The data division information  denotes the size of divided data that can be handled by the reception side device.","The operation of this embodiment is described next.","First, the air conditioner  and controller  must recognize each other. More particularly, the transmission-side device, i.e., air conditioner , must first recognize the presence of the transmission destination, i.e., controller , before it can send data to the controller . This confirmation sequence must therefore be run by the air conditioner  as described below.","The air conditioner  and controller  are designed so that they automatically broadcast information from their own communication function tables as soon as the power turns on. If the air conditioner  turns on after the controller  and the controller  thus receives the transmission function table  report from the air conditioner , the controller  sends a message to write ON to the operation status  field of the transmission function table  in the air conditioner . This write message to the air conditioner  contains the address of the  and information indicating that the reception function table  is available. The air conditioner  recognizes the presence of a device with a reception function table when it receives this message.","If the controller  turns on after the air conditioner , the air conditioner  can recognize a transmission destination device because it can receive the reception function table  availability report from the controller . Furthermore, after the air conditioner  receives the reception function table  report from the controller , it sends a write ON message to the operation status  field of the reception function table  in the controller , and thus causes the controller  to recognize the air conditioner .","Alternatively, after the power turns on the air conditioner  and controller  could broadcast their own communication function table data to the network, send a message to read and report the operation status of the other device's communication function table, and thus recognize the other device by means of the received response to this message.","For example, when an air conditioner  with a transmission function table turns on, it sends an operation status read\/report request message to all devices that have a reception function table on the network. A controller  receiving this message reads the operation status  from the reception function table  of the controller , and creates and sends a response message to the air conditioner . The air conditioner  can thus confirm the presence of the reception function table  in the controller .","It is therefore possible for the air conditioner  to recognize the controller  as a destination for autonomous transmissions in a process preceding actual data transmission.","Sending and receiving data between the air conditioner  and controller  is described next. When maintenance data for a specified period of time is accumulated, for example, the air conditioner  generates and sends the data-providing device\/function information  to the controller . The controller  then interprets this information received from the air conditioner , and to get the maintenance data sends to the air conditioner  a message to write SENDING to the data transmission status  field of the transmission function table  in the air conditioner .","If the controller  decides not to get the maintenance data, it sends to the air conditioner  a message to write a code denoting TERMINATED DUE TO ERROR to the data transmission status  field in the transmission function table  of the air conditioner . In this case the controller  writes nothing to the data reception status  field of its own reception function table .","The write SENDING message received from the controller  acts as a trigger causing the air conditioner  to read the transmission data description  from the transmission function table  and send it to the controller . It then reads and divides the transmission data  to the divisional size defined in the data divisional information  field, and autonomously transmits the data to the controller . When the controller  receives all of the transmitted divided data, it reassembles the data, links it to the previously received transmission data, and stores the received data.","When the air conditioner  sends the data-providing device\/function information  to the controller , it could also append the transmission data description . In this case the air conditioner  could immediately begin sending the divided transmission data after it receives the write SENDING message from the controller .","Because a terminal device having a function for autonomously transmitting data sends information describing the terminal device and terminal device functions to the controller before the terminal device transmits data to the controller in this fourth embodiment of the invention, the controller receiving autonomous transmissions can get data from the terminal device after first recognizing the device providing the information and the functions of that device.","This embodiment of the invention describes a controller requesting data from a terminal device using a controller and terminal device configured as shown in . This embodiment describes a method for sending and receiving data between a camera  used as the terminal device for capturing still images, and a controller  on the reception-side. The controller  requests still image data from the camera .","The camera  and controller  respectively store the transmission function table  and reception function table  shown in . These tables are as described above in the fourth embodiment and further description thereof is therefore omitted. It should be noted that the code stored to the data-providing device\/function information  in the transmission function table  in this example is 0x06C001F1 combining the code 0x06C001 denoting a camera  and the code 0xF1 denoting still image data. As above, these codes are used by way of example only.","The operation of this embodiment is described next.","First, the controller  must recognize the camera . This is accomplished as follows.","As in the fourth embodiment, the camera  and controller  are designed so that they automatically broadcast information from their own communication function tables as soon as the power turns on. If the controller  turns on after the camera  and the camera  thus receives the reception function table  report from the controller , it writes ON to the operation status  of the reception function table  in the controller . This write message sent to the controller  contains the camera  address and information indicating that the transmission function table  is available. The controller  thus knows when it receives this message that there is a device with a transmission function table on the network.","Conversely, if the camera  power turns on after the controller , the controller  can receive the transmission function table  availability report from the camera  and thereby recognize the data request destination. After the controller  gets the transmission function table  availability report from the camera , the controller  could also send a write ON message to the operation status  in the transmission function table  of the camera  so that camera  recognizes the controller .","After the camera  and controller  turn on, each device could also broadcast their own communication function table information to the network as described in the fourth embodiment, send a read\/report request message to access the operation status from the communication function table of the other device, and recognize the other communication devices from the responses to these request messages.","It is therefore possible for the controller  to recognize the camera  as a data request destination as a preprocess to data transmission.","Sending and receiving data between the camera  and controller  is described next.","The controller  sends to the camera  a read request message to get information about the data-providing device and functions from the data-providing device\/function information  field of the transmission function table  in the camera . From the camera  response message the controller  gets information about the functions and device supplying data, i.e., the camera , and more specifically in this embodiment information indicating \u201ca still image from the camera,\u201d and determines whether the controller  is to get data from the camera .","To get data from the camera , the controller  first sends to the camera  a request message to read the data transmission status  from the transmission function table  of the camera . The controller  then receives a response message from the camera  and confirms the transmission status of the camera . If the transmission status is READY, the controller  then sends to the camera  a write request message to write the SENDING code to the data transmission status  of the transmission function table  in the camera . The controller  also writes a code denoting RECEIVING in the data reception status  field of its own reception function table .","After the camera  writes the SENDING code to the data transmission status  of its transmission function table  from the controller , it generates and sends the transmission data description  to the controller . It then reads and divides the transmission data  to the divisional size stored in the data division information  field, and autonomously transmits the divided data to the controller . When the controller  receives all transmitted data, it reassembles the data, links it to the previously received transmission data, and stores the received data.","Because a controller able to request data from a terminal device storing the data gets information relating to the terminal device and the functions of the terminal device before it requests data from the terminal device in this fifth embodiment of the invention, the controller is able to get data from the terminal device after clearly recognizing the device providing the data and the function of the device.","Specific examples of the properties for achieving the data communication method and procedure described in the above fourth and fifth embodiments are shown in , , and  and described below.",{"@attributes":{"id":"p-0341","num":"0385"},"figref":"FIG. 20"},"(1) Object Information Handled for PUSH Type Reception","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n","(2) Object Information Handled for PULL Type Reception","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n","(3) Data Division Information","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n",{"@attributes":{"id":"p-0351","num":"0408"},"figref":"FIG. 21"},"(1) Object Information Handled for PUSH Type Transmission","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n","(2) Object Information Handled for PULL Type Transmission","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n",{"@attributes":{"id":"p-0358","num":"0427"},"figref":"FIG. 22"},"(3) Transmission Status","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n","(4) Transmission target information","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n","(5) Transmission File Information","<Parameter Description>\n\n","If the file has no date, each date byte is set to 0.\n\n","<Read, Write, Notification Timing>\n\n","(6) Transmission Data","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n","Next, the data communication methods and procedures described in embodiments 4 and 5 above are described below with reference to a sequence using the properties shown in , , and .","Using the change-instance class report in the startup sequence of each node, the device startup process running on the transmission-side device gets the address (EA) of the reception-side node for PUSH type file transmissions, and for pull-mode file transmissions the reception-side gets the address (EA) of the transmission-side node.",{"@attributes":{"id":"p-0374","num":"0479"},"figref":"FIG. 23"},"<Process when the Reception-side Node Starts First and the Transmission-side Node Starts Later>","(1) Change instance class report (transmission-side\u2192reception-side)","A change instance class report is sent to the reception-side during the startup sequence. The reception-side node receiving this report can get the address (EA) of a device having a transmission service object.","(2) Write Operation Status ON Request (Reception-side\u2192Transmission-side)","When the reception-side node can receive files in the PUSH mode, it receives the change instance class report, and the reception-side node sends a write request to set the operation status of the transmission service object ON. The transmission-side node receiving this request can get the address (EA) of the device having a reception service object.",{"@attributes":{"id":"p-0380","num":"0485"},"figref":"FIG. 24"},"<Process when the Transmission-side Node Starts First and the Reception-side Node Starts Later>","(1) Change Instance Class Report (Reception-side\u2192Transmission-side)","A change instance class report is sent to the transmission-side node during the startup sequence. The transmission-side node receiving this report can get the address (EA) of a device having a reception service object.","(2) Write Operation Status ON Request (Transmission-side\u2192Reception-side)","When the transmission-side node can transmit files in the PULL type, it receives the change instance class report, and the transmission-side node sends a write request to set the operation status of the reception service object ON. The reception-side node receiving this request can get the address (EA) of the device having a transmission service object.","To transfer a file by means of autonomous transmission from the transmission-side node in an autonomous communication process (PUSH type data communication), the handled object information for PUSH type reception is requested from the reception-side node, the transmission target information is sent as needed, the transmission file information is sent, and the file is then transmitted by sending the divided data from the transmission-side node.",{"@attributes":{"id":"p-0387","num":"0492"},"figref":"FIG. 25"},"<Preprocess>","(1) Handled Object Information Request (Transmission-side\u2192Reception-side)","The transmission-side node sends to the reception-side node a read request for the handled object information for PUSH type reception.","(2) Handled Object Information Response (Reception-side\u2192Transmission-side)","The reception-side node receiving the request responds by sending the handled object information for PUSH type reception. It should be noted that steps (1) and (2) above could be omitted.","<Transmission Process>","(3) Transmission Target Information Report (Transmission-side\u2192Reception-side)","If there are multiple objects on the reception-side, the transmission-side sends the transmission target information to identify the device object to which data will be sent.","(4) Transmission Status Write Request (Reception-side\u2192Transmission-side)","If the reception-side node receives the transmission target information report and is able to receive the data to be transmitted, it issues a write request to set the transmission status of the transmission service object to START SENDING. If the data to be transmitted cannot be received, it issues a write request to set the transmission status to LAST-TERMINATED-DUE-TO-ERROR.","(5) Transmission File Information Report (Transmission-side\u2192Reception-side)","After the transmission-side node sets the transmission status to START SENDING, it sends the transmission file information, including transmission file size and checksum, to the reception-side node. The reception-side node determines from the transmission file information if reception is possible, and if reception is not possible sets the transmission completion setting to TERMINATED DUE TO ERROR.","(6) Transmission File Information Response (Reception-side\u2192Transmission-side)","The reception-side node returns a response to the transmission-side node.","(7) Divided Data Transmission (Transmission-side\u2192Reception-side)","The transmission-side node divides the file and sends divided data in a continuous stream to the reception-side node.","(8) Specified Divided Data Request (Reception-side\u2192Transmission-side)","If there is a divided data that was not correctly received either after the last divided data is received or when a timeout occurs while waiting for a divided data, the reception-side node sends a transmission request specifying the array element number of the desired divided data.","(9) Specified Divided Data Transmission (Transmission-side\u2192Reception-side)","When the transmission-side node receives a request for a specific divided data from the reception-side node, it sends the specified array element.","It should be noted that steps (8) and (9) above could be omitted.","(10) Transmission Completed Setting (Reception-side\u2192Transmission-side)","If the file is correctly received or if the transmission process is ended for some reason, the reception-side node sets the transmission status to COMPLETED and returns it to the transmission-side node.","There are also cases where the transmission completion setting is not returned. The transmission-side node therefore runs a process to insert a timeout in the process waiting for the specific divided data request and transmission completion setting frame, and change the data transfer status from SENDING to LAST-TERMINATED-DUE-TO-ERROR.","If file transmission is requested from the reception-side node in a request\/response communication process (PULL type data communication), the object information handled for PUSH type transmission is requested from the transmission-side node to check the transmission file, transmission file information is gotten as needed, and the reception-side node sends a start transmission trigger. When the transmission-side node receives this trigger it returns the transmission file information for the specified target object, and then runs the same transmission process as for a PUSH type transmission.",{"@attributes":{"id":"p-0413","num":"0518"},"figref":"FIG. 26"},"<Preprocess>","(1) Handled Object Information Request (Reception-side\u2192Transmission-side)","The transmission-side node sends to the reception-side node a read request for the handled object information for PULL type transmission.","(2) Handled Object Information Response (Transmission-side\u2192Reception-side)","The transmission-side node receiving the request responds by sending the handled object information for PULL type transmission.","<File Information Collection Process>","(3) Transmission Status Request (Reception-side\u2192Transmission-side)","The reception-side node requests the transmission status from the transmission-side node. The transmission-side node responds by sending the transmission status.","(4) Transmission Status Response (Transmission-side\u2192Reception-side)","The transmission-side node sends a transmission status response to the reception-side node. If the transmission status is unprocessed or completed, the reception-side node sends a WRITE-PROHIBIT or START SENDING trigger.","(5) Write-Prohibit (Reception-side\u2192Transmission-side)","To prevent the transmission-side node from changing the transmission file information, the reception-side node requests setting the transmission status to WRITE-PROHIBIT. In response to the request the transmission-side node sets the transmission status to WRITE-PROHIBIT. This write-prohibit state is applied as needed. After the transmission status is set to write-prohibit, it must be set to START SENDING to start transmission or to COMPLETED.","(6) Transmission Status Write Response (Transmission-side\u2192Reception-side)","The transmission-side node responds to the write request.","(7) Transmission Target Information Write Request (Reception-side\u2192Transmission-side)","A transmission target information write request is asserted to collect file information as needed.","(8) Transmission Target Information Write Response (Transmission-side\u2192Reception-side)","The transmission-side node responds to the write request.","(9) Specific Transmission File Information Request (Reception-side\u2192Transmission-side)","The transmission file information is requested before the transmission process to get the transmission file information for the target file.","(10) Specific Transmission File Information Response (Transmission-side\u2192Reception-side)","The transmission-side node returns the specified transmission file information as requested.","<Transmission Process>","(11) Start Transmission Trigger (Reception-side\u2192Transmission-side)","The reception-side node sends a trigger to start transmission by asserting a write request to set the transmission status to PROCESSING. The transmission-side node runs the next process after receiving this trigger. Operation is the same as for PUSH type file transmission after the transmission file information is sent.","It should be noted that steps (5) to (11) could be omitted.","Specific examples of properties for achieving the data communication methods and procedures described in the fourth and fifth embodiments above are described below.",{"@attributes":{"id":"p-0441","num":"0546"},"figref":"FIG. 27"},"(1) Operation Status","Denotes the operating state of the file reception service function. Set to 0x31 if not operating, 0x30 if operating normally.","(2) Object Information for PUSH Type Reception","Defines the maximum byte size of files handled for PUSH type reception, the file-providing device object, and properties. The presence of this property indicates that PUSH type file reception is possible. This property is required to receives files in the PUSH mode. If multiple instances of this service object are run on the reception-side node, each instance is installed so that the values of this property are not duplicated.","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n","(3) Data Division Information","Defines the maximum divisional size of receivable data. The transmission-side node compares the reported property value with the divisional size the self-node can transmit, and divides and sends the file using the smallest detected divisional size.","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n",{"@attributes":{"id":"p-0452","num":"0565"},"figref":"FIG. 28"},"(1) Operation Status","Denotes the operating state of the file transmission service function. Set to 0x31 if not operating, 0x30 if operating normally.","(2) Object Information for PUSH Type Transmission","Defines the maximum byte size of files handled for PULL type file transmission, the file-providing device object, and properties. The presence of this property indicates that PULL type file transmission is possible. If multiple instances of this service object are run on the reception-side node, each instance is instantiated so that the values of this property are not duplicated. This property is required to send files in the PULL type.","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n",{"@attributes":{"id":"p-0459","num":"0578"},"figref":"FIG. 29"},"(3) Send\/Receive Settings","This property is for writing the transmission trigger and send\/receive results from the reception-side node. These property values are reflected in the transmission status property when they are written.","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n","(3) Transmission Status","This property denotes the transmission status of the current instance, i.e., whether the instance is sending. If this property is set to SENDING, the transmission target information, transmission file information, and transmission data cannot be changed.","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n","(4) Transmission Target Information","This property identifies the file that is actually sent from among the handled object information of the transmission objects. If the file-providing device object\/property count of the handled object information is 1 and the file count is also 1, this property need not be used to identify the file.","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n","(5) Transmission File Information","This property defines the file name and attributes, date, byte size, and other information about the transmission target. This property enables getting information for selecting the files for transmission\/reception for PULL type transmission\/reception.","<Parameter Description>\n\n","If the file has no date, each date byte is set to 0.\n\n","<Read, Write, Notification Timing>\n\n","(6) Transmission Data","<Parameter Description>\n\n","An exemplary sequence using the properties in , , and  for achieving the data communication methods and procedures described in the fourth and fifth embodiments above is described next.","Using the change-instance class report in the startup sequence of each node, the device startup process running on the transmission-side device gets the address (EA) of the reception-side node for PUSH type file transmissions, and for PULL type file transmissions the reception-side gets the address (EA) of the transmission-side node.",{"@attributes":{"id":"p-0481","num":"0641"},"figref":"FIG. 30"},"<Process when the Reception-side Node Starts First and the Transmission-side Node Starts Later>","(1) Change Instance Class Report (Transmission-side\u2192Reception-side)","A change instance class report is sent to the reception-side during the startup sequence. The reception-side node application receiving this report can get the address (EA) of the transmission-side node having a file transmission service object. (transmission-side node report service)","(2) Operation Status Report (Reception-side\u2192Transmission-side)","If the reception-side node can receive files in the PUSH type, it receives the change instance class report and returns the operation status of the file reception service object. The transmission-side node application receiving this report can get the address (EA) of the reception-side node having a file reception service object. (reception-side node report service)",{"@attributes":{"id":"p-0487","num":"0647"},"figref":"FIG. 31"},"(1) Change Instance Class Report (Reception-side\u2192Transmission-side)","A change instance class report is sent to the transmission-side node during the startup sequence. The application on the transmission-side node receiving this report can get the address (EA) of a device having a reception service object. (reception-side node report service)","(2) Operation Status Report (Transmission-side\u2192Reception-side)","If the transmission-side node can send files in the PULL type, it receives the change instance class report and returns the operation status of the file transmission service object. The reception-side node application receiving this report can get the address (EA) of the transmission-side node having a file transmission-side service object. (transmission-side node report service)","In an autonomous communication process (PUSH type data communication) the transmission-side node requests the object information handled by the reception-side node for PUSH type reception, communicates the transmission target information as needed, sends the transmission file information, and then transmits the file by sending the divided data from the transmission-side node.",{"@attributes":{"id":"p-0493","num":"0653"},"figref":"FIG. 32"},"<Preprocess>","(1) Handled Object Information Request (Transmission-side\u2192Reception-side)","The transmission-side node application sends to the reception service object of the reception-side node a read request for the object information handled for PUSH type reception. (handled object information request service) The file transfer service middleware of the transmission-side node could broadcast to all instances on the assumption that there are multiple reception service object instances on the reception-side node.","(2) Handled Object Information Response (Reception-side\u2192Transmission-side)","After receiving the request, the reception-side node returns the handled object information for PUSH type reception. It should be noted that steps (1) and (2) above could be omitted.","<Transmission Process>","(3) Transmission Target Information Report (Transmission-side\u2192Reception-side)","If there are multiple instances of handled object information for reception on the reception-side node, the transmission-side node application sends the transmission target information to identify the device object to which the data will be sent. This report is triggered by a request from the application to the file transfer service middleware. (file transmission request service)","(4) Send\/Receive Setting Write Request (Reception-side\u2192Transmission-side)","The reception-side node application receives the transmission target information report, and if it can receive the data to be sent issues a write request to set the send\/receive setting of the transmission service object to START SENDING. If the data to be sent cannot or will not be acquired, the write request sets the send\/receive setting to 0x01 (forced quit). (transmission setting write service)","(5) Transmission File Information Report (Transmission-side\u2192Reception-side)","After the file transfer service middleware of the transmission-side node receives the START SENDING write request from the send\/receive setting write request in step (4) above, it sends the size, checksum, and other transmission file information for the transmission file to the reception-side node. It also sets the transmission status property of the transmission service object used for file transmission to 0x20, denoting SENDING.","(6) Transmission File Information Report Response (Reception-side\u2192Transmission-side)","The reception-side node responds to the transmission-side node.","(7) Divided Data Transmission (Transmission-side\u2192Reception-side)","The transmission-side node divides the file and sends the divided data in a continuous stream to the reception-side node.","(8) Specific Divided Data Request (Reception-side\u2192Transmission-side)","If there is a divided data that was not correctly received either after the last divided data is received or when a timeout (=1 minute) occurs while waiting for a divided data, the reception-side node sends a transmission request specifying the array element number of the desired divided data.","(9) Specified Divided Data Transmission (Transmission-side\u2192Reception-side)","When the transmission-side node receives a request for a specific divided data from the reception-side node, it always sends the specified array element.","It should be noted that steps (8) and (9) above could be omitted.","(10) Transmission Completed Setting (Reception-side\u2192Transmission-side)","If the file was correctly received or if the transmission process is terminated for some reason, the file transfer service middleware of the reception-side node sets the send\/receive setting to 0x00denoting normal completion or to 0x01denoting a forced quit.","There are also cases in which the transmission completion setting is not set. The transmission-side node therefore inserts a timeout of one minute in the frame reception process waiting for a specified divided data request and transmission completion setting, and resets the transmission status property to 0x00denoting READY if the process times out.","It should be noted that the file transfer service middleware of the reception-side node assembles the multiple received divided data into a single file, and passes the assembled file with the file information obtained in the transmission file information report to the application. (file reception report service)","In a request\/response communication process (PULL type data communication) the reception-side node requests the object information handled by the transmission-side node for PUSH type transmission, gets the transmission file information as needed, and then sends a START SENDING trigger. When the transmission-side node receives this trigger it sends the transmission file information for the specified target object, and then transmits the file as described in the PUSH type transmission process above.",{"@attributes":{"id":"p-0520","num":"0680"},"figref":"FIG. 33"},"<Preprocess>","(1) Handled Object Information Request (Reception-side\u2192Transmission-side)","The reception-side node application sends a read request for the handled object information for PULL type transmission to the transmission-side node. (handled object information request service) The reception-side node file transfer service middleware could broadcast to all instances on the assumption that there are multiple transmission service object instances on the transmission-side node.","(2) Handled Object Information Response (Transmission-side\u2192reception-side)","The transmission-side node receiving the request responds by sending the handled object information for PULL type transmission.","<File Information Collection Process>","(3) Transmission Status Request (Reception-side\u2192Transmission-side)","The file transfer middleware of the reception-side node requests the transmission status from the transmission service object of the transmission-side node obtained by the handled object information request (1).","(4) Transmission Status Response (Transmission-side\u2192Reception-side)","The transmission-side node sends a transmission status response to the reception-side node. If the transmission status is READY, the reception-side node sends a WRITE-PROHIBIT or START SENDING trigger.","(5) Write-Prohibit (Reception-side\u2192Transmission-side)","To protect against a reception request from another node, a write request is asserted to write 0x02 denoting WRITE-PROHIBIT to the send\/receive setting. In response to the write request, the transmission-side node sets the transmission status property to 0x02, WRITE-PROHIBIT. This write-prohibit is applied as needed.","After the send\/receive setting property is set to 0x02, WRITE-PROHIBIT, the property must be set to 0x20 denoting START SENDING to start transmission or to COMPLETED.","After the write-prohibit request a 1-minute timeout is applied to all write requests from the reception-side node, and the transmission status is set to 0x00 denoting READY.","(6) Send\/Receive Setting Write Response (Transmission-side\u2192Reception-side)","The transmission-side node responds to the write request.","(7) Transmission Target Information Write Request (Reception-side Transmission-side)","A transmission target information write request is sent as needed.","(8) Transmission Target Information Write Response (Transmission-side\u2192reception-side)","A response to the write request is sent.","Note that the above steps (3) to (8) can be omitted.","(9) START SENDING Trigger (Reception-side\u2192Transmission-side)","The file transfer service middleware of the reception-side node sends a START SENDING trigger to the transmission-side node by means of a write request to set the send\/receive setting to 0x20, START SENDING. After receiving this trigger, the file transfer service middleware of the transmission-side node sets the transmission status property to 0x20, SENDING.","The steps following the transmission file information report are the same as the steps following the transmission file information report in the autonomous communication process.","The services related to the PUSH type file transmission shown in  that are services of the transmission-side node are described below.","(1) Reception-side Node Report Service","This service reports the Echonet address of the reception-side node that is the destination device for PUSH type file transmission to the application. There is no input data and the response data is the Echonet address of the reception-side node.","(2) Handled Object Information Request Service","This service gets the object information handled for PUSH type reception by the reception-side node. The input data is the Echonet address of the reception-side node; response data is the object information handled for PUSH type reception.","(3) File Transmission Request Service","This service sets data in the file transmission object of the self-node and sends files in the PUSH type. Input data includes the name of the transmitted file, file attributes, file date, and a pointer to the transmission file, i.e., the transmission data. Response data is the transmission result denoting that transmission was completed or transmission failed.","Services related to PULL type transmission shown in  that are services of the transmission-side node are described below.","(1) Write-Prohibit Report Service","When WRITE-PROHIBIT is written from the reception-side node to the send\/receive setting of the transmission-side node, this service reports the action to the application. There is no input data or response data.","(2) Transmission Target Information Report Service","When the transmission target information of the transmission-side node is written from the reception-side node, this service reports the written transmission target information to the application. There is no input data and the response data is the transmission target information.","(3) File Update Request Service","This service updates data in the file transmission object of the self-node. Updating is not possible if the transmission status of the file transmission object is set to WRITE-PROHIBIT or SENDING. Input data is the transmission target information, name of the transmitted file, file attributes, file date, and a pointer to the transmitted file, i.e., the transmission data. The response data is the transmission result, either update completed or update failed.","The services related to PUSH type file reception shown in  that are services of the reception-side node are described below.","(1) Transmission Target Information Report Service","When a transmission target information report is received from the transmission-side node sending files in the PUSH type, this service passes the received information to the application. There is no input data. The response data is the Echonet address of the transmission-side node and the transmission target information.","(2) Send\/Receive Setting Write Request Service","When the transmission target information obtained by the transmission target information report service can be received, this service sends a START SENDING write request to the send\/receive setting property of the file transmission service object of the transmission-side node. There is no input data or response data.","(3) File Reception Report Service","When receiving a file sent in the PUSH type from the transmission-side node is completed, this service reports the received file information to the application. There is no input data. The response data is the name of the transmitted file, file attributes, file date, and a pointer to the transmitted file, i.e., the transmission data.","Services related to PULL type file reception shown in  that are services of the reception-side node are described below.","(1) Transmission-side Node Report Service","This services reports to the application the Echonet address of the transmission-side node that is the source for transmitting files in the PUSH type. There is no input data. The response data is the Echonet address of the transmission-side node.","(2) Handled Object Information Request Service","This service requests the object information handled for PULL type transmission from the file transmission object of the transmission-side node. The input data is the Echonet address on the transmission-side; response data is the object information handled for PULL type transmission.","(3) File Reception Request Service","This service requests the file transmission service object of the transmission-side node to send the specified file-provider object, properties, and file of the specified file number. The file transfer service middleware controls the sequence including confirming the transmission status of the transmission-side node, sending the START SENDING trigger, receiving the file, and writing the reception completion setting, and when file reception is completed this service returns RECEPTION COMPLETED. The input data is the Echonet address of the transmission source, transmission target information, and the write-prohibit setting, i.e., a flag declaring whether the send\/receive setting of the transmission file service object is set to WRITE-PROHIBIT at the beginning of the reception process. The response data is the reception result indicating reception completed or reception failed.","Specific examples of properties for achieving a data communication method and procedure for transferring files between two terminals configured as shown in  are shown in , , and .",{"@attributes":{"id":"p-0574","num":"0734"},"figref":"FIG. 34"},"(1) Operation Status","Sets the operation of the file reception service function on or off, and gets the operation status. If operation is on (service provided), set to 0x30; if operation is off (service stopped), set to 0x31. If operation is off, access to other properties is not assured.",{"@attributes":{"id":"p-0577","num":"0737"},"figref":"FIG. 45"},"(2) Object Information Handled for PUSH Type Reception","This property denotes the information needed for PUSH type reception, including the maximum file byte size, file-providing device object, and properties. This property is required for PUSH type file reception. The values of the file storage device information in this property must not be duplicated in each instance.","<Parameter Description>\n\n","(3) Data Division Information","This property denotes the maximum division data size that can be received. The transmission-side node compares the reported value of this property with the divisional size that it can transmit, then selects the smaller divisional size to divide and send the file.","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n",{"@attributes":{"id":"p-0585","num":"0752"},"figref":"FIG. 35"},"(1) Operation Status","Sets the operation of the file transmission service function on or off, and gets the operation status. If operation is on (service provided), set to 0x30; if operation is off (service stopped), set to 0x31. If operation is off, access to other properties is not assured.",{"@attributes":{"id":"p-0588","num":"0755"},"figref":"FIG. 46"},"(2) Object Information Handled for PULL Type Transmission","This property denotes the information needed for PULL type file transmission, including the maximum file byte size, file-providing device object, and properties. The values of the file-providing device information in this property must not be duplicated in each instance.","This property is required for PULL type file transmission.","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n",{"@attributes":{"id":"p-0594","num":"0767"},"figref":"FIG. 36"},"(3) Send\/Receive Setting","This property writes the transmission trigger and send\/receive result from the reception-side node. This property is also reflected in the transmission status property when it is written.","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n","(4) Transmission Status","This property denotes the transmission status of the current instance, i.e., whether the transmission process is running. If this property is set to SENDING, the transmission file information property and the transmission data property cannot be changed.","<Parameter Description>\n\n","<Read, Write, Notification Timing>","The value written to the send\/receive setting property is reflected in this property.\n\n",{"@attributes":{"id":"p-0604","num":"0786"},"figref":"FIG. 47"},"(5) Transmission Target Information","This property identifies the file-providing device information that is the object of the transmission process. In the PUSH type the transmission-side node indicates intent to send a file of the file-providing device denoted by this property by sending this property value to the reception-side node.","In the PULL type, the reception-side node writes to this property on the transmission-side node to ask the transmission-side node to reserve a file of the file-providing device. The transmission-side node receiving this request sends the property value to the reception-side node regardless of whether the file reservation succeeds or fails.","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n","When this write request message is received the transmission target information is returned to he file reception service object of the reception-side node. However, if writing is not successful, the transmission target information is returned with a file number of 0xFFFF.",{"@attributes":{"id":"p-0611","num":"0797"},"figref":"FIG. 48"},"(6) Transmission File Information","This property declares the name, attributes, date, byte size, and other information about the file to be transmitted. This property enables the file to be sent\/received to be selected in PULL type transmission\/reception.","<Parameter Description>\n\n","If the file has no date, each date byte is set to 0. The date is invalid if Y1=0x00.\n\n","<Read, Write, Notification Timing>\n\n",{"@attributes":{"id":"p-0617","num":"0818"},"figref":"FIG. 49"},"(7) Transmission Data","This property is an array of the divided data in data division size generated from the transmitted file. The array elements must be transferred in a continuous stream.","<Parameter Description>\n\n","<Read, Write, Notification Timing>\n\n","A sequence using the properties shown in , , and  for achieving a data communication method and procedure for transferring files between two terminals configured as shown in  is described next. In this embodiment, the PUSH type is used as the method for sending a file by autonomous communication, the PULL type is used as the method for sending a file by request\/response communication, and the respective file transfers are referred to PUSH type file transfer and PULL type file transfer.","Using the change-instance class report in the startup sequence of each node, the device startup process running on the transmission-side device gets the address (EA) of the reception-side node for PUSH type file transfers, and for PULL type file transfers the reception-side gets the address (EA) of the transmission-side node.",{"@attributes":{"id":"p-0624","num":"0831"},"figref":"FIG. 37"},"<Process when the Reception-side Node Starts First and the Transmission-side Node Starts Later>","(1) Change Instance Class Report (Transmission-side\u2192Reception-side)","[Transmission Node Process]","Sends a change instance class report to the reception-side node according to the startup sequence.","[Reception Node Process]","When the file transfer service middleware of the reception-side node receives this message from the transmission-side node, it passes the address (EA) of the transmission-side node having a file transfer service object to the application. (transmission-side node report service) The reception-side node application manages the addresses (EA) of the transmission-side nodes.","(2) Operation Status Report (Reception-side\u2192Transmission-side)","[Reception Node Process]","When the change instance class report (1) is received, the file transfer service middleware of the reception-side node must report the operation status of all file reception service objects that can receive files in the PUSH type to the transmission-side node. This report is required.","[Transmission Node Process]","When the file transfer service middleware of the transmission-side node receives this report message, it passes the address (EA) of the reception-side node having the file reception service object to the application (reception-side node report service). The transmission-side node application manages the addresses (EA) of the reception-side nodes.",{"@attributes":{"id":"p-0636","num":"0843"},"figref":"FIG. 38"},"<Process when the Transmission-side Node Starts First and the Reception-side Node Starts Later>","(1) Change Instance Class Report (Reception-side\u2192Transmission-side)","[Reception Node Process]","Sends a change instance class report to the transmission-side node according to the startup sequence.","[Transmission Node Process]","When the file transfer service middleware of the transmission-side node receives this message from the reception-side node, it passes the address (EA) of the reception-side node having a file reception service object to the application. (reception-side node report service) The transmission-side node application manages the addresses (EA) of the reception-side nodes.","(2) Operation Status Report (Transmission-side\u2192Reception-side)","[Transmission Node Process]","When the change instance class report (1) is received, the file transfer service middleware of the transmission-side node must report the operation status of all file transmission service objects that can send files in the PULL type to the reception-side node. This report is required.","[Reception Node Process]","When the file transfer service middleware of the reception-side node receives this report message, it passes the address (EA) of the transmission-side node having the file transmission service object to the application (transmission-side node report service). The reception-side node application manages the addresses (EA) of the transmission-side nodes.","For file transfers by autonomous communication from the transmission-side node, the handled object information for PUSH type reception property of the reception-side node is requested and the transmission target information property is passed as needed. Then after sending the transmission file information property, the target data is divided and sent to transfer the file.",{"@attributes":{"id":"p-0649","num":"0856"},"figref":["FIG. 39","FIG. 41","FIG. 42"]},"<Preprocess>","(1) Handled Object Information Request (Transmission-side\u2192Reception-side)","[Transmission Node Process]","The transmission-side node application sends a read request to the reception service object of the reception-side node to get the handled object information for PUSH type reception property. (handled object information request service) The file transfer service middleware of the transmission-side node can broadcast to the all instances on the assumption that there are multiple reception service objects on the reception-side nodes.","(2) Handled Object Information Response (Reception-side\u2192Transmission-side)","[Reception Node Process]","The reception-side node receives the handled object information request (1) and all reception service objects of the reception-side nodes return the handled object information for PUSH type reception property.","[Transmission Node Process]","The file transfer service middleware of the transmission-side node receives the response message, stores the SEOJ in the message as the file transfer service object of the reception-side node linked to the handled object information, and returns a response to the handled object information request service to the application.","<Transmission Process>","(3) Transmission Target Information Report (Transmission-side\u2192Reception-side)","[Transmission Node Process]","The transmission-side node application sets the transmission target information to the file transfer service middleware (get file report service). The file transfer service middleware of the transmission-side node then sends the transmission target information report to the reception-side node. (This is required.) The file transfer service middleware determines the SEOJ and DEOJ of the message at this time as follows.","SEOJ freely selects the file transfer service object as a communication port. Of the file transfer service objects for the reception-side nodes obtained in step (2), DEOJ selects an object that can handle file-providing device information received by the get-file report service.","[Reception Node Process]","The file transfer service middleware of the reception-side node stores the SEOJ in this message as the file transfer service object of the transmission-side node (transmission target information report service).","(4) START SENDING Trigger (Reception-side\u2192Transmission-side)","[Reception Node Process]","The reception-side node application receives the transmission target information report and sets the result of determining if file reception is possible to the file transfer service middleware (file reception setting service). When receiving a file the file transfer service middleware of the reception-side node sends a START SENDING trigger for setting the send\/receive setting property to 0x20 (denoting START SENDING) tot he file transfer service object at the source of the transmission target information report. If the file specified in the transmission target information cannot be acquired or is not acquired, the write request setting the send\/receive setting property to 0x01 (denoting FORCED TERMINATION) is sent (required).","[Transmission Node Process]","The file transfer service middleware of the transmission-side node passes the result of writing to the send\/receive setting property of the reception-side node to the application (file transmission setting report service). It should be noted that the file transfer service middleware of the transmission-side node writes the transmission status property according to the write data to the send\/receive setting property (required).","(5) Transmission File Information Report (Transmission-side\u2192Reception-side)","[Transmission Node Process]","The application on the transmission-side node gets the file transmission setting service and sets the transmission file and transmission file information to the file transfer service middleware (file transmission request service) The file transfer service middleware receiving this sends the transmission file information to the file reception service object of the reception-side node (required).","(6) Transmission File Information Report Response (Reception-side\u2192Transmission-side)","[Reception Node Process]","The reception-side node returns a report response to the transmission-side node.","(7) Divided Data Transmission (Transmission-side\u2192Reception-side)","[Transmission Node Process]","The transmission-side node file transfer service middleware receiving the transmission file information report response (6), divides the transmission file based on the defined data divisional size, specifies the address (EA) of the reception-side node and the file reception service object, and then consecutively sends the divided data in low to high array element number order (required).","(8) Specified Divided Data Request (Reception-side\u2192Transmission-side)","[Reception Node Process]","If there is a divided data that was not correctly received, the file transfer service middleware of the reception-side node sends a transmission request specifying the array element number of the missing divided data to the transmission-side node.","(9) Specified Divided Data Transmission (Transmission-side\u2192Reception-side)","[Transmission Node Process]","The transmission-side node middleware sends the divided data for the specific array element when the specified divided data request (8) is received from the reception-side node.","(10) Transmission Completion Setting (Reception-side\u2192Transmission-side)","[Reception Node Process]","The file transfer service middleware of the reception-side node sets the send\/receive setting property of the file transfer service object in the transmission-side node to 0x00 (normal completion) if the file was correctly received, and to 0x01(forced termination) if the transmission process was interrupted for any reason (required).","It should be noted that the reception-side node file transfer service middleware assembles a single file from the multiple divided data received in the divided data transmission step (7), and sends the assembled file together with the file information acquired from the transmission file information report (5) to the application (file reception setting service response).","The file transfer service middleware of the transmission-side node passes the transmission completion setting (10) (normal completion or forced termination) to the application when it is received from the reception-side node. If file reception failed, the application is so informed. (file transmission service response)","[Transmission Node Process]","When the transmission-side node receives the transmission completion setting from the reception-side node, it sets the transmission status property to 0x00 (READY).","Because there are also cases in which the transmission completion setting is not set, the transmission-side node inserts a timeout of one minute in the frame reception process waiting for a specific divided data request and transmission completion setting, and resets the transmission status property to 0x00 denoting READY if the process times out. It should be noted that the transmission-side node accepts resend requests from the reception-side node during this one-minute timeout period (required).","Furthermore, the file transfer service middleware of the transmission-side node passes the transmission completion setting (10) (normal completion or forced termination) to the application when it is received from the reception-side node. (file transmission service response)","If a file transmission request from the reception-side node is received in the request\/response communication (PULL type data communication) process, the handled object information for PUSH type transmission property is requested from the transmission-side node and the transmission file information is confirmed. The transmission file information is then obtained if needed, and a START SENDING trigger is sent to the reception-side node. When this trigger is received the transmission-side node returns the transmission file information for the specified target object, and then proceeds with the same transmission processed used for PUSH type communication.",{"@attributes":{"id":"p-0696","num":"0903"},"figref":["FIG. 40","FIGS. 43 and 44"]},"<Preprocess>","(1) Handled Object Information Request (Reception-side\u2192Transmission-side)","[Reception Node Process]","The reception-side node application sends a read request for the handled object information for PULL type transmission to the transmission-side node. (handled object information request service) The reception-side node file transfer service middleware could broadcast to all instances on the assumption that there are multiple transmission service object instances on the transmission-side node.","(2) Handled Object Information Response (Transmission-side\u2192Reception-side)","[Transmission Node Process]","Receiving the handled object information request (1), transmission service objects of the transmission-side nodes return the handled object information for PULL type transmission property.","[Reception Node Process]","The file transfer service middleware of the reception-side node receives the response message, stores the SEOJ in the message as the file transfer service object of the transmission-side node linked to the handled object information, and returns a response to the handled object information request service to the application.","<Transmission Process>","The reception-side node application transfer the file through the following sequence by sending a file reception request to the file transfer service middleware.","(3) Transmission Target Information Write Request (Reception-side\u2192Transmission-side)","[Reception Node Process]","To reserve a file from the file-providing device of the transmission-side node, the reception-side node application sets the address (EA) of the reception-side node for the reserved file and the transmission target information to the file transfer service middleware (file reservation service). The file transfer service middleware receiving this request sends a transmission target information property write request to the file transfer service object of the transmission-side node (required).","The file transfer service middleware then determines the SEOJ and DEOJ values of the write request message as follows.","SEOJ freely selects the file transfer service object as a reception port. Of the file transfer service objects for the transmission-side nodes obtained in step (2), DEOJ selects an object that can handle the file-providing device information received by the file reservation service.","[Transmission Node Process]","When the file transfer service middleware of the transmission-side node receives the transmission target information write request message, it stores the SEA, SEOJ, and DEOJ values in the message as the address (EA) of the reception-side node, file reception service object, and its own file transfer service object.","Furthermore, it issues and sends a file reservation number with the transmission target information to the application (transmission target information report service). The reservation number is uniquely assigned for the SEA, SEOJ, DEOJ combination. The transmission-side node application gets the transmission target information report service, reserves the file specified by the device object and properties specified in the transmission target information, and manages the file in conjunction with the reservation number received in the transmission target information report service. If consecutive transmission target information report service having the same reservation number are received, only the last received service is valid. The reserved file is destroyed after a timeout passes. The timeout is application-dependent.","(4) Transmission Target Information Report (Transmission-side\u2192Reception-side)","[Transmission Node Process]","The file transfer service middleware of the transmission-side node checks if the transmission target information written by the transmission target information write request (3) is contained in the file-providing device information of the handled object information for PULL type transmission property of the file transfer service object. If it is (the transmission target information is appropriate), the transmission target information is returned; if it is not (the transmission target information is not appropriate), or of it is (the transmission target information is appropriate) but the file cannot be reserved, transmission target information with the file number set to 0xFFFF is returned (required).","[Reception Node Process]","The file transfer service middleware of the reception-side node gets this report and then returns a response to the application (file reservation service response).","(5) Transmission Status Request (Reception-side\u2192Transmission-side)","[Reception Node Process]","If the reception-side node application knows from the file reservation service response that the transmission-side node was able to reserve the file, it tells the file transfer service middleware that a file will be received (file reception setting service).","The file transfer service middleware of the reception-side node then requests the transmission status property from the file transfer service object of the transmission-side node acquired by the handled object information request (1).","(6) Transmission Status Response (Transmission-side\u2192Reception-side)","[Transmission Node Process]","A response to the read request is sent.","(7) START SENDING Trigger (Reception-side\u2192Transmission-side)","[Reception Node Process]","When the file reception service or a transmission status response of READY is received, the file transfer service middleware sends to the file transfer service object of the transmission-side node a START SENDING trigger writing 0x20 (START SENDING) to the send\/receive setting property (required).","[Transmission Node Process]","The file transfer service middleware of the transmission-side node gets the START SENDING trigger from the reception-side node and changes the transmission status property to 0x20 (SENDING) (required). It also finds the file reservation number from the SEA, SEOJ, DEOJ in the START SENDING trigger message, and passes the reservation number to the application (file transfer setting report service).","The sequence after the transmission file information report is the same as the steps after the transmission file information report in request\/response communication.","Services related to PUSH type file transmission that are services of the transmission-side node shown in  are described below.","(1) Reception-side Node Report Service","This service reports the Echonet address of the reception-side node that is the destination device for PUSH type file transmission to the application.","The input data is the Echonet address of the reception-side node and there is no response data.","(2) Handled Object Information Request Service","This service gets the object information handled for PUSH type reception by the reception-side node. The input data is the Echonet address of the reception-side node; response data is the object information handled for PUSH type reception.","(3) Get File Report Service","The reception-side node is requested to report the transmission target information property. Input data is the transmission target information; there is no response data.","(4) File Transmission Setting Report Service","The application is notified that there was a send\/receive setting write request from the reception-side node. Input data is the send\/receive setting information indicating the start of transmission or force termination; there is no response data.","(5) File Transmission Request Service","Data is set to the file transfer service object of the self-node and the file transfer process is run. The input data is the name of the transmitted file, attributes, date, file byte size, and pointer to the transmitted file. Response data is the transmission result (transmission completed or transmission failed).","The services related to PUSH type file reception shown in  that are services of the reception-side node are described below.","(1) Transmission Target Information Report Service","When the transmission target information property is reported from the transmission-side node running PUSH type file transmission, the received data is passed to the application. The input data is the Echonet address of the transmission-side node and the transmission target information; there is no response data.","(2) File Reception Setting Service","When the transmission target information gotten by the transmission target information report service can be received, a START SENDING trigger write request is sent to the send\/receive setting property of the transmission-side node file transfer service object, and the file is received. The input data is the send\/receive setting, transmission source Echonet address, file-providing device information, and file number. The response data is the reception result, filename, attributes, date, file byte size, and pointer to the received file.","The services related to the PULL type file transmission shown in  that are services of the transmission-side node are described below.","(1) Transmission Target Information Report Service (File Reservation)","If the transmission target information property of the transmission-side node is written from the reception-side node, the written transmission target information property values are passed to the application. The input data is the reservation number of the registered transmission target information and the transmission target information; there is no response data.","(2) File Transmission Setting Report Service","This service tells the application when a START SENDING trigger is received from the reception-side node. Input data is the reservation number and send\/receive setting (indicating START SENDING or forced termination); there is no response data.","(3) File Transmission Request Service","This service sets the data to the file transfer object of the self-node and then sends the file. Input data is the reservation number, name of the transmitted file, attributes, date, file byte size, and pointer to the transmission file. Response data is the transmission result denoting transmission completion or failure.","The services shown in  relating to the PULL type file reception that are services of the reception-side node are described next.","(1) Transmission-side Node Report Service","This service sends the Echonet address of the transmission-side node that is the transmission source for the sending files in the PUSH type to the application. Input data is the Echonet address of the transmission-side node; there is no response data.","(2) Handled Object Information Request Service","Requests the handled object information for PULL type transmission property from the file transmission object of the transmission-side node. Input data is the Echonet address of the transmission-side node, and the response data is the handled object information for PULL type transmission.","(3) File Reservation Service","Reserves the specified file-providing device object, properties, and file of the specified file number with the file transfer service object of the transmission-side node for transmission. The file transfer service middleware writes the specified information to the transmission-side node by means of a transmission target information write request, and gets the transmission target information report from the transmission-side node. Input data is the Echonet address of the transmission-side node and transmission target information. Response data is the reservation result, i.e., whether the reservation is confirmed or reservation failed.","(4) File Reception Setting Service","Requests the file transfer service object of the transmission-side node to send the file reserved by the file reservation service. The file transfer service middleware controls the sequence of confirming the transmission status of the transmission-side node, sending the START SENDING trigger, receiving the file, and setting the reception completion result, and returns RECEPTION COMPLETED when file reception is completed. Input data is the send\/receive setting denoting if reception is permitted or reception is not possible, the Echonet address of the transmission source, and the transmission target information. The response data is the reception result (reception completed or reception failed), the name of the received file, attributes, date, file byte size, and pointer to the received file.","It should be noted that if the communication device is a controller, for example, that communicates with multiple terminal devices, the communication device could store multiple data communication function tables so that communication parameters common to the one communication device and multiple terminal devices can be stored once and later used for subsequent data communication.","Furthermore, it will be obvious that a recording medium storing a program implementing the data communication method of the invention should be any kind of computer-readable medium, including ROM, RAM, floppy disk, CD-ROM, DVD, memory card, or hard disk.","Further, communication medium of the invention also extends to such communication media as telephone lines and other carriers.","Although the present invention has been described in connection with the preferred embodiments thereof with reference to the accompanying drawings, it is to be noted that various changes and modifications will be apparent to those skilled in the art. Such changes and modifications are to be understood as included within the scope of the present invention as defined by the appended claims, unless they depart therefrom."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["This and other objects and features of the present invention will become clear from the subsequent description of a preferred embodiment thereof made with reference to the accompanying drawings in which like parts are designated by like reference numerals and in which.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 9","FIG. 10"]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIGS. 20 to 22"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIGS. 23 and 24"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 28","FIG. 29"]},{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 30","FIG. 31"]},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 33"},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 34"},{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 35","FIG. 36"]},{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 37","FIG. 38"]},{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 39"},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 40"},{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 41","FIG. 42"]},{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 43","FIG. 44"]},{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 45"},{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 46"},{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 47"},{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 48"},{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 49"},{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 50","b":"100"}]},"DETDESC":[{},{}]}
