---
title: Early analysis of software design diagrams
abstract: Methods, apparatus, and computer-readable media for analyzing the prospective quality of source code produced according to a class representation (e.g., a UML class diagram) are disclosed. According to one embodiment, a class-level representation of a software application is received, one or more object classes of the class-level representation are selected, and a number of quality metrics are calculated for the selected object classes. The quality metrics can be output as a report or used to modify object classes of the class representation to improve the prospective quality of source code produced according to the class representation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09207935&OS=09207935&RS=09207935
owner: Infosys Limited
number: 09207935
owner_city: Bangalore
owner_country: IN
publication_date: 20110524
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of and priority to prior Indian patent application number 1198CHE\/2011, entitled \u201cEARLY ANALYSIS OF SOFTWARE DESIGN DIAGRAMS,\u201d filed on Apr. 7, 2011, the entire disclosure of which is hereby incorporated herein by reference.","Software system design issues are typically identified in the later stages of the Software Development Life Cycle (SDLC) and can cause extensive delays and increased costs for software development projects. Prior design tools are unable to measure design quality in quantitative form and do not allow software development teams to rectify design issues earlier in the lifecycle. Tools for increasing software design quality early in the software development lifecycle can help prevent downstream development issues, save development cost, and\/or ensure proper development lifecycle time.","Design diagrams for software applications can be used in the early software design phase to create object models for software systems. Examples of design diagrams include Unified Modeling Language (\u201cUML\u201d) structure diagrams (such as class diagrams, component diagrams, and object diagrams), which describe the structure of objects, components, and\/or classes in a system being modeled, and UML behavior diagrams (such as activity diagrams, use case diagrams, and sequence diagrams), which describe the dynamic behavior of objects, components, and\/or classes.","The disclosed technology comprises exemplary tools for analyzing design quality that take software design diagrams (e.g., UML class diagrams) for software applications as inputs and generate metrics representative of the prospective quality of the resulting software system. This design quality analysis can be performed without generating either source code or pseudo code representations for the software applications. The tools and methodologies can become a part of existing design and modeling tools, thus providing design quality analysis as an additional feature of the existing design and modeling tools. Thus, exemplary techniques for supplementing traditional code-based analysis with design analysis are disclosed herein.","In some examples of the disclosed technology, a method of automatically reporting quality metrics for a class-level representation of a software application includes receiving the class-level representation of the software application, the class-level representation defining a graph including one or more object classes, selecting one or more of the object classes and calculating one or more software application quality metrics for the selected object classes indicative of prospective quality of source code produced in accordance with the class-level representation, and outputting a report including data based on the quality metrics.","In some examples, the metrics are based on properties associated with a respective class, and can be based on data that includes at least one or more of the following: a number of operations associated with the respective class, a number of attributes associated with the respective class, a number of constructors associated with the respective class, a number of overridden methods associated with the respective class, or a number of added methods associated with the respective class.","In some examples, the metrics are based on relationships between a respective class and at least one other of the object classes of the class representation, and can be based on data that includes at least one or more of the following: a depth of inheritance of the respective class, a measure of coupling between the object and the other object class, a number of responses per class for the respective class, or the number of remote methods associated with the respective class. Some examples include both one or more metrics based on properties and one or more metrics based on relationships.","In some examples, the metrics include a metric based on a count of the number of reference types that are used in attribute declarations, formal parameters, return types, throw declarations and local variables, and types from which attribute and method selections are made.","In some examples, the calculation of the quality metrics does not use source code based on the class-level representation or source code based on the objects. In some examples, the quality metrics are weighted based on whether a method is located at a remote class.","In some examples of the disclosed technology, a method of applying one or more quality metrics to one or more UML diagrams for a software application comprises receiving the UML diagrams including one or more object classes, calculating one or more software application quality metrics for a selected one or more of the object classes indicative of prospective quality of source code produced in accordance with the class-level representation, and modifying at least one of the object classes of the UML diagrams based on at least one of the quality metrics to produce one or more updated object classes.","In some examples, a method includes modifying at least one of the object classes by adding two or more subclasses for at least one of the object classes based on, for example, a NOOM metric. In some examples, the modifying at least one of the object classes includes removing an overridden method of the at least one object class and extending the functionality of a parent class of the at least one object class to provide the functionality of the overridden method, based on, for example, a NOOM metric.","In some examples, a method includes selecting the selected object classes using a graphical user interface (\u201cGUI\u201d) tool and coding source code, the source code based at least in part on the updated object classes. In some examples, the method further includes producing computer-readable instructions based on the source code coded using the method.","In some examples, a method includes calculating or modifying object classes performed at least in part using computer-readable instructions executable by an application for editing UML diagrams of software applications using a GUI tool, where at least a portion of the computer-readable instructions are loaded by the application as a plug-in.","In some examples of the disclosed technology, computer-readable storage media store computer-readable instructions that when executed by a computer, cause the computer to perform any of the methods disclosed herein.","In some examples of the disclosed technology, a computing system includes one or more processors, one or more input devices, one or more output devices, and one or more computer-readable storage media storing computer-executable instructions, the computer-executable instructions comprising instructions for loading a class-level representation of a software application, the class-level representation defining one or more object classes and instructions for selecting one or more of the object classes, and calculating one or more software application quality metrics for the selected object classes indicative of prospective quality of source code produced in accordance with the class-level representation.","In some examples, the computer-executable instructions include instructions for providing a plug-in interface allowing an application for editing class-level representations of software applications to access functionality provided by the computer-executable instructions without recompilation of the application.","The foregoing and other objects, features, and advantages of the disclosed technology will become more apparent from the following detailed description, which proceeds with reference to the accompanying figures.","This disclosure is set forth in the context of representative embodiments that are not intended to be limiting in any way.","As used in this application and in the claims, the singular forms \u201ca,\u201d \u201can,\u201d and \u201cthe\u201d include the plural forms unless the context clearly dictates otherwise. Additionally, the term \u201cincludes\u201d means \u201ccomprises.\u201d","The described apparatus and methods described herein should not be construed as being limiting in any way. Instead, this disclosure is directed toward all novel and non-obvious features and aspects of the various disclosed embodiments, alone and in various combinations and sub-combinations with one another. The disclosed systems, methods, and apparatus are not limited to any specific aspect or feature or combinations thereof, nor do the disclosed things and methods require that any one or more specific advantages be present or problems be solved. Furthermore, any features or aspects of the disclosed embodiments can be used in various combinations and sub-combinations with one another. Furthermore, as used herein, the term \u201cand\/or\u201d means any one item or combination of items in the phrase.","Although the operations of some of the disclosed methods are described in a particular, sequential order for convenient presentation, it should be understood that this manner of description encompasses rearrangement, unless a particular ordering is required by specific language set forth below. For example, operations described sequentially may in some cases be rearranged, omitted, or performed concurrently. Moreover, for the sake of simplicity, the attached figures may not show the various ways in which the disclosed apparatus and methods can be used in conjunction with other apparatus and methods. Additionally, the description sometimes uses terms like \u201cproduce,\u201d \u201cgenerate,\u201d \u201cselect,\u201d \u201creceive,\u201d \u201ccalculate,\u201d \u201coutput,\u201d \u201cmodify,\u201d \u201ccoding,\u201d \u201cremove,\u201d and \u201cprovide\u201d to describe the disclosed methods. These terms are high-level abstractions of the actual operations that are performed. The actual operations that correspond to these terms can vary depending on the particular implementation and are readily discernible by one of ordinary skill in the art.","Any of the disclosed methods can be implemented as computer-executable instructions stored on one or more computer-readable storage media (e.g., non-transitory computer-readable media, such as one or more volatile memory components (such as DRAM or SRAM), or nonvolatile memory components (such as hard drives) and executed on a computer (e.g., any commercially available computer or other computing hardware). Any of the computer-executable instructions for implementing the disclosed techniques as well as any data created and used during implementation of the disclosed embodiments can be stored on one or more computer-readable media (e.g., non-transitory computer-readable media). The computer-executable instructions can be part of, for example, a dedicated software application or a software application that is accessed or downloaded via a web browser or other software application (such as a remote computing application). Such software can be executed, for example, on a single local computer (e.g., any suitable commercially available computer) or in a network environment (e.g., via the Internet, a wide-area network, a local-area network, a client-server network (such as a cloud computing network), or other such network, using one or more network computers.","For clarity, only certain selected aspects of the software-based implementations are described. Other details that are well known in the art are omitted. For example, it should be understood that the disclosed technology is not limited to any specific computer language or program. For instance, the disclosed technology can be implemented by software written in C++, Java, Perl, JavaScript, HTML5, or any other suitable programming language. Likewise, the disclosed technology is not limited to any particular computer or type of hardware. Certain details of suitable computers and hardware are well known and need not be set forth in detail in this disclosure.","Furthermore, any of the software-based embodiments (comprising, for example, computer-executable instructions for causing a computer to perform any of the disclosed methods) can be uploaded, downloaded, or remotely accessed through a suitable communication means. Such suitable communication means include, for example, the Internet, the World Wide Web, an intranet, software applications, cable (including fiber optic cable), magnetic communications, electromagnetic communications (including RF, microwave, and infrared communications), electronic communications, or other such communication means.","Theories of operation, scientific principles or other theoretical descriptions presented herein in reference to the apparatus or methods of this disclosure have been provided for the purposes of better understanding and are not intended to be limiting in scope. The apparatus and methods in the appended claims are not limited to those apparatus and methods that function in the manner described by such theories of operation.","Exemplary embodiments disclosed herein include the capability to analyze and measure design quality in a quantitative form directly from software design models, without the need to generate intermediate source code or pseudo code.","Examples of the disclosed technology allow the analysis of design diagrams for software applications at an early stage in the software design lifecycle. Examples of suitable design diagrams for use with the disclosed embodiments include UML class diagrams, UML component diagrams, UML object diagrams, or other suitable design diagrams. In some examples, behavior diagrams describing dynamic behavior of objects, component, and\/or classes can be analyzed. Examples disclosed herein allow software developers to avoid or abbreviate manual design reviews, where, for example, a human reviewer analyzes individual classes of a class diagram individually for quality attributes and provides comments to a software designer.","Some examples disclosed herein allow generation of quality metrics for design diagrams without converting design diagrams to pseudo code or source code. One disadvantage of techniques based on converting design diagrams to pseudo code or source code is that the design quality analysis is actually a code quality measurement based on the skeletal code thereby generated, but is not an actual design quality measurement.","According to some example methods and systems disclosed herein, design quality metrics can be produced for design diagrams, without the need to wait for intermediate code to be generated for analysis. Thus, the design review process can be more effective and streamlined, particularly in larger projects with complex architectures. The methods and systems disclosed herein thus allow design-level issues to be addressed in the design phase itself, resulting in less rework in subsequent phases of the software development lifecycle. In addition, improved design robustness, as well as software designer and software developer productivity can be achieved through the reduction of rework effort during development.","In some examples, the methods and systems can be implemented using a \u201cplug-in\u201d software module for design and modeling tools. Examples of suitable design and modeling tools include IBM Rational Software Architect 7.x and IBM Rational Software Modeler 7.x, although as would be readily understood by one of ordinary skill in the art, other design and modeling tools can be used. Plug-ins for the Rational Software tools can be developed using, for example, IBM Rational Tools Extensibility APIs (Application Programming Interfaces).","In some examples, design measurements can be generated in a quantitative form for use with existing .NET or Java technologies. In some examples, reports of quality metrics can be generated in HTML, XML, CSV, Microsoft Excel, and\/or text formats.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 1","b":["100","105","110","120","125"]},"During coding phase , source code for implementing a software design described using design diagrams during the design phase can be generated. Typically, source code is generated by hand, using the design diagrams to provide interface information and class definitions. In some examples, source code interface stubs for object classes can be automatically generated. For example, stub listings (including object names, associated methods, and associated parameters) can be generated, and a software developer completes the objects by writing code to implement the object using the stub code listing as a template. In other examples, pseudo code is generated based on the design diagrams using, for example, an automated tool.","After at least a portion of the source code has been generated, it is analyzed during a source code analysis phase . During the source code analysis phase, analysis tools such as static source code analysis tools can be used to analyze source code quality without executing the source code. For example, a static source code analysis tool can read stub code or completed source code and generate metrics for the source code. Examples of a suitable source code analysis tool  for a Java and .NET-based software development environment include tools from Infosys, such as FxCop Quality Analyzer, PQM-Meter, and QA4J, and other tools such as PMD, N-Depend, VSTS-2008\/2010. Example techniques of static source code analysis include the use of formal tools or Lint-like tools.","During code coverage testing phase , structural analysis of the source code is performed using a suitable code coverage analysis tool , for example, JProbe from Quest software. During code coverage testing, techniques such as function coverage, statement coverage, decision coverage, and condition coverage are applied using a series of coverage tests that execute the source code. For example, function coverage determines which source code functions are called, statement coverage determines which source code statements are executed, decision coverage determines which requirements of source code control statement edges (e.g., if-then and case statements) have been met, and condition coverage determines which Boolean expressions have evaluated to both true and false.","During unit testing phase , unit tests (e.g., unit tests written by a software developer) are executed on individual components (for example, procedures or classes) of the software application being developed and compared to a unit test dictionary to determine whether the functions were properly executed. An example of a suitable unit testing tool  is JTest from Parasoft.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 2","FIG. 2"],"b":["200","210","220","230","240","250","210","212","214","220","230","210","220"]},"Because SavingAccount  and CheckingAccount  are subclasses, they will inherit parameters and methods from its parent class BankAccount , except in cases where a child class overrides a parent class parameter or method. For examples, both SavingAccount  and CheckingAccount  define their own withdrawal( ) methods, which will override the withdrawal( ) method defined by the BankAccount class .","The BankAcPermission class  is related to the CheckingAccount class  by a bidirectional association, as indicated by the solid line  joining the two classes. As shown (according to UML conventions), there is a one-to-one association between the checking account class  (an example checking account) and BankAcPermission class  (an example accessPermissionEntity).","Also shown is the RequestDate  object class, which includes an interface parameter currentDate  and method getCurrentDate( ) . As shown by a dashed arrow , the getCurrentDate( ) method of the RequestDate class  is accessed via a remote procedure call. Thus, design quality metrics based on an analysis of remote classes and methods can be determined.","By analyzing parameters, methods of classes, and the relationships between classes, a quality metric representing the prospective quality of a software application developed based on the class diagram  can be determined. Thus, the class diagram  can be considered a graph, with classes as nodes and relationships (e.g., procedure calls, inheritance relationships, and associations) as edges.","As used herein, the term \u201cclass diagram\u201d is not limited to a UML class diagram, such as depicted in . Further, the disclosed technology can be generally applied to any suitable form of software design diagram and is not limited to just class diagrams.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIGS. 3-6B","FIG. 2"],"b":["120","200"]},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 3","b":["300","305","310","312","314","310","312","320"]},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 4","b":["400","410","420","430","412","414","420","422","430","440"]},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 5A","b":["500","510","520","522","524","530","532","534","540","542","510"]},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 5B","b":["550","560","562","564","570","572","574","580"]},"Calculation of the design quality metrics reported in  will be discussed in further detail below.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 6A","b":["600","610","615","620","622","624","626","630","632","634","640","642"]},{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 6B","b":["650","660"]},{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIGS. 7-10","FIGS. 3-6B","FIGS. 7-10"],"b":"120"},{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 7","b":"700"},"At process block , a class-level representation is received (e.g., buffered into a computer-readable memory, loaded, or otherwise accessed and\/or prepared for further processing) defining one or more object classes. The class-level representation also includes information on object attributes, and on relationships between classes, such as inheritance and method calls to other objects. In some examples, the class-level representation is a UML class diagram.","At process block , one or more of the object classes are selected for quality metrics to be calculated. For example, a user of a design modeling program can select one or more object classes for quality metric calculation (e.g., by selecting via a suitable graphical user interface). In other examples, other selection techniques can be used, or the quality metrics can be calculated for all the object classes of the representation. In some embodiments, the quality metrics can be based solely on the class-level representation, and need not generate source code, pseudo code, or other code based on the class-level representation in order for the metrics to be generated. Thus, the quality metrics can be performed at a high level of abstraction and at an early phase of the software design process.","At process block , an output report is generated including data based on the quality metrics calculated at process block . In some examples, the data is reported in a file, such as a text, HTML, XML, or other suitable file. In some examples, the data is reported using a GUI of the software design environment being used.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 8","FIG. 7"],"b":"800"},"At process block , a class-level representation is received defining one or more object classes. While the examples disclosed herein are typically based on UML class diagrams, it should be readily understood that other suitable high-level representations can be used, for example, structural diagrams (such as UML object diagrams or UML component diagrams) or behavior diagrams (such as UML activity diagrams, use case diagrams, or sequence diagrams). Such high-level representations can include class definitions (including interface parameters and interface methods associated with a class) and relationships between objects (such as descriptions of class inheritance, procedure calls, remote procedure calls, or other suitable relationships). In some examples, the class-level representation can be received from a file stored in a storage medium, from a database, or from existing object data in a software design application program.","At process block , one or more of the object classes are selected for one or more quality metrics to be calculated, using similar selection techniques to those described above at process block .","At process block , for each selected object class, a number of quality metrics based on properties associated with a respective object class are calculated. These can include metrics such as NOO, NOA, NOCON, NOOM, and NOAM, and are described immediately below. The calculated quality metrics can be reported using any suitable data type, for example, as an integer, a fixed point number, a floating point number, a string, or a Boolean. In some examples, the quality metrics can be compared to a pre-selected threshold, (e.g., a user-defined or default threshold) and values that exceed (or do not meet) the threshold can be highlighted so that additional attention can be applied to address any design issues that could result.","A NOO (Number Of Operations) quality metric (or \u201cscore\u201d) can be calculated as a sum of the number of methods defined in a class representation of an object in a class diagram or object diagram representation. In some examples, a class with three external methods receives a NOO score of 3. Using this NOO definition, BankAccount class has a NOO score of 2, as shown in . In some examples, the NOO metric can be weighted based on the prospective complexity of the method. For example, external method calls can be weighted higher than local method calls, or vice versa. Other examples of method classifications that can be weighted differently include: method calls based on built-in or standard library functions, comparison methods, or objection constructors. In some examples, the NOO score includes a count for methods of children classes of a parent class, while in other examples, only methods defined in the class representation of a particular class are counted. Classes with a high NOO score can be flagged for consideration of whether the classes should be divided into a number of subclasses.","A NOA (Number of Attributes) quality metric can be calculated as the sum of the number of attributes (e.g., interface parameters associated with a class) in a class diagram or object diagram representation. In some examples, a class with three interface parameters receives an NOA score of 3. Using this NOA definition, the SavingAccount class  has an NOA score of 1, as shown in . In some examples, the NOA metric can be weighted based on the data type of interface parameters. For example, string and float data types can be weighted higher than int and Boolean data type interface parameters. In some examples, the NOA score includes attributes for children classes of a parent class, while in other examples, only methods defined in the class representation of a particular class are counted. In some examples, the NOA score includes the number of inherited attributes from parent classes, but not children classes.","A NOCON (Number of Constructor) quality metric can be calculated as the sum of the number of user-defined constructors for a class in a class diagram or object diagram representation. In some examples, a class with no user-defined constructors receives a NOCON score of zero, and a class with two user-defined constructors receives a NOCON score of 2. In some examples, the NOCON score can be weighted such that classes having a single user-defined constructor have the lowest NOCON score, while classes with zero or two or more have higher scores. Such a scoring reflects that source code based on a class with no user-defined constructor can have a high potential for coding errors, as automatically-defined constructors may not handle corner cases as well as a single user-defined constructor, which presumably initializes objects of the class correctly. As more constructors are defined for a class, however, the potential for coding errors increases. In some examples, the NOCON score includes attributes for parent classes of a particular class when the class inherits a constructor from its parent class. In some examples, the NOCON quality metric does not include default constructors, but is a count of only user-defined constructors.","A NOOM (Number of Overridden Methods) quality metric can be calculated as the sum of a number of inherited methods overridden for a class in a class diagram or object diagram representation. In some examples, a class with two overridden methods receives a score of 2. In some examples, the NOOM score can be weighted such that overridden built-in methods are weighted differently than overridden user-defined methods. For example, the withdrawal( )method of the CheckingAccount class  in the class diagram of  is an overridden method for the method withdrawal( ) defined by the BankAccount parent class , and the NOOM metric is increased by a first weighted amount based on its parent class method being overridden. Higher values for NOOM quality metrics generally indicate that subclasses should be added, and\/or that functionality of parent classes should be extended rather than overridden.","A NOAM (Number of Added Methods) quality metric can be calculated as a sum of the number of methods added to a class in a class diagram or object diagram representation. In some examples, a class with two added methods receives a score of 2. In some examples, the NOAM score excludes any overridden methods (for example, methods considered overridden for purposes of calculated the NOOM metric), while in other examples, all added methods are included in the score. For example, the SavingAccount class  has two added methods in the class diagram of .","In some examples, the quality metrics can include statistical metrics beyond simple sums of class properties and relationships. For example, overall statistics for the class diagram, such as mean, median, or standard deviation for one or more metrics can be applied in calculating individual quality metrics.","At process block , for each selected object class, a number of quality metrics based on relationships between a respective object class and other classes in a class-level representation are calculated. These can include metrics such as DOIH, CBO, RFC, and NORM, which are described immediately below. The calculated quality metrics can be reported using any suitable data type, for example, as an integer, a fixed point number, a floating point number, a string, or a Boolean. In some examples, the quality metrics can be compared to a pre-selected threshold (e.g., a user-defined or default threshold), and values that exceed (or do not exceed) the threshold can be highlighted so that additional attention can be applied to address any design issues that could result.","A DOIH (Depth of Inheritance) quality metric can be calculated as the length of the inheritance chain from the root of a given classes' inheritance tree to the given class. For example, a class having a child class, where the child class itself having its own child class, would have a DOIH score of 2. In some examples, the DOIH score can be weighted to reflect the number of children classes at a particular level, while in other examples, the DOIH score reflects only the maximum class depth. For example, the BankAccount class  has a DOIH score of 1, as it has two child classes CheckingAccount  and SavingAccount  at the same level of inheritance. Note that in this example, the association  between the CheckingAccount class  and BankAcPermission  class does not increase the DOIH score in this example.","A CBO (Coupling between Object) quality metric can be calculated based on a measure of the amount of coupling between a respective object class and other object classes in a class level representation. For example, the CBO metric can be calculated as the sum of the number of inheritance, association, and other suitable object class relationships for a respective object. In some examples, the CBO is a count of the number of reference types that are used in attribute declarations, formal parameters, return types, throw declarations and local variables, and types from which attribute and method selections are made. In some examples, two classes are said to be coupled when methods declared in one class uses methods or instance variables defined by the other class. For example, CheckingAccount class  has a CBO metric of 2, based on one inheritance relationship to its parent BankAccount class , and its association relationship to the BankAcPermission class .","A RFC (Response per Class) quality metric can be calculated based on the number of remote method calls to a respective object class in a class-level representation. The size of the response set for a given class includes methods in the class's inheritance hierarchy and methods that can be invoked on other objects. Classes that provide a larger response set are generally considered to be more complex and require more effort in testing than ones with smaller overall design complexity. In some examples, the RFC can be calculated as the sum of the NOO for a given class, including NOO for parent classes, and NORM metrics for public methods of the class.","For example, an object class that receives method calls from three other object classes and has five operations defined in a class-level representation can have an assigned RFC score of 8. In some examples, the RFC score can be weighted based on whether the remote method call is from an object located at a remote server. Using this approach, the RequestDate class  in  would have additional weight assigned the NORM portion of the RFC score for the calling BankACPermission class , because it is implemented as a remote object (as indicated by a dashed arrow ). In other examples, the RFC score is not weighted based on whether remote method calls are to a remote server.","A NORM (Number of Remote Methods) quality metric can be calculated based on the number of remote method calls from an object class in a class-level representation. In some examples, the NORM metric counts the number of remote methods to be called for all methods and constructors for a given class. As used herein, a remote method is defined as a method that is not declared in the class itself or in its ancestors. For example, an object class that is defined in a class-level representation to include 3 remote method calls can have an assigned NORM score of 3. In some examples, the NORM score can be weighted based on whether the remote method call is to an object located at a remote server. For example, the method call to the RequestDate class  from the BankAcPermission class  in  would be given a higher weight, because the method call is to a remote server, as indicated by a dashed arrow  in the class level representation.","At process block , a report of the quality metrics calculated at process blocks  and  is produced. For example, an HTML file or text file can be used to report the metrics, as shown in , respectively. In some examples, an XML file is used. In some examples, the quality metrics can be reported to a design and modeling tool, so that the metrics can be reported using a window of a graphical user interface of a design and modeling tool (for example, as shown in ) or back-annotated to the class representation itself (for example, by displaying metrics, colors, or icons on the respective object classes displayed superimposed over the UML diagram  shown in ). If pre-selected threshold values (e.g., a user-defined or default threshold values) are defined for one or more of the quality metrics, these can also be displayed as an indication of how much a metric varies from its corresponding pre-selected threshold. Table 1, below, lists an exemplary set of pre-selected threshold values for class diagrams for Java and .NET software application. The threshold values can be empirically determined based on, for example, data analysis of software projects or feedback from software designers.",{"@attributes":{"id":"p-0089","num":"0088"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"10"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"9","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"10","colwidth":"28pt","align":"center"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"10","align":"center","rowsep":"1"}}},{"entry":["Metrics","NOA","NOO","NOAM","DOIH","CBO","RFC","NOCON","NORM","NOOM"]},{"entry":{"@attributes":{"namest":"1","nameend":"10","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"10"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"7","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"9","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"10","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Java","7","17","18","5","13","53","\u2014","\u2014","\u2014"]},{"entry":[".NET","15","14","11","2","8","22","3","\u2014","5"]},{"entry":{"@attributes":{"namest":"1","nameend":"10","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 9","b":"900"},"At process block , a class-level representation is received defining attributes and relationships for one or more object classes. As shown in , a UML diagram is the received class-level representation in this example, although other suitable representations can be used.","At process block , one or more quality metrics for the UML diagram received at process block  are calculated. The quality metrics calculated can include those based on properties associated with an object class (for example, similar to those calculated at process block , above) and those based on relationships between a respective object class and other classes in the class-level representation (for example, similar to those calculated at process block , above).","At process block , one or more of the object classes are modified based on the quality metrics calculated at process block . For example, based on a NOO (number of operations) score for an object class exceeding a pre-selected threshold, a single object class can be broken into two or more object classes, to reduce the NOO score. Alternatively, one or more operations can be removed from the object class. Similarly, classes can be modified for other quality metrics. For example, objects having a high RFC or NORM metric can be redefined to reduce the number for remote function calls or remote method calls. Thus, a class representation can be improved to reduce potential errors later in the software development lifecycle.",{"@attributes":{"id":"p-0094","num":"0093"},"figref":["FIG. 10","FIG. 9"],"b":"1000"},"At process block , a UML representation of a software application is received, including definitions for one or more object classes, and relationships between one or more of the object classes.","At process block , one or more of the object classes can be selected using a GUI of a UML-editing application. For example, one or more object classes can be selected using a design modeling software application, such as IBM Rational Software Architect, by pointing and clicking, or dragging, to select a number of object classes in a UML diagram display. Implementation of this selection functionality can be simplified through the use of a plug-in architecture for design quality analysis.","At process block , one or more quality metrics are calculated for the selected object classes to represent the prospective quality of source code produced according to the UML representation. As discussed above, the instructions for calculating quality metrics can be implemented as an application plug-in. The quality metrics include those discussed above regarding process block .","At process block , a number of quality metrics are displayed using, for example, an HTML file or text file, or by using GUI functionality of a UML-editing application. By using a UML-editing application, more direct feedback is provided to a software designer, who can modify class representations as necessary to address quality metric issues indicated in a GUI window.","At process block , one or more object classes are modified based on the quality metrics, in order to reduce or completely eliminate quality metric scores for a respective object class. For example, remote methods can be converted to local methods, or the inheritance depth of an object can be reduced, in order to improve the calculated quality metric.","At process block , a determination of whether the class representation is of high enough quality to begin source coding is made. This determination can be made based on the calculated quality metrics being below a pre-selected threshold, or based on the judgment of a software designer. In some examples, the determination also takes into account the overall size and complexity of a class representation. For example, larger and\/or more complex class representations may have higher (worse) quality metric scores but still be determined to be ready for coding. If a determination is made that the representation is not ready for coding, the method returns to process block , in order to recalculate the quality metrics and re-modify the class representation until a level of quality is met. If a determination is made that the class representation is ready for coding, the method proceeds to process block .","At process block , source code is generated based on the UML representation modified at process block . In some examples, the source code is manually produced by a human programmer, who uses the modified UML representation as a template for producing detailed source code. In some examples, skeleton code describing external methods and attributes (e.g., interface parameters) for the object classes in the representation can be automatically generated as a starting point for source coding.","At process block , computer-executable instructions based on the source code are generated using, for example, a compiler or an interpreter. Therefore, by using the quality metrics at process blocks - as indicators of prospective source code quality, the source code and object code produced for implementing a software application can have improved defect rates and lower maintenance costs.",{"@attributes":{"id":"p-0103","num":"0102"},"figref":"FIG. 12A","b":["1210","1212","1214","1216","1218","1220","1222"]},{"@attributes":{"id":"p-0104","num":"0103"},"figref":"FIG. 12B","b":["1260","1220","1262","1222","1270","1272"]},{"@attributes":{"id":"p-0105","num":"0104"},"figref":["FIG. 11","FIG. 11"],"b":["1100","1100","1110","1120","1130","1110","1120","1120","1180","1100","1140","1150","1160","1170","1100","1100","1100"]},"The storage  may be removable or non-removable, and includes magnetic disks, magnetic tapes or cassettes, CD-ROMs, CD-RWs, DVDs, or any other non-transitory storage medium which can be used to store information and that can be accessed within the computing environment . The storage  stores instructions for the software , which can implement technologies described herein.","The input device(s)  can be a touch input device, such as a touch screen, keyboard, keypad, mouse, pen, or trackball, a voice input device, a scanning device, proximity sensor, image-capture device, or another device, that provides input to the computing environment . For audio, the input device(s)  can be a sound card or similar device that accepts audio input in analog or digital form. The output device(s)  can be a display, touch screen, printer, speaker, CD-writer, or another device that provides output from the computing environment . For example, a display device can be used to display any of the GUIs shown or described herein.","The communication connection(s)  enable communication over a communication medium (e.g., a connecting network) to another computing entity. The communication medium conveys information such as computer-executable instructions, compressed graphics information, or other data in a modulated data signal.","Computer-readable media are any available media that can be accessed within a computing environment . By way of example, and not limitation, with the computing environment , computer-readable media include memory  and\/or storage . As should be readily understood, the term computer-readable storage media includes non-transitory storage media for data storage such as memory  and storage , and not transmission media such as modulated data signals.","In view of the many possible embodiments to which the principles of the disclosed invention may be applied, it should be recognized that the illustrated embodiments are only preferred examples of the invention and should not be taken as limiting the scope of the invention. Rather, the scope of the invention is defined by the following claims. We therefore claim as our invention all that comes within the scope of these claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 8","FIG. 7"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 10","FIG. 9"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 12A"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 12B"}]},"DETDESC":[{},{}]}
