---
title: System and method for determining file system data integrity
abstract: A system and method for determining file system data integrity. In one embodiment, the system includes a storage device configured to store data and a file system configured to manage access to the storage device, to store plurality of files, to store a respective signature of each of the plurality of files, and to compare a respective signature of a given file against a corresponding validation signature. In one specific implementation, the system further includes a validation signature inventory including a plurality of validation signatures, and the file system is further configured to validate a particular file by retrieving a corresponding particular validation signature from the validation signature inventory and comparing the corresponding particular validation signature against the respective signature of the particular file. In another specific implementation, the file system is further configured to store the corresponding validation signature of the given file in a write-once storage attribute.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07653647&OS=07653647&RS=07653647
owner: Symantec Operating Corporation
number: 07653647
owner_city: Mountain View
owner_country: US
publication_date: 20040616
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["PRIORITY CLAIM","BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["This application is a continuation in part of application Ser. No. 10\/723,704, entitled \u201cSystem and Method for Detecting and Storing File Identity Change Information Within a File System\u201d and filed on Nov. 26, 2003 now U.S. Pat. No. 7,328,217.","1. Field of the Invention","This invention relates to computer systems and, more particularly, to file-based storage systems.","2. Description of the Related Art","Computer systems often process large quantities of information, including application data and executable code configured to process such data. In numerous embodiments, computer systems provide various types of mass storage devices configured to store data, such as magnetic and optical disk drives, tape drives, etc. To provide a regular and systematic interface through which to access their stored data, such storage devices are frequently organized into hierarchies of files by software such as an operating system. Often a file defines a minimum level of data granularity that a user can manipulate within a storage device, although various applications and operating system processes may operate on data within a file at a lower level of granularity than the entire file.","Increasingly, computer systems are under threat by malicious or errant software applications that may cause corruption or destruction of file data. For example, viruses, worms, and other rogue software may infect a computer system. In some instances, such malicious software may randomly or deliberately erase data stored within data files. Such software may also attempt to conceal itself by modifying the behavior of existing program files, which otherwise might not be suspected of malicious behavior. In other instances, a program may malfunction due to an a programming or hardware error or another event that changes its behavior, which may in turn cause corruption of file contents.","Regardless of its source, the consequences of data or program file corruption may be severe, resulting in potentially unrecoverable data loss or system failure. Techniques to prevent malicious corruption tend to center around identifying known threats (such as known viruses, worms, etc.) and quarantining them before they cause serious damage. Disciplined hardware and software design and testing practices hope to mitigate accidental corruption due to program error, by testing for known areas of design vulnerability. However, new malicious threats are constantly emerging, and it is difficult if not impossible to verify that a computer system and its software are entirely error-free. Thus, existing practices that are directed towards causes and modes of corruption generally cannot verify that a set of files are known definitively to be in an uncorrupted state, because the possibility of an unknown agent of corruption cannot be eliminated. Brute force methods, such as comparing the entire contents of a file against a copy believed to be good (i.e., a golden copy), may enable detection of file corruption, but such methods are exorbitantly expensive to implement with regularity for large quantities of data. Further, the golden copy may itself be vulnerable to corruption.","Various embodiments of a system and method for determining file system data integrity are disclosed. In one embodiment, the system may include a storage device configured to store data and a file system configured to manage access to the storage device, to store plurality of files, to store a respective signature of each of the plurality of files, and to compare a respective signature of a given file against a corresponding validation signature.","In one specific implementation, the system may further include a validation signature inventory including a plurality of validation signatures, and the file system may be further configured to validate a particular file by retrieving a corresponding particular validation signature from the validation signature inventory and comparing the corresponding particular validation signature against the respective signature of the particular file. In another specific implementation, the file system may be further configured to store the corresponding validation signature of the given file in a write-once storage attribute associated with the given file.","A method is also contemplated which, in one embodiment, may include storing a plurality of files, storing a respective signature of each of the plurality of files, and comparing a respective signature of a given file against a corresponding validation signature.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.","Computer System Overview","Turning now to , a block diagram of one embodiment of a computer system is shown. In the illustrated embodiment, system  includes a plurality of host devices and coupled to a plurality of storage devices and via a system interconnect . Further, host device includes a system memory  in the illustrated embodiment. For simplicity of reference, elements referred to herein by a reference number followed by a letter may be referred to collectively by the reference number alone. For example, host devices and and storage devices and may be referred to collectively as host devices  and storage devices .","In various embodiments of system , host devices  may be configured to access data stored on one or more of storage devices . In one embodiment, system  may be implemented within a single computer system, for example as an integrated storage server. In such an embodiment, for example, host devices  may be individual processors, system memory  may be a cache memory such as a static RAM (SRAM), storage devices  may be mass storage devices such as hard disk drives or other writable or rewritable media, and system interconnect  may include a peripheral bus interconnect such as a Peripheral Component Interface (PCI) bus. In some such embodiments, system interconnect  may include several types of interconnect between host devices  and storage devices . For example, system interconnect  may include one or more processor buses (not shown) configured for coupling to host devices , one or more bus bridges (not shown) configured to couple the processor buses to one or more peripheral buses, and one or more storage device interfaces (not shown) configured to couple the peripheral buses to storage devices . Storage device interface types may in various embodiments include the Small Computer System Interface (SCSI), AT Attachment Packet Interface (ATAPI), Firewire, and\/or Universal Serial Bus (USB), for example, although numerous alternative embodiments including other interface types are possible and contemplated.","In an embodiment of system  implemented within a single computer system, system  may be configured to provide most of the data storage requirements for one or more other computer systems (not shown), and may be configured to communicate with such other computer systems. In an alternative embodiment, system  may be configured as a distributed storage system, such as a storage area network (SAN), for example. In such an embodiment, for example, host devices  may be individual computer systems such as server systems, system memory  may be comprised of one or more types of dynamic RAM (DRAM), storage devices  may be standalone storage nodes each including one or more hard disk drives or other types of storage, and system interconnect  may be a communication network such as Ethernet or Fibre Channel. A distributed storage configuration of system  may facilitate scaling of storage system capacity as well as data bandwidth between host and storage devices.","In still another embodiment, system  may be configured as a hybrid storage system, where some storage devices  are integrated within the same computer system as some host devices , while other storage devices  are configured as standalone devices coupled across a network to other host devices . In such a hybrid storage system, system interconnect  may encompass a variety of interconnect mechanisms, such as the peripheral bus and network interconnect described above.","It is noted that although two host devices  and two storage devices  are illustrated in , it is contemplated that system  may have an arbitrary number of each of these types of devices in alternative embodiments. Also, in some embodiments of system , more than one instance of system memory  may be employed, for example in other host devices  or storage devices . Further, in some embodiments, a given system memory  may reside externally to host devices  and storage devices  and may be coupled directly to a given host device  or storage device  or indirectly through system interconnect .","In many embodiments of system , one or more host devices  may be configured to execute program instructions and to reference data, thereby performing a computational function. In the illustrated embodiment, such program instructions and\/or data are stored as code  within system memory . In some embodiments, system memory  may be one embodiment of a computer-accessible medium configured to store such program instructions and data. However, in other embodiments, program instructions and\/or data may be received, sent or stored upon different types of computer-accessible media. Generally speaking, a computer-accessible medium may include storage media or memory media such as magnetic or optical media, e.g., disk or CD-ROM included in system  as storage devices . A computer-accessible medium may also include volatile or non-volatile media such as RAM (e.g. SDRAM, DDR SDRAM, RDRAM, SRAM, etc.), ROM, etc, that may be included in some embodiments of system  as system memory . Further, a computer-accessible medium may include transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as network and\/or a wireless link, which may be included in some embodiments of system  as system interconnect .","In some embodiments, program instructions and data stored within a computer-accessible medium as described above may implement an operating system that may in turn provide an environment for execution of various application programs. For example, a given host device  may be configured to execute a version of the Microsoft Windows operating system, the Unix\/Linux operating system, the Apple Macintosh operating system, or another suitable operating system. Additionally, a given host device may be configured to execute application programs such as word processors, web browsers and\/or servers, email clients and\/or servers, and multimedia applications, among many other possible applications. It is contemplated that in some embodiments, any of the software methods or modules described in greater detail below (whether operating system or file system components, applications, or other types of software components) may be implemented as one or more instances of code  within one or more instances of a computer-accessible medium, such as system memory , for example.","During execution on a given host device , either the operating system or a given application may generate requests for data to be loaded from or stored to a given storage device . For example, code corresponding to portions of the operating system or an application itself may be stored on a given storage device , so in response to invocation of the desired operation system routine or application program, the corresponding code may be retrieved for execution. Similarly, operating system or application execution may produce data to be stored.","Many operating system embodiments provide data and control structures for organizing the storage space provided by storage devices  into files. In various embodiments, the data structures may include one or more tables configured to store information such as, for example, the identity of each file, its location within storage devices  (e.g., a mapping to a particular physical location within a particular storage device), as well as other information about each file as described in greater detail below. Also, in various embodiments, the control structures may include executable routines for manipulating files, such as, for example, function calls for changing file identity and for modifying file content as described in greater detail below. Collectively, these data and control structures may be referred to herein as a file system, and the particular data formats and protocols implemented by a given file system may be referred to herein as the format of the file system.","In some embodiments, a file system may be integrated into the operating system such that any access to data stored on storage devices  is governed by the control and data structures of the file system. Different operating systems may implement different native file systems using different formats, but in some embodiments, a given operating system may include a file system that supports multiple different types of file system formats, including file system formats native to other operating systems. In such embodiments, the various file system formats supported by the file system may be referred to herein as local file systems. Additionally, in some embodiments, a file system may be implemented using multiple layers of functionality arranged in a hierarchy, as illustrated in .",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 1"],"b":["200","210","220","210","212","212","210","200","200","200","212","230","214","214","212","205","220","230","30","230","200","205","212","20","50","25"]},"In one embodiment, each of processes  may correspond to a given user application, and each may be configured to access storage devices A-C through calls to API . API  provides processes  with access to various components of file system . For example, in one embodiment API  may include function calls exposed by file system  that a given process  may invoke, while in other embodiments API  may support other types of interprocess communication. It is contemplated that in some embodiments, an arbitrary number of processes  may be implemented. It is further contemplated that in some embodiments, processes configured to execute in kernel space may be configured to access file system  via API  or other APIs specific to kernel space processes.","As described above with respect to storage system  of , a given host device  may reside in a different computer system from a given storage device , and may access that storage device via a network. Likewise, with respect to operating system , in one embodiment a given process such as process A may execute remotely and may access storage devices  over a network. In the illustrated embodiment, file system  includes network protocols  to support access to the file system by remote processes. In some embodiments, network protocols  may include support for the Network File System (NFS) protocol or the Common Internet File System (CIFS) protocol, for example, although it is contemplated that any suitable network protocol may be employed, and that multiple such protocols may be supported in some embodiments.","File system  may be configured to support a plurality of local file systems. In the illustrated embodiment, file system  includes a VERITAS (VxFS) format local file system A, a Berkeley fast file system (FFS) format local file system B, and a proprietary (X) format local file system X. However, it is contemplated that in other embodiments, any number or combination of local file system formats may be supported by file system . To provide a common interface to the various local file systems , file system  includes a virtual file system . In one embodiment, virtual file system  may be configured to translate file system operations originating from processes  to a format applicable to the particular local file system  targeted by each operation. Additionally, in the illustrated embodiment operating system  includes device drivers  through which local file systems  may access storage devices . Device drivers  may implement data transfer protocols specific to the types of interfaces employed by storage devices . For example, in one embodiment device drivers  may provide support for transferring data across SCSI and ATAPI interfaces, though in other embodiments device drivers  may support other types and combinations of interfaces.","In the illustrated embodiment, file system  also includes filter driver . In some embodiments, filter driver  may be configured to monitor each operation entering file system  and, subsequent to detecting particular types of operations, to cause additional operations to be performed or to alter the behavior of the detected operation. For example, in one embodiment filter driver  may be configured to combine multiple write operations into a single write operation to improve file system performance. In an embodiment described in greater detail below, filter driver  may be configured to compute a signature of a file subsequent to detecting a write to that file. In still another embodiment, filter driver  may be configured to store information, such as records, associated with particular files subsequent to detecting certain kinds of operations on those files, as described in greater detail below. It is contemplated that in some embodiments, filter driver  may be configured to implement one or more combinations of the aforementioned operations, including other filter operations not specifically mentioned.","It is noted that filter driver  is part of file system  and not an application or process within user space . Consequently, filter driver  may be configured to operate independent of applications and processes within the user space . Alternatively, or in addition to the above, filter driver  may be configured to perform operations in response to requests received from applications or processes within the user space .","It is further noted that in some embodiments, kernel space  may include processes (not shown) that generate accesses to storage devices , similar to user space processes . In such embodiments, processes executing in kernel space  may be configured to access file system  through a kernel-mode API (not shown), in a manner similar to user space processes . Thus, in some embodiments, all accesses to storage devices  may be processed by file system , regardless of the type or space of the process originating the access operation.","Numerous alternative embodiments of operating system  and file system  are possible and contemplated. For example, file system  may support different numbers and formats of local file systems , or only a single local file system . In some embodiments, network protocol  may be omitted or integrated into a portion of operating system  external to file system . Likewise, in some embodiments virtual file system  may be omitted or disabled, for example if only a single local file system  is in use. Additionally, in some embodiments filter driver  may be implemented within a different layer of file system . For example, in one embodiment, filter driver  may be integrated into virtual file system , while in another embodiment, an instance of filter driver  may be implemented in each of local file systems .","File System Content and Integrity","As described above, file system  may be configured to manage access to a plurality of files stored on storage devices . In many embodiments, each stored file may have an associated identity used by the file system to distinguish each file from other files. In one embodiment of file system , the identity of a file may be a file name, which may for example include a string of characters such as \u201cfilename.txt\u201d. However, in embodiments of file system  that implement a file hierarchy, such as a hierarchy of folders or directories, all or part of the file hierarchy may be included in the file identity. For example, a given file named \u201cfile1.txt\u201d may reside in a directory \u201csmith\u201d that in turn resides in a directory \u201cusers\u201d. The directory \u201cusers\u201d may reside in a directory \u201ctest1\u201d that is a top-level or root-level directory within file system . In some embodiments, file system  may define a single \u201croot directory\u201d to include all root-level directories, where no higher-level directory includes the root directory. In other embodiments, multiple top-level directories may coexist such that no higher-level directory includes any top-level directory. The names of the specific folders or directories in which a given file is located may be referred to herein as the given file's path or path name.","In some embodiments of file system  that implement a file hierarchy, a given file's identity may be specified by listing each directory in the path of the file as well as the file name. Referring to the example given above, the identity of the given instance of the file named \u201cfile1.txt\u201d may be specified as \u201c\/test1\/users\/smith\/file1.txt\u201d. It is noted that in some embodiments of file system , a file name alone may be insufficient to uniquely identify a given file, whereas a fully specified file identity including path information may be sufficient to uniquely identify a given file. There may, for example, exist a file identified as \u201c\/test2\/users\/smith\/file1.txt\u201d that, despite sharing the same file name as the previously mentioned file, is distinct by virtue of its path. It is noted that other methods of representing a given file identity using path and file name information are possible and contemplated. For example, different characters may be used to delimit directory\/folder names and file names, or the directory\/folder names and file names may be specified in a different order.","The files managed by file system  may store application data or program information, which may collectively be referred to as file data, in any of a number of encoding formats. For example, a given file may store plain text in an ASCII-encoded format or data in a proprietary application format, such as a particular word processor or spreadsheet encoding format. Additionally, a given file may store video or audio data or executable program instructions in a binary format. It is contemplated that numerous other types of data and encoding formats, as well as combinations of data and encoding formats, may be used in files as file data.","In addition to managing access to storage devices, the various files stored on storage devices, and the file data in those files as described above, in some embodiments file system  may be configured to store information corresponding to one or more given files, which information may be referred to herein as metadata. Generally speaking, metadata may encompass any type of information associated with a file. In various embodiments, metadata may include information such as (but not limited to) the file identity, size, ownership, and file access permissions. Metadata may also include free-form or user-defined data such as records corresponding to file system operations, as described in greater detail below. Metadata corresponding to a file as well as the data content of files may collectively be referred to herein as file system content.","In the course of execution, operating system  and\/or one or more of processes  may generate input\/output (I\/O) operations to access the content of one or more files managed by file system . For example, a process  may issue a file write operation to modify the contents of a given file. In some instances, the contents of a file may be corrupted either accidentally, for example due to an erroneous or runaway process , or intentionally, for example due to a malicious or rogue process  such as a virus, worm, or other hostile software. While data loss may occur if data files are corrupted, corruption of program and configuration files may be especially critical, as a system failure such as a crash may result.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 3","FIG. 3","FIG. 2"],"b":["205","205","221","250","260","250","270","205","280","250","205","250","260","250","260","250","260","250","260"],"i":["a","n","a","n ","a","n","a","n ","a","n ","a","n ","a","n "]},"Files  may be representative of files managed by file system , and may in various embodiments be configured to store various types of data and program instructions as described above. In the illustrated embodiment, each of files  has a corresponding named stream . Each of named streams  may be configured to store metadata pertaining to its corresponding file. It is noted that files  and named streams  may be physically stored on one or more storage devices, such as storage devices  of . However, for purposes of illustration, files  and named streams  are shown as conceptually residing within file system .","In some embodiments, filter driver  may be configured to access file data stored in a given file . For example, filter driver  may be configured to detect read and\/or write operations received by file system , and may responsively cause file data to be read from or written to a given file  corresponding to the received operation. In some embodiments, filter driver  may be configured to generate metadata corresponding to a given file  and store the generated metadata in the corresponding named stream . For example, upon detecting a file write operation directed to given file , filter driver  may be configured to update metadata corresponding to the last modified time of given file  and to store the updated metadata within named stream . Also, in some embodiments filter driver  may be configured to retrieve metadata corresponding to a specified file on behalf of a particular application.","Metadata may be generated in response to various types of file system activity initiated by processes  of . In some embodiments, the generated metadata may include records of arbitrary complexity. For example, in one embodiment filter driver  may be configured to detect various types of file manipulation operations such as file create, delete, rename, and\/or copy operations as well as file read and write operations. In some embodiments, such operations may be detected in-band as described above. After detecting a particular file operation, filter driver  may be configured to generate a record of the operation and store the record in the appropriate named stream  as metadata of the file  targeted by the operation.","More generally, any operation that accesses any aspect of file system content, such as reading or writing of file data or metadata, may be referred to as a file system content access event. In one embodiment, filter driver  may be configured to generate a metadata record in response to detecting a file system content access event. It is contemplated that in some embodiments, access events targeting metadata may themselves generate additional metadata. As described in greater detail below, in the illustrated embodiment, event log  may be configured to store records of detected file system content access events independently of whether additional metadata is stored in a particular named stream  in response to event detection.","The stored metadata record may in various embodiments include various kinds of information about the file  and the operation detected, such as the identity of the process generating the operation, file identity, file type, file size, file owner, and\/or file permissions, for example. In one embodiment, the record may include a file signature indicative of the content of file . A file signature may be a hash-type function of all or a portion of the file contents and may have the property that minor differences in file content yield quantifiably distinct file signatures. For example, the file signature may employ the Message Digest 5 (MD5) algorithm, which may yield different signatures for files differing in content by as little as a single bit, although it is contemplated that any suitable signature-generating algorithm may be employed. The record may also include additional information not specifically listed.","In one embodiment, a given metadata record may be generated and stored in a format that may include data fields along with tags that describe the significance of an associated data field. Such a format may be referred to as a \u201cself-describing\u201d data format. For example, a data element within a metadata record may be delimited by such tag fields, with the generic syntax:","<descriptive_tag>data element<\/descriptive_tag>","where the \u201cdescriptive_tag\u201d delimiter may describe some aspect of the \u201cdata element\u201d field, and may thereby serve to structure the various data elements within a metadata record. It is contemplated that in various embodiments, self-describing data formats may employ any of a variety of syntaxes, which may include different conventions for distinguishing tags from data elements. In some embodiments, a self-describing data format may allow additional structural elements to be defined as desired, for example by allowing additional descriptive tags to be defined. Such embodiments of self-describing data formats may be referred to as extensible as well as self-describing.","In one embodiment, Extensible Markup Language (XML) format, or any data format compliant with any version of XML, may be used as an extensible, self-describing format for storing metadata records, although it is contemplated that in other embodiments, any suitable format may be used, including formats that are not extensible or self-describing. XML-format records may allow arbitrary definition of record fields, according to the desired metadata to be recorded. One example of an XML-format record is as follows:",{"@attributes":{"id":"p-0051","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<record sequence=\u201c1\u201d>"]},{"entry":[{},"\u2003\u2003<path>\/test1\/foo.pdf<\/path>"]},{"entry":[{},"\u2003\u2003<type>application\/pdf<\/type>"]},{"entry":[{},"\u2003\u2003<user id=1598>username<\/user>"]},{"entry":[{},"\u2003\u2003<group id=119>groupname<\/group>"]},{"entry":[{},"\u2003\u2003<perm>rw-r--r--<\/perm>"]},{"entry":[{},"\u2003\u2003<md5>d41d8cd98f00b204e9800998ecf8427e<\/md5>"]},{"entry":[{},"\u2003\u2003<size>73890<\/size>"]},{"entry":[{},"<\/record>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["260","250","250","250","205","250","221","221","250","221","250","221","250"],"i":["a","a","a","a ","a "]},"As described above, filter driver  may be configured to store a signature indicative of the contents of a given file  within a metadata record stored within a respective named stream  corresponding to given file . In one embodiment, filter driver  may be configured to detect an operation to modify the content of given file , such as a file write operation. In such an embodiment, filter driver  or another module of file system  may be configured to recompute the signature corresponding to given file  to reflect the updated content, and to store the updated signature within corresponding named stream . For example, filter driver  may recompute the signature following the content-modifying operation and append a new metadata record to corresponding named stream  that reflects the updated signature. In some embodiments, signatures may not be immediately computed or recomputed following creation or modification of given file . Instead, signature generation may be performed as a lower-priority background task as computational resource availability allows, and the previous signature may be indicated as stale. In some such embodiments, file system  may be configured to generate a signature on demand if a request for a stale signature occurs.","As described in detail below, updates to file signatures may be used in conjunction with validation signature inventory  in various ways to detect undesirable changes to file content. It is also contemplated that in some embodiments, signature generation, storage and use in content validation may be performed on portions of a file rather than an entire file, or on metadata records themselves. For example, in one embodiment a signature of a named stream  may be computed following a modification of its metadata contents; such a signature may be stored within the named stream  or elsewhere. It is contemplated that any of the methods, structures, or techniques described herein may be applied at an arbitrary level of granularity or abstraction within file system .","It is noted that in some embodiments, metadata may be stored in a structure other than a named stream. For example, in one embodiment metadata corresponding to one or more files may be stored in another file in a database format or another format. Also, it is contemplated that in some embodiments, other software modules or components of file system  may be configured to generate, store, and\/or retrieve metadata. For example, the metadata function of filter driver  may be incorporated into or duplicated by another software module.","In the illustrated embodiment, file system  includes event log . Event log  may be a named stream similar to named streams ; however, rather than being associated with a particular file, event log  may be associated directly with file system . In some embodiments, file system  may include only one event log , while in other embodiments, more than one event log  may be provided. For example, in one embodiment of file system  including a plurality of local file systems  as illustrated in , one event log  per local file system  may be provided.","In some embodiments, filter driver  may be configured to store a metadata record in event log  in response to detecting a file system operation or event. For example, a read or write operation directed to a particular file  may be detected, and subsequently filter driver  may store a record indicative of the operation in event log . In some embodiments, filter driver  may be configured to store metadata records within event log  regardless of whether a corresponding metadata record was also stored within a named stream . In some embodiments event log  may function as a centralized history of all detected operations and events transpiring within file system .","Similar to the records stored within named stream , the record stored by filter driver  in event log  may in one embodiment be generated in an extensible, self-describing data format such as the Extensible Markup Language (XML) format, although it is contemplated that in other embodiments, any suitable format may be used. As an example, a given file named \u201c\/test1\/foo.pdf\u201d may be created, modified, and then renamed to file \u201c\/test1\/destination.pdf\u201d in the course of operation of file system . In one embodiment, event log  may include the following example records subsequent to the rename operation:",{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<record>"]},{"entry":[{},"\u2003\u2003<op>create<\/op>"]},{"entry":[{},"\u2003\u2003<path>\/test1\/foo.pdf<\/path>"]},{"entry":[{},"<\/record>"]},{"entry":[{},"<record>"]},{"entry":[{},"\u2003\u2003<op>modify<\/op>"]},{"entry":[{},"\u2003\u2003<path>\/test1\/foo.pdf<\/path>"]},{"entry":[{},"<\/record>"]},{"entry":[{},"<record>"]},{"entry":[{},"\u2003\u2003<op>rename<\/op>"]},{"entry":[{},"\u2003\u2003<path>\/test1\/destination.pdf<\/path>"]},{"entry":[{},"\u2003\u2003<oldpath>\/test1\/foo.pdf<\/oldpath>"]},{"entry":[{},"<\/record>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["250","250","250","221","270"],"i":["a ","b ","a"]},"Validation signature inventory  may be used in various ways with file signatures to check file integrity. In one embodiment, validation signature inventory  may include a list or database of files and a corresponding validation signature for each file entry. In some embodiments, entries within validation signature inventory  may include fully-qualified path names that may include full path information associated with a given file . However, in different software installations, the exact paths of various program and data files may vary. Therefore in some embodiments, validation signature inventory  may index files using relative or partial path information, or by file name alone. For example, in some embodiments a given program, configuration or data file may retain the same file name, e.g., \u201cAcroRd62.exe\u201d, regardless of the file system location to which it is installed.","The validation signature included for each file given in validation signature inventory  may be a trusted signature corresponding to a version of the file that is known not to be corrupted. For example, in one embodiment a software vendor may compute signatures of the various files comprising a formal release of a particular software program or package. Such signatures may be computed in a \u201cclean\u201d environment, for example an environment in which the files comprising the release are built from source code in a computing environment verified to be free of malicious code such as viruses, worms, etc. The vendor may then distribute the computed signatures to be included within validation signature inventory , either locally on a customer's system, remotely on the vendor's system (accessible through a network interface, for example), or on a third-party system. In other embodiments, a validation signature may be computed locally after a file is installed to file system . For example, prior to placing a computer system hosting file system  online and making it available for use after installing new files, an administrator or an operating system daemon or process may cause the signatures of the new files to be computed and stored within validation signature inventory . Numerous other methods of obtaining and distributing validation signatures to validation signature inventory  are possible and contemplated.","Once a validation signature for a given file  is available within validation signature inventory , the validation signature may be used with a signature stored within corresponding named stream  to check the integrity of file . (A signature stored within a named stream  may also be referred to as a dynamic signature, as it may change in response to changes in the content of corresponding file , including undesired changes.) For example, in one embodiment file system  may be configured to validate a given file  by retrieving a validation signature corresponding to given file  from validation signature inventory  and retrieving a current file signature from corresponding named stream . Upon comparing the two signatures, file system  may be configured to indicate that given file  is valid if the signatures match, or invalid if there is a mismatch. Although in the illustrated embodiment filter driver  is shown interacting with validation signature inventory , it is contemplated that in some embodiments, other processes or modules of file system  may be configured to interact with validation signature inventory  to retrieve and\/or store signatures in addition to or instead of filter driver .","As noted above, in some embodiments filter driver  may be configured to update the signature of a file  as soon as an operation to modify the file is detected. In some such embodiments, filter driver  may also be configured to check the updated signature against a corresponding validation signature from validation signature inventory  at approximately the time the updated signature is written to corresponding named stream . In another embodiment, updating of signatures and\/or comparison of updated signatures with validation signatures may be performed at an arbitrary time after an operation to modify a given file  completes. For example, at various intervals of time file system  may use the contents of event log  to identify recently-modified files , to compute updated signatures (if filter driver  has not already done so), and to compare updated signatures against validation signatures to validate modified files . In still another embodiment, comparison of an updated signature against a corresponding validation signature may occur in response to a request that occurs asynchronously with respect to the file modification operation resulting in the signature update. For example, a scanning process (such as an antivirus tool) may be configured to continuously or periodically scan files  (e.g., all files, or only recently modified files) to check signatures and identify unexpected changes.","It is noted that in embodiments where filter driver  or another module updates a file signature when the file is modified and stores the updated signature within named stream , no further signature computation may be required to determine validity of a given file . That is, in such embodiments filter driver  may be configured to guarantee that the most recent signature corresponding to a given file  is always available within a corresponding named stream , such that determining validity of a given file  may simply involve signature comparison rather than signature generation.","In still another embodiment, file system  may export a query interface to applications via API  or another API, whereby processes  may query file system content using a query language. In such an embodiment, a process  may submit a query to retrieve a current signature of one or more files . If validation signature inventory  is implemented within file system , the querying process  may also submit a query to obtain the respective validation signatures of the files  subject to the first query, whereas if the inventory is implemented externally to file system , the querying process  may interact with it directly such as through a specific API. The querying process  may then determine whether the subject files  are valid upon comparing their respective signatures. Alternatively, file system  may be configured to perform signature comparison as described above in response to receiving a query to determine the validity of a given file , and to return the result of the comparison (e.g., valid, invalid) to the querying process .","One embodiment of a method of determining file system content integrity using signatures is illustrated in . Referring collectively to  through , operation begins in block  where a file  is stored along with a corresponding dynamic signature, for example by file system  on a storage device . In some embodiments, a dynamic file signature may be computed and stored at the time the file is stored in block , while in other embodiments signature computation and storage may be performed prior to or subsequent to file storage.","An operation to modify the stored file  may be detected (block ), such as by filter driver , for example. If such an operation is detected, the stored dynamic signature is updated to reflect the file modification (block ). In some embodiments, the previously computed signature may be replaced, whereas in other embodiments, earlier signatures may be retained, such as within metadata records, as part of a file history.","A request to validate the stored file  is then received, which may occur whether or not the stored file has been modified since it was originally stored (block ). For example, in one embodiment a user may submit a query via a process  to determine whether one or more files  are valid. In another embodiment, file system  itself or a process  may be configured to check file validity at recurrent intervals. In still another embodiment, a request to validate a given file  may be generated whenever the file is modified, such as in blocks -.","In response to the request to validate stored file , a validation signature corresponding to stored file  may be retrieved from a validation signature inventory  (block ). In various embodiments as described above, validation signature inventory  may be implemented within file system  or externally, such as on a separate server. Once the corresponding validation signature has been retrieved, it is compared against the signature stored with file  (block ). In various embodiments, validation signature retrieval and comparison may be performed within file system , within an application process , in response to a query, or in any other suitable fashion.","Following comparison, the results are indicated (block ). For example, if a signature mismatch is detected, stored file  may have been corrupted. Responsively, the entity requesting the comparison may be alerted and an error condition raised.","In an alternative embodiment to those illustrated in  and , validation signature inventory  may be omitted. One such embodiment of file system  is illustrated in , in which files , named streams , and event log  may be configured as described above with respect to . However, instead of maintaining validation signatures for files  collectively within validation signature inventory , in the illustrated embodiment a validation signature for a given file  may be maintained as metadata, for example within corresponding named stream .","Specifically, in one embodiment file system  may be configured to provide a write-once storage attribute for each file  for which integrity detection through signature checking is desired. A write-once storage attribute of a file  may in one embodiment be a data field that may have a value written to it only once during the existence of corresponding file . A write-once storage attribute may be read arbitrarily, but in one embodiment it may not be altered once written, and may be reset only upon deletion of corresponding file . In various embodiments, a write-once attribute may be stored within a metadata record stored within a named stream  corresponding to a given file , or the write-once attribute may be stored in storage other than a named stream, such as an appropriately-protected file.","File system  may be configured to initialize the validation signature of a given file  at the time the file is created, and to preserve the write-once semantics of the validation signature. For example, in one embodiment filter driver  may be configured to receive a validation signature to be stored with a given file  at file creation time, for example from an installation program via a process . Alternatively, filter driver  may be configured to generate a signature corresponding to given file  once all the data to be written to the file has been received. For example, filter driver  may be configured to detect the first close operation of given file , and to compute the validation signature in response. However the validation signature is generated, in one embodiment filter driver  may be configured to preserve write-once semantics by checking the write-once validation signature attribute of given file  to determine whether it contains a previously computed signature value (e.g., a non-null value). If so, filter driver  may decline to overwrite the stored value with the generated value. Otherwise, filter driver  may store the generated value in the write-once attribute.","In one embodiment, the write-once validation signature attribute of a file  may be a field within an XML-formatted metadata record that may be stored within corresponding named stream  as described above. For example, after a file \u201c\/test1\/foo.pdf\u201d is created, the following metadata record may be stored by filter driver :",{"@attributes":{"id":"p-0074","num":"0073"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<record sequence=\u201c1\u201d>"},{"entry":"\u2003\u2003<path>\/test1\/foo.pdf<\/path>"},{"entry":"\u2003\u2003<valid_md5>d41d8cd98f00b204e9800998ecf8427e<\/valid_md5>"},{"entry":"\u2003\u2003<type>application\/pdf<\/type>"},{"entry":"\u2003\u2003<user id=1598>username<\/user>"},{"entry":"\u2003\u2003<group id=119>groupname<\/group>"},{"entry":"\u2003\u2003<perm>rw-r--r--<\/perm>"},{"entry":"\u2003\u2003<curr_md5>d41d8cd98f00b204e9800998ecf8427e<\/curr_md5>"},{"entry":"\u2003\u2003<size>73890<\/size>"},{"entry":"<\/record>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":"250"},"Once a validation signature for a given file  is stored within its corresponding write-once metadata attribute, signature verification may occur in any of the ways described above in conjunction with  and , with the exception that when the validation signature is to be retrieved for a file , it may be retrieved by file system  from corresponding named stream  rather than from a validation signature inventory . As described above, validation may occur in response to an application request or query, or to file system activity such as maintenance scanning or file modification.","Referring to the example just given, one example of possible file corruption is shown in the following metadata record:",{"@attributes":{"id":"p-0077","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<record sequence=\u201c2\u201d>"},{"entry":"\u2003\u2003<path>\/test1\/foo.pdf<\/path>"},{"entry":"\u2003\u2003<valid_md5>d41d8cd98f00b204e9800998ecf8427e<\/valid_md5>"},{"entry":"\u2003\u2003<type>application\/pdf<\/type>"},{"entry":"\u2003\u2003<user id=1598>username<\/user>"},{"entry":"\u2003\u2003<group id=119>groupname<\/group>"},{"entry":"\u2003\u2003<perm>rw-r--r--<\/perm>"},{"entry":"\u2003\u2003<curr_md5>e7f8ca63325478dac5bb39026182a7f9<\/curr_md5>"},{"entry":"\u2003\u2003<size>73890<\/size>"},{"entry":"<\/record>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
