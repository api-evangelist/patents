---
title: Extracting font metadata from font files into searchable metadata for package distribution
abstract: A package installer identifies a font package that facilitates rendering a font of a file being opened by a user based on font metadata downloaded from the remote server. The font metadata includes information identifying one or more font packages available for download from the remote server. Font metadata associated with each font package further indicates one or more fonts supported by the corresponding font package. A graphical user interface (GUI) is displayed to the user prompting whether the user desires to install the identified font package. The GUI further indicates that an additional font needs to be installed in order to view the file correctly. In response to an input from the user via the GUI, the package installer downloads the font package from the remote server for local installation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09164967&OS=09164967&RS=09164967
owner: Red Hat, Inc.
number: 09164967
owner_city: Raleigh
owner_country: US
publication_date: 20091125
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["Embodiments of the invention relate generally to the field of software application distribution; and more particularly, to extracting font metadata from font files into searchable metadata for package distribution.","People often send other users documents and images. These files are often of different formats or fonts, as a user could send a Microsoft Word file (.doc file) or a GNU image manipulation program (GIMP) image (.xcf) via email, instant messaging or even on physical media.","Applications can view many different fonts and font scripts in the same document. For example, a document can be created that has right-to-left formatted Arabic script in one section and left-to-right Latin script in another. Due to the nature of how fonts are created and packaged, not all fonts contain all glyphs. In addition, often font designers only do the minimum of characters, such as a-z, A-Z and 1-9. Accented characters such as \u2018\u00e3\u2019 may not be included in the font set, and it is even less likely that characters such as \u2018\u2019 will be included. Only a few fonts are installed by default on most operating system (OS) distributions as the fonts are relatively large in size.","Typically in an application, the missing glyphs are shown as black squares with hexadecimal numbers so that a user is aware that some characters are not displayable or recognizable. One solution is for the user to download and install additional fonts that have the required glyphs, usually a specialist font for that language. However, the user has to know what font to download, and it may take the user a few attempts in order to get the right one. As a result, the user has to stop what he\/she is doing, and manually search for and install the proper font packages.","In the following description, numerous details are set forth to provide a more thorough explanation of the embodiments of the present invention. It will be apparent, however, to one skilled in the art, that embodiments of the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring embodiments of the present invention.","Reference in the specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification do not necessarily all refer to the same embodiment.","When a font package is packaged, each font includes one or more font files (e.g., true type fonts or open type fonts). By parsing the font files for glyph matches, each supported language can be added as a virtual provide to the built font package. This virtual provide is added to the distribution font metadata which allows a remote program to query what font package supports a given mime type by querying the font metadata. For example, in LINUX operating environment, this can be done using a WhatProvides( )method, typically using the PackageKit. An example query would be WhatProvides(\u201c:lang=en_GB\u201d) which would return a list of all the not-yet-installed font packages that would be used to view this language text. By writing a script to extract the mime data at font package build time, many virtual provides can be added just by rebuilding all the font packages in a repository. A virtual provide is a little piece of data about the package that resides in the distribution metadata, and thus the package does not have to be installed to query this data.","By integrating this application programmable interface (API) into a default font renderer handler (in the case of LINUX, GNOME, a fontconfig GTK module launched when the gnome-packagekit tools are started at session start time), an experience can be provided where when a user opens a document, an application such as a word processor (e.g., Abiword) tries to view the file and a helper provides a list of fonts the user can install to view the file correctly. After the font packages are installed, the application shows the correct text for the document. In this way a user can send documents to remote users knowing that they will be able to view the contents correctly.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":["100","101","102","101","102","101","103","103"]},"In one embodiment, server  includes, among others, a package builder  and metadata manager . Package builder  is configured to build (e.g., compile and\/or link) and manage font packages  that can be downloaded by client  for installation at client . A font package is a single file having compressed therein one or more font files. Once a font package is built, according to one embodiment, the metadata manager  is configured to scan each font file contained in the font package to extract certain font metadata from each font file and insert the font metadata into the font package. Alternatively, a font provider may provide, together with a font file, a font description file describing the corresponding font file. In this situation, in addition to scanning the actual font file, the metadata manager may also scan the font description file to extract the corresponding font metadata. For example, when a font author made a mistake and created a font file that says \u201cI am FontX, Bold\u201d when it is really \u201cFontXY, Bold\u201d, it is much simpler for a package builder to put a file to be associated with the font file that tells an application that \u201cthis font is really FontXY, Bold\u201d rather than trying to modify the actual font file. This also can reduce the possible situations in which some of the glyphs in a font file are bad and the metadata scanner is unable to recognize that certain resources present in the font file are not usable by simply scanning the actual font file. However, such information may be provided by a font description file, which would allow a user to override the information in a font file with the information extracted from the font description file. The added font metadata includes information indicating a particular font or fonts that are supported by the associated font package.","The added font metadata is typically inserted into a header of the font package, such as, for example, the font package file  as shown in . Referring to , font package file  includes a file header  and body . File header  includes font metadata  indicating that the font package file supports fonts associated with certain languages. File body  includes all the individual font files contained in the package . As a result, when a file hander (e.g., file handler ) attempts to open a file having an unrecognized font, the file handler can invoke a package installer (e.g., package installer ) to query the font package to determine whether a particular font is supported by the font package.","Referring back to , the package  can then be stored in a storage device associated with server  as a part of packages . In addition, metadata manager  is configured to scan each of the font packages , to extract all the font metadata from the font packages  (e.g., \u201c:lang=pt\u201d or \u201c:lang=en_GB\u201d), and to save all the font metadata to a font metadata file as a part of font metadata file  in a storage device. A font metadata file  may be an extensible markup language (XML) compatible data file. This font metadata file  is relatively small compared to the size of the font packages  as it does not contain all the content data; it just contains all the text font metadata. The font metadata file  is compressed and saved in a storage device.","Note that the package builder  and the font packages  do not have to be on the same server as the font metadata . For example, the font packages  can be built at another server or facility, including the font metadata. The font packages  can then be stored at a server accessible from a user network (e.g., Internet). The font metadata from individual font packages can then be extracted (e.g., at the same server or another server). A pointer is added in the extracted metadata referenced to a location of those font packagers . The resultant extracted metadata can then be published on a server accessible over a network. Thus, server  could just be a distribution server that hosts the font metadata , while another server or servers are used to host the actual font packages. Also, it is useful to index font packages on a master distribution server, and then to copy the font packages and the extracted metadata indexes to another distribution server or servers. Other configurations may also be implemented.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 2B","FIG. 2B"],"b":["250","107","250","251","252"]},"Referring back to , client  includes one or more applications  (e.g., word processor) communicatively coupled to a file handler , which provides an application programming interface (API) to access one or more files  (e.g., word document files). When application  attempts to open a file via file handler , if file handler  cannot recognize a certain font of the file that is being opened, the file handler  invokes a package installer  to download one or more font packages and\/or the associated font metadata from server  over network . The resulting font packages  include one or more font files that can be installed at client  in order to view certain fonts of files  correctly.","According to one embodiment, when application  attempts to open a file having a font that is not recognizable, package installer  is invoked, for example, to \u201cfind me all font packages that provide:lang=pt\u201d. The package installer  can download the newest font metadata file  very quickly from server  because the font metadata is relatively small in size. The package installer  then knows about every font package (e.g., font packages ) available for installation from server . Package installer  can scan the font metadata looking for matches, and return a list to the user of the font packages that match the search (e.g., available for installation for opening the file with unrecognized font).","In one embodiment, when a user attempts to open a document with an unknown font, the font installer (as a part of package installer ) displays a GUI  of  indicating that an additional font needs to be installed. GUI  may also display a message identifying a specific font that is required to view a particular document.","In response to the GUI displayed, referring back to , if the user actually wants to install identified font, the package installer  has to match an identifier of the font to a remote filename using the previously downloaded font metadata (e.g., font metadata ), and then download the font package itself (e.g., font packages ). The user can then install the local font file at client . In this way, the package installer  can automatically locate the latest or a specific version of required font files from server  and install them at client . As a result, a user of client  does not need to know which font is needed for opening a particular file and does not need to manually conduct a search for the required font or fonts over the network.","The font metadata  stored at the local system can be periodically updated by downloading the newest font metadata  from server  onto the local client , and then searching through the font metadata to determine if any of the remote font packages are newer than the ones that have been installed locally. In this way the font metadata  is kept up to date. Since the font packages and font metadata are distributed by a centralized server or servers , the client  can be sure that the font packages downloaded and installed are the latest versions.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 4","FIG. 1","FIG. 4"],"b":["400","400","104","105","401","402","403","404","405"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 5","FIG. 1","FIG. 5"],"b":["500","500","109","501","502","503","504","505"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 6","b":"800"},"The exemplary computer system  includes a processor , a main memory  (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM), etc.), a static memory  (e.g., flash memory, static random access memory (SRAM), etc.), and a data storage device , which communicate with each other via a bus .","Processor  represents one or more general-purpose processors such as a microprocessor, a central processing unit, or the like. More particularly, the processor may be complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processor  may also be one or more special-purpose processors such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. The processor  is configured to execute the instructions  for performing the operations and steps discussed herein.","The computer system  may further include a network interface device . The computer system  also may include a video display unit  (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)), an alphanumeric input device  (e.g., a keyboard), a cursor control device  (e.g., a mouse), and a signal generation device  (e.g., a speaker).","The data storage device  may include a computer-accessible storage medium  (also known as a machine-readable storage medium or a computer-readable medium) on which is stored one or more sets of instructions or software (e.g., packaging tool , which may be implemented as part of package installer , package builder , and\/or metadata manager ) embodying any one or more of the methodologies or functions described herein. The packaging tool  may also reside, completely or at least partially, within the main memory  and\/or within the processor  during execution thereof by the computer system , the main memory  and the processor  also constituting machine-accessible storage media. The packaging tool  may further be transmitted or received over a network via the network interface device .","The computer-readable storage medium  may also be used to store the packaging tool  persistently. While the computer-readable storage medium  is shown in an exemplary embodiment to be a single medium, the term \u201ccomputer-readable storage medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The terms \u201ccomputer-readable storage medium\u201d shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term \u201ccomputer-readable storage medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, and optical and magnetic media.","The modules , components and other features described herein can be implemented as discrete hardware components or integrated in the functionality of hardware components such as ASICS, FPGAs, DSPs or similar devices. In addition, the modules  can be implemented as firmware or functional circuitry within hardware devices. Further, the modules  can be implemented in any combination hardware devices and software components.","In the above description, numerous details are set forth. It will be apparent, however, to one skilled in the art, that the present invention may be practiced without these specific details. In some instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention.","Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201cidentifying\u201d or \u201cdisplaying\u201d or \u201cdownloading\u201d or \u201cinstalling\u201d or \u201cinvoking\u201d or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","Embodiments of the present invention also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable medium. A machine-readable medium includes any mechanism for storing or transmitting information in a form readable by a machine (e.g., a computer). For example, a machine-readable (e.g., computer-readable) medium includes a machine (e.g., a computer) readable storage medium (e.g., read only memory (\u201cROM\u201d), random access memory (\u201cRAM\u201d), magnetic disk storage media, optical storage media, flash memory devices), etc.","The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general-purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method operations. The required structure for a variety of these systems will appear from the description above. In addition, embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of embodiments of the invention as described herein.","In the foregoing specification, embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of embodiments of the invention as set forth in the following claims. The specification and drawings are, accordingly, to be regarded in an illustrative sense rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example and not limitation in the figures of the accompanying drawings in which like references indicate similar elements.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIGS. 2A and 2B"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
