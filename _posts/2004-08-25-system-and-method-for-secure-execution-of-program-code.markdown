---
title: System and method for secure execution of program code
abstract: A system comprises a memory and a processor that supports different privilege levels. Only program code executing at a certain privilege level is permitted to map memory and to assign access permission to the mapped memory, such as read-only, writable, and executable. Control code executing on the processor at that privilege level, in response to a request from other code executing at a different privilege level, maps a portion of memory for loading an executable file. After the executable file has been loaded into the mapped memory, the control code then verifies a signature associated with the executable file. If the signature is verified, the control code permits the executable file to be executed by the processor at a privilege level other than the one at which the control code executes. Otherwise, the control code prevents the executable file from being executed on the processor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07802110&OS=07802110&RS=07802110
owner: Microsoft Corporation
number: 07802110
owner_city: Redmond
owner_country: US
publication_date: 20040825
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","SYSTEM AND METHOD OF THE PRESENT INVENTION"],"p":["The subject matter of this application is related to the subject matter of the following co-pending applications, each of which is incorporated herein by reference it its entirety:","Ser. No. 10\/101,999, filed Mar. 19, 2002, entitled \u201cSecure Digital Data Format And Code Enforced Policy\u201d; and","Ser. No. 10\/632,250, filed Aug. 1, 2003, entitled \u201cMedia Data Protection with Secure Installer\u201d; and","Ser. No. 10\/925,697, filed Aug. 25, 2004, entitled \u201cSystem and Method for Secure Computing\u201d.","This invention generally relates to validating digital data before enabling its use, and more particularly, to a system and method for ensuring that program code to be executed on a processor is properly signed and has not been modified.","The personal computer provides a platform on which anyone willing to invest the effort in programming can write programs that can carry out almost any desired function, limited only by the constraints of the programming language, the operating environment, and the hardware on which the program is executed. The manufacturers of personal computers and those providing the operating systems and programming tools place little restriction on how a user chooses to use their respective products. However, there are instances where it may be important to restrict how computing devices are used. In the broadest sense, a computing device may be any device that includes a processor that executes program code stored in a memory to perform some function. Thus, a computing device can have a dedicated function, or may be very general in functionality, just as a typical personal computer is. As used herein, the terms \u201ccode,\u201d \u201cprogram code,\u201d and \u201ccontrol code\u201d refer to a set of instructions that are executed by a machine, such as a processor of a computing device.","One type of computing device that is similar in some ways to a personal computer, yet is more specialized in its primary function, is a multimedia console. Although multimedia consoles can often perform other functions, their primary function is to execute machine instructions, or program code, to enable one or more users to play various types of multimedia, such as video, audio, and games. The companies that produce multimedia consoles have a substantial interest in controlling various aspects of any multimedia software that is executed on their consoles. For example, they will want to ensure that the quality of the multimedia software meets certain specifications. Since the manufacturers of multimedia consoles typically license other companies to produce multimedia software that is usable on their multimedia consoles, it is preferable to preclude unlicensed software from being used on the console. Aside from the loss of revenue that would result if unlicensed software is played on a multimedia console, there is also an issue of maintaining quality control over software that is played on the multimedia console. Also, it will be important to ensure that software licensed for use on a multimedia console has not been modified after it was approved for distribution and released to the public. Without such controls being applied, multimedia software might be \u201chacked\u201d to circumvent licensing restrictions or to add features or functionality that were not included in the authorized software when it was originally approved for distribution by the software company under license from the maker of the multimedia console.","In one class of multimedia consoles, referred to as game consoles, hardware-related techniques have been used in the past for authenticating software plug-in cartridges used to store game software. For example, in some game consoles, the housing of authorized software game cartridges and a corresponding receptacle in the game console are formed to prevent cartridges of a different shape from being inserted into the receptacle. In addition, some game cartridges include a processor and a read only memory (ROM) that stores specific data needed to authenticate the cartridge. If the result of a calculation carried out by both the processor in the game console and the processor in the cartridge do not match, the game console will not enable the software for the game stored in the cartridge to execute on the game console.","Because of the richness of the graphics and the complexity of games and multimedia content designed to run on current generation multimedia consoles, the multimedia software is more efficiently distributed on optical storage media, such as compact disc-read only memory discs (CDROMs) or digital versatile discs (DVDs). Accordingly, alternative approaches that do not rely upon the physical shape of the medium on which the multimedia software resides must be employed. Details of how other multimedia console manufacturers have chosen to address this problem are not readily available. Clearly, systems and methods for determining whether software distributed on these media is properly signed and has not been modified or altered are desirable.","Many processors used in various computing devices provide support for assigning different levels of \u201cprivilege\u201d to different executable program code within a computer system as a form of security against unauthorized execution of program code. Program code can include source code written in a high level programming language, assembly language, or machine-language, and the code can be executed in compiled form or via interpretation. With processors that support different privilege levels, some program code may be permitted to execute on the processor at a higher privilege level than other code. Generally, program code that executes at a \u201chigher\u201d privilege level will have greater access to certain parts of the instruction set of the processor and to other hardware resources of the computing device.","A privilege level, sometimes also referred to as a \u201cring,\u201d can be thought of as a logical division of hardware and software within a computing device. A privilege level (or ring) typically determines the total range or ranges of memory that executing program code can access as well as the range of instructions within the total instruction set of a processor that can be executed by the processor on behalf of that program code. An attempt by certain program code to access a memory range or a processor instruction outside of its privilege level typically will result in a processor fault. Program code afforded a higher privilege level (or ring) typically has privileges inclusive of that of other program code afforded a lower privilege level (or ring). Some processors support just two privilege levels, while others provide support for three, four, or more privilege levels.","For example, the architecture of the x86 series of processors manufactured by Intel Corporation provide four privilege levels, which range from \u201cRing 0,\u201d the highest privilege level, to \u201cRing 3,\u201d the lowest privilege level. Program code assigned to a particular privilege level can only access data and other programs which are assigned to the same or a lower privilege level. Thus, program code assigned to \u201cRing 2\u201d can invoke (i.e., call) other program code assigned to Ring 2 as well as program code assigned to Ring 3, but it can not make a direct call to program code at either Ring 1 or Ring 0. As another example, the PowerPC\u00ae microprocessor architecture developed jointly by IBM Corporation, Motorola, Inc. and Apple Computer, Inc. supports three privilege levels referred to as the hypervisor mode (highest level), supervisor mode, and user mode (lowest level).","Generally, the current privilege level at which a processor executes certain program code is established by setting an appropriate bit or combination of bits in a hardware register within the processor. The details of the privileges provided at each level are implementation dependent, and not essential to the understanding of the present invention.","The privilege level concept is most often used to prevent full access to computing resources by application programs. Typically, an operating system developer will assign the highest privilege level to certain key portions of the operating system, such as the operating system kernel, but will relegate other operating system services and application programs to lower privilege levels. In order to obtain services that employ resources not directly available to application programs, application programs need to call operating system routines through the operating system interface. Those operating system routines can then promote the current privilege level of the processor to the higher privilege level in order to access the necessary resources, carry out the task requested by the application program, and then return control to the application program while simultaneously demoting the privilege level of the processor back to the lower level. Privilege levels can also be used to prevent the processor from executing certain privileged instructions on behalf of an application program. For example, instructions that alter the contents of certain registers in the processor may be privileged, and may be executed by the processor only on behalf of an operating system routine running at the highest privilege level. Generally, restricted instructions include instructions that manipulate the contents of control registers, such as the registers of a memory management unit, and special operating system data structures.","Another mechanism that many processors employ to provide security against unauthorized use of digital data or program code in a computing device is the ability to grant different access permissions to different locations of the memory of the computing device. Access permissions are sometimes also provided to ranges of memory locations, such as a \u201cpage\u201d of memory in a system that supports allocation of memory \u201cpages,\u201d either in real memory or virtual memory. For example, real or virtual memory may be divided into pages of a fixed size, such as 4 kilobytes.","Many processors support several types of memory access permissions that can be applied to a given location or a given page of memory, such as READ, WRITE, and EXECUTE permissions. Different combinations of these permission can be applied to a given location or page of memory to effect a desired level of protection. For example, a page of memory assigned only the READ permission will be read-only, whereas a page of memory assigned both the READ and WRITE permissions will permit both read and write access to the page (i.e., \u201cread\/write\u201d access). A page or portion of memory assigned the WRITE permission is said to be \u201cwritable.\u201d A memory page having the EXECUTE permission (which can be combined with the READ and WRITE permissions) can be used for the purpose of enabling any program code stored in the memory page to be executed. That is, program code stored in such a memory page has permission to be executed by the processor; the memory page is said to be \u201cexecutable.\u201d Typically, a table is maintained by the processor that indicates the various access permissions assigned to any memory locations that have been allocated to the operating system or an application program.","While the concepts of privilege levels and memory access permissions are useful in placing some restrictions on data and program code within a computing device, neither one of those concepts alone is sufficient to ensure that only properly signed code is executed by a processor and that such program code has not been modified or altered. Systems and methods for ensuring that only properly signed program code is executed on a processor and that such program code has not been modified or altered continue to be desirable. The present invention addresses this need.","The present invention is directed to systems and methods for ensuring that only properly signed program code (in the form of an executable file) is executed in a computing device and that such program code has not been modified or altered prior to execution. The present invention takes advantage of support in a processor for different privilege levels, and in particular, support for limiting to a particular privilege level the ability of program code to map memory and to assign access permissions to the mapped memory. According to the present invention, first control code is provided that executes on the processor at a privilege level that permits the first control code, and only the first control code, to map portions of memory and to designate the mapped portions of memory as read-only, writable, or executable (i.e., assigning or setting access permissions on the mapped memory). The first control code receives requests from other code executing at a different privilege level (one that does not permit mapping of memory or assigning of access permissions) to map a portion of memory for loading an executable file. In one embodiment, such requests are received from second control code running in a lower privilege level that does not permit mapping of memory or assigning of access permissions. In response to such a request, the first control code, on behalf of the other code (e.g., the second control code), maps a portion of memory for loading the executable file. The other code is then responsible for loading the executable file into the mapped memory. Once the executable file is loaded, the first control code then verifies a signature associated with the executable file. In one embodiment of the invention, the first control code may designate the mapped portion of memory as read-only by, for example, setting a READ permission on the mapped portion of memory, after the executable file has been loaded into the mapped portion of memory. This prevents other program code from attempting to modify the executable file before the first control code can verify the signature. If the signature is verified (and the integrity of the file is also verified), the first control code permits the executable file to be executed by the processor at a less privileged level than the level at which the first control code executes. In this manner, the first control code ensures that the executable file is properly signed and verifies the integrity of the executable file before permitting any program code within the executable file to be executed.","Other features and advantages of the invention will become evident hereinafter.","An embodiment of the present invention is described below in regard to its use in a multimedia console that is designed to execute multimedia software distributed on a portable, removable computer-readable medium. It will be recognized that the present invention may also be implemented in any other computing device in which it is desired to ensure that only properly signed software is executed on the device and that such software has not been modified prior to use, including, by way of example and without any intended limitation, satellite receivers, set top boxes, arcade games, personal computers (PCs), portable telephones, personal digital assistants (PDAs), and other hand-held devices.","Exemplary Computing Environment",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":["100","100","101","102","104","106","109","102","104","101","102","104","106","100","109","106","106","109","106","109","106","109","101","106","109"]},"The processor  may further comprise a memory management unit (MMU)  to manage and support the mapping of memory within the console , including support for and management of virtual memory.","In the present embodiment, the processor  supports the execution of program code at different privilege levels (sometimes also referred to as \u201crings\u201d). In the present embodiment, only program code executing at a first, or \u201chighest\u201d one of the privilege levels is permitted to map memory (i.e., map a page of virtual memory to a page of real memory) and to assign access permissions to the mapped memory (i.e., designate the mapped memory as read-only or writable and as executable or not). In one embodiment, the processor  implements the PowerPC\u00ae 64 architecture available from IBM Corporation, it being understood, however, that this is merely one example of a suitable processor architecture for practicing the present invention and that the present invention is by no means limited to any particular processor architecture.","In one embodiment, the processor enables different combinations of access permissions, such as READ, WRITE, and EXECUTE permissions, to be applied to a portion of memory, such as a page, to effect a desired level of protection. For example, a page of memory can be assigned only the READ permission in order to designate that page as read-only. A page of memory can also be assigned both the READ and WRITE permissions in order to permit both read and write access to the page (i.e., \u201cread\/write\u201d access). A page of memory assigned the WRITE permission is said to be designated as \u201cwritable.\u201d In combination with the other permissions, an EXECUTE permission can also be set on a memory page for the purpose of enabling any program code stored in the memory page to be executed. That is, program code stored in such a memory page has permission to be executed by the processor; the memory page is said to be designated as \u201cexecutable.\u201d If the EXECUTE permission is not set, then the processor will not allow instructions to be executed from that page. A table is maintained by the processor that indicates the various combinations of access permissions assigned to a given page of memory. It will be appreciated that different processors may implement these various forms of access permission differently. For example, another processor may implement a \u201cREAD-ONLY\u201d permission for designating a page of memory as read-only, and a \u201cREAD\/WRITE\u201d permission for designating the page as permitting read\/write access. In such a processor, the ability to designate a page of memory as executable or not may instead be implemented by a NO EXECUTE permission, which when set prevents instructions from being executed from the page and when not set permits execution. It is understood that the present invention is by no means limited to any particular implementation of these various forms of access permission in any given processor.","In one embodiment, the processor  supports three different privilege levels, designated as a \u201chypervisor\u201d mode, a \u201csupervisor\u201d mode, and a \u201cuser\u201d mode, it being understood that these terms are simply used for reference purposes, and that the privilege levels could just as easily be referred to as \u201cprivilege level 0,\u201d \u201cprivilege level 1,\u201d and \u201cprivilege level 2,\u201d or as another example, \u201cring 0,\u201d \u201cring 1,\u201d and \u201cring 2.\u201d In the present embodiment, the hypervisor mode is the highest privilege level (most privileged), and the user mode is the lowest privilege level. Only program code running in the hypervisor mode has access to resources for mapping memory and for setting access permissions on the mapped memory. Program code executing in the supervisor mode has access to most of the hardware features of the console , but does not have the ability to map memory or to set access permissions on mapped memory. Program code executing in the user mode may have restricted, or limited, access to the hardware and certain system services. In other embodiments, the processor  may have a different number of privilege levels, fewer or greater.","A graphics processing unit (GPU)  and a video encoder\/video codec (coder\/decoder)  form a video processing pipeline for high speed and high resolution graphics processing. Data is carried from the graphics processing unit  to the video encoder\/video codec  via a bus. The video processing pipeline outputs data to an A\/V (audio\/video) port  for transmission to a television or other display. A memory controller  is connected to the GPU  to facilitate processor access to various types of memory external to the processor, such as, but not limited to, a RAM (Random Access Memory) .","The multimedia console  includes an I\/O controller , a system management controller , an audio processing unit , a network interface controller , a first USB host controller , a second USB controller  and a front panel I\/O subassembly  that are preferably implemented on a module . The USB controllers  and  serve as hosts for peripheral controllers ()-(), a wireless adapter , and an external memory device  (e.g., flash memory, external CD\/DVD ROM drive, removable media, etc.). The network interface  and\/or wireless adapter  provide access to a network (e.g., the Internet, home network, etc.) and may be any of a wide variety of various wired or wireless interface components including an Ethernet card, a modem, a Bluetooth module, a cable modem, and the like.","Non-volatile memory  is provided to store application data that may be loaded during the boot process. A media drive  is provided and may comprise a DVD\/CD drive, hard drive, or other drive that receives some form of removable, or portable media such as, without limitation, CDROMs, digital versatile disks (DVD) or other optical media, memory cards, memory sticks, magnetic cassettes, magnetic tape, magnetic disks or other magnetic media. The media drive  may be internal or external to the multimedia console . Application data, including executable files (i.e., files containing executable program code) may be accessed via the media drive  for execution, playback, etc. by the multimedia console . The media drive  is connected to the I\/O controller  via a bus, such as a Serial ATA bus or other high speed connection (e.g., IEEE 1394).","The system management controller  provides a variety of service functions related to assuring availability of the multimedia console . The audio processing unit  and an audio codec  form a corresponding audio processing pipeline with high fidelity and stereo processing. Audio data is carried between the audio processing unit  and the audio codec  via a communication link. The audio processing pipeline outputs data to the A\/V port  for reproduction by an external audio player or device having audio capabilities.","The front panel I\/O subassembly  supports the functionality of the power button  and the eject button , as well as any LEDs (light emitting diodes) or other indicators exposed on the outer surface of the multimedia console . A system power supply module  provides power to the components of the multimedia console . A fan  cools the circuitry within the multimedia console .","The CPU , GPU , memory controller , and various other components within the multimedia console  are interconnected via one or more buses, including serial and parallel buses, a memory bus, a peripheral bus, and a processor or local bus using any of a variety of bus architectures.","When the multimedia console  is powered ON, program code and data may be loaded from the non-volatile memory  into memory  and\/or caches ,  and executed on the processor . Application program code may present a graphical user interface that provides a consistent user experience when navigating to different media types available on the multimedia console . In operation, applications and\/or other media contained within the media drive  may be launched or played from the media drive  to provide additional functionalities to the multimedia console .","The multimedia console  may be operated as a standalone system by simply connecting the system to a television or other display. In this standalone mode, the multimedia console  allows one or more users to interact with the system, watch movies, or listen to music. However, with the integration of broadband connectivity made available through the network interface  or the wireless adapter , the multimedia console  may further be operated as a participant in a larger network community.","The present invention takes advantage of the support in the processor  for different privilege levels, and in particular, the support for limiting to a particular privilege level the ability of program code to map a virtual page of memory to a real page of memory and to assign access permissions to the mapped memory, in order to provide a mechanism for ensuring that only properly signed executable files can be executed on the processor and that such executable files are not tampered with or modified prior to execution. According to the present invention, first control code is provided that executes on the processor at a privilege level that permits the first control code, and only the first control code, to map portions of memory and to designate the mapped portions of memory as read-only, writable, or executable (i.e., setting access permissions on the mapped memory). The first control code receives requests from other code executing at a different privilege level (one that does not permit mapping of memory or assigning of access permissions) to map a portion of memory for loading an executable file. In one embodiment, such requests are received from second control code running in a lower privilege level that does not permit mapping of memory or assigning of access permissions. In response to such a request, the first control code, on behalf of the other code (e.g., the second control code), maps a portion of memory (i.e., maps a portion of virtual memory to a portion of real memory) for loading the executable file. The other code is then responsible for loading the executable file into the mapped memory. In one embodiment, once the executable file is loaded, the first control code may designate the mapped portion of memory as read-only by, for example, removing any WRITE permission and setting a READ permission on the mapped portion of memory (if not already applied). This prevents other program code from attempting to modify the executable file at that point. The first control code then verifies a signature associated with the executable file. If the signature is verified (and the integrity of the file is verified as described more fully below), the first control code permits the executable file to be executed by the processor at a less privileged level than the level at which the first control code executes. In this manner, the first control code ensures that the executable file is properly signed and verifies the integrity of the executable file before permitting any program code within the executable file to be executed.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 2","b":["202","204","200","100","202","204","202","204","204","202"]},"In the present embodiment, the first control code  runs in a real addressing mode of the processor  and, as discussed above, it executes at a privilege level that provides access to all the resources necessary to map a virtual page of memory to a real page of memory and to assign access privileges to the mapped page of memory. For example, in the exemplary system of , the first control code  executes in a hypervisor real mode of the processor , which is the highest (most privileged) level. In other embodiments, this privilege level may be referred to as, for example, \u201cprivilege level 0\u201d or \u201cring 0.\u201d By virtue of its privilege level, the first control code  has read, write, and execute access to all the memory of the system .","In the present embodiment, the first control code  is capable of mapping pages of virtual memory to real pages of memory (i.e., physical memory) and in this regard serves as a virtual memory manager. Because the first control code  runs in the hypervisor mode of the processor, it has exclusive control over any virtual memory page tables within the processor . Consequently, it is the only program code in the system  capable of mapping or unmapping a virtual memory range to or from a real memory range, and it is the only program code capable of changing the access permissions (e.g., READ, WRITE, and EXECUTE) of a mapped virtual memory page. In the present embodiment, a single page table entry translates the virtual addresses of a page into real addresses. The page table entry stores the access permissions of the page.","Further according to the present embodiment, the second control code  is loaded into and executes from a virtual address space mapped by the first control code  into the real memory. The second control code provides other system services to other program code running on the system, such as for example, an application program. In one embodiment, the second control code  may comprise a variety of different program code modules normally associated with an operating system of a computing device, such as interrupt handlers, an operating system kernel, devices drivers, a file system, a network stack, and the like. As shown in , the second control code  executes at a lower privilege level (e.g., \u201cprivilege level 1\u201d or \u201csupervisor virtual mode\u201d) than the privilege level of the first control code . The second control code  thus does not have the ability to map pages of virtual memory to real memory or to assign access permissions to a mapped page of memory. Preferably, it also has no access to the program code or data of the first control code , and can only request the services of the first control code  through the API provided by the first control code .","In addition to the second control code , and as discussed more fully below, in the present embodiment, properly signed executable files  may also reside in virtual memory and execute in the supervisor mode (\u201cprivilege level 1\u201d) of the processor . Alternatively, the properly signed executable file could execute at even lower privilege levels of the processor, such as the \u201cuser mode\u201d (\u201cprivilege level 2\u201d).","As will be recognized, in the present embodiment, the first control code  effectively \u201csandboxes\u201d the code and data loaded in the supervisor mode. Program code executing in the supervisor mode preferably has no access to the first control code or data that resides in the hypervisor mode. Moreover, in accordance with another feature of the present invention, the first control code  prevents any virtual memory page that is designated as executable from also being designated writable, and the first control code  prevents any virtual memory page that is designated writable from also being designated executable. That is, the first program code  does not allow a page of virtual memory to be both writable and executable at the same time. If a page is writable, it is not executable, and if a page is executable, it is not writable. Moreover, only the first control code  (and not any program code running in supervisor mode or lower privilege levels) can change the access permission of a virtual memory page.","As mentioned above, in accordance with the present invention, executable files to be loaded and executed on the system preferably have some form of digital signature associated with them that the first program code  is responsible for verifying. As discussed more fully below, such files also include one or more digests of the contents of the file that can be used to verify the integrity of the program code and data in the executable files. In one embodiment, the executable files have the format illustrated in . According to the format shown, an executable file  has a header  and a plurality of sections  that contain the program code and\/or data of the executable file. Preferably, the header contains information that identifies whether a given section has been designated as read-only or read\/write and whether the section contains executable code. Prior to distribution of the executable file on portable media that can be inserted into the media drive  of the system , a digest of each section is computed using, for example, a hashing algorithm. Each of the section digests  is then stored in the header of the file. A digest of the header  (including the section digests and other header information) is then computed, and the header digest is encrypted. The encrypted digest  is then also stored in the file. In this embodiment, the private key used to encrypt the header digest  is part of private\/public key pair generated in accordance with a public key encryption algorithm. As such, the encrypted header digest represents a form of digital signature associated with the executable file . In the case of the exemplary multimedia console  of , the executable file  may comprise multimedia software, including audio, video, or game software.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 3","FIG. 4"],"b":"304"},"At step , a header for the file is created that includes each of the section digests, and any other information that may be desired for inclusion in the header of the file. A digest of the entire header is then generated, at step , producing a header digest. At step , the header digest is encrypted with a private key. Preferably, the private key is part of a digital signature algorithm for securing and authenticating digital data, so that a corresponding public key can be used to confirm the authenticity of the data and decrypt the data. Additional information regarding digital signature algorithms may be found at http:\/\/csrc.nist.gov\/publications\/fips\/fips186 2\/fips186 2.pdf. Any suitable digital signature algorithm may be employed.","Once the header digest is encrypted, it is inserted into the file at step . At step , the executable file may then be stored on portable media or other storage devices for distribution. For example, the executable file can be stored on a CDROM or DVD for distribution to end users having an appropriate multimedia console.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIGS. 5","FIGS. 5 through 8","FIG. 4","FIGS. 1 and 2"],"b":["6","7","8"]},"Referring to , in the present embodiment, after the multimedia console  successfully boots (step ), the second control code  locates an executable file to be loaded into the memory  of the console and executed (step ). The executable file may, for example, reside on a portable medium that has been inserted into the media drive . Next, at step , the second control code  calls the first control code  (via its API) to request that enough virtual memory be mapped to real memory to hold the header and encrypted header digest of the executable file. The second control code  requests that this memory comprise writable pages. Next, at step , the second control code copies the header and encrypted header digest from the media into the mapped, writable pages in memory. At step , the second control code  then calls the first control code  to request that it verify the digital signature associated with the header. It should be noted that while the method is described in the context of a single executable file, the steps of the method illustrated in  can be performed on multiple files simultaneously, in which case multiple headers (and their respective encrypted header digests) would be loaded into memory and verified together.","Referring to , preferably at step , the first control code  changes the access permission of the pages in which the header and encrypted header digest is stored from writable to read-only. This prevents accidental or malicious tampering with the header information. In other embodiments, where there may not be a risk of the header being tampered with during the verification steps discussed below, this step may be performed at a later time. However, this step should be performed at least before returning to the second control code  in step  below.","At step , a public key that corresponds to the private key used to encrypt the header digest of the file is used to decrypt the encrypted header digest. At step , a digest of the header (which includes the section digests and other header information but not any portion of the encrypted header digest) is computed using the same algorithm (e.g., SHA 1) used to create the original header digest. The computed digest defines a confirmation digest. At step , the confirmation digest is compared to the decrypted digest. If the digests do not match, then the first control code  erases and unmaps the pages of memory that contain the header (step ) and returns to the second control code  with an error code. The attempt to load the executable file thus fails. If, however, the digests match, then the first control code  returns to the second control code  with a success code.","Referring now to , assuming that the header is successfully verified, steps  through  are then performed for each section of the file. In an alternative embodiment, these steps may only be performed for certain sections marked \u201cpreload.\u201d A preload section is one that is necessary for the software to initialize itself. In such an embodiment, it is only necessary initially to load the preload sections. Other sections would then be loaded as needed.","At step , a section of the file to be loaded is located on the media. At step , the second control code  calls the first control code  to request that enough writable, virtual memory pages be mapped to real memory to load the section. Next, at step , the second control code  copies the section from the media into the mapped pages. At step , the second control code  calls the first control code  to request that it verify the loaded section. This process will be repeated for each section to be loaded.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 8","b":["202","800","202","802","202","804","202","806","204"]},"If, however, the comparison is successful, then the section has been verified. That is, a successful comparison indicates that the section is identical to its state at the time it was stored on the portable media and that it has not been modified or tampered with. At step , if the section contains executable program code (as opposed to only data), then the first control code  changes the access permission of the pages containing the section to include the EXECUTE permission and to exclude the WRITE permission. At step , the first control code  returns to the second control code  with a success code.","Referring again to , if all of the sections are verified and properly loaded, then the second control code  initializes a process state for the executable at step , and then at step , causes the processor's instruction execution to branch to the entry point for the executable program code of the successfully loaded file. In the present embodiment, the program code of the executable file will execute in the supervisor virtual mode (privilege level 1). Thus, the method ensures that only properly signed executable files will be loaded and executed on the system and that the files have not been modified or tampered with prior to execution.","As is apparent from the above description, all or portions of the system and method of the present invention may be embodied in hardware, software, or a combination of both. When embodied in software, the methods and apparatus of the present invention, or certain aspects or portions thereof, may be embodied in the form of program code (i.e., instructions). This program code may be stored on a computer-readable medium, wherein when the program code is loaded into and executed by a machine, such as a computer or the console , the machine becomes an apparatus for practicing the invention. Computer readable media include, but are not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CDROM, digital versatile disks (DVD) or other optical disk storage, memory cards, memory sticks, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the information and which can be accessed by the console . The program code may be implemented in a high level procedural or object oriented programming language. Alternatively, the program code can be implemented in an assembly or machine language. In any case, the program code may be executed in compiled form or via interpretation.","As the foregoing illustrates, the present invention is directed to systems and methods for ensuring that only properly signed program code is executed on the system and that the program code has not been modified or altered prior to execution. It is understood that changes may be made to the embodiments described above without departing from the broad inventive concepts thereof. For example, while the invention has been described above as embodied in a multimedia console, it is understood that the present invention may be embodied in many other types of computing devices including, by way of example and without any intended limitation, satellite receivers, set top boxes, arcade games, personal computers (PCs), portable telephones, personal digital assistants (PDAs), and other hand-held devices. As such, the invention can be applied to a variety of forms of digital data and program code such as simulations, images, video, audio, text, games, operating systems, application programs or any other forms of software. Moreover, the method and system of the present invention can easily be applied to or modified for use in controlling access to digital data and program code over almost any type of network, distributed on almost any type of media or via almost any type of propagation medium, including, for example, radio frequency transmissions and optical signals, without limitation. Accordingly, it is understood that the present invention is not limited to the particular embodiments disclosed, but is intended to cover all modifications that are within the spirit and scope of the invention as defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of the invention, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, there is shown in the drawings exemplary constructions of the invention; however, the invention is not limited to the specific methods and instrumentalities disclosed. In the drawings:",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
