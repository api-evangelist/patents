---
title: Platform-independent application development framework
abstract: Embodiments of the invention provide a platform-independent application development framework for programming an application. The framework comprises a content interface configured to provide an Application Programming Interface (API) to program the application comprising a programming code to be executed on one or more platforms. The API provided by the framework is independent of the one or more platforms. The framework further comprises an application environment configured to provide an infrastructure that is independent of the one or more platforms and one or more plug-in interfaces configured to provide an interface between the application environment and the one or more platforms.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08745573&OS=08745573&RS=08745573
owner: Beek Fund B.V. L.L.C.
number: 08745573
owner_city: Dover
owner_country: US
publication_date: 20090612
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application draws priority from U.S. Provisional Patent Application No. 61\/132,211, filed on Jun. 16, 2008, and hereby incorporated by reference herein in its entirety.","The teaching herein generally relates to application development framework and more specifically to platform independent development framework for applications.","Various users across the globe communicate or perform various activities on computer and device networks. Moreover, the users interact with each other through the networks, such as the Internet. Typically, devices like personal computers are used by the users to interact over the Internet. The users can interact from various Internet websites or social networking sites, for example, Facebook, Myspace, Hi5, and Orkut etc. Recently, the development in mobile devices such as cell phones, smartphones and PDAs, computers, laptops and the like has enabled them to be used for performing various activities on networks such as the Internet. Moreover, the mobile devices can be used for real-time interaction with other users on the network. The interaction or communication can be in the form of chatting, playing interactive online games, browsing, shopping, music, video, banking, business and the like.","The rapid pace of innovation in technology has generated various types of devices and platforms. Moreover, the number of devices is increasing rapidly. For example, there are various operating systems available for the devices such as Windows, Linux, Macintosh, and Symbian, etc. Moreover, a large number of J2ME platforms are available for the mobile devices such as cell phones. Furthermore, the mobile devices have a wide rage of capabilities in terms of screen size, screen type, screen resolution, processor, and memory etc. The applications for these devices have to be developed based on their platforms. As a result, each application has to be developed based on each platform or ported to other platforms. For example, in case of computer games the programming languages typically used are JAVA, C#, C++, Action Script, and the like. Therefore, an application developed in Action Script programming language may have to be ported to other programming language when not supported by a device platform.","Typically, the programming code of an application is translated manually from one programming language to another. However, manual translation requires specific and in-depth knowledge of the programming languages of the different operating systems. Moreover, manual translation is a very time consuming process. Furthermore, the programming languages are constantly developed or get modified. Moreover, the applications have to be developed on specific development platforms compatible with the programming language used for development and the operating system of a device. Therefore, knowledge of specific tools and Application Programming Interface (API) for every device platform may be required to program an application. Some existing mechanisms, such as emulation of applications and virtual machines are available to support applications on multiple devices.","In case of virtual machine mechanisms the programming code of the application is separated into platform independent code and platform dependent code. Platform independent code is written in the virtual machine's coding language, which usually is a scripting language. Further, the code may be compiled to a binary that only the virtual machine itself knows how to execute. Since the code is never compiled to a native platform binary and must run inside the virtual machine space, there exist runtime overheads. Moreover, the existing mechanisms generate application program codes that are large or require heavy processing time. The problem is compounded with the continuously increasing number of device platforms and technology.","What is needed in the art is a framework that is required for development of applications independent of the platform of the device.","The invention provides a platform-independent application development framework. The framework comprising: a content interface configured to provide an Application Programming Interface (API) to program an application, the application comprising a programming code to be executed on one or more platforms, wherein the API is independent of the one or more platforms; an application environment configured to provide an infrastructure to program the application, wherein the infrastructure is independent of the one or more platforms; and one or more plug-in interfaces configured to provide an interface between the application environment and the one or more platforms.","The invention further provides a platform-independent application development framework. The framework comprising: a content interface configured to provide an Application Programming Interface (API) to program an application, the application comprising a programming code to be executed on one or more mobile device platforms, wherein the API is independent of the one or more mobile device platforms; an application environment configured to provide an infrastructure to program the application, wherein the infrastructure is independent of the one or more mobile device platforms; and one or more plug-in interfaces configured to provide an interface between the application environment and the one or more mobile device platforms.","The invention further provides an architecture for platform-independent development of an application, the application comprising a programming code to be executed on one or more mobile device platforms, the architecture comprising: an abstraction layer configured to: provide an Application Programming Interface (API) to program the application, wherein the API is independent of the one or more mobile device platforms; provide an infrastructure to program the application, wherein the infrastructure is independent of the one or more mobile device platforms; and provide an interface between the abstraction layer and the one or more mobile device platforms.","The invention further provides a method for platform independent development of an application. The method comprising: providing an Application Programming Interface (API) to program an application, the application comprising a programming code to be executed on one or more platforms, wherein the API is independent of the one or more platforms; providing an infrastructure to program the application, wherein the infrastructure is independent of the one or more platforms; and providing an interface between the application environment and the one or more platforms.","An article of manufacture for platform independent development of an application, comprising: an electronically accessible medium including instructions, that when executed by a processor, cause the processor to: provide an Application Programming Interface (API) to program an application, the application comprising a programming code to be executed on one or more platforms, wherein the API is independent of the one or more platforms; provide an infrastructure to program the application, wherein the infrastructure is independent of the one or more platforms; and provide an interface between the application environment and the one or more platforms.","Illustrative embodiments of the technology now will be described more fully hereinafter with reference to the accompanying drawings, in which some, but not all embodiments of the technology are shown. Indeed, the technology may be embodied in many different forms and should not be construed as limited to the embodiments set forth herein; rather, these embodiments are provided so that this disclosure will satisfy applicable legal requirements. Like numbers refer to like elements throughout.","As a preliminary matter before exploring details of various implementations, reference is made to  for illustrating a simplified block diagram of a platform independent development framework.  discloses a platform independent framework that allows a rapid platform independent application development, without the need for an application developer to know each platform. As shown in , devices , , and are connected through an application development framework , which in turn is connected to application contents , , and . Devices -can be, but not limited to a mobile device such as a cellular phone, a PDA and a smartphone, a laptop, a personal computer and the like. Examples of application contents -include a game, a message, a calendar, an address, a notepad, a user interface and other applications to be executed on devices -","Devices -may have different hardware and software platforms. Examples of software platforms include operating systems such as Windows, Linux, Macintosh, Symbian, and so forth. Moreover, devices -may have different hardware such as the screen size, screen resolution, audio and video functionality, processors and so forth. Therefore, development of an application for each of these platforms may require application content -to be written in various programming languages and functions compatible with the platforms. For example, C++ programming language may be used by Windows applications, while JAVA programming language is primarily used for developing web applets. Moreover, the resources required for each platform may be different. For example, the type and size of an image to be displayed may vary based on the screen size and screen resolution of devices -. Therefore, application contents -may be developed based on the platform of devices -","Application development framework  provides a mechanism for developing application contents -for devices -independently across multiple device platforms. Therefore, application contents -developed using application development framework  is programmed only once and can be used on various platforms of devices -. In an embodiment of the invention, application development framework  enables application content -to be developed based on platform specific requirement and platform independent requirements. In another embodiment of the invention, application development framework  provides cross-translation of programming languages for various device platforms.","In case of conventional development or porting of applications, the number of coding modules for \u2018n\u2019 number of applications and \u2018m\u2019 number of devices can be n*m. For example, when 4 applications are developed for 10 different platforms of devices, then a total of 40 coding modules for applications have to be developed. As is evident from the above calculations, the number of coding modules increases tremendously with increase in the number of applications and the type of device platforms. However, in case of applications developed through platform-independent application development framework , the number of coding modules can be n+m. For example, the application logic can be written in platform independent code by using Application Programming Interface (API) provided by application development framework . Therefore, \u2018n\u2019 number of platform independent logics is required for \u2018n\u2019 number of applications. Similarly, using application development framework  can also program the platform specific programming code for \u2018m\u2019 number of devices. Therefore, \u2018m\u2019 number of platform specific coding modules is required for \u2018m\u2019 number of devices. As a result, a total of m+n. For example, when 4 applications are developed for 10 different platforms of devices by using application development framework , then a total of 14 coding modules for applications have to be developed. As a result, the complexity of the programming code and development time can be reduced.","Application development framework  uses abstraction layer and pre-processor functionalities to enable the programming code to be developed independent of the device platforms. The abstraction layer and pre-processor functionalities are described in detail in conjunction with  respectively.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2","b":["204","204","202","206","202","206","102"],"i":["a","b ","a","b "]},"Platform independent code  and platform dependent codes -are developed by using API provided by application development framework . In an embodiment of the invention, platform independent code  and platform dependent codes -are parts of application content -. Platform dependent code -can be developed based on the native language of the specific platforms. The complete code of the application that contains the platform independent code  and platform dependent code -may be compiled to generate a binary codes -for the device platforms. Therefore, the application developed contains the complete code and any additional component or code is not required. Moreover, the processing overheard is low, because the application code is compiled into native binary code of the platform. In an embodiment of the invention, application development framework  implements abstraction layer  during the run-time of the application.","Abstraction layer  further provides infrastructure for the development of the application. The infrastructure provided by abstraction layer  includes various utilities, data structures, tools, design options, and resources required to develop the application. Examples of data structures and utilities include a set of collections like arrays and dictionaries, and examples of tools include Extensible Markup Language (XML) parsing, unicode string support and so forth. Examples of resources include images, sounds, videos and various other assets required by the application. In an embodiment of the invention, abstraction layer  includes different modules to develop the application. Examples of modules include, but are not limited to, networking, file support, rendering, resource loading, system events, system properties, and resource manipulation. Each of the modules provided by abstraction layer  include a common functionality, and a device platform specific functionality. The device platform specific functionality is implemented in the device plug-in and is explained in detail in conjunction with .",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 3","FIG. 3"],"b":["302","304","306","306","304","302"],"i":["a","b","a","b","a","b ","a","b "]},"Application development framework  implements pre-processor for device platform specific compilation of application code. In an embodiment of the invention, pre-processor functionality is implemented to map logical resources and the real resources based on the device platform. As a result, the binary codes only include needed resources and therefore, the overhead for mapping is lower. Examples of resources include images, sounds, video and so forth. Moreover, the pre-processor functionality can be used to override implementation of application for a specific device inside the same device platform family. For example, a specific model of a mobile device of the Windows Mobile platform may have a different screen resolution for displaying images. Therefore, the Graphical User Interface (GUI) can be tailored for the specific device platform by using pre-processor functionality. Moreover, the pre-processor is used for translation of the programming code across different programming languages. For example, the programming code of a game may be for a mobile phone that only supports JAVA programming language.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 4","b":["104","104","402","404","412","414"]},"Content interface  provides the API for developing the application in ADF . Further, content interface  includes application specific logic, GUI logic, various assets such as images, sounds, fonts, texts, coordinates etc., and other optional modules. Content interface  enables the developer to select the modules for developing an application. The modules provided by content interface  are part of abstraction layer , and hence, they are independent from the platform and application. Examples of modules include but are not limited to, gaming module and social network module.","Application Environment (AE)  provides infrastructure to program the application. Examples of infrastructure include design options, utilities and tools that enable the creation of applications. AE  is a part of abstraction layer , and hence, is independent from the platform of devices. AE  comprises a utility module , a control infrastructure module , and an asset management module . Utility module  provides multiple utilities and data structures for developing applications. The utilities and data structures provided by utility module  can be used for platform independent application development of application logic, GUI and other parts of the application. Examples of utilities and data structures provided by utility module  include but are not limited to collections of arrays, vector, dictionary and the like, data types, GUI data types such as point, rectangle and the like, eXtensible Markup Language (XML) support, document object models, file support, logging support, random number generators, serialize support, string manipulation, time, time formatting support and so forth.","Control infrastructure module  of AE  controls and manages the flow of application in ADF . Control infrastructure module  implements a Model-View-Controller (MVC) architecture in which a controller is split into logical modules or sub-controllers that communicate among them and with the main controller using events. The use of MVC architecture allows separation between the application logic and GUI. Further, control infrastructure module  enables the display and handling of the GUI and application logic. The various components and functionality of control infrastructure module  are explained in detail in conjunction with .","Asset management module  of AE  manages various assets for the application. Examples of assets include but are not limited to images, sounds, videos, other GUI related requirements for a platform, and so forth. Further, asset management module  allows developing a different GUIs for different types of device screen, which includes support for different resolutions, orientations, and parameters like keypad only and\/or with mouse support etc. Furthermore, asset management module  enables the use of different asset formats per device platform. For example, one device platform can use MP3 files and another can use WAV. Therefore, assets can be used inside a generic code for development of platform independent application. In an embodiment of the invention, asset management module  is implemented at pre-processing stage. As a result, the binary generated at pre-processor only includes the required assets, and hence, the processing overhead is reduced. The operation of asset management module  is explained in detail, in conjunction with .","Plug-in interface  provides interfaces between AE  and device platforms. Plug-in interfaces provide system events, and optional interfaces like rich media support for development of the applications. Plug-in interface  is used when platform specific functionality is required for an application. Plug-in interface  use plug-ins  to provide interface between AE  and device platforms. Plug-ins  are computer programs that provide platform specific functionality required to be implemented to add support for the platforms. Plug-in interface  includes various modules such as system flow, system events, system properties, networking file support, rendering, resource loading, resource manipulation and so forth. In an embodiment of the invention, each of these modules has a common functionality that is implemented in abstraction layer  and a platform specific functionality that is implemented in plug-ins . In an embodiment of the invention, in case certain platform functionality is not supported by a platform, then the functionality is emulated. Moreover, AE  notifies the application in case a particular functionality cannot be supported. For example, video playback functionality may not be supported on a low-end mobile device. Exemplary functioning of plug-in infrastructure is explained in detail in conjunction with .",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 5","b":["408","408","506","502","504","408","408","502","502","506","504","502","504","502"]},"Controller  controls the flow of the application. Controller  processes and responds to events, for example a user action. Moreover, controller  decides various events such as when to show a screen, when to change or update the logic module  and so forth. In an embodiment of the invention, control infrastructure module  may comprise multiple sub-controllers under controller . Each of the sub-controllers may be responsible for a single module or part of the logic. In an embodiment of the invention, sub-controllers can dispatch events to controller  that acts as a state machine. Subsequently, based on these events, controller  can start or stop sub-controllers or modules. User interface module  and controller  can communicate via asynchronous events. In another embodiment of the invention, events that are dispatched from user interface module  and from the network are handled by controller  and the sub-controllers. The sub-controllers can then decide to update the logic module , move to the next state in the application etc. Controller  and the sub-controllers can also dispatch events to the user interface module . For example, controller  may dispatch an event to start an animation. The use of events between the user interface module  and controller  provides better separation between their corresponding functionalities. Moreover, the developer of the application may use only logic model  and user interface module . Therefore, the developer may not program controller . As a result, the design of the application is cleaner and more flexible.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 6","b":["410","410","608","604","602","410","604","410","604","608","604"]},"Asset-mapping module  defines which logical assets  are used by each screen family or resolution combination. In an embodiment of the invention, asset-mapping module  includes a set of scripts for mapping logical assets  to real assets . The scripts provided by asset-mapping module  are managed through a GUI editor. In an embodiment of the invention, the scripts provided by asset-mapping module  are managed manually. In an embodiment of the invention, logical identifiers are associated with logical assets . Asset-mapping module  maps logical assets  to real assets  based on the logical identifiers. Examples of logical identifier include the name, location, size, or characteristics of logical assets .","In an embodiment of the invention, GUI customization of real assets  is done in the pre-processing stage. As a result, runtime overhead for executing the application is less. However, parts of the GUI can also be customized during runtime. For example, the application can ask AE  for the platform resolution, family, orientation etc., and then make decisions based on it. In an embodiment of the invention, real assets  are maintained in a single lossless format. For example, images are maintained in a PNG format. Real assets  are converted to platform specific format during the pre-processor stage. Therefore, no runtime overhead is encountered. Moreover, multiple real assets  in different formats for the same screen resolution are not required to be maintained.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 7","b":["412","412"]},"Exemplary flow for reading a number of bytes of data from a web server is illustrated in , to explain the function of plug-in interface . In an embodiment of the invention, the files module is used to provide network connectivity. The file module has two main components: an abstract functionality  and a plug-in platform specific functionality . Abstract functionality  includes various functions that are independent of the device platform. For illustration purposes, in case of networking the functions in abstract functionality  include connect-server function , read bytes function , and disconnect-server function .","As shown, connect-server function  interfaces with platform specific functionality  to create a system socket and attempts to make a connection. Similarly, read bytes function  interfaces with platform specific functionality  to read bytes from the socket. The disconnect-server function  disconnects and releases the system socket. The developer may use only abstract functionalities  of ADF , which are automatically translated to platform specific functionalities .",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 8","b":["802","104","804","404","404","806","404","412"]},"Embodiments of the invention are described above with reference to block diagrams and schematic illustrations of methods and systems according to embodiments of the invention. It will be understood that each block of the diagrams and combinations of blocks in the diagrams can be implemented by computer program instructions. These computer program instructions may be loaded onto one or more general purpose computers, special purpose computers, or other programmable data processing apparatus to produce machines, such that the instructions which execute on the computers or other programmable data processing apparatus create means for implementing the functions specified in the block or blocks. Such computer program instructions may also be stored in a computer-readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable memory produce an article of manufacture including instruction means that implement the function specified in the block or blocks. Furthermore, such computer program instructions may be made available for download and\/or downloaded over a communication network.","While the invention has been described in connection with what is presently considered to be the most practical and various embodiments, it is to be understood that the invention is not to be limited to the disclosed embodiments, but on the contrary, is intended to cover various modifications and equivalent arrangements included within the spirit and scope of the appended claims.","This written description uses examples to disclose the invention, including the best mode, and also to enable any person skilled in the art to practice the invention, including making and using any devices or systems and performing any incorporated methods. The patentable scope the invention is defined in the claims, and may include other examples that occur to those skilled in the art. Such other examples are intended to be within the scope of the claims if they have structural elements that do not differ from the literal language of the claims, or if they include equivalent structural elements with insubstantial differences from the literal languages of the claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Having thus described the invention in general terms, reference will now be made to the accompanying drawings, which are not necessarily drawn to scale, and wherein:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
