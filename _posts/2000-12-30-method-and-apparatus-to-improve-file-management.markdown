---
title: Method and apparatus to improve file management
abstract: Techniques to manage a file are described. An apparatus may comprise a file system interface for a client to receive a request for a file having a file name. The client may generate a unique identifier for the file name in response to the request using a stream cone messaging system, with the unique identifier to represent the file name and comprising a fewer number of bits than the file name. An interconnect system connected to the client may communicate the unique identifier and file name to the server. Other embodiments are described and claimed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06928426&OS=06928426&RS=06928426
owner: Intel Corporation
number: 06928426
owner_city: Santa Clara
owner_country: US
publication_date: 20001230
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["This disclosure relates to computer and communication systems. More particularly, it relates to methods and apparatus to improve file management within a computer and communication system.","Computer and communications systems are frequently similar in architecture. Each system may comprise a number of separate components each designed to perform certain functions. The components may communicate information to other components over an interconnect system. An interconnect system operates to manage the transfer of information over a communications medium, such as metal leads, twisted-pair wire, co-axial cable, fiber optics, radio frequencies and so forth. Communications between components typically help coordinate operations of the individual components so that they may act as a cohesive system. This type of distributed system architecture may provide certain advantages in terms of performance, redundancy, scalability and efficiency.","There are disadvantages, however, associated with this type of system design. One disadvantage is that a component may have to remain idle as it waits for information from another component. Idle time may represent an inefficient use of system resources. Another disadvantage is that functionality may be allocated to components in a manner that increases the amount of information communicated between components. This increase in communications increases demands on the finite resources of the interconnect system.","In the following detailed description, numerous specific details are set forth in order to provide a thorough understanding of the embodiments of the invention. It will be understood by those skilled in the art, however, that the embodiments of the invention may be practiced without these specific details. In other instances, well-known methods, procedures, components and circuits have not been described in detail so as not to obscure the embodiments of the invention.","Embodiments of the invention may improve performance of a distributed system by reducing idle time for distributed components as well as bandwidth demands for the interconnect system. More particularly, one embodiment of the invention may improve performance of a distributed system used for file management. Consequently, this may reduce delays associated with file operations. Accordingly, a user may benefit in terms of more responsive applications and services.","A file management system typically comprises a client and a server. A client in this context may refer to a requester of services. A server in this context may refer to a provider of services. The client typically sends a file request to a server over an interconnect system. The file request may be in the form of a message, and may include a function request and a file name. A message in this context may comprise one or more alphanumeric characters, symbols or logical expressions that when combined represent, for example, control words, commands, instructions, information or data. The message could vary in composition from a single bit to entire phrases, for example. The server associates a unique identifier with the file name, identifies location information for the file, and stores it with the unique identifier. The server then sends the unique identifier back to the client. The client receives the unique identifier and uses it in lieu of the file name for subsequent file requests.","A unique identifier is assigned to a file name to reduce bandwidth demands on the interconnect systems. A file name may comprise a number of alphanumeric characters or symbols (\u201ccharacter string\u201d), for example. Each character or symbol is converted to one or more bits, typically with 8 bits (e.g., 1 byte) per character. Since a file name may comprise many characters, the interconnect system may have to transport a relatively large number of bits. To reduce this problem, the server may assign a unique identifier to each file name and sends the unique identifier to the client. The unique identifier is typically smaller in length than the file name. For example, a unique identifier may have a length of 32 or 64 bits. The client may then use the unique identifier for subsequent file requests.","There are disadvantages, however, to having the server assign a unique identifier to a file name. One disadvantage is that the client may have to remain idle as it waits for the unique identifier prior to processing subsequent file request. Another disadvantage is that the client and server may need to communicate more information than necessary, thereby increasing demands on the interconnect system.","With respect to the first disadvantage, the client may have to remain idle as it waits for the unique identifier from the server. To initiate the assignment process, the client sends a message to the server requesting assignment of a unique identifier to a file name. The server associates a unique identifier with the file name, identifies location information for the file, and stores it with the unique identifier. The server then sends a message with the unique identifier back to the client. While waiting to receive the unique identifier from the server, the client may receive subsequent file requests with the same file name. The client may not be able to begin processing these file requests until the entire assignment process is completed. As a result, the client may be forced to remain idle during this time period.","With respect to the second disadvantage, the client and server may need to communicate unnecessary information to perform the assignment function, thereby increasing demands on the interconnect system. A file management system as described above requires at least two messages. The client sends a first message to the server requesting assignment of a unique identifier to a file name. The server sends a second message to the client with the unique identifier. Each message requires use of a certain amount of bandwidth from the interconnect system. Bandwidth in this context may refer to the speed at which information can be transferred over an interconnect system, and is typically measured in kilobits per second (kbps). By way of contrast, one embodiment of the invention may perform the assignment process using only one message, thereby potentially reducing bandwidth demands on the interconnect system by as much as 50%.","Embodiments of the invention may improve performance of a distributed system by reducing idle time for a client as well as bandwidth demands for the interconnect system. One embodiment of the invention assigns a unique identifier to a file name at the client, and sends the unique identifier to the server. This may reduce client idle time since the client may begin processing subsequent file requests without having to wait for a message from the server. This may also reduce bandwidth demands since the server does not need to send a message back to the server to complete the assignment process, or alternatively, may send a message that is shorter than those needed by previous file management systems.","It is worthy to note that any reference in the specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means in this context that a particular feature, structure, or characteristic described in connection with the embodiment may be included in at least one embodiment of the invention. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification do not necessarily all refer to the same embodiment.","Referring now in detail to the drawings wherein like parts are designated by like reference numerals throughout, there is illustrated in  a system  suitable for practicing one embodiment of the invention. As shown in , system  comprises a client  and a server  connected by an interconnect system . The term \u201cclient\u201d as used herein may refer to any requestor of information. The term \u201cserver\u201d as used herein may refer to any provider of information.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["200","102","200","202","204","208","210","204","202","204","208","200","210","202","204","208"]},"Processor  can be any type of processor capable of providing the speed and functionality desirable for various embodiments of the invention. For example, processor  could be a processor from a family of processors made by Intel Corporation, Motorola, Compaq or Sun Microsystems. In one embodiment of the invention, processor  may be a dedicated processor to manage input\/output (I\/O) devices, such as hard drives, keyboards, printers, network interface cards and so forth. This processor is typically referred to as an I\/O processor (IOP).","In one embodiment of the invention, memory  comprises a machine-readable medium and may include any medium capable of storing instructions adapted to be executed by a processor. Some examples of such media include, but are not limited to, read-only memory (ROM), random-access memory (RAM), programmable ROM, erasable programmable ROM, electronically erasable programmable ROM, dynamic RAM, magnetic disk (e.g., floppy disk and hard drive), optical disk (e.g., CD-ROM) and any other media that may store digital information. In one embodiment of the invention, the instructions are stored on the medium in a compressed and\/or encrypted format. As used herein, the phrase \u201cadapted to be executed by a processor\u201d is meant to encompass instructions stored in a compressed and\/or encrypted format, as well as instructions that have to be compiled or installed by an installer before being executed by the processor. Further, client  may contain various combinations of machine-readable storage devices through various I\/O controllers, which are accessible by processor  and which are capable of storing a combination of computer program instructions and data.","Memory  may store and allow execution by processor  of program instructions and data to implement the functions of a client, such as client  and client . In one embodiment of the invention, memory  includes a set of program instructions that will be collectively referred to herein as a file system interface .","File system interface  may be an interface that operates to provide access to one or more files for system . An interface in this context may refer to a defined protocol by which one software module may access functionality from another software module. A file in this context refers to a discrete set of data stored in memory, such as in memory  or a hard drive. File system interface  may receive a request to perform certain operations for a file, such as create, open, seek, read, write, rename, delete, copy, move, and so forth. The request may originate from a host OS or an application program, for example. A host OS may comprise an OS for a system. For example, if an embodiment of the invention was implemented as part of a personal computer, the host OS might comprise an OS sold by Microsoft Corporation, such as Microsoft Windows\u00ae 95, 98, 2000 and NT, for example.","In one embodiment of the invention file system interface  operates as an Operating System Service Module (OSM) as defined by the Intelligent I\/O Specification (IO) developed by the IO Special Interest Group (SIG) (IO SIG), version 1.5,adopted in April of 1997,and available from \u201cwww.i20sig.org\u201d (\u201cIO Specification\u201d), although the invention is not limited in scope in this respect.","By way of background, the IO Specification defines a standard architecture for intelligent I\/O that is independent of both the specific device being controlled and the host operating system (OS). Intelligent I\/O in this context refers to moving the function of processing low-level interrupts from a central processing unit (CPU) or other processor to I\/O processors (IOPs) designed specifically to provide processing for I\/O functions. This may improve I\/O performance as well as permit the CPU or other processor to provide processing functionality for other tasks. An interrupt in this context refers to a request to access an I\/O device, such as a hard drive, floppy disk drive, printer, monitor, keyboard, network interface card (NIC) and so forth.","The IO Specification describes an OSM, an Intermediate Services Module (ISM) and a Hardware Device Module (HDM). The OSM may be a driver that operates as an interface between a host OS and an ISM. A driver in this context refers to a set of program instructions that manage operations of a particular component, device or software module. The ISM may operate as an interface between the OSM and a Hardware Device Module (HDM). The ISM may perform specific functionality for I\/O management functions, network protocols or peer-to-peer functionality such as background archiving, for example. The HDM may be a driver that operates to control a particular I\/O device.","The IO Specification defines a communications model that comprises a message-passing system. The OSM, ISM and HDM communicate and coordinate operations by passing information in the form of messages through a message layer. A message layer in this context may manage and dispatch requests, provide a set of Application Programming Interfaces (APIs) for delivering messages, and provide a set of support routines to process messages.","In one embodiment of the invention, file system interface  operates as an OSM in accordance with the IO Specification. In one embodiment of the invention, file system interface  receives file requests from an application program via the host OS, translates the request into a message in accordance with the IO Specification, and sends it to a file system manager (described below) for processing. An application program in this context refers to a program that provides a predetermined set of functions for specialized tasks, typically having a user interface to facilitate the processing of commands and instructions between a user and the computer system. Examples of application programs might include a word processor, spread sheet, database or Internet browser.","Interface  may comprise any suitable technique for controlling communication signals between computer or network devices using a desired set of communications protocols, services and operating procedures, for example. In one embodiment of the invention, interface  may operate, for example, in accordance with the PCI Specification and the IO Specification. In another embodiment of the invention, interface  may operate in accordance with the Transmission Control Protocol (TCP) as defined by the Internet Engineering Task Force (IETF) standard 7, Request For Comment (RFC) 793,adopted in September, 1981,and the Internet Protocol (IP) as defined by the ETF standard 5,RFC , adopted in September, 1981,both available from \u201cwww.ietf.org.\u201d Although interface  may operate with in accordance with the above described protocols, it can be appreciated that interface  may operate with any suitable technique for controlling communication signals between computer or network devices using a desired set of communications protocols, services and operating procedures, for example, and still fall within the scope of the invention.","Interface  also includes connectors for connecting interface  with a suitable communications medium. Interface  may receive communication signals over any suitable medium such as copper leads, twisted-pair wire, co-axial cable, fiber optics, radio frequencies, and so forth. In one embodiment of the invention, the connectors are suitable for use with a bus to carry signals that comply with the PCI Specification.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 3","FIG. 3","FIG. 3","FIG. 3"],"b":["300","106","300","302","304","308","310","302","304","308","310","202","204","208","210","2","300","302","300","302","300","202"]},"In one embodiment of the invention, memory  contains program instructions for a file system manager . File system manager  performs file management and provides access to a storage medium (not shown) containing a plurality of files. File system  performs file operations such as create, open, seek, read, write, rename, delete, copy, move, and so forth, in response to file requests received from file system interface . One example of file system interface  includes an ISM operating in accordance with the IO Specification, although the scope of the invention is not limited in this respect.","The operation of systems ,  and  will be described in more detail with reference to . Although  presented herein include a particular sequence of operations, it can be appreciated that the sequence of operations merely provides an example of how the general functionality described herein may be implemented. Further, the sequence of operations does not necessarily have to be executed in the order presented unless otherwise indicated.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 4","b":["206","106","206"]},"As shown in , a client receives a request to access a file having a file name at block . The client associates the file name with an identifier at block . The client sends the associated identifier and file name to a server at block . The client stores the associated identifier and file name in memory at block . The client receives an acknowledgement message from the server at block .","Once the client assigns an identifier to a file, the identifier is used for future requests for the file. The client receives a second request at the client to access the file. The client retrieves the identifier associated with the file name from memory. The client sends the second request to the server using the associated identifier.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 5","b":["306","106"]},"As shown in , a server receives a file name and associated identifier for a file at block . The server sends an acknowledgement message to the client at block . The server searches for location information for the file at block . The server associates the location information with the identifier at block . The server stores the associated location information and identifier in memory.","Once the server indexes the location information for a file using the identifier, the server can use the identifier to access the location information for subsequent file requests. The server receives a second request to access the file having the identifier. The server retrieves the location information from memory using the identifier.","The operation of systems ,  and , and the flow diagrams shown in , may be better understood by way of example. An application program sends a request to read information from a file with a file name \u201ctest file one\u201d to the host OS of system . A unique identifier in this context refers to a series of alphanumeric characters that when combined represent a unique word, value or binary string to the client, server and\/or system with respect to other words, values or binary strings used by the client, server and\/or system. The host OS passes the file request to file system interface . File system interface  generates a unique identifier \u201cA\u201d and assigns it to file name \u201ctest file one.\u201d In this embodiment of the invention, the unique identifier \u201cA\u201d may be a hexidecimal 32 bit number, for example. File system interface  creates a message \u201cidentify (test file one, A),\u201d and places it in an outbound message queue for transport over connection  to file system manager . The outbound message queue in this context refers to a queue such as first-in-first-out (FIFO) that is used to hold messages until the interconnect system can transport the message. File system interface  stores \u201ctest file one\u201d with \u201cA\u201d in a lookup table in memory .","File system manager  receives the message over connection . File system manager  parses the message and invokes the function \u201cidentify (test file one, A).\u201d The term parses in this context refers to separating individual characters or sub-sets of characters from the message that represent, for example, commands, control words, file names, data, function calls, sub-routine names, flags and so forth. The term \u201cinvokes\u201d in this context refers to a command sent to the processor to begin executing program instructions associated with a given function or sub-routine. This function takes as inputs \u201ctest file one\u201d and \u201cA,\u201d and informs file system manager  that the file name \u201ctest file one\u201d will be referenced in subsequent file requests as \u201cA.\u201d This may be accomplished by updating a lookup table in memory by storing the file name and unique identifier together as corresponding or linked terms, that is, one may be found by searching for the other. File system manager  searches for location information for file \u201cA,\u201d which is typically located on a storage device such as a hard drive. Examples of location information may include addressing information, device, cylinder number and track number, although the invention is not limited in scope in this respect. File system manager  associates the location information with identifier \u201cA,\u201d and stores the location information with identifier \u201cA\u201d in a lookup table in memory . File system manager  sends an acknowledgement message to file system interface  that the file name identifier and location information have been received. An acknowledgement message in this context refers to a short message indicating that a previous message was received. The acknowledgement message may comprise a single bit, character, word or phrase, as desired by a particular system.","Subsequent file requests received by file system manager  will then use identifier \u201cA\u201d when requesting operations for file name \u201ctest file one.\u201d For example, file system interface  receives a second request to perform a \u201cdelete\u201d operation for \u201ctest file one.\u201d File system interface  retrieves the previously associated identifier \u201cA\u201d for \u201ctest file one\u201d from memory. File system interface  sends a message \u201cdelete(\u2018A\u2019)\u201d to file system manager . File system manager  receives the message \u201cdelete(\u2018A\u2019)\u201d and retrieves the location information for file name \u201ctest file one\u201d using the identifier \u201cA.\u201d File system manager  then performs the requested file operation using the retrieved location information.","In one embodiment of the invention, file system interface  may be implemented as an OSM in accordance with the IO Specification and a particular host OS, such as the Linux OS version 2.3.99 pre-3 kernel available from \u201cwww.kernel.org\u201d (\u201cLinux Kernel\u201d). In this embodiment of the invention, the OSM may further comprise a stream forest OSM, a stream tree OSM, and a class specification. A class in this context may refer to a specific interface definition. A tree in this context may refer to a collection of storage objects called cones. An object in this context may refer to an instance of a class. A cone in this context may refer to a storage object that supports read, write and lock capabilities, for example. A forest in this context may refer to a collection of trees.","In this embodiment of the invention, the stream forest OSM may be used to model a collection of file systems. The stream forest OSM may provide file naming operations, such as creating a name, erasing a name, or renaming a particular forest, for example. Further, open and close operations may also be supported. The tree OSM may be used to model a particular file system. A file may be modeled as a cone. The stream forest OSM may also function to support file operations, such as to name a file, rename it, erase it, lock it from change, read it or write it, for example.","The OSM may be designed to communicate with an ISM. The ISM may further comprise a stream forest ISM and a stream tree ISM. The stream forest ISM may support the file system naming capability of the OSM. In one embodiment of the invention, the stream tree ISM may support stream cone identifiers with lengths of 2characters. The stream tree ISM may also support 2open stream cones, as well as 2possible stream cones. The tree ISM may support 2bytes for all contained stream cones. It can be appreciated that these values do not limit the scope of the invention in this respect.","In operation, the stream tree OSM, stream forest OSM, stream tree ISM and stream forest ISM may all communicate using a messaging scheme in accordance with a class specification as discussed below. This messaging scheme will be referred to as a streaming messaging scheme, and will be discussed in further detail below. A host OS may use the functionality provided by the stream forest OSM and stream tree OSM. The host OS may use the stream forest OSM to model a grouping of file systems, and the stream tree OSM to model a particular file system, for example. The stream forest OSM may use the stream forest ISM to manage groupings of file systems within an IRTOS environment. The stream tree OSM may use the stream tree ISM to manage a file system within an IO Real-Time Operating System (IRTOS) environment. The stream forest OSM and stream tree OSM may communicate with the stream forest OSM and stream tree ISM, respectively, using the stream messaging scheme. This embodiment of the invention will be further described with reference to FIG. .",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 6","FIG. 6"],"b":["600","602","604","606","608","610","610","610","612","612"],"sub":["2","2","2","2","2","2"]},"The file system interface communicates with a file system manager over a bus  that communicates signals in accordance with the PCI Specification. The file system manager may comprise a stream forest ISM , a stream tree ISM , a Redundant Array of Inexpensive Disks (RAID) ISM , a Small Computer System Interface (SCSI) HDM  and IRTOS .","In this embodiment of the invention, the modules shown in system  may be implemented using the C programming language, although the scope of the invention is not limited in this respect. Further, in this embodiment of the invention modules shown in system  support identifiers having a length of 255 characters.","Stream tree OSM  may be configured to provide access to a typical file system. Stream tree OSM  may be configured to support one or more Linux VFS required functions, as defined by the Linux Specification. Stream tree OSM  may be configured to support stream tree class messages, as discussed in more detail below. Stream tree OSM  may be configured to operate with Linux OS  using, for example, the Linux Kernel. Stream tree OSM  may support a stream tree ISM, such as stream tree ISM .","Stream forest OSM  may provide the function loctl( ) kernel interface. Stream forest OSM  may function to create a stream tree within a stream forest, using a function name such as \u201cIOCTL_SF_TREECREATE.\u201d This function may accept as inputs, for example, an input buffer defined in the C language as follows:",{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"        struct ik_sf_treecreate {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"        U32\u2003SizeInBlocks;"]},{"entry":[{},"char\u2002name[256];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":"602"},{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"         struct ik_sf_treerename {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"        char\u2003IdentifierBeforeRename [256];"]},{"entry":[{},"char\u2003IdentifierAfterRename [256];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":"602"},{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"struct ik_sf_treeerase {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"char\u2003IdentifierToErase[256];"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":"602"},"Stream tree class messages may be issued for several of the data structures. A stream tree class message may be issued, for example, for the inode operations create, lookup, make directory (\u201cmkdir\u201d), remove directory (\u201crmdir\u201d), and rename directory. A stream tree class message may be issued for various file operations, such as open, read, write, seek, and close.","Stream forest OSM  may register the contained file system with the identifier \u201ci2ofs,\u201d for example, within the Linux kernel. Stream forest OSM  may use the NULL identifier for the root tree cone container, for example. Stream forest OSM  may use the identifier \u2018.\u2019 for the current tree cone container, for example. Stream forest OSM  may use the identifier \u2018..\u2019 for the parent tree cone container, for example.","System  may contain system descriptions for one or more of the following modules:\n\n","System  may also provide the function VFS i2ofs_read super (struct super_block *sb, void *options, int silent). This function may accept the inputs as defined in Table 1.",{"@attributes":{"id":"p-0062","num":"0069"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Variable",{}]},{"entry":["Variable Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Struct","Sb","This input may specify the location where"]},{"entry":["super_block*",{},"the super block should be set."]},{"entry":["Void*","Options","This input may specify the options passed by"]},{"entry":[{},{},"mount."]},{"entry":["int","Silent","This input may specify if the mount"]},{"entry":[{},{},"operation is silent."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":["sb->s_blocksize=512.","sb->s_blocksize_bits=10.","sb->S_s_magic=IOFS_SUPER_MAGIC","sb->s_op=the super_operations structure defined in the OSM.\n\nThe function may create a new inode using a module referred to as get_empty_inode( ).\n"]}},"The inode may be set to zero, with various associated variables having the following settings:\n\n",{"@attributes":{"id":"p-0064","num":"0082"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"        struct super_block {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"         struct list_head s_list;"]},{"entry":[{},"kdev_t s_dev;"]},{"entry":[{},"unsigned long s_blocksize;"]},{"entry":[{},"unsigned long s_blocksize_bits;"]},{"entry":[{},"unsigned char s_lock;"]},{"entry":[{},"unsigned char s_dirt;"]},{"entry":[{},"struct file_system_type *s_type;"]},{"entry":[{},"struct super_operations *s_op;"]},{"entry":[{},"struct dquot_operations *dq_op;"]},{"entry":[{},"unsigned long s_flags;"]},{"entry":[{},"unsigned long s_magic;"]},{"entry":[{},"struct dentry *s_root;"]},{"entry":[{},"wait_queue_head_t s_wait;"]},{"entry":[{},"struct inode *s_ibasket;"]},{"entry":[{},"short int s_ibasket_count;"]},{"entry":[{},"short int s_ibasket_max;"]},{"entry":[{},"struct list_head s_dirty;"]},{"entry":[{},"struct list_head s_files;"]},{"entry":[{},"struct block_device *s_bdev;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0065","num":"0083"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"         struct super_operations {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"        void","(*read_inode) (struct inode *);"]},{"entry":[{},"void","(*write_inode) (struct inode *)"]},{"entry":[{},"void","(*put_inode) (struct inode *);"]},{"entry":[{},"void","(*delete_inode) (struct inode *);"]},{"entry":[{},"void","(*put_super) (struct super_block *);"]},{"entry":[{},"void","(*write_super) (struct super_block *);"]},{"entry":[{},"void","(*statfs) (struct super_block *, s6truct statfs *);"]},{"entry":[{},"int","(*remount_fs) (struct super_block *, int *, char *);"]},{"entry":[{},"void","(*clear_inode) (struct inode);"]},{"entry":[{},"void","(*umount_begin) (struct super_block *);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0066","num":"0084"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"         struct inode {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"       struct list-head i_hash;"]},{"entry":[{},"struct list_head i_list;"]},{"entry":[{},"struct list_head i_dentry;"]},{"entry":[{},"unsigned long i_ino;"]},{"entry":[{},"unsigned int i_count;"]},{"entry":[{},"kdev_t i_dev;"]},{"entry":[{},"umode_t i_mode;"]},{"entry":[{},"nlink_t i_nlink;"]},{"entry":[{},"uid_t i_uid;"]},{"entry":[{},"gid_t i_gid;"]},{"entry":[{},"kdev_t i_rdev;"]},{"entry":[{},"loff_t I_size;"]},{"entry":[{},"time_t I_atime;"]},{"entry":[{},"time_t I_mtime;"]},{"entry":[{},"time_t I_ctime;"]},{"entry":[{},"unsigned long I_blksize;"]},{"entry":[{},"unsigned long I_blocks;"]},{"entry":[{},"unsigned long I_version;"]},{"entry":[{},"struct semaphore I_sem;"]},{"entry":[{},"struct semaphore I_zombie;"]},{"entry":[{},"struct inode_operations *I_op;"]},{"entry":[{},"struct file_operations *I_fop;"]},{"entry":[{},"struct super_block *I_sb;"]},{"entry":[{},"wait_queue_head_t I_wait;"]},{"entry":[{},"struct file_lock *I_flock;"]},{"entry":[{},"struct address_space *I_mapping;"]},{"entry":[{},"struct address_space I_data;"]},{"entry":[{},"struct dquot *I_dquot[MAXQUOTAS];"]},{"entry":[{},"struct pipe_inode_info *I_pipe."]},{"entry":[{},"Struct block_dev ice I_bdev;"]},{"entry":[{},"Unsigned long I_state;"]},{"entry":[{},"Unsigned int I_flags;"]},{"entry":[{},"Unsigned char I_sock;"]},{"entry":[{},"Atomic_t I_writecount;"]},{"entry":[{},"Unsigned int I_attr_flags;"]},{"entry":[{},"__u32 I_generation;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0067","num":"0085"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"        struct inode_operations {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"         struct file_operations *default_file_ops;"]},{"entry":[{},"int (*create) (struct inode *, const char *, int, int, struct inode **);"]},{"entry":[{},"struct dentry * (*lookup) (struct inode *, struct dentry *)"]},{"entry":[{},"int (*link) (struct dentry *, struct inode *, struct dentry *);"]},{"entry":[{},"int (*unlink) (struct inode *, struct dentry *);"]},{"entry":[{},"int (*symlink) (struct inode *, struct dentry *, const char *);"]},{"entry":[{},"int (*mkdir) (struct inode *, struct dentry *, int);"]},{"entry":[{},"int (*rmdir) (struct inode *, struct dentry *);"]},{"entry":[{},"int (*mknod) (struct inode *, struct dentry *, int, int);"]},{"entry":[{},"int (*rename)(struct inode *, struct dentry *, struct inode *,struct"]},{"entry":[{},"dentry *);"]},{"entry":[{},"int (*readlink) (struct dentry *, char *, int);"]},{"entry":[{},"struct dentry * (*follow_link) (struct dentry *, struct dentry *,"]},{"entry":[{},"unsigned int);"]},{"entry":[{},"void (*truncate) (struct inode *);"]},{"entry":[{},"int (*permission) (struct inode *, int);"]},{"entry":[{},"int (*revalidate) (struct dentry *);"]},{"entry":[{},"int (*setattr) (struct dentry *, struct iattr *);"]},{"entry":[{},"int (*getattr) (struct dentry *, struct iattr *);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"System  also provides a function create (struct inode *, const char *, int, int, struct inode **). This function may accept the inputs set forth in Table 2.",{"@attributes":{"id":"p-0069","num":"0087"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Variable",{}]},{"entry":["Variable Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["struct inode*","ParentDirectory","This input may specify the input"]},{"entry":[{},{},"directory of the create operation."]},{"entry":["const char*","NewName","This input may specify the name of the"]},{"entry":[{},{},"new file system object."]},{"entry":["int","NewSize","This input may specify the new size of"]},{"entry":[{},{},"the object."]},{"entry":["Int","NewMode","This input may specify the new mode of"]},{"entry":[{},{},"the object."]},{"entry":["struct inode**","NewInode","This input may specify the new inode of"]},{"entry":[{},{},"the created object."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":{"@attributes":{"id":"ul0006-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0007","list-style":"none"},"li":["1. HANDLE may be retrieved from the OSM handle manager;","2. TYPE may be set to 1,indicating a file; and","3. SGL may be set to NewName.\n\nThe dereference of NewInode may be set with the new inode structure.\n"]}}}},"System  may also provide a function struct dentry *lookup (struct inode *, struct dentry *). This function may accept the inputs set forth in Table 3.",{"@attributes":{"id":"p-0071","num":"0092"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Variable",{}]},{"entry":["Variable Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["struct inode*","ParentDirectory","This input may specify the input"]},{"entry":[{},{},"directory of the lookup operation."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":"618","ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":{"@attributes":{"id":"ul0008-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":["1. PARENTHANDLE may be set to the handle identified within the ParentDirectory inode local data;","2. CHILDHANDLE may be set to a handle retrieved from the OSM handle manager;","3. ATTRIBUTES may be set to STREAMCONECREATE_QUERY; and","4. SGL may be set to Name.\n\nThe function may create a new inode using get_empty_inode ( ). The function may initialize the new inode by attaching the const char * variable to it via dentry relationship. The function may send a StreamConeGetInformation message to the stream tree ISM. The message may be configured as follows:\n","1. HANDLE may be set to CHILDHANDLE above; and","2. SGL may be set to a local data structure of type Information Result Block. The function may set the inode values from the Information Result Block. The function may set the dereference of the NewInode variable to the inode that has been created."]}}}},"System  may provide the function mkdir (struct inode *, struct dentry *, int). This function may accept the inputs as set forth in Table 4.",{"@attributes":{"id":"p-0073","num":"0100"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Variable",{}]},{"entry":["Variable Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["struct inode*","ParentDirectory","This input may specify the input"]},{"entry":[{},{},"directory of the mkdir operation."]},{"entry":["Struct dentry*","Name","This input may specify the name of"]},{"entry":[{},{},"the object to create."]},{"entry":["int","Mode","This input may specify the mode of"]},{"entry":[{},{},"the new directory."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0010","list-style":"none"},"li":{"@attributes":{"id":"ul0010-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0011","list-style":"none"},"li":["1. HANDLE may be set to the handle identified in the mode structure input ParentDirectory;","2. TYPE may be set to 2;and","3. SGL may be set to the input Name that contains the actual name."]}}}},"System  may provide the function rmdir (struct inode *, struct dentry *). This function may accept the inputs set forth in Table 5.",{"@attributes":{"id":"p-0075","num":"0105"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Variable",{}]},{"entry":["Variable Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["struct inode*","ParentDirectory","This input may specify the input"]},{"entry":[{},{},"directory of the lookup operation."]},{"entry":["struct dentry*","Name","This input may specify the name of"]},{"entry":[{},{},"the object to remove."]},{"entry":["int","Length","This input may specify the length of"]},{"entry":[{},{},"Name in characters."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0012","list-style":"none"},"li":{"@attributes":{"id":"ul0012-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0013","list-style":"none"},"li":["1. HANDLE may be set to the handle identified in the inode structure input ParentDirectory; and","2. SGL may be set to the input Name."]}}}},"System  may also provide the function rename (struct inode *, struct dentry *, struct inode *, struct dentry *). This function may accept the inputs set forth in Table 6.",{"@attributes":{"id":"p-0077","num":"0109"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 6"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Variable",{}]},{"entry":["Variable Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["struct inode*","OldDir","This input may specify the directory of the"]},{"entry":[{},{},"file to rename."]},{"entry":["struct dentry*","OldName","This input may specify the name of the"]},{"entry":[{},{},"object to rename."]},{"entry":["struct inode*","NewDir","This input may specify the new directory"]},{"entry":[{},{},"of the object."]},{"entry":["struct dentry*","NewName","This input may specify the new name of the"]},{"entry":[{},{},"object."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0014","list-style":"none"},"li":{"@attributes":{"id":"ul0014-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0015","list-style":"none"},"li":["1. PARENTHANDLE may be set from OldDir inode internal storage for OSM handles;","2. CHILDHANDLE may be set to new handle retrieved from the OSM handle manager;","3. ATTRIBUTES may be set to STREAMCONECREATE_QUERY; and","4. SGL may be set to OldName.\n\nThe function may send a StreamConeRename message to the ISM. The message may be configured as follows:\n","1. HANDLE may be set to the CHILDHANDLE of StreamConeIdentify;","2. NEWPARENT may be set to NewDir inode internal storage for OSM handles; and","3. SGL may be set to NewName.\n\nThe function may send a StreamConeClose message to the ISM. The message may be configured as follows: HANDLE may be set to the previous HANDLE from StreamConeRename message.\n"]}}}},"System  may also provide the function truncate (struct inode *). This function may accept the inputs set forth in Table 7.",{"@attributes":{"id":"p-0079","num":"0118"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 7"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Variable",{}]},{"entry":["Variable Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["struct inode*","File","This input may specify the file to truncate."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0016","list-style":"none"},"li":{"@attributes":{"id":"ul0016-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0017","list-style":"none"},"li":["1. HANDLE may be retrieved from the inode internal OSM handle storage; and","2. SIZE may be retrieved from the inode variable i_size.\n\nEach file within VFS  may have at least one super block, which may contain enough information about the file system to initiate activity of the file system. This super block is detailed in the C structure struct super_block, such as the one described previously. The methods variable, f_op, may provide access to file operations. The struct super_operations *s_op function may provide access to the root inode, which may be desired for the OSM.\n"]}}}},{"@attributes":{"id":"p-0080","num":"0121"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{}," struct file {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{}," struct list_head f_1st;"]},{"entry":[{},"struct dentry *f_dentry;"]},{"entry":[{},"struct file_operations *f_op;"]},{"entry":[{},"atomic_t f_count;"]},{"entry":[{},"unsigned int f_flags;"]},{"entry":[{},"mode_t f_mode;"]},{"entry":[{},"loff_t f_pos;"]},{"entry":[{},"unsigned long f_reada;"]},{"entry":[{},"unsigned long f_ramax;"]},{"entry":[{},"unsigned long f_raend;"]},{"entry":[{},"unsigned long f_ralen;"]},{"entry":[{},"unsigned long f_rawin;"]},{"entry":[{},"struct fown_struct f_owner;"]},{"entry":[{},"unsigned int f_uid;"]},{"entry":[{},"unsigned int f_gid;"]},{"entry":[{},"int f_error;"]},{"entry":[{},"unsigned long f_version;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"                    }."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":"600"},{"@attributes":{"id":"p-0081","num":"0122"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"                              struct file_operations {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"      loff_t","(*llseek) (struct file *, off_t, int)"]},{"entry":[{},"ssize_t","(*read) (struct file *, char *, size_t, loff t *);"]},{"entry":[{},"ssize_t","(*write) (struct file *, const char *, size_t, loff_t *);"]},{"entry":[{},"int","(*readdir) (struct file *, void *, filldir_t);"]},{"entry":[{},"u_int","(*poll) (struct file *, struct poll_table_struct *);"]},{"entry":[{},"int","(*ioctl) (struct inode *, struct file *, unsigned int,"]},{"entry":[{},{},"unsigned long);"]},{"entry":[{},"int","(*mmap) (struct file *, struct vm_area_struct *);"]},{"entry":[{},"int","(*open) (struct inode *, struct file *);"]},{"entry":[{},"int","(*release) (struct inode *, struct file *);"]},{"entry":[{},"int","(*fsync) (struct inode *, struct dentry *);"]},{"entry":[{},"int","(*fasynch) (int, struct file *, int);"]},{"entry":[{},"int","(*lock) (struct file *, int, struct file_lock *);"]},{"entry":[{},"ssize_t","(*readv) (struct file *, const struct iovec *, unsigned long,"]},{"entry":[{},{},"loff_t *);"]},{"entry":[{},"ssize_t","(*writev) (struct file *, const struct iovec *, unsigned long,"]},{"entry":[{},{},"loff_t *);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"         }."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"System  may provide the function llseek (struct file * ,off_t, int). This function may accept the inputs as set forth in Table 8.",{"@attributes":{"id":"p-0083","num":"0124"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 8"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Variable",{}]},{"entry":["Variable Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["struct file*","File","This input may specify the file pointer to"]},{"entry":[{},{},"seek."]},{"entry":["off_t","Offset","This input may specify the offset from"]},{"entry":[{},{},"Origin to seek to."]},{"entry":["Int","Origin","This input may specify the Origin."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0018","list-style":"none"},"li":{"@attributes":{"id":"ul0018-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0019","list-style":"none"},"li":["1. HANDLE may be set from node internal storage for OSM handles; and","2. NEWPOSITION may be set to the position obtained by calculation from Offset and Origin."]}}}},"System  may provide the function read (struct file *, char *, size_t, loff_t). This function may accept the inputs set forth in Table 9.",{"@attributes":{"id":"p-0085","num":"0128"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 9"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Variable",{}]},{"entry":["Variable Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["struct file*","File","This input may specify the file pointer"]},{"entry":[{},{},"to read."]},{"entry":["char*","Buffer","This input may specify the buffer to"]},{"entry":[{},{},"read into."]},{"entry":["Size_t","Size","This input may specify size in bytes"]},{"entry":[{},{},"to read."]},{"entry":["loff_t","SeekChange","This input specifies how much data was"]},{"entry":[{},{},"read."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0020","list-style":"none"},"li":{"@attributes":{"id":"ul0020-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0021","list-style":"none"},"li":["1. HANDLE may be set from node internal storage for OSM handles; and","2. SGL may be set to Buffer and Size."]}}}},"System  may provide the function write (struct file *, const char *, size_t, loff_t *). This function may accept the inputs set forth in Table 10.",{"@attributes":{"id":"p-0087","num":"0132"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 10"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Variable",{}]},{"entry":["Variable Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["struct file*","File","This input may specify the file pointer"]},{"entry":[{},{},"to read."]},{"entry":["Const char*","Buffer","This input may specify the buffer to write."]},{"entry":["Size_t","Size","This input may specify size in bytes"]},{"entry":[{},{},"to read."]},{"entry":["Loff_t","SeekChange","This input specifies how much data was"]},{"entry":[{},{},"written."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0022","list-style":"none"},"li":{"@attributes":{"id":"ul0022-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0023","list-style":"none"},"li":["1. HANDLE may be set from node internal storage for OSM handles; and","2. SGL may be set to Buffer and Size."]}}}},"System  may provide the function readdir (struct file *, void *, filldir_t). This function may accept the inputs set forth in Table 11.",{"@attributes":{"id":"p-0089","num":"0136"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 11"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Variable","Variable",{}]},{"entry":["Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["struct file *","File","This input may specify the file pointer to read."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0024","list-style":"none"},"li":{"@attributes":{"id":"ul0024-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0025","list-style":"none"},"li":["1. HANDLE may be set from node internal storage for OSM handles;","2. ENUMERATOR is set to Count;","3. SGL may be set to Entry's file name buffer;","4. SGL's size may be set to 255."]}}}},"System  may also provide a dentry interface as follows:",{"@attributes":{"id":"p-0091","num":"0142"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"        struct dentry {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"         int d_count"]},{"entry":[{},"unsigned int d_flags;"]},{"entry":[{},"struct inode * d_inode;"]},{"entry":[{},"struct dentry *d_parent;"]},{"entry":[{},"struct dentry *d_mounts;"]},{"entry":[{},"struct dentry *d_covers;"]},{"entry":[{},"struct list_head d_ash;"]},{"entry":[{},"struct list_head d_lru;"]},{"entry":[{},"struct list_head d_child;"]},{"entry":[{},"struct list_head d_subdirs;"]},{"entry":[{},"struct list_head d_alias;"]},{"entry":[{},"struct qstr d_name;"]},{"entry":[{},"unsigned long d_time;"]},{"entry":[{},"struct dentry_operations *d_op;"]},{"entry":[{},"struct super_block *d_sb;"]},{"entry":[{},"unsigned long d_reftime;"]},{"entry":[{},"void *d_fsdata;"]},{"entry":[{},"unsigned char d_iname[DNAME_INLINE_LEN];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Stream tree ISM  may support one or more stream tree class messages, as defined herein. Stream tree  may function and support messages from a stream tree OSM, such as stream tree OSM . Stream forest ISM  may support stream forest class messages, as defined herein. Stream forest ISM  may function and support messages from a stream forest OSM, such as stream forest OSM .","Stream forest ISM  may include a user interface. The user interface may include a user screen that may display one or more stream trees on initialization. A user may be able to create new stream trees. When creating new stream trees, the user may be presented with a screen asking for size and identification. If a stream tree is created, a stream tree class object may be created. The user may also be able to erase stream trees. The user interface may provide for confirmation of erasure of stream trees. Stream forest messages may be handled and tree objects created as appropriate.","System  may provide the message StreamConeCreate. This message may be used to create a new stream cone that will store information, and may accept the inputs as set forth in Table 12.",{"@attributes":{"id":"p-0095","num":"0146"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 12"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Variable","Variable",{}]},{"entry":["Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["U32","HANDLE","This input may specify the handle that should be"]},{"entry":[{},{},"closed."]},{"entry":["U32","TYPE","This input may specify the type to create. 1"]},{"entry":[{},{},"indicates a file and 2 indicates a directory."]},{"entry":["SGL","SGL","Specifies the identifier."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"System  may also provide the message StreamConeEnumerate. This message may be used to list one or more stream cones within a stream cone container, and may accept the inputs as set forth in Table 13.",{"@attributes":{"id":"p-0097","num":"0148"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 13"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Variable","Variable",{}]},{"entry":["Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["U32","HANDLE","This input may specify the handle that"]},{"entry":[{},{},"should be closed."]},{"entry":["U32","ENUMERATOR","This input may specify a zero-based index"]},{"entry":[{},{},"indicating which entry should be"]},{"entry":[{},{},"enumerated into the SGL."]},{"entry":["SGL","SGL","Specifies the location of the enumerated"]},{"entry":[{},{},"stream cone identifier."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"System  may retrieve the inode relating to HANDLE from the handle manager. When an enumerator is set to 0,the \u201cext2fs\u201d library call dir_iterate( ) may be used with the inode relating to handle as the parent to generate a list of stream cone identifiers on the \u201cext2\u201d filesystem. A list entry corresponding to the ENUMERATOR index may be copied into SGL.","System  may provide the message StreamConeErase. This message is used to erase a stream cone identifier, and may accept the inputs as set forth in Table 14.",{"@attributes":{"id":"p-0100","num":"0151"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 14"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Variable","Variable",{}]},{"entry":["Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["U32","HANDLE","This input may specify the handle that should be"]},{"entry":[{},{},"closed."]},{"entry":["SGL","SGL","This input may specify the name of the identifier"]},{"entry":[{},{},"that should be erased."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"System  may provide the message StreamConeGetInformation. This message may be used to retrieve information about the stream cone, and may accept the inputs as set forth in Table 15.",{"@attributes":{"id":"p-0102","num":"0153"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 15"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Variable","Variable",{}]},{"entry":["Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["U32","HANDLE","This input may specify the handle where"]},{"entry":[{},{},"information should be retrieved from."]},{"entry":["SGL","SGL","This input may specify the name of the identifier"]},{"entry":[{},{},"that should be erased."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"System  may provide the message StreamConeIdentify. This message may be used to map a handle identifier to a string identifier, and may accept the inputs as set forth in Table 16.",{"@attributes":{"id":"p-0104","num":"0155"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 16"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Variable","Variable",{}]},{"entry":["Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["U32","PARENT","This input may specify the parent handle"]},{"entry":[{},"HANDLE","stream cone container."]},{"entry":["U32","CHILD","This input may specify the child handle that"]},{"entry":[{},"HANDLE","should be mapped to the stream cone"]},{"entry":[{},{},"identifier."]},{"entry":["U32","ATTRIBUTES","This input may specify the attributes of the"]},{"entry":[{},{},"identified stream cone."]},{"entry":["SGL","SGL","This input may specify the name of the"]},{"entry":[{},{},"identifier."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"System  may provide the message StreamConeLock. This message may be used to lock a byte range of a file, and may accept the inputs as set forth in Table 17.",{"@attributes":{"id":"p-0106","num":"0157"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 17"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Variable","Variable",{}]},{"entry":["Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["U32","HANDLE","This input may specify the parent handle stream"]},{"entry":[{},{},"cone container."]},{"entry":["U64","INDEX","This input may specify the byte index that should"]},{"entry":[{},{},"be locked."]},{"entry":["U64","SIZE","This input may specify the size in bytes that"]},{"entry":[{},{},"should be locked."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"System  may provide the message StreamConeRead. This message may be used to read a block from a stream cone, and may accept the inputs as set forth in Table 18.",{"@attributes":{"id":"p-0108","num":"0159"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 18"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Variable","Variable",{}]},{"entry":["Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["U32","HANDLE","This input may specify the parent handle stream"]},{"entry":[{},{},"cone container."]},{"entry":["U64","SIZE","This input may specify the size of the block to"]},{"entry":[{},{},"read."]},{"entry":["SGL","SGL","This input may specify where in memory the file"]},{"entry":[{},{},"should be stored."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"System  may also provide a message StreamConeRelease. This message may be used to close an identification of the specified handle, and may accept the inputs as set forth in Table 19.",{"@attributes":{"id":"p-0110","num":"0161"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 19"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Variable","Variable",{}]},{"entry":["Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["U32","HANDLE","This input may specify the handle that should be"]},{"entry":[{},{},"closed."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"System  may provide a message StreamConeRename. This message may be used to rename a stream cone, and may accept the inputs as set forth in Table 20.",{"@attributes":{"id":"p-0112","num":"0163"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 20"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Variable","Variable",{}]},{"entry":["Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["U32","HANDLE","This input may specify the handle that"]},{"entry":[{},{},"should be renamed."]},{"entry":["U32","NEWPARENT","This input may specify the current or new"]},{"entry":[{},{},"parent handle."]},{"entry":["SGL","SGL","This input may specify the name of the"]},{"entry":[{},{},"new SGL."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"System  may also provide a message StreamConeResize. This message is used to resize a stream cone, and may accept the inputs as set forth in Table 21.",{"@attributes":{"id":"p-0114","num":"0165"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 21"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Variable","Variable",{}]},{"entry":["Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["U32","HANDLE","This input may specify the handle that should be"]},{"entry":[{},{},"renamed."]},{"entry":["U64","SIZE","This input may specify the new size of the stream"]},{"entry":[{},{},"cone."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"System  may provide a message StreamConeSeek. This message is used to change the position of a stream cone, and may accept the inputs as set forth in Table 22.",{"@attributes":{"id":"p-0116","num":"0167"},"tables":{"@attributes":{"id":"TABLE-US-00032","num":"00032"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 22"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Variable","Variable",{}]},{"entry":["Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["U32","HANDLE","This input may specify the handle that should"]},{"entry":[{},{},"be renamed."]},{"entry":["U64","NEW","This input may specify the new position of the"]},{"entry":[{},"POSITION","stream cone."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"System  may provide a message StreamConeGetInformation. This message may be used to set information regarding the stream cone, and may accept the inputs as set forth in Table 23.",{"@attributes":{"id":"p-0118","num":"0169"},"tables":{"@attributes":{"id":"TABLE-US-00033","num":"00033"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 23"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Variable","Variable",{}]},{"entry":["Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["U32","HANDLE","This input may specify the handle that should"]},{"entry":[{},{},"have information set."]},{"entry":["SGL","SGL","This input may specify the information set block."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"System  may provide a message StreamConeUnlock. This message may be used to unlock a previously set byte lock range, and may accept the inputs as set forth in Table 24.",{"@attributes":{"id":"p-0120","num":"0171"},"tables":{"@attributes":{"id":"TABLE-US-00034","num":"00034"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 24"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Variable","Variable",{}]},{"entry":["Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["U32","HANDLE","This input may specify the handle that"]},{"entry":[{},{},"should be unlocked."]},{"entry":["U64","INDEX","This input may specify the start byte of the"]},{"entry":[{},{},"range of bytes to unlock."]},{"entry":["U64","BYTECOUNT","This input may specify the byte count to"]},{"entry":[{},{},"unlock."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"System  may provide a message StreamConeWrite. This message may be used to write a block to a stream cone, and may accept the inputs as set forth in Table 25.",{"@attributes":{"id":"p-0122","num":"0173"},"tables":{"@attributes":{"id":"TABLE-US-00035","num":"00035"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 25"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Variable","Variable",{}]},{"entry":["Type","Identifier","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["U32","HANDLE","This input may specify the handle that"]},{"entry":[{},{},"should be written."]},{"entry":["U64","BYTECOUNT","This input may specify the count in bytes"]},{"entry":[{},{},"that should be written."]},{"entry":["SGL","SGL","This input may specify the block to be"]},{"entry":[{},{},"written."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"While certain features of the embodiments of the invention have been illustrated as described herein, many modifications, substitutions, changes and equivalents will now occur to those skilled in the art. It is, therefore, to be understood that the appended claims are intended to cover all such modifications and changes as fall within the true spirit of the embodiments of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The subject matter regarded as embodiments of the invention is particularly pointed out and distinctly claimed in the concluding portion of the specification. Embodiments of the invention, however, both as to organization and method of operation, together with objects, features, and advantages thereof, may best be understood by reference to the following detailed description when read with the accompanying drawings in which:",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
