---
title: Method, apparatus and system for processing graphic objects
abstract: The present application discloses a method, apparatus and system for processing graphic objects in a flow diagram. Said method comprises obtaining a flow diagram and execution stage information generated when executing said flow diagram; obtaining a layout policy, wherein said layout policy at least designates the conditions for determining a primary path in the flow diagram using the execution stage information; determining the primary path using the execution stage information based on the layout policy; and displaying prominently said primary path during displaying said flow diagram. Owing to the present invention, the elements, such as a primary path, in a diagram in which a user takes interest can be found by the user easily to facilitate the user to understand the diagram. Furthermore, the diagram automatically arranged using the present invention is usually clear enough so that it is almost not required to be manually adjusted by the user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09098940&OS=09098940&RS=09098940
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09098940
owner_city: Armonk
owner_country: US
publication_date: 20100419
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present invention relates to graph layout technologies, and more particularly, to a method, apparatus and system for processing graphic objects in a flow diagram.","A diagram editor is a development environment that automatically generates visual graphs for users. Microsoft\u00ae Visio is a more commonly used diagram editor among the existing ones and it allows the users to edit graphic objects and connection relations therebetween in a mouse drag and drop manner. After the graphic objects and the connection relations therebetween are determined, a graph can be automatically generated, and then the users may either manually adjust the graphic objects in the generated graph or only manually arrange the graphic objects in the graph thereby to generate a graph with a desired layout. Generally, the graph layout refers to how to arrange a plurality of objects with specified geometrical shapes within a limited space based on the specified requirements. The graph layout is one of the elements of graph design. Whether the graph layout is reasonable significantly influences the actual effect of a graph.","A plurality of layout algorithms are available in the prior art, and these algorithms are very useful for representing the relations between graphic objects and can calculate positions of connection lines, positions of nodes or both so as to generate a visual graph that for example presents data. . B show schematic examples of graph layouts that can be carried out using the existing diagram editors. The results obtained from the existing layout algorithms fail to completely satisfy the users' needs.  is a schematic representation of a visual graph of an order processing flow generated using the existing diagram editors. According to this figure, all graphic objects are uniformly distributed without crossings of connection lines, but it cannot be found therefrom which path or paths are primary path or paths and which paths are secondary paths. The reason is that the existing algorithms do not consider semantic meanings of the graphic objects while all the graphic objects are merely treated as plain boxes. In other words, the purpose of the existing algorithms is graphics-oriented and they intend to optimize some visual metrics, such as the number of crossings of connection lines, the distribution uniformity of graphic objects, etc. However, the above-mentioned visual metrics may not be the metrics the users care most. For example, the commonly used industrial flow diagrams usually have tens of or even hundreds of possible processing paths and different users may care the practical execution conditions of different paths instead of the visual effect of the complete flow diagram. Taking the physical distribution system as an example, the transportation department cares which transport path is the most commonly used, while the storage department cares which articles are imported and exported most frequently into and out of repository, so that the primary paths different departments expect to view in a graph are obviously different.","In view of the foregoing problems existing in the prior art, the present invention provides a method and system for arranging graphic objects in a flow diagram with consideration of execution stage information. The flow diagram referred to in the present invention refers to any graph showing state transitions. A diagram execution engine executing a flow diagram collects, by itself, data generated in the process of executing the flow diagram and stores it in a memory, or provides some interface programs, such as API, to be invoked by users, so that the users can obtain the data generated in the process of executing the flow diagram. The users can further process the obtained data in accordance with a certain layout policy(ies) (e.g., to perform mathematical operations) thereby causing the processed data to reflect said layout policy. In the following text, the execution stage information includes any data related to execution of a flow diagram or services generated when the diagram execution engine executes the flow diagram and\/or data obtained by processing the aforementioned data. After obtaining the execution stage information, a diagram arrangement unit arranges graphic objects in a graph based on the execution stage information so that the graphic objects and their connection paths conforming to the layout policy can be displayed prominently. Said prominent display can be realized by means of position arrangement, color change, highlight and\/or addition of annotation with respect to the graphic objects and their connections, and in addition, other graphic objects and other connections are correspondingly arranged, for example, it is possible to minimize the number of crossings of connection lines using the existing algorithms, and the like.","The present invention can be carried out in a plurality of implementations comprising a method, apparatus or system. As a method of processing graphic objects in a flow diagram, one embodiment of the present invention comprises at least the following operations: obtaining a flow diagram and execution stage information generated during executing said flow diagram; obtaining a layout policy, wherein said layout policy at least designates the conditions for determining a primary path in the flow diagram using the execution stage information; determining the primary path using the execution stage information based on the layout policy; and displaying prominently said primary path during displaying said flow diagram.","The present invention provides at least one of the following advantages: it is possible to arrange graphic objects in a flow diagram based on the execution stage information of the flow diagram, so that the elements (such as a primary path) in the diagram in which a user takes interest can be found by the user at a glance, and this is very important for the user to understand the diagram. Furthermore, the automatically arranged diagram is usually clear enough so that it is almost not required to be manually adjusted by the user.","The present invention will now be described in terms of specific, exemplary embodiments. It is to be understood that the invention is not limited to the exemplary embodiments disclosed. It should also be understood that not every feature of the presently disclosed method and apparatus for arranging graphic objects based on execution stage information is necessary to implement the invention as claimed in any particular one of the appended claims. Various elements and features of devices are described to enable the invention to be fully implemented. It should also be understood that throughout this disclosure, where a process or method is shown or described, the steps of the method may be performed in any order or simultaneously, unless it is clear from the context that one step depends on another being performed first.","A diagram editor not only generates a visual graph, but also can usually generate a flow diagram topology file and a graph layout file. The flow diagram topology file describes service meanings of graphic objects themselves in the generated diagram and service relations between the graphic objects, but does not care about visual properties of the graphic objects. The flow diagram topology file is an execution basis of a diagram execution engine. The graph layout file describes the visual properties of the graphic objects and of connections therebetween, such as the size, position, color, labels and the like of the graphic objects, as well as the length of the connections between the graphic objects, the presence of arrows, the labels thereon, and the like. The graph layout file is a basis for generating the visual graph. Indeed, not all diagram editors simultaneously generate the visual graph, the flow diagram topology file and the graph layout file.","What is described below is a portion of the graph layout file in an XML form which describes a subnode in a flow diagram.",{"@attributes":{"id":"p-0022","num":"0021"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003<?xml version=\u201c1.0\u201d encoding\u201cUTF-8\u201d?>"},{"entry":"\u2003. . ."},{"entry":"\u2003\u2003<children xmi:type=\u201cnotation:Node\u201d "},{"entry":"xmi:id=\u201c_ytP90MOfEd20ZYHoKMXpqA\u201d type=\u201c1003\u201d>"},{"entry":"\u2003\u2003\u2003<styles xmi:type=\u201cnotation:ShapeStyle\u201d "},{"entry":"xmi:id=\u201c_ytP90cOfEd20ZYHoKMXpqA\u201d fontName=\u201cSong Ti\u201d\/>"},{"entry":"\u2003\u2003\u2003<element xmi:type=\u201crule:BeginNode\u201d "},{"entry":"href=\u201cpm5.rule#_ytGM0MOfEd20ZYHoKMXpqA\u201d\/>"},{"entry":"\u2003\u2003\u2003<layoutConstraint xmi:type=\u201cnotation:Bounds\u201d "},{"entry":"xmi:id=\u201c_ytP90sOfEd20ZYHoKMXpqA\u201d x=\u201c99\u201d y=\u201c268\u201d\/>"},{"entry":"\u2003\u2003<\/children>"},{"entry":"\u2003. . ."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The diagram editor can be integrated with the diagram execution engine to form an integrated operation environment. The diagram editor in this integrated operation environment can generate a flow diagram topology file to be invoked by the diagram execution engine.","The diagram execution engine executes a flow diagram based on the flow diagram topology so as to form a state machine. The state machine is a concept of a mathematical model and it is defined in mathematics as a directional graph composed of a set of states and a set of corresponding transition functions. The state machine \u201cruns\u201d by responding to a series of events. Each event falls under the control of a transition function in the \u201ccurrent state\u201d, wherein the range of the function is a subset of states. The function returns to the \u201cnext\u201d (perhaps the same) state. There must be one end state among these states. Upon reaching the end state, the state machine stops. It is also possible that the flow diagram is cyclic, and then the state machine will not have the end state. Particularly speaking, the state machine is a special state and representing manner of the flow diagram. Compared with a common flow diagram, the state machine has a relatively direct and simple task. The diagram execution engine executes said flow diagram and outputs or stores in a memory some data generated in execution for use by others, and the data may comprise data generated from any state of said state machine. Since the data is generated by the diagram execution engine when executing said flow diagram, the data can be called execution stage data. Some diagram execution engines do not store the data generated in execution but provide some functions (such as an API, i.e. Application Programming Interface) to be invoked by the user thus to obtain the execution stage data.","Visual representation of a state machine is a state transition diagram. The state transition diagram shows its states using nodes, possible state transitions between the states using arrows, and events that trigger the state transitions using text on the arrows.  is a schematic view of a simple state machine representing the order processing flow as shown in .","Referring to , the nodes (rectangles shown in ) represent possible states for the PurchaseOrder and may be Ready, InApproval, Purchased, Canceled, Shipped, Delivered, or Archived. The arcs with arrows in  represent events that may occur, causing the PurchaseOrder to transition from one state to another.","A state machine can be implemented by for example a BPEL (Business Process Execution Language) process. In that case, an event is merely an operation on the portType of a Web Services Description Language (WSDL)-described process. The current state (stored in a variable) determines which events (operations) are active. The runtime throws an exception if a caller attempts to invoke an invalid operation. The users can also query the state machine's current state to determine an operation's validity. When an event occurs (for example, when an operation is invoked or a timer is expired), the state machine transitions to a new state and performs an action associated with the transition (such as invoking an operation or method).","In , the state machine in the \u201cReady\u201d state has two possible events (enabled operations): Purchase and Cancel. For the purchase operation, there are two possible conditions: either an approval is or is not needed.","When a caller invokes the purchase operation, the diagram execution engine performs the following operations:","1. Determines if the operation is valid for the current state.","2. Executes an exit action for the Ready state, if exists.","3. Evaluates the condition of all transitions associated with that event. Assuming an approval is needed for this purchase, the transition into the \u201cInApproval\u201d state will be selected, while the transition to \u201cPurchased\u201d will be ignored; otherwise, the transition into the \u201cPurchased\u201d state will be executed, while the transition to \u201cInApproval\u201d will be ignored.","4. Executes the action associated with the transition, in this case invoking doApprovalAction( ) For example, this operation could send e-mail to a sales manager or simply invoke an operation on another SOA (Service-Oriented Architecture) component, such as a BPEL flow.","5. Enters the new state.","6. Executes an entry action for the new state, if exists.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 4","FIG. 3","FIG. 4"]},"The present invention provides a method and system for arranging flow diagrams based on layout policies with real-time linkages between the flow design time and run time. The present invention relates to arranging a flow diagram based on a result of execution by linking a diagram editor to a diagram execution engine. This is very important for users to understand the flow diagram from the viewpoint of practical execution conditions, guide the diagram design, and make decisions.","The term \u201cflow diagram\u201d used herein refers to a diagram of a common type, which represents an algorithm or process. The flow diagram can be used in various fields to analyze, design, record in a documentation form or manage a processes or program.","The priority of graphic objects in the flow diagram can be calculated based on a large variety of execution stage information (which can also be tagged manually by users). For example, for the flow diagram as shown in , said execution stage information includes but is not limited to: node usage\/visits\/hits, terminated times, order amount, order type, node execution time, node cost, transaction volume (summed), transaction value, etc.","Specifically, the present invention provides a method and apparatus and a system comprising the apparatus, wherein while executing a flow diagram, a flow execution engine collects execution stage information (e.g. states and hit number of transitions) and provides it to the diagram editor. Then according to a layout policy, the diagram editor processes graphic objects based on a graph layout file and the execution stage information collected in the previous step. The collected execution stage information is used to at least determine a primary path according to the layout policy. The layout policy can specify one or more types of execution stage information as the condition for determining the primary path and for determining the primary path using the one or more types of execution stage information. The layout policy can specify which type of execution stage information has a higher priority for determining the primary path. Further, the layout policy can further specify which type or types of execution stage information are used to arrange other graphic objects than the primary path.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 5"},"At step , the processing flow starts.","At step , the execution stage information and the flow diagram are obtained.","As described above, the diagram editor generates a graph layout file (e.g. an XML file) describing a graph layout and stores it as a single file in a system for use by others. Thus, obtaining the flow diagram can be obtaining said graph layout file. In addition, it is also possible to obtain the flow diagram by obtaining a flow diagram topology file. It can be appreciated by those skilled in the art that, it is also possible to obtain the flow diagram in any other suitable manner, so long as the manner can uniquely determine graphic objects and mutual relations therebetween in the flow diagram. The diagram execution engine can execute the flow diagram a plurality of times so as to generate a plurality of sets of execution stage information.","Take again, as an example, the order processing flow as shown in . Each time an order is input to the diagram execution engine, each order has an order value and a required turnaround time. An order with the value greater than $50 is required to be approved by a director, so the processing flow passes through connection ; an order with the value less than or equal to $50 is not required to be approved by the director, so the processing flow passes through connection . An order with the specially required turnaround time, e.g., an emergency order with the turnaround time less than or equal to 2 days, directly reaches the next processing module through connection ; an order without the specially required turnaround time, e.g. a non-emergency order with the turnaround time more than 2 days, needs to reach the next processing module through connections  and .","The diagram execution engine collects relevant information while executing each order, for example, for an order with the value greater than $50 and the turnaround time less than 2 days, the diagram execution engine collects the paths the order passes through in the flow diagram, i.e. paths  and , and stores information of the paths in association with the order value and turnaround time of the order.","When the diagram execution engine does not store the execution stage information, it is necessary to insert probe points into the process for collecting the execution stage information. Said probe points refer to all means capable of invoking interface functions provided by the diagram execution engine to obtain the execution stage information, and include program code, modules, interface programs, etc. The execution stage information is collected by the probe points and then stored, for example, into a memory or as a data file or the like, so long as the data can be saved and accessed for a later process. In that case, it is further necessary to execute, between step  and step , the steps of defining the probe points and collecting the execution stage information using the probe points.","At step , a primary path in the flow diagram is identified using the execution stage information based on the layout policy, and graphic objects on the primary path are displayed prominently.","Said layout policy can not only be pre-defined and stored in a file or in a memory, but also real-time defined by the users when the users need to arrange the diagram. The layout policy can relate to which type or types of execution stage information are to be collected, and to the conditions for determining the primary path using such execution stage information. The layout policy can further specify which type or types of execution stage information should be used to arrange graphic objects. If a plurality of types of information is selected, the layout policy can specify the priority of each type.","Take again, as an example, the order processing flow as shown in . For example, a user-defined layout policy may be as follows: \u201carranging a path for processing orders with a value greater than $50 AND turnaround time less than 2 days as a primary path, and arranging according to the number of orders through each node and each path from most to least\u201d. In this layout policy, the former half portion specifies the indices for determining the primary path, while the latter half portion specifies the criterion according to which the graphic objects other than the primary path are arranged.","In order to quantize the user-defined layout policy, the user can define variables and metrics thereof for the layout policy for calculation later, and calculate the values of the metrics to obtain the values corresponding to the variables. For example, for the variable \u201cturnaround time\u201d in the above-mentioned policy, two metrics, i.e. \u201corder submission time\u201d and \u201cgoods received time\u201d, need to be defined, while for the variable \u201corder value\u201d, only one metric, i.e. \u201corder value\u201d, needs to be defined. The user can manually specify the values of these metrics. For the variable \u201cnumber of orders through each node and each path\u201d in the above-mentioned policy, two metrics, i.e. \u201corder number \u201d for each node and \u201corder number \u201d for each path, need to be defined.","The above-mentioned layout policy can finally be quantized as \u201c(order submission time, goods received time, order value), (order number , order number , descending order)\u201d, thereby invoking probe points to obtain the corresponding values, wherein the content in the first parentheses is used to specify the basis for determining the primary path, while the content in the second parentheses is used to specify the basis for arranging graphic objects other than the primary path. If the user pre-defines and stores the above-mentioned layout policy, the quantized layout policy can be stored in the form of a table as follows:",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["For Obtaining","For Arranging"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"42pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Order","Goods","Order","Order","Order","Descending"]},{"entry":["Submission","Received","Value","Number 1","Number 2","Order"]},{"entry":["Time","Time"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Based on the defined metrics, i.e. \u201corder submission time\u201d\u2212\u201cgoods received time\u201d<2 days and \u201corder value\u201d>50, the corresponding connection paths are retrieved from the memory. In this example, the connection paths are denoted by  and . Then the retrieved nodes and connection paths are arranged into one line as the primary path.","If there exist multiple paths satisfying such a condition as \u201ca path for processing orders with value greater than $50 and turnaround time less than 2 days\u201d, then it is possible to further specify how to select a primary path from the multiple paths. For example, it is possible to list in a diagram those nodes and paths with the greatest number of orders as the primary path, and arrange respective nodes and paths with the greatest number of orders into one line in the flow diagram. This is actually the same as the basis for arranging the graphic objects other than the primary path. Those skilled in the art can easily understand that, it is also possible to use a basis different from that for arranging the graphic objects other than the primary path.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 6","FIG. 6"]},"To be sure, the prominent display as referred to in the present invention is not limited to arranging the primary path as one line in the flow diagram, and the layout policy can designate any suitable manner to arrange graphic objects on the primary path. It is further possible to display the graphic objects on the primary path using visual effects such as different colors and\/or highlight. Alternatively, it is further possible to simultaneously display a plurality of primary paths. Alternatively, it is further possible to display some important information (e.g. priorities) as labels on the primary path and on each node on the primary path. Those skilled in the art can further envisage other layout manners, so long as the users can distinctly identify their desired primary paths in the flow diagram.","At step , the process is finished.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 7","b":["710","720"]},"A diagram editor is used for generating and outputting an image layout file, a diagram execution engine generates execution stage information and stores it in a memory, and both can be integrated in a single unit or implemented separately. The execution stage information acquisition unit  acquires the execution stage information from the memory storing the same, for example by using a designated file path or invoking interface functions provided by the diagram execution engine. As described above, if the diagram execution engine does not store the execution stage information, it is possible to acquire said execution stage information by invoking the API, i.e. probe points, provided by the diagram execution engine.","The diagram execution engine stores the collected information in for example a table titled \u201cvisited\u201d in the memory, wherein a first column \u201cvid\u201d in the table titled \u201cvisited\u201d represents one visit, and a second column \u201cnodeId\u201d represents an id of the visited node, and then Java codes of the information obtained are similar to the following (assume that only the number of visits to a node is collected):",{"@attributes":{"id":"p-0062","num":"0061"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003Map hitMap = new HashMap( );"},{"entry":"\u2003Connection conn = getDBConnection( );\/\/get memory connection"},{"entry":"\u2003Statement stmt = conn.createStatement(\u201cselect nodeId, count(vid) from "},{"entry":"visited group by nodeId\u201d);"},{"entry":"\u2003ResultSet rs = stmt.executeQuery( );"},{"entry":"\u2003while(rs.next( )){"},{"entry":"\u2003hitMap.put(rs.getInt(1), rs.getInt(2));"},{"entry":"\u2003}"},{"entry":"\u2003. . ."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The execution stage information acquisition unit  further receives a layout policy. As described above, the layout policy can be either pre-defined or input by a user in real time. The user-defined layout policy is quantized by using one or more metrics and operates said metrics to obtain the corresponding variables. These variables can be used to find a primary path and arrange a diagram. In the foregoing order example, said variables are for example \u201corder value\u201d, \u201cturnaround time\u201d and \u201cnumber of orders\u201d, etc.","The execution stage information acquisition unit  can select part of execution stage information in accordance with the input layout policy. When the user changes the layout policy in real time, said execution stage information also changes correspondingly, and the execution stage information acquisition unit  needs to acquire again execution stage information from the diagram execution engine.","The execution stage information acquisition unit  can further fetch the entire execution stage information provided by the existing diagram execution engine to the local. Alternatively, the execution stage information acquisition unit  stores the acquired execution stage information to a local storage unit for later use. When the user changes the layout policy in real time, the execution stage information acquisition unit  can directly acquire the corresponding execution stage information from the local storage unit on the basis of the layout policy, without necessity of acquiring again the execution stage information from the diagram execution engine.","The execution stage information acquisition unit  further provides the acquired execution stage information to the diagram arrangement unit . If it is necessary to execute further processing on the acquired data according to the layout policy, for example, to calculate \u201cturnaround time\u201d=\u201corder submission time\u201d\u2212\u201cgoods received time\u201d and \u201carranging according to the number of orders through each node and each path from most to least\u201d in the above example, it is possible to execute the processing before the execution stage information acquisition unit  provides data to the diagram arrangement unit . Taking again the above example, the execution stage information acquisition unit  uses the obtained \u201corder submission time\u201d and \u201cgoods received time\u201d to calculate the \u201cturnaround time\u201d, and sorts the nodes and paths according to the number of orders, and then provides, to the diagram arrangement unit , the calculated \u201cturnaround time\u201d and sorted paths and related information. Said calculation is simple for those skilled in the art and is not the gist of the present invention, so details thereof are not made here. To be sure, the processing of the data can also be executed in the diagram arrangement unit .","Alternatively, the execution stage information acquisition unit  further comprises a probe point setting unit . When the existing diagram execution engine does not collect and store data generated in the executing process, it is necessary to set and use probe points to obtain the execution stage information. The so-called probe point is a segment of program code for invoking the API provided by the existing diagram execution engine to obtain the execution stage information. The probe point setting unit  is used for setting one or more probe points to be invoked by the execution stage information acquisition unit .","Taking IBM's Websphere Process Server (WPS) v6.0 as an example, WPS provides a Common Event Infrastructure (CEI) to help users obtain the data generated in the flow execution process, and this mechanism can be utilized to obtain desired execution information. For instance, we want to obtain the number of visits to a node, it is possible to define the CEI at each node in advance, which requires that an event should be generated upon entry to the node whenever the flow is executed and the event should be available to the users, and the users accumulate the number of visits to each node at an appropriate place (e.g. a memory).","When the flow is executed, the occurrence of events can be queried in a plurality of manners, and the following codes use \u201cquery event API\u201d:",{"@attributes":{"id":"p-0070","num":"0069"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Object objref = initial.lookup(\u201cejb\/com\/ibm\/events\/access\/EventAccess\u201d);"},{"entry":"EventAccessHome eventAccessHome = (EventAccessHome) "},{"entry":"\u2003PortableRemoteObject.narrow(objref, EventAccessHome.class);"},{"entry":"EventAccess eventAccess = eventAccessHome.create( );"},{"entry":"ComonBaseEvent[ ] events = eventAccess.queryEventsByEventGroup("},{"entry":"\u2003\u201cevent group name\u201d, \u201cevent Selector,\u201d true);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The execution stage information acquisition unit  invokes, when necessary, the probe point provided by the probe point setting unit  to collect the execution stage information. The execution stage information acquisition unit  can invoke the existing diagram execution engine to collect possibly obtained various data and locally store the data for later use. Subsequently, the execution stage information acquisition unit  locally retrieves the corresponding data according to the layout policy. Alternatively, the execution stage information acquisition unit  can invoke the corresponding probe point to obtain desired data based on the layout policy.","The diagram arrangement unit  receives the execution stage information from the execution stage information acquisition unit , and receives the graph layout file from the existing graph editor and the layout policy. Then the diagram arrangement unit  arranges graphic objects in the generated diagram based on the layout policy with consideration of the execution stage information, so that the users can readily identify a path they care from the arranged diagram. Finally, the diagram arrangement unit  outputs the arranged diagram.","The layout policy not only can be input by the user via a graphical user interface (GUI) and stored in a file, but also can be predefined by the user and stored in the file. The metrics\/variables (e.g. turnaround time) are defined by the users. The value of each metric is calculated after the necessary execution stage information is possessed. These metrics can be used to find the primary path and arrange the diagram.","The diagram arrangement unit  maintains a set of improved graph layout algorithms based on the execution stage information. These algorithms, which are based on conventional algorithms, heavily consider the execution stage information as an important aspect.","In the following, a schematic flow diagram of a preferred process of arranging graphic objects according to the present invention is described, by referring to .","For each node among all nodes, all incoming edges are marked as ignored except a first edge complying with a layout policy, according to the algorithm of the present invention, so that we can have a spanning tree of a graph. The tree is laid out from left to right, and sibling nodes are sorted based on the layout policy. Those ignored edges are added back to the tree and alternatively, those ignored edges are arranged using the existing algorithms to minimize crossings. As a result, a primary path can be found at a glance.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 8"},"At step , the process starts.","At step , a graph layout file, a layout policy, and execution stage information are received.","At step , execution stage information of each node and its in-connection is collected from the received execution stage information. This step can be considered to be a data retrieval process.","At step , if there is a plurality of in-connections to each node, the in-connections, of which the collected execution stage information does not satisfy a predetermined condition specified in the layout policy, are marked as disconnected.","Taking the above example, all connections to each node that do not satisfy the predetermined condition specified in the layout policy, i.e. \u201carranging a path for processing orders with the value greater than $50 and turnaround time less than 2 days\u201d, are marked as disconnected. Thus, all in-connections to each node, through which the orders have a value greater than $50 or turnaround time less than 2 days, are marked as disconnected.","At step , the connections marked as disconnected are not considered, and based on the graph layout file, the nodes and in-connections, of which the execution stage information satisfies the predetermined condition specified in the layout policy, are arranged according to an arrangement manner specified in the layout policy.","Taking again the above example, the layout policy specifies the arrangement manner of \u201carranging nodes and paths according to the number of orders through each node and each path from most to least\u201d. According to this arrangement manner, each node and its in-connections are arranged according to the number of orders through the same from most to least, for example, a node and its in-connections through which the number of orders is the greatest are disposed on one straight line, branch nodes are arranged at one or both of the sides of the straight line according to the number of orders through the branch nodes from most to least, and connections between father nodes and child nodes are drawn. Without considering the connections marked as disconnected, the flow diagram usually should be a tree and can be readily laid out.","At step , the connections marked as disconnected are also displayed in the diagram when displaying the connections marked as \u201cdisconnected\u201d, and the total crossings can be minimized using the existing algorithms.","At step , the process is finished.","In the above example, at step  and step , the nodes and their in-connections, of which the execution stage information satisfies the predetermined condition specified in the layout policy, are displayed with colors and\/or highlight in different prominent degrees, according to the arrangement manner specified in the layout policy, based on the graph layout file. In this case, step  is unnecessary.",{"@attributes":{"id":"p-0088","num":"0087"},"figref":["FIG. 9A","FIG. 9B","FIG. 1A","FIG. 1B"]},"The above example merely illustrates a preferred mode of arranging graphic objects, and those skilled in the art can thus envisage other implementation manners, which fall within the scope of protection of the present invention.",{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 10"},"The system shown in  not only comprises an apparatus for arranging graphic objects in a flow diagram based on execution stage information as shown in , but comprises the prior-art diagram editor  and diagram execution engine . As described above, the diagram editor  and the diagram execution engine  can be integrated into a single component . In addition, the same reference signs are used in  to denote the units which are the same as those in .","As shown in , the diagram editor  is connected to the diagram arrangement unit  and the diagram execution engine . The diagram editor  generates a graph layout file and provides it to the diagram arrangement unit , generates a flow diagram topology file and provides it to the diagram execution engine .","The diagram execution engine  is connected to the execution stage information acquisition unit  and receives the flow diagram topology file from the diagram editor . Then the diagram execution engine  executes the flow diagram based on the flow diagram topology file and generates the execution stage information for use by the execution stage information acquisition unit.","The implementation of the present invention can be realized by means of hardware, software, firmware or combinations thereof. Those skilled in the art should realize that, it is also possible to embody the present invention in a computer program product disposed on a signal carrier medium for use in any suitable data processing system. The signal carrier medium can be a transmission medium or a computer usable storage device for machine-readable information. The examples of the computer usable storage device comprise a magnetic disk or floppy disk in a hard disk drive, an optical disk for use in a CD-ROM, a magnetic tape, and other devices those skilled in the art can envisage. Those skilled in the art should realize that, any communication terminal having a suitable programming device is able to execute the steps of the method according to the present invention as embodied in the program product. The term \u201ccomputer usable storage device\u201d does not encompass a signal propagation media such as a copper cable, optical fiber or wireless transmission media.","It should be appreciated that, the embodiments of the present invention are described above with reference to different functional means and processors for the sake of clarity. Obviously, any suitable function distribution can be used between the different functional components or processors, without departing from the present invention. For example, the illustrated functions executed by a separate unit or processor can be executed by the same unit or processor. Thus, only the description of the specific functional means is considered as a description of a suitable device for providing said functions, but does not represent a strict logic or physical structure or organization.","Furthermore, the order of the features in the claims does not represent any specific order in which the features function, and particularly, the order of the steps in method claims does not represent that these steps must be executed in this order. Conversely, these steps can be executed in any suitable order.","The present invention is described with detailed illustrations of the embodiments of the present invention, and these embodiments are provided as examples and do not intend to limit the scope of the present invention. The embodiments described comprise different features and not all these features are needed in all the embodiments in the present invention. Some embodiments in the present invention merely utilize some features or possible combinations of features. The variations of the embodiments of the present invention described and the embodiments including different combinations of the features recited in the embodiments described can be envisaged by those skilled in the art."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1A-FIG","b":"1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9A"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9B"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
