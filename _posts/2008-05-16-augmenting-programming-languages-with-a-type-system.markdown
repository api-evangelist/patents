---
title: Augmenting programming languages with a type system
abstract: Described is a technology by which metadata augments a programming language such as JavaScript. Software components such as application programming interfaces are associated with metadata. When a software component is selected for use, such as when putting together a computer program in a graphical programming environment, its corresponding metadata is accessed. The metadata may be used to validate the usage of the software component, such as to validate a constraint associated with a value, provide a default value, validate a value's type, and/or determine whether a value is required. Validation may also determine whether data output by one software component is of a type that is appropriate for input by another software component. In addition to validation via type metadata, the metadata may provide descriptive information about the selected software component, such as to assist the programmer and/or provide further information to the programming environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09164737&OS=09164737&RS=09164737
owner: MICROSOFT TECHNOLOGY LICENSING, LLC
number: 09164737
owner_city: Redmond
owner_country: US
publication_date: 20080516
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Dynamic programming (e.g., scripting) languages are commonly used by programmers to produce code. JavaScript (also referred to as ECMAScript or JScript) is a well-known example of one such programming language widely used on the web, and is valued for its flexibility and simplicity. Much of that flexibility is derived from the fact that JavaScript is dynamically-typed, which means that programmers do not have to declare the types of their variables in their programming. Instead, the JavaScript engine attempts to treat whatever variable the programmer is using as the data type that makes the most sense in the context in which it is being used.","However, despite this flexibility, there are drawbacks to such a dynamically-typed language. For one, some data values are ambiguous; dynamic typing makes it more difficult for programmers and runtimes to differentiate between such ambiguous values, and to do parameter validation and matching. By way of example, the value \u201898052\u2019 may correspond to an integer or a string, as well as possibly corresponding to a higher-level concept like a zip code. In such an example, dynamic typing has no way to determine the value's intended type.","This Summary is provided to introduce a selection of representative concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used in any way that would limit the scope of the claimed subject matter.","Briefly, various aspects of the subject matter described herein are directed towards a technology by which sets of metadata are associated with programming language code components, such as application programming interfaces, with a corresponding set of metadata accessed when a selected programming language code component is used. The selected set of metadata may be used to validate the usage of the selected programming language code component, e.g., to validate a constraint associated with a value, providing a value with default data, validate a value's type, and\/or determine whether a value is required. Validation may also determine whether data output by one component is of a type that is appropriate for input by another component. In addition to validation, the metadata may provide descriptive information about the selected programming language code component.","In one example implementation, programming code is developed via a user interface, such as by dragging representations (icons) of software components onto a design surface; such placement may be detected. For a part of the programming code (e.g., corresponding to the software component), the corresponding set of metadata, which may be XML, is selected and used to ensure that the software component properly executes. For example, when a software component having a defined interface is coupled to another software component, the compatibility of the input and output data may be checked. As another example, descriptive metadata or type system metadata may be used at runtime to ensure proper execution.","Other advantages may become apparent from the following detailed description when taken in conjunction with the drawings.","Various aspects of the technology described herein are generally directed towards using a metadata system (e.g., XML-based) to augment a programming language (e.g., the JavaScript\/ECMAScript\/JScript language) with an explicit capability and type system that need not rely on inference. As will be understood, the use of such metadata adds significant depth to the basic programming language typing mechanisms. By way of example, with such metadata, programmers, the programming environment and\/or the application runtime can determine the data types of data values (e.g., parameters, return types or fields, not necessarily numeric), establish whether a data value is optional or required, provide constraints on data values, and so forth. Further, documentation based upon the metadata may be provided, such as to dynamically assist a programmer when programming.","While many of the examples described herein are directed towards XML-based metadata and the JavaScript\/ ECMAScript\/JScript language, it is understood that these are only examples. Indeed, other metadata formats and languages may benefit from the technology described herein. Further, while the examples are directed towards a graphical user interface programming environment, any way of entering code and\/or metadata, including via text with embedded comments, may be used. As such, the present invention is not limited to any particular embodiments, aspects, concepts, structures, functionalities or examples described herein. Rather, any of the embodiments, aspects, concepts, structures, functionalities or examples described herein are non-limiting, and the present invention may be used various ways that provide benefits and advantages in computing in general.","Turning to , there is shown a general block diagram representing example components in a programming environment  in which metadata is used to augment a programming language. Note that in the example implementation generally represented in , a development environment  and a runtime environment  are shown in the programming environment  as being tightly linked to one another, although this is not necessary, e.g., development may occur separately, such as well before the program is run. In any event, for simplicity, the term \u201cprogramming environment\u201d is used herein to represent the development environment  or the runtime system  that executes a running application, however coupled. The development environment  or runtime environment , or both, may be hosted in a web browser, for example.","In the development environment , the exemplified metadata includes type data  and descriptive data , although as described below the type data  and descriptive data  may be merged into a single data structure, (e.g., file), as represented in  via the dashed line. In a visual development environment, the programmer has a user interface  with which to interact, such as to select a software component (also referred to as a block) from a set of reusable components , e.g., interfaces such as APIs, functions and so forth. For example, the components may correspond to classes each containing a collection of interfaces, but a component also may be an individual function or the like. The programmer may interconnect such components, e.g., to link interfaces together. Each component, or individual interfaces, may have an associated set of one or more metadata files.","In general, the type system metadata  defines a specific set of types that can be used with each component, such as to enable enhanced type matching relative to the basic type matching provided by the engine (e.g., the JavaScript engine). More particularly, based on the type data, type rules\/logic  or the like may perform tasks such as to perform parameter validation and matching. For example, the rules\/logic  may ensure that that output data of one interface is compatible with the input data of another interface to which it is connected, such as to notify the programmer of any mismatch, and\/or transparently insert code that converts one output type to an appropriate type for input without the programmer's intervention. Other actions include enforcing constraints (e.g., ensuring a value is within a range, is present when required, is non-zero, is positive, and\/or many others), set default values, and so forth.","Also represented in  is the runtime system , which takes from a runtime preparation system  program metadata  and (optionally) executable code . Note that the runtime system  can operate on executable code, e.g., directly, or operate on program metadata via an interpreter ; an engine (implicit) runs the interpret or the executable code. The runtime  may use the type system metadata  and\/or the descriptive metadata , (or a copy thereof) represented by the labels and ","Note that although not shown, in one alternative the runtime system  may input pre-compiled code and compile it into executable code; the code may be run as it is compiled, e.g., via a just-in-time (JIT) compiler, may be converted to an intermediate language (e.g., NET MSIL) or the executable code may be stored for running at some later time, and so forth. The metadata may be useful across languages, e.g., C+, C## and\/or JavaScript.","In addition to improving programming and results based upon associated type metadata, the descriptive metadata  may be provided and used. In general, descriptive metadata  is used by the programming environment  to provide high-level guidance to itself, and to the developer about the kinds of things that the component is capable of doing. For example, descriptive metadata can describe a list of operations that the component offers, a brief description of the code that may be used to automatically generate documentation, or a set of default values that the programming environment will load when the component is called. For example, instead of selecting a component by name, a programmer can possibly search among components by their features, view a tooltip and\/or other descriptive output data by hovering over a component to see what the component does, and so forth.","In one example implementation, a standard XML schema defines the descriptive metadata and the type system metadata, as set forth in the example type system metadata below:",{"@attributes":{"id":"p-0022","num":"0021"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Name","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"title","A short string that describes the object -"]},{"entry":[{},{},"should not contain HTML"]},{"entry":[{},"url","Any URL that does not fit one of the other"]},{"entry":[{},{},"URL types"]},{"entry":[{},"color","A hex value color such as #FF0000"]},{"entry":[{},"imageUrl","A URL pointing to a full sized image"]},{"entry":[{},"feedUrl","A URL pointing to an RSS\/ATOM feed"]},{"entry":[{},"description","A description of the object - can contain"]},{"entry":[{},{},"HTML of any length"]},{"entry":[{},"latitude","A latitude value in decimal format"]},{"entry":[{},"longitude","A longitude value in decimal format"]},{"entry":[{},"thumbnailUrl","A URL pointing to a thumbnail image"]},{"entry":[{},"location","A string that represents an address"]},{"entry":[{},"custom","A custom object that needs to be declared"]},{"entry":[{},{},"in the manifest file of that block"]},{"entry":[{},"videoUrl","A URL pointing to a video file - should"]},{"entry":[{},{},"not be a flash video, but rather the"]},{"entry":[{},{},"actual video that could be played in any"]},{"entry":[{},{},"viewer"]},{"entry":[{},"ipAddress","An IP address"]},{"entry":[{},"name","The name of something - should be short"]},{"entry":[{},{},"and not contain HTML"]},{"entry":[{},"firstName","The first (given) name of a person"]},{"entry":[{},"lastName","The last (family) name of a person"]},{"entry":[{},"emailAddress","An email address"]},{"entry":[{},"phoneNumber","A phone number; should include country"]},{"entry":[{},{},"code"]},{"entry":[{},"city","The name of a city"]},{"entry":[{},"state","The name of a state, US only"]},{"entry":[{},"countryOrRegion","The name of a country or region"]},{"entry":[{},"zipCode","The ZIP code of a location, US only"]},{"entry":[{},"ISBN","An International Standard Book Number"]},{"entry":[{},{},"(ISBN)"]},{"entry":[{},"UPC","An Universal Product Code (barcode) number"]},{"entry":[{},"stockSymbol","A stock ticker symbol"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Among other aspects, the metadata may be used to augment component functions by providing additional information that can be used by the programming environment and runtime to enforce constraints, set default values, and so on. The following example describes how a JavaScript implementation of a function getGeotaggedPhotos (Table 1) is paired with XML metadata (Table 2). Note how the JavaScript function calls for text and a number, which are described in more depth in the XML (in the input name=\u201ctext\u201d and input name=\u201cnumber\u201d blocks, respectively).",{"@attributes":{"id":"p-0024","num":"0023"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"(JavaScript Function):"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"TestXClass.prototype.getGeotaggedPhotos = function(text, number, sort)"},{"entry":"{"},{"entry":"\u2003\u2003var apikey = \u201d{{KeyEnc:_ABC }}\u201d;"},{"entry":"\u2003\u2003var params = \u201d&sort=\u201d + (sort || \u201drelevance\u201d) + \u201d&text=geotagged+\u201d"},{"entry":"+ escape(text);"},{"entry":"\u2003\u2003var photos = this._getTestXPhotos(\u201dtestX.photos.search\u201d, number,"},{"entry":"params, apikey);"},{"entry":"\u2003\u2003return photos;"},{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0025","num":"0024"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"(Corresponding XML Metadata):"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<operation name=\u201dgetGeotaggedPhotos\u201d callMode=\u201dauto\u201d>"},{"entry":"\u2003\u2003\u2003<description>Get photos that have a latitude and longitude and"},{"entry":"have been tagged as \u201dgeotagged\u201d.<\/description>"},{"entry":"\u2003\u2003\u2003<inputs>"},{"entry":"\u2003\u2003\u2003\u2003<input name=\u201dtext\u201d required=\u201dtrue\u201d type=\u201dstring\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<description>text in title, description, or"},{"entry":"tags<\/description>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<defaultValue>beach<\/defaultValue>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<constraints \/>"},{"entry":"\u2003\u2003\u2003\u2003<\/input>"},{"entry":"\u2003\u2003\u2003\u2003<input name=\u201dnumber\u201d required=\u201dfalse\u201d"},{"entry":"type=\u201dnonNegativeInteger\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<description>maximum number of photos to"},{"entry":"\u2003\u2003\u2003\u2003\u2003return<\/description>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<defaultValue>15<\/defaultValue>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<constraints \/>"},{"entry":"\u2003\u2003\u2003\u2003<\/input>"},{"entry":"\u2003\u2003\u2003\u2003<input name=\u201dsort\u201d required=\u201dfalse\u201d type=\u201dtestXSortOrder\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<description>text in title, description, or"},{"entry":"tags<\/description>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<defaultValue>relevance<\/defaultValue>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<constraints>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<constraint mandatory=\u201dtrue\u201d type=\u201doneOf\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<value>relevance<\/value>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<value>date-posted-asc<\/value>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<value>date-posted-desc<\/value>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<value>date-taken-asc<\/value>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<value>date-taken-desc<\/value>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<value>interestingness-asc<\/value>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<value>interestingness-desc<\/value>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<\/constraint>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/constraints>"},{"entry":"\u2003\u2003\u2003\u2003<\/input>"},{"entry":"\u2003\u2003\u2003<\/inputs>"},{"entry":"\u2003\u2003\u2003<outputs>"},{"entry":"\u2003\u2003\u2003\u2003<output isArray=\u201dtrue\u201d type=\u201dcustom\u201d object=\u201dPhoto\u201d \/>"},{"entry":"\u2003\u2003\u2003<\/outputs>"},{"entry":"\u2003\u2003<\/operation>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Table 3 shows an example of the XML metadata for an example service. In the example, some of the example-specific terms in use include:","Class Name: abstraction","Namespace URL: www.somedomain.com","Provider Name: PhotoProvider","Provider URL: www.photoprovider.com","In the example, elements such as <providerName>, <keys>, <operations>, <input>, and <constraint> are examples of descriptive metadata. Elements such as latitude, longitude, and date are type metadata.",{"@attributes":{"id":"p-0032","num":"0031"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"(XML metadata for an example service):"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<abstraction xmlns:xsi=\u201dhttp:\/\/www.w3.org\/2001\/XMLSchema-instance\u201d"},{"entry":"xsi:noNamespaceSchemaLocation=\u201dhttp:\/\/www.somedomain.com\/"},{"entry":"schemas\/abstractionschema.xsd\u201d"},{"entry":"\u2003class=\u201dPhotoClass\u201d>"},{"entry":"\u2003<providerName>PhotoProvider<\/providerName>"},{"entry":"\u2003<providerUrl>http:\/\/www.photoprovider.com\/<\/providerUrl>"},{"entry":"\u2003<providerLogoUrl>\/icons\/PhotoproviderLogo.png<\/providerLogoUrl>"},{"entry":"\u2003<abstractionIconUrl>\/Photoprovider.png<\/abstractionIconUrl>"},{"entry":"\u2003<suggest output=\u201dimagedisplay geodisplay\u201d input=\u201duserinput\u201d\/>"},{"entry":"\u2003<keys>"},{"entry":"\u2003\u2003<description \/>"},{"entry":"\u2003\u2003<signUpUrl>http:\/\/www.photoprovider.com\/apply\/<\/signUpUrl>"},{"entry":"\u2003\u2003<key id=\u201dAPIKey\u201d whenRequired=\u201dsave\u201d>"},{"entry":"\u2003\u2003\u2003<name>API Key<\/name>"},{"entry":"\u2003\u2003\u2003<notes \/>"},{"entry":"\u2003\u2003<\/key>"},{"entry":"\u2003<\/keys>"},{"entry":"\u2003<operations>"},{"entry":"\u2003\u2003<operation name=\u201dgetGeotaggedPhotos\u201d callMode=\u201dauto\u201d>"},{"entry":"\u2003\u2003\u2003<description>Get photos that have a latitude and longitude and"},{"entry":"have been tagged as \u201dgeotagged\u201d.<\/description>"},{"entry":"\u2003\u2003\u2003<inputs>"},{"entry":"\u2003\u2003\u2003\u2003<input name=\u201dtext\u201d required=\u201dtrue\u201d type=\u201dstring\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<description>text in title, description, or"},{"entry":"tags<\/description>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<defaultValue>beach<\/defaultValue>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<constraints \/>"},{"entry":"\u2003\u2003\u2003\u2003<\/input>"},{"entry":"\u2003\u2003\u2003\u2003<input name=\u201dnumber\u201d required=\u201dfalse\u201d"},{"entry":"type=\u201dnonNegativeInteger\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<description>maximum number of photos to"},{"entry":"\u2003\u2003\u2003\u2003\u2003return<\/description>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<defaultValue>15<\/defaultValue>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<constraints \/>"},{"entry":"\u2003\u2003\u2003\u2003<\/input>"},{"entry":"\u2003\u2003\u2003\u2003<input name=\u201dsort\u201d required=\u201dfalse\u201d"},{"entry":"type=\u201dphotoproviderSortOrder\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<description>text in title, description, or"},{"entry":"tags<\/description>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<defaultValue>relevance<\/defaultValue>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<constraints>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<constraint mandatory=\u201dtrue\u201d type=\u201doneOf\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<value>relevance<\/value>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<value>date-posted-asc<\/value>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<value>date-posted-desc<\/value>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<value>date-taken-asc<\/value>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<value>date-taken-desc<\/value>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<value>interestingness-asc<\/value>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<value>interestingness-desc<\/value>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<\/constraint>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/constraints>"},{"entry":"\u2003\u2003\u2003\u2003<\/input>"},{"entry":"\u2003\u2003\u2003<\/inputs>"},{"entry":"\u2003\u2003\u2003<outputs>"},{"entry":"\u2003\u2003\u2003\u2003<output isArray=\u201dtrue\u201d type=\u201dcustom\u201d object=\u201dPhoto\u201d \/>"},{"entry":"\u2003\u2003\u2003<\/outputs>"},{"entry":"\u2003\u2003<\/operation>"},{"entry":"\u2003<\/operations>"},{"entry":"\u2003<objects>"},{"entry":"\u2003\u2003<object name=\u201dPhoto\u201d>"},{"entry":"\u2003\u2003\u2003<field name=\u201durl\u201d type=\u201dimageUrl\u201d isArray=\u201dfalse\u201d \/>"},{"entry":"\u2003\u2003\u2003<field name=\u201dthumbnailUrl\u201d type=\u201dthumbnailImageUrl\u201d"},{"entry":"isArray=\u201dfalse\u201d \/>"},{"entry":"\u2003\u2003\u2003<field name=\u201doriginalUrl\u201d type=\u201dimageUrl\u201d isArray=\u201dfalse\u201d \/>"},{"entry":"\u2003\u2003\u2003<field name=\u201dlinkUrl\u201d type=\u201durl\u201d isArray=\u201dfalse\u201d \/>"},{"entry":"\u2003\u2003\u2003<field name=\u201did\u201d type=\u201dnumericId\u201d isArray=\u201dfalse\u201d \/>"},{"entry":"\u2003\u2003\u2003<field name=\u201downer\u201d type=\u201duserName\u201d isArray=\u201dfalse\u201d \/>"},{"entry":"\u2003\u2003\u2003<field name=\u201dtitle\u201d type=\u201dtitle\u201d isArray=\u201dfalse\u201d \/>"},{"entry":"\u2003\u2003\u2003<field name=\u201dlongitude\u201d type=\u201dlongitude\u201d isArray=\u201dfalse\u201d \/>"},{"entry":"\u2003\u2003\u2003<field name=\u201dlatitude\u201d type=\u201dlatitude\u201d isArray=\u201dfalse\u201d \/>"},{"entry":"\u2003\u2003\u2003<field name=\u201ddateTaken\u201d type=\u201ddate\u201d isArray=\u201dfalse\u201d \/>"},{"entry":"\u2003\u2003<\/object>"},{"entry":"\u2003<\/objects>"},{"entry":"<\/abstraction>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"As an example of how such a type system may be used, consider the example of , in which a programmer\/developer is using a programming environment that uses high-level abstractions to represent API calls. To the programming environment, each API call comprises an interface that calls the underlying implementation, along with some (XML) metadata that provides the programming environment with a additional information, such as the \u201cfriendly\u201d name for the API, the methods it supports and the types that those methods expect as input, the return values the API will give, and possibly documentation for the API.","As represented in the example flow diagram of  via steps  and  and in , the programmer drags an abstract representation (icon)  () of an underlying API onto a design surface . Note that other user actions (e.g., remove an icon, exit the programming environment and so on) are not shown in  for purposes of brevity.","In response to placing the icon, as represented by steps  and , the programming environment  loads JavaScript and associated metadata from the data store (or stores) of metadata , . More particularly, in this example, the action of dragging and dropping the icon  onto the programming environment's design surface  causes the programming environment  to load the API's corresponding XML metadata (as well as the associated JavaScript programming logic), which enables the programming environment  to load further UI (step , e.g., via the descriptive output mechanism ) and set up the environment for future interactions between this API and other APIs (step ).","The API may then be connected to another API, as represented by step ; note that this typically requires further user interaction, (not explicitly shown). If so, then the programming environment may use the metadata as desired, such as for matching types across APIs, providing documentation, and so forth, as generally represented via step .","Thus, in a programming environment that uses a programming language in which different interfaces are interconnected, the metadata provides a flexible, well-understood type system that enables the interfaces to smoothly connect with each other and with the programming environment. For example, the metadata system augments JavaScript so that the programming environment can provide more information to itself, to the programmer, and\/or even to end users (e.g., for rich debugging). The metadata system is flexible and extensible, which at the same time, is capable of recognizing specific, pre-set data types.","Exemplary Operating Environment",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 4","FIGS. 1-3"],"b":["400","400","400","400"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to: personal computers, server computers, hand-held or laptop devices, tablet devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, and so forth, which perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in local and\/or remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing various aspects of the invention may include a general purpose computing device in the form of a computer . Components of the computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","The computer  typically includes a variety of computer-readable media. Computer-readable media can be any available media that can be accessed by the computer  and includes both volatile and nonvolatile media, and removable and non-removable media. By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by the computer . Communication media typically embodies computer-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above may also be included within the scope of computer-readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules  and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media, described above and illustrated in , provide storage of computer-readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules  and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers herein to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a tablet, or electronic digitizer, , a microphone , a keyboard  and pointing device , commonly referred to as mouse, trackball or touch pad. Other input devices not shown in  may include a joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . The monitor  may also be integrated with a touch-screen panel or the like. Note that the monitor and\/or touch screen panel can be physically coupled to a housing in which the computing device  is incorporated, such as in a tablet-type personal computer. In addition, computers such as the computing device  may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface  or the like.","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include one or more local area networks (LAN)  and one or more wide area networks (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface  or other appropriate mechanism. A wireless networking component  such as comprising an interface and antenna may be coupled through a suitable device such as an access point or peer computer to a WAN or LAN. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It may be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","An auxiliary subsystem  (e.g., for auxiliary display of content) may be connected via the user interface  to allow data such as program content, system status and event notifications to be provided to the user, even if the main portions of the computer system are in a low power state. The auxiliary subsystem  may be connected to the modem  and\/or network interface  to allow communication between these systems while the main processing unit  is in a low power state.","Conclusion","While the invention is susceptible to various modifications and alternative constructions, certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood, however, that there is no intention to limit the invention to the specific forms disclosed, but on the contrary, the intention is to cover all modifications, alternative constructions, and equivalents falling within the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example and not limited in the accompanying figures in which like reference numerals indicate similar elements and in which:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
