---
title: Managing navigation and history information
abstract: History and navigation information in a computer application are managed by establishing a global context that can communicate with multiple resources, each of which resides in an associated local context. State information from one or more of the local contexts is communicated to the global context, and global navigation information (for example, defining a drop-down history list or back/forward button states) is generated based on the communicated state information. Using the global navigation information, a user of the computer application can move among previously visited resources in a global manner.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07617458&OS=07617458&RS=07617458
owner: AOL LLC
number: 07617458
owner_city: Dulles
owner_country: US
publication_date: 19981223
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This invention relates to managing navigation and history information in a computer application or utility, for example, in a browser application or in an online service provider environment.","The computer system illustrated in  represents a typical hardware setup for executing software that allows a user to perform tasks such as communicating with other computer users, accessing various computer resources, and viewing, creating, or otherwise manipulating electronic content\u2014that is, any combination of text, images, movies, music or other sounds, animations, 3D virtual worlds, and links to other objects. The system includes various input\/output (I\/O) devices (mouse , keyboard , display ) and a general purpose computer  having a central processor unit (CPU) , an I\/O unit  and a memory  that stores data and various programs such as an operating system , and one or more application programs .","As shown in , a user of a computer system can access electronic content or other resources either stored locally at the user's own client system  (e.g., a personal or laptop computer) or remotely at one or more server systems . An example of a server system is a host computer that provides subscribers with online computer services such as e-mail, chat rooms, Internet access, electronic newspapers and magazines, etc. Users of a host computer's online services typically communicate with one or more central server systems  through client software executing on their respective client systems . In practice, a server system  typically will not be a single monolithic entity but rather will be a network of interconnected server computers, possibly physically dispersed from each other, each dedicated to its own set of duties and\/or to a particular geographical region. In such a case, the individual servers are interconnected by a network of communication links, in known fashion. One such server system is \u201cAmerica Online\u201d from America Online, Incorporated of Virginia.","A \u201cbrowser,\u201d as depicted in , is an application that enables users to access and view electronic content stored either locally or remotely, such as in a network environment (local area network (LAN), intranet, Internet). A typical browser window  provides a user with several options for specifying the particular content that the user desires to view. For example, the user can access a pull-down menu from a menu bar  to identify a particular file or address to open, or the user can manually type an address (e.g., Uniform Resource Locator (URL)) corresponding to the desired content in an Address field .","Several types of user applications maintain history state information identifying the programs, files or other content most recently accessed. A word-processing program, for example, may maintain a short drop-down menu showing three or four recently opened files, which a user can then easily re-open with a single click of the mouse button. A browser similarly keeps track of the history of addresses or locations accessed by the user, and uses this history information to provide the user with mechanisms for moving among the locations previously visited.","More particularly, as a user accesses content at a particular address and then moves on to a new address, and after that another new address and so on, the browser  keeps track of the past files or addresses that the user has visited or otherwise accessed. If the user subsequently desires to return to one of these locations, the browser may provide several different mechanisms for doing so, for example as shown in , through a drop-down window  referred to as a \u201chistory list\u201d, and\/or by using Back and Forward buttons  and , which provide stepwise access to the browser's \u201cnavigation tree\u201d\u2014a logical construct that defines the next location to jump to when either the Back  or Forward  buttons are clicked.","In the example shown in , a user presently accessing page can return to the immediately previous location, page, either by clicking the cursor once on the Back button  or by clicking the cursor first on the combo-box button , which causes the history list  to be displayed, and then clicking the cursor on the second topmost entry  in the history list . Subsequently, the user either can continue clicking the Back button  to step back through the addresses previously visited as defined by the browser's navigation tree (e.g., page, page, and page in that order) or can click on the Forward button  to return to the location from where the user just came, page. In addition, the user can randomly access any of the entries in the history list  by clicking the cursor on the desired location. Or the user can jump to some altogether new location, for example, by typing an address in the Address field , by using menu functions in the menu bar , or by clicking on a link  displayed in the browser window .","Whenever the browser jumps to another location, by whatever means, the history list  and the navigation tree may be updated or otherwise modified to reflect the current navigation state. For example, as shown in , if a user jumps to a new location not yet visited (e.g., page), the Address field  displays the new address and the history list is modified by inserting a new entry  immediately below the Address field  to list the previous location (page). The rest of the history entries - already in the history list  are shifted down by one row to make room for the new entry . If the history list  becomes too lengthy, the browser may delete the oldest entries to make room for each new location visited.","By way of another example, if the user then jumped to a previously visited location by clicking on an entry displayed in the history list , for example, page, the browser would update the history list to appear as in , in which the same entries appear but in a different order. Specifically, the updated history list  shown in  displays the now current address, page, in the Address field , and the other previously visited locations are displayed below the Address field  in the order in which they were last visited (most recently visited at top, oldest at bottom). An entry for page no longer is displayed below the Address field  because the history list  typically will not contain duplicate entries for a location even though, as in this example, that location was visited more than once.","For each jump to another location, whether previously visited or not, the browser also updates or modifies its navigation tree as appropriate.  depicts a navigation tree in which the circles represent the different locations visited and the arrows represent jumps from one location to the next. The particular navigation tree example in  represents an order of events in which a user makes nine jumps to visit seven different locations in the following order: page\u2192page\u2192page\u2192page\u2192page\u2192page\u2192page\u2192 page\u2192page\u2192page.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 4B","FIG. 4A"],"b":["1","2","3","4","5","4","5","4","3","2","1"]},"In the first five states (jumps -), because the user has not returned to any previously visited location, the Forward Button state remains empty (i.e., no Forward jump location is defined). At jump , however, the Forward Button state reflects that a single jump in the Forward direction (to page) is available because the user has returned to a previously visited location (page). At jumps  and , the Forward Button state again becomes empty as the user moves on to a new location, page.","At jump , as shown in , the user has traveled backward in the navigation tree from page directly to page, for example, by selecting the page entry from the history list. At this point, as shown in , the Back button state information points to page and then to page (in that order, assuming successive clicks of the Back button), while the Forward button state information points to page, page, and then to page (in that order, assuming successive clicks of the Forward button).","At jump , the user decides to view a new location and thus points the browser (e.g., by typing in an address in the Address field) to page , at which point the navigation tree is \u201cpruned.\u201d That is, the navigation tree is modified to reflect the current state and to ensure that subsequent clicks of the Back and Forward buttons provide users with a predictable response. In the specific example of the navigation tree shown in , all three of the locations within the dotted region \u2014page, page and page\u2014are removed from the navigation tree as a result of the pruning that occurs when the user moved from page to page. Consequently, as shown in , the Forward button state again becomes empty and the Back button state information specifies that three successive clicks of the Back button would cause the browser to move from page to page, page and page in that order. Pruning of the navigation tree in this fashion typically is independent of, and does not affect, the order or identity of locations displayed in the history list\u2014that is, all seven locations page-page still would appear in the history list even though page-page were pruned from the navigation tree for the Back and Forward buttons.","Various implementations of the invention may include one or more of the following features.","In one aspect, history and\/or navigation information in a computer application (e.g., client software for an online computer service) can be managed by establishing a global context that can communicate with multiple resources (e.g., a browser application or a non-browser application such as a word-processor or the like), each of which resides in an associated local context. State information (e.g., an Internet URL or a non-Internet address in a private network) from one or more of the local contexts is communicated, for example, in response to a change in state in one or more of the local contexts, to the global context, and global navigation information (for example, defining a drop-down history list or back\/forward button states) is generated and maintained based on the communicated state information. Using the global navigation information, a user of the computer application can move among previously visited resources in a global manner. To facilitate this movement, graphical controls (e.g., Back and Forward buttons and\/or a drop-down history list) can be displayed in a GUI to enable a user of an application to move among resources based on the global-context navigation information.","The change in state in a local context can include a change in a title or an address, or both, associated with a resource. The change in state in a local context can be triggered by input from a user of the computer application, for example, by one or more of clicking a cursor in a window associated with a resource, clicking on a link in a window associated with a resource, clicking on a Back\/Forward navigation button, selecting an address from a displayed history list, or typing an address in an address field. Alternatively, the change in state in a local context can be triggered by a computer process transparently to a computer user, for example, when the host computer changes the title of an existing window.","The global navigation information maintained by the computer application can include state information for global-context Back\/Forward buttons displayed in a graphical user interface associated with the computer application and\/or state information for a global-context history list presented to a user of the computer application.","Using navigation input received from a user and the maintained the global navigation information, the computer application can change the focus (e.g., by activating a window) to move among the available resources\u2014e.g., by changing the focus from a current window to a previously accessed window. In changing focus from a current window to a previously accessed window, the computer application may use local-context navigation information maintained by a resource (e.g., a browser application) when the user navigating within that resource's local context.","Optionally, if a previously accessed window associated has since been closed, a new instance of that window can be spawned in connection with changing the focus to that window. The user may be allowed to specify whether closing a window associated with a resource results in deletion of the window from the global navigation information. In that case, maintenance of the global navigation information may include deleting navigation information corresponding to the closed window.","Moreover, maintenance of the global navigation information may include selectively modifying the global navigation information depending on a manner in which a user interacts with the computer application. For example, modification of the global navigation information could be prevented if the user interacted with the computer application in any one or more of the following manners: clicking a cursor in a window associated with a resource, clicking on a link in a window associated with a resource, clicking on a Back\/Forward navigation button, selecting an address from a displayed history list, or typing an address in an address field.","In addition, or alternatively, maintenance of the global navigation information may include pruning a navigation tree, for example, by determining that a user of the computer application is accessing a new address, and deleting forward button state information.","In another aspect, managing a history list in a computer application can be accomplished by receiving state information from multiple independent resources, each of which resides in an associated local context. Based on the received state information, the computer application maintains a history of resources accessed by a user of the computer application, and may present a global-context history list (e.g., a drop-down history list in a GUI) representative of an order in which the resources were accessed. The history of resources maintained by the computer application may correspond to a navigation path among re-sources. A user of the computer application may return to any of the listed resources by selecting a desired resource from the global-context history list. Optionally, the global-context history list presented to the user may selectively omit an identity of one or more of the accessed resources, for example, for security or privacy reasons.","State information from a local context may be communicated to the application in response to a change in state in the resource's local context (e.g., a change in an address or title, or both, associated with the resource). The state information may include an Internet URL address or a private network (i.e., non-Internet) address, or both.","Maintenance of the history of accessed resources may include selectively modifying the global-context history list depending on a manner in which a user interacts with the computer application. For example, modification of the global-context history list could be prevented if the user interacted with the computer application in any one or more of the following manners: clicking a cursor in a window associated with a resource, clicking on a link in a window associated with a resource, clicking on a Back\/Forward navigation button, selecting an address from a displayed history list, or typing an address in an address field.","Moreover, maintenance of the history may include adding a new entry to a top of a list if the resource had not been accessed previously or rearranging entries in the list if the resource had been accessed previously.","The techniques, methods and systems described here may provide one or more of the following advantages. For example, they may permit a computer application, such as a browser or an online service, to provide users with a global context for history and navigation information. As a result, a user can operate a single set of navigation controls (e.g., Back\/Forward buttons, drop-down history list) to navigate among separate and independent resources (application, windows, etc.) that have no knowledge of each other's state or existence. In addition, by implementing specific rules for updating or otherwise modifying the global history state information, users are provided with a robust navigation environment for moving quickly and easily among previously visited windows.","The details of one or more embodiments are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of the invention will be apparent from the description and drawings, and from the claims.","Like reference numbers and designations in the various drawings indicate like elements.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 5","FIG. 5"],"b":["500","1","505","1","2","7"]},"In conventional systems, each resource (e.g., Browser) may maintain its own local set of history and navigation information independently of the other resources. In such a system, Browser could have its own navigation mechanisms (e.g., Back\/Forward buttons and\/or a drop-down history list) to move between windows W and W. However, a browser in a conventional system is unaware of the existence of, and unable to coordinate with, other windows and\/or resources that are open and being used concurrently. As a result, Browser's navigation mechanisms could not be used to move from window W or W, for example, to window A. In other words, Browser's history and navigation information is limited to its own local context.","In contrast, the client application  shown in  maintains navigation and history information in a global context\u2014that is, with knowledge of, and the potential ability to coordinate and move between all of the resources accessed by the user. As a result, the client application  is able to provide a user with a robust history and navigation management environment for moving among potentially disparate and independent resources.","In the course of doing work, a user may desire to move between several different windows in an arbitrary manner. For example, a user working on a research project may open a window A for viewing an online periodical on the service provider's private network, two different sub-windows W and W within the Browser to do research on the Internet, and an e-mail window A to type up notes. The user can move among the various open windows, and thereby facilitate use of the corresponding resource, by clicking the mouse cursor in the window of interest\u2014an operation referred to as making the window \u201cactive\u201d or in \u201cfocus.\u201d","In the example shown in , the user has open three service provider-based windows, A, A and A, and two separate browser instances, Browser and Browser. Any suitable browser may be used, for example, Microsoft Internet Explorer or Netscape Navigator, and can be implemented either as a standalone application or in modified form as an embedded browser. In the example shown in  and described below, the client application uses an embedded Microsoft Internet Explorer browser that has been modified to appear as a standard window without the toolbars and other GUI features present on the standalone version. The client application communicates with the browser through a standard API (application programming interface). The client application communicates with the host computer\u2014for example, in order to create, delete or manage windows\u2014using messages generated by a scripting language.","As indicated by the arrows in , the user in this example makes eight jumps among seven different locations (W, W, A, A, W, W, A) within five separate resources , , ,  and . The client application  keeps track of these jumps as they are made and uses the information as appropriate to modify both a global history list  and the navigation state information for global Back and Forward buttons , . The user can manipulate these global history and navigation mechanisms as desired to quickly and easily step between locations previously visited, without regard to which location corresponds to which resource.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIGS. 6A-6I","FIG. 7"],"b":["550","525","530"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 6A","FIG. 5","FIG. 7","FIG. 7"],"b":["1","1","1","1","0","1"]},"The user then jumps to a new address W, for example, by clicking on a link displayed in W, while remaining in the context of Browser. Typically, this action would cause window W to update its contents and address to point to the URL designated by the link, in which case there would be no need for window W. But in the example shown, when the user clicks on the link, Browser is configured to spawn a new sub-window, W, corresponding to the new URL. In either case, the history list is updated in response to the jump by adding a new entry at the top corresponding to W. As shown in , the client's Back\/Forward button state information indirectly points to and uses Browser's back and forward state information because the user still is navigating within the local context of Browser.","As shown in , a subsequent jump to A causes the history list to add another new entry corresponding to location A\u2014notably, a location outside the context of Browser . In addition, as shown in , the client's Back button state information points to Browser, thereby indicating that the client should return to Browser and use its local history information (W\u2192W) if the user clicks the back button while at location A.","At this point, the user could access the drop-down history list to return to any previously visited location in the history list. Alternatively, the user could press the Back button to return either to location W (a single click of the Back button) or to W (two clicks of the Back button). If the client application did not keep track of global history and navigation information, the user would be unable to use the navigation controls to move between different resources in this manner. This is because window A is unaware of the existence of Browser and its two windows, W and W, and thus does not have sufficient context to make a Backward jump from A to W.","A subsequent jump from A back to W causes a rearrangement in the history list, as shown in , to reflect that W is the most recently visited location and locations A and W both were visited previously. Even though W also was visited between locations A and W, the history list does not reveal that fact because the history list by design does not include duplicate entries. At the same time, Browser modifies its local history information to list only a single jump back to W, while the client's global button state information is modified to add a new entry (A) to the Forward button state.","Next, upon jumping to A, a new entry for that location is added to the top of the history list as shown in  and the navigation tree is pruned, as indicated in , to remove A from the Back\/Forward buttons' navigation path. Pruning typically has no affect on the history list or on the windows displayed to the user. Rather, pruning affects the state information for the Back\/Forward buttons and thus modifies the navigation path that a user will take at any given time upon pressing the Back\/Forward buttons. The client application could be designed, however, such that pruning of the navigation tree also affects the history list or the display of windows, or both.","Subsequent jumps to locations W and W in Browser, cause corresponding changes in the history list, as shown in , and in the Back\/Forward state information, as shown in .","Departing momentarily from the example of , assume that following jump  (while the user is at W), the user desires to use the Back button to jump backwards two hops to A. Jumps (forward or backward) within the same browser context are effected by having the client application instruct the browser, via the API, to move forward or backward one jump at a time. However, due to its local context for history and navigation information, Browser in this example has no knowledge of location A and thus can facilitate only a single hop backward to W. Accordingly, using the API, the client application first instructs Browser to make a jump backwards to W. Thereafter, the client application takes over and, using its global history and navigation information, causes A to become the focus.","In other words, once the user is within the local history context of a browser window and clicks the Back\/Forward buttons, the user will traverse to the beginning or end of that browser's local history list until it is exhausted. As a result, the client application does not have to keep track of each address (e.g., URL) visited by the browser. Rather, because the client application effectively uses the browser's local history list while the user in navigating within the browser's local history context, the client application needs only to keep track of the locations visited by the user on either side of the browser\u2014i.e., the identity of the locations to jump to when the browser's local back\/forward navigation information is exhausted.","Returning to the example of , subsequent jumps back again to A and finally to A, cause corresponding changes to the history list, as shown in , and a similar pruning of locations W and W, as shown in .",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIGS. 6A-6I"},"In a similar vein, updating of the history list could be constrained for certain specified windows or locations such that the location's address or other identifying information is not displayed in the history list. This might be the case where the window's identifying information is sensitive for some reason, or where the client does not want users to be able to access the address independently of the client application.","The state information for the Back and Forward buttons generally will be affected whenever the user jumps to another location, regardless of the manner in which the jump is made, in order to provide users with predictable behavior for the Back\/Forward buttons. However, this behavior too can be changed by the system designer as desired to delimit or otherwise specify the circumstances under which the Back\/Forward button state information is modified.","Another design parameter that can be changed by a system designer is the behavior exhibited when a user attempts to use the Back\/Forward buttons to move to a previously visited window that has since been closed. In one implementation, the client application can allow such a back\/forward jump by spawning another instance of the closed window and making that window the focus. Alternatively, the client application could effectively prevent such Back\/Forward button-induced jumps by purging all traces of a window from the navigation and history information when the window is closed. The client application could allow users to switch back and forth between these two different behaviors by providing an appropriate preference option, for example, a GUI check box that enables or disables the feature \u201cUse Back\/Forward buttons to track open windows only.\u201d",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 8A"},"On the other hand, changes to window titles and addresses often occur in conjunction with each other (for example, when a user clicks on a link to a URL) in which case the history list should be modified to add a new entry if the address was not visited previously, or rearranged if the address was visited previously.","Accordingly, the process of  begins whenever the user triggers a jump to a location different (whether new or previously visited) than the present location or whenever the title or address of an existing window (whether active or not) is to be changed (for example, automatically by the host computer). In response to either of these events, the client receives a message either that the title or the address of a particular window is being changed (step ).","The client then determines whether or not the window under consideration is a browser (step ). If the window is not a browser, the flow jumps to step , discussed below. If the window is a browser, the client updates the visible entry appearing in the Address field (step ). This visible address may differ from the \u201cactual URL\u201d that corresponds to the true address of the location being accessed. In some cases, an address entered by the user might not be the true or complete address, but rather may serve merely as a proxy or abbreviation that points to the actual address.","The client next determines whether or not the browser has finished loading the content from its associated URL, or whether the browser is in a transient state (i.e., still loading content from a designated URL) (step ). If the browser has not finished loading, the process ends for the time being. When the browser subsequently finishes loading, it signals a new event and the process begins again at step .","If, on the other hand, the browser has finished loading, the client next determines whether the address\/title in question is new (step ). If so, the client adds the address as a new entry at the top of the history list (step ). If the list has reached its maximum size, the entry at the bottom of the list is removed as the new entry is added to the top. If the address\/title is not new, the number of entries in the history list is kept the same and the list is rearranged to move the address\/title from its prior slot up to the top of the list (step ).",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 8B","FIG. 8B","FIG. 8A"],"b":"801"},"At step , the client determines whether or not the window under consideration was newly generated. If so, the client uses the window's GID (a globally unique identifier) to add a new entry to the client's global Back\/Forward state information (step ).","If the window is not new, the client determines whether or not the window is a browser (step ). If so, the client continues to use the browser's local back\/forward state information (step ) and the process ends without altering the client's global Back\/Forward button state information.","If the window is not a browser, the client determines whether the window's address has changed from what it was previously (step ). If the address has changed, the client uses the window's new address to add a new entry to the client's global Back\/Forward state information (step ). If the address has not changed, the process ends without altering the client's global Back\/Forward button state information.","Next, the client determines whether the client's global Forward state is empty (step ). If so, no pruning is required and the process ends. However, if the client's global Forward state is not empty, then the client prunes the currently saved Forward button state information, and the process ends thereafter.","The techniques, methods and systems described here may find applicability in any computing or processing environment in which electronic content may be viewed, accessed or otherwise manipulated. For example, the global navigation tree and history maintenance techniques could be used by virtually any user application (e.g., word-processor, drawing program, etc.) in which the user opens multiple files in multiple windows and desires to move among them in an arbitrary manner. Similarly, an operating system could maintain a global context to track the use of various system resources (applications, utilities, etc.), and then use that information to provide users with a quick and easy mechanism for jumping back to, and among, previously used resources.","Various implementations of these systems and techniques may be realized in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations thereof. A system or other apparatus that uses one or more of the techniques and methods described here may be implemented as a computer-readable storage medium, configured with a computer program, where the storage medium so configured causes a computer system to operate on input and\/or generate output in a specific and predefined manner. Such a computer system may include one or more programmable processors that receive data and instructions from, and transmit data and instructions to, a data storage system, and suitable input and output devices.","Each computer program may be implemented in a high-level procedural or object-oriented programming language, or in assembly or machine language if desired; and in any case, the language may be a compiled or interpreted language. Suitable processors include, by way of example, both general and special purpose microprocessors. Generally, a processor will receive instructions and data from a read-only memory and\/or a random access memory. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non-volatile memory, including semiconductor memory devices, such as EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM disks.","Any of the foregoing may be supplemented by, or implemented in, specially-designed ASICs (application-specific integrated circuits).","A number of embodiments of the present invention have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the invention. Accordingly, other embodiments are within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIGS. 3A-3C"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 4B","FIG. 4A"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIGS. 6A-6I"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 7","FIGS. 6A-6I"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIGS. 8A and 8B"}]},"DETDESC":[{},{}]}
