---
title: Unified workspace for thin, remote, and SaaS applications
abstract: Application-manager software authenticates a user of a client device over a channel. The authentication operation is performed using a directory service. The application-manager software presents a plurality of applications in a GUI displayed by the client device. The plurality of applications depends on the authentication, the client device, and the channel. And the plurality of applications includes a thin application and a software-as-a-service (SaaS) application. The application-manager software receives a selection as to an application from the user. If the selection is for the SaaS application, the application-manager software provisions the SaaS application. The provision includes automatically logging the user onto an account with a provider of the SaaS application using a single sign-on and connecting the user to the account so that the user can interact with the SaaS application. If the selection is for the thin application, the application manager software launches the thin application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08990699&OS=08990699&RS=08990699
owner: VMware, Inc.
number: 08990699
owner_city: Palo Alto
owner_country: US
publication_date: 20110826
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM OF PRIORITY","RELATED APPLICATION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Patent Application No. 61\/378,294, entitled \u201cUnified Workspace for Desktop Applications, Software as a Service (SaaS) Applications, and Data\u201d, filed on Aug. 30, 2010. The disclosure of that application is hereby incorporated by reference.","This application is related to U.S. Pat. No. 7,779,091, entitled \u201cMethod And System For Providing Virtualized Application Workspaces\u201d, which issued on Aug. 17, 2010. The disclosure of that application is also hereby incorporated by reference.","In the context of deploying software applications at the enterprise level, the term \u201centitlement\u201d refers to the process of determining if a user is permitted access to an application, e.g., according to a licensing arrangement or a company policy. The term \u201cprovisioning\u201d refers to the process of actually giving a user an application, or making it accessible to the user. Provisioning generally occurs only after entitlement has been determined.","Traditionally, desktop-application entitlement and provisioning was accomplished by running an installer program or script to install an application on a computing system (e.g., a hardware device with platform software) associated with a user who has a license\/permission to use the application. Often, such an installation can be automated.","Some applications, referred to herein as \u201cthin applications,\u201d do not require a full-blown installation (e.g., including registry settings) on the user's computing system and can run from a simple executable file that merely needs to be copied to the user's disk. For example, thin applications include many virtualized applications, such as those virtualized using ThinApp\u2122, available from VMware, Inc. of Palo Alto, Calif. Similarly, other applications may be accessed remotely over a network, and need very little, if any, customization of the user's device. For example, applications may be accessed remotely using a virtual desktop infrastructure (VDI) solution, such as VMware View\u2122, a desktop-remoting system that includes a thin client accessed directly by a user, which remotes to a desktop from a remote virtual machine. In another example, a terminal server hosting user applications may be accessed using a browser or other thin client.","Likewise, software as a Service (SaaS) applications, by their nature as cloud-based applications, generally do not require installation or modification of the user's system or device. SaaS applications are generally web-based, e.g., accessed and used through a web browser. This simplifies provisioning, but can complicate both authentication and entitlement enforcement. For a SaaS application, a user typically authenticates with the SaaS provider, e.g., by providing a user identifier and password combination, before the SaaS will connect the user to his\/her account and grant access to a particular application.","As software development shifts away from traditional applications to virtualized applications, remote applications, and SaaS applications, a need arises for a centralized approach to managing the entitlement and provisioning of such applications on a growing number of client devices that use a growing number of access channels (e.g., mobile devices such as smartphones that use Wi-Fi networks).","In an example embodiment, a processor-executed method is described for providing applications to a user. According to the method, application-manager software authenticates a user of a client device over a channel. The authentication operation is performed using a directory service. The application-manager software presents a plurality of applications in a graphical user interface (GUI) displayed by the client device. The plurality of applications depends at least in part on the authentication, the client device, and the channel. And the plurality of applications includes a thin application and a software-as-a-service (SaaS) application. The application-manager software receives a selection as to an application from the user. If the selection is for the SaaS application, the application-manager software provisions the SaaS application. The provision includes automatically logging the user onto an account with a provider of the SaaS application using a single sign-on and connecting the user to the account so that the user can interact with the SaaS application. If the selection is for the thin application, the application manager software launches the thin application.","In another example embodiment, an apparatus is described, namely, a computer-readable storage medium that persistently stores a program for providing applications to a user. The program authenticates a user of a client device over a channel. The authentication operation is performed using a directory service. The program presents a plurality of applications in a GUI displayed by the client device. The plurality of applications depends at least in part on the authentication, the client device, and the channel. And the plurality of applications includes a thin application and a software-as-a-service (SaaS) application. The program receives a selection as to an application from the user. If the selection is for the SaaS application, the program provisions the SaaS application. The provision includes automatically logging the user onto an account with a provider of the SaaS application using a single sign-on and connecting the user to the account so that the user can interact with the SaaS application. If the selection is for the thin application, the program launches the thin application.","Another example embodiment also involves a processor-executed method for providing applications to a user. According to the method, application-manager software authenticates a user of a client device over a channel. The authentication operation is performed using a directory service. The application-manager software presents a plurality of applications in a GUI displayed by the client device. The plurality of applications depends at least in part on the authentication, the client device, and a geolocation of the client device. And the plurality of applications includes a sandboxed application and a software-as-a-service (SaaS) application. The application-manager software receives a selection as to an application from the user. If the selection is for the SaaS application, the application-manager software provisions the SaaS application. The provision includes automatically logging the user onto an account with a provider of the SaaS application using a single sign-on and connecting the user to the account so that the user can interact with the SaaS application. If the selection is for the sandboxed application, the application manager software launches the sandboxed application.","Other aspects and advantages of the inventions will become apparent from the following detailed description, taken in conjunction with the accompanying drawings, which illustrate by way of example the principles of the inventions.","In the following description, numerous specific details are set forth in order to provide a thorough understanding of the exemplary embodiments. However, it should be noted that the example embodiments described herein may be practiced without some of these specific details. In other instances, process operations and implementation details have not been described in detail where they are already well known.","Generally speaking, the example embodiments described herein provide a unified workspace for desktop (both local and remote) applications, software-as-a-service (SaaS) applications, and data. End users are provided with a single workspace that works across various client devices to access applications, while providing administrators a single place for managing application entitlement and provisioning.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 1","b":["100","101"]},"As depicted in , Application Manager  communicates (e.g., over a network which may include the Internet or other WAN) with 3Party SaaS , which are SaaS application providers (such as Salesforce.com, Google, etc.) supported by the system. Application Manager  can provision new user accounts with 3Party SaaS  and provide single sign-on (SSO). In an example embodiment, 3Party SaaS  might have a provisioning API and\/or support SAML (Security Assertion Markup Language). SAML is a well-known standard for enabling SSO authentication. For 3rd Party SaaS  providers that do not support SAML or have a provisioning API, Application Manager  might provide down-level screen scraping APIs to enable the provisioning of new user accounts.","As further depicted in , Application Manager  communicates (e.g., over the Internet or other WAN which might be wireless in whole or in part) with supported client devices, including, by way of example without limitation: (1) Windows Client (e.g., with a platform including an Intel x86-family microprocessor running a Microsoft Windows\u00ae operating system); (2) Mac Client (e.g., with a platform including an Intel x86-family microprocessor running a Mac\u2122 OS operating system); and (3) iPad\u00ae Client (e.g., with a platform including an ARM microprocessor running an iOS\u2122 operating system). In an example embodiment, this communication takes place through calls by native agents on the supported client devices to the RESTful API described above. For example, a native agent might periodically use the RESTful API to transmit device configuration information relating to: (a) the client device's operating system (and patches); (b) whether virus protection\/firewall\/anti-spyware is installed; (c) the domain to which the client device is attached; and (c) whether auto-updates are installed. In response, the native agent would receive a list of entitlements from Application Manager . Then the native agent would compare the entitlements to what is currently installed and execute the appropriate install, upgrade, and\/or uninstall operations.","For thin applications and native applications, installing might entail installing an MSI (Windows Installer). For remote applications, installing might entail setting up the RDP (Remote Desktop Protocol). For SaaS applications, installing might entail setting up a URL shortcut to the application. The shortcut may be installed to the user's desktop and appear as an icon that can be activated by double-clicking. The URL (Uniform Resource Locator) for this shortcut will launch the user's browser to access Application Manager , with a redirect portion of the URL for the SaaS application. More specifically, when a user clicks on the SaaS shortcut, the URL of the shortcut will direct to Application Manager  to initiate an SSO connection. After the SSO session is created, the Application Manager  will redirect user's browser to the 3Party SaaS  with the appropriate authentication information as specified by the SAML IdP-initiated SSO profile.","As also depicted in , Application Manager  can also communicate with web browser (e.g., a browser which supports HTML5, Adobe Flash, etc.). In an example embodiment, the system provides a user portal that can be accessed directly by a web browser with a system plug-in, rather than a native agent. The functionality included in such a system plug-in might, for example: (1) enable SSO for down-level SaaS applications that do not support SAML (or any other standard for an ID protocol); and (2) provide metrics to the system on SaaS application usage and\/or geolocation for reporting to administrators. Here it will be appreciated that geolocation information might be obtained from a client device through the use of the W3C Geolocation API or a similar API in a web browser, in an example embodiment.","Additionally,  depicts Application Manager  communicating across firewall  with Enterprise Connector . In an example embodiment, Enterprise Connector  might initiate a secure connection to Application Manager  so that Application Manager  can send commands to Enterprise Connector . Also, Enterprise Connector  might be a virtual appliance, in an example embodiment. Enterprise Connector  provides a bridge into the enterprise for integration with existing corporate processes and directories. To prevent companies from having to open holes in their firewall, Enterprise Connector  is installed behind firewall  and is connected to the Application Manager , e.g., using a secure connection or using a local area network (LAN) or wide area network (WAN) which might be wireless in whole or in part, but which employs security measures to vouch for identity. An example of such a security measure is a certificate installed on Enterprise Connector  and registered with Application Manager , so that Application Manager  can verify the identity of Enterprise Connector .","In an example embodiment, Enterprise Connector  might act as an Identity Provider (IdP) for SSO. In this capacity, Enterprise Connector  might provide authentication against an internal LDAP (Lightweight Directory Access Protocol) server such as Active Directory (\u201cAD\u201d) Server , without exposing passwords. It will be appreciated that in such an embodiment, AD Server  is the \u201csource of truth\u201d for corporate user identity and as such receives and reports updates to corporate user identity. In an alternative example embodiment where Enterprise Connector  is absent, Application Manager  might directly connect, using a connection which is secure or which employs security measures to AD Server , when performing authentication and operations involving user updates.","Additionally, Enterprise Connector  might act as a staging area behind firewall  for integrating with existing workflow and licensing processes. In this capacity, Enterprise Connector  might make provisioning callouts to existing management tools and processes , using, for example, custom workflows built on WS-BPEL (Web Services Business Process Execution Language) or built into management tools. When making these provisioning callouts, Enterprise Connector  will utilize information from existing license tracking systems, asset management systems, etc.","Similarly, Enterprise Connector  might perform SaaS provisioning inside firewall , using SAML or provisioning APIs exposed by IT Run SaaS . IT Run SaaS  might include SaaS applications such as Oracle Apps, Outlook Web App (OWA), etc. In an example embodiment, some or all of these internal SaaS applications might not be provisioned against AD Server .","Enterprise Connector  may allow extensions to system  for supporting additional applications. For example, a user of system  might want to use Jira\u00ae, an issue and project tracking application available from Atlassian Pty Ltd. of Sydney, Australia, but system  does not provide drivers to support such use. In this scenario, the user may create their own drivers and install them, e.g., as plugins or extensions, in Enterprise Connector . The drivers will then run as part of any provisioning operation involving Jira.","In an example embodiment, the system depicted in  might run on a number of servers connected by a network (e.g., a LAN or a WAN) to each other in a cluster or other distributed system which might execute distributed-computing software (including Apache's Hadoop or other software based on Map-Reduce and\/or Google File System), virtualization software (e.g., as provided by VMware, Citrix, Microsoft, etc.), load-balancing software, database software (e.g., SQL, NoSQL, etc.), web server software, etc. In turn, the distributed system might be connected (e.g., by a storage area network (SAN)) to persistent storage which stores (e.g., in a database or other file) data related to authentication, entitlements, and provisioning. The servers themselves might include: (1) hardware consisting of one or more microprocessors (e.g., from the x86 family), volatile storage (e.g., RAM), and persistent storage (e.g., a hard disk or solid-state drive); and (2) an operating system (e.g., Linux, Windows Server, Mac OS Server, etc.) that runs on the hardware.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 2","b":["200","103","103","203","103"],"i":["e","d "]},"As depicted in , the server-side modules of the system include four modules that interface with the client-side modules. One of these modules is the Administrative Web UI (user interface) , where administrators can go to manage, among other things: (1) applications and application families (e.g., where a \u201cfamily\u201d is an arbitrary group of applications that may be managed as a unit, as opposed to a family of different versions of a single application); (2) end users; (3) client devices and policies related to client devices; and (4) entitlements. Also, administrators might be able to view reports on usage and\/or geolocation at Administrative Web UI , in an example embodiment. Elsewhere in the disclosure, Administrative Web UI  is called the \u201cadministrator web portal\u201d.","Further, as depicted in , the server-side modules of the system include a User Web UI  where users can go to launch applications in a relatively seamless manner and enable disabled applications they are entitled to. Also, the system's server-side modules include a RESTful API , which may include a set of APIs and provides access to some or all of the system's functionality, depending on how the system is implemented and\/or configured. In an alternative example embodiment, the system's functionality might be accessed in whole or in part using the SOAP (Simple Object Access Protocol) protocol or some other protocol for inter-process communication. Elsewhere in the disclosure, User Web UI  is called the \u201cuser web portal\u201d.","As additionally depicted in , the server-side modules of the system include a SAML Front End , which understands SAML and which creates the SAML session, using SSO Service , to perform most of the actual work related to SSO authentication.","Beneath the four server-side modules that interface with the client-side modules is an Internal Java API  which server-side modules - use to communicate and to access the server-side modules that provide back-end functionality. The Internal Java API  might log all of its API calls to the Logging\/Analytics Store , in an example embodiment. This information might then be used for generating user reports on usage and\/or geolocation.","The server-side modules that provide back-end functionality include a module  for account management which provides an API for purchasers of the system to interact with the entity distributing the system (i.e., VMware). The server-side modules that provide back-end functionality also include a search module  which provides a search interface for searching the objects in the Application Entitlement Store (AES) Object Store . In an example embodiment, the objects in the AES Object Store  might be indexed in a Solr index in preparation for searching. Solr is an open-source enterprise search platform from the Apache Lucene project.","Another server-side module that provides back-end functionality is module  for user reports. Module  creates reports for administrators. In an example embodiment, module  will retrieve data for the reports from Logging\/Analytics Store  and AES Object Store , among other places. The reports might cover licenses, application usage, access location (e.g., geolocation), devices by user and\/or type and\/or configuration, etc. In an example embodiment, the reports from Logging\/Analytics Store  might be created using Apache's Hadoop (e.g., Hadoop jobs). Also in an example embodiment, the reports might generate cubes, such as OLAP (online analytical processing) cubes, where the cubes might have dimensions for, among other things: (a) user; (b) group\/tag; (c) application; (d) date\/time; and (e) device type. It will be appreciated that each of these dimensions might not be generated in the same cube for the same report. In an example embodiment, a user report might also include metrics related to the number of application provisions, usage time, usage time at a location, number of logins, etc.","The server-side modules that provide back-end functionality include module  for provisioning. In an example embodiment, module  might have custom logic (or provisioning drivers) for different types of applications. For example, for SaaS applications , the provisioning driver might operate according to the process defined in Table 1.",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003If the SaaS application supports JIT (Just In Time) provisioning,"},{"entry":"\u2003\u2003Then do nothing."},{"entry":"\u2003If the SaaS supports Service Provisioning Markup Language (SPML) or"},{"entry":"another provisioning API,"},{"entry":"\u2003\u2003Then call that API."},{"entry":"\u2003Otherwise, do form stuffing to automatically provision the SaaS "},{"entry":"application."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"For example, since Salesforce's SaaS employs JIT provisioning, when a user attempts to access the Salesforce SaaS application, Salesforce will contact the system for an immediate provisioning decision.","Form stuffing is used for authentication for SaaS applications  when the SaaS provider does not support SAML (or another SSO scheme). That is to say, module  sets a password during provisioning. In an example embodiment, the passwords might be randomly generated, so that compromising a single password will not compromise the system. The user may be prevented from accessing the password. By not providing the password to the user, the system prevents the user from going to a SaaS application without using a system agent.","For thin applications and\/or native applications, the provisioning driver might (1) perform any licensing accounting and (2) make the application available for download. For remote applications, the provisioning driver might (1) perform any licensing accounting and (2) retrieve related files, e.g., Remote Desktop Protocol (RDP) files, VMware View\u2122 files, etc. In an alternative example embodiment, some or all of these operations might be performed by existing workflow and licensing processes (e.g., in response to provisioning callouts as described above).","It will be appreciated that in an example embodiment, the thin application might be a virtualized application such as a VMware ThinApp\u2122, which provides a sandbox to hold runtime modifications to, for example, the registry and\/or file system made by an application. It will further be appreciated that such a sandbox is useful to prevent overwritten DLLs (dynamically linked libraries), among other things. Similarly, in an example embodiment, the remote application might be a desktop virtualization application such as a VMware View application which runs on a guest operating system on a virtual machine provided by a virtualization layer (e.g., a hypervisor) on a remote server.","Further, in an example embodiment, the provisioning driver for an application might support the following operations: (1) add\/remove a user; and (2) get user status. Typically, the add\/remove operation will be performed once per user. If the application is a SaaS application, the provisioning driver might add a user by associating the user's credentials with an account previously obtained by an administrator from a SaaS provider. If the application is a thin application or a remote application, the provisioning driver might add the user by performing any licensing accounting.","It will be appreciated that the retrieved user status might be used to determine variances between the expected provision state and the actual provision state of a user of a SaaS application.","As also depicted in , the server-side modules that provide back-end functionality include module  for entitlements. In an example embodiment, this module controls access to the system's applications based on entitlements. In an example embodiment, an entitlement might be represented by as a tuple with elements such as <user, device, application, set of user tags, device configuration, authentication type>.","Among other things, the entitlements determine which application shortcuts (e.g., as represented by icons) are presented on the GUI desktop displayed by native client . Similarly, these entitlements will be checked to determine which application shortcuts (e.g., as represented by icons) are presented in the GUI displayed by User Web UI . Additionally, for each SSO operation against an application, module  checks the entitlement to verify that the SSO can proceed and to set a session timeout. When entitlements change, module  determines whether any provisioning\/de-provisioning operations should be performed and whether any SSO sessions should be closed.","Another server-side module that provides back-end functionality is module  for SSO. In an example embodiment, module  keeps track of authentication sessions that are shared across different applications. It will be appreciated that initiation of a session involves user authentication. In an example embodiment, if the user is inside the firewall , authentication might take place against AD Server  (or other directory service), by going through Enterprise Connector . If the user is outside firewall , authentication might take place against AD Server  (or other directory service), by going through both Application Manager  and Enterprise Connector . Alternatively, the system might delegate authentication to an SaaS provider (e.g., Google Apps) or other provider (e.g., Yahoo!) that provides hosted identity and which is accessed using SAML or OAuth (Open Authorization).","In other instances, authentication might not involve a directory. That is to say, authentication might occur through SAML. Or for down-level applications, authentication might be handled by form stuffing as described above, which might request a username and\/or password from a user through a GUI in web browser ","The server-side modules that provide back-end functionality also include module  for user update. This module updates user data based on changes, for example: (1) resulting from operations performed through Administrator Web UI ; (2) coming from RESTful API ; or (3) propagated from Directory Store  through a synchronization tool, e.g., an AD update tool, a Yahoo! update tool, a Google update tool, etc.","Another server-side module that provides back-end functionality is Billing Service , which is might be an automated third-party service that performs the accounting or verification of accounting for licensing charges\/payments for applications provisioned by the system. In an example embodiment, the system might access Billing Service  using an API.","The server-side modules that provide back-end functionality also include AES Object Store . In example embodiment, AES Object Store  is a scalable object store that stores the system's objects (e.g., related to users, applications, groups, application families, entitlements, account activations, etc.) in a database. It will be appreciated that the rest of the system works with versions of these objects using transactions semantics. In an example embodiment, AES Object Store  provides optimistic concurrency and atomic operations. Also, in an example embodiment, AES Object Store  might be distributed among several databases on the basis of enterprise organizational structure.","Another server-side module that provides back-end functionality is Logging\/Analytics Store . In an example embodiment, Logging\/Analytics Store  might provide scalable persistent storage (e.g., in the form of logs) for: (1) API calls; (2) provisioning operations; and (3) application usage data (e.g., received from a native client or browser plug-in). Logging\/Analytics Store  also provides a job interface which allows User Reports  to run analytics on the logs and generate reports and cubes.","The server-side modules that provide back-end functionality also include BLOB Store , Key Chain Store , and User Key Store . BLOB Store  stores images for native applications, thin applications, etc. As indicated in , BLOB Store  might be provided by a third party. In an example embodiment, the system might access BLOB Store  using an API. Key Chain Store  stores the encrypted passwords used in down-level authentication. And User Key Store  stores the per-user keys used to decrypt the encrypted passwords in Key Chain Store .","It will be appreciated that in an example embodiment, the server-side modules described above might be part of the Application Manager  described. In an alternative example embodiment, some of the server-side modules described above might instead be part of the Enterprise Connector , if it is installed. Or the functionality in the server-side modules might be relocated to client-side modules and vice versa. That is to say, the modules described above can be distributed throughout the system in any suitable way.",{"@attributes":{"id":"p-0076","num":"0075"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},{},{},"Type 2"]},{"entry":[{},"Type 1 Enterprise","Type 1 (Variant)","Enterprise"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Modern ","User inside firewall","User outside firewall","No firewall"]},{"entry":["SaaS","2 STSes","1 STSes","1 STS"]},{"entry":["App","SAML to App","SAML to App","Proprietary connector"]},{"entry":[{},{},{},"to Id Store"]},{"entry":[{},{},{},"SAML to App"]},{"entry":["Legacy ","1 STS","No STS","No STS"]},{"entry":["SaaS","HTTP Fed to App","Native auth to store","Native auth to store"]},{"entry":["App",{},"HTTP Fed to App","HTTP Fed to App"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"Table 2 illustrates various scenarios for SSO, in accordance with an example embodiment. It will be appreciated that these scenarios are intended to illustrative rather than limiting. In the first scenario in the column Type 1 Enterprise and in the row Modern SaaS App, the user is inside the firewall but there are two secure token services (STSs), e.g., the application manager server does not have a secure connection into the firewall. This scenario is depicted in , where STS  is onsite (e.g., Active Directory Federation Service (ADFS) in the DMZ) and can authenticate the user to an AD server and create a SAML token. This is shown as operation  in , between client device  and STS . The other STS, STS , can create a SAML token based on an open session using the SAML token created by STS . This is shown in operation  in , between client device  and application portal  (e.g., the user web portal described above). As depicted in operation  in that figure, the client device  then uses the SAML token created by STS  to connect to a modern (SAML-enabled) SaaS application server  and gain access to an SaaS application.","In the second scenario, described in the column Type 1 Enterprise and the row Legacy SaaS App of Table 2, there is only one STS. For example, the application manager server may have a secure connection into the firewall. The STS is on an application manager server, which can authenticate the user to an AD server and which proxies a connection between the client device and the legacy SaaS application server using HTTP Federation (HTTP Fed). It will be appreciated that in this instance, the application manager server performs authentication on behalf of the user using a traditional username-password combination. In an alternative example embodiment, the system might also use HTTP Fed with an SAML-enabled SaaS application server, in any of the scenarios described in the table.","In the third scenario, described in the column Type 1 Variant and in the row Modern SaaS App of Table 2, the user is outside the firewall and there is only one STS, e.g., the application manager server has a secure connection into the firewall. This scenario is depicted in , wherein an application manager server includes STS  which can authenticate the user to an AD server  through the use of directory connector  (e.g., AD Connector in the DMZ), such as the Enterprise Connector  described above, and create a SAML token. This is shown in operation , between client device  and application portal  (e.g., the user web portal described above), and operation , between STS  and directory connector . Then as depicted in operation  in that figure, the client device uses that SAML token to connect to a SAML-enabled SaaS application server  and gain access to an SaaS application.","In the fourth scenario, described in the column Type 1 (Variant) and in the row Legacy SaaS App of Table 2, there is no STS and a native authorization is made to the application manager. The authentication manager can then authenticate the user to an identity store on premises and which proxies a connection between the client device and the legacy SaaS application server using HTTP Federation (HTTP Fed). As indicated in the table, this same scenario occurs in cell  in the column Type 2 Enterprise and the row Legacy SaaS App.","In the fifth scenario, described in the column Type 2 Enterprise and in the row Modern SaaS App of Table 2, there is no firewall and one STS. This scenario is depicted in , wherein an application manager server includes STS  which can authenticate the user to an identity store and create a SAML token from a SAML token created by a hosted identity store (e.g., at Google or Salesforce) accessed using a proprietary connector. This is shown in operation , between client device  and application portal  (e.g., the user web portal described above), and operation , between application manager  and hosted-identity manager . The client device  then uses that SAML token to connect to a SAML-enabled SaaS application server  and gain access to a SaaS application, in operation .",{"@attributes":{"id":"p-0082","num":"0081"},"figref":["FIG. 4","FIG. 2"],"sup":"rd "},"In operation  of the process, the system receives a call from the administrator web portal (ADMIN UI) to add an entitlement to a SaaS application for a user or group of users, e.g., as the result of a GUI command from an administrator. This call goes to the system's Entitlement module. This call is logged to the Logging\/Analytics Store as are any other calls that make use of the Internal Java API. Then in operation , the Entitlement module adds the entitlement and expected provisioning state to the AES Object Store's objects for the affected users. In operation , the Entitlement module makes a call (e.g., through the Internal Java API) to the Provisioning module to provision any accounts that need to be provisioned. And in operation , the Provisioning module makes calls (e.g., through a provisioning API) to the 3Party SaaS Provider (or Vendor) to provision SaaS accounts for the user or group of users. In operation , the Provisioning module updates the pertinent objects in the AES Object Store with the state of the provision and, if appropriate, modifies the number of licenses for the SaaS application. Then in operation , the Provisioning module updates the Logging\/Analytic Store with the progress (or failure) of the provision. In operation , the user web portal (User Web UI) calls the Entitlement module (e.g., through the Internal Java API) to determine whether there are any new entitlements for the user, e.g., as the result of a GUI command from the user (or one of the users in the group of users). And the Entitlement module causes the user web portal to display the added entitlement. Alternatively, in operation , a Native Client (e.g., running on a device such as an iPad), calls the Entitlement module (e.g., through the Internal Java API) to determine whether there are any new entitlements for the user, e.g., as the result of a GUI command from the user (or one of the users in the group of users). And the Entitlement module causes the Native Client to display the added entitlement.",{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 5","b":["501","502","503","504"]},{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 6","b":["601","602","603","604","605","606","607","608","609"]},{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 7","b":["701","713","702","703","704","705","706","707","708","701"]},"If the provisioning callouts were successful or if provisioning callouts were not used, the Provisioning module calls the applicable provisioning driver, using the provisioning task data, in operation . Then, in operation , the Provisioning module determines whether the call (or provision) was successful. If not, the Provisioning module updates the provisioning object in the AES Object Store  to indicate the failure, in operation , and then logs the error and returns to operation . If the call to the provisioning driver was successful, the Provisioning module updates the provisioning object in the AES Object Store  to indicate completion, in operation , and then returns to operation .",{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 8","b":"801"},"In operation , the provisioning driver makes a call to the SaaS application (e.g., through an API) to create an account for the user. The provisioning driver creates an SaaS account in the AES Object Store  for the Mozy account, in operation . And in operation , the provisioning driver updates the SSO service (e.g., through a call using the Internal Java API), with a tuple such as <username, password, name of SaaS application>, where the username is the username for the SaaS application account and the password is the password for the SaaS application account, e.g., the random password. In operation , the SSO service updates the KeyChain Store with the password. The provisioning driver provisions the user to the SaaS application under the default group, in operation . And in operation , the provisioning driver creates a SaaS account in the AES Object Store with the new provision key resulting from that provision.",{"@attributes":{"id":"p-0090","num":"0089"},"figref":["FIGS. 9A and 9B","FIG. 9A","FIG. 9A"],"b":["901","902","903","904","905","906","907","908","910"]},"As indicated above, the system will redirect to a login page in operation , if the session is not alive. In an example embodiment, this redirect might occur via the SAML SP (Service Provider) Initiated SSO profile (with the Redirect Bindings). If an Enterprise Connector is installed with the system, the redirect will go to the Enterprise Connector which will now act as an IdP against the internal LDAP store (e.g., AD). The browser on the client device will negotiate an authentication protocol (e.g., Kerberos) and authenticate the user. The Enterprise Connector will then redirect the authenticated user back to the Application Manager via the response portion of SAML SP Initiated SSO profile (over the Redirect Bindings). The Application Manager will then create the SSO session for the SaaS application.",{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 9B","b":["911","912","913","914","915","916","917","918"]},{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 10","b":["1001","1002"]},{"@attributes":{"id":"p-0094","num":"0093"},"figref":"FIG. 11","b":["1101","1101","1102","1103"]},{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 12","b":["1101","1101","1201","1202","1203","1201","1204"]},"Additionally, in an example embodiment, the user edit dialog  lists in a table  the applications to which the user is entitled. The table  has columns for the application name, device (e.g., client device) policy, and deployment. Thus, for example, the user whose name is Regis Gorman is entitled to use the Salesforce application on all devices and deployment is automatic. The user edit dialog  also includes a GUI control (e.g., a button)  to add an entitlement and a GUI control (e.g., a button)  to deny an entitlement. And the user edit dialog  also includes a GUI control (e.g., a button)  to remove an entitlement to an application and a GUI control (e.g., a button)  to save editing changes.",{"@attributes":{"id":"p-0097","num":"0096"},"figref":"FIG. 13","b":["1301","1301","1302","1303"]},{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIG. 14","b":["1301","1301","1401","1402","1401","1403","1404"]},"Additionally, in an example embodiment, the group edit dialog  lists in a table  the applications to which a group is entitled. The table  has columns for the application name, device (e.g., client device) policy, and deployment. Thus, for example, the group whose name is Company X is entitled to use the Salesforce application on all devices and deployment is automatic. The group edit dialog  also includes a GUI control (e.g., a tree view)  with a scroll bar  to add an entitlement for the group, e.g., by clicking on the application's icon. And the user edit dialog  also includes GUI control  that allows an entitlement for the group to be edited and a GUI control (e.g., a button)  to remove an entitlement for the group. The user edit dialog  includes GUI control (e.g., a button)  to save editing changes.",{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 15","b":["1408","1401","1501","1501","1502","1503","1501","1504"]},{"@attributes":{"id":"p-0101","num":"0100"},"figref":"FIG. 16","b":["1601","1601","1602","1603","1601","1604"]},{"@attributes":{"id":"p-0102","num":"0101"},"figref":"FIG. 17","b":["1601","1603","1701","1702","1703","1701","1704"]},"Additionally, the dialog  includes a list  of radio buttons that identify the application type for the application: (1) pre-configured applications, including email and data sync services; (2) Windows desktop applications, including VMware ThinApp virtualized applications or native MSI (Windows Installer) applications; (3) SaaS applications that are web-based applications like Workday or Salesforce; and (4) published (or remote) applications such as the Microsoft Terminal Services (RDS) application or the Citrix XenApp application. It will be appreciated that as depicted in , the top radio button in list  has been checked. And consequently, dialog  displays the icons  for four pre-configured applications managed by the system: (A) VMware View; (B) Mozy; (C) Google Apps; (D) Box.net; and (E) Salesforce. Dialog  also includes a GUI control (e.g., a button)  to save editing changes.",{"@attributes":{"id":"p-0104","num":"0103"},"figref":"FIG. 18","b":["1601","1705","1701","1801","1802","1803","1801","1804","1801","1805","1806"]},"Additionally, edit dialog  includes a GUI control (e.g., a button)  that allows the administrator to select a file to be uploaded by a local host computer, e.g., the host computer of a user entitled to use the Windows desktop application. After clicking on GUI control , pop-up dialog  is displayed, which allows the administrator to select the file using a mouse and\/or keyboard from a list of files  in a directory. Pop-up dialog  also allows the administrator to select a location from a list of locations (e.g., DEVICES, SHARED, and PLACES) , using a mouse and\/or keyboard. And pop-up dialog  includes GUI control (e.g., a button) that allows for cancellation of the file selection operation.",{"@attributes":{"id":"p-0106","num":"0105"},"figref":"FIG. 19","b":["1601","1705","1701","1901","1902","1903","1901","1904","1901","1905","1906","1901","1907","1908","1909"]},{"@attributes":{"id":"p-0107","num":"0106"},"figref":"FIG. 20","b":["2001","2001","2002"]},{"@attributes":{"id":"p-0108","num":"0107"},"figref":"FIG. 21","b":["2101","2101","2102","2103","2104","2105"]},"This policy is intended to be illustrative and not limiting. Another device policy might require that Windows be installed. Or the device policy might pertain to the channel (or connection) used to access the AD domain, e.g., LAN, WAN, name-password protected, secure-ID protected, etc. Further still, the device policy might pertain to geolocation, e.g., an application can only be used on a client device if the client device is located within the jurisdictional boundaries of a particular governmental entity.","Additionally, policy tab  includes a GUI control (e.g., a button)  that allows an administrator to add a new policy and a text field  that displays user tips. And policy tab  includes a GUI control (e.g., a button)  to save editing changes.",{"@attributes":{"id":"p-0111","num":"0110"},"figref":"FIG. 22","b":"2201"},"It will be appreciated that GUI view  is intended to be illustrative rather than limiting. If the client device is a Windows device, GUI view  might also include icons added to the Start menu and status alerts as to the applications in the status bar, in order to provide the user with a sense of seamlessness. Of course, enhancements of a similar nature might also be made to GUI view  when displayed on an Apple device, to promote seamlessness.",{"@attributes":{"id":"p-0113","num":"0112"},"figref":"FIG. 23","b":"2301"},"Any of the operations described herein that form part of the inventions are useful machine operations. The inventions also relate to a device or an apparatus for performing these operations. The apparatus may be specially constructed for the required purposes, such as the carrier network discussed above, or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular, various general purpose machines may be used with computer programs written in accordance with the teachings herein, or it may be more convenient to construct a more specialized apparatus to perform the required operations.","The inventions can also be embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data, which can thereafter be read by a computer system. Examples of the computer readable medium include hard drives, network attached storage (NAS), read-only memory, random-access memory, CD-ROMs, CD-Rs, CD-RWs, DVDs, Flash, magnetic tapes, and other optical and non-optical data storage devices. The computer readable medium can also be distributed over a network coupled computer systems so that the computer readable code is stored and executed in a distributed fashion.","Although example embodiments have been described in some detail for purposes of clarity of understanding, it will be apparent that certain changes and modifications can be practiced within the scope of the following claims. For example, the processes described herein might be used to provision Platform as a Service (PaaS) or Infrastructure as a Service (IaaS), in addition to Software as a Service (SaaS), thin applications, remote applications, etc. Further, the process operations described above can be ordered, modularized, and\/or distributed in any suitable way.","Accordingly, the present embodiments are to be considered as illustrative and not restrictive, and the inventions are not to be limited to the details given herein, but may be modified within the scope and equivalents of the following claims. In the following claims, elements and\/or steps do not imply any particular order of operation, unless explicitly stated in the claims or implicitly required by the disclosure."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3C"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 9A and 9B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 23"}]},"DETDESC":[{},{}]}
