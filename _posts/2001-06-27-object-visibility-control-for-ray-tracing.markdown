---
title: Object visibility control for ray tracing
abstract: A computer graphics method and apparatus allows designer control over the rendering of objects and scenes, in a rendering system using ray tracing for example. A modeling system is adapted to accept rules for controlling how certain objects affect the appearance of certain other objects. In a ray tracing implementation, rules are specified by ray type and can be specified as either “including” all but certain objects or “excluding” specific objects for any given object. A rendering system extracts these rules from a bytestream or other input including other graphics data and instructions, and populates lists for internal use by other components of the rendering system. A ray tracer in the rendering system is adapted to consult the list when performing ray tracing, so as to enforce the rendering control specified by the content creator when the objects and scene are rendered.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06956570&OS=06956570&RS=06956570
owner: Believe, Inc.
number: 06956570
owner_city: Los Altos
owner_country: US
publication_date: 20010627
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present invention relates generally to computer graphics, and more particularly, to a method and apparatus for controlling rendering of objects and scenes using ray tracing techniques, for example.","Computer graphics systems are important components in many applications, such as CAD\/CAM, computer animation and gaming, visualization systems, flight simulators, special effects, medical imaging, architectural visualization, virtual reality, etc.","Computer graphics involves the design or modeling of objects and scenes to be displayed (typically 3-dimensional, but can be 2-dimensional), which models and designs are translated into data and instructions in computer-readable form. Computer graphics systems use these data and instructions, perhaps under the further stimulus of a user input through a joystick for example, to render these objects and scenes on a display for human perception.","During rendering, ray tracing techniques can be used to determine which of the modeled objects and\/or portions thereof are to be included in a scene (perhaps from a perspective determined from a user input). Recursive ray tracing techniques can further determine how the appearance of some objects may be affected by the presence of other objects and light sources (e.g. shadows). Although typical computer graphics systems allow designers to specify how individual objects are to be displayed (e.g. lighting, special effects, textures, etc.), it may be desirable to allow a designer to further specify whether and how certain objects can affect the appearance of certain other objects. For example, a designer may wish to force one object not to be shadowed from another object, even though the other object may lie in a path between the first object and a specified light source. This presents a problem that has not been addressed by the prior art, including computer graphics systems employing a ray tracing rendering scheme.","The present invention relates to a computer graphics method and apparatus for controlling the rendering of objects and scenes, in a rendering system using ray tracing for example. A modeling system is adapted to accept rules for controlling how certain objects and\/or light sources affect the appearance of certain other objects and\/or lights. In a ray tracing implementation, rules are specified by ray type and can be specified as either \u201cincluding\u201d all but certain objects and\/or lights or \u201cexcluding\u201d specific objects and\/or lights. A rendering system extracts these rules from a bytestream including other graphics data and instructions and populates lists for internal use by other components of the rendering system. A ray tracer in the rendering system is adapted to consult the list when performing ray tracing, so as to enforce the rendering control specified by the content creator when the objects and scene are rendered.","The present invention will now be described in detail with reference to the drawings, which are provided as illustrative examples of the invention so as to enable those skilled in the art to practice the invention. Notably, the figures and examples below are not meant to limit the scope of the present invention. Moreover, where certain elements of the present invention can be partially or fully implemented using known components, only those portions of such known components that are necessary for an understanding of the present invention will be described, and detailed descriptions of other portions of such known components will be omitted so as not to obscure the invention. Further, the present invention encompasses present and future known equivalents to the known components referred to herein by way of illustration.","A top-level block diagram of an example implementation of the present invention is illustrated in FIG. .","As shown in , a computer graphics system includes a modeling system  and rendering system . Although shown separately for clarity, modeling system  and rendering system  can be implemented as software that is commonly executed by a common processor. Alternatively, modeling system  and rendering system  are implemented as hardware or software components that are separately provided in different platforms and communicate with each other via a bus, a network, or other communication means, using interprocess schemes such as client-server communications, for example. It should be apparent that many alternative topologies and implementations are possible.","Generally, modeling system  (e.g. Maya from Alias|Wavefront of Toronto, Ontario, Softimage|3D from Avid Technology, Inc. of Tewskbury, Mass. and 3D Studio Max from Discreet Logic, Inc. of Montreal, Quebec) allows a content creator\/editor to model objects and specify how they are to be displayed in a scene (e.g. lighting, effects, material definitions) via GUI system . These models and instructions are sent by modeling system  to rendering system  to be displayed on a display  (which may be commonly or separately provided with GUI  system such as in a SGI Octane visual workstation, for example) or captured in an image file. In one example, particularly where autonomy between the modeling system  and rendering system  is desired, this transfer of graphics data and instructions is performed using an industry standard interface such as the RenderMan Interface (see, for example, the RenderMan Interface V3.1 description at www.pixar.com), or non-standard interfaces based thereon. In accordance with an aspect of the invention, modeling system  allows a content creator\/editor to further specify relationships between modeled objects and\/or rules concerning how they are allowed to affect each other's appearance, and rendering system  is adapted to consider these relationships and rules and to render scenes in accordance therewith.","The present invention contemplates the use or adaptation of various modeling systems and ways of specifying object relationships and rendering rules, and such are considered to be incidental to the invention. In one possible implementation, modeling system  can be based on the Maya modeling\/animation system from Alias|Wavefront. In this example, as is known in the art, the Maya system includes an Application Programming Interface (API) which is an open architecture that includes the ability to provide additional graphics capability through plug-in applications. Accordingly, the present invention can be implemented by providing a plug-in application(s)  to the Maya API that allows content creators to specify object relationships and rules in addition to performing other modeling functions that are provided by Maya alone. Those skilled in the art will recognize various alternative implementations, whether or not including an environment such as Maya. Further, those skilled in the art will understand how to add the graphics capabilities of the present invention by adapting or creating other API's, plug-in applications  and the like after being taught about their functionality below.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["104","104","202","203","204","206","202","203","208","204","206","202","210"]},"It should be apparent that many other components, stores and graphics data and instructions can be included or processed in the rendering system , but these will not be illustrated or described so as not to obscure the invention. Moreover, it should be noted that scene server , ray server , ray tracer  and shader  are shown and described separately for clarity of the invention. However, it should be apparent that these components and the functionality performed by each as described herein can be consolidated and\/or divided among fewer or additional components, including scene server , ray server , ray tracer  and shader . In one example implementation, ray tracer  and shader  are implemented together as multiple ASICs in a distributed computing architecture in which scene server  and ray server , implemented as software executing on one or more processors, act as hosts to divide a scene into multiple partitions and provide graphics data and instructions to individual ray tracer and shader ASICs respectively assigned to the partitions. However, it should be apparent that many alternative implementations and topologies are possible.","Generally, in operation, scene server  extracts object data from the graphics input, updates and\/or maintains the appropriate graphics data in store , and provides image resolution parameters and camera information to ray server . In one example implementation, for a given scene or frame to be rendered, scene server  determines the center of projection and window on the view plane (i.e. the camera or eye view) of the scene and provides this information to ray server . Ray server  then causes ray tracer  and shader  (or respectively assigned circuits thereof) to compute the color of each pixel in the window. For example, for a given pixel (or for each subpixel in a pixel), ray server  determines the camera ray from the center of projection through the pixel, and instructs ray tracer  to determine objects hit by the ray. For certain implementations, ray tracer  may further generate rays that are spawned from the original ray (e.g. reflections, refractions and shadows). Given the objects hit by or shadowed from the original and subsidiary rays, as computed by ray tracer , shader  computes the color contributed by each object for that pixel, and may further generate additional rays to be processed. Those skilled in the art will understand how to implement or adapt a shader  that computes colors given the output of a ray tracer and other shading information, and so an even further detailed description thereof is unnecessary for an understanding of the present invention.","In accordance with an aspect of the invention, scene server  further extracts object visibility relationships and rules from the graphics input and maintains lists associated therewith in store . Ray tracer  can thus consider these relationships and rules when performing ray tracing processing, as will be described in more detail below.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 3A","b":"3"},"As shown in , a scene includes objects , , , and , and light L that potentially illuminates objects  and . In one example, a camera ray is projected into the scene and strikes object  at point P on a surface (a front facing surface in this example) at which there is a normal N. Using recursive ray tracing techniques, at point P, refracted ray T and reflected ray R are spawned. Refracted ray T continues through object  and strikes the back surface at point P, at which point reflected ray R and refracted ray T are spawned. Reflected ray R strikes the surface of object  at point P having a normal N thereat. At point P, reflected ray R is spawned.","As further shown in , ray tracing processing will include determining any shadows at points P, P and P. Therefore, if light L is associated with objects  and , shadow rays S and S will be projected from points P and P, respectively, toward L to determine the visibilities associated with each due to the presence of occluding objects. In this example, object  lies in the path of both S and S, and so rays S and S would intersect object  at points P and P, respectively. The complete ray tree for the above-described ray tracing is shown in FIG. B.","As discussed above, an aspect of the present invention includes the ability to control the visibility of certain objects and how certain objects and\/or lights can affect the appearance of other objects and\/or lights. As is clear from the example in , the appearance of object  (at least at point P) is affected by both objects  and . Suppose, however, that a content creator wished to create a special relationship between objects  and  such that no shadows will be cast on object  from object , for example. The creator would then specify a rule (using plug-in application  in modeling system , for example) that no shadow rays from object  striking object  are allowed (i.e., no shadows from object  should be cast on object ). Rendering system , after considering the rule established by the content creator and included in the graphics input from the modeling system , would then disallow ray-object intersection processing between shadow ray S and object . As shown in , shadow ray S projects on toward L, and strikes object  at point P. The ray tree after such rule processing is shown in FIG. C. When shading object  at point P due to the camera ray, therefore, the shader will arrive at the appropriate color by traversing the ray tree shown in , which does not include the intersection of shadow ray S with object , rather than the original ray tree shown in FIG. B.","The present invention contemplates many types and combinations of object visibility rules that can be specified. For example, a designer can specify that an object should not be affected by reflected, refracted or shadow rays that intersect certain other objects or photon rays from certain light sources. Or, a designer can specify that an object should not be affected by reflected, refracted or shadow rays that intersect any other objects or photon rays that originate from any lights except for a designated set. Such rules can be generally specified in a format such as \u201c<OBJID> exclude\/include <RAYTYPE> <OBJLIST>,\u201d which indicates that when processing rays for the object specified by OBJID, exclude\/include rays of RAYTYPE (e.g. reflected, refracted, shadow, camera, photon) that intersect the list of objects and\/or lights specified by OBJLIST. Where a content creator wishes to exclude the effects of only a limited number of objects and\/or lights on the display of other objects and\/or lights, the \u201cexclude\u201d rule may be more efficient. Conversely, where the effects of all but a limited number of objects and\/or lights are intended to be excluded, the use of the \u201cinclude\u201d rule may be more efficient. It will become apparent to those skilled in the art, after being taught by the present disclosure, that there are many variations in how object visibility rules may be specified, stored or processed to achieve substantially the same object visibility results in substantially the same way, and so the invention is not limited to the above described rule formats but rather embraces alternative embodiments exploiting such variations.","In one implementation, the object visibility rules are specified in a modeling system adapted in accordance with the invention. This can be done, for example, by including a plug-in application(s)  to an API included in the modeling system environment, which plug-in application allows the content creator to specify these rules in addition to performing other object modeling tasks. Along with other graphics data and instructions, the rules can be provided in an adapted RIB or other graphics stream to the rendering system . The rendering system can then extract these rules from the bytestream for processing in accordance with the present invention. It should be noted, however, that there can be other ways to specify and receive the object visibility rules in addition to, or in place of, a modeling system, and so the present invention is not limited thereby.","When processing the RIB or other graphics input from the modeling system, the rendering system can create and\/or populate data structures such as those illustrated in  for internal use by other components of the rendering system. As can be seen in this example, these structures are a linked set of lists. Particularly, object descriptor  includes pointers to lists of objects for various forward and backward ray types such as reflected rays , refracted rays , shadow rays  and photon rays . Along with the pointer there may be stored an indication of the number of objects stored in the respective list , , , . Accordingly, when a ray tracer such as ray tracer  is processing rays from a point of intersection on an object or from a light source, it will consult object descriptor . Thus, when a reflected ray is spawned from the point of intersection on an object, for example, the ray tracer will determine whether any objects are stored in reflections list  for the intersected object (e.g. if the number\/length of the list is nonzero as specified in object descriptor ), and if so, it will ignore any intersections of the spawned reflected ray with objects listed in list  (or ignore intersections for all but the listed objects if list  specifies an \u201cinclude\u201d rule).","It should be apparent that the types of rays that can be included for special processing in accordance with the invention is not limited in number or type to the specific types of rays listed above, but may include fewer or additional types of rays, whether specifically mentioned in the list of ray types provided herein or not. It should be further apparent that additional object information may be stored and considered for object rendering beyond that illustrated in , and that object descriptor  may be included in, or separate from, such further information.","An example method for controlling the appearance of objects rendered in a scene that can be executed by a graphics system in accordance with an aspect of the present invention is illustrated by the flowchart in FIG. .","As shown in , the rules received from the modeling system are parsed and are used to populate the include\/exclude lists such as those illustrated in  (S). For each ray of a scene or frame to be rendered (determined in step S), therefore, the list of object visibility rules for the object or light source from which the ray is projecting is retrieved (S). Regardless of the type of ray that is being projected from the point of intersection with the object (e.g. reflected, refracted, shadow, etc.), the ray tracer begins to trace the ray from a point of intersection or light source (S). The nearest object struck by the ray is then compared to the list of rules specified for the originating object or light source and the ray type (S). If the struck object is specified in the list, and is associated with an \u201cinclude\u201d rule, or if the object is not specified in the list, normal ray-object intersection processing with the object will be performed (S). This may include, for example, determining a point of intersection on the object, and spawning other rays from the point of intersection. Otherwise, the object is specified in the list and is associated with an \u201cexclude\u201d rule. Accordingly, it should be excluded from ray-object intersection processing and is skipped (see \u201cExclude\u201d arrow back to step S). Finally, it is determined whether any additional tracing for this ray should be performed (S). If so, processing returns to step S. Otherwise, processing returns to step S.","Although not shown, it should be understood that when a ray tree is completed or as it is generated, it can be provided to a shader such as shader  for determining the color associated with the original ray-object intersection corresponding to the ray tree. For example, if the ray tree is constructed for a camera or eye ray associated with a pixel, the shader will compute the color for the pixel by traversing the ray tree as constructed by the ray tracer in accordance with a method such as that described above. It should be further understood that the processing of the ray tree need not sequentially follow completion of the construction of the ray tree, but that certain shading operations may be performed in parallel with certain ray tracing operations. Moreover, it should be apparent that the shader may process certain rays (e.g. shadow rays) separately from ray trees. Those skilled in the art will understand the various implementation alternatives and the present invention embraces corresponding alternative embodiments. Furthermore, it should be understood that additional rendering and ray tracing operations may be performed in conjunction with or in addition to the above-described processing, such as computing intersection points and determining opacities and the like.","It should be further noted that the above described method does not include detailed descriptions of other ray tracing, rendering and shading operations that may be performed in conjunction with or in addition to the processing described above. Details of such other operations are omitted here so as not to obscure the invention. Moreover, the invention is not limited to any specific sequence or implementation of such additional operations.","Although the present invention has been particularly described with reference to the preferred embodiments thereof, it should be readily apparent to those of ordinary skill in the art that changes and modifications in the form and details may be made without departing from the spirit and scope of the invention. It is intended that the appended claims include such changes and modifications."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["These and other aspects and features of the present invention will become apparent to those ordinarily skilled in the art upon review of the following description of specific embodiments of the invention in conjunction with the accompanying figures, wherein:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIGS. 3A","b":"3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
