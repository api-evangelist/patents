---
title: Controlling a destination terminal from an originating terminal
abstract: A caller associates computer software code with a signalling protocol messages such that when the messages are received at a destination processor the computer software code is executed. For example, the messages may be improved SIP protocol messages with incorporated Java code. By selecting different computer software code for association with the messages, the caller is able to control the destination terminal. For example, to display information about the identity of the caller at the destination terminal; to modify the behaviour of the destination terminal according to the priority of the call; to take into account the configuration of the destination terminal, and to allow users to adjust this configuration from a remote location.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07050861&OS=07050861&RS=07050861
owner: Nortel Networks Limited
number: 07050861
owner_city: St. Laurent
owner_country: CA
publication_date: 20000628
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","APPENDIX A"],"p":["This application is the non-provisional filing of provisional U.S. Patent Applications 60\/171,777 and 60\/171,801, both filed on Dec. 22, 1999.","1. Field of the Invention","This invention relates to a method of remotely controlling a destination terminal from an originating terminal. The invention is particularly related, but in no way limited to, using improved session initiation protocol (SIP) to enable a caller to control an originating terminal.","2. Description of the Prior Art","The amount of control that an originating terminal has over a destination terminal has been very restricted. For example, when making an extremely urgent call to a busy destination terminal, the caller is unable to free up the busy destination terminal by causing the call that is currently in progress to be dropped. Also, the called party may have particular services set-up on his or her terminal and the calling party is unable to take these into account easily or to modify the set-up services. This is particularly problematic when a caller wishes to adapt his or her call as a result of taking the called party's terminal configuration into account. For example, a user may be accustomed to setting his or her terminal to ring three times before going to voice mail, during times when that user is resting. At other times, suppose that the user sets his or her terminal to ring five times before going to voice mail. The user's family members may wish only to make a call to the user when the user is not resting. However, this is not possible because callers are unable to take into account set-up configurations on the user's terminal.","Similarly, calling parties are unable to easily provide information to the called party and to cause the destination terminal to display or act upon this information. For example, a calling party may wish to provide information about his or her identity to the called party. In the past this has been done by associating each terminal with a particular user. However, this is problematic when users move about and use different terminals. Also, prior art systems which display the caller identity at the destination terminal are fixed systems. That is, the caller is unable to easily change or modify the manner in which the destination terminal displays or acts upon the identity information.","It is accordingly an object of the present invention to provide a method of remotely controlling a destination terminal from an originating terminal, which overcomes or at least mitigates one or more of the problems noted above.","According to an aspect of the present invention there is provided a method of remotely controlling a destination terminal from an originating terminal said destination terminal having an associated signalling protocol client and an associated processor comprising the steps of:\n\n","This provides the advantage that an originating terminal is able to control a destination terminal. For example, to display information about the identity of the caller on the destination terminal or to modify the behaviour of the destination terminal on the basis of priority information provided by the calling party.","According to another aspect of the present invention there is provided an originating terminal arranged to control a destination terminal said originating terminal comprising:\u2014\n\n","This provides the advantage that by using such an originating terminal a user is able to control a destination terminal.","According to another aspect of the present invention there is provided a destination terminal comprising:\u2014\n\n","This provides the advantage that a destination terminal which can be controlled from a remote location by an originating terminal is provided.","According to another aspect of the present invention there is provided a signal comprising one or more signalling protocol messages which are associated with computer software code. This provides the advantage that the functions of the signalling protocol messages are greatly extended. For example, the signalling protocol messages can be sent from an originating terminal to a destination terminal to control that destination terminal.","According to another aspect of the present invention there is provided a method of displaying information about the identity of a caller at a destination terminal comprising the steps of:\n\n","This provides the advantage that the database of caller identity information is updated prior to use so that the identity information displayed is correct, even if the caller uses different terminals or several users use the same terminal.","Further benefits and advantages of the invention will become apparent from a consideration of the following detailed description given with reference to the accompanying drawings, which specify and show preferred embodiments of the invention.","Embodiments of the present invention are described below by way of example only. These examples represent the best ways of putting the invention into practice that are currently known to the Applicant although they are not the only ways in which this could be achieved.","The term \u201coriginating terminal\u201d is used to refer to an apparatus via which a user is able to send communications into a communications network in order to call another party; for example, a telephone handset, a computer terminal or a mobile telephone handset.","The term \u201cdestination terminal\u201d is used to refer to an apparatus via which a user is able to receive communications from the communications network in order to be called by another party; for example, a telephone handset, a computer terminal or a mobile telephone handset.","The term \u201ccalling party\u201d is used to refer to an entity which sends a communication into a communications network in order to communicate with a called party.","The term \u201ccalled party\u201d is used to refer to an entity which receives communications from a calling party via a communications network.","The present application is at least in part an extension of Nortel Networks's earlier work described in co-assigned, earlier U.S. patent application Ser. No. 09\/520,853, filed on 7 Mar. 2000 (Nortel reference 11790 ID). That patent document describes an improved Session Initiation Protocol (SIP). Using this improved SIP protocol computer software code is associated with SIP messages. These SIP messages are sent to a SIP client which is arranged to execute the software code associated with the SIP messages. The specific description from U.S. patent application Ser. No. 09\/520,853 is repeated in Appendix A.",{"@attributes":{"id":"p-0046","num":"0057"},"figref":["FIG. 1","FIG. 1"],"b":["12","11","13","12","12","13"]},"Another prior art arrangement involves storing pre-specified information about the identity of terminals at their associated access nodes . For example, this information comprises the CLID of each terminal  which is connected to the access node  and the name of a user associated with each of those terminals . When a caller initiates a call, the name associated with the terminal from which the call is being made is sent with the call to the destination terminal. The name information is static and because of this the system is not flexible and cannot take account of the fact that different users use the same originating terminal or that individual users move about and use different terminals.",{"@attributes":{"id":"p-0048","num":"0059"},"figref":"FIG. 2","b":["22","23","20","21","23","22","25","25","25","26","26"]},"With reference to , when a caller initiates a call (box  of ), computer software code is associated with one or more signalling protocol messages issued by the caller's terminal in order to set-up the call (box  of ). This computer software code contains information about the caller's identity or a reference to this information. The signalling protocol message issued by the caller's terminal is forwarded (box  of ) to the called party's terminal and the associated computer software code is accessed. This code is then executed on the processor  associated with the called party's terminal, provided that security provisions on the destination terminal allow this (box  of ). The executed code controls the destination terminal such that it displays the identity of the caller. For example, by playing a sample of the caller's voice or by displaying the caller's name on a visual display.","By using this method, the caller's identity is correct no matter which terminal the caller uses and it is not necessary to make use of CLID information.","The example described above of allowing a caller to control a destination terminal in order to display information about the caller's identity is only one embodiment of the present invention. More generally, the invention provides a way for callers to control a destination terminal by selecting computer software code for association with SIP messages, or any other suitable signalling protocol messages. This control of the destination terminal is of course subject to any security and access restriction arrangements that are set-up on the destination terminal. The default situation is that the destination terminal is controlled by its associated signalling protocol client and associated processor. Thus the caller does not have absolute control over the destination terminal except in cases where the security and access restrictions allow this.","A calling party (or other user) is able to select or create the computer software that is to be associated with the signalling protocol messages using a user interface such as a graphical user interface (GUI). Once this code is selected or created it is stored in a location that is accessible by the calling party's signalling protocol client. This location could be at the terminal itself, at a gateway from which the terminal subtends or at any other suitable location. In addition, rules or other criteria are stored which specify when particular pieces of the stored computer software are to be associated with SIP or other signalling protocol messages.",{"@attributes":{"id":"p-0053","num":"0064"},"figref":["FIG. 3","FIG. 3","FIG. 3"],"b":["301","302","303"]},"The computer software code may be associated with the signalling protocol message in any suitable manner, for example, by adding the code to the message or adding a reference to the location of the code to the message. Any suitable signalling protocol messages may be used, such as session initiation protocol (SIP) messages. Appendix A gives more details about this.","Several different examples of ways in which the destination terminal is controlled are now described.","In one example, the caller is able to provide information about the priority of the call. In the past this has not been possible for conventional public switched telephone network systems where the CLID and ringing tone are all that is available to alert the called party to the call request. Answering machines can be used but in that case the called party must be available to listen to incoming calls and answer these if they are urgent.",{"@attributes":{"id":"p-0057","num":"0068"},"figref":["FIG. 5","FIG. 5","FIG. 5","FIG. 5"],"b":["50","51","52"]},"In some situations, the destination terminal is engaged. In this case the computer software code associated with the signalling protocol message may be arranged to cause the destination terminal to be cleared (subject to security and access restrictions). For example, the caller may be trying to reach a family member urgently. The called party has previously stored the names of people who are allowed to cause the called party's terminal to be cleared of an \u201cin progress\u201d call. The called party may also have set up a password system whereby the caller must provide the password before being able to clear \u201cin progress\u201d calls. In this case, the computer software code sent by the caller with the signalling protocol message contains the password and\/or name of the caller.","This process is illustrated in more detail in . In the situation when the destination terminal is engaged (box  of ) the calling party processor associates computer software code, containing information about the caller's identity and code for clearing the \u201cin progress\u201d call from the destination terminal, with signalling protocol messages (box  of ). These messages are forwarded to the called party and the called party processor accesses the information about the identity of the caller (box  of ). The called party processor checks the identity of the caller against an access restriction database (previously set up by the called party). If access is granted to the particular caller, then the software code is executed in order to clear the \u201cin progress\u201d call from the destination terminal (box  of ).","The called party may also configure the signal processing client associated with its terminal such that \u201cin progress\u201d calls can only be cleared under certain circumstances. For example, when the \u201cin progress\u201d call is to an internet service provider or to one of a list of pre-specified destinations. In this way the called party is able to specify things like \u201cIf I am using the internet I am happy to allow family members to shut down my internet connection in order that they can telephone me.\u201d The called party is able to set up the security and access restrictions by using a user interface to modify the signal protocol client and any other software which controls the processor associated with the destination terminal.","The calling party is also able to select or create appropriate computer software code such that the configuration of the destination terminal is checked and taken into account before taking further action. For example, the number of rings at the destination terminal may be set to 3 before the call is diverted to a voice mail system. A caller may know that the called party only sets this number of rings to three when he or she is resting. In that case, the caller may prefer not to disturb the called party at all. The caller is then able to arrange the computer software code associated with the signalling protocol message such that it checks the \u201cnumber of rings before divert to voice mail\u201d setting at the destination terminal before proceeding with the call.","Known telephone systems, such as those in North America, have a facility whereby the calling party is able to block information about the CLID from the called party. This facility is often used by mobile phone callers who wish to prevent others from obtaining their mobile phone number. This is because they wish to prevent others from making calls to their mobile telephone which incur cost to the mobile phone owner. However, many non-mobile phone users have made use of the blocking facility, for example, sales people who wish to hide their identity in order that people will answer their calls. This has led to the creation of a service by which users are able to \u201cblock the blocker\u201d; that is, users are able to block calls from any party who has blocked information about their identity from being made available to the called party. This \u201cblock the blocker\u201d facility can be problematic in some circumstances. For example, consider a mobile phone user who has made use of the blocking facility. If that mobile phone user makes a call to a family member that family member is unaware of the identity of the caller. Suppose that the family member has implemented the \u201cblock the blocker\u201d function on his or her terminal. In that case the user's call to the family member is blocked, even though that call may be extremely urgent. By making use of the present invention this problem is overcome. The user is able to control the family member's terminal in order to override the \u201cblock the blocker\u201d function. For example, the caller sends signalling protocol messages containing a password which the called party receives and checks against pre-specified security criteria. If security clearance is obtained, software code associated with the signalling protocol messages ensures that the \u201cblock the blocker\u201d function on the destination terminal is over-ridden.","In another example, the caller is able to control the destination terminal to give preferred handling to the call. For example, the caller is able to control the destination terminal such that the call is directed straight to a voice mail service or straight to the called party's mobile telephone. Prior art systems which allow a user to call a voice mail system directly (rather than being diverted to the voice mail system from the destination terminal) are difficult to use. Typically the caller must dial the number to connect to the voice mail system and then enter details about who is being called. This is time consuming and complex. By using the present invention this problem is avoided because a call with the called party is actually established unlike the prior art situation where a call is established directly with the voice mail system.",{"@attributes":{"id":"p-0064","num":"0075"},"figref":["FIG. 7","FIG. 7","FIG. 7","FIG. 7"],"b":["70","71","72"]},"In another example, a user is able to adjust the configuration of his or her terminal from a remote location. For example, that user acts as a calling party and calls his or her own terminal. Using the method described herein for controlling destination terminals, the user is then able to control his or her own terminal. For example, the user is able to adjust services such as \u201cnumber of rings before call sent to voice mail\u201d and other such terminating services from a remote location. This is achieved by associating appropriate computer software code with signalling protocol messages and forwarding these to the called party processor for execution.",{"@attributes":{"id":"p-0066","num":"0077"},"figref":"FIG. 8","b":"80","ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":{"@attributes":{"id":"ul0009-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0010","list-style":"none"},"li":["an input  arranged to access computer software code suitable for controlling said originating terminal;","a processor  arranged to associate said computer software code in use with one or more signalling protocol messages; and","an output  arranged to route said signalling protocol messages to the destination terminal in use.\n\nIt is not essential for the processor  to be integral with the originating terminal . It is also possible for the processor to be physically separate from the originating terminal as long as communication between the processor and originating terminal is provided.\n"]}}}},{"@attributes":{"id":"p-0067","num":"0081"},"figref":"FIG. 9","b":["90","90"],"ul":{"@attributes":{"id":"ul0011","list-style":"none"},"li":{"@attributes":{"id":"ul0011-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0012","list-style":"none"},"li":["a signalling protocol client  arranged to receive one or more signalling protocol messages sent from an originating terminal;","a processor  arranged to access any computer software code associated with received signalling protocol messages in use; and wherein said processor is arranged to execute such accessed computer software code such that the destination terminal is controlled."]}}}},"As for the originating terminal, it is not essential for the processor  to be integral with the destination terminal . The same applies for the signalling protocol client . However, communication between the processor  and the destination terminal  and between the signalling protocol client  and the destination terminal  must be provided.",{"@attributes":{"id":"p-0069","num":"0085"},"figref":"FIG. 10","b":["112","111","113","112","112","113","113","113","111","113","113","112"]},{"@attributes":{"id":"p-0070","num":"0086"},"figref":"FIG. 11","ul":{"@attributes":{"id":"ul0013","list-style":"none"},"li":{"@attributes":{"id":"ul0013-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0014","list-style":"none"},"li":["providing a database comprising information about the identity of a plurality of originating terminals and a caller associated with each originating terminal (box );","initiating a call from an originating terminal to a destination terminal (box );","receiving information at the originating terminal about the identity of a caller and forwarding this information from the originating terminal to the database and updating the database with this information (box ); and","accessing the identity of the caller associated with the originating terminal from the database and displaying that identity at the destination terminal (box )."]}}}},"A range of applications are within the scope of the invention. These include situations in which it is required to control a destination terminal from an originating terminal. For example, to cause information about the identity of a caller to be displayed at the destination terminal. Another example involves providing information about the priority of a call and allowing the behaviour of the destination terminal to be adjusted in response to the call priority. As well as this, it is possible to clear an \u201cin progress\u201d call from an engaged destination terminal and to take into account configuration information on the destination terminal. Users are also able to adjust the configuration of terminating services on their terminals from a remote location.","A method of associating computer software code with signalling protocol messages such as Session Initiation Protocol (SIP) messages is now described by repeating some of the text from Nortel Network's earlier co-assigned U.S. patent application Ser. No. 09\/520,853. However, it is not essential to use the improved SIP protocol described below. Any suitable protocol and method for associating computer software code with signalling protocol messages may be used.","The term \u201cSIP Client\u201d is used to refer to a computer program that is arranged to control a communications network node such that it is able to send SIP messages such as SIP request messages. The computing platform that the SIP client runs on is referred to as a \u201chost system\u201d. The communications network node either comprises the host system or is associated with the host system.","The term \u201cJava virtual machine\u201d is used to refer to a processor which is arranged to execute Java applets or Java byte code.","The term \u201cmobile autonomous software agent\u201d is used to refer to a computer program that is able to halt itself and move itself from a first processor to another processor that is connected to the first processor for example by a communications network. The computer program is referred to as being autonomous because it is able to \u201cdecide\u201d where to move and what it will do independently of external requests. An example of a mobile autonomous software agent is a Java mobile agent. Details about Java mobile agents are given in the article, \u201cUnder the Hood: The architecture of aglets\u201d, by Bill Venners, JavaWorld April 1997 the contents of which are incorporated herein by reference.","By extending the SIP protocol increased functionality is provided. SIP messages are modified to carry computer software code such as Java applets or to carry an address such as an universal resource locator (URL) indicating where computer software code is stored. An application programming interface (API) is also defined which allows the computer software code to interact with a receiving host system. SIP clients are also modified in order that they execute the computer software code associated with the SIP messages before any other actions are taken as a result of receipt of the SIP message.",{"@attributes":{"id":"p-0077","num":"0097"},"figref":"FIG. 12","b":["1001","1010"],"ul":{"@attributes":{"id":"ul0015","list-style":"none"},"li":{"@attributes":{"id":"ul0015-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0016","list-style":"none"},"li":["a SIP client ;","an input  arranged to receive SIP messages which may be associated with computer software code; and","a processor  arranged such that in use, when a SIP message is received, any computer software code associated with that SIP message is executed by the processor. This processor is provided by the host system and may comprise a Java virtual machine or any other suitable processor. These communications network nodes are referred to as enhanced SIP nodes because they are arranged to allow the enhanced SIP process to work.\n\nThe communications network of  is used in conjunction with the method illustrated in  in order to implement the enhanced SIP process.  is a flow diagram of a method of communicating between a first and a second node in a communications network, each of said nodes comprising a SIP client, said method comprising the steps of:\n","associating computer software code with a SIP message (box  in );","sending the SIP message from the first SIP client associated with the first node to the second SIP client associated with the second node (box  in ); and","executing the computer software using the second node (box  in )."]}}}},"For example,  illustrates an example of how a plurality of enhanced SIP clients , , , ,  interact. Each SIP client is supported on a communications network node (not shown). SIP client A  is connected to SIP client B  via a communications link  and SIP client B  is connected to both SIP client C  and SIP client D  via communications links . SIP client B  has a host system  which comprises a Java virtual machine. SIP client D  is also connected to SIP client E via a communications link. SIP client D and has a host system  which comprises a Java mobile agent virtual machine and SIP client E  also has a host system  which comprises a Java mobile agent virtual machine .","Using the enhanced SIP protocol, computer software code such as Java applets are associated with a SIP message . That is, the computer software code may be added to the SIP message body itself or may be stored separately and an address of the storage location added to the SIP message. It is not essential to use Java applets or Java mobile agents; any other suitable computer software code may be used. The message  is sent from SIP client A  to SIP client B . SIP client B detects the presence of the Java applets (or other computer software code) associated with the SIP message  and executes these Java applets using its Java virtual machine  (or other type of host processor).","Any suitable method of detecting the presence of computer software code associated with the SIP message  may be used. For example, an indicator may be placed in the header of the SIP message  and the SIP client  arranged to detect that indicator and associate it with the presence of computer software code. An example of such an indicator in a SIP message is described in more detail below.","By executing the Java applets, two new SIP messages ,  are created one of which  contains a Java mobile agent and the other which does not. This is just one example of a something that the computer software code associated with the SIP message could do. For example, the computer software code could also be arranged to modify existing SIP messages, delete existing SIP messages, generate SIP messages, receive SIP messages or to control the SIP client and\/or the host processor to perform any other suitable function. The computer software code is arranged to interact with the host processor via an API as described below. Security restrictions may be enforced by the SIP client and or host system in order to limit the actions that any software code associated with a SIP message is able to effect. More detail about these security restrictions is given below.","The executed Java applets then cause SIP client B  to send one of the created messages  to SIP client D  and the other  to SIP client C . The message  sent to SIP client D contains a Java mobile agent (or other computer software code or an address of computer software code). If SIP client D has the capability to execute the Java mobile agent contained in message  then SIP client D does so. However, if SIP client D does not have this capability, for example, if SIP client D has no Java mobile agent virtual machine, then SIP client D simply follows the standard SIP procedure for unsupported require extensions. This involves returning an error message to SIP client B, indicating that the Java applet in message  was not executed.","In the meantime, SIP message  which is not associated with any computer software code, is sent to SIP client C  and any SIP process associated with that message  is carried out following the standard SIP protocol.","In this example, SIP client D does have an associated Java mobile agent virtual machine  and so when message  arrives, the Java mobile agent in message  begins to execute on this processor. At some point in the execution, the Java mobile agent suspends itself and includes itself in SIP message  which is sent to SIP client E. This is one example of a process that may occur by incorporating a Java mobile agent into a SIP message.","In the enhanced SIP protocol described herein, standard SIP messages are modified by associating computer software code with them as described above. For example, one or more Java applets or Java mobile agents are stored in a multipart MIME section in the body of a SIP message or a URL indicating where the Java applets or Java mobile agents are stored is added to the SIP message.","In some examples, an indicator is added to the SIP message header, in order to indicate that computer software code is associated with that SIP message. For example, a \u201cRequire request-header\u201d is used to indicate that Java enhanced SIP must be supported to process a SIP message that is associated with Java applets or Java byte code. This require request header is the same as the header for a standard SIP message except that the content type field in the entity header is used to indicate that the content type is a Java applet or the URL of a Java applet which must be retrieved. Also, the require field of the request-header is used to specify that Java enhanced SIP must be supported to process the message concerned.",{"@attributes":{"id":"p-0087","num":"0113"},"figref":["FIG. 15","FIG. 15","FIG. 15"],"b":["1040","1041","1042","1043","1044"]},{"@attributes":{"id":"p-0088","num":"0114"},"figref":"FIG. 16","b":"1050"},"The SIP clients used to implement the improved SIP protocol are the same as standard SIP clients except that they are arranged to do the following things:\n\n","The SIP client's host processor is modified as compared to a standard SIP client's host processor in that it must comprise a processor of a specific type. For example, a Java virtual machine in the case that Java applets are associated with the improved SIP messages. In the case that Java mobile agents are used, a Java mobile agent virtual machine is required. Also, the SIP client's host processor has access to or comprises an API to allow the computer software code associated with the improved SIP messages to interact with the SIP client. For example, in the case that Java applets are used, the SIP client's host has access to a set of Java classes or applets that are defined in a Java enhanced SIP API. This API allows access into the SIP client to allow SIP messages to be built and sent subject to security restrictions. Using the API received Java applets or Java mobile agents are able to generate and receive SIP messages using the receiving SIP client.","Passing of control between the computer software code associated with improved SIP messages and the SIP client concerned.","In the case that standard SIP messages are used, these are processed by SIP clients in the standard way and control remains with the SIP clients. However, in the improved SIP case described herein, any computer software code associated with a SIP message takes precedence over other standard SIP processes associated with the SIP message or with any other SIP messages received by a SIP client during processing of the computer software code.","For example, the computer software code associated with a SIP message can be arranged to initiate a SIP session and to wait for a SIP response before proceeding. During this waiting period, control remains with the computer software code. The computer software code is able to specify that it will go to sleep and wait for the next SIP message which matches a particular patter. In that case, the SIP client does no other actions during the sleep period. Alternatively, the computer software code can deal with any other incoming SIP messages itself during the sleep period. Thus control does not pass back to the SIP client until the computer software code wants it to even if SIP messages from other sessions are arriving.","Application Programming Interface (API)","As described above an API is specified in order that the computer software code associated with improved SIP messages is able to affect the SIP client. For example, this API allows a received Java applet or Java mobile agent access to the SIP messaging functions on the SIP client.","Examples of methods that the API supports comprise:\n\n","Following standard SIP as defined in \u201cRequest for comments (RFC) 2543 SIP: Session Initiation Protocol\u201d, SIP proxy and redirect servers must ignore features that are not understood. That is, if a SIP proxy or redirect server is not arranged to understand the improved SIP messages described herein then it must ignore features of those messages that are not common to standard SIP. A SIP proxy server is a communications network node which communicates using the SIP protocol on behalf of other parties. A SIP redirect server is a communications network node which receives SIP messages and directs these to another communications network node. If a particular extension to the standard SIP protocol requires that intermediate devices support it, the fact that the extension is being used must be tagged in the proxy-require field as well (see section 6.28 of the SIP RFC mentioned above). Thus for the improved SIP described herein, an indicator is placed in the proxy-require field to specify that the improved SIP is being used.","Security","Preferably, security mechanisms are incorporated in to the improved SIP protocol although this is not essential. For example, a host system which supports a SIP client preferably comprises security mechanisms for controlling the activity of software code such as Java applets or Java mobile agents received as a result of the improved SIP messages. These security mechanisms may be configured by a user or operator, for example, to always allow or prevent certain operations from being carried out by Java applets or Java mobile agents received from improved SIP messages. The user may datafill a matrix of SIP operations against security mechanism actions. It is also possible for the security mechanism to prompt the user to ask for permission to proceed with certain actions. The security mechanisms are put into effect by a security manager which takes the form of a computer software application located at each SIP client. Preferably, all the methods specified in the API are arranged to check with the security manager at the SIP client concerned before proceeding with the rest of that method. In the case that Java byte code, Java applets or Java mobile agents are used, then the security mechanisms are preferably designed to conform to the standard Java security practices.","An example of an algorithm for a security mechanism is:\n\n","Using the improved SIP protocol a conferencing service is created whereby a single chairperson is able to set up the conference by sending out SIP INVITE messages. The method is suitable for multimedia conferences. The INVITE messages are associated with computer software code which executes on the host machines of invited attendees to set up the conference call. This greatly simplifies the process of setting up a conference call such as a multimedia conference call.","For example, the computer software code associated with the improved SIP INVITE messages can be arranged to set up connections from each attendee's machine to several video sources and to an electronic whiteboard to be shared for the meeting. The computer software code can also be arranged to start up a web browser to a page relevant to the meeting on each attendee's machine. As well as this the computer software code is able to set up all the audio paths between all the parties with everyone but the chairman initially on mute. As well as this the computer software code is able to take into account different capabilities of individual attendee's host machines. For example, a particular attendee such as a mobile caller may only have audio capabilities whilst a full multimedia caller may have audio, video, data and web capabilities. In order that these capabilities are taken into account, attendee's indicate what their capabilities are in SIP messages as required.","The multimedia conferencing service is particularly advantageous from the attendee's point of view. All the attendee has to do is to accept the incoming call and SIP INVITE message and everything will be set up for them automatically. Alternatively, the attendee may call a conference number and receive a SIP message in reply which is associated with the required computer software code. The conference number may be the number of a particular user client or of a central conference service provider.","Preferably security mechanisms are used in the multimedia conferencing service as described above.",{"@attributes":{"id":"p-0103","num":"0152"},"figref":["FIG. 17","FIG. 17","FIG. 17","FIG. 17"],"b":["1060","1061","1062"]},"The Java applet(s) query the exact capabilities of the user's SIP client and host machine and taking these capabilities into account, initiate SIP sessions for any audio, video and data streams associated with the conference as appropriate given the capabilities (box  of ). Depending on how the user has his or her security mechanisms set he or she may be prompted before the sessions are set up for the various media streams. When the Java applet(s) initiate the SIP sessions (box  of ) they may also be arranged to set up these SIP sessions such that all the attendees except for a chairperson are on mute. This is particularly advantageous, because the chairperson is then easily able to announce the beginning of the meeting and to chair the meeting in an organised fashion.","The Java applets(s) may also be arranged to forward details of a web page from each attendee to a chairperson or to the conference service system. For example, a web page giving biographical details of each attendee may be forwarded to a chairperson who then makes these available to each other attendee. In a similar manner, digital photographs of each attendee may be forwarded to the chairperson by the Java applets. It is also possible for the Java applets to request a joining message from each attendee which is then forwarded to a chairperson automatically by the Java applets. This joining message may contain security requirements specific to each attendee.","Depending on the number of parties to the conference, a conferencing bridge facility may be used as is known in the art. Alternatively, a software based technique is used to connect the parties to the conference.","An example of an algorithm that is encoded in the Java applet(s) of the method described immediately above is:\n\n",{"@attributes":{"id":"p-0108","num":"0163"},"figref":"FIG. 18","ul":{"@attributes":{"id":"ul0026","list-style":"none"},"li":{"@attributes":{"id":"ul0026-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0027","list-style":"none"},"li":["associating computer software code with a SIP message (box  of );","sending the SIP message to each of the parties (box  of );","executing the computer software code at each of the host processors (box  of )."]}}}},{"@attributes":{"id":"p-0109","num":"0167"},"figref":"FIG. 12","b":["1010","1011","1013","1013","1010","1013"]},"In the case that a conferencing system is used, this system sends the SIP messages to each party as a result of request calls from those parties to the system. In the case that a chairperson sets up the call, then the chairperson sends the SIP messages to each party.","Hunt Group System","An example of the use of improved SIP with Java mobile agents is now described. In this example, a service is provided whereby an automated system calls several telephones within a defined group (such as a team in an office) until one of those telephones is answered. For example, the nodes of the communications network in  may each provide a telephone implemented by software in the SIP clients . Each telephone within the group  comprises a SIP client  and a host processor  as illustrated in  and the telephones are connected to one another via a communications network  as shown in . The host processors each comprise a Java mobile agent virtual machine.","A user, which may be an automated service or a human using a terminal connected to the communications network , telephones one of the telephones  within the defined group. If the called telephone is not answered after a specified number of rings or an elapsed time, then software at the SIP client  of the called telephone creates a Java mobile agent, associates this with a SIP message, and sends the SIP message to a predefined second SIP client. This second SIP client is one of the telephones within the defined group .","The second SIP client receives the SIP message which is associated with the Java mobile agent. The Java mobile agent then executes itself on the Java mobile agent virtual machine associated with the second SIP client. The Java mobile agent is arranged to apply ringing to the second telephone and queries the second telephone's identification details and sends these back to the original caller. If the caller is using a host processor that has a display system associated with it, then information about the call and the fact that it has been forwarded to the second telephone in the defined group is sent by the Java mobile agent to this display.","If the second SIP client does not answer after a specified number of rings or time then the second SIP client repeats the method that the first SIP client carried out as described above. However, the second SIP client incorporates information about the fact that the call has been forwarded again.","After the method has been repeated a pre-determined number of times and if the call is not answered, then the call is sent back to the first SIP client that was called. A display of the route taken and the fact that the call was not answered is made at the first SIP client if a display is available.","If the call is answered, information about the route taken and the identity of the answering SIP client is sent back to the caller which may be an automated service.",{"@attributes":{"id":"p-0117","num":"0175"},"figref":"FIG. 21","ul":{"@attributes":{"id":"ul0028","list-style":"none"},"li":{"@attributes":{"id":"ul0028-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0029","list-style":"none"},"li":["receiving a call at the first SIP client and if that call is not answered then associating computer software code with a SIP message said computer software code being arranged to forward a call (box  );","sending the SIP message from the first SIP client to a specified second SIP client (box  ); and","executing the computer software using the host processor associated with the second SIP client such that the call is forwarded to the second SIP client (box  ).\n\nClient test system\n"]}}}},"Another example of the use of Java mobile agents with improved SIP involves a test system for a pre-defined group of SIP clients. For example, the network of SIP clients shown in . The SIP clients  are connected to one another to form a communications network  as illustrated in . Each SIP client  is associated with a host processor  which comprises a Java mobile agent virtual machine.","A test system (for example, software located at one of the nodes  in the communications network ), which may be an automated software service, creates a Java mobile agent, associates this with a SIP message, and sends that SIP message to one of the SIP clients  in the group. The Java mobile agent executes on the receiving SIP client and sets up one or more test sessions. The results of these test sessions are stored by the Java mobile agent in its private data, together with any other required information. The Java mobile agent then associates itself with another SIP message and arranges that this SIP message be sent to another SIP client in the group. When the SIP message reaches another SIP client the process of obtaining information is repeated so that more information is added to the Java mobile agent's private data. Another SIP message is used to send the Java mobile agent on to another SIP client and so on, until all the SIP clients in the group have been visited. Once all the SIP client's in the group have been visited by the Java mobile agent, this agent associates itself with a SIP message in order to be sent back to the originating SIP client. In this way the Java mobile agent is able to report the results of its tests to the originating SIP client. The Java mobile agent may also be arranged to initiate other actions to fix any faults that it finds as it finds them.  shows a method of testing members of a group of SIP clients each SIP client being associated with a host processor said method comprising the steps of:\n\n","Consider a situation in which it is required to upgrade or replace SIP clients which support the improved version of SIP described herein. This may be carried out automatically as follows:","The software for the upgrade or new SIP client is associated with a SIP message, for example, by building the software into a Java applet and adding this applet to a SIP message. This SIP message is then sent to all the SIP clients which are to be upgraded or replaced. On receipt of the SIP message at a SIP client, the existing SIP client runs the software code in order to effect the upgrade or replacement. The extent to which the upgrade or replacement is effected depends on the security specifications and the type of SIP client. By using the improved SIP protocol in this way, upgrades or replacement of a plurality of SIP clients is achieved quickly and easily.",{"@attributes":{"id":"p-0122","num":"0187"},"figref":"FIG. 19","ul":{"@attributes":{"id":"ul0032","list-style":"none"},"li":{"@attributes":{"id":"ul0032-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0033","list-style":"none"},"li":["associating computer software code suitable for said upgrade or replacement with a SIP message (box  );","sending the SIP message to each of the SIP clients (box  ); and","executing the computer software at each of the host processors (box  )."]}}}}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0019","num":"0030"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0031"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0032"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0033"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0034"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0035"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0025","num":"0036"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0026","num":"0037"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0027","num":"0038"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0028","num":"0039"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0029","num":"0040"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0030","num":"0041"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0031","num":"0042"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0032","num":"0043"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0033","num":"0044"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0034","num":"0045"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0035","num":"0046"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0036","num":"0047"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0037","num":"0048"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0038","num":"0049"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0039","num":"0050"},"figref":"FIG. 21"}]},"DETDESC":[{},{}]}
