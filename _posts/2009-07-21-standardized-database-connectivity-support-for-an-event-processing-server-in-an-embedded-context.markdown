---
title: Standardized database connectivity support for an event processing server in an embedded context
abstract: Techniques for facilitating communication between one or more client applications and an event processing server. In one set of embodiments, a framework is provided that enables a client application to communicate with an event processing server via a standard database connectivity API, such as Java Database Connectivity (JDBC).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08321450&OS=08321450&RS=08321450
owner: Oracle International Corporation
number: 08321450
owner_city: Redwood Shores
owner_country: US
publication_date: 20090721
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCES TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present application incorporates by reference for all purposes the entire contents of the following related application: U.S. patent application Ser. No. 12\/506,905, entitled \u201cSTANDARDIZED DATABASE CONNECTIVITY SUPPORT FOR AN EVENT PROCESSING SERVER,\u201d filed Jul. 21, 2009.","Embodiments of the present invention relate to event stream processing, and more particularly relate to techniques for facilitating communication between one or more client applications and an event processing server.","Event stream processing (ESP) refers to the processing of one or more streams of data (e.g., event streams) with the goal of identifying meaningful information from those streams. An event stream is a linearly-ordered, continuous sequence of events. An event in an event stream is a tuple of data that represents, or encodes, an occurrence or activity. Typically, each event in an event stream is associated with (and is linearly-ordered by) a time. An example of an event stream is a stream of stock market price data received from a stock market data feed. In this example, the events in the stream may be tuples of (<stock symbol>, <stock price>) that are generated in real-time based on the movement of the stock market. Other types of event streams may be created in other contexts and domains, such a stream of sensor readings generated by a physical sensor or probe, a stream of network traffic events generated by a network monitor, and the like.","To facilitate the processing of event streams, a number of technology vendors have developed software and\/or hardware-based ESP systems. These ESP systems typically include a server application (referred to herein as an event processing server) configured to receive event stream data and to perform various operations on that data on behalf of one or more client applications. For instance, an event processing server may receive commands and\/or data from a client application for instantiating a new event stream, inserting data into an event stream, executing a continuous query against an event stream, etc. The event processing server may then process those commands accordingly and return a result (if applicable) to the client application.","A problem with existing ESP systems is that there is no standard Application Programming Interface (API) for communicating information between a client application and an event processing server. For example, there is no standard API for a client application to send commands and\/or event stream data to an event processing server. Similarly, there is no standard API for the server to return processing results or other information to the client application.","Some existing event processing servers expose a proprietary interface for interacting with client applications. However, a proprietary interface requires each client application to implement custom code for invoking the interface. This, in turn, makes it difficult to migrate these client applications so that they can interoperate with different event processing server implementations provided by different vendors. Further, a proprietary interface may render an event processing server incompatible with existing\/legacy client applications.","Embodiments of the present invention provide techniques for facilitating communication between one or more client applications and an event processing server. In one set of embodiments, a framework is provided that enables a client application to communicate with an event processing server via a standard database connectivity API, such as Java Database Connectivity (JDBC).","According to another embodiment of the present invention, a method is provided for facilitating communication between a client application and an event processing server configured to run as part of a single computer process. The method comprises running, as part of the single computer process, a database connectivity adapter implementing a standard database connectivity API. The database connectivity adapter is configured to facilitate intra-process communication between the client application and the event processing server via the standard database connectivity API by receiving, in response to an invocation of the standard database connectivity API by the client application, a query language statement to be executed by the event processing server, parsing the query language statement to determine a type of the statement, and processing the query language statement based on its type. A procedure exposed by the event processing server is then invoked for executing the query language statement.","In one set of embodiments, the standard database connectivity API is JDBC and the query language statement is a CQL statement. In a further set of embodiments, the query language statement is a CQL statement for creating an event stream, a CQL statement for selecting data from an event stream, or a CQL statement for inserting data into an event stream.","In one set of embodiments, parsing the query language statement comprises determining whether the query language statement is a data modification language (DML) statement, such as insert. If the query language statement is a DML statement, the statement is processed by converting one or more data values included in the statement into a data representation native to the event processing server. Such conversion may comprise determining attribute datatypes for an event stream being modified by the query language statement and comparing the attribute datatypes to datatypes of the one or more data values included in the statement. If the attribute datatypes and the datatypes of the one or more data values are different but compatible, the datatypes of the one or more values may be converted into the attribute datatypes.","In one set of embodiments, if the query language statement is a DML statement, invoking a procedure exposed by the event processing server for executing the query language statement comprises invoking a procedure exposed by the event processing server for executing DML statements, where the procedure takes as an input parameter the data representation of the one or more data values native to the event processing server.","In one set of embodiments, parsing the query language statement comprises determining whether the query language statement is a data definition language (DDL) statement, such as create stream. If the query language statement is a DDL statement, the statement is not processed by the database connectivity adapter. Rather, a procedure exposed by the event processing server for executing DDL statements is invoked, where the procedure takes as an input parameter the query language statement. In various embodiments, the server-side procedure for executing DDL statements is configured to parse the query language statement to determine a DDL type of the statement, perform one or more validations with respect to the statement based on the parsing, and invoke another procedure of the event processing server to execute the statement.","In one set of embodiments, invoking a procedure exposed by the event processing server from the database connectivity adapter comprises obtaining a reference to a local object instantiated by the event processing server and invoking a method of the local object.","In one set of embodiments, the client application is a data source (or an application associated with a data source) configured to generate an event stream. In another set of embodiments, the client application is a data integrator configured to aggregate event streams from a plurality of different data sources.","According to another embodiment of the present invention, a system is provided. The system comprises a storage component configured to store data for one or more event streams, and a processing component configured to run a client application, a database connectivity adapter, and an event processing server as part of a single computer process, where the database connectivity adapter implements a standard database connectivity API, and where the database connectivity adapter is configured to facilitate intra-process communication between the client application and the event processing server via the standard database connectivity API. In one set of embodiments, the database connectivity adapter is configured to receive, in response to a invocation of the standard database connectivity API by the client application, a query language statement to be executed by the event processing server, parse the query language statement to determine a type of the statement. The database connectivity adapter is further configured to process the query language statement based on its type, and invoke a procedure of the event processing server for executing the query language statement.","According to another embodiment of the present invention, a machine-readable storage medium is provided having stored thereon program code which, when executed by a processing component of a computer system, causes the processing component to facilitate communication between a client application and an event processing server configured to run as part of a single computer process. The program code comprises code for a database connectivity adapter configured to run as part of the single computer process, where the database connectivity adapter implements a standard database connectivity API, and where the database connectivity adapter is configured to facilitate intra-process communication between the client application and the event processing server via the database connectivity API. In one set of embodiments, the database connectivity adapter is configured to receive, in response to an invocation of the standard database connectivity API by the client application, a query language statement to be executed by the event processing server, and parse the query language statement to determine a type of the statement. The database connectivity adapter is further configured to process the query language statement based on its type, and invoke a procedure exposed by the event processing server for executing the query language statement.","The foregoing, together with other features and embodiments, will become more apparent when referring to the following specification, claims, and accompanying drawings.","In the following description, for the purposes of explanation, specific details are set forth in order to provide a thorough understanding of embodiments of the present invention. It will be apparent, however, that the present invention may be practiced without some of these details.","Embodiments of the present invention provide techniques for facilitating communication between a client application and an event processing server via a standard database connectivity API. In one set of embodiments, a database connectivity adapter is provided that implements a standard database connectivity API, such as Java Database Connectivity (JDBC). The database connectivity adapter is configured to process an invocation of the standard database connectivity API by the client application, where the invocation specifies a query language statement (e.g., a Continuous Query Language (CQL) statement) to be executed by the event processing server. Once the invocation is processed, the database connectivity adapter is configured to invoke an appropriate internal procedure\/method exposed by the event processing server for executing the query language statement. In this manner, the client application may interact with the event processing server via a single, standard interface (e.g., the standard database connectivity API) rather than via a proprietary mechanism.","In one set of embodiments, the techniques of the present invention may be applied to environments where the client application and the event processing server are configured to run on separate systems or as separate computer processes. In another set of embodiments, the techniques of the present invention may be applied to environments where the client application and the event processing server are configured to run as part of a single computer process.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["100","100","102","106","104","108"]},"In various embodiments, event processing server  is an entity that is configured to receive event streams and process those event streams for various purposes. As described previously, an event stream is an unbounded sequence of events (or tuples) that are ordered by time. An example of an event processing server is the Oracle Complex Event Processor available from Oracle Corporation.","Client application  is an entity that is configured to interact with an event processing server by sending commands and\/or event stream data to the server. For example, in the embodiment of , client application  may be configured to send event stream data (e.g., tuples) to event processing server  for insertion into an event stream maintained by server . Client application  may also be configured to send commands to event processing server  for instantiating a new event stream, executing a continuous query against one or more event streams, and the like. In one set of embodiments, client application  may be associated with a data source that generates event stream data (e.g., a database, messaging service, physical probe or sensor, etc.). In another set of embodiments, client application  may be a data integrator (e.g., Oracle Data Integrator) configured to aggregate event stream data from variety of different data sources.","In one set of embodiments, client application  is configured to use a standard programming interface, rather than a proprietary programming interface, for interacting with event processing server . In a particular set of embodiments, client application  is configured to use a standard database connectivity API. As used herein, a standard database connectivity API is a set of interfaces and\/or classes for interacting with a database server that is not specific to any particular database implementation. An example of a standard database connectivity API is JDBC. By using a standard database connectivity API, client application  can be easily migrated to interoperate with other event processing server implementations that support the standard API.","To facilitate communication between client application  and event processing server  via a standard database connectivity API, system environment  includes a database connectivity adapter . Database connectivity adapter  comprises one or more code modules that implement the functions of the standard database connectivity API. For example, in the case of JDBC, database connectivity adapter  may be a JDBC driver that implements the interfaces and classes defined by JDBC.","Database connectivity adapter  acts as an communications abstraction layer between client application  and event processing server . For example, in one set of embodiments, database connectivity adapter  consumes invocations of the standard database connectivity API by client application , where the invocations specify query language statements to be executed by event processing server . Database connectivity adapter  then invokes appropriate internal procedures\/methods (e.g., internal methods ) exposed by event processing server  for executing the query language statements. In this manner, client application  does not need to implement custom code for calling the internal methods of event processing server  directly; rather, client application  can simply invoke the standard database connectivity interface, which is then processed by database connectivity adapter  to enable communication with event processing server . The processing performed by database connectivity adapter  is discussed in greater detail with respect to  below.","In the embodiment of , database connectivity adapter  is shown as running on client system . In this type of configuration, database connectivity adapter  may use a remote invocation interface, such as Java Remote Method Invocation (RMI), to obtain a reference to the internal methods of event processing server  and to invoke those methods remotely. However, in alternative embodiments, the processing of database connectivity adapter  may be carried out on server system , or on another system not depicted in . Further, in some embodiments, client application , event processing server , and database connectivity adapter  may all run as part of a single computer process on a single system. This may occur in deployments where the event processing server is embedded into the client application. This embedded scenario is discussed in greater detail with respect to  below.","As shown, system environment  also includes a database . Database  is a repository for storing data and metadata pertaining to event streams processed by server . In one set of embodiments, database  is a relational database, such as Oracle 10g. Although database  is illustrated as residing on server system , it should be appreciated database  may also reside on one or more separate systems communicatively coupled with server system . One of ordinary skill the art would recognize many variations, modifications, and alternatives.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 2","FIG. 1"],"b":["200","200","106","110","108","106","108","200","200"]},"At step , a client application (e.g., client application ) invokes a method of a standard database connectivity API for executing a query language statement at an event processing server (e.g., event processing server ). For example, if the standard database connectivity API is JDBC, the client application may execute program code similar to the following pseudocode:",{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Instantiate database connectivity adapter"]},{"entry":[{},"Class.forName(\u201ccom.jdbc.databaseconnectivityadapter\u201d);\u2019"]},{"entry":[{},"\/\/ Get connection to event processing server {"]},{"entry":[{},"conn = DriverManager.getConnection (\u201cjdbc:ServerURL\u201d,\u201dLogin\u201d,"]},{"entry":[{},"\u201cPassword\u201d);"]},{"entry":[{},"\/\/ Create a query language statement"]},{"entry":[{},"stmt = conn.createStatement( );"]},{"entry":[{},"} catch (Exception e) {"]},{"entry":[{},"System.out.println(\u201cException: \u201d + e.getMessage( ));"]},{"entry":[{},"\/\/ Execute the statement"]},{"entry":[{},"try {"]},{"entry":[{},"stmt.executeUpdate(my_statement);"]},{"entry":[{},"} catch (Exception e) {"]},{"entry":[{},"System.out.println(\u201cException: \u201d + e.getMessage( ));"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In the code example above, the client application creates an instance of a database connectivity adapter (e.g., database connectivity adapter ), receives a handle to a connection with the event processing server via the adapter, and then executes the statement \u201cmy_statement\u201d by invoking the standard JDBC method \u201cExecuteUpdate\u201d (or, alternatively, \u201cExecuteQuery\u201d). In an embodiment, the statement is formatted according to a query language that is specifically designed to operate on event streams, such as Continuous Query Language (CQL). For example, the query language statement may be a CQL \u201ccreate stream\u201d statement, a CQL \u201cinsert\u201d statement, a CQL \u201cselect\u201d statement, or the like.","Once the database connectivity API has been invoked by the client application, the query language statement is received at the database connectivity adapter and the query language statement is parsed by the adapter to determine a type of the statement (steps , ). Generally speaking, there are at least two types of query language statements: (1) statements that modify data, known as data modification language (DML) statements, and (2) statements that define data structures, known as data definition language (DDL) statements. Examples of CQL statements that are considered DML statements include \u201cinsert.\u201d Examples of CQL statements that are considered DDL statements include \u201ccreate stream,\u201d \u201ccreate relation,\u201d and \u201cselect.\u201d In one set of embodiments, the parsing performed at step  determines whether the query language statement is a DML statement or a DDL statement.","The remainder of the processing of flow diagram  assumes that the query language statement is a DML statement, such as CQL insert statement. A different series of steps may be performed if the query language statement is a DDL statement, which is described with respect to  below.","If the query language statement is a DML statement (step ), the database connectivity adapter is configured to convert data values in the statement into a data representation native to the event processing server (step ). For example, if the query language statement is a CQL insert statement, it will typically be bound with data values to be inserted into an event stream. These data values are converted into a native data representation (known as a tuple representation) understood by the event processing server.","Generally speaking, this native data representation converts the data values provided in the DML statement into tuples that reflect the data structure of the event stream. For example, if the event stream is defined as having an integer attribute and a float attribute, the data values in the DML statement would be converted into tuples of (integer, float). These tuples are then passed to the event processing server, where they can be directly inserted into the event stream without any further conversions.","In one set of embodiments, the conversion process performed at step  may include datatype conversions between different but compatible datatypes. For example, returning to the example above, assume that the event stream being modified comprises an integer attribute and a float attribute. However, assume that the DML statement is bound with two integer values. In this case, since the integer datatype is compatible with the float datatype, one of the integer values may be automatically converted to the float datatype in the tuple representation.","In another set of embodiments, the conversion process performed at step  may include generating timestamp information if such information is not included in the DML statement. For example, assume the DML statement is CQL insert statement and binds one or more data values to be inserted into an event stream. If the insert statement specifies timestamps for the one or more data values, these timestamps are added to the tuple representation generated at step . However, if the insert statement does not specify timestamps for one or more data values, the database connectivity adapter may generate timestamps for those values and add these generated timestamps to the tuple representation.","Once the data values in the DML statement have been converted, the database connectivity adapter invokes an internal procedure\/method exposed by the event processing server for executing DML statements (step ). In one set of embodiments, this procedure takes the native data representation (e.g., tuple representation) of the data values as an input parameter. The DML statement is then executed at the event processing server (step ).",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 3","FIG. 1","FIG. 1"],"b":["300","106","108","300","302","304","306","200","202","204","206","300","200","300","300"]},"At step , the query language statement received by the database connectivity adapter (step ) is determined to be a DDL statement. In response, the database connectivity adapter invokes a procedure\/method exposed by the event processing server for executing DDL statements, and passes the query language statement as an input parameter (step ). For example, the adapter may pass the query language statement as a string value. Note that, unlike flow diagram , no further processing of the query language statement takes place at the database connectivity adapter.","In response to invoking the server-side procedure, a server-side parser is configured to parse the DDL statement to determine a DDL type of the statement (step ). For example, the server-side parser may determine whether the statement is a \u201ccreate stream\u201d statement, a \u201ccreate relation\u201d statement, etc. Based on this parsing, one or more validations may be performed with respect to the DDL statement (step ). In one set of embodiments, these validations may include validating data in the DDL statement against metadata for one or more event streams maintained by the event processing server. For example, a \u201ccreate stream\u201d statement will generally include a name for the new stream. This name may be validated against the names of existing event streams to ensure that a duplicate event stream is not created. Similar metadata validations may be performed for other types of DDL statements.","Once the validations have been performed, another internal procedure\/method of the event processing server is invoked, thereby causing the DDL statement to be executed (step ).","Although not shown in , in one set of embodiments an alternative sequence of steps may be performed if the DDL statement parsed at step  is determined to be a \u201cselect\u201d statement. In these embodiments, the database connectivity adapter may parse the select statement to determine the column names specified in the \u201cSELECT\u201d clause and the tables or view names specified in the \u201cFROM\u201d clause. The database connectivity adapter may then pass the table\/view names to a method exposed by the event processing server for obtaining metadata related to the specified tables\/views. For example, the method may return to the database connectivity adapter the datatypes and sizes (if applicable) of each column in the specified tables\/views. The database connectivity adapter may then filter this metadata information based on the columns specified in the \u201cSELECT\u201d clause of the select statement and pass the filtered metadata information back to the client application. For example, in one embodiment, the database connectivity adapter may generate an empty result set that specifies the datatypes and sizes of each column in the result set and return the empty result set to the client application. In this manner, the database connectivity adapter can interoperate with certain client applications (such as Oracle ODI) that use select statements to retrieve metadata information about specific database tables.","It should be appreciated that the specific steps illustrated in  provide particular methods for facilitating communication between a client application and an event processing server via a standard database connectivity API according to embodiments of the present invention. Other sequences of steps may also be performed according to alternative embodiments. For example, individual steps illustrated in  may include multiple sub-steps that may be performed in various sequences as appropriate to the individual step. Further, additional steps may be added, or existing steps may be removed, depending on the particular application. Further, one or more steps attributed to a particular entity in  (e.g., client application, database connectivity adapter, event processing server) may be performed by another entity. One of ordinary skill in the art would recognize many variations, modifications, and alternatives.","In one set of embodiments, the techniques of the present invention may be applied to environments where a client application and an event processing server are configured to run as part of a single computer process. For example, the client application and the event processing server may be configured to run as separate threads within a single process, or as a single thread within the single process. This situation may occur, for example, in deployments where an instance of the event processing server is embedded in a client application to avoid possible performance problems stemming from communication over a network.  is a simplified block diagram illustrating such an environment.","As shown,  comprises a system  running a computer process . Within computer process  are instances of a client application , an event processing server , and a database connectivity adapter . Generally speaking, client application , event processing server , and database connectivity adapter  are configured to operate substantially similarly to their counterparts in system environment  of . However, rather than using a remote invocation interface to invoke the internal methods (e.g., internal methods ) of event processing server , database connectivity adapter  can obtain a reference to a local object (e.g., class instance) exposing methods . Adapter  may then invoke methods  via the local object.","In some embodiments, client application  may be configured to interact with event processing server  via one or more custom API extensions when in the embedded context. In an embodiment, these custom API extensions comprise extensions to the standard database connectivity API. The use of such extensions allows for improved performance when a client application and an event processing server are running in the same computer process, but allows the event processing server to remain compatible with other client applications that may only implement the standard database connectivity API.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 5","FIG. 1","FIG. 1","FIG. 1","FIG. 1"],"b":["500","500","502","504","506","508","510","512","502","504","506","508","102","106","110","510","104","108","500"]},"Client computing devices , , ,  may be general purpose personal computers (including, for example, personal computers and\/or laptop computers running various versions of Microsoft Windows and\/or Apple Macintosh operating systems), cell phones or PDAs (running software such as Microsoft Windows Mobile and being Internet, e-mail, SMS, Blackberry, and\/or other communication protocol enabled), and\/or workstation computers running any of a variety of commercially-available UNIX or UNIX-like operating systems (including without limitation the variety of GNU\/Linux operating systems). Alternatively, client computing devices , , , and  may be any other electronic device capable of communicating over a network (e.g., network  described below) with server computer .","Server computer  may be a general purpose computer, specialized server computer (including, e.g., a LINUX server, UNIX server, mid-range server, mainframe computer, rack-mounted server, etc.), server farm, server cluster, or any other appropriate arrangement and\/or combination. Server computer  may run an operating system including any of those discussed above, as well as any commercially available server operating system. Server computer  may also run any of a variety of server applications and\/or mid-tier applications, including web servers, Java virtual machines, application servers, database servers, and the like. As indicated above, in one set of embodiments, server computer  is adapted to run one or more server and\/or middle-tier components (such as event processing server  of ) that are configured to receive event stream data from client computing devices , , ,  and perform operations with respect to that data.","As shown, client computing devices , , ,  and server computer  are communicatively coupled via network . Network  may be any type of network that can support data communications using any of a variety of commercially-available protocols, including without limitation TCP\/IP, SNA, IPX, AppleTalk, and the like. Merely by way of example, network  may be a local area network (LAN), such as an Ethernet network, a Token-Ring network and\/or the like; a wide-area network; a virtual network, including without limitation a virtual private network (VPN); the Internet; an intranet; an extranet; a public switched telephone network (PSTN); an infra-red network; a wireless network (e.g., a network operating under any of the IEEE 802.11 suite of protocols, the Bluetooth protocol known in the art, and\/or any other wireless protocol); and\/or any combination of these and\/or other networks.","System environment  may also include one or more databases . In one set of embodiments, database  corresponds to an instance of database  of , and is configured to store data and metadata for one or more event streams operated on by an event processing server running on server computer . Database  may also correspond to any other database or data storage component discussed in the present disclosure. Database  may reside in a variety of locations. By way of example, database  may reside on a storage medium local to (and\/or resident in) one or more of the computers , , , , . Alternatively, database  may be remote from any or all of the computers , , , ,  and\/or in communication (e.g., via network ) with one or more of these. In one set of embodiments, database  may reside in a storage-area network (SAN) familiar to those skilled in the art. Similarly, any necessary files for performing the functions attributed to the computers , , , ,  may be stored locally on the respective computer and\/or remotely on database , as appropriate. In one set of embodiments, database  is a relational database, such as Oracle 10g available from Oracle Corporation. In particular embodiment, database  is adapted to store, update, and retrieve event stream data in response to CQL-formatted commands received at server computer .",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 6","FIG. 4","FIG. 6"],"b":["600","600","502","504","506","508","510","500","600","400","600","624","602","604","606","600","608","608"]},"Computer system  may additionally include a computer-readable storage media reader , a communications subsystem  (e.g., a modem, a network card (wireless or wired), an infra-red communication device, etc.), and working memory , which may include RAM and ROM devices as described above. In some embodiments, computer system  may also include a processing acceleration unit , which can include a digital signal processor (DSP), a special-purpose processor, and\/or the like.","Computer-readable storage media reader  can further be connected to a computer-readable storage medium , together (and, optionally, in combination with storage device(s) ) comprehensively representing remote, local, fixed, and\/or removable storage devices plus storage media for temporarily and\/or more permanently containing computer-readable information. Communications system  may permit data to be exchanged with network  of  and\/or any other computer described above with respect to system environment .","Computer system  may also comprise software elements, shown as being currently located within working memory , including an operating system  and\/or other code , such as an application program (which may be a client application, Web browser, mid-tier application, RDBMS, etc.). In a particular embodiment, working memory  may include executable code and associated data structures for client application , database connectivity adapter , and\/or event processing server  of . It should be appreciated that alternative embodiments of computer system  may have numerous variations from that described above. For example, customized hardware might also be used and\/or particular elements might be implemented in hardware, software (including portable software, such as applets), or both. Further, connection to other computing devices such as network input\/output devices may be employed.","In one set of embodiments, the techniques described herein may be implemented as program code executable by a computer system (such as a computer system ) and may be stored on machine-readable media. Machine-readable media may can include any appropriate media known or used in the art, including storage media and communication media, such as (but not limited to) volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage and\/or transmission of information such as machine-readable instructions, data structures, program modules, or other data, including RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disk (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store or transmit the desired information and which can be accessed by a computer.","Although specific embodiments of the present invention have been described, various modifications, alterations, alternative constructions, and equivalents are within the scope of the invention. For example, embodiments of the present invention are not restricted to operation within certain specific data processing environments, but are free to operate within a plurality of data processing environments. Additionally, although embodiments of the present invention have been described using a particular series of transactions and steps, it should be apparent to those skilled in the art that the scope of the present invention is not limited to the described series of transactions and steps.","Further, while embodiments of the present invention have been described using a particular combination of hardware and software, it should be recognized that other combinations of hardware and software are also within the scope of the present invention. Embodiments of the present invention may be implemented only in hardware, or only in software, or using combinations thereof.","The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense. The scope of the invention should be determined not with reference to the above description, but instead should be determined with reference to the pending claims along with their full scope or equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
