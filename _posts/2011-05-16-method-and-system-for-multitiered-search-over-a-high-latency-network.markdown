---
title: Method and system for multi-tiered search over a high latency network
abstract: A computer implemented method and system include executing a search against both a client cache associated with a client and data sources remotely coupled to the client over a network connection. Results from the search against the client cache are rendered on a client UI. The client cache and the client UI are updated with the results from the search against the data sources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09495474&OS=09495474&RS=09495474
owner: SAP SE
number: 09495474
owner_city: Walldorf
owner_country: DE
publication_date: 20110516
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This is a continuation of co-pending prior U.S. patent application Ser. No. 12\/204,778 entitled \u201cMETHOD AND SYSTEM FOR MULTI-TIERED SEARCH OVER A HIGH LATENCY NETWORK\u201d, filed Sep. 4, 2008, which application is incorporated herein by reference.","The present application relates to network communications and, in particular, a method and system for accessing data.","Mobile users, especially business professionals, have a need to reliably access their data sources and internet sources any time, any place. Data sources and internet sources include, for example, contact information, customer information, transaction information, news, and company profiles. The following describes the importance of such information:\n\n","Use of the following applications and information have increased over the years.\n\n","Because these applications were built independently and by different vendors, users must use separate siloed applications to access their data. To view data for a given customer, users must re-input the information in each application. On computing devices such as mobile phones where data input methods are non-optimal or where network latency is high, re-inputting data is very time-consuming and frustrating to users. Due to the high burden on the user to re-input data, most mobile users today do not access their data on their computing devices.","As shown in , a common implementation is to provide a UI that is based on a web-browser to send every request over the public Internet to a server for processing. The server consists of multiple components including: (1) a web server that handles http requests from the web-browsers and returns HTML to render in the web-browser; (2) an application server that retrieves data from the database server to return to the web server; and (3) a back-end DBMS server that stores all the data for the application.","The web-based UI architecture can be used on mobile devices such as cell phones by implementing a web-browser on the mobile device, and sending requests from the web browser to the server over a wireless carrier network. However, such an approach requires a network connection. Furthermore, response times over wireless carrier networks is slow.",{"@attributes":{"id":"p-0009","num":"0019"},"figref":"FIG. 2"},"The user is allowed to make data changes using the Mobile Client UI. These client changes are tracked, queued up, and applied to the server when network connectivity is re-established. A conventional optimization may include identifying and synchronizing incremental changes on the server and only re-transmitting records that have changed since the last synchronization, thereby minimizing network usage.","Many disadvantages are associated with this approach. A data subset must be specified and configured. Download of entire snapshots of data results in a heavy load on the server and network. The download process slows down and does not scale as data sets get larger when, for example, contact information is large (e.g., 100K contacts). In addition, data is only as fresh as the last synchronization.",{"@attributes":{"id":"p-0012","num":"0022"},"figref":"FIG. 3"},"The disadvantages of this approach mirror those of the approaches discussed above. In addition, this approach undesirably provides separate and inconsistent UI behaviors, requiring the user to know which of the two UIs to use for his specific need.","In one embodiment of the present invention, a computer implemented method and system include a client executing a search against both a client cache associated with a client, and against data sources remotely coupled to the client over a network connection. Results from the search against the client cache are rendered on a client UI. The client cache and the client UI are updated with the results from the search against the data sources.","In another embodiment of the present invention, an application server includes a server cache. The client communicates with the application server, which acts as a proxy against which the search is performed. The network connection with the application server is opened. The network connection is closed at a predetermined time in the absence of network activity with the application server. The network connection is reestablished upon indication of a user.","Many other features and embodiments of the present invention will be apparent from the accompanying drawings and from the following detailed description.","In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the description. It will be apparent, however, to one skilled in the art that embodiments of the disclosure can be practiced without these specific details. In other instances, structures and devices are shown in block diagram form in order to avoid obscuring the description.","Reference in this specification to \u201cone embodiment\u201d, \u201can embodiment\u201d, \u201cother embodiments\u201d, or the like means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the disclosure. The appearances of, for example, the phrase \u201cin one embodiment\u201d in various places in the specification are not necessarily all referring to the same embodiment, nor are separate or alternative embodiments mutually exclusive of other embodiments. Moreover, various features are described which may be exhibited by some embodiments and not by others. Similarly, various requirements are described which may be requirements for some embodiments but not other embodiments.","As the amount of data grows and the number of computing devices increases, it becomes more and more time-consuming and resource-intensive to synchronize data sets to multiple computing devices. Conventional solutions such as snapshots must regularly retrieve data to each computing device even when the end user may not be active. In addition, snapshot-based solutions must retrieve any and all data that the end user potentially may need, undesirably causing orders of magnitude more data to be transferred over networks and copied onto multiple computing devices. Very often, only a small portion, if any, of the transferred data is actually used.","The amount of computing and network resources needed is further increased under conventional techniques when multiple data sources are accessed by the user. Instead of querying against one data source, such as a contacts or companies database, it is common for end users to need access to multiple data source entities such as Contacts, Companies, Service Requests, Orders, etc. Additionally, end users commonly have access to multiple instances of the same type of data source entity, such as Contact records stored in a CRM system, Contact records stored in a personal address book, Contact records stored in a social networking application, and so on.","The present invention involves accessing the increasing amount of data on an increasing number of computing devices primarily by minimizing the amount of data downloaded to a Client User Interface (UI). Moreover, the present invention keeps Client List UI () behavior simple regardless of the size of the data set. The present invention requires relatively little or no maintenance from the end user. All of the data is simply available and ready to access with relatively extremely fast response time.","The benefits of the present invention include, for example, the following:\n\n","In one embodiment, the present invention can be used for mobile phones. In another embodiment, tablet personal computers, personal digital assistants (PDAs), laptop computers, wireless devices, electronic whiteboards (e.g., Smartboards), and other similar devices can be used. In one embodiment, the present invention can be used wherever immediate response time is desired, as well as in the presence of a constrained network (e.g., desktops with slow network connectivity to server, laptops with intermittent connection to servers, etc.).","End User Behavior","In one embodiment, the present invention may used for end users to quickly find a data record, such as a Contact record, a Company record, or a Opportunity record, from a large number of records stored in a data source.","As shown in , to accomplish this, the end user is presented with a Client List UI () that renders a list of records from a data source. Each record in the list has one or more data fields whose values are rendered in the Client List UI (). In one embodiment, the number of records in this data source can vary from a small number (e.g., tens of records) through a large number (e.g., thousands or even millions of records). Regardless of the number of records in the data source, in one embodiment, the Client List UI () is substantially similar to list-based UI shown in . In the example shown, there are at least 500 Contact records available in the Client List UI ().","As show in , at the top of the Client List UI is a Find text box () where an end user may enter a text string. When the end user enters a value in the Find text box, the Client List UI () filters the list of records to those that match the entered text string. In this example, entering the text \u201cMichael\u201d has reduced the number of records in the Client List UI () to 52 records. By entering the text string in the Find text box (), the end user has effectively reduced the list to make it easy for a person to find the record that the end user is interested in.","As shown in , after finding the record of interest, the end user can \u201cdrilldown\u201d into the record to view detailed information about the record of interest in the form of a Client Detail UI (). For example, while viewing a Contact record, the end user can view Name, Account names, Title, Phone numbers, Email addresses, Mailing address and other information about the Contact record.","As shown in , in addition, the end user can also view related information about the record of interest. For example, while viewing a Contact record, the end user can easily see Accounts, Cases, Notes, Opportunities, Yelp Businesses, Google Maps, LinkedIn, and other information related to the Contact record.","Exemplary Components",{"@attributes":{"id":"p-0045","num":"0060"},"figref":"FIG. 8","b":["100","200","300"]},"Data Sources () are computing systems that store and manage data. In one embodiment, there could be one or more data sources as depicted by Data Source Entity A () and Data Source Entity B (). In one embodiment, a data source may be implemented in a back-end DBMS such as relational database, may be stored in a remote computing system and accessible via a public interface such as SOAP or REST APIs over HTTP, and\/or may be publicly available over the internet.","App Server () acts as an intermediary between Data Sources () and Client (). The App Server () connects to Data Sources () via Data Adapters (). The data adapter () is a library of code that connects to the Data Source () and is able to read\/write data to the Data Source (). In the diagram, Data Adapter A () connects to Data Source Entity A () while Data Adapter B () connects to Data Source Entity B ().","Server APIs () provide an application programming interface to clients () that need to access the data from the Data Sources (). The Server APIs () utilize a Server List Cache () to speed up access to the data and minimize requests to Data Sources ().","Client () provides the user interface for the end user to interact with the data. A Client List UI (), which is similar or identical to the Client List UI (), displays a list of records from a Data Source () that matches a search specification. For example, this may be a list of contact records that matches the last name \u201cSmith\u201d. The Client List UI () contains a \u201cFind text box\u201d, which is similar or identical to the Find Text Box (), that lets the end user further filter the result list. While viewing records on the Client List UI (), the end user can drilldown on a particular record to view the Client Detail UI (). The Client Detail UI () displays all the fields and values of a specific record, such as First Name, Last Name, Work Phone, Email Address, Title, Birthday, and so on.","The Client () communicates with the App Server () over a network () such as the internet (). In one embodiment, the communication uses standard communication protocols such as XML messages over HTTP. In other embodiments, other communication protocols including proprietary protocols, may be used. In addition, requests exchanged between the Client () and the App Server () may be encrypted to ensure security of the transfer, and\/or compressed to minimize bandwidth usage of the network such as the internet ().","The Client () uses a Client Cache () to store data for immediate access. Usually, the cache contains a set of previously accessed data. The Client Cache () is not required for proper functioning of the Client (), but is provided to improve response time and minimize network traffic with the App Server ().","Client List UI Method","The Client List UI () interacts with the Server APIs () to provide the desired end user behavior described above. The Client List UI () executes a query against the Client Cache () and also against the Server APIs (). The query against the Client Cache () returns immediately and provides near-instantaneous response time to the end user since the operation completes entirely in the Client UI (). The query against the Server APIs () searches for additional matches from the data source that may not already reside in the Client Cache (). In one embodiment, the query against the Server APIs () is optional and only occurs if a network connection between the Client UI () and Server APIs () is available; thereby, allowing the Client UI to function isolated from the network ().","Method Summary","The Client List UI () uses a multi-tiered caching scheme involving a Client Cache (), an optional Server List Cache (), and access to a Data Source ().",{"@attributes":{"id":"p-0056","num":"0071"},"figref":"FIG. 9","b":"900","ul":{"@attributes":{"id":"ul0007","list-style":"none"},"li":{"@attributes":{"id":"ul0007-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":["Step 1 (). (Optionally) Initialize the client cache () with a subset of data from the Data Source (). The initialization can involve tuning to anywhere between 0 records, a specified subset of records, and all of the actual data source records.","Step 2 (). End user enters a search text in the Client List UI () Find text box .","Step 3. Find matching records in the client cache ().\n        \n        ","Step 4. In parallel, find matching records in the server.\n        \n        "]}}}},"Various alternative implementations are possible. In one embodiment, all records from the data source are cached in the client cache (), and Step 4 (, ) is bypassed if the number of records in the data source entity is less than a threshold A (e.g., 500 records).","In another embodiment, if the number of records in the Data Source Entity ( or ) is less than a threshold B (e.g., 5,000 records) or requests to the Data Source () are costly or limited in number, a Server List Cache () is created that stores a cache of the data source records to improve response time by eliminating requests to the Data Source ().","Initialization Method",{"@attributes":{"id":"p-0060","num":"0083"},"figref":"FIG. 10","b":["1000","301","300","304","304"],"ul":{"@attributes":{"id":"ul0011","list-style":"none"},"li":{"@attributes":{"id":"ul0011-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0012","list-style":"none"},"li":["Step 1 (). The Client UI () conveys to App Server () how many records to initialize for the client-side cache by passing a Client Cache Size parameter. In one embodiment involving a client with high bandwidth access to the server, this parameter may be a large number like 1,000. In another embodiment involving lower bandwidth clients, this may be a much smaller number like 100.","Step 2 (). Server APIs () use the Data Source Adapters () to query back-end Data Sources () for data records.","At decision step , it is determined whether the number of records is less than or equal to the client cache size. If yes, the method () proceeds to Step 3a (). If no, the method () proceeds to decision step (). At decision step (), it is determined whether the number of records is greater than the Server Cache Limit. If yes, the method () proceeds to Step 3b (). If no, the method () proceeds to Step 3c ().","Step 3. Server APIs () populate a Server List Cache () depending on the number of records returned from the Data Source ().\n        \n        ","Step 4 (). Client () stores returned records into the Client Cache ()."]}}}},"Find String Method",{"@attributes":{"id":"p-0062","num":"0093"},"figref":"FIG. 11","b":["1100","301","1100","1102","500","1100"],"ul":{"@attributes":{"id":"ul0014","list-style":"none"},"li":{"@attributes":{"id":"ul0014-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0015","list-style":"none"},"li":["Step 1 (). Client List UI () performs find against Client Cache (). The method () proceeds to Step 2 () and decision block (). At decision block (), it is determined whether the number of records is less than or equal to Client Cache Size. If yes, the method () proceeds to Step 3a (). If no, the method () proceeds to Step 3 ().","Step 2 (). Client List UI () renders results from client cache.","Step 3 (). Client List UI () performs find against the server.","The method () proceeds to decision block (). At decision block (), it is determined whether the number of records is greater than Server Cache Limit. If yes, the method () proceeds to Step 3b (). If no, the method () proceeds to Step 3c ().\n        \n        ","Step 4 (). Client () stores returned records into the Client Cache ().","Step 5 (). Client () renders new and updated records from server on Client List UI ()."]}}}},"Refresh Cache Method","The Client Cache () and the Server List Cache () can be refreshed. First, the end user can explicitly request a refresh of the data. For example, the end user may know that there is a recently inserted or updated record in a data source entity and accordingly may want to see the new information. During a refresh, the entire Server List Cache is refreshed and the client cache is reinitialized.","In addition, the caches can be periodically refreshed. For example, the end user can choose to have a refresh occur on a daily basis. As another example, a refresh can occur when an end user begins to re-use the client, or otherwise provides an appropriate indication; and a predetermined number of hours, which may constitute a predetermined maximum time, have elapsed since the last refresh.","In another embodiment, the Data Source () sends a notification to the App Server () that newly inserted or updated data is available. The App Server () updates the appropriate Server List Cache (). The App Server () may also optionally send notifications to the Client UIs () to update their Client Cache ().","Client Detail UI","The end user can select a data record in the Client List UI (), and drilldown to the Client Detail UI () to view additional details about the data record. The Client Detail UI () is similar or identical to the Client Detail UI (). The following is a method of using the Client Detail UI ():\n\n","In one embodiment, Step 2 and Step 3 as set forth immediately above, occur in a background thread in the Client (). By executing these steps in the background, the end user can continue to perform other UI operations in the Client () while the Client Detail UI () is updated.","Persistent Network Connections","In network protocols that have high latency, the Client () can open a persistent network connection over the network () between the Client () and the App Server (). In one embodiment, the Client () opens a TCP socket connection such as using port , or using port  over SSL. After opening the persistent connection, the Client () can send requests to the server without the need to setup and tear down the connection for each request.","Opening a persistent connection is especially helpful when the network connection uses SSL, which requires a series of handshakes to establish a connection. On wireless carrier networks, setup and tear down of a network connection may take, for example, approximately 1 to 4 seconds, as each of the handshake requests require 500 milliseconds or more. To minimize wait time for the end user, the Client UI () opens a network connection with the Server APIs () as soon as the Client UI () program starts.","Persistent network connections may have a user- or administrator-specified timeout specified in, for example, seconds. When the specified timeout is reached without any network activity, the Client UI () automatically closes the network connection after a period of inactivity to conserve App Server () resources and Client UI () resources such as battery life. If specified by the end user, the Client UI () has the option to send regular \u201cping\u201d requests to the App Server () before reaching the timeout interval to ensure that the App Server () keeps the network connection alive.","If the network connection is closed, such as due to server timeouts or loss of network coverage, the Client UI () automatically re-establishes the connection when the Client () sends its next network request to the App Server ().","Client Cache ()","As shown in , the Client Cache () stores data records that have been retrieved to the Client () from the App Server (). The Client Cache () is segmented into multiple partitions. Each partition stores data for each Data Source Entity available in the Client (). In one embodiment, the Client Cache () may be implemented as a set of XML files residing in the client's file system: one XML file per Data Source Entity. In another embodiment, the Client Cache () may use database table(s) in a lightweight relational database to store the cache entries. Each Data Source Entity may have its own database table, or all Data Source Entities may share a single database table and the entries are segmented with the use of a data_source_entity database column.","Each entry in the Client Cache () stores the list fields for the Data Source Entity. For example, Contact records may contain the Full Name, Company Name and Email Address of the Contact record, while entries for Company records may contain Company Name, Company Phone Number and Company Location.","Each entry in the Client Cache () has a unique ID field () that uniquely identifies a record. The Client Detail UI () uses the ID field to quickly find a record in the Client Cache (). The entries in the Client Cache () may be indexed by the first list field for fast searching of records. The entries in the Client Cache () may also be sorted to avoid sorting operations when entries are displayed in the Client List UI ().  shows sample entries in the Client Cache () for a Contact Data Source Entity.","The Client Cache () also stores the entire set of detail fields for records if the Client UI () has previously retrieved them from the App Server (). The Client Detail UI () renders the data in these detail fields, thereby eliminating the need to send a request to Server APIs () when viewing the record in the Client Detail UI ().","Server List Cache ()","The Server List Cache () is used for improving performance as well as for minimizing external data source API calls that typically impose limit on usage frequency. Server List Cache () is also used to improve performance of the Find text box (). Requests for list data to the Server APIs () use the Server List Cache () if available.","The Server List Cache () stores list column values for a given data source. In one embodiment, the Server List Cache () is implemented as a database table in a relational database on the App Server (). The table has list_col_, list_col_, list_col_, list_col_ and list_col_rest. Each of these columns has an index defined to improve performance of the Find text box ().","In another embodiment, which may provide improved performance, the Server List Cache () is implemented as a database table but instead has two columns, list_data and list_data_lengths. Column list_data stores a concatenated string of all list column values, and column list_data_lengths stores lengths of individual list column values in list_data. Both columns are indexed for fast search and retrieval.","Server List Cache () is refreshed upon each receipt of a complete entity row from an external data source. It can also be updated on periodic schedule or when notifications from the data source are received by the App Server ().","Server List Cache () is controlled by two preferences: cache_server_list and server_list_cache_refresh_interval. These preferences can be updated via an App Server () administration web page. The cache_server_list preference specifies whether the Server List Cache () is enabled for a given data source entity. The server_list_cache_refresh_interval preference specifies the cache refresh interval in hours. In one embodiment, the default is a 24 hour refresh interval. Updating these preferences starts background processes for populating or cleanup of the Server List Cache (). In addition, another database table tracks the last time a given Server List Cache () has been updated for a given user.","Every time a request to the Server APIs () occurs that has cache_server_list preference enabled, the Server APIs () verify whether the list_cache_refresh_interval has been reached and refreshes the cache if needed. The Server APIs () then perform a lookup against the Server List Cache (). At the same time in the background, the Server APIs () issue a query to the data source with the same query criteria and updates the Server List Cache () with new results. In the cases when the query against the data source returns less rows than same criteria against the Server List Cache (), the Server APIs () individually refresh data for rows that may have been deleted or updated on the server that does not satisfy current search criteria.","The Client () can also initiate an explicit refresh of the Server List Cache () by invoking the Server APIs (). Optionally, the administrator can schedule background jobs on the App Server () to periodically refresh the Server List Caches () every server_list_cache_refresh_interval.","Server APIs ()","The Server APIs () are a set of programmatic interfaces used by the Client () to retrieve data about a data source entity. In one implementation, the Server APIs () are implemented as XML messages accessible over a network protocol such as HTTP. Parameters to each API are passed via url parameters.","The main APIs are listed in the following table:",{"@attributes":{"id":"p-0091","num":"0136"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"XML API","URI","Comment"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Login","api\/login",{}]},{"entry":[{},"Get Data for an Entity","api\/get_data"]},{"entry":[{},"Get Related Data for en","api\/get_related_data"]},{"entry":[{},"Entity"]},{"entry":[{},"Logout","api\/logout"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"It should be noted that the client should first \u201clogin\u201d to create a session. Subsequent XML APIs should be called with an _skydata_session HTTP cookie returned by login call.","It should also be noted that every API returns XML with single root element <result> and with mandatory child XML element <message>, that contains required attributes code and message text as a content of XML element.","api\/login","Login to SkyData server and return a _skydata_session HTTP cookie that can be used with subsequent (get_data and get_related_data) requests to identify the SkyData user who is executing the Server APIs ().","Parameters:\n\n","Response:\n\n","api\/get_data","Returns data for a given Data Source Entity based on query parameters.","Parameters:\n\n","Response\u2014Pseudo Schema:",{"@attributes":{"id":"p-0102","num":"0162"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<result>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<my-data>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Attrs:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"data-source-entity-name"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[my-datum]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[\u201ccolumn names\u201d]"]},{"entry":[{},"[related-data]"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Attrs:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"name"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[my-datum]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<message>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Attrs:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Code"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The \u2018cache\u2019 parameter controls whether the Server APIs () use the Server List Cache ().\n\n","Following is the series of API calls that a client () uses to access data from the server list APIs ().\n\n","In accordance with various embodiments of the present invention, the following are exemplary API calls:\n\n","api\/get_related_data","Returns related data for a given Data Source Entity row based on query parameters.","Parameters:\n\n","Response\u2014Pseudo Schema:",{"@attributes":{"id":"p-0110","num":"0199"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<result>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<my-data>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[my-datum]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Attrs:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"data-source-entity-name"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[\u201ccolumn names\u201d]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<message>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Attrs:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"code"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"api\/logout","Logout from SkyData server and invalidate a previously set_skydata_session HTTP.","Parameters:","None","Response:","<result>\u2014with message code 0 on success or 100 on failure.","Server API Response Codes","The following is a list of current message codes and texts returned by the APIs:",{"@attributes":{"id":"p-0119","num":"0208"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Message",{},{}]},{"entry":["Code","Text","Comment"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","OK",{}]},{"entry":["100","Unexpected error: \u2018actual"]},{"entry":[{},"error message\u2019"]},{"entry":["102","Error: email\/password"]},{"entry":[{},"combination is not valid"]},{"entry":["103","Error: not logged in"]},{"entry":["300","Not Modified"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"An embodiment of the invention relates to a computer storage product with a computer-readable or machine-accessible medium having executable instructions or computer code thereon for performing various computer-implemented operations. The term \u201ccomputer-readable medium\u201d or \u201cmachine-accessible medium\u201d is used herein to include any medium that is capable of storing or encoding a sequence of executable instructions or computer code for performing the operations described herein. The media and computer code can be those specially designed and constructed for the purposes of the invention, or can be of the kind well known and available to those having ordinary skill in the computer software arts.","Examples of computer-readable media include computer-readable storage media such as: magnetic media such as hard disks, floppy disks, and magnetic tape; optical media such as Compact Disc-Read Only Memories (\u201cCD-ROMs\u201d) and holographic devices; magneto-optical media such as floptical disks; and hardware devices that are specially configured to store and execute program code, such as Application-Specific Integrated Circuits (\u201cASICs\u201d), Programmable Logic Devices (\u201cPLDs\u201d), Read Only Memory (\u201cROM\u201d) devices, and Random Access Memory (\u201cRAM\u201d) devices. Examples of computer code include machine code, such as produced by a compiler, and files containing higher level code that are executed by a computer using an interpreter. For example, an embodiment of the invention may be implemented using Java, C++, or other programming language and development tools. Additional examples of computer code include encrypted code and compressed code. Another embodiment of the invention can be implemented in hard wired circuitry in place of, or in combination with, computer code.","While the invention has been described with reference to the specific embodiments thereof, it should be understood by those skilled in the art that various changes may be made and equivalents may be substituted without departing from the true spirit and scope of the invention as defined by the appended claims. In addition, many modifications may be made to adapt a particular situation, material, composition of matter, method, operation or operations, to the objective, spirit, and scope of the invention. All such modifications are intended to be within the scope of the claims appended hereto. In particular, while the methods disclosed herein have been described with reference to particular operations performed in a particular order, it will be understood that these operations may be combined, sub-divided, or reordered to form an equivalent method without departing from the teachings of the invention. Accordingly, unless specifically indicated herein, the order and grouping of the operations is not a limitation of the invention."],"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present disclosure is illustrated by way of example and not limited in the figures of the accompanying drawings in which like references indicate similar elements.",{"@attributes":{"id":"p-0018","num":"0028"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0029"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0030"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0031"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0032"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0033"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0024","num":"0034"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0025","num":"0035"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0026","num":"0036"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0027","num":"0037"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0028","num":"0038"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0029","num":"0039"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0030","num":"0040"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
