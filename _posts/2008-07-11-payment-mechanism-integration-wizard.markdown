---
title: Payment mechanism integration wizard
abstract: The wizard steps the merchant through creating an account to obtain credentials and educates the merchant on the page flows of the payment mechanism that the merchant wishes to integrate. Then, the wizard generates code snippets and files to be downloaded by the merchant and to be easily inserted into key pages of the merchant's online commercial website. The merchant can then test the completely integrated code in a developer's sandbox or go live with the completely integrated code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08249950&OS=08249950&RS=08249950
owner: Ebay Inc.
number: 08249950
owner_city: San Jose
owner_country: US
publication_date: 20080711
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates to online, internet-based financial transaction programs and commercial systems and more particularly to a method and system where merchants are able to integrate financial transaction payment mechanism code seamlessly into their own commercial websites.","With the advent of the internet and online electronic commerce (e-commerce), financial transaction programs that allow users to seamlessly purchase products, transfer and receive funds over an internet connection have been in high demand.","Traditional methods of executing financial transactions have been limited to a user providing his or her credit card, debit card, or checking account number on a commercial website, or using checks, money orders and other forms of paper-based payments. However, these means of executing financial transactions are often cumbersome, slow, and inconvenient, requiring a user to remember a multitude of account numbers, login data and passwords. This often results in significant time delays for payment processing. Furthermore, security and fraud concerns are prevalent. For instance, a user is often reluctant to provide sensitive credit card or debit card information over an internet connection, regardless of how \u201csecure\u201d an internet connection claims to be.","Recent financial transaction programs have emerged as a means for a user to pay for purchases, transfer money, receive money (if the user is a merchant), store shipping addresses, and set up multiple financial accounts (e.g. checking or savings, credit card, debit card) all with one single login and password. Security and fraud concerns are also mitigated by means of online financial security precautions, encryption methods, and anti-phising programs that are inherent in online, internet-based financial transaction systems.","Merchants may decide to use such a financial transaction program in order to receive funds from customers who purchase products from their commercial websites. There are several \u201cpayment mechanisms\u201d that enable merchants to receive funds from customers. For instance, certain mechanisms enable customers to enter their credit card, debit card or go to an external login site to enter their account information, pay for the product, and then proceed to checkout.","However, it is difficult for merchants to integrate these payment mechanisms without significant experience with the associated application programming interface (API) or knowledge of computer code. Merchants or vendors have to understand the API, have to know how to code in the specific provided language (i.e. ASP, ASP.NET, JSP, Java, PHP) and have to know how to develop complicated code that interfaces with a plurality of servers and databases during an online financial transaction between a customer and a merchant.","Currently, there are no user-friendly programs that present a simple contextual page flow and that also simultaneously generate the necessary code to integrate into a merchant's commercial website.","Therefore, there is a need in the art for a simple, user-friendly and customizable method and system that allows a merchant to seamlessly integrate payment mechanisms inherent to financial transaction programs into their commercial websites, without having to know an API library or the details of a particular code (i.e. ASP, JSP, PHP, .Net, Java).","According to one embodiment, a method is provided to integrate payment mechanisms and a web-site integration system that offers online merchants a flexible, user-friendly and customizable way to integrate payment mechanisms into their online commercial websites without having to understand the detailed intricacies of an API or other computer code.","First, a merchant creates an API-based account to obtain API Credentials or create a non-API based account to obtain non-API Credentials (e.g. such as Payflow Credentials with a PayPal Merchant Account), Then, the merchant selects a payment mechanism from an integration wizard to integrate into his or her commercial website. The merchant should understand the payment mechanism, such as by understanding the page flows of that particular payment mechanism, which may be accomplished by presenting the merchant with page flows associated with the payment mechanism.","This allows the merchant to understand a common terminology for the different pages of the payment mechanism, such as a shopping cart site, e.g., Shopping Cart Page, Shipping Address Page, Billing Page, Order Review Page and finally the Order Confirmation Page. Then, the merchant provides API Credentials and other parameters (such as a Shopping Cart Programming Language, an Environment, a Return URL, a Cancel URL, Payment Type and Currency Code) as inputs to the wizard.","After the developer or merchant submits the requested data, the integration wizard generates a plurality of code snippets and a plurality of files. The code snippets can be cut and pasted into the respective sections (Shopping Cart Page, Billing Page, etc.) of the merchant's commercial website. Also, the key files produced by the integration wizard that wrap all the API functionality in them are placed in the shopping cart web directory of the merchant's commercial website. Afterwards, the payment mechanism code will be successfully integrated into the merchant's commercial website.","Thus, the wizard presents contextual page flow and also generates code at the same time to enable the user to easily integrate an API-based payment mechanism.","Further limitations and disadvantages of conventional and traditional approaches will become apparent to one of skill in the art, through comparison of such systems with the present invention as set forth in the remainder of the present application and drawings.","To allow cross-referencing among the figures, like elements in the figures are provided like reference numerals.","The following description is presented to enable any person skilled in the art to make and use the invention, and is provided in the context of particular applications of the invention and their requirements. Various modifications to the disclosed embodiments will be apparent to those skilled in the art and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present invention.","According to one embodiment of the invention, a method is provided that enables an online merchant to seamlessly integrate payment mechanism code into their commercial website without having to understand the intricacies of an API or other code.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 1","b":["100","110","100"]},"In step , a merchant creates either a sandbox account in order to acquire API credentials, such as an API username, API password and a signature or digital signature, which will be further explained in the description for . Also in step , a merchant can create a merchant or Payflow account to acquire Payflow credentials such as name, password, user or partner. Payflow credentials are simply examples of credentials that are not API credentials and are not limited to just Payflow credentials.","In step , a merchant selects a payment mechanism to integrate into his or her commercial website. A plurality of different payment mechanisms exist. One type of payment mechanism can, for instance, allows a customer to leave the merchant's commercial website and log-in to an external financial transaction website (such as, but not limited to, a PayPal login page) and send the payment back from the financial transaction program to the merchant's commercial website. Examples of these types of payment mechanisms include PayPal's Express Checkout (with a Developer Sandbox Account) product and PayPal's Express Checkout PayFlow edition (with a PayPal Merchant Account) product. Another type of payment mechanism allows a customer to make a payment to the merchant all without leaving the merchant's commercial website. An example of this type of payment mechanism includes PayPal's Credit Card PayFlow product (with a PayPal Merchant Account).","In step , once a payment mechanism is selected in step , the page flows of that respective selected payment mechanism are presented in order to educate the merchant on how a user proceeds from placing items in a shopping cart to checking out. This is done to establish a context with the merchant and to establish a common terminology for referring to different pages of the shopping cart site. For instance, there is a \u201cShopping Cart Page\u201d, a \u201cShipping Address Page\u201d, a \u201cBilling Page\u201d, an \u201cOrder Review Page\u201d and finally an \u201cOrder Confirmation Page\u201d. For a payment mechanism that requires a customer to leave a merchant's commercial website, there are two primary page flows that can be shown.","First, a page flow can be shown that details how a customer can proceed directly from the \u201cShopping Cart Page\u201d of the merchant's commercial website to an external website of a financial transaction program (such as a PayPal login page) to provide their login data and pay for the purchased item through the financial transaction program (e.g. using PayPal funds, for instance). Then, the customer reviews the payment they made through their financial transaction program. Afterwards, the customer is brought back to an \u201cOrder Review Page\u201d of the merchant's commercial website and then is taken to the \u201cOrder Confirmation Page\u201d of the merchant's commercial website.","Second, another page flow can be shown that details how a customer can proceed from the \u201cShopping Cart Page\u201d of the merchant's commercial website to the \u201cBilling Page\u201d of the merchant's commercial website and then to the an external website of a financial transaction program (such as a PayPal login page) to provide their login data and pay for the purchased item through the financial transaction program (e.g. using PayPal funds, for instance). Then, the customer reviews the payment they made through their financial transaction program. Afterwards, the customer is brought back to an \u201cOrder Review Page\u201d of the merchant's commercial website and then is taken to the \u201cOrder Confirmation Page\u201d of the merchant's commercial website.","Third, the merchant is shown that both of the above two page flows can be implemented for a payment mechanism that requires a customer to leave a merchant's commercial website to an external financial transaction program website.","Fourth, for a payment mechanism that enables a customer to stay at a merchant's commercial website the entire time, a simple direct page flow is presented that shows how a customer can proceed from the \u201cShopping Cart Page\u201d of the merchant's commercial website, to the \u201cShipping Address Page\u201d, then to the \u201cBilling Page,\u201d then the \u201cOrder Review Page\u201d and then finally to the \u201cOrder Confirmation Page\u201d all on the merchant's commercial website.","In step , a merchant provides API Credentials (e.g. API Username, API Password, Digital Signature) if the merchant signed up for an API Developer Account, or the merchant provides Payflow Credentials (e.g. Name, Password, User, Partner) if the merchant signed up for a non-API based account such as, for example, a PayPal Merchant Account or another similar type of account not affiliated with an API. The merchant also specifies additional parameters. The end result of step  is that code-snippets and file(s) get generated by the wizard from the API or Payflow Credentials and other parameter information that the merchant specifies.","In step , a merchant will have the downloaded code snippets and file(s) which were generated from step .","In step , a merchant follows the detailed instructions provided by the Integration Wizard that details how to integrate the downloaded code snippets and file(s) into the specific pages (e.g. the \u201cShopping Cart Page\u201d, the \u201cBilling Page\u201d, the \u201cOrder Review Page\u201d and the \u201cOrder Confirmation Page\u201d) of the merchant's commercial website. The end result of step  is that after following the instructions, a merchant will have the option of testing the integrated code in a sandbox or \u201cgoing live\u201d with the integrated code.","In step , a merchant then decides to test the integrated code in a developer's sandbox, if the merchant has already set up a Developer Sandbox account (with API Credentials). Afterwards, in step , a merchant may also decide to \u201cgo live\u201d with the code, which basically means that the integrated code will be placed on the merchant's commercial website to be used by customers and the rest of the public.","In step , the merchant asks whether he or she wishes to integrate any additional payment mechanisms with the Integration Wizard. If there are still more payment mechanisms to integrate, the merchant proceeds back to step  and selects another payment mechanism to integrate into his or her commercial website. If the merchant does not want to integrate any more payment mechanisms and the \u201cgoing live\u201d of the last payment mechanism the merchant integrated into his or her commercial website was successful, the merchant is done with the process, and therefore, the merchant goes to step  to finish the entire integration process.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 2","FIG. 1"],"b":"130"},"Step  asks whether the merchant has set-up a Developer-Sandbox Account and therefore has API Credentials, or if the merchant has set-up a non-API Account such as a Payflow Account and has Payflow Credentials.","In step , if the merchant has a Developer-Sandbox Account, then the merchant has API Credentials such as an API Username, an API Password and a Signature (or Digital Signature). Therefore, in step , a merchant inputs his or her API Credentials (API Username, API Password, Signature) into the Integration Wizard.","In step , if the merchant has a non-API based Account or a Payflow Account, then the merchant has Payflow Credentials such as ID data for: Vendor, Password, User, and Partner. The Vendor (ID) is the login name created when the merchant registered for the Account. The Password is the password for the account. The User (ID) should be the same as the \u201cVendor\u201d (ID) unless a separate user was created. For instance, if the merchant is using PayPal, a separate user can be created for the PayFlow Pro product from within the merchant's PayPal Manager Account. Finally, the Partner (ID) is applicable if the merchant is using PayPal. The Partner ID for PayPal is the ID provided to the merchant by the authorized PayPal Reseller who registered the merchant for the PayFlow Pro service. If the merchant purchased the PayPal Merchant Account directly from PayPal, then \u201cPayPal\u201d is input as the Partner ID. The Partner ID value is case-sensitive.","In step  and step , the merchant selects the Shopping Cart Programming Language that the merchant wishes to code the Shopping Cart files in. This code is usually what the rest of the merchant's commercial website is coded in. The Shopping Cart Programming Language can comprise, but is not limited to: Active Server Pages (ASP), ASP.NET (ASPX), Java Server Pages (JSP), Java (or Java SDK) or PHP.","In step , if the merchant has a non-API based Account or a Payflow Account, then the merchant can select the \u201cEnvironment\u201d of the integrated code, which usually comprises either \u201cPilot\u201d, for testing purposes, or \u201cLive\u201d which means that the integrated code will automatically be integrated into the actual, live version of the merchant's commercial website available on the internet.","In step , the merchant provides a \u201cReturn URL\u201d. A \u201cReturn URL\u201d is usually the \u201cOrder Review Page\u201d of the merchant's commercial website, and is the website that a customer \u201creturns\u201d to after visiting an external financial transaction website such as PayPal. For instance, if the merchant's commercial website is coded in HTML, the Return URL may be: http:\/\/www.yourstore.com\/OrderConfirmPage.htm.","In step , the merchant provides a \u201cCancel URL\u201d. A \u201cCancel URL\u201d is usually the \u201cMain Page\u201d of the merchant's commercial website, and is the website that a customer is brought to after cancelling an order. For instance, if the merchant's commercial website is coded in HTML, the Cancel URL may be: http:\/\/www.yourstore.com\/MainPage.htm.","In step , the merchant selects a \u201cPayment Type\u201d. If the merchant is using PayPal, the Payment Type is an input to the Payflow Gateway that allows a merchant to determine when to actually charge the customer or purchaser's PayPal or credit card account. PayPal currently supports two different Payment Types.","The first Payment Type is \u201cSale\u201d which means that the funds are credited to the merchant's account immediately at the end of the checkout flow, or right after the customer or purchaser finishes the checkout process of web pages. The second Payment Type is \u201cAuthorization\u201d which means that the merchant obtains an authorization (or a hold) for the transaction amount and the merchant then captures the funds against this authorization at a later date. Authorizations are valid for specific amounts of time, such as up to three days. The fund capture can be done either from the PayPal account or by using a function in the API called \u201cDoCapture\u201d.","In step , the merchant selects a \u201cCurrency Code\u201d. The \u201cCurrency Code\u201d can comprise, but is not limited to: U.S. Dollar [USD], Australian Dollar [AUD], Canadian Dollar [CAD], Swiss Franc [CHF], Czech Koruna [CZK], Danish Krone [DKK], Euro [EUR], Pound Sterling [GBP], Hong Kong Dollar [HKD], Hungarian Forint [HUF], Japanese Yen [JPY], Norwegian Krone [NOK], New Zealand Dollar [NZD], Polish Zloty [PLN], Swedish Krona [SEK], and the Singapore Dollar [SGD]. This is the currency that the customer or purchaser will use to pay the merchant for the product, or the currency that the merchant has decided to accept on his or her commercial website.","Finally, in step , all the inputted parameters from steps  to  are taken and placed into a code generator. In step , the code generator in turn generates code snippets and file(s) tailored to the parameters input in steps  to . For instance, code snippets are generated that swap in the \u201cReturn URL\u201d and \u201cCancel URL\u201d in the appropriate locations. Also in the code snippets, the \u201cPayment Type\u201d and \u201cCurrency Code\u201d information is properly reflected. Finally, the file(s) that a merchant usually places in the shopping cart web directory are generated, in the \u201cShopping Cart Programming Language\u201d that the merchant selected in steps  and  (e.g. either ASP, ASPX, JSP, Java, PHP or another language). After the code snippets and file(s) have been generated, the merchant then proceeds to step  in .",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 3","FIG. 1"],"b":["140","305"]},"Assuming the answer to the question posed in step  is YES, step  involves the instructions to be followed for integrating code into the \u201cShopping Cart Page\u201d of a merchant's commercial website. In step A, the merchant takes the downloaded code snippet, generated according to the parameters specified in step  of , and places that code snippet into the \u201cShopping Cart Page\u201d of the merchant's commercial website code. Then, in step B, the merchant downloads the respective file(s) and places the file(s) into the shopping cart web directory of his or her commercial website. What language these files show up in depends on what language was specified as the \u201cShopping Cart Programming Language\u201d in steps  and  of . If ASP, JSP, Java or PHP were selected, then there will usually be two ASP, JSP, Java or PHP files, respectively, that will be generated and that will need to be placed in the shopping cart web directory of the merchant's commercial website. If ASPX was selected, there will be five files: two \u201c.aspx\u201d files and three \u201c.aspx.cs\u201d files. A different number of files will be generated if a different type of language, not specified above, is selected. Finally, in step C, the merchant saves the total payment amount in a session variable named \u201cPayment_Amount\u201d. The code in the generated file(s) is designed to read from this session variable and pass this variable as input to an API function call.","In step , instructions are outlined for integrating code into the \u201cBilling Page\u201d of a merchant's commercial website. In step A, the merchant inserts the downloaded code snippet into the \u201cBilling Page\u201d section of the merchant's commercial website, or the section of the merchant's commercial website that handles billing. In step B, the code snippet has a variety of \u201cshipping address placeholders\u201d e.g. <<ShipToName>>, <<ShipToStreet>>, <<ShipToCity>>, <<ShiftToState>>, etc. The merchant replaces these placeholders with variables representing the shipping address, which are usually provided in the API library. Finally, in step C, the merchant saves the total payment amount (a numerical amount) in a session variable named \u201cPayment_Amount\u201d. The code inside the files described in step  is designed to read from this session variable and pass this value as input to an API function call.","In step , instructions are outlined for integrating code into the \u201cOrder Review Page\u201d of a merchant's commercial website. In step A, the merchant inserts the downloaded code snippet into the \u201cOrder Review\u201d page of the merchant's commercial website. In step B, the merchant displays the shipping address returned by the code variables directly on the \u201cOrder Review\u201d page for the customer to review. In step C, the merchant saves the total payment amount (a numerical value) in a session variable named \u201cPayment_Amount\u201d. The code inside the files described in step  is designed to read from this session variable and pass this value as input to an API function call.","In step , instructions are outlined for integrating code into the \u201cOrder Confirmation Page\u201d of a merchant's commercial website, if the selected payment mechanism at issue requires a customer to leave the merchant's commercial website for payment (e.g. a \u201cYES\u201d to the question posed in step ). In step A, the merchant inserts the downloaded code snippet into the \u201cOrder Confirmation Page\u201d of the merchant's commercial website. Then, in step B, the merchant saves the total payment amount (a numerical value) in a session variable named \u201cPayment_Amount\u201d. The code inside the files described in step  are designed to read from this session variable and pass this value as input to an API function call. Finally, in step C, the merchant processes the information returned by the code snippet of step A and completes order backend processing.","In step , instructions are outlined that are to be followed for integrating code into the \u201cOrder Confirmation Page\u201d of a merchant's commercial website, if the selected payment mechanism at issue does not require a customer to leave the merchant's commercial website for payment (e.g. a \u201cNO\u201d to the question posed in step ). In step A, the merchant inserts the downloaded code snippet into the \u201cOrder Confirmation Page\u201d of the merchant's commercial website. Then, in step B, because the merchant has not downloaded any file(s) yet (because a merchant only downloads file(s) in step B if he answers \u201cYES\u201d to the question in step  and then goes to step ), the merchant will have to download the generated files from the parameters specified in . Then, in step C the merchant passes the data collected from the \u201cBilling Page\u201d of the merchant's commercial website to the \u201cDirectPayment\u201d function in one of the downloaded files, if PayPal is used. Finally, in step D, the merchant processes the information returned by the code snippet in step A and completes order backend processing.","Finally, in step , the merchant is finished with integrating the code into all relevant pages or sections of his or her commercial website.","Also in step , a completion page will appear that will tell the merchant instructions on how to test the integrated code and how to \u201cgo live\u201d by executing the integrated code on the actual, live version of the merchant's commercial website. After step , the process goes to step  in .","According to another embodiment of the invention, a website integration system is provided that enables a merchant to seamlessly integrate payment mechanism code into their commercial website without having to understand an intricate API or other code.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 4","b":"405"},{"@attributes":{"id":"p-0080","num":"0079"},"figref":["FIG. 5A","FIG. 5B"],"b":["505","510","515"]},{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 5B","b":"520"},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 5C","b":"525"},"Sandbox and Payflow Credentials Notice  informs the merchant on how to create a sandbox test account and obtain Payflow Credentials. If the merchant clicks the text \u201cPayflow credentials and a Sandbox account activated for testing Express Checkout\u201d, a help box appears, which will be detailed in . Programming Language Notice  informs the merchant that he or she has to know the programming language used in the shopping cart on the merchant's commercial website (e.g. usually ASP, ASPX, JSP, Java, PHP or another language, as described above).",{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 5D","b":"540"},{"@attributes":{"id":"p-0085","num":"0084"},"figref":["FIG. 5E","FIG. 5F"],"b":["545","550","555"]},{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 5F","b":"560"},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 6A","b":["605","610","615"]},"Order Review Page  is where the customer reviews his or her order. Order Confirmation Page  is where the order has been finalized and submitted and a confirmation page is generated for the customer's records. Usually, a confirmation number of some sort is provided to the customer at the Order Confirmation Page .",{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 6B","b":["605","630","610","615","630","610","615","630","635","620","625"]},{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 6C","b":["605","610","615","630","635","620","625"]},{"@attributes":{"id":"p-0091","num":"0090"},"figref":["FIG. 6D","FIG. 6B","FIG. 6C"]},{"@attributes":{"id":"p-0092","num":"0091"},"figref":["FIG. 6E","FIG. 6E","FIG. 6A"]},{"@attributes":{"id":"p-0093","num":"0092"},"figref":["FIG. 7A","FIG. 5B"],"b":["705","520"]},"Shopping Cart Programming Language Dropdown Menu  allows a merchant to select a programming language from a plurality of programming languages. Currently, Dropdown Menu  allows the user to select from either: Active Server Pages (ASP), ASP.Net- C# (ASPX), Java Server Pages (JSP), Java or Java SDK, or PHP. However, this list is merely exemplary and not exhaustive.","Return URL Field  enables a merchant to enter a \u201cReturn URL\u201d. A \u201cReturn URL\u201d is usually the \u201cOrder Review Page\u201d of the merchant's commercial website, and is the website that a customer \u201creturns\u201d to after visiting an external financial transaction website such as PayPal. For instance, if the merchant's commercial website is coded in HTML, the Return URL is: http:\/\/www.yourstore.com\/OrderConfirmPage.htm. Cancel URL Field  enables a merchant to enter a \u201cCancel URL\u201d. A \u201cCancel URL\u201d is usually the \u201cMain Page\u201d of the merchant's commercial website, and is the website that a customer is brought to after cancelling an order. For instance, a potential Cancel URL may be: http:\/\/www.yourstore.com\/MainPage.htm.","Payment Type Dropdown Menu  allows a merchant to select a \u201cPayment Type\u201d. If the merchant is using PayPal, the Payment Type is an input to the Payflow Gateway that allows a merchant to determine when to actually charge the customer or purchaser's PayPal or credit card account. PayPal currently supports two different Payment Types that can be currently selected from Dropdown Menu .","The first Payment Type is \u201cSale\u201d which means that the funds are credited to the merchant's account immediately at the end of the checkout flow, or right after the customer or purchaser finishes the checkout process of web pages. The second Payment Type is \u201cAuthorization\u201d which means that the merchant obtains an authorization (or a hold) for the transaction amount and the merchant then captures the funds against this authorization at a later date. Authorizations are valid for up to three days. The fund capture can be done either from the PayPal account or by using a function in the API called \u201cDoCapture\u201d. The Payment Types are not limited to only these two and additional Payment Types may be added to Dropdown Menu .","Currency Code Dropdown Menu  enables a merchant to select a \u201cCurrency Code\u201d. The \u201cCurrency Code\u201d that can be currently selected from Dropdown Menu  can comprise, but is not limited to the following: U.S. Dollar [USD], Australian Dollar [AUD], Canadian Dollar [CAD], Swiss Franc [CHF], Czech Koruna [CZK], Danish Krone [DKK], Euro [EUR], Pound Sterling [GBP], Hong Kong Dollar [HKD], Hungarian Forint [HUF], Japanese Yen [JPY], Norwegian Krone [NOK], New Zealand Dollar [NZD], Polish Zloty [PLN], Swedish Krona [SEK], and the Singapore Dollar [SGD]. This is the currency that the customer or purchaser will use to pay the merchant for the product, or the currency that the merchant has decided to accept on his or her commercial website. This list is not exhaustive and additional currencies can be used.",{"@attributes":{"id":"p-0099","num":"0098"},"figref":["FIG. 7B","FIG. 7A","FIG. 2","FIG. 5D","FIG. 5F"],"b":["710","715","720","725","730","735","740","735","215","520","740"]},{"@attributes":{"id":"p-0100","num":"0099"},"figref":["FIG. 8A","FIG. 7A","FIG. 7A","FIG. 7A"],"b":["805","715","720","7","805","725","730","805","810","710","7","810"]},"Finally, Payment_Amount Variable Instruction  instructs the merchant to save the total payment amount (a numerical value) in a session variable named \u201cPayment_Amount\u201d. The code inside the ExpressCheckout file (e.g. expresscheckout.asp) is designed to read from this session variable and pass it as input to an API function call.",{"@attributes":{"id":"p-0102","num":"0101"},"figref":["FIG. 8B","FIG. 7A","FIG. 8A"],"b":["820","7","825","820","815"]},{"@attributes":{"id":"p-0103","num":"0102"},"figref":["FIG. 8C","FIG. 7A","FIG. 8A"],"b":["830","7","835","815"]},{"@attributes":{"id":"p-0104","num":"0103"},"figref":["FIG. 8D","FIG. 7A","FIG. 8A"],"b":["840","7","815","845"]},{"@attributes":{"id":"p-0105","num":"0104"},"figref":["FIG. 8E","FIG. 7B","FIG. 8A","FIG. 8D"],"b":["850","855","810","860","845"]},{"@attributes":{"id":"p-0106","num":"0105"},"figref":["FIG. 8F","FIG. 8G","FIG. 8H","FIG. 8F","FIG. 8A","FIG. 8F","FIG. 8G","FIG. 8B","FIG. 8G","FIG. 8H","FIG. 8C","FIG. 8H"]},{"@attributes":{"id":"p-0107","num":"0106"},"figref":["FIG. 9A","FIG. 6B","FIG. 6C"],"b":["905","1","2","910","915"]},{"@attributes":{"id":"p-0108","num":"0107"},"figref":["FIG. 9B","FIG. 9A"],"b":["905","915"]},"Payflow Credential Go Live Instructions  instruct the merchant how to \u201cgo live\u201d with the finally integrated code. In the paypalfunctions.xxx file (xxx being asp, aspx, cs, jsp, java, php, etc.), the merchant makes sure to set the Sandbox variable to false to cause the code to use the Payflow live site API endpoints. This is identical to the API Credential Go Live Instructions  in , except that there is no need to \u201cReplace the Sandbox API credentials with the live API credentials\u201d.",{"@attributes":{"id":"p-0110","num":"0109"},"figref":["FIG. 9C","FIG. 6E","FIG. 9B","FIG. 9A"],"b":["925","1","930","920","915"]},"The above-described embodiments of the present invention are merely meant to be illustrative and not limiting. For example, on-line financial transaction services and products other than PayPal are also suitable for the present invention. Various methods have been described; however, not all steps may be required for certain applications and steps may also be modified to meet specific needs. It will thus be obvious to those skilled in the art that various changes and modifications may be made without departing from this invention in its broader aspects. Therefore, the appended claims encompass all such changes and modifications as they fall within the true spirit and scope of this invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5C"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5D"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5E"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5F"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 6C"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 6D"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 6E"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 7A"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 7B"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 8A"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 8B"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 8C"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 8D"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 8E"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 8F","FIG. 8G","FIG. 8H"]},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 9A"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 9B"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 9C"}]},"DETDESC":[{},{}]}
