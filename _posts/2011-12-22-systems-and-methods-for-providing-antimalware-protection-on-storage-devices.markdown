---
title: Systems and methods for providing anti-malware protection on storage devices
abstract: Systems and methods for providing anti-malware protection on storage devices are described. In one embodiment, a storage device includes a controller, firmware, and memory. The firmware communicates with an authorized entity (e.g., external entity, operating system) to establish a secure communication channel. The system includes secure storage to securely store data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09183390&OS=09183390&RS=09183390
owner: Intel Corporation
number: 09183390
owner_city: Santa Clara
owner_country: US
publication_date: 20111222
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["This patent application is a U.S. National Phase Application under 35 U.S.C. \u00a7371 of International Application No. PCT\/US2011\/067015, filed Dec. 22, 2011, entitled SYSTEMS AND METHODS FOR PROVIDING ANTI-MALWARE PROTECTION ON STORAGE DEVICES.","The present disclosure relates to systems and methods for providing anti-malware protection on storage devices.","Security is an important problem for any compute platform having data that resides in storage. A rootkit is software that enables continued privileged access to a computer while actively hiding its presence from administrators by subverting standard operating system (OS) functionality or other applications. Rootkit drivers modify the data that is made available to all applications and the OS. Malware threats are growing at an exponential rate. Malware (e.g., low level malware like rootkits) is getting stealthier and is attacking the host (personal computer) system stack far below the protection provided by anti-virus\/anti-malware (AV\/AM) approaches. Once low level malware has infected the system, a state of the system as seen by AV\/AM approach is in control of the malware.","The AV\/AM approaches provided by independent software vendor (ISV) applications have no mechanism to detect if the data that the ISV application is operating on is the actual data on storage. The data could be modified by a driver stack between storage and the application. This is called a lack of trusted reads. Also, the ISV applications have no mechanism to detect if the data it is writing to the storage has been committed to storage. The data could be modified, redirected or \u201cswallowed\u201d by the driver stack between storage and the application. This is called a lack of trusted writes. There is typically no secure storage available to AV\/AM approaches.","Systems and methods for providing anti-malware protection on storage devices are described. Embodiments of the invention provide security features with enhanced firmware of a storage device in response to the security problem posed by malware and rootkits.","In the following description, numerous specific details such as logic implementations, sizes and names of signals and buses, types and interrelationships of system components, and logic partitioning\/integration choices are set forth in order to provide a more thorough understanding. It will be appreciated, however, by one skilled in the art that embodiments of the invention may be practiced without such specific details. In other instances, control structures and gate level circuits have not been shown in detail to avoid obscuring embodiments of the invention. Those of ordinary skill in the art, with the included descriptions, will be able to implement appropriate logic circuits without undue experimentation.","In the following description, certain terminology is used to describe features of embodiments of the invention. For example, the term \u201clogic\u201d is representative of hardware and\/or software configured to perform one or more functions. For instance, examples of \u201chardware\u201d include, but are not limited or restricted to, an integrated circuit, a finite state machine or even combinatorial logic. The integrated circuit may take the form of a processor such as a microprocessor, application specific integrated circuit, a digital signal processor, a micro-controller, or the like. The interconnect between chips each could be point-to-point or each could be in a multi-drop arrangement, or some could be point-to-point while others are a multi-drop arrangement.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":["180","120","130","160","170","122","124","160","162","130","132","134","136","130","140","142","150","150","152","154","152"]},"Embodiments of the invention use standards like Opal, Trusted Send\/Trusted Receive (ATA), Security Protocol Out, Security Protocol In (SCSI) the Trusted Computing Group (TCG) Storage communication protocol, and the IEEE 1667 communication protocol. These standards use a similar approach for allowing a host (PC)  having a host application to communicate with \u201cenhanced features\u201d within a storage device  (e.g., disk drive, solid state drive, optical storage, magnetic storage, etc.). Specifically, the communication is carried over dedicated \u201ccontainer\u201d commands, defined by the various storage interface standards as follows. For ATA (INCITS T13), the commands are \u201cTRUSTED SEND\u201d and \u201cTRUSTED RECEIVE.\u201d For SCSI (INCITS T10), the commands are \u201cSECURITY PROTOCOL OUT\u201d and \u201cSECURITY PROTOCOL IN.\u201d","While the command names are different, the command structure and content are basically the same for both ATA and SCSI. Each of these commands contains a \u201cProtocol ID\u201d field in the command header. Protocol IDs are assigned by T10\/T13 to external organizations that want to expose a feature (or set of features) within storage devices, and need to have a way to communicate with that feature. An organization that has been assigned a Protocol ID is responsible for defining the payload of the container commands and how the payloads affect the enhanced features within the device. For example, TCG owns Protocol IDs 0x01-0x06 and IEEE 1667 owns Protocol ID 0xEE. Opal provides the ability to have secure storage  inside the drive, which requires authenticating an Opal user before the store can be accessed. As described above, the security protocols above are container commands for sending and receiving information from host to device and vice versa.","Storage firmware owns the data inside the storage device. Storage devices have a micro-controller\/processing unit, which is responsible for managing input\/output (I\/O) with the device. The host initiates communication with the storage device using the communication protocols described above (e.g., Trusted Send\/Receive, Security Protocol in\/out) and request sectors (e.g., logical block addressing (LBA) in Solid State Drives). The firmware validated the payloads to ensure this is from a trusted source using the keys, which are stored in the secure storage . In case of a host  wanting trusted reads of sector data from the storage device, the host sends the payloads with appropriate encryption and\/or signing with the sector addresses and number of sectors to read. Then, the firmware authenticates the payload and sends the requested sector data. Additionally, the firmware encrypts and adds authentication codes to the payload. In case of writes, the sequence is similar except that the host sends an additional communication command to receive the status of the previously executed Trusted write operation.","Malware can attack a MBR (Master Boot Record) and the malware loads itself into memory before the operating system loads. Opal provides a mechanism called \u201cMBR shadow\u201d which prevents MBR from being attacked by requiring an Opal user to authenticate to the storage device before the \u201creal\u201d operating system is loaded. The host SDK  is responsible for providing a higher level interface to the authorized ISV such as TrustedRead, TrustedWrite, SecureStoreRead, etc. In addition, the SDK, takes the data from the higher level interface and converts it to the communication protocol expected format.","The AV\/AM software of the ISV is responsible for securely communicating with the storage device. This software deciphers the file to sector association and sends appropriate requests to the storage device using the communication protocols. The backend servers  may be used for provisioning keys into the device for authentication and encryption purposes, setting and receiving data from the secure storage, and setting and receiving trusted block level data when the ISV performs a remote scan.","In one embodiment, a system (e.g., ) includes an operating system (e.g., ) for performing operations on the system and a storage device (e.g., ) to communicate with the operating system. The storage device includes firmware (e.g., , ) to establish at least one trusted communication channel (e.g., ) with an endpoint (e.g., , , ) having software and memory (e.g., , ) having secure storage. The firmware can redirect sector requests from the endpoint to secretly and securely access one or more sectors of memory, which malware may be attempting to hide. The endpoint may include an external entity that provides anti-virus\/anti-malware protection. The endpoint may be part of the operating system or include a host anti-virus\/anti-malware software application. The storage device receives messages from the endpoint with the messages including read\/write messages and special communications including negative LBA commands. At least one trusted communication channel is established by setting up a shared key between the endpoint and the firmware. The secure storage may be accessed only by an authenticated user.","The firmware establishes at least one trusted communication channel with the endpoint by selectively establishing at least one of a first communication channel, a second communication channel, and a third communication channel based on any of the methods for establishing communications disclosed herein. For example, any of the communication channels may be established using a Trusted Send\/Receive protocol or other trusted protocols disclosed herein. Alternatively, any of the communication channels may be established at the firmware level to redirect reads\/writes to secretly access regions of the storage device that malware may be attempting to hide. The one or more communication channels can be established based on preferences (e.g., ISV preferences, user preferences), defaults, or current conditions such as current malware knowledge (e.g., malware knowledge provided by storage device, malware knowledge of the ISV) for the system, OS, and storage device. The ISV or user can establish a first communication channel for a first condition, a second communication channel for a second condition, a third communication channel for a third condition, a combination of communication channels for a fourth condition, etc. The ISV or user can then switch to a different communication channel or combination of channels based on new conditions or malware knowledge. In an embodiment, a storage device  includes a controller (e.g., microcontroller, processing unit)  to manage input\/output operations for the storage device. Firmware (e.g., , ) is communicatively coupled to the controller, which may be integrated with the firmware or external from the firmware. The firmware establishes a secure communication channel with an authorized entity (e.g., external entity with higher level of security, host OS with lower level of security). Memory (e.g., , ) is communicatively coupled to the controller. The memory includes secure storage. The authorized external entity communicates with the firmware to configure monitoring for regions of the memory. The firmware sends activity data that is associated with the monitored regions of memory to the authorized external entity. The firmware is notified by the authorized external entity of available unallocated regions of memory. The firmware in cooperation with the authorized external entity provides protection for the available unallocated regions of memory. The authorized external entity communicates with the firmware to configure protection for regions of the memory including a region  that stores a master boot record. The firmware provides protection for the secure storage  to enhance security with the secure storage storing a signature database, file hashes, and passwords. The firmware may optionally establish an additional secure communication channel with the authorized external entity via an out-of-band channel using PCI I\/O functions or other out-of-band I\/O in combination with extended firmware features as an alternate trusted communications channel to the storage subsystem.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":["200","200","200"]},"Recent trends in malware development have included redirection of file system level file requests to be redirected to LBAs, which contain a clean copy of an infected file. The next development is to redirect specific LBA requests based on a specific malware's understanding of where it is storing its own malware payload. In order to be persistent across power cycles, the malware must be stored on permanent storage such as a hard disk drive (HDD) or a solid state drive (SSD). If a specific kernel level malware were to see a read request for specific LBAs that it knows contains its malware code, it could change the LBAs being requested to be somewhere else, which may contain clean data, and the OS would not know that any change had occurred.","In order to combat attempts by malware to hide itself and to otherwise change the operating system behavior, the firmware may employ a method of LBA redirection that is controlled by secure (encrypted) messaging. This method of redirection helps to hide specific LBA requests by communicating to firmware of a storage device in a secure manner (e.g., via signing and encryption).","At block , firmware of the storage device receives from an endpoint having software such as the host OS software (or more securely an external entity such as an ISV entity or a backend server that is monitored by IT) initiation of a secure tunnel setup by writing to a specific set of LBAs. The firmware responds with data needed for the endpoint (e.g., OS software or external entity) to complete tunnel setup via the OS software or external entity doing a read of specific response regions at block . The storage device receives a message through the generated tunnel indicating starting regions (e.g., LBAs) that the OS software or external entity wants to use for secure data transfer to and from the storage device at block . The firmware processes the message and tracks a list of predetermined regions (e.g., LBAs) that the firmware should redirect from at block . The predetermined regions (e.g., LBAs) are configured as often as the caller wants to be redirected to the areas that the caller wants to securely read from. The firmware responds on response regions indicating success or failure to the OS software or external entity at block . The storage device receives from OS software or external entity a request of a list of regions (e.g., LBAs) that the OS software or external entity wants to access on the storage device at block . At block , the firmware of the storage device creates a mapping of regions (e.g., LBAs) that it was previously tracking to the regions (e.g., LBAs) that were requested in the request message at block . The firmware responds to the OS software or external entity indicating a successful mapping performed by the firmware at block . The firmware allows the OS software or external entity to perform a read of the specific regions (e.g., LBAs), which the firmware is mapping from at block . The firmware detects read\/write of regions (e.g., LBAs) that the firmware needs to map from and redirects to the regions (e.g., LBAs) that the firmware needs to map to at block . The data is read back, if block  is a read operation, from the firmware to the OS software or external entity at block . This data includes data for regions (e.g., LBAs) that the firmware is mapping to at block .","Once the firmware makes these redirections, each LBA slot can be considered a channel to access potentially infected data or data that is known to be clean. The firmware of the storage device by performing the redirection is operating beyond the bounds of the OS and is free from the direct influence of any OS based malware. The caller would then make read requests to these predetermined regions (e.g., LBAs) and in effect be doing a read of the potentially infected region (e.g., LBAs) data without the OS, malware, or anyone else (aside from the caller and the firmware) knowing that this specific data is being pulled from the firmware.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIGS. 3A and 3B","b":["302","304"]},"To thwart subversion by malware, hiding actual requests may be implemented along with any actual secure read or write calls between software running on an OS and the firmware. Creating a secure tunnel, which includes setting up a shared key for encryption between a piece of software (or more securely, an end point outside of the Operating System such as an external server) and firmware, can be used to encrypt the actual calls being made themselves.","Referring to , the block diagram illustrates using methods of messaging (e.g., normal read\/write , normal read\/write , special communications ) via read and write calls to specific LBAs (e.g., LBA_, LBA_, LBA_). The special communications  may include special SATA commands and negative LBA commands (e.g., commands for storage device). The calls include control data and encrypting this data as well as the LBAs being read from or written to themselves will allow actual calls between software and firmware to be essentially impossible to know anything about the specifics of the actual reads\/writes being made. The only specifics known regarding the calls is that there are two specific end points communicating (software end point  and firmware endpoint ). This allows all communication with the firmware to have to be seen as pure communications between two specific end points rather than communication between two end points via a specific channel. An attacker cannot halt all reads and writes from a specific piece of software because that would be easily detectable. This concept can be utilized in many other areas as well, such as end to end communications between two applications on a network. The actual ports being used themselves can be hidden via encryption of the port value itself.","Referring to , the messages that the storage device  receives from the OS  includes normal read\/writes_- and special messaging_-. When the LBA used for communication is encrypted with random padding, communications can appear as normal reads and writes to random places on the storage device. This makes it difficult to distinguish which of the reads\/writes are special communications and which ones are normal reads\/writes. The storage device uses decryption to determine if a specific read\/write LBA is meant to be redirected to a LBA used for special messaging as indicated with redirect firmware (FW) messages , , and . , A, and B illustrate a scheme in which a secure tunnel is established by overloading with normal reads\/writes.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 4","b":["400","400","400"]},"At block , an enhanced storage device establishes secure communications via an OOB channel with an authenticated external entity. At block , the storage device receives from the external entity (e.g., ISV entity, server) requests of configuration of firmware parameters of the enhanced storage device. At block , the storage device grants access to the external entity.","An additional potential feature to enable security against malware threats is to have a separate OOB communication with a storage device. Currently, communications between a storage system such as an SSD and the host are confined to a single channel like SATA and securing communications over the single channel is difficult. Embodiments of this invention enhance the security of storage device communications by exposing PCI I\/O functions or other out-of-band I\/O in combination with extended firmware features as an alternate trusted communications channel to the storage subsystem. Firmware enhancements for secure communications can be employed over one or multiple channels to provide a deeper level of security for combating malware and for enforcing access controls.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 5","b":["500","500","500"]},"Currently, anti-malware focuses on monitoring and scanning known files that reside within the filesystem, but a problem exists in that malware often takes advantage of the fact that anti-malware scanning is often infrequent. To address this problem, features provided in firmware can provide the method  for monitoring activity for groups of statically or dynamically defined regions (e.g., LBAs) within storage control firmware and for providing reports on any activity associated with these defined regions (e.g., LBAs). In addition to containing features for controlling storage media, the storage control firmware would be extended to contain additional features provided by the method .","At block , an enhanced storage device establishes secure communications with an authenticated external entity. At block , the storage device allows the external entity to configure regions (e.g., , , . . . n) or groups of LBAs of the storage device for activity monitoring. At block , the storage device allows the authorized external entity to request reports of activity for the previously configured regions or groups of LBAs. At block , the storage device sends the requested activity data to the external entity.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 6","b":["600","600","600"]},"At the present time, protection schemes for non-volatile storage focus primarily on scanning and protecting known files and used regions within a given file system. Unfortunately, this approach is problematic in that malware often takes advantage of the fact that large portions of storage are flagged as unallocated or free, and are therefore not scanned with regularity. Embodiments of the invention provide firmware features in cooperation with the operating system to protect unallocated or unused regions of storage from unauthorized use. Using features that extend storage control firmware such that a secure communications channel is available to an authenticated external entity, and a means of dynamically designating protected regions (e.g., ranges of LBAs), the OS or other authenticated entity can operate cooperatively to lock down unused or unallocated storage space. When a need for storage arises with normal legitimate use of the system, the OS or other authenticated external entity and firmware can cooperate through a secure communications channel to grant permissions for use of the free or unallocated space that has been locked down to prevent an attack from malware. The authenticated external entity may initially cooperate with the firmware to establish secure communications and grant permissions while at a later time the host OS may cooperate with the firmware to grant these permissions.","At block , an enhanced storage device establishes secure communications with an authenticated external entity. At block , the firmware is notified by the external entity device of free\/unallocated regions (e.g., LBA ranges) in memory of the storage device. At block , the firmware allows activation of free space protection associated with the free\/unallocated regions (e.g., LBA ranges). At block , the firmware receives from the external entity requested access to the free space associated with the free\/unallocated regions (e.g., LBA ranges). At block , the storage device grants access to the external entity of the free space. At block , the firmware receives from the external entity updates to the free space associated with the free\/unallocated regions (e.g., LBA ranges).",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 7","b":["700","700","700"]},"Currently there is a security problem in that even if software based full disk encryption is used, an attacker could potentially modify the encryption software used for encryption to continue to look like legitimate software. However, in addition to unencrypting the disk drive so a normal user can use the system, the infected encryption software would also have a way of storing the password (or passphrase) that the user types so that an attacker can come back later and have the encryption passphrase waiting for them. Alternatively, the attacker can have the encryption passphrase e-mailed to him. This would result in all data on the system still being compromised with basically two attacks on a system instead of just one (e.g., just accessing the unencrypted data if it is not encrypted and copying it to a removable media). An administrator or user can lock their own executables down so that unauthorized attempts to write to the storage device will fail. The firmware-based lockdown has the ability to lock down certain areas of the storage device so that the firmware itself does not allow access to change those specific areas (e.g., MBR, VBR, and the partition that the disk encryption software resides in) and also allow access via an API to the OS and\/or the disk encryption software. The software will be locked from being changed unless the write attempts are authorized via any number of authentication mechanisms (e.g., IT unlock password, signing from the distributor of the encryption software, signature from the distributor of the OS, etc.).","At block , an enhanced storage device establishes secure communications with an authorized external entity. At block , the storage device allows the external entity to configure protection for specific regions (e.g., , , . . . n) or groups of LBAs of the storage device for locking down these regions. At block , the storage device receives from the authorized external entity a request to activate protection for the previously configured regions or groups of LBAs. At block , the storage device grants the activation of the protection for these regions.","In one embodiment, the firmware lockdown of key assets enhances the security of a host system by preventing changes to the OS bootstrap code. The first 8 LBAs may include the MBR and also disk encryption software, which is the first to boot at start up of the system. These LBAs can be protected from normal writes via firmware protection. In this case, only authenticated writes to the LBAs will allow LBAs to be changed in order to perform updates.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 8","b":["800","800","800"]},"Currently, I\/O operations originating at an OS level of the host do not have an established root of trust, and in turn, are not always trustworthy. The method  establishes a root of trust between the OS and storage control firmware, in addition to trusted exchanges between the OS and storage control firmware to ensure that all I\/O operations are trusted I\/O operations.","At block , an authenticated OS entity (e.g., host OS) establishes secure communications with firmware of the host's storage device. At block , the authenticated OS entity sends a read\/write I\/O request to the storage device. At block , the authenticated OS entity in response to the read\/write I\/O request receives access to the firmware of the storage device. At block , the authenticated OS entity sends a read\/write request to the storage device. At block , the host OS receives a read or write return from the firmware in response to the read\/write request.","Current approaches operate at the host level and do not provide the anti-malware agent any privileges over the malware. The enhanced storage device and the described features provide a means to provide higher privileges to the anti-malware agent.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIGS. 9-12"},"Referring now to , shown is a block diagram of a system  in accordance with one embodiment of the present invention. The system  may include one or more processors , , which are coupled to a controller hub . In one embodiment the controller hub  includes a graphics memory controller hub (GMCH)  and an Input\/Output Hub (IOH)  (which may be on separate chips); the GMCH  includes memory and graphics controllers to which are coupled memory  and a coprocessor ; the IOH  is couples input\/output (I\/O) devices  to the GMCH . Alternatively, one or both of the memory and graphics controllers are integrated within the processor (as described herein), the memory  and the coprocessor  are coupled directly to the processor , and the controller hub  in a single chip with the IOH . The GMCH  may also be coupled to a storage device (e.g., storage device , non-volatile memory) as discussed herein.","The optional nature of additional processors  is denoted in  with broken lines. Each processor ,  may include one or more of the processing cores described herein.","The memory  may be, for example, dynamic random access memory (DRAM), phase change memory (PCM), or a combination of the two. For at least one embodiment, the controller hub  communicates with the processor(s) ,  via a multi-drop bus, such as a frontside bus (FSB), point-to-point interface such as QuickPath Interconnect (QPI), or similar connection .","In one embodiment, the coprocessor  is a special-purpose processor, such as, for example, a high-throughput MIC processor, a network or communication processor, compression engine, graphics processor, GPGPU, embedded processor, or the like. In one embodiment, controller hub  may include an integrated graphics accelerator.","There can be a variety of differences between the physical resources ,  in terms of a spectrum of metrics of merit including architectural, microarchitectural, thermal, power consumption characteristics, and the like.","In one embodiment, the processor  executes instructions that control data processing operations of a general type. Embedded within the instructions may be coprocessor instructions. The processor  recognizes these coprocessor instructions as being of a type that should be executed by the attached coprocessor . Accordingly, the processor  issues these coprocessor instructions (or control signals representing coprocessor instructions) on a coprocessor bus or other interconnect, to coprocessor . Coprocessor(s)  accept and execute the received coprocessor instructions.","Referring now to , shown is a block diagram of a first more specific exemplary system  in accordance with an embodiment of the present invention. As shown in , multiprocessor system  is a point-to-point interconnect system, and includes a first processor  and a second processor  coupled via a point-to-point interconnect . In one embodiment of the invention, processors  and  are respectively processors  and , while coprocessor  is coprocessor . In another embodiment, processors  and  are respectively processor  and coprocessor .","Processors  and  are shown including integrated memory controller (IMC) units  and , respectively. Processor  also includes as part of its bus controller units point-to-point (P-P) interfaces  and ; similarly, second processor  includes P-P interfaces  and . Processors ,  may exchange information via a point-to-point (P-P) interface  using P-P interface circuits , . As shown in , IMCs  and  couple the processors to respective memories, namely a memory  and a memory , which may be portions of main memory locally attached to the respective processors.","Processors ,  may each exchange information with a chipset  via individual P-P interfaces ,  using point to point interface circuits , , , . Chipset  may optionally exchange information with the coprocessor  via a high-performance interface . In one embodiment, the coprocessor  is a special-purpose processor, such as, for example, a high-throughput MIC processor, a network or communication processor, compression engine, graphics processor, GPGPU, embedded processor, or the like.","A shared cache (not shown) may be included in either processor or outside of both processors, yet connected with the processors via P-P interconnect, such that either or both processors' local cache information may be stored in the shared cache if a processor is placed into a low power mode.","Chipset  may be coupled to a first bus  via an interface . In one embodiment, first bus  may be a Peripheral Component Interconnect (PCI) bus, or a bus such as a PCI Express bus or another third generation I\/O interconnect bus, although the scope of the present invention is not so limited.","As shown in , various I\/O devices  may be coupled to first bus , along with a bus bridge  which couples first bus  to a second bus . In one embodiment, one or more additional processor(s) , such as coprocessors, high-throughput MIC processors, GPGPU's, accelerators (such as, e.g., graphics accelerators or digital signal processing (DSP) units), field programmable gate arrays, or any other processor, are coupled to first bus . In one embodiment, second bus  may be a low pin count (LPC) bus. Various devices may be coupled to a second bus  including, for example, a keyboard and\/or mouse , communication devices  and data storage  (e.g., storage device as described herein, storage device  of ) such as a disk drive or other mass storage device which may include instructions\/code and data , in one embodiment. Further, an audio I\/O  may be coupled to the second bus . Note that other architectures are possible. For example, instead of the point-to-point architecture of , a system may implement a multi-drop bus or other such architecture.","Referring now to , shown is a block diagram of a second more specific exemplary system  in accordance with an embodiment of the present invention. Like elements in  bear like reference numerals, and certain aspects of  have been omitted from  in order to avoid obscuring other aspects of .  illustrates that the processors ,  may include integrated memory and I\/O control logic (\u201cCL\u201d)  and , respectively. Thus, the CL ,  include integrated memory controller units and include I\/O control logic.  illustrates that not only are the memories ,  coupled to the CL , , but also that I\/O devices  are also coupled to the control logic , . Legacy I\/O devices  are coupled to the chipset . The memories ,  may include non-volatile memory such as the storage device discussed herein (e.g., storage device  of ).","Referring now to , shown is a block diagram of a SoC  in accordance with an embodiment of the present invention. Also, dashed lined boxes are optional features on more advanced SoCs. In , an interconnect unit(s)  is coupled to: an application processor  which includes a set of one or more cores A-N and shared cache unit(s) ; a system agent unit ; a bus controller unit(s) ; an integrated memory controller unit(s) ; a set or one or more coprocessors  which may include integrated graphics logic, an image processor, an audio processor, and a video processor; an static random access memory (SRAM) unit ; a direct memory access (DMA) unit ; and a display unit  for coupling to one or more external displays. In one embodiment, the coprocessor(s)  include a special-purpose processor, such as, for example, a network or communication processor, compression engine, GPGPU, a high-throughput MIC processor, embedded processor, or the like. The SoC  may include or be coupled to a storage device as described herein.","Embodiments of the mechanisms disclosed herein may be implemented in hardware, software, firmware, or a combination of such implementation approaches. Embodiments of the invention may be implemented as computer programs or program code executing on programmable systems comprising at least one processor, a storage system (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device.","Program code, such as code  illustrated in , may be applied to input instructions to perform the functions described herein and generate output information. The output information may be applied to one or more output devices, in known fashion. For purposes of this application, a processing system includes any system that has a processor, such as, for example; a digital signal processor (DSP), a microcontroller, an application specific integrated circuit (ASIC), or a microprocessor.","The program code may be implemented in a high level procedural or object oriented programming language to communicate with a processing system. The program code may also be implemented in assembly or machine language, if desired. In fact, the mechanisms described herein are not limited in scope to any particular programming language. In any case, the language may be a compiled or interpreted language.","One or more aspects of at least one embodiment may be implemented by representative instructions stored on a machine-readable medium which represents various logic within the processor, which when read by a machine causes the machine to fabricate logic to perform the techniques described herein. Such representations, known as \u201cIP cores\u201d may be stored on a tangible, machine readable medium and supplied to various customers or manufacturing facilities to load into the fabrication machines that actually make the logic or processor.","Such machine-readable storage media may include, without limitation, non-transitory, tangible arrangements of articles manufactured or formed by a machine or device, including storage media such as hard disks, any other type of disk including floppy disks, optical disks, compact disk read-only memories (CD-ROMs), compact disk rewritable's (CD-RWs), and magneto-optical disks, semiconductor devices such as read-only memories (ROMs), random access memories (RAMs) such as dynamic random access memories (DRAMs), static random access memories (SRAMs), erasable programmable read-only memories (EPROMs), flash memories, electrically erasable programmable read-only memories (EEPROMs), phase change memory (PCM), magnetic or optical cards, or any other type of media suitable for storing electronic instructions.","Accordingly, embodiments of the invention also include non-transitory, tangible machine-readable media containing instructions or containing design data, such as Hardware Description Language (HDL), which defines structures, circuits, apparatuses, processors and\/or system features described herein. Such embodiments may also be referred to as program products.","It should be appreciated that reference throughout this specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure or characteristic described in connection with the embodiment is included in at least one embodiment. Therefore, it is emphasized and should be appreciated that two or more references to \u201can embodiment\u201d or \u201cone embodiment\u201d or \u201can alternative embodiment\u201d in various portions of this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures or characteristics may be combined as suitable in one or more embodiments.","In the above detailed description of various embodiments, reference is made to the accompanying drawings, which form a part hereof, and in which are shown by way of illustration, and not of limitation, specific embodiments in which the invention may be practiced. In the drawings, like numerals describe substantially similar components throughout the several views. The embodiments illustrated are described in sufficient detail to enable those skilled in to the art to practice the teachings disclosed herein. Other embodiments may be utilized and derived there from, such that structural and logical substitutions and changes may be made without departing from the scope of this disclosure. The following detailed description, therefore, is not to be taken in a limiting sense, and the scope of various embodiments is defined only by the appended claims, along with the full range of equivalents to which such claims are entitled."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The various embodiments of the present invention are illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which:",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIGS. 3A and 3B"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
