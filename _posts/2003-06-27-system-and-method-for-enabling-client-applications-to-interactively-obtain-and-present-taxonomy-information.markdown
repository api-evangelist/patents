---
title: System and method for enabling client applications to interactively obtain and present taxonomy information
abstract: A system and method for enabling UDDI client applications to interactively obtain taxonomy information from a UDDI server and thereby present that information to a user, such as to enable navigation through the taxonomy. An application programming interface is provided by which a client application sends a unique taxonomy identifier and a relationship qualifier (e.g., root, parent and/or child) to a server. The client may also identify a reference node within the taxonomy. The server receives the (e.g., XML) request message, and extracts the data to query a database based on the relationship qualifier (or qualifiers) and the taxonomy/reference node. Based on the query results, the server returns a response that provides relationship information to the client, such as information on root, parent and/or child nodes that satisfy the request. The client interprets the response to present the taxonomy, such as for user navigation through the taxonomy.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07447677&OS=07447677&RS=07447677
owner: Microsoft Corporation
number: 07447677
owner_city: Redmond
owner_country: US
publication_date: 20030627
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The invention relates generally to computer systems and networks, and more particularly to distributed services.","There are many types of computing services, resources and data that computer users and applications need to manage and otherwise access, such as services and data maintained on corporate networks and other remotely accessible sites including intranets and the internet. As there are many different computing platforms, various platform-independent mechanisms and protocols that facilitate the exchange of network information are becoming commonplace, including HTTP (HyperText Transfer Protocol), XML (extensible Markup Language), XML Schema, and SOAP (Simple Object Access Protocol). The concept of web services, in which businesses, organizations, and other providers offer services to users and applications, is based on these standards. Web services are services that connect applications across an intranet, extranet, or across the Internet, so that these applications can share resources and information. Web services can be offered by any individual or organization that has the tools to create them and make them available to other individuals or organizations online.","To be of value, web services need to enable users and applications to locate them, and exchange the information needed to execute them. To this end, UDDI (Universal Description Discovery & Integration) provides a set of defined services (e.g., in a universal business registry) that help users and applications discover such businesses, organizations, and other web services providers, along with a description of their available web services and the technical interfaces needed to access those services. UDDI thus facilitates the connection between the providers and the consumers of Web services. Although such services may be provided over the internet, services also may be provided in an enterprise environment or other intranet, where the services and their usage may be more controlled. Thus, not just UDDI, but other service registries (such as one based on Microsoft Corporation's Active Directory\u00ae) may provide a way of locating a distributed service.","Regardless of the service registry, taxonomies such as those within UDDI may be used to categorize sets of related values in the service registry, in which these values are typically used to categorize entities such as web services or web service providers. These values make up the \u201cnodes\u201d within a taxonomy. The nodes typically offer a hierarchical breakdown of a domain (such as the series of hierarchically arranged nodes in a geographic taxonomy path \u201cWorld\/Europe\/UK\/Scotland\u201d). Taxonomies may also cover domains where there is no established hierarchy, such as by placing all nodes as peers at the top, or root level.","However, while UDDI provides a valuable technology for locating web services that works in part by providing the ability to categorize UDDI entries, the UDDI specifications provide no standard mechanism for programmatically discovering nodes within a taxonomy, and specifically no support for discovering related nodes. Further, there is no way to discover what is at the root of a given taxonomy. Although it is possible for a client to cache the taxonomy data (via some receiving mechanism outside of UDDI), such data tends to be large, and may be customized and\/or change often, making client caching impractical in many, if not most, situations.","As a result, this lack of support significantly hinders navigation around the taxonomy and the presentation of taxonomy-related data. What is needed is a better way for clients to interact with taxonomies, such as UDDI taxonomies, to obtain such information about the taxonomy and the contained nodes and node relationships.","Briefly, the present invention provides a system and method for enabling UDDI client applications to interactively obtain taxonomy information from a UDDI server and thereby present that information to a user, such as to enable the user to navigate the taxonomy. A mechanism such as an application programming interface (API) is provided by which a client application sends a unique taxonomy identifier and a relationship qualifier to a server. The client may also provide a node identifier within the taxonomy to indicate a reference node for which a related node (or set of related nodes) is being sought. The API may use XML as the message format for the request and the response.","The API provides the requested information to an implementing service in a server (e.g., in a UDDI-based service registry). A request handling mechanism in the server extracts the data provided by the client in order to query a database (which may be any data store) for the relationship information. The request handling mechanism then formats and returns a response based on the results of the database query. The client (e.g., an application program running thereon) then interprets the response and thereby has the capability to enumerate, identify and describe the taxonomy.","If the client provides a root node qualifier, the server returns a root node identifier at the top or \u201croot\u201d level of the specified taxonomy. A taxonomy may have multiple root nodes, in which event the response may include the data for each root node. If the client provides a parent node qualifier and specifies a particular node within the taxonomy, the server returns information about the parent node. If the client provides a child node qualifier and specifies a particular node within the taxonomy, the server returns information about the child node or nodes of the specified node. More than one qualifier can be provided per request, and other relationship qualifiers are possible. The relationship may be with a node in another taxonomy, e.g., to specify one node in a taxonomy and find an equivalent node in another taxonomy.","The response may provide additional details. For example, in a UDDI-based environment, the response will include the unique identifier of the taxonomy, a unique (within the scope of that taxonomy) keyValue that uniquely identifies the node within that taxonomy, a keyName comprising human-readable symbols such as a text string, and an indication (in an isValid attribute) of whether this node is appropriate for classifying entities, or is provided only to provide structure within the hierarchy.","To provide the relationship information, the server maintains a database in the form of one or more tables accessed with keys. One such table includes a taxonomy UUID field, a taxonomy node value field, a parent node value field, and an isValid field. The keyName data may be in another field, or may be kept as an offset pointer or the like into a structure containing the keyName strings. With this arrangement, given the appropriate keys to identify a taxonomy, and a node therein if a relationship beyond the root node is being sought, a straightforward query can determine root, parent and child relationships, and relationships with the node of another taxonomy. Multiple queries can be used to obtain other relationships. In general, if XML is used, any relationship tag that the client and request handling mechanism both understand and from which the server can detect a relationship may be used to request and obtain data.","With the response data, the client can present a hierarchical view that matches the taxonomy or taxonomies on the server. The client application may allow navigation through the taxonomies, along with displaying information about each node as the user selects a node during navigation.","Other advantages will become apparent from the following detailed description when taken in conjunction with the drawings, in which:","Exemplary Operating Environment",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to: personal computers, server computers, hand-held or laptop devices, tablet devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, and so forth, which perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in local and\/or remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of the computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","The computer  typically includes a variety of computer-readable media. Computer-readable media can be any available media that can be accessed by the computer  and includes both volatile and nonvolatile media, and removable and non-removable media. By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by the computer . Communication media typically embodies computer-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer-readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules  and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid-state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media, discussed above and illustrated in , provide storage of computer-readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules  and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers herein to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a tablet, or electronic digitizer, , a microphone , a keyboard  and pointing device , commonly referred to as mouse, trackball or touch pad. Other input devices not shown in  may include a joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . The monitor  may also be integrated with a touch-screen panel or the like. Note that the monitor and\/or touch screen panel can be physically coupled to a housing in which the computing device  is incorporated, such as in a tablet-type personal computer. In addition, computers such as the computing device  may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface  or the like.","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet. For example, in the present invention, the computer system  may comprise source machine from which data is being migrated, and the remote computer  may comprise the destination machine. Note however that source and destination machines need not be connected by a network or any other means, but instead, data may be migrated via any media capable of being written by the source platform and read by the destination platform or platforms.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface  or other appropriate mechanism in a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Interactively Obtaining and Presenting Taxonomy Information","The present invention is in part, generally directed towards distributed network services, in which a client running on essentially any platform may use a defined protocol such as SOAP (Simple Object Access Protocol) to access network services over UDDI. However, the present invention is not limited to UDDI, but applies to any technology that handles requests related to information that may be arranged as nodes in a taxonomy. Thus, while the present invention will primarily be described with reference to UDDI and UDDI services, it is understood that the present invention may apply to locating related information in general. Further, while the present invention will be primarily described with respect to SOAP, XML, UDDI, and\/or Windows\u00ae\/.NET, it is understood that the present invention is not limited to any particular implementation, protocols, components, APIs, and so forth, but also encompasses similar mechanisms for interacting over a network. Thus, although the examples herein are related to the UDDI standards, it is understood that the actual invention may be abstracted to provide generic capabilities for navigating hierarchical categorizations on alternate systems.","As generally represented in , taxonomies within UDDI provide sets of related values, which may be used to categorize entities such as web services or web service providers. These values make up the nodes within a taxonomy. The nodes typically offer a hierarchical breakdown of a domain, although taxonomies may also cover domains where there is no established hierarchy, e.g., by placing multiple nodes as peers at the top or \u201croot\u201d level.  illustrates one example taxonomy , part of which is directed to a publisher-related domain classification.","In , a root node has child nodes which in turn have child nodes until some leaf node is reached in each branch. One of the children of the root comprises a publisher node , which in this example taxonomy has child nodes and may have one or more parent nodes  between the root and the publisher node . Note that in an alternative taxonomy, the publisher node may be the root node. One or more other root nodes  are also possible within a taxonomy.","As represented in , as is normal within a hierarchically-arranged taxonomy, the child nodes are narrower classifications with respect to the parent node, and the example shows two more distinct (yet still relatively general) types of publishers, as child nodes  and  of the publisher node . In the example of , these child nodes  and  in turn are parents having children - and -, respectively, that each represents a more-specific subset classification of their respective parents.","In general, two fields are used to identify a node within a particular taxonomy within the UDDI specificationsm (tModelKey and keyValue) and three fields are used to describe the node (tModelKey, keyValue and keyName). Further, beyond the UDDI specifications, and isValid attribute is also used to describe an aspect of each node, as described below.","The tModelKey field contains a unique identifier in the form of a Globally Unique Identifier (GUID) to identify the intended taxonomy of values, while the keyValue field contains a node identifier which is unique within the scope of the taxonomy. The keyName field contains a non-unique, textual description of the node. The keyName value is typically a human-readable identifier for the node that is not used for programmatic identification, in part because it is non-unique. An example of these fields such as used to describe the node  in the taxonomy  of  is set forth below:",{"@attributes":{"id":"p-0037","num":"0036"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"tModelKey = \u201cuuid:297axa47-2de3-4454-a04a-cf38e889d0c4\u201d"]},{"entry":[{},"keyValue = \u201c128649\u201d"]},{"entry":[{},"keyName = \u201cJoe's Cookbooks\u201d"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"This (hypothetical) example uniquely identifies and describes Joe's Cookbooks node value (128649) within a UDDI-based publisher taxonomy uniquely identified as \u201c297axa47-2de3-4454-a04a-cf38e889d0c4\u201d. There may be another publisher named Joe's Cookbooks in this same taxonomy , but the keyValue (128649) uniquely identifies the publisher in question.","As mentioned above, the UDDI specifications provide no standard mechanism for programmatically discovering nodes within a taxonomy, and thus in the above example, would provide no support for discovering that Joe's Cookbooks is a child of the node Book Publisher with value 101407 (and with KeyName \u201cXYZ Co.\u201d within this taxonomy, or that at the root of this taxonomy, there is a \u201cSuppliers\u201d node 100016.","In accordance with an aspect of the present invention, there is provided a mechanism by which a client application may obtain details about the nodes within a taxonomy and the relationships among these nodes, (and possibly relationships with nodes of another taxonomy). Note that as used herein, a \u201cclient application\u201d may itself be a server application or another UDDI server variant, that is, the client is any consuming application, and is not necessarily an end-user GUI client application. In one implementation, this mechanism is provided as an application programming interface (API) referred to as the \u201cRelated Categories\u201d API. When implemented within Microsoft\u00ae UDDI Services, for example, the Related. Categories API uses XML as the message format for the request and the response. More particularly, (using the actual names) in one implementation, the Related Categories API provides a mechanism to interactively obtain details about the nodes within a taxonomy via a single, flexible XML \u201cget_relatedCategories\u201d request message, which returns an XML \u201ccategoryList\u201d response message.","As generally represented in , two example ways of using the Related Categories API are described, namely to retrieve root node information, and to retrieve other node relationship information, respectively. First, as represented in , given sufficient details by a client  to identify a particular taxonomy, the API  provides the requested information  to an implementing service in the server  (e.g., a UDDI-based service registry). A request handling mechanism  in the server  retrieves, formats and returns a response  including the requested information . The client  (e.g., an application program running thereon) then interprets the response and thus has the capability to enumerate, identify and describe the node or nodes that are at the top or \u201croot\u201d level of the taxonomy. Note that a taxonomy may have multiple root nodes and the response may include the data for more than one root node.","More particularly, in one implementation, to request the details for the root of a taxonomy, the identifying key for the taxonomy, along with an element specifying the relationship that is being requested, is specified:",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<get_relatedCategories>"]},{"entry":[{},"\u2003<category tModelKey=\u201c uuid:297axa47-2de3-4454-a04a-"]},{"entry":[{},"\u2003cf38e889d0c4\u201d>"]},{"entry":[{},"\u2003\u2003<relationshipQualifier>root<\/relationshipQualifier>"]},{"entry":[{},"\u2003<\/category>"]},{"entry":[{},"<\/get_relatedCategories>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The response message, named categoryList in this example implementation, provides the details for the root node of the specified categorization:",{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<categoryList truncated=\u201cfalse\u201d operator=\u201cMicrosoft\u201d>"]},{"entry":[{},"\u2003<categoryInfo tModelKey=\u201cuuid:297aaa47-2de3-4454-a04a-"]},{"entry":[{},"\u2003cf38e889d0c4\u201d>"]},{"entry":[{},"\u2003\u2003<rootRelationship>"]},{"entry":[{},"\u2003\u2003\u2003<categoryValue keyName=\u201csuppliers\u201d keyValue=\u201c100016\u201d"]},{"entry":[{},"\u2003\u2003\u2003isValid=\u201ctrue\u201d\/>"]},{"entry":[{},"\u2003\u2003<\/rootRelationship>"]},{"entry":[{},"\u2003<\/categoryInfo>"]},{"entry":[{},"<\/get_relatedCategories>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"To summarize using the data structures in this implementation, the general request-response operation is represented in  by the arrow labeled one (1), where the client provides the request  (get_relatedCategories) with details . The details include the tModelKey value, and also indicate to the server  that the root information is being requested. As generally represented in  by the arrows labeled two (2) and three (3), the request handling mechanism  accesses a database table . (comprising any suitable data structure) via the tModelKey value to look up the taxonomy root information for the specified taxonomy (e.g., taxonmomy or T1). If located, the request handling mechanism  appropriately formats the root node information (e.g., in the categoryList XML structure) , and returns the response  including the requested root information  to the client , as represented by the arrow labeled four (4).","Note that the response details  include the unique (within the scope of this taxonomy) keyValue, the keyName and an indication (the is Valid attribute) of whether this node is appropriate for classifying entities or is provided only to provide structure within the hierarchy. Other attributes, such as a flag that if set on a node would hide that node's data and\/or its existence from clients, are also feasible. Although not shown, if no data is found for the tModelKey value, an appropriate error message or the like may be returned.","As a second example, represented in , the client  may also provide sufficient details  to identify a node within a particular identified taxonomy, whereby the get_relatedCategories API , again in conjunction with the implementing service  and request handling process , is used to obtain the desired information. In this manner, the client  (e.g., the application program running thereon) thus has the capability to enumerate, identify and describe the nodes that are logically related to the specified node. Useful relationships include the parent or children of the specified node. Other relationships include the root node, (which if specified as the only relationship, would be retrieved in a manner similar to that described above with reference to ). As described below, in alternative implementations, virtually any relationship that can be defined in such a way that a query or set of queries can determine the results (e.g., siblings, grandparents, grandchildren and the like) may be specified.","The following table sets forth the get_relatedCategories API in the form of an XML request seeking information of related nodes, providing the identifying key for the taxonomy, along with elements specifying the relationships of interest:",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<get_relatedCategories>"]},{"entry":[{},"\u2003<category tModelKey=\u201cuuid:297aaa47-2de3-4454-a04a-"]},{"entry":[{},"\u2003cf38e889d0c4\u201d keyValue=\u201c128649\u201d>"]},{"entry":[{},"\u2003\u2003<relationshipQualifier>root<\/relationshipQualifier>"]},{"entry":[{},"\u2003\u2003<relationshipQualifier>parent<\/relationshipQualifier>"]},{"entry":[{},"\u2003\u2003<relationshipQualifier>child<\/relationshipQualifier>"]},{"entry":[{},"\u2003<\/category>"]},{"entry":[{},"<\/get_relatedCategories>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The response message includes the details for the root node of that categorization along with the parent node and any child nodes (in this example none):",{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<categoryList truncated=\u201cfalse\u201d operator=\u201cMicrosoft\u201d>"]},{"entry":[{},"\u2003<categoryInfo tModelKey=\u201cuuid:297aaa47-2de3-4454-a04a-"]},{"entry":[{},"\u2003cf38e889d0c4\u201d>"]},{"entry":[{},"\u2003\u2003<rootRelationship>"]},{"entry":[{},"\u2003\u2003\u2003<categoryValue keyName\u201cSuppliers\u201d keyValue=\u201c100016\u201d"]},{"entry":[{},"\u2003\u2003\u2003isValid=\u201ctrue\u201d\/>"]},{"entry":[{},"\u2003\u2003<\/rootRelationship>"]},{"entry":[{},"\u2003\u2003<parentRelationship>"]},{"entry":[{},"\u2003\u2003\u2003<categoryValue keyName=\u201cXYZ Co.\u201d keyValue=\u201c101407\u201d"]},{"entry":[{},"\u2003\u2003\u2003isValid=\u201ctrue\u201d\/>"]},{"entry":[{},"\u2003\u2003<\/parentRelationship>"]},{"entry":[{},"\u2003\u2003<childRelationship\/>"]},{"entry":[{},"\u2003<\/categoryInfo>"]},{"entry":[{},"<\/get_relatedCategories>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"As can be seen from this return message and referring to the hypothetical taxonomy of , the parent of the node with a value of 128649 (the node  in  that was specified in the request) is the node having a value of 101407 (named \u201cXYZ Co.\u201d and labeled  in ), with the root named \u201cSuppliers\u201d and having a value of 100016.","In general, a single request (and corresponding response) may be highly flexible in what information is being sought per request. Thus, it is feasible to have a request that spans different taxonomies, has relationship requests for more than one node within a taxonomy, and\/or can request different relationship data for the same node. Thus, the details for the related categories for more than one relationship may be specified within the same request as represented in the following example, which shows the XML message for requesting the return of details on the root node for a particular taxonomy identified by the tModelKey \u201cuuid:c0b9fe13-179f-413d-8a5b-5004 db8e5bb2\u201d; the child and parent categories relative to the particular node \u201c51121\u201d within that taxonomy (identified by the tModelKey \u201cuuid:c0b9fe13-179f-413d-8a5b-5004 db8e5bb2\u201d); the root and child categories relative to the particular node \u201c51121\u201d within that taxonomy; and the details for the particular node \u201c51121\u201d within that taxonomy:",{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"308pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<get_relatedCategories xmlns=\u201curn:uddi-microsoft-com:api_v2_extensions\u201d xmlns:uddi=\u201curn:uddi-"},{"entry":"org:api_v2\u201d xmlns:xsi=\u201chttp:\/\/www.w3.org\/2001\/XMLSchema-instance\u201d xsi:schemaLocation=\u201curn:uddi-"},{"entry":"microsoft-com:api_v2_extensions uddi_v2_extensions.xsd\u201d>"},{"entry":"\u2003<category tModelKey=\u201cuuid:c0b9fe13-179f-413d-8a5b-5004db8e5bb2\u201d>"},{"entry":"\u2003\u2003<relationshipQualifier>root<\/relationshipQualifier>"},{"entry":"\u2003<\/category>"},{"entry":"\u2003<category tModelKey=\u201cuuid:c0b9fe13-179f-413d-8a5b-5004db8e5bb2\u201d keyValue=51121\u201d>"},{"entry":"\u2003\u2003<relationshipQualifier>child<\/relationshipQualifier>"},{"entry":"\u2003\u2003<relationshipQualifier>parent<\/relationshipQualifier>"},{"entry":"\u2003<\/category>"},{"entry":"\u2003<category tModelKey=\u201cuuid:c0b9fe13-179f-413d-8a5b-5004db8e5bb2\u201d keyValue=\u201c51121\u201d>"},{"entry":"\u2003\u2003<relationshipQualifier>root<\/relationshipQualifier>"},{"entry":"\u2003\u2003<relationshipQualifier>child<\/relationshipQualifier>"},{"entry":"\u2003<\/category>"},{"entry":"\u2003<category tModelKey=\u201cuuid:c0b9fe13-179f-413d-8a5b-5004db8e5bb2\u201d keyValue=\u201c51121\u201d\/>"},{"entry":"<\/get_relatedCategories>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The resulting categoryList is an in order collection (sequenced according to the order of requests) of categoryInfo structures:",{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"329pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<categoryList xmlns=\u201curn:uddi-microsoft-com:api_v2_extensions\u201d xmlns:uddi=\u201curn:uddi-org:api_v2\u201d"},{"entry":"xmlns:xsi=\u201chttp:\/\/www.w3.org\/2001\/XMLSchema-instance\u201d xsi:schemaLocation=\u201curn:uddi-microsoft-"},{"entry":"com:api_v2_extensions"},{"entry":"uddi_v2_extensions.xsd\u201d truncated=\u201cfalse\u201d operator=\u201cMicrosoft\u201d>"},{"entry":"\u2003<categoryInfo tModelKey=\u201cuuid:c0b9fe13-179f-413d-8a5b-5004db8e5bb2\u201d>"},{"entry":"\u2003\u2003<rootRelationship>"},{"entry":"\u2003\u2003\u2003<categoryValue keyName=\u201cNAICS Categories\u201d keyValue=\u201c10001\u201d isValid=\u201cfalse\u201d\/>"},{"entry":"\u2003\u2003<\/rootRelationship>"},{"entry":"\u2003<\/categoryInfo>"},{"entry":"\u2003<categoryInfo tModelKey=\u201cuuid:c0b9fe13-179f-413d-8a5b-5004db8e5bb2\u201d keyName=\u201cNAICS: Software"},{"entry":"Publisher\u201d keyValue=\u201c51121\u201d isValid=\u201ctrue\u201d>"},{"entry":"\u2003\u2003<childRelationship>"},{"entry":"\u2003\u2003\u2003<categoryValue keyName=\u201cNAICS: Software CD ROM Publisher\u201d keyValue=\u201c15641\u201d isValid=\u201ctrue\u201d\/>"},{"entry":"\u2003\u2003\u2003<categoryValue keyName=\u201cNAICS: Software Web Publisher\u201d keyValue=\u201c12314\u201d isValid=\u201ctrue\u201d\/>"},{"entry":"\u2003\u2003\u2003<categoryValue keyName=\u201cNAICS: Software .NET Publisher\u201d keyValue=\u201c23423\u201d isValid=\u201ctrue\u201d\/>"},{"entry":"\u2003\u2003<\/childRelationship>"},{"entry":"\u2003\u2003<parentRelationship>"},{"entry":"\u2003\u2003\u2003<categoryValue keyName=\u201cNAICS: Publisher\u201d keyValue=\u201c3728\u201d isValid=\u201ctrue\u201d\/>"},{"entry":"\u2003\u2003<\/parentRelationship>"},{"entry":"\u2003<\/categoryInfo>"},{"entry":"\u2003<categoryInfo tModelkey=\u201cuuid:c0b9fe13-179f-413d-8a5b-5004db8e5bb2\u201d keyName=\u201cNAICS: Software"},{"entry":"Publisher\u201d keyValue=\u201c51121\u201d isValid=\u201ctrue\u201d>"},{"entry":"\u2003\u2003<rootRelationship>"},{"entry":"\u2003\u2003\u2003<categoryValue keyName=\u201cNAICS Categories\u201d keyValue=\u201c10001\u201d isValid=\u201cfalse\u201d\/>"},{"entry":"\u2003\u2003<\/rootRelationship>"},{"entry":"\u2003\u2003<childRelationship>"},{"entry":"\u2003\u2003\u2003<categoryValue keyName=\u201cNAICS: Software CD ROM Publisher\u201d keyValue=\u201c15641\u201d isValid=\u201ctrue\u201d\/>"},{"entry":"\u2003\u2003\u2003<categoryValue keyName=\u201cNAICS: Software Web Publisher\u201d keyValue=\u201c12314\u201d isValid=\u201ctrue\u201d\/>"},{"entry":"\u2003\u2003\u2003<categoryValue keyName=\u201cNAICS: Software .NET Publisher\u201d keyValue=\u201c23423\u201d isValid=\u201ctrue\u201d\/>"},{"entry":"\u2003\u2003<\/childRelationship>"},{"entry":"\u2003<\/categoryInfo>"},{"entry":"\u2003<categoryInfo tModelKey=\u201cuuid:c0b9fe13-179f-413d-8a5b-5004db8e5bb2\u201d keyName=\u201cNAICS: Software"},{"entry":"Publisher\u201d keyValue=\u201c51121\u201d isValid=\u201ctrue\u201d\/>"},{"entry":"<\/categoryList>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Note that in this implementation the response is not required to include the optional parentKeyValue attribute, as the API already provides a mechanism for obtaining the parentKeyValue of any given node. Further, the categoryValue defined as being of type categoryValueType response is not required to include the optional parentKeyValue or the tModelKey attribute, as the API already provides a mechanism for obtaining the parentKeyValue of any given node and the tModelKey can be extracted from the surrounding categoryInfo node. As described above, the isValid boolean attribute signals whether this node is valid for categorization, e.g., in this example the root node of NAICS is not valid for classification. The optional \u201ctruncated\u201d attribute is included on the categoryList element to indicate cases in which the server truncated the result set, such as in the case of a large result set. Also, if a taxonomy identifier is provided along with a keyValue having zero relationship qualifiers, the other details for the identified node (e.g., the keyName and is Valid attribute) are returned.","The following provides an example XSD (Extensible Schema Definition) language-formatted data structure setting forth the details of the schema:",{"@attributes":{"id":"p-0060","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"329pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<xs:schema targetNamespace=\u201curn:uddi-microsoft-com:api_v2_extensions\u201d xmlns:uddi=\u201curn:uddi-org:api_v2\u201d"},{"entry":"xmlns:xs=\u201chttp:\/\/www.w3.org\/2001\/XMLSchema\u201d xmlns=\u201curn:uddi-microsoft-com:api_v2_extensions\u201d"},{"entry":"elementFormDefault=\u201cqualified\u201d attributeFormDefault=\u201cunqualified\u201d>"},{"entry":"\u2003<xs:import namespace=\u201curn:uddi-org:api_v2\u201d schemaLocation=\u201chttp:\/\/www.uddi.org\/schema\/uddi_v2.xsd\u201d\/>"},{"entry":"\u2003<xs:complexType name=\u201ccategoryValueType\u201d>"},{"entry":"\u2003\u2003<xs:attribute name=\u201ctModelKey\u201d type=\u201cuddi:tModelKey\u201d use=\u201coptional\u201d\/>"},{"entry":"\u2003\u2003<xs:attribute name=\u201ckeyName\u201d type=\u201cxs:string\u201d use=\u201coptional\u201d\/>"},{"entry":"\u2003\u2003<xs:attribute name=\u201ckeyValue\u201d type=\u201cxs:string\u201d use=\u201coptional\u201d\/>"},{"entry":"\u2003\u2003<xs:attribute name=\u201cparentkeyValue\u201d type=\u201cxs:string\u201d use=\u201coptional\u201d\/>"},{"entry":"\u2003\u2003<xs:attribute name=\u201cisValid\u201d type=\u201cxs:boolean\u201d use=\u201coptional\u201d\/>"},{"entry":"\u2003<\/xs:complexType>"},{"entry":"\u2003<xs:simpleType name=\u201crelationshipQualifiersType\u201d final=\u201clist\u201d>"},{"entry":"\u2003\u2003<xs:restriction base=\u201cxs:string\u201d>"},{"entry":"\u2003\u2003\u2003<xs:enumeration value=\u201croot\u201d\/>"},{"entry":"\u2003\u2003\u2003<xs:enumeration value=\u201cparent\/>"},{"entry":"\u2003\u2003\u2003<xs:enumeration value=\u201cchild\u201d\/>"},{"entry":"\u2003\u2003<\/xs:restriction>"},{"entry":"\u2003<\/xs:simpleType>"},{"entry":"\u2003<xs:element name=\u201cget_relatedCategories\u201d>"},{"entry":"\u2003\u2003<xs:complexType>"},{"entry":"\u2003\u2003\u2003<xs:sequence>"},{"entry":"\u2003\u2003\u2003\u2003<xs:element name=\u201ccategory\u201d maxOccurs=\u201cunbounded\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<xs:complexType>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<xs:sequence>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<xs:element name=\u201crelationshipQualifier\u201d type=\u201crelationshipQualifiersType\u201d"},{"entry":"minOccurs=\u201c0\u201d maxOccurs=\u201cunbounded\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<\/xs:sequence>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<xs:attribute name=\u201ctModelKey\u201d type=\u201cuddi:tModelKey\u201d use=\u201crequired\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<xs:attribute name=\u201ckeyValue\u201d type=\u201cxs:string\u201d use=\u201coptional\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/xs:complexType>"},{"entry":"\u2003\u2003\u2003\u2003<\/xs:element>"},{"entry":"\u2003\u2003\u2003<\/xs:sequence>"},{"entry":"\u2003\u2003<\/xs:complexType>"},{"entry":"\u2003<\/xs:element>"},{"entry":"\u2003<xs:element name=\u201ccategoryList\u201d>"},{"entry":"\u2003\u2003<xs:complexType>"},{"entry":"\u2003\u2003\u2003<xs:sequence>"},{"entry":"\u2003\u2003\u2003\u2003<xs:element ref=\u201ccategoryInfo\u201d maxOccurs=\u201cunbounded\u201d\/>"},{"entry":"\u2003\u2003\u2003<\/xs:sequence>"},{"entry":"\u2003\u2003\u2003<xs:attribute name=\u201ctruncated\u201d type=\u201cuddi:truncated\u201d use=\u201coptional\u201d\/>"},{"entry":"\u2003\u2003\u2003<xs:attribute name=\u201coperator\u201d type=\u201cxs:string\u201d use=\u201crequired\u201d\/>"},{"entry":"\u2003\u2003<\/xs:complexType>"},{"entry":"\u2003<\/xs:element>"},{"entry":"\u2003<xs:element name=\u201ccategoryValue\u201d type=\u201ccategoryValueType\u201d\/>"},{"entry":"\u2003<xs:element name=\u201ccategoryInfo\u201d>"},{"entry":"\u2003\u2003<xs:complexType>"},{"entry":"\u2003\u2003\u2003<xs:complexContent>"},{"entry":"\u2003\u2003\u2003\u2003<xs:extension base=\u201ccategoryValueType\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<xs:sequence>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<xs:element name=\u201crootRelationship\u201d minOccurs=\u201c0\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<xs:complexType>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<xs:sequence>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<xs:element ref=\u201ccategoryValue\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/xs:sequence>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/xs:complexType>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<\/xs:element>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<xs:element name=\u201cparentRelationship\u201d minOccurs=\u201c0\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<xs:complexType>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<xs:sequence>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<xs:element ref=\u201ccategoryValue\u201d minOccurs=\u201c0\u201d maxOccurs=\u201cunbounded\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/xs:sequence>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/xs:complexType>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<\/xs:element>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<xs:element name=\u201cchildRelationship\u201d minOccurs=\u201c0\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<xs:complexType>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<xs:sequence>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<xs:element ref=\u201ccategoryValue\u201d minOccurs=\u201c0\u201d maxOccurs=\u201cunbounded\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/xs:sequence>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/xs:complexType>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<\/xs:element>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/xs:sequence>"},{"entry":"\u2003\u2003\u2003\u2003<\/xs:extension>"},{"entry":"\u2003\u2003\u2003<\/xs:complexContent>"},{"entry":"\u2003\u2003<\/xs:complexType>"},{"entry":"\u2003<\/xs:element>"},{"entry":"<\/xs:schema>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Turning to an explanation of the operation of the server response handling mechanism , in general, the categorization relationships are maintained in a database  in the form of one or more tables accessed with keys. For example, as represented in , a table  shows a taxonomy UUID field, a taxonomy value field, a parent value field, and an isValid field. The keyName data may be in another field, or may be kept as an offset pointer or the like into a structure containing the keyName strings, which may save significant space if a significant number of keyNames are reused. Note that as used herein, the term \u201cdatabase\u201d represents any data structure that is suitable for maintaining a taxonomy store, including LDAP stores.","As is readily apparent from , a straightforward query can determine root, parent and child relationships. For example, to locate a root, a query would specify a UUID as a key and request the record (or needed field's) data for all UUID's have a matching value with a parent equal to *NULL. A relationship request seeking a parent node's data would specify the UUID and the given taxonomy value (to identify the reference node) as keys. A child request would use the UUID and specified taxonomy value to seek all records having the specified UUID in which the taxonomy value in the parent field matched the taxonomy value specified.","While the above examples are directed to root, parent and child relationships, virtually any relationship that may be defined such that the server can determine the appropriate data for the node or nodes is feasible. For example, a grandparent node can seek the parent, and use the resulting parent node data to seek its parent, and so on. Sibling nodes could be found by locating the parent, and then locating that parent's children.","Moreover, the relationship need not be in the same taxonomy. For example, there may be an equivalence relationship between nodes of two taxonomies. For example, a node such as shown as \u201cUnited States\u201d (actually its value) in the database table  appears in the Geography-related taxonomy and the Postal Code-related taxonomy. A query may be arranged to return information (e.g., the different UUID's) based on such an equivalent relationship. For example, a query may be used to obtain the UUID of any taxonomy in which an equivalent node appears, and\/or may return the taxonomy and a node value for that equivalent node (along with any other information). In general, if XML is used, any relationship (or other) tag that the client and request handling mechanism both understand (e.g., an <equivalenceRelationship> tag) and from which the server can detect a relationship may be used to request and obtain data.","Although not necessary to the present invention, a primary purpose for obtaining relationship data at the client is to present it in a meaningful way, such as to allow a user of the client to navigate the taxonomy.  shows one such user interface  of a client application, such as a management console program, that uses the returned information to present the taxonomy to a user in some manner. For example, a user may use such a console  to effectively navigate the taxonomy, e.g., a hierarchical structure representing the taxonomy may be displayed on a left frame , from which a represented node may be selected. Thus, in some applications, the left frame (which also may be referred to as a \u201cscope\u201d pane or a namespace) shows a tree view of the taxonomy or taxonomies, which shows the hierarchy of the nodes that can currently be presented. Thus, any relationships, to the extent known by the client, may be represented in the displayed hierarchy in the left frame . Via the present invention, the client application can automatically seek parent and\/or child relationship data as the user expands and collapses node representations and scrolls, or in anticipation of such navigation.","The results, corresponding to the data about the selected node, are displayed in a right results frame . Essentially anything returned by the server  in accordance with the present invention may be included in the results frame , e.g., the friendly name, status of the \u201cis valid\u201d attribute, the parent name, any child names and\/or other relationships. In this manner, a user can navigate a taxonomy and view relevant information as needed.","As can be seen from the foregoing detailed description, there is provided a method and system by which clients can obtain taxonomy information including relationships, such as for presenting that information to a user. The method and system are straightforward for clients to use, are flexible and operate on demand, thereby rapidly providing access to relevant information, and particularly relationship information, among significant amounts of taxonomy data. The method and system thus provide significant advantages and benefits needed in contemporary computing.","While the invention is susceptible to various modifications and alternative constructions, certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood, however, that there is no intention to limit the invention to the specific forms disclosed, but on the contrary, the intention is to cover all modifications, alternative constructions, and equivalents falling within the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
