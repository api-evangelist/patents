---
title: Software development for a hybrid computing environment
abstract: Software development for a hybrid computing environment that includes a host computer and an accelerator, the host computer and the accelerator adapted to one another for data communications by a system level message passing module and by two or more data communications fabrics of at least two different fabric types where software development includes creating, by a programmer, a computer program for execution in the hybrid computing environment, the computer program including directives for generation of computer program code that moves contents of memory among host computers and accelerators in the hybrid computing environment; generating, by a code generator application, source code in accordance with the directives; analyzing, by the code generator application, operation of the generated code for data movement and utilization of moved data; and regenerating, by the code generator application, the source code in accordance with the directives and further in accordance with results of the analysis.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08843880&OS=08843880&RS=08843880
owner: International Business Machines Corporation
number: 08843880
owner_city: Armonk
owner_country: US
publication_date: 20090127
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS"],"p":["1. Field of the Invention","The field of the invention is data processing, or, more specifically, methods, apparatus, and products for software development for a hybrid computing environment.","2. Description of Related Art","The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time, computer systems have evolved into extremely complicated devices. Today's computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components, application programs, operating systems, processors, buses, memory, input\/output (\u2018I\/O\u2019) devices, and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher, more sophisticated computer software has evolved to take advantage of the higher performance of the hardware, resulting in computer systems today that are much more powerful than just a few years ago.","Computer systems today have advanced such that some computing environments now include core components of different architectures which operate together to complete data processing tasks. Such computing environments are described in this specification as \u2018hybrid\u2019 environments, denoting that such environments include host computers and accelerators having different architectures. Although hybrid computing environments are more computationally powerful and efficient in data processing than many non-hybrid computing environments, such hybrid computing environments still present substantial challenges to the science of automated computing machinery and software development.","Methods, apparatus, and products for software development for a hybrid computing environment that includes a host computer having a host computer architecture and an accelerator having an accelerator architecture, the accelerator architecture optimized, with respect to the host computer architecture, for speed of execution of a particular class of computing functions, the host computer and the accelerator adapted to one another for data communications by a system level message passing module and by two or more data communications fabrics of at least two different fabric types. Software development according to embodiments of the present invention includes creating, by a programmer, a computer program for execution in the hybrid computing environment, the computer program including, along with computer program instructions, directives for generation of computer program code that moves contents of memory, across at least one of the data communications fabrics, among host computers and accelerators in the hybrid computing environment; generating, by a code generator application, source code in accordance with the directives; analyzing, by the code generator application, operation of the generated code for data movement and utilization of moved data; and regenerating, by the code generator application, the source code in accordance with the directives and further in accordance with results of the analysis.","The foregoing and other objects, features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.","Exemplary methods, apparatus, and products for software development for a hybrid computing environment according to embodiments of the present invention are described with reference to the accompanying drawings, beginning with .  sets forth a diagram of an example hybrid computing environment () useful for software development according to embodiments of the present invention. A \u2018hybrid computing environment,\u2019 as the term is used in this specification, is a computing environment in that it includes computer processors operatively coupled to computer memory so as to implement data processing in the form of execution of computer program instructions stored in the memory and executed on the processors. In addition, the hybrid computing environment () in the example of  includes at least one host computer having a host architecture that operates in cooperation with an accelerator having an accelerator architecture where the host architecture and accelerator architecture are different architectures. The host and accelerator architectures in this example are characterized by architectural registers, registers that are accessible by computer program instructions that execute on each architecture, registers such as for example, an instruction register, a program counter, memory index registers, stack pointers, and the like. That is, the number, type, structure, and relations among the architectural registers of the two architectures are different, so different that computer program instructions compiled for execution on the host computer of a hybrid computing environment typically cannot be executed natively by any associated accelerator of the hybrid computing environment.","Examples of hybrid computing environments include a data processing system that in turn includes one or more host computers, each having an x86 processor, and accelerators whose architectural registers implement the PowerPC instruction set. Computer program instructions compiled for execution on the x86 processors in the host computers cannot be executed natively by the PowerPC processors in the accelerators. Readers will recognize in addition that some of the example hybrid computing environments described in this specification are based upon the Los Alamos National Laboratory (\u2018LANL\u2019) supercomputer architecture developed in the LANL Roadrunner project (named for the state bird of New Mexico), the supercomputer architecture that famously first generated a \u2018petaflop,\u2019 a million billion floating point operations per second. The LANL supercomputer architecture includes many host computers with dual-core AMD Opteron processors coupled to many accelerators with IBM Cell processors, the Opteron processors and the Cell processors having different architectures.","The example hybrid computing environment () of  includes a plurality of compute nodes (), I\/O nodes (), and a service node (). The compute nodes () are coupled through network () for data communications with one another and with the I\/O nodes () and the service node (). The data communications network () may be implemented as an Ethernet, Internet Protocol (\u2018IP\u2019), PCIe, Infiniband, Fibre Channel, or other network as will occur to readers of skill in the art.","In the example hybrid computing environment () of , the compute nodes carry out principal user-level computer program execution, accepting administrative services, such as initial program loads and the like, from the service application () executing on the service node () and gaining access to data storage () and I\/O functionality (, ) through the I\/O nodes (). In the example of , the I\/O nodes () are connected for data communications to I\/O devices (, , ) through a local area network (\u2018LAN\u2019) () implemented using high-speed Ethernet or a data communications fabric of another fabric type as will occur to those of skill in the art. I\/O devices in the example hybrid computing environment () of  include non-volatile memory for the computing environment in the form of data storage device (), an output device for the hybrid computing environment in the form of printer (), and a user () I\/O device in the form of computer terminal () that executes a service application interface () that provides to a user an interface for configuring compute nodes in the hybrid computing environment and initiating execution by the compute nodes of principal user-level computer program instructions.","In the example of , each compute node includes a host computer () having a host computer architecture and one or more accelerators () having an accelerator architecture. A host computer () is a \u2018host\u2019 in the sense that it is the host computer that carries out interface functions between a compute node and other components of the hybrid computing environment external to any particular compute node. That is, it is the host computer that executes initial boot procedures, power on self tests, basic I\/O functions, accepts user-level program loads from service nodes, and so on. An accelerator () is an \u2018accelerator\u2019 in that each accelerator has an accelerator architecture that is optimized, with respect to the host computer architecture, for speed of execution of a particular class of computing functions. Such accelerated computing functions include, for example, vector processing, floating point operations, and others as will occur to those of skill in the art.","Because each of the compute nodes in the example of  includes a host computer and an accelerator, readers of skill in the art will recognize that each compute node represents a smaller, separate hybrid computing environment within the larger hybrid computing environment () of . That is, not only may the combination of the compute nodes () form a hybrid computing environment (), but it is also the case that each individual compute node may also be viewed as a separate, smaller hybrid computing environment. The hybrid computing environment () in the example of  then, may be viewed as composed of nine separate, smaller hybrid computing environments, one for each compute node, which taken together form the hybrid computing environment () of .","Within each compute node () of , a host computer () and one or more accelerators () are adapted to one another for data communications by a system level message passing module (\u2018SLMPM\u2019) () and by two or more data communications fabrics (, ) of at least two different fabric types. An SLMPM () is a module or library of computer program instructions that exposes an application programming interface (\u2018API\u2019) to user-level applications for carrying out message-based data communications between the host computer () and the accelerator (). Examples of message-based data communications libraries that may be improved for use as an SLMPM according to embodiments of the present invention include:\n\n","A data communications fabric (, ) is a configuration of data communications hardware and software that implements a data communications coupling between a host computer and an accelerator. Examples of data communications fabric types include Peripheral Component Interconnect (\u2018PCI\u2019), PCI express (\u2018PCIe\u2019), Ethernet, Infiniband, Fibre Channel, Small Computer System Interface (\u2018SCSI\u2019), External Serial Advanced Technology Attachment (\u2018eSATA\u2019), Universal Serial Bus (\u2018USB\u2019), and so on as will occur to those of skill in the art.","Software development for the example hybrid computing environment () of  according to embodiments of the present invention may include creating, by a programmer, such as the user () in the example of , a computer program () for execution in the hybrid computing environment (). The example computer program () in the hybrid computing environment () of  includes, along with computer program instructions, directives () for generation of computer program code that moves contents of memory, across at least one of the data communications fabrics (, ), among hosts () and accelerators () in the hybrid computing environment (). Software development for the hybrid computing environment () according to embodiments of the present invention may also include generating, by a code generator application (), source code () in accordance with the directives (); analyzing, by the code generator application (), operation of the generated code () for data movement and utilization of moved data; and regenerating, by the code generator application (), the source code () in accordance with the directives () and further in accordance with results () of the analysis.","The arrangement of compute nodes, data communications fabrics, networks, I\/O devices, service nodes, I\/O nodes, and so on, making up the hybrid computing environment () as illustrated in  are for explanation only, not for limitation of the present invention. Hybrid computing environments useful for software development according to embodiments of the present invention may include additional nodes, networks, devices, and architectures, not shown in , as will occur to those of skill in the art. Although the hybrid computing environment () in the example of  includes only nine compute nodes (), readers will note that hybrid computing environments according to embodiments of the present invention may include any number of compute nodes. The LANL supercomputer, taken as an example of a hybrid computing environment with multiple compute nodes, contains as of this writing more than 12,000 compute nodes. Networks and data communications fabrics in such hybrid computing environments may support many data communications protocols including for example TCP (Transmission Control Protocol), IP (Internet Protocol), and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .","For further explanation,  sets forth a block diagram of an exemplary hybrid computing environment () useful for software development according to embodiments of the present invention. The hybrid computing environment () of  includes four compute nodes. Similar to the compute nodes of , each of the compute nodes in the example of  may represent a small, separate hybrid computing environment which taken together make up a larger hybrid computing environment. One compute node () in the example of  is illustrated in an expanded view to aid a more detailed explanation of such a hybrid computing environment (). As shown in the expanded view of compute node (), each of the compute nodes (, ) in the example of  includes a host computer (). The host computer () includes a computer processor () operatively coupled to computer memory, Random Access Memory (\u2018RAM\u2019) (), through a high speed memory bus (). The processor () in each host computer () has a set of architectural registers () that defines the host computer architecture.","Each of the compute nodes also includes one or more accelerators (, ). Each accelerator (, ) includes a computer processor () operatively coupled to RAM () through a high speed memory bus (). Stored in RAM (,) of the host computer and the accelerators (, ) is an operating system (, ). Operating systems useful in host computers and accelerators of hybrid computing environments according to embodiments of the present invention include UNIX\u2122, Linux\u2122, Microsoft XP\u2122, Microsoft Vista\u2122, Microsoft NT\u2122, AIX\u2122, IBM's i5\/OS\u2122, and others as will occur to those of skill in the art. There is no requirement that the operating system in the host computers should be the same operating system used on the accelerators.","The processor () of each accelerator (, ) has a set of architectural registers () that defines the accelerator architecture. The architectural registers () of the processor () of each accelerator are different from the architectural registers () of the processor () in the host computer (). With differing architectures, it would be uncommon, although possible, for a host computer and an accelerator to support the same instruction sets. As such, computer program instructions compiled for execution on the processor () of an accelerator () generally would not be expected to execute natively on the processor () of the host computer () and vice versa. Moreover, because of the typical differences in hardware architectures between host processors and accelerators, computer program instructions compiled for execution on the processor () of a host computer () generally would not be expected to execute natively on the processor () of an accelerator () even if the accelerator supported the instruction set of the host. The accelerator architecture in example of  is optimized, with respect to the host computer architecture, for speed of execution of a particular class of computing functions. That is, for the function or functions for which the accelerator is optimized, execution of those functions will proceed faster on the accelerator than if they were executed on the processor of the host computer.","In the example of , the host computer () and the accelerators (, ) are adapted to one another for data communications by a system level message passing module (\u2018SLMPM\u2019) () and two data communications fabrics (, ) of at least two different fabric types. In this example, to support message-based data communications between the host computer () and the accelerator (), both the host computer () and the accelerator () have an SLMPM () so that message-based communications can both originate and be received on both sides of any coupling for data communications. Also in the example of , the host computer () and the accelerators (, ) are adapted to one another for data communications by a PCIe fabric () through PCIe communications adapters () and an Ethernet fabric () through Ethernet communications adapters (). The use of PCIe and Ethernet is for explanation, not for limitation of the invention. Readers of skill in the art will immediately recognize that hybrid computing environments according to embodiments of the present invention may include fabrics of other fabric types such as, for example, PCI, Infiniband, Fibre Channel, SCSI, eSATA, USB, and so on.","The SLMPM () in this example operates generally for data processing in a hybrid computing environment () by monitoring data communications performance for a plurality of data communications modes between the host computer () and the accelerators (, ), receiving a request () to transmit data according to a data communications mode from the host computer to an accelerator, determining whether to transmit the data according to the requested data communications mode, and if the data is not to be transmitted according to the requested data communications mode: selecting another data communications mode and transmitting the data according to the selected data communications mode. In the example of , the monitored performance is illustrated as monitored performance data () stored by the SLMPM () in RAM () of the host computer () during operation of the compute node ().","A data communications mode specifies a data communications fabric type, a data communications link, and a data communications protocol (). A data communications link () is data communications connection between a host computer and an accelerator. In the example of , a link () between the host computer () and the accelerator () may include the PCIe connection () or the Ethernet connection (, ) through the Ethernet network (). A link () between the host computer () and the accelerator () in the example of  may include the PCIe connection () or the Ethernet connection (, ) through the Ethernet network (). Although only one link for each fabric type is illustrated between the host computer and the accelerator in the example of , readers of skill in the art will immediately recognize that there may any number of links for each fabric type.","A data communications protocol is a set of standard rules for data representation, signaling, authentication and error detection required to send information from a host computer () to an accelerator (). In the example of , the SLMPM () may select one of several protocols () for data communications between the host computer () and the accelerator. Examples of such protocols () include shared memory transfers (\u2018SMT\u2019) () executed with a send and receive operations (), and direct memory access (\u2018DMA\u2019) () executed with PUT and GET operations ().","Shared memory transfer is a data communications protocol for passing data between a host computer and an accelerator into shared memory space () allocated for such a purpose such that only one instance of the data resides in memory at any time. Consider the following as an example shared memory transfer between the host computer () and the accelerator () of . An application () requests () a transmission of data () from the host computer () to the accelerator () in accordance with the SMT () protocol. Such a request () may include a memory address allocated for such shared memory. In this example, the shared memory segment () is illustrated in a memory location on the accelerator (), but readers will recognize that shared memory segments may be located on the accelerator (), on the host computer (), on both the host computer and the accelerator, or even off the local compute node () entirely\u2014so long as the segment is accessible as needed by the host and the accelerator. To carry out a shared memory transfer, the SLMPM () on the host computer () establishes a data communications connection with the SLMPM () executing on the accelerator () by a handshaking procedure similar to that in the TCP protocol. The SLMPM () then creates a message () that includes a header and a payload data and inserts the message into a message transmit queue for a particular link of a particular fabric. In creating the message, the SLMPM inserts, in the header of the message, an identification of the accelerator and an identification of a process executing on the accelerator. The SLMPM also inserts the memory address from the request () into the message, either in the header or as part of the payload data. The SLMPM also inserts the data () to be transmitted in the message () as part of the message payload data. The message is then transmitted by a communications adapter (, ) across a fabric (, ) to the SLMPM executing on the accelerator () where the SLMPM stores the payload data, the data () that was transmitted, in shared memory space () in RAM () in accordance with the memory address in the message.","Direct memory access (\u2018DMA\u2019) is a data communications protocol for passing data between a host computer and an accelerator with reduced operational burden on the computer processor (). A DMA transfer essentially effects a copy of a block of memory from one location to another, typically from a host computer to an accelerator or vice versa. Either or both a host computer and accelerator may include DMA engine, an aggregation of computer hardware and software for direct memory access. Direct memory access includes reading and writing to memory of accelerators and host computers with reduced operational burden on their processors. A DMA engine of an accelerator, for example, may write to or read from memory allocated for DMA purposes, while the processor of the accelerator executes computer program instructions, or otherwise continues to operate. That is, a computer processor may issue an instruction to execute a DMA transfer, but the DMA engine, not the processor, carries out the transfer.","In the example of , only the accelerator () includes a DMA engine () while the host computer does not. In this embodiment the processor () on the host computer initiates a DMA transfer of data from the host to the accelerator by sending a message according to the SMT protocol to the accelerator, instructing the accelerator to perform a remote \u2018GET\u2019 operation. The configuration illustrated in the example of  in which the accelerator () is the only device containing a DMA engine is for explanation only, not for limitation. Readers of skill in the art will immediately recognize that in many embodiments, both a host computer and an accelerator may include a DMA engine, while in yet other embodiments only a host computer includes a DMA engine.","To implement a DMA protocol in the hybrid computing environment of  some memory region is allocated for access by the DMA engine. Allocating such memory may be carried out independently from other accelerators or host computers, or may be initiated by and completed in cooperation with another accelerator or host computer. Shared memory regions, allocated according to the SMT protocol, for example, may be memory regions made available to a DMA engine. That is, the initial setup and implementation of DMA data communications in the hybrid computing environment () of  may be carried out, at least in part, through shared memory transfers or another out-of-band data communications protocol, out-of-band with respect to a DMA engine. Allocation of memory to implement DMA transfers is relatively high in latency, but once allocated, the DMA protocol provides for high bandwidth data communications that requires less processor utilization than many other data communications protocols.","A direct \u2018PUT\u2019 operation is a mode of transmitting data from a memory location on an origin device to a memory location on a target device through a DMA engine. A direct \u2018PUT\u2019 operation allows data to be transmitted and stored on the target device with little involvement from the target device's processor. To effect minimal involvement from the target device's processor in the direct \u2018PUT\u2019 operation, the DMA engine transfers the data to be stored on the target device along with a specific identification of a storage location on the target device. The DMA engine knows the specific storage location on the target device because the specific storage location for storing the data on the target device has been previously provided by the target device.","A remote \u2018GET\u2019 operation, sometimes denominated an \u2018rGET,\u2019 is another mode of transmitting data from a memory location on an origin device to a memory location on a target device through a DMA engine. A remote \u2018GET\u2019 operation allows data to be transmitted and stored on the target device with little involvement from the origin device's processor. To effect minimal involvement from the origin device's processor in the remote \u2018GET\u2019 operation, the DMA engine stores the data in a storage location accessible one the target device, notifies the target device, directly or out-of-band through a shared memory transmission, of the storage location and the size of the data ready to be transmitted, and the target device retrieves the data from the storage location.","Monitoring data communications performance for a plurality of data communications modes may include monitoring a number of requests () in a message transmit request queue (-) for a data communications link (). In the example of , each message transmit request queue (-) is associated with one particular data communications link (). Each queue (-) includes entries for messages () that include data () to be transmitted by the communications adapters (, ) along a data communications link () associated with queue.","Monitoring data communications performance for a plurality of data communications modes may also include monitoring utilization of a shared memory space (). In the example of , shared memory space () is allocated in RAM () of the accelerator. Utilization is the proportion of the allocated shared memory space to which data has been stored for sending to a target device and has not yet been read or received by the target device, monitored by tracking the writes and reads to and from the allocated shared memory. In the hybrid computing environment () of , shared memory space, any memory in fact, is limited. As such, a shared memory space () may be filled during execution of an application program () such that transmission of data from the host computer () to an accelerator may be slowed, or even stopped, due to space limitations in the shared memory space.","In some embodiments of the present invention, the hybrid computing environment () of  may be configured to operate as a parallel computing environment in which two or more instances the application program () executes on two or more host computers () in the parallel computing environment. In such embodiments, monitoring data communications performance across data communications modes may also include aggregating data communications performance information () across a plurality of instances of the application program () executing on two or more host computers in a parallel computing environment. The aggregated performance information () may be used to calculate average communications latencies for data communications modes, average number of requests in data communications links of a particular fabric type, average shared memory utilization among the plurality of host computers and accelerators in the parallel computing environment, and so on as will occur to those of skill in the art. Any combination of such measures may be used by the SLMPM for both determining whether to transmit the data according to requested data communications mode and selecting another data communications mode for transmitting the data if the data is not to be transmitted according to the requested data communications mode.","The SLMPM () of  receives, from an application program () on the host computer (), a request () to transmit data () according to a data communications mode from the host computer () to the accelerator (). Such data () may include computer program instructions compiled for execution by the accelerator (), work piece data for an application program executing on the accelerator (), or some combination of computer program instructions and work piece data. Receiving a request () to transmit data () according to a data communications mode may include receiving a request to transmit data by a specified fabric type, receiving a request to transmit data through a specified data communications link from the host computer to the accelerator, or receiving a request to transmit data from the host computer to the accelerator according to a protocol.","A request () to transmit data () according to a data communications mode may be implemented as a user-level application function call through an API to the SLMPM (), a call that expressly specifies a data communications mode according to protocol, fabric type, and link. A request implemented as a function call may specify a protocol according to the operation of the function call itself. A dacs_put( ) function call, for example, may represent a call through an API exposed by an SLMPM implemented as a DACS library to transmit data in the default mode of a DMA \u2018PUT\u2019 operation. Such a call, from the perspective of the calling application and the programmer who wrote the calling application, represents a request to the SLMPM library to transmit data according to the default mode, known to the programmer to be default mode associated with the express API call. The called function, in this example dacs_put( ), may be coded according to embodiments of the present invention, to make its own determination whether to transmit the data according to the requested data communications mode, that is, according to the default mode of the called function. In a further example, a dacs_send( ) instruction may represent a call through an API exposed by an SLMPM implemented as a DACS library to transmit data in the default mode of an SMT \u2018send\u2019 operation, where the called function dacs_send( ) is again coded according to embodiments of the present invention to make its own determination whether to transmit the data according to the requested mode.","An identification of a particular accelerator in a function call may effectively specify a fabric type. Such a function call may include as a call parameters an identification of a particular accelerator. An identification of a particular accelerator by use of a PCIe ID, for example, effectively specifies a PCI fabric type. In another, similar, example, an identification of a particular accelerator by use of a media access control (\u2018MAC\u2019) address of an Ethernet adapter effectively specifies the Ethernet fabric type. Instead of implementing the accelerator ID of the function call from an application executing on the host in such a way as to specify a fabric type, the function call may only include a globally unique identification of the particular accelerator as a parameter of the call, thereby specifying only a link from the host computer to the accelerator, not a fabric type. In this case, the function called may implement a default fabric type for use with a particular protocol. If the function called in the SLMPM is configured with PCIe as a default fabric type for use with the DMA protocol, for example, and the SLMPM receives a request to transmit data to the accelerator () according to the DMA protocol, a DMA PUT or DMA remote GET operation, the function called explicitly specifies the default fabric type for DMA, the PCIe fabric type.","In hybrid computing environments in which only one link of each fabric type adapts a single host computer to a single accelerator, the identification of a particular accelerator in a parameter of a function call, may also effectively specify a link. In hybrid computing environments where more than one link of each fabric type adapts a host computer and an accelerator, such as two PCIe links connecting the host computer () to the accelerator (), the SLMPM function called may implement a default link for the accelerator identified in the parameter of the function call for the fabric type specified by the identification of the accelerator.","The SLMPM () in the example of  also determines, in dependence upon the monitored performance (), whether to transmit the data () according to the requested data communications mode. Determining whether to transmit the data () according to the requested data communications mode may include determining whether to transmit data by a requested fabric type, whether to transmit data through a requested data communications link, or whether to transmit data according to a requested protocol.","In hybrid computing environments according to embodiments of the present invention, where monitoring data communications performance across data communications modes includes monitoring a number of requests in a message transmit request queue (-) for a data communications link, determining whether to transmit the data () according to the requested data communications mode may be carried out by determining whether the number of requests in the message transmit request queue exceeds a predetermined threshold. In hybrid computing environments according to embodiments of the present invention, where monitoring data communications performance for a plurality of data communications modes includes monitoring utilization of a shared memory space, determining whether to transmit the data () according to the requested data communications mode may be carried out by determining whether the utilization of the shared memory space exceeds a predetermined threshold.","If the data is not to be transmitted according to the requested data communications mode, the SLMPM () selects, in dependence upon the monitored performance, another data communications mode for transmitting the data and transmits the data () according to the selected data communications mode. Selecting another data communications mode for transmitting the data may include selecting, in dependence upon the monitored performance, another data communications fabric type by which to transmit the data, selecting a data communications link through which to transmit the data, and selecting another data communications protocol. Consider as an example, that the requested data communications mode is a DMA transmission using a PUT operation through link () of the PCIe fabric () to the accelerator (). If the monitored data performance () indicates that the number of requests in transmit message request queue () associated with the link () exceeds a predetermined threshold, the SLMPM may select another fabric type, the Ethernet fabric (), and link (, ) through which to transmit the data (). Also consider that the monitored performance () indicates that current utilization of the shared memory space () is less than a predetermined threshold while the number of outstanding DMA transmissions in the queue () exceeds a predetermined threshold. In such a case, the SLMPM () may also select another protocol, such as a shared memory transfer, by which to transmit the data ().","Selecting, by the SLMPM, another data communications mode for transmitting the data () may also include selecting a data communications protocol () in dependence upon data communications message size (). Selecting a data communications protocol () in dependence upon data communications message size () may be carried out by determining whether a size of a message exceeds a predetermined threshold. For larger messages (), the DMA protocol may be a preferred protocol as processor utilization in making a DMA transfer of a larger message () is typically less than the processor utilization in making a shared memory transfer of a message of the same size.","As mentioned above, the SLMPM may also transmit the data according to the selected data communications mode. Transmit the data according to the selected data communications mode may include transmitting the data by the selected data communications fabric type, transmitting the data through the selected data communications link, or transmitting the data according to the selected protocol. The SLMPM () may effect a transmission of the data according to the selected data communications mode by instructing, through a device driver, the communications adapter for the data communications fabric type of the selected data communications mode to transmit the message () according to a protocol of the selected data communications mode, where the message includes in a message header, an identification of the accelerator, and in the message payload, the data () to be transmitted.","The above explanation of data processing in the example hybrid computing environment () of , describes execution of an application program () in the hybrid computing environment (), data communications among hosts () and accelerators (, ) in the hybrid computing environment (), and other data processing tasks carried out in the hybrid computing environment for further clarity in understanding typical data processing techniques carried out in hybrid computing environments configured according to embodiments of the present invention. Software, such as the host application program (), may be developed for the example hybrid computing environment () of  in accordance with embodiments of the present invention in such a way as to optimize data movement and utilization of moved data.","In the example hybrid computing environment () of , a programmer creates a computer program () for execution in the hybrid computing environment (). Such a computer program () includes, along with computer program instructions (), directives () for generation of computer program code that moves contents of memory, such as application data (), across at least one of the data communications fabrics (, ), among host computers () and accelerators () in the hybrid computing environment. A programmer as the term is used in this specification may refer to any of: a human user that directs computer hardware and software to create a computer program, the computer hardware and software itself, or some combination of the two.","A directive is a command or notification interleaved in computer program instructions of a computer program that informs source code generation by a code generator application with respect to data movement and data utilization in a hybrid computing environment. Such directives may include memory management directives, memory transfer directives, and memory assignment directives. Memory management directives may include a memory allocation directive and a memory identification directive. A memory assignment directive allocates memory whose contents are to be moved among host computers and accelerators and includes a name for the allocated memory, an address for the allocated memory, a size of the allocated memory, and a specification of the type of data to be stored in the allocated memory. Consider the following pseudo-code as an example of a memory assignment directive:\n\n","The above example memory assignment directive allocates memory whose contents are to be moved among host computers and accelerators, where the memory has a name for the allocated memory, <name>, an address for the allocated memory, <address>, a size of the allocated memory, <size>, and a specification of the type of data to be stored in the allocated memory <type>. The specification of the type of data to be stored may be useful in byte swapping to correct for differences in endianness among hosts and accelerators.","A memory identification directive identifies memory whose contents are to be moved among host computers and accelerators and includes a name of the identified memory, an address of the identified memory, a size of the identified memory, and a specification of the type of data to be stored in the identified memory. Consider the following pseudo-code as an example of a memory identification directive:\n\n","The above example memory identification directive identifies memory whose contents are to be moved among host computers and accelerators and includes a name of the identified memory, <name>, an address of the identified memory, <address>, a size of the identified memory, <size>, and a specification of the type of data to be stored in the identified memory, <type>. Such memory may be previously allocated, or may be by the memory identification directive if not expressly, previously allocated.","Memory transfer directives may include a remote memory transfer directive and a local memory transfer directive. A remote memory transfer directive transfers the contents of local memory to remote memory and includes a name of a segment of local memory whose contents are to be transferred, a name of a segment of remote memory to which the contents are to be transferred, and a hint regarding a data communications mode for the transfer. Consider the following pseudo-code as an example of a remote memory transfer directive:\n\n","The above example remote memory transfer directive transfers the contents of local memory to remote memory and includes a name of a segment of local memory whose contents are to be transferred, <name>, a name of a segment of remote memory to which the contents are to be transferred, <nameRemote>, and a hint regarding a data communications mode for the transfer, <hint>. A \u2018hint\u2019 as a parameter of a directive provides greater information to the code generator application with respect to a memory transfer so that the code generator application may generate more efficient code for the data transfer. A programmer may specify, for example, in a hint for a data transfer a preferred, non-default data communications mode, such as DMA over PCIe. The code generator application (), when generating source code for the data transfer, may use such non-default data communications mode as a starting point for optimization. As another example, a programmer may also specify in a hint a preferred data communications message size, or a typical size of the data to be transferred, information which the code generator application () may use to select a non-default data communications mode and generate source code for the data transfer of greater efficiency.","A local memory transfer directive transfers the contents of remote memory to local memory and includes a name of a segment of remote memory whose contents are to be transferred, a name of a segment of local memory to which the contents are to be transferred, and a hint regarding a data communications mode for the transfer. Consider the following pseudo-code as an example of a local memory transfer directive:\n\n","The above example local memory transfer directive transfers the contents of remote memory to local memory and includes a name of a segment of remote memory whose contents are to be transferred, <nameRemote>, a name of a segment of local memory to which the contents are to be transferred, <name>, and a hint regarding a data communications mode for the transfer <hint>.","Memory assignment directives may include an assignment directive; an assignment start directive; an assignment end directive; a use start directive; and a use end directive. An assignment directive includes a name of the segment of memory and a value to assign to the segment. Consider the following pseudo-code as an example of an assignment directive:\n\n","The above example assignment directive assigns a value to a segment of memory and includes a name of the segment of memory, <name>, and a value to assign to the segment <value>.","An assignment start directive identifies the starting point of the computer program that carries out the assignment of the value to the segment and includes a name of the memory segment. Consider the following pseudo-code as an example of an assignment start directive:\n\n","The above example assignment start directive assigns identifies the starting point of the computer program that carries out the assignment of the value to the segment and includes a name of the memory segment and includes a name of the segment of memory, <name>.","An assignment end directive identifies the end of the computer program that carries out the assignment of the value to the segment and includes a name of the memory segment. Consider the following pseudo-code as an example of an assignment end directive:\n\n","The above example assignment end directive assigns identifies the end of the computer program that carries out the assignment of the value to the segment and includes a name of the memory segment and includes a name of the segment of memory, <name>.","A use start directive identifies the start of the computer program that uses the segment and includes a name of the memory segment. Consider the following pseudo-code as an example of a use start directive:\n\n","The above example use start directive identifies the start of the computer program that uses the segment and includes a name of the memory segment, <name>.","A use end directive identifies the end of the computer program that uses the segment and includes a name of the memory segment. Consider the following pseudo-code as an example of a use end directive:\n\n","The above example use end directive identifies the end of the computer program that uses the segment and includes a name of the memory segment, <name>. The above pseudo-code examples of directives are for clarity of explanation only, not limitation. Readers of skill in the art will recognize that other types of memory directives identifying other parameters may be useful in developing software in a hybrid computing environment () in accordance with embodiments of the present invention.","The code generator application (), in the example hybrid computing environment () of , is a module of computer program instructions that operates generally for software development in the hybrid computing environment by generating source code () in accordance with the directives () of the computer program (); analyzing operation of the generated code () for data movement and utilization of moved data; and regenerating the source code () in accordance with the directives () and further in accordance with results () of the analysis.","The code generator application () may generate source code () in accordance with the directives () of the computer program () by generating SLMPM () library function calls that effect data transfers across default data communications modes () for those transfers identified in the computer program by directives without hint parameters specifying non-default modes, generating SLMPM () library function calls that effect data transfers across non-default data communications modes () for those transfers identified in the computer program by directives including hint parameters that specify non-default modes, generating SLMPM () library function calls to create memory segments and to allocate memory segments, and so on as will occur to readers of skill in the art. The code generator application () may, for example, generate SLMPM () library function calls that effect data transfers by shared memory transfers (), a default data communications protocol (), for all data transfers identified by the memory transfer directives without hint parameters to the contrary.","Generating such source code () by the code generator application () may also include generating the source code in dependence upon the types of data communications fabric that adapt the host computers and the accelerators or generating the source code in dependence upon other hardware configuration parameters of the hybrid computing environment. Such hardware configuration parameters may include, for example, total available memory (, ) in the hybrid computing environment (), size of available memory local to a host computer (), size of available memory local to an accelerator (, ), and so on. That is, the code generator application () may select data communications mode for data transfers identified by the directives () in the computer program () in dependence upon a particular hardware configuration of the hybrid computing environment () in which the computer program is to be executed.","The code generator application () may also generate source code in accordance with the directives () and further in accordance with one or more optimization patterns (). That is, instead of selecting a default data communications mode for all data transfers, the code generator application () may select another data communications mode in dependence upon the pattern of directives in the code, parameters of the directives, and so on. Optimization patterns () are predefined rules that govern code generation, in dependence upon one or more parameters of one or more directives of a computer program and in dependence upon predefined patterns of directives of the computer program. Examples of optimization patterns () include combining memory allocation directives positioned together in the computer program; selecting data communications modes for a particular computer program in dependence upon sizes of memory segments in the computer program; generating code that interleaves data transfers of a portion of a memory segment and an assignment of a value to the entire memory segment, when the segment is greater than a predefined size; and other rules as will occur to readers of skill in the art.","In generating the source code (), the code generator application () may also insert one or more tracepoints for gathering operational metrics of execution of the source code, specifically data movement and data utility metrics. A tracepoint is a special type of breakpoint in computer program code that performs an action when encountered in execution of the computer program code, typically an action to gather metrics such as starting a timer, stopping a timer, storing the value of a timer, and so on. In hybrid computing environments () configured for software development according to embodiments of the present invention, tracepoints are inserted to gather operational metrics of execution of the program code. Operational metrics are metrics describing operation of the hybrid computing environment, specifically metrics describing data movement in the computer program and data utilization. Examples of such operational metrics may include a time required for each data movement executed in the code, an average time required to move data according to each particular data communications mode during execution of the code, a time of each particular data processing task executed in the code, time spent waiting for each allocation, creation, or assignment of memory, and others as may occur to readers of skill in the art.","The code generator application () may then analyze operation of the generated code () for data movement and utilization of moved data by executing the code in the hybrid computing environment and gathering operational metrics at the tracepoints in the code. Data movement as the term is used in this specification refers to data communications carried out between host computers and accelerators, from one location in memory to another. Data utilization as the term is used in this specification refers to use of data by the computer program in relation to creation and allocation of computer memory, that is, the time required for data processing tasks to wait for memory-related tasks to be carried out.","The code generator application (), after analyzing the operation of the generated code, may then regenerate the source code () in accordance with the directives () and further in accordance with the results () of the analysis. The code generator application () may regenerate the source code () in accordance with the directives () and further in accordance with the results () of the analysis by altering the previously generated source code () to improve results of execution of the source code in dependence upon historical data communications and memory utilization metrics (). That is, the code generator application may compare operational metrics gathered during execution of source code () to historical data communications and memory utilization metrics () to identify portions of the source code to alter. Such historical metrics () may be created by recording, over time, performance data () of data communications modes produced in executing various host application programs (). The code generator application () may alter the code by: selecting different data communications modes for moving data among host computers and accelerators\u2014different fabrics, protocols, links and the like\u2014altering message size of data communications; combining, splitting, or rearranging code that effects memory creation and allocation; moving code that assigns values to memory; and so on.","In some hybrid computing environments configured for software development according to embodiments of the present invention the code generator application (), after analyzing operation of the generated code, may provide the results of the analysis to the programmer, and prior to regenerating the source code, the programmer may alter the directives () in the computer program to optimize the movement of data and the utilization of the moved data. The code generator application () may provide the results () to a programmer through a Graphical User Interface (\u2018GUI\u2019) of a service application ( on ) executing on a service node ( on ) connected to a terminal ( on ) running a service application interface ( on ). The programmer may alter the directives in code in various ways, such as for example, rearranging, splitting, or combining directives, specifying hints that identify to the code generator a particular data communications mode for particular data transfers in the code, explicitly specifying in a hint a size of data communications messages for data transfers, and so on as will occur to readers of skill in the art.","The code generator application () in the examples of  and  is executed by the host computer (). Readers of skill in the art will recognize, however, that such a code generator application () may execute on another computer such as a service node ( on ) or other computer remotely connected for data communications to the host computer (). In analyzing the generated source code () the code generator typically does, in fact, execute the source code in the hybrid computing environment, on a host computer and accelerators, but the code generator application () itself, along with any software application used by the programmer to create the computer program, need not be executed in the hybrid computing environment (), but may execute on a computer outside of and connected for data communications to the hybrid computing environment ().","For further explanation,  sets forth a block diagram of a further exemplary hybrid computing environment () useful for software development according to embodiments of the present invention. The hybrid computing environment of  is similar to the hybrid computing environment of , including as it does, four compute nodes (, ), each of which includes a host computer () having a host computer architecture and an accelerator () having an accelerator architecture where the accelerator architecture is optimized, with respect to the host computer architecture, for speed of execution of a particular class of computing functions. The host computer () and the accelerator () are adapted to one another for data communications by a system level message passing module () and two or more data communications fabrics (, ) of at least two different fabric types. In the example of , the host computer () is adapted to accelerator () by an Ethernet fabric () and a PCIe fabric ().","The host computer () as illustrated in the expanded view of the compute node () includes an x86 processor. An x86 processor is a processor whose architecture is based upon the architectural register set of the Intel x86 series of microprocessors, the 386, the 486, the 586 or Pentium\u2122, and so on. Examples of x86 processors include the Advanced Micro Devices (\u2018AMD\u2019) Opteron\u2122, the AMD Phenom\u2122, the AMD Athlon XP\u2122, the AMD Athlon 64\u2122, Intel Nehalam\u2122, Intel Pentium 4, Intel Core 2 Duo, Intel Atom, and so on as will occur to those of skill in the art. The x86 processor () in the example of Figure illustrates a set of a typical architectural registers () found in many x86 processors including, for example, an accumulator register (\u2018AX\u2019), a base register (\u2018BX\u2019), a counter register (\u2018CX\u2019), a data register (\u2018DX\u2019), a source index register for string operations (\u2018SI\u2019), a destination index for string operations (\u2018DI\u2019), a stack pointer (\u2018SP\u2019), a stack base pointer for holding the address of the current stack frame (\u2018BP\u2019), and an instruction pointer that holds the current instruction address (\u2018IP\u2019).","The accelerator () in the example of  is illustrated as a Cell Broadband Engine (\u2018CBE\u2019) having a Cell Broadband Engine Architecture (\u2018CBEA\u2019). A CBEA is a microprocessor architecture jointly developed by Sony Computer Entertainment, Toshiba, and IBM, an alliance known as \u201cSTI.\u201d Microprocessors implemented according to the CBEA are sometimes referred to as \u2018Cell\u2019 processors or simply as CBEs. The CBEA combines a general-purpose POWER architecture core, a Power Processing Element (\u2018PPE\u2019) (), of modest performance with streamlined co-processing elements, called Synergistic Processing Elements (\u2018SPEs\u2019) () which greatly accelerate multimedia and vector processing applications, as well as many other forms of dedicated computation. The CBE architecture emphasizes efficiency\/watt, prioritizes bandwidth over latency, and favors peak computational throughput over simplicity of program code.","The accelerator () of , implemented as a CBE, includes a main processor () that in this example is a Power Processing Element (\u2018PPE\u2019), eight fully-functional co-processors called SPEs (), and a high-bandwidth circular data bus connecting the PPE and the SPEs, called the Element Interconnect Bus (\u2018EIB\u2019) (). The PPE () is a POWER architecture processor with a two-way multithreaded core acting as a controller for the eight SPEs (). The term \u201cPOWER architecture\u201d here refers to IBM's different generations of processor architectures, a broad term including all products based on POWER, PowerPC and Cell architectures. The architectural registers () of the PPE () of the CBE accelerator () therefore are different from those of the x86 processor () of the host computer (). The PPE () of  includes an example set of architectural registers () of the POWER architecture, including 32 general purpose registers (\u2018GPRs\u2019), 32 floating point registers (\u2018FPRs\u2019), a fixed-point exception register (\u2018XER\u2019), a count register (\u2018CTR\u2019), a Condition register (\u2018CR\u2019), an instruction address register (\u2018IAR\u2019), a link register (\u2018LR\u2019), and a processor version register (\u2018PVR\u2019).","The SPEs () handle most of the computational workload of the CBE (). While the SPEs are optimized for vectorized floating point code execution, the SPEs also may execute operating systems, such as, for example, a lightweight, modified version of Linux with the operating system stored in local memory () on the SPE. Each SPE () in the example of  includes a Synergistic Processing Unit (\u2018SPU\u2019) (), and a Memory Flow Controller (\u2018MFC\u2019) (). An SPU () is a Reduced Instruction Set Computing (\u2018RISC\u2019) processor with 128-bit single instruction, multiple data (\u2018SIMD\u2019) organization for single and double precision instructions. In some implementations, an SPU may contain a 256 KB embedded Static RAM () for instructions and data, called local storage which is visible to the PPE () and can be addressed directly by software. Each SPU () can support up to 4 Gigabyte (\u2018GB\u2019) of local store memory. The local store does not operate like a conventional CPU cache because the local store is neither transparent to software nor does it contain hardware structures that predict which data to load. The SPUs () also implement architectural registers () different from those of the PPE which include a 128-bit, 128-entry register file (). An SPU () can operate on 16 8-bit integers, 8 16-bit integers, 4 32-bit integers, or 4 single precision floating-point numbers in a single clock cycle, as well as execute a memory operation.","The MFC () integrates the SPUs () in the CBE (). The MFC () provides an SPU with data transfer and synchronization capabilities, and implements the SPU interface to the EIB () which serves as the transportation hub for the CBE (). The MFC () also implements the communication interface between the SPE () and PPE (), and serves as a data transfer engine that performs bulk data transfers between the local storage () of an SPU () and CBE system memory, RAM (), through DMA. By offloading data transfer from the SPUs () onto dedicated data transfer engines, data processing and data transfer proceeds in parallel, supporting advanced programming methods such as software pipelining and double buffering. Providing the ability to perform high performance data transfer asynchronously and in parallel with data processing on the PPE () and SPEs (), the MFC () eliminates the need to explicitly interleave data processing and transfer at the application level.","The SLMPM () in the example of  processes data in the hybrid computing environment () according to embodiments of the present invention by monitoring data communications performance for a plurality of data communications modes between the host computer () and the accelerator (); receiving, from an application program () on the host computer (), a request to transmit data according to a data communications mode from the host computer () to the accelerator (); determining, in dependence upon the monitored performance, whether to transmit the data according to the requested data communications mode; and if the data is not to be transmitted according to the requested data communications mode: selecting, in dependence upon the monitored performance, another data communications mode for transmitting the data and transmitting the data according to the selected data communications mode.","Software development for the hybrid computing environment () in the example of  may be carried out according to embodiments of the present invention by creating, by a programmer, a computer program for execution in the hybrid computing environment, the computer program including, along with computer program instructions, directives for generation of computer program code that moves contents of memory, across at least one of the data communications fabrics, among host computers () and accelerators () in the hybrid computing environment (); generating, by a code generator application, source code in accordance with the directives; analyzing, by the code generator application, operation of the generated code for data movement and utilization of moved data; and regenerating, by the code generator application, the source code in accordance with the directives and further in accordance with results of the analysis.","For further explanation,  sets forth a block diagram of a further exemplary hybrid computing environment () useful for software development according to embodiments of the present invention. The hybrid computing environment of  is similar to the hybrid computing environment of , including as it does, four compute nodes (, ), each of which includes a host computer () having a host computer architecture and one or more accelerators () each having an accelerator architecture where the accelerator architecture is optimized, with respect to the host computer architecture, for speed of execution of a particular class of computing functions. The host computer () and the accelerator () in the example of  are adapted to one another for data communications by a system level message passing module () and two or more data communications fabrics (, ) of at least two different fabric types. In the example of , the host computer () is adapted to accelerator () by an Ethernet fabric () and a PCIe fabric ().",{"@attributes":{"id":"p-0087","num":"0100"},"figref":["FIG. 4","FIG. 4","FIG. 4"],"b":["110","103","155","152","110","154","152","142","166","146","145","146"]},"Each x86 processor core () in the example of  is adapted through an Ethernet () and PCIe () fabric to a separate accelerator () implemented as a CBE as described above with respect to . Each core () of each AMD Opteron processor () in the host computer () in this example is connected to at least one CBE. Although in this example the ratio of cores of the Opteron processors to CBEs () is one-to-one, readers of skill in the art will recognize that other example embodiments may implement different ratios of processor cores to accelerators such as, for example, one-to-two, one-to-three, and so on.","Each instance of the SLMPM () executing on each x86 processor core () in the example of  processes data in the hybrid computing environment () according to embodiments of the present invention by monitoring data communications performance across data communications modes between the host computer () and the accelerator () connected to the processor core (); receiving, from the instance of the application program () executing on the processor core () of the host computer (), a request to transmit data according to a data communications mode from the host computer () to the accelerator () connected to the processor core (); determining, in dependence upon the monitored performance, whether to transmit the data according to the requested data communications mode; and if the data is not to be transmitted according to the requested data communications mode: selecting, in dependence upon the monitored performance, another data communications mode for transmitting the data and transmitting the data according to the selected data communications mode.","Software development for the hybrid computing environment () in the example of  may be carried out according to embodiments of the present invention by creating, by a programmer, a computer program for execution in the hybrid computing environment, the computer program including, along with computer program instructions, directives for generation of computer program code that moves contents of memory, across at least one of the data communications fabrics, among host computers () and accelerators () in the hybrid computing environment (); generating, by a code generator application, source code in accordance with the directives; analyzing, by the code generator application, operation of the generated code for data movement and utilization of moved data; and regenerating, by the code generator application, the source code in accordance with the directives and further in accordance with results of the analysis.","For further explanation,  sets forth a flow chart illustrating an exemplary method of software development for a hybrid computing environment according to embodiments of the present invention. In the method of  software is developed for a hybrid computing environment similar to the hybrid computing environments described above in this specification. Such a hybrid computing environment includes a host computer ( on ) having a host computer architecture and an accelerator ( on ) having an accelerator architecture, the accelerator architecture optimized, with respect to the host computer architecture, for speed of execution of a particular class of computing functions, the host computer ( on ) and the accelerator ( on ) adapted to one another for data communications by an SLMPM ( on ) and by two or more data communications fabrics (,  on ) of at least two different fabric types.","The method of  includes creating (), by a programmer (), a computer program () for execution in the hybrid computing environment. In the method of , the computer program () includes, along with computer program instructions (), directives () for generation of computer program code () that moves contents of memory, across at least one of the data communications fabrics, among host computers and accelerators in the hybrid computing environment. The method of  also includes generating (), by a code generator application (), source code () in accordance with the directives (). In the method of , generating () source code () in accordance with the directives () includes generating () the source code () in dependence upon the types of data communications fabric that adapt the host computers and the accelerators. The method of  also includes analyzing (), by the code generator application (), operation of the generated code () for data movement and utilization of moved data. The method of  also includes providing (), by the code generator application (), the results () of the analysis () to the programmer () and altering () by the programmer () the directives () in the computer program () to optimize the movement of data and the utilization of the moved data. The method of  also includes regenerating (), by the code generator application (), the source code () in accordance with the directives () and further in accordance with results () of the analysis ().","Exemplary embodiments of the present invention are described largely in the context of software development for a fully functional hybrid computing environment. Readers of skill in the art will recognize, however, that method aspects of the present invention also may be embodied in a computer program product disposed on signal bearing media for use with any suitable data processing system. Such signal bearing media may be transmission media or recordable media for machine-readable information, including magnetic media, optical media, or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes, compact disks for optical drives, magnetic tape, and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as, for example, Ethernets\u2122 and networks that communicate with the Internet Protocol and the World Wide Web. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that, although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware, nevertheless, alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.","It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
