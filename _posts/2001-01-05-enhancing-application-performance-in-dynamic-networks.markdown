---
title: Enhancing application performance in dynamic networks
abstract: A method and device are disclosed that enable a user to experience continuity by alleviating blocking of an application by a slow or failure-prone connection. The method includes dissociating the user interface from an application-client managing communications with a server over the dynamic connection. Furthermore, the application-client caches user input for later actions using an asynchronous mechanism to enable the user to work with little interruption. Furthermore, adjustable frame sizes based on the error rate and bandwidth-delay increase throughput. Data retransmission is reduced by maintaining state information for the client and the server so that a disrupted transaction is resumed at or close to the point of disruption and in response to media sense-events. Consequently, establishing, tearing down and adjusting network connections in response to events such as: high error rates, increasing latency, availability of better alternative connections, or loss of a connection do not interrupt the user's experience.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06862628&OS=06862628&RS=06862628
owner: Microsoft Corporation
number: 06862628
owner_city: Redmond
owner_country: US
publication_date: 20010105
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present generally invention relates to client-server software. More particularly the invention relates to client-server applications operating in networks with failure-prone connections.","Computing is no longer a preserve of traditional computers, but instead includes portable computing devices capable of establishing connections to other devices. Such portable computing devices include operating systems supporting applications providing desired functionality to users. However, networking-capable portable computing devices suffer from failure-prone network connections. This is particularly true of devices utilizing wireless connections. Such failure-prone transient connections are termed dynamic connections.","Wireless dynamic connections include symmetric or asymmetric connectivity to a base station, which is also termed an access point (\u201cAP\u201d). In typical asymmetric connections the forward link (from the base station to the device) bandwidth is larger than the reverse link (from the device to the base station) bandwidth. In contrast, symmetric connections have equal bandwidth available in both the forward and the reverse link. Performance of applications communicating over wireless connections typically depends on available bandwidth, the bit error rates (\u201cBER\u201d) encountered and the end-to-end latency that may range from the order of few or 10s of milliseconds to the order of 100s of milliseconds.","A measure of the effectiveness of an application using a wireless connection is the amount of data transmitted across the connection in the course of timely completion of an assigned task. The time taken to transmit data, which is an indicator of application performance, depends on the amount of data, the availability of suitable connections and the error rate in transmitting data. High error rates require significant retransmission of data-packets, thus slowing down the application. The amount of data is determined by not only the data generated by the application, but also by the need to package the data into data packets. Header information encapsulates each data packet and enables routers to direct the data packet to a suitable target. Once received, the data packets are processed using the header information to extract and reconstitute the data from the data-packets.","Many computing devices allow selection of a suitable connection to other devices or network by sensing the available connections. Some devices select one or more suitable connections for a task at hand. Devices capable of discovering and responding to the nature and state of their connections are said to provide a \u201cmedia-sense\u201d property. Devices with media-sense make a user's computing experience less intimidating if selecting suitable connections, establishing connections and monitoring the connections is transparent to the user. Naturally, applications providing pervasively used functionality such as email and web browsing benefit by being media-sense aware.","Devices that are not media-sense aware merely fail when a connection fails. This failure may be limited to an application using the failed connection or may result in the need to reboot the entire device or at the least reinitializing\/relaunching the application. Media-sense aware devices, on the other hand, actually monitor connections or save the state of the machine to allow the user to continue while alternative connections are explored and established. Even more sophisticated media-sense aware devices not only try alternatives, but also compare the available connections to choose the optimal connection.","Media-sense aware devices exhibit client-server interactions in that one device, the client, requests data or services from the other device, the server. Examples of applications providing client-server interactions include \u201cOUTLOOK\u00ae\u201d manufactured by MICROSOFT CORPORATION\u00ae of Redmond, Wash. \u201cOUTLOOK\u00ae\u201d provides users with email, organizer, calendar services and the ability to customize user experience. \u201cOUTLOOK\u00ae\u201d assumes the availability of reliable static connections for its operations. Accordingly, using dynamic connections compromises OUTLOOK\u00ae's performance due to dynamic connections' failure-prone transient nature.","However, media-sense devices are not enough for effective client-server application operation in a dynamic computing environment. In addition to broken dynamic connections, computing environments present problems relating to bandwidth limitations, computational resource limitations and security needs\/requirements. Furthermore, dynamic computing environment applications are not expected to compromise on the functionality provided to the users such as ready access to stock information, voice mail, chat rooms and the like\u2014and all while on the go.","In view of the foregoing, the present invention comprises a method and system for providing connectivity in client-server applications using a dynamic connection to other devices. The invention enables a user to experience continuous service despite changes to the link including failure of the dynamic connection resulting in a loss of network connectivity in the interim period.","Briefly, the invention includes steps for alleviating blocking of an application by a slow or failure-prone dynamic connection. The steps include dissociating the application into at least a user interface and an application-client. The application-client manages communications with a server over the dynamic connection. Furthermore, the application-client stores user input for later actions if a satisfactory connection to the server is unavailable.","An embodiment of the invention utilizes an asynchronous mechanism (allowing servicing requests in an out-of-order manner) instead of a customary synchronous design (in-order servicing of requests) for client server interactions across a dynamic connection. This design, in effect, dissociates the front-end user interface from the underlying client-server interactions by allowing each to function independently. Consequently, a user working on a variety of tasks does not confront a stalled system or unpredictable latency due to lost or dropped connections.","The invention also reduces the overhead and, consequently, the need for additional bandwidth in transactions over the dynamic connection by tailoring the data-packet frame size based on the error rate in transmitting data on the dynamic connection. Furthermore, overall data transmission volume is reduced by avoiding repeated transmission of the same data due to interruptions caused by failure of the dynamic connection.","The reduction in transmitted data is achieved, in part, by maintaining state information for the client and the server during a client-server transaction. Conveniently, a transaction refers to data transfers between the client and the server following which the state of the client and the server is reinitialized since no sub-components remain to be transmitted. The saved state information allows resuming a disrupted transaction at or close to the point where the disruption occurred rather than repeating the entire transaction.","Furthermore, in an embodiment of the invention client-server interactions are transparently adjusted in response to media sense-events. Consequently, establishing, tearing down and adjusting network connections in response to events such as high error rates, increasing latency, availability of better alternative connections or loss of a connection do not interrupt the user's experience.","Additional features and advantages of the invention will be made apparent from the following detailed description of illustrative embodiments, which proceeds with reference to the accompanying figures.","The invention described herein in detail alleviates blocking of an application by a slow or failure-prone dynamic connection. In accordance with the invention, at least a user interface part and an underlying application-client, obtained in part by dissociating the application, allow implementation of an asynchronous link between a server and the application-client over the dynamic connection. By way of example, the computing environment is similar to that illustrated in , although  is not a limitation on the claimed invention. Furthermore, advantageously, this design dissociates the front-end user interface from the underlying client-server interactions by allowing each to function independently. Consequently, a user working on a variety of tasks does not confront a stalled system or unpredictable latency due to lost or dropped connections.","Turning to the drawings, wherein like reference numerals refer to like elements, the invention is illustrated as being implemented in a suitable computing environment. Although not required, the invention will be described in the general context of computer-executable instructions, such as program modules, being executed in a computing environment. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multi-processor systems, microprocessor based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.",{"@attributes":{"id":"P-00030","num":"00030"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general-purpose or special-purpose computing system environments or configurations. Examples of well-known computing systems, environments, and configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, and distributed computing environments that include any of the above systems or devices.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc., that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general-purpose computing device in the form of a computer . Components of the computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus, also known as Mezzanine bus.","The computer  typically includes a variety of computer-readable media. Computer-readable media can be any available media that can be accessed by the computer  and include both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer-readable media may include computer storage media and communications media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules, or other data. Computer storage media include, but are not limited to, random-access memory (RAM), read-only memory (ROM), EEPROM, flash memory, or other memory technology, CD-ROM, digital versatile disks (DVD), or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage, or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by the computer . Communications media typically embody computer-readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communications media include wired media such as a wired network and a direct-wired connection and wireless media such as acoustic, RF, optical, and infrared media. Combinations of the any of the above should also be included within the scope of computer-readable media.","The system memory  includes computer storage media in the form of volatile and nonvolatile memory such as ROM  and RAM . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within the computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and program modules that are immediately accessible to or presently being operated on by processing unit . By way of example, and not limitation,  illustrates an operating system , application programs , other program modules , and program data . Often, the operating system  offers services to applications programs  by way of one or more application programming interfaces (APIs) (not shown). Because the operating system  incorporates these services, developers of applications programs  need not redevelop code to use the services. Examples of APIs provided by operating systems such as Microsoft's \u201cWINDOWS\u201d are well known in the art.","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk interface  that reads from and writes to non-removable, nonvolatile magnetic media, a magnetic disk drive , which may be internal or external, that reads from and writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from and writes to a removable, nonvolatile optical disk  such as a CD ROM. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, DVDs, digital video tape, solid state RAM, and solid state ROM. The hard disk drive , which may be internal or external, is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer-readable instructions, data structures, program modules, and other data for the computer . In , for example, hard disk drive  is illustrated as storing an operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from the operating system , application programs , other program modules , and program data . The operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that they may be different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball, or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, and scanner. These and other input devices are often connected to the processing unit  through a user interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port, or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device, or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in FIG. . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or via another appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in a remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device , which may be internal or external to the remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","In the description that follows, the invention will be described with reference to acts and symbolic representations of operations that are performed by one or more computers, unless indicated otherwise. As such, it will be understood that such acts and operations, which are at times referred to as being computer-executed, include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains them at locations in the memory system of the computer, which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures where data are maintained are physical locations of the memory that have particular properties defined by the format of the data. However, while the invention is being described in the foregoing context, it is not meant to be limiting as those of skill in the art will appreciate that various of the acts and operations described hereinafter may also be implemented in hardware.","Dynamic networks typically include failure-prone transient links, also termed dynamic connections. Consequently applications operating in a dynamic network frequently encounter dynamic connection failures or changes in a dynamic connection being used by a particular application. Mobile computing units connecting to a network via a wireless connection provide a familiar example of a dynamic connection and the associated challenges.","Various wireless networks support connections spanning a broad range of data transfer rates and offer flexibility to mobile users. Furthermore, wireless connections can be made secure with support for authentication and encryption to make them suitable for handling restricted information. Secure wireless connections employ encryption based on symmetric or asymmetric keys. However, wireless network connections, apart from their bandwidth limitations, also exhibit frequent failures. Commonly these failures reflect conditions such as high error rates, low signal strength and the like. These observations are used to devise devices, methods and systems suited for operation in dynamic networks in accordance with this invention.",{"@attributes":{"id":"P-00043","num":"00043"},"figref":["FIG. 2","FIG. 1"],"b":["200","205","110","210","215","215","205","200","225","215","205","225","205","205","225","225","210","215","210"]},{"@attributes":{"id":"P-00044","num":"00044"},"figref":["FIG. 3","FIG. 3"],"b":["300","305","300","310","315","300","310","320","320","330","300","325","305","300","325","335","305","325","335"]},"Applications, including those using dynamic connections, have at least one user interface for interacting with human users. Of course, it is possible that an application may lack a user interface if there is little need to directly interact with a human user. In general the user interface is used to obtain user input from a user and provide output to the user. Furthermore, many applications communicate over the network with other applications to obtain data and services in response to such user input.","Applications need to access the network in order to obtain a requested service or data. Such requests are often communicated through Remote Procedure Calls (\u201cRPCs\u201d). Applications at the remote computer see the request as being submitted from a local software module while the application making the request sees the request as being to a local software module. Requests for the remote services are redirected using RPC stubs and RPC runtime to the appropriate computer. Such requests are sent over the network with additional encapsulation of the packets to ensure handling of the requests as RPCs, thus adding to the overhead and consuming bandwidth. Furthermore, several requests can be combined into a single RPC.","In an embodiment of the invention, an application using RPC to primarily data framing, flow control and retransmission of frames instead uses the TCP framing, flow controls and retransmission mechanisms. In addition, TCP\/IP provides for flexible frame sizes specified to maximize throughput and helps avoid the overhead of yet another protocol.","A common design for applications utilizes a message loop. A message loop requires sending the result of a performed requested task to the requesting software module upon completing the task.  depicts these steps in an exemplary message loop . A user input  to a user interface  generates one or more events with the aid of other software modules . The generated events result in an initial message  being passed to an event-handling module , which either alone or in combination with other software modules generates an outcome . The originating module, i.e., the user interface , receives the outcome  via a confirmation message  that confirms the initial message has been acted upon.","Handling a user input refers to completing the message loop. For example, an application processing user input for sending an email generates a message corresponding to complete transmission of the email to complete the message loop. User requests may result in more than one message loop being generated as software modules interact with each other. All of the message loops are completed with the handling of events associated with the user requests.","Applications using a synchronous design for some or all of their internal transactions are subject to blocking if the message loop is not completed. In other words, a synchronous application waits for the message loop to complete prior to executing another task. An asynchronous application executes other tasks while a message loop completed. The completion of the message loop is communicated to the asynchronous application by suitable interrupts or detected by the asynchronous application using a polling strategy or other techniques favored by the application's developer.","Failure to complete a message loop in a synchronous application results in the user encountering a non-responsive user interface while the application waits for the message loop to complete. This block occurs, for instance, if a dynamic connection fails and results in delay or failure to complete a request to send an email. The application is unable to process additional requests until the block is cleared. Thus, a failed or slow dynamic connection introduces substantial delays and performance loss by blocking the application while attempting to complete the request.",{"@attributes":{"id":"P-00052","num":"00052"},"figref":"FIG. 5","b":["500","500","505","510","515","500","515","535","515","520","525","515","505","505","515","505","515","515"]},"Application-client  manages communications via the dynamic connection  to the server  in an asynchronous manner. Thus, the application-client  caches the task requiring communication with the server  in the store  if the dynamic connection  is not available. Upon availability of the dynamic connection , the application-client  sends or receives the necessary services or data from the server . While executing a task, the application-client  also continues to cache additional input from the user interface . This design leaves the user interface  available to the user for executing additional requests. Even in this asynchronous implementation, in some embodiments, requests requiring data or services from the server  prior to accepting another user input can result in blocking the user interface . However, such blocking is not due to the application waiting for a message loop to complete. Instead, the application is waiting for an event, which in this case is the required information from the server. In general, such an event is not due to a prior action taken by the application.","The media sense module  provides the application-client  with information about available connections to the server . In general, the media sense module  responds to cessation of traffic on the link underlying the dynamic connection . In addition, it can respond to the error rate or latency over the dynamic connection . In an embodiment of the invention, the media sense module  selects a better connection than the dynamic connection  if a better connection is available. The media sense module  can participate in establishing a new connection, negotiating a frame size for packets sent over an available connection and generating events allowing other modules to respond. Thus, when the dynamic connection  fails, the media sense module  flags the failure and generates an event. This event causes the application-client  to abort the current action over the dynamic connection  and cache the aborted action in the store . Further details on the variations possible with media sense aware computing machines are described in the United States patent application titled \u201cSystem and Methods for Resynchronization and Notification in Response to Network Media Events,\u201d having the Ser. No. 09\/652,501 (attorney docket number 205238), filed on Aug. 31, 2000. This application, also assigned to the assignee of this application, is incorporated herein by reference in its entirety.",{"@attributes":{"id":"P-00055","num":"00055"},"figref":"FIG. 6","b":["600","605","610","615","615","620","625","630","635","600","605","610","615"]},{"@attributes":{"id":"P-00056","num":"00056"},"figref":"FIG. 7","b":["700","705","705","710"]},"Another embodiment of the invention allows the application to communicate with the application-client, with the application-client simulating the server to the application. Such an implementation facilitates modification of preexisting applications to accommodate the asynchronous connectivity between the application-client and the server. The changes required in the application itself include recognizing that a non-responsive server does not necessarily translate into a lost or disrupted connection requiring a fresh start in the transaction or a hung application. Instead, the modified application recognizes that it has to wait before it can synchronize with the server and thus proceeds with other tasks.","During step  a determination, usually by the application-client, is made whether a dynamic connection is available. In an embodiment of the invention a media sense module makes the determination. If a suitable connection is not available during step  the application-client caches the interrupted action for later attempts. On the other hand, if a connection is available then the media sense module evaluates the change in error rate during step . In an embodiment of the invention if the error rate, often termed the bit error rate (\u201cBER\u201d), is higher or lower than a threshold then during step  the application-client negotiates a new frame size for the data packets. Typically, a smaller frame size is preferable for communications over high BER connections to reduce the volume of retransmitted data. On the other hand, a greater number of packets are needed with a concomitant increase in the overhead. Alternatively, if the BER does not change appreciably, then, during step  data packets continue to conform to the current frame size. Moreover, frame size adjustments made in response to factors such as estimated bandwidth-delay, due to link and network congestion, reduce the effect of interrupted packets on the throughput. And, in an embodiment of the invention the frame size adjustment is made during a data transmission.",{"@attributes":{"id":"P-00059","num":"00059"},"figref":"FIG. 8"},"However, a server can provide a description of the state of the information to the client application, e.g., a folder comprising several items, uploaded by the client. Such a description by way of example includes a time stamp and a description of the state of data that the application-client need not understand. At a subsequent time point, if the application-client accesses that information again, then the server obtains the description of the state of the information uploaded by the client to enable the server to provide only the updated or changed information. For instance, if an item was deleted then the application-client is provided with that information and it updates its version by deleting the item. Similarly, if another item was added or modified then the application client uploads the new version of the item to update its folder. At the conclusion of-the transaction, the server provides the application client a modified description of the state of the information uploaded by the client reflecting the current state of the information. Naturally, accessing the server repeats this process for the particular folder. Further discussion and details on synchronizing asynchronous connections are provided in the U.S. patent application Ser. No. 09\/412739 filed on Oct. 4, 1999, which is incorporated herein by reference in its entirety.","An embodiment of the invention includes tracking the state of the application-client and the server. The media sense module identifies a connection for data transmission during step . Step  includes organizing the data to be transmitted into functional segments. This organization advantageously reflects a structure of the data to be transmitted. As an example, emails include attachments, thus each attachment and the email body are treated as discrete functional segments. Functional segments needing to be transmitted describe the state of the application-client or server during step . Alternatively, the transmitted functional segments describe the state of the application-client.","There are many ways to track a particular transaction. For instance a unique identifier is assigned to the transaction. When another connection is established, the server identifies the received functional segments belonging to the transaction using the unique identifier of the disrupted previous transaction. Furthermore, the application-client tracks the state of the server in the context of an identifiable transaction. The server is then freed from maintaining state information for each transaction, and remains responsive as a consequence. Upon reconnecting to a server during step , the application-client transmits only those functional segments that were not transmitted earlier. Alternatively, during step  the application-client requests functional segments not already present on the client machine from the server. It is noted that alternative embodiments wherein the sever tracks the server state are also intended to be within the scope of the invention.","During step , the application-client saves the state information for the application-client and the server. In addition, the application-client updates the state information during step . Advantageously the application-client performs this updating upon successfully transmitting a functional segment. During step  the application-client makes a determination as to whether all of the functional segments have been transmitted. During step , upon successful transmission of the functional segments in the transaction the application-client completes the transaction. The application-client removes corresponding entries from the cache and undertakes subsequent actions. Otherwise control returns to step  to transmit the remaining functional segments.",{"@attributes":{"id":"P-00064","num":"00064"},"figref":"FIG. 9","b":"900"},"During step , identification of locally available functional segments overcomes these problems. Step  includes determining functional segments to be transmitted across the connection. During step , the application-client or the server transmits the required functional segments. The state of the application-client and the server is saved during step  and updated during step . During step  the application-client or the server makes a determination as to whether all of the functional segments have been transmitted. If all functional segments have been transmitted the transaction concludes during step . Otherwise control returns to step  to transmit the remaining functional segments.",{"@attributes":{"id":"P-00066","num":"00066"},"figref":"FIG. 10"},"During step  the media sense module determines an error rate for a particular dynamic connection. The application-client identifies a frame size corresponding to the error rate during step . During step  the server and the application-client negotiate a new frame size if the currently used frame size is not suitable for the measured error rate. During step  the server and the application-client transmit data packets using the frame size agreed upon during the negotiations in step . Periodically, as depicted during step , the media sense module re-measures the error rate. If the error rate has changed significantly the measurement results in a re-negotiation of the frame size. This is a very real possibility with wireless connections. In an embodiment of the invention, the media sense functionality flags drastic changes in error rates. During step  the new error rate is compared to a threshold. If the error rate exceeds or equals the threshold then a smaller frame size is negotiated and the control passes to step . Of course, the application-client and the server attempt to change the frame size only if the protocol allows for different frame sizes to be used. If the error rate is less than the specified threshold then it is compared to another threshold during step . If the error rate is greater than the other threshold then control passes to step . Otherwise, control passes to step , and the server and the application-client negotiate a larger frame size followed by control passing to step . If the threshold exceeds the error rate during step , then control passes to step  and the application-client continues to use the current frame size and control returns to step . As explained above, step  includes transmitting additional data packets using the agreed upon frame size.","In view of the many possible embodiments to which the principles of this invention may be applied, it should be recognized that the embodiments described herein with respect to the drawing figures is meant to be illustrative only and should not be taken as limiting the scope of invention. For example, those of skill in the art will recognize that the elements of the illustrated embodiment shown in software may be implemented in hardware and vice versa or that the illustrated embodiment can be modified in arrangement and detail without departing from the spirit of the invention. Therefore, the invention as described herein contemplates all such embodiments as may come within the scope of the following claims and equivalents thereof."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["While the appended claims set forth the features of the present invention with particularity, the invention, together with its objects and advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings of which:",{"@attributes":{"id":"P-00018","num":"00018"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00019","num":"00019"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00020","num":"00020"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00021","num":"00021"},"figref":"FIG. 4"},{"@attributes":{"id":"P-00022","num":"00022"},"figref":"FIG. 5"},{"@attributes":{"id":"P-00023","num":"00023"},"figref":"FIG. 6"},{"@attributes":{"id":"P-00024","num":"00024"},"figref":"FIG. 7"},{"@attributes":{"id":"P-00025","num":"00025"},"figref":"FIG. 8"},{"@attributes":{"id":"P-00026","num":"00026"},"figref":"FIG. 9"},{"@attributes":{"id":"P-00027","num":"00027"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
