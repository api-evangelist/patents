---
title: Translation of programming code
abstract: Embodiments of the invention may provide methods and/or systems for converting a source application to a platform-independent application. Source programming language code of the source application may be translated to target programming language code of the platform-independent application. The source programming language code may comprise Connected Limited Device Configuration (CLDC) code, and the platform-independent programming language may be independent of one or more device platforms. Further, one or more source resources associated with the source application may be converted to one or more target resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08762963&OS=08762963&RS=08762963
owner: Beck Fund B.V. L.L.C.
number: 08762963
owner_city: Dover
owner_country: US
publication_date: 20091204
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENTS OF THE INVENTION"],"p":["This application draws priority from U.S. Provisional Patent Application No. 61\/200,931, filed on Dec. 4, 2008, and hereby incorporated by reference herein in its entirety.","Embodiments of the invention may generally relate to programming language code translation and more specifically to translation of Connected Limited Device Configuration (CLDC) programming language code.","Various users across the globe communicate or perform various activities on computer and device networks. Moreover, the users interact with each other through the networks, such as the Internet. Typically, the users use devices like personal computers to interact over the Internet. The users can interact from various Internet websites or social networking sites, for example, Facebook, Myspace, Hi5, and Orkut etc. Recently, the development in mobile devices such as cell phones, smartphones and PDAs, computers, laptops and the like has enabled them to be used for performing various activities on networks such as the Internet. Moreover, the mobile devices can be used for real-time interaction with other users on the network. The interaction or communication can be in the form of chatting, playing interactive online games, browsing, shopping, music, video, banking, business and the like.","The rapid pace of innovation in technology has generated various types of devices and platforms. Moreover, the number of devices is increasing rapidly. For example, there are various operating systems available for the devices such as Windows, Linux, Macintosh, and Symbian, etc. Moreover, a large number of J2ME platforms are available for the mobile devices such as cell phones. Furthermore, the mobile devices have a wide rage of capabilities in terms of screen size, screen type, screen resolution, processor, and memory etc. The applications for these devices have to be developed based on their platforms. Therefore, each application has to be ported to other platforms. For example, in case of computer games the programming languages typically used are JAVA, C#, C++, Action Script, and the like. Therefore, an application developed in Action Script programming language may have to be ported to other programming language when not supported by a device platform. Further, new applications are being continuously developed for different device platforms.","Typically, the programming code of an application is translated manually from one programming language to another. However, manual translation requires specific and in-depth knowledge of the programming languages of the different operating systems. Moreover, manual translation is a very time consuming process. Furthermore, the programming languages are constantly developed or get modified. Moreover, the applications have to be developed on specific development platforms compatible with the programming language used for development and the operating system of a device. As a result, a completed revision of the application code may be required to make the interaction possible. Some mechanisms, such as emulation of applications, are available to support multiple devices. However, the existing mechanisms generate application program codes that are large or require heavy processing time. The problem is compounded with the continuously increasing number of device platforms and technology.","Various media applications on devices such as mobile phones are developed using the CLDC. CLDC is a specification of a framework for Java\u2122 Micro Edition (ME). JAVA\u2122 ME applications are targeted at devices that have limited resources. Examples of such devices include mobile phones. Generally, the configuration of devices, such as mobile phones, may vary by device type, capabilities, operating system, qualities, characteristics, electronics, communications, media capabilities and so forth. Moreover, native applications are typically pre-installed in the devices, cannot be removed, and are ready to run. Some of the applications are always running while others are started by the user via the menu. Users are able to further customize their mobile devices by loading additional applications (e.g., instant messaging, games, etc.) onto these devices.","Porting or translation of these applications to new or different devices generally requires manual porting for each specific device. However, the process of manual porting is difficult and slow. Moreover, the manual process is not efficient with the rapid development pace of new devices, platforms and capabilities.","A mechanism is therefore desirable to translate the CLDC programming language code of an application into a target programming language code based on target device platform.","Various embodiments of the invention may provide a method for converting a source application to a platform-independent application. The method may comprise translating source programming language code of the source application to target programming language code of the platform-independent application, wherein the source programming language code may comprise Connected Limited Device Configuration code, and wherein the target programming language is independent of one or more device platforms. Further, the method may comprise converting one or more source resources associated with the source application to one or more target resources.","Embodiments of the invention may further provide an apparatus for converting a source application to a platform-independent application. The apparatus may comprise a code transformer configured to translate source programming language code of the source application to target programming language code of the platform-independent application, wherein the source programming language code may comprise Connected Limited Device Configuration code, and wherein the platform-independent programming language is independent of one or more device platforms; and a resource converter configured to convert one or more source resources associated with the source application to one or more target resources.","Some embodiments of the invention may further provide a system for converting a source application to a platform-independent application. The system may comprise means for translating source programming language code of the source application to target programming language code of the platform-independent application, wherein the source programming language code may comprise Connected Limited Device Configuration code, and wherein the platform-independent programming language is independent of one or more device platforms; and means for converting one or more source resources associated with the source application to one or more target resources.","Some embodiments of the invention may further provide a computer-readable medium having computer-executable instructions for performing a method for converting a source application to a platform-independent application. The method may comprise translating source programming language code of the source application to target programming language code of the platform-independent application, wherein the source programming language code may comprise Connected Limited Device Configuration code, and, wherein the platform-independent programming language is independent of one or more device platforms; and converting one or more source resources associated with the source application to one or more target resources.","Illustrative embodiments of the technology now will be described more fully hereinafter with reference to the accompanying drawings, in which some, but not all embodiments of the technology are shown. Indeed, the technology may be embodied in many different forms and should not be construed as limited to the embodiments set forth herein; rather, these embodiments are provided so that this disclosure will satisfy applicable legal requirements. Like numbers refer to like elements throughout.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 1","FIG. 1"],"b":["108","108","108","108","108","108","108","108","108"],"i":["a","b","c ","n ","a","n ","a","n ","a","n ","a","n ","a","n"]},"As shown in , a source application  comprises programming language source code and resources for source application  to execute on devices -. Source application  is hereinafter referred to as source . Examples of applications include a game, a message, a calendar, an address book, a notepad, a user interface and\/or other applications. Source  may comprise Connected Limited Device Configuration (CLDC) code. CLDC is a subset of JAVA\u2122 programming language class libraries. The subset of class libraries provides the minimum amount of functionality required for operating a Java\u2122 Virtual Machine (JVM) on devices -. Specifically, CLDC is a specification of a framework for Java\u2122 Micro Edition (ME) applications that are targeted at devices with very limited resources such as, but not limited to, pagers and mobile phones. As discussed above, devices -can vary based on device types, capabilities, OS, qualities, characteristics, electronics, communications, and\/or media capabilities. Therefore, porting of applications developed with CLDC code to new devices may require manual porting for each specific device, and this process may not be efficient.","Translator  may translate source  to a platform-independent application that can be easily ported to devices -based on their platforms. The functional overview of an embodiment of translator  is further explained in conjunction with . The code and resources of the platform-independent application can then be used by application development framework  for rapid platform independent application development, without the need for an application developer to each know platform. Application development framework  may provide a framework for developing applications for devices  across multiple platforms. Therefore, the application developed using application development framework  may only need to be programmed once and can be used on various platforms of devices -. In an embodiment of the invention, application development framework  provides cross-translation of programming languages for various platforms. In another embodiment of the invention, application development framework  may enable applications to be developed based on platform specific requirement and platform independent requirements. Therefore, the complexity of the programming code and development time can be reduced. In an embodiment of the invention, application development framework  provides Application Programming Interface (API) for development of applications.","Application development framework  may also include a mapping system between a logical asset and a real asset, which may allow the cross platform use of an asset inside a generic code. Therefore, two different platforms that share the same screen family\/resolutions may be able to use exactly the same assets. As a result, the application may look identical on platforms of devices -, unless an application developer wishes to customize the look or a graphical user interface for a specific platform. Therefore, a content interface may be configured to provide an application programming interface for developing an application. An application environment may be configured to handle requests from the application and one or more plug-in interfaces may be configured to provide interface between the application environment and the one or more plug-ins. Exemplary architecture and functionality of application development framework  is discussed in U.S. patent application Ser. No. 12\/483,598, filed on Jun. 12, 2009, which is incorporated herein by reference.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["204","204","204","104","204","102","204","106","202"]},"Target application  may comprise various elements such as, but not limited to, graphics, input, networking, tools, and files. Emulator  may emulate elements of target application  converted from source  by translator . For example, the networking requirements of source  can be directly mapped to networking functionality of target application . In an embodiment of the invention, emulator  is a module in application development framework  and is implanted as a layer. Therefore, the complete functionality of source  can be presented on devices -with different platforms. In an embodiment of the invention, emulator  can be reused for each different source  application. Emulator  may act as a bridge between source  calls and application development framework  calls. Therefore, platform-independent application  can be used by application development framework  without losing the functionality, look and feel of the application.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 3","FIG. 1"],"b":["102","204","104","102","204","204","106","108"],"i":["a","n. "]},"Source  may comprise source programming language code , source resources , and configuration . Source programming language code is hereinafter referred to as source code . The programming language for source code can be, for example, but is not limited to, JAVA\u2122 programming language. Source resources may comprise various resources that can be used by source , for example, but not limited to, images, sounds, videos, and so forth. Configuration comprises the configuration data for source . Configuration may include data that define the settings and configuration of source . For example, in case of an online application, configuration can be connection string, refresh times and so forth.","Target application  may generally comprise target code and target resources . Target application  is compatible with application development framework , which may, in turn, translate it to platform specific source for devices -. The operational overview of an embodiment of the translation of source  to target application  is explained in detail in conjunction with .",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 4","FIG. 4"],"b":["104","104","402","404","412"]},"According to the embodiment shown in , code transformer  converts source code to target code . Code transformer  may comprise a Document Object Model (DOM) constructor , an environment DOM constructor , and an emitter . Resource converter , as shown in , converts source resources to target resources of target application . In an embodiment of the invention, target resources are maintained in a single lossless format. For example, images may be maintained in a PNG format. The images in resources may be transformed to a single standard format, such as PNG format irrespective of the original format.","DOM constructor  generates a Document Object Model (DOM) for the source code . A DOM is a hierarchical representation of the fundamental language construct relationships. DOM constructor  uses, for example, in the case in which the source code comprises CLDC code, CLDC semantics for syntactic analysis of source code . CLDC semantics include grammar rules for generation of DOM. In an embodiment of the invention, DOM constructor  functions recursively to generate the DOM. An exemplary functional overview of DOM constructor  is explained in conjunction with . In an embodiment of the invention, source code includes various files of information and code, such as text. Environment DOM constructor  generates a collection of DOM for the files in source code . The collection of DOM is hereinafter referred to as the environment DOM.","Emitter  may then transform the environment DOM to target code . The format of target code may be, for example, a text format. Target code is independent of platforms of devices -. In an embodiment of the invention, emitter  transforms the environment DOM by using a depth first search algorithm; however, the invention is not thus limited. Target code and target resources are used by application development framework  to automatically generate native application code for devices -. Further, a configuration module  may provide configuration to target application . Configuration may comprise various configurations of source  that are used by target application .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 5","b":["406","302","302","302","502","502","406","502","302"],"i":["a","a ","a","a"]},"Identifier: is a sequence of letters \u2018a\u2019-\u2018z\u2019 or \u2018A\u2019-\u2018Z\u2019.","Assignment operator: is the character \u2018=\u2019","Addition operator: is the character \u2018+\u2019","Semicolon: is the character \u2018;\u2019","Number: is a sequence of characters \u20180\u2019-\u20189\u2019","In such an exemplary embodiment, every time a regular expression rule is completed, a new token is added to list of tokens . In an embodiment of the invention, DOM constructor  is a lexical analyzer.","In an embodiment of the invention, list of tokens  comprises columns of token list and token type list . Token list comprises the tokens generated from stream of characters of source code . Token type list comprises the descriptions for the types of tokens. Tokens in list of tokens  may be categorized based on blocks of text that may be obtained from portions of the source code. Referring to list of tokens , the token \u2018Sum\u2019 in tokens is defined as an \u2018identifier\u2019 in type list . Similarly, the complete programming code of the source code programming language can be processed to form a list of tokens. Subsequently, list of tokens  is processed by DOM constructor  to generate Document Object Model (DOM) .","DOM  is a grammatical data structure and defines the relationships among the tokens in list of tokens . DOM constructor  analyzes syntactically list of tokens  to generate DOM . In an embodiment of the invention, DOM  generates DOM  based on grammar rules defined for syntactic analysis. Exemplary rules may include:","Assignment Statement\u2190Identifier=Expression;","Expression\u2190Literal OR Binary Expression;","Binary Expression\u2190Expression Operator Expression; and\/or","Literal\u2190Number OR Identifier.","The arrows in the above rules indicate the direction of the pattern matching reduction. Therefore, based on the above example, a statement such as \u2018Sum=2+3\u2019 is termed as an assignment statement. Similarly, based on the above rules, the statement \u20182+3\u2019 is termed as a Binary Expression.","In an embodiment of the invention, the grammar rules can be recursive. Therefore, one or more rules may be applied recursively to prepare DOM . As shown in , DOM  comprises nodes -. Nodes -represents a hierarchical data structure of source code . For example, in , node represents a binary expression, and nodes , , and comprise numbers and an operator, which are subsets of the binary expression of node . Similarly, various document object models can be constructed based on the files, text or codes in source code . As discussed above, the collection of DOM  is used by environment DOM constructor  to generate the environment DOM. The conversion of source code to environment DOM and subsequently to target code is explained in conjunction with .",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 6","FIGS. 4 and 5"],"b":["302","206","302","406","408","602"],"i":["a ","a ","a "]},"Environment DOM  comprises multiple DOMs -corresponding to the input files. The files DOMs -may be cross-referenced to generate a more accurate final structure referred to as environment DOM .","Environment DOM  is analyzed by emitter  to generate output files of target code . In an embodiment of the invention, the output files correspond to the DOM -. Target code may comprise, for example, a text format. In an embodiment of the invention, target code includes code in object oriented programming languages such as, but not limited to, C++, C#, Java, AS3, and the like.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 7","b":["102","702","302","704","406","302"],"i":["a ","a "]},"Subsequently, at step , document object models may be generated for multiple files in source code and may be collected to generate an environment DOM by environment DOM constructor . The DOMs may be cross-referenced by environment DOM constructor  to generate a more accurate final structure referred to as environment DOM.","At step , the environment DOM may be analyzed by emitter  to generate target code of target application . Resources of source  may be transformed by resource converter  to generate target resources of target application . In an embodiment of the invention, target application  can be used by application development framework  to generate platform specific applications for devices -","Embodiments of the invention are described above with reference to block diagrams and schematic illustrations of methods and systems according to embodiments of the invention. It will be understood that each block of the diagrams and combinations of blocks in the diagrams can be implemented by computer program instructions. These computer program instructions may be loaded onto one or more general purpose computers, special purpose computers, or other programmable data processing apparatus or computing devices to produce machines, such that the instructions which execute on the computers or other programmable data processing apparatus create means for implementing the functions specified in the block or blocks. Such computer program instructions may also be stored in a computer-readable medium, such as a memory, that can direct a computing device or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable medium produce an article of manufacture including instruction means that implement the function specified in the block or blocks. Furthermore, such computer program instructions may be provided for download via a network and\/or may be downloaded via a network.","While the invention has been described in connection with what is presently considered to be the most practical and various embodiments, it is to be understood that the invention is not to be limited to the disclosed embodiments, but on the contrary, is intended to cover various modifications and equivalent arrangements included within the spirit and scope of the appended claims.","This written description uses examples to disclose the invention, including the best mode, and also to enable any person skilled in the art to practice the invention, including making and using any devices or systems and performing any incorporated methods. The patentable scope the invention is defined in the claims, and may include other examples that occur to those skilled in the art. Such other examples are intended to be within the scope of the claims if they have structural elements that do not differ from the literal language of the claims, or if they include equivalent structural elements with insubstantial differences from the literal languages of the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Having thus described the invention in general terms, reference will now be made to the accompanying drawings, which are not necessarily drawn to scale, and wherein:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
