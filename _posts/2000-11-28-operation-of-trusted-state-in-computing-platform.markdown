---
title: Operation of trusted state in computing platform
abstract: A computing entity comprises a trusted monitoring component having a first processing means and a first memory means, the trusted monitoring component being a self-contained autonomous data processing unit, and a computer platform having a main processing means and a main memory area, along with a plurality of associated physical and logical resources such as peripheral devices including printers, modems, application programs, operating systems and the like. The computer platform is capable of entering a plurality of different states of operation, each state of operation having a different level of security and trustworthiness. Selected ones of the states comprise trusted states in which a user can enter sensitive confidential information with a high degree of certainty that the computer platform has not been compromised by external influences such as viruses, hackers or hostile attacks. To enter a trusted state, references made automatically to the trusted component, and to exit a trusted state reference must be made to the trusted component. On exiting the trusted state, all references to the trusted state are deleted from the computer platform. On entering the trusted state, the state is entered in a reproducible and known manner, having a reproducible and known configuration which is confirmed by the trusted component.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07302698&OS=07302698&RS=07302698
owner: Hewlett-Packard Development Company, L.P.
number: 07302698
owner_city: Houston
owner_country: US
publication_date: 20001128
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application is being filed as a continuation of co-pending PCT International Patent Application No. PCT\/GB00\/03613 (filed on 19 Sep. 2000), which PCT application claims priority to EP Application No. 99307380.8 (filed on 17 Sep. 1999).","The subject matter of the present application may also be related to the following U.S. patent applications: \u201cPerformance of a Service on a Computing Platform,\u201d Ser. No. 09\/920,554, filed Aug. 1, 2001; \u201cSecure E-Mail Handling Using a Compartmented Operating System,\u201d Ser. No. 10\/075,444, filed Feb. 15, 2002; \u201cElectronic Communication,\u201d Ser. No. 10\/080,466, filed Feb. 22, 2002; \u201cDemonstrating Integrity of a Compartment of a Compartmented Operating System,\u201d Ser. No. 10\/165,840, filed Jun. 7, 2002; \u201cMultiple Trusted Computing Environments with Verifiable Environment Entities,\u201d Ser. No. 10\/175,183, filed Jun. 18, 2002; \u201cRenting a Computing Environment on a Trusted Computing Platform,\u201d Ser. No. 10\/175,185, filed Jun. 18, 2002; \u201cInteraction with Electronic Services and Markets,\u201d Ser. No. 10\/175,395, filed Jun. 18, 2002; \u201cMultiple Trusted Computing Environments,\u201d Ser. No. 10\/175,542, filed Jun. 18, 2002; \u201cPerforming Secure and Insecure Computing Operations in a Compartmented Operating System,\u201d Ser. No. 10\/175,553, filed Jun. 18, 2002; \u201cPrivacy of Data on a Computer Platform,\u201d Ser. No. 10\/206,812, filed Jul. 26, 2002; \u201cTrusted Operating System,\u201d Ser. No. 10\/240,137, filed Sep. 26, 2002; \u201cTrusted Gateway System,\u201d Ser. No. 10\/240,139, filed Sep. 26, 2002; and \u201cApparatus and Method for Creating a Trusted Environment,\u201d Ser. No. 10\/303,690, filed Nov. 21, 2002.","The present invention relates to the field of computers, and particularly, although not exclusively, to a computing entity which can be placed into a trusted state, and a method of operating the computing entity to achieve the trusted state, and operation of the computing entity when in the trusted state.","Conventional prior art mass market computing platforms include the well-known personal computer (PC) and competing products such as the Apple Macintosh\u2122, and a proliferation of known palm-top and laptop personal computers. Generally, markets for such machines fall into two categories, these being domestic or consumer, and corporate. A general requirement for a computing platform for domestic or consumer use is a relatively high processing power, Internet access features, and multi-media features for handling computer games. For this type of computing platform, the Microsoft Windows\u00ae '95 and '98 operating system products and Intel processors dominate the market.","On the other hand, for business use, there are a plethora of available proprietary computer platform solutions available aimed at organizations ranging from small businesses to multi-national organizations. In many of these applications, a server platform provides centralized data storage, and application functionality for a plurality of client stations. For business use, other key criteria are reliability, networking features, and security features. For such platforms, the Microsoft Windows NT 4.0\u2122 operating system is common, as well as the Unix\u2122 operating system.","With the increase in commercial activity transacted over the Internet, known as \u201ce-commerce\u201d, there has been much interest in the prior art in enabling data transactions between computing platforms over the Internet. However, because of the potential for fraud and manipulation of electronic data, in such proposals, fully automated transactions with distant unknown parties on a wide-spread scale as required for a fully transparent and efficient market place have so far been held back. The fundamental issue is one of trust between interacting computer platforms for the making of such transactions.","There have been several prior art schemes which are aimed at increasing the security and trustworthiness of computer platforms. Predominantly, these rely upon adding in security features at the application level, that is to say the security features are not inherently imbedded in the kernel of operating systems, and are not built in to the fundamental hardware components of the computing platform. Portable computer devices have already appeared on the market which include a smart card, which contains data specific to a user, which is input into a smart card reader on the computer. Presently, such smart cards are at the level of being add-on extras to conventional personal computers, and in some cases are integrated into a casing of a known computer. Although these prior art schemes go some way to improving the security of computer platforms, the levels of security and trustworthiness gained by prior art schemes may be considered insufficient to enable widespread application of automated transactions between computer platforms. For businesses to expose significant value transactions to electronic commerce on a widespread scale, they require confidence in the trustworthiness of the underlying technology.","Prior art computing platforms have several problems which stand in the way of increasing their inherent security:\n\n","It is known to provide security features for computer systems, which are embedded in operating software. These security features are primarily aimed at providing division of information within a community of users of the system. In the known Microsoft Windows NT\u2122 4.0 operating system, there exists a monitoring facility called a \u201csystem log event viewer\u201d in which a log of events occurring within the platform is recorded into an event log data file which can be inspected by a system administrator using the windows NT operating system software. This facility goes some way to enabling a system administrator to security monitor pre-selected events. The event logging function in the Windows NT\u2122 4.0 operating system provides system monitoring.","In terms of overall security of a computer platform, a purely software based system is vulnerable to attack, for example by viruses of which there are thousands of different varieties. Several proprietary virus finding and correcting applications are known, for example the Dr Solomons\u2122 virus toolkit program The Microsoft Windows NT\u2122 4.0 software includes a virus guard software, which is preset to look for known viruses. However, virus strains are developing continuously, and the virus guard software will not give reliable protection against newer unknown viruses. New strains of virus are being developed and released into the computing and internet environment on an ongoing basis.","Further, prior art monitoring systems for computer entities focus on network monitoring functions, where an administrator uses network management software to monitor performance of a plurality of network computers. In these known systems, trust in the system does not reside at the level of individual trust of each hardware unit of each computer platform in a system.","One object of the present invention is to provide a computing entity in which a third party user can have a high degree of confidence that the computing entity has not been corrupted by an external influence, and is operating in a predictable and known manner.","Another object of the present invention is to simplify a task of judging whether a trustworthiness of a computing entity is sufficient to perform a particular task or set of tasks or type of task.","In specific implementations of the present invention, a computing entity is capable of residing in a plurality of distinct operating states. Each operating state can be distinguished from other operating states using a set of integrity metrics designed to distinguish between those operating states.","According to first aspect of the present invention there is provided a computing entity comprising:","a computer platform comprising a plurality of physical and logical resources including a first data processor and a first memory means;","a monitoring component comprising a second data processor and a second memory means;","wherein, said computer platform is capable of operating in a plurality of different states, each said state utilising a corresponding respective set of individual ones of said physical and logical resources;","wherein said monitoring component operates to determine which of said plurality of states said computer platform operates in.","Preferably a said memory means contains a set of instructions for configuration of said plurality of physical and logical resources of said computer platform into said pre-determined state.","Preferably exit of said computer platform from said pre-determined state is monitored by said monitoring component.","A BIOS (Basic Input Output System) may be provided within the monitoring component itself. By providing the BIOS file within the monitoring component, the BIOS file may be inherently trusted.","In an alternative embodiment, said computer platform may comprise an internal firmware component configured to compute a digest data of a BIOS file data stored in a predetermined memory space occupied by a BIOS file of said computer platform.","According to second aspect of the present invention there is provided a method of activating a computing entity comprising a computer platform having a first data processing means and a first memory means and a monitoring component having a second data processing means and a second memory means, into an operational state of a plurality of pre-configured operational states into which said computer platform can be activated, said method comprising the steps of:","selecting a state of said plurality of pre-configured operational states into which to activate said computer platform;","activating said computer platform into said selected state according to a set of stored instructions; and","wherein said monitoring component monitors activation into said selected state by recording data describing which of said plurality of pre-configured states said computer platform is activated into.","Said monitoring component may continue to monitor said selected state after said computer platform has been activated to said selected state.","Said monitoring component may generate a state signal in response to a signal input directly to said monitoring component by a user of said computing entity, said state signal containing data describing which said state said computer platform has entered.","In one embodiment, said set of stored instructions which allow selection of said state may be stored in a BIOS file resident within said monitoring component. Once selection of a said state has been made, activation of the state may be carried out by a set of master boot instructions which are themselves activated by the BIOS.","Preferably the method comprises the step of generating a menu for selection of a said pre-configured state from said plurality of pre-configured states.","The method may comprise the step of generating a user menu displayed on a user interface for selection of a said pre-configured state from said plurality of pre-configured states, and said step of generating a state signal comprises generating a state signal in response to a user input accepted through said user interface.","Alternatively, the predetermined state may be automatically selected by a set of instructions stored on a smartcard, which selects a state option generated by said BIOS. The selection of states may be made automatically via a set of selection instructions to instruct said BIOS to select a state from said set of state options generated by said BIOS.","Said step of monitoring a said state may comprise:","immediately before activating said computer platform, creating by means of a firmware component a digest data of a first pre-allocated memory space occupied by a BIOS file of said computer platform;","writing said digest data to a second pre-allocated memory space to which only said firmware component has write access; and","said monitoring component reading said digest data from said second pre-allocated memory space.","Said step of monitoring a said state into which said computer platform is activated may comprise:","executing a firmware component to compute a digest data of a BIOS file of said computer platform;","writing said digest data to a predetermined location in said second memory means of said monitoring component.","Said step of activating said computer platform into said selected state may comprise:","at a memory location of said first memory means, said location occupied by a BIOS file of said computer platform, storing an address of said monitoring component which transfers control of said first processor to said monitoring component;","storing in said monitoring component a set of native instructions which are accessible immediately after reset of said first processor, wherein said native instructions instruct said first processor to calculate a digest of said BIOS file and store said digest data in said second memory means of said monitoring component; and","said monitoring component passing control of said activation process to said BIOS file, once said digest data is stored in said second memory means.","Said step of monitoring said state into which said computer platform is activated may comprise:","after said step of activating said computer platform into said selected state, monitoring a plurality of logical and physical components to obtain a first set of metric data signals from those components, said metric data signals describing a status and condition of said components;","comparing said first set of metric data signals determined from said plurality of physical and logical components of said computer platform, with a set of prerecorded metric data stored in a memory area reserved for access only by said monitoring component; and","comparing said first set of metric data signals obtained directly from said plurality of physical and logical components with said set of pre-stored metric data signals stored in said reserved memory area.","According to a third aspect of the present invention there is provided a method of operating a computing entity comprising a computer platform having a first data processing means and a first memory means, and a monitoring component having a second data processing means and a second memory means, such that said computer platform enters one of a plurality of possible pre-determined operating states said method comprising the steps of:","in response to an input from a user interface, generating a state signal, said state signal describing a selected state into which said computer platform is to be activated into;","activating said computer platform into a pre-determined state, in which a known set of physical and logical resources are available for use in said state and known processes can operate in said state;","from said pre-determined state, entering a configuration menu for reconfiguration of said monitoring component; and","modifying a configuration of said monitoring component by entering data via a user interface in accordance with an instruction set comprising said configuration menu.","Said step of entering said monitoring component configuration menu may comprise:","entering a confirmation key signal directly into said monitoring component, said confirmation key signal generated in response to a physical activation of a confirmation key.","Said step of entering said monitoring component configuration menu may comprise entering a password to said trusted component via a user interface.","According to a fourth aspect of the present invention there is provided a method of operation of a computing entity comprising a monitoring component having a first data processing means and a first memory means, and a computer platform having a second data processing means and a second memory means, said method comprising the steps of:","entering a first state of said computer entity, wherein in said first state are available a plurality of pre-selected physical and logical resources;","commencing a user session in said first state, in which said user session a plurality of data inputs are received by said computer platform, said second data processing means performing data processing on said received data; reconfiguring said plurality of physical and logical resources according to instructions received in said session;","generating a session data describing a configuration of said physical and logical resources;","generating a plurality of user data resulting from processes operating within said session;","storing said user data;","storing session data;","exiting said session; and","exiting said computer platform from said state.","Said method may further comprise the step of reconfiguring said monitoring component during said user session in said first state. Thus, the monitoring component may be reconfigured from a trusted state of the computer platform.","There will now be described by way of example the best mode contemplated by the inventors for carrying out the invention. In the following description numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however, to one skilled in the art, that the present invention may be practiced without limitation to these specific details. In other instances, well known methods and structures have not been described in detail so as not to unnecessarily obscure the present invention.","Specific embodiments of the present invention comprise a computer platform having a processing means and a memory means, and which is physically associated with a component, known herein after as a \u201ctrusted component\u201d which monitors operation of the computer platform by collecting metrics data from the computer platform, and which is capable of verifying to third party computer entities interacting with the computer platform to the correct functioning of the computer platform.","Two computing entities each provisioned with such a trusted component, may interact with each other with a high degree of \u2018trust\u2019. That is to say, where the first and second computing entities interact with each other the security of the interaction is enhanced compared to the case where no trusted component is present, because:\n\n","In this specification, the term \u201ctrusted\u201d when used in relation to a physical or logical component, is used to mean a physical or logical component which always behaves in an expected manner. The behavior of that component is predictable and known. Trusted components have a high degree of resistance to unauthorized modification.","In this specification, the term \u201ccomputer platform\u201d is used to refer to at least one data processor and at least one data storage means, usually but not essentially with associated communications facilities e.g. a plurality of drivers, associated applications and data files, and which may be capable of interacting with external entities e.g. a user or another computer entity, for example by means of connection to the internet, connection to an external network, or by having an input port capable of receiving data stored on a data storage medium, e.g. a CD ROM, floppy disk, ribbon tape or the like. The term \u201ccomputer platform\u201d encompasses the main data processing and storage facility of a computer entity.","Referring to  herein, there is illustrated schematically one example of a computer entity according to a specific implementation of the present invention. Referring to  of the accompanying drawings, there is illustrated schematically physical connectivity of some of the components of the trusted computer entity of . Referring to  herein, there is illustrated schematically an architecture of the trusted computer entity of , showing physical connectivity of components of the entity.","In general, in the best mode described herein, a trusted computer entity comprises a computer platform consisting of a first data processor, and a first memory means, together with a trusted component which verifies the integrity and correct functioning of the computing platform. The trusted component comprises a second data processor and a second memory means, which are physically and logically distinct from the first data processor and first memory means.","In the example shown in  herein, the trusted computer entity is shown in the form of a personal computer suitable for domestic use or business use. However, it will be understood by those skilled in the art that that this is just one specific embodiment of the invention, and other embodiments of the invention may take the form of a palmtop computer, a laptop computer, a server-type computer, a mobile phone-type computer, or the like and the invention is limited only by the scope of the claims herein. In the best mode example described herein, the computer entity comprises a display monitor ; a keyboard data entry means ; a casing  comprising a motherboard on which is mounted a data processor; one or more data storage means e.g. hard disk drives; a dynamic random access memory; various input and output ports (not illustrated in ); a smart card reader  for accepting a user's smart card; a confirmation key , which a user can activate when confirming a transaction via the trusted computer entity; and a pointing device, e.g. a mouse or trackball device ; and a trusted component.","Referring to  herein, there are illustrated some of the components comprising the trusted computer entity, including keyboard , which incorporates confirmation key  and smart card reader ; a main motherboard  on which is mounted first data processor  and trusted component , an example of a hard disc drive , and monitor . Additional components of the trusted computer entity, include an internal frame to the casing , housing one or more local area network (LAN) ports, one or more modem ports, one or more power supplies, cooling fans and the like (not shown in ).","In the best mode herein, as illustrated in  herein, main motherboard  is manufactured comprising a first data processor ; and preferably a permanently fixed trusted component ; a local memory device  to the first data processor, the local memory device being a fast access memory area, e.g. a random access memory; a BIOS memory area ; smart card interface ; a plurality of control lines ; a plurality of address lines ; a confirmation key interface ; and a data bus  connecting the processor , trusted component , memory area , a BIOS memory component  and smart card interface . A hardware random number generator RNG  is also able to communicate with the processor  using the bus .","External to the motherboard and connected thereto by data bus  are provided the one or more hard disk drive memory devices , keyboard data entry device , pointing device , e.g. a mouse, trackball device or the like; monitor device ; smart card reader device  for accepting a smart card device as described previously; the disk drive(s), keyboard, monitor, and pointing device being able to communicate with processor  via said data bus ; and one or more peripheral devices , , for example a modem, printer scanner or other known peripheral device.","To provide enhanced security confirmation key switch  is hard wired directly to confirmation key interface  on motherboard , which provides a direct signal input to trusted component  when confirmation key  is activated by a user such that a user activating the confirmation key sends a signal directly to the trusted component, by-passing the first data processor and first memory means of the computer platform.","In one embodiment the confirmation key may comprise a simple switch. Confirmation key , and confirmation key driver  provide a protected communication path (PCP) between a user and the trusted component, which cannot be interfered with by processor , which by-passes data bus  and which is physically and logically unconnected to memory area  or hard disk drive memory device(s) .","Trusted component  is positioned logically and physically between monitor  and processor  of the computing platform, so that the trusted component  has direct control over the views displayed on monitor  which cannot be interfered with by processor .","The trusted component lends its identity and trusted processes to the computer platform and the trusted component has those properties by virtue of its tamper-resistance, resistance to forgery, and resistance to counterfeiting. Only selected entities with appropriate authentication mechanisms are able to influence the processes running inside the trusted component. Neither a user of the trusted computer entity, nor anyone or any entity connected via a network to the computer entity may access or interfere with the processes running inside the trusted component. The trusted component has the property of being \u201cinviolate\u201d.","Smart card reader  is wired directly to smart card interface  on the motherboard and does not connect directly to data bus . Alternatively, smart card reader  may be connected directly to data bus . On each individual smart card may be stored a corresponding respective image data which is different for each smart card. For user interactions with the trusted component, e.g. for a dialogue box monitor display generated by the trusted component, the trusted component takes the image data from the users smart card, and uses this as a background to the dialogue box displayed on the monitor . Thus, the user has confidence that the dialogue box displayed on the monitor  is generated by the trusted component. The image data is preferably easily recognizable by a human being in a manner such that any forgeries would be immediately apparent visually to a user. For example, the image data may comprise a photograph of a user. The image data on the smart card may be unique to a person using the smart card.","Referring to  herein, there is illustrated schematically an internal architecture of trusted component . The trusted component comprises a processor , a volatile memory area ; a non-volatile memory area ; a memory area storing native code ; and a memory area storing one or a plurality of cryptographic functions, , the non-volatile memory , native code memory  and cryptographic memory  collectively comprising the second memory means herein before referred to.","Trusted component  comprises a physically and logically independent computing entity from the computer platform. In the best mode herein, the trusted component shares a motherboard with the computer platform so that the trusted component is physically linked to the computer platform. In the best mode, the trusted component is physically distinct from the computer platform, that is to say it does not exist solely as a sub-functionality of the data processor and memory means comprising the computer platform, but exists separately as a separate physical data processor  and separate physical memory area , , , . By providing a physically present trusted component separate from a main processor of the computer entity, the trusted component becomes harder to mimic or forge through software introduced onto the computer platform. Another benefit which arises from the trusted component being physical, separate from the main processor of the platform, and tamper resistant is that the trusted component cannot be physically subverted by a local user, and cannot be logically subverted by either a local user or a remote entity. Programs within the trusted component are pre-loaded at manufacture of the trusted component in a secure environment. The programs cannot be changed by users, but may be configured by users, if the programs are written to permit such configuration. The physicality of the trusted component, and the fact that the trusted component is not configurable by the user enables the user to have confidence in the inherent integrity of the trusted component, and therefore a high degree of \u201ctrust\u201d in the operation and presence of the trusted component on the computer platform.","Referring to  herein, there is illustrated schematically a logical architecture of the computer entity . The logical architecture has a same basic division between the computer platform, and the trusted component, as is present with the physical architecture described in  herein. That is to say, the trusted component is logically distinct from the computer platform to which it is physically related. The computer entity comprises a user space  being a logical space which is physically resident on the computer platform (the first processor and first data storage means) and a trusted component space  being a logical space which is physically resident on the trusted component . In the user space  are one or a plurality of drivers , one or a plurality of applications programs , a file storage area ; smart card reader ; smart card interface ; and a software agent  which operates to perform operations in the user space and report back to trusted component . The trusted component space is a logical area based upon and physically resident in the trusted component, supported by the second data processor and second memory area of the trusted component. Confirmation key device  inputs directly to the trusted component space , and monitor  receives images directly from the trusted component space . External to the computer entity are external communications networks e.g. the Internet , and various local area networks, wide area networks  which are connected to the user space via the drivers  which may include one or more modem ports. External user smart card  inputs into smart card reader  in the user space.","In the trusted component space, are resident the trusted component itself, displays generated by the trusted component on monitor ; and confirmation key , inputting a confirmation signal via confirmation key interface .","In the best mode for carrying out the invention, the computing entity has a plurality of modes of operation, referred to herein as operating states. Different ones of the plurality of operating states allow the computing entity to perform different sets of tasks and functionality. In some of the individual states, complex operations can be carried out with a large number of degrees of freedom, and complexity. In other operating states, there are more restrictions on the behavior of the computing entity.","The level of \u2018trust\u2019 which can be placed on the computing entity when operating in each of the plurality of different states is related to:\n\n","The trust placed in the computer entity is composed of two separate parts;\n\n","As described herein, levels or degrees of trust placed in the computer entity are determined as being relative to a level of trust which is placed in the trusted component. Although the amount of trust in a computer entity is related to many factors, a key factor in measuring that trust are the types, extent and regularity of integrity metric checks which the trusted component itself carries out on the computer entity.","The trusted component is implicitly trusted. The trusted component is embedded as the root of any trust which is placed in the computing platform and the computing platform as a whole cannot be any more trusted than the amount of trust placed in the trusted component.","By virtue of the trusted component monitoring operations of the computer platform, the trust placed in the trusted component can be extended to various parts of the computer platform, with the level and extent of trust placed in individual areas of the computer platform, being dependent upon the level and reliability with which the trusted component can monitor that particular area of the computing platform.","Since the trusted areas of the computing platform are dependent upon the frequency, extent, and thoroughness with which the trusted component applies a set of integrity metric measurements to the computer platform, if the trusted component does not comprehensively measure all measurable aspects of the operation of the computing platform at all times, then the level of trust placed in individual parts of the computer platform will form a subset of the overall trust placed in the trusted component itself. If the computing entity supports only a limited number of integrity metrics, a user of the equipment, including a third party computing entity, is restricted in its ability to reason about the level of trust which can be placed in the computing entity.","Although various islands of the computer platform are trusted at various levels, depending upon the integrity metrics which are applied by the trusted component for measuring those areas of the computer platform, the level of trust placed in the computer platform as a whole is not as high as that which is inherent in the trusted component. That is to say, whilst the trusted component space  is trusted at a highest level, the user space  may comprise several regions of various levels of trust. For example, applications programs  may be relatively untrusted. Where a user wishes to use the computer entity for an operation which involves a particularly high degree of confidentiality or secrecy, for example working on a new business proposal, setting pay scales for employees or equally sensitive operations, then the human user may become worried about entering such details onto the computer platform because of the risk that the confidentiality or secrecy of the information will become compromised. The confidential information must be stored in the computing entity, and islands of high trust may not extend over the whole computing platform uniformly and with the same degree of trust. For example, it may be easier for an intruder to access particular areas or files on the computing platform compared with other areas or files.","Additionally, a user may wish to instruct the trusted component to perform certain functions, this poses the problem that all the commands to instruct the trusted component must pass through the computer platform, which is at a lower level of trust than the trusted component itself. Therefore, there is a risk of the commands to the trusted component becoming compromised during their passage and processing through the computer platform.","According to specific implementations of the present invention, the computer entity may enter a plurality of different states, each state having a corresponding respective level of trust, wherein the individual levels of trust corresponding to different states may be different from each other.","Referring to , there is illustrated schematically a set of physical and logical resources available to the computing entity. In the general case, the computing entity comprises a plurality of input\/output devices  for communicating with other computing entities, examples of such devices including a modem, a local area network port, an Ethernet card, a hard disk drive , a floppy disk drive, and a smart card reader device ; a plurality of memory areas -, resident on the hard disk , or ram ; one or a plurality of operating systems -; and one or a plurality of application programs -.","In this specification, by the term \u201cstate\u201d when used in relation to a computing entity, it is meant a mode of operation of the computing entity in which a plurality of functions provided by the computing platform may be carried out. For example in a first state, the computing entity may operate under control of a first operating system, and have access to a first set of application programs, a first set of files, and a first set of communications capabilities, for example modems, disk drives, local area network cards, e.g. Ethernet cards. In a second state, the computing platform may have access to a second operating system, a second set of applications, a second set of data files and a second set of input\/output resources. Similarly, for successive third, fourth states up to a total number of states into which the computing entity can be set. There can be overlap between the facilities available between two different states. For example, a first and second state may use a same operating system, whereas a third state may use a different operating system.","Referring to  herein, there is illustrated schematically a state diagram representing a plurality of states into which the computing entity may be placed. In principle, there is no limit to the number of different states which the computing entity may be placed, but in the example shown in  three such states are shown. In the example of , the computing entity may be placed into a first, trusted state , a second state  being a general purpose untrusted state and a third state  being a general purpose untrusted state. In the general case, the computing entity can reside in a plurality of different states, each having a corresponding respective level of trust.","Trusted state  is distinguished from the second and third states ,  by virtue of the way in which the trusted state can be accessed. In one option, trusted state  can only be accessed by reference to the trusted component . However, in the preferred best mode implementation entry into the trusted state need not be controlled by the trusted component. To access the trusted state, a user may turn on the computing entity, that is to say turn on the power supply to the computing entity in a turn on process . Upon turning on the power supply, the computing entity boots up via the BIOS file  in process , from a routine contained in the computer BIOS. The computing entity may enter either the trusted state , the second state , or the third state , depending upon how the BIOS file is configured. In the best mode herein, a user of the computer entity has the option, provided as a menu display option on monitor  during boot up of the computer entity, or as a selectable option presented as a screen icon, when in any state, to enter either the trusted state , or one of the other states ,  by selection. For example on turn on, the BIOS may be configured to default boot up in to the second state . Once in the second state, entry into a different state  may require a key input from a user, which may involve entry of a password, or confirmation of the users identity by the user entering their smart card into smart card reader .","Once the computing entity has entered a state other than the trusted state, e.g. the second state  or third state , then from those states the user may be able to navigate to a different state. For example the user may be able to navigate from the second state  to the third state  by normal key stroke entry operations on the keyboard, by viewing the monitor and using a pointing device signal input, usually with reference back to the BIOS. This is shown schematically as select new state process .","In order to enter the trusted state , the computer entity must be either booted up for the first time after turn on process , or re-booted via the BIOS in re-boot process . Re-boot process  is very similar to boot up process  except that it can be entered without having to turn the power of the computing entity off and then on again. To leave the trusted state , the computing entity must again refer to the BIOS  which involves automatic monitoring by the trusted component  in monitor process . Similarly, re-booting via the BIOS in process  involves automatic monitoring by the trusted component in monitoring process .","To leave the trusted state , the trusted state can only be left either by turning the power off in power down process , or by re-booting the computing entity in re-boot process . Re-booting the BIOS in re-boot process  involves automatic monitoring by the trusted component . Once the trusted state is left, it is not possible to re-enter the trusted state without either re-booting the computing entity, in re-boot process , or booting up the computing entity after a power down in process , both of which involve automatic monitoring by the trusted component in monitoring process .","Referring to , herein, there is illustrated schematically a use model followed by a user of the computer entity navigating through one or more states. In step , after turning on a power supply to the computing entity, the computer boots up via the BIOS program. The boot process is very similar to re-booting the computer from an existing state. In each case, control of microprocessor  is seized by the BIOS component . The trusted component  measures a set of integrity metric signals from the BIOS , to determine a status of the BIOS . In step , the graphical user interface displays a menu option for entry into a plurality of different states. One of the states displayed on the menu is a trusted state as described herein before. The user manually selects a state in which to enter by using the keyboard or pointing device of the graphical user interface, for example by clicking a pointer icon over a state icon displayed on the graphical user interface. Alternatively, an automatic selection of a state may be made by a smartcard or via a network connection from state selection options generated by the BIOS. After selection of a state, the BIOS loads a program which loads a selected operating system corresponding with the state. A different load program is used for each of the plurality of different possible states. The trusted component measures that program in broadly a similar way to the way in which it measures the BIOS, so that the trusted component can record and determine which state has been loaded. When an external entity requests that the trusted component supplies integrity metrics, the trusted component supplies both the BIOS metrics and the loaded program metrics. In step , the computing entity enters the selected state. Once in the selected state, in step  the user has access to a set of physical and logical resources in that state. For example, in a relatively insecure state, the user may have full internet access through a modem device comprising the computing entity, may have full access to one or a plurality of hard disk drives or CD readers\/writers, and may have full access to a floppy disk drive, as well as having access to a plurality of pre-loaded commercially available applications programs. On the other hand, if the user selects a trusted state having a relatively high level of trust, in that state the user may have available a single operating system, a limited set of applications, for example a word processor, accounts package, or data base, and use of a printer device, but in that state, use of a hard disk drive, a floppy disk drive, or the internet may be restricted. Each selection of a separate state into which the computer may be booted may be pre-configured by configuration of the BIOS component . A choice of states is presented by the BIOS to a user. Once a state is selected, the BIOS cause the selected state to load by calling up an operating system loading program to load that state. The states themselves are pre-configured by the loading and the relevant operating system. For entry into trusted states, entry into those states is via operation of the BIOS component , and including monitoring by the trusted component in monitoring process . In order to enter a trusted state, a user must boot or e-boot the computer platform in step . Similarly, to exit from a trusted state, the user must also boot or re-boot the computing entity in step . To navigate from a state having a lower trust level, for example the second state(), or the third state (), the user may navigate from that state to another state in step , which, in the best mode involves re-booting of the computing entity via the BIOS.","Referring to  herein there is illustrated schematically process steps carried out by the computing entity for entering a state via boot process  or re-boot process .","In step , the computer enters a boot up routine, either as a result of a power supply to the computing entity being turned on, or as a result of a user inputting a reset instruction signal, for example by clicking a pointer icon over a reset icon displayed on the graphical user interface, giving rise to a reset signal. The reset signal is received by the trusted component, which monitors internal bus . The BIOS component  initiates a boot-up process of the computer platform in step . Trusted component  proceeds to make a plurality of integrity checks on the computer platform and in particular checks the BIOS component  in order to check the status of the computer platform. Integrity checks are made by reading a digest of the BIOS component. The trusted component  acts to monitor the status of the BIOS, and can report to third party entities on the status of the BIOS, thereby enabling third party entities to determine a level of trust which they may allocate to the computing entity.","There are several ways to implement integrity metric measurement of the BIOS. In each case, the trusted component is able to obtain a digest of a BIOS file very early on in the boot up process of the computer platform. The following are examples:\n\n","In one embodiment, trusted component  may interrogate individual components of the computer platform, in particular hard disk drive , microprocessor , and RAM , to obtain data signals directly from those individual components which describe the status and condition of those components. Trusted component  may compare the metric signals received from the plurality of components of the computer entity with the pre-recorded metric data stored in a memory area reserved for access by the trusted components. Provided that the signals received from the components of the computer platform coincide with and match those of the metric data stored within the memory, then the trusted component  provides an output signal confirming that the computer platform is operating correctly. Third parties, for example, other computing entities communicating with the computing entity may take the output signal as confirmation that the computing entity is operating correctly, that is to say is trusted.","In step  BIOS generates a menu display on monitor  offering a user a choice of state options, including a trusted state . The user enters details of which state is to be entered by making key entry to the graphical user interface or data entry using a pointing device, e.g. mouse . The BIOS receives key inputs from a user which instruct a state in to which to boot in step . The trusted component may also require a separate input from confirmation key  requiring physical activation by a human user, which bypasses internal bus  of the computer entity and accesses trusted component  directly, in addition to the user key inputs selecting the state. Once the BIOS  has received the necessary key inputs instructing which state is required, the processing of the set of configuration instructions stored in BIOS  occurs by microprocessor , and instructs which one of a set of state options stored in the BIOS file, the computer platform will configure itself into. Each of a plurality of state selections into which the computer platform may boot may be stored as separate boot options within BIOS , with selection of the boot option being controlled in response to keystroke inputs or other graphical user inputs made by a user of the computing entity. Once the correct routine of BIOS file  is selected by the user, then in step , the BIOS file then releases control to an operating system load program stored in a memory area of the computer platform, which activates boot up of the computer platform into an operating system of the selected state. The operating system load program contains a plurality of start up routines for initiating a state, which include routines for starting up a particular operating system corresponding to a selected state. The operating load program boots up the computer platform into the selected state. The operating system measures the metrics of the load program which is used to install the operating system, in step . Once in the selected state, trusted component  continues, in step , to perform on an ongoing continuous basis further integrity check measurements to monitor the selected state continuously, looking for discrepancies, faults, and variations from the normal expected operation of the computer platform within that state. Such integrity measurements are made by trusted component  sending out interrogation signals to individual components of the computer platform, and receiving response signals from the individual components of the computer platform, which response signals the trusted component may compare with a predetermined preloaded set of expected response signals corresponding to those particular states which are stored within the memory of the trusted component, or the trusted component  compares is the integrity metrics measured from the computer platform in the selected state with the set of integrity metrics initially measured as soon as the computer platform enters the selected state, so that on an ongoing basis any changes to the integrity metrics from those initially recorded can be detected.","During the boot up procedure, although the trusted component monitors the boot up process carried out by the BIOS component, it does not necessarily control the boot up process. The trusted component acquires a value of the digest of the BIOS component  at an early stage in the boot up procedure. In some of the alternative embodiments, this may involve the trusted component seizing control of the computer platform before boot up by the BIOS component commences. However, in alternative variations of the best mode implementation described herein, it is not necessary for the trusted component to obtain control of the boot up process, but the trusted component does monitor a computer platform, and in particular the BIOS component . By monitoring the computer platform, the trusted component stores data which describes which BIOS options have been used to boot up the computer, and which operating system has been selected. The trusted component also monitors the loading program used to install the operating system.","There will now be described an example of operation of a computer entity within a trusted state in a first specific mode of operation according to the present invention.","Referring to  herein, there is illustrated schematically usage of the computing entity in a trusted state, extending over a plurality of user sessions, for example usage of the computing entity over two successive days, whilst turning off or re-booting the computing entity between sessions.","Referring to  herein, a user boots up the computing entity into a trusted state  as herein before described in a first boot process . In the trusted state, the user commences a first session  of usage of the computing entity. Within the session, because the computer platform is booted into the trusted state, a predetermined set of logical and physical resources are available to the user within that trusted state. Typically, this would include access to an operating system and a predetermined selection of applications. The level of trust which applies to the trusted state varies depending upon the number, complexity and reliability or the physical and logical resources available to the user within the trusted state. For example, where the trusted state is configured to use a well-known reliable operating system, for example UNIX, and a reliable word processing package with minimal access to peripheral devices of the computer platform being permitted in the trusted state, for example no access to modems, and access to output data restricted to a single writer drive, e.g. a CD writer, then this may have a relatively high degree of trust. In another trusted state, where more facilities are available, the trust level would be different to that in a trusted state in which more limited access to physical or logical resources. However, each trusted state is characterized in that the access to facilities is predetermined and known and can be verified by trusted component . During the first session , a user may call up an application  available in the trusted state, and may enter user data , for example via a keyboard device. The user data  is processed according to the application  in processing operation , resulting in processed output user data . During the course of the session, by virtue of using the computer platform, operating system and applications, the user may have reconfigured the applications and\/or operating system for a specific usage within the session. For example, in a word processor application, documents may have been formatted with certain line spacing, font styles etc. To avoid these settings being lost on leaving the trusted state, such settings comprising session data  may be stored during the session. Similarly, to avoid the effort made by the user during the session being lost, the output user data may be stored during the session. However, the user session  only exists in the trusted state as long as the trusted state exists. Therefore, to avoid loss of settings and data from the first session  in the trusted state , the output user data and session data must be stored as stored output user data  and stored session data  respectively before the trusted state can be exited. The stored output user data  and stored session data  may be saved to a device available in the trusted state, for example hard disk drive  or a CD reader\/writer peripheral for use in a further successive session, or be encrypted and signed and then saved at a remote location, accessed over a network. Preferably, signing of user data and session data is done by the trusted component and\/or the users smartcard. Exit from the trusted states involves dosing the first user session , and rebooting the computing entity via re-boot process , or powering down the computing entity via power down process . In the first user session in the trusted state, processing of user input data occurs, and the output of the process is the output processed data. The output processed data is stored after processing of the data has terminated, and before the session is ended, and before the trusted state is exited.","Referring to  herein, there is illustrated schematically operation of the computing entity on a second day, in a second session in the same trusted state . Between the first and second sessions the trusted state  disappears completely, since the computing entity leaves the trusted state . On leaving the trusted state , apart from the stored output user data and stored session data, the computer platform saves no information concerning the trusted state other than that which is pre-programmed into the BIOS  and the loading programs and the trusted component . Therefore, for all practical purposes, on power down or re-boot, the trusted state  ceases to exist. However, the ability to re-enter the trusted state  through a new operation of the boot process or reboot process remains within the capabilities or the computing entity. The trusted state is entered via a second boot process  as herein before described. Once the trusted state is entered, a second session  commences. Within the second session  the operating system, applications and facilities available from the computer platform are selected from the same set of such physical and logical resources as where available previously for the first session. However, usage of those facilities within the second session may vary according to a user's keystroke instructions. Second session  may effectively comprise a continuation of first session . The user may call up the same application  as previously and may effectively continue the work carried out during the first session in the second session . However, because exiting the trusted state involves the computer platform in complete amnesia of all events which occurred during that trusted state, after the state has been left, if the trusted state is reactivated and the new session is commenced, the application  has no memory of its previous configuration. Therefore, stored output session data  produced at the end of the first session  must be input into the second session  in order to reconfigure the application, to save for example the settings of line spacing and format, and the output user data  stored as stored output user data  must be re-input into the second session  for further work to continue on that data. The stored session data  and user data  may be retrieved from a storage medium, decrypted and authenticated and then loaded into the trusted state, to configure the second session as a continuation of the first session. Preferably, integrity measurement checks are performed by the trusted component on the user data and session data imported from the smartcard or storage medium, before that data is loaded. During the second session , further user data  is input by the user, and the further data is processed together with the stored first output data  according to the application  configured according to the first stored output session data  in process . Processing of the data  during the second session  results in a new output user data . If the application or operating system used in the second session has changed in configuration during the second session, this results in a new session data . As with the first session, in order to close the session without losing the settings of the application program, and operating system, and without losing the benefit of the work carried out during the second session, both the new session data  and the new output user data  need to be stored. These data are stored respectively as a stored new output user data  and a stored new session data .","At the end of the second session, the session is dosed after having saved the work produced in the second session, and the trusted state is exited via a power down process or re-boot process , . All memory of the trusted state and second session other than that stored as the session data  and stored output user data  is lost from the computer platform.","It will be appreciated that the above example is a specific example of using a computer in successive first and second sessions on different days. In between use of those sessions, the computing entity may be used in a plurality of different states, for different purposes and different operations, with varying degrees of trust. In operating states which have a lower level of trust, for example the second and third states (being \u2018untrusted\u2019 states) the computer entity will not lose memory of this data configuration between transitions from state to state. According to the above method of operation, the trusted state  may be activated any number of times, and any number of sessions carried out. However, once the trusted state is exited, the trusted state has no memory of previous sessions. Any configuration of the trusted state must be by new input of data , , or by input of previously stored session data or user data , , , .","In the above described specific implementations, specific methods, specific embodiments and modes of operation according to the present invention, a trusted state comprises a computer platform running a set of processes all of which are in a known state. Processes may be continuously monitored throughout a session operating in the trusted state, by a trusted component .","Referring to  herein, there is illustrated schematically a second mode of operation of a trusted state, in which the trusted component itself  can be reconfigured by a user. In the second mode of operation, the trusted component stores a predetermined set of data describing metrics which apply when the computer platform is in the trusted state in which the component itself can be reconfigured. A trusted state  is entered as described previously herein through boot process  or re-boot process . In the trusted state, a user enters a command to call up a trusted component configuration menu in step . The trusted component configuration menu comprises a set of instructions stored in memory and which is only accessible via a trusted state. In order to make changes to the menu, various levels or security may be applied. For example, a user may be required to enter a secure password, for example a password comprising numbers and letters or other characters in step . The trusted component monitors the trusted state from which the trusted component can be reconfigured by comparing measured integrity metrics from the computer platform whilst in the trusted state, with the set of pre-stored integrity metrics which the trusted component stores in its own memory area. The trusted component will not allow a user to reconfigure the trusted component  unless the integrity metrics measured by the trusted component when the computer platform is in the trusted state from which the trusted component can be reconfigured match the pre-stored values in the trusted component's own memory, thereby verifying that the computer platform is operating correctly in the trusted state. The trusted component denies a user reconfiguration of the trusted component if the trusted component detects that the measured integrity metrics of the computer platform do not match those predetermined values which are stored in the trusted component's own internal memory, and are those of the trusted state from which the trusted component can be re-configured.","Additionally, or optionally, the user may be required to insert a smart card into smart card reader  in step , following which the trusted component verifies the identity of the user by reading data from the smart card via smart card interface . Additionally, the user may be required to input physical confirmation of his or her presence by activation of confirmation key  providing direct input into trusted component  as described with reference to  herein in step . Data describing the trusted state, for example, which operating system to use, and which applications to use, may be stored on the smart card and used to boot up the computer platform into the trusted state.","Once the security checks including the password, verification by smart card and\/or activation of the confirmation key are accepted by the trusted component, the file configuration menu is displayed on the graphical user interface under control of trusted component  in step . Reconfiguration of the trusted component can be made using the menu in step  by the user. Depending upon the level of security applied, which is an implementation specific detail of the trusted component configuration menu, the user may need to enter further passwords and make further confirmation key activations when entering data into the menu itself. In step , the user exits the trusted component reconfiguration menu having reconfigured the trusted component.","In the trusted component configuration menu, a user may reconfigure operation of the trusted component. For example, a user may change the integrity metrics used to monitor the computer platform.","By storing predetermined digest data corresponding to a plurality of integrity metrics present in a state inside the trusted component's own memory, this may provide the trusted component with data which it may compare with a digest data of a state into which the computer platform is booted, for the trusted component to check that the computer platform has not been booted into an unauthorized state.","The trusted component primarily monitors boot up of the computer platform. The trusted component does not necessarily take control of the computer platform if the computer platform boots into an unauthorized state, although optionally, software may be provided within the trusted component which enables the trusted component to take control of the computer platform if the computer platform boots into an unauthorized, or an unrecognized state.","When in the trusted state, a user may load in new applications to use in that trusted state, provided the user can authenticate those applications for use in the trusted state. This may involve a user entering a signature data of the required application to the trusted component, to allow the trusted component to verify the application by means of its signature when loading the application into the trusted state. The trusted component checks that the signature of the application is the same as the signature which the user has loaded into the trusted component before actually loading the application. At the end of a session, the application is lost from the platform altogether. The session in the trusted state exists only in temporary memory, for example random access memory, which is reset when the trusted state is exited.","In the above described implementations, a version of a computer entity in which a trusted component resides within a video path to a visual display unit have been described. However, the invention is not dependent upon a trusted component being present in a video path to a visual display unit, it will be understood by persons skilled in the art that the above best mode implementations are exemplary of a large class of implementations which can exist according to the invention.","In the above described best mode embodiment, methods of operation have been described wherein a user is presented with a set of options for selecting a state from a plurality of states, and a user input is required in order to enter a particular desired state. For example a user input may be required to specify a particular type of operating system which is required to be used, corresponding to a state of the computer platform. In a further mode of operation of the specific embodiment, data for selecting a predetermined operating state of the computer platform may be stored on a smart card, which is transportable from computer platform to computer platform, and which can be used to boot up a computer platform into a predetermined required state. The smartcard responds to a set of state selection options presented by a BIOS, and selects one of a plurality of offered choices of state. The BIOS contains the state selections available, and a set of loading programs actually install the various operating systems which provide the states. In this mode of operation, rather than data describing a predetermined state being stored within the first memory area of the trusted component, and the BIOS system obtaining that data from the trusted component in order to boot the computer platform up into a required predetermined state, the information can be accessed from a smart card entered into the smart card reader.","Using such a smart card pre-configured with data for selecting one or a plurality of predetermined states, a user carrying the smart card may activate any such computing entity having a trusted component and computer platform as described herein into a predetermined state as specified by the user, with a knowledge that the computing entity will retain no record of the state after a user session has taken place. Similarly as described with reference to  herein, any output user data or configuration data produced during a session may be verified by the smart card, which can be taken away by a user and used to boot up a further different computing entity into the same state, and continue a session on a different computing entity, verifying any information on user data or session data which is to be retrieved, without either computing entity retaining a permanent record of the predetermined state, and without either computing entity retaining any of the processed user data or session configuration data of the predetermined state."],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND TO THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE BEST MODE FOR CARRYING OUT THE INVENTION"],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a better understanding of the invention and to show how the same may be carried into effect, there will now be described by way of example only, specific embodiments, methods and processes according to the present invention with reference to the accompanying drawings in which:",{"@attributes":{"id":"p-0069","num":"0071"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0070","num":"0072"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0071","num":"0073"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0072","num":"0074"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0073","num":"0075"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0074","num":"0076"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0075","num":"0077"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0076","num":"0078"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0077","num":"0079"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0078","num":"0080"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0079","num":"0081"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0080","num":"0082"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
