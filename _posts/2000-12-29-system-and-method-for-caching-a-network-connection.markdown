---
title: System and method for caching a network connection
abstract: The invention relates to a system and method for caching a network connection. The system sustains connections between a server and one or more back-end databases. The server may establish multiple connections with one or more back-end databases based on data requests from one or more users. The server may determine one or more back-end databases from which the data requests may be satisfied. After receiving the data, the users, using an end-user device, may request disconnection of a connection between the end-user device and the server. The server, however, sustains the connection with the back-end database from which the data was retrieved. The server may use this connection to satisfy other data requests without re-establishing a connection with that back-end database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07010606&OS=07010606&RS=07010606
owner: International Business Machines Corporation
number: 07010606
owner_city: Armonk
owner_country: US
publication_date: 20001229
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["This application claims priority from U.S. Provisional Patent Application Ser. No. 60\/209,644, filed Jun. 5, 2000, and entitled \u201cLow-Overhead Hierarchical-Caching-Object Storage Toolkit.\u201d This application is also related to U.S. patent application Ser. No. 09\/750,298, filed Dec. 29, 2000, now U.S. Pat. No. 6,745,189, and entitled \u201cSystem and Method for Enabling Multi-Indexing of Objects;\u201d U.S. patent application Ser. No. 09\/750,315, filed Dec. 29, 2000, and entitled \u201cSystem and Method for Searching Extended Regular Expressions;\u201d U.S. patent application Ser. No. 09\/750,317, filed Dec. 29, 2000, and entitled \u201cSystem and Method for Enabling Statistical Matching;\u201d U.S. patent application Ser. No. 09\/750,318, filed Dec. 29, 2000, now U.S. Pat. No. 6,611,897, and entitled \u201cSystem and Method for Managing Hierarchical Objects;\u201d U.S. patent application Ser. No. 09\/750,319, filed Dec. 29, 2000, and entitled \u201cSystem and Method for Storing Conceptual Information;\u201d and U.S. patent application Ser. No. 09\/750,322, filed Dec. 29, 2000, now U.S. Pat. No. 6,323,328, and entitled \u201cSystem and Method for Enabling Unified Access to Multiple Types of Data.\u201d Each of the applications identified above is herein incorporated by reference.","The invention relates to a system and method for caching a network connection. More particularly, the invention relates to a system and method that sustains a connection between a server and a back-end database after a connection between an end-user device and the server has been disconnected.","Modern database applications are typically designed using relational data models that are implemented by well known technologies such as DB2. For many applications, a relational data model works well. For some applications, however, the relational database model limits the ability to represent complex conceptual information. Such systems typically store data in tables that include one or more columns. When data is stored in the tables, the data may not occupy all or a portion of one or more columns. Therefore, data storage space that includes unused columns may be unused. Additionally, such systems typically require a new table schema to be defined for each data collection to be saved. Therefore, data to be stored must be assembled by the system to populate the table's schema within the table. Additionally, systems typically only allow navigation through the table in a downward direction.","These tables contain named columns of information and one row for each data observation. Related tables may be joined by one or more columns that contain a common field. The descriptions of all tables, columns, and relationships are contained in the database schema, which is typically maintained by a full-time database administrator (DBA). The definition of new tables, columns, or relationships usually requires the intervention of a DBA.","Many applications typically store dense lists of information, such as financial data or employee records, where most data columns are fully populated. Other applications, such as name and address directories or product catalogues, contain sparse information. That is, out of many potential data elements, only a few may exist in any particular record. Address directories and product catalogues typically maintain relationships, especially inheritances that are usually more easily understood when expressed in hierarchical trees rather than joined relational tables.","Another drawback of existing systems is that data collections to be stored must be transformed to a format compatible with a table to be used to store the data This may require modification of existing schema or reformatting a database to a particular format. This may include reorganization and possible downtime for the database.","Another drawback with existing systems is that multiple disk reads may be necessary for retrieving rows within a table. For example, if a user desires to further limit a search, and the user inserts additional criteria for searching an object, existing systems typically access a server each time an additional search criteria is input. This may slow the performance of the server and increase processing time.","Relational databases are used to store relationships among tables. Relational databases, however, are not very suitable for storing hierarchies. Therefore, hierarchical databases typically are used to store hierarchies. Data elements are stored as fixed lengths. If a data element does not occupy the fixed lengths, the excess data storage space may be wasted.","Existing systems are typically slow to resolve queries. For example, a query may take one hundred (100) milliseconds to be resolved. Another drawback is that applications are typically coded to retrieve one or at most a few attributes on any one server call. This may lead to multiple calls being issued to a server against the same data collection. Furthermore, because only portions of a data collection are retrieved, existing systems typically parse the data collection for particular information being requested. Parsing may occur for each call issued to a server. This may also increase processing time.","These and other drawbacks exist.","One object of the invention is to overcome these and other drawbacks of the existing systems.","Another object of the invention is to provide a system and method for caching a network connection.","Another object of the invention is to provide a system and method for caching a network connection that sustains a connection between a server and a back-end database after a connection between an end-user device and the server has been disconnected.","Another object of the invention is to provide a system and method for caching a network connection that maintains a record of open connections between the server and one or more back-end databases.","Another object of the invention is to provide a system and method for caching a network connection that references the record of open connections to determine whether a connection to a particular back-end database exists.","Another object of the invention is to provide a system and method for caching a network connection that reduces connection time.","The invention relates to a system and method for caching a network connection. The system sustains connections between a server and one or more back-end databases. The server may establish multiple connections with one or more back-end databases based on data requests from one or more users. The server may determine one or more back-end databases from which the data requests may be satisfied. After receiving the data, the users, using an end-user device, may request disconnection of a connection between the end-user device and the server. The server, however, sustains the connection with the back-end database from which the data was retrieved. The server may use this connection to satisfy other data requests without re-establishing a connection with that back-end database.","The invention also relates to a system and method for storing and transmitting data. The data may be stored as a hierarchical data list (HDL), hierarchical data container (HDC), or hierarchical data element (HDE). An HDE may include a structure that comprises a \u2018name\u2019, syntax, and value. Additionally, an HDE describes its relationship to sibling objects and\/or a parent HDE. One example of an HDE is a linked attribute value pair (LAVP). An HDC is a particular type of HDE that comprises a name and pointers to a list of zero or more HDEs. An example of an HDC is a linked attribute value list (LAVL). An HDL may be an HDC and its collection of zero or more HDEs. An example of and HDL may be an LAVL and zero or more LAVPs.","The invention provides a system and method for representing, storing, transmitting, and retrieving information. The invention uses a hybrid data object containing hierarchical information and references back-end databases that may be stored with one or more keys that are dynamically derived from an HDE's content when the object is stored. The invention enables sufficient storage and retrieval of HDLs using indexing with Structured Query Language (SQL)-like complex query capabilities. Each HDL and HDE may be a self-defining entity. That is, each HDL and HDE contains its own schema. Each HDL may contain information to determine the attributes of the HDL, HDE, and each data element. The invention also enables rapid navigation, transmission, searching, construction, manipulation, and deletion of HDLs and HDEs.","The HDL may include collections of HDEs and possibly, other subordinate HDLs. This recursive data architecture enables complex hierarchies of data objects and enables data inheritance. Navigation through an HDL may be forward, backward, up, or down, through a navigational tree. The HDL may be broken apart and rearranged in any manner desired.","The invention also enables referencing back-end databases such as LDAP, DB2, and Oracle. These data references may be cached and subsequently retrieved without referring to the back-end databases. This enables faster retrieval of the data objects from such systems. A time-to-live for each cache entry may be set individually for each cached HDL. The invention also enables invalidation of a cached reference and rereading of a cached reference regardless of a status of the reference.","Each HDL may be stored as an ordinary \u201cflat file,\u201d and may be copied, moved, backed-up, or deleted using known operating system commands. HDLs may also be replicated to remote locations. Preferably, replication is performed in real-time.","Other objects, advantages, and embodiments of the invention are set forth in part in the description that follows and in part will be apparent to one of ordinary skill in the art.","The invention relates to a system and method for caching a network connection. The invention sustains a connection between a server and a back-end database after a connection between the server and an end-user device has been disconnected.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 1","b":["100","102","104","104","106","108","110","112","114","100"],"i":["a","n"]},"TCP\/IP proxy  enables host computer  to accept a TCP\/IP connection. After a TCP\/IP connection is made with TCP\/IP proxy , the connection may be communicated to a server process. This enables TCP\/IP proxy  to shield each server process from a potential failure in any other server process. Servers -may be used to maintain one or more TCP\/IP connections. Servers -may be in communication with database  and may operate independent of each other to reduce a chance of failure. Additionally, using this configuration, data corruption is reduced.","Data corruption reduction is possible because each location on a server may have a corresponding code location for code that may modify only that particular location. Therefore, the code may not be used to modify other locations that may be referenced by other processes of the server that require updates. Additionally, a server may have multiple locations having the same name. Therefore, by limiting a location that the code may modify, this reduces modification errors by modifying a location not intending to be modified. For example, if a server includes two (2) locations \u201c1000\u201d and a single code for modifying both locations, the code may modify an incorrect location. This increases a likelihood of incorrect data being processed. By using only a single code for each location, this reduces a chance for data being corrupted.","Purger  may receive requests from one or more of servers -to schedule automatic deletion of objects within database . For example, an application may schedule deletion of one or more HDLs two (2) weeks after creation. Purger  may be used to delete HDLs that have been designated to be deleted after a predetermined time period.","Purger  may also be used to delete one or more HDLs after a last use expiration. For example, an HDL may be scheduled for deletion after two weeks. If a user modifies the HDL a day before the expiration of the two weeks, the HDL may still be deleted after the two weeks has expired. Therefore, an HDL that may be desired to be retained may be deleted. Thus, purger  may be set to delete an HDL two weeks after a last use of the HDL. In this manner, HDLs may not be deleted if the HDL is still in use. For example, purger  may be set to delete an HDL two weeks after a last use as opposed to two weeks after creation.","Global lock manager  may be used to coordinate explicit record locking requests from remote application . A record lock request may be a request from a user to prohibit one or more other users from accessing a particular object. A lock may be shared or exclusive, have a wait time that controls how long an application may wait before obtaining a lock, or have an expiration time that controls when a lock may be automatically released. Global lock manager  may also dynamically display currently held and pending locks.","Replicator  may be used to communicate, for example, using MQ Series, with other replicators. For example, replicator  may replicate HDLs during an insert command. The insert operation may provide a name of a list of instances that may receive a copy of the HDL. A list-of-lists may also be allowed and may be reduced and edited to reduce multiple insertions at a single instance. The list-of-lists may be recursive.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 2","b":["200","200","202","202","204","204","202","202","204","204","202","202","204","204"],"i":["a","n ","a","n","a","n ","a","n","a","n ","a","n"]},"Each LAVP -may include a header  and value  as shown in FIG. A. Value  may contain zero (0) or more bytes of data. The length of the value may be stored in header . Each header may have a syntax describing a format of the value. For example, a value may be an Integer, Unicode string, Timevalue, or application defined. An LAVP may be six (6) words plus the content of the header length field. Preferably, header  includes at least six (6) words. Header  may be used to identify an attribute of an HDL and its relationship to other attributes.","Header  may include a previous LAVP , next LAVP , parent LAVL , OID , length , pool ID , syntax , and data  as shown in FIG. B. Previous LAVP , next LAVP , and parent LAVL  may be used as pointers to other LAVPs and LAVLs. Previous LAVP , next LAVP , and parent LAVL  may be implemented as relative offsets rather than actual pointers. For example, previous LAVP  may refer to the previous LAVP by a distance in bytes rather than location of the previous LAVP. Implementing previous LAVP , next LAVP , and parent LAVL  as relative offsets facilitates placing objects in shared memory segments and memory mapped disk files and transmission. By using relative offsets, an object may be referenced by different addresses and different processes in the same or other systems. Therefore, LAVLs and LAVPs may not be required to be moved to different storage locations and may reside in any place in memory. If an LAVP is not a member of an LAVL, previous LAVP , next LAVP , and parent LAVL  may be designated as null, for example, \u22121.","For an integer value defined using the following code:","#define my_oid 0x00040005","ost_create_int (my_oid, 27);","previous LAVP , next LAVP , and parent LAVL  may have a \u22121 value indicating a null value, OID  may have a 0x00040005 value, length  may have a 4 value, pool  may have a zero (0) value, syntax  may have an ost_syntax_sint32 value, and an additional element  storing the integer value, that is, 27, may also be included.","Code for carrying out the invention may include various classes of calls. For example, the classes may include creation, identification, navigation, searching, comparison, manipulation, displaying\/debugging, and destruction. The creation class may include a create call, the identification may include an OID, syntax, length call, navigation may include a previous, next, parent, first, last, scan, and traverse calls, searching may include a locate call, manipulation may include a join, weave, merge, unchain, and add calls, and the destruction class may include a free call.","The following are examples of code that may be used for carrying out the invention. Although the examples are written in C language, other computer languages may also be used. Preferably the following commands are performed at the hardware level of a system using the invention.","To create an LAVL, the following syntax may be used:","#include <ost_lavls.h>","Lavl*ost_create_lavl (Oid)","Oid oid;","This function may be used to create an LAVL as shown in FIG. B. The returned LAVL pointer contains the address of a LAVL with the given OID. The LAVL may not be chained to any other LAVPs and contain no children. In other words the Previous, Next, LAVL, Parent, Head, and Tail pointers are NULL. OID may be an object identifier, for example, a name of an LAVL to be created.","To create a real value LAVP, the following syntax may be used:","#include <ost_lavls.h>","Lavp*ost_create_real (oid, value, tolerance, Unitid)","Oid oid;","double value;","Uint tolerance","Uint UnitID","This function creates a real value LAVP. The value may be described with a tolerance and a UnitID. The value may be the most likely value of the data. The tolerance represents a percentage error that may be expected not to exceed 95% of the time. The tolerance may be a 16 bit unsigned number that represents 1\/1000ths of a percent. This implies that the smallest tolerance is 0% and the largest tolerance is +\/\u221265.535%.","Pre-defined values for common tolerances may be:",{"@attributes":{"id":"p-0074","num":"0073"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"char"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["#define MATCH_EXACTLY","\u2003\u20030 \/*","0%","*\/"]},{"entry":["#define MATCH_NEARLY","\u20021000 \/*","1%","*\/"]},{"entry":["#define MATCH_CLOSETO","\u20022000 \/*","2%","*\/"]},{"entry":["#define MATCH_APPROXIMATELY","\u20025000 \/*","5%","*\/"]},{"entry":["#define MATCH_AROUND","10000 \/*","10%","*\/"]},{"entry":["#define MATCH_ROUGHLY","25000 \/*","25%","*\/"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"The UnitID may be a number from 1 to 499 that represents the dimension of the value. UnitIDs may be found in \u2018NAME\u2019 records of the OST configuration and the ost_clientlib.h C language file.","Example: To create a real value of 160+\/\u22121% pounds:","ost_create_real (WEIGHT_OID, 160.0, MATCH_NEARLY, OST_UNIT_pounds);","Character strings may be represented by a variety of syntaxes that indicate a character set and an LAVP value area that may include a one (1) word length followed by characters. A request for an LAVP's value length may be the length of a value area, not the length of the string contained therein. There may be two (2) basic types of calls to create character strings. The first:","LAVP*0ST_Create_XXXXXX (Oid oid, char*text); may be used to create a string LAVP from a null terminated string.","The second:","LAVP*0ST_create_XXXXXX (Oid, oid, char*text, Sint  length), may be used to create a string from a non-null terminated string.","To create an integer LAVP, the following code may be used:","#define my_oid 0x00040005","ost_create_int (my oid, 27);","To create a unicode string LAVP from an ASCII string, the following syntax may be used:","#include <ost_lavls.h>","Lavp*ost_create_unicode_from_ascii (my_oid, \u201cThis is text\u201d)","Lavp*ost_create_unicode_from_ascii (my_oid, \u201cThis is text\u201d, 12)","Oid oid;","char*test;","Sint Length;","In this example, a header  of an LAVP may include the following:","previous LAVP , next LAVP , and parent LAVP  may have \u22121 values, OID  may have a 0x00040005 value, length  may have a value of 28 or more, pool  may have a zero (0) value, and syntax  may have an ost_syntax_unicode value. A value  of the LAVP may have a 12 value and text including THISISTEXT.","To create an LAVP that contains a numeric value, the following syntax may be used:","#include <ost_lavls.h>","Lavp*ost_create_time_gmt(oid,time)","Oid oid;","Timeval time;","This function may be called to create an LAVP with syntax OST_SYNTAX_TIME,GMT. The time argument may be interpreted in two ways:","An absolute time, then the time value represents the number of microseconds since Jan. 0, 1970. The time may be represented as a relative time. For example, 5:30. That is, 5 and one-half hours from a given time. Time values may be added or subtracted to obtain other absolute or relative time values. An absolute value may be added to a relative time value to obtain an absolute time value. For example, an absolute time value of Jan. 1, 1970, plus a relative time value of five (5) and one-half hours yields an absolute time value of Jan. 1, 1970, 5:30 a.m. Absolute time values may be subtracted from another absolute time value to produce a relative time value. The relative time value may be an amount of time between the two absolute time values. Additionally, relative time values may be added to each other to produce another relative time value.","To create an LAVP that contains a numeric value, the following syntax may be used:","#include <ost_lavls.h>","Lavp*ost_create_time_gmt (oid, time)","Oid oid;","Timeval time;","To create a character string LAVP, the following syntax may be used:","#include <ost_lavls.h>","Lavp*ost_create_ascii (oid, text);","Lavp*ost_create_ascii (oid, text, textlen);","Lavp*ost_create_cp (oid, test);","Lavp*ost_create_cp (oid, text, textlen);","Lavp*ost_create_ebcdic (oid, text);","Lavp*ost_create_ebcdic (oid, text, textlen);","Lavp*ost_create_hexdata (oid, text);","Lavp*ost_create_hexdata (oid, text textlen);","Lavp*ost_create_ia (oid, text);","Lavp*ost_create_ia (oid, text, textlen);","Lavp*ost_create_iso (oid, text);","Lavp*ost_create_iso (oid, text, textlen);","Lavp*ost_create_iso(oid, text);","Lavp*ost_create_iso (oid, text, textlen);","Lavp*ost_create_iso (oid, text);","Lavp*ost_create_iso (oid, text, textien);","Lavp*ost_create_iso (oid, text);","Lavp*ost_create_iso (oid, text, textlen);","Lavp*ost_create_iso (oid, text);","Lavp*ost_create_iso (oid, text, textlen);","Lavp*ost_create_iso (oid, text);","Lavp*ost_create_iso (oid, text, textlen);","Lavp*ost_create_iso (oid, text);","Lavp*ost_create_iso (oid, text, textlen);","Lavp*ost_create_iso (oid, text);","Lavp*ost_create_iso (oid, text, textlen);","Lavp*ost_create_iso (oid, text);","Lavp*ost_create_iso (oid, text, textlen);","Lavp*ost_create_iso (oid, text);","Lavp*ost_create_iso (oid, text, textlen);","Lavp*ost_create_isot (oid, text);","Lavp*ost_create_isot (oid, text, textlen);","Lavp*ost_create_numeric (oid, text);","Lavp*ost_create_numeric (oid, text, textlen);","Lavp*ost_create_printabl (oid, text);","Lavp*ost_create_printabl (oid, text, textlen);","Oid oid;","char*text;","Sint textlen;","An example of creating an ASCII string, for example, \u201cThis is text,\u201d may include the following syntax:","ost_create_ascii (my_oid, \u201cThis is text\u201d)","A header  of an LAVP storing this information may include a previous LAVP , next LAVP , and parent LAVP  having \u22121 values, an OID  having a 0x00040005 value, a length  value of 16 or more, a pool ID of 0, and a syntax of ost_syntax_ascii. The value  of the LAVP may include a 12 value and text including \u201cThis is text\u201d.","To create a unicode string LAVP from a ASCII string, the following syntax may be used:","#include <ost_lavls.h>","Lavp*ost_create_unicode_from_ascii(oid,text)","Lavp*ost_create_unicode_from_ascii(oid,text,length)","Oid oid;","char*text;","Sint Length;","To get a syntax of an LAVP, the following syntax may be used:","#include <ost_lavls.h>","Syntax ost_syntax(lavp)","Syntax ost_syntax(lavl)","Lavp*lavp;","Lavl*lavl;","The ost_syntax function obtains the syntax of the LAVP. If the argument is a NULL value, for example, \u22121, a SIGBUS error may result.","To get the address of the previous LAVP in an LAVL, the following syntax may be used:","#include <ost_lavls.h>","Lavp*ost_prev(lavp)","Lavp*ost_prev(lavl)","Lavp*lavp;","Lavl*lavl;","The ost_prev function obtains the address of the previous LAVP in a LAVL. If the argument is NULL, is the first LAVP in a LAVL, or the LAVP is not in a LAVL then NULL may be returned.","To get the address of the next LAVP in an LAVL, the following syntax may be used:","#include <ost_lavls.h>","Lavp*ost_next(lavp)","Lavp*ost_next(lavl)","Lavp*lavp;","Lavl*lavl;","The ost_next function obtains the address of the next LAVP in a LAVL. If the argument is NULL, is the last LAVP in a LAVL, or the LAVP is not in a LAVL then NULL is returned.","To get the address of a parent LAVL from an LAVP, the following syntax may be used:","#include <ost_lavls.h>","Lavl*ost_lavl(lavp)","Lavl*ost_lavl(lavl)","Lavp*lavp;","Lavl*lavl;","The ost_lavl function obtains the address of the parent LAVL for an LAVP. If the argument is NULL or the LAVP is not in a LAVL then NULL is returned.","To search the database for a Real value the following code may be used:","where_clause=ost_EQ( ost_create_real (WEIGHT_OID, MATCH_AROUND, 72.0, OST_UNIT_kilograms));","To add an LAVP to an LAVL, the following syntax may be used:","#include <ost_lavls.h>","Lavl*ost_add(existing_lavl,new_lavp)","Lavl*ost_add(existing_lavlnew_lavl)","Lavl*existing_lavl;","Lavp*new_lavp;","Lavl*new_lavl;","This function may be called to add an LAVP or LAVL to a LAVL. The LAVP\/LAVL may be from any LAVL that it may be a member of and is rechained to the end (bottom) of the LAVL. If the LAVP is not a member of a LAVL then a simple add may occur. If either operand is NULL then no action may occur.","This function is very commonly used in conjunction with the ost_create_( ) function as follows:",{"@attributes":{"id":"p-0196","num":"0195"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Before",{}]},{"entry":[{},"L1","L3"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1","P11"]},{"entry":[{},"P2","P12"]},{"entry":[{},"P3","P13"]},{"entry":[{},"L2","L4"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P4","P14"]},{"entry":[{},"P5","P15"]},{"entry":[{},"P6","P16"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P7","P17"]},{"entry":[{},"P8","P18"]},{"entry":[{},"P9","P19"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ost_add(L1,P15);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"After",{}]},{"entry":[{},"L1","L3"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1","P11"]},{"entry":[{},"P2","P12"]},{"entry":[{},"P3","P13"]},{"entry":[{},"L2","L4"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P4","P14"]},{"entry":[{},"P5"]},{"entry":[{},"P6","P16"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P7","P17"]},{"entry":[{},"P8","P18"]},{"entry":[{},"P9","P19"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P15"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"To disassociate an LAVP or LAVL from a LAVL, the following syntax may be used:","#include <ost_lavls.h>","void ost_unchain(lavp)","void ost_unchain(lavl)","Lavp*lavp;","Lavl*lavl;","This function may be used to dissociate an LAVP or LAVL from a LAVL. The LAVL's address may be determined from the LAVP by internally calling ost_lavl(lavp). The LAVL's head and tail may be updated if required and the LAVP's previous and next siblings are rechained together as appropriate. The argument LAVP's LAVL, previous, and next pointers are set to NULL to indicate that the LAVP is no longer a member of any LAVL. The LAVP may be indicated as a loose object if this feature is enabled. The contents of the LAVP may then be preserved.","To display an LAVP or LAVL, the following syntax may be used:","#include <ost_lavls.h>","extern FILE*ost_display_FILE;","void ost_display (lavl)","void ost_display (lavp)","Lavl*lavl;","Lavp *lavp;","OID  may be used to identify a name of an object. Length  may be used to identify a length of the object. Pool ID  may be used to identify a group to which that object may be associated. Syntax  may be used to identify a format of the LAVL's value. Data  may be used to store the LAVL's data. Length  may be computed based on value  and syntax . Pool ID  preferably uses an eight (8) bit identification.",{"@attributes":{"id":"p-0212","num":"0211"},"figref":["FIG. 4","FIG. 4"],"b":["400","402","404","406","402","404","406","404"]},"The invention may also enable storing concepts and colors.  illustrates an HDL  storing a concept. The concept stored as shown is a man's clothing ensemble. HDL  may include all information relating to one ensemble. By storing all the information together as a single object only, a single call from a server to request all or a portion of HDL  may be needed. HDL  includes the following HDCs: ensemble , color , shirt , pants , and shoes . HDL  also includes the following HDEs: size , material , sleeve , material , inseam , material , size , and color-black . HDEs - identify particular criteria for HDC . That is, HDEs - indicate the size, material, and sleeve for shirt  in the ensemble. HDEs - indicate a material and inseam for pants  in the ensemble. HDEs - indicate the material, size, and color for shoes  in the ensemble. It should be noted that color HDC  indicates a color for each portion of the ensemble following that HDC. HDE , however, indicates a particular color for the shoes. Therefore, the color indicated in HDC  may be overridden by the color indicated in HDE . Each HDC and HDE - may include descriptions for each portion of the ensemble. Therefore, if a user submits a call, for example, for ensembles having black shoes, HDL  may be retrieved. If the user then further desires to view information regarding other portions of ensemble , HDL  includes all of the information and therefore, the system does not require another call to a server to request any additional information because the information may already be included in HDL .","A user may navigate through HDL  by drilling-up or drilling-down. For example, for HDE , a user may be presented with information regarding HDE  or other portion of the ensemble. Although not shown in , the ensemble may also include other information such as, for example, accessories or other clothing.","Additionally, because entire HDL  is retrieved, no parsing of the data contained therein may be necessary. The system may not be required to parse through one or more HDLs and determine particular data elements that satisfy a request and retrieve only those data elements. This reduces processing time because parsing of data may not be necessary and drilling-down or up may be performed at a client and not at a server.","Storing conceptual information as a single hierarchical object may decrease retrieval time. As stated above, because all information regarding a particular concept is stored within a single object, the object may be stored locally by an application and is not required to contact a server for retrieving additional information regarding the concept.","As data is stored, an application designer or other user may store data related to a particular concept as a hierarchical tree. The application designer or other user has the flexibility to include as much information as desired into a single object. This flexibility enables application designers or other users to store complete concepts within a single object.","Additionally, HDLs may include references to other HDLs. For example, an HDL that describes a man's clothing ensemble as shown in  may include a reference to an HDL that contains all information regarding another ensemble for a man. This may be performed by inserting a where clause in a code describing the ensemble stored in the HDL that calls another ensemble HDL, retrieves the other ensemble HDL, and inserts that other ensemble HDL into the first ensemble HDL. In this manner, HDLs may include other HDLs as well.","The invention also enables storing colors. Colors may be stored as equations identifying three (3) dimensional color space. Therefore, a color attribute may be ascribed to a particular data element. A color attribute may be stored by identifying a red, green, and blue characteristic of a particular color using a predetermined range of values. For example, each red, green, and blue characteristic of a color may be expressed as a percentage from zero (0) to one-hundred (100). Alternatively, if a color is stored as a one byte of data, each attribute may be assigned a value from zero (0) to two-hundred fifty-five (255). Therefore, red, green, and blue attributes may be described as any relative range of values.","For example, a color having red, green, and blue attributes equal to zero (0) may define a black color. Alternatively, if each red, green, and blue attribute is defined as one-hundred (100) percent of each color, then the color defined may be white. Furthermore, if a color attribute is expressed as fifty (50) percent red, fifty (50) percent green, and fifty (50) percent blue, the color may be gray.","A color attribute may be defined as a distance from each red, green, and blue attribute as shown on a three (3) dimensional color space. Therefore, each color may be defined as:\n\n=\u221a{square root over (()+()+())}{square root over (()+()+())}{square root over (()+()+())}\n\nwhere D equals a distance between two (2) colors having R, B, G and R, B, and G attributes, respectively. The distance may be defined as the square root of the sum of the squares of the differences of each color component. By having each color component stored as one (1) byte of data, therefore, there may be a total of twenty-four (24) bits that may be used to express a plurality of colors. Thus, at least 16 million different colors may be represented.\n","The invention also enables statistical matching. Statistical matching may be used to retrieve real values within a predetermined tolerance. For example, an object may be stored that describes properties of a brick. The brick may have a length, width, height, weight, etc. A user may request objects describing a brick that has a weight of five (5) pounds plus or minus five (5) percent. The user may request such information using any known input device, for example, a keyboard, mouse, voice recognition software, touchscreen, etc. The request may be submitted to a server. The server may assume a normal distribution. The server may convert the units of measurement, that is, pounds, into other equivalent units of measurement, for example, kilograms, tons, grams, etc. A normally distributed statistical curve may then be calculated for the tolerance specified.","The statistical curve may be used to determine whether any objects match the user's request. This may be done by calculating a statistical curve for all objects related to the user's request. The statistical curve for the requested objects may then be superimposed on the statistical curve for all of the objects. A match may be determined by an area under both curves within the predefined tolerance. If there are no portions of the curves that overlap within the predefined tolerance, a no match result may be presented to the user. If, however, the curves overlap within the predefined tolerance, a match result may be presented to the user.","Therefore, a statistical curve for a brick weighing five (5) pounds plus or minus five (5) percent would indicate that bricks having a weight in a range of 4.75 pounds to 5.25 pounds are acceptable. The server may then determine objects comprising information relating to bricks having a weight within that range. The server may then return to a user a list of objects that match the requested specification. The objects meeting the specification may also be presented to the user. A match\/no match indicator may also be presented to the user. Furthermore, an indication of a number of matching objects out of a total number of objects may also be presented to the user.","As indicated above, the syntax used to search for objects having a particular specification includes a value, tolerance, and unit. The invention may index compatible units. For example, an index for weight may include pounds, kilograms, grams, tons, etc.","The invention also enables fizzy searching capability. An index of real values containing units may be searched. A search argument used for searching the index may include a value, tolerance, and unit. The invention may first convert an index entry and search argument to a standard unit. A decision may then be made depending on a stated tolerance of the index entry and the search argument. The index entry may be assumed to be normally distributed and the tolerance expressed as a percentage may be taken to be the second standard deviation interval (95%). The tolerance may then be used to calculate the statistical probability that an index entry is less than, equal to, or greater than a search argument. A search argument may also contain concepts such as exactly, close to, nearly, approximately, about, and roughly. These concepts may be used in both the storage and retrieval of data and may be pre-set by a system administrator. For example, a system administrator may pre-set a nearby tolerance to one (1) percent, an exactly tolerance to zero (0) percent, an about tolerance to ten (10) percent, etc.","Search arguments may also be used to perform searches on simple indexes, for example, searching a database for names of one or more persons. The syntax for a search command may include the following:","#include <ost_clientlib.h>","Lavl*ost_queue_search (session, where_clause)","OST_Session*session;","Lavl*where_clause","The search algorithm may be implemented using Venn Sets. When an object is inserted into the database with the index option enabled, then each eligible OID is indexed. An index may contain a list of each unique value for the OID. For each unique value a list of Object Numbers may be maintained. For example, the following objects may be stored in the database and indexed on GIVENNAME_OID and SURNAME_OID.",{"@attributes":{"id":"p-0233","num":"0232"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Object 1"]},{"entry":[{},"L (FAMlLY_OID)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ASCII (SURNAME_OID) = \u2018SMITH\u2019"]},{"entry":[{},"L (FATHER_OID)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ASCII (GIVENNAME_OID) = \u2018JOHN\u2019"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"L (MOTHER_OID)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ASCII (GIVENNAME_OID) = \u2018JANE\u2019"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"L (SON_OID)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ASCII (GIVENNAME_OID) = \u2018JOE\u2019"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"L (SON_OID)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ASCII (GIVENNAME_OID) = \u2018JOSHUA\u2019"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"L (DAUGHTER_OID)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ASCII (GIVENNAME_OID) = \u2018JANET\u2019"]},{"entry":[{},"ASCII (SURNAME_OID) = \u2018JONES\u2019"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"L (DAUGHTER_OID)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ASCII (GIVENNAME_OID) = \u2018JULIA\u2019"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Object 2"]},{"entry":[{},"L (FAMILY_OID)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ASCII (SURNAME_OID) = \u2018JONES\u2019"]},{"entry":[{},"L (FATHER_OID)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ASCII (GIVENNAME_OID) = \u2018SAM\u2019"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"L (MOTHER_OID)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ASCII (GIVENNAME_OID) = \u2018SHIRLEY\u2019"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"L (SON_OID)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ASCII (GIVENNAME_OID) = \u2018JOE\u2019"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"L (SON_OID)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ASCII (GIVENNAME_OID) = \u2018SHAWN\u2019"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Object 3"]},{"entry":[{},"L (FAMILEY_OID)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ASCII (SURNAME_OID) = \u2018ADDAMS\u2019"]},{"entry":[{},"L (FATHER_OID)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ASCII (GIVENNAME_OID) = \u2018GOMEZ\u2019"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"L (MOTHER_OID)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ASCII (SURNAME_OID) = \u2018JONES\u2019"]},{"entry":[{},"ASCII (GIVENNAME_OID) = \u2018MORTICIA\u2019"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"L (SON_OID)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ASCII (GIVENNAME_OID) = \u2018PUGSLY\u2019"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"L (DAUGHTER_OID)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ASCII (GIVENNAME_OID) = \u2018WEDNESDAY\u2019"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"A search command may also contain Boolean logic such as \u201cand\u201d and \u201cor.\u201d An example of syntax that may be used to create an \u201cand\u201d condition for use in a search argument may be the following:","#include <ost_clientlib.h>","Lavl*ost_AND(lavl, lavl)","Lavl*lavl;","Lavl*lavl;","The ost_AND function may create an AND condition in a Search Argument. For example, to express the condition WHERE(GIVENNAME_OID=\u2018Jane\u2019) AND (SURNAME_OID=\u2018Smith), the following code may be used:","Lavl*where;","Lavl*arg;","Lavl*arg;","arg=ost_EQ(ost_create_ascii(GIVENNAME_OID, \u201cJane\u201d));","arg=ost_EQ(ost_create_ascii(SURNAME_OID, \u201cSmith\u201d));","where=ost_AND(arg,arg);","To create an \u201cor\u201d condition for use in a search argument, the following syntax may be used:","#include <ost_clientib.h>","Lavl*ost_OR(lavl,lavl)","Lavl*lavl;","Lavl*lavl;","The ost_OR function creates an OR condition in a Search Argument. For example, to express the condition WHERE (GIVENNAME_OID=\u2018Jane\u2019) OR (SURNAME_OID=\u2018Smith\u2019), the following code may be used:","Lavl*where;","Lavl*arg;","Lavl*arg;","arg=ost_EQ(ost_create_ascii(GIVENNAME_OID, \u201cJane\u201d));","arg=ost_EQ(ost_create_ascii(SURNAME_OID, \u201cSmith\u201d));","where=ost_OR(arg,arg);","The invention preferably includes units of measurements related to a plurality of measurements and may convert among each unit within a particular category of measurement. The invention preferably includes a units table compiled once and may be edited by a user as needed.","The invention also enables multi-indexing of objects. The objects may be indexed according to ASCII code, string, or other criteria If an object is not indexed, the object is preferably assigned a serial number. An object may include multiple indexes and cells within an index may include multiple values. For example, letters A, B, C, and D may be indexed as R, R, R, and R, respectively. Letter E, however, may be indexed as R. Therefore, one cell or record may have multiple aliases. The indexes are preferably created over an entire object, although indexes may be created based on particular fields. Indexes over an entire record, however, may yield broader results for searches performed on the index. For example, a search of an index for families having a female child may yield objects that comprise a mother and a child where the child may not necessarily be female. This may be due to the mother satisfying the female portion of the search request and the child satisfying the child portion of the search request.","The invention also enables creating multi-indexes with one (1) insert. Multi-indexing may be enabled because when an object is created, each HDC and HDE provided in the object may be indexed upon creation of the object. Therefore, it may not be necessary to individually insert one or more HDCs or HDEs from an object into an index. The invention may automatically index each HDC and HDE in an object","The invention also enables reference to back end databases such as LDAP, DB2, and Oracle. When referencing an LDAP database, the invention may return LDAP entries as LAVLs rather than Bit Error Rate (BER) encoded strings. This enables navigation among various data elements. Additionally, as described above, the invention may return entire HDLs that include all information relating to a particular data element. This reduces the number of calls needed to be made against a record at a server. Navigation may be performed backward and forward and to detect and process multi-valued LDAP entries.","Another advantage is that the invention automatically distinguishes syntaxes of objects retrieved from a back-end database. The invention also stores the syntax and value for a particular record. Therefore, the invention provides unified access to multiple types of databases by providing a common application programming interface.","The invention also enables maintaining of network connections. After a connection to a back-end database, for example, from a server or other device is established, the connection to the back-end database may be maintained. Therefore, if a user cancels a connection to a server, a connection between the server and the back-end database may be maintained. Thus, if a user reconnects to the server and requests additional information from the back-end database, the server does not need to reconnect to the back-end database because the previous connection has been maintained. Therefore, processing time is reduced because reconnection time may not be necessary. The server may determine whether an open connection exists for one or more particular devices, for example, by maintaining a list of open connections. Therefore, if the server receives a request for information from a database or other device, the server may check the list of open connections and determine whether a connection to that database or device exists. If a determination is made that a connection is open, the server may use that connection to satisfy the request. This reduces a need for a server to reestablish a connection to a particular device on numerous occasions.","The invention also enables searching using extended regular expressions and Unicode strings in the spirit of UNIX eGREP() command. For example, a search may be performed on ASCII strings that include a three (3) digit code. ASCII strings may include key , key , and key . A search may be performed on the ASCII strings using an extended regular expression that may be arbitrarily complex. For example, a search expression may be \u201ckey[]\u201d. A search of the ASCII strings using this expression may yield key and key.","Additionally, Unicode strings may also be searched. Unicode string searches may be SQL-like statements. For example, a Unicode string search may be \u201ctext\u201d. This enables searches of exact Unicode strings.","The invention may also include a memory debugging feature. The feature may be implemented using, for example, seven levels of diagnostic data, one level may be an environmental \u201cM\u201d option. Setting this option may cause all LAVPs to be set to a particular format when the LAVP is freed from memory. This may be used to increase the likelihood that an LAVP is not referenced after it is free. The debugging option may also include an environmental \u201cL\u201d option that causes loose object detection. This option may cause an LAVLs application programming interface to maintain a list of every LAVP that is not in an LAVL. The debugging feature may also include an option that disables an internal object identifier look aside buffer. The look aside buffer may be used to increase the performance of an LAVP locator function. If a loose object detection option is enabled, the system may display contents of a loose object list that may be invoked at any time. This may provide several levels of diagnostic data that may facilitate locating objects and their creation. Objects may automatically be placed onto and removed from a loose object list whenever a parent pointer is made non-null or null, respectively.",{"@attributes":{"id":"p-0267","num":"0266"},"figref":"FIG. 6A","b":["600","600","602","604","606","608","610","602","604","606"]},"Command submitting module  may be used to submit the commands to a server for processing. Additionally, an HDE creating module  may be used to create one or more HDEs that may be included in one or more HDCs and HDLs.","After each HDC, HDE, and HDL is created, storing module  may be used to store the HDCs, HDEs, and HDLs at a location in memory of a client or other device. An identifier assigning module  may be used to assign an identifier to one or more HDLs.","As described above, an HDL may include a length field. Therefore, length determining module  may be used to determine a length of data stored by an HDL. A format determining module  may also be used to determine a format of the data stored by the HDL.","After one or more commands are submitted to a server by command submitting module , a response from the server may be received using response receiving module . A response analyzing module  may be used to analyze the response received from the server. The analysis may include determining whether the response includes one or more HDLs, whether the HDLs include one or more HDCs or HDEs, determining data stored by the HDLs, or other analysis.","If a determination is made that the response includes one or more HDLs, an HDL analyzing module  may be used to analyze the HDLs. The analysis may included determining whether the HDL includes one or more HDCs or HDEs, data stored by the HDL, or other analysis. Navigating module  may be used to navigate either forward or backward through an HDL. Manipulating module  may be used to manipulate one or more HDLs. Manipulating the HDLs may include joining two or more HDLs, weaving two or more HDLs, merging or adding two or more HDLs together, unchaining an HDC or HDE from and HDL, etc. A freeing module  may also be used to free an HDC, HDE, or HDL. Preferably, freeing an HDC, HDE, or HDL includes removing the HDC, HDE, or HDL from an HDL. This may be equivalent to a delete operation.",{"@attributes":{"id":"p-0273","num":"0272"},"figref":"FIG. 6B","b":["650","650","652","650","654","656","654"]},"A create HDE step  can then be used to create one or more HDEs. The HDEs may be included in an HDC and\/or HDL. In step , the HDL may be stored to, for example, an object store. In assign identifier step  may be used to assign an identifier to the HDL stored. Steps  and  may be used to determine a length and format of data in the HDL stored.",{"@attributes":{"id":"p-0275","num":"0274"},"figref":"FIG. 7","b":["700","700","702","704","706","708","710","712","714","716","718","720","702"]},"Command receiving module  may be used to receive one or more commands from a client. Execution module  may execute the commands received by command receiving module . Response creating module  may then create a response to the commands received and executed by execution module . Response transmitting module may transmit the response to the client.","Replicating module  may be used to replicate one or more HDLs, HDCs, or HDEs. Replication may be performed in response to a command received from a client by command receiving module . Purging module  may also be used to purge one or more HDLs, HDCs, or HDEs. Purging may include deleting an HDL, HDC, or HDE from a memory of server . Global locking module  may be used to prevent access to one or more HDLs by a particular user. For example, global locking module  may prohibit one or more users from accessing the HDL. Global locking module  may prohibit access based on attributes stored within a user profile or provided in an HDL.","Index creating module  may be used to create an index based on one or more HDLs. Any HDCs or HDEs included in an HDL may be used for creating an index of HDCs or HDEs included in each HDL. Index creating module  may create multiple indexes upon creation of an HDL. Therefore, if one HDL is created, multiple inserts may be created in an index by index creating module . Referencing module  may be used to reference, for example, one or more back-end databases. The back-end databases may include an LDAP, Oracle, or DB database. Referencing module  may enable an entire database to be referenced by an HDL. For example, an HDL may include an HDC that references an Oracle database. Therefore, when the HDL that references the Oracle database is requested, the Oracle database is retrieved along with the HDL requested. This reduces the number of calls that may be necessary for retrieving the Oracle database. Thus, the HDL requested and the Oracle database are retrieved using a single call.",{"@attributes":{"id":"p-0279","num":"0278"},"figref":"FIG. 8","b":["800","800","802","804","806","808","810","812","814","816","818","820","822","802","804","806","808"]},"Second statistical curve determining module  may then be used to determine a statistical curve for one or more HDLs stored by the object store that satisfy the request. Overlap determining module  may be used to determine whether any overlap exists between the first statistical curve and the second statistical curve. The statistical curves may assume a normal distribution. Any overlap between the two curves may be defined as a percentage match by a user. For example, a user may define overlap between the two statistical curves and a match indicating a match of 95%.","Converting module  may be used to convert units presenting in a request to a common set of units. For example, if a request indicates that HDLs describing bricks weighing in a certain range of grams, converting module  may convert the grams to, for example, pounds, to coincide with units for weight stored by the object store. HDL presenting module  may then be used to present one or more HDLs that satisfy the request. Alternatively, a match result or non-match result may be presented using modules  or , respectively. Indicating module  may also be used to indicate a closeness of HDLs matching the request. For example, indicating module may indicate that three-hundred (300) of five-hundred (500) HDLs satisfied the request.",{"@attributes":{"id":"p-0282","num":"0281"},"figref":"FIG. 9","b":["900","900","902","904","906","908","910","912","914","916","902","904","906","908","910"]},"Disconnection request receiving module  may be used to receive a disconnection request from a client device. Disconnecting module  may be used to disconnect the connection between the client device and the server. Although the connection between the client device and the server may be disconnected, connection sustaining module  may be used to sustain the connection between the server and the end device. Therefore, if a first connection request is received after a connection between a client device and a server has been disconnected, and a client device request information from an end device to which the server is already connected, the server may not be required to reestablish the connection with the end device. In this manner the server maintains open connections with end devices for a predetermined period of time. This reduces connection time and does not require a server to reestablish connections with end devices each time a request is received for information from a particular end device.",{"@attributes":{"id":"p-0284","num":"0283"},"figref":"FIG. 10","b":["1010","1010","1012","1014","1016","1018"]},"In step , the server may receive a disconnection request from the client device. Step  may be used to disconnect the first connection between the client device and the server. Step  may be used, however, to sustain the second connection between the server and back end database and other end devices. In this manner, if a server receives a request to perform an operation at a back end database or other end device to which the server has previously established a connection, the server may not be required to reestablish the connection. A search of the second connection record may be performed to determine whether a connection has previously been established and whether that connection has been sustained. If a search of the connection record determines that a connection to the particular end device requested, the server may use that open connection instead of requesting another connection to the end device. This reduces connection time.",{"@attributes":{"id":"p-0286","num":"0285"},"figref":"FIG. 11","b":["1102","1102","1104","1106","1108"]},{"@attributes":{"id":"p-0287","num":"0286"},"figref":"FIG. 12","b":["1200","1200","1202","1204","1206","1208","1202","1204","1208"]},{"@attributes":{"id":"p-0288","num":"0287"},"figref":"FIG. 13","b":["1302","1304","1304","1306","1306","1308"]},{"@attributes":{"id":"p-0289","num":"0288"},"figref":"FIG. 14","b":["1400","1400","1402","1404","1406","1408","1402","1404","1406","1404","1408"]},{"@attributes":{"id":"p-0290","num":"0289"},"figref":"FIG. 15","b":["1502","1502","1504","1506","1508","1510","1512"]},"Step  may then be used to store a value of the data. The syntax of the data may also be stored in step . Step  may be used to store the data which may include the value and the syntax. The data may be stored as a character string.",{"@attributes":{"id":"p-0292","num":"0291"},"figref":"FIG. 16","b":["1600","1600","1602","1604","1606","1608","1610","1602","1604","1606","1608","1610"]},"The foregoing description of a system and method for storing hierarchical objects is illustrative, and changes in the above construction and sequences of operation may occur to persons skilled in the art. For example, although multiple modules are shown for carrying out the invention, additional or fewer modules may be used and multiple modules may be positioned in various locations. The scope of the invention is accordingly intended to be limited only by the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 16"}]},"DETDESC":[{},{}]}
