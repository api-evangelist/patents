---
title: Intelligent query re-execution
abstract: A method, apparatus and article of manufacture for accessing data in a database. One embodiment comprises providing a query against the database, the query being associated with a re-execution indication; initially executing the query; providing an initial query result; determining at least one re-execution time from the re-execution indication; and re-executing the query at the at least one determined re-execution time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07051020&OS=07051020&RS=07051020
owner: International Business Machines Corporation
number: 07051020
owner_city: Armonk
owner_country: US
publication_date: 20020627
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","EXAMPLE I","EXAMPLE II"],"p":["1. Field of the Invention","The present invention generally relates to data processing and, more particularly, to re-executing a query against a database for updating results of an initial query execution.","2. Description of the Related Art","Computerized information storage and retrieval systems made up of a (possibly large) number of files or tables are available in form of databases. The most prevalent type of database is the relational database, a tabular database in which data is defined so that it can be reorganized and accessed in a number of different ways.","Storing and retrieving data in a database or data warehouse is performed by means of a computer database management system (DBMS). A relational database management system (RDBMS) is a DBMS that uses relational techniques for storing and retrieving data. Regardless of the particular architecture, in a DBMS, a requesting entity (e.g., an application, the operating system or a user) demands access to a specified database or data warehouse by issuing a database access request. Such requests may include, for instance, simple catalog lookup requests or transactions and combinations of transactions that operate to read, change and add specified records in the database. These requests are made using high-level query languages such as the Structured Query Language (SQL).","Illustratively, SQL is used to make interactive queries for getting information from and updating a database such as International Business Machines' (IBM\u00ae) DB\u00ae, Microsoft's SQL Server\u00ae, and database products from Oracle\u00ae, Sybase\u00ae, and Computer Associates\u00ae. The term \u201cquery\u201d denominates a set of commands for retrieving and processing data from a stored database. Queries take the form of a command language that lets programmers and programs select, insert, update, find out the location of data, and so forth.","Assume a database including a table \u201cDEMOGRAPHIC\u201d having a plurality of data records, each data record comprising at least an indication of a last name, gender and age of a specific person. Assume further that a user wants to retrieve the last names of all male persons over the age of 40 from this table. To this end, the user would issue the following query against the database:\n\n","One aspect of database environments, which complicates successful queries is that changes are continuously being made to the underlying data. Consequently, the result set of a given executed query may be different depending on when the query is executed. It would be desirable to ensure that, over time, new data that satisfies the query is also made available to the user who initially executed the query.","Assume a medical facility interested in conducting a specific research study. A plurality of groups within the medical facility may be involved in the specific research study to collect samples and other information to be used in the study. Typically, a coordinator of the specific research study sets up the study. To set up the study, the coordinator must coordinate the plurality of groups within the medical facility. Setting up the study further comprises finding a group of candidates that meet the criteria set forth by the study. This may involve complex queries against databases or data warehouses, which can be very expensive to run, as hours to days of execution time may be required to collect an initial list of possible candidates. Once this list is built, the coordinator must coordinate getting agreement from the possible candidates to participate in the study. This can be a long and difficult process extending over months for a number of reasons. For instance, due to laws protecting privacy simply calling possible candidates via telephone may be prohibited. Moreover, each possible candidate may not accept participation in the research study. In the event the coordinator can not gather sufficient candidates from the initially determined possible candidates for the specific research study, he is required to re-execute the queries against databases or data warehouses. Then the coordinator would need to identify new possible candidates from the newly produced search result.","However, re-executing complex queries and determining if any differences from an initial search result occur is generally problematic because of the huge amount of processing time required for the re-execution and the following identification of new relevant data records. Accordingly, there is a need for a more efficient and effective technique for re-executing a query against a database or a data warehouse.","The present invention generally relates to data processing and, more particularly, to re-executing a query against a database for efficiently and effectively updating results of at least one previous execution of the query.","One embodiment of the present invention relates to a computer-readable medium containing a program which, when executed on a computer system, performs an operation of accessing data in a database. The operation comprises: receiving a query against the database, the query being associated with a re-execution indication; initially executing the query; providing an initial query result; determining at least one re-execution time from the re-execution indication; and re-executing the query at the at least one determined re-execution time.","Another embodiment of the present invention relates to a computer-readable medium containing a program which, when executed on a computer system, performs an operation of accessing data in a database. The operation comprises: receiving an initial query against the database, the initial query comprising a first and a second condition; executing the initial query; providing an initial query result comprising at least one first data record satisfying the initial query; generating a first query using the first condition and a second query using the second condition; and executing the first and second queries to determine whether the database comprises at least one second data record satisfying the initial query.","Another embodiment of the present invention relates to a computer-readable medium containing a program which, when executed on a computer system, performs an operation of accessing data in a database. The operation comprises: receiving an initial query against the database, the initial query comprising a first and a second condition and being associated with a re-execution indication; executing the initial query; providing an initial query result comprising at least one first data record satisfying the initial query; generating a first query using the first condition and a second query using the second condition; determining at least one re-execution time from the re-execution indication; and executing the first and second queries at the at least one determined re-execution time to determine whether the database comprises at least one second data record satisfying the initial query.","Another embodiment of the present invention relates to a method of accessing data in a database. The method comprises: providing a query against the database, the query being associated with a re-execution indication; initially executing the query; providing an initial query result; determining at least one re-execution time from the re-execution indication; and re-executing the query at the at least one determined re-execution time.","Another embodiment of the present invention relates to a method of accessing data in a database. The method comprises: providing an initial query against the database, the initial query comprising a first and a second condition; executing the initial query; providing an initial query result comprising at least one first data record satisfying the initial query; generating a first query using the first condition and a second query using the second condition; and executing the first and second queries to determine whether the database comprises at least one second data record satisfying the initial query.","Another embodiment of the present invention relates to a method of accessing data in a database. The method comprises: providing an initial query against the database, the initial query comprising a first and a second condition and being associated with a re-execution indication; executing the initial query; providing an initial query result comprising at least one first data record satisfying the initial query; generating a first query using the first condition and a second query using the second condition; determining at least one re-execution time from the re-execution indication; and executing the first and second queries at the at least one determined re-execution time to determine whether the database comprises at least one second data record satisfying the initial query.","The present invention generally provides a method, a data structure, a computer program product and a computer for data processing and, more particularly, to re-executing a query against a database for efficiently and effectively updating results of the query.","Data from different databases may be correlated and stored in the form of data warehouses. One embodiment is implemented in a data warehouse. A recent trend is building data warehouses with real-time data. In some cases, such data warehouses consist of some or all of the data being replicated to the data warehouse rather than being extracted via more traditional extract-transform-load processes. In the extract-transform-load processes, extracted data is typically entirely copied, i.e., converted\/transformed and processed during the extract process according to the requirements of a corresponding data warehouse and has some freedom to change values as long as some method to map the data back to the original data source exists to allow incremental updates. In contrast, replicating data represents moving data from an original data source to the data warehouse, wherein only changes are copied, but not the whole data. Accordingly, replicated data is merely copied without transformation.","In the following description, the term \u201creplicating\u201d is used to designate a real-time copying process of a portion of data, which has been changed, wherein the portion of data is automatically copied when the change occurs. The term \u201cextracting\u201d is used to designate an automated periodical copying process of the entire data at pre-determined time intervals. However, it should be appreciated that both, the described \u201creplicating\u201d and \u201cextracting\u201d processes are interchangeable in the described embodiments and that any modifications to the described \u201creplicating\u201d and \u201cextracting\u201d processes are also contemplated. For instance, \u201creplicating\u201d may comprise copying the entire data when the change occurs and \u201cextracting\u201d may be performed at any desired time and\/or may be initiated manually by a user. Furthermore, it should be noted that the terms \u201cidentifier\u201d and \u201ckey\u201d are interchangeably used in the following description and additionally, where reference is made to a table, the terms \u201cdata record\u201d and \u201crow\u201d are used interchangeably.","One embodiment of the invention is implemented as a program product for use with a computer system such as, for example, the computing environment  shown in  and described below. The program(s) of the program product defines functions of the embodiments (including the methods described herein) and can be contained on a variety of signal-bearing media. Illustrative signal-bearing media include, but are not limited to: (i) information permanently stored on non-writable storage media (e.g., read-only memory devices within a computer such as CD-ROM disks readable by a CD-ROM drive); (ii) alterable information stored on writable storage media (e.g., floppy disks within a diskette drive or hard-disk drive); or (iii) information conveyed to a computer by a communications medium, such as through a computer or telephone network, including wireless communications. The latter embodiment specifically includes information downloaded from the Internet and other networks. Such signal-bearing media, when carrying computer-readable instructions that direct the functions of the present invention, represent embodiments of the present invention.","In general, the routines executed to implement the embodiments of the invention, may be part of an operating system or a specific application, component, program, module, object, or sequence of instructions. The computer program of the present invention typically is comprised of a multitude of instructions that will be translated by the native computer into a machine-readable format and hence executable instructions. Also, programs are comprised of variables and data structures that either reside locally to the program or are found in memory or on storage devices. In addition, various programs described hereinafter may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However, it should be appreciated that any particular program nomenclature that follows is used merely for convenience, and thus the invention should not be limited to use solely in any specific application identified and\/or implied by such nomenclature.","Referring now to , a computing environment  comprising an illustrative computer system  according to one aspect of the present invention is shown. The computer system  may represent any type of computer, computer system or other programmable electronic device, including a client computer, a server computer, a portable computer, an embedded controller, a PC-based server, a minicomputer, a midrange computer, a mainframe computer, and other computers adapted to support the methods, data structure, computer program product and computer-readable mediums of the invention. Illustratively, the computer system  is part of a networked system; however, in other embodiments, the computer system  is a standalone device. Accordingly, the invention may be practiced in a distributed computing environment in which tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","In any case, it is understood that  is merely one configuration for a computing environment and computer system. Embodiments of the invention can apply to any comparable configuration, regardless of whether the computer system  is a complicated multi-user apparatus, a single-user workstation, or a network appliance that does not have non-volatile storage of its own.","The computer system  could include a number of operators and peripheral systems as shown, for example, by a mass storage interface  operably connected to a direct access storage device , and by a video interface  operably connected to a display . The display  may be any video output device for outputting viewable information. The computer system  could further include a number of storage media drives such as a CD-ROM drive  and a diskette drive  suitable to read out information permanently stored on non-writable storage media (e.g., read-only memory devices within a computer such as CD-ROM disks readable by CD-ROM drive ) or alterable information stored on writable storage media (e.g., floppy disks readable by diskette drive ). CD-ROM drive  and diskette drive  are illustrated as forming an integral part of computer system . It should, however, be appreciated that either CD-ROM drive  or diskette drive , or both of them, may be provided as peripheral devices that are operably connected to the computer system .","Computer system  may further comprise any type of suitable input means (not shown) to give input to the computer system . For example, a keyboard, keypad, light pen, touch screen, button, mouse, track ball, or speech recognition unit could be used. Further, this input means and display  could be combined. For example, a display screen with an integrated touch screen, a display with an integrated keyboard or a speech recognition unit combined with a text speech converter could be used.","Computer System  is shown comprising at least one processor , which obtains instructions, or operation codes, (also known as opcodes), and data via a bus  from a main memory . The processor  could be any processor adapted to support the methods of the invention. In particular, the computer processor  is selected to support the features of the present invention. Illustratively, the processor is a PowerPC\u00ae processor available from International Business Machines Corporation of Armonk, N.Y.","The main memory  is any memory sufficiently large to hold the necessary programs and data structures. Main memory  could be one or a combination of memory devices, including Random Access Memory, nonvolatile or backup memory, (e.g., programmable or Flash memories, read-only memories, etc.). In addition, memory  may be considered to include memory physically located elsewhere in computing environment , for example, any storage capacity used as virtual memory or stored on a mass storage device (e.g., direct access storage device ) or on another computer coupled to the computer system .","As shown, the main memory  includes an operating system . The operating system  may be any suitable operating system capable of supporting the functions of the present invention. An exemplary operating system, which may be used to advantage, is Linux. The operating system  may include a database management system (DBMS) , which may be implemented as a relational database management system (RDBMS). Alternatively, the DBMS  may be a separate application stored in main memory  or any other storage.","The DBMS  is used for managing a database  and, in particular, for storing and retrieving data in the database . Alternatively, the DBMS is used for storing and retrieving data in a data warehouse  of the database . The database  may be included in main memory  for storing any type of information and, in particular, data warehouse  and a data structure . The data warehouse  comprises data of one or more data sources. The data structure  comprises queries  against database  or data warehouse  and time schedules  derived from re-execution indications associated with corresponding queries. Data structure  may further comprise information related to queries issued against database  or data warehouse , such as query results.","Computer system  further comprises a network interface  operably connected to data bus . Network interface  is suitable to establish a network connection between computer system  and another computer system via a communications network  (as shown in ), preferably via the Internet.",{"@attributes":{"id":"p-0039","num":"0039"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 2"],"b":["100","110","210","110","210","160","110","140","114","110","210","160","210","160"]},"Computer system  preferably comprises a processor  operably connected to a network interface  and a main memory  via data bus . The network interface  is suitable to establish the communication with computer system  via communications network .","The main memory  is any memory sufficiently large to hold the necessary programs and data structures. Main memory  could be one or a combination of memory devices, including Random Access Memory, nonvolatile or backup memory, (e.g., programmable or Flash memories, read-only memories, etc.). In addition, memory  may be considered to include memory physically located elsewhere in computing environment , for example, any storage capacity used as virtual memory or stored on a mass storage device (not shown) or on another computer coupled to the computer system .","As shown, the main memory  preferably includes a database  for storing any type of information and, in particular, a data source  representing data to be loaded into the data warehouse  of . The main memory  may also include a data replication system , also referred to as data replicator, suitable to replicate data of data source  to the data warehouse . Illustratively, the data replicator is a Data Propagator available from International Business Machines Corporation of Armonk, N.Y.","Data replication system  may be implemented as a software program, which may be launched to replicate the data of data source  to data warehouse . The data replication system  may comprise a detection unit (not shown) to detect changes in the data of data source  and a replication unit (not shown) to replicate the data of data source  to data warehouse  when a change occurs.","In , data replication system  illustratively resides in main memory . However, it should be appreciated that data replication system  may be provided independently of main memory , e.g., in a specifically designed hardware component of computer system  or on a remote computer system that is connected with computer system , for example, via communications network . Accordingly, data replication system  may also reside on computer system  of .",{"@attributes":{"id":"p-0045","num":"0045"},"figref":["FIG. 3","FIG. 1","FIG. 1","FIG. 3","FIG. 1","FIG. 2"],"b":["100","110","310","110","310","160","110","140","114","110","310","160","310","160","110","210","310"]},"Computer system  preferably comprises a processor  operably connected to a network interface  and a main memory  via data bus . The network interface  is suitable to establish the communication with computer system  via communications network .","The main memory  is any memory sufficiently large to hold the necessary programs and data structures. Main memory  could be one or a combination of memory devices, including Random Access Memory, nonvolatile or backup memory, (e.g., programmable or Flash memories, read-only memories, etc.). In addition, memory  may be considered to include memory physically located elsewhere in computing environment , for example, any storage capacity used as virtual memory or stored on a mass storage device (not shown) or on another computer coupled to the computer system .","As shown, the main memory  preferably includes a database  for storing any type of information and, in particular, a data source  representing data to be loaded into the data warehouse  of . The main memory  may also include a data extraction system , also referred to as data extractor, suitable to extract data of data source  to the data warehouse . Illustratively, the data extractor is a DB Warehouse Manager available from International Business Machines Corporation of Armonk, N.Y.","Data extraction system  may be implemented as a software program, which may be launched to extract the data of data source  to data warehouse . The data extraction system  may comprise a timer (not shown) adapted to count time units and an extraction unit (not shown) to extract the data of data source  to data warehouse  dependent on the time units counted by the timer.","In , data extraction system  is illustratively resides in main memory . However, it should be appreciated that data extraction system  may be provided independently of main memory , e.g., in a specifically designed hardware component of computer system  or on a remote computer system that is connected with computer system , for example, via communications network . Accordingly, data extraction system  may also reside on computer system  of . Furthermore, it should be noted that any one of computer systems  of ,  of  of  may comprises arbitrary combinations of the above described features. For instance, main memory  of computer system  of  may comprise data source  and data replication system  of  and\/or data source  and data extraction system  of  in addition to the features described above with reference to .",{"@attributes":{"id":"p-0051","num":"0051"},"figref":["FIG. 4","FIG. 2","FIG. 3","FIG. 1","FIG. 1","FIG. 2 and 310","FIG. 3"],"b":["400","400","410","222","420","322","430","126","110","210"]},"Illustratively, the DBMS  comprises a data warehouse  (e.g., data warehouse  of ) and an updating system . The data warehouse  comprises a first plurality of tables  comprising data loaded from the first data source . The first data source  represents a real-time data source, i.e., data from the first data source  is replicated to the first plurality of tables . The data warehouse  further comprises a second plurality of tables  comprising data loaded from the second data source . The second data source  represents an extracted data source, i.e., data from the second data source  is extracted to the second plurality of tables . The data warehouse  illustratively comprises a mapping table  for correlating the data comprised in the first plurality of tables  and the second plurality of tables . In one embodiment, the updating system  may be implemented as a trigger program. The trigger program may be activated when data is loaded from the first data source  and\/or the second data source . The trigger program is adapted to detect changes in the loaded data and to update the mapping table  on the basis of the detected changes.","The DMS  further comprises a data replicator  (e.g., data replicator  of ) and a data extractor  (e.g., data extractor  of ), which may be implemented separately on different computer systems (e.g., computer systems  of ,  of  of ) or, alternatively, together on one computer system (e.g., any one of computer systems  of ,  of  of ). The data replicator  is implemented as replication software adapted to monitor the first data source  and to replicate data from the first data source  to the first plurality of tables  when a change occurs in the first data source . The data extractor  is implemented as extraction software adapted to extract data from the second data source  to the second plurality of tables  periodically.",{"@attributes":{"id":"p-0054","num":"0054"},"figref":["FIGS. 5\u20138","FIG. 1","FIG. 1","FIG. 1"],"b":["120","122","110"]},"Referring now to , in step  an initial query is received in the computer system. In step , the received initial query is stored in a storage medium (e.g., in data structure  in main memory  of ) of the computer system. In step , the stored initial query is executed and in step  an initial result to the executed query is provided. Providing the initial result comprises displaying the result on a display device (e.g., display  of ). Alternatively, the query result may, for example, be used for subsequent processing by an application program.","In step , a determination is made in order to determine, whether the initial query is associated with a re-execution indication. The re-execution indication describes a desired re-execution time schedule and may be an indication of one or more specific points of time, a specific time interval or a duration of validity of the initial query. The re-execution indication may, for example, be received via a graphical user interface, which enables a user to input the initial query and the re-execution indication.",{"@attributes":{"id":"p-0057","num":"0057"},"figref":"FIG. 5A","b":["500","560","570","560","570","570","580","582","592","594","596","598"]},"Alternatively, a tag may be associated with the initial query, the tag comprising the re-execution indication. Still alternatively, the initial query and the re-execution indication may be specified in a XML document that would be processed by a query execution application. Still alternatively, an application programming interface could be provided for another application to use, defining parameters that would represent the initial query and the re-execution indication.","Referring now back to , if it is determined in step  that the initial query is associated with a re-execution indication, the method continues with step  of . If it is determined in step  that the initial query is not associated with a re-execution indication, it may be assumed that re-execution is scheduled according to a default time schedule or on a new request for execution from a user issuing the initial query, and the method continues with step  of , as described below.","Referring now to , in step  the re-execution indication associated with the initial query is accessed in order to determine a corresponding re-execution time. The determined re-execution time may be stored in the storage medium (e.g., in data structure  in main memory  of ) of the computer system. In step , the initial query result may be stored in the storage medium of the computer system. In step  of , the initial query is re-executed at the determined re-execution time. In an alternative embodiment, the method may proceed from step  to step  of  as illustrated by the arrow leading to the symbol \u201cA\u201d from step  and as further described below. In such an embodiment, the method then returns (after completing the steps illustrated in ) to the symbol \u201cC\u201d and continues with step .","In one embodiment, the initial query is re-executed only if the database has been modified after providing the initial query result in step  of . To determine whether the database has been modified, for instance, meta-data associated with the database may be analyzed. In the embodiment according to , the trigger program, i.e., updating system , which may be activated when data is loaded from the first data source  and\/or the second data source , may be adapted to detect changes in the loaded data and to determine the updates. If a change is detected, then a trigger fires causing re-execution of the initial query. Additionally, in one embodiment, the initial query may be re-executed only against determined updates in the database. Thus, if any of the updates satisfies the initial query, a new query result may de determined and provided that comprises only records that have not been provided with the initial query result. The new query result may be displayed on a display device (e.g., display  of ).","Alternatively, the initial query may be re-executed in step  at the determined re-execution time against the complete database to determine a new query result comprising all data records of the database, which satisfy the initial query. In step , the new query result may be compared with the initial result stored in step . In step , it may be determined whether the new query result comprises any data record, which has not been included in the initial result. If the new result comprises such a data record, i.e., an update, the new result is provided in step . Providing the new result comprises providing only the new data records, which did not occur in the initial result. If no new data records could be determined, which satisfy the initial query, or if no updates have been made within the database, a corresponding indication may be provided.","In the event that more than one re-execution time has been determined in step , e.g., a time interval indicating periodic re-execution times until an expiration of a validity duration, steps  to  will be repeated periodically, i.e., at each time a pre-determined re-execution time is reached. Consequently, the new query result provided in newly executed step  may be stored together with the initial result stored in step  or as a additional result.","Referring now to , in step  a determination is made whether the initial query comprises more than one condition. If it is determined that the initial query does not comprise more than one condition, the method continues in step  of  as described above.","In step , a separate query is generated for each condition if it is determined that the initial query comprises more than one condition. To this end, the initial query is parsed, for instance, by launching one of a C, C++ or Java procedure. The conditions in the initial query are determined to break down the initial query in a series of separate conditions, for example, based on key words in the initial query. For each simple condition a corresponding query is generated. In step  the generated queries may be executed and the method may then proceed with step  of . Alternatively, the method may proceed with step  of .","Referring now to , in step , for each of the executed separate queries, a proportion of data records in the database satisfying the query is determined. In step , an order of execution is determined from the determined proportions. The order of execution may be determined in the ascending or descending order. Determining the order of execution in the ascending order would allow for reducing the number of data records to be considered by executed separate queries. Assume that N separate queries have been generated in step  of , so that an order of execution i ranges from 1 to N, for example, in the ascending order of the determined proportions. In step , i is set to 1. In step , the i-th query (i.e., in the first instance, the first query) is executed. In one embodiment, this execution may be performed only if the database has been modified after providing the initial query result and only against updates in the database. Furthermore, the execution of the first query may be performed at a determined re-execution time according to the re-execution time determined in step  of .","In step  a new query result is provided in response to execution of the i-th query and, if the i-th query has been executed against the complete database, this new result is compared with the initial result in order to determine, whether it comprises new data records which have not occurred in the initial result. In step  it is determined whether there are new data records in the new result and if new data records occur, the parameter i is incremented by 1 in step . In step  it is determined whether all separate queries generated in step  in  have been executed, i.e., if the parameter i has been incremented until the value N+1. If i=N+1, all N queries have been executed and new data records occur in the determined query result, so that the method proceeds with step  of . If not all queries have been executed and new data records satisfying the preceding separate i-th query have been determined, step  is repeated and the incremented i-th query may be executed against the determined updates to reduce the amount of data records to be considered.","It should be appreciated that the order of the steps comprised in  has been described for purposes of illustration. However, those skilled in the art will recognize that several of the described steps may be interchanged or omitted within the spirit and scope of the present invention. For example, the initial query result may be stored before a determination is made on whether a re-execution indication is associated with the initial query. Furthermore, the determination on whether one or more conditions are comprised in the initial query may be performed before the re-execution indication determination. Additionally, in the event that the re-execution of the initial query or the execution of the generated separate queries is performed only against updates in the database, for instance, steps  and  of  and step  of  may be omitted. Furthermore, it may be desirable to re-execute the initial query or the determined separate queries at pre-determined time intervals without requesting a user to enter a re-execution indication, so that steps  of  of  may be omitted. Furthermore, the separate queries may be determined from the initial query before the initial execution so that the corresponding proportions may be determined during the initial execution. Additionally, the determined proportions may be re-used during subsequent query executions without the need to re-compute the proportions.","In the following, the method described with respect to  will be illustrated using SQL queries by way of example.","Assume a database including a table \u201cDEMOGRAPHIC\u201d having a plurality of data records, each data record being associated with a specific person and comprising at least an indication of a last name, a result to a medical test and a gender of the specific person. Assume further that a user wants to retrieve the last names of all male persons having a value greater that 300 in the medical test, the medical test determining, for example, a number of cyclosporine metabolites. Assume further that the user wants to re-execute a corresponding query every day. To this end, the user would issue the following query against the database:\n\n","The query is executed against the database and an initial query result is provided. Furthermore, the query is analyzed to determine, if a re-execution indication is associated with the query.","In the given example, the SQL query comprises two conditions and a re-execution indication separated from the conditions by the \u201c#\u201d symbol. The re-execution indication is analyzed to determine a re-execution time. In the present example, the re-execution indication designates a time interval \u201c24\u201d specified by the key word \u201cinterval\u201d, the time interval being determined 24 hours. Accordingly, the query would be re-executed every 24 hours.","Furthermore, the initial query is analyzed to determine whether it comprises one or more conditions. In the present exemplary SQL query, conditions are indicated by the key word \u201cwhere\u201d and a parser may be used to parse the query and to determine the content of the \u201cwhere\u201d clause. The \u201cwhere\u201d clause is parsed to determine the presence of \u201cand\u201d and \u201cor\u201d operators used to separate different conditions. In the given example the \u201cwhere\u201d clause comprises two conditions separated by an \u201cand\u201d operator, i.e., a first condition being \u201cgender=male\u201d and a second condition being \u201ccyclosporine_metabolites>300\u201d. From these two conditions, two separate queries are generated as follows:\n\n","At the determined re-execution time, the generated first and second queries may be executed to determine whether new data records satisfying the initial query are in the database. To this end, the first query may be executed and the second query is only then executed, if data records satisfying the first query are determined.","Furthermore, the second query may only be executed against data records satisfying the first query.","The order of execution may be determined arbitrarily. Alternatively, a proportion of data records satisfying the first and second queries may be determined from the database. The proportions may then be used to determine an order of execution of the first and second queries.","For example, assume that 50% of all data records in the database satisfy the first query generated (i.e., the query \u201cSelect last_name from DEMOGRAPHIC where gender=male\u201d) and that only 1% of all data records in the database satisfy the second query (i.e., the query \u201cSelect last_name from DEMOGRAPHIC where cyclosporine_metabolites>300\u201d). Accordingly, it would be more likely that a new data record entered into the database would be of gender male than have a value of cyclosporine_metabolites greater than 300. Therefore, in order to optimize query execution, it would be advisable to determine an order of execution in which the second query is executed before the first query, e.g., using a query optimizer.","Furthermore, if the second query is only executed against updates in the database and if no new data records are comprised in the updates that satisfy the second query, the first query need not to be executed. In this manner, a significant amount of processing time may be economized.","Additionally, breaking down complex queries into simple single condition queries allows performance of bundled query executions for plural initial queries. Such an embodiment will be illustrated in the following example.","Assume a database including a table \u201cDEMOGRAPHIC\u201d having a plurality of data records, each data record being associated with a specific person and comprising at least an indication of a last name, a result to a medical test, a blood group indication and a gender of the specific person. Assume further that a first user wants to retrieve the last names of all persons older than 40 years and having a value greater than 300 in the medical test, the medical test determining, for example, a number of cyclosporine metabolites. Assume further that a second user wants to retrieve the last names of all male persons having a value of cyclosporine metabolites greater than 300. Assume further that a third user wants to retrieve the patient IDs of all persons (patients) having a value of cyclosporine metabolites greater than 300 and the blood group O positive. To this end, the users would issue the following queries against the database:\n\n","In all three cases, a single query determining if data records with cyclosporine_metabolites>300 exist may be initially performed. If no such data record exists, in all three cases execution may be stopped.","Some of the foregoing embodiments are described with reference to data warehouses. However, it should be appreciated that the invention is not limited to use in the context of a data warehouse. Furthermore, the invention is not limited to tables comprising data records in a relational database and\/or tables being replicated\/extracted from data sources to tables in a data warehouse. Therefore, the described embodiments should be understood as being exemplary for purposes of illustration and are, however, not intended to limit the invention thereto. Instead, the invention is intended for use in executing a query against any type of database comprising, for example, hierarchical, networked and relational databases known in the art as well as data sources currently not known.","While the foregoing is directed to embodiments of the present invention, other and further embodiments of the invention may be devised without departing from the basic scope thereof, and the scope thereof is determined by the claims that follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["So that the manner in which the above recited features, advantages and objects of the present invention are attained and can be understood in detail, a more particular description of the invention, briefly summarized above, may be had by reference to the embodiments thereof which are illustrated in the appended drawings.","It is to be noted, however, that the appended drawings illustrate only typical embodiments of this invention and are therefore not to be considered limiting of its scope, for the invention may admit to other equally effective embodiments.",{"@attributes":{"id":"p-0021","num":"0021"},"figref":"FIGS. 1\u20133"},{"@attributes":{"id":"p-0022","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0023"},"figref":"FIGS. 5","b":["6","7","8"]},{"@attributes":{"id":"p-0024","num":"0024"},"figref":"FIG. 5A"}]},"DETDESC":[{},{}]}
