---
title: Object synchronization between object stores on different computers
abstract: The invention includes a method of synchronizing objects between first and second object stores. A synchronization manager in accordance with the invention maintains a reference store containing identifying data segments corresponding respectively to a plurality of objects that have previously been synchronized between the first and second object stores. An application program that maintains the first object store has associated interfaces that allow the synchronization manager to compare and manipulate objects. One such interface allows the synchronization manager to submit an identifying data segment associated with a particular object. In response, this interface returns a handle that corresponds to the submitted identifying data segment. Another interface accepts a handle that refers to an identifying data segment, and determines if the object corresponding to the identifying data segment has been changed in the first object store since the last synchronization. If it has, the synchronization manager takes steps to update the second object store. If, on the other hand, the object has changed in the second object store, application program interfaces allow the synchronization manager to update the object in the first object store. Objects are transferred through the synchronization manager in an arbitrary, application-specific format that is not determined or understood by the synchronization manager itself.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07669208&OS=07669208&RS=07669208
owner: Microsoft Corporation
number: 07669208
owner_city: Redmond
owner_country: US
publication_date: 20030819
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","General Architecture","Desktop Synchronization Interface Component","Identifying Data Segments","Obtaining Handles to Objects","Detecting Changes to the Desktop Object Store","Detecting Changes to the H\/PC Object Store","Synchronizing Objects","Exchanging Objects","Updating Identifying Data Segments","Mapping Properties and Saving Unsupported Properties","General Issues","CONCLUSION"],"p":["This application is a divisional of U.S. patent application Ser. No. 08\/944,948 filed Oct. 2, 1997, now U.S. Pat. No. 6,633,924.","This invention relates to methods of synchronizing any form of data such as databases used in personal information managers, especially when the databases are used on two different computers that are only occasionally connected for data communications.","As electronic components have continued to become smaller and less expensive, laptop, handheld, and other portable computers have become more and more popular. Although a variety of applications can be used with such computers, personal information managers (PIMs) form an important category of application programs that are particularly suited for use with portable computers or other portable information devices.","To get the most benefit from a PIM on a portable device, it is very useful if the PIM information can be kept up to date with a PIM that a user uses in conjunction with his or her desktop computer. Many portable computers are designed to connect with a desktop and to exchange information. When compatible PIMs are used on a portable computer and a desktop computer, it is possible to use this connectivity to update the PIMs so that the latest updates made by a user on one PIM are also reflected in the other PIM. This is referred to as \u201csynchronization.\u201d","There are many competing desktop PIM applications on the market today. Each of them uses very different data formats. It is imperatively important for a portable device to be able to synchronize its data with each of these PIM applications. This requires a flexible and extensible architecture such that a synchronization software module can be easily written for a particular PIM application.","In contrast to previous methods of synchronizing PIMs, the inventors have developed a versatile system that allows a PIM on a portable computer to be synchronized with a great variety of desktop PIMs. An important advantage of the invention is that neither PIM component is required to track changes. Rather, this is taken care of by software components that are independent of the PIMs. These independent components can be used in conjunction with a number of different PIMs or similar database programs. Another important advantage of the invention is that it makes no assumption on the format of the data that are transferred between two computers. Therefore, the developer of a synchronization module has the total freedom to use different data formats depending only on specifics of the particular PIM application.","In accordance with the invention, a synchronization manager executes on a primary computer. The synchronization manager maintains a reference store and communicates with an auxiliary computer. Respective PIMs or other database management programs run on each computer. An object store is maintained on each computer.","Two additional components (usually in the form of DLLs) are used. A first interface component is associated with the PIM that executes on the primary computer. A second interface component is associated with the PIM that executes on the auxiliary computer. Each component exposes a defined set of interface methods.","On the primary computer, identifying data segments are maintained persistently in the reference store for each object in the primary computer's object store. The data segments are defined by the developer of the interface components\u2014the synchronization manager has no knowledge of the type of data stored in these segments. The identifying data segments are derived from the objects, so that comparing a stored identifying data segment with a currently derived data segment results in an indication of whether the corresponding object has been changed since it was last synchronized. Such comparisons are performed by the interface components, rather than by the synchronization manager.","In the exemplary implementation of the invention, the identifying data segments include data representing any properties provided by the auxiliary computer's object store that are not supported in the primary computer's object store. This allows such properties to be recovered from the primary computer if they are lost from the auxiliary object store.","Objects stored in the object store maintained by the auxiliary computer also have identifiers. These identifiers are usually different from the identifying data segments used in the primary object store. A mapping is maintained by the synchronization manager so that when an object is changed in one store, the corresponding object in another store can be located and the same change can be applied to that object. Each time a new object in the primary store is created and synchronized to the auxiliary store, the synchronization manager retrieves the identifier for that new object in the auxiliary object store and uses it to establish a mapping between these two objects. All these mappings are stored in synchronization manager's reference store, along with the identifying data segments.","Whenever an object needs to be transferred from one store to another, the synchronization manager calls interface methods exposed by the interface components. These methods convert an object into a series of bytes. The synchronization manager then transfers these bytes to the other store and by calling an interface method that converts the bytes back to an object.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["10","12","20","16","18"]},"The Schedule+ program, available from Microsoft Corporation of Redmond, Wash., is one example of a PIM that can be configured in accordance with the invention. Microsoft Outlook 97 is another example. The primary object store, also referred to as a desktop object store, is configured to store a plurality of individual records or objects, each comprising a plurality of fields or properties. In Schedule+, for example, there are objects of different types, corresponding to appointments, contacts, and tasks. Each object comprises a plurality of properties, such as addresses, phone numbers, task descriptions, etc.","Portable information device  is implemented as a handheld personal computer (H\/PC). H\/PC  executes an application program  that maintains a second or auxiliary object store , also referred to as the H\/PC object store. The application program in the exemplary embodiment of the invention is a general-purpose PIM.","The auxiliary object store similarly stores a plurality of objects, each comprising a plurality of properties. The objects are intended to be synchronized with the objects in primary store . Conceptually, any particular object exists in both H\/PC object store  and desktop object store . Actually, however, there are two instances of the same object. When a user modifies one instance of an object, the other instance needs to also be modified so that the instances eventually contain identical data. This is referred to as synchronization, and is preferably accomplished without significant user effort.","In some situations, the H\/PC object store has objects that include properties not supported by the desktop object store. As an example, a \u201ccontact\u201d object in the H\/PC object store includes a \u201chome fax number\u201d property that is not supported by Schedule+. Special steps are taken in accordance with the invention to accommodate this situation.","Synchronization managers run on both computers, communicating with the application programs on both computers through well defined interfaces to manage communications and synchronization. The synchronization managers of the two computers communicate with each other via an available communications medium  such as a physical cable or connection using a serial communications protocol. IR (infrared) communications can alternatively be used. Such communications capabilities are commonly available in desktop and portable computers.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2","b":["12","12","30","32","34","36","12","38","40","12","42","43","12","34","36"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3","b":["12","12","46","12","48","50","52","50"]},"The display  is connected to the bus  through appropriate hardware interface drivers (not shown). Additionally, the input devices , are connected to supply data to the bus  via appropriate I\/O ports. Floppy drive  and access device  are also connected through bus . Computer  includes a serial communications port  for communicating with portable information device . The serial communications port is connected for communications with processor  through bus .","The computer  runs an operating system  that is stored on the non-volatile memory  and executes on the processor . One preferred operating system is a Windows brand operating system sold by Microsoft Corporation, such as Windows 95 or Windows NT or other derivative versions of Windows. However, other operating systems may be employed, such as the Macintosh OS from Apple Corporation and the OS\/2 Presentation Manager from IBM.","Application program  is stored in memory  or . An application such as Schedule+ can be loaded into memory  or  from the floppy diskette  or CD-ROM , or alternatively, downloaded from a network via a network port (not shown). A dynamically linked library (DLL) , comprising a plurality of executable functions, is associated with application program  for execution by processor .","Inter-process and inter-program calls are facilitated by using the component object model (COM) as is common in programs written for Microsoft Windows operating systems. When using COM, a software component such as the DLL mentioned above has a number of interfaces. Each interface exposes a plurality of methods, which can be called individually to utilize different services offered by the software component. In this document, the term \u201cinterface\u201d is used somewhat more generically to indicate one or more software components, methods, or functions that can be called by some other software component, and that can optionally receive and return one or more parameter arguments. When first and second interfaces are described, for example, this could refer to two methods that are grouped together under the heading of a single COM interface.","Generally, the DLL associated with a particular application program is designed specifically to work in conjunction with that application program and to expose desktop synchronization interfaces that function as described below. Specifically, the DLL has a plurality of specifically defined interfaces that can be called by other programs or processes executing on computer . The DLL, in turn, is able to call interfaces exposed by application program , in order to access data representing individual properties of objects maintained by the application program. If the system includes a plurality of application programs that are to participate in synchronization, there is a DLL for each application program. Each DLL exposes the same set of interfaces. The applications themselves typically have widely different interfaces to which the DLLs must adapt.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 4","b":"20"},"H\/PC  has components similar to those of desktop computer , including a miniaturized keyboard  and a small LCD display . Instead of a mouse, H\/PC  uses a touch-sensitive display screen in conjunction with a stylus . The stylus is used to press the display at designated coordinates for user input.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 5","b":["20","66","68","70","72","74","12","68"]},"An operating system  is loaded in and executes on processor  from memory  of H\/PC . H\/PC  preferably runs the Windows CE operating system from Microsoft Corporation. This operating system is a derivative of Windows brand operating systems, such as Windows 95, that is especially designed for handheld computing devices. Windows CE implements database features that can be utilized by application programs through a set of exposed application programming interfaces and methods. These interfaces are described in the section entitled \u201cApplication Program Interfaces and Methods, Part A\u201d below. Second object store  () is maintained by the operating system, at least partially in response to calls to these interfaces from application programs such as PIMs.","Application program  executes from memory  of H\/PC . The application program in one embodiment is a PIM that utilizes the database features of the Windows CE operating system to store objects and their properties. This application program is not necessarily designed to be compatible with the PIM that executes on the desktop computer. Specifically, there may not be a one-to-one matching between the properties of specific object types. Some properties in the H\/PC PIM may have no corresponding properties in the desktop PIM. Furthermore, neither PIM is necessarily designed with synchronization in mind.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 6","b":["20","12","18","24","22","20","80","25","25","24","25","81","80"]},"Although there is a great deal of flexibility allowed in storing objects and properties in H\/PC object store , generally a PIM creates a distinct database for each different object type. For example, different databases are created for appointments and tasks, respectively. A predefined set of properties is supported for each object type. Each database is assigned a name by the application program that creates it. Alternatively, an application program might use a single database for all object types, with the first property for each object defining the type of the object. Objects are uniquely identified within H\/PC  by object identifiers that are independent of the names assigned by the application programs creating the objects.","Desktop PIM  executes on desktop computer  and maintains desktop information store . A reference store and synchronization manager  (referred to below simply as a synchronization manager) also executes on desktop computer . This component is responsible for orchestrating synchronization between objects in the H\/PC object store and the desktop object store. Synchronization manager  maintains a reference store , apart from desktop object store .","Synchronization manager  is not closely associated with desktop PIM . Rather, it is an independent component that synchronizes objects from any application program that supports the appropriate desktop synchronization interfaces described below and in the section entitled \u201cApplication Program Interfaces and Methods, Part B\u201d below. A number of different application programs can be supported simultaneously by synchronization manager .","Communications components  and  are implemented on H\/PC  and desktop computer , respectively. These components implement serial communications between the computers using a serial cable or an infrared link. H\/PC synchronization manager  communicates with desktop synchronization manager  through these components.","Desktop synchronization manager  communicates with desktop PIM  and accesses desktop object store  through a desktop synchronization interface component , which corresponds generally to DLL  of  and which exposes one or more application program interfaces and methods  as described in the section entitled \u201cApplication Program Interfaces and Methods, Part B\u201d below. The interfaces most pertinent to the invention are also described in the following general discussion.","The desktop synchronization interface component  is implemented specifically to work in conjunction with a particular desktop PIM. In general, providing synchronization for any particular database application requires only the development of a desktop synchronization interface component for the application. Because the application program interface  of synchronization component  is standardized, it allows synchronization manager  to access and synchronize any number of different desktop PIMs, as long as the required interface methods are implemented for each PIM.","In some cases, synchronization interface component  and its application program interface  might be implemented as part of the desktop PIM. In many other cases, however, they will be designed as \u201cadd-ons\u201d or supplemental DLLs, in order to allow synchronization with an application program where synchronization is not provided as an integral feature.","Generally, the desktop synchronization interfaces allow the desktop synchronization manager to compare corresponding objects in the desktop and H\/PC object stores, to receive objects from the desktop object store, and to update objects in the desktop object store. By providing these relatively simple functions, the desktop PIM is relieved of the burden of performing actual synchronization.","The most basic function of reference store  is to provide a mapping between instances of objects stored in H\/PC object store  and desktop object store , although it can also provide other functionality as will be described. Objects in H\/PC object store  are identified by object identifiers. However, these same object identifiers are not used by desktop PIM  to identify corresponding object instances in desktop object store . In most cases, in fact, PIM  is completely unaware that H\/PC object store  even exists. Accordingly, some type of mapping is required between instances of the same object in the two different object stores.","To identify particular objects in the desktop object store, the invention utilizes data items referred to herein as \u201cidentifying data segments.\u201d An identifying data segment, generally, is some piece of data that can be used to identify a particular object. The exact composition of an identifying data segment is known only to the synchronization interface components, although identifying data segments are handled and stored by desktop synchronization manager . Thus, the developer of a desktop synchronization interface component is allowed to define the format of the identifying data segment. In most cases, an object identifier will be based at least in part on properties of the corresponding object.","Synchronization manager  maintains reference store  so that it contains identifying data segments corresponding respectively to a plurality of objects in desktop object store  that are to be synchronized with instances of the same objects in H\/PC object store . In most cases, the identifying data segments in the reference store correspond to objects that have previously been synchronized between the two object stores. The identifying data segments are updated after their corresponding objects have been synchronized.","To reiterate, identifying data segments are defined solely by the synchronization interface components. Conceptually, an identifying data segment can be any collection of data that uniquely identifies a particular object in desktop object store . The synchronization manager does not directly examine or change the identifying data segments.","In actual implementation, the identifying data segments should be formatted in accordance with the following criteria so that the desktop synchronization interface component can perform its specified functions:\n\n","The identifying data segments are created by the desktop synchronization interface component and are provided to synchronization manager  by a desktop synchronization interface method named \u201cObjectToBytes\u201d. In addition to maintaining a plurality of identifying data segments, synchronization manager  also maintains a list of object identifiers corresponding to objects maintained in H\/PC object store . These identifiers are provided to desktop synchronization manager  from H\/PC synchronization manager  whenever a new object is added to H\/PC object store . Desktop synchronization manager  also maintains a mapping or other indication of correspondence between the object identifiers and the identifying data segments (or the desktop objects to which the identifying data segments correspond).","Most of the desktop synchronization interfaces are designed so that synchronization manager  can reference particular objects by using \u201chandles.\u201d The term \u201chandle\u201d as used herein refers to a number or other identifier that can be used to uniquely identify an object and to access the object. Generally, a handle is valid only for a particular time period or session, such as during the time when an object has been \u201copened.\u201d If the same object is opened again, its handle may be different.","Note that the handles used by desktop synchronization interface component  do not necessarily correspond to any sort of identifiers used by desktop PIM in desktop object store . However, synchronization manager  needs to obtain a list of handles corresponding to the objects stored in desktop object store  before it can perform any significant synchronization tasks. These handles are provided by the exposed methods of desktop synchronization interface component . After obtaining handles, synchronization manager  determines a correspondence between the provided handles and object identifiers used by H\/PC PIM , with reference to reference store .","Upon initialization, synchronization manager  constructs two lists of handles. The first list is obtained by submitting identifying data segments (previously stored in reference store ) to a desktop synchronization interface named \u201cBytesToObject.\u201d This interface stores a submitted data segment and returns a handle corresponding to the data segment. Synchronization manager  receives the handle and adds it to its first list. Synchronization manager  repeats this procedure for each identifying data segment in reference store , receiving a handle to each such data segment. The handles correspond respectively to objects belonging to a first group of objects that have been synchronized in the past.","The second list of handles is obtained by querying desktop synchronization interfaces named \u201cFindFirstItem\u201d and \u201cFindNextItem.\u201d When successively called, these interfaces enumerate an ordered list of handles corresponding respectively to a second group of objects\u2014those objects currently in desktop object store . This group of objects potentially includes at least some of the first group of objects. In fact, this second group of objects will include all objects of the first group except for those objects that have been deleted from the desktop object store since the last synchronization. The enumerated order of the handles is determined by the data in the identifying data segment.","Once the desktop synchronization manager has two lists of handles, it proceeds to match any handles of the first and second lists that correspond to the same object. It does this by repeatedly querying desktop synchronization interface \u201cCompareItem\u201d with pairs of handles from the first and second lists. The interface receives the two handles and returns and indication of whether the two handles correspond to the same object. In addition, for handles that do not correspond to the same object, the interface returns an indication of whether the handle from the first list falls before or after the handle from the second list, relative to the order in which handles were previously enumerated by the FindFIrstItem and FindNextItem interfaces. This allows synchronization manager  to implement a more efficient search algorithm as it attempts to find matching handles in the second list for all handles in the first list. However, the synchronization manager is not required to have any understanding of the contents of the identifying data segments\u2014it just submits them to the desktop synchronization interface component for comparison.","CompareItem depends on the inclusion in the identifying data segments of some type of persistent identifier that uniquely identifies an object, and further data that can be used to derive a consistent object order based on the identifying data segments. To determine whether two identifying data segments correspond to the same object, the interface compares the unique identifying data from each data segment. If this test fails, the interface examines a portion of the data segment that is used to derive an object order. This portion of the data segment might comprise a time stamp or some other sequence indication.","Based in the comparison results, desktop synchronization manager  constructs and maintains a mapping between handles and object identifiers that are used in H\/PC object store. These mappings are derived from mappings maintained between H\/PC object identifiers and the identifying data segments maintained in reference store . When the synchronization manager receives an object identifier corresponding to a modified object in H\/PC synchronization manager , the synchronization manager references the mappings with the received object identifier to identify which handle corresponds to the same object in the desktop object store.","If there is a particular handle in the first list that does not have a matching handle from the second list, the desktop synchronization manager concludes that the object corresponding to the particular handle has been deleted from the desktop object store since the last synchronization. Synchronization in this case requires deleting the object from the H\/PC object store. On the other hand, if there is a particular handle in the second list that does not have a matching handle from the first list, the synchronization manager concludes that the object corresponding to the particular handle has been added to the desktop object store since the last synchronization. Synchronization in this case requires adding the object to the H\/PC object store.","The steps described above allow desktop synchronization manager  to determine whether objects have been added to or deleted from the desktop object store since the last synchronization with H\/PC object store . In addition, however, synchronization manager  must determine whether an object has been modified in the desktop object store. This determination is made by querying synchronization interface \u201cIsItemChanged\u201d with matching handles from the first and second lists. The interface compares the identifying data segment associated with each handle to determine whether the object in the desktop object store has been changed since its identifying data segment was written to the reference store. This is possible because the identifying data segment, as noted above, includes time stamp information or some similar information such as a sequence or revision number. If the timestamp information is not identical, there has been a change to the object.","Note that none of these procedures requires synchronization manager  to be aware of the particular nature or format of the identifying data segments or of the objects to which they correspond. Rather, interface component  is called upon for all actions that depend upon the actual content of the identifying data segments. It is up to the designer of interfaces  to define a format for the identifying data segments that will allow the interfaces to perform their required functions.","H\/PC synchronization manager  is designed to maintain a status bit for each object in H\/PC object store , indicating whether that object has been changed since the last synchronization. Whenever H\/PC PIM  changes an object, this bit is set and the H\/PC synchronization manager sends a notification to desktop synchronization manager  over whatever communications means are currently employed between the H\/PC and the desktop computer. If there is no current communications capability, a log entry is generated so that notice of the change can be sent the next time communications are established. The status bit is reset when a return notification is received indicating that the object has been synchronized in the desktop object store.","Generally, there are three type of events that raise at least a potential need for synchronization:\n\n","When communications are first established between the H\/PC and the desktop computer, there are potentially a number of modified, unsynchronized objects on the two computers. As noted above, H\/PC synchronization manager  maintains a log of such changes. The log is provided to desktop synchronization manager  when communications are established. The log indicates object identifiers for the objects that have been modified, added, or deleted in the H\/PC object store.","On the desktop computer, synchronization manager  is responsible for determining which objects have been changed in desktop object store . This is accomplished as described above by obtaining a list of handles representing identifying data segments stored in reference store  and another list of handles representing objects and corresponding identifying data segments as currently existing in desktop object store . The handles are matched and compared to determine whether objects have been added, deleted, or modified since the last synchronization.","The desktop synchronization manager constructs a list of objects that have been changed in the H\/PC object store and another list of objects that have been changed in the desktop object store. If a particular object has been changed in the H\/PC object store, the synchronization manager performs a step of updating the desktop object store with the changed object from the H\/PC object store. If a particular object has been changed in the desktop object store, the synchronization manager performs a step of updating the H\/PC object store with the changed object from the desktop object store.","In some cases, an object will have changed in both object stores. If so, the user is prompted to resolve the conflict by deciding which modification should be retained. In the exemplary embodiment of the invention, the H\/PC instance of the object is retrieved by desktop synchronization manager  from H\/PC synchronization manager  and used to create a new object in desktop object store . A handle to the new object is obtained, and synchronization interface \u201cGetConflictInfo\u201d is queried. This interface accepts handles to two objects and returns a conflict resolution text string that is to be used to prompt a user. The text string indicates information about the two objects, such as pertinent records or timestamp information. The synchronization manager uses this text to prompt a user to decide which of the two objects should be retained. If the H\/PC version of the object is selected, it replaces the desktop version. If the desktop version is selected, it is sent to the H\/PC synchronization manager to overwrite the existing version of the object in H\/PC object store .","In other cases, object modifications will occur while communications are already established. In the exemplary embodiment of the invention, synchronization takes place continuously and transparently whenever communications are established. When a modification is made on the H\/PC, H\/PC synchronization manager  immediately sends a notification to desktop synchronization manager , which copies the modified object to desktop object store  (after checking for a conflict). On the desktop side, synchronization is scheduled at periodic intervals such as every five minutes, to simulate continuous synchronization. After each interval, desktop synchronization manager  calls synchronization interface component  to enumerate a current list of handles, representing current objects in object store . These are then compared to the handles corresponding to identifying data segments in reference store  to determine whether any changes have been made since the last synchronization.","In still other cases, desktop PIM  might be capable of providing an immediate notice to synchronization manager  when an object is modified in desktop object store . For instance, the PIM might allow synchronization manager  to register a callback function. If this is the case, changes in desktop object store  can be synchronized as they occur, rather than at periodic intervals.","Desktop synchronization manager  is designed to treat objects as arbitrary data streams. The synchronization manager does not examine objects themselves. Special interfaces are associated with both the H\/PC PIM and the desktop PIM for exchanging objects. On the desktop, these interfaces are named \u201cGetPacket\u201d and \u201cSetPacket\u201d. Interface method \u201cSetup,\u201d that is used to specify a handle corresponding to an object that is to be obtained from desktop object store  by desktop synchronization manager . Once the object is specified by its handle, GetPacket is called repeatedly to retrieve a data stream representing the object. This data stream is formatted in a way that is known only to desktop synchronization interfaces  and to the corresponding interfaces exposed by H\/PC interface component . SetPacket works similarly but inversely to GetPacket.","Similar interfaces are provided to work in conjunction with H\/PC PIM . To send an object from desktop object store  to H\/PC object store , desktop synchronization manager  calls the desktop GetPacket repeatedly to obtain a data stream representing the object. As the data stream is obtained, it is sent over the serial communications medium to H\/PC synchronization manager . H\/PC synchronization manager  calls the H\/PC SetPacket interface, which receives the data stream and converts it into a format suitable for storage in H\/PC object store . If the object is a new object, the object identifier assigned by H\/PC synchronization manager  is returned to synchronization manager .","The reverse procedure is followed to send an object from H\/PC  to desktop computer . When an object is modified in H\/PC object store , desktop synchronization manager  requests the modified form of the object through communications component . It uses the object identifier for the object in conjunction with the mappings to determine which handle corresponds to the object in the desktop object store. It provides this handle and the modified form of the object to the desktop synchronization interface Setup, which in turn instructs desktop PIM  to replace the object corresponding to the identified handle with the modified object (or to add a new object if appropriate).","Identifying data segments in reference store  are updated to reflect the current objects in desktop object store , but only after the object has been synchronized with the same object in H\/PC object store . Updating is accomplished by providing a handle corresponding to a particular object in desktop object store  to a synchronization interface called \u201cUpdateitem.\u201d In response, the desktop synchronization interface component modifies the stored identifying data segment by updating its time stamp data. At a later time, the desktop synchronization manager calls interface ObjectToBytes to update the identifying data segment stored in the reference store.","Desktop synchronization interfaces  are responsible for mapping properties from H\/PC object store  to corresponding properties in desktop object store . As described above, objects are sent to interface SetPacket as data streams. SetPacket parses the data stream, identifies particular property values, and stores at least some of the properties or property values as corresponding properties in an object of desktop object store . The correspondence between H\/PC properties and desktop properties is determined by the designer of the desktop synchronization interface component . Actual storage of objects and properties in desktop object store  is accomplished by calling COM or other interfaces exposed by the particular desktop PIM .","In some cases, certain properties provided from H\/PC object store  have no corresponding properties in desktop object store . Such properties are referred to herein as unsupported properties. In these cases, data representing the unsupported properties is returned to desktop synchronization manager  through the ObjectToBytes interface as part of the identifying data segments, without storing the properties in the desktop object store. The properties are thus stored in reference store  rather than in desktop object store . Alternatively stated, the identifying data segment for a particular object includes data representing any object properties not supported by the desktop object store. Since ObjectToBytes is invoked after updating desktop object store  with an object from H\/PC object store , there is always an opportunity to update the identifying data segments with currently synchronized data.","Before retrieving a particular object from desktop object store with GetPacket, synchronization manager  invokes the BytesToObject interface, submitting the object's handle and its identifying data segment (which includes data representing the unsupported properties). Subsequently, GetPacket returns the object, including the unsupported properties, and the object is in turn provided to H\/PC synchronization manager  for storage in H\/PC object store .","The desktop synchronization manager is configured to detect or to be notified when a portable information device has been connected for synchronization. Such notification can be generated automatically, or the user can initiate the notification.","DLLs associated with particular PIM application programs are listed in the Windows registry of the desktop computer. When a portable information device is connected, it notifies the synchronization manager of database or PIM programs that wish to participate in synchronization. The desktop synchronization manager examines the Windows registry and loads any registered DLLs that are required to synchronize database or PIM programs executing on the desktop computer. The synchronization manager also examines the registry to determine what object types are available for each DLL.","In the exemplary embodiment, each object type is represented as a \u201cfolder.\u201d An initial step performed by synchronization manager  is to call appropriate interfaces to obtain handles to such folders. As described in the section entitled \u201cApplication Program Interfaces and Methods, Part B\u201d below, folder handles are used for various management purposes. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","The invention provides an extremely versatile way to synchronize desktop database application programs that might not have been originally designed with synchronization in mind. The invention allows for continuous synchronization of database objects, without any significant user effort, and in most cases without requiring modification of the database application programs. Rather, synchronization can be provided by implementing DLLs that execute in conjunction with the application programs. The DLL itself is not required to actually perform synchronization tasks, but rather is only required to perform specific data manipulations that are fairly straightforward in implementation.","Although the invention has been described in language specific to structural features and\/or methodological steps, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or steps described. Rather, the specific features and steps are disclosed as exemplary forms of implementing the claimed invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
