---
title: Per process virtual machines
abstract: A system and method for isolating processes executing within a computing device. A process is loaded into a virtual machine operating under the control of a hypervisor communicatively interfaced with an operating system kernel. A subset of an application programming interface (API) is exposed to the virtual machine enabling the process to interface with the operating system kernel via the subset of the API. The process is then executed in the virtual machine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08464252&OS=08464252&RS=08464252
owner: Red Hat, Inc.
number: 08464252
owner_city: Raleigh
owner_country: US
publication_date: 20090227
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["Embodiments of the invention relate to the field of computer processing, and more particularly, to isolating processes executing within a computer.","As computer processing technology became increasingly popular, the need for enhanced security of computing resources increased. The vast availability of computing platforms and technologies have created opportunities for computer hackers to surreptitiously gain access to the computing resources belonging to unsuspecting individuals and use those computing resources to carry out anything from mischievous pranks to crippling Denial of Service (DoS) attacks, to widespread financial fraud.","A longstanding protection used against such unauthorized access to a computing device or its corresponding resources is through the use of Network protections. Network protections such as Firewalls, proxy servers, and intelligent network gateways and routers protect computer resources on a network by, generally speaking, denying access to any computer which makes unsolicited requests for resources from a protected device, or attempts to execute commands or send information to the protected device without prior approval.","Unfortunately, network protections cannot protect against all mechanisms by which modern computer hackers attempt to gain unauthorized access to computing resources. For example, computer hackers may attempt to gain unauthorized access to a computing resource or to information within a computing device by tricking an unsuspecting victim into executing computer code locally that, for example, accesses protected memory areas belonging to unrelated processes, modifies a portion of another executable process image in memory, writes malicious or unauthorized code to an area of memory and then marks that writable area as executable, or causes programs and processes on the computing device to dynamically load executable code not originally intended for execution.","Such computer code when loaded, modified, or written into memory in such a way can be made to carry out any manner of malicious or unauthorized tasks, such as secretly authorizing remote network access to the computing device, sending sensitive data to a remote location, or opening a hidden gateway for a remote computing device to execute commands locally at the unsuspecting computer host.","Traditional mechanisms that exist for ensuring computer code is \u201ctrusted\u201d or otherwise safe to execute on a local machine are, unfortunately, too time consuming and costly for generally available consumer applications. A hands-on extensive examination of the subject code is required to seek out any bugs or malicious code that could violate the intended security precautions, and only after such an examination is completed, is an executable image of the computer code certified as \u201ctrusted\u201d for a particular application. While such a process is common place in mission critical Enterprise applications and very high security environments, this process is simply not feasible for a vast number of general utility computer applications.","Other mechanisms which have been proposed include modifying existing applications to self-certify that they do not, for example, modify memory portions allocated to other processes, attempt to modify the executing code of other processes, or attempt to cause other images, or themselves, to dynamically load malicious code segments for execution. Unfortunately, such a proposed mechanism is easily overcome by any computer programmer who either negligently or maliciously fails to adhere to the stated program requirements.","Another proposed mechanism includes rewriting a host operating system in conjunction with re-written executable applications which must adhere to certain requirements, such as not attempting to modify or access memory allocated to other processes, and then having those requirements checked and enforced by the operating system itself. While such a mechanism is more difficult to overcome, an extensive amount of effort must be invested in upgrading and updating so called, \u201clegacy\u201d applications, which are often unsupported, in order to make those applications execute within an operating system that enforces such programming requirements. Even computer applications which enjoy current support would require significant efforts to ensure the applications are compatible with the new requirements. Such a solution is thus impractical for many computer applications.","There are a great many applications which would therefore, be rendered obsolete, or incompatible with a new operating system having the more strict security requirements which prohibit certain types of memory access or modification of executing code.","Described herein are a system and method for isolating processes executing within a computing device. The computing device includes a hypervisor that is communicatively interfaced with an operating system kernel via an Application Programming Interface (API). In one embodiment, a process is loaded into a virtual machine operating under the control of the hypervisor, and a subset of the API is exposed to the virtual machine enabling the process to interface with the operating system kernel and execute the process in the virtual machine.","In one embodiment, multiple virtual machines are controlled and monitored by the hypervisor and are interfaced with an operating system kernel via the API. Each virtual machine may contain a single executing process which is exposed to a subset of the API through which the executing process may communicate with the operating system kernel and perform authorized, non-restricted functions. Restricted operations of the API are \u201chidden\u201d from the executing process and cannot be accessed via the subset of the API exposed to the executing process in the virtual machine. In one embodiment, the hypervisor performs additional validity checking of operations requested though the subset of the API to ensure those operations are authorized to be performed by, or on behalf of, the requesting process.","In one embodiment, the virtual machine is further exposed to a copy-on-write memory image, such as an address space in memory that is addressable by the operating system kernel or an address space in memory allocated to the process. The virtual machine may be further exposed to a shared read-only view of the operating system kernel itself and to a read-only view of Dynamic Shared Objects (DSOs) associated with the operating system kernel.","The subset of the API exposed to each virtual machine may enhance security on the computing device by preventing the isolated process from executing certain suspect operations or restricted operations on the computing device which may result in security breaches or undesirable effects on the computing device. For example, restricted operations which are hidden from the virtual machine (e.g., not exposed to the virtual machine) may prevent certain operations initiated by the executing process from being performed, despite being attempted by an executing process which is isolated in accordance with the methods discussed herein. Such operations may include requests to access memory locations not associated with the isolated process or an operation that attempts to mark writable memory locations as executable, and so forth.","In the following description, numerous specific details are set forth such as examples of specific systems, languages, components, etc., in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that these specific details need not be employed to practice the present invention. In other instances, well known materials or methods have not been described in detail in order to avoid unnecessarily obscuring the present invention.","The present invention includes various steps, which will be described below. The steps of the present invention may be performed by hardware components or may be embodied in machine-executable instructions, which may be used to cause a general-purpose or special-purpose processor programmed with the instructions to perform the steps. Alternatively, the steps may be performed by a combination of hardware and software.","The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, each coupled to a computer system bus.","The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear as set forth in the description below. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.","The present invention may be provided as a computer program product, or software, that may include a machine-readable medium having stored thereon instructions, which may be used to program a computer system (or other electronic devices) to perform a process according to the present invention. A machine-readable medium includes any mechanism for storing or transmitting information in a form readable by a machine (e.g., a computer). For example, a machine-readable (e.g., computer-readable) medium includes a machine (e.g., a computer) readable storage medium (e.g., read only memory (\u201cROM\u201d), random access memory (\u201cRAM\u201d), magnetic disk storage media, optical storage media, flash memory devices, etc.), a machine (e.g., computer) readable transmission medium (electrical, optical, acoustical), etc.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","170","150","195","185","140","195","185","1","115","2","115","115","115","110","110","110","115"]},"Hypervisor , also referred to as a virtual machine monitor (VMM), provides virtualization of computer hardware associated with the computing architecture  and may allow multiple instances of virtual machines to operate on the host computing hardware, including enabling multiple operating systems to run on a computing device's hardware  concurrently. Hypervisor  may operate in \u201cnative\u201d mode, sometimes referred to as a \u201ctype 1 hypervisor,\u201d in which the hypervisor interfaces directly with the hardware  of the computing architecture . Alternatively, hypervisor  may operate in \u201chosted\u201d mode, in which the hypervisor  operates as a computer application process which executes within the control of another computing environment, such as a native host operating system which interfaces directly with the host computing hardware .","Hypervisor  includes an Application Programming Interface (API) which provides an interface into an operating system kernel. In one embodiment, hypervisor  exposes a portion of the API into the operating system kernel to the virtual machines  operating under the control of the hypervisor  as one or more API subsets . The hypervisor  may contain multiple types or classes of API subsets , each of which may contain a different or unique combination of interfaces which are available from the API. For example, the hypervisor  may contain a variety of API subsets  which may be exposed to, allocated to, or associated with a particular virtual machine  based on a particular process .","The API subset  exposed to a virtual machine  may be selected based on a particular user requesting the process , based on a class or type of software, application, or process  to be loaded, or based on any of a variety of attributes upon which different levels of security or different allotments of functionality may be appropriate (e.g., a process loaded by a \u201croot\u201d level account in Linux may be subject to fewer security restrictions than a user level account which requests execution of the same process ).","The API provides a mechanism by which hypervisor  or virtual machines  under the control of hypervisor  may communicate with an operating system kernel available within the computing device. In one embodiment, the virtual machines  are isolated from the operating system kernel in such a way that they have no visibility or access to the functionality of the kernel except through an API subset  exposed to or associated with the virtual machine  and its executing process .","In one embodiment, hypervisor  enables the isolation of a process  within a computing environment through the use of a virtual machine  that executes a single process  in the virtual machine , also referred to as a \u201cper process virtual machine.\u201d For example, the hypervisor  may receive a request to execute a process within the computer architecture . Responsive to the request, the hypervisor  may create a virtual machine  (e.g., by cloning an existing virtual machine as discussed in more detail below) to execute the requested process . The hypervisor  allocates address space in memory  to the virtual machine  and loads an image of the requested process  from storage  into the virtual machine , and in particular, into the memory  allocated to the virtual machine .","The hypervisor  may expose an API subset  or portion of an application programming interface between the hypervisor  and an operating system kernel to the virtual machine, through which the process  may initiate operations or functionality that reside within the kernel. In some embodiments, the hypervisor  may further expose all or a part of an operating system kernel to the virtual machine  by allocating the address space in which the kernel resides to the virtual machine as read-only memory. The hypervisor  then initiates execution of the process image previously loaded into the virtual machine as an executing process . The executing process has access to hardware  resources within the computer architecture  to the extent that the hypervisor  has exposed such resources to the virtual machine  (such as exposure to read-only memory address space in which all or a portion of the kernel resides and the API subset  which exposes a portion of the interface between the hypervisor and the kernel).",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2","b":["205","140","230","115","140","235","150","110","150","230","115","205","115","115","115","140","115","115","115","140","115"]},"In one embodiment, the hypervisor  intercepts a request from an executing process  to write to the copy-on-write memory image . The hypervisor  allocates a portion of a shared common segment  of the copy-on-write memory image  to a private segment  of the copy-on-write memory image  to the requesting process  executing in the virtual machine . The requested update or modification is then written to the private copy portion  of the copy-on-write memory image  based on the request from the process . Other virtual machines  operating under control of the hypervisor  that have not performed a write to the shared common segment  will continue to reference the memory in the shared common segment .","The operating system kernel  may be exposed to the virtual machines  through the use of copy-on-write memory or read-only memory, depending upon the particular security restrictions and extent of process isolation imposed upon a virtual machine  and its executing process . In one embodiment, portions or subsets of the operating system kernel  may be selectively exposed to a virtual machine , rather than exposing the entire operating system kernel  image in the memory . For example, through the selective mapping of the various modular kernel components which constitute most modern operating system kernels , the hypervisor  can selectively expose the particular modular kernel components that are required or authorized for a particular process  to the virtual machine  in which that process  is executing. Modular kernel components which are not required or not authorized, are kept from the view of the virtual machine  as such components are not exposed.","For example, a process  which provides functionality for performing mathematical calculations may have no need to access network resources available through the operating system kernel . Accordingly, the hypervisor  may selectively expose only the required functionality to the virtual machine  executing the process , and hide, or simply not expose the modular components of the operating system kernel  residing in memory that provide access to network resources. Selectively exposing only the required portions of the operating system kernel  in the memory  to the various virtual machines  may provide further enhanced process isolation and system security above and beyond exposing only a portion or subset of an API for the operating system kernel to the virtual machine.","When virtual machines  are allowed to write to, update, or modify information to memory allocated to the operating system kernel , the hypervisor may expose the operating system kernel  to the virtual machines via the copy-on-write memory image. Conversely, when the virtual machines  are not allowed to write to, update, or modify information stored within memory allocated to the operating system kernel  (e.g., due to more restrictive security requirements or enhanced levels of process isolation within the computing device), the hypervisor  may instead expose the operating system kernel  to the virtual machines  via read-only memory, or mark the appropriate portion of the copy-on-write memory as read-only, thus preventing any process  executing within the virtual machines from modifying the memory space allocated to the operating system kernel  in any way.","Hypervisor  may expose Dynamic Shared Objects  associated with the operating system kernel  to the virtual machines  via the copy-on-write memory image  or via read-only memory depending on, among other things, process isolation and security requirements within the computing device . In one embodiment, a process  executing within a particular virtual machine  references portions of memory  that are exposed to it via the hypervisor , such as the operating system kernel , the DSOs , or a copy-on-write memory image .","In one embodiment, each virtual machine  has its own \u201cview\u201d of the operating system kernel  and Dynamic Shared Objects . In one embodiment, the view is identical among the various virtual machines  operating under the control of the hypervisor , but each virtual machine  operates independently from all other virtual machines  and each virtual machine is unaware of the existence of the other virtual machines . In one embodiment, the hypervisor  monitors and tracks all the virtual machines  operating on the computing device  and the hypervisor provides an interface to the operating system kernel  through which various executing processes  having the requisite authority granted by the hypervisor  may manage, manipulate, and otherwise affect other isolated processes  executing on the computing device , within the various virtual machines . Stated differently, in one embodiment, it is only through the hypervisor  that any process  executing within a virtual machine  under the control of the hypervisor may affect the operation of another process  executing within a virtual machine  under the control of the hypervisor. In one embodiment, the computing device  loads a second process  requested for execution into a second virtual machine  operating under the control of the hypervisor  and exposes the kernel  to the first process and to the second process via the hypervisor . Any number of virtual machines, each having an isolated process  executing therein, may be present within a computing device, so long as that number is within the operational limitations of the host computing hardware .","Generally speaking, each application (e.g., a web browser, a word processor, an antivirus application, a print daemon, etc.), executes as a single \u201cprocess\u201d  within a single virtual machine  under the control of the hypervisor . Sub-units of execution associated with those processes, often referred to as \u201cthreads,\u201d or \u201cprocess threads,\u201d are managed and maintained by either the operating system kernel or the executing process  in which the threads are present. Thus, a process , such as a web browser, having multiple tabs or multiple windows open may still operate as a single process  within a single virtual machine , despite having multiple process threads, or individual units of parallel execution.","In one embodiment, a first process  of a first virtual machine  is hidden from a second process  of a second virtual machine  via the hypervisor . In such an embodiment, the second process  of the second virtual machine  is likewise hidden from the first process  of the first virtual machine  via the hypervisor . In one embodiment, the hypervisor  may provide a mechanism through which isolated processes  can reference other isolated processes via an API subset  exposed to the process  by the hypervisor . However, API calls capable of providing inter-process interactions may similarly be designated as restricted operations, and thus, unavailable to the isolated processes, depending on the security requirements of the computing environment.","Each virtual machine  under the control of the hypervisor  may function as a logical extreme of a conventional \u201cvirtual machine,\u201d insomuch that execution within each virtual machine  is abstracted to the extent where only a single isolated process  executes within each virtual machine , rather than, for example, a conventional operating system executing within a virtual machine which may have multiple processes, all executing within the same virtual machine. In such a multi-process virtual machine environment, the processes may be fully exposed to each other and capable of causing harmful interactions among the various processes or negatively affecting the operation or resources allocated to other processes (e.g., such as writing to memory space allocated to another process). Abstracting the virtual machines as described herein may provide enhanced process isolation, improved process control, and improved process security within the computing device  when compared to conventional mechanisms.","Each single isolated process  executing within a single virtual machine , may be a computer application, a process, daemon, service, or other executable computer utility that is requested for execution. Prior to execution, the process  may reside within storage  (e.g., a hard disk drive or other similar storage) as a process image .","In one embodiment, the virtual machine  executes as a guest operating system under the control of the hypervisor . For example, the hypervisor  may interact with the virtual machine  as a guest operating system notwithstanding the virtual machine  having only a single isolated process  executing therein.","In one embodiment, the hypervisor  exposes non-restricted operations to the virtual machine  and hides (or does not expose) restricted operations from the virtual machine . Restricted operations may also be referred to as \u201csuspect operations\u201d or \u201cprohibited operations.\u201d","Generally speaking, restricted operations include functionality available within the operating system kernel  or accessible via an API into the operating system kernel that can potentially be used to exploit security vulnerabilities within a computing device . However, any operation may be designated as a restricted operation based upon the security and isolation requirements for a particular computing device  implementation.","For example, suspect operations or restricted operations may include requests to load executable code after an initial process load associated with the computer application, requests to access memory locations which are not allocated to the computer application, requests to make executable memory locations writable, requests to make writable memory locations executable, requests to commit modifications to dynamically shared objects or dynamically linked library modules, and requests to self-modify the executing process  (e.g., any attempt to modify the process's  own computer code executing from within a virtual machine ).","In one embodiment, the hypervisor  marks an executable process image  associated with the process as read-only in the copy-on-write memory image  and disables calls in the API to mark all or a portion of the executable process image  associated with the process as writable in the copy-on-write memory image .","The above list of restricted, suspect, or prohibited operations are merely an example of some operations which may expose the computing device , its executing processes , the operating system kernel , and computer resources in general to potentially malicious code or even negligently written code that inappropriately interferes with other processes  executing within the same computing environment. For example, the prohibition against marking writable memory locations as executable, may be used to prevent a computer application from writing malicious code into memory, and then causing that code to be executed, either by the executing process  itself, or by other processes  within the computing device .","The API subset  exposed to a particular virtual machine  is based upon the needs of the executing process, software, or application in question. For example, a restricted operation may be required for some executing processes but not others. Alternatively, certain restricted operations may be specified as prohibited by default, and allowed only based on express authorization via the hypervisor . Similarly, operations may be specified as prohibited and never authorized based on the operational requirements of a particular computing environment.","Restricted operations that are prohibited by default, but authorized for a particular process may be exposed to the process via the subset of the API, and thus, the process will have the ability to initiate and successfully perform those restricted operations. In other embodiments, the restricted operations are denied by default for all processes, for example, to ensure a minimum level of process isolation and general security for the computing device .","Different base profiles may be utilized to control what operations are delegated as restricted operations and non-restricted operations respectively. For example, certain applications, such as applications developed internal to an Enterprise or applications from a known reliable source, may be certified with a higher level of trust, and thus, it may be appropriate to grant those trusted applications greater levels of flexibility. For example, by designating fewer operations as restricted operations. Conversely, some applications may be inherently suspect, such as executable process images  received via email or applications downloaded from the Internet or from third parties not designated as trusted or as known reliable sources.","The operations exposed by the hypervisor  to a virtual machine  within an API subset  may be based on an operations profile . For example, the operations profile  may list non-restricted operations that are to be exposed by default, list non-restricted operations that are to be exposed for a particular process or a particular process image . Each process or process image  may have a unique list of non-restricted operations to be exposed as a subset of the API which is different than a list of non-restricted operations to be exposed for other process images .","In one embodiment, the subset of the API exposed to a virtual machine  is based further on a restricted operations profile . Similar to the operations profile , the restricted operations profile  may list operations which are prohibited by default, operations which are always prohibited, operations which are prohibited for certain classes of processes or executable process images , or operations which are prohibited for a particular process or process image .","The operations profile  or the restricted operations profile , or both, may be generated based on an execution of a particular process in \u201crecording\u201d mode or \u201clearning\u201d mode. In one embodiment executing the process in recording mode automatically generates an operations profile. For example, the hypervisor may execute the process in a virtual machine, record all requests made to a fully exposed API from the executing process, and store the recorded requests in the operations profile for later reference. In one embodiment, a restricted operations profile is derived from the automatically generated operations profile and based further on a list of operations which are prohibited by default or designated as suspect operations.","In one embodiment, only operations requested by the process during recording or learning modes are authorized and made into non-restricted operations, so as to ensure that a later modification to the executing process or an executable process image  is not permitted to initiate requests that are not certified as being required by the base application (e.g., required by the base application as tested and executed in learning mode).","Virtual machines may be generated or created by the hypervisor  through a \u201ccloning\u201d or copying process. In one embodiment, a virtual machine  is generated at boot time of the computing hardware , from which other virtual machines  may be copied or cloned. For example, in UNIX operating system variants (e.g., Linux), the initial process required to begin booting an operating system kernel, such as process \u201c1,\u201d may be placed into a virtual machine for execution. The hypervisor  may then expose the appropriate API subset  to the virtual machine, expose the operating system kernel  in memory  to the virtual machine, and then initiate execution of the process. In one embodiment, subsequent processes  requested for execution are placed into virtual machines  which are cloned from an existing virtual machine  under the control of the hypervisor.","For example, the hypervisor , upon receiving a request to execute a process may initiate a multi-step process to create a complete copy or a clone of an existing virtual machine. Such a process may include: Requesting a process \u201cfork,\u201d or similar function to make an identical duplicate of the executing process in the new clone as is executing in the virtual machine being cloned. Loading a process image (such as process image ) into the virtual machine from storage, thus replacing a process image previously associated with the virtual machine (e.g., the process image  being used by the original virtual machine from which the clone was made). Allocating an API subset  to the clone, thus replacing any prior API subset allocated. Allocating or exposing all or a portion of the operating system kernel  to the clone, thus replacing a prior allocation which was carried over in the cloning process. Allocating or exposing an address space, such as copy-on-write memory image  to the clone, thus replacing any prior allocation copied from originating virtual machine. And initiating execution of the newly loaded process image  within the newly created virtual machine , thus replacing the forked or copied process carried over from the original virtual machine. Obviously, additional steps or fewer steps may be performed, and many of the steps may be performed in a variety of sequences, as the above is merely one example of how virtual machines  may be created or instantiated to support the execution of a requested process.","In one embodiment, virtual machines  are automatically destroyed, cleaned up, or eliminated by the hypervisor  once a process assigned to and executing within a particular virtual machine  terminates.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 3","b":["300","300","350","305","315","320"]},"Computing device  further includes operations recorder  which learns or records all operations initiated by a process executing in recording mode, and then stores those operations in an operations profile for later reference. Computing device  includes hypervisor  which creates virtual machines, exposes the subset of the API to those virtual machines, loads individual processes into individual virtual machines, and controls\/monitors the virtual machines. Copy-on-write memory controller  of computing device  manages the copy-on-write memory operations, such as maintaining those memory portions which are common across multiple virtual machines and those portions of memory which have been modified and are allocated as private or unique memory portions for a particular virtual machine and are not shared with or common to others. Operating system kernel API  of computing device  provides a communication interface between hypervisor  and an operating system kernel within the computing device , from which API subsets may be derived.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 4","FIG. 1"],"b":["400","400","400","205"]},"Referring to , method  begins with processing logic in the computing device executing a hypervisor communicatively interfaced with an operating system kernel (block ) via an Application Programming Interface (API). At block , processing logic loads a process requested for execution into a virtual machine that operates under the control of the hypervisor.","At block , processing logic exposes a subset of the API to the virtual machine, which allows the process requested for execution to execute with the operating system kernel through the subset of the API. At block , processing logic exposes a copy-on-write memory image to the virtual machine. At block , processing logic marks an executable image associated with the process as read-only in the copy-on-write memory image. At block , processing logic disables calls in the API to mark all or a portion of the executable image associated with the process as writable in the copy-on-write memory image.","At block , processing logic executes the loaded process in the virtual machine. At block , processing logic receives a request from the executing process to write to the copy-on-write memory image. At block , processing logic allocates a private copy portion of the copy-on-write memory image to the process executing in the virtual machine. At block , processing logic writes to the private copy portion of the copy-on-write memory image based on the request from the executing process.","At block , processing logic loads a second process requested for execution into a second virtual machine operating under the control of the hypervisor. At block , processing logic removes the virtual machine when the executing process terminates.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 5","FIG. 1"],"b":["500","500","500","205"]},"Referring to , method  begins with processing logic in the computing device to execute a first instruction (block ). At decision block , if the instruction is a restricted operation, then method  continues to block , where processing logic in the computing device fails to perform the restricted operation due to lack of an exposed instruction interface in the subset of the API exposed to the virtual machine. Alternatively, at decision block , when the instruction is a non-restricted operation, the method  continues to block , where processing logic in the computing device performs the instruction via the subset of the API exposed to the virtual machine.","Method  proceeds from blocks  and  to decision block , where a determination is made whether the instruction executed is the last instruction of the executing process in the virtual machine. When the instruction is the last instruction, method  proceeds to block  where processing logic in the computing device terminates the executing process in the virtual machine and terminates or removes the virtual machine in which the process was execution. After block  method  ends. When the instruction is not the last instruction, method  proceeds to block , where processing logic executes the next instruction and the method  is repeated.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 6","b":"600"},"The exemplary computer system  includes a processor , a main memory  (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM) or Rambus DRAM (RDRAM), etc., static memory such as flash memory, static random access memory (SRAM), etc.), and a secondary memory  (e.g., a data storage device), which communicate with each other via a bus . Main memory  includes operations profile  which contains a list of operations to be exposed to a virtual machine in a subset of an API to an operating system kernel. The list of restricted operations , which is also stored within the main memory  may be referenced by a hypervisor in determining which operations will be hidden, restricted, or left un-exposed to a virtual machine in a subset of an API. Executable process image  is similarly stored within main memory , which may be an unmodified and unsupported legacy application, a currently supported and trusted Enterprise utility application, or an inherently suspect and untrusted computer application to be executed in conjunction with processing logic  and processor  to perform the methodologies discussed herein.","Processor  represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processor  may be a complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processor  may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. Processor  is configured to execute the processing logic  for performing the operations and steps discussed herein.","The computer system  may further include a network interface card . The computer system  also may include a user interface  (such as a video display unit, a liquid crystal display (LCD), or a cathode ray tube (CRT)), an alphanumeric input device  (e.g., a keyboard), a cursor control device  (e.g., a mouse), and a signal generation device  (e.g., a speaker).","The secondary memory  may include a machine-readable storage medium (or more specifically a computer-readable storage medium)  on which is stored one or more sets of instructions (e.g., software ) embodying any one or more of the methodologies or functions described herein. The software  may also reside, completely or at least partially, within the main memory  and\/or within the processing device  during execution thereof by the computer system , the main memory  and the processing device  also constituting machine-readable storage media. The software  may further be transmitted or received over a network  via the network interface device .","While the machine-readable storage medium  is shown in an exemplary embodiment to be a single medium, the term \u201cmachine-readable storage medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The term \u201cmachine-readable storage medium\u201d shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term \u201cmachine-readable storage medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, and optical and magnetic media.","It is to be understood that the above description is intended to be illustrative, and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should, therefore, be determined with reference to the appended claims, along with the full scope of equivalents to which such claims are entitled."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation, and can be more fully understood with reference to the following detailed description when considered in connection with the figures in which:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5","b":"500"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
