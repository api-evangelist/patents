---
title: Method and system for lane graph visualization
abstract: A system and method for lane graph visualization are described. In various embodiments, a system includes modules to receive and display nodes in topological order. In various embodiments, the system determines a structure for nodes and sorts the data nodes. In various embodiments, a user interface is provided for displaying the lane graph visualization. In various embodiments, the user interface offers interactivity features responsive to user interface events. In various embodiments, a method for lane graph visualization is presented. The method includes receiving nodes in topological order and displaying the nodes in a lane graph visualization. In various embodiments, the method provides interactivity features for the lane graph visualization.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08502823&OS=08502823&RS=08502823
owner: Business Objects Software Limited
number: 08502823
owner_city: Dublin
owner_country: IE
publication_date: 20091221
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The invention relates generally to visualizing data dependencies, and more specifically, to lane graph visualization.","Graphs are often used to represent, analyze, or process data. Graphs are used to represent abstract representation of a set of elements, referred to as \u201cnodes.\u201d Nodes are typically related to each other. These relationships are represented as links between the nodes, referred to as \u201cedges.\u201d","Data visualization refers to representing information in a graphical way, so that a user is able to understand the information, analyze the information, and draw conclusions from the information.","A graph may be used to build a model of a data structure. The model may include items of data represented by nodes and edges connecting the nodes. If there is no distinction in the direction of every edge in a graph, the graph is undirected.","If some edge in a graph is directed from one node to another node, the graph is directed and all other edges in the graph are required to have a direction. An undirected graph can be transformed into a directed graph by replacing each edge of the undirected graph with two directed edges between the same nodes that are in opposite directions, i.e. replace each undirected edge, for example, between nodes \u2018a\u2019 and \u2018b,\u2019 with an edge directed from \u2018a\u2019 to \u2018b\u2019 and with a second edge directed from \u2018b\u2019 to \u2018a.\u2019 Such models of data structures may be used for computational purposes, analysis, and optimization.","Some practical applications of graphs include computer networks, statistics, data structures, organizational structures, and studying particles in the natural sciences, among others.","Data structures may have many nodes, for example, hundreds, thousands, or even hundreds of thousands of nodes. Thus, it may be difficult to visualize a graph in a readable way. However, a visualization may be important for decision making and thus it is necessary to provide clear and readable graphs. Some visualization techniques suffer from poor readability as a result of crossing lines or overlapping content due to the size and complexity of the graph. It also may be beneficial for graphs to provide additional functionality so that users can obtain additional detail about the graph structure.","These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof, presented in connection with the following drawings.","In various embodiments, a system is presented. In various embodiments, the system may be implemented to analyze and display dependencies in structured data.","In various embodiments, a system of the embodiments may receive structured data from a memory and display the dependencies between the nodes of the data in a user interface.","In various embodiments, a system of the embodiments may alternately show the flow of dependencies in a descending order or in an ascending order or in both orders.","In various embodiments, parts of the dependencies between data elements may be collapsed, expanded, or highlighted depending on selections received in the user interface.","In various embodiments, a method is presented. The method may receive structured data from one or more modules and display dependencies between the nodes of the data in a lane graph visualization in a user interface.","Embodiments of techniques for method and system for lane graph visualization are described herein. In the following description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention can be practiced without one or more of the specific details, or with other methods, components, materials, etc. For example, reference to vertical or horizontal direction herein can be seen as a convention and changed when practicing the invention. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.","Reference throughout this specification to \u201cone embodiment\u201d, \u201cthis embodiment\u201d and similar phrases, means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures, or characteristics may be combined in any suitable manner in one or more embodiments.","In various embodiments, raw data may be obtained, analyzed, and processed to produce a dependency graph. Raw data refers to data that is not modified or processed in any way and exists in a form that the data has been collected in.","In various embodiments, raw data may be processed to produce structured data. Structured data refers to data that has been analyzed and a structure of the elements of the data, or connections, or relationships between the data elements have been determined. For example, structured data may be database data, data found in reports, components in software packages and libraries, and others. Elements of structured data have relationships with other elements in the data. Relationships between elements are also referred to as \u2018dependencies.\u2019 Elements of structured data are also referred to as \u2018nodes\u2019 or \u2018data nodes.\u2019","For example, in a corporate database, an \u2018employer\u2019 object (or table) can be related to one or more \u2018employee\u2019 objects. Thus, it can be determined that the \u2018employer\u2019 object has outgoing dependencies to the \u2018employee\u2019 objects; correspondingly, the \u2018employee\u2019 objects have incoming dependencies from the \u2018employer\u2019 object.","In another example, a software package includes modules that have dependencies between them. It may be beneficial to explore such dependencies to determine if conflicting dependencies exist, or if long dependency chains exist, and so on. If conflicting dependencies between modules exist, this may result in software applications failing or throwing errors. Likewise, if dependency is unknown, an error can be introduced.","Further, if a software application has a dependency to a small part of a bigger software library, it may be beneficial to analyze and optimize the dependencies to make the software application lighter and more portable.","If a software application has a long chain of dependencies, this may lead to the software application requiring a lot of external components to run. Such dependencies may require to be resolved manually. Thus, it may be beneficial to represent complex dependencies in a precise and readable way, so that such dependencies may be easily followed and resolved.","In various embodiments, a graph is a representation of one or more elements of data (e.g., nodes) where some elements may be connected. Hereinafter, \u2018nodes\u2019 and \u2018elements\u2019 are used interchangeably. A graph is defined by its nodes and its edges\u2014connections, dependencies, relations, etc.","A node is an element in a graph. Nodes in graphs may have relationships (e.g., dependencies) between them. One or more nodes may be related to one or more other nodes, but not all nodes are necessarily related to one or more other nodes.","In various embodiments, nodes may be classified according to their dependencies. A root node is an element that has outgoing dependencies. A leaf node is a node that has incoming dependencies. An orphan node is a node that does not have incoming or outgoing dependencies.","In a directed graph, edges connecting nodes have a direction. For example, an edge connecting elements A and B directed from A to B means that A is the parent of B and B is the child of A. In a directed path from A to B to C, A is the ancestor of B and C; and B and C are descendents of A. In a graphical representation, directed edges of a graph are typically represented by arrows. In various embodiments, paths are also referred to as \u2018dependency flows.\u2019","In various embodiments a node may have both incoming and outgoing dependencies. Therefore, a node may be a child of one or more other nodes and a parent of one or more other nodes.","Traversing a graph refers to visiting each node in a graph in a specific manner. In various embodiments, graphs may be traversed where each node in a graph is visited once. In various embodiments, graphs may be traversed where nodes are visited more than once.","An acyclic graph is a graph that does not have cycles, for example, when the graph is traversed following the flow of dependencies starting at any node in the graph, the node is never visited twice. If a directed graph has cycles, an algorithm may be used to break the cycles in the graph, thus producing an acyclic directed graph. A tree is a special form of a directed acyclic graph where all nodes have at most one parent.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 1","FIG. 1","FIG. 1","FIG. 1"],"b":["1","17","1","2","5","8","11","14","15","1"]},"In various embodiments, a topological sort may be performed on an acyclic directed graph. Following the topological sort, the nodes of an acyclic directed graph are reordered in topological order. Topological order refers to an ordering of nodes where each node is placed above any nodes to which it has outgoing edges, and below any nodes from which it has incoming edges. The run time of a common topological sort algorithm scales linearly with the sum of the number of nodes and edges.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 2","FIG. 2","FIG. 1","FIG. 2"],"b":["1","2","17","1","2","5","8","11","14","15","1","1","2","5","8","11","14","15","6","7","9","10","12","13","16","17","6","7","9","10","12","13","16","17"]},"However, a visualization such as the visualization in  has a number of limitations. For example, such a visualization may not represent reverse dependencies or dependencies from the point of view of a specific node. To represent dependencies for a specific node, the visualization would have to reorder the nodes in the graph. Also, if the nodes in the graph are hundreds or thousands, it would be difficult to display nodes on a screen and follow dependencies between the nodes.","In various embodiments, a visualization may be created where nodes are assigned markers according to their type. A marker may be any graphical representation of a symbol that can specify the type of a node element. In various embodiments, each type of node element (e.g., root node, leaf node, and orphan node) may be assigned a marker.","Various embodiments include markers for different types of nodes, labels and arrows. In various embodiments, a root node may be assigned a marker representing a circle and a dash connected to the circle. In various embodiments, a leaf node may be assigned a marker representing a circle and a left-pointing arrow to the right side of the circle; thus, the marker indicates that the node has incoming dependencies. In various embodiments, labels may be assigned to nodes. In various embodiments, labels may be assigned to nodes from the names of the components in the data structure, or from table names in a database if the data structure describes tables in a database. In various embodiments, arrow markers may be assigned to specify dependencies of a node to other nodes.","In various embodiments, root and arrow markers specifying dependencies for a node may be connected by a vertical line and displayed in a vertical lane in a visualization. Hereinafter, the terms \u2018lane\u2019 and \u2018vertical lane\u2019 are used interchangeably. However, note that the use of a vertical lane selected by convention and may be culturally influenced. Therefore, embodiments of the invention may include horizontal lanes or lanes in another direction.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 3","FIG. 3"],"b":["302","304","302","302","306","306","306","302","302","308","308","308","302","310","312","310","314","312","310","314","314"]},"In various embodiments, the analysis performed by the layout module  may involve analyzing the types of elements in the data, such as, root nodes, leaf nodes, and orphan nodes. Further, the layout module  determines the dependencies of each element to other elements, if any. The layout module  may also determine user interface artifacts to assign to each element and each dependency. For example, each node may be assigned a marker according to the type of node. In another example, dependencies between elements may be represented by user interface artifacts and\/or visual aids, such as, but not limited to colors, combinations of colors, and blocks.","In various embodiments, the layout module  may receive elements for the visualization from the events module . The events module  receives user interface events, such as mouse over events, keyboard events, mouse click events, selection events, and others. The events module  may offer additional functionality to be added to a lane graph visualization in response to received events.","For example, the events module  may receive a mouse over event and provide instructions to the layout module  to send an updated lane graph visualization to the user interface  in which lanes are highlighted. For example, lanes are shown in different colors depending on the type of dependencies the lanes are displaying a first color for outgoing dependencies and a second color for incoming dependencies. In another example, the events module  may receive a selection event for one or more lanes in a lane graph visualization and provide a collapse or expand feature for the selected lanes to be added to the lane graph visualization. The layout module  receives the provided features, updates the lane graph visualization, and sends the updated lane graph visualization to the user interface  for display. The events can be related to analysis, processing, and display of the underlying data for the graph.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 4","FIG. 4","FIG. 3","FIG. 4","FIGS. 1 and 2"],"b":["1","17","436","468"]},"Each element is placed on a separate row and the label of the element is listed (e.g., \u2018element,\u2019 \u2018element,\u2019 and so on). The elements are sorted topologically (e.g., by the data sort module  of ). Thus, each element appears above the elements it has outgoing dependencies to; and below each element it has incoming dependencies to. For example, Element in block  is placed on the first row. This means that Element in block  does not have any incoming dependencies, i.e. that it is the root node of the structure.","In various embodiments, complex lane graphs may exist where there is more than one root node.","Each element is assigned a marker related to the type of element, in blocks  through to . Block  represents a root node marker while blocks , , and others represent leaf node markers. To represent dependencies between elements  through to  in blocks  through to , the lane graph visualization includes a lane per each element. Lanes are placed in the order of placing the elements, that is, lane one  lists dependencies for Element  in block , and so on. The lanes  through to  represent a set of dependencies including markers to represent which node element is the root in the dependency and which node elements are the leaf nodes. For example, the lane  indicates that Element in block  is a root node and elements , , , , , , , and  in blocks -, , , and  are leaf nodes and children of that node.","In various embodiments, a root node may be assigned a marker representing a filled circle and a dash connected to the circle. The dash may be replaced by an arrow (e.g., head, tail, or both) leading away from the circle, or some other symbol to imply leading away. The circle could be a box, the ground sign from electrical engineering, or some other symbol to imply ground.","In various embodiments, a leaf node may be assigned a marker representing a circle and a left-pointing arrow to the right side of the circle; thus, the marker indicates that the node has incoming dependencies.","In various embodiments, labels may be assigned to nodes. In various embodiments, labels may be assigned to nodes from the names of the components in the data structure, or from table names in a database if the data structure describes tables in a database.","In various embodiments, arrow markers may be assigned to specify dependencies of a node to other nodes.","In various embodiments, root and arrow markers specifying dependencies for a node may be connected by a vertical line and displayed in a vertical lane in a visualization.","Each lane  through to  includes a root marker correspondingly relevant for the label of the element in blocks  through to . The root marker in the lane specifies the node for which dependencies are shown in that lane. Thus, a lane graph visualization may show dependencies for all nodes in a data structure from the point of view of each node simultaneously. Because of the topological order of the nodes, the root markers in the vertical lanes form a diagonal path splitting the vertical lanes in two halves.","Because of the topological sorting of the elements, two regions are formed: a region with an outgoing flow of dependencies in the lower left side of the vertical lanes, and a region with incoming dependencies in the upper right side of the vertical lanes. These two regions are separated by a diagonal path formed by root markers indicating the node to which the dependencies are relevant for, as noted above.","For example, the lane  includes a root marker at the first row corresponding to block  to specify that this lane represents the dependencies of Element at block . Further, the lane includes arrows pointing to Element at block , Element at block , Element at block , Element at block , Element at block , Element at block , Element at block , and Element at block . Because the line connecting Element at block  is directed towards the lower side of the lane, it can be determined that Element at block  is the parent of Element at block , Element at block , Element at block , Element at block , Element at block , Element at block , Element at block , and Element at block . Further, each lane representing the dependencies per Element at block , Element at block , Element at block , Element at block , Element at block , Element at block , Element at block , and Element at block  reflects this dependency, too. For example, the lane  has a root marker corresponding to block  meaning that this lane represents the dependencies of Element at block . The lane  has an arrow pointing to block , indicating that Element at block  has an incoming dependency to its parent, Element at block . The lane  represents the reverse flow of the dependency shown in lane  from Element at block  to Element  at block . Further, the lane  has arrows pointing to Element at block , Element at block , Element at block , and Element at block , indicating that Element at block  is the parent of these nodes. Further, it can be determined that a path exists from Element  at block  to Element at block , Element at block , Element at block , and Element at block  via Element at block .","Therefore, a lane graph visualization such as the one on  is able to show dependencies of all nodes and from the standpoint of each node simultaneously.","In various embodiments, the data for the exemplary visualization may be loaded in a memory (e.g., memory  in ), and the visualization may be generated by a layout module such as the layout module  of . The exemplary visualization may be displayed on a screen in a user interface (e.g., user interface  in ).","Further, an events module (e.g., events module  of ) may be used to provide additional functionality for the visualization, such as, but not limited to, expanding and collapsing of rows, and highlighting lanes, nodes, dependencies, or a combination of all. Additionally lanes or equivalently nodes may be moved around subject to the topological sort.","In various embodiments, an events module (e.g., events module  of ) may provide interactivity functionality such as providing a user of the lane graph visualization an option to reverse dependency flows in the lane graph, an option to drag and drop data node labels at different positions in the lane graph visualization, an option to focus the lane graph visualization on outgoing dependencies only, or on incoming dependencies only, or to focus the lane graph visualization on a combination of both. Furthermore, the events module  may highlight connected nodes, lanes, or a combination of nodes and lanes in different colors.","Providing additional functionality may be beneficial for the analysis of visualizations representing data structures with many nodes and for decision making based on such visualizations. For example, if a data structure has many nodes, it may be beneficial to collapse some lanes and focus the analysis of the data on a specific region of the visualization. Thus, a visualization and the data represented by the visualization can be explored on a screen in a readable and accessible way.","Further, in a data structure with many nodes, it may be useful to highlight nodes and lanes in color according to type so that a user can easily distinguish between dependency flows.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 5","FIG. 5","FIG. 3","FIG. 5"],"b":["502","504","308"]},"At process block , each node label for each node in the data is received. The labels are arranged in a column where each label occupies one row in the column. At process block , a marker for each label is received. The markers are arranged in a column where each marker is correspondingly relevant for each label and is placed on the row of the column next to that label. At process block , a vertical lane is generated per each node. The vertical lanes are generated in the same order as the labels.","In various embodiments, if a visualization is created for the first time, lanes are initially empty. In various embodiments, a visualization may be changed after its first creation, thus non-empty lanes will be re-filled with data.","At process block , dependencies relevant for each lane are received. At process block  interactivity features are received. In various embodiments, such interactivity features may be received from an events module (e.g., events module  of ).",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 6","FIG. 6"],"b":["602","604"]},"At process block , a check is performed to determine if cycles exist in the data structure of the data. There are many methods to test if a graph includes a cycle. One example method is performing a depth first search looking for edges directed from a descendent to an ancestor. If none are found, the graph is acyclic. At process block , the cycles are broken if at process block  the check determines that cycles exist. In various embodiments, one or more algorithms may be applied to break the cycles.","In various embodiments, to break cycles in a graph, a depth-first traversal of a graph may be performed in the following way. A stack may be created and a root node is added to the stack. While the stack is not empty, a node is taken from the stack, marked and its edges are received. If a target node of the node edge is marked, the edge is deleted. If the target node of the node edge is not marked, the target node is added to the stack. This process may be repeated until all nodes are traversed.","In various embodiments, the process as described in  may be performed by components as described in  (e.g. data sort module ).",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 7","FIG. 7"],"b":["702","704"]},"At process block , a root marker is added to the lane at a horizontal position corresponding to the label of the node. At process block , one or more arrow markers are added to the lane. The arrow markers are added to a horizontal position corresponding to the nodes the root node has dependencies to. At process block , the root marker and the one or more arrow markers in the lane are connected with a vertical line. The vertical line represents the flow of dependencies for the node. The part of the flow above the root marker represents incoming dependency flow and the part of the flow below the root marker represents outgoing dependency flow. At process block , a check is performed to determine if more lanes exist. If more lanes exist, dependencies are added for each additional lane.","In various embodiments, the process as described in  is performed by components as described in . (e.g., layout module  and user interface module ).",{"@attributes":{"id":"p-0080","num":"0079"},"figref":["FIG. 8","FIG. 8"],"b":["802","804","806","804","808","804","810","808","812","808"]},"At process block , a check is performed to determine lane visibility status if the check at block  determines that the selection target is one or more lanes. At process block , the one or more lanes are expanded if the check at block  determines that the lane visibility status is collapsed. At process block , the one or more lanes are collapsed if the check at block  determines that the lane visibility status is expanded.","In various embodiments, the process as described in  is performed by components as described in  (e.g., events module ). The processing can be included at block  of the processing operations of .","Some embodiments of the invention may include the above-described methods being written as one or more software components. These components, and the functionality associated with each, may be used by client, server, distributed, or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as, functional, declarative, procedural, object-oriented, lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively, the components maybe implemented in server and client applications. Further, these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example, a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level (e.g., a graphical user interface). These first and second computer systems can be configured in a server-client, peer-to-peer, or some other configuration. The clients can vary in complexity from mobile and handheld devices, to thin clients and on to thick clients or even other servers.","The above-illustrated software components are tangibly stored on a computer readable medium as instructions. The term \u201ccomputer readable medium\u201d should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term \u201ccomputer readable medium\u201d should be taken to include any article that is capable of undergoing a set of changes to store, encode, or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described, represented, or illustrated herein. Examples of computer-readable media include, but are not limited to: magnetic media, such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROMs, DVDs and holographic devices; magneto-optical media; and hardware devices that are specially configured to store and execute, such as application-specific integrated circuits (\u201cASICs\u201d), programmable logic devices (\u201cPLDs\u201d) and ROM and RAM devices. Examples of computer readable instructions include machine code, such as produced by a compiler, and files containing higher-level code that are executed by a computer using an interpreter. For example, an embodiment of the invention may be implemented using Java, C++, or other object-oriented programming language and development tools. Another embodiment of the invention may be implemented in hard-wired circuitry in place of, or in combination with machine readable software instructions.",{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 9","b":["900","900","905","955","900","940","955","910","915","910","915","905","915","900","925","930","900","925","930","900","935","900","950","950","900","945","900","920","960","960","960","950","960"]},"A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases, such as, relational, transactional, hierarchical, multi-dimensional (e.g., OLAP), object oriented databases, and the like. Further data sources include tabular data (e.g., spreadsheets, delimited text files), data tagged with a markup language (e.g., XML data), transactional data, unstructured data (e.g., text files, screen scrapings), hierarchical data (e.g., data in a file system, XML data), files, one or more reports, and any other data source accessible through an established protocol, such as, Open Data Base Connectivity (ODBC), produced by an underlying software system (e.g., ERP system), and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams, broadcast data, and the like. These data sources can include associated data foundations, semantic layers, management systems, security systems and so on.","The above descriptions and illustrations of embodiments of the invention, including what is described in the Abstract, is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of, and examples for, the invention are described herein for illustrative purposes, various equivalent modifications are possible within the scope of the invention, as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather, the scope of the invention is to be determined by the following claims, which are to be interpreted in accordance with established doctrines of claim construction."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The claims set forth the embodiments of the invention with particularity. The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. The embodiments of the invention, together with its advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
