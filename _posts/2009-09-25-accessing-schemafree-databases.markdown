---
title: Accessing schema-free databases
abstract: Accessing a schema-free database includes constructing a model indicating a structure for the data to be used by applications accessing the data, validating the model based on the structure and on the data stored in the schema-free database, providing an API based on the structure, and accessing the database using the API. The model may be constructed by extracting data structure information from a program. The program may be written in the Ruby programming language or the Python programming language. The API may be a RESTful API.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09361359&OS=09361359&RS=09361359
owner: EMC Corporation
number: 09361359
owner_city: Hopkinton
owner_country: US
publication_date: 20090925
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF VARIOUS EMBODIMENTS"],"p":["1. Technical Field","This application relates to the field of storing data, and more particularly to the field of accessing data in a database.","2. Description of Related Art","Data storage may be categorized into two broad categories: schema-based and schema-free. Schema-based platforms offer access to data via pre-defined data structures, or data schema. The data schema is defined by the provider of the platform and is not changed by platform's client application. Such platforms generally provide web service APIs designed around the schema. In schema-free platforms, on the other hand, the data can be stored without needing to pre-define any data model. The API provided by schema-free platform is highly generic and does not make any assumptions about the data model of the data being stored or queried.","Each platform category has its benefits and drawbacks. Schema-based platforms expose an API appropriate for building applications that create and access data that follows a pre-defined schema. For example, Facebook APIs are suitable for applications that deal with people's profiles and their social network. The drawback of schema-based platforms lies in their being inappropriate to support applications that use a different data model. Thus, the range of possible applications is reduced to those that can be built around existing API.","In contrast, schema-free platforms provide developers with greater flexibility when building applications, and eliminate the need to re-factor an entire database as those applications evolve. Thus, schema-free platforms can support a greater range of applications with different data models. For example Amazon's Simple DB, a schema-free platform, offers a key-value storage API. The drawback of schema-free platforms is that they require an application to serialize its data model into a form suitable for storage via a generic interface. The query model supported by schema-free databases is separate from the application's data model. As a result, an application is responsible for managing the mapping between its internal data model and platform's API.","Accordingly, it would be desirable to provide a database mechanism that includes the benefits of schema-based and schema-free platforms without the drawbacks of those systems.","According to the system described herein, accessing a schema-free database includes constructing a model indicating a structure for the data to be used by applications accessing the data, validating the model based on the structure and on the data stored in the schema-free database, providing an API based on the structure, and accessing the database using the API. The model may be constructed by extracting data structure information from a program. The program may be written in the Ruby or Python programming languages. The API may be a RESTful API. Accessing a schema-free may also include constructing an optimization for each field of data provided in the data model. The optimization may be an index containing an entry for each indexed value and a corresponding node ID indicating a particular node of the schema-free database containing data corresponding to the value. The optimization may be an index containing an entry for each indexed value and a corresponding location of a node in a data file containing the schema-free database. Validating the model may include confirming that data fields in the model correspond to data properties provided in the schema-free database.","According further to the system described herein, computer software, provided in a computer-readable storage medium, accesses a schema-free database. The software includes executable code that validates a data model that indicates a structure for data to be used by applications to access the data in the schema-free database, executable code that provides an API based on the structure, and executable code that provides access to the database using the API. The model may be based on data structure information from a program. The program may be written in the Ruby or Python programming languages. The API may be a RESTful API. The computer software may also include executable code that constructs an optimization for each field of data provided in the data model. The optimization may be an index containing an entry for each indexed value and a corresponding node ID indicating a particular node of the schema-free database containing data corresponding to the value. The optimization may be an index containing an entry for each indexed value and a corresponding location of a node in a data file containing the schema-free database Executable code that validates the model may confirm that data fields in the model correspond to data properties provided in the schema-free database.","According further to the system described herein, accessing a schema-free database includes providing a dynamic API platform that presents the data of the schema-free database in a structured form, determining if a data request received through the API corresponds to data in the schema-free database, and accessing an index to obtain a node in the schema-free database, where the node corresponds to data accessed through the API and where the index contains an entry for the data and a corresponding entry indicating the node. The entry indicating the node may be a node ID or may be a location of the node in a data file containing the schema-free database. The API may be a RESTful API.","The system described herein provides a schema-free platform that is augmented with a capability to dynamically create an API specific to application's data model, thus presenting a pseudo schema-based interface to the application.","Referring to , a diagram  shows a schema-free database  that contains a plurality of nodes -. Although only three specific ones of the nodes - are shown in , the nodes - represent any number of nodes since the schema-free database  may contain any number of nodes. A plurality of applications - access the schema-free database  by reading and\/or writing data from\/to the nodes -. Just as with the nodes -, although only three specific one of the applications - are shown, the applications - represent any number of applications. As explained in more detail elsewhere herein, each of the nodes - contains information indicating one or more properties and associated values therefor that may be used and\/or manipulated by the applications -.","In an embodiment herein, the schema-free database  may be stored in a single data file in non-volatile computer data storage (e.g., a disk), although other types of storage schemes may be used, including multiple data files, combinations of data files and other types of non-volatile storage, etc. Also, in an embodiment herein, each of the nodes - may be identified by a unique node ID that is different for each of the nodes. The node IDs may be numeric values, strings, symbols, or any other appropriate token-like value that may be used to uniquely identify the nodes -.","Referring to , a subset  of the nodes - are shown as being interconnected. Interconnections between the nodes - may be facilitated by data within each of the nodes - that provides pointers to other ones of the nodes -. This is explained in more detail elsewhere herein. The interconnections may be formed and\/or adjusted by one or more applications (not shown in ) according to processing performed by the application(s). In some instances, the nodes may be interconnected\/adjusted by system processes and\/or processes that are not applications. In an embodiment herein, the interconnections may be used to express a relationship between the interconnected nodes. For example, a node containing an address of a particular contact in an address book may be interconnected with another node containing the phone number of the particular contact. As illustrated by the subset , the nodes - may be interconnected in any configuration, including having no connections, having one connection, or having multiple connections.","Referring to , an index  indicates information stored in the nodes -. The information includes a plurality of properties and associated values. The properties are defined\/used by the applications - and thus can be any information that may be quantified and stored in a database. For example, a property could be a telephone number and the associated value for a specific telephone number may be a string indicating the phone number (e.g., \u201c508-555-1212\u201d). Each of the nodes - may have different property\/value sets and it is possible for no two of the nodes - to have the same set. Of course, it is also possible for all of the nodes to have the same set.","In an embodiment herein, the property field of an element of the index  could indicate that the corresponding value points to another one of the nodes - of the schema-free database , thus providing interconnections for the nodes illustrated by the subset  of nodes shown in . There may be any number of such entries, including zero, one, or more than one in accordance with the subset  shown in  and discussed above.","Referring to , an index  illustrates a plurality of node IDs and location values therefor. The index  may be used by an application to find the nodes in the schema-free database. Each entry in the index  may include a node ID and a location value that indicates a location of the corresponding node in the schema-free database . In an embodiment herein, the schema-free database  may be provided in a computer data file and the location value may indicate an offset from the beginning of the data file where the corresponding one of the nodes - is stored. Of course other storage schemes and\/or location conventions may be used. For example, it is possible to have each node be stored in its own file, in which case the location field could indicate the name of the file.","In some instances, it may be useful to provide other indexes for quickly locating values stored in the nodes -. The indexes would be searchable according to the values, and would provide a pointer to the one of the nodes - containing a particular searched value.","Referring to , an index  correlates particular values of data stored in the schema-free database with particular node IDs. Each of the values in the index  may represent a value corresponding to a particular property of the nodes -. For example, if at least some of the nodes - contain a property of last name (i.e., of a contact), then each of the values in the index  may correspond to a different last name stored in the nodes - (e.g., \u201cSmith\u201d, \u201cJones\u201d, \u201cWilliams\u201d, etc.). Each entry of the index  contains an ID for the one of the nodes - that contains the value provided in the entry. Thus, for example, if the index  is a list of name values, then each entry of the index  contains a specific name as well as an id for the one of the nodes - that contains that name.","An application searching for a node containing a particular name would first consult the index  to find an entry in which the value is the same as the name of interest. Once the entry is found (if it exists), the application would use the corresponding ID and the index  to locate the specific one of the nodes -. The index  may be constructed using any appropriate technique, including traversing all of the nodes - using the index  to find nodes containing properties and corresponding values of interest. In some systems, an index may be created for all possible properties of the nodes - while in other systems, no indexes are created, and thus all searches must be performed by traversing all of the nodes - each time. Of course, it is possible to create indexes for some properties but not for others.","Referring to , an index  contains a plurality of entries where each entry has a value as well as a corresponding location indicating a particular one of the nodes - having the value. An application searching for a value of interest could search the index, find an entry containing the value, and use the location field of the entry to determine the node containing the value. Thus, the index  advantageously combines the entries of the index  with the entries of the index  to reduce the number of steps used to find a node containing a particular value. Note, however, that a disadvantage of using indexes like the index  shown in  is that, if any of the nodes - are moved within the data file (or other storage) used for the schema-free database  (e.g., in connection with garbage collection, compaction, etc.), then it is necessary to update all of the indexes. In contrast, if node IDs are used like that shown in the index , then when nodes are moved, it is only necessary to update the index  that correlates node IDs with the location of the nodes - within the data file.","Note that it is possible for the indexes to use some other mechanism for optimizing searches for values in the schema-free database . In addition, other types of search optimizations may be provided for searching for values in the schema-free database . Accordingly, the system described herein is not limited by any specific type of search optimization technique or system.","The system described herein allows a user to construct a data model for access by an application. For example, if the schema-free database  contains names, addresses, and phone numbers used for contacts, a user may desire to retrieve data for each contact as a single unit, to search the names and return a phone number, etc. Of course, all of this is possible to do within the application so long as appropriate software is provided to access the schema-free database . However, it may be desirable to present a pseudo schema-based interface to the application to facilitate arranging the data in a logical fashion. In addition, a number of different applications may want to be presented with different schemas in order to access the same data in different ways. The system described herein provides a flexible mechanism for creating different schema interfaces to access the schema-free database .","Referring to , a diagram  includes the schema-free database , a Data Model Manipulation (DMM) interface , and a Data Model Descriptor Language (DMDL) model . The DMM interface  represents any appropriate combination of computer hardware and\/or software for providing the functionality described in more detail herein. The DMM interface  may share at least some hardware\/software with the hardware\/software that is used to implement the schema-free database .","The DMDL model  represents a desired structure for the data of the schema-free database  that will subsequently be used by one or more applications to access the data. The DMDL model  may be in any suitable format and an application developer may create the DMDL model  using any suitable means. In an embodiment herein, a developer may develop application code using the Ruby or Python programming language so that the DMDL model  may be created using the Introspection operation to extract the data structures from the Ruby or Python code. Of course, other programming languages may be used and the DMDL model  may be created manually and\/or may be created independently of the programming language that is used. Whatever format\/technique is used, the DMDL  must describe the data and relationships thereof to be used by the application(s).","As an example, suppose the nodes - of the schema-free database  contain data regarding names, addresses, phone numbers, and email addresses for a number of different people. As discussed elsewhere herein, the data in the schema-free database is not necessarily arranged in any sort of structure or order. However, using the system described herein, a developer can specify a data structure called a contact that includes the name, address, phone number, etc. The system then provides an Application Program Interface (API) that subsequent applications can use to access the data in the schema-free database according to the new structure that has been specified.","Referring to , a diagram  includes the schema-free database , a dynamic API platform , and the applications -. The dynamic API platform  represents any appropriate combination of computer hardware and\/or software for providing the functionality described herein. The dynamic DPI platform  may share at least some hardware\/software with the hardware\/software that is used to implement the schema-free database . As described in more detail elsewhere herein, the dynamic API platform presents the applications - with an API constructed according to the DMDL model . The applications - use the API to access data in the schema-free database . The API allows an application to manipulate data of the schema-free database  as if the data were part of a schema-based platform, depending on how the developer has constructed the API.","Referring to , a flow chart  illustrates steps performed in connection with developing a new API according to the system described herein. Processing begins at a first step  where a developer creates a DMDL model. As discussed elsewhere herein, the DMDL model may be created using any suitable means. Following the step  is a step  where the developer submits the DMDL model to the DMM interface  for validation. In an embodiment herein, the DMDL model is submitted using an HTTP Post with the DMDL model in the body of the request.","Following the step  is a test step  where the DMM interface  determines if there are any errors in the DMDL model. At the step , the DMM interface  may check the DMDL model for syntax as well as confirming that all of the requested fields are part of the data of the schema-free database . For example, it may be an error if a developer specifies an email field for a contact, but no email data exists in the schema-free database . If it is determined at the step  that the DMDL model contains an error, then control passes from the step  to a step  where the developer revises the DMDL model (to correct the error). Following the step , control passes back to the step  to resubmit the model.","If it is determined at the step  that no error has occurred, then control passes from the step  to a step  where the new API is created. In an embodiment herein, the API is a RESTful API (i.e., conforms to the representational state transfer style for distributed hypermedia systems). Methods such as GET, POST, and PUT are supported. Of course, in other embodiments, other types of APIs that support other operations may be used. Following the step , processing is complete.","Referring to , a flow chart  illustrates in more detail steps performed in connection with creating the new API at the step , discussed above. Processing begins at a first step  where a pointer, used to iterate through all of the requested data fields, is set to point to the first field. Following the step  is a test step  where it is determined if the process is finished (i.e., all of the data fields have been processed). If so, then control transfers from the test step  to a step  where a success indicator is returned to a calling process (e.g., a process called by an application developer creating the new API). Following the step , processing is complete.","If it is determined at the step  that the process for creating the API is not finished, then control transfers from the step  to a test step  where it is determined if the data field pointed to by the iteration pointer corresponds to a data property that exists in the schema-free database . If not, then control transfers from the step  to a step  where an error is returned to the calling process. Following the step , processing is complete. If it determined at the test step  that the particular data property does exist, then control transfers from the test step  to a step  where a search optimization is created for the data property. Creating an optimization at the step  may include creating an index. Indexes are discussed in more detail elsewhere herein. Following the step  is a step  where the pointer that iterates through all of the requested data fields is incremented. Following the step , control transfers back to the step  for another iteration.","Referring to , a flow chart  illustrates in detail operation of the dynamic API platform  in connection with the applications - using the newly-created API. Processing begins at a first test step  where it is determined if the data field being accessed exists. If not, then control transfers from the test step  to a step  where error processing is performed. The error processing at the step  could be any appropriate error processing, including providing an error message to a user. Following the step , processing is complete.","If it is determined at the test step  that the data field does exist, then control transfers from the test step  to a test step  where it is determined if new data is being added (e.g., a user is writing a new record). If so, then control transfers from the step  to a step  where a PUT\/CREATE method is performed to add the new data. Following the step  is a step  where the result of the operation performed at the step  is returned to the application using the API. Following the step , processing is complete.","If it is determined at the test step  that new data is not being added, the control transfers from the test step  to a step  where one of the nodes - of the schema-free database  corresponding to the data is obtained. The node may be obtained at the step  using one of the previously-created optimizations (e.g., an index). Following the step  is a step  where the operation requested by the application is performed. The operation performed at the step  may be any appropriate data operation, such as a modify operation. Following the step  is a step  where the result of the operation performed at the step  is returned to the application using the API. Following the step , processing is complete.","In some instances, the order of steps in the flow charts may be modified, where appropriate. The system described herein may be implemented using a computer program product\/software provided in a fixed computer-readable storage medium.","While the invention has been disclosed in connection with various embodiments, modifications thereon will be readily apparent to those skilled in the art. Accordingly, the spirit and scope of the invention is set forth in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
