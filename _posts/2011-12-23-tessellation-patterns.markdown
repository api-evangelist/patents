---
title: Tessellation patterns
abstract: Methods, systems, and computer readable media embodiments are disclosed for generating primitives in a grid. Embodiments include generating a set of vertices in a section of the grid, selecting one or more vertices in the set of vertices in an order based on a proximity of the vertices to a boundary edge of the grid, and generating primitives based on the order of the selected vertices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08854374&OS=08854374&RS=08854374
owner: Advanced Micro Devices, Inc.
number: 08854374
owner_city: Sunnyvale
owner_country: US
publication_date: 20111223
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY OF EMBODIMENTS OF THE INVENTION","DETAILED DESCRIPTION OF THE EMBODIMENTS"],"p":["1. Field of the Invention","The present invention is generally directed to computing systems. More particularly, the present invention is directed to computing systems performing graphics processing operations.","2. Background Art","A graphics processing unit (GPU) is a special-purpose integrated circuit optimized for graphics processing operations. GPUs are often incorporated into computing devices (e.g., personal computers, rendering farms or servers, handheld devices, digital televisions, etc.) and are used for executing applications with demanding graphics processing needs, such as, for example, video game applications.","Several layers of software exist between an end-user application and a GPU. The end-user application communicates with an application programming interface (API). An API allows the end-user application to output graphics data and commands in a standardized format, rather than in a format that is dependent on the GPU. The API communicates with a driver which translates standard code, received from the API, into a native format of instructions understood by the GPU. The driver is typically written by the manufacturer of the GPU.","In most modern GPU implementations, the processing of graphics operations is broken into various functional units, each located within a different stage of a processing pipeline. A GPU may implement a unified shader model in which a sequence of shaders is implemented. One of these shaders can be, for example, a tessellation shader. The tessellation shader enables a user to input higher order surfaces and have the GPU hardware tessellate a geometric patch into a grid of primitives for further processing. Typically, input to the GPU is provided in the form of a set of vertices, along with connectivity information defining an interconnection of the vertices. As understood by one of skill in the art, the set of vertices, along with associated connectivity information, defines a geometric primitive.","Geometric primitives and vertices are produced, for example, within the tessellation shader. The sequence, or order, in which the tessellation engine generates the primitives and vertices is known by those of skill in the art as a walk pattern. A traditional tessellation shader generates vertices of the grid of primitives by following a traditional serpentine like walk pattern. This serpentine walk pattern typically produces a triangle strip and provides approximately one primitive per vertex. The rate of one primitive per vertex results in the need to re-process vertices. This approach is inefficient in that it duplicates work and results in slower overall frame rates.","Therefore, what is needed is a method and system for generating primitives in a more efficient manner.","Although GPUs, accelerated processing units (APUs), and general purpose use of the graphics processing unit (GPGPU) are commonly used terms in this field, the expression \u201caccelerated processing device (APD)\u201d is considered to be a broader expression. For example, an APD refers to any cooperating collection of hardware and\/or software that performs those functions and computations associated with accelerating graphics processing tasks, data parallel tasks, or nested data parallel tasks in an accelerated manner with respect to resources such as conventional central processing units (CPUs), conventional GPUs, and\/or combinations thereof.","An embodiment of the present invention, in certain circumstances, provides an APD with a tessellation engine to generate vertices in a manner that is more efficient from a hardware perspective than the serpentine walk pattern noted above.","In an embodiment, a computer-implemented method for generating primitives in a grid includes generating a set of vertices in a section of the grid. One or more vertices in the set of vertices is selected in an order based on the proximity of the vertices to a boundary edge of the grid, and primitives are generated based on the order of the selected vertices.","Further features and advantages of the invention, as well as the structure and operation of various embodiments of the invention, are described in detail below with reference to the accompanying drawings. It is noted that the invention is not limited to the specific embodiments described herein. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art(s) based on the teachings contained herein.","The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings, in which like reference characters identify corresponding elements throughout. In the drawings, like reference numbers generally indicate identical, functionally similar, and\/or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit(s) in the corresponding reference number.","In the detailed description that follows, references to \u201cone embodiment,\u201d \u201can embodiment,\u201d \u201can example embodiment,\u201d etc., indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic. Moreover, such phrases are not necessarily referring to the same embodiment. Further, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the art to affect such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.","The term \u201cembodiments of the invention\u201d does not require that all embodiments of the invention include the discussed feature, advantage or mode of operation. Alternate embodiments may be devised without departing from the scope of the invention, and well-known elements of the invention may not be described in detail or may be omitted so as not to obscure the relevant details of the invention. In addition, the terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. For example, as used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises,\u201d \u201ccomprising,\u201d \u201cincludes\u201d and\/or \u201cincluding,\u201d when used herein, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and\/or groups thereof.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["100","100","102","104","102","100","102","104","104","102","102","104"]},"Computing system  also includes a memory  that may be accessed by CPU  and APD . Access to memory  can be managed by a memory controller , which is coupled to memory . For example, requests from CPU , or from other devices, for reading from or for writing to memory  are managed by memory controller .","CPU  can include (not shown) one or more of a control processor, field programmable gate array (FPGA), application specific integrated circuit (ASIC), or digital signal processor (DSP). CPU , for example, executes control logic that controls the operation of computing system . In this illustrative embodiment, CPU  initiates and controls the execution of applications  by, for example, distributing the processing associated with that application across CPU  and other processing resources, such as APD .","APD , among other things, executes commands and programs for selected functions, such as graphics operations and other operations that may be, for example, particularly suited for parallel processing. In general, APD  can be frequently used for executing graphics pipeline operations, such as pixel operations, geometric computations, and rendering an image to a display. In various embodiments of the present invention, APD  can also execute compute processing operations based on commands or instructions received from CPU .","For example, commands can be considered as special instructions that are not typically defined in the instruction set architecture (ISA). A command may be executed by a special processor such a dispatch processor, command processor, or network controller. On the other hand, instructions can be considered, for example, a single operation of a processor within a computer architecture. In one example, when using two sets of ISAs, some instructions are used to execute x86 programs and some instructions are used to execute kernels on an APD unit.","In an illustrative embodiment, CPU  transmits selected commands to APD . These selected commands can include graphics commands and other commands amenable to parallel execution. These selected commands, that can also include compute processing commands, can be executed substantially independently from CPU .","APD  can include its own compute units (not shown), such as, but not limited to, one or more single instruction multiple data (SIMD) processing cores. As referred to herein, a SIMD is a math pipeline, or programming model, where a kernel is executed concurrently on multiple processing elements each with its own data and a shared program counter. All processing elements execute a strictly identical set of instructions. The use of predication enables work-items to participate or not for each issued command.","In one example, each APD  compute unit can include one or more scalar and\/or vector floating-point units and\/or arithmetic and logic units (ALUs). The APD compute unit can also include special purpose processing units (not shown), such as inverse-square root units and sine\/cosine units. In one example, the APD compute units are referred to herein collectively as shader core .","Having one or more SIMDs, in general, makes APD  suited for execution of data-parallel tasks such as are common in graphics processing. Some graphics pipeline operations, such as pixel processing, and other parallel computation operations, can require that the same command stream or compute kernel be performed on streams or collections of input data elements. Respective instantiations of the same compute kernel can be executed concurrently on multiple compute units in shader core  in order to process such data elements in parallel. As referred to herein, for example, a compute kernel is a function containing instructions declared in a program and executed on an APD compute unit. This function is also referred to as a kernel, a shader, a shader program, or a program.","In one illustrative embodiment, each compute unit (e.g., SIMD processing core) can execute a respective instantiation of a particular work-item to process incoming data. A work-item is one of a collection of parallel executions of a kernel invoked on a device by a command. A work-item can be executed by one or more processing elements as part of a work-group executing on a compute unit.","A work-item is distinguished from other executions within the collection by its global ID and local ID. In one example, a subset of work-items in a workgroup that execute simultaneously together on a single SIMD engine can be referred to as a wavefront . The width of a wavefront is a characteristic of the hardware SIMD engine. As referred to herein, a workgroup is a collection of related work-items that execute on a single compute unit. The work-items in the group execute the same kernel and share local memory and work-group barriers.","APD  includes input logic  and a cache . In one example, CPU  inputs commands based on applications  into appropriate command buffers . As referred to herein, an application is the combination of the program parts that will execute on the compute units within the CPU and APD. A plurality of command buffers can be maintained with each process scheduled for execution on APD . Input logic  controls the processing within APD . Input logic  may retrieve commands to be executed from command buffers  in memory  and coordinate the execution of those commands on APD .","Cache  stores data that is frequently used by shader core . In an embodiment, cache  comprises one or more level 1 (L1) caches and one or more level 2 (L2) caches, wherein the L1 caches have less storage capacity but provide faster data access than the L2 caches.","Memory  can include non-persistent memory such as dynamic random access memory (DRAM), not shown. Memory  can store, e.g., processing logic instructions, constant values, and variable values during execution of portions of applications or other processing logic. For example, in one embodiment, parts of control logic to perform one or more operations on CPU  can reside within memory  during execution of the respective portions of the operation by CPU . The term \u201cprocessing logic\u201d or \u201clogic,\u201d as used herein, refers to control flow commands, commands for performing computations, and commands for associated access to resources.","In the example shown, communication infrastructure  interconnects the components of system  as needed. Communication infrastructure  can include (not shown) one or more of a peripheral component interconnect (PCI) bus, extended PCI (PCI-E) bus, advanced microcontroller bus architecture (AMBA) bus, accelerated graphics port (AGP), or such communication infrastructure. Communications infrastructure  can also include an Ethernet, or similar network, or any suitable physical communications infrastructure that satisfies an application's data transfer rate requirements. Communication infrastructure  includes the functionality to interconnect components including components of computing system .","Components of system  can be implemented as hardware, firmware, software, or any combination thereof. A person of skill in the art will understand, upon reading this description, that system  can include more or fewer components than that shown in . For example, computing system  can include one or more input interfaces, non-volatile storage, output interfaces, network interfaces, and displays or display interfaces. For example, although not specifically illustrated in , computing system  may also include or be coupled to a display device (e.g., cathode-ray tube, liquid crystal display, plasma display, or the like). The display device is used to display content to a user (such as, when computing system  comprises a computer, video-game console, or handheld device).","In some embodiments, computing system  may comprise a supercomputer, a desktop computer, a laptop computer, a video-game console, an embedded device, a handheld device (e.g., a mobile telephone, smart phone, MP3 player, a camera, a GPS device, or the like), or some other device that includes or is configured to include an APD.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 2","FIG. 2"],"b":["200","206","1","2","3"]},"The major drawback to using the conventional approach (i.e., serpentine walk pattern) of  is very often the same vertex requires regeneration.","For example, triangles  and  are adjacent to one another and share vertices  and . Triangle , positioned along outside ring , is generated using vertices  and . Once outside ring  is complete, triangles are generated along the next inside ring, for example, inside ring . To generate triangle , vertices  and  must be regenerated. This need to regenerate some vertices renders the serpentine walk pattern  inefficient. These inefficiencies ultimately result in slower overall frame rates.","To address this problem, an APD constructed in accordance with an embodiment of the present invention generates points and primitives using a different, more efficient, walk pattern.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 3","FIG. 3"],"b":"104"},"APD  includes a shader core , vertex geometry tessellation (VGT) , and cache . Shader core  of APD  includes a plurality of compute units A and B. Each compute unit can be associated with a vertex shader, hull shader, domain shader, and local data stores (LDSs). A compute unit can include more or fewer components than the components shown in .","VGT  includes a tessellation engine  and a reuse buffer . VGT  includes control logic to perform distributed tessellation. For example, VGT  coordinates and schedules a number of wavefronts to execute and tessellates patches. In an embodiment, VGT  determines which shaders, and how many, are required for execution.","In a typical sequence, APD  executes a vertex shader A, a hull shader A, a tessellation engine , and then a domain shader A as illustrated for compute unit A. During execution of the vertex shader A and the hull shader A, one or more SIMDs within each shader receives a plurality of vertices to process and will write its results into its associated LDSs. In the embodiment, hull shader A computes tessellation factors related to a patch to be tessellated. Upon completion, hull shader A may write the tessellation factors to memory (e.g., TF memory ). During an ensuing processing stage, tessellation engine , for example, retrieves the tessellation factors from memory , which are then later used to perform tessellation.","More specifically, the hull shader A produces a geometry patch for each input patch (e.g., a quad, triangle, or line). Tessellation engine  uses the geometry patch to create smaller objects\/primitives (e.g., triangles, points, lines) that are interconnected within the geometry patch. The domain shader stage then calculates vertex positions (i.e., absolute positions) for each newly-generated vertex.","By way of example, tessellation engine  receives work in the form of threadgroups from hull shader A. The threadgroups include a finite number of patches. The hull shader A generates tessellation factors for each patch. Based on the required number of tessellation factors, tessellation engine  divides the patch into a plurality of points, lines, and\/or triangles based on tessellation topology. As understood by those of skill in the art, tessellation topology, as used herein, relates to the type of primitive that is generated based on the tessellation (e.g., triangle). Tessellation engine  generates tessellated vertices of the output patch and produces corresponding output primitives in an appropriate order based on the tessellation factors and the tessellation topology.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 4","b":["400","400","402","404","406","408","400","400","410","404","404","402","406","330","410","330"]},"One or more vertices, of the set of vertices, is selected in a specific order based on a proximity of the vertices to a boundary edge, such as boundary edges , , , and  of the grid. Primitives are generated based on the order of the selected vertices.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 5","FIG. 4","FIG. 5","FIG. 2"],"b":["500","400","500","200","500","200"]},"In the example of , tessellation engine  generates a set of vertices to define section  of grid . In the embodiment, tessellation engine  generates points and primitives based on the order of the selected vertices. Section  defines a first trapezoidal shaped portion of grid , including an outside level , a first inside level  adjacent to outside level , and a second inside level  adjacent to first inside level . A person of skill in the relevant art(s), however, will appreciate that grid sections and walk patterns resulting from fewer vertices per primitive than conventional walk pattern  can have shapes other than trapezoidal (e.g., triangular shape) and have greater or fewer than three levels. The other grid sections and walk patterns are also within the spirit and scope of the present invention.","In the embodiment, tessellation engine  selects one or more vertices in the set of vertices of section  in an order based on a proximity of the vertices to boundary edge  of grid . Boundary edge , bring perpendicular to edge , includes a first generated vertex . As noted above, tessellation engine  generates primitives based on the order of the selected vertices. The primitives are generated based on a topology (e.g., point, line, or triangle).","Tessellation engine  may be configured to generate primitives for a level of a grid, resulting in the generation of, for example, three levels of the trapezoid at a time, such as levels , , and . Generating primitives of the grid three levels at a time limits vertex reuse, and is therefore more efficient, in comparison to generating primitives one level at a time (e.g., in the serpentine walk ). Accordingly, primitives are processed closer in time and fewer vertices are regenerated. Hardware space to store vertices costs valuable area and a tradeoff exists between storage and performance.","As mentioned above, the numbers in the triangles show an order in which the triangles are generated. For example, triangle  is generated first, then triangle , then triangle , and so on. Tessellation engine  may generate the triangles in outside level  (e.g., triangles  and ) of the trapezoid, the triangles in first inside level  (e.g., triangles  and ) of the trapezoid, and the triangles in second inside level  (e.g., triangles  and ) of the trapezoid.","A proximity of a first vertex to boundary edge  may be the same as a proximity of a second vertex, different from the first vertex, to boundary edge . For example, vertices  and  are the same proximity from boundary edge . In an embodiment of the present invention, tessellation engine  selects one or more vertices in the set of vertices in an order based on the proximity of the vertices to an outside level of the grid. A primitive may be generated based on the selected vertex. For example, a triangle that is closer to outside level  of the trapezoid may be generated first.","For example, tessellation engine  may compare vertex positions in the trapezoid to determine which vertex to select. In , vertex  is closer to outside level  of the trapezoid compared to vertex . Similarly, vertex  is farther from outside level  of the trapezoid compared to vertex . Accordingly, tessellation engine  may select vertex  before selecting vertex , and generate triangle  based on selected vertex . Tessellation engine  may generate triangle  before triangle .","Generating triangles in levels closer to an outside edge may be advantageous because levels closer to the outside edge may have more primitives than levels farther from the outside edge. In this way, levels closer to the outside edge do not fall behind and tessellation engine  generates all primitives of the levels close in time to each other.","Triangles having vertices that are relatively closer to boundary edge  may be generated before other triangles. For example, vertex  is the closest in proximity to boundary edge . Accordingly, vertex  is selected and triangle  is generated based on vertices , , and . Vertices  and  are the next closest in proximity to boundary edge . Accordingly, vertices  and  are selected and triangle  is generated based on vertices  and .","The walk pattern shown in the embodiment in  provides for better vertex reuse such that the number of regenerated vertices is reduced. In an example, tessellation engine  generates triangle  in outside level  and generates triangle  in first inside level . Triangles  and  are adjacent to one another and are processed close in time. Triangles  and  share vertices  and  and when triangle  is generated after triangle , vertices  and  do not need to be regenerated. In contrast to regenerating vertices for triangle  in the serpentine walk pattern discussed above and shown in , vertices  and  are not regenerated. In an embodiment of the present invention, 1.5 primitives per vertex are generated.","In an embodiment of the present invention, tessellation engine  generates all vertices of the primitives in section  before moving to a different section such as section  within a second quadrant of the grid. Section  is adjacent to section . Similarly, tessellation engine  generates all vertices of the primitives in section  before moving to a different section such as section  within a third quadrant of the grid. Section  is adjacent to section . Similarly, tessellation engine  generates all vertices of the primitives in section  before moving to a different section such as section  within a fourth quadrant of the grid. Section  is adjacent to section  and.","If a quantity of levels in the section is greater than a quantity of levels generated by tessellation engine , tessellation engine  generates all vertices of the primitives in a subsection of section  before moving to section . For example, if a section has seven levels, tessellation engine  may generate all vertices of the primitives in the three outer most levels of the section first before moving on to the next section. Tessellation engine  may continue to generate all vertices of the primitives in the three outer most levels of the next section, and so on. Accordingly, tessellation engine  may come back around to the initial section and generate all vertices of the next three outer most levels of the primitives in the initial section. Tessellation engine may generate any quantity of levels (e.g., 1, 2, 4, 5, or more).","A special last pass occurs if any sections, including irregular areas, remain in the grid. This last pass occurs when vertices in the sections have been generated and no trapezoids remain. The vertices in the special last pass are generated in a different fashion. In this case, tessellation engine  processes the square in the middle. This creates a vertex  representing the connection of triangles in the middle of the grid, as illustrated in .","By way of background, tessellation engine  outputs vertex data and primitive data. The vertex data output from tessellation engine  includes edge connectivity coordinate (u, v) values. Tessellation engine  creates wavefronts\/data to send to domain shader A, which generates primitive information. In the embodiment, fewer vertices are processed (e.g., 50 percent fewer vertices). Accordingly, fewer domain shader threads are generated and a reduced number of domain shaders are used to process the primitives. This approach improve is more efficient and enhances performance.","Hits in reuse buffer  may be optimized to provide locality of reference, thus minimizing duplicated vertices that are shared across post-tessellation primitives. Vertices previously generated by tessellation engine  may be stored in reuse buffer  for later reuse. Tessellation engine  may handle reuse based on the barycentric coordinates of the patch (e.g., the actual (u, v) values).","Tessellation engine  resends coordinates of the grid that have been reused if a distance between a current vertex and a reused vertex is more than a depth of reuse buffer . For example, tessellation engine  may send a first vertex and determine whether any subsequent points have the same coordinates as the first vertex. This determination is made by comparing the coordinate of the first vertex to coordinates of vertices stored in reuse buffer . If a subsequent vertex has the same coordinates, tessellation engine  simply does not send the subsequent vertex. This saves shader processing resources.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 6","b":"600"},"In an embodiment, if the tessellation factor is 64, the total number of primitives generated is 8,194. If r=14, the serpentine walk pattern generates 8,222 vertices. If r=14 and h=3, the sectional walk pattern generates 5,498 vertices. The sectional walk pattern may reuse vertices without regenerating the vertices, providing an advantage over the serpentine walk pattern.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIG. 7","FIGS. 1-3"],"b":["700","700","104"]},"In operation , a set of vertices is generated in a section of the grid. For example, tessellation engine  may generate a set of vertices in a section of the grid that might be a quadrant of the grid or could have a trapezoidal shape. The section may have any number of rows (e.g., 1, 2, 3, or more).","In operation , one or more vertices in the set of vertices is selected in an order based on a proximity of the vertices to a boundary edge of the grid. For example, tessellation engine  may select one or more vertices in the set of vertices in an order based on a proximity of the vertices to a boundary edge of the grid. Other criteria may be used to select a vertex that would be within the spirit and scope of the present invention. For example, tessellation engine  can also select one or more vertices in an order based on the proximity of the vertices to an outside level of the grid.","In operation , primitives are generated based on the order of the selected vertices. For example, tessellation engine  may generate primitives based on the order of the selected vertices.","As noted above,  is an illustration of a walk pattern  for a quad integer grid. This is not intended to limit the invention and alternative tessellation walk patterns may be used and would be within the spirit and scope of the present invention.  depict a few such alternatives.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 8","b":"800"},{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 9","b":"900"},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 10","b":"1000"},"Section shapes within a grid may be different, and section shapes of a grid may be based on the grid type. Further, a determination of how to divide a grid into sections may also be based on the grid type. For example,  are illustrations of a quad type grid, and the grid has four sections. Similarly.  are illustrations of a tri type grid, and the grid has three sections.","Further, in addition to hardware implementations of APD , such APDs may also be embodied in software disposed, for example, in a computer-readable medium configured to store the software (e.g., a computer-readable program code). The program code causes the enablement of embodiments of the present invention, including the following embodiments: (i) the functions of the systems and techniques disclosed herein; (ii) the fabrication of the systems and techniques disclosed herein (such as, the fabrication of APD ); or (iii) a combination of the functions and fabrication of the systems and techniques disclosed herein.","This can be accomplished, for example, through the use of general-programming languages (such as C or C++), hardware-description languages (HDL) including Verilog HDL, VHDL, Altera HDL (AHDL) and so on, a programmable shader being run on the APD using any shading language, or other available programming and\/or schematic-capture tools (such as circuit-capture tools). The program code can be disposed in any known computer-readable medium including semiconductor, magnetic disk, or optical disk (such as CD-ROM, DVD-ROM). As such, the code can be transmitted over communication networks including the Internet and internets. It is understood that the functions accomplished and\/or structure provided by the systems and techniques described above can be represented in a core (such as an APD core) that is embodied in program code and may be transformed to hardware as part of the production of integrated circuits.","It is to be appreciated that the Detailed Description section, and not the Summary and Abstract sections, is intended to be used to interpret the claims. The Summary and Abstract sections may set forth one or more but not all exemplary embodiments of the present invention as contemplated by the inventor(s), and thus, are not intended to limit the present invention and the appended claims in any way.","The foregoing description of the specific embodiments will so fully reveal the general nature of the invention that others can, by applying knowledge within the skill of the art, readily modify and\/or adapt for various applications such specific embodiments, without undue experimentation, without departing from the general concept of the present invention. Therefore, such adaptations and modifications are intended to be within the meaning and range of equivalents of the disclosed embodiments, based on the teaching and guidance presented herein. It is to be understood that the phraseology or terminology herein is for the purpose of description and not of limitation, such that the terminology or phraseology of the present specification is to be interpreted by the skilled artisan in light of the teachings and guidance.","The breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents.","The claims in the instant application are different than those of the parent application or other related applications. The Applicant therefore rescinds any disclaimer of claim scope made in the parent application or any predecessor application in relation to the instant application. The Examiner is therefore advised that any such previous disclaimer and the cited references that it was made to avoid, may need to be revisited. Further, the Examiner is also reminded that any disclaimer made in the instant application should not be read into or against the parent application."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS\/FIGURES","p":["The accompanying drawings, which are incorporated herein and form part of the specification, illustrate the present invention and, together with the description, further serve to explain the principles of the invention and to enable a person skilled in the pertinent art to make and use the invention. Various embodiments of the present invention are described below with reference to the drawings, wherein like reference numerals are used to refer to like elements throughout.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 6","FIG. 4"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
