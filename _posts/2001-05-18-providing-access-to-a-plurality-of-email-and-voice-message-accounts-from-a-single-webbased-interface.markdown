---
title: Providing access to a plurality of e-mail and voice message accounts from a single web-based interface
abstract: Consider a user who has three different types of email account. Previously, in order to access those different email accounts the user has had a terminal with three desktop applications, one for accessing each type of email account. The user has been unable to access all of his or her email accounts simultaneously. Instead, the user has had to connect, for example, using a RAS connection, to one of the email accounts and then terminate that RAS connection before initiating a new RAS connection to the next type of email account. This is time consuming and problematic for users, particularly those who travel frequently. Another problem is that the user must maintain software applications on his or her terminal, one for each of the different types of message account. This takes up valuable memory and processing capacity on the user terminal. The present invention removes these problems by providing a single web based interface that gives the user access to a plurality of different message accounts on different message servers. In addition, logon times and network bandwidth requirements are reduced by storing retrieved message information in a cookie on the user's terminal.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07020687&OS=07020687&RS=07020687
owner: Nortel Networks Limited
number: 07020687
owner_city: St. Laurent
owner_country: CA
publication_date: 20010518
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND TO THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF INVENTION"],"p":["The present invention relates to a method and apparatus for providing access to a plurality of message accounts from a single web-based interface.","There is an increasing demand for access to message accounts such as email accounts from remote locations, for example, when a person needs to work from a location outside their usual office. Such, \u201croadwarriors\u201d who travel frequently and need to work at different sites, need access to their email, voice mail and other messaging facilities from those different sites. Until now, this has typically been achieved by connecting a laptop computer, personal digital assistant or the like, to a public switched telephone network (PSTN) and making a connection using a modem to a data network such as a company intranet or the internet.","These connections from a PSTN to a data network using a modem are typically made using remote access service (RAS). RAS enables users of time division multiplex (TDM) communications networks such as public switch telephone networks (PSTN) to connect via a modem to an internet protocol communications network such as a corporate intranet or internet service provider. A RAS gateway acts as a translator between communications from the TDM network and the associated internet protocol communications network. For example, an end user may use a remote access service in order to access the internet from his or her home computer using a modem. The modem is used to make a dial up connection over the public telephone network to a RAS gateway and from there to the internet. Data is then sent over this path which includes the \u201cvoice\u201d network or public telephone network.","A particular problem arises for users who have several different types of messaging accounts, especially \u201croadwarriors\u201d who travel frequently and need to access their messaging accounts from remote locations. For example, a particular user may have a Microsoft Exchange (trade mark) email account, a Lotus Notes (trade mark) email account and a Novell Groupwise (trade mark) email account. In order to access those different email accounts the user has a laptop computer, personal computer or other suitable terminal which has three desktop applications, one for accessing each type of email account. However, it is not possible for the user to access all of his or her email accounts simultaneously. Instead, the user must connect, for example, using a RAS connection, to one of the email accounts and then terminate that RAS connection before initiating a new RAS connection to the next type of email account. This is time consuming and problematic for users, particularly those who travel frequently. For users within an office who are able to connect directly to the office's intranet, it is still necessary to connect to each email account in turn and this is still time consuming and frustrating for the user, even though it is not necessary to make RAS connections. Another problem is that the user must maintain software applications on his or her terminal, one for each of the different types of message account. This takes up valuable memory and processing capacity on the user terminal.","Another problem is that when a user accesses a particular message account, access to the account is often slow and significant amounts of bandwidth are taken up in transferring data from the account to the user's PC or other terminal.","An object of the present invention is to provide a method and apparatus for providing access to a plurality of message accounts from a single web-based interface which overcomes or at least mitigates one or more of the problems noted above.","Further benefits and advantages of the invention will become apparent from a consideration of the following detailed description given with reference to the accompanying drawings, which specify and show preferred embodiments of the invention.","According to an aspect of the present invention there is provided a method of providing access to a plurality of message accounts from a single web-based interface. Each message account has an associated messaging server and is arranged to be accessed from that associated messaging server using application software, said application software being different for each message account and associated messaging server. The messaging servers are connected to a communications network, and the method comprises the steps of:\n\n","For example, the message accounts can comprise a Microsoft Exchange email account provided on a Microsoft Exchange messaging server, a Lotus Notes email account provided on a Domino server and a Groupwise email account provided on a Groupwise server. These email accounts are arranged to be accessed using client application software specific to each type of email account and previously users have needed to install that application software on a user terminal. However, the present invention avoids this requirement by using a web server that provides a single web interface via which all the email accounts are accessible.","The web server receives user inputs from a web browser on the user's terminal. These user inputs indicate for example that the user wishes to access email messages from one of the email accounts. The web server has access to pre-specified information about the messaging servers and about user names and passwords for the various email accounts. Also, the web server is able to communicate with all the different types of messaging server, for example, to retrieve email messages. Information from the messaging servers can then be displayed by the web server, using the single web interface. Thus by using a single web-interface the user is able to access all his or her message accounts and does not need to store application software for each account type on his or her terminal.","The user only needs to learn how to use the single web-interface and does not need to continually adjust to different interfaces provided by the different message accounts.","Preferably, the web server has access to user names and passwords for each of the message accounts. This provides the advantage that the user does not need to type in his or her user name and password each time one of the message accounts is accessed.","Preferably, the method further comprises providing at least part of said accessed information to the user terminal for storage in one or more cookies on the user terminal. For example, the sender name, subject and date for each retrieved message may be stored in a cookie on the user's terminal. On future logons, information from the cookie is used to populate a message list view. This helps to speed up presentation of the message list view and reduces network bandwidth requirements.","According to another aspect of the invention there is provided a method of accessing a plurality of email accounts from a single web-based interface, each email account having an associated messaging server and being arranged to be accessed from that associated messaging server using application software, said application software being different for each message account and associated messaging server, the messaging servers being connected to a communications network, said method comprising the steps of:\n\n","This method can advantageously be carried out by an end user who needs to access more than one message account quickly and easily. Because a single web based interface is provided the user is able to access this web based interface to view all his or her message accounts, and is not required to log into those accounts separately. This is particularly advantageous for end users who travel frequently as mentioned above.","According to another aspect of the present invention there is provided a web server arranged to provide access to a plurality of message accounts from a single web-based interface, each message account having an associated messaging server and being arranged to be accessed from that associated messaging server using application software, said application software being different for each message account and associated messaging server, the messaging servers and web-server being connected to a communications network, said web-server comprising:\n\n","According to another aspect of the present invention there is provided a web site arranged to provide a single web-based interface via which a plurality of message accounts are accessible. Each message account having an associated messaging server and being arranged to be accessed from that associated messaging server using application software, said application software being different for each message account and associated messaging server, the messaging servers and web-server being connected to a communications network, said web-site comprising:\n\n","According to another aspect of the present invention there is provided a computer program arranged to control a web server such that access is provided to a plurality of message accounts from a single web-based interface, each message account having an associated messaging server and being arranged to be accessed from that associated messaging server using application software, said application software being different for each message account and associated messaging server, the messaging servers and web-server being connected to a communications network, said computer program being arranged to control the web-server such that:\n\n","The preferred features may be combined as appropriate, as would be apparent to a skilled person, and may be combined with any of the aspects of the invention.","Embodiments of the present invention are described below by way of example only. These examples represent the best ways of putting the invention into practice that are currently known to the Applicants although they are not the only ways in which this could be achieved.","The term \u201cmessage account\u201d is used to refer to a store at which messages sent to a particular user are received and stored and from which messages created by the user may be sent. Examples of message accounts comprise email accounts, voice mail accounts, combined email and voice mail accounts and accounts for any other suitable type of message including video messages. Associated with a particular message account is an address such as an email address or telephone number.","An active server page (ASP)-based application is a collection of ASP pages and ActiveX (COM, component object model) components.","An ASP Session object is used to store information for a particular user.",{"@attributes":{"id":"p-0042","num":"0054"},"figref":"FIG. 1","b":["16","16"]},"Connected to the communications network is a plurality of message servers of different types. For example, a Groupwise message server , a Microsoft Exchange message server  and a Lotus notes message server . Each message server comprises a plurality of message accounts such as email accounts. A user has a personal computer  or other suitable terminal connected to the communications network . For example, this connection may be via a RAS gateway from a public switched telephone network. The user's personal computer  or other terminal comprises application software for accessing message accounts on the message servers , , . For example, in the situation illustrated in , suppose that the user has a Groupwise email account, a Microsoft Exchange email account and a Lotus Notes email account. In order to use those email accounts the user must have Groupwise application software, Microsoft Exchange application software and Lotus Notes application software on his or her PC. To access emails from the Groupwise email account, the user establishes a connection to the Groupwise message server , for example, using a RAS connection and then uses the Groupwise application software on his or her PC  to access emails from his or her Groupwise account. The user enters his or her user name and password that are specific to the Groupwise account in order to access the emails. If the user then requires access to his or her Lotus Notes email account, the user must first disconnect from the Groupwise message server  and establish a connection to the Lotus notes message server . As before, the user then operates the Lotus Notes application software on his or her PC  in order to access the Lotus Notes email account. This is time consuming and frustrating for the user and in addition, the user must store copies of all the required application software on his or her PC .",{"@attributes":{"id":"p-0044","num":"0056"},"figref":["FIG. 2","FIG. 1"],"b":["14","10","12","16","18","14","18","10","12","16","18","12"]},"In a preferred example, each of the message servers , ,  is able to communicate using IMAP. As described below IMAP is an open protocol and within the specifications of this protocol different variations are possible. Thus a Groupwise message server which uses IMAP typically uses that IMAP protocol in a slightly different manner from a Lotus Notes IMAP message server or a Microsoft Exchange IMAP server. In order to cope with this, the web server  needs to be able to communicate using all these different variations of IMAP.","Internet Message Access Protocol (IMAP) provides a method of accessing electronic mail or bulletin board messages that are kept on a (possibly shared) mail server. Using IMAP, a client email program is able to access remote message accounts as if they were local. For example, a user with a laptop computer who is travelling is able to access and work with emails stored on an IMAP server. IMAP enables this to be achieved whilst minimising the requirement of transferring messages back and forth between the laptop computer and the IMAP server. For example, IMAP provides support for \u201conline\u201d, \u201coffline\u201d and \u201cdisconnected\u201d modes of access. In addition, IMAP servers allow simultaneous interactive access to user mailboxes by multiple clients. However, IMAP is used for message access only; that is through IMAP the user can create, delete or rename mail boxes; get new messages; delete messages; and perform search functions on mail. A separate protocol is required for sending mail (for example, simple mail transfer protocol SMTP, IETF RFC 821). IMAP is an open protocol based on the standard described in Internet Engineering Task Force request for comments (IETF RFC) 2060.","Essentially, an IMAP client is a piece of software that implements IMAP to facilitate communication with an IMAP server. Usually the IMAP client acts directly on the behalf of a user who issues high-level commands, like \u201clogin\u201d, by keying in data, whereas the IMAP client issues low level commands to the server.","In contrast with the stateless Hypertext Transfer Protocol (HTTP), IMAP is a stateful protocol and thus only allows access to information once log-in has been successfully negotiated and the client is in the correct state. HTTP, conversely, always allows access to information since HTTP works to access an addressed server, retrieve a requisite page and then display the page locally. In other words, HTTP communication is seamless since the web-server is un-reactive to the HTTP message content, whereas IMAP is session-orientated.","In the field of software design and communication protocols, it will be understood that a \u201cstateful\u201d protocol requires an application to communicate a series of structured or ordered commands to a server and wherein there exists a precedence relationship between individual commands. In order for there to be successful communication, a client must know which commands have been issued as well as the set of valid commands that can be sent in reply. In other words, in a state of protocol, there is a history of the commands sent and an understanding of the responses (i.e. commands) that can be validly sent in reply; this is indicative of the \u201cstate\u201d of the session\/protocol. By way of example, a stateful protocol is inherently supported by an e-mail system because a login command must be actioned before a read command can be issued to retrieve an e-mail message. A typical machine-readable code, point-to-point stateful communication protocol pertaining to log-in and authentication between the IMAP client (denoted \u201cC\u201d) and IMAP server (denoted \u201cS\u201d) may take the form:\n\n","As can be appreciated from the exemplary machine-readable code provided above, there is clearly a distinct sequence of requests and responses between the IMAP client and the IMAP server.","To complete the picture of \u201cstateful\u201d as opposed to \u201cstateless\u201d communication protocols, the skilled addressee will appreciate that, in a stateless protocol, there is no record\/interest in previous commands issued by or within the system. Putting this differently, stateless communication protocol is inappropriate for a system that is sequence-orientated in the recovery of data. As an example, a web-browser operates in a stateless fashion when recovering web-pages since web-browser operation is entirely independent of the order in which web-pages are recovered.",{"@attributes":{"id":"p-0052","num":"0073"},"figref":["FIG. 3","FIG. 3"],"b":["30","32","40","34","42","44","30","38","38","30","32"]},"The Messaging system  holds all main code which processes and directs requests from the COM interface . The messaging system  is connected to the Cclient module  whose function is to process calls to message servers, such as IMAP message servers as indicated in . The user interface publisher  is able to create web pages, for example, hyper text mark-up language (HTML) pages and Java Script pages.","The Cclient module  is a set of APIs that can be used to access a plurality of different types of email server. For example, the Cclient module  is preferably arranged to comprise APIs for accessing any email server that runs an IMAP server. In this preferred embodiment the Cclient module  is used to connect, login, retrieve, save and send messages to any IMAP server that the user has access to. The Cclient module is written in the C programming language, although this is not essential, any suitable programming language can be used.","When a user first begins to access messages using the web server, he or she begins a session and an object is generated for that session which holds a subset of Cclient commands. The Cclient commands are wrapped in C++ code (or any other suitable object oriented programming language) because the Cclient module  is written in C. This makes it easier to implement the Cclient module  and to integrate the Cclient module  with the other components such as the messaging system  which are preferably formed using an object oriented programming language. Further details about the requests and responses that the Cclient module  processes are given in the IETF's RFC 2060.","As mentioned above the web server may also comprise a transport provider  and an address book . The transport provider  is a means of sending messages to one of the message servers. For example, the transport provider  preferably comprises a small mail transport protocol (SMTP) server. Most message servers comprise an SMTP server as is known in the art.","The Address Book  provides a means to browse for a name or address of an account on a message server. In a preferred example, the address book  comprises a Lightweight Directory Access Protocol (LDAP) server. Most message servers comprise an LDAP server as is known in the art and as described with reference to  below.","A method of accessing a message account using the system of  is now described. The user activates his or her web browser on his or her PC  and uses this to access the web server . The user knows a universal resource locator (URL) for the single web interface provided by the web server  and is able to use the URL to view web pages provided by the web server . These web pages may be active server pages and a communication session is thus begun between the user's PC  and the web server . This is indicated in  by box  labelled ASP session. The user may be required to enter a user name and password at this stage as described in more detail below in the section headed \u201csecurity\u201d.","The user is able to make inputs using the web interface in order to access and manipulate messages in his or her message accounts. These user inputs are communicated to the COM interface . User inputs which are requests such as Login, or Display Messages, require information from a particular message server. These requests are routed from the COM interface  to the messaging system  and so to the Cclient module . The Cclient module then processes calls to the appropriate message server. Data is then returned to the Cclient module  from the message server, for example, using IMAP, and this information is arranged and structured for passing back to the COM interface  via the messaging system . The COM interface processes the data such that it is suitable for publishing on the web interface and passes the processed data to the user interface publisher . The user interface publisher  then creates web pages containing the data, for example, a list of messages in the user's in-box, and writes the web page(s) to the user's browser using an ASP response object (see box  in ).",{"@attributes":{"id":"p-0060","num":"0081"},"figref":["FIG. 4","FIG. 4","FIG. 3"]},"In the example shown in  the web server comprises a translator  which operates to translate the web pages created by the user interface publisher  into different languages such as French or German, for presentation to the user.","The Cclient  communicates with one or more message servers, in this case, the message server is a CallPilot (trade mark) server  as commercially available from Nortel Networks. The CallPilot server comprises an IMAP server  which communicates with the Cclient in this example. However the CallPilot server  may also comprise a simple mail transfer protocol server (SMTP server ) as well as a lightweight directory access protocol (LDAP) server . In this example, the IMAP server  also communicates with a CallPilot player  or other suitable device for playing voice mail messages to a user over the public switched telephone network or other suitable communications network.","In the example shown in , the items in box  are software components which form an object model. The COM interface object  communicates with a web messaging session object  which in turn communicates with a mailbox object .",{"@attributes":{"id":"p-0064","num":"0085"},"figref":"FIG. 5","b":["70","71"]},"Requests made to the COM interface object  are processed depending upon the current state of the system. In a preferred embodiment there are four states (Cloaded, CInitialising, CInitialized, CLogged In) each of which is a Class which inherits from a base CState Class.","When the COM object  is first created the system is placed in the CLoaded state. When an initial FRAMESET is processed in order to display a Login page, Navigation page and Header page the system is placed into a Cinitializing state.","The FRAMESET creates three HTML pages. These pages are created and displayed separately. Only when the last page is displayed does the state change from CInitialising to CInitialised. Once the user logs in the state is changed from CInitialised to CLogged In.","As explained above, in a particular state only certain calls can be processed. For example, if the system is currently in the CInitialised state then Login will be processed but Delete Message will not. Similarly in the CLogged In state calls like Login, Delete, Play and Refresh are all processed while calls like Login are not processed. If a call is not supported in a particular state then the default action is to perform a Logout. This results in the Login page being redisplayed and the state changing from its current value to CInitialised once the Login screen is fully displayed.","After processing by the COM interface object, the call is processed by the Csession object . The Csession object in turn activates the mailbox object  and the MCEimapMailGateway  object to process calls to an IMAP server. For example, to get messages from the IMAP server or to delete messages from the IMAP server.","The Csession object  receives data from the IMAP server and creates DataViews  which store the data to be displayed as HTML pages. This data may come from calls to the IMAP server or from strings in a CresourceDLL (dynamic link library) . The data is then passed to a Cpublisher  which in turn passes the data to an appropriate translator. For example an HTML translator  or an XML (extensible mark-up language) translator. Once the HTML page is written it is sent to the user's PC or client through an ASP response object .",{"@attributes":{"id":"p-0071","num":"0092"},"figref":["FIG. 6","FIG. 6","FIG. 6","FIG. 6"],"b":["90","91","92","98","92","97","99","92"]},"The global.asa file is accessed when an internet information services (IIS) application starts and stops and also as individual users start and stop browser sessions that access the IIS application's Web pages. In the present case, the IIS application is that provided by the web server to allow the user to access multiple message servers. The Global.asa file contains a plurality of procedures examples of which are now described:\n\n","Referring again to , the web server stores the session identifier in the user's web browser as a cookie . The ASP session continues and the user makes inputs to the web pages to request messages from a message server or to manipulate messages in other ways. These user inputs are communicated to a COM object ( and  in ) which in turn writes out a frame set (see box  in ). A frameset is a group of frames which together form a screen or display for the user. The initial frameset provides a Login Page for example. Each frame can be independently updated in order to reduce the time taken to update individual pages.","Referring again to , after storing the session identifier cookie  in the user's browser, ASP reuses the same cookie to track the session, even if the user requests another ASP file, or requests an ASP file running in another application. Likewise, if the user deliberately abandons or lets the session timeout, and then proceeds to request another ASP file, ASP begins a new session using the same cookie. The only time a user receives a new session identifier is when the server administrator restarts the server, thus clearing the session identifier settings stored in random access memory, or the user restarts the web browser.","In a preferred embodiment the present invention is provided as part of a web-browser-based application for accessing voice, fax, and text messages on a CallPilot (trade mark) or other Messaging system. CallPilot is a commercially available messaging system from Nortel Networks. In the preferred embodiment, existing messages can be replied to or forwarded, and new messages can be composed and sent. Outbound messages (messages that the user originates) can be addressed to users in a CallPilot directory or any other user that can be addressed by CallPilot. Messages can be deleted, and users are notified of the arrival of new messages.","Voice messages, can be played by downloading from a CallPilot server using a CallPilot player or third party player. They can be played over a telephone (landline or mobile) of the user's choice or played over the user's PC\/Mac soundcard.","In the preferred embodiment the user is able to access and retrieve mail from any other IMAP4rev1 compliant email server. Users may also select an alternate CallPilot system to log in to.","In the preferred embodiment, users are able to access a Personal Mailbox Administration (PMA) web client, via a link in the user interface, if an administrator has granted them PMA web access. The link to the user's PMA web client does not require the user to login to the PMA client if the user has already logged in to the web-based user interface used for accessing the message accounts, thus providing the user \u201cdirect access\u201d to their PMA functionality. With the PMA client the user can administer mailbox settings such as mailbox password and IMAP account information.","In most cases the CallPilot Web Messaging requires no software installation on the client machine as the majority of client machines will come pre-installed with a web browser along with all the software required to view\/read messages and edit\/create new message content.","All messages can be accessed through a data network. This allows dialup users to access messages through the same single telephone line used for the modem connection using message download via the data network. Dial-up users wishing to play voice messages over a telephone using the CallPilot player require a second telephone line for this purpose.","User Interface",{"@attributes":{"id":"p-0081","num":"0106"},"figref":["FIG. 7","FIG. 7"],"b":"170"},"In order to achieve this, the user pre-specifies the message servers that he or she wishes to access and gives details of his or her user names and passwords. This information is stored by the web server, or is accessible to the web server and used to automatically log the user into the appropriate message server. The information is stored in a secure manner and is accessed in a secure manner. For example, the user may specify a default message server, to which the user is always logged in first by the web server. The user name and password information may then be stored at this default message server.","In the example shown in  the user is able to view and work with messages from only one particular message server at a time. However, this is not essential. It is also possible for messages from each of the message servers to be combined into a single \u201cin-box\u201d for access by the user.","Tags are used to indicate where each message came from, and using these tags the code in the Messaging system determines which message server to interrogate.","In a preferred embodiment, a single in-box is created first containing messages from each of the message servers. The messages from that inbox are then separated into appropriate groups for display separately according to which message server they originated from.","Security","In order to ensure that communications with the default message server and other message servers is secure, a suitable security mechanism is used, such as the CRAM-MD5 challenge\/response mechanism. As defined in IETF RFC 2195.","It is also possible to use the Kerberos Support security mechanism instead of GRAM-MD5. Kerberos is a network authentication protocol that is freely available from the Massachusetts Institute of Technology. Details of the Kerberos Support encryption alogorithm are provided on the Internet and are incorporated herein by reference.","Alternatively, an authentication by login method is used.","In order to ensure that access to the web server is secure encryption is used when the user logs in to the web server from his or her web browser. Any suitable encryption method may be used as is known in the art.",{"@attributes":{"id":"p-0090","num":"0115"},"figref":"FIG. 8","b":["181","184","184","181","186","184","181"]},"The enterprise's intranet  is connected to the public internet  via a firewall  as is known in the art. In addition, a proxy web server  is connected between the firewall  and the internet . An external web browser client  is shown connected to the internet . All traffic from the proxy web server  to the internal web server  is secured using secure sockets layer (SSL, IETF RFC 2487) as is known in the art.","Using the arrangement shown in , all traffic to and from the CallPilot server remains behind the firewall . Also, the firewall  is configured to allow hyper text transfer protocol (HTTP) connections between the internal web server  and the proxy web server .","In a preferred embodiment, details of messages retrieved from the user's message accounts are stored in a cookie on the user's PC or other terminal. Examples of specific details saved are sender-name, subject and date for each retrieved message. By doing this, on subsequent logons, the time it takes to logon is greatly reduced because specific details of the user's messages are retrieved from the cookie rather than from the message servers. This reduces the network bandwidth required and greatly increases the speed of building a message-list view for a mailbox or other message box. Identification of the appropriate data for a particular user is achieved using indexed cookies based on the user's logon identity.",{"@attributes":{"id":"p-0094","num":"0119"},"figref":"FIG. 9","b":["190","191","192","193"]},"Previously, in order to address this problem, others have provided a dedicated local server (i.e. separate from the message server and local to the users) used to store previously accessed messages. Then details of previously accessed messages are obtained from the dedicated local server which can be accessed more quickly. However, this method is problematic because significant amounts of administration are required. The local server often becomes full or may crash.",{"@attributes":{"id":"p-0096","num":"0121"},"figref":["FIG. 10","FIG. 10"],"b":["200","201"]},"On subsequent logons, the current list of uids for all the messages in the message account are retrieved from the message server (see box  of ). For example, this list may comprise uids for previously accessed messages and uids for new messages. The active server pages, or other web pages, access the cookie on the user's PC and obtain the sender name, subject and date for all previously accessed messages (see boxes  and ). Only information for the new messages needs to be retrieved from the message server, using the method described above (see box ). This reduces the network bandwidth required in order to display a message list view and greatly increases the speed of building a message list view for a particular message box. In addition, the message server's central processing unit (CPU) usage is reduced and greater stable scalability of the messaging system is achieved. If the user wishes to view the body of a particular message, the message body is retrieved from the message server.","When all message details have been retrieved from either the cookie or the message server, the cookie is flushed and the latest encrypted and compressed message-details for the message box are saved to the cookie. In this way, the cookie is always synchronised with the user's mailbox (see box  of ).","Co-pending U.S. patent application Ser. No. 09\/676,741 which is also assigned to Nortel Networks describes how HTTP can be used to access an IMAP messaging server. The detailed description from that application is repeated below with reference to . The present invention extends the system described in U.S. Ser. No. 09\/676,741 to enable multiple messaging servers to be accessed.","The system now described provides access to an e-mail server from a web browser and, more specifically, allows any HTTP \u201cclient\u201d (a web browser) to access any IMAP \u201cserver\u201d (the e-mail system). In overview, the system now described is arranged to support proxy software on an intermediate proxy server, such as a Microsoft Internet Information Server (IIS), which proxy software effectively translates requests from the client, specified using the HTTP protocol, to commands for the server (issued using the IMAP protocol and vice versa). Turning briefly to , a high-level overview of a client-server architecture  (that supports the concepts of the system) is shown.","Essentially, bi-directional communication between an HTTP client  and a web-server  (such as that supporting Microsoft IIS) is via HTTP 1.0\/1.1. (or a later protocol release) . The web server  interconnects to an IMAP server  (e.g. IMAPv4 or later releases) through an IMAP connection . The web server  includes software configured to support the various aspects of the system (labelled \u201cinvention software\u201d ) in .","The HTTP client  includes a control processor  having associated memory  that stores data and program code. The HTTP client  also includes some form of man-machine interface , including a display.","An understanding of the HTTP-to-IMAP protocol conversion (according to an embodiment) is best understood with reference to  that essentially shows an exploded view of the web server  of . The entities within  are a combination of logic and memory storage areas or program applications, code or sub-routines.","In developing the embodiment, it has been appreciated that IMAP (like other stateful protocols) requires specific protocol interactions to support access, and that it is therefore necessary to configure an intermediate server to act as a stateless-stateful translator in order to access an IMAP operating system from a remote web-server supporting a stateless protocol. The mechanism by which the embodiment provides seamless connectivity between a stateless and stateful protocol is described in detail below.","Before discussing the signalling scheme and IMAP call set-up procedure of the preferred embodiment, an overview of the entities of the web server  will be discussed. An HTTP protocol engine  interprets incoming commands from the web browser. In the preferred embodiment, these incoming commands are in the form of HTTP. The HTTP protocol engine  is essentially an interface command processor, as will be appreciated. Co-operating with the HTTP protocol engine  is an ActiveX Scripting Engine  arranged to acquire appropriate .asp files (and the like) associated with and responsive to the incoming commands. The .asp files can, for example, relate to \u201clog-in\u201d and \u201copen message\u201d commands sent upstream from the client . According to the embodiment, the conventional functionality of the active-server page (ASP) server  is enhanced to support new functionality that creates and distributes a session identity. The HTTP protocol engine , ActiveX Scripting Engine  and basic, unmodified functionality of the active-server page (ASP) server  are conventionally present within a web server.","Associated with the ASP server  is an ASP session list , which is stored locally within a memory storage device . The memory storage device  also stores visual basic (VB) script programs  (i.e. .asp files and the like) and global.asa files . As will be understood, the VB script programs  and global.asa files  are files containing lists of commands utilised to interpret up-link requests for service.","Additionally, the memory storage  device is used to store session management functionality and control objects (termed \u201cCPWMCtrl.com components \u201d) and IMAP application program interfaces (APIs) that provide the protocol translation and physical interfaces between at least one of the remote (e.g. an IMAP stateful entity) server  and the web-server .","By way of overview (and with reference to  and and ), the web-server  acts as an intermediate node between a client  (typically supporting a web browser application utilising a stateless communication protocol) and the server  accessible across an interface supporting a stateful communication protocol. The web-server  is configured to support translation  between the stateless communication protocol and the stateful communication protocol. The web-server  is arranged to provide  a session identity (ID) to the client  during the establishment - of a session, with the session ID arranged: i) to identify a relationship within stateless independent connections between the client  and the web-server ; and ii) to associate each stateless independent connection to a stateful session between the web-server  and the server . In this context, the term \u201cstateless independent connections\u201d relates to commands or data packets that are sent upstream from the client  using a stateless communication protocol.","With the session ID assigned  to the client for the duration of a session, the session ID is attached  to each uplink independent stateless connection in order that the web-server can determine  a state of the session, i.e. that the web-server  can interpret the received stateless independent connections\/commands to resolve out  an ordered sequence of commands from a particular client . Contemporaneously with the web-server  sending  the session ID to the client , the web-server  establishes an object representing\/defining a stateful session between the web-server  and the server . Hence, upon receipt of stateless independent connections from the client , the web-server  can map an accompanying session ID into a related session and can then construct a meaningful translation  of commands between the stateless protocol and the stateful protocol based on the state of the session. A resultant stateful protocol is communicated  upstream to the server  via a suitable application program interface (API) assigned\/configured  for the duration of the session. The stateful protocol includes an address field that ensures that the correct downlink information from the server is communicated back to the web-browser  that made the original uplink request.","Downlink information (from the server ) contained in the stateful protocol is routed  through the assigned API for translation to the stateless communication protocol. The ASP server  and associated ASP session list  then co-operate\/map  the requested data to the client using  downlink independent stateless connections\/commands. It is worth noting that the session ID does not need to be attached to the downlink independent stateless connections since the downlink connection is client-address specific.","Should a new command be issued - by the client , then the process returns to step , otherwise  a determination  is made as to whether the session is terminated , whereby  the session ID and API are released .","From the perspective of a preferred implementation, set-up and operating procedures will now be described with particular reference to the component collaboration (event timing) diagrams of .  is actually illustrative of session initialisation, whereas  is illustrative of session resumption.","In relation to access to the IMAP server , set-up is generally initiated by the web browser (HTTP client)  through the sending of a login request or \u201cGET\u201d command  within a HTTP message. The login request  from an HTTP client  specifies a .asp MIME file suffix, as required by internet-based protocols, to identify an appropriate application (conventionally stored within a VB scripts-type structure -) at the web-server  to open the accompanying file. The login request therefore provides\/requires access to an appropriate and specific .asp file and permits login of the client by returning an appropriate response  to the HTTP protocol engine . The HTTP protocol engine  invokes  the active server page (ASP) server  for the ASP server to determine whether there is an existing, i.e. previously assigned, session ID. In the expectation of receiving a previously assigned session ID, the ASP server is arranged to send the session ID request - back to the web browser (of the HTTP client ). The client  checks  its local memory for any previously assigned session ID for the present session. At initialisation, the control processor  of the HTTP client  attempts to locate  a session ID from the memory , but instead finds  that such a session ID does not exist (since no session has yet been started).","The session ID is preferably stored at the client  in the form of a \u201cCookie\u201d, although other mechanisms readily appreciated by the skilled addressee can be employed with equal effect.","The HTTP client  generates a corresponding HTTP \u201cno session ID\u201d response and communicates - this response to the ASP server  via the HTTP engine . The ASP server  therefore executes procedure to establish a new session, since the assignment of a session ID is session specific and hence transitory. Software code allowing the ASP server  to generate and assign session IDs is stored within \u201cglobal.asa\u201d files  and so the ASP server  sets out to access - and retrieve - the necessary global.asa files (preferably stored within VB script programs). The ASP server  is now able to execute code to instantiate  (i.e. create and invoke an instance of) the ctrl.com object  (CPWMCrtl COM Component) for control of stateless-stateful translation and interface operation. The ctrl.com object  in turn instantiates  an IMAP API  for assignment to the client for the duration of the session. With the assignment of a particular API to a session ID, an instance pointer  is established by the assigned API and communicated  to the memory storage  of the web-server . An access pointer is also generated  by the ctrl.com object for use by the ASP server  in the set-up and tear-down of the stateless-stateful protocol translation\/interworking session.","In this preferred embodiment, the ASP server  is now able to create  a specific session ID, which is stored in the ASP Session List . The ASP server  also stores an access pointer to the ctrl.com object in the session list , the access pointer being indexed by the session ID -. The ASP server  now requests the HTTP engine  to issue an HTTP command to the HTTP client  requesting the client  to store the session ID - for later use; storage of the session ID at the client could be in the form of a Cookie.","The ASP Server  reads\/processes (from VB Scripts Programs ) the corresponding .asp file originally sent upstream from the HTTP client  by way of an information access\/download request. The ASP server  determines that the .asp file actually contains a further VB Script program that must first be processed by the ActiveX Scripting Engine . The ASP server  now invokes the ActiveX Scripting Engine  for this \u201clogin\u201d purpose and provides to the ActiveX Scripting Engine  a reference to the .asp file . The ActiveX Scripting Engine  reads the .asp file and executes the corresponding VB Script program to support \u201clogin\u201d. In so doing, the ActiveX Scripting Engine  encounters a reference (within the VB Script program) to an initialise function  for the crtl.com object , whereby the ActiveX Scripting Engine  uses this reference to invoke  initialisation of the ctrl.com object . In turn, the ctrl.com object  causes instantiation of an IMAP API  for the specific HTTP client . The ActiveX Scripting Engine  further operates to pass to the ctrl.com object  a reference to the ASP Server  thereby to define a connection path. The crtl.com object is now able to send - HTML code describing a login page back to the HTTP client  by routing the HTML code (for the login page) via the ASP Server  and the HTTP Protocol Engine . System initialisation is therefore completed upon receipt of the code associated with the login page being received at the HTTP client .","In summary of the preferred method of implementation, should the login request not represent a request for commencement of a session, the ASP server  invokes operation of the global.asa files  in order to create the ctrl.com object . The global.asa files  therefore indicate to the ASP server  the tasks required to set-up a new session. Once instantiated, the ctrl.com object  supports HTTP-IMAP protocol conversion through the control of an associated IMAP API , with the ctrl.com object  and associated IMAP API  effectively providing an HTTP-IMAP interface. In practice, the IMAP API  connects to and communicates with the IMAP server , whereas the ctrl.com object  links into web-server software. At this point, an end-to-end connection can be established, with the session ID stored (by the ASP server ) within the ASP session list . The ASP session list typically also cross-references associated ctrl.com objects and IMAP API locations with specific, i.e. individual, session IDs.","With the assigned session ID communicated to and stored in the web-browser of the HTTP client , the ASP server  is now in a position to undertake house-keeping to simplify connection. Specifically, with the ASP session list  identifying the connection path, simplified routing of uplink requests (and downlink data) can be actioned within the web-server.","The session ID is used by the HTTP client  and web-server  over a series of connections, and is invalidated at the end of each session.","At this point (the last entry in ), the connection mechanism is complete and so a session can be continued (or effectively commenced) with the HTTP client  (i.e. the web-browser) sending the assigned session ID to the ASP server  via the HTTP protocol engine . Events  to  of  correspond to events  to  of , although a specific request for a file (labelled HTTP GET \u201cfile.asp\u201d in ) replaces the \u201clogin\u201d command; repetition of the corresponding interactions and procedural steps is therefore omitted for the sake of brevity. The assigned session ID is communicated - to the ASP server . The ASP server  is arranged to check the ASP session list  for the session ID and, in view of the recorded existence of the session ID, the ASP server  becomes aware that the session is, in fact, a continuation of an earlier session. Consequently, the ASP server  does not need to look to the global.asa files , but instead needs to identify the unique session-orientated interface (i.e. an assigned IMAP API ) for each web-browser.","In response to the receipt (via the HTTP protocol engine ) of the session ID from the HTTP client , the ASP server  looks - to the ASP session list  for an assigned memory address (i.e. the access pointer) to the API for the correspondingly received session ID. The ASP server  is now in a position to invoke operation of the ActiveX scripting engine , with the ASP server  now able to pass\/process  the original (or current) .asp file command request to the ActiveX scripting engine . The ActiveX scripting engine  is then tasked to obtain a VB script command to allow the ActiveX scripting engine  to obtain direct access to the HTTP-IMAP interface provided by the crtl.com object  and IMAP API . Therefore, the VB Script programs  provide instructions by which the ActiveX scripting engine  can ask - the ASP server  for the access pointer to the crtl.com object . In session, the VB Scripts program  provides access to the access pointer to allow the ActiveX scripting engine  to access  the crtl.com object  in order for the ActiveX scripting engine  to issue an appropriate session-orientated command, e.g. login, open message, delete. The appropriate message is then passed  to the corresponding API  (for the session) for reformatting into an IMAP (stateful) format before being communicated  to the IMAP server .","In slightly more detail, the ASP Server  reads\/processes - the .asp file and determines that it contains the VB Script program that must processed be by the ActiveX Scripting Engine . The ASP server  therefore invokes  the ActiveX Scripting Engine  for this purpose, providing ActiveX Scripting Engine  with a reference to the .asp file. The ActiveX Scripting Engine  reads the .asp file and executes the VB Script program. In so doing, the ActiveX Scripting Engine  encounters within the VB Script program a reference to a given function \u201cX\u201d in the ctrl.com object . The function \u201cX\u201d could be, for example, retrieval of an e-mail message.","The ActiveX Scripting Engine  now retrieves a reference to the crtl.com object from the ASP Session List  and uses this reference both to invoke the function \u201cX\u201d and have the function \u201cX\u201d executed. More especially, the crtl.com object  contains an indication that there is a need to invoke  a set of IMAP commands, \u201cY\u201d. The IMAP API (), instantiated for a particular client, is then used to issue - IMAP commands \u201cY\u201d. The ctrl.com object  now acts to modify the results from the command \u201cY\u201d by inserting HTML code into this data, thereby creating a modified command \u201cZ\u201d. The ctrl.com object associated with the particular client is now in a position to send  (or otherwise communicate) the modified command \u201cZ\u201d to the ASP Server  using the previously stored reference. The ASP Server  then sends  the modified command \u201cZ\u201d to the HTTP Protocol Engine  which in turns sends  \u201cZ\u201d to the HTTP client . Upon receipt of the HTML code, the HTTP client  is able to access the data in the modified command \u201cZ\u201d.","In the reverse direction, IMAP datagrams for a specified HTTP-client are converted by the IMAP API  into an HTTP format before being routed, via the crtl.com object to the HTTP protocol engine . The specific path (shown in  as reference steps \u2013) is: (i) IMAP server to (ii) IMAP API to (iii) ctrl.com (re-formatted for HTML) to (iv) ASP server  to (v) HTTP protocol engine  to (vi) HTTP Client (browser) .","By way of summary of the preferred session resumption mechanism, the web-browser (of the HTTP client ) displays a suitable log-in screen (emanating from the web-server  through an HTML (HyperText Markup Language) or Java Script message. The HTTP client  ultimately communicates the session ID upstream (since the ASP server  assesses that it is charged, as before, with determining whether the session is new). The HTTP client  then sends appropriate .asp files for interpretation by the ASP server  and relay, in a re-formatted state, to the IMAP server . The HTTP client  issues an HTTP \u201cGET\u201d command to the HTTP protocol engine , requesting a specific .asp file (stored in VB Script programs ). As above, the HTTP protocol engine  fetches the .asp file from the web-server's file storage area, namely memory storage device . The HTTP protocol engine  determines that this file is intended to be processed by the ASP server  and therefore both invokes the ASP server  for this purpose and provides the ASP server with a reference to the relevant asp file. Cross-referencing of the session ID to the ASP session list  identifies the crtl.com object  and hence the IMAP API .","At the end of a session, the session ID is purged from the ASP session list  and the memory  of the HTTP client . Release of the session ID is generally accomplished by a suitable HTTP sign-off message communicated upstream to the web-server .","Thus a method is provided by which a proxy of the preferred embodiment allows a client that does not use a session-orientated (i.e. stateful) protocol to access an IMAP server. The preferred embodiment ensures that an appropriate session ID is established for transparent HTTP-IMAP connectivity between a web-browser and an IMAP server , with the session ID preferably stored at the HTTP client .","Whilst the specific embodiment described above allows clients to access only a subset (namely messaging) of the IMAP server functionality, the method also applies in a more general sense and can therefore be employed to access and obtain any data supported on (and accessible through) the IMAP communication protocol.","Alternative embodiments of the invention may be implemented as computer program code encoded on a computer program product for use with a computer system. It is expected that such a computer program product may be distributed as a removable medium with accompanying printed or electronic documentation (e.g. shrink-wrapped software), preloaded with a computer system or distributed from a server or electronic bulletin board over a network (e.g. the Internet or World Wide Web). A series of computer instructions can therefore either be fixed on a tangible medium or fixed in a computer data signal embodied in a carrier wave that is transmittable to a computer system using wireline or wireless transmission techniques. The removable (i.e. tangible) medium may be a computer readable media, such as a diskette, CD-ROM, DVD-ROM or RAM, fixed disk, magneto-optical disks, ROMs, flash memory or magnetic or optical cards. The series of computer instructions embodies all or part of the functionality previously described herein with respect to the system.","Software embodiments of the invention may be implemented in any conventional computer programming language. For example, preferred embodiments may be implemented in a procedural programming language (e.g. \u201cC\u201d) or an object oriented programming language (e.g. \u201cC++\u201d).","Although the preferred operating method is realised by general or specific-purpose processor or logic circuits programmed with suitable machine-executable instructions, hardware components may possibly be used to implement certain features of the present invention. Of course, the present invention may be performed by a combination of hardware and software.","It will, of course, be appreciated that the above description has been given by way of example only and that modifications in detail may be made within the scope of the present invention. For example, the underlying inventive concepts can be employed more widely than the realm of HTTP and IMAP interaction, since the present invention is equally applicable to and can be adapted to support ACAP-HTTP, LDAP-HTTP (lightweight directory access protocol-HTTP) and SMTP-HTTP (simple mail transfer protocol-HTTP). Equally, the stateless protocol of the preferred embodiment (i.e. HTTP) can be substituted for other equivalent stateless schemes readily appreciated by the skilled addressee. Additionally, the ordering of stateless and stateful protocols is not important in the context of the present invention, with either the stateful or stateless protocol therefore configurable between the client and intermediate proxy server.","One advantage is that a web browser employing a stateless protocol, such as HTTP, may be used to access a stateful-based protocol (e.g. IMAP) server without the need to install any other software. This is especially advantageous since most web browsers currently come pre-bundled with operating systems. In other words, computers that are shipped with web-browser applications inherently have a capability to interact with stateful protocols, such as IMAP, whereby system functionality is enhanced with only minimal operational re-configuration of the code. Essentially, with a sessionless (or stateless) front-end protocol between a client and a proxy server, a stateful back-end protocol can be tied into stateless commands received at the proxy server in an upstream direction through the use of the session identity.","Other advantages, such as the ability to communicate through a firewall without reconfiguration, result. More specifically, in the sense of an IMAP-type protocol, a firewall is typically configured to prevent the passage of such a stateful-based protocol. With deployment of the present system, IMAP service can be employed through a firewall system configured to allow web-access and IMAP access.","By using a session ID (such as stored as a \u201cCookie\u201d) for each user, the proxy enables a non-IMAP client, e.g. one using HTTP, to access to an IMAP server. Thus, seamless access is provided between, for example, an HTTP client and an IMAP server. Once a Cookie has been created for a user, the Cookie may be used each time the user accesses the IMAP server until the session is changed or invalidated.","One application is to enable a web browser to provide an HTTP format URL for an email server since users are already accustomed to using URLs to reference objects. In prior art (RFC 2192) browser software without benefit of the invention, the browser needs to use the IMAP protocol to communicate with the IMAP server and thus the browser becomes a true IMAP client.","Any range or device value given herein may be extended or altered without losing the effect sought, as will be apparent to the skilled person for an understanding of the teachings herein.","A range of applications are within the scope of the invention. These include situations in which it is required to provide access to a plurality of message accounts from a single web-based interface. For example, a plurality of different types of email account, voice mail account, fax accounts or video message accounts."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In order to show how the invention may be carried into effect, embodiments of the invention are now described below by way of example only and with reference to the accompanying figures in which:",{"@attributes":{"id":"p-0022","num":"0034"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0023","num":"0035"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0024","num":"0036"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0025","num":"0037"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0026","num":"0038"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0027","num":"0039"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0028","num":"0040"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0029","num":"0041"},"figref":["FIG. 8","FIG. 2"]},{"@attributes":{"id":"p-0030","num":"0042"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0031","num":"0043"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0032","num":"0044"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0033","num":"0045"},"figref":["FIG. 12","FIG. 11"]},{"@attributes":{"id":"p-0034","num":"0046"},"figref":"FIG. 13","i":"a "},{"@attributes":{"id":"p-0035","num":"0047"},"figref":"FIG. 13","i":"b "},{"@attributes":{"id":"p-0036","num":"0048"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0037","num":"0049"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
