---
title: Query template definition and transformation
abstract: A database query template and metadata mapping provide an end-user to generate customized database reports via a user interface. The parameters and data available to the end-user can be modified by editing the database query template and metadata mapping without modifications of the underlying system. A database query template includes query language keywords, variables, and template-tokens and defines the metrics, dimensions, data comparisons, filters, and aggregations available to an end-user. Template tokens include restriction tokens for comparing and filtering data, options-section-tokens for defining and omitting sections of the query template, and descriptor tokens for identifying dimensions and metrics of the database. The database query template is transformed into a database query based on values input by a user. The metadata mapping associates the variables of the database query template to the database data model and can include data constraints for validation of user input.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08782081&OS=08782081&RS=08782081
owner: GOOGLE Inc.
number: 08782081
owner_city: Mountain View
owner_country: US
publication_date: 20110511
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention is generally directed to defining database queries and database reports, and more particularly to a database query template and transformation of the database query template to a customizable database query for report generation.","Data of all varieties is increasingly stored in databases, and the number of people needing access to the data stored in databases is also increasing. Access to this data through present systems requires knowledge of database query languages, database Application Programming Interfaces (APIs), and programming languages. However, the typical end-user of the data stored in databases does not have experience in these technical areas and must therefore rely on predefined database queries and interfaces that have been created by other people (e.g., database programmers and administrators). Any modification to the database report required by the end-user requires a programmer or database administrator to modify the database query or software program used to access the database. Furthermore, the addition of any new database (e.g., a new database connected to a computing cloud) requires existing queries and interfaces to be modified to access the new database. Thus, the typical end-user cannot customize the reports generated by database applications, and modifications to available reports require extensive reprogramming and development.","In accordance with an embodiment, a database query is generated from a query template. The database query template includes query language keywords, variables, and template-tokens. The database query is generated by receiving one or more values each associated with a respective one of the variables and transforming the query template into the database query based on the received values, the variables, and the template-tokens.","In accordance with one feature, the template-tokens include a restriction-token, which has a default value and is associated with a respective one of the variables of the database query template. Transformation of the query template into the database query includes replacing the restriction-token with the default value in response to determining the associated variable is not assigned a value.","In accordance with a further feature, the template-tokens include an optional-section-token, which defines a query-template-section and is associated with one or more of the variables. Transformation of the template query into the database query includes omitting the query-template-section from the database query if none of the variables associated with the query-template-section are associated with a respective value.","In accordance with yet a further feature, the database query template is associated with a metadata mapping associating the variables to a data model of the database. The mapping can include an association of one or more of the variables with data constraints of the data model, such that the received values can be validated based on the data constraints associated with the respective variable of the received value.","These and other advantages of the invention will be apparent to those of ordinary skill in the art by reference to the following detailed description and the accompanying drawings.","The features and embodiments described herein enable an end-user who is not familiar with database data models or database queries to generate customized database reports via a user interface. The user interface enables a user to select various database dimensions and database measures of a dimensional database and specify data restrictions of those dimensions and measures. In a relational database, the user interface enables a user to select various columns and attributes, and specify data restrictions of values associated with various attributes. A person of ordinary skill in the art, in view of the disclosure herein, would understand that various embodiments of a query template can be adapted to other database models. For ease of discussion, query templates are generally discussed herein with respect to the dimensional model.","A query template translator transforms or re-writes a database query template (i.e., query template) and a metadata mapping into a database query based on user input to the user interface. The database query generated by the query template translator can be processed by a database server to produce a customized database report desired by a user. Thus, an end-user does not need an understanding of database programming or database query language in order to generate highly configurable database reports in accordance with the embodiments described herein.","The query template resembles a database query that specifies all of the data elements (e.g., dimensions, metrics, tables, etc.) and data restrictions (e.g., data value restrictions, filters, data comparisons, aggregations, etc.) that can be included in a query generated based on user input. A database programmer can generate the query template and metadata mapping based on the programmer's knowledge of the database data model, thereby abstracting the database model from the end-user.","Furthermore, the parameters and data available to the end-user can be rapidly expanded by the database programmer without significant modification or development of the underlying system. The database programmer, who understands the data model of a database and how to construct database queries, can use the features described herein to generate or modify a database query template and a metadata mapping describing the data model of the database. The database query template and metadata mapping can be encapsulated in a single file (e.g., XML file) for ease of transmission between systems and ensuring consistency across data models. The database query template and metadata mapping are mechanisms used for mapping a query to statements used for manipulating data within a database. Data manipulation may include storing, retrieving, updating, or deleting data.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 1","FIG. 1"],"b":["100","110","120","180","100","140","140","130","150","160","170","155","165","175","130","180","130","180","150","160","170"]},"In the environment illustrated in , a user of computer  could access server  or , which can issue commands to, or access resources of, cloud . That is, an end-user could use an interface at computer  to input values that are used by server  or  to generate a database query that is issued to one or more database servers in the cloud .",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 2","FIG. 2"],"b":["200","210","110","210","210","220"]},"The front-end server  can include a web-server or network application server that receives information from the user via the user-interface  regarding an information report desired by the user. The information report is typically generated by a database query. Accordingly, the user interface  enables the user to configure and initiate execution of a database query. However, most users do not understand database query languages or the programming APIs required to initiate execution of a database query. Accordingly, the front-end server  provides a user-interface  that enables a user to customize the database report by specifying dimensions and measures in which the user is interested and any restrictions on those dimensions and measures.","The front-end server  receives inputs from the user via user-interface  and conveys that information to the report management server . The report management server  uses the input received from the front-end server  to transform a database query template into a database query via query template translator . The query template translator  can be integrated into the report management server or a separate computing device. The query template translator  generates database queries based on the user input at user-interface , for example as described below in further detail with respect to .","The report management server  manages the various reports and queries available to the user via the user-interface  and is in communication with a database  to issue queries to the database . While the database  is illustrated as a single database, a person of ordinary skill in the art would understand that the report management server can control access to and coordinate retrieval of information from a cloud computing environment (such as cloud  of ) including multiple databases and database servers.","The database query generated by the query template translator  is a text-based query, such as a Structured Query Language (SQL) statement. Thus, even though the end user may not understand SQL or any other database query language, based on the inputs from the user and the database query template, a text-based database query can be constructed. The text-based query can be executed at database , or any other database within the cloud . The results of the database query are received by report management server  and transmitted to the user via front-end server .","A database query template includes the general structure of a database query and includes certain database query language keywords. For example, a SQL-based database query template can include the keywords \u201cSELECT,\u201d \u201cFROM,\u201d \u201cWHERE,\u201d \u201cGROUP BY,\u201d \u201cHAVING,\u201d and others. The database query template further includes various template-tokens and variables. Values are assigned to variables based on the input received through user interface . The template tokens can include embedded commands that are parsed and executed by database report management server . The embedded commands of the template tokens define certain aspects of the transformation of the database query template to the database query and are not visible to end-users. Template tokens represent a link between the database query template and the database query. Each template token references information that is necessary for the database query to be generated from transforming database query template. A template token can be associated with one or more variables, and the transformation of a specific template token is based on the assignment of a value to the variables associated with a specific template token. An exemplary description of template tokens given in the paragraphs below will illustrate how the assignment of values to variables associated with a template token causes a specific template token to transform.","The database query template can include a description of database and the reports that can be generated by the database query template. The description can include a metadata mapping of the database data model to the database query template. In one example, the metadata mapping is an XML file describing the dimensions and measures of the database. An exemplary XML file is as follows:",{"@attributes":{"id":"p-0028","num":"0027"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<dimensions>"},{"entry":"\u2003<dimension name=\u201cSample Dimension\u201d id=\u201csample_dimension_1\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<level name=\u201cSample Dimension 1\u201d id=\u201csample_dimension_1\u201d"]},{"entry":[{},"type=\u201cstring\u201d>"]},{"entry":[{},"\u2003<schema_info>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<sql column=\u201ccolumn_name_1\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003<\/schema_info>"]},{"entry":[{},"<\/level>"]},{"entry":[{},"<level name=\u201cSample Dimension 2\u201d id=\u201csample_dimension_2\u201d"]},{"entry":[{},"type=\u201cstring\u201d>"]},{"entry":[{},"\u2003<schema_info>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<sql column=\u201ccolumn_name_2\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003<\/schema_info>"]},{"entry":[{},"<\/level>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003<\/dimension>"},{"entry":"<\/dimensions>"},{"entry":"<measures>"},{"entry":"\u2003<measure name=\u201cSample Measure 1\u201d id=\u201csample_measure_1\u201d type="},{"entry":"\u2003\u201cint64\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<schema_info>"]},{"entry":[{},"\u2003<sql column=\u201cSUM(column_name_3)\u201d\/>"]},{"entry":[{},"<\/schema_info>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003<\/measure>"},{"entry":"\u2003<measure name=\u201cSample Measure 2\u201d id=\u201csample_measure_2\u201d type="},{"entry":"\u2003\u201cint64\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<schema_info>"]},{"entry":[{},"\u2003<sql column=\u201cSUM(column_name_4)\u201d\/>"]},{"entry":[{},"<\/schema_info>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003<\/measure>"},{"entry":"<\/measures>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The above XML file metadata mapping defines two dimensions, \u201cSample Dimension 1\u201d and \u201cSample Dimension 2.\u201d Sample Dimension 1 is associated with the identification \u201csample_dimension1\u201d and the database column \u201ccolumn_name1.\u201d Sample Dimension 2 is associated with the identification \u201csample_dimension2\u201d and the database column \u201ccolumn_name2.\u201d","The above XML file metadata mapping also defines measures, \u201cSample Measure 1\u201d and \u201cSample Measure 2.\u201d Sample Measure 1 is associated with the identification \u201csample_measure1\u201d and the database column \u201cSUM(column_name2).\u201d Sample Measure 2 is associated with the identification \u201csample_measure2\u201d and the database column \u201cSUM(column_name4).\u201d","Additional information concerning the data model of the database can be specified within the metadata mapping. For example, data constraints can be specified with respect to the various dimensions and measures. For example, constraint data such as the acceptable range of data in a particular dimension can be specified. Additionally, the data type of each column can be specified, which can also be used as a data constraint. This constraint data can be used to validate user input received prior to generating the database report.","An exemplary database query template which can be used in conjunction with the above XML metadata mapping, is:",{"@attributes":{"id":"p-0033","num":"0032"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<bit_query>"},{"entry":"\u2003SELECT"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"$COLUMN_SPEC:$sample_dimension_1,"]},{"entry":[{},"$COLUMN_SPEC:$sample_dimension_2,"]},{"entry":[{},"$COLUMN_SPEC:$sample_measure_1,"]},{"entry":[{},"$COLUMN_SPEC:$sample_measure_2"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\u2003FROM"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Table"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\u2003WHERE"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"$RESTRICTION:DEFAULT=TRUE:$sample_dimension_1 AND"]},{"entry":[{},"$RESTRICTION:DEFAULT=TRUE:$sample_dimension_2"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003$OPTIONAL:BEGIN"},{"entry":"\u2003GROUP BY"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"$COLUMN_ALIAS:$sample_dimension_1,"]},{"entry":[{},"$COLUMN_ALIAS:$sample_dimension_2"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003$OPTIONAL:END"},{"entry":"\u2003$OPTIONAL:BEGIN"},{"entry":"\u2003HAVING"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"$RESTRICTION:DEFAULT=FALSE:$sample_measure_1 OR"]},{"entry":[{},"$RESTRICTION:DEFAULT=FALSE:$sample_measure_2"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003$OPTIONAL:END"},{"entry":"<\/bit_query>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{},"sub":["\u2014","\u2014","\u2014","\u2014"]},"The $COLUMN_SPEC token is a descriptor token and defines a measure or dimension within a report. For example, with respect to the text \u201c$COLUMN_SPEC:$sample_dimension1,\u201d presented above, if the user has selected the database reference associated with $sample_dimension1 (e.g., \u201cSample Dimension 1\u201d in ), transformation of the database query template will replace the text with the column name associated with the $sample_dimension1. Thus, as defined by the above metadata mapping, if a value is assigned to $sample_dimension1, the text \u201c$COLUMN_SPEC:$sample_dimension1\u201d is replaced with the column name \u201csample_dimension1.\u201d In a further feature, the metadata mapping can also assign an alias identifier to the column. If an alias identifier is assigned, the text \u201c$COLUMN_SPEC:$sample_dimension1,\u201d presented is transformed to \u201ccolumn_name AS column_name_alias.\u201d If the variable $sample_dimension1 is not selected, the text \u201c$COLUMN_SPEC:$sample_dimension1,\u201d is omitted from the database query when the database query template is transformed.","With respect to the token $COLUMN_SPEC, assignment of a value to an associated variable (e.g., $sample_dimension1) can include a simple binary value to indicate whether the user desires that dimension or measure included in the report. Thus, the values assigned can include, for example, \u201ctrue\u201d or \u201cfalse,\u201d \u201c1\u201d or \u201c0,\u201d or null or any non-null value.","The token $COLUMN_ALIAS refers to the alias of a column, and can be used, for example, in a SQL \u201cGROUP BY\u201d statement. Transformation of the database query template to the database query replaces the text \u201c$COLUMN_ALIAS:$variable\u201d with the alias of the column defined in the XML metadata mapping. For example \u201c$COLUMN_ALIAS:$sample_dimension1\u201d would be replaced by \u201csample_dimension1.\u201d","The $RESTRICTION token is used to define a measure condition or dimension condition. The $RESTRICTION token can be associated with a default value to ensure the correctness of a Boolean expression in the database query. Thus, the $RESTRICTION token expression is typically written as \u201c$RESTRICTION:DEFAULT=TRUE:$variable\u201d or \u201c$RESTRICTION:DEFAULT=FALSE:$variable.\u201d If a value is assigned to $variable, the $RESTRICTION token expression is re-written during transformation based on the value. If no value is assigned to $variable, the $RESTRICTION token express is re-written during transformation as the default value.","For example, with reference to the above XML metadata mapping, if a value of \u201cis not \u2018X\u2019\u201d is assigned to the variable $sample_dimension1, the text \u201c$RESTRICTION:DEFAULT=TRUE:$sample_dimension1,\u201d will be replaced with column name associated with $sample_dimension1 (i.e., sample_dimension1) and the value of the variable $sample_dimension1 (i.e., \u201cis not \u2018X\u2019), resulting in \u201csample_dimension1 is not \u2018X\u2019.\u201d","However, with respect to the text \u201c$RESTRICTION:DEFAULT=TRUE:$sample_dimension2,\u201d if no value is assigned to $sample_dimension2, the text is replaced with the default value (i.e., \u201cTRUE\u201d). Thus, if a user is only concerned with sample_dimension1 and is not concerned with sample_dimension2 (i.e., no value is assigned to $sample_dimension2), the \u201cWHERE\u201d expression of the above database query template will evaluate correctly because the restriction concerning sample_dimension2 will always evaluate as TRUE.","A $RESTRICTION token expression can also be assigned an alias. The token $RESTRICTION_ALIAS can be used to refer to that alias in a manner similar to that discussed above with respect to $COLUMN_ALIAS.","The $OPTIONAL token can be used to define a query-template-section. That is, a set of database query template statements can be offset by a beginning (e.g., $OPTIONAL:BEGIN) and an ending (e.g., $OPTIONAL:END) to define an optional query-template-section. If the template-tokens within the query-template-section are not selected (e.g., values are not assigned to the variables associated with the template tokens), the query-template-section can be omitted from the database query during transformation of the database query template. If any of the tokens within the query-template-section have non-null values assigned to an associated variable, the query-template-section will not be omitted.","In the above example, if the user selects \u201cSample Measure 1\u201d and \u201cSample Dimension 1,\u201d assigns the value \u201cis not X\u201d to $sample_dimension1, and assigns the value \u201c>100\u201d to the \u201c$sample_measure1,\u201d the database query template will be transformed to the following SQL query, which can then be issued to the local data store:",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SELECT"]},{"entry":[{},"\u2003column_name_1,"]},{"entry":[{},"\u2003SUM(column_name_3)"]},{"entry":[{},"FROM"]},{"entry":[{},"\u2003table"]},{"entry":[{},"WHERE"]},{"entry":[{},"\u2003column_name_1 is not \u2018X\u2019 AND"]},{"entry":[{},"\u2003TRUE"]},{"entry":[{},"GROUP BY"]},{"entry":[{},"\u2003column_name_1"]},{"entry":[{},"HAVING"]},{"entry":[{},"\u2003SUM(column_name_3) > 100 OR"]},{"entry":[{},"\u2003FALSE;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"figref":"FIGS. 3A and 3B"},"The XML file storing the metadata mapping can also store the database query template. For example, as illustrated above, the database query template identified as a bit_query element of an XML file (i.e., the database query template is set off by <bit_query> opening tag and <\/bit_query> closing tag).","The XML file can further include data regarding how to connect to the database. For example, the XML file can include the following information:",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<connection_info>"},{"entry":"\u2003<mysql subtype=\u201cJDBC\u201d database_name=\u201csample_db\u201d user_name="},{"entry":"\u201croot\u201d password=\u201cpassword\u201d>"},{"entry":"\u2003\u2003<jdbc>host:port<\/jdbc>"},{"entry":"\u2003<\/mysql>"},{"entry":"<\/connection_info>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"By incorporating the metadata mapping, database query template, and database connection information, the XML file can encapsulate all the information needed to generate a report. The report management server  would not require any intrinsic information about the database or the report, and would only need to understand and interpret the data contained in the XML file. Thus, the execution of the database query is completely abstracted from the generation of the database report. A database programmer can thereby expand the report options available and databases available to an end user simply by modifying the XML file and distributing the XML file to the front-end server. The database programmer would not be required to rewrite or modify any of the underlying infrastructure used to interpret the database query template and issued the database query.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 3A","FIG. 2"],"b":["300","300"]},"At step , a server (e.g., report management server , or servers  or ) receives values associated with the variables in the database query template that specify the parameters of the database report. The values can be input by a user through a user interface (e.g., user interface ), such as a graphical user interface. An exemplary graphical interface is discussed below with respect to , B, C, and D. Alternatively, values can be specified by a user and input via a web-based interface, such as a Java applet, HTML form, or web-based technology. In a further alternative, a text file can be edited by a user to input the values specifying the report parameters.","As noted above, the parameters of the database report may be constrained by certain data ranges or parameters. Accordingly, at step  the server validates the values based on data constraints. As discussed above, data constraints may be explicitly specified in the metadata mapping or may be inherent to the data-type.","At step , the server parses the query template, and at step , processes the template tokens. The process of step  is discussed in more detail with respect to . After the template tokens are processed, the server generates the database query at step  based on the template tokens.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 3B","b":"340"},"At decision , it is determined whether the database query template includes any unprocessed descriptor-tokens (e.g., $COLUMN_SPEC). If no unprocessed descriptor tokens exist, execution proceeds to decision . However, if unprocessed descriptor-tokens exist, at decision  it is determined whether the database reference associated with the descriptor token has been selected by the received values (e.g., whether a value has been assigned to the variable associated with the $COLUMN_SPEC token). If the database reference has been selected, for example by assigning a value to the associated variable, at step  the descriptor-token is replaced with the database reference. For example, the descriptor token is replaced by the column name associated with the variable of the descriptor token. If the database reference associated with the descriptor token is not selected, the descriptor-token is removed and execution proceeds to decision .","Restriction tokens (e.g., $RESTRICTION) can be processed next. Thus, at decision , it is determined whether any unprocessed restriction tokens remain in the database query template. If no unprocessed restriction tokens exist, execution proceeds to decision . However, if unprocessed restriction-tokens exist, at decision  it is determined whether a value is assigned to the variable associated with the restriction token. If no value is assigned to the variable, at step  the restriction token is replaced with the default value of the restriction token expression. However, if a value is assigned to the variable associated with the restriction token, the restriction-token expression is replaced with the value assigned to the associated variable.","At decision , it is determined whether the database query template includes any unprocessed optional-section tokens (e.g., $OPTIONAL:BEGIN or $OPTIONAL:END). If no unprocessed optional-section tokens exist, execution proceeds. However, if unprocessed optional-section tokens exist, at decision  it is determined whether the template tokens within the optional-query-section are selected. If any of the template tokens within the optional-query-section are selected, execution proceeds. However, if none of the template tokens within the optional-query-section are selected, at step  the optional-query-section is removed from the database query template so as to be omitted from the database query.","Similar actions to those discussed above with respect to descriptor-tokens, restriction-tokens, and optional-query-section tokens, can be used to process variable-tokens, column_alias tokens (e.g., $COLUMN_ALIAS), restriction alias tokens (e.g., $RESTRICTION_ALIAS), and others. In view of the foregoing, a person of ordinary skill in the art would understand the general pattern of processing and could adapt these procedures as desired to additional database query template token types.","While the user interface through which the user selects various dimensions and assigns values to variables can be implemented and presented in a variety of ways, for illustrative purposes an exemplary graphical user interface in accordance with an embodiment is discussed below with respect to , B, C, and D.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIGS. 4A","FIG. 4A"],"b":["4","4","4","210","110","400","402","404","406","408","400","402","400","402","400"]},"In view , presented in , the user has selected the Dimensions Tab . View  lists the various dimensions defined in the metadata mapping and includes a checkbox to allow a user to select particular dimensions. As illustrated in view , metric \u201cSample Dimensions 1\u201d is selected.","In view , presented in , the user has selected the Dimensions Restrictions Tab . View  lists the various dimensions defined in the metadata mapping and includes a checkbox to allow a user to select particular dimensions to which a restriction should be applied. As illustrated in view , dimension \u201cSample Dimensions 1\u201d is selected. For each selected dimension, a restriction operator drop down box  is presented and a restriction predicate text box  is presented. In this exemplary view , the user has selected the restriction operator \u201cis not any of\u201d in box  and the predicate \u201cX\u201d in box , thereby configuring the database query to only report items wherein Sample Dimension 1 is not any of X.","In view , presented in , the user has selected the Metric Restrictions Tab . View  lists the various metrics defined in the metadata mapping and includes a checkbox to allow a user to select particular metrics to which a restriction should be applied. As illustrated in view , metric \u201cSample Metric 1\u201d is selected. For each selected metric, a restriction operator drop down box  is presented and a restriction predicate text box  is presented. In this exemplary view , the user has selected the restriction operator \u201cis greater than\u201d in box  and the predicate \u201c100\u201d in box , thereby configuring the database query to only report items wherein Sample Metric 1 is greater than 100.","The selections and inputs to the graphical user interface described above with respect to , B, C, and D selects the same metrics, dimensions, and restrictions discussed above with respect to the exemplary database query template and metadata mapping. Therefore, the database query resulting from the transformation of the database query template will also be the same.","The above-described methods for generating a database query based on a database query template can be implemented on a computer or computing device using well-known computer processors, memory units, storage devices, computer software, and other components. A high-level diagram of a computer in accordance with the embodiments and features disclosed herein is illustrated in . For example, with reference to , computers  or , servers  and , and database servers , , , and  could be implemented with a computer similar to that described with respect to computer . Similarly, with respect to , front-end server  report management server , and query template translator  could be implemented with a computer similar to that described with respect to computer .","Computer  contains a processor , which controls the overall operation of the computer  by executing computer program instructions, which define such operations. The computer program instructions may be stored in a storage device , or other computer readable medium (e.g., magnetic disk, CD ROM, etc.), and loaded into memory  when execution of the computer program instructions is desired. Thus, the method steps of  can be defined by the computer program instructions stored in the memory  and\/or storage  and controlled by the processor  executing the computer program instructions. For example, the computer program instructions can be implemented as computer executable code programmed by one skilled in the art to perform an algorithm defined by the method steps of . Accordingly, by executing the computer program instructions, the processor  executes an algorithm defined by the method steps of . The computer  also includes one or more network interfaces  for communicating with other devices via a network. The computer  also includes input\/output devices  that enable user interaction with the computer  (e.g., display, keyboard, mouse, speakers, buttons, etc.) For example input\/output device  can include a display configured to present the graphical user interfaces discussed with respect to , B, C, and D and presented as the user interface  at computer . One skilled in the art will recognize that an implementation of an actual computer could contain other components as well, and that  is a high level representation of some of the components of such a computer for illustrative purposes.","The foregoing Detailed Description is to be understood as being in every respect illustrative and exemplary, but not restrictive, and the scope of the invention disclosed herein is not to be determined from the Detailed Description, but rather from the claims as interpreted according to the full breadth permitted by the patent laws. It is to be understood that the embodiments shown and described herein are only illustrative of the principles of the present invention and that various modifications may be implemented by those skilled in the art without departing from the scope and spirit of the invention. Those skilled in the art could implement various other feature combinations without departing from the scope and spirit of the invention. The various functional modules that are shown are for illustrative purposes only, and may be combined, rearranged and\/or otherwise modified."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 4A","b":["4","4","4"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
