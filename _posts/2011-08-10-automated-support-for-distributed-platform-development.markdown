---
title: Automated support for distributed platform development
abstract: The present disclosure describes methods, systems, and computer program products for semantically analyzing modeled objects. One method includes identifying an object model created in a distributed development system for semantic analysis, where the distributed development system is associated with a software platform. The identified object model is then semantically analyzed based on a predetermined algorithm. A set of at least one pre-existing object models associated with the software platform is compared to the semantically analyzed object model, and a level of semantic overlap between the semantically analyzed object model and each of the set of at least one pre-existing object models is determined. In some instances, the predetermined algorithm may be selected based on and correspond to the object model type of the identified object model. The set of at least one pre-existing object models may comprise a subset of pre-existing object models available in a development system or associated with a software platform.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08863075&OS=08863075&RS=08863075
owner: SAP AG
number: 08863075
owner_city: Walldorf
owner_country: DE
publication_date: 20110810
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present disclosure relates to software, computer systems, and computer-implemented methods for distributed platform development.","Software development in a distributed enterprise development environment involves tens, hundreds, or thousands of developers each working on different portions of the same, or related, applications. Many of these development processes follow a well-defined development process, particularly when developed on top of an existing platform or base application. Strictly defined development processes are used to provide maximum benefit from advantages based on platform-level software development. While the strictly defined development process can provide for similar development, it is difficult to ensure that different developers refrain from creating and using individually designed, but overlapping software objects, models, and other code. At the present, comparison of new objects and\/or coding may be made to check for similar technical names of previously-developed objects or other code within a centralized catalog.","The present disclosure describes methods, systems, and computer program products for semantically analyzing modeled objects. One method includes identifying an object model created in a distributed development system for semantic analysis, where the distributed development system is associated with a software platform. The identified object model is then semantically analyzed based on a predetermined algorithm. A set of at least one pre-existing object models associated with the software platform is compared to the semantically analyzed object model, and a level of semantic overlap between the semantically analyzed object model and each of the set of at least one pre-existing object models is determined. In some instances, the predetermined algorithm may be selected based on and correspond to the object model type of the identified object model. The set of at least one pre-existing object models may comprise a subset of pre-existing object models available in a development system or associated with a software platform.","While generally described as computer-implemented software embodied on tangible media that processes and transforms the respective data, some or all of the aspects may be computer-implemented methods or further included in respective systems or other devices for performing this described functionality. The details of these and other aspects and embodiments of the present disclosure are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of the disclosure will be apparent from the description and drawings, and from the claims.","This disclosure generally relates to software, computer systems, and computer-implemented methods for distributed platform development. Specifically, tools and methods are used to perform a semantic analysis of newly generated object models created in a distributed development environment, and allowing the results of the analysis to be compared to one or more previously generated models used or created in an associated consolidated platform development system. Additionally, object models generated in and for other applications and environments can be compared to the newly generated object models, as well using a pre-publishing method. The present disclosure can reduce the development costs by allowing developers to identify previously-generated objects and their associated models based on the design, structure, and inherent characteristics of a newly defined object. In addition to reducing the effort in programming and developing applications in a platform-based environment, the present disclosure also reduces the number of issues that may occur from different versions of the same, similar, or related object models.","Software products can be built upon a platform, where the platform is used as a basis upon which multiple applications are developed. As one example, SAP AG's On-Demand Business Process Platform can be used to create many on-demand products, as well as network applications (NWAs) that leverage the underlying platform using a well-defined development process. Well-defined development processes can provide numerous advantages to platform-based software development. First, applications built on top of the platform can be built quickly based on their leveraging of the underlying and available services provided by the platform. Additionally, the platform can benefit by the application development because services and features designed for and available to a new application can be retrofitted to the platform layer and become part of the platform services and features. The retrofitted services and features can then be exposed as platform functionality and subsequently leveraged by other new applications. Retrofitted functionality and features may not be restricted to technical and technology services, but can often be business application content used to build standard business processes, such as Sales Order Processing.","Content development within the platform and within the applications based upon the platform can follow specific modeling methodologies shared across all layers of the related applications within the development environment. In one example, the modeling methodology can be supported by a metadata-centric development infrastructure used to ensure consistency and integrity of business application content. In doing so, it is possible to develop homogenous, consistent, and consolidated business content across the platform and its derivative applications. A strong governance process can be established in order to coordinate the distributed development, and can further reveal and avoid semantic overlap between semantic-oriented development artifacts and objects (e.g., business objects, data types, etc.) created in the platform or its related applications. By reducing and\/or avoiding semantic overlap within the development ecosystem, simpler retrofits of previously-generated content can be performed. The governance process can be automated in order to maximize the speed of the development process, thereby reducing human interaction and review. The solution described here supports a distributed development in different layers and\/or systems by automatically analyzing the semantics of created entities within the different systems and comparing them with entities originally created in the platform layer, other application systems, and\/or a local system. Detected semantic overlap can be identified by the automated process, with the affected objects and\/or entities being brought to the attention of the developer. Further, one or more previously generated entities or objects can be suggested as possible replacements for the affected object and\/or entity, or as a starting point for further development.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 1A","FIG. 1A"],"b":["100","100","103","151","175","103","151","175","148","100","103","151","169","151","100","172","172","163","125","172","100","103","103","148"]},"In general, the platform consolidation system  is any server or system that stores, manages, and executes functionality associated with a PMRS  and an associated PMRS manager . Additionally, the platform consolidation system  may execute one or more business applications . For example, each platform consolidation system  may be a Java 2 Platform, Enterprise Edition (J2EE)-compliant application server that includes Java technologies such as Enterprise JavaBeans (EJB), J2EE Connector Architecture (JCA), Java Messaging Service (JMS), Java Naming and Directory Interface (JNDI), and Java Database Connectivity (JDBC). In some instances, each platform consolidation system  may store a plurality of various applications, while in other instances, platform consolidation systems  may be dedicated servers meant to store and execute the PMRS manager  for a particular platform or application and its related functionality. In some instances, the platform consolidation system  may comprise a web server or be communicably coupled with a web server, where one or more of the business applications  associated with the platform consolidation system  represent web-based (or web-accessible) applications accessed and executed through requests and interactions received on the client , executing a client application  operable to interact with the programmed tasks or operations of the corresponding PMRS manager  or one or more business applications .","At a high level, the platform consolidation system  comprises an electronic computing device operable to receive, transmit, process, store, or manage data and information associated with the environment . The platform consolidation system  illustrated in  can be responsible for receiving application requests from one or more clients  (as well as any other entity or system interacting with the platform consolidation system , including desktop or mobile client systems), responding to the received requests by processing said requests in the PMRS manager  and\/or the associated business application , and sending the appropriate responses from the appropriate component back to the requesting client  or other requesting system. Components of the platform consolidation system  can also process and respond to local requests from a user locally accessing the system . Accordingly, in addition to requests from the clients  illustrated in , requests associated with a particular component may also be sent from internal users, external or third-party customers, and other associated business applications, business processes, as well as any other appropriate entities, individuals, systems, or computers. In some instances, either or both of the PMRS manager  and the business application  may be web-based applications executing functionality associated with a networked or cloud-based business process.","As used in the present disclosure, the term \u201ccomputer\u201d is intended to encompass any suitable processing device. For example, although  illustrates a single platform consolidation system , environment  can be implemented using any number of servers, as well as computers other than servers, including a server pool. Indeed, the platform consolidation system  may be any computer or processing device such as, for example, a blade server, general-purpose personal computer (PC), Macintosh, workstation, UNIX-based workstation, or any other suitable device. In other words, the present disclosure contemplates computers other than general purpose computers, as well as computers without conventional operating systems. Further, the illustrated platform consolidation system  may be adapted to execute any operating system, including Linux, UNIX, Windows, Mac OS, or any other suitable operating system.","In the illustrated implementation of , the platform consolidation system  includes an interface , a processor , a memory , a business application , and the PMRS manager . In some instances, the platform consolidation system  and its illustrated components may be separated into multiple components executing at different servers and\/or systems. For example, while  illustrates the business application  and the PMRS manager  as separate components, other example implementations can include the PMRS manager  within a separate system, as well as within as part of the business application's inherent functionality. Thus, while illustrated as a single component in the example environment  of , alternative implementations may illustrate the business application server  as comprising multiple parts or portions accordingly.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1A","b":["100","103","130","125","127","103","148"]},"The interface  is used by the platform consolidation system  to communicate with other systems in a client-server or other distributed environment (including within environment ) connected to the network  (e.g., one of the clients , one or more platform-based application systems , as well as other systems communicably coupled to the network ). The interface  generally comprises logic encoded in software and\/or hardware in a suitable combination and operable to communicate with the network . More specifically, the interface  may comprise software supporting one or more communication protocols associated with communications such that the network  or the interface's hardware is operable to communicate physical signals within and outside of the illustrated environment .","Generally, the platform consolidation system  may be communicably coupled with a network  that facilitates wireless or wireline communications between the components of the environment  (i.e., between the platform consolidation system  and different platform-based application systems  and\/or one or more clients ), as well as with any other local or remote computer, such as additional clients, servers, or other devices communicably coupled to network , including those not illustrated in . In the illustrated environment, the network  is depicted as a single network, but may be comprised of more than one network without departing from the scope of this disclosure, so long as at least a portion of the network  may facilitate communications between senders and recipients. In some instances, one or more of the components associated with the platform consolidation system  may be included within the network  as one or more cloud-based services or operations.","The network  may be all or a portion of an enterprise or secured network, while in another instance, at least a portion of the network  may represent a connection to the Internet. In the illustrated example, at least a portion of the network  includes a portion of a cellular or mobile data network or other network capable of relaying SMS messages. In some instances, a portion of the network  may be a virtual private network (VPN). Further, all or a portion of the network  can comprise either a wireline or wireless link. Example wireless links may include 802.11a\/b\/g\/n, 802.20, WiMax, and\/or any other appropriate wireless link. In other words, the network  encompasses any internal or external network, networks, sub-network, or combination thereof operable to facilitate communications between various computing components inside and outside the illustrated environment . The network  may communicate, for example, Internet Protocol (IP) packets, Frame Relay frames, Asynchronous Transfer Mode (ATM) cells, voice, video, data, and other suitable information between network addresses. The network  may also include one or more local area networks (LANs), radio access networks (RANs), metropolitan area networks (MANs), wide area networks (WANs), all or a portion of the Internet, and\/or any other communication system or systems at one or more locations.","As illustrated in , the platform consolidation system  includes a processor . Although illustrated as a single processor  in the platform consolidation system , two or more processors may be used in the platform consolidation system  according to particular needs, desires, or particular embodiments of environment . The processor  may be a central processing unit (CPU), a blade, an application specific integrated circuit (ASIC), a field-programmable gate array (FPGA), or another suitable component. Generally, the processor  executes instructions and manipulates data to perform the operations of the platform consolidation system  and, specifically, the functionality associated with the corresponding business application  and the PMRS manager . In one implementation, the server's processor  executes the functionality required to receive and respond to requests and instructions from the client  and platform-based application systems , as well as the functionality required to perform the operations of the associated business application  and the PMRS manager , among others.","Regardless of the particular implementation, \u201csoftware\u201d may include computer-readable instructions, firmware, wired or programmed hardware, or any combination thereof on a tangible and non-transitory medium operable when executed to perform at least the processes and operations described herein. Indeed, each software component may be fully or partially written or described in any appropriate computer language including C, C++, Java, Visual Basic, assembler, Perl, any suitable version of 4GL, as well as others. It will be understood that while portions of the software illustrated in  are shown as individual modules that implement the various features and functionality through various objects, methods, or other processes, the software may instead include a number of sub-modules, third-party services, components, libraries, and such, as appropriate. Conversely, the features and functionality of various components can be combined into single components, as appropriate. In the illustrated environment , each processor  executes the corresponding PMRS manager  and the business application  stored on the associated platform consolidation system . In some instances, a particular platform consolidation system  may be associated with the execution of two or more business applications  (and other related components), as well as one or more distributed applications executing across two or more servers executing the functionality associated with the platform consolidation system .","At a high level, each business application  is any application, program, module, process, or other software that may execute, change, delete, generate, or otherwise manage information associated with a particular platform consolidation system , and in some cases, a business process performing and executing business process-related events. In particular, business processes communicate with other users, applications, systems, and components to send, receive, and process events. In some instances, a particular business application  may operate in response to and in connection with one or more requests received from an associated client  or other remote client. Additionally, a particular business application  may operate in response to and in connection with one or more requests received from other business applications  external to the platform consolidation system . In some instances, the business application  may request additional processing or information from an external system or application. In some instances, each business application  may represent a web-based application accessed and executed by remote clients  via the network  (e.g., through the Internet, or via one or more cloud-based services associated with the business application ). Further, while illustrated as internal to the platform consolidation system , one or more processes associated with a particular business application  may be stored, referenced, or executed remotely. For example, a portion of a particular business application  may be a web service that is remotely called, while another portion of the business application  may be an interface object or agent bundled for processing at a remote system (not illustrated), a particular platform-based application system , or a particular client  (e.g., the client application ). Moreover, any or all of a particular business application  may be a child or sub-module of another software module or enterprise application (not illustrated) without departing from the scope of this disclosure. Still further, portions of the particular business application  may be executed or accessed by a user working directly at the platform consolidation system , as well as remotely at a corresponding client .","The illustrated business application  may be created and developed based on an underlying software platform or platform layer, which can be used to provide underlying functionality defined by the platform, as well as additional functionality available by building software applications upon the platform layer using components and entities originally designed for use with the platform. By creating the additional functionality, the platform can be extended and added to by a plurality of developers, providing for a fluid means of enhancement. In some instances, additional applications can be built on top of the original system by many different developers and development teams to create new products and software. The PMRS manager  and its corresponding consolidated PMRS  can maintain a metadata repository storing information on the various models and their associated definitions and metadata across an entire development ecosystem.","The PMRS  enables the semantic consolidation of models created in the platform system, as well as those created in additional applications based upon the underlying platform that are developed in distributed platform-based application systems . The PMRS  and its associated PMRS manager  offer functionality to analyze and compare the semantics of models created in distributed development environments. The analysis and comparison can be triggered at the platform consolidation system , as well as at remote platform-based application systems . In some instances, some or all of the PMRS  can be made available to each remote platform-based application system , either by providing access to the consolidated PMRS  by one or more application development modules  located at the remote systems, or by pushing or providing copies of the PMRS  to the remote systems for local storage. In some instances, models created at one remote platform-based application system  can be provided to other platform-based application systems , either directly or after consolidation at the platform consolidation system . In other words, models created in any of the related systems based on the platform, and not just at the platform consolidation system , can be made available throughout the development ecosystem.","In some instances, the analysis and comparison of a newly created model or entity can be performed locally with the version of the consolidated PMRS  stored at the particular system, while in others, the analysis and comparison can be performed at the platform consolidation system . The semantic analysis can be triggered when a new model or entity is created in a system (either the platform consolidation system  or a particular platform-based application system ). The semantic representation of the newly created model can be compared with the semantic representations of all of (or a portion thereof) existing models having the same defined category as the newly created model. For instance, a newly created business object can be compared to all other available business objects, while a newly created user interface (UI) can be compared against all other UIs.","Models created at the platform consolidation system  and at each of the platform-based application systems  can be published to one or more locations, such that updated sets of the existing models can be provided to both the platform consolidation system  and each remote platform-based application system  on a consistent basis. In some instances, new models can be pre-published to the consolidation system and stored within the PMRS . The PMRS manager  can manage the distribution of metadata defining the pre-published models to the other application systems , allowing the various application systems  to maintain local PMRSs  that provide the metadata for local semantic analyses. In some instances, pre-published model metadata can be provided directly from one platform-based application system  to another, without first sending the model metadata to the consolidation system . In one implementation, only metadata used to define the model, and not runtime artifacts, are included in the pre-published information shared among the systems. Runtime artifacts are not pre-published in these instances, as the approach enables an easy and complete sharing of pre-published metadata suitable for performing the appropriate semantic analyses and comparisons. When a semantic analysis is performed, either at the consolidated system  or a particular platform-based application system , all available metadata models (both locally defined and pre-published) may be compared to the newly created model or entity.","The PMRS manager  may include multiple layers of functionality, including those illustrated in , and the more detailed illustrated in . For example, the PMRS manager  of  includes three layers, an API layer , a runtime execution engine layer , and a meta-model and models definition and administration layer . In general, the API layer  provides one or more application programming interfaces (APIs) to the platform-based application systems  and clients  for accessing the operations of the PMRS manager  remotely. In some instances, use of one or more APIs at the API layer  can allow for pre-publishing of one or more models to and\/or from the platform consolidation system  of , as well as using the semantic analyzer  of the platform consolidation system  to perform the analysis of a newly created model or entity. As illustrated in , the API layer  can include a set of API extensions  as well as remote connectivity module . The API extensions  and remote connectivity module  can combine to provide access to one or more pre-published models within the consolidated system , as well as allow for remote semantic analysis to be performed by one or more of the platform-based application systems . Using these components, an application development module  within a particular application system  can access the semantic analyzer  of the runtime execution engine layer .","The runtime execution engine layer  can provide runtime support for the PMRS manager  and the accessibility to the consolidated PMRS , including the operations of the semantic analyzer . The runtime execution engine layer  can perform initial determinations of the current meta-object or model being analyzed at runtime. The semantic analyses performed by the semantic analyzer  can be tailored to the particular category of meta-object being analyzed, such that a determination of the category is the appropriate first operation of the analysis. Examples of possible objects include user interfaces, business objects, analytical views, inbound and\/or outbound agents, and others. Once the particular category of object is determined or identified, the semantic analyzer  can apply the appropriate algorithm to the object to perform the semantic analysis. In some instances, the semantic analyzer  may be a part of the runtime execution engine layer's inherent functionality, while in others, the semantic analyzer  may be a distinct component associated with the runtime execution engine layer . The runtime execution engine layer  may further include transactional services to create and administer business object and other entity instances, and lifecycle service to manage object lifecycles. Some services of the runtime execution engine layer  may provide access to object instances exposed by the API layer . As illustrated in , the runtime execution engine layer  may include one or more meta-object runtime execution engines  associated with different categories of objects within the development ecosystem. Each particular meta-object runtime execution engine  may provide its own particular semantic analyzer  to be used for analyses corresponding to a particular category.","The meta-model and models definition and administration layer (\u201cmodel layer\u201d)  can perform operations associated with the identifying meta-object models, object models, and object instances associated with a particular PMRS . Generally, the model layer  includes meta object models providing descriptions of various object models used in the platform and one or more platform-based application systems. The object models may be provided with the underlying platform, while in other instances, the object models may be incorporated into the PMRS  after their creation in one of the platform-based application systems . The model layer  can illustrate or describe one or more logical dependencies between existing models, as well as provide access to each of the models themselves. Meta-object models include business objects and communication interfaces. To instantiate these object models, a design time engine is used to model and define instances of a particular meta-object model, and a runtime engine is used to process and execute those instances. Particular instances of meta-object models are object models, such as a business partner object model or a sales order business object model. For each meta-object model, a corresponding design time engine and runtime engine may exist (i.e., meta-object runtime execution engine  and meta-object design time engine ). As illustrated in , the model layer  can include a plurality of object-related components and sets of data. For example,  illustrates the model layer  as including a where-used meta-object  and its corresponding where-used index , one or more meta-object design time engine instances , one or more meta-object models , one or more object models , one or more pre-published object models , and a set of logged semantic overlap results per model .","The where-used meta-object  and the where-used index  provide descriptions and information on where particular meta-objects and objects are used within the platform and\/or within the platform-based applications. The where-used meta-object  may be an instantiated version of the where-used index . Using the where-used meta-object  (or the where-used index ), the locations of where a particular object is associated can be identified, the dependencies with one or more other meta-objects can be defined, and the current or previous instantiated versions of particular meta-objects can be determined. In some instances, the users or clients who have recently or are currently using a particular meta-object can be identified. If information associated with the particular meta-object is modified by one user, reference to the where-used meta-object  (or the where-used index ) can be used to determine where particular objects can be accessed.","The model layer  can also include one or more instantiations of particular meta-object design time engines , which may include or allow execution of instantiations of such objects as user interfaces, business objects, fast searches, analytical views, and inbound agents, among others. The meta-object design time engines  can instantiate one or more meta-object models  and object models  defining the various objects and\/or entities.","The model layer  can also include one or more pre-published object models . These pre-published object models  may be available in the consolidated system  even if those models  are not part of the platform. The pre-published object models  can be received and\/or retrieved from one or more platform-based application systems  where the models  were originally created. These models  can contain only metadata without requiring additional runtime artifacts to be received\/retrieved from the corresponding remote application systems . In addition to the models, in some instances the results of a semantic analysis of the pre-published model  may also be available within the consolidated system  and used in later analyses.","The illustrated model layer  in  includes the set of logged semantic overlap results per model . These components include logged results of semantic analyses performed on the corresponding models, both run locally at the platform consolidation system  or remotely at one or more of the platform-based application systems . The logged results  can provide information and documentation on known semantic overlap between different models, including information on what overlap can be temporarily tolerated in response to a semantic analysis or rules that may allow for certain levels of accepted overlap. This logged information can be considered during additional analyses or exposed to other systems via the API layer . In some instances, a dedicated semantic overlap logging component (not illustrated) may be available in either the consolidation system  or the platform-based application systems , such that the analysis results can be logged. In some instances, the logging component may be included within the centralized semantic analyzer  or one or more of the remote semantic analyzers .",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 1A","FIG. 1B"],"b":["112","112","103","125","112","112","103","103","112","103","103","112","151","112","125","112","112","125","115","118","121","124","130"]},"The platform-based application systems  of  represent one or more systems for executing business applications  that are, at least in part, based on the platform associated with the platform consolidation system . While illustrated as a separate system to the platform consolidation system , in some instances one or more of the platform-based application systems  may exist within the platform consolidation system . The platform-based application systems  as illustrated include an interface , a processor , a business application , a memory , and an application development module . The interface , processor , and memory  may be similar to interface , processor , and memory , respectively, of the platform consolidation system . The business application  can represent an application built using one or more objects, elements, and other development objects provided by or associated with the platform. The business application  may also include one or more objects created at one or more of the platform-based application systems , separate from the platform. Those objects, and other development-related operations, can be created using the application development module .","The application development module  can include one or more development frameworks and\/or tools, and can be used to extend, manipulate, and modify the platform to create new and\/or distinct applications. When new objects are created, the semantic analyzer  associated with the application development module  can be used to perform a remote semantic analysis of the newly created object. In some instances, the application development module  can access a local PMRS  included in memory . The PMRS  can be a local version of the consolidated PMRS  that is updated by receiving and\/or retrieving the pre-published models from the platform consolidation system  and\/or one or more other platform-based application systems . The local PMRS  may include different sets of information as compared to the consolidated PMRS  in some instances, including subsets of the PMRS , as well as information that has not yet been included within the PMRS  that is created locally at the application development module . When a new object is created, the semantic analyzer  can perform its analysis either on the local PMRS  or remotely on the consolidated PMRS  (via the API layer ). Still further, in some instances the semantic analysis of the new object can be performed at the PMRS manager  of the platform consolidation system  instead of locally within the application system .","The illustrated environment  of  also includes one or more clients . The clients  may be associated with a particular business application or development context, as well as a particular platform-based application system . Each client  may be any computing device operable to connect to or communicate with at least one of the platform consolidation system  or a particular platform-based application system  using a wireline or wireless connection via the network , or another suitable communication means or channel. In some instances, the client  may be a part of or associated with a business process involving one or more of the business applications , , or alternatively, a remote developer of associated with the platform or a related platform-based application. In general, each client  includes a processor , an interface , a client application , a graphical user interface (GUI) , and a memory . In general, the client  comprises an electronic computer device operable to receive, transmit, process, and store any appropriate data associated with the environment  of . It will be understood that there may be any number of clients  associated with, or external to, environment . For example, while illustrated environment  includes a single client , alternative implementations of environment  may include multiple clients communicably coupled to the one or more of the systems illustrated. In some instances, one or more clients  may be associated with administrators of the environment, and may be capable of accessing and interacting with the settings and operations of the PMRS manager , one or more business applications , , a particular application development module , and\/or other components of the illustrated environment . Additionally, there may also be one or more additional clients  external to the illustrated portion of environment  capable of interacting with the environment  via the network . Further, the terms \u201cclient\u201d and \u201cuser\u201d may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover, while each client  is described in terms of being used by a single user, this disclosure contemplates that many users may use one computer, or that one user may use multiple computers.","The GUI  associated with each client  may comprise a graphical user interface operable to, for example, allow the user of a client  to interface with at least a portion of the business application , , PMRS manager , and\/or a particular application development module  and their associated operations and functionality. Generally, the GUI  provides the particular user with an efficient and user-friendly presentation of business data provided by or communicated within the system. The GUI  may comprise a plurality of customizable frames or views having interactive fields, pull-down lists, and buttons operated by the user. For example, the GUI  may provide interactive elements that allow a user to interact with a particular component within and\/or external to environment . Different portions of the corresponding component's functionality may be presented and accessible to the user through the GUI , such as through a client application  (e.g., a web browser). Generally, the GUI  may also provide general interactive elements that allow a user to access and utilize various services and functions of a particular component. In some instances, the client application  may be used to access various portions of different platform-based application systems  or the platform consolidation system . In some instances, the client application  may be an agent or client-side version of the business application , , or other suitable component. The GUI  may present the information of the client application  for viewing and interaction. In general, the GUI  is often configurable, supports a combination of tables and graphs (bar, line, pie, status dials, etc.), and is able to build real-time portals, where tabs are delineated by key characteristics (e.g., site or micro-site). Therefore, the GUI  contemplates any suitable graphical user interface, such as a combination of a generic web browser, intelligent engine, and command line interface (CLI) that processes information in the platform and efficiently presents the results to the user visually.","As used in this disclosure, each client  is intended to encompass a personal computer, touch screen terminal, workstation, network computer, kiosk, wireless data port, smart phone, personal data assistant (PDA), one or more processors within these or other devices, or any other suitable processing device. For example, each client  may comprise a computer that includes an input device, such as a keypad, touch screen, mouse, or other device that can accept user information, and an output device that conveys information associated with the operation of one or more business applications , , PMRS manager , or application development module , and\/or the client  itself, including digital data, visual information, or the GUI . Both the input and output device may include fixed or removable storage media such as a magnetic storage media, CD-ROM, or other suitable media, to both receive input from and provide output to users of client  through the display, namely, the GUI . The client's processor , interface , and memory  may be similar to or different from those described in connection with the other components illustrated in , although alternative implementations of one or more of these components may be used, as well as implementations where additional components may also be included.","The business object meta-model provides an example of the meta-models used in an example platform development infrastructure.  provides an example illustration of a business object meta-model. In general, business objects encapsulate the business logic of standard enterprise resource planning business processes, among others. A business object is modeled following a strict modeling methodology using specific modeling elements, including Nodes, Node structures, Core Services, Cross and Intra BO associates, Actions, and further metadata, including UI Texts or properties attributes. Other categories of meta-models can include different modeling elements. These modeling elements are used to express and expose the business semantic of the business logic or business process parts handled by the modeled business object in a standardized manner. Instances of the above modeling elements can be named following well-defined naming rules in accordance to the semantic of the modeled business object.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 2","b":["200","225","235","225","235","235","210","205","200","235","255"]},"During a semantic model analysis and comparison run, the semantic analyzer decomposes a business object model in its individual modeling elements in order to perform a structured analysis and comparison. Semantic overlaps identified during the analysis can be weighted differently according to the modeling elements to which they belong. For example, an overlap on a root node name level may be weighted higher than an overlap on a child node level. In one example semantic overlap analysis for a business object, the following elements can be compared and considered:\n\n","As described above, the various considerations and elements can be associated with different weighting factors. For example, overlap of dependent objects may be weighted lower than overlap in business object nodes based on similar node element structures. Additionally, an aggregated higher weighting factor can be introduced when additional overlap has occurred, such as in a business object node where overlap occurs in both the semantical name and in action and associations defined to the node. It will be understood that the analysis algorithms and the weighting factors can be adjusted and extended manually, based on heuristics, and after simulations, particularly after using the large amount of business object content available in the platform layer of the system. In some instances, due to strictly defined modeling methodologies and rules the modeling elements used, such as nodes or associations, may be expected to be named similarly in the different systems where they are expressing similar semantic meanings. In those instances, an initial text-based comparison algorithm on individual elements may be sufficient to identify one or more overlapping and\/or suggested pre-existing entities or models.","A local semantic overlap analysis can be executed in each system based on the platform development infrastructure. The consolidated and related business content of the platform and its platform-based application systems may be completely or at least partially available in both the platform consolidation system as well as in each remote application system. As such, models and entities created in the application systems can be analyzed and compared against the local PMRS stored at the application system. The local semantic analysis provides a locally executed detection of overlap with already released local content, as well as consolidated platform content. In some instances, models created in other application systems may not be considered until those models are integrated into the platform's functionality and\/or until those models are pre-published to the local application system. Even if the content created by other application systems is not included in the local semantic analysis, the local execution of the analysis can provide great value to local developers by ensuring consistency and integrity of newly developed entities and models with the released platform content and other content stored locally at the local application system.","Pre-publishing of locally created models to the platform consolidation system and\/or to one or more application systems can allow for a complete view of and semantic analysis of all related material and content available in the development ecosystem. In some instances, only the platform consolidation system may receive the pre-published models from each of the remote application systems. Therefore, a semantic analysis of a newly created object can be performed remotely at the platform consolidation system. This remote semantic overlap analysis can be performed asynchronously via a batch job or via explicit triggering upon request. The application system at which the newly created object is developed can send, via network connections, a set of metadata defining the newly created object. In some instances, the set of metadata may define the meta-model of the particular object, while in others, the set of metadata may include the results of an initial semantic analysis of the created object. The semantic analysis of the newly created object can then be performed at the platform consolidation system, with the newly created object being compared to each object in the platform of the same category. Results of the semantic analysis can be stored in memory by a logging component associated with the PMRS. Analysis results for a specific model can be retrieved via APIs available in the platform consolidation system's API layer, or remotely via one or more web services. In some instances, both for local and remote semantic analyses, exceptions can be declared, allowing specific overlap results to be ignored, modified, treated at a higher weighting, or other suitable operations.",{"@attributes":{"id":"p-0051","num":"0061"},"figref":"FIG. 3","b":["300","351","351","303","303"]},"As illustrated, the platform consolidation system  includes the PMRS manager  and the consolidated PMRS , analogous to the PRMS manager  and the consolidated PMRS  illustrated in . Each of the distributed development systems  can include a local PMRS  and a local PMRS manager . In some instances, the local PMRS manager  may be the same as the application development module  described in . In other instances, the local PMRS manager  may be similar to the PMRS manager  of , with the local PMRS manager  including some or all of the functionality associated therewith. The platform consolidation system  further includes one or more model pre-publishing interfaces  which allow the distributed development systems  to submit pre-published models to, and access, retrieve, and\/or receive pre-published models from the platform consolidation system  (as illustrated by arrows ). As shown by the network boundary lines, each of the illustrated systems may be remote from the others, with the systems using network communications to interact. In some instances, APIs exposed by the platform consolidation system  can be accessed by the distributed development systems  to both submit pre-published models to and to receive pre-published models from the consolidation system . Web services associated with the pre-publishing operations may also be associated with the consolidation system  and used instead of APIs. Other means of interaction may also be used as appropriate. Each distributed development system  may be able to perform either a local or remote semantic analysis as described above. For local semantic analyses, the analysis and comparison operations may be performed on the local PMRSs , while for remote semantic analyses, the information associated with a newly created model, object, or entity can be provided to the platform consolidation system , and the analysis can be performed based on the consolidated PMRS . Results of the analysis can be stored at or associated with the consolidation system . The development systems  can access the logged results as illustrated by arrows .","In general, the PMRS  and PMRS manager  offers the possibility to pre-publish the models created in one system to another system. In a pre-publishing step, a model is transferred from the original system in which the model was created to another system. As illustrated in , the other system is the platform consolidation system . Pre-publishing can be limited to a metadata-based description of the newly created model, without technical or generated artifacts being transferred. The transferred models can be stored in a secondary storage in some instances, which may exist in parallel to the primary storage containing active models in the platform. Pre-publishing may be performed via web services and\/or APIs through which the functionality of platform consolidation system  is exposed.","In some instances, the pre-publishing operations may be configured as a mandatory operation in the modeling activity to allow the enforcement of semantic consolidation across the distributed development systems . For example, pre-publishing and receiving a negative semantic overlap result (i.e., no significant overlaps identified) may be required prior to activation of a newly created model and the creation of runtime artifacts associated with the newly created model in either the distributed development system  or the platform consolidation system . If a positive semantic overlap result is returned, the modeling environment or tool may return one or more suggested replacements for use in place of the newly created model that will provide better consistency with pre-existing content. In default configurations, such as those illustrated in , the consolidation system can be defaulted to a system associated with the platform. In alternative implementations, however, a dedicated peer-to-peer consolidation may also be possible. For example, consolidation between a human capital management system and a travel and expense management system may use either of those systems as the consolidation system, where appropriate.",{"@attributes":{"id":"p-0055","num":"0065"},"figref":["FIG. 4","FIG. 1A"],"b":["400","400","400","100","400"]},"At , a newly created object model is identified for semantic analysis. In some instances, the newly created object model may be an extension or modification of a previously-existing object model. In some instances, the newly created object model may be created for an application or application system based on or associated with a platform application or system. The platform application or system can provide a basis or template for one or more distributed development systems, where related applications based on the platform can be developed. In some instances, a plurality of distributed development systems may be associated with a single platform, allowing for distributed development of multiple derivative applications performing various types of functionality.","At , at least one metadata repository defining at least one preexisting object and\/or object model is identified. The identified metadata repositories may be local metadata repositories (such as PMRS  of ), or they may be a consolidated repository (such as PMRS  of ) located at a platform consolidation system where the current set of active and pre-published models may be located.","At , a determination is made as to the type of the newly created object identified at . The determination of the object type can assist in determining which semantic analysis algorithm to apply to the identified object model, as well as the sets of preexisting and\/or pre-published models to which the results of the analysis are to be compared. The type of the newly created object may include a business object, a UI, an inbound or outbound agent, or any other type of object used in the platform. Once a type is determined, at  the model associated with the newly created object is semantically analyzed using the type-specific algorithm corresponding to the determined object type. In some instances, an object model profile may be generated for the semantically analyzed object that includes the results of the analysis. In other instances, the results of the analysis may be stored in memory and used in the comparison operations. Examples of the items included in a semantic analysis of a business object model are described above.","At , a stored set of object model profiles associated with previously existing and\/or pre-published object models within the identified at least one metadata repository are identified. To limit the number of profiles compared to the newly created object model profile, the comparison can be limited to only those profiles of object models corresponding to the determined type of the newly created object model. In other words, if the newly created object model is a business object model, only profiles of other business object models will be included in the comparison.","At , the newly created object model's profile is compared with the set of object model profiles identified at  from the at least one metadata repository. The comparison can identify overlapping semantics between the newly created object model's profile and the profiles of the pre-existing content. In some instances, different levels of weighting may be assigned to different types of semantic overlap. For example, similar dependent objects may provide a higher weighting than other semantic similarities, such as similarly named actions associated with a particular business object node. Different weighting rules may be applied for different comparisons. Additionally, multiple similar semantics in a particular area of a model may result in a heavier weighted match than if the same number of similar semantics were identified in less related areas.","At , a determination is made as to whether the comparison performed at  resulted in any pre-existing models meeting or exceeding a suggestion threshold. The suggestion threshold may be predefined, and may represent a defined level of overlap after the semantic analysis is performed. The defined level may be a static number (i.e., a particular profile must overlap by over 50%), or the level may be a dynamic comparison to the entire set of the comparison (i.e., the top 3 results of the comparison are returned). In some instances, no comparison results may exceed the suggestion threshold, and method  may continue at , where the results of the comparison can be returned, noting that no matching profiles exceeding the suggestion threshold were identified. In some instances, one or more of the top results may be presented. If comparison results do exceed the suggestion threshold, however, method  can continue at .","At , a set of objects that meet the suggestion threshold can be returned, with the set of objects representing suggested replacements for the newly created object. By using those pre-existing objects in place of the newly created object, the semantics of the pre-existing object can be maintained across the various platform-based applications. Further, while the suggestions may not be exact matches, they may be used and adapted in order to provide a similar semantic basis for development. At , selection of a particular replacement object from the returned set of objects may be received. If so, at  the newly created object can be replaced with the selected replacement object. Alternatively, and not shown, if none of the suggested items in the returned set of objects are returned, the system may allow the developer to request an exception to use the newly created object despite the identified semantic overlap with the pre-existing models.",{"@attributes":{"id":"p-0063","num":"0073"},"figref":["FIG. 5","FIG. 1A"],"b":["500","500","100","500"]},"At , a consolidated metadata repository is identified. In many instances, the consolidated metadata repository may be associated with a platform consolidation system. However, in some instances, dedicated peer-to-peer consolidation may also be possible, where the consolidated metadata repository may be located at a distributed development system.","At , a request for a set of existing and pre-published models stored at the identified consolidated metadata repository may be sent. The request can be sent as a message, accessing an API associated with the consolidated metadata repository (or its platform consolidation system), or through a web service call, among others. At , in response to the request, the current set (or a subset thereof) of the existing and pre-published models may be received. In some instances, only those models that were not previously included in the local metadata repository may be returned. In others, all models from the consolidation system may be returned. In still other instances, a particular subset of the pre-existing and pre-published models may be returned. At , the local metadata repository is updated with the received set of models. At , the updated local metadata repository can be made available to local semantic analyses of newly created objects and their models.",{"@attributes":{"id":"p-0066","num":"0076"},"figref":["FIG. 6","FIG. 1A"],"b":["600","600","100","600"]},"At , development of a new object model is performed at the distributed development system, where the development is based at least in part on a software development platform. In the illustrated example, the pre-publishing operations may be initiated prior to activating a new model or using the new model within the system. At , a determination is made as to whether a request to do so is received. If not, method  returns to . If such a request is received, method  continues at .","At , a metadata-based description of the new object model is generated. In some instances, the entire model may comprise the metadata-based description, while in others, an initial semantic analysis may be performed on the new object model, and the results of that analysis may be generated. In other instances, only a portion of the new object model may be included in the generated description. At , the generated description is published to a centralized platform consolidation system. The publishing operations of  may be performed by using one or more APIs or other interfaces at the platform consolidation system for submitting pre-published models created at the distributed development systems, by using web services associated with the consolidation system, or other suitable operations.","At , a determination is made as to whether a negative semantic overlap result from the platform consolidation system is received. In some instances, when a model is pre-published to the platform consolidation system, the platform consolidation system may perform a semantic analysis on the received model to identify whether significant semantic overlap occurs between the new model and any pre-existing models included in the consolidated metadata repository. The results of that analysis can be returned to the distributed development system, along with any identified suggested replacements. If a negative semantic overlap result is received from the platform consolidation system, method  continues at , where the activation of the new object model is permitted at the distributed development environment. If, however, a positive overlap result is not returned, method  continues to .","At , the logged results of the semantic analysis, possibly including one or more suggested pre-existing models to be used instead, are received. In some instances, regardless of the semantic overlap, the developer may wish to use the newly created object. If so, the developer may request an exception to allow the new object model to be activated. In some instances, the request may be automatically submitted, while in others, the developer may manually submit the request. At , a determination is made as to whether an exception request is received and allowed. If not, method  moves to  where the activation request is rejected. In some instances, the developer may be able to select one of the suggested pre-existing models for use in lieu of the new object model. If, however, an exception request is received and allowed, method  continues to , where the new object model is permitted to be activated.","The preceding figures and accompanying description illustrate example processes and computer implementable techniques. But environment  (or its software or other components) contemplates using, implementing, or executing any suitable technique for performing these and other tasks. It will be understood that these processes are for illustration purposes only and that the described or similar techniques may be performed at any appropriate time, including concurrently, individually, or in combination. In addition, many of the steps in these processes may take place simultaneously, concurrently, and\/or in different orders than as shown. Moreover, environment  may use processes with additional steps, fewer steps, and\/or different steps, so long as the methods remain appropriate.","In other words, although this disclosure has been described in terms of certain embodiments and generally associated methods, alterations and permutations of these embodiments and methods will be apparent to those skilled in the art. Accordingly, the above description of example embodiments does not define or constrain this disclosure. Other changes, substitutions, and alterations are also possible without departing from the spirit and scope of this disclosure."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4","b":"400"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5","b":"500"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6","b":"600"}]},"DETDESC":[{},{}]}
