---
title: Methods and systems for supporting a rendering API using a runtime environment
abstract: A computing device can comprise an I/O interface and a processing element connected to the I/O interface and implementing a runtime environment. The processing element can implement a program component that causes the processing element to expose a rendering API not natively supported by the runtime environment, the rendering API invocable by code comprised in a markup document accessed by the processor over the I/O interface. The rendering API can be exposed by causing the runtime environment to respond to and update a proxy object that mirrors properties, methods, and behaviors defined by the rendering API.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09286142&OS=09286142&RS=09286142
owner: Adobe Systems Incorporated
number: 09286142
owner_city: San Jose
owner_country: US
publication_date: 20110407
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Internet users enthusiastically consume of video and other multimedia content. Such content is often distributed using code, such as HTML or other markup code, configured to invoke the capabilities of an application to retrieve the content and render the content according to a video rendering application programming interface (API) exposed by the application. As an example, a runtime environment such as the Adobe\u00ae Flash\u00ae player or AIR\u00ae runtime environment (both available from Adobe Systems Incorporated of San Jose, Calif.) may be used to render video. However, some users may not have access to a device that supports such a runtime environment.","Recently, the HTML standard has been extended to include video rendering APIs invoked by including the <video> and other elements in HTML code whereby a browser can be used to render the video natively. Despite recent expansions of APIs to add video and other support to browsers, there remains room for improvement in both the user experience and the experience of developers who work to distribute content to the users.","A computing device can comprise an input-output (I\/O) interface and a processing element connected to the I\/O interface and implementing a runtime environment. The processing element can implement a program component that causes the processing element to expose a rendering API not natively supported by the runtime environment, the rendering API invocable by code comprised in a markup document accessed by the processor over the I\/O interface. The rendering API can be exposed by causing the runtime environment to respond to and update a proxy object that mirrors properties, methods, and behaviors defined by the rendering API.","For example, through use of the proxy object, the runtime environment can be caused to respond to code that invokes commands specified according to the HTML <video> API. Thus, developers can write code that invokes the <video> API with confidence that the same code can be used with or without the runtime environment. Additionally, the developers can write code that still takes advantage of the capabilities of the runtime environment that extend beyond the capabilities of the browser or other rendering application.","These illustrative embodiments are discussed not to limit the present subject matter, but to provide a brief introduction. Additional embodiments include computer-readable media for exposing and utilizing rendering API functionality through use of proxy objects, along with computer-implemented methods of doing the same. These and other embodiments are described below in the Detailed Description. Objects and advantages of the present subject matter can be determined upon review of the specification and\/or practice of an embodiment configured in accordance with one or more aspects taught herein.","Presently-disclosed embodiments include computing systems, methods, and computer-readable media embodying code. For example, a rendering API such as the \u201cHTML5\u201d video API can be provided on top of a runtime such as the Flash\u00ae player plug-in so that web developers can use a consistent, standardized API without the need to deal with Flash\u00ae player or other runtime-specific APIs. Additionally, resources can be consolidated (e.g., no need to have separate libraries for both the HTML native video player and Flash video player) when a webpage has both the Flash player and HTML native video for video content for use by different client devices. In some implementations, script-based getters and setters are used to map rendering API calls to runtime calls and to provide rendering API responses based on runtime state changes\/events by getting and setting mirrored properties of the <video> API.","Turning to , for example, an illustrative data flow diagram shows how one or more proxy elements can be used to expose API functionality not natively supported by a runtime environment.","In particular, code  includes one or more elements  invoking the rendering API along with one or more elements  invoking a scripting API to set up the proxy objects. Code  also includes a reference  to a runtime application . In this example, as shown at  the calls to the rendering API and the calls to the scripting API shown at  are at least initially processed by a rendering application , which represents a browser or some other application that pareses code . Rendering application  also includes suitable functionality to recognize the scripting API calls; for example, rendering application  can include a JavaScript\u2122 or other engine that supports the scripting calls.","Rendering application  may include functionality to natively support at least some of the rendering API calls defined by elements . Thus, as shown at , rendering application provides at least some portion(s) of a graphical user interface  that includes (in this example) a video element  and control button , which can be used to handle input events controlling playback of video content  (e.g., playing\/pausing in response to input directed to the triangular \u201cplay\u201d button shown here) and provide updates as the state of content  changes. As another example of a control element, a control bar  with a scrub bar can be used during playback and the scrub bar can be moved from left to right as the video progresses.","In accordance with the present subject matter, however, rendering application  sets up one or more proxy objects  so that, as shown at , one or more calls to the rendering API can be handled by a runtime environment  executing\/interpreting runtime application  so that, effectively, runtime environment  exposes the rendering API. For example, proxy object  can be configured to have the same property names, method names, and behavior defined by the rendering API, so that proxy object  dispatches the same events based on state changes in the video or other rendered content as would be expected by a native implementation.","Proxy object  monitors for events, such as user input or other events that invoke the rendering API to change a property associated with the rendering API. As shown at , in response to a property change, proxy object  invokes corresponding functionality of the runtime player via an external call API provided by the runtime. As also shown at , proxy object  also responds to a change in state of runtime environment  by propagating the state change to one or more of its properties and dispatches an appropriate event or events as defined in the rendering API.","For example, as shown at , runtime environment  may be used to provide some or all of the elements of graphical user interface . As one particular example, code  may specify that runtime environment  is to provide video element  while the native API capabilities of browser  are used to render control button  and other \u201cchrome,\u201d such as through use of a control bar  defined using HTML and CSS code. This may allow for use of the same controls across platforms regardless of whether those platforms all support runtime environment  and\/or to allow use of capabilities of the runtime environment  such as support for multicasting, content protection (e.g., encrypted content streaming). Thus, input events directed toward the browser-provided control bar UI elements can be propagated to proxy object  which then invokes functionality of runtime environment . For instance, the video may be specified as a SWF or other file played back by the runtime environment if available.","In response to an input event directed toward control button , the state of proxy object  can be updated. In response to the change in its state, proxy object  can invoke functionality of runtime environment , such as by providing a play( ) or pause( ) command exposed by runtime environment  as part of the runtime environment's external control API. Similarly, as the state of runtime environment  changes, for example as the time index of the video increases, the time index can be propagated to proxy object  which dispatches appropriate events to make control button visible or invisible. In addition to or instead of storing state changes in proxy object , one or more properties can be mirrored by proxy object  by using property values associated with the rendering API to trigger commands to runtime environment  through custom getter methods and\/or by updating values of properties for objects associated with the rendering API in response to activity by runtime environment  through custom setter methods.","As another example, code  may invoke a video rendering API to provide video element  and control button . However, in order to take advantage of reporting capabilities of a runtime application (e.g., to track if users skip commercials) and\/or advanced graphic capabilities of the runtime environment, code  may be configured with suitable scripting elements  so that a suitable runtime application is used to provide the control bar. For example, code  can include an element referring to a SWF or other runtime file that provides the control bar.","As user input events are directed to the elements provided by rendering application , proxy object(s)  can be updated and used to dispatch appropriate events according to the video rendering API. For example, a \u201cplay\u201d or \u201cpause\u201d input to the runtime application can cause corresponding updates to the state of proxy object , which dispatches an appropriate command to the browser's video rendering components to begin or pause playback, respectively.","Other events can be used to invoke the video rendering API. For example, a page may include logic that indicates that a video is to be paused while an advertisement is displayed, such as by dispatching a pause( ) command when the video reaches a certain time. If, for example, the runtime environment is used to playback the video, then the pause( ) command dispatched by the page logic can be mapped to a corresponding pause command to the runtime.","The examples above are for purposes of illustration only. In the following detailed description, numerous specific details are set forth to provide a thorough understanding of the subject matter. However, it will be understood by those skilled in the art that the subject matter may be practiced without these specific details. In other instances, methods, apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure the subject matter.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 2","FIG. 1"],"b":["202","122","114","126","128","202","202","202"]},"Generally speaking, computing device  features one or more data processing hardware elements implementing rendering application  and runtime environment . Rendering application  causes computing device  to parse code  of  and set up proxy object(s)  and, to the extent runtime environment  is not used, to respond to rendering API calls specified in code . Code , of course, can be provided as one or more files. In this example, the rendering API is a video rendering API, but it will be understood the principles discussed herein can be applied to other rendering APIs for which use of a runtime environment would be desirable.","Proxy object(s)  can be implemented in a non-transitory computer-readable medium in a way that provides for updating of attributes of proxy object(s)  and allows for methods defined by proxy object(s)  to be carried out by suitable processing hardware. For example, rendering application  can include a Javascript\u2122 or other scripting engine whose functionality is used to provide proxy object(s)  based on scripting API calls set forth in code .","Runtime environment  provides an execution environment for one or more runtime applications  referenced by code . For example, runtime application  may comprise cross-platform bytecode usable on any platform that provides runtime environment . In some implementations, runtime environment  comprises an environment such as Adobe\u00ae Flash\u00ae or AIR\u00ae, noted above, Microsoft\u00ae Silverlight\u00ae (available from Microsoft Corporation of Redmond Wash.), a Java\u00ae Virtual Machine (available from Oracle Corporation of Redwood Shores, Calif.), or some other runtime. Runtime application  may be downloaded from a network connection or accessed from storage in response to reference  in code , or could even be accessed directly with code  when code  is initially accessed. Runtime environment  may execute within an operating system that also supports rendering application . However, runtime environment  could itself comprise the operating system in some implementations. When implemented as software, runtime environment  itself could be downloaded if not already resident on device , and runtime environment  and application  could even be distributed as an integrated unit, if desired.","Rendering application  and\/or runtime environment  can be implemented in hardware accessible by or as part of the data processing element (e.g., as an application-specific integrated circuit, (ASIC), programmable logic device (e.g., PLAs, FPGAs, etc.)). As another example, rendering application  and\/or runtime environment  can be implemented using software or firmware that configures the operation of a processor or processors.","In the example shown in , computing device  features a data processing hardware element comprising one or more processors  and a computer-readable medium (memory ) interconnected via an interconnect , representing internal busses, connections, and the like. Interconnect  also connects to I\/O components , such as universal serial bus (USB), VGA, HDMI, serial, and other I\/O connections to other hardware of the computing system. The hardware also includes one or more displays . It will be understood that computing device  could include other components, such as storage devices, communications devices (e.g., Ethernet, radio components), and other I\/O components such as speakers, a microphone, or the like.","Generally speaking, interconnect  is used to receive code  and the underlying content to be rendered, store code  and the content data as needed, such as in a local hard drive, cache memory, network storage, etc., and relay rendered content to I\/O interface  for display be display device . Input is provided via suitable input devices such as a mouse, keyboard, touch screen interface, etc.","Computer-readable medium  may comprise RAM, ROM, or other memory and in this example embodies code of rendering application , proxy object , runtime environment , and runtime application . It will be understood that code  may also be stored in computer-readable medium  or some other medium.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 3","FIGS. 1-2"],"b":["300","302","302","114"]},"Block  represents setting up one or more proxy objects . For example, the markup document can be configured with code that invokes a scripting API supported by rendering application  so that the proxy objects can be instantiated so as to mirror properties, methods, and behaviors defined by the rendering API. In some implementations, the proxy object(s)  provide each and every property, method and behavior of the rendering API (or APIs) to be exposed to ensure that the expected capabilities of the rendering API are provided.","Additionally, the markup document can define getter and setter methods supported by the scripting API in order to map runtime events and states to the rendering API and invoke runtime functionality\/set runtime states in response to calls to the rendering API. A getter is a method that gets the value of a specific property. A setter is a method that sets the value of a specific property. Thus, at block  when the proxy object is set up, appropriate getters and setters can be initialized to bridge between the rendering API and external interface calls of the runtime environment.","In some implementations a JavaScript plain proxy object can be provided that mirrors the HTMLVideoElement, HTMLAudioElement, and HTMLMediaElement APIs as defined in the HTML standard (see, e.g., HTML Standard (7 Apr. 2011), by Ian Hickson published by WHATWG, which is incorporated by reference herein in its entirety). The object can have exactly the same property names, exactly the same method names, and the same behaviour, as described in the specifications (e.g., for the APIs above, the proxy object dispatches exactly the same VideoElement\/MediaElement events specified in the spec that reflect the changes in the state of the underlying implementation). Implementations that mirror the API at the property level can advantageously allow code written to invoke the rendering API to be reused with minimal or no modification to accommodate use of the proxy\/runtime since the API specification is respected fully. Other APIs can be mirrored than the ones noted above, of course. Additional examples include, but are not limited to, HTMLFormElement, HTMLCanvasElement, HTMLTableElement, etc.","Block  represents setting up UI and other elements (e.g., video element ) to be provided by the rendering application, while block  represents invoking the runtime application. Block  can also include setting up additional UI elements by another specific application. The setup operations can include instantiating objects and other program components to render the UI elements and perform other functionality. The particular balance of what functions are handled by the rendering application and runtime application can vary according to particular implementations. The runtime application can be downloaded or otherwise accessed by the runtime environment for execution as needed in response to input commands or events.","For example, the markup document will typically invoke functionality to be handled natively by the rendering application, such as various web page elements such as text and images. Depending upon the particular implementation, the rendering application may be used to render video content, video controls, and the like, with the runtime application playing a \u201cbackground\u201d role to monitor and report playback. As another example, the runtime application may be used to drive video playback while the rendering application's native capabilities are used to provide controls and \u201cchrome\u201d for a consistent appearance. As a further example, the runtime application can be used for \u201cchrome\u201d and controls while the rendering application handles the actual video rendering.","In any event, for those invocations of the rendering API to be handled by the runtime application, the UI (and other elements) are set up so that user and other events that invoke the rendering API cause an update to the state of the proxy object(s) and\/or are tied to getter and setter methods so that events and state changes are passed through directly to the runtime without storing the state in the proxy object.","In this example, as shown at block , in response to a rendering API call, the state of the proxy object can be updated. Then, at block  a runtime command is invoked based on the state of the proxy object. However, if getter\/setter methods are supported, then a rendering API call can be mapped directly to a call to one or more methods of the runtime to cause the runtime to respond.","For example, in some implementations, JavaScript method calls are proxied (via the proxy object) to methods exposed by the runtime environment. For example, the Flash\u00ae runtime environment provides ExternalInterface calls that the proxy object can invoke in response to UI or other events invoking the rendering API. Thus, the state change of the proxy object may simply be receipt of the API call, which then directly leads to a corresponding call to the runtime.","Additionally or alternatively, the rendering API call may be of a type that changes an attribute defined by the rendering API, with that attribute maintained as a writable attribute of the proxy object. Changes made to writable attributes of the proxy object can be handled in different ways depending upon the capabilities of rendering application . For example, the scripting engines of more recent versions of browsers allow for custom getters and setters to be defined through calls to the scripting API as noted above. For those browsers, getters and setters can be defined so that the change to the writable attribute causes the proxy object to call a method exposed by the runtime environment. For example, if an input or other event calls \u201ccurrentTime=30\u201d in Javascript, the proxy object can make a call \u201csetCurrentTime(30)\u201d to the Flash\u00ae runtime (via ExternalInterface).","Not all browsers support custom setters and getters. To address those cases, the scripting code can include scripting API calls to maintain a first copy of the proxy object and a second copy of the proxy object, the first and second copies identical when first initialized. For instance, the proxy object may be initialized along with an object that acts as a carbon copy of the state of the runtime. The proxy object can regularly poll the carbon copy and, when the carbon copy and proxy object states do not match, the proxy object can determine if the rendering API has been invoked and make an appropriate call to the runtime (e.g., for the Flash\u00ae runtime, using ExternalInterface).","Block  represents propagating a state change from the runtime environment to the proxy object, while block  represents updating UI elements or taking other action in the rendering application based on the propagated state change. These blocks are shown after blocks -, though they could occur before blocks - or even in parallel. Generally speaking, the runtime environment can make a call to the scripting API to update the state of the proxy object and\/or to invoke a method defined by the proxy object, with the proxy object then dispatching as appropriate to the rendering API.","For example, if the Flash\u00ae runtime is used, the ExternalInterface can make a call the Javascript API to update one or more properties of the Javascript proxy object. In some implementations, updating occurs without further processing unless there has been a change to the writable attribute already, in which case the conflict is resolved in favor of the existing change to the proxy object. In response to the change, a Javascript event that matches the event(s) specified in the rendering API (e.g., events as defined in the HTML <video> API) is dispatched.","As noted above, not all browsers may support getters and setters sufficient to identify when changes have been made to the proxy object. Thus, the carbon copy approach outlined above can also be used to determine when the runtime has propagated a state change.","As shown at block , the method can loop through blocks - until rendering is complete. For example, rendering can be complete when the video or other content is finished or if a user exits early. Other exit conditions can be defined, of course.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 4","FIG. 1"],"b":["400","102","202","400"]},"Block  represents receiving and parsing, by a browser, an HTML file with a <video> element and scripting elements configured as discussed above. For instance, the HTML file may invoke at least some functionality of the HTML5 <video> rendering API. Block  represents determining whether the computing device supports a runtime environment needed to use a runtime application referenced by the HTML file. For example, JavaScript or other code can be used to identify a device type and\/or whether Flash\u00ae or another runtime environment is installed.","If the runtime environment is not available, then flow proceeds to block , which represents invoking the video rendering API as natively supported by the browser. However, if at block  the runtime environment is found, then flow proceeds to block . Block  represents setting up one or more proxy objects with setters and getters, or a proxy object and carbon copy, while block  represents using the proxy object(s) to propagate commands to the runtime environment and to relay runtime state changes to browser-provided UI elements and other elements. For example, these steps can be carried out according to the teachings noted above with .","Developers and content distributors, by configuring markup or other code  to cause a computing device to operate as discussed herein, can be spared the trouble of preparing multiple versions of code for different platforms. Instead, the developer\/content distributor can generate code according to a commonly-supported rendering API (e.g., the HTML <video> API) but without giving up the advantages of using a runtime environment (e.g., the Flash\u00ae or AIR\u00ae runtime) for those devices that support the runtime environment.","For example, as noted above, the runtime environment can be used to provide capabilities, such as multicasting, protected content distribution, usage tracking, and the like that are not supported by the rendering API. Thus, the same HTML or other file can be distributed, for example, to television set-top boxes that support the runtime, mobile devices that support the runtime, but also to mobile devices, tablets, etc. that may not support the runtime.","The parsing and API exposing operations discussed above can be carried out at a client device that also displays the rendered content. However, in alternative implementations, the parsing and API exposing operations can be carried out at a server which then relays data representing the content to be rendered to other devices that actually render the content.","The example of  and other examples above discussed a browser and the HTML <video> rendering API. It will be understood that other applications can support the rendering API, and other rendering APIs can be used. Additionally, the rendering application was described as the application that exposes the scripting API. Additional embodiments could use a separate application or process to expose the scripting API, with inter-process communication between that separate application and rendering application used as needed to coordinate input to and output from the rendering application-provided elements. Still further, several examples above referred to markup code, but other code (e.g., binary code) that invokes the rendering and scripting APIs and invokes the runtime environment could be used instead of markup code (i.e. for code ).","Development tools can utilize the principles noted above to allow developers to deploy code that invokes a rendering API and which also uses a runtime environment when available. For example, a web development application can include a user interface, code manager, and other components used to define HTML or other web page code. In one implementation, the web development application can be configured to identify <video> tags, for example or other syntax that invokes a rendering API. The page can be updated to use a runtime environment (e.g., by referencing a Flash\u00ae or other plugin) and to include JavaScript code to map API calls to the Flash\u00ae player, while preserving the original rendering API calls for devices that do not utilize Flash\u00ae (or other runtime environments). In some implementations, the <video> tag is replaced with a <div> to avoid issues that arise on some devices if the <video> tag itself is entirely replaced with runtime-based playback.","General Considerations","Some portions of the detailed description were presented in terms of algorithms or symbolic representations of operations on data bits or binary digital signals stored within a computing system memory, such as a computer memory. These algorithmic descriptions or representations are examples of techniques used by those of ordinary skill in the data processing arts to convey the substance of their work to others skilled in the art. An algorithm is here and generally is considered to be a self-consistent sequence of operations or similar processing leading to a desired result. In this context, operations or processing involve physical manipulation of physical quantities.","Typically, although not necessarily, such quantities may take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared or otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to such signals as bits, data, values, elements, symbols, characters, terms, numbers, numerals or the like. It should be understood, however, that all of these and similar terms are to be associated with appropriate physical quantities and are merely convenient labels.","Unless specifically stated otherwise, as apparent from the foregoing discussion, it is appreciated that throughout this specification discussions utilizing terms such as \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cdetermining\u201d or the like refer to actions or processes of a computing platform, such as one or more computers and\/or a similar electronic computing device or devices, that manipulate or transform data represented as physical electronic or magnetic quantities within memories, registers, or other information storage devices, transmission devices, or display devices of the computing platform.","Although several examples featured mobile devices, the various systems discussed herein are not limited to any particular hardware architecture or configuration. A computing device can include any suitable arrangement of components that provide a result conditioned on one or more inputs. Suitable computing devices include multipurpose microprocessor-based computer systems accessing stored software, that programs or configures the computing system from a general-purpose computing apparatus to a specialized computing apparatus implementing one or more embodiments of the present subject matter. Any suitable programming, scripting, or other type of language or combinations of languages may be used to implement the teachings contained herein in software to be used in programming or configuring a computing device.","A computing device may access one or more non-transitory computer-readable media that embody computer-readable instructions which, when executed by at least one computer, cause the at least one computer to implement one or more embodiments of the present subject matter. When software is utilized, the software may comprise one or more components, processes, and\/or applications. Additionally or alternatively to software, the computing device(s) may comprise circuitry that renders the device(s) operative to implement one or more of the methods of the present subject matter.","Examples of computing devices include, but are not limited to, servers, personal computers, mobile devices (e.g., tablets, smartphones, personal digital assistants (PDAs), etc.) televisions, television set-top boxes, portable music players, and consumer electronic devices such as cameras, camcorders, and mobile devices. Computing devices may be integrated into other devices, e.g. \u201csmart\u201d appliances, automobiles, kiosks, and the like.","Embodiments of the methods disclosed herein may be performed in the operation of computing devices. The order of the blocks presented in the examples above can be varied\u2014for example, blocks can be re-ordered, combined, and\/or broken into sub-blocks. Certain blocks or processes can be performed in parallel.","Any suitable non-transitory computer-readable medium or media may be used to implement or practice the presently-disclosed subject matter, including, but not limited to, diskettes, drives, magnetic-based storage media, optical storage media (e.g., CD-ROMS, DVD-ROMS, and variants thereof), flash, RAM, ROM, and other memory devices.","The use of \u201cadapted to\u201d or \u201cconfigured to\u201d herein is meant as open and inclusive language that does not foreclose devices adapted to or configured to perform additional tasks or steps. Additionally, the use of \u201cbased on\u201d is meant to be open and inclusive, in that a process, step, calculation, or other action \u201cbased on\u201d one or more recited conditions or values may, in practice, be based on additional conditions or values beyond those recited. Headings, lists, and numbering included herein are for ease of explanation only and are not meant to be limiting.","While the present subject matter has been described in detail with respect to specific embodiments thereof, it will be appreciated that those skilled in the art, upon attaining an understanding of the foregoing may readily produce alterations to, variations of, and equivalents to such embodiments. Accordingly, it should be understood that the present disclosure has been presented for purposes of example rather than limitation, and does not preclude inclusion of such modifications, variations and\/or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A full and enabling disclosure is set forth more particularly in the remainder of the specification. The specification makes reference to the following appended figures.",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
