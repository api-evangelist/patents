---
title: Mobile data transfer and synchronization system
abstract: The invention relates to the transference of data between two systems independent of the form in which the data is kept on the respective systems, and in particular to providing an efficient means of communicating data between systems and devices. It further relates to a system for allowing users to provide other individuals with a personalized representation of the user in a network environment, such as a cellular telephone network and the backup and restoration of data stored in a wireless telephone, and in particular a mobile telephone having data storage capabilities.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08621025&OS=08621025&RS=08621025
owner: Synchronoss Technologis, Inc.
number: 08621025
owner_city: Bridgewater
owner_country: US
publication_date: 20110114
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","COPYRIGHT AUTHORIZATION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","EXAMPLE"],"p":["This application is a Continuation of U.S. patent application Ser. No. 12\/228,978 filed Aug. 18, 2008 (published as U.S. Application Publication No. 2009-0055464), which is a Continuation of U.S. patent application Ser. No. 10\/659,646 filed Sep. 10, 2003 (now U.S. Pat. No. 7,415,486), which is a Continuation of U.S. patent application Ser. No. 09\/491,694 filed Jan. 26, 2000 (now U.S. Pat. No. 6,671,757).","This application is also a Continuation of U.S. patent application Ser. No. 11\/128,121 filed May 12, 2005 (published as U.S. Application Publication No. 2006-0052091), which claims the benefit of U.S. Provisional Application Ser. No. 60\/570,409 filed May 12, 2004.","This application is also a Continuation of U.S. patent application Ser. No. 09\/753,537 filed Jan. 2, 2001 (published as U.S. Application Publication No. 2002-0040369), now abandoned, which is a Continuation of U.S. patent application Ser. No. 09\/490,550 filed Jan. 25, 2000 (now U.S. Pat. No. 6,694,336).","This application is also a Continuation of U.S. patent application Ser. No. 12\/286,040 filed Sep. 26, 2008 (published as U.S. Application No. 2009-0106110), which (i) claims the benefit of U.S. Provisional Application Ser. No. 60\/995,789 filed Sep. 28, 2007, (ii) is a Continuation in Part of U.S. patent application Ser. No. 12\/151,440 filed May 6, 2008 (now U.S. Pat. No. 7,643,824), which is a Continuation of U.S. patent application Ser. No. 10\/789,816 filed Feb. 27, 2004 (now U.S. Pat. No. 7,505,762), and (iii) is a Continuation in Part of U.S. patent application Ser. No. 12\/011,399 filed Jan. 25, 2008 (published as U.S. Application No. 2008-0214163), which claims the benefit of both U.S. Provisional Application Ser. No. 60\/937,314 filed Jun. 26, 2007, and U.S. Provisional Application Ser. No. 60\/897,789 filed Jan. 26, 2007.","All of these applications are incorporated herein by reference in their entireties.","A portion of the disclosure of this patent document contains material to which the claim of copyright protection is made. The copyright owner has no objection to the facsimile reproduction by any person of the patent document or the patent disclosure, as it appears in the U.S. Patent and Trademark Office file or records, but reserves all other rights whatsoever.","1. Field of the Invention","The invention relates to the transference of data between two systems independent of the form in which the data is kept on the respective systems, and in particular to providing an efficient means of communicating data between systems and devices.","The invention further relates to a system for allowing users to provide other individuals with a personalized representation of the user in a network environment, such as a cellular telephone network.","The invention relates to the backup and restoration of data stored in a wireless telephone, and in particular a mobile telephone having data storage capabilities.","2. Description of the Related Art","The growth of computing-related devices has not been limited to personal computers or work stations. The number of personal computing devices has grown substantially in both type and format. Small, hand-held computers carry a multitude of contact, personal, document, and other information and are sophisticated enough to allow a user to fax, send e-mails, and communicate in other ways wirelessly. Even advanced cellular phones carry enough memory and processing power to store contact information, surf the web, and provide text messaging. Along with the growth in the sophistication of these devices, the need to transfer information between them has grown significantly as well.","With a multitude of different device types on the market, keeping information between the different devices synchronized has become increasingly problematic. For example, if an individual keeps a calendar of information on a personal computer in his or her office using a particular personal information manager application, the individual would generally like to have the same information available in a cellular phone, hand-held organizer, and perhaps a home personal computer. The individual may additionally have a notebook computer which requires synchronizing file data such as presentations or working documents between the notebook and the office computer.","Until now, synchronization between both documents and personal information managers has occurred through direct connection between the devices, and generally directly between applications such as a personal information manager in one device and a personal information manager in another device or using an intermediary sync-mapping program.","One example of this is the prevalent use of the 3Com Palm\u00ae OS-based organizer, such as the 3Com Palm\u00ae series of computing devices, which uses its own calendaring system, yet lets users synchronize the data therein with a variety of different personal information manager software packages, such as Symantec's ACT!\u2122, Microsoft's Outlook\u00ae, and other systems. In this example, an intermediary synchronization program such as Puma Technology, Inc.'s Intellisync\u00ae is required. Intellisync\u00ae is an application program which runs on both the hand-held device and the computer which stores the information data and maps data systems between non-uniform data records. In other cases, direct transfer between applications such as transfer between Microsoft's Outlook\u00ae computer-based client and Microsoft's Windows CE \u201cPocket Outlook\u201d application, is possible. Nevertheless, in both cases, synchronization occurs through direct connection between a personal computer and the personal computing device. While this connection is generally via a cable directly connecting, for example, Palm.\u00ae device in a cradle to the personal computer, the connection may be wireless as well.","One component of these synchronization systems is that the synchronization process must be able to delineate between when changes are made to specific databases and must make a decision about whether to replace the changed field. Normally, this is measured by a change in one database, and no-change in a second database. In some cases, both databases will have changed between syncs. In this case, the sync operation must determine which of the two changes which has been made is to \u201cwin\u201d and replace the other during the sync. Generally, this determinant of whether a conflict exists allows some means for letting the user resolve the conflict.","In a technical sense, synchronization in this manner is generally accomplished by the copying of full records between systems. At some level, a user is generally required to map data fields from one application to another and specify which data fields are assigned to which corresponding field in a different device. Less mapping is required where developers more robustly support various platforms of applications.","In many instances, the data to be synchronized is generally in the form of text data such as records of addresses, contact information, calendar information, notes and other types of contact information. In certain instances, data to be synchronized will be binary format of executable files or word processor-specific documents. In many cases where document synchronization is required, the synchronization routine simply determines whether or not the documents in question have changed, and uses a time-based representation to determine which of the two files is newer, and replaces the older file with the newer file to achieve synchronization, as long as the older of the two files was in fact not changed. This is the model used in the familiar \u201cBriefcase\u201d function in Microsoft Windows-based systems. If both files have changed, then the synchronization routine presents the option of conflict resolution to the user.","Such synchronization schemes are generally relatively inefficient since they require full band-width of the document or binary file to be transferred via the synchronization link. In addition, at some level the synchronization programs require interaction by the user to map certain fields between different programs.","One of the difficulties in providing synchronization between different computing devices is that the applications and platforms are somewhat diverse.","Nevertheless, all synchronization programs generally require certain functions in order to be viable for widespread usage. In particular, synchronization programs must work with popular applications on various platforms. Sync applications must allow for conflicts resolution when changes are made to the same information on different devices between syncing events. They must provide synchronization for all types of formats of data, whether it be text data in the form of contacts, e-mails, calendar information, memos or other documents, or binary data in the form of documents or programs in particular types of formats.","In a broader sense, applications which efficiently synchronize data between disparate types of devices can provide advantages in applications beyond synchronizing individual, personal information between, for example, a personal information manager hardware device such as a Palm. computing device, and a personal computer. The same objectives which are prevalent in developing data transfer between personal information management (PIM) devices and desktop systems lend themselves to furthering applications requiring data transfer between other types of devices, on differing platforms. These objectives include speed, low bandwidth, accuracy, and platform independence.","For example, current e-mail systems use a system which is somewhat akin to the synchronization methods used for disparate devices in that an entire message or file is transferred as a whole between different systems. When a user replies to an e-mail, generally the entire text of the original message is returned to the sender, who now has two copies of the e-mail text he\/she originally sent out. The same is true if an e-mail attachment is modified and returned. All of the text which is the same between both systems is essentially duplicated on the originator's system.","Wireless telephones have become more powerful with the inclusion of such features as cameras, address books, calendars and games. Many now include microprocessors, operating systems and memory which allow developers to provide limited applications for the phones. Phones now include the ability to play multimedia files including polyphonic ringtones, MP3 files, MPEG, AVI and QuickTime movies, and the like, in addition to displaying pictures taken on or downloaded to the phone.","Wireless phones have long been able to access the Internet via a Wireless Access Protocol (WAP) browser, and receive messages via SMS. A user on a wireless telephone connects via the wireless network to a server which enables the phone to read WAP enabled content. Most providers enable a user to access an email message account via the WAP browser, and\/or provide short message service (SMS) messages directly to the user's phone. SMS allows users to receive abbreviated text messaging directly on the phone. Messages can actually be stored on the phone, but the storage available is limited to a very small amount of memory. In addition, no provision for handling attachments in SMS is available.","More recently, phones themselves have become powerful enough to utilize data connections over a carrier's network to manipulate data. For example, users of a carrier's network can download multimedia content to their phone, shop and download phone specific applications, and send and receive more robust messaging. Devices which have been combined with wireless phones, such as Research In Motion's Blackberry device, provide a user with enhanced message capabilities and attachment handling. These devices are specifically configured to provide contact and message applications over a wireless network.","Still, the majority of phones provide limited native address and contact data storage, and only SMS messaging capability. Some phones do allow users to associate images and specific ringtones with users in their phone's address book. Most wireless phones support caller ID, which displays the number of an incoming caller. Using this information, phones having imaging and multiple ringtone capabilities display an incoming caller's address book associated picture (if available) when the incoming call is received, and play a specially designated ringtone (if specified).","With the numerous different types of wireless phones and other communications devices available, a system which will enable a user to provide a personalized representation of themselves on other user's phones would be useful in allowing the user to identify themselves to other users.","Wireless communication devices, such as mobile telephones, have expanded beyond merely mechanisms for communication. Many telephones include features enabling personal productivity, games and even digital cameras. Devices which include personal productivity applications may include data storage for storing the owner's personal information within the storage devices. In addition, phones now have the ability to run application programs specifically designed for phone-based runtime environments.","All of an individual's personal information operated on and stored by a user can be considered within that user's \u201cpersonal information space.\u201d In this context, a \u201cpersonal information space\u201d is a data store of information customized by, and on behalf of the user which contains both public data the user puts into their personal space, private events in the space, and other data objects such as text files or data files which belong to the user and are manipulated by the user. The personal information space is defined by the content which is specific to and controlled by an individual user, generally entered by or under the control of the individual user, and which includes \u201cpublic\u201d events and data, those generally known to others, and \u201cprivate\u201d events and data which are not intended to be shared with others. It should be recognized that each of the aforementioned criteria is not exclusive or required, but defines characteristics of the term \u201cpersonal information space\u201d as that term is used herein. In this context, such information includes electronic files such as databases, text files, word processing files, and other application specific files, as well as contact information in personal information managers, PDAs and cellular phones.","One difficulty users face is that it can be time consuming to enter information into a telephone, and once entered, the information is subject to loss. If the phone is damaged or simply lost by the user, and the time and effort spent to enter the information into the phone is lost. Some phones come with software and data connection cables allowing users to enter and backup information stored on a telephone by physically connecting the telephone to a personal computer. Many of these applications are provided by the manufacturer of the phone and are customized to interact directly with the phone. That is, the application program generally specifically designed for the telephone to retrieve data from the telephone and store it in the application on a personal computer. In addition, some third party vendors have attempted to make more universal synchronization systems that interact with phones through the physical cable.","The trouble with these physical connection mechanisms is that the user must consciously remember to physically connect the phone to the computer on a regular basis in order to ensure that the information backed up on the computer is accurate. In addition, the computer itself is subject to volatility. The data on the computer may be lost or damaged due to hardware and software failures.","While phone users generally desire increased functionality in phone based applications, they also desire the applications be relatively easy to use. Even general computer based utility applications, such as data back-up applications, are advantageous if they are set to run without significant user intervention. An application which would allow wireless phone users to quickly and easily backup their personal information stored on the telephone would be of great commercial and technical value.","The invention, roughly described, comprises a difference information receiver, a difference information transmitter and a difference information synchronizer which cooperate in a system or device to update data in the device with data received from other systems, or provide data for other systems to use in updating themselves.","In one aspect, the invention comprises a system in a device having at least one application data destination having a format. The system includes a difference engine receiving difference information associated with a change to said at least one application data destination; and an application interface, applying said difference information to said at least one data destination.","The difference engine may comprise a data store reflecting application data at a state prior to receipt of said difference information; and a delta engine receiving difference information and comparing difference information to said data store to construct change information. Further, the difference information may comprises a data file containing change transactions which is combined with data in the data store.","In a further aspect, the method may comprise a method for updating data files in a system. The method may include the steps of: receiving difference information for a subset of said data files; and applying said difference information to said subset of said data files. In particular said step of receiving may comprise: receiving a change log detailing changes to data files on another system; and applying said changes to a data store containing data identical to said data files to generate changed data.","In a further unique aspect, the invention my comprise an application in a system having a data source in a source format. The application may include an application interface, extracting data from said data source; and a difference engine receiving said data and outputting difference information associated with changes to said data source. The application interface may includes a source format interface; and a converter to map said data from said source format into a universal format. In addition, the difference engine may include a data store reflecting a prior state of said data; and a delta generator comparing said data and said data store to provide change transactions.","In a still further aspect, the invention may comprise a method for updating a data source in a system. The method may include the steps of extracting difference information from at least a subset of said data source; and outputting difference information for at least the subset of said data source. The step of extracting may comprise determining whether changes have been made to the subset of data source in the system; and generating a change log detailing changes to the subset of data source on another system.","In yet another aspect, the application of the present invention includes: an extraction routine for extracting a first set of difference information resulting from changes to the data files; a differencing transmitter for transmitting said first set of difference information to an output; a differencing receiver for receiving a second set of difference information from an input; and a reconstruction routine for applying the second set of difference information to the data files.","A further method of the invention comprises a method for updating data files in a system. The method includes the steps of receiving first change transactions for a subset of said data files; applying said change transactions to said subset of said data files. subsequent to a change in said data files, generating second change transactions for said file; and outputting said second change transactions to an output.","In a particular embodiment, the invention comprises a device engine including an application object; an application object store; and a delta module.","The present invention, roughly described, further pertains to a system and method which allows advanced identification information to be created and distributed to users of wireless communication devices, such as mobile phones. Subscribers can define their own personas as collections of information which define the users. Subscribers can then publish their persona(s) to their friends' and associates' mobile phones, and update the others' address books with the subscriber's contact information. Users can specify different personas to be presented to different users.","In an embodiment, the invention is a system for providing personification information to users of a wireless phone.","In another embodiment, the invention is a method of identifying a service subscriber on a wireless device. The method may include the steps of: establishing a subscriber persona comprising information identifying a user to other users; and displaying at least a portion of the persona on a device when a call or other type of contact such as SMS, Push-To-Talk message, email, voiceclip, et al to the device is received from another subscriber whose personalization information has been provided to the user.","In another embodiment, the invention is a method of providing an advanced caller identification service. In this embodiment, the invention includes: maintaining a store of subscriber persona information provided by users, the persona information identifying the user to other users; and distributing persona information to others based on an established relationship between subscribers.","A still further embodiment of the invention includes an application on a subscriber phone. The application includes a store of personification information for at least one other subscriber; and a display interface providing personification information to a phone interface and an interface for managing the user's own personalization information, as well as any system or account preferences.","In another embodiment, the invention is an application server for a communication system. The sever includes a store of personification information for a plurality of subscribers; and a distribution system management application.","The invention also comprises a system for backing up data on a wireless telephone having a data store containing a user's personal information. A method and application are provided, and various aspects and variations of the system are described herein. The invention provides a convenient means for a user to ensure that information saved on a wireless phone, and the effort spent to ensure that information is entered and correct, are not lost if the phone itself is lost or damaged.","In one embodiment a method for backing up personal information stored in a telephone is disclosed. In this aspect, the method may include the steps of presenting a back-up system user account set-up interface on the phone; presenting a backup scheduling interface on the phone; and presenting a restore information interface on the phone.","In a further embodiment, the method may include transmitting phone data to the backup system at user-defined intervals, or upon receipt of an indication from backup store that changes to data on the data store have occurred. The indicator may a result of polling the backup store to determine if changes have occurred.","The method may further include the step of providing an interface to the store via the web to alter data in the data store.","The method may include further providing a roll-back interface and an undelete interface.","In yet another embodiment, the invention is a method for storing personal information in a wireless telephone in a backup storage database. In this aspect, the method may comprise the steps of: providing a phone agent including an automated phone data transmission method capable of regularly transmitting changes to a backup store via a communications link and a restore method; and responsive to said agent, providing changes from the backup store to the wireless telephone.","In a still further embodiment, the invention is a method for maintaining personal information in a wireless telephone. In this aspect, the method includes the steps of establishing a user account, the user account identifying the user by an unique designation; and transmitting phone data to a backup store via a wireless network at regular intervals.","In another embodiment, the invention is an application for a wireless telephone. The invention includes an automated backup process transmitting changes to the backup system at user defined intervals. In addition, the application may include a restore process activated by a user to restore information stored on the backup system to the phone.","The application may include a rollback phone information process which returns data on the wireless to a state existing on a specified date. The application may further include an undelete record process. The application may include one or more processes running on a server, a BREW agent and\/or a JAVA agent or an application designed to operate on a proprietary device or operating system (e.g., a Symbian operating system.)","In yet another embodiment, the invention is an application for storing personal information in a wireless telephone having a data store to a backup system. The application includes an automated user account creation method accessing the backup system using a unique identifier for the user to create a user account on the backup system; an automated backup method transmitting changes to the backup system at user defined intervals; and a restore method providing user data to a phone.","In another embodiment, the invention comprises one or more processor readable storage devices having processor readable code embodied on said processor readable storage devices, said processor readable code for programming one or more processors to perform a method comprising the steps of: presenting a backup scheduling interface; transmitting an initial set of phone data and changes to the phone data over time to a backup system; and presenting a restore information interface.","In a still further aspect, the invention is a backup system using a unique phone identifier in conjunction with personal information stored for a user. In a further aspect, the backup system associates a unique phone identifier with a unique user identifier. In a still further aspect, the phone identifier, the user identifier or both are universally unique. In a further aspect; the invention includes using an existing SyncML client on the phone as the backup client and auto creating the user account info on the server.","The present invention can be accomplished using hardware, software, or a combination of both hardware and software. The software used for the present invention is stored on one or more processor readable storage media including hard disk drives, CD-ROMs, DVDs, optical disks, floppy disks, tape drives, RAM, ROM or other suitable storage devices. In alternative embodiments, some or all of the software can be replaced by dedicated hardware including custom integrated circuits, gate arrays, FPGAs, PLDs, and special purpose computers.","In one embodiment there is a method comprising receiving, by a service system, mobile device information of a mobile device, wherein the mobile device information was sent to the service system in response to the mobile device information being changed on the mobile device; and providing, by the service system, the mobile device information to a computing device, a user of the computing device being associated with the mobile device, to facilitate the user in viewing, interacting, or viewing and interacting with the mobile device information, wherein the mobile device, the service system, and the computing device are separate and distinct from the others.","The method requiring that the receiving comprises receiving the mobile device information from the mobile device.","In one aspect, the mobile device information includes at least one of emails, messages, a call history, photos, music, a calendar, and mobile device settings.","The method requiring, by the service system, authentication of the user before performing said providing.","The method further comprising receiving from the computing device, by the service system, an indication of one or more user interactions with the mobile device information.","The method further comprising, in response, performing, by the service system, an action on behalf of the mobile device.","The method wherein the action is one or more of initiating a Voice over IP (VoIP) call, sending an email, posting a photo for sharing, or sending a text message, on behalf of the mobile device.","The method further comprising, in response, updating, by the service system, the mobile device information or directing, by the service system, the mobile device to perform an action.","The method wherein the action is one or more of is one or more of initiating a VoIP call, sending an email, posting a photo for sharing, sending a text message, or changing a mobile device setting.","The method further comprising providing, by the service system, a mobile device client to the mobile device to facilitate the mobile device in providing the mobile device information to the service system.","A service system comprising: one or more processors; and a service to be operated by the one or more processors to: provide, to a computing device, mobile device information of a mobile device associated with a user of the computing device, wherein the mobile device information is provided to the service system in response to the mobile device information being changed on the mobile device and wherein the mobile device, the service system, and the computing device are separate and distinct from each other, receive, from the computing device, an indication of one or more user interactions with the mobile device information, and in response, update the mobile device information, perform a first action on behalf of the mobile device, or direct the mobile device to perform a second action.","The service system wherein the service is further to be operated to receive the mobile device information from the mobile device.","The service system wherein the mobile device information includes at least one of emails, messages, a call history, photos, music, a calendar, and mobile device settings.","The service system wherein the service is further to be operated to require authentication of the user before performing said provide.","The service system wherein the service is further to be operated to notify the mobile device of the updated mobile device information or the performed action.","The service system of wherein the first action is one or more of initiating a Voice over IP (VoIP) call, sending an email, posting a photo for sharing, or sending a text message, on behalf of the mobile device.","The service system wherein the second action is one or more of initiating a Voice over IP (VoIP) call, sending an email, posting a photo for sharing, sending a text message, or changing a mobile device setting.","The service system wherein the service is further to provide a mobile device client to the mobile device to facilitate the mobile device in providing the mobile device information to the service system.","A method comprising: receiving, by a computing device, from a service system, mobile device information of a mobile device, wherein the mobile device information was provided to the service system in response to the mobile device information being changed on the mobile device wherein the mobile device is associated with a user of the computing device, and wherein the mobile device, the service system, and the computing device are separate and distinct from each other; facilitating, by the computing device, the user in viewing, interacting or viewing and interacting with the mobile device information; receiving, by the computing device, one or more user interactions with the mobile device information; and in response, providing, by the computing device, an indication of the one or more interactions to the server system.","The method wherein at least one of said receiving, said facilitating, said receiving, and said providing is performed by a plug-in to a browser of the computing device.","The method wherein the mobile device information includes at least one of emails, messages, a call history, photos, music, a calendar, and mobile device settings.","The method wherein the facilitating includes providing, by the computing device, a user interface having icons\/glyphs associated with modules for handling different categories of the mobile device information.","These and other objects and advantages of the present invention will appear more clearly from the following description in which the preferred embodiment of the invention has been set forth in conjunction with the drawings.","The present invention includes a system and a method for transferring data between two devices which require information to be shared between them. In accordance with the discussion herein, a \u201cdevice\u201d is defined as a collection of elements or components organized for a common purpose, and may include hardware components of a computer system, personal information devices, hand-held computers, notebooks, or any combination of hardware which may include a processor and memory which is adapted to receive or provide information to another device; or any software containing such information residing on a single collection of hardware or on different collections of hardware. Such software might include applications such as personal information managers, which include contact data and other such information, e-mail systems, and file systems, such as those utilized by Microsoft Windows NT operating systems, Unix operating systems, Linux operating systems, or other systems capable of storing file types having binary formats which translate to application formats of differing types.","In one embodiment, the invention comprises a set of programs specifically designed to transmit and\/or receive differencing data from one device to another device, irrespective of the type of file system, data, content, or system hardware configuration.","In a further aspect, the system comprises store and forward technology which utilizes the differencing technology to implement services via a public or private network, such as the Internet.","The system of the present invention finds particular usages in synchronizing personal contact information between different systems, but it will be readily apparent to one of average skill in the art that the present invention provides advantages having broader applicability than merely synchronizing various types of systems. For example, replying and forwarding e-mail can be made more efficient by forwarding only the differences in e-mails between systems. As a further example, updates to systems software via a network can be made more efficient where, for example, instead of completely replacing different modules of an application, only the differences of the modules need be forwarded, resulting in more efficient use of existing bandwidth.","System Overview",{"@attributes":{"id":"p-0153","num":"0152"},"figref":"FIGS. 1-7"},{"@attributes":{"id":"p-0154","num":"0153"},"figref":["FIG. 1","FIG. 1"],"b":["110","100","102"]},"The differencing transmitter , upon receipt of a control signal enabling operation of the transmitter, examines a specified data structure of information which is to be transmitted to system B. Differencing transmitter  extracts such information from System A and converts the information extracted into difference information \u0394. Difference information \u0394 comprises only the changes to System B's data which have occurred on System B and instructions for implementing those changes. Hence, if the data to be transferred is a change to a file which exists on system B, difference information \u0394 comprises only the differences in such file and where such differences occur. If the data does not exist at all on System B, the difference information \u0394 will be the entire file. Difference information \u0394 received by differencing receiver  at System B is reconstructed at System B, and the changes reflected therein are updated on System B.","For example, if System A and System B are two computers and an update for certain binary files on System A is required, the differencing transmitter on System A will extract the differences in the file known to exist on System B and any new files, and transmit only those differences (an instructions for where to insert those differences) to the differencing receiver . Differencing receiver  will interpret the difference information (\u0394) and reconstruct the binary files on System B. In this manner, the information on System B is updated without the need to transfer the entire binary files between the Systems.",{"@attributes":{"id":"p-0157","num":"0156"},"figref":["FIG. 2","FIG. 2"],"b":["104","104","104"]},{"@attributes":{"id":"p-0158","num":"0157"},"figref":["FIG. 3","FIG. 3"],"b":["102","300","300","300","300","300"]},"Once again, the storage server  is coupled by a direct connection  to both System A and System B. Storage server  may be a server specifically adapted to receive differencing information A from the receiver  and provide it to the transmitter . In one embodiment, server  includes specific functional routines for enabling this transfer. Alternatively, server  comprises standard information server types which respond to standard Internet communication protocols such as file transfer protocol (FTP), or hypertext transfer protocol (HTTP).",{"@attributes":{"id":"p-0160","num":"0159"},"figref":"FIG. 4","b":["300","110","104","104","300","300"]},{"@attributes":{"id":"p-0161","num":"0160"},"figref":"FIG. 5","b":["104","102","104","100","300","300","102","300","300","300"],"sub":["2 ","4 "]},{"@attributes":{"id":"p-0162","num":"0161"},"figref":["FIG. 6","FIG. 6"],"b":["300","300","104","104","300"],"i":["a ","a "]},{"@attributes":{"id":"p-0163","num":"0162"},"figref":["FIG. 7","FIG. 6"],"b":["700","700","300","300","602","610","700","602","604","606","608","604","606","610","602","610","300","300","300","300"],"sub":["1","2","1","2 ","1","2 "]},"In the following description, an embodiment wherein the differencing receiver, transmitter, and synchronizer are described will be discussed with respect to its use in synchronizing contact information, calendar information, and binary file information between a plurality of different devices in the context of data synchronization. It will be readily understood that the system of the present invention is not limited to synchronization applications, or applications dependent upon specific types of data, such as contact information or scheduling information. In particular, it will be readily understood that the transmission of data comprising only the differences in data between two systems via routines which extract the data and reassemble data on the various systems, represents a significant advancement in the efficient transmission of data. The present invention allows for optimization in terms of a reduction in the bandwidth utilized to transmit data between two systems, since only changes to data are transferred. This consequently increases the speed at which such transactions can take place since the data which needs to be transmitted is substantially smaller than it would be were entire files transferred between the systems.","In a particular embodiment of the present invention, the ability of devices to connect to the Internet is leveraged to manage data transfer between the systems. In essence, each particular device which requires information access which can connect to the Internet may become part of the system of the present invention, and synchronize its data with other devices defined by a user as being part of the system.","Generally, the system comprises client software which provides the functions of the differencing transmitter , differencing receiver , and differencing synchronizer  in the form of a device engine. The device engine includes at least one component particular to the type of device on which the device engine runs, which enables extraction of information from the device and conversion of the information to difference information, and transmission of the difference information to the storage server. This allows the replication of information across all systems coupled to the system of the present invention. Although the storage servers  utilized in the system of the present invention may be any type of storage server, such as an Internet server or an FTP server, and may be provided from any source, such as any Internet service provider (ISP), particular aspects of a storage server which may be useful and which may be customized to optimize transfer of information between systems coupled as part of the present invention will be described below. Synchronization of devices utilizing the synchronization system of the present invention is possible as long as an Internet connection between the devices is available.","In a key aspect of the invention, the Internet connection between the devices or between the devices and a server, need not exist at the same point in time, and new devices may be added to the system of the present invention at any point in time without the loss of information. The system provides totally transparent access to information and the device engine on each device provides an operating system independent extension which allows seamless integration of the personal information services in accordance with the present invention.","In a particular unique aspect of the present invention, only those changes to the information which are required to be forwarded to other systems on the system of the present invention are transmitted to enable exceptionally fast response times. In a still further aspect of the invention, information which is transferred in this manner is encrypted to ensure security over the public portions of the Internet.","Architecture Overview",{"@attributes":{"id":"p-0170","num":"0169"},"figref":"FIG. 8"},"The present invention contemplates the use of two types of device engine: one totally embodied on the server which outputs change data to the server; and a second totally embodied on the server receiving device generated change information from the device. In addition, a hybrid of the two, having a portion of the device engine on the device and a portion on the server, is disclosed.","As shown in , any number and type of devices - may be utilized in accordance with the system of the present invention. A telephone  may comprise a cellular phone or a standard POTS-connected telephone. Telephone  may include contact information and, as is supported with a newer generation of cellular telephones, appointments and task data stored in a data structure . The application  which utilizes the application data  comprising such information is all stored in the telephone unit . Likewise, a personal digital assistant such as a Palm\u00ae. computing device  includes application  and application data  which may include information such as contacts, appointments and tasks, and may also include file information such as documents which are created and stored on the PDA . Device  is represented as a Windows personal computer running an operating system such as Microsoft Windows 95, 98, NT or 2000. Applications  which may be running on device  include the Windows operating system itself, Microsoft Outlook, Symantec's ACT Personal Information Manager, Goldmine Software's Goldmine, Lotus Organizer, Microsoft's Internet Explorer web browser, Netscape's Communicator Suite, Qualcomm's Eudora e-mail, and various other programs, each of which has its own set of application data  which is required to be synchronized not only with devices outside the system , but also between devices and applications within the system itself. Finally, a dedicated web browser client  is shown which couples via the Internet to web portal applications  which have their own set of application data . Unlike devices  which store the application and application data substantially in their own hardware, web portal applications are provided on a separate server and provided to browser  via an Internet connection. Nevertheless, the web portal application stored on the portal application provider includes a set of application data  which a user may wish to synchronize. For example, a large web portal such as Yahoo! and Snap.com provide services such as free e-mail and contact storage to their users. A user may wish to synchronize this with applications running on their cellular phone, PDA, or Windows devices.","In order to access the specific application data of each of the systems shown in , a device engine is associated with each type of device. A cellular device engine  communicates and incorporates itself with the application data  of the cellular phone. Likewise, a PDA device engine  is provided, which may be based on either the Palm\u00ae. operating system, Windows CE operating system, or other PDA-type operating systems as necessary. A Windows-based device engine  includes a mechanism, discussed below, for extracting application data  from supported Windows applications , and a web services device engine  incorporates to extract application data  from web portal applications .","As shown in , some device engines are provided entirely on the device (and are referred to herein as desktop device engines), while others include components a the back end server (which may comprise storage server  or a specialized server, as shown in .) This is illustrated generally by lines , ,, and  in . Also, in , elements above dashed line  are provided by an administrator or service provider of the system of the present invention. Each of the device engines , ,  and  is configured relative to the type of device on which it resides. For example, the Cell phone device engine  includes one or more components arranged on the phone while others are on server . Conversely, device engine  resides entirely on the windows device .","Data from each of the devices is coupled via an Internet connection  with a storage server . As noted above, storage server  may be a generic storage server or it may be a storage server specifically adapted for use with the system of the present invention as discussed below. One or more of the storage servers  are used to communicate transactions amongst the collection of systems , , , . It should be readily recognized that any number of different types of systems , , ,  may be provided in accordance with the present invention and incorporated into the system. However, for brevity, not all the different types of commercially available computing devices which are currently in use or in development, in which the system of the present invention may be incorporated, are listed.","In its simplest embodiment, the storage server  is simply a dumb storage server and each of the device engines transmits only difference information thereto to be stored in a particular location accessible by other device engines in the system. In one embodiment, each device engine implements all processing required to keep all the systems fully synchronized. Only one device engine needs to be coupled to the storage server  at one particular point in time. This permits synchronization of multiple systems in a disconnected fashion. Each device engine will download all transactions encapsulating changes that have occurred since the last synchronization from the server and apply them to the particular device.","The change or difference information (\u0394) is provided in one or more data packages, the structure of which is described herein. Each data package describes changes to any and all transfer information across all device engines, including but not limited to application data, files, folders, application settings, and the like. Each device engine can control the download of data packages that include classes of information that apply to the specified local device , ,  or  attached to that specific device engine. For example, device engine  will only need to work with changes to information describing contact names and phone numbers in application data , while device engine  will be required to work with changes to e-mail, changes to document files, notes, as well as contact and address information since the application data  is much more extensive than application data .","Each device engine includes compression\/decompression and encryption\/decryption components which allow encryption and\/or compression of the data packages transmitted across Internet connection . It should be recognized that compression and encryption of the data packages may be optionally provided. It is not required in accordance with the present invention. Each device engine performs mapping and translation steps necessary for applying the data packages to the local format required for that type of information in the application data stores -. The device engine also includes components which allow it to track ambiguous updates in cases where users have changed data to a particular data field on two different systems simultaneously since the last update. In this case, the device engine includes a mechanism for drawing this to the attention of the user and allowing the user to resolve the conflict.","Device Engine Architecture",{"@attributes":{"id":"p-0180","num":"0179"},"figref":["FIG. 9A","FIG. 9A","FIG. 9","FIGS. 1-7"],"b":["810","850","850","860","104"]},"While the invention will be described with respect to the embodiment of the invention as a differencing synchronizer , it will be readily understood that portions of the functionality are utilized as needed in a forward-only (a differencing transmitter) or a receive-only (a differencing receiver) capacity as required by the particular application.","As noted above, a device engine exists for each and every device that makes up a user's personal information network of devices in the system. As shown in , each device engine  includes an application object . The application object is specific to each particular application  and provides a standard interface between the device engine and the balance of the data transmission system of the invention, and the application . Details of the application object will be described in further detail below. The application object is a pluggable architecture which supports a wide variety of vendor-unique applications. The job of the application object is to map data from the application into a temporary or \u201cuniversal\u201d data structure by connecting to the application via any number of standard interfaces to gain access to the applications data. The data structure of the application object puts the data in a generic or \u201cuniversal data\u201d format which may be used by the device engine components to generate data packages for provision to the storage server.","Also provided is an application object store (AOS)  which includes a copy of the device's data at a point just after the previous data extraction and synchronization occurred. Application object store  is a mirrored interface which stores a snapshot of the previous state of the data from the application object  in the device engine. The size of the AOS will depend on the data being collected by each device engine.","The generic output of the application object is provided to a delta module . Delta module  is a differencing engine which calculates differences in data between the output of the application object  and the copy of the data which is provided in an application object store (AOS) . The actual differencing and patch routine can comprise a routine such as XDelta or YDelta. The delta module  will be referred to herein alternatively in certain portions of the description as \u201cCStructuredDelta.\u201d In addition, the difference information is alternatively referred to herein as a \u201cchange log.\u201d Each change log (or set of difference information) is a self describing series of sync transactions. As described below, the change log may be encrypted and compressed before output to the network.","Hence, during a sync, the Application Object will, using a mechanism discussed below, extract the data of each application in the device and convert it to a universal data format. The delta module will then generate a difference set by comparing the output of the Application Object and the AOS. This difference information is forwarded to the encryption and compression routines for output to the storage server  in the form of a data package. Alternatively, the data from one application can be used to synchronize to data in another application in, for example, a windows environment, as shown by arrow  in .","It should be specifically noted that the application object may interface directly unstructured binary data or with structured application data. The differencing routine supports both uses of the delta module  in comparison generation.","In some cases, operation of the application object and delta module is simplified by the fact that some applications, such as PDA's, have the ability to output changes to its data. In such cases, the delta module  need only provide the data into the data package, since comparison to an AOS is not required\u2014the application already includes a mechanism for tracking changes made to its own data. However, in many cases the applications provide, at most, a standard interface to access the data, such as Microsoft's OBDC interface, the Microsoft standard Application Programming Interface (API), or other similar standard interfaces.","Device engine  further includes a versioning module which applies a version number per object in the data package. As explained further below, each object in the data package is assigned a universally unique ID (UUID). Hence, unlike many prior synchronization systems, the system of the present invention does not sync data solely by comparing time stamps of two sets of data. Versioning module  allows each device engine to check the state of the last synchronization against data packs which have been provided to the storage server to determine which data packages to apply. This allows the device engine to sync itself independently of the number of times another device engine uploads changes to the storage server. In other words, a first device engine does not care how many times a second device engine uploads data packages to the server.","An events module  controls synchronization initialization events. Items such as when to sync, how to sync, trigger the delta module  to perform a synchronization operation.","A user interface  is provided to allow additional functional features to a system user of the particular device to which the device engine  is coupled. The user interface is coupled to a conflict resolution module , a filtering module , and a field mapping module . Each of the modules provides the functionality both necessary for all synchronization programs, and which users have come to expect.","Filtering module  allows filtering for types of content based on, for example, a field level content search. The field mapping module  allows for the user to re-map certain interpretations of items which were provided in the document stream. For example, if the device engine  is operating on a personal computer, and a synchronization is occurring between the personal computer and a notebook computer, and the user has a \u201cmy documents\u201d directory on the personal computer which he wishes to map to a different directory on the notebook computer, the field mapping module  allows for this re-mapping to occur. It should be recognized that the field mapping module allows for changes in directing the output of the data package. The field mapping module  is not necessary to map particular data fields of, for example, contact information from one application, such as Microsoft Outlook, to a different application, such as Symantec's ACT, as is the traditional use of field mapping and synchronizing applications.","Delta module  is further coupled to a compression module  and an encryption module . It should be recognized that the compression encryption modules need not be enabled. Any type of compression module , such as the popular PK Zip or Winzip modules, or those available from HiFn Corporation may be utilized in accordance with the invention. Moreover, any type of encryption algorithms, such as MD5, RCH 6, Two Fish, or Blowfish, or any other symmetric encryption algorithm, may be utilized. In one embodiment of the invention, encryption without compression is used. In a second embodiment of the invention, compression without encryption is used. In a third embodiment of the invention, neither compression or encryption is used, and in a fourth embodiment of the invention, both compression and encryption are used.","Versioning module  also allows the device engine  to support multiple users with distinct synchronization profiles. This allows multiple users accessing the same machine to each synchronize their own data set using the same device engine. For example, if the application  on a particular device comprises Microsoft Outlook on a personal computer, coupled to a Microsoft Exchange server, and Outlook is configured to have multiple user profiles, versioning module  will track the data applied through the device engine when a sync request occurs. This allows two users of the same Outlook client software which access different data sets, either in the client computer or on a separate server, to utilize the same device engine and the system of the present invention via the same machine. In a further embodiment, a particular device engine supports the use of foreign devices accessing the system via the same connection. Palm\u00ae devices, for example, use a cradle to connect to a computer and\/or Internet connection. If a particular user wishes to allow another user to use his Palm\u00ae pilot cradle connection to synchronize the other user's Palm\u00ae pilot, the device engine can generate data packages to update the local application object store for the foreign device. The application object store can therefore be used as a temporary storage for cases allowing synchronization of foreign devices.","The output of the device engine  comprises a data package which is output to storage server . As noted above, only one device engine need be connected to the storage server  at a given time. The data package can be stored on the storage server  until a request is made to a particular location of the storage server by another device engine. Likewise, delta engine  can query alternative locations on the storage server for access to synchronized data within the system of the present invention. Access to areas of the storage server is controlled by a management server (MS) described more fully below. In one embodiment, each sync operation requires that the device engine for each device login to the management server to authenticate the device and provide the device engine with the location of the individual device's data packages on the storage server.","Data packages may be advantageously provided to the device engine from the storage server in a streaming format, allowing processing to occur using a minimum of bandwidth and storage in the devices. The device engine  and particularly the delta module  interpret data packages based on the versioning information and the mirrored data present in the application object store . When data is returned to the delta module  from the storage server , the delta module returns differenced data to the application object  for the particular application which then translates the delta information into the particular interface utilized for application . Once a device engine has been fully applied all data packages from an input stream, it generates a series of data packages that describe the changes made on the local system. The device engine uses the local application object store  to keep track of the last synchronized version of each application's actual data, which is then used for the next data comparison by the delta module on the next sync request. Generated data packages can include operations and encode changes generated from resolving ambiguous cases as described above.",{"@attributes":{"id":"p-0196","num":"0195"},"figref":"FIG. 9B","b":["900","975","900","850","1410"]},"Shown therein are two sync servers  and  each of which is dedicated to syncing one particular type of application. Sync server  is dedicated to the Palm\u00ae device, while sync server  is dedicated to, for example, a portal application (Portal).","Since the Palm\u00ae Device includes a mechanism for transmitting changes to its data directly, data may be transmitted using HTTP request and response via the firewall  to the sync server  where differencing and updating of data in the AOS can occur, after which changes can be downloaded to the Palm\u00ae ","The synchronization server is an application handles concurrent synchronization of user's data. Each Sync Server includes plug-in support for multiple devices to be synchronized using the same sync server executable. Each device type has it's own device name that identifies which AO\/AOS components will be used during the sync.","The sync server uses the concept of a universal data record in its internal sync differencing engine and when sending data to and retrieving from external entities such as the AOS and AO. Hence, in the Palm\u00ae application, the job of a server AO is simply to take the device-specific format of its record and convert into a universal record format.","The Sync Server has a plug-in architecture so that 3rd party application partners can easily add their services into the server. Currently, if the server is operated in a Microsoft Windows NT Server, the sync server discovers the sync components via the Windows NT registry. In alternative embodiments, this function is performed in a Component Manger which operates on each sync server to manage processing by each of the AO and AOS on the server. Each AO and AOS are implemented as a stand-alone DLL that the Sync Server loads at initialization time, or when adding a new component via the Component Manager.","Each sync server is shown as dedicated to a single application. However, a sync server may handle multiple device types.","In the embodiment of , it should be noted that, depending on the device type, there are different configurations for the AOS and AO's. For example, the Palm\u00ae's AO data store  resides on the Palm\u00ae device itself and a separate AOS data store  exists for this configuration (an Oracle database). In the case of Portal , the AOS and AO use the data store .","Device engines can generate additional data packages intended to resolve synchronization problems in other systems. For example, interfacing with the conflict resolution module , if the user makes a change to a particular data store on an application object on his Palm\u00ae pilot, then makes an additional change to a personal information manager (PIM) application on his personal computer, the user can specify that the change made on the personal computer will \u201cwin\u201d when the conflict is detected by the A engine and the versioning information between the two devices. This is essentially a definition that one particular set of data is correct and should replace the second set of data.",{"@attributes":{"id":"p-0205","num":"0204"},"figref":"FIG. 10"},"As shown in , a Windows operating system may have at least three specific applications which may require synchronization. In , the system includes Netscape Communicator application  having data such as bookmarks , contacts , and e-mail ; a Microsoft Outlook application  which includes contact information , calendar information , e-mail information , note information , and tasks information ; and Windows operating system  information including Favorites data , file system information , and individual files .","Each particular application , ,  has an associated application object , , . Each of the respective application objects provides data back to delta module  in a generic format which is usable by the delta module in accordance with the foregoing description of the apparatus shown in . From , it will be additionally seen how the delta module  may be utilized to synchronize data between applications running on the same particular server. The device engine hence does an intra-system sync such as, for example, between the contact information  from Netscape and the contact information  from Outlook.",{"@attributes":{"id":"p-0208","num":"0207"},"figref":"FIG. 10"},"In operation, during an installation of a device engine into a particular system, the installation program may be tailored to provide application objects which may be present on a given system. For example, and with reference to , the installation program for a Windows machine will carry any number of application objects for systems and applications which may be present on a Windows machine. The installer will check for the presence of given applications, and allow the user to add additional applications which may be installed in locations that are not the normal default installation areas for application support by the application objects which the installer is carrying, or de-select certain applications which, for one reason or another, the user may not wish to install an application object for and render a part of the system of the present invention.","Application Object Structure",{"@attributes":{"id":"p-0211","num":"0210"},"figref":"FIG. 11"},"As noted above, there are different types of server and desktop device engines, some having application objects entirely on the server, while others have application objects entirely on the desktop.","Each application object will include a connector  which may comprise a generic interface to the particular application for which the application object store has been designed. For example, when connecting to a Palm\u00ae device, the connector will be an HTTP protocol request routine which interfaces with the Palm\u00ae device's own built-in synchronization manager, which provides an output of records which have been changed on the Palm\u00ae device. As in , since the Palm\u00ae outputs all the changes to its data via its own sync manager, in the Palm\u00ae application, the job of a server AO is simply to take the device-specific format of its record and convert into a universal record format.","The connector provides access for the application object to remove the data field from a particular application and convert it to a universal record structure. In the desktop AO, where, for example the application object is designed for a Windows interface, the connector may be the Windows API and the job of the AO will be to translate data from, for example, the windows file system to a universal data format. This universal data structure is then used by the delta module  to build data packages to be used in synchronization between components of the systems provided in the network system of the present invention.","Universal data structure mapping, used on desktop application objects, and universal data record mapping, used by the server device engines, is further detailed below.","Desktop Application Object","Each Application Object (AO) is a software component that interfaces with the third party application APIs (Application Programming Interface) to provide the programming services to the delta module for extraction and deposition of information data from and to the third party application domain during synchronization. In addition, the AO maps the third party application data fields to system's domain.","The AO service is a collection of COM (Component Object Model) objects that can be developed in conjunction with the third party Windows application APIs as a form of a DLL (Dynamic Linked Library) in C or C++. The DLL is loaded on demand at runtime during synchronization. It should be recognized that the application object need not be implemented using the COM model, but may be developed with other distributed object models.","There are a number of the related subsystems and documents that the developer must be familiar with and this document has made many references to those subsystems during the course of presenting the AO.","Change Log (CL) (or differencing information), a data file which contains a series of synchronization transactions.","DataPack, a compacted and encrypted Change Log.","Structured Delta, the delta module differentiation engine that generates differences between Application Objects and Change Log and AOS.","AOS, a database which resides locally on, for example, a windows machine. [0110] MS, a management server that manages users' accounts.","SS, an FTP or storage server that manages data packs.","User Manager, a standalone Windows client UI program that manages the synchronization process.","ePortal, a web-based PIM portal site.","pio_types.h, a header file which contains the definitions of the system's supported data fields known as tags.","Def.h, a header file contains the definitions of the system's constants.","interfaces.h, a COM interface file contains AO interface definitions.","Each AO has a COM interface-based design built-in. That is, instead of providing a set of traditional APIs as programming services, it provides a set of interface-based objects as programming services.","Structured Delta, the delta module, the primary intended user of each AO. StructuredDelta instantiates these COM objects and uses them throughout the synchronization session exclusively through the COM interfaces on those objects to interface with the third party application database.","Each AO component consists of a set of objects that translate the third party application data into the universal data middle format which underpins the entire spectrum of PIM data regardless of which third-party application the data comes from. The objects in universal data format are device, (application) data class, store, folder, item, and data fields. The AO digests the third party application data of any kind and reduces it into a few handful simple objects and field types. These objects and field types are fed into StructuredDelta engine and are compared by StructuredDelta in order of their hierarchy. The resulting differences (add, delete, modify) are logged as transactions in the difference information. The data packs are transported to a storage server that may be actively managed by a management server for each individual user account and devices.","StructuredDelta uses AO objects to access and modify the individual AO objects and data fields. AO objects serve as a buffer between individual application data and StructuredDelta so that StructuredDelta does not require knowledge of each application and database. All AO objects are temporary and created in the space of each AO by StructuredDelta through COM interfaces. AO objects are referenced when they are in use and they are freed when StructuredDelta stops using them. One can think of AO objects as merely placeholders of each application objects for StructuredDelta to access. Once StructuredDelta has a particular Application's data, StructuredDelta would free AO objects immediately without storing them internally.","AppObj","AppObj is a root object of each AO component and there is one and only one per AO. AppObj provides an entry point into the individual application's database. StructuredDelta instantiates it and holds it on during the entire synchronization session and releases it afterward. AppObj offers a number of services such as what class of data it supports. The C++ example of AppObj's definition is shown below:",{"@attributes":{"id":"p-0236","num":"0235"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"class CMyF1 AppObj:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public","Item,"]},{"entry":[{},"public","AppObj,"]},{"entry":[{},"protected ","ModuleIdentity,"]},{"entry":[{},"protected ","DataClassInfo,"]},{"entry":[{},"protected","ItemTypeInfo,"]},{"entry":[{},"protected ","ItemFieldMap,"]},{"entry":[{},"protected","FolderInfo,"]},{"entry":[{},"protected ","DataFileInfo,"]},{"entry":[{},"protected ","SynchNotify,"]},{"entry":[{},"protected ","ErrorMsg,"]},{"entry":[{},"protected","EnumItems,"]},{"entry":[{},"protected","FindItem,"]},{"entry":[{},"protected","ModifyItem"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{"]},{"entry":[{},"public: "]},{"entry":[{},"CMyAppObj( HWND hWndParent );"]},{"entry":[{},"~CMyFppObj( ); "]},{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"AppObj can contain children objects. They are Store objects. EnumItems interface is used to enumerate Store objects. FindItem interface is used to find the contained objects. ModifyItem interface enables AppObj to create a new Store object. AppObj is created by StructuredDelta calling CreateAppObject(HWND hWndParent, AppObj **ppObj).","Store","The Store object represents a database of the individual application information. If the individual application can handle multiple databases at same time, one needs multiple Store objects. One can think of Store object as a specialized Folder object, the root folder of each particular application data domain. The C++ example of Store's definition is shown below:",{"@attributes":{"id":"p-0240","num":"0239"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"class CMyStore :"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public","Item,"]},{"entry":[{},"public","ItemContainer,"]},{"entry":[{},"protected ","EnumItems,"]},{"entry":[{},"protected ","FindItem,"]},{"entry":[{},"protected","FindItemByData,"]},{"entry":[{},"protected ","ModifyItem,"]},{"entry":[{},"protected","ReadWrite"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{"]},{"entry":[{},"CMyStore( ); "]},{"entry":[{},"~CMyStore( );"]},{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Store is a container of Folder objects. EnumItems interface enables the enumeration of its contained folders while Find Item and Find ItemByData interface is used to find contained Folders or Item objects. ModifyItem and ReadWrite interface enables the modification of each application database.","Folder","Folder object is a specific data class of each individual application such as a table in the relational database or a collection of data records in each application. For example, the applications contact collection can be thought as a Folder object. The C++ example of Folder's definition is shown below:",{"@attributes":{"id":"p-0244","num":"0243"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 3"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"class CMyFolder :"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public","Item,"]},{"entry":[{},"public","ItemContainer,"]},{"entry":[{},"protected","EnumItems,"]},{"entry":[{},"protected ","FindItem,"]},{"entry":[{},"protected","FindItemByData,"]},{"entry":[{},"protected","ModifyItem,"]},{"entry":[{},"protected","ReadWrite"]},{"entry":[{},"{",{}]},{"entry":[{},"public: ",{}]},{"entry":[{},"CMyFolder( ); ",{}]},{"entry":[{},"~CMyFolder( );",{}]},{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"Folder object is also container. It can contain Item objects as well as Folder objects. EnumItem interface allows the enumeration of either Folder objects or Item objects or both. FindItem and FindItemByData interface is used to find contained Folder objects or Item objects. ModifyItem and ReadWrite interface enables the modification of an application's data tables.","Item","Item object represents an individual entity of each application's domain specific data. Item object can be thought as a record of each application's relational table. For example, a contact, email, calendar, to-do item in the particular application can be thought of as an Item object. The C++ example of Item's definition is shown below:",{"@attributes":{"id":"p-0248","num":"0247"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 4"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"class CMyItem :"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public","Item,"]},{"entry":[{},"protected","EnumItems,"]},{"entry":[{},"protected ","FindItem,"]},{"entry":[{},"protected ","ModifyItem,"]},{"entry":[{},"protected ","ReadWrite"]},{"entry":[{},"{",{}]},{"entry":[{},"public:",{}]},{"entry":[{},"CMyItem( ); ",{}]},{"entry":[{},"~CMyItem( );",{}]},{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"Item can contain Attachment objects only, EnumItems interface enables the enumeration of Attachment objects if any. ModifyItem and ReadWrite interface enables the modification of an application's records or data fields.","Attachment","Attachment object is a specialized Item object that encapsulates an attachment data or relationship. Only Item can have Attachment objects. Attachment object can be thought as attachment data such as attached-email files. Attachment can also be thought as attachment relationship to other Item objects. The example of that is the distribution list (Item object) can contain contacts (Item objects). The C++ example of Item's definition is shown below:",{"@attributes":{"id":"p-0252","num":"0251"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003","class CMyItemAttachment :"]},{"entry":[{},"public Item,"]},{"entry":[{},"protected ReadWrite,"]},{"entry":[{},"protected ModifyItem"]},{"entry":[{},"{"]},{"entry":[{},"public:"]},{"entry":[{},"CMyItemAttachment( );"]},{"entry":[{},"~CMyItemAttachment( );"]},{"entry":[{},"};"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Variant","Variant object represents a data field of each particular application data. For example, a \u2018first name\u2019 of a contact or the birthday date of a contact can be thought as Variant object. StructuredDelta only understands Variant object and the types of data fields it encapsulated. Variant object can contain any one of the following data field type:",{"@attributes":{"id":"p-0255","num":"0254"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 6"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["struct Variant",{},{}]},{"entry":["{",{},{}]},{"entry":["enumFieldTag","tag;",{}]},{"entry":["enumFieldDataFlag","flag;","\/\/ flags item fields as not known or"]},{"entry":[{},{},"otherwise special"]},{"entry":["union",{},{}]},{"entry":["{",{},{}]},{"entry":["short int","i;","\/\/ eFieldType_WORD"]},{"entry":["LONG","l;","\/\/ eFieldType_LONG"]},{"entry":["DWORD","dw;","\/\/ eFieldType_DWORD v"]},{"entry":["unsigned_int64","qw;","\/\/ eFieldType_QWORD"]},{"entry":["UUID","uuid;","\/\/ eFieldType_UUID"]},{"entry":["DATE","time;","\/\/ eFieldType_DATE"]},{"entry":["LPTSTR","psz;","\/\/"]},{"entry":["eFieldType_String",{},{}]},{"entry":["Binary","bin;","\/\/ eFieldType_Binary"]},{"entry":["Float","flt;","\/\/ eFieldType_Float"]},{"entry":["Double","dbl;","\/\/"]},{"entry":["eFieldType_Double",{},{}]},{"entry":["F1Collection ","coll;","\/\/"]},{"entry":["eFieldType_Collection",{},{}]},{"entry":["}Value;",{},{}]},{"entry":["Stream*","strm;","\/\/ eFieldType_Stream"]},{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Variant::tag is an identification tag of data field and variant::flag specifies the type of data field while Variant::value member variable stores each application's field value. One data field type is Collection. Collection object is an array of Variant objects. It can be used to represent a compound data fields.",{"@attributes":{"id":"p-0257","num":"0256"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 7"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"struct Collection",{},{}]},{"entry":[{},"{",{},{}]},{"entry":[{},"ULONG","cValues;",{}]},{"entry":[{},"struct_Variant**","aVar;","\/\/This array really contains"]},{"entry":[{},{},{},"cValues entries"]},{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"Another data field type that is worth exploring is Binary. Binary object can be used to represent a binary data as it is.",{"@attributes":{"id":"p-0259","num":"0258"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 8"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"struct Binary",{}]},{"entry":[{},"{",{}]},{"entry":[{},"ULONG","cb;"]},{"entry":[{},"LPBYTE","lpb; "]},{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"AO Interfaces","Each AO object has an AO COM interface. Each object must implement some of those interfaces to create certain capability or desired behavior that are expected by StructuredDelta.","IItem","This is the base interface of all application objects. It provides the identification service to StructuredDelta. Every object must have a unique ID, parent unique ID, display name, and item type information (eItemType_FOLDER, eItemType_CONTACT, etc). The unique ID is a unique string only in a given device. It is not persistent cross the Internet to other devices. The ID usually comes from the third party application database domain such a unique ID of a record.",{"@attributes":{"id":"p-0264","num":"0263"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 9"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"interface IItem : IUnknown"},{"entry":"{"},{"entry":"STDMETHOD_(LPCTSTR, GetUniqueID) ( ) const PURE;"},{"entry":"STDMETHOD_(LPCTSTR, GetParentUniqueID) ( ) const PURE;"},{"entry":"STDMETHOD_(LPCTSTR, GetDisplayName) ( ) const PURE;"},{"entry":"STDMETHOD_(enumItemType, GetItemType) ( ) const PURE;"},{"entry":"STDMETHOD_(BOOL, IsContainer) ( ) const PURE;"},{"entry":"STDMETHOD_(DATE, GetLastModificationTime) ( ) const PURE;"},{"entry":"STDMETHOD_(QWORD, GetSize) ( ) const PURE;"},{"entry":"STDMETHOD_(DWORD, GetFlags) ( ) const PURE; };"},{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"IItemContainer","This is the base interface of all application container objects (store, folder). These container objects must have this interface implemented so that StructuredDelta would recursively descend in them if they have IItemContainer capability.",{"@attributes":{"id":"p-0267","num":"0266"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 10"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"interface IItemContainer : IItem"},{"entry":"{"},{"entry":"STDMETHOD_(BOOL, ContainsItemType)( enumItemType eItemType )"},{"entry":"PURE;"},{"entry":"STDMETHOD_(BOOL, ContainsDataClass)( enumDataClass eDataClass )"},{"entry":"PURE;"},{"entry":"STDMETHOD_(enumSpecialFolderType, GetSpecialFolderType) ( ) PURE;"},{"entry":"STDMETHOD_(GUID, GetMappingGUID) ( ) PURE;"},{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"IErrorMsq","This is an error-reporting interface for every application object. It is used by StructuredDelta to query the error string after a failure. The AO should implement this on every object after the error occurs and before returning the control to StructuredDelta.",{"@attributes":{"id":"p-0270","num":"0269"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 11"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"interface IErrorMsg : IUnknown"},{"entry":"{"},{"entry":"STDMETHOD(GetErrorString) ( LPTSTR pszError, int iBufLen ) const"},{"entry":"PURE;"},{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"IEnumItems","This is an interface for collection enumeration, used by StructuredDelta to enumerate the objects of the third party application database. IEItemEnumFlags (eItemEnumFlags_FOLDER, eItemEnumFlags_ITEM, and eItemEnumFlags_ATTACHMENT) is used to enumerate only the requested type of objects.",{"@attributes":{"id":"p-0273","num":"0272"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 12"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"interface IEnumItems : IUnknown"},{"entry":"{"},{"entry":"STDMETHOD(ItemQueryStart) ( enumItemType type, long &ICount,"},{"entry":"eItemEnumFlags dwFlags ) PURE;"},{"entry":"STDMETHOD(ItemQueryNext) ( Item **ppItem ) PURE;"},{"entry":"STDMETHOD(ItemQueryFinish) ( ) PURE;"},{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"IFindItem","This is an interface for recursively finding object within the third party application database, used by StructuredDelta to find application object by its unique ID.",{"@attributes":{"id":"p-0276","num":"0275"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 13"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"interface IFindItem : IUnknown"},{"entry":"{"},{"entry":"STDMETHOD(FindStoreByID) ( LPCTSTR pszUniqueID, ItemContainer"},{"entry":"**ppFolder ) PURE;"},{"entry":"STDMETHOD(FindFolderByID) ( LPCTSTR pszUniqueID, ItemContainer"},{"entry":"**ppFolder ) PURE;"},{"entry":"STDMETHOD(FindItemByID) ( LPCTSTR pszUniqueID, Item **ppItem )"},{"entry":"PURE;"},{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"IFindItemByData","This is an interface for recursively finding the object that matches the search criteria data. The search criteria are represented as Collection that allows the multiple search field keys to be used during the search. The multiple objects may be found that match the search criteria. The interface also provides enumeration capability of the search results.",{"@attributes":{"id":"p-0279","num":"0278"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 14"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"interface IFindItemByData : IUnknown"},{"entry":"{"},{"entry":"STDMETHOD(FindByDataStart) ( enumItemType type, Variant*"},{"entry":"pSearchKey, int* pnFound ) PURE;"},{"entry":"STDMETHOD(FindByDataNext) ( LPTSTR pszEntryID, int cbBufSize )"},{"entry":"PURE;"},{"entry":"STDMETHOD(FindByDataFinish) ( ) PURE;"},{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"IModifyItem","This is an interface for Structured Delta to add, delete, and re-parent application data in the third party database during synchronization.",{"@attributes":{"id":"p-0282","num":"0281"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 15"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"interface IModifyItem : IUnknown"},{"entry":"{"},{"entry":"STDMETHOD(Add) ( BOOL bFolder, enumItemType type, "},{"entry":"Item **ppItem ) PURE;"},{"entry":"STDMETHOD(Delete) ( ) PURE;"},{"entry":"STDMETHOD(Move) ( ItemContainer * pDestFolder ) PURE;"},{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"IReadWrite","This is an interface for accessing, writing, and mapping the third party application data fields by StructuredDelta. It provides the capability of read and write data fields from and to the third party application database and the capability of mapping data field of the third party application to universal data format of the system of the present invention. Any object that has data fields and require field level synchronization must implement this interface.",{"@attributes":{"id":"p-0285","num":"0284"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 16"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"interface IReadWrite : IUnknown"},{"entry":"{"},{"entry":"STDMETHOD(Read) ( ) PURE;"},{"entry":"STDMETHOD(Commit) ( ) PURE;"},{"entry":"STDMETHOD(GetFieldData) ( enumFieldTag fieldTag, "},{"entry":"Variant **ppVariant ) PURE;"},{"entry":"STDMETHOD(ReleaseFieldData) ( Variant *pVariant ) PURE;"},{"entry":"\u2003STDMETHOD(SetFieldData) ( const Variant *pVariant ) PURE;"},{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"IAppObj","This is an AppObj only interface. It provides the capability of logon and logoff to the third party applications during synchronization. The data class filter mechanism is used by StructuredDelta to filter the enumeration of contained data classes (eDataClass_CONTACT, eDataClass_CALENDAR, etc).",{"@attributes":{"id":"p-0288","num":"0287"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 17"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003","interface IAppObj : IUnknown"]},{"entry":[{},"{"]},{"entry":[{},"STDMETHOD(Logon) ( HWND hWndParent ) PURE;"]},{"entry":[{},"STDMETHOD(Logoff) ( ) PURE;"]},{"entry":[{},"STDMETHOD(SetFilter) ( const VOID* pFilter, int BufLen ) PURE;"]},{"entry":[{},"STDMETHOD_(int, GetFilter) ( VOID* pFilter, int BufLen ) PURE;"]},{"entry":[{},"};"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"IModuleIdentity","This is an AppObj only interface. It provides DLL module identification information to the Manager object such as the name of the third party application, enum ID of this application, and the application installation detection support.",{"@attributes":{"id":"p-0291","num":"0290"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 18"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface IModuleIdentity : IUnknown"]},{"entry":[{},"{"]},{"entry":[{},"STDMETHOD(GetName) ( LPTSTR pszName, int iBufLen ) const"]},{"entry":[{},"PURE;"]},{"entry":[{},"STDMETHOD(GetAppl) ( Appl *pAppl ) const PURE;"]},{"entry":[{},"STDMETHOD(IsInstalled) ( BOOL *bIsInstalled ) const PURE;"]},{"entry":[{},"};"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"IItemTypeInfo","This is an AppObj only interface. It provides the information on the number of item types supported by AO, what type items are supported and the capabilities for a specific item type. This returns a DWORD containing bits set.",{"@attributes":{"id":"p-0294","num":"0293"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 19"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"interface IItemTypeInfo : IUnknown"},{"entry":"{"},{"entry":"STDMETHOD(GetSupportedTypesCount) ( int &iCount ) PURE;"},{"entry":"STDMETHOD(GetSupportedTypeInfo) ( int iIndex,"},{"entry":"enumItemType &type, LPTSTR pszTypeName, int iBufLen ) PURE;"},{"entry":"STDMETHOD(GetItemTypeCaps) ( enumItemType type, DWORD"},{"entry":"&dwFlags ) PURE;"},{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"IDataClassInfo","This is a CAppObj only interface. It provides the information on the number of data classes that are supported by the application object and what the data classes are supported",{"@attributes":{"id":"p-0297","num":"0296"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 20"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface IDataClassInfo : IUnknown"]},{"entry":[{},"{"]},{"entry":[{},"STDMETHOD(GetCount) ( int *piCount ) PURE;"]},{"entry":[{},"STDMETHOD(GetDataClass) ( int iIndex, enumDataClass"]},{"entry":[{},"*peDataClass ) PURE;"]},{"entry":[{},"};"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"IDataFileInfo","This is a CAppObj only interface, it provides information on the number of database files and database filenames supported by AO to avoid being synched twice by application sync and file-set sync.",{"@attributes":{"id":"p-0300","num":"0299"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 21"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface IDataFileInfo : IUnknown"]},{"entry":[{},"{"]},{"entry":[{},"STDMETHOD(GetDataFileCount) ( int *piCount ) PURE;"]},{"entry":[{},"STDMETHOD(GetDataFilePath) ( int iIndex, LPTSTR"]},{"entry":[{},"pszFilePath, int iBufLen ) PURE;"]},{"entry":[{},"};"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"IItemFieldMap","This is a CAppObj only interface that is used by StructuredDelta to query the data fields of given application object. For example, what are data fields in application object called eItemType_CONTACT?",{"@attributes":{"id":"p-0303","num":"0302"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 22"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"interface IItemFieldMap : IUnknown"},{"entry":"{"},{"entry":"STDMETHOD(FieldQueryStart) ( const enumItemType &type,"},{"entry":"int &iCount) PURE;"},{"entry":"STDMETHOD(FieldQueryNext) ( enumFieldTag &field, LPTSTR"},{"entry":"pszName, int iBufLen, LPTSTR pszType, int iTypeBufLen )PURE;"},{"entry":"STDMETHOD(FieldQueryFinish) ( ) PURE; }"},{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"IFolderInfo","This is a CAppObj only interface, used by StructuredDelta to obtain the special and default folders' unique IDs and UUIDs.",{"@attributes":{"id":"p-0306","num":"0305"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 23"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface IFolderInfo : IUnknown"]},{"entry":[{},"{"]},{"entry":[{},"STDMETHOD(GetSpecialFolderID) ( enumSpecialFolderType"]},{"entry":[{},"eFolder, LPTSTR pszUniqueID, int iBufLen ) PURE;"]},{"entry":[{},"STDMETHOD(GetDefaultFolderID) ( enumItemType type,"]},{"entry":[{},"LPTSTR pszUniqueID, int iBufLen ) PURE;"]},{"entry":[{},"STDMETHOD(MapFolderGUID) ( UUID uuidFolder, LPTSTR"]},{"entry":[{},"pszUniqueID, int iBufLen ) PURE;"]},{"entry":[{},"};"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"IFastSync","This is a CAppObj only interface that is used by StructuredDelta to query if the given AO also provides FastSync service or not. FastSync is a DLL component that is written using the third party APIs and loaded into the third party application to receive the changes in database while users are operating the application. It is used to speed up the synchronization performance by syncing only the objects that are known to IFastSync component.",{"@attributes":{"id":"p-0309","num":"0308"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 24"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"interface IFastSync : IUnknown"},{"entry":"{"},{"entry":"STDMETHOD(GetFastSync) ( enumDataClass eDataClass, BOOL*"},{"entry":"pbFastSync ) PURE;"},{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Synch Notify","This is a CAppObj only interface that is called by Manager to notify the third party application the state of synchronization: start, finished, or reset so that the application can prepare itself accordingly.",{"@attributes":{"id":"p-0312","num":"0311"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 25"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface ISynchNotify : IUnknown"]},{"entry":[{},"{"]},{"entry":[{},"STDMETHOD(SynchNotify) ( enumSynchNotify eNotify ) PURE;"]},{"entry":[{},"};"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Server AO","Server Application Objects share many characteristics with desktop application objects, including support for reading and mapping to the universal record structure set forth above.","Nevertheless, among various devices incorporated into the system of the present invention, each application object database will be quite different. For example, the Palm\u00ae database on the device is really just a memory space with records laid out sequentially in memory. In a web portal-type application, the application object may be an Oracle database. Server application objects may generally have less difficult tasks since the applications supported are generally either devices providing their own change data output, (such as Palm\u00ae type PDA's), or which do not have a great deal of data to export (such as cell phones, having only name and number information).","Nevertheless, each application object must support all calls defined in a class interface definition as follows:",{"@attributes":{"id":"p-0317","num":"0316"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 26"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["FUNCTION","DESCRIPTION"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Open","Perform an initialization of the device"]},{"entry":[{},"before data retrieval functions are"]},{"entry":[{},"called."]},{"entry":["Close","Done with database calls, cleanup if"]},{"entry":[{},"necessary."]},{"entry":["Get First Modified Record","Get the first modified record from the"]},{"entry":[{},"device and insert into application"]},{"entry":[{},"object."]},{"entry":["Get Next Modified Record","Get the next modified record from the"]},{"entry":[{},"device and insert into the application"]},{"entry":[{},"object."]},{"entry":["Add Record","Add a record into the application object"]},{"entry":[{},"database."]},{"entry":["Update Record","Update a record."]},{"entry":["Delete Record","Delete a record in the application"]},{"entry":[{},"object database."]},{"entry":["Set Device Records","A function called during the"]},{"entry":[{},"synchronization manager to send a"]},{"entry":[{},"bytestream to the application object for"]},{"entry":[{},"interpretation. The bytestream will"]},{"entry":[{},"contain a list of records to add to the"]},{"entry":[{},"application object modified records list."]},{"entry":[{},"At a later point in time, such records"]},{"entry":[{},"will be retrieved by the Get First"]},{"entry":[{},"Modified Record\/Get Next Modified"]},{"entry":[{},"Record functions."]},{"entry":["Get Device Records","For records bound to the device, this"]},{"entry":[{},"call gets a bytestream that contains a"]},{"entry":[{},"list of records to add back to the"]},{"entry":[{},"device. There is an outbound record list"]},{"entry":[{},"that is saved until this call is finished, at"]},{"entry":[{},"which time the sync server will be"]},{"entry":[{},"finished with the application object."]},{"entry":["Set Device Response","A function used to modify or repair a"]},{"entry":[{},"record input saved in the application"]},{"entry":[{},"object store that was sent to the device"]},{"entry":[{},"in the Get Device Records call, such as"]},{"entry":[{},"a record ID for a record. If 10 records"]},{"entry":[{},"were sent to the device during the Get"]},{"entry":[{},"Device Records call, one would expect"]},{"entry":[{},"to see 10 records coming back in"]},{"entry":[{},"during this function call."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"As noted above, because each application object database is different, the calling convention and the application object itself will likewise be different. The calling convention for a Palm\u00ae device's sync manager application object is given in the following pseudo-code:",{"@attributes":{"id":"p-0319","num":"0318"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 27"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Call AO::Open"]},{"entry":[{},"Call AO::WriteRecords"]},{"entry":[{},"Start synchronization process"]},{"entry":[{},"While more records in AO Data Object"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Call AO::GetFirstModifiedRecord( )"]},{"entry":[{},"Call AO::GetNextModifiedRecord( )"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"END"]},{"entry":[{},"IF new records THEN"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Call AO::AddRecord( )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IF deleted records THEN"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Call AO::DeleteRecord( )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IF update record THEN"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CALL AO::UpdateRecord( )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Call AO::Close"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"As shown therein, the calling convention is designed to be integrated with the Palm's\u00ae own sync manager.","A second example provided below shows mapping of a portion of a web portal's contact database:",{"@attributes":{"id":"p-0322","num":"0321"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 28"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"MappingItem CContactTable::m_FieldMap[\u2009] ="},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["{1,","eFieldTag_Contact_FirstName,","\u201cfirstname\u201d},"]},{"entry":["{1,","eFieldTag_Contact_MiddleName,","\u201cmiddlename\u201d},"]},{"entry":["{1,","eFieldTag_Contact_LastName,","\u201clastname\u201d},"]},{"entry":["{1,","eFieldTag_Contact_Title,","\u201ctitle\u201d},"]},{"entry":["{1,","eFieldTag_Contact_Suffix,","\u201csuffix\u201d},"]},{"entry":["{1,","eFieldTag_Contact_Anniversary,","\u201canniversary\u201d},"]},{"entry":["{1,","eFieldTag_Contact_Birthday,","\u201cbirthday\u201d},"]},{"entry":["{1,","eFieldTag_Contact_AssistantName,","\u201cassistantname\u201d},"]},{"entry":["{1,","eFieldTag_Contact_Children,","\u201cchildren\u201d},"]},{"entry":["{1,","eFieldTag_Contact_CompanyName,","\u201ccompanyname\u201d},"]},{"entry":["{1,","eFieldTag_Contact_Department,","\u201cdepartment\u201d},"]},{"entry":["{1,","eFieldTag_Contact_FTPSite,","\u201cftpsite\u201d},"]},{"entry":["{1,","eFieldTag_Contact_Gender,","\u201cgender\u201d},"]},{"entry":["{1,","eFieldTag_Contact_JobTitle,","\u201cjobtitle\u201d},"]},{"entry":["{1,","eFieldTag_Contact_ManagerName,","\u201cmanagername\u201d},"]},{"entry":["{1,","eFieldTag_Contact_NickName,","\u201cnickname\u201d},"]},{"entry":["{1,","eFieldTag_Contact_Office,","\u201coffice\u201d},"]},{"entry":["{1,","eFieldTag_Contact_Profession,","\u201cprofession\u201d},"]},{"entry":["{1,","eFieldTag_Contact_Spouse,","\u201cspouse\u201d},"]},{"entry":["{1,","eFieldTag_Contact_SelectedMailingAddress,","\u201cselectedmailingaddress\u201d}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"};"},{"entry":"int CContactTable::m_nNumFields ="},{"entry":"sizeof(m_FieldMap)\/sizeof(MappingItem);"},{"entry":"HRESULT CPortalAddrOCI::InsertRecord( MappingItem theMap[ ], int numFields,"},{"entry":"CDataAccessor *pInsertItem, CF1ItemUniversal *pUnivItem, bool bForceCreate )"},{"entry":"{"},{"entry":"bool bHasData = SetRecordFields( theMap, numFields, pInsertItem, pUnivItem );"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"f( bHasData || bForceCreate )"]},{"entry":[{},"{"]},{"entry":[{},"\/\/ Insert the record into the database and execute the command"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"pInsertItem\u2212>InsertRow(0);"]},{"entry":[{},"pInsertItem\u2212>Exec( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"return S_OK;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The above example of mapping the contact field files maps contact fields from a particular web contact information database to fields in the universal record format from the master list header file (pio_types.h) in the system of the present invention. This mapping is for a specific contact table and it should be understood that other information, such as phone numbers, e-mail addresses, and other contact information may be stored in a separate table.","Once data is extracted from a particular application, the server application object must then convert the information into the universal record format which can be utilized by other server device engines to take content information into their own particular application.","Universal Record Format","The universal record format is used by each server device engine to handle various tasks of encapsulating records in a common format, comparing records, creating and holding differences between records, and other tasks of synchronization.","The universal record format allows the application objects to support a wide range of extensible application item types such as contacts, calendar, mail, bookmarks, and the like. Flexible type name and value associations permit synchronization without regard to individual vendor application information formats. Each application object encapsulates mapped knowledge from the vendor unique format to the universal format of the present invention. As such, an application object can be designed to support any combination of application and binary information types. In essence, application objects can be designed to support a vendor application using only binary file synchronization if the internal format of the application is not known.","Server application objects can also be designed to create collections. For example, if the user wishes to create a \u201cmy pictures\u201d collection which consists of some collection of information and synchronize this collection of information, such an arbitrary grouping of classes of information into appropriate representations is supported.","Because the connector layer of the interfaces to the actual storage with a vendor application varies with application type, application access methods can include, but are not limited to, disk or database access, network protocols, wireless device protocols, and the like.","The Universal Records Format and the Universal Field Format class definitions are given below:",{"@attributes":{"id":"p-0331","num":"0330"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 29"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"typedef map < enumFieldTag, CUniversalField, less_enumFieldTag >"},{"entry":"UniversalRecordMap;"},{"entry":"typedef UniversalRecordMap::value_type UniversalRecordPair;"},{"entry":"typedef UniversalRecordMap::iterator UniversalRecordIterator;"},{"entry":"typedef UniversalRecordMap::const_iterator"},{"entry":"ConstUniversalRecordIterator;"},{"entry":"class CUniversalRecord"},{"entry":"{"},{"entry":"private:"},{"entry":"UniversalRecordMap recordMap_;"},{"entry":"public:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"bool conflicts(const CUniversalRecord& rhs);"]},{"entry":[{},"bool add(const CUniversalRecord &rhs);"]},{"entry":[{},"bool subtract(const CUniversalRecord& rhs);"]},{"entry":[{},"CUniversalRecord( );"]},{"entry":[{},"CUniversalRecord( const CUniversalRecord& rhs );"]},{"entry":[{},"virtual ~CUniversalRecord( );"]},{"entry":[{},"\/\/ add this element"]},{"entry":[{},"HRESULT insert( enumFieldTag eId, long value,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"enumFieldDataFlag flag = eFieldDataFlag_Normal);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HRESULT insert( enumFieldTag eId, LPCTSTR value,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"enumFieldDataFlag flag = eFieldDataFlag_Normal);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HRESULT insert( enumFieldTag eId, DATE value,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"enumFieldDataFlag flag = eFieldDataFlag_Normal);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HRESULT insert( enumFieldTag eId, string value,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"enumFieldDataFlag flag = eFieldDataFlag_Normal);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT insert( UniversalRecordPair p );"]},{"entry":[{},"CUniversalRecord exclusiveLeftWins( CUniversalRecord& rhs );"]},{"entry":[{},"CUniversalRecord inclusiveLeftWins( CUniversalRecord& rhs );"]},{"entry":[{},"bool removeSame(const CUniversalRecord &rhs);"]},{"entry":[{},"bool Find( const enumFieldTag eId, CUniversalField &field );"]},{"entry":[{},"UniversalRecordMap::iterator find( const enumFieldTag eId ) {"]},{"entry":[{},"return recordMap_.find(eId); }"]},{"entry":[{},"UniversalRecordMap::iterator begin( ) { return"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"recordMap_.begin( ); }"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"UniversalRecordMap::iterator end( ) { return"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"recordMap_.end( ); }"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"bool empty( ) { return"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"recordMap_.empty( ); }"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"long size( ) { return"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"recordMap_.size( ); }"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"UniversalRecordMap::iterator erase(UniversalRecordMap::iterator&"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"it) { return recordMap_.erase(it); }"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"void clear( ) { recordMap_.clear( ); }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The UniversalField Structure",{"@attributes":{"id":"p-0333","num":"0332"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 30"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"class CUniversalField"]},{"entry":[{},"{"]},{"entry":[{},"public:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"enum eUniversalField"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"eUF_Unknown,"]},{"entry":[{},"eUF_Long,"]},{"entry":[{},"eUF_String,"]},{"entry":[{},"eUF_Date,"]},{"entry":[{},"eUF_Blob"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"};"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"protected:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"eUniversalField typeId_;"]},{"entry":[{},"enumFieldTag fieldId_;"]},{"entry":[{},"enumFieldDataFlag flag_;"]},{"entry":[{},"size_t len_;"]},{"entry":[{},"union"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"long l;"]},{"entry":[{},"DATE d;"]},{"entry":[{},"TCHAR* pCh;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} value_;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CUniversalField( );"]},{"entry":[{},"CUniversalField( const CUniversalField& rhs );"]},{"entry":[{},"CUniversalField( enumFieldTag itemId, long value,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"enumFieldDataFlag flag = eFieldDataFlag_Normal);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CUniversalField( enumFieldTag itemId, DATE value,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"enumFieldDataFlag flag = eFieldDataFlag_Normal);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CUniversalField( enumFieldTag itemId, LPCTSTR value,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"enumFieldDataFlag flag = eFieldDataFlag_Normal);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CUniversalField( enumFieldTag itemId, string blob,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"enumFieldDataFlag flag = eFieldDataFlag_Normal);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"~CUniversalField( );"]},{"entry":[{},"bool operator==( const CUniversalField& rhs ) const;"]},{"entry":[{},"bool operator!=( const CUniversalField& rhs ) const { return"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"!operator==(rhs); }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CUniversalField& operator=( const CUniversalField& rhs);"]},{"entry":[{},"eUniversalField getType( ) const { return typeId_; }"]},{"entry":[{},"enumFieldTag getFieldID( ) const { return fieldId_; }"]},{"entry":[{},"enumFieldDataFlag getFlag( ) const { return flag_; }"]},{"entry":[{},"size_t getLength( ) const {return len_; }"]},{"entry":[{},"LPCTSTR getString( ) const { ASSERT( eUF_String =="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"typeId_); return value_.pCh; }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"long getLong( ) const { ASSERT( eUF_Long =="]},{"entry":[{},"typeId_); return value_.l; }"]},{"entry":[{},"DATE getDate( ) const { ASSERT( eUF_Date =="]},{"entry":[{},"typeId_); return value_.d; }"]},{"entry":[{},"string getBlob( ) const { ASSERT( eUF_Blob =="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"typeId_); return string(value_.pCh,len_); }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"void get( LPCTSTR& p ) const { ASSERT( eUF_String =="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"typeId_); p = value_.pCh; }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"void get( long& l) const { ASSERT( eUF_Long =="]},{"entry":[{},"typeId_); l = value_.l; }"]},{"entry":[{},"void get( DATE& d) const { ASSERT( eUF_Date =="]},{"entry":[{},"typeId_); d = value_.d; }"]},{"entry":[{},"void get( string& b) const { ASSERT( eUF_Blob =="]},{"entry":[{},"typeId_);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"b.assign(value_.pCh,len_); }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"bool isString( ) const { return typeId_== eUF_String; }"]},{"entry":[{},"bool isLong( ) const { return typeId_== eUF_Long; }"]},{"entry":[{},"bool isDate( ) const { return typeId_== eUF_Date; }"]},{"entry":[{},"bool isBlob( ) const { return typeId_== eUF_Blob; }"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"An example of how data is removed from one particular application data type and converted into the universal record format is given below for an Oracle database:",{"@attributes":{"id":"p-0335","num":"0334"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 31"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"#include \u201cstdafx.h\u201d"},{"entry":"#include <string>"},{"entry":"using namespace std;"},{"entry":"#include \u201cF1ItemUniversal.h\u201d"},{"entry":"#include \u201coci.h\u201d"},{"entry":"#include \u201cOCIDefs.h\u201d"},{"entry":"#include \u201cOCIConnect.h\u201d"},{"entry":"#include \u201cOCISession.h\u201d"},{"entry":"#include \u201cOCIColumn.h\u201d"},{"entry":"#include \u201cOCICursor.h\u201d"},{"entry":"#include \u201cDataAccessor.h\u201d"},{"entry":"#include \u201cUniversalMapper.h\u201d"},{"entry":"#include \u201cUniversalRecord.h\u201d"},{"entry":"#include \u201cF1Util.h\u201d"},{"entry":"#include \u201cBaseAOSTableOCI.h\u201d"},{"entry":"\/*"},{"entry":"* Function: MapFields"},{"entry":"* Description: Map fields from an Oracle database record into an UniversalRecord"},{"entry":"format."},{"entry":"*\/"},{"entry":"void CBaseAOSTableOCI::MapFields ( CDataAccessor *pAccessor, MappingItem"},{"entry":"theMap[ ], int numFields, CUniversalRecord &univRec )"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"string sValue;"]},{"entry":[{},"DATE dtValue;"]},{"entry":[{},"LONG lValue;"]},{"entry":[{},"double dValue;"]},{"entry":[{},"for( int inx=0; inx<numFields; inx++ )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"enumFieldTag fieldID = theMap[inx].m_universalFieldID;"]},{"entry":[{},"switch( F1PropType( fieldID ) )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"case eFieldType_Binary:"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/\/ to fill properly, 1st name and last name should already be assigned"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CUniversalField emailField;"]},{"entry":[{},"string sValue;"]},{"entry":[{},"if ( SUCCEEDED(BuildEmailField( pAccessor, sValue,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"emailField )) )"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"univRec.insert ( fieldID, emailField.getBlob( ) );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"break;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"case eFieldType_String:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if( pAccessor\u2212>GetFieldvalue( fieldID, sValue ) )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if ( 0 == ::_tcslen(sValue.c_str( )) )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"continue;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"univRec.insert( fieldID, sValue.c_str( ) );"]},{"entry":[{},"}"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case eFieldType_DATE:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if( pAccessor\u2212>GetFieldValue( fieldID, dtValue ) )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"univRec.insert( fieldID, dtValue );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"break;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case eFieldType_DWORD:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if( pAccessor\u2212>GetFieldValue( fieldID, lValue ) )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"univRec.insert( fieldID, lValue );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"break;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case eFieldType_Double:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if( pAccessor\u2212>GetFieldValue( fieldID, dValue ) )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"univRec.insert( fieldID, dValue );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"break;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"HRESULT CBaseAOSTableOCI::InsertRecord( MappingItem theMap[ ], int numFields,"},{"entry":"CDataAccessor *pInsertItem, CF1ItemUniversal *pUnivItem, bool bForceCreate )"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"bool bHasData = SetRecordFields( theMap, numFields, pInsertItem, pUnivItem"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":");"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if( bHasData || bForceCreate )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"pInsertItem\u2212>InsertRow(0);"]},{"entry":[{},"pInsertItem\u2212>Exec( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"return S_OK;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"\/*"},{"entry":"* Function: SetRecordFields"},{"entry":"* Description: Map fields from an UniversalRecord format into an Oracle database"},{"entry":"record (pInsertItem)"},{"entry":"*\/"},{"entry":"bool CBaseAOSTableOCI::SetRecordFields( MappingItem theMap[ ], int numFields,"},{"entry":"CDataAccessor *pInsertItem, CF1ItemUniversal *pUnivItem )"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"bool bHasData = false;"]},{"entry":[{},"CUniversalField field;"]},{"entry":[{},"for( int inx=0; inx<numFields; inx++ )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"enumFieldTag fieldID = theMap[inx].m_universalFieldID;"]},{"entry":[{},"BOOL bExists = pUnivItem\u2212>m_record.Find( fieldID, field );"]},{"entry":[{},"if( bExists )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"bHasData = true;"]},{"entry":[{},"if( field.isBlob( ) )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"string blob = field.getBlob( );"]},{"entry":[{},"LPCTSTR szEmailAddr ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"GetAddressFromRecipients((F1RECIPIENTS*)blob.c_str( ));"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if( szEmailAddr && *szEmailAddr != NULL )"]},{"entry":[{},"pInsertItem\u2212>SetFieldValue( fieldID, (string)szEmailAddr );"]},{"entry":[{},"else"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"bHasData = false;"]},{"entry":[{},"continue;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else if( field.isString( ) )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"string sValue = field.getString( );"]},{"entry":[{},"if( !sValue.empty( ) )"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pInsertItem\u2212>SetFieldValue( fieldID, sValue );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else if( field.isLong( ) )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LONG nValue = field.getLong( );"]},{"entry":[{},"pInsertItem\u2212>SetFieldValue( fieldID, nValue);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else if( field.isDate( ) )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DATE dValue = field.getDate( );"]},{"entry":[{},"if( dValue )"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pInsertItem\u2212>SetFieldValue( fieldID, dValue );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} \/\/ if( bExists )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} \/\/ For all fields"]},{"entry":[{},"return bHasData;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"While the above-identified code is specific to, for example, an Oracle database, one of average skill in the art will readily recognize that the technique utilized above may be adapted to other types of databases containing records and fields of interest. In the above code examples, all fields which are mapped from a particular application are mapped to fields in the master mapping file.","Management Server","In order to provide security and identification of particular users in an Internet-implemented synchronization system, a management server may be provided in the system of the present invention. The management server is a centralized server which controls behavior and characteristics of the entire network of device engines across all users.",{"@attributes":{"id":"p-0339","num":"0338"},"figref":["FIG. 14","FIG. 14","FIGS. 15-17"],"b":["1410","1450","1410","1415","1420","1420","1425","1430"]},"The management server communicates using hypertext transfer protocol (HTTP) which may be implemented with a secure sockets layer (SSL) to ensure security.","In particular, the management server supports an authentication interface that requires each device engine to authenticate with the management server before performing synchronization. Certain storage server implementations may utilize locking semantics to control read and write access to storage for multiple device engines. For example, in a generic FTP request, if two device engines attempt to connect to the same data at the same time, there must be some form of locking control to prevent device engines accessing the same data at the same time. In this instance, the management server controls the device engine acquisition, renewal, and releasing of locks against data stored in the network.","Each device engine is uniquely identified and tracked by the management server. This allows for tailoring behavior between the management server and specific types of storage systems and device engine components. All device engine components are tagged and version stamped for management via the management server.","Device actions can request updated copies of individual device engine components, permitting self-update and configuration of device engine systems. This permits minimal download designs for device engines that are on low bandwidth connections enabling the device engines to download additional required components at a later time.","In a further aspect of the system, a value added component may be provided where the management server can support client's advertising mechanisms, enabling the display of banner or similar advertising on a device engine system without the need for a web browser. Cycling of advertisements, statistic collection, and the like, are managed via management server protocols. Online purchase and subscription mechanisms are also supported using the management server protocol.","The management server further supports the accounting, sign-up registration, device edition, storage server selection, and similar functions for each user in the system. In one embodiment, the management server may retain password and encryption information for a given user account. In a second embodiment, such information is not retained. The second embodiment provides the advantage that users may feel more secure if the maintainer of the management server is not in possession of the password to access data in the user's account.","Further information with respect to the management server and the data flow from the management server to other components of the system of the present invention will become apparent with respect to the discussion of the process flow and data flow diagrams in .",{"@attributes":{"id":"p-0347","num":"0346"},"figref":"FIG. 17"},"As shown in , following a welcome request , a user is allowed to sign out which enables an add user module , and subsequently enables an add device module . If sign-up is not requested, information may be provided via module .","As indicated in , the add user module  adds user records to the user in device database . Additionally, the add device module  adds users and devices to the user device database . A device list , and a device engine download and update database , provide selection data for the add device module . The account authentication module  receives input both directly from a user log-in from the welcome screen at  and from the add device module .","Once an account is authenticated and confirmed, the administrator of the system of the present invention having a private data store at  may choose to provide a web desktop  which allows access to a user's records such as file , e-mail , calendar , contacts , notes , and tasks . The information will be culled from a provider database  which will be synched in accordance with the system of the present invention as previously described. In essence, the provider database  accesses data from the device engines , which include, as discussed above, the storage server, each individual device engine , and a settings database .","Other portions of the management server include the locking modules for beginning a sync , continuing a sync , and ending a sync , and for updating user information including modifying a user , adding devices , removing devices , and modifying devices .","Storage Server","Shown in  is the storage server . While storage server  may include a generic storage model accessible through any number of standard Internet protocols, in accordance with the present invention, a flexible storage architecture is provided that permits various standard implementations of the system of the present invention. This allows deployment of network services without installation of new server applications and can be responsible for communicating change information between multiple device engines in a consistent fashion.","One or more storage servers  may be used to communicate transaction amongst a collection of devices. Each user's personal information network is represented by a unique account within its own data package storage section. The storage server  maintains persistent store collection of data packages which is, at a minimum, enough data packages to be capable of synchronizing the most out-of-date system in a user's given information network or add information to new devices which are provided in the network. Additional data packages can be maintained to permit rollback of previous versions of information. The storage server can automatically dispose of older data package storage and can support aging of an inactive accounts.","Each storage server  may be implemented using a variety of implementations including a standard FTP server for any operating system platform. The storage server can be implemented using HTTP protocols for increased efficiency and firewall avoidance. The storage server may be implemented using techniques for local storage such as database access or single file storage of a user's entire file system tree. The storage server  may utilize the stored foreign protocol model for moving copies of data packages to other storage servers in the system. In one embodiment, the storage server can allow tunneling of information using an alternative protocol to other storage servers in cases where firewall prevents originating protocol. For example, a storage server can relay an FTP traffic inside an HTTP protocol. Storage servers may include their own locking semantics to arbitrate multiple device engine access to the same server without the need for a separate management server. Each device engine can access only a specific user's data package storage area even though the storage server  may maintain a larger number of data packages across a large number of users. This allows for increased scaling when the storage server is implemented using file system techniques.","In one aspect, the storage server is implemented using standard FTP or HTTP connections for each operation. HTTP is composed of request response pairs. All requests are supposed to be posting commands. Parameters can be set in the form known as \u201capplication\/X-WWW-form-URLENCODED\u201d. The encoding is specified as in RFC1866. Functions for the storage server include testing if the storage server can reach other users which will retrieve a simple text string, a \u201cget\u201d command which transfers the contents of a file as in a binary stream of byes; a put command as a binary stream of data to the storage server, a directory listing command, a remove command, a rename command, an exist command, and the like.","Pull Synchronization",{"@attributes":{"id":"p-0358","num":"0357"},"figref":["FIG. 15","FIG. 15","FIG. 16"]},"A pull synchronization as illustrated in  is always performed prior to a push synchronization. This allows the device engine to know whether synchronization of its own data is necessary.","Each device has its own triggering mechanism for initiating synchronization. Some devices, such as Windows clients and Palm\u00ae pilots are triggered manually when the user presses a \u201csync\u201d button. Other devices, such as a cellular telephone, may be triggered automatically after another device completes a sync. Regular, time-based triggers are supported as well. A web-based application portal will sync when a user logs into the website security authorization mechanism, and may optionally sync on a log-out of the user or on the session time-out, but only if the user has changed data during the session.","For each sync, the triggering event specifies which application types are to sync for the device. This enables a triggering event to trigger only a sync for a particular application type. The management server can specify that no sync is needed for a particular type of application to minimize traffic to the storage server. Syncs may be triggered via an HTTP request to the server. This request holds information about which device to sync and the user log-in information is bounced to the management server for authorization and validation. Syncs may be triggered by sending an HTTP request to the server and passing the authentication information in the data portion of the request to the management server. Each device may include a servlet that is responsible for retrieving the request and ensuring its proper format before passing the synchronization request on to the server.","The device name and device class uniquely identify a particular device type that is being synchronized, and is contained in the management server. Each user has one or more device entries in the management server authorization records and each device name is unique for this user's space. For example, if a user has five devices with his or her own personal identification number, there will be five authorization records. There may be two Windows devices, two different Palm\u00ae devices and a web service portal, each having their own personal identification number.","As shown in , the pull synchronization process starts at an idle state  when the triggering event, described above, triggers a synchronization request. The synchronization request is confirmed at  and if the request is verified, a connection is made to the storage server at step . Once a connection is established, the connection to the management server is made at step  to authenticate the user identification via the management server. If authentication is successful, the management server may initiate a management server lock on the storage server so that no conflicting device engines may couple to the same data at the same time. A failure at any of the steps - will return the system to its idle state . Once the engine server lock is acquired, the storage server will be checked to determine whether a new version of the data exists on the storage server at step . If no new version exists, the synchronization process ends.","If a new version of the data exists, the device engine will retrieve the difference information at step  \u201cto get \u0394.\u201d","Once a \u0394 is retrieved, conflicts are resolved at step . The resolve conflicts step allows a user to resolve conflicts to multiple types of data which have been changed on both the server portion of the device and in the local data.","Once the conflicts have been resolved at step , the \u0394's are applied at step . The apply \u0394 step  allows for filters and mappings to be accounted for on the local device engine side of the system. As shown at steps , , , and , the \u0394 may include updates at the item level , application level , device level , or network level . In each of the aforementioned steps, a loop back to the \u0394 retrieval step  is provided. When no further \u0394's are available, the management server lock is released at step .","The foregoing description of a pull synchronization is further described in the following pseudo-code:",{"@attributes":{"id":"p-0368","num":"0367"},"tables":{"@attributes":{"id":"TABLE-US-00032","num":"00032"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 32"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"*SymbolicSyncEngine::Sync"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Download Remote File System"]},{"entry":[{},"For each Symbolic app in the file system's list of symbolic apps"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CFDESymbolicSyncEngine::SyncSymbolicApp"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Create a structured delta object -- CStructuredDelta"]},{"entry":[{},"delta(...)"]},{"entry":[{},"Compare local and remote versions of deltas SODs),"]},{"entry":[{},"if not the same then"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"while localVersion != remoteVersion"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"download remote version"]},{"entry":[{},"\/\/ apply delta (change log)"]},{"entry":[{},"delta.ApplyChangeLog"]},{"entry":[{},"\/\/ See details below"]},{"entry":[{},"increment local version"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"end while"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"nothing to do"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end if"]},{"entry":[{},"if any local items (change logs) are unsent then"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"delta\u2212>ApplyUnsentItems (Reads the changes"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"[JCL where applied?]"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end if"]},{"entry":[{},"\/\/ Generate a new change log for the device:"]},{"entry":[{},"delta\u2212>delta.GenerateChangeLog(... strChangeLogFile"]},{"entry":[{},"...)"]},{"entry":[{},"\/\/ See details below"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"FTP it back up to Storage Server"]},{"entry":[{},"Update the local version number"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"end \/\/ SymbolicSyncEngine::SyncSymbolicApp"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end \/\/ CFDESymbolicSyncEngine::Sync"]},{"entry":[{},"CStructuredDelta::ApplyChangeLog"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Set up m_pAppObj; \/\/ IFAO pointer"]},{"entry":[{},"Set up m_pAOS; \/\/ IAOS pointer"]},{"entry":[{},"Other set up (statistics, time to complete, etc.)"]},{"entry":[{},"Read the change log and ..."]},{"entry":[{},"ApplyChangeListToAOS(f1Changes)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"for each item in list"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ApplyItemToAOS \/\/ (Does"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"m_pAOS...AddRecord\/UpdateRecord\/DeleteRecord)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"end for"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end for end \/\/ ApplyChangeListToAOS"]},{"entry":[{},"If not doing a full sync, also add changes from this file to"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"apply these to m_F1Changes"]},{"entry":[{},"end \/\/CStructuredDelta::ApplyChangeLog"]},{"entry":[{},"CStructuredDelta::GenerateChangeLog"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Set up m_pAppObj; \/\/ IFAO pointer"]},{"entry":[{},"Set up m_pAOS; \/\/ IAOS pointer"]},{"entry":[{},"Other set up (statistics, time to complete, etc.)"]},{"entry":[{},"\/\/ Set up m_deviceChanges by call to:"]},{"entry":[{},"CStructuredDelta::CreateDeviceChangeList"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Create a CF1Item* pItem"]},{"entry":[{},"\/\/ Iterate FAO modifications:"]},{"entry":[{},"\u2003for (m_pAppObj\u2212>GetFirstModified(pItem),"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"m_pAppObj\u2212>GetNextModified(pItem))"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"cast pItem to --> CF1ItemUniversal* pUnitItem"]},{"entry":[{},"\/\/ Do certain things based on whether the operation"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"is an add, delete, or update."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ Then in each case, call:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CStructuredDelta::GetMatchingItemFromAOS"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ First get by F1ID"]},{"entry":[{},"m_pAOS\u2212>GetRecordByF1ID"]},{"entry":[{},"\/\/ See if we have an AppID, if so:"]},{"entry":[{},"m_pAOS\u2212>GetRecordByAppID"]},{"entry":[{},"\/\/ If we can build search key on it"]},{"entry":[{},"iterate m_pAOS\u2212>GetFirstMatchingRecord"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/ m_pAOS\u2212>GetNextMatchingRecord"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"end \/\/"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CStructuredDelta::GetMatchingItemFromAOS"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"end for"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end \/\/ CStructuredDelta::CreateDeviceChangeList"]},{"entry":[{},"if m_deviceChanges is not empty"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ reconcile (compare) change lists while writing to AOS"]},{"entry":[{},"CStructuredDelta::ReconcileChangeLists"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"For each item in m_deviceChanges..."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"If we can find it in m_F1Changes"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Reconcile the device item and the f1 item"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end if"]},{"entry":[{},"ApplyItemToAOS \/\/ (Does"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"m_pAOS...AddRecord\/UpdateRecord\/DeleteRecord)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"end for"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end \/\/ CStructuredDelta::ReconcileChangeLists"]},{"entry":[{},"\/\/ Create a new change log (F1 delta package)"]},{"entry":[{},"ApplyChangeListToF1(m_deviceChanges)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"m_deviceChange.Store"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Fires off its own whole world, see"]},{"entry":[{},"F1ItemList.cpp"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"end \/\/ m_deviceChange.Store"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end \/\/ ApplyChangeListToF1(m_deviceChanges)"]},{"entry":[{},"report stats"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end if"]},{"entry":[{},"\/\/ Switch (SyncMode)"]},{"entry":[{},"If SyncMode == full"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ApplyAOSToDevice"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"iterate"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"m_pAOS\u2212>GetFirstRecord...m_pAOS\u2212>GetNextRecord"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Add or update the corresponding FAO record."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Note. Never delete based on what's in AOS, apparently)."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(end \/\/ ApplyAOSToDevied"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ApplyChangeListToDevice(m_f1Changes);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"End \/\/ CStructuredDelta::GenerateChangeLog"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Push Synchronization",{"@attributes":{"id":"p-0370","num":"0369"},"figref":"FIG. 16","b":["1505","1510","1515","1520","1525","1530","1535"]},"Once the \u0394's for a given application have been created, the method of the present invention continues at step , which enables a connection to a storage server. Upon connection to the storage server, a further connection to management server  will occur to authenticate the user in the system. Failure at any of the aforementioned points will result in returning to idle state . Upon authentication, a management server lock is enabled to ensure that multiple device engines do not connect to the same data at the same time.","Once a lock is acquired at step , \u0394's are uploaded to the system. As shown, this may include uploading an item \u0394 , an application \u0394 , uploading a device \u0394 , or a network \u0394 . Once \u0394's have been uploaded to the server, management lock server  is released, and the connection to the storage server is terminated at step .","It should be recognized that such a push synchronization need not occur directly to a server, but may occur directly to a second device engine in accordance with the depiction of the multiple embodiments of the invention in .","Data Package Specification","Once information is provided into the universal data format, the device engine organizes the format into a data package. Each data package thus includes a description of changes to any and all information for particular application, and a collection of data packages describes changes across all device engines including all different types of data. With encoding and compression, data packages can become very compact to minimize bandwidth and storage requirements across the system of the present invention.","In one particular aspect of the present invention, encoding of the data packages may be provided in a streaming format to allow processing by the device engines with minimal storage and memory configuration at the device engine level.","The device engine can read the stream and determine which records from which applications it needs to update the particular information present on the system on which it resides.","Data packages can be provided in a binary data format. This allows data packages to encode changes to non-application data at a bite level. Hence, if a single bit on a system changes, the system of the present invention allows synchronization of that bit on another system. Changes are described as a sequence of bite-level change operations. One such encoding is using a sequence of insert and copy operations. Insert and copy operations generally define a particular \u201cinsertion\u201d of a number of bites from a source file, then how many bites of a changed source file must be inserted to a particular file, then how many bites to insert from a particular new file, with a differencing engine taking the bites in the stream and inserting them into the new file to create the new version of the file.","As will be readily understood by one of average skill in the art, this allows a user to, for example, change a binary file such as a word processing document or other type of attachment, and synchronize such an attachment at the binary level. Specifically, if one forwards an e-mail of a word document to a second individual, the second individual modifies it and wishes to return this document with modifications to the first individual, because the first individual has the original file on his system, if both systems are enabled in the system of the present invention, the second system need only send the changes or the difference information back to the first system in order for the first system to reconstruct the document on the second system using this change data to create the document as intended by the second user.","Multiple caching of both the generation and application of data packages can be utilized to deal with communication issues in accordance with the system of the present invention. It should be further recognized that data packages can be merged into larger meta-data packages. Such meta-data information, such as the organization of multiple device packages, may be encoded into a larger system package. Each system package is essentially an encoded sequence of data packages.",{"@attributes":{"id":"p-0381","num":"0380"},"figref":["FIG. 12","FIGS. 11 and 12","FIG. 13"]},"Particular examples of item fields  which may be included for any given item  are shown in . These exemplary item objects may, for example, be from an application such as Microsoft Outlook. Outlook allows for note items , e-mail items , task items , calendar items , bookmark items , file items , channel items , folder items , and contact items , all of which have fields such as those represented in .","The data format also contains folder information  which allows the classification of items and consequently their associated item fields into particular categories.","Application objects  include information on the types of applications from which information in the stream is included. Device objects  include information on the origin type of device which the information is originating from. Network objects  include information on a user level to define that the information in the data stream is coming from a particular user.","As detailed above, each application object supports a folder store interface that permits management of collections of information on a folder level, and permits management of folder hierarchies of information. The application object also includes an item interface that permits management of individual information entries such as records or files or components of information entries such as fields within records. Each application object further supports an interface for detection of a vendor application.","A DataPack essentially contains a sequence of transactions describing changes to information. This information can span two basic types: structured or application data, and unstructured or binary file data.","Transactions are encoded using an efficient streaming format with tags to represent the actual content objects. This technique permits the continuous extension of the DataPack format as new content is supported.","The general architecture of the package provides for transactions, application data, file data, files, objects and identifiers to be carried in the data package. Generally, transactions, application data, file data, and files have previously been described.","The first portion of the data package will be the data package identifier. Each transaction has a basic architecture of objects and operations. Each piece of content is referred to as an object and is uniquely represented with a Universally Unique Identifier (UUID). Objects typically are represented by a dynamically generated UUID, but more common objects are represented by static UUIDs. The following static UUIDs are defined:",{"@attributes":{"id":"p-0390","num":"0389"},"tables":{"@attributes":{"id":"TABLE-US-00033","num":"00033"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 33"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UUID_GenericDefaultFolder"]},{"entry":[{},"UUID_DefaultContactFolder"]},{"entry":[{},"UUID_DefaultInboxFolder"]},{"entry":[{},"UUID_DefaultOutboxFolder"]},{"entry":[{},"UUID_DefaultDraftsFolder"]},{"entry":[{},"UUID_DefaultTrashFolder"]},{"entry":[{},"UUID_DefaultSentFolder"]},{"entry":[{},"UUID_DefaultCalendarFolder"]},{"entry":[{},"UUID_DefaultTaskFolder"]},{"entry":[{},"UUID_DefaultNoteFolder"]},{"entry":[{},"UUID_DefaultJournalFolder"]},{"entry":[{},"UUID_DefaultFavoriteFolder"]},{"entry":[{},"UUID_DefaultCookieFolder"]},{"entry":[{},"UUID_DefaultHistoryFolder"]},{"entry":[{},"UUID_DefaultChannelFolder"]},{"entry":[{},"UUID_DefaultFileFolder"]},{"entry":[{},"UUID_DefaultCallFolder"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Each UUID has a unique 128 bit value which may be assigned by the system provider.","Transactions are broken down into manageable blocks in the form of individual files. These files are then optionally compressed and encrypted and prefixed with appropriate headers. Transactions are grouped into specific files based on the following rules: [0240] Transactions related to account information are grouped into a DataPack file. [0241] Transactions related to a specific data class are grouped into a DataPack file. [0242] Transactions referring to binary data are grouped into separate DataPack files for each file object.","A DataPack file is identified using specific rules based on the file name. The file name is of the form \u201cUUID.VER\u201d where UUID is the identifier for the specific object and VER is the transaction version number. The version number is of the form \u201cD0001\u201d with additional digits used for large version numbers. The \u201cD000\u201d value may be reserved for the base version for the object.","The UUID for the user account is generated by the Management Server (MS). The MS also maintains a current table of UUID values and version numbers that provides the root structure for understanding the DataPack files within a user account. The MS also provides necessary locking semantics needed to maintain consistency when multiple device engines attempt to synchronize.","All DataPacks are prefixed with a standardized header that provides basic content information regarding the DataPack. Compression and encryption headers follow the DataPack header if needed.","The data package header information will include version signature, applied versioning information, content type, A engine type, compression type, encryption type, applied size, encrypted size, compressed size, raw data size, and other data useful for the device engine in decrypting the data stream to provide the data into a format usable for the application.","The header may optimally have the format:",{"@attributes":{"id":"p-0398","num":"0397"},"tables":{"@attributes":{"id":"TABLE-US-00034","num":"00034"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"center"}}],"thead":{"row":[{"entry":[{},"TABLE US-00034"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Type","Bytes"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Version","4"]},{"entry":[{},"Signature","4"]},{"entry":[{},"AppliedVersion","8"]},{"entry":[{},"ContentType","4"]},{"entry":[{},"DeltaType","4"]},{"entry":[{},"CompressionType","4"]},{"entry":[{},"EncryptionType","4"]},{"entry":[{},"AppliedSize","4"]},{"entry":[{},"EncryptedSize","4"]},{"entry":[{},"CompressedSize","4"]},{"entry":[{},"RawSize","4"]},{"entry":[{},"Reserved","TBD"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The following ContentType values are permissible:",{"@attributes":{"id":"p-0400","num":"0399"},"tables":{"@attributes":{"id":"TABLE-US-00035","num":"00035"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 35"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Field","Comment"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DP_CONTENT_RAW","Raw"]},{"entry":[{},"DP_CONTENT_COMPRESSED","Compressed"]},{"entry":[{},"DP_CONTENT_ENCRYPTED","Encrypted"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The DeltaType encodes the type of binary file differencing used. The following DeltaType values are permissible using DataPackageDeltaType:",{"@attributes":{"id":"p-0402","num":"0401"},"tables":{"@attributes":{"id":"TABLE-US-00036","num":"00036"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 36"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Field","Comment"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PackageDeltaTypeUninitialized","Uninitialized"]},{"entry":[{},"PackageDeltaTypeRawData","Raw binary data"]},{"entry":[{},"PackageDeltaTypeDeltaXDelta","Xdelta binary difference"]},{"entry":[{},"PackageDeltaTypeDeltaBDiff","Bdiff binary difference"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The compression type specifies whether the DataPack has been compressed. A DataPack compression header follows the DataPack header if a compression type is specified. The following CompressionType values are permissible using DataPackageCompressionType:",{"@attributes":{"id":"p-0404","num":"0403"},"tables":{"@attributes":{"id":"TABLE-US-00037","num":"00037"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 37"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Field","Comment"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PackageCompressionTypeUninitialized","Uninitialized"]},{"entry":[{},"PackageCompressionTypeNone","None"]},{"entry":[{},"PackageCompressionTypePK","PKZip format"]},{"entry":[{},"PackageCompressionTypeLZS","LZS format"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The encryption type specifies whether the DataPack has been encrypted. A DataPack encryption header follows the DataPack header if an encryption type is specified. The following EncryptionType values are permissible using Data PackageEncryptionType:",{"@attributes":{"id":"p-0406","num":"0405"},"tables":{"@attributes":{"id":"TABLE-US-00038","num":"00038"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 38"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Field","Comment"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PackageEncryptionTypeUninitialized","Uninitialized"]},{"entry":[{},"PackageEncryptionTypeNone","None"]},{"entry":[{},"PackageEncryptionTypeXORTest","XOR masked data"]},{"entry":[{},"PackageEncryptionTypeBlowFish","Blowfish"]},{"entry":[{},"PackageEncryptionTypeTwoFish","Twofish"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"All DataPack compression headers are encoded using the following format:",{"@attributes":{"id":"p-0408","num":"0407"},"tables":{"@attributes":{"id":"TABLE-US-00039","num":"00039"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 39"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Field","Size (bytes)","Comment"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Size","4","Size of data including this header"]},{"entry":["Version","4","Version (1)"]},{"entry":["Signature","4","Signature (4271)"]},{"entry":["HeaderType","4","Header type"]},{"entry":[{},{},"(HeaderTypeCompression)"]},{"entry":["Reserved","12","Reserved"]},{"entry":["DecompressedSize","4","Decompressed size"]},{"entry":["Reserved","50","Reserved"]},{"entry":["Reserved","12","Reserved"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The following HeaderType values are permissible using Data PackageHeaderType:",{"@attributes":{"id":"p-0410","num":"0409"},"tables":{"@attributes":{"id":"TABLE-US-00040","num":"00040"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 40"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Field","Comment"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HeaderTypeUninitialized","Uninitialized"]},{"entry":[{},"HeaderTypeEncryption","Encryption header"]},{"entry":[{},"HeaderTypeCompression","Compression header"]},{"entry":[{},"HeaderTypeRaw","Raw header"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"All DataPack encryption headers are encoded using the following format:",{"@attributes":{"id":"p-0412","num":"0411"},"tables":{"@attributes":{"id":"TABLE-US-00041","num":"00041"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE US-00041"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Field","Size (bytes)","Comment"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Size","4","Size of data including this header"]},{"entry":["Version","4","Version (6)"]},{"entry":["Signature","4","Signature (4270)"]},{"entry":["HeaderType","4","Header type"]},{"entry":[{},{},"(HeaderTypeEncryption)"]},{"entry":["Reserved","12","Reserved"]},{"entry":["DecryptedSize","4","Decrypted size"]},{"entry":["InitValue","16","TBD"]},{"entry":["KeyLength","4","TBD"]},{"entry":["ClearTextKeyBits","4","TBD"]},{"entry":["Salt","4","TBD"]},{"entry":["PadBytes","4","TBD"]},{"entry":["HMAC","20","TBD"]},{"entry":["Reserved","12","Reserves"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The data package transaction format may take a number of forms. One example is the following:",{"@attributes":{"id":"p-0414","num":"0413"},"tables":{"@attributes":{"id":"TABLE-US-00042","num":"00042"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE US-00042"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"DataPack transaction format - header - info - objects and operations"},{"entry":"Diagram"},{"entry":"\u2003transaction ::= fileData | Header + InfoList + TransactionList"},{"entry":"\u2003fileData::= raw binary file data | binary difference data"},{"entry":"\u2003Header ::= ID + DataPackID + DataPackVersion"},{"entry":"\u2003ID ::= FUSE"},{"entry":"\u2003DataPackID ::= CLOG"},{"entry":"\u2003InfoList ::= FieldList"},{"entry":"\u2003TransactionList ::= Operation + [ItemInfo + [FieldList]]"},{"entry":"\u2003Operation ::= see table below"},{"entry":"\u2003ItemInfo ::= ItemType + ItemFlags + EntryID + ParentEntryID"},{"entry":"\u2003ItemType ::= same as enumItemType"},{"entry":"\u2003ItemFlags ::= same as enumF1ItemFlags"},{"entry":"\u2003EntryID ::= UUID"},{"entry":"\u2003ParentEntryID ::= UUID"},{"entry":"\u2003UUID ::= 128-bit UUID as defined by standard"},{"entry":"\u2003FieldList ::= {FieldTag + FieldData} + ListEnd"},{"entry":"\u2003FieldTag ::= same as enumFieldTag"},{"entry":"\u2003FieldData ::= FieldDataType + [FieldDataLen + [FieldDataData]]"},{"entry":"\u2003FieldDataType ::= see below"},{"entry":"\u2003FieldDataLen ::= length as required by FieldDataType"},{"entry":"\u2003FieldDataData ::= data as required by FieldDataType"},{"entry":"\u2003ListEnd ::= DWORD(0)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The following Operation values are permissible using the Operation class:",{"@attributes":{"id":"p-0416","num":"0415"},"tables":{"@attributes":{"id":"TABLE-US-00043","num":"00043"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 43"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Field","Comment"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"clNop","None"]},{"entry":[{},"clAdd","Add"]},{"entry":[{},"clDelete","Delete"]},{"entry":[{},"clChange","Change"]},{"entry":[{},"clMove","Move"]},{"entry":[{},"clRename","Rename"]},{"entry":[{},"clForceChange","Force change without conflict"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The following FieldDataType values are permissible using cIDataType:",{"@attributes":{"id":"p-0418","num":"0417"},"tables":{"@attributes":{"id":"TABLE-US-00044","num":"00044"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 44"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Field","Comment"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["clInvalidType","TBD"]},{"entry":["clString","Unicode String bytes with a 32-bit length prefix"]},{"entry":["clString8","Unicode String bytes with an 8-bit length prefix"]},{"entry":["clString16","Unicode String bytes with a 16-bit length prefix"]},{"entry":["clEmpty String","TBD"]},{"entry":["clBlob","32-bit length followed by a byte stream"]},{"entry":["clBlob8","8-bit length followed by a byte stream"]},{"entry":["clBlob16","16-bit length followed by a byte stream"]},{"entry":["clEmptyBlob","TBD"]},{"entry":["clByte","8-bit value"]},{"entry":["clShort","16-bit value"]},{"entry":["clDword","32-bit value"]},{"entry":["clQword","64-bit value"]},{"entry":["clDate","DATE type (double)"]},{"entry":["clDouble","8 byte real"]},{"entry":["clFloat","4 byte real"]},{"entry":["clUuid","16 byte uuid"]},{"entry":["clZero","Zero value"]},{"entry":["clOne","One value"]},{"entry":["clUnspecified","Unspecified value"]},{"entry":["clDefault","Default value"]},{"entry":["clCollection","Collection with 32-bit length"]},{"entry":["clCollection8","Collection with 8-bit length"]},{"entry":["clCollection 16","Collection with 16-bit length"]},{"entry":["clEmptyCollection","Collection with no length"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Data package objects are organized into a hierarchy as follows:",{"@attributes":{"id":"p-0420","num":"0419"},"tables":{"@attributes":{"id":"TABLE-US-00045","num":"00045"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 45"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Account::= DeviceList + DataClassList"]},{"entry":[{},"DeviceList::= {Device}"]},{"entry":[{},"DataClassList::= {DataClass} + ProviderList"]},{"entry":[{},"ProviderList::= {Provider} + DataStoreList"]},{"entry":[{},"DataStoreList::= {Folder} + ItemList"]},{"entry":[{},"ItemList::= {Item} + FieldList"]},{"entry":[{},"FieldList::= {Field}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"An account is the root structure, which identifies information about the user's account. It may have exemplary field tags (eFieldTag_[NAME]) such as Name, Password, UserName and Version. The FieldTag ItemType value is specified as ItemType_PIN using enumItemType.","A device is a system identified as part of an account. Examples include PCs, handhelds, Web sites, and so on. It may have tags (eFieldTag_[Name]) such as: \u201cname\u201d and \u201ctype\u201d and item type values (eDevice_[Name]) such as Portal, Palm, Windows, CellPhone.","A data class is a grouping of similar information types. Many data classes may be represented for a particular account. The data class may contain field tags (eFieldTag_[Name]) such as: Name; ItemType; SubType; IsManaged; Provider; Filter and Version.","The following ItemType values are permissible using enumDataClass (eDataClass_[Name]):",{"@attributes":{"id":"p-0425","num":"0424"},"tables":{"@attributes":{"id":"TABLE-US-00046","num":"00046"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 46"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Tag","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UNKNOWN","Unknown"]},{"entry":[{},"CONTACT","Contact\/address book"]},{"entry":[{},"EMAIL","Electronic mail"]},{"entry":[{},"CALENDAR","Calendar"]},{"entry":[{},"TASK","Task\/to do"]},{"entry":[{},"NOTE","Note\/memo"]},{"entry":[{},"JOURNAL","Journal"]},{"entry":[{},"BROWSER","Web browser favorites, cookies, etc."]},{"entry":[{},"FILESET","Collection of files"]},{"entry":[{},"PIN","Account information"]},{"entry":[{},"DEVICE","Device information"]},{"entry":[{},"FILEBODY","Contents of file"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"A Provider is the application that maintains specific information within a data class. There can be more than one provider for a particular data class. Field tags include: Name, AppObjID, Password, Username and Version. Examples of provider tags permissible for the provider (eProvider[Name]) include: Portal, Palm\u00ae, MicrosoftOutlook\u00ae., Lotus Organizer, Microsoft Internet Explorer, Microsoft Windows, and so on.","Data stores are the containers for storing information within a provider. There can be more than one data store for a particular provider. Folders represent structural organization of information within a data store. Data stores are not required to support folders. Tags (eFieldTag_[Name]) supported for each data store include: Name, ItemType, IsManaged and OriginalPath. Item types permissible for the data store include: unknown; Folder; MAPI; Database and Store File.","Folders represent structural organization of information within a data store. Data stores are not required to support folders. A folder is represented by a UUID and may contain any of the following field tags (eFieldTag_[Name]): Name; ItemType; IsManaged; FileAttributes; CreationDate; ModificationDate; AccessDate; Special FolderType.","The eFieldTag_ItemType value is specified as eltemType_FOLDER using enumItemType.","Items are individual informational components consisting of the actual user data. They may contain field tags such as: Name, ItemType, IsManaged, and Version.","File items typically have the following additional field tags (eFieidTag_[Name]):",{"@attributes":{"id":"p-0432","num":"0431"},"tables":{"@attributes":{"id":"TABLE-US-00047","num":"00047"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 47"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"FileAttributes"]},{"entry":[{},"CreationDate"]},{"entry":[{},"ModificationDate"]},{"entry":[{},"AccessDate"]},{"entry":[{},"FileSize"]},{"entry":[{},"FileBody"]},{"entry":[{},"DeltaSize"]},{"entry":[{},"Hash"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Item types may take the format (eItemType_[Name]) and may include: extended; folder; attachment; contact; distlist; email; calendar; task; call; note; post; journal; form; script; rule; favorites; subscription; common_favorites; desktop; common_desktop; startmenu; common_startmenu; channels; cookies; programs; common_programs; startup; common_startup; sendto; recent; internet_cache; history; mapped_drives; printers; docs; doctemplates; fonts; window_settings; app_data_folder; app_settings; fileset; pin; device; data_store; file; provider; and data_class; internal.","A field is based on one of a set of base type definitions. All field tag information is encoded using the following format:",{"@attributes":{"id":"p-0435","num":"0434"},"tables":{"@attributes":{"id":"TABLE-US-00048","num":"00048"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE US-00048"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Field","Size (bits)","Comment"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"FieldTag","16","Unique tag number"]},{"entry":[{},"FieldType","6","Field base type"]},{"entry":[{},"FieldSubType","10","Field sub-type"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"A number of Field types are possible, including: unknown; long; dword; date; string; binary; float; double; collection; uniqueid; qword; uuid; file; invalid. LONG is a four byte value encoded in big-endian format. FieldType DWORD is a four byte value encoded in big-endian format. FieldType String is a sequence of Unicode characters followed by a single NULL byte. Interfaces are provided with an MBCS value. FieldType Binary is a sequence of bytes. FieldType UniqueID is a sequence of bytes as defined by the Universally Unique Identifier (UUID) standard. AO interfaces are provided with a Locally Unique Identifier (LUID) value FieldType QWORD is an eight byte value encoded in big-endian format. FieldType File is a UUID that references a separate DataPack containing the file body data. AO interfaces are provided with a sequence of Unicode characters followed by a single NULL byte that describes the full path name for the file.","Any number of filed sub types are possible. Each of the sub-types includes all of the possible data types from all of the supported user applications. As should be well understood, the possibilities in the number of sub-types is quite large, and dynamic as each new application supported by the system of the present invention is added. Examples of sub-types include:",{"@attributes":{"id":"p-0438","num":"0437"},"tables":{"@attributes":{"id":"TABLE-US-00049","num":"00049"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 49"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["SubField Description","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Base","No sub-type specified"]},{"entry":["EmailAddress","Email address"]},{"entry":["EmailAddressList","Email address list"]},{"entry":["SearchKey","Search key"]},{"entry":["CategoryList","Category list"]},{"entry":["StringList","String list"]},{"entry":["DistributionList","Distribution list"]},{"entry":["Gender","Gender (enumGender)"]},{"entry":["TimeZone","Time zone (enumTimeZone)"]},{"entry":["Boolean","Boolean (TBD)"]},{"entry":["NonZeroBool","Boolean with non-zero value (enumNonZeroBool)"]},{"entry":["Priority","Priority"]},{"entry":["Sensitivity","Sensitivity (enumSensitivity)"]},{"entry":["Importance","Importance (enumImportance)"]},{"entry":["SelectedMailingAddr","Selected mailing address"]},{"entry":[{},"(enumSelectedMailingAddr)"]},{"entry":["TaskStatus","Task status (enumTaskStatus)"]},{"entry":["FlagStatus","Flag status (enumFlagStatus)"]},{"entry":["RecurrenceType","Recurrence type (enumRecurrenceType)"]},{"entry":["DayOfWeek","Day of week (enumDayOfWeek)"]},{"entry":["DayOfMonth","Day of month (1 through 31)"]},{"entry":["InstanceOfMonth","Instance of month (enumInstanceOfMonth)"]},{"entry":["MonthOfYear","Month of year (enumMonthOfYear)"]},{"entry":["BusyStatus","Busy status (enumBusyStatus)"]},{"entry":["AttachmentType","Attachment type (enumAttachmentType)"]},{"entry":["MailBodyType","Mail body type (enumMailBodyType)"]},{"entry":["RGB","RGB color value"]},{"entry":["ManagedState","Managed state (enumManagedState)"]},{"entry":["FaoId","FAO ID for provider"]},{"entry":["SpecialFolderType","Special folder type (enumSpecialFolderType)"]},{"entry":["ResponseState","Response state (TBD)"]},{"entry":["ResponseStatus","Response status (TBD)"]},{"entry":["JournalStatus","Journal status"]},{"entry":["PageStyle","Page style"]},{"entry":["PageNumberMethod","Page number method"]},{"entry":["DelegationState","Delegation state"]},{"entry":["MeetingStatus","Meeting status"]},{"entry":["MeetingInvitation","Meeting invitation"]},{"entry":["CalendarType","Calendar type"]},{"entry":["DateOnly","Date only"]},{"entry":["TimeOnly","Time only"]},{"entry":["PhoneNumber","Phone number"]},{"entry":["URL","URL"]},{"entry":["FilePath","File path"]},{"entry":["PopMessageID","POP message ID"]},{"entry":["MIMEType","MIME type"]},{"entry":["INVALID","All values must be below this"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The aforementioned invention provides a user-centric model of communication to deliver personal information via network services. This model accommodates devices that are disconnected from the network, such as the Internet, at various times. Personal information can continue to exist locally rather than imposing a server-centric model on existing information.","In accordance with the foregoing, a store and forward information broadcast is utilized. Changes to existing information are replicated to an Internet storage server and changes are then retrieved by other devices on the network at device-specific times. In this manner, direct client communication is accomplished without requiring one-to-one communication. While one communication is supported by the system of the present invention, it need not be required.","Although the present invention has been presented in the form of an Internet store and forward broadcast for the purposes of synchronizing personal information amongst various types of devices, it will be readily recognized that synchronization need not be accomplished as the only application for the aforementioned system. In particular, the system can be utilized to efficiently broadcast changes to information in so-called \u201cpush\u201d type information applications where only portions of the data need to be changed on a client application. For example, in a system where information such as changes in a stock price need to be broadcast to a plurality of users, a client application implementing the aforementioned technology can be updated by only changing specific portions of the data in the client application relative to that particular stock price. This can be done using a smaller bandwidth than has previously been determined with other devices.","The present invention also allows advanced identification features to be provided to a phone or other mobile device by allowing the user to provide personification information for other users of advanced wireless communication devices. Each user can create one or more individualized representations of themselves and push this information to other users. The service is generally enabled by an enterprise service provider or cellular network carrier via one or more servers. Users can subscribe to the service, allowing them to create and distribute sub-sets of personification information or \u201cpersonas\u201d, or merely participate in the system, receiving personification information from subscribers. Since devices have different capabilities, the system will vary in its ability to provide personification information to each device, and in one embodiment, the type of user device and its capabilities are stored for each member of the system. The method and implementing systems and applications of the present invention provided by the enterprise service provider may be subject to a service fee to maintain the personification information in the data store, and provide functionality associated with the system.","In general, a user creates a personification of themselves which may include the user's contact information, signature, photo, multimedia information and a specific ringtone identifying them to other phone users. Many cellular phones include the ability to download specific ringtones and use them to identify incoming callers by associating the ringtone and picture with the contact information in the phone and triggering it using caller ID functions. The system of the present invention allows the user to specify their own ringtone and picture, and use it to identify them to other users. In addition to the static information in the personification information a user may provide dynamic information such as GPS location, timezone, availability, and event-relevant information (e.g., a reminder it's the caller's birthday, or a summary of calendar events or tasks assigned to or by the caller) or control information to other users or participants.",{"@attributes":{"id":"p-0444","num":"0443"},"figref":"FIG. 18","b":["10202","10202"]},"At step , the user may set the user's own personification information. This is referred to in Figures occasionally as creating or updating \u201cme\u201d. As shown at table , the user personification data may include the user's name, address, phone number and any other contact information, a picture of the user, a specific ringtone for the user, and a schedule of available times that the user may be contacted in various manners. In addition, the user may input user location information. Location information may be of varying specificity, and may initially input manually or through a connection with a GPS system in a GPS enabled phone. Information in the location section of a user's system may be updated by an agent on the phone using the phone's GPS agent. The ringtone may be uploaded by the user or may be selected from tones provided by the system administrator as part of the service, or the user may use the device's microphone (if equipped) to author a new audio clip which will be used as a ringtone. Optionally, a value added media distributor may provide phones, and digital rights management incorporated in the system to ensure proper control of copyrighted material within the system of the present invention. The phone manufacturer, the mobile phone carrier, or another entity may add DRM functionality as well, which may determine which protected content may be redistributed (and how). It should be recognized that step  is optional, and a user may decide not to provide personification information, but only participate in the system to acquire personification information of others. In another embodiment, subscription to the advanced ID service provided by the ESP is not required to receive personification information.","As discussed in further detail below, different sets (or \u201cpersonas\u201d) of personification information may be provided for different groups of individuals in the users' contact information. For example, a user may wish one group of contacts to receive one set of personification information (such as business contacts), while another set (such as personal friends) to receive a different set of information. The group definition allows the user to define recipients who receive the particular version of contact information. The user may assign one or more users to a particular group using an interface provided on the mobile device, or alternatively via some other interface, such as a webpage or an administrative configuration console. Additionally, the user can specify a \u201cpublic\u201d persona which anyone may download (and will be automatically assigned to new contacts in the user's devices). The system or agent maintains group assignments in persistent storage. The system or agent transmits the information appropriate for each group to the members of the group using the above described techniques. An enterprise service provider can allow a user to have a default persona upon establishing an account with the system. For example, the system can establish default public friends, family, co-workers, business associates, and blacklist persona templates, allowing the user to input certain information and have established personas once the user joins the system. The blacklisted persona is intended to be assigned to buddies to whom the user does not want to publish information.","At step , the new subscriber's contact records are provided to the ESP in one of a number of ways, and relationships detected between the subscriber's contact records and other subscribers. This input may be as simple as downloading phone numbers that the user has stored in his phone, or may include additional contact information which allows the system to determine whether individuals are members of the system. In addition, the subscriber may manually input contacts during account creation, or download contact information from another source, such as a personal information manager on a personal computer or personal digital assistant. A search mechanism may also be provided, allowing the user to input information on individuals to determine whether an individual is part of the system. For example, if a user does not have a stored resource of personal information, the user may, via the web browser, access a form provided by the system administration which provides name and other contact fields which the system can use to search for other users participating in the system. Once, found, this information can then be provided to the user.","In accordance with the system of the present invention, different types of links may be established between users. Generally, a user's contact list is found in the user address book in the datastore of the phone. Due to the nature of human communication, it is likely that a contact in a person's address book can likewise be found in that contact's own address book. For example, assuming Bob and Alice are both friends, they will likely have each other's contact information in their respective address books. This reciprocal link between people can be utilized to recognize and distinguish different types of links. In accordance with the invention \u201chalf\u201d linked users occur when one user has the other user's contact information in their address book, but the other user does not reciprocate. These users are not connected for purposes of data exchange and the invitation functions provided in  may be offered to the unlinked user giving them the opportunity to subscribe to the system and establish a true link with the inviter. \u201cTrue\u201d\u2014 or \u201cdirect\u201d linked users exist when both users have each other's contact information in their mobile device's phone book. These users have established some level of relationship outside of the service provided by the enterprise service provider or via system's \u201cInvitation\u201d function, and will automatically exchange and maintain any information each user has configured. Within a context of the foregoing description a \u201cbuddy\u201d is any user who has established a true link with an individual user. For privacy as well as practicality, information exchange in the system occurs only between true linked users. Users who possess only a half-link to one another may invite the half-linked user to join the system and establish a true link.","When the user provides their own personification information to the service host at step , step  may include a step of detecting links between users by examining the contents of their address books which are provided to the server. In order to identify each user from the pool of all users of the system, the system uses telephone numbers and in one embodiment e-mail addresses as unique keys. In a further embodiment, the system of the present invention can use telephone number equivalence algorithms to match phone numbers regardless of formatting, country and area codes.","Users who wish to remove their information and \u201cunlink another user\u201d simply remove that user from their mobile device's address book. Using the rules of the system, the two users are no longer linked and no further updated information between them occurs. No information is deleted from the unlinked party's address book in this process. To accomplish this, instead of unlinking users may wish to assign another user to a \u201cblacklisted\u201d persona.","At step , once the contacts have in acquired, relationships between the subscriber's contracts and other subscribers are established. This can occur automatically by an algorithm run by the ESP, may be set manually by the user, or may occur by some combination of the two.","Optionally, at step , the subscriber may be offered the opportunity to invite other people to become subscribers. The user may be prompted to determine if the user wishes to invite contacts stored in the users phone to become subscribes to obtain additional benefits attributable to subscription. If the user wishes to invite others, an invite process is performed at step .","Optionally, at step , the subscriber may be given the option to allow their persona to be provided to non subscribers. If the user desires their information to be delivered, a delivery process  transmits personification information to non-subscriber users. This may occur in any number of ways, such as for example via SyncML, or via SMS messages, as described below.","At step , personification information from other subscribers in the subscriber's contact list are delivered to the new subscriber, and the new subscriber's information sent to other subscribers. As discussed below, contacts who are also subscribers are true-linked users  and automatically populate the new subscriber's phone. The information may be transmitted to the user in a data stream directly to the agent, which then populates the user's phone data. Alternatively, the information may be provided in a series of messages. Preferentially, the information will be transmitted via SyncML.","Included in persona information is whether the subscriber's contacts should be alerted to the subscriber's location based on system subscriber's GPS or manually entered location information in their own record. Also included may be, for example, the level of granularity available to the subscriber's contact. For example, one may be allowed to know the country, city or a more specific location. Once received, the receiving member may further configure the subscriber's persona information based on the information received. For example, suppose another member provides location information in their member record. The user may specify that the user wishes to be notified when the member with location information moves to a particular location or within a particular distance from the specifying member. Other criteria may also be configured, such as group information. For example, the user may specify which groups each member belongs to so that if such member requests personification information about the specifying user, the correct group information is provided to the requesting member.","Finally, at step , the new subscriber may update information in their persona. When the new subscriber does so, the information is re-transmitted to true linked subscribers and, if enabled, non-subscriber participants in the system. Updates may be started on the device by the client application as a result of data changes on the device. This may occur because of user interaction with the device, or changing transient information such as time zone. Updates can occur in one of two ways. Server-initiated updates are triggered by time intervals, or a change in data which is to be sent to the user's device. Server-initiated updates are handled via direct socket connection to the client or via SMS messages sent from the server to the client application on the device. Each advanced ID account supports a configurable \u201cserver initiated sync on\/off\u201d setting which controls whether SMS messages are automatically sent when a client is out of date. The SMS message from the server may be sent to the text port (or configured data port, if appropriate).",{"@attributes":{"id":"p-0457","num":"0456"},"figref":"FIG. 19","b":["10140","10100","10500","10506"]},"In one aspect, the system supports controlling both the calling user's phone and the called user's phone. At step , if subscriber B has configured his persona (which is downloaded to subscriber A) to prevent calls during a certain period of time, the client application on the calling user's phone can prevent subscriber A from connecting to subscriber B during this period. Hence at step , the method may check (on subscriber A's phone) whether a call to Subscriber B is allowed based on Subscriber B's configuration. If not, an alert  may be provided to Subscriber A.","At step , if the call is initiated by subscriber A and received by subscriber B, optionally, at step , the receiving user can configure the phone to prevent calls during a specific period of time. Hence, at step  the method may check to determine whether a call is allowed during a specific period by the receiving user. If the call is not allowed, the method may block the call at step . If the call is not blocked, the user's advanced ID information (persona) is displayed on the receiving caller's phone. If the call is blocked, it may be directed to the receiver's voicemail system. The advanced ID or persona is a collection of information which defines the user, such as a phone number, e-mail address, picture, geo location information and other data. This allows subscribers to manage their own \u201cpersonal brand\u201d controlling how they are represented on other user's phones specifying a ringtone or the picture associated with their contact. As discussed herein, one can have a \u201cfriends\u201d persona and a \u201cco-workers\u201d persona which contain different information or different sets of information. Additional features such as geo location information provided by GPS information capable phones is also provided, as is information about the caller which is transient in nature\u2014such as whether it's the caller's birthday or anniversary, or information concerning phone calls, meetings, or tasks assigned to or by the caller. The system may be implemented by using a direct push system from a server via a SyncML server to a SyncML client, or may be operated on by a specific client application resident in the phone which communicates with the service-side implementation. SyncML is an Extensible Markup Language (XML) protocol under development as an open standard for the universal synchronization of data between devices. Synchronization of data allows changes made to data on one device (such as a smartphone or a laptop computer) to be instantly reflected in data on another device (such as a networked computer).","Optionally, at step , if the member has chosen to provide the member's GPS information, at step  the GPS can be provided in a notification at step  provided to show that the user is at or near a specific location.","The present invention supports two different types of data: static and dynamic. Static data can include a user's ringtone, name and image. The static info is provided by the calling subscriber to the receiving subscriber's client on phone  at step . Step  indicates a feature of the present invention which allows subscribers to define their own personification information to control another user's phone\u2014this dynamic or \u201cactive control\u201d information can be updated more often than the static persona information. Dynamic information such as GPS or timezone information is updated regularly based on the needs of the sending subscriber. Due to the interaction of the client  with the phone, the subscriber may actually prevent (or merely warn) a calling subscriber from calling a receiving subscriber's phone and may instead provide them a user-configurable message which may direct the caller to use some other mechanism to contact the intended receiving subscriber (e.g., SMS, email, etc). As with all other similar information, this preferred availability information is stored users' personas.",{"@attributes":{"id":"p-0462","num":"0461"},"figref":["FIG. 20","FIG. 20"],"b":["100","10150"]},"An advanced ID service server  is also provided which communicates with the telephone via wireless network  directly over a data connection or via a SyncML server . Various embodiments of a system for implementing the advanced ID service are discussed herein. In , the ID server  communicates directly with the phone . In alternative embodiments, discussed below, the ID system is implemented on top of a synchronization system such as that described in U.S. Pat. No. 6,671,757, 6,694,336 or 6,757,696.","Phone  may be provided with a system application or agent . System agent  can include a SyncML communication client designed to interact with a SyncML server  in accordance with approved and proposed versions of the SyncML OMA DS specification, including proposed extensions, (available at http:\/\/www.openmobilealliance.org). Alternatively, agent  can be an application designed to communicate with server  using an existing SyncML client on the phone provided by the phone's manufacturer (as well as any custom extensions supported by such client), or an application specifically designed to communicate with server  via another protocol, including a proprietary protocol. In one embodiment, the agent  is a fully implemented SyncML client and server  includes a SyncML server. In another embodiment, the application  is a client application device sync agent such as that disclosed in U.S. Pat. No. 6,671,757. Various embodiments of the client application  are set forth below.","In accordance with the present invention, a phone  includes a system memory  which may further include an operating system  having operating system service including telephony and linking services, networking services, multimedia and graphics display services all provided to a user interface . OS  my be the phone's proprietary OS, BREW, or any other device or operating system suitable for a phone (such as the Symbian Operating system). Additional base services  and an operating system kernel may also be provided. The operating system may additionally provide an SMS client  built into the operating system allowing short messages to be provided across the wireless communications line  to other users. Still further, a SyncML client  may be provided and supported by the operating system services . The phone  includes a native phone data store  which contains address book contact and other information which may be provided by a subscriber. Such information can further include ringtones, pictures, sounds, and movies, all dependent on the functional capabilities of the phone , the space allowed in the system memory, and the services provided by the operating system .","A client application , various embodiments of which are discussed herein, is also loaded into phone . As will be well understood by one of average skill in the art, client application  can be provided by the phone manufacturer or downloaded by a user at a later time. To download and install the application, the user selects a download area of the phone operating system services , selects the application from offerings provided by the service provider or carrier who maintains the wireless communications line , or an enterprise service provider who maintains the system server , and installs the application onto phone . In an alternative embodiment, agent  is a self-supporting application designed to run as a JAVA or BREW agent, or any other device or operating system specific agent (such as an agent operable on the Symbian Operating system). This agent can either include its own SyncML client, or interact with an existing SyncML client on the telephone. Changes can occur at field level or byte level. Alternative embodiments can communicate via alternative protocols via the wireless communications link to store information on the System data base .","Client  includes at least a user interface , the application  having a communication or sync engine and data store manager, a SyncML client  and a local database . The client application  provides an appropriate graphical user interface to UI  which provides the user an alternative point of interaction with the system and service provided by the enterprise service provider. The user interface allows the user to define and manage personas and buddies as well as other tasks as specified in the case definition described herein. Interaction with the system can be via this client user interface or via the server user interface provided by the web server . The engine and data store manager is responsible for maintaining the user settings and options in the device's persistent storage as well as automatically pushing and retrieving changes to those object to the system server. The client datastore includes account information, persona data, buddy information, data for other users who have true links with the subscriber, and multimedia content","The storage server  is a centralized storage location for all system service information, including buddy, persona, relationship, and user data. Clients  can connect to and synchronized with the server information to update their local copy of this data as well as publish any changed information or retrieve any new available information from the server. In the mobile device, the persona information belonging to a user's buddy is primarily stored in the native address book or a separate address book provided by the client. As some devices will not support all the published buddy information including the extended information such as geo location and presence information, the client can store this information in a local database and provide access to it via the phone interface.","In general, a hardware structure suitable for implementing server , webserver  or SyncML server  includes a processor , memory , nonvolatile storage device , portable storage device , network interface  and I\/O device(s) . The choice of processor is not critical as long as a suitable processor with sufficient speed is chosen. Memory  could be any conventional computer memory known in the art. Nonvolatile storage device  could include a hard drive, CDROM, CDRW, flash memory card, or any other nonvolatile storage device. Portable storage  could include a floppy disk drive or another portable storage device. The computing system may include one or more network interfaces . An example of a network interface includes a network card connected to an Ethernet or other type of LAN. I\/O device(s)  can include one or more of the following: keyboard, mouse, monitor, display, printer, modem, etc. Software used to perform the methods of the present invention are likely to be stored in memory  which include nonvolatile storage and volatile memory as well as, portable storage media .","The computing system also includes a database . In alternative embodiments, database  is stored in memory , portable storage  or another storage device that is part of the system of  or is in communication with the system of . Other alternative architectures can also be used that are different from that depicted in . Various embodiments, versions and modifications of systems of  can be used to implement a computing device that performs all or part of the present invention. Examples of suitable computing devices include a personal computer, computer workstation, mainframe computer, handheld computer, personal digital assistant, pager, cellular telephone, smart appliance or multiple computers, a storage area network, a server farm, or any other suitable computing device. There may be any number of servers , n+1 managed by a system administrator providing a back up service in accordance with the present invention.","Also provided on server  is a system data store . The System data store is provided in the non-volatile memory space of server . While only one System data store computer is shown, it should be recognized that the store may be replicated to or stored over a plurality of computers to ensure that the data thereon is protected from accidental loss. It should be understood that the representation of the SyncML server  and web sever  need not require that such servers be provided on different physical hardware than the System server .","The system of  illustrates one server and client system suitable for use in the present invention. In an alternative embodiment of the invention, the advanced ID system can be constructed using a synchronization server described in U.S. Pat. No. 6,671,757, 6,694,336 or 6,757,696.","A synchronization system described with respect to U.S. Pat. No. 6,671,757, 6,694,336 or 6,757,696 comprises client software which provides the functions of a differencing transmitter\/receiver\/engine, and differencing synchronizer in the form of a device engine. The device engine may include at least one component particular to the type of device on which the device engine runs, which enables extraction of information from the device and conversion of the information to difference information, and transmission of the difference information to the storage server. The storage servers utilized in the may be any type of storage server, such as an Internet server or an FTP server, and may be provided from any source, such as any Internet service provider. In a key aspect of the sync system, the Internet connection between the devices or between the devices and a server, need not exist at the same point in time. In addition, only those changes to the information which are required to be forwarded to other systems on the system of the present invention are transmitted to enable fast response times.","Data from each of the sync client devices is coupled with a storage server. In one embodiment, each device engine implements all processing required to keep all the systems fully synchronized. Only one device engine needs to be coupled to the sync server at one particular point in time. This permits synchronization of multiple systems in a disconnected fashion. Each device engine will download all transactions encapsulating changes that have occurred since the last synchronization from the server and apply them to the particular device. The change or difference information (termed a \u201cdata package\u201d or \u201cchange log\u201d) is provided in one or more data packages. Each data package describes changes to any and all transfer information across all device engines, including but not limited to application data, files, folders, application settings, and the like. Each device engine can control the download of data packages that include classes of information that apply to the specified local device. For example, contact names and phone numbers while another needs only changes to e-mail, changes to document files.","Compression and encryption of the data packages may be optionally provided. Each device engine performs mapping and translation steps necessary for applying the data packages to the local format required for that type of information in the application data stores. The device engine also includes components which allow it to track ambiguous updates in cases where users have changed data to a particular data field on two different systems simultaneously since the last update. The output of the device engine comprises a data package which is output to sync server database. As noted above, only one device engine need be connected to the storage server  at a given time. The data package can be stored on the storage server until a request is made to a particular location of the storage server by another device engine. Access to areas of the storage server is controlled by a management server (MS). In one embodiment, each sync operation requires that the device engine for each device login to the management server to authenticate the device and provide the device engine with the location of the individual device's data packages on the storage server.","When data is returned to the delta module from the storage server, the delta module returns differenced data to the application object for the particular application which then translates the delta information into the particular interface utilized for application. Once a device engine has been fully applied all data packages from an input stream, it generates a series of data packages that describe the changes made on the local system. The device engine uses the local application object  to keep track of the last synchronized version of each application's actual data, which is then used for the next data comparison by the delta module on the next sync request. Generated data packages can include operations and encode changes generated from resolving ambiguous cases as described above.","The sync server uses the concept of a universal data record in its internal sync differencing engine and when sending data to and retrieving from external","The management server supports an authentication interface that requires each device engine to authenticate with the management server before performing synchronization. Certain storage server implementations may utilize locking semantics to control read and write access to storage for multiple device engines. For example, in a generic FTP request, if two device engines attempt to connect to the same data at the same time, there must be some form of locking control to prevent device engines accessing the same data at the same time. In this instance, the management server controls the device engine acquisition, renewal, and releasing of locks against data stored in the network.","Each device engine is uniquely identified and tracked by the management server. This allows for tailoring behavior between the management server and specific types of storage systems and device engine components. All device engine components are tagged and version stamped for management via the management server.","Also shown in  is a server-side application ID service controller application  which includes a persona management component , a buddy management component , a user interface , and a digital rights manager . It will be understood in various implementations of the present invention, the functional components operating within the service-side application  can come in one case, push information maintained by the system of the present invention directly into phone  via a SyncML server  interacting with a fully robust SyncML client. Optionally, certain aspects of the control are handled by either the server-side application  or the client-side application , as described herein.","In accordance with the invention, application agent  communicates personification information and changes made to the personification information stored in the data store of the telephone  to server  via the wireless network. Communication of user data from the device may take several forms. Where the client utilized SyncML communications with the server , communication may take place using the standards set forth in the SyncML specification. Changes are transmitted on a record-by-record basis or field-by-field basis. Alternatively, communication may occur via another protocol. The SyncML client is utilized to update the phone's native address book with buddy published information as well as to retrieve persona and link information from the server. Information can be exchanged via the SyncML protocol, or via a direct data link with the server . The system server stores and maintains each user account, link personal and buddy information as well as multimedia content, both system provided and user created. The server is a stand alone server and may be incorporated with the features of a synchronization system such as that described in U.S. Pat. No. 6,671,757. Details of this integration are described in further detail below. As noted above, a management interface is provided via the web server . Description of this interface is shown below.","The server  stores user data in the personification store  in a manner which associates the data with the user of the phone. In one embodiment the data is stored in bulk\u2014that is all records and information for the user are stored in simple text form, (or binary form, depending on the type of data in use). This information is stored in the data store using a unique identifier (UID) associating the personification data with the individual user. The identifier may be any randomly selected identifier, so long as the user is uniquely identified, and the data is associated with the user. In a further aspect, this user UID may be a universally unique identifier (UUID), created in a manner described in the aforementioned U.S. Pat. No. 6,671,757, 6,694,336 or 6,757,696 or other manners to create a single ID for a given user. In yet another embodiment, user data and changes to the user data are stored in a change logs in a manner described in the aforementioned U.S. Pat. No. 6,671,757, 6,694,336 or 6,757,696.","A web server  allowing a user on a computer or other device  having a web browser may optionally be provided to allow a user to configure aspects of the system of the invention. Server  may have a hardware configuration similar to computer  and may comprise one or more physical computers. Additionally, web server  may be integrated with server .","In one embodiment, aspects of the system of the present invention are configured via a phone interface. The system can alternatively be configured by a user via a web interface provided by the web server  via the user device .",{"@attributes":{"id":"p-0485","num":"0484"},"figref":"FIG. 21","b":["10212","10302","10304"]},"In another embodiment, shown in , a user may receive an SMS message from a subscriber, at step  and at step , the user can select a link stored in the SMS message to connect the user's phone with a server side data store which sends the subscriber's information directly to the phone. At step , the user's phone downloads the information from the subscriber to the local data store in the phone.",{"@attributes":{"id":"p-0487","num":"0486"},"figref":["FIG. 23","FIG. 23"],"b":["10600","10600","10604","10606","10602","10602","10604","10606","10600","10604","10606"]},"As shown in , people usually have distinct groups with whom which they communicate including friends, co-workers, and clients. The establishment of different personas allows the publication of different information to each individual. As illustrated in , personas can include names, e-mail addresses, phone numbers, physical addresses, corporate information, a picture, ringtones, URLs, personal physical characteristics (eye\/hair color, et al) and birthday information. This information handling is flexible and extensible and can accommodate any additional permanent as well as transient information such as a current time zone, digital certificates, a physical location, including GPS coordinates, and availability.",{"@attributes":{"id":"p-0489","num":"0488"},"figref":["FIG. 24","FIG. 18"],"b":["10700","10710","10720","10730","10712","10740","10745","10720","10722","10724","10726","10726"]},{"@attributes":{"id":"p-0490","num":"0489"},"figref":["FIG. 25","FIG. 25"],"b":["10100","10160","10802","10804","10810","10812","10814","10804","10810","10810","10812","10810","10814","10816","10820","10820","10822","10160","10830","10832","10834","10834","10840","10850"]},{"@attributes":{"id":"p-0491","num":"0490"},"figref":"FIG. 26"},"At step , an account creation step is initiated on the server . Server  will also create an account with the application server  at step . Server  will provide provisioning information  to the client , which will then upload its address book at step  to server . Server will attempt to establish whether direct links are present at step  and return those true links to the user at step . Concurrently, the system will attempt to perform a synchronization with the user's contact information on the synchronization server . At step , the user's public persona is synced to each user's synchronization account and if there's any problem with the synchronization at step  an out of sync notification message is returned to the client . At step , records are retrieved regarding the records representing the buddy's personas at step . Persona records are thereafter synced as other records are synced in accordance with the description in U.S. Pat. No. 6,671,757.",{"@attributes":{"id":"p-0493","num":"0492"},"figref":"FIG. 27","b":["10160","10180","101000","10192","101010","10192","10160","101012","101014","101016","101018","101020","101022","101024","10208","101026","101028"]},{"@attributes":{"id":"p-0494","num":"0493"},"figref":"FIG. 28","b":["101102","10140","101104","10160","101106","101108","101110","101112","101114","101116","101118","101120"]},"As noted above, the client application  and server application  provide the user with a number of functions to create and manage accounts with the ESP and the advanced ID system.",{"@attributes":{"id":"p-0496","num":"0495"},"figref":"FIG. 29","b":["101200","101202","101204","101206","101210","101214","101216","101218"]},{"@attributes":{"id":"p-0497","num":"0496"},"figref":"FIG. 30","b":["101200","101302","101304","101305","101306","101308","101200","101310","101312"]},{"@attributes":{"id":"p-0498","num":"0497"},"figref":["FIG. 31","FIG. 32"],"b":["101200","101402","101404","101405","101408","101410","101412","101414","101416","101418","101420"]},{"@attributes":{"id":"p-0499","num":"0498"},"figref":"FIG. 32","b":["101200","101502","101504","101402","101506","101508","101510","101512","101514","101516","101518","101520","101522","101524","101524","101526","101200","101526","101528","101200"]},{"@attributes":{"id":"p-0500","num":"0499"},"figref":["FIGS. 33","FIGS. 33"],"b":["34","35","10100","10100","34","35"]},{"@attributes":{"id":"p-0501","num":"0500"},"figref":["FIG. 33","FIG. 33"],"b":["10100","101600","10100","10140","10100","101602","101604","101606","101602","101604"]},{"@attributes":{"id":"p-0502","num":"0501"},"figref":["FIG. 34","FIG. 33"],"b":["101702","10100","101704","10100"]},{"@attributes":{"id":"p-0503","num":"0502"},"figref":"FIG. 35","b":"101802"},"In a further embodiment, a subscriber display may be provided which incorporates data from sources other than the address book. If, for example, the user has populated a phone's native calendar with information concerning meetings with a contact, the client application can extract this information and display, for example, the user's last or future meetings with the contact. Alternatively, this information can be extracted from a sync user account when a synchronization server is utilized as described herein.",{"@attributes":{"id":"p-0505","num":"0504"},"figref":"FIG. 36","b":["101900","10160","10180","10190","101910","101905","101910","101900","10180","101900","101950","101952","102000","102100","10220","102300","102400","101940","101942","101944","101946","101948","101920","101930","101932"]},"Selection of the contacts link  on the menu bar  gives rise to the user interface  shown in which is suitable to allow the user to manage user's contacts in the system of the present invention. Contacts interface  includes a contact display  which provides a user a number of options for listing and editing contacts. A user can choose from any of a number of different types of use via a drop down box . The view shown in is that of a list view for a series of contact . Each contacts includes a photo depiction in column , a name display in column , a nickname field in column , the ringtone associated with that user in column , the assigned persona which may be selected via drop down boxes in column . Likewise, each user is associated with an invite link in column  and tick boxes in column  allow the user to select one or more contacts for immediate deletion via selection of the delete icon . Selection of one of the hyperlinks of a user contact will cause the server  to render an edit page allowing the user to edit information associated with that contact.","The functionality associated with the user interface in on a web browser can likewise be provided on a screen on a phone. -depict the contact interface which is displayed on a user phone.",{"@attributes":{"id":"p-0508","num":"0507"},"figref":["FIG. 37B","FIG. 37"],"i":"a","b":["102062","102064"]},{"@attributes":{"id":"p-0509","num":"0508"},"figref":["FIG. 37C","FIG. 37"],"b":"102066","i":"b "},"At , if the user has selected contacts in , a list of contacts  is displayed. The user can use the soft keys and any other input device on the phone to highlight a user in the display for selection. Selection of a contact opens a record for that contact. Optionally an options menu  is displayed depending on whether the contact is an advanced ID contact or not.","At , the user may display an options menu  for an advanced ID contact by selecting the options button  in . This menu allows the user to open a contact, assign a persona to the contact, invite the contact into subscription with the system of the present invention, or disable caller ID for that particular contact.  shows the options interface if a contact which has been selected in  is not an advanced ID enabled contact. The only two options available for the user in  are to open the contact, or invite the contact into subscription with the system.","If an advanced ID contact is opened (from ), the screen of  is displayed. The depiction of  shows that for a particular contact and Anna K, she is a member of the co-workers persona, has a picture assigned entitled \u201cAnna in NYC,\u201d is assigned the moonstar midi (moonstar.mid) ringtone, as a nickname \u201cAnna\u201d and has a work number and a home number associated with her contact information. Each of these items is selectable by moving a selection input on the phone and depressing an entry button. For example, pressing the Anna in NYC selection will result in the display shown in  wherein a graphic image associated with the contact is displayed. Selecting the moonstar midi ringtone will result in playing the ringtone in the depiction shown in . Selecting the nickname will allow the user to change the nickname via an interface J displayed on the phone.","Selecting the persona brings up a change persona menu as shown in . A change persona menu will display current personas which are associated with the user and allow the user to select one or more personas to change the particular user to. If the user selects, for example, the co-worker persona, a message such as that shown in  will be displayed indicating to the user that the co-worker persona has been assigned to Anna K. Finally, if the user selects to disable caller ID from the user, a warning message is displayed such as that shown in .","Pressing the \u201cpersona\u201d menu item  in menu bar  in  displays a personas interface  shown in .","As shown in , the persona screen displays a number of personas  and , , , , and  which provide the user with a short display of name of the persona, the number of users to whom the persona is assigned in parentheses, and the image the user is displaying in the persona to others, the name the user's displaying to others and the ringtone the user is displaying to others. It should be recognized that components of the interface include additional components of the persona, or less components of the persona depending on the real estate available on the user interface on the web page.",{"@attributes":{"id":"p-0516","num":"0515"},"figref":"FIGS. 38B-38N","b":"102100"},{"@attributes":{"id":"p-0517","num":"0516"},"figref":["FIG. 38B","FIG. 38B","FIG. 38C","FIG. 38D","FIG. 38D","FIG. 38E","FIG. 38F","FIG. 21C","FIG. 38D","FIG. 38D","FIG. 38G","FIG. 38D","FIG. 38H","FIG. 38I","FIG. 38H","FIG. 38H","FIG. 38J","FIG. 38K","FIG. 38J","FIG. 38K","FIG. 38L","FIG. 38M","FIG. 38M"],"b":"102130"},{"@attributes":{"id":"p-0518","num":"0517"},"figref":"FIG. 39","b":["1022","20","1022","40","1022","50","102110","102212","102216","102660"]},{"@attributes":{"id":"p-0519","num":"0518"},"figref":"FIG. 40","b":["10180","102310","102320","102320","102330","102340","102312","102350","102314","102315","102316"]},{"@attributes":{"id":"p-0520","num":"0519"},"figref":["FIG. 41","FIG. 36"],"b":["102400","102400","101950","102400","102412","102420","102430"]},"As noted above, when the system is implemented in accordance with a synchronization system as shown and described with respect to U.S. Pat. No. 6,671,757, 6,694,336 or 6,757,696, additional elements other than those shown in  may be present.  is block diagram illustrating how the integration between a number of users and the synchronization server  implemented in accordance with U.S. Pat. No. 6,671,757, 6,694,336 or 6,757,696 as used in to the present invention. An advanced ID management server  may comprise a server  or a sub-set of the elements of server , but including at least a management application  and a user info store  to a persona database  containing subscriber records . The synchronization server  is provided with sync account records , ,  for a number of buddies of a subscriber -. Synch server  communicates the synchronization mechanism disclosed in U.S. Pat. No. 6,671,757, 6,694,336 or 6,757,696 with buddy users -, -, and -. Rather than directly communicating changes via a download and upload of data, the transaction data packages as disclosed in U.S. Pat. No. 6,671,757, 6,694,336 or 6,757,696 communicate persona information by distributing changed logs to the client ---. The user communicates with the system server  via the phone interface or web interfaces as previously described.",{"@attributes":{"id":"p-0522","num":"0521"},"figref":["FIG. 43","FIG. 19","FIG. 43"],"b":["10100","10100","6","10140","102610","102640","10510","102646","102640","102660","102650","102675","102640","102640","102650","102620","102610","102626","102640","102628","102622","102624","102632","102640","102640"]},"The personal records may be represented in the synchronization system's content records by a specially added contact record field. When a change log describing a persona arrives at the listener engine , advanced ID engine  collects the affected buddies, finds the corresponding synchronization server record, and provides the contact modified transaction change log containing the new persona information back to the synchronization server. The synchronization server adds these modified transactions in accordance with the description of U.S. Pat. No. 6,671,757, 6,694,336 or 6,757,696 to the directly linked buddies' synchronization accounts. On such buddies' next synch, each party retrieves the updated contact record representing the persona that the user has assigned it to. Once the synchronization server  contacts the system server , the system server tracks which persona a given buddy is assigned to by adding a field to the contact record. Device - incorporates a device sync client  which syncs with the device's address book with change logs provided by the synchronization server . Both the native database  and the application ID database  may be used to store records for the advanced ID system in accordance with the present invention.",{"@attributes":{"id":"p-0524","num":"0523"},"figref":"FIG. 44","b":["102700","102710","102712","102714","102716","102718","102720","102722","102724","102700","10150","102718","10100","6","102700","102714","102720","102722","102724"]},{"@attributes":{"id":"p-0525","num":"0524"},"figref":["FIG. 45","FIG. 45"],"b":["102718","10150","102810","102812","102814","102816","102822","102822","102810","102820","102830","102824","102814","102826","102816","102832","102822","102834"]},{"@attributes":{"id":"p-0526","num":"0525"},"figref":["FIG. 46","FIG. 44","FIG. 44"],"b":["102716","102900","102718","102900","102900","102900","102900","102830","102820","102710","102912"]},{"@attributes":{"id":"p-0527","num":"0526"},"figref":["FIGS. 47","FIG. 44","FIG. 47"],"b":["48","49","50","51","103002","103010","103020","103030","103002","103030"]},"Since most current clients do not include native robust address books and SyncML clients,  presents an alternative configuration allowing a client  to communicate with an advanced ID server . The server  communicates with client  via a shared communications protocol as shown in . Client  includes a protocol engine  being an address book proxy  and utilizes both the limited native address book  and supporting database . An address book proxy  (such as entity manager  or some other form of proxy mechanism) manages communications and storage of information between the respective stores  and .","Yet another alternative configuration is shown in . In , a robust SyncML server communicates with a robust SyncML client , but utilizes an address book proxy  to split information between the database  and address book .","In , a limited SyncML server provides support for some synchronization information required for the persona, but not all the necessary information required. Likewise the phone's SyncML client may only support limited synchronization or field support. For example, the server  may support address and phone number synchronization but not downloading of movies and ringtones. In this embodiment, server  cooperates with the systems server  to communicate certain information via a limited SyncML client , while other information is communicated directly to phone's proxy . Multimedia information can be provided via the support applications  and , while more basic information is provided to proxy . An address book proxy  to split information between the database  and address book .","In , the client is equivalent to  except that information is stored in a robust native address book .",{"@attributes":{"id":"p-0532","num":"0531"},"figref":"FIG. 52","b":"103505"},"Transcoding can involve an actual conversion or may involve simply selecting an alternative version of the media it already knows about. For example, a value added service provider may supply ringtones in two or more formats, and selection of the appropriate format can be made and distributed to the receiving user. When requesting media requires the media object, the transcoding will be performed by the server; the transcoded media will be transmitted to the device automatically. Clients may query information related to the media they are about to download using a function supplied in the communications protocol. This function will return relevant information concerning the transcoded media available to the client. The server may also provide transcode-on-demand support for clients which need multiple formats of the same media (e.g., image) in different sizes (e.g., a thumbnail for the contact in the addressbook and a full screen picture).",{"@attributes":{"id":"p-0534","num":"0533"},"figref":"FIG. 52","b":"103505"},"The system supports digital rights management contained in the native applications, allowing value added providers to check any media uploaded or downloaded to or from the server or client device to determine whether the information contained therein is subject to digitalized management. The media record  which contains a media record type (local or nor) and identifier, size, hash value, a formula identifier, and a location. The media format  can be any of an image format , a ringer format , a video format . The image format type includes jpegs, pngs and gifs, as indicated at . The ringtone format can be a midi-type or an mp3 way or a special awp format. The video format can be an mpeg, wmp file, quicktime, or an avi. Additional formats for images, ringers, and videoclips may be easily added without requiring significant system modification.","The present invention also allows a user to wirelessly backup personal information stored on a cellular telephone using the wireless communication link, such as a wireless network, to which the phone can connect. The application results in a process which runs generally in the background of the user's phone application and therefore does not inhibit the user's use of the phone.",{"@attributes":{"id":"p-0537","num":"0536"},"figref":["FIG. 53","FIG. 53"],"b":["11100","11150","11160","11185","11150","11160","11100","11195","110","11150","11160"]},"Phone  is provided with a backup application or agent . Backup agent  can be a SyncML communication client designed to interact with a SyncML server  in accordance with approved and proposed versions of the SyncML OMA DS specification, including proposed extensions, (available at http:\/\/www.openmobilealliance.org). Alternatively, agent  can be an application designed to communicate with server  using an existing SyncML client on the phone provided by the phone's manufacturer (as well as any custom extensions supported by such client), or an application specifically designed to communicate with server  via another protocol, including a proprietary protocol. In one embodiment, the agent  is a fully implemented SyncML client and server  includes a SyncML server. In another embodiment, the application  is a client application device sync agent such as that disclosed in U.S. Pat. No. 6,671,757. In yet another embodiment, the application  is a client application responsive to control via a browser in the phone, with the application checking for changes to data on the phone and implements the processes described herein.","In general, a hardware structure suitable for implementing server , webserver  or SyncML server  includes a processor , memory , nonvolatile storage device , portable storage device , network interface  and I\/O device(s) . The choice of processor is not critical as long as a suitable processor with sufficient speed is chosen. Memory  could be any conventional computer memory known in the art. Nonvolatile storage device  could include a hard drive, CDROM, CDRW, flash memory card, or any other nonvolatile storage device. Portable storage  could include a floppy disk drive or another portable storage device. The computing system may include one or more network interfaces . An example of a network interface includes a network card connected to an Ethernet or other type of LAN. I\/O device(s)  can include one or more of the following: keyboard, mouse, monitor, display, printer, modem, etc. Software used to perform the methods of the present invention are likely to be stored in nonvolatile storage , portable storage media  and\/or in memory . The computing system also includes a database , which can be stored in nonvolatile storage . In alternative embodiments, database  is stored in memory , portable storage  or another storage device that is part of the system of  or is in communication with the system of . Other alternative architectures can also be used that are different from that depicted in . Various embodiments, versions and modifications of systems of  can be used to implement a computing device that performs all or part of the present invention. Examples of suitable computing devices include a personal computer, computer workstation, mainframe computer, handheld computer, personal digital assistant, pager, cellular telephone, smart appliance or multiple computers, a storage area network, a server farm, or any other suitable computing device. There may be any number of servers , n+1 managed by a system administrator providing a back up service in accordance with the present invention.","Also provided on server  is a backup data store . The backup data store is provided in the non-volatile memory space of server . While only one backup data store computer is shown, it should be recognized that the store may be replicated to or stored over a plurality of computers (, +1) to ensure that the data thereon is protected from accidental loss. It should be understood that the representation of the SyncML server  and web sever  need not require that such servers be provided on different physical hardware than the backup server .","In accordance with the invention, application agent  communicates personal information and changes made to the personal information stored in the data store of the telephone  to server  via the wireless network. Communication of user data from the device may take several forms. Where the client is a SyncML client in communication with the server , communication may take place using the standards set forth in the SyncML specification. Changes are transmitted on a record-by-record basis or field-by-field basis. Alternatively, communication may occur via another protocol. In an alternative embodiment, agent  is a self-supporting application designed to run as a JAVA or BREW agent, or any other device or operating system specific agent (such as an agent operable on the Symbian Operating system). This agent can either include its own SyncML client, or interact with an existing SyncML client on the telephone. Changes can occur at field level or byte level. Alternative embodiments can communicate via alternative protocols via the wireless communications link to store information on the backup data base .","The server  stores user data in the backup store in a manner which associates the data with the user of the phone. In one embodiment the data is stored in bulk\u2014that is all records and information for the user are stored in simple text form, or a copy of the entire database from the phone is stored on the server. In this embodiment, the server may store any number of copies of the data on a date-identified basis. Alternatively, the server  translates this information into change logs, in one embodiment, in accordance with the teachings of U.S. Pat. No. 6,671,757. This information is stored in backup data store  on server . This information is stored in the data store using a unique identifier (UID) associating the data with the individual user. The identifier may be any randomly selected identifier, so long as the user is uniquely identified, and the data is associated with the user. In a further aspect, this user UID may be a universally unique identifier (UUID), created in a manner described in the aforementioned U.S. Pat. No. 6,671,757 or other manners to create a single ID for a given user.","Data store  can be any form of data storage for the user data. In one embodiment, the data store is a simple copy of the information stored on the device . In another embodiment, the data store is a database, such as an object database or a relational database. In yet another embodiment, the data store is simply a storage container for change logs created in accordance with U.S. Pat. No. 6,671,757.","A web server  allowing a user on a computer or other device  having a web browser may optionally be provided to allow a user to configure aspects of the system of the invention. Server  may have a hardware configuration similar to computer  and may comprise one or more physical computers. Additionally, web server  may be integrated with server .","In general, a first embodiment of the system described below presents a system whereby certain aspects of the backup system of the present invention are configured via a phone interface. In each case where a phone interface is used, the system can alternatively be configured by a user via a web interface provided by the web server  via the user device .",{"@attributes":{"id":"p-0546","num":"0545"},"figref":["FIG. 54","FIG. 54","FIGS. 62-64"],"b":["11160","11100","11110","11160","11100"]},"The system administrator controls and maintains the server , and provides the agent  for the phone. Alternatively, the agent may be provided by a phone manufacturer and designed to communicate with server  (directly or thought SyncML server ). The agent may be pre-loaded on the phone prior to distribution by the manufacturer or wireless service carrier, or provided for download by the administrator via the wireless network. In the latter embodiment, a user initially downloads the application from a system administrator via the communication link . In general, wireless carriers now provide many forms of downloadable applications for intelligent telephones having the ability to run the applications in a BREW or JAVA. BREW (Binary Runtime Environment for Wireless) is an open source application development platform for wireless devices equipped for code division multiple access (CDMA) technology. Likewise, JAVA or J2ME (Java 2 Micro Edition) are similar platforms from Sun Microsystems.","Once the application is installed, at step  in , the user contacts the backup site  using the phone  and application . The manner in which this might be presented to the user is illustrated in and . A welcome screen is shown in prompting the user select button  on wireless phone  to move to the \u201cnext\u201d screen shown in ","As will be understood by those of average skill in the art, a cellular telephone  shown in through includes \u201csoft\u201d buttons  and . The menu items appearing at the lower portion of the screen indicated by reference numerals  and  are the commands which change relative to the display and are controlled by the application  (and other types) running on the cellular telephone . In , a \u201cnext\u201d button and a \u201ccancel\u201d button are shown. Buttons  and  control the \u201cnext\u201d and \u201ccancel\u201d functions, respectively.","Once the user agrees to connect to the site, as shown in , the user is presented with a screen illustrating the phone is connecting to the wireless network. The user's mobile number as shown at reference numeral  is displayed.","Returning to , at step , the user may be prompted to agree to a software license and license for using the service. This is illustrated in . If the user does not agree at step , the process ends. If the user agrees, then at step , the phone downloads the user number as an ID. At step , the user selects and confirms a PIN. This is illustrated in through . In , the user enters a registration PIN into the phone and selects the next command by depressing soft button . In , the phone displays the enter PIN and prompts the user to save the pin code. The user moves on to the next screen by depressing soft button . This screen in shown in prompting the user to select an option for the service to return the PIN to the phone should the user forget the PIN.","Returning to , following completion of step  in , the user is prompted to set a backup schedule at step . This setup process is shown in through . In , the user is prompted to set the schedule by depressing the soft button . In , four options are displayed for the user to select a regularly recurring schedule. These options are \u201cevery day\u201d, \u201cweek days\u201d, \u201cweekly\u201d, or \u201cunscheduled\u201d. When the user selects the next button in , the daily backup screen is shown in . The daily backup allows the user to set a specific time for the regularly scheduled backups. If the user selects a weekday schedule, this time can also occur at the same interval every day. The weekly schedules (selection  in ) function in a similar manner. The \u201cunscheduled\u201d backup option allows the user to manually backup information on the phone by manually initiating the application and sending changes to the backup store as illustrated at step  in . In yet another embodiment, the scheduling can be to provide backup data to the server every time the user changes information on the phone.","In yet another embodiment, scheduling is at least partially controlled by the server . In this embodiment, when the user attempts to set a scheduling time, the server  checks a separately kept record of the backup transmission schedules of other users to ensure that load balancing of the transmissions of various users occurs on the server. If, for example, a user desires to send backup data every day at 8 AM, and a number of users desire the same time, the system can instruct the application  to alter its schedule in a manner which does not significantly impact the schedule for the user. This change can ensure that the server  has sufficient communications bandwidth and processing power to handle concurrent requests which may be occurring at or near the same scheduling time as the user's selected time.","In another embodiment, backup scheduling is controlled entirely by the server. In this aspect, the user is not provided with an interval selection, and the server can schedule interval backups (at regular, irregular or arbitrary times). In yet another embodiment, backup data is transmitted at some point after each change to the phone's data store.","Again returning to , once the backup scheduled has been set at step  in , the initial backup information must be stored on the server . This occurs at step  and is illustrated in through . In , once the setup is complete, the user is prompted to press the \u201cnext\u201d soft button  to begin the initial backup process. Upon depressing the \u201cnext\u201d soft button  as shown in , the phone connects to the backup server , and at the information is transmitted to the backup server. The items field  shown in the screen in keeps a running count of the items being sent to backup server . When the backup is complete, shows the status screen displayed by the phone upon completion of the backup process.","At this point, at the lower portion of the screen, soft buttons  and  present the user with a \u201cbackup now\u201d option, allowing the user to manually send information to the phone as indicated at step  in , and a \u201coptions\u201d button. The \u201coptions\u201d button allows the user to select various administrative functions in accordance with the backup process. For example, the options might allow the user to change the schedule of the backup process, due to the user's mobile number account which is identified to the backup system , change the user PIN, access the help feature, or access information about the agent .","Returning to , once the status screen is shown in step , the user may continue to use this telephone in the manner that the user is normally accustomed to. At a later point and time as indicated by the dashed interval between steps  and , the backup interval set by the user's schedule will be reached. At this point, changes and additions and deletions will be sent to the backup store. This is illustrated in through . In , the application may display a status screen to the user, in display that it is connecting to the backup server , in display the items being backed up, and in display the status of the backup as completed. It should be recognized that the interval  may in fact comprise a manually initiated event as shown at step .","It should be further recognized that steps  and  may occur in the background, and no indication may be provided to the user. That is, once the backup interval is reached, the phone may simply download additions, deletions or changes to the user and keep a record of when it performed its last backup so the user can check to ensure that the backup process is running on a regular basis. The matter of interaction between the application and the user (e.g. how much information the application provides to the user about its activities) can be selected by the user. In an alternative embodiment, an indicator such as a \u201cpop-up\u201d information message may be provided to the user at competition of the backup. Users can select whether and how often to receive information messages.",{"@attributes":{"id":"p-0559","num":"0558"},"figref":["FIG. 56","FIGS. 57","FIG. 57"],"i":["a ","e ","a "],"b":["57","11402"]},"Returning to , at step , the device agent transmits the user's unique identifier to the server. In step , the identifier is indicated as being the user's phone number and this identifies the user to the backup system. Alternatively, the method may prompt the user to indicate whether the user has previously set up an account with the system administrator and request the user's original identifier and PIN. As this is an initial use of the application on a phone containing no user data, in one embodiment, the server can recognize that no data is present in the phone and prompt the user to do a restore, the application will promptly recognize the user as an account holder at step . The application will then prompt the user to enter a PIN at step . This is illustrated in ","Once the user enters the PIN at step , data will be restored to the device in step . This is illustrated in which indicates to the user that the application is \u201crestoring\u201d the information to the phone. shows a status screen displaying to the user that the information has in fact been returned to the user's phone.","Alternative embodiments of the restore process may be utilized as well. In one alternative, the restore process may include providing information to a phone which has had information entered on it more recently than the backup store's state of the user's data. Suppose, for example, a user may has an account created with information in the backup store which creates a backup state, for example \u201cstate 1\u201d, at a given time. If the user needs to perform a restore\u2014such as if the user looses a phone and purchases a new one\u2014the restore process could simply provide the state 1 information to the device. If, however, the user manually enters information on to the device thereby creating a discordance between the state 1 information in the backup store and the more recently entered phone data.","In this discordance case, in one alternative, the state 1 information can be provided to the phone while ignoring any new information entered by the user on the phone (thereby making the backup store the primary information container and ignoring changes on the phone). In a second alternative, the agent can recognize that the phone is not equivalent to the phone used by the user to create the state 1 information (using for example a unique identifier for the phone, such as that discussed below, or some other means of identifying the new phone state\u2014such as a user selection). Once the phone's state is established, the user's personal information stored in the phone is sent to the backup store, a process running on the server can resolve discrepancies or duplicates, and then write the new state of the user's data to the phone. In another alternative, the information on both the device and the backup store can be merged. In this latter alternative, a possibility of duplicate entries exists, and a mechanism for dealing with such duplicate entries (such as identifying them to the user and requesting which of the duplicates to keep) may be provided. Selection between such options may be given to the user during the setup process or under the options menu in the application or during restore, or on the web.","Additionally, the system can provide additional options allowing the user to roll back the user's personal data to a particular date and time. This functionality can be implemented in a number of ways, but is particularly suited to use in the system of the present invention as implemented using the backup technology disclosed in U.S. patent application Ser. Nos. 09\/641,028, 09\/642,615 and U.S. Pat. No. 6,671,757. The numerous advantages of the data backup technology in the U.S. Pat. No. 6,671,757 are discussed therein. However, it will be recognized that using such technology, one can re-create user data back to a particular date. Using such technology, the system starts with a first change-log or data package identified with a user and sequentially performs the actions defined therein on the data stored therein, searching for the change or date in question. When such change is reached, the item is \u201crolled back.\u201d In this embodiment, a bookkeeping log may be kept in order to remove future changes for this object from later change logs associated with the user, or one could note the state of the record in its rolled-back state and add a new \u201cmodify\u201d change-log to the datastore using the pre-rollback \u201ccurrent version\u201d as the base. Alternatively, this feature may also be implemented using any number of other technologies, such a technology which stores all changes associated with the user, and during restore function only returns the most recent changes or recent setup data to the user. Alternatively, the data store may store a complete set of data for each backup the user makes, though this often provides a relatively data intensive scheme.","This rollback option as illustrated in , once the use activates the application in step , the phone sends the unique identifier of the user (in one embodiment, the phone number) as the user identifier to the backup store  at step . At step , the application presents the user with an option to rollback a single or a group of contacts for a particular date. As step , once the user enters the PIN and the date of the rollback, and selects a single or group of contacts to be rolled back, the application restores the data from the storage server at step . Alternatively, the state of the data just prior to the performance of the rollback can itself be stored prior to the rollback function being performed. In a further embodiment, the agent can provide a \u201cremember PIN\u201d option, and store the PIN locally so the user does not need to re-enter the pin for each rollback or other identification function.","In alternative embodiments of the invention, a web-interface may allow access to the backup store and the user may implement the rollback function via the web interface. For example, the interface can display a list of dates of each sync and the number of records or fields synced, and allow the user to roll back an individual or collective dated group of contacts to their state on a particular date. This interface can also be implemented via a WAP specific interface for the phone .",{"@attributes":{"id":"p-0567","num":"0566"},"figref":["FIG. 59","FIG. 60"]},"In , the user, at step  accesses a web-based interface to the backup information data in the backup database. At step , the user modifies records which are initially generated from the user's wireless phone  using the web interface and the changes are stored in the backup database. At some point in the future, as indicated by the dashed line between steps  and , the user (or scheduler, in automated or controlled scheduling embodiments) activates the application on the phone  and at step , the phone transmits the user identifier such as the phone number to the system. Once the system server  recognizes that the particular user is a member of the system, the option to upload new and changed contacts which have been changed by the web access at step  is presented to the user. After the user enters a personal information number at step , and confirms the upload process, data is installed on the device at step . Alternatively, the upload need not be confirmed, may be prompt-less, or optionally prompt the user. In another embodiment, changes to the data store  can be made by using any of a number of commercially available products which allow data access to a users software personal information manager application, such as that described in U.S. Pat. No. 6,671,757. Such products extract information from personal information managers such as Microsoft Outlook and transfer it to alternative formats which can be read by other applications.",{"@attributes":{"id":"p-0569","num":"0568"},"figref":["FIG. 60","FIG. 59","FIG. 59"],"b":["11702","11704","11808","11808","11810","11160","11812","11814","11816","11818","11816"]},"In a still further embodiment, the phone agent  may not wait for an SMS message but may simply periodically poll the server to determine whether changes have occurred to the backup store.","In yet another embodiment, the polling may determine whether changes have occurred on the phone relative to the backup data store, and transmit those changes to the data store. This embodiment is shown in . As shown therein, if a user modifies a record on the phone at step  and subsequently modifies a record on the backup store using the web interface at step , both before any changes on either the store or the phone are exchanged with the respective other device, the two states (state 1 and state 2) will be out of sync. At some time after the modifications at steps  and  as indicated by the dashed line between step ,  and , with the application active in the background of the phone, some indication of the changes will occur. This is represented at step  and may occur when the phone receives an SMS message indicating changes have occurred, the polling of the server discussed above occurs, or the timed backup interval is reached. At this step , changes between the phone and the backup store are exchanged. As in , the data may be exchanged with user intervention (steps  and ) or without (). In addition, the conflict state discussed above with respect to the discordance case may occur, and the resolutions discussed above may likewise be implemented in this embodiment.","In a still further embodiment, the SMS message may instruct the phone to download any changes made to the phone since it's last backup transmission to the backup store.","A still further embodiment of the invention provides automation of the sign-up, account access and backup processes based on a unique phone identifier or phone UID which allows the system to determine more detailed functional information about the phone. In this embodiment, a phone UID may be associated with a user UID. In a further embodiment, the phone UID may be a universally unique phone ID (or phone UUID). In one embodiment, the phone UUID may comprise an IMEI or ESN. Each GSM phone contains an IMEI\u2014International Mobile Equipment Identity number. This is a unique identifier assigned to all GSM devices. The IMEI is like a serial number and is used by the network to identify the handset (in conjunction with the SIM ID). The SIM ID is provided on a Subscriber Identity Module which is a small, stamp-size \u201csmart card\u201d used in a GSM phone. The SIM card contains a microchip that stores data that identifies the caller to the network service provider. The data is also used to encrypt voice and data transmissions, making it nearly impossible to listen in on calls. The SIM can also store phone book information\u2014phone numbers and associated names.","CDMA phones also have an individual identification number, the ESN. This number can be found on the back of a handset under the battery and is usually eight digits long, combining letters and numbers.","The GSM Association (GSMA) has the role of the Global Decimal Administrator allocating International Mobile Equipment Identity Numbers (IMEI) to manufacturers for use in GSM. IMEI numbers are assigned to individual phones by the manufacturer and can identify the type, nature and characteristics of the phone to which they are assigned.","A method for using a phone UID associated with the user's data is shown at . In some point prior to the phones being distributed to a user at step , a phone UID is assigned to a user's phone. The phone UID may comprise an IMEI or other ID such as an ESN number as discussed above. Subsequently, at step , the user acquires the phone and depresses a \u201cbackup\u201d option on the phone. The backup option may be provided in an application agent as discussed above, or in an application specifically tailored for use on the phone, also discussed above. Initiating the backup function on the phone in step  will begin a backup process in accordance with any of the aforementioned embodiments, but will allow a backup account to be automatically created using a phone UID and a user UID. At step , using the phone UID, the system can determine the characterization (the type, features, and functionality) of the phone based on the phone UID. This is particularly true in cases of GSM phones using an IMEI number. It will be further recognized that in step , the user UID can be the SIM ID which is provided by the SIM in a GSM phone. Alternatively, the user UID may be the phone number or any other unique identifier for the user.","At step , once both the phone UID and the user UID are known, a backup account can be automatically set up by the system without the need to know additional information from the user. Alternatively, additional authentication information may be required by the system, such as entry of a PIN.","At step , each time the user stores backup information to the backup data store, the phone UID specifying the phone from which the information is obtained can be recorded. Hence, the backup data store will know when the user uses an alternative phone having a different phone UID to store information.","At step , which may be separated in time from step  as indicated by the dash line between steps  and , the user initiates a backup data transmission using a new phone UID. This may occur, for example, when the user moves a SIM to a new phone in the GSM technology, or otherwise authenticates using his user UID any authentication required by the system. The authentication step  may be optional in cases where authentication is provided by the SIM ID or may be optionally disabled by the user.","Once the system's detects, at step , that the user has provided a new phone UID, at step , the system records the new phone UID at step  and the system can automatically perform the system data restore transmitting changes to the new phone. In the situation shown in steps  through , because the user has switched the phone UID, it will be known to the system that the most recent backup state came from a different phone and the new phone UID will have a data state which is not current.","Again, as in the discordance data state case discussed above, the user may enter data onto the new phone prior to performing initiation of the backup at step . In this case, the performance or data handling discussed above with respect to the discordance case can again be applied.",{"@attributes":{"id":"p-0582","num":"0581"},"figref":["FIGS. 63 and 64","FIGS. 63 and 64"],"b":["111004","11160","11110"]},"In , at step , the phone is assumed to have shipped with a preconfigured SyncML client. By preconfigure, the SyncML client on the phone is shipped such that by depressing the backup (or sync) option in the agent, the phones' manufacturers sync agent has the identification information to access the SyncML server  shown in . At step , where the phone ships with a preconfigured SyncML client, the phone UID and user UID are sent to the SyncML server when the user depresses the backup button on the phone. At step , the user information and phone UID are associated in the backup data store, and an account is established at step .","At , the phone ships without a preconfigured SyncML client at step . This is at , optionally, the agent may need to be downloaded and installed on the phone at step . At step , upon initiation of the backup option in the phone application, configuration information can be sent via an SMS message to the phone manufacturer's SyncML client providing configuration provisioning information to the SyncML client. This allows the SyncML client on the phone to address the SyncML server  in . Next, the account establishment process at step  begins using the phone UID and user UID.","In the embodiment discussed with respects to , user experience can be relatively unobtrusive. For example, the user need only press a \u201cbackup\u201d soft button on the phone to have the account establish information transmitted to the backup data store. Any loss or change in the SIM to a different phone will result in the restore process being performed without any additional user intervention.","Additionally, the administrator of the backup data store can make determinations about how much data to provide to the phone. For example, if the phone is identified based upon the phone UID is known to be a feature rich device, the administrator can backup all settings which are available on the phones such as the calendar, task, and phone book. If, upon switching phone UID's, the user moves to a less feature rich phone, the provider can determine that, for example, the new phone has only an address book, and provide only the address book data in the restore function. The user need not provide any configuration information to the administrator during this process.","The foregoing detailed description of the invention has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. For example, tasks performed by the agent on the phone may be performed by the server as the result of a call to a code on the server instructing the server to perform the method and return data to the server. In addition, where authentication is required by the system, the user may be provided with the option to store the authenticating information in the phone or agent and not manually enter the authentication each time required. Still further, authentication can be transmitted by means of exchanged SMS messages. The functions described herein may be assigned to the server or a phone agent or application based on the processing power available on the phone. The described embodiments were chosen in order to best explain the principles of the invention and its practical application to thereby enable others skilled in the art to best utilize the invention in various embodiments and with various modifications as are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the claims appended hereto.","The many objects and advantages of the present invention will be readily apparent to one of average skill in the art. All such objects and advantages are intended to be within the scope of the invention as defined by the written description and drawings presented herein."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention will be described with respect to the particular embodiments thereof. Other objects, features, and advantages of the invention will become apparent with reference to the specification and drawings in which:",{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIGS. 1-7"},{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 9A"},{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 9B"},{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0094","num":"0093"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0097","num":"0096"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0099","num":"0098"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0101","num":"0100"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0102","num":"0101"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0103","num":"0102"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0104","num":"0103"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0105","num":"0104"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0106","num":"0105"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0107","num":"0106"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0108","num":"0107"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0109","num":"0108"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0110","num":"0109"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0111","num":"0110"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0112","num":"0111"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0113","num":"0112"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0114","num":"0113"},"figref":"FIG. 33"},{"@attributes":{"id":"p-0115","num":"0114"},"figref":"FIG. 34"},{"@attributes":{"id":"p-0116","num":"0115"},"figref":"FIG. 35"},{"@attributes":{"id":"p-0117","num":"0116"},"figref":"FIG. 36"},{"@attributes":{"id":"p-0118","num":"0117"},"figref":"FIG. 37A"},{"@attributes":{"id":"p-0119","num":"0118"},"figref":["FIGS. 37B-37M","FIG. 37A"]},{"@attributes":{"id":"p-0120","num":"0119"},"figref":"FIG. 38A"},{"@attributes":{"id":"p-0121","num":"0120"},"figref":["FIG. 38B-38N","FIG. 38"]},{"@attributes":{"id":"p-0122","num":"0121"},"figref":"FIG. 39"},{"@attributes":{"id":"p-0123","num":"0122"},"figref":"FIG. 40"},{"@attributes":{"id":"p-0124","num":"0123"},"figref":"FIG. 41"},{"@attributes":{"id":"p-0125","num":"0124"},"figref":"FIG. 42"},{"@attributes":{"id":"p-0126","num":"0125"},"figref":["FIG. 43","FIG. 42"]},{"@attributes":{"id":"p-0127","num":"0126"},"figref":"FIG. 44"},{"@attributes":{"id":"p-0128","num":"0127"},"figref":"FIG. 45"},{"@attributes":{"id":"p-0129","num":"0128"},"figref":["FIG. 46","FIG. 45"]},{"@attributes":{"id":"p-0130","num":"0129"},"figref":"FIG. 47"},{"@attributes":{"id":"p-0131","num":"0130"},"figref":"FIG. 48"},{"@attributes":{"id":"p-0132","num":"0131"},"figref":"FIG. 49"},{"@attributes":{"id":"p-0133","num":"0132"},"figref":"FIG. 50"},{"@attributes":{"id":"p-0134","num":"0133"},"figref":"FIG. 51"},{"@attributes":{"id":"p-0135","num":"0134"},"figref":"FIG. 52"},{"@attributes":{"id":"p-0136","num":"0135"},"figref":"FIG. 53"},{"@attributes":{"id":"p-0137","num":"0136"},"figref":"FIG. 54"},{"@attributes":{"id":"p-0138","num":"0137"},"figref":"FIGS. 55","i":["a ","q "],"b":"55"},{"@attributes":{"id":"p-0139","num":"0138"},"figref":"FIG. 56"},{"@attributes":{"id":"p-0140","num":"0139"},"figref":"FIGS. 57","i":["a ","e "],"b":"57"},{"@attributes":{"id":"p-0141","num":"0140"},"figref":"FIG. 58"},{"@attributes":{"id":"p-0142","num":"0141"},"figref":"FIG. 59"},{"@attributes":{"id":"p-0143","num":"0142"},"figref":["FIG. 60","FIG. 59"]},{"@attributes":{"id":"p-0144","num":"0143"},"figref":"FIG. 61"},{"@attributes":{"id":"p-0145","num":"0144"},"figref":"FIG. 62"},{"@attributes":{"id":"p-0146","num":"0145"},"figref":"FIG. 63"},{"@attributes":{"id":"p-0147","num":"0146"},"figref":"FIG. 64"}]},"DETDESC":[{},{}]}
