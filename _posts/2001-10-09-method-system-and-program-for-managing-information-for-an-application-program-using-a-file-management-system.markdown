---
title: Method, system, and program for managing information for an application program using a file management system
abstract: Provided is a method, system, and program for managing information for an application program. The information includes an information class having a plurality of attributes values. The application program maintains multiple information class instances and wherein each instance includes at least one of the plurality of attribute values. User input is received indicating a plurality of information class instances and for each information class instance at least one attribute value. A main directory is generated for the application program. For each information class instance received from the user, a subdirectory is generated from the main directory for the information class instance and, for each received attribute value for the information class instance, one attribute file is generated providing the at least one attribute value. Each generated attribute file is stored in the subdirectory of the information class instance for which the attribute value is provided.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06934721&OS=06934721&RS=06934721
owner: Sun Microsystems, Inc.
number: 06934721
owner_city: Santa Clara
owner_country: US
publication_date: 20011009
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE PREFERRED EMBODIMENTS","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","ADDITIONAL IMPLEMENTATION DETAILS"],"p":["1. Field of the Invention","The present invention relates to a method, system, and program for managing information for an application program using a file management system.","2. Description of the Related Art","Information management programs, such as e-mail programs, calendaring programs, project management programs, accounting programs, etc., provide users with different views of information through a graphical user interface (GUI). Each window view may include numerous different fields of variable information. The views may also include user interactive elements, such as graphical buttons, hypertext links, etc., that allow the user to interact with the application program to modify information, access further views of information, etc. Many such information management programs maintain the data for the fields in a relational database program comprised of records of columns of data. Such application programs require interaction with a separate database program or incorporate a database program within the application. Typically, the application must utilize an Application Programming Interface (API) to communicate with the external or embedded database program, such as the Open Database Connectivity (ODBC) protocol. Although there are many advantages databases offer for organizing data, embedding a database within a program or requiring an interface to another database program increases both the complexity and cost of the application.","Other prior art applications may store application data in a single file that can be accessed by the application as needed. Although information management programs that store data in a single large file, such as an ASCII delimited file, may avoid the complications experienced using a database program for data management, using a single large file to store all the application data will likely prevent multiple users from concurrently accessing the data file, thereby limiting such information management programs that store data in a single data file to single user applications. Database programs implementing a client\/server architecture, on the other hand, permit multiple users to concurrently access data in the database, yet require additional programming complexity and cost to incorporate the database program with the application.","Thus, there is a need in the art for an alternative data management architecture for storing data used by information management programs in a multi-user environment.","Provided is a method, system, and program for managing information for an application program. The information includes an information class having a plurality of attributes values. The application program maintains multiple information class instances, wherein each instance includes at least one of the plurality of attribute values. User input is received indicating a plurality of information class instances and for each information class instance at least one attribute value. A main directory is generated for the application program. For each information class instance received from the user, a subdirectory is generated from the main directory for the information class instance and, for each received attribute value for the information class instance, one attribute file is generated providing at least one attribute value. Each generated attribute file is stored in the subdirectory of the information class instance for which the attribute value is provided.","In further implementations, a request for information is received on at least one requested attribute value for the information class instances. In response to the request for information, for each information class instance, the subdirectory for the information class instance is accessed and a determination is made as to whether the accessed subdirectory includes each requested attribute value in one attribute file in the subdirectory. If the subdirectory includes each requested attribute value in one attribute file, then each requested attribute value from the attribute file is returned.","Further provided is a method, system, and program for managing information on a plurality of projects, wherein each project is capable of having a plurality of attribute values. User input is received on a plurality of projects and for each project at least one attribute value. A main directory is generated and for each project for which user input is received, a subdirectory is generated from the main directory for the project and, for each received attribute value, one attribute file is generated providing the at least one attribute value.","Still further, the attribute values for each project are capable of comprising project comments, a project manager, projected completion date, project purpose, project start date, project completion date, project status, project holidays, and project interrupts.","Additionally, a request for information may be received on at least one requested attribute value for the projects. In response to the request for information, each project subdirectory is accessed and a determination made as to whether the accessed project subdirectory includes each requested attribute value in one attribute file in the subdirectory. If the subdirectory includes each requested attribute value in one attribute file, then each requested attribute value is returned from the attribute file.","In the following description, reference is made to the accompanying drawings which form a part hereof, and which illustrate several embodiments of the present invention. It is understood that other embodiments may be utilized and structural and operational changes may be made without departing from the scope of the present invention.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["2","4","6","4","8","10","8","10","12","10","8","12","12","12","2","14","14","12","12","12","10"],"i":["a, b . . . n ","a, b . . . n ","a, b . . . n ","a, b . . . n ","a, b . . . n ","a, b . . . n ","a, b . . . n","a, b . . . n ","a, b . . . n ","a, b . . . n ","a, b . . . n "]},"In certain implementations, the view pages may comprise HTML or Extensible Markup Language (XML) pages including hypertext links to other view pages . Additionally, the view pages may be implemented in alternative multi-media formats, such as Joint Photographic Experts Group (JPEG), the Adobe Portable Document Format (PDF)**, PostScript**, tagged image file format (TIFF), etc. In such case the viewer would include the capability to render such alternative view page media format. In response to a request from one viewer for a particular view at a universe resource locator (URL) address, the information server  would access the data designated to be inserted into the requested view page from the data directories  in the manner described below and insert the accessed into the designated field in the view page . The information server  would then return the filled-in view page to the requesting client .","The clients include viewer programs , such as an HTML browser capable of downloading and rendering a page of content from the server  using a network transfer protocol, such as HTTP, etc. The clients may comprise any computing device known in the art, such as a personal computer, workstation, laptop computer, hand held computer, telephony device, mainframe, server, etc. The server  comprises a server-class machine or any other type of computing device capable of responding to data requests from the clients ","In certain implementations, the data directories  store user data across a plurality of files. For instance, a type of data maintained by the information manager  may be categorized as part of an information class, e.g., a project for which information is maintained in a project manager program; a type of e-mail box in an e-mail program; a category of accounting information (e.g., expense, income, equity, etc.). Each instance of the class would include related information, such as attribute values of the general class, where the attribute values may differ among the information class instances.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2","b":["10","8","50","52","52","54","54","54","56","52","56","58","2","8","2"],"i":["a . . . n ","a . . . n ","a . . . n ","a . . . n ","a . . . n ","a . . . n ","a . . . n","a ","a . . . n ","a, b . . . n "]},"For instance, the general class directory  may comprise a calendar and each calendar instance may comprise a day, such that each subdirectory  is an instance of one day; the class may comprise an e-mail message for a particular e-mail box and the instance would comprise the type of e-mail box, e.g., send, drafts, inbox, delete, etc.","In one implementation, the information server  comprises a project manager. One general class would comprise a project class, and each instance provides information on a particular project. There would be a separate subdirectory for each project instance. Following are some examples of attribute files that provide the attribute values for each project class instance. The following names comprise the file extensions used for the attribute files.\n\n",{"@attributes":{"id":"p-0035","num":"0049"},"figref":["FIGS. 3","FIG. 1"],"i":["a, b ","a . . . n ","a, ","a","a ","a","b, ","b ","b, ","a, b . . . n ","a, b . . . n","a, b . . . n "],"b":["10","8","100","100","104","106","144","100","104","144","100","150","150","152","152","152","152","152","152"],"sub":["a, 1 ","a, n ","a, 1 ","a, n ","a, 1 ","a, n "]},"Further provided is a details subdirectory () providing information on tasks associated with a project directory in which the particular details subdirectory is included. The details subdirectory includes one or more task subdirectories . . . for each task defined for a project . Each task subdirectory . . . includes a plurality of attribute files providing attribute information on the task, including a status file, e.g. , providing information on the current status of the task, such as on-time, late, delayed, quality, etc.; a .done file, e.g. , indicating the percentage completed of the task; and a .numbugs file, e.g. , indicating a number of bugs reported for the particular task. In this way, a user may further divide a project into particular tasks for which information may be maintained and presented, thereby further segmenting and providing a lower level of detail of information on the project.","Additional project instance subclass directories (shown in ) may also be included, having the project attribute files . . . , . . . , . . . , calendar subdirectory , and day files . . . , . . . , . . . . As discussed, the attribute values may be implemented as data within the file or as data within the file name, followed by the file extension names described above. In this way, each discrete type of information that may be provided for an instance of a class type, e.g., project name, is implemented as a separate file.","The information server  would receive requests from the viewers for a view page providing access to project data in the data directories  or a page that includes fields in which the user may enter data for a project that will be stored in subdirectories and files of the data directories .  illustrates a home view page that the information server  would initially transmit to a client that provides access through hypertext links to other of the view pages A client selection of the \u201cAdd a Project\u201d link  would cause the information server  to return a page to the client including fields in which the client can enter attributes of a new project, where each entered attribute would be stored in one attribute file . . . ","To return a view page including project data from the data directories , the information server  would access the data in the subdirectory files in a predefined manner to access particular information to insert into a user requested view to return to render in the client viewer ",{"@attributes":{"id":"p-0040","num":"0054"},"figref":["FIG. 5","FIG. 5","FIG. 3"],"b":["12","8","2","200","12","12","250","114","252","116","254","118","256","106","258","260","262","122","124","126","264","266","268","134","136","138","270","128","272","104","274","120"],"i":["b ","a, b . . . n ","b ","b ","a","a ","a","a","a","a","a","a","a","a","a ","a","a","a"]},"The user at the client would select the submit changes button  displayed on the page in their viewer program to transmit the page including data entered in one or more of the entry fields -. In response to receiving the page, the information server  would then create a new subdirectory for the new project. For each entry field in which data is entered, the information server  would create the file corresponding to such data entry field and then implement the attribute value entered in the entry field - in the created files . . . , where the added project comprises the (n+1)th project for which information is maintained in the projects directory . The information server  would further generate a calendar subdirectory for the new project subdirectory and add a day file for the day the project was created. Moreover, a details subdirectory for the new project subdirectoy would also be added. In this way, all the subdirectories and accompanying files are created for the project subdirectory being created. Additionally, there can be additional fields in the add project page for additional attributes and information which may be maintained in additional files in the project subdirectory.","Selection of the \u201cProjects Interrupts\/Delays\u201d hypertext link  in the home page () would display all interrupts\/delays and a link to a page (not shown) through which the user can enter information on an interrupt to a project. The entry fields on the add interrupt entry page would allow for entry of data in fields for the following interrupt attributes.\n\n","In certain implementations, all the above information would be maintained in the interrupts file for each interrupt to the project associated with the subdirectory including the interrupts file . The .interrupt file would include, for each interrupt, each of the above attributes (type of delay, date, duration, and comments). In this way, the attribute file interrupts has an attribute that has multiple components and would include multiple instances of the components, one instance for each defined interrupt. The multiple components of the interrupt include the interrupt attributes, such as type of delay, date, duration, etc. Thus, certain of the attribute files may include only one value, e.g., the start month, or may include multiple instances, such as multiple interrupts. Further, each attribute value instance in the attribute file may itself be comprised of multiple components or sub-attribute values.",{"@attributes":{"id":"p-0044","num":"0062"},"figref":["FIG. 6","FIG. 7","FIGS. 3","FIG. 6"],"b":["12","8","12","8","12","6","300","8","202","4","302","312","100","102","304","144","8","306","144","8","308","144","12"],"i":["d ","d ","d ","a, b . . . n ","a, b ","a, b . . . n ","a, b . . . n","a, b . . . n","d "]},"The information server  then accesses the interrupt summary page template and generates a page including, but not limited to, the generated table .  illustrates the generated page  for the interrupt selection including the table  and an add new interrupt button  which would return page (not shown) including entry fields for the user to enter interrupt information. The add new interrupt  may be displayed on other view pages. The user would enter the interrupt information through their view program GUI and then submit the page to the information server  to add a new project interrupt delay to an .interrupt file for the project, or create a new .interrupt file for the project if one does not exist.",{"@attributes":{"id":"p-0046","num":"0064"},"figref":["FIGS. 8","FIG. 9","FIGS. 8","FIG. 8"],"i":["a, b ","a, b","b","a, b . . . n "],"b":["8","204","206","208","4","204","206","208","350","204","206","208","352","382","354","206","128","356","358","8","360"]},"If (at block ) the full view option is not selected, then a single row of data is displayed, instead of multiple rows, including such information as the project name from the .projname file , the manager name, start data, projected completion, percent completed, and status form other of the attribute files.","If (at block ) the active projects link  () is selected, then a determination is made if the project is complete. This determination is made by checking the status file. If (at block ) the status is not complete and if (at block ) the start date indicated in the start date files in the .start[da, mo, yr] attributes files , , is less than or equal to the current date, then the project is active. If the project is active, then if (at block ) the full view option is selected, then the information server  adds a row to display information on the active project. The information gathered from the attribute files to and displayed would be the same described with respect to block , except that the actual start date from the .startda, .startmo, and .startyr , , and would be displayed, not a projected start date, and the projected completion date from the files .profinish[da, mo, yr] , , and would be displayed instead of the actual finish date. If the project is not active, from the no branches of blocks  or , then control proceeds to block  to consider the next project.","If (from the no branch of block ) the future projects link  () was selected, then a determination is made as to whether the project is defined to start in the future. With respect to , this determination is made by checking the .status file. If (at block ) the status is not completed and if (at block ) the start date is later than the current date, then the project will begin in the future. In such case, if the full view option is selected (at block ), then the information server  generates into the page information from the attribute files to and the displayed data would be the same described with respect to block , except that the projected start date from the .startda, .startmo, and .startyr , , and would be displayed, not the actual start date, and the projected completion date from the files .profinish[da, mo, yr] , , and would be displayed instead of the actual finish date.",{"@attributes":{"id":"p-0050","num":"0068"},"figref":["FIG. 9","FIGS. 8","FIG. 4"],"b":["12","388","12","206","384","8","12","388","386","12"],"i":["e ","a, b","e ","a, b . . . n ","f "]},{"@attributes":{"id":"p-0051","num":"0069"},"figref":["FIG. 10","FIG. 3","FIG. 3"],"b":["12","386","12","400","156","156","154","100","402","158","404","160","156","156","162","406","156","156"],"i":["f ","e","b","a ","a, b . . . n ","a ","b","a","a"],"sub":["a, 1 ","a, n ","a, 1 ","a, n ","a, 1 ","a, n"]},"In still further implementations, each task may be comprised of subtasks having a separate percentage complete for each subtask.  illustrates an implementation of a projects table where two of the tasks within the projects were defined to include subtasks. Each defined subtask  and  includes further subsections, shown as A, B, and C for subtask  and , , and  for subtask , in which the user may enter different percentage down amounts indicating the percentage completed of the different sections of a subtask. The data for each subtask could be stored in a separate directory of the task subdirectory . . . , () where each subtask subdirectory would further include files for the attributes for a subtask, such as the percentage completed of different sections of the subtask.","In further implementations, in response to the user selecting the statistic\/metric link  (FIG. ), the information server  would search certain of the attribute files to and the .done file for each project to gather metric and statistical data on certain attribute values on a project-by-project basis. The information may the be displayed in a metric view shown in FIG. . For instance, information on the start and finish date displayed in column  may be obtained from the start , , and the finish , , and attribute files and information on the number of days a project was interrupted  and the type of interrupt , ,  (holidays, days interrupted due to setup, and days interrupted due to management) would be obtained from the interrupts file for each project. Further displayed is a percent completed  of the project which may be obtained from the .done file. Information on the number of holidays could be obtain from the .holidays files . Other displayed statistical information may be derived from data in the attribute files. For instance, the number of days an active project has been active, shown in column  of , may be determined by subtracting the start date from the current date, and then subtracting any holidays, interrupt days, and weekends. Such information on the status can be obtained from the .status attribute file and the start related and finish related attribute files. The information displayed in the view may further summarize information on a per task basis if multiple tasks are defined for a project. Such a breakdown would require further subcolumns in each type of delay , ,  to provide the information for each task defined for a project.","As discussed, there may be additional subclasses of an information class. For instance, the calendar subclass of a project class provides a calendar view of a project. The calendar subdirectory () that stores the data for the project calendar includes one attribute file . . . for each day for which there is information to present. Each day attribute file for a calendar subdirectory includes information for a day. In certain implementations, whenever a user submits a page including a new interrupt added in the interrupts file or a new bug added to the .bugtraqs file, then the information server  will append the information to the day file . . . for the day and affected project.",{"@attributes":{"id":"p-0055","num":"0073"},"figref":"FIG. 13","b":["12","144","152","152","8","440","8","152","152","152","152"],"i":["i, ","a . . . n "],"sub":["a, 1 ","a, n ","a, 1 ","a, n ","a, 1 ","a, n "]},"The described implementations concerned a file architecture for storing information used by an application program. In the file architecture, the application data is stored in separate files, and then accessed to allow a user to enter information or view the application data dispersed throughout different files.","The described file architecture may be implemented using standard file data structures and file management commands supplied by the operating system. The information server  would make file management command calls to access the data dispersed through the files in the file architecture.","The described implementations can implement a robust information management program without requiring the use of a database application program because the database and data management is implemented in the file system directories. This aspect makes the described architecture highly portable to other systems because applications written for different operating systems may include the same logic, but just use the calls for the target operating system. Because the basic file management operations are very similar for different operating systems, creating different versions of the information manager program for different operating systems would only require modifying the file management calls, which are often very similar in operation.","Additionally, the described implementations communicate with the users using an open document format compatible with the viewer programs users are likely to already have installed on their client systems , e.g., web browsers. In such implementations, the users do not need to install any additional client programs on their machine because their viewer program is all that is needed. Implementing the system in this manner avoids the need to install special purpose database and interface software on both the clients and server because the described implementations exploit already existing installed viewer and network communication programs.","The described file management architecture may be implemented as a method, apparatus or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof. The term \u201carticle of manufacture\u201d as used herein refers to code or logic implemented in hardware logic (e.g., an integrated circuit chip, Field Programmable Gate Array (FPGA), Application Specific Integrated Circuit (ASIC), etc.) or a computer readable medium (e.g., magnetic storage medium (e.g., hard disk drives, floppy disks, tape, etc.), optical storage (CD-ROMs, optical disks, etc.), volatile and non-volatile memory devices (e.g., EEPROMs, ROMs, PROMs, RAMs, DRAMs, SRAMs, firmware, programmable logic, etc.)). Code in the computer readable medium is accessed and executed by a processor. The code in which preferred embodiments are implemented may further be accessible through a transmission media or from a file server over a network. In such cases, the article of manufacture in which the code is implemented may comprise a transmission media, such as a network transmission line, wireless transmission media, signals propagating through space, radio waves, infrared signals, etc. Of course, those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the present invention, and that the article of manufacture may comprise any information bearing medium known in the art.","In the described implementations, the view pages were implemented as HTML pages for display in a web browser type viewer. Additionally, the view pages may be in alternative media formats, such as Extensible Markup Language (XML) pages, Standard Generalized Markup Language (SGML) file, ASCII, etc. The described implementations utilize a browser program, such as a web browser capable of rendering HTML and other markup language content. However, any presentation program capable of rendering content in any media format may be used to render the state changes supplied by the server.","In the described implementations, the client and server used the HTTP protocol to communicate. In alternative implementations, the client and server may use any communication or messaging protocol known in the art to communicate.","The described implementations include one class type whose files are stored in a subdirectory of the main directory and one subclass for each class type, implemented as a subdirectory of the information class subdirectory. Additional information class types may be added at the same level providing different types of information and additional attribute files may be provided to store the values associated with the additional information classes.","The preferred logic of describe specific operations occurring in a particular order. In alternative embodiments, certain of the logic operations may be performed in a different order, modified or removed and still implement preferred embodiments of the present invention. Morever, steps may be added to the above described logic and still conform to the preferred embodiments. Further, operations described herein may occur sequentially or certain operations may be processed in parallel.","The foregoing description of the preferred embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto. The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represents corresponding parts throughout:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 3","i":["a ","b "],"b":"3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 4","FIGS. 3"],"i":"a, b "},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 5","FIGS. 3"],"i":"a, b "},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 6","FIGS. 3"],"i":"a, b "},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 7","FIGS. 3"],"i":"a, b "},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIGS. 8","FIGS. 3"],"i":["a ","b ","a, b "],"b":"8"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 9","FIGS. 8"],"i":["a ","b "],"b":"8"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 12","FIGS. 3"],"i":"a, b "},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 13","FIGS. 3"],"i":"a, b "}]},"DETDESC":[{},{}]}
