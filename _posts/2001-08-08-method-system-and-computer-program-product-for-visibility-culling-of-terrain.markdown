---
title: Method, system, and computer program product for visibility culling of terrain
abstract: A method, system, and computer program product are provided for visibility culling of terrain. A height field is perspective modulated. An occlusion height field is generated based on an orthographic height propagation of the perspective modulated height field. Graphics data is culled based on the generated occlusion height field. Texturing and blending operations can be used to accelerate the perspective modulation. A perspective modulation disk is used to modulate the first height field along radial slices from a viewpoint. Texture from a one-dimensional texture with distance values is mapped to the radial slices to obtain the perspective modulated height field. Generating an occlusion height field can also be carried out using texturing and blending and can be hardware-accelerated. According to a further feature, a shift disk or shift texture is used.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07027046&OS=07027046&RS=07027046
owner: Vicarious Visions, Inc.
number: 07027046
owner_city: Troy
owner_country: US
publication_date: 20010808
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Table of Contents","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This applications claims the benefit of priority to U.S. Provisional Application No. 60\/267,424 filed Feb. 9, 2001 (incorporated in its entirety herein by reference).","1. Field of the Invention","The present invention relates generally to computer graphics.","2. Background Art","Computer graphics systems render all kinds of objects for display and animation. An object is modeled in object space by a set of primitives (also called graphics primitives). Examples of primitives include, but are not limited to, triangles, polygons, lines, tetrahedra, curved surface, and bit-map images. Each primitive includes one or more vertices that define the primitive (or a fragment) in terms of position, color, depth, texture, and\/or other information helpful for rendering.","Rendering terrain data has become especially important in many applications, such as, flight simulation and gaming. Terrain elevation is often defined by height data. Any type of height data can be used. For example, a height field can be defined by a function, h(x, y), where (x, y) forms a 2-D domain and the height function h represent elevation. In one example, the height function is often modeled or sampled on a uniform grid in the domain. The samples are then stored as a digital elevation map (DEM) that is essentially a gray-scale image representative of height.","Visibility culling on a height field involves the detection of height field portions (e.g., tiles) and features (e.g., buildings) that cannot be seen from a particular viewpoint. There have been many visibility algorithms proposed for general scenes and models. See, e.g., Seth J. Teller and Carlo H. S\u00e9quin, \u201cVisibility Preprocessing for Interactive Walkthroughs,\u201d (91), 25 (4), pp. 61-69, July 1991; Ned Greene and M. Kass, \u201cHierarchical Z-Buffer Visibility,\u201d 93, , Annual Conference Series, pp. 231-240 (1993, Anaheim, Calif.); and Hansong Zhang, D. Manocha, T. Hudson and K. Hoff, \u201cVisibility Culling Using Hierarchical Occlusion Maps,\u201d Proceedings of SIGGRAPH97, , Annual Conference Series, pp. 77-88, August 1997. These alogrithms can be applied to terrain data, but do not take advantage of the characteristics of terrain data. Other algorithms have been proposed that directly involve terrain data. One approach by Max computes horizons at points on a bump map (one application of a height field). The result is used to compute shadows on bump mapped surfaces. The horizon is detected in eight directions around each sample point. Points that do not fall directly in these directions are not considered. See, Nelson L. Max, \u201cShadows for Bump-Mapped Surfaces,\u201d (Proceedings of Computer Graphics Tokyo '86), Tsiyasu L. Kunii, Ed. 1986, pp. 145-156, Springer-Verlag; and Nelson L. Max, \u201cHorizon Mapping: Shadows for Bump-Mapped Surfaces\u201d, , vol. 4, no. 2, pp. 109-117, July 1988. A similar algorithm is applied to triangulated terrain and processes 24 directions around each point; the result is used to compute bi-directional reflection functions. See, B. Cabral, N. L. Max, and R. Springmeyer, \u201cBidirectional Reflection Function from Surface Bump Maps\u201d, in (SIGGRAPH '87 Proceedings), July 1987, vol. 21, pp. 273-281. These algorithm can be adapted to visibility applications but are limited. To avoid visual artifacts, the number of directions they consider has to be increased greatly.","For more accurate horizons, an approach by Stewart considers all points of the terrain rather than only those that lie in particular directions. See, A. James Stewart, \u201cFast Horizon Computation at All Points of a Terrain With Visibility and Shading Applications,\u201d 4(1), pp. 82-93. Another approach shows that, when the terrain is stored as a dense grid of n rectilinear prisms, one needs to consider O(square root(n)) directions to avoid under-sampling. See, Daniel Cohen-Or and Amit Shaked, \u201cVisibility and Dead-Zones in Digital Terrain Maps,\u201d 14(3), Blackwell Publishers: Edited by Frits Post and Martin G\u00f6bel, pp. 171-180. See, also, a similar algorithm using ray tracing. C-H. Lee and Y. G. Shin, \u201cAn Efficient Ray Tracing Method for Terrain Rendering,\u201d '95, August 1995.","Trobec et. al. discuss improvements in precision through bi-linear reconstruction along the directions, or in speed by using a Bresenham algorithm. See, Tom\u00e1{hacek over (s)}Trobec, Borut {hacek over (Z)}alik, and Nikola Guid, \u201cCalculation of Visibility from Raster Relief Models,\u201d 14th , Comenius University, Bratislava, Slovakia, Edited by L\u00e1szl\u00f3Szirmay Kalos, pp. 257-266(April 1998), and earlier algorithms described by L. De Floriani, P. Magillo, \u201cAlgorithms for Visibility Computation on Digital Terrain Models,\u201d '93, Indianapolis, February 1993, and L. De Floriani, P. Magillo, \u201cComputing Visibility Maps on a Digital Terrain Model, Spatial Information Theory\u2014A Theoretical Basis for GIS,\u201d A. U. Frank, I. Campari (Editors), , N.7 16, Springer-Verlag, 1993, pp. 248-269. In general, many of the above algorithms are characterized as line-sweeping algorithms, because lines are explicitly and individually traced from the eye outward along selected directions.","Terrain visibility algorithms have been proposed. Visibility culling on a hierarchially represented terrain is described by Stewart. See, A. James Stewart, \u201cFast Horizon Computation at All Points of a Terrain With Visibility and Shading Applications,\u201d 4(1), 1998, pp. 82-93, and A. James Stewart, \u201cHierarchical Visibility in Terrains,\u201d 1997, Springer Wien, Edited by Julie Dorsey and Philipp Slusallek, pp. 217-228. Characterization of several other terrain visibility algorithms can be found in L. De Floriani, P. Magillo, \u201cVisibility Algorithms on Triangulated Digital Terrain Models,\u201d , London, 8, 1, 1994, and Leila De Floriani and Paola Magillo, \u201cHorizon computation on a hierarchical triangulated terrain model.,\u201d 11(3), Springer-Verlag 1995, pp. 134-149. One approach determines a fuzzy visibility on terrain where a height value is represented as intervals instead of a single number. See, Livio Crocetta, Giovanni Gallo and Salvatore Spinello, \u201cVisibility in Digital Terrain Maps: a Fuzzy Approach,\u201d 14th , Comenius University, Bratislava, Slovakia, Edited by L\u00e1szl\u00f3Szirmay Kalos, April 1998, pp. 257-266. Note that these algorithms compute a horizon map (in image or geometric form) to support the binary decision whether each point on the terrain is visible from the eye point. This is adequate only for determining whether a portion of the height field is occluded by other parts of the height field itself. The visibility and culling of other objects on the terrain (buildings, vehicles, trees, helicopters, etc.) is not accounted for in such a binary decision based on height field values. An actual minimum visible height at each height field point is not determined as in the present invention.","What is needed is an improved visibility algorithm for culling terrain data.","The present invention provides an improved visibility algorithm for culling terrain data. A method, system and computer program product for visibility culling of terrain is provided. A height field is perspective modulated. An occlusion height field is generated based on an orthographic height propagation of the perspective modulated height field. Graphics data is then culled based on the generated occlusion height field.","In one embodiment, a method for visibility culling includes modulating a first height field as a function of distance to obtain a perspective modulated height field. In one example, the first height field is modulated as an inverse function of distance to obtain the perspective modulated height field. In another example, the modulating step modulates the first height field as an inverse function of distance scaled by a scaling factor to obtain the perspective modulated height field. In one example implementation, a perspective modulation disk is used to modulate the first height field along radial slices from a viewpoint.","In one embodiment, texturing (and blending) operation can be used to accelerate the perspective modulation. This has an advantage processing operations can be hardware accelerated on commercial off the shelf graphics hardware. In one example, the modulating step is carried out by drawing a perspective modulation disk of radial slices on top of a first height field centered at a viewpoint V. Texture from a one-dimensional texture is mapped to the radial slices to obtain the perspective modulated height field.","With respect to the orthographic height propagation, in one embodiment, a method further includes generating an occlusion height field based on an orthographic height propagation of the perspective modulated height field. In one example, the generating step includes comparing height values of the perspective-modulated height field at first and second sample locations separated by a propagation distance d, the first location being closer to the viewpoint than the second location. The height value of the second location is then updated with the greater height value determined in the comparison.","In one embodiment, a series of iterations are performed to generate an occlusion height field according to the invention. For example, each iteration can be a rendering or drawing pass through a graphics pipeline. Each iteration involves comparing and updating height values at multiple sampling locations along the lengths of radial slices. Height propagation is incremented by an incremental distance which can be fixed or varied for each iteration.","Like perspective modulation, generating an occlusion height field according to the present invention can also be carried out using texturing and blending and can be hardware-accelerated. According to a further feature, a shift disk or shift texture is used. The first height field is stored as a first height field texture. The perspective modulated height field is stored in a color channel of a frame buffer. A method then draws a first shift disk including texture mapping texels from the first height field texture, blends the texture mapped texels and the color values of the perspective modulated height field stored in the color channel of the frame buffer to obtain an updated shift disk. The updated shift disk has updated color values representing the updated height values based on a maximum comparison and texture coordinates shifted by an incremental distance.","In one embodiment, a system for visibility culling is provided. The system includes modulating means and generating means. The modulating means modulates a first height field as a function of distance to obtain a perspective modulated height field. The generating means for generates an occlusion height field based on an orthographic height propagation of the perspective modulated height field.","In one embodiment, a system includes host computer, and a graphics subsystem coupled to the host computer. The host computer includes a visibility culling controller. The visibility controller controls the graphics subsystem to modulate a first height field as a function of distance to obtain a perspective modulated height field and to generate an occlusion height field based on an orthographic height propagation of the perspective modulated height field.","In one example, the graphics subsystem includes a texture mapping unit and a blending unit. The visibility culling controller controls the texture mapping unit to modulate a first height field as a function of distance to obtain a perspective modulated height field and controls the texture mapping unit and the blending unit to generate the occlusion height field based on an orthographic height propagation of the perspective modulated height field. The texture mapping unit and the blending unit carry out processing operations in hardware.","The texture mapping unit modulates a first height field as a function of distance to obtain a perspective modulated height field in a processing operation implemented at least in part in hardware. The texture mapping unit and the blending unit generate the occlusion height field based on an orthographic height propagation of the perspective modulated height field in another processing operation implemented at least in part in hardware.","Another embodiment is a system having a visibility culling controller that controls a graphics subsystem.","Another embodiment is a visibility culling controller having first and second control logic. The first control logic enables a graphics subsystem to modulate a first height field as a function of distance to obtain a perspective modulated height field. The second control logic that enables a graphics subsystem to generate an occlusion height field based on an orthographic height propagation of the perspective modulated height field.","Another embodiment is a computer program product having a computer useable medium with computer program logic recorded thereon for enabling a processor to render a computer scene. The computer program logic includes first computer readable code that enables a processor to modulate a first height field as a function of distance to obtain a perspective modulated height field, and second control logic that enables a processor to generate an occlusion height field based on an orthographic height propagation of the perspective modulated height field.","Another embodiment is a visibility culling controller having first control logic that modulates a first height field as a function of distance to obtain a perspective modulated height field, and second control logic that generates an occlusion height field based on an orthographic height propagation of the perspective modulated height field.","Another embodiment is a system including a visibility culling controller, a first height field, and a graphics pipeline, such as, an OPENGL pipeline.","The present invention then provides a visibility culling algorithm for height fields that takes full advantage of the properties of terrain data. The algorithm is based, in essence, entirely on image processing of height field data, achieved in real-time through rendering and in one example per-pixel operations.","Unlike line-sweeping algorithms, an embodiment of the present invention does not have to trace individual lines, but instead can use texture mapping to achieve parallel processing of all height field points. Also, in one example, bilinear texture mapping automatically interpolates height values to achieve better reconstruction from height field data.","Further features and advantages of the present invention, as well as the structure and operation of various embodiments of the present invention, are described in detail below with reference to the accompanying drawings.",{"@attributes":{"id":"p-0049","num":"0000"},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":["1. Overview","2. Terminology","3. Height Propagation and Occlusion Height Fields","4. Visibility Culling Based on Perspective Modulation and Orthographic Height Propagation\n    \n    ","6. Hardware-Accelerated Visibility Culling Based on Perspective Modulation and Orthographic Height Propagation\n    \n    ","7. Perspective Modulation\/Orthographic Height Propagation Equivalence to Perspective Height Propagation","8. Example Host and Graphics Subsystem","9. Example Computer System","10. Conclusion"]}},"1. Overview","The present invention provides an algorithm for visibility culling based on terrain data. Visibility determination on height fields is treated as a process of perspective height propagation from a given viewpoint. The result of such propagation is an occlusion height field. If an object is covered by the occlusion height field, it is not visible.","The inventor has recognized that perspective propagation of an original height field is equivalent to orthographic height propagation of a perspective modulated original height field. Further, such orthographic height propagation of a perspective modulated original height field according to the present invention is readily supported by existing graphics hardware and can be hardware-accelerated. In one embodiment, to compute an occlusion height field, a perspective modulation is applied to the original height field through texture mapping. Orthographic height propagation is performed by shifting texture coordinates in radial directions from the viewpoint and using blending to keep greater modulated heights. In one example implementation, an occlusion height field is generated through hardware-accelerated, multi-pass per-pixel operations.","2. Terminology","The following terms are defined so that they may be used to describe embodiments of the present invention. As used herein:","The terms \u201cterrain\u201d or \u201cterrain data\u201d are used interchangeably to refer data representative of a terrain including, but not limited to, a height field.","The term \u201cheight field\u201d is used broadly herein and can include any type of height or elevation data, such as, a height image, height function, or digital elevation map (DEM).","\u201cImage\u201d or \u201cscene\u201d means an array of data values. A typical image might have red, green, blue, and\/or alpha pixel data, or other types of pixel data information as known to a person skilled in the relevant art.","\u201cPixel\u201d means a data structure, which is used to represent a picture element. Any type of pixel format can be used.","\u201cTexture image,\u201d \u201ctexture,\u201d or \u201ctexture map\u201d are used interchangeably to refer to an array of texels addressed by texture coordinates. A \u201ctexel\u201d is a texture element. In some cases, texels are also referred to herein as \u201cpixels\u201d when the texture is used in pixel processing operations. In this way, the terms \u201ctexel\u201d and \u201cpixel\u201d are sometimes used interchangeably as is often done in the computer graphics field.","3. Height Propagation and Occlusion Height Fields","It helpful to first compare perspective and orthographic height propagation with respect to a radial slice along a height field.  is a diagram that illustrates an example of a terrain  defined by a height field (h) over a two-dimensional domain (x, y). A viewpoint V is a point in terrain , such as, the eye point or any other reference point, from which visibility in a scene is determined.  is a two-dimensional view that illustrates an example radial slice  of a height field extending along a radial direction r from a viewpoint V in a plane perpendicular to ground. Radial slice  is the intersection of the height field with a half-plane defined by an arbitrary direction on the ground and the vertical line passing the viewpoint and perpendicular to the ground. Note that this has nothing to do with an actual view-frustum set-up that can have arbitrary pitch and roll while still using the visibility algorithm of the present invention.","In the following discussion, for clarity, assume the height field domain is the X-Y plane, and heights are along the Z-axis. Also, in this example, assume that the viewpoint, V, has height ; to enforce this, one can subtract the height of the viewpoint, h, from the original height field. For a given V, each point (x, y) in the domain of the height field has a minimum visible height, i.e., the minimum elevation so as to be visible from V. A minimum visible height function h(x, y) is the occlusion height field. If an object's (or its bounding box's) maximum heights are below the corresponding heights in the occlusion height field, then the object is not considered visible from the viewpoint.",{"@attributes":{"id":"p-0060","num":"0083"},"figref":"FIG. 3A","b":["300","200","200","300","300"]},"Compare perspective height propagation with orthographic height propagation.  is a diagram that illustrates an occlusion height field  generated by a process of orthographic height propagation performed with respect to radial slice . In orthographic height propagation, heights are simply compared in a near-to-far order. The greater height values determined in the comparisons define occlusion height field . This approach can discover some occlusion, for example, higher peaks closer to the viewer can occlude lower ones located farther away. One advantage over perspective height propagation is that the comparison operations used on orthographic height propagation can be computationally inexpensive. Such orthographic height propagation is usually too conservative. Occlusion is often caused by perspective effects (such as, lower heights close to the eye which can occlude high peaks in the distance) which would not be culled by an occlusion height field generated by orthographic height propagation.  shows an example point A which is not effectively culled by orthographic height propagation compared to the perspective height propagation.","The present invention is first described with respect to an overall method (FIG. ), a graphics architecture implementation for carrying out the method (FIG. ), and examples (, B, and ). Embodiments of the present invention using texturing and blending that can be hardware-accelerated are then described (FIGS. A-D). Reference is made to an example perspective modulation disk () and an example texture coordinate shift disk (FIG. B). A further example hardware-accelerated routine () compatible with an OPENGL implementation is described. Examples of height field information generated during steps in the hardware-accelerated routine are shown (FIG. ). Examples of an inverse function and scaled inverse function used in perspective modulation according to the present invention are discussed and shown in  more detailed mathematical explanation of the equivalence of a perspective-modulated occlusion height field generated according to the present invention and an occlusion height field generated by perspective height propagation is presented and illustrated with respect to a diagram shown in FIG. . Finally, an example host and graphics subsystem () and an example computer system () that can carry out embodiments of the present invention are described.","4. Visibility Culling Based on Perspective Modulation and Orthographic Height Propagation","A. Method",{"@attributes":{"id":"p-0064","num":"0087"},"figref":["FIG. 4","FIG. 5","FIGS. 6A and 6B"],"b":["400","410","430","500","400","500"]},"(1) Perspective Modulation","In step , a first height field is modulated as a function of distance to obtain a perspective modulated height field. This step is also referred to as \u201cperspective modulation.\u201d The first height field can be any height data. In one example, the first height field represents a height field having a zero height at a viewpoint V. If a viewpoint V has a height hv, then the value hv is substracted from all samples in an original height field.","Any function of distance can be used in perspective modulation depending upon a particular effect desired or needed. In one embodiment, the distance function of distance is based on the inverse of the distance d between a height field sample location and a viewpoint. In one embodiment, the distance function is equal to the inverse of the distance d. In another embodiment, the distance function is equal to the inverse of the distance d scaled by a scale factor (f). The scale factor can be set to any desired number, such as, f=20, as shown in FIG. .","(2) Orthographic Height Propagation","In step , an occlusion height field is generated based on an orthographic height propagation of the perspective modulated height field. In one embodiment, orthographic height propagation is carried out along a number of radial slices in the perspective modulated height field. The radial slices extend from the viewpoint (which can be either the eye point, eye, camera point,or other desired reference point). A comparison of height values is made along each radial slice. The greater height value is updated and propagated.","For example, consider two samples of a perspective modulated height field along a radial slice. Each propagation involves shifting sample locations by an incremental distance. The incremental distance can have a constant or variable magnitude. For example, a first sample has a height h(d), where d is a distance from the viewpoint V to the location of the first sample along a radial slice. A second sample has a height h(d+\u0394d), where \u0394d is equal to the magnitude of the incremental distance for a given propagation iteration. A value n\u0394d, where n is an integer or scalar, can also be used in place of \u0394d to vary the incremental distance. In step , the values h(d) and h(d+\u0394d) are compared. The greater value of the two is used to update the height value at the second sample location h(d+\u0394d).  shows one example step in orthographic height propagation of step  according to an embodiment of the present invention. Two arbitrary azimuth angles and a slice of the perspective-modulated height field are shown.","The orthographic height propagation then proceeds to a third sample location at an incremental distance from the second sample location. The height value at the third sample location is then updated with the greater of the height values at the second and third sample locations. Such propagation continues until the end of the radial slice, and until a number of radial slices have undergone orthographic height propagation. In this way, height values are pushed in radial directions away from a viewpoint. The resulting updated height values along the radial slices define an occlusion height field according to the present invention. An occlusion height field of the present invention is also referred to herein as a perspective-modulated occlusion height field.","The above description of is made by describing comparisons made along a number of radial directions. This is not intended to limit the present invention. The comparisons can be made according to the present invention through texture mapping and blending. In this case, comparisons are carried out over the perspective-modulated height field domain using texture mapping and blending instead of considering each radial direction separately.",{"@attributes":{"id":"p-0073","num":"0096"},"figref":["FIG. 6A","FIG. 6B"],"b":["610","620","410","630","420"]},"(3) Culling","In step , graphics data is culled based on the occlusion height field generated in step . In step , culling is performed based on an occlusion test. Any known occlusion test can be used.","(4) Occlusion Tests","To test whether an object is occluded, vertices on the object's bounding volume are transformed in the same manner as perspective modulation (i.e. by a distance function, such as, multiplication by 1\/d). Let A denote the area covered by the bounding volume's perpendicular projection on to the base of the terrain. If the maximum heights of such a transformed bounding volume are lower than all the heights in regionA of the perspective-modulated occlusion height field, the object must be hidden.","Further simplification can make height comparisons cheaper (but more conservative). For example, an axis-aligned bounding box can be computed around a perspective-transformed bounding volume. The axis-aligned bounding box is then used in occlusion tests in place of the perspective-transformed bounding volume.","The occlusion height field may be filtered down using a maximum operator to lower resolutions to facilitate faster tests. Further, a hierarchy of occlusion height fields can be derived from the original to support hierarchical tests.","The culling in step  can be performed early in a graphics processing pipeline to reduce the amount of geometry and terrain which must be rendered.","B. Software, Firmware, and\/or Hardware Implementation","The present invention can operate in any computer processing environment including any graphics processing environment. In particular, the present invention (including one or more steps of routine  as described above) can be implemented in software, firmware, hardware, or in any combination thereof.","C. Example Environment","One example environment for the present invention is a computer graphics environment.  illustrates a block diagram of an example computer architecture  in which the various features of the present invention can be implemented.  is an example only and not intended to limit the present invention. It is an advantage of the invention that it may be implemented in many different ways, in many environments, and on many different computers or computer systems supporting graphics processing.","Architecture  includes six overlapping layers. Layer  represents a high level software application program. Layer  represents a three-dimensional (3D) graphics software tool kit, such as OPENGL PERFORMER, available from Silicon Graphics, Incorporated, Mountain View, Calif. Layer  represents a graphics application programming interface (API), which can include but is not limited to OPENGL, available from Silicon Graphics, Incorporated. Layer  represents system support such as operating system and\/or windowing system support. Layer  represents firmware. Finally, layer  represents hardware, including graphics hardware. Hardware  can be any hardware or graphics hardware including, but not limited to, a computer graphics processor (single chip or multiple chip), a specially designed computer, an interactive graphics machine, a gaming platform, a low end game system, a game console, a network architecture, server, et cetera.","As will be apparent to a person skilled in the relevant art after reading the description of the invention herein, various features of the invention can be implemented in any one of the layers - of architecture , or in any combination of layers - of architecture . In particular, one or more of steps - can be implemented in any one of the layers - of architecture , or in any combination of layers - of architecture . Layers - are illustrative and one or more of layers - can be omitted depending upon a particular system configuration.","In one embodiment, a height-based visibility culling module  (also called a visibility culling controller) is provided according to the present invention. The height-based visibility culling module  provides control steps necessary to carry out routine . The height-based visibility culling module  can be implemented in software, firmware, hardware, or in any combination thereof. As shown in , in one example implementation height-based visibility culling module  is control logic (e.g., software) that is part of an application layer  that provides control steps necessary to carry out routine . In alternative implementations, height-based visibility culling module  can be implemented as control logic in any one of the layers - of architecture , or in any combination of layers - of architecture . In particular, height-based visibility culling module  can control the carrying out of one or more of steps - in any one of the layers - of architecture , or in any combination of layers - of architecture  as would be apparent to a person skilled in the art given this description. These example system environments are illustrative and not intended to limit the present invention.","6. Hardware-Accelerated Visibility Culling Based on Perspective Modulation and Orthographic Height Propagation","According to a further embodiment of the present invention, hardware-accelerated visibility culling based on perspective modulation and orthographic height propagation is provided. Texturing and blending operations are used to allow perspective modulation and orthographic height propagation as described in steps  and  to be accelerated in graphics hardware.","A. Perspective Modulation with Texture Processing",{"@attributes":{"id":"p-0090","num":"0113"},"figref":["FIG. 8A","FIG. 9A"],"b":["410","810","820","900","900","900","9"]},"In step , the perspective modulation disk is drawn on top of the original height field centered at viewpoint V. The 1-D texture is applied in a texture mapping operation to perspective modulate the original height field along radial directions or slices centered at the viewpoint and to obtain a perspective modulated height field image in a frame buffer color channel (step ). The perspective modulated image is then stored as a perspective modulated height field texture (step ).","B. Orthographic Height Propagation with Texture Processing and Blending","In one embodiment, hardware acceleration of the orthographic height propagation step  is carried out through texturing and blending. Moving values from one location to another is exactly what texture mapping is for. Combining the incoming value from texture mapping and an existing value is a typical blending operation.","More specifically, a propagation of distance \u0394d for all pixels on the terrain is carried out in two steps. First, the height field is used as a texture map. The value h(d) is brought to a distance d+\u0394d by shifting texture coordinates in radial directions from the viewpoint V. Second, the frame-buffer is initialized with the original height field. A blending mode which saves the larger of the source (i.e. the incoming value from the shifted height field) and destination performs the comparison. A benefit of such a texture mapping based algorithm is that by using bilinear filtering when doing texture mapping, one can effectively reconstruct height field values from samples using bilinear interpolation. This provides higher accuracy as compared to treating the height field as a collection of step functions.","(1) Texture Coordinate Shift","According to a further feature of the present invention, two embodiments for shifting texture coordinates in radial directions from the viewpoint in the orthographic height propagation step  are provided. The first embodiment involves use of a shift disk. The second embodiment involves uses of a shift texture. Each of these example implementations are discussed and described below with respect to , B, and .","(2) Shift Disk","Conventionally, texture coordinates are specified on a per-vertex basis and interpolated during scan-conversion. Let the coordinates on the height field texture be (u, v), 0\u2266u\u22661, 0\u2266v\u22661, and let the dimensions of the height field in the world space be L\u00d7L (assuming a square height field to simplify the discussion but not limit the present invention). A distance difference of \u0394d in the world space corresponds to a shift in texture coordinates by s,s=\u0394d\/L. To shift texture coordinates by an amount s in radial directions, away from the center, a 2-D shift disk  is constructed as illustrated in FIG. B.","When disk  is drawn with the original height field as a texture, the height values are \u201cpushed away\u201d from the viewpoint by \u0394d. When disk  is drawn on top of the original height field, with the disk centered at the eye's vertical projection onto the X-Y plane, a blending operation compares values and keeps the greater. In this way, a hardware-accelerated comparison of h(d) and h(d+\u0394d), propagating heights by distance \u0394d, is carried out.","The full propagation of heights, though, requires that heights be pushed all the way to the edge of the height field. More precisely, to compute an occlusion height field covering the entire height field domain, all heights closer to the viewpoint have to be compared with all heights farther away in the same radial direction from the eye. Given the basic operation of height propagation by \u0394d, a full propagation is performed by doing an incremental distance \u0394d at a time, until the height value at the eye position reaches the furthest point on the height field's edge. Evidently, if the height field edge point furthest from the viewpoint is at distance d, then the number of steps required is N=d\/\u0394d.","In examples, a full propagation can be constructed in either of the following two approaches, whichever is faster on a particular piece of hardware. The propagation distance remains fixed or varies in each successive propagation. In the first fixed propagation distance way, an iterative replacement of the height field texture is made. After every step (a propagation of distance \u0394d), the original texture is replaced with the resulting one. The algorithm proceeds to the next propagation of \u0394d with the same shift disk, the result of which is a propagation of 2\u0394d; and so on. In the second variable propagation distance approach, the amount of texture coordinate shifts is increased by modifying the disk after every step. For example, for the n-th step, 1\u2266n\u2266N. a disk is used that shifts texture coordinates by s=n\u0394d\/L. In other words, at step n, h(d) is shifted and compared to h(d+n \u0394d).","The first approach is preferable when there is a fast way of turning the rendering result into a texture, e.g. when the hardware allows direct rendering to a texture. The geometry of the disk does not need to be modified in between steps so that the disk can exist in hardware-optimized forms like a display list that can be passed to an OPENGL graphics system. If converting rendered images to textures is a slow operation for available graphics resources, then the second approach has the advantage of always using the same height field texture.","(i) Height Propagation Fixed at Each Iteration",{"@attributes":{"id":"p-0102","num":"0125"},"figref":"FIG. 8B","b":["420","840","848","840"]},"In step , a perspective modulated height field is bound as a first texture. This identifies the perspective modulated height field as a first texture to be used in texture mapping in a graphics pipeline rendering pass.","In step , a frame buffer is initialized with a reference height field. The reference height field is the original height field minus the eye height at a viewpoint.","Heights are propagated by a fixed incremental distance \u0394d. For each height propagation, texture mapping is performed at the shift disk vertices to access corresponding texels in the first texture (step ). These texels corresponding to the perspective modulated height field values in the first texture.","In step , a blending operation is performed that saves the larger of the source (i.e. the incoming texel value from the first texture) and destination (frame buffer pixel value representing reference height field) to obtain an updated image in the frame buffer. The updated image represents a partial orthographic height propagation of the perspective modulated height field.","In step , the first texture is replaced with the updated image.","Processing is then repeated for the next height propagation (step ). In particular, steps - are repeated until the updated image represents a full orthographic height propagation of the perspective modulated height field over the height field domain. In other words, steps - are repeated until the fixed incremental height propagation has been incremented to reach the outer radius or end of the shift disk. As would be apparent to a person skilled in the art given this description, each iteration of steps - can be carried out in a different rendering pass by a graphics pipeline.","(ii) Incremental Height Propagation Varied at Each Iteration",{"@attributes":{"id":"p-0110","num":"0133"},"figref":"FIG. 8C","b":["420","840","844","855","859","840","844","8"]},"For each height propagation, texture mapping is performed at the shift disk vertices to access corresponding texels in the first texture (step ). These texels corresponding to the perspective modulated height field values in the first texture.","In step , a blending operation operation is performed that saves the larger of the source (i.e. the incoming texel value from the first texture) and destination (frame buffer pixel value representing reference height field) to obtain an updated image in the frame buffer. The updated image represents a partial orthographic height propagation of the perspective modulated height field.","In step , the first texture is replaced with the updated image.","In step , the shift disk is updated to shift texture coordinates along radial directions by an increased incremental distance n\u0394d.","Processing is then repeated for the next height propagation (step ). In particular, steps - are repeated until the updated image represents a full orthographic height propagation of the perspective modulated height field over the height field domain. In other words, steps - are repeated until the fixed incremental height propagation has been incremented to reach the outer radius or end of the shift disk. As would be apparent to a person skilled in the art given this description, each iteration of steps - can be carried out in a different rendering pass by a graphics pipeline.","(3) Shift Texture","Specifying texture coordinates at vertices leaves it to linear interpolation to generate per-pixel texture coordinates. In order for the approximation to be good enough, the disk must not be too coarse in tessellation. On graphics systems that feature pixel textures or dependent textures (such as an OPENGL system with pixel texture extension), texture coordinates can be modified per-pixel through the use of another texture which stores, instead of color values, texture coordinates. A dependent texture for texture coordinate shift s=\u0394d\/L can be computed and applied to rectangular geometry as a cheap and more precise replacement of the disk. The approach using iterative replacement of the height field texture is more desirable because it requires only one dependent shift texture, just as it requires only a fixed shift disk.","(i) Shift Texture\u2014Incremental Height Propagation Fixed at Each Iteration",{"@attributes":{"id":"p-0118","num":"0141"},"figref":"FIG. 8D","b":["420","842","844","860","869","842","844","8"]},"In step , a dependent texture is computed. The dependent texture has texels which define a texture coordinate shift of a fixed amount.","In step , a rectangular geometry is set up to which the dependent texture and the first texture are mapped.","In step , texture mapping is performed. The dependent texture is mapped onto the rectangle geometry which modifies (i.e., shifts) the texture coordinates for each pixel on the rectangle.","In step , texture mapping is performed. The first texture is mapped onto the rectangle geometry with texture coordinates shifted by the fixed amount.","In step , a blending operation is performed that saves the larger of the source (i.e. the incoming texel value from the first texture) and destination (frame buffer pixel value) to obtain updated image in the frame buffer (the updated image representing a partial orthographic height propagation of the perspective modulated height field).","In step , the first texture is copied over with the updated image.","Processing is then repeated for the next height propagation (step ). In particular, steps - are repeated until the updated image represents a full orthographic height propagation of the perspective modulated height field over the height field domain. As would be apparent to a person skilled in the art given this description, each iteration of steps - can be carried out in a different rendering pass by a graphics pipeline using a pixel texture processing, such as, OPENGL pixel texture extension. Steps - are repeated until the updated image in a frame buffer represents a full orthographic height propagation of the perspective modulated height field over the height field domain.","C. Hardware-Accelerated Example Implementation","One embodiment is described with respect to a multi-pass routine for hardware-accelerated visibility culling  shown in  (steps -).",{"@attributes":{"id":"p-0128","num":"0151"},"figref":"FIG. 11","b":["1110","1140","1000","1130","1140"]},"Routine  lends itself to different mappings onto hardware with different features and capabilities. One current implementation uses OpenGL on a personal computer (PC) with a 450 MHz Pentium III processor and an Nvidia GeForce2 graphics card, utilizing only a minimal set of features needed to carry out routine . This example implementation is illustrative and not intended to limit the present invention.","Steps  and  can be performed in one, two or more passes through an OPENGL pipeline. In step , an original height field is drawn into the frame-buffer color channels (such as, the red, green, or blue channel). The intensity of original height field values is shown in image .","In step , a polygon of the same size as the height field is drawn with a constant color value. The constant color value represents the eye height, that is, the height at a viewpoint V. The blending function is set to subtract the polygon color from the frame-buffer color during the drawing pass. The intensity of the resulting height field values (original\u2014eye height) is shown in image .","In step , a drawing pass is performed that includes drawing a perspective modulation disk with a 1-D distance texture, setting a blending function to modulate the frame-buffer color with the incoming color, and making the resulting image after the blending a texture. This texture represent a perspective modulated height field according to one embodiment of the present invention. The intensity of the height field values in a perspective modulated height field is shown in image .","In step , a number of drawing passes N are made, N being the number of propagation steps to be performed.  shows an example texture coordinate shift disk. In step , for n=0 to n<N, a texture coordinate shift disk is modified to shift texture coordinates by s=n\u0394d\/L during each respective pass.","Blending is enabled with a MAX blending function to draw the shift disk with the texture generated in step . This results in a perspective modulated occlusion height field according to one embodiment of the present invention. The intensity of the height field values in a perspective modulated occlusion height field is shown in image .","An incremental distance \u0394d of one pixel width was also chosen, which means the amount of texture coordinate shift per step of propagation is s= 1\/256.","The worst-case scenario for N, the number of propagation steps required, occurs when the eye is at one of the corners of the height field, in which case N is the diagonal length in units of pixel width, i.e. N=256* \u221a{square root over (2)}. For orthographic height propagation, a shift disk is used whose shift is modified for each propagation step, since frame-buffer-to-texture conversion can be relatively slow on this example graphics system. In one example, both the perspective modulation disk and the shift disk are divided into 40 sectors so that the former has 40 triangles and the latter 120 triangles (40+2*40=120).","The color precision of pixels and texels on a current generation of graphics hardware may be limited. For example, the maximum resolution of a color channel may be only 8 bits. The 1\/d function has a very fast fall-off so that most heights in perspective-modulated height field are small. Such values use only a small portion of the 8-bit dynamic range, which means only a small number of height differences can be represented in some embodiments of the present invention. Sixteen 16-bit color channels or greater can largely solve the problem in embodiments of the present invention where such bit precision is available in the graphics hardware.","According to a further feature of the invention, to alleviate or reduce the precision problem, the 1\/d function is scaled by multiplying a factor f, F>1. If, after the multiplication, a value in the 1\/d function goes above 1, it is clamped to 1. The scaling does makes the modulation factors uniformly larger, so that height values after perspective modulation spread over in a larger range. Note that scaling the 1\/d function by a constant factor maintains the property that orthographical height propagation after perspective modulation is equivalent to a perspective height propagation.","Evidently, scaling by fand clamping to 1 makes the 1\/d function a constant 1 from d=0 to d=f. In other words, when modulated by the scaled 1\/d function, the heights within radius ffrom the eye are not modified. What this means is that, in the subsequent height propagation, within the radius of fthe original heights are orthographically propagated, not those after perspective modulation. Because of this, by scaling one can give up some occlusion generated by perspective viewing within the radius off However, if fis kept small, such loss is trivial.  compares the 1\/d function and the result of scaling by f=20.","7. Perspective Modulation\/Orthographic Height Propagation Equivalence to Perspective Height Propagation","As mentioned above, the inventor has recognized that orthographic height propagation of a perspective modulated original height field is equivalent to perspective height propagation of the original height field. Although orthographic height propagation gives overly conservative results on the original height field, the present invention introduces a transformation of heights so that the orthographic propagation in the transformed height field is equivalent to perspective propagation in the original. In this way, the present invention allows orthographic propagation to be directly accelerated through use of texture mapping and blending as described above. The transformation basically enables one to perform the equivalence of perspective height propagation with hardware acceleration. Better still, the transformation itself is also fully supported by commercially available graphics hardware.",{"@attributes":{"id":"p-0141","num":"0164"},"figref":"FIG. 13","sub":["1","P1 ","1 ","P1","P1","2 ","P2","P1","1","P1","P2","2 ","P1","P2","P1","2","P1","P2","2"],"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"msubsup":{"mi":["h","\u2032"],"mrow":{"mrow":{"mi":"P","mo":["\u2062","\u2062"],"mstyle":{"mtext":"\u2003"},"mn":"1"},"mo":"\u2062","mstyle":{"mtext":"\u2003"}}},"mo":"=","mrow":{"mfrac":{"msub":[{"mo":"\u2146","mrow":{"mi":"P","mo":["\u2062","\u2062"],"mstyle":{"mtext":"\u2003"},"mn":"2"}},{"mo":"\u2146","mrow":{"mi":"P","mo":["\u2062","\u2062"],"mstyle":{"mtext":"\u2003"},"mn":"1"}}]},"mo":"\u2062","msub":{"mi":"h","mrow":{"mi":"P","mo":["\u2062","\u2062"],"mstyle":{"mtext":"\u2003"},"mn":"1"}}}}},{"mrow":{"mo":["(",")"],"mn":"1"}}]}}}},"br":{}},"From , one can observe that if\n\nh\u2032>h\u2003\u2003(2)\n\nthen using equation (1), one has \n\n\nor, \n\n\nClearly, if (3) holds, then (2) does, too. This means that the quantity, \n\n\nat the two points can be directly compared to decided whether the perspective-propagated height of one is greater than the original height of the other. In other words, if the original height field is transformed by multiplying each height value by 1\/d, then orthographic height propagation of the transformed height field is equivalent to perspective propagation on the original.\n\n8. Example Host and Graphics Subsystem\n",{"@attributes":{"id":"p-0143","num":"0166"},"figref":"FIG. 14","b":"1400"},"Graphics system  comprises a host system , a graphics subsystem , and a display . Each of these features of graphics system  is further described below.","Host system  comprises an application program , a hardware interface or graphics API , and a processor . Application program  can be any program requiring the rendering of a computer image or scene. The computer code of application program  is executed by processor . Application program  accesses the features of graphics subsystem  and display  through hardware interface or graphics API . As shown in , in one example implementation height field visibility culling control module  is control logic (e.g., software) that is part of or accessed by application .","Graphics subsystem  comprises a vertex operation module , a pixel operation module , a rasterizer , a texture memory , and a frame buffer . Texture memory  can store one or more texture images . Texture memory  is connected to a texture unit  by a bus or other communication link (not shown). Rasterizer  comprises texture unit  and a blending unit . The operation of these features of graphics system  would be known to a person skilled in the relevant art given the description herein.","In embodiments of the present invention, texture unit  can obtain either a point sample, a bilinearly filtered texture sample, or a trilinearly filtered texture sample from texture image . Blending unit  blends texels and\/or pixel values according to weighting values to produce a single texel or pixel. The output of texture unit  and\/or blending module  is stored in frame buffer . Display  can be used to display images or scenes stored in frame buffer .","An embodiment of the invention shown in  has a multipass graphics pipeline. It is capable of operating on each pixel of an object (image) during each pass that the object makes through the graphics pipeline. For each pixel of the object, during each pass that the object makes through the graphics pipeline, texture unit  can obtain texture sample(s) from the texture image  stored in texture memory .","Other embodiments of the present invention can include OPENGL pixel texture extension and\/or NVIDIA-style texture-dependent texture lookups.","9. Example Computer System","Referring to , an example of a computer system  is shown, which can be used to implement computer program product and computer program code embodiments of the present invention. This example computer system is illustrative and not intended to limit the present invention. Computer system  represents any single or multi-processor computer. Single-threaded and multi-threaded computers can be used. Unified or distributed memory systems can be used.","Computer system  includes one or more processors, such as processor , and one or more graphics subsystems, such as graphics subsystem . One or more processors  and one or more graphics subsystems  can execute software and implement all or part of the features of the present invention described herein. Graphics subsystem  can be implemented, for example, on a single chip as a part of processor , or it can be implemented on one or more separate chips located on a graphic board. Each processor  is connected to a communication infrastructure  (e.g., a communications bus, cross-bar, or network). After reading this description, it will become apparent to a person skilled in the relevant art how to implement the invention using other computer systems and\/or computer architectures.","Computer system  also includes a main memory , preferably random access memory (RAM), and can also include secondary memory . Secondary memory  can include, for example, a hard disk drive  and\/or a removable storage drive , representing a floppy disk drive, a magnetic tape drive, an optical disk drive, etc. The removable storage drive  reads from and\/or writes to a removable storage unit  in a well-known manner. Removable storage unit  represents a floppy disk, magnetic tape, optical disk, etc., which is read by and written to by removable storage drive . As will be appreciated, the removable storage unit  includes a computer usable storage medium having stored therein computer software and\/or data.","In alternative embodiments, secondary memory  may include other similar means for allowing computer programs or other instructions to be loaded into computer system . Such means can include, for example, a removable storage unit  and an interface . Examples can include a program cartridge and cartridge interface (such as that found in video game devices), a removable memory chip (such as an EPROM, or PROM) and associated socket, and other removable storage units  and interfaces  which allow software and data to be transferred from the removable storage unit  to computer system .","In an embodiment, computer system  includes a frame buffer  and a display . Frame buffer  is in electrical communication with graphics subsystem . Images stored in frame buffer  can be viewed using display .","Computer system  can also include a communications interface . Communications interface  allows software and data to be transferred between computer system  and external devices via communications path . Examples of communications interface  can include a modem, a network interface (such as Ethernet card), a communications port, etc. Software and data transferred via communications interface  are in the form of signals which can be electronic, electromagnetic, optical or other signals capable of being received by communications interface , via communications path . Note that communications interface  provides a means by which computer system  can interface to a network such as the Internet.","Computer system  can include one or more peripheral devices , which are coupled to communications infrastructure  by graphical user-interface . Example peripheral devices , which can form a part of computer system , include, for example, a keyboard, a pointing device (e.g., a mouse), a joy stick, and a game pad. Other peripheral devices , which can form a part of computer system  will be known to a person skilled in the relevant art given the description herein.","The present invention can be implemented using software running (that is, executing) in an environment similar to that described above with respect to FIG. . In this document, the term \u201ccomputer program product\u201d is used to generally refer to removable storage unit , a hard disk installed in hard disk drive , or a carrier wave or other signal carrying software over a communication path  (wireless link or cable) to communication interface . A computer useable medium can include magnetic media, optical media, or other recordable media, or media that transmits data. These computer program products are means for providing software to computer system .","Computer programs (also called computer control logic) are stored in main memory  and\/or secondary memory . Computer programs can also be received via communications interface . Such computer programs, when executed, enable the computer system  to perform the features of the present invention as discussed herein. In particular, the computer programs, when executed, enable the processor  to perform the features of the present invention. Accordingly, such computer programs represent controllers of the computer system .","In an embodiment where the invention is implemented using software, the software may be stored in a computer program product and loaded into computer system  using removable storage drive , hard drive , or communications interface . Alternatively, the computer program product may be downloaded to computer system  over communications path .","The control logic (software), when executed by the one or more processors , causes the processor(s)  to perform the functions of the invention as described herein.","In another embodiment, the invention is implemented primarily in firmware and\/or hardware using, for example, hardware components such as application specific integrated circuits (ASICs). Implementation of a hardware state machine so as to perform the functions described herein will be apparent to a person skilled in the relevant art.","10. Conclusion","Various embodiments of the present invention have been described above, which are capable of being implemented on a graphics machine. It should be understood that these embodiments have been presented by way of example only, and not limitation. It will be understood by those skilled in the relevant art that various changes in form and details of the embodiments described above may be made without departing from the spirit and scope of the present invention as defined in the claims. Thus, the breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated herein and form part of the specification, illustrate the present invention and, together with the description, further serve to explain the principles of the invention and to enable a person skilled in the pertinent art to make and use the invention. In the drawings, like reference numbers indicate identical or functionally similar elements. Additionally, the left-most digit(s) of a reference number identifies the drawing in which the reference number first appears.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 3A","b":"2"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 3B","b":"2"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIGS. 6A and 6B"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIGS. 8A","b":["8","8","8"]},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 9A"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 9B"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 11","b":"10"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
