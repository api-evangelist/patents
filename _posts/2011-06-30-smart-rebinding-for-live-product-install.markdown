---
title: Smart rebinding for live product install
abstract: An upgrade of an application product is installed to a first location in a shared environment that is different than a second location in the shared environment. An indication of the newer version of the application product and an indication of the first location are recorded in a registry that comprises indications of a plurality of application products and locations corresponding thereto. Metadata and binding information are obtained from an instance of the previous version of the application product while the instance of the previous version of the application product continues running. The metadata and the binding information are instantiated for an instance of the newer version of the application product in execution space thereof. Work is diverted work from the instance of the previous version of the application product to the instance of the newer version of the application product while both instances continue running in the shared environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08782630&OS=08782630&RS=08782630
owner: International Business Machines Corporation
number: 08782630
owner_city: Armonk
owner_country: US
publication_date: 20110630
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DESCRIPTION OF EMBODIMENT(S)"],"p":["Embodiments of the inventive subject matter generally relate to the field of computer processing and, more particularly, to live install of a product with smart rebinding.","Typically, an enterprise customer runs multiple software products as a solution. The multiple software products interact to provide the solution for that enterprise customer. One software product implements a user interface, while another software products manages a database. Other software products implement web services, security, and data processing. These products are often updated on different timelines. For instance, the database manager product is updated at a time when the other software products are not updated. Upgrading one of these products is inefficient and often introduces an interruption in handling requests submitted to the software product being upgraded.","Embodiments include a method for live install of a product without interrupting a running solution that includes an instance of the product. One or more files of a newer version of an application product are installed to a first location in a shared environment that is different than a second location in the shared environment where one or more files of a previous version of the application product are installed. The application product is one of a plurality of application products of a solution implemented in the shared environment. An indication of the newer version of the application product and an indication of the first location are recorded in a registry that comprises indications of the plurality of application products and locations corresponding thereto. Metadata and binding information are obtained from an instance of the previous version of the application product while the instance of the previous version of the application product continues running in the shared environment. The metadata and the binding information are instantiated for an instance of the newer version of the application product in execution space thereof. Work is diverted from the instance of the previous version of the application product to the instance of the newer version of the application product while both instances continue running in the shared environment.","Embodiments include a computer program product for installing a newer version of an application server product that is part of a solution without interrupting the solution. The computer program product comprises a computer readable storage medium having computer usable program code embodied therewith. The computer usable program code comprises a computer usable program code configured to install one or more files of a newer version of an application server product to a first location in a shared environment that is different than a second location in the shared environment where one or more files of a previous version of the application server product are installed. The application server product is one of a plurality of application products of a solution implemented in the shared environment. The computer usable program code is configured to record an indication of the newer version of the application server product and an indication of the first location in a registry that comprises indications of the plurality of application products and locations corresponding thereto. The computer usable program code is configured to obtain metadata and binding information from an instance of the previous version of the application server product while the instance of the previous version of the application server product continues running in the shared environment. The computer usable program code is configured to instantiate the metadata and the binding information for an instance of the newer version of the application server product in execution space thereof. The computer usable program code is configured to migrate an instance of a first of the plurality of application products from the instance of the previous version of the application server product to the instance of the newer version of the application server product.","The description that follows includes exemplary systems, methods, techniques, instruction sequences and computer program products that embody techniques of the present inventive subject matter. However, it is understood that the described embodiments may be practiced without these specific details. In other instances, well-known instruction instances, protocols, structures and techniques have not been shown in detail in order not to obfuscate the description.","The description uses the terms \u201cinstance,\u201d \u201ccomponent,\u201d \u201cexecution space,\u201d \u201cwire,\u201d and \u201cshared environment.\u201d The term \u201cinstance\u201d is used to refer to executing code or program instructions. An application server instance refers to the executing code that implements the application server. The term \u201ccomponent\u201d is used to refer to a reusable piece of code that implements well-defined interfaces. Typically, a runtime environment contains a component. For instance, a Java\u00ae Enterprise Edition (Java EE) runtime environment (also referred to herein as \u201ccontainer\u201d) contains JavaBean\u00ae components. Examples of components also include portlets and widgets. The term \u201cexecution space\u201d refers to the memory allocated to an instance. Execution space may also encompass other resources (e.g., sockets). The term \u201cwire\u201d is used to refer to a logical connection between components\/applications, including user interfaces, that facilitates the transfer of data between the components. A wire identifies a target component and the protocol for conducting data transfer (e.g., a defined interface). The term \u201cshared environment\u201d is used to refer to an environment shared by multiple users. Examples of a shared environment include a server, a virtual server, and an operating system.","A shared environment hosts an application server, a web server, a database connector and database, services, and software components (e.g., Java beans). Software products are installed on an instance of the application server. Instances of the software products bind to the application server, services, and components. When one of the software products are to be upgraded to a newer version, the newer version of the software product is installed and begins running on an application server instance, perhaps an instance of a newer version of the application server. The instance of the newer version of the software product (hereinafter referred to as \u201cupgrade instance\u201d) obtains binding information for the instance of the previous version of the software product (hereinafter referred to as \u201ccurrent instance\u201d). The upgrade instance binds to the service and objects in accordance with the obtained binding information. Requests that are in-process with the current instance are completed. Requests that are queued for the current instance are directed to the upgrade instance. The software product is upgraded while the solution continues to run, thus avoiding interrupting users using the solution.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1","b":["100","101","103","105","101","107","101","100","113","113"]},"The applications are bound to the application server 6.0 instance . The application A 1.2 instance  is bound to the component container, and the service of the application server 6.0 instance . The application B 2.3 instance is bound to the component container, the service, and the database container of the application server 6.0 instance .","At a stage A, a new version of the application server and application B are installed. A version 7.0 of the application server is installed in the shared environment . A version 3.0 of application B is also installed in the shared environment . The initial part of the install involves installing the application server and the application B into a specified location (e.g., folder or directory). After the location is known, the deployment engine  updates a component and service registry  with indications of the newly installed products and their locations. The deployment engine  adds an entry for the application server 7.0 and an entry the application B 3.0 in the component and service name registry .","At a stage B, the deployment engine  configures the newly installed products in accordance with configuration data in. The deployment engine  copies the configuration data of the application server 6.0 for the application server 7.0. The deployment engine  then modifies the configuration data for the application 7.0 to reflect any changes specified for application 7.0 (e.g., by an administrator or in a default configuration data). The configuration data for the newly installed products can indicate the solution host, port numbers, etc. Similarly, the deployment engine  copies configuration data of application B 2.3 for the application B 3.0. The deployment engine  modifies the copied configuration data to suit the application B 3.0. Although the example depicts the deployment engine  as configuring the newly installed software products, the illustration is intended to present an example to aid in understanding the inventive subject matter and not intended to limit embodiments. An implementation can task an administrative console or module with configuring newly installed software products.","At stage C, the application server 7.0 has been launched. The resulting application server 7.0 instance  obtains metadata (e.g., metadata about pages, wires, and certificates, etc.) and binding information from the application server 6.0 instance . The application server 7.0 instance  creates data structures with the metadata and the binding information in execution space of the application server 7.0 instance . The application server 6.0 instance can be bound to data sources, shared libraries, etc. The application server 7.0 instance will also be bound to those data sources and shared libraries. The application server 7.0 instance  will be instantiated with services and components in accordance with its installation files and the configuration data in. The obtained metadata may be used to further configure the application server 7.0 instance . The application server 7.0 instance  will use the obtained metadata and binding information to bind to and\/or establish additional components and\/or services that may not be indicated in the installation files of the application server 7.0 installation files\/script.  depicts the application server 7.0 instance  as hosting the container component, service, and database connector as depicted for the application server 6.0 instance. A newer version of an application server will not necessarily be instantiated with the same components or services as a previous version of the application server.  also depicts the database connector hosted by the application server 7.0 instance  as connecting to a database . The database instance  is most likely another instance of the database . If a database is involved in a software product installation, an implementation of smart rebinding install can either connect to a same database, in this example to database , or create another copy of the database . In some cases, all applications running on an instance of a previous version of an application server will migrate to the instance of the newer version of the application server. For those cases, the upgrade instance can use the artifacts (i.e., databases, components, services, etc.) of the previous version instance without creating replicas or redundancies. After stage C completes, the application server 7.0 instance  is running and can accept requests\/tasks.","At stage C, At stage C, the application B 3.0 instance  has been launched. The resulting application B 3.0 instance  obtains metadata and binding information from the B 2.3 instance . The B 3.0 instance  creates data structures with the metadata and the binding information in execution space of the B 3.0 instance . With the binding information, the application B 3.0 instance  discovers that it should bind to the container component, service, and database connector that is now hosted in the application server 7.0 instance. The application B 3.0 instance  binds to those hosted in the application server 7.0 instance instead of the application server 6.0 instance because the application B 3.0 instance  has been configured to run on the application server 7.0 instance , and is unaware of the application server 6.0 instance. After stage C completes, the application B 3.0 instance  is running and can accept requests\/tasks. The application B 3.0 instance  notifies the application B 2.3 instance that the upgrade version is able to accept work\/task requests.","At a stage D, the application B 2.3 instance  diverts in-process work to application B 3.0 instance . Once it is determined that the upgrade instance of application B 3.0 can accept requests, the application B 2.3 instance  begins to queue received requests, and transfers the ownership of the queue or the queue itself to the application B 3.0 instance . If processing a request involves multiple operations, some of which are independent on other operations, embodiments can allow a current instance to complete operations that have dependencies and pass the independent operations to the upgrade instance.","Although this example does not depict bindings between the instances of application A and application B, applications can be bound to each other or have dependencies between each other. For example, a user interface may present content from application A in a first panel and content from application B in a second panel. The content from application A may be dependent upon the content from application B. When the newer version of product B is installed, the binding information and metadata is updated to preserve the relationship between the instance of application A and the instance of the newer version of application B.","At stage E, the deployment engine  invalidates the in the component and service name registry  for the application B 2.3 instance . The entry is marked for deletion after the shared environment  is stabilized. The shared environment  reaches stabilization, with respect to application B, when the following occurs: 1) application B 2.3 instance  no longer handles any requests; 2) references to application B 2.3 have been cleared (e.g., an application that is not running has a reference to application 2.3); and 3) any bindings to the application B 2.3 instance  have been transferred to the application B 3.0 instance  (e.g., another application or service may be bound to the application B 2.3 instance ).","Although the example depicts implementing the smart rebinding functionality (i.e., live transfer of metadata and binding information between versions of a software product) in the software products, embodiments are not so limited. Other embodiments implement smart rebinding in a centralized fashion. A separate executing piece of code (e.g., the deployment engine) tracks metadata and the binding information for each software product installed on a shared environment. Tracking can involve recording pointers to the metadata and the binding information, maintaining a copy of the location of the metadata and binding information, etc. This piece of code (\u201csmart rebinding manager\u201d) monitors the installation process, and communicates the metadata and binding information to a newly installed software product once it detects launch of the newly installed product. The smart rebinding manager can handles diversion of requests from a previous instance to an upgrade instance.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 2-3","b":["201","203","207","209"]},"At block , the application server product is installed to a new location and configured. For example, the application server product is installed into a new folder or directory. Implementations do not necessarily install the application server product to a newly created location. The \u201cnew\u201d location is just different than the location of the currently installed version of the application server product. Control flows from block  to block .","At block , the application product is installed at a new location and configured to run on a specified application server. The application product may be installed along with an application server product. In that case, the application server product is installed first. After the application server product is up and running, the application product is installed to run on the newly installed application server product. Control flows from block  to block .","At block , an instance of the application is launched in accordance with the configuration. Any one or more of a user, default configuration, and previous version configuration data can be used to configure the application product.","At block , an identifier of the newer version of the application product and an indication of the new location are recorded. For example, a deployment engine records a name and version of the application product along with the location of the application product in a data structure that tracks installed products.","At block , an identifier and location of the currently installed version of the application product are determined. For example, the deployment engine looks up an entry with a similar name or identifier as the identifier of the product being installed.","At block , metadata and binding information is requested from the instance of the currently installed version of the application product. For example, smart rebinding code of the upgrade instance calls a function\/method using the location information looked up in a name service registry. The function can be defined with an application programming interface.","At block , the metadata and the binding information are received.","At block , data structures for the metadata and the binding information are created in the execution space of the upgrade instance. The data structures correspond to any one of a web page, a portlet, wires, preferences, etc. For example, data structures are instantiated for the wires that connect the current instance with other components in the shared environment. Those data structures are modified to indicate the upgrade instance instead of the current instance. If the current instance is a target of a wire, then a data structure will be instantiated to indicate the upgrade instance as the target of the wire. For a wire that indicates the current instance as a source, a data structure will be instantiated that indicates the upgrade instance as the source. Embodiments can copy the data structures that represent the wires, and modify the copied data structures for the upgrade instance. When the upgrade instance takes over for the current instance, the copied wires are activated. Other embodiments modify the data structures that represent the wires with invalid entries that indicate the upgrade instance. When the upgrade instance takes over, the entries for the upgrade instance are activated and the entries for the current instance are marked as invalid to eventually be removed from the wire data structures. To illustrate, an application A comprises a user interface that is wired to an application B. For this illustration, the application B operates as a source and the application B operates as a target of the wire. When application A is upgraded, the wire is modified (or a new wire is created) to logically connect the upgrade version of application A with the application B in accordance with the existing wire configuration of application B as a source and application A as a target. Content from the upgrade instance of application A and the application B are presented via the wire in the user interface of the upgrade instance of application A.","At block , in-process work is diverted to the upgrade instance from the current instance. For example, a smart rebinding manager intercepts requests submitted to the current instance and passes those requests to the upgrade instance, while informing the requestor of the upgrade instance. For example, the wires for the upgrade instances are now used instead of the wires connected to the current instance, thus maintaining integration between the product being upgraded and other products.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 3","FIG. 2"],"b":["223","301","304","303"]},"At block , the entry for previous version of the application product is invalidated and marked for removal. The current instance is then terminated. Termination is delayed to allow for the environment to stabilize as described earlier. An application server product is not invalidated in this example because other application instances may be running on a current instance of an application server. An administrator can manually remove an entry for a server type of application when the administrator considers it safe. Control flows from block  to block .","At block , it is determined if application instances running on the current instance of the application server will migrate to the upgrade instance. For example, a smart rebinding manager examines configuration data, an administrator setting, etc. to determine whether application instances will migrate. If one or more application instances will migrate, then control flows to block . If none of the application instances running on the current instance of the application server will migrate, then control flows to block .","At block , a set of operations begin for each of the applications instances to be migrated.","At block , a location of code (e.g., binary) for the application instance is determined. For example, the deployment engine looks up location of binary for an application in a registry with an identifier corresponding to the application instance.","At block , an indication of the location of the code is recorded in the execution space of the upgrade instance. For example, a deployment engine communicates, to the upgrade instance, a reference to binary of the migrating application. The upgrade instance then creates a data structure for the application instance.","At block , configuration data of the application instance is modified to conform to the upgrade instance of the application server. For example, upgrade instance of the application server or an administrative module updates the configuration data to reflect that the application instance will be running on the upgrade instance of the application server.","At block , it is determined whether there is another application instance to process. If not, then control flows to block . If so, then control returns to block .","At block , a notification is generated that the upgrade instance is live. For example, the deployment engine writes to a log that the live install has completed.","The flowcharts depicted in the figures are intended to aid in understanding the inventive subject matter, and should not be used to limit embodiments of the inventive subject matter. Embodiments can perform additional operations, fewer operations, operations in parallel, in a different order, etc. For instance, an embodiment can perform configuration operations after launching an application product in contrast to the depicted operations at block  and  of . An embodiment can extract the operations for migrating application instances as depicted in  and perform the migration operations separately from the smart rebinding installation.","As will be appreciated by one skilled in the art, aspects of the present inventive subject matter may be embodied as a system, method or computer program product. Accordingly, aspects of the present inventive subject matter may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present inventive subject matter may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.","Computer program code for carrying out operations for aspects of the present inventive subject matter may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the present inventive subject matter are described with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the inventive subject matter. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 4","FIG. 4"],"b":["401","407","407","403","405","409","425","403","425","401","401","401","409","405","403","403","407","401"]},"While the embodiments are described with reference to various implementations and exploitations, it will be understood that these embodiments are illustrative and that the scope of the inventive subject matter is not limited to them. In general, techniques for live install of a part of a solution with smart binding as described herein may be implemented with facilities consistent with any hardware system or hardware systems. Many variations, modifications, additions, and improvements are possible.","Plural instances may be provided for components, operations or structures described herein as a single instance. Finally, boundaries between various components, operations and data stores are somewhat arbitrary, and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the inventive subject matter. In general, structures and functionality presented as separate components in the exemplary configurations may be implemented as a combined structure or component. Similarly, structures and functionality presented as a single component may be implemented as separate components. These and other variations, modifications, additions, and improvements may fall within the scope of the inventive subject matter."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present embodiments may be better understood, and numerous objects, features, and advantages made apparent to those skilled in the art by referencing the accompanying drawings.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIGS. 2-3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
