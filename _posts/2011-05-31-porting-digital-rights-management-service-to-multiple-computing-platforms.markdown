---
title: Porting digital rights management service to multiple computing platforms
abstract: Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for porting digital rights management services. In one aspect, a system includes: a hardware processor; one or more memory devices coupled with the hardware processor and effecting an operating system for the hardware processor; and a digital rights management (DRM) component having a DRM adaptor configured to check whether the hardware processor has a hardware-based encryption element, use the hardware-based encryption element if available, and use a software-based encryption element if the hardware-based encryption element is not available, wherein the software-based encryption element includes code compiled from source code for the hardware processor, the source code prepared for different computer platforms.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08516273&OS=08516273&RS=08516273
owner: Asobe Systems Incorporated
number: 08516273
owner_city: San Jose
owner_country: US
publication_date: 20110531
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This specification relates to digital rights management.","Publishers, distributors, retailers and other providers of electronic content often desire to restrict access to the electronic content to authorized users only. Electronic content may include, for example, documents, e-books, video, music, computer applications, or games, to name a few examples. Electronic content may be usable on a variety of devices, such as a personal computer, laptop computer, tablet computer, television, set-top box, gaming system, and various types of mobile devices (e.g., personal digital assistant (PDA), portable music player, mobile phone). Electronic content may be distributed, for example, in some encrypted or otherwise protected form. Encrypted content may require a decryption key or other mechanism for rendering the document usable to an authorized user. Some types of user devices may include hardware that is specialized for certain encryption and decryption processing.","When electronic content is distributed, e.g., sold or lent to consumers, the electronic content can be protected by a digital rights management (\u201cDRM\u201d) system. A DRM system defines and enforces digital rights. A digital right is a permission to perform one or more actions that involve a content item. By managing digital rights, the DRM system can allow content owners to prevent unauthorized use or distribution of the protected content and can selectively authorize users to perform actions that involve the protected content. For example, upon request, the DRM system can evaluate a set of digital rights associated with a content item, and based on the evaluation, provide or deny authorization for an action involving the content item.","This specification describes technologies relating to porting digital rights management services.","In general, one innovative aspect of the subject matter described in this specification can be embodied in systems that include a hardware processor; one or more memory devices coupled with the hardware processor and effecting an operating system for the hardware processor; and a digital rights management (DRM) component having a DRM adaptor configured to check whether the hardware processor has a hardware-based encryption element, use the hardware-based encryption element if available, and use a software-based encryption element if the hardware-based encryption element is not available, wherein the software-based encryption element includes code compiled from source code for the hardware processor, the source code prepared for different computer platforms. Other embodiments of this aspect include corresponding apparatus, methods, and computer programs encoded on computer storage devices.","These and other embodiments can each optionally include one or more of the following features. The DRM adaptor can be configured to check availability for the hardware-based encryption element by requesting information from the operating system regarding a cryptographic program interface, and test acceptability of the cryptographic program interface based on the information. The cryptographic program interface can be supported by a dynamic library. The DRM adaptor can be configured to test acceptability of the cryptographic program interface by checking a digital signature.","The DRM adaptor can be configured to initiate a handshake with a loadable module using a number that is encrypted a first time, decrypted, modified, encrypted a second time using a different key from the first time, decrypted, and unmodified to produce a result comparable to the number. The source code can include source code that was obfuscated before compilation. The source code can include different libraries specific to the different computer platforms.","In general, one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of: receiving information regarding different computing platforms for which a digital rights management (DRM) adaptor is buildable; obfuscating source code for the DRM adaptor, the source code being usable for each of the different computing platforms for which the DRM adaptor is buildable; compiling the obfuscated source code to generate the DRM adaptor that accesses different sets of cryptographic utilities on at least two of the different computing platforms for which the DRM adaptor is buildable; and providing the DRM adaptor to effect a DRM service on a target computing platform. Other embodiments of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.","These and other embodiments can each optionally include one or more of the following features. The method can include: adding one or more hooks, into the DRM adaptor, to call into one or more programming interfaces of a hardware cryptographic capability of an identified hardware processor, the hardware cryptographic capability including one of the different sets of cryptographic utilities; and compiling additional source code to generate another of the different sets of cryptographic utilities, which is included in the DRM adaptor. Adding the one or more hooks can include adding respective different sets of one or more hooks into the DRM adaptor to call into respective programming interfaces of different hardware cryptographic capabilities of different identified hardware processors.","Compiling the additional source code can include compiling the additional source code multiple times for different computing platforms, based on an identified operating system, an identified hardware processor and an identified compiler for each respective computing platform, to generate at least two of the different sets of cryptographic utilities. In addition, the source code for the DRM adaptor can include code that implements encryption key handling guidelines for the DRM service.","In general, one innovative aspect of the subject matter described in this specification can be embodied in a computer storage medium encoded with a computer program, the program including instructions that when executed by data processing apparatus cause the data processing apparatus to perform operations including: checking whether a hardware processor has a hardware-based encryption element; using the hardware-based encryption element, if available, for cryptographic utilities calls into a digital rights management (DRM) adaptor; and using a software-based encryption element, if the hardware-based encryption element is not available, for the cryptographic utilities calls into the DRM adaptor, wherein the software-based encryption element includes code compiled from source code for the hardware processor, the source code prepared for different computer platforms. Other embodiments of this aspect include corresponding systems, apparatus, and methods.","These and other embodiments can each optionally include one or more of the following features. The operations can include: checking availability for the hardware-based encryption element by requesting information from an operating system regarding a cryptographic program interface; and testing acceptability of the cryptographic program interface based on the information from the operating system. The cryptographic program interface can be supported by a dynamic library. The testing can include checking a digital signature associated with the cryptographic program interface. The source code can include source code that was obfuscated before compilation, and the source code can include different libraries specific to the different computer platforms.","Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. A software-based encryption element can be used if a hardware-based encryption element is not available. Secure, robust DRM functionality that is operating system and hardware independent can be used on multiple, different computing platforms. Secure, robust DRM functionality can be added to a new computing platform. DRM functionality can be added to a device without in-depth knowledge of DRM and without extensive effort by a device vendor or manufacturer. DRM-enabled applications can run on multiple, different computing platforms while using a same DRM component.","The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.","Like reference numbers and designations in the various drawings indicate like elements.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","102","104","106","102","104","106","102","104","106","102","104","106","108","108","102","104","106","108","110","110","110","110"],"i":["a","b","c "]},"A client device , , or can be provided by a device vendor or device manufacturer. For example, as illustrated by a client device , a device vendor  can provide the client device , and as illustrated by a client device , a device manufacturer  can provide the client device . The client device  or  represents the state of the client device or when provided to a user by the device vendor  or the device manufacturer , respectively. The device manufacturer  may be a \u201cvertical\u201d manufacturer in that the device manufacturer  may develop both an operating system  and a hardware processor  for the client device . The device vendor  may be a \u201chorizontal\u201d vendor in that the device vendor  may develop an operating system (OS)  for the client device  but not a hardware processor  for the client device , or may develop the hardware processor  but not the operating system , or may develop neither the operating system  nor the hardware processor  but may assemble the client device  using the operating system  and the hardware processor .","Some hardware processors can include DRM (Digital Rights Management)-specific functionality, such as one or more hardware encryption elements. For example, the hardware processor  includes a hardware encryption element  configured to perform a set of cryptographic utilities. Using the hardware-based encryption element  can result in faster performance, such as faster encryption and decryption, as compared to using software-based DRM utilities. The hardware encryption element  can be supported by a dynamic library . The dynamic library  can be included in or can be associated with the operating system .","A software provider  can develop DRM software which can provide secure, robust DRM functionality that can be made available on a variety of computing platforms, where a particular computing platform includes a particular operating system running on a particular hardware processor. For example, the software provider  can develop DRM adaptor source code  that is usable on a variety of computing platforms and can build a DRM adaptor  that is targeted for a particular computing platform, or multiple different computing platforms. The DRM adaptor  can be used by the device vendor  or the device manufacturer  to implement robust, secure DRM solutions on devices provided by the device vendor  or the device manufacturer . The DRM adaptor can be added to devices provided by the device vendor  or the device manufacturer  without requiring a large amount of knowledge or effort on the part of the device vendor  or the device manufacturer .","The DRM adaptor  can be configured to check whether a hardware processor has a hardware-based encryption element, use the hardware-based encryption element, if available, for cryptographic utilities calls, and use a software-based encryption element for the cryptographic utilities calls, if the hardware-based encryption element is not available. The DRM adaptor  can include other DRM solutions, such as secure storage of critical DRM data, such as keys, and a secure clock.","The software provider  can build a DRM adaptor  targeted for the operating system  and the hardware processor  used by the client device  and can build a DRM adaptor  targeted for the operating system  and the hardware processor  used by the client device . The device vendor  or the device manufacturer  can choose to distribute the DRM adaptor  or the DRM adaptor , when providing the client device  or the client device , respectively, to a user, such as to enable application developers (e.g., an application developer ) to develop applications that include DRM functionality. For example, the DRM adaptor  may be provided as a DRM adaptor  included in computer readable medium  of the client device  and the DRM adaptor  may be provided as a DRM adaptor  included in computer readable medium  of the client device .","The device vendor  or the device manufacturer  can choose whether to expose, to the application developer , some or all of the functionality provided by the DRM adaptor  or the DRM adaptor , respectively. For example, the device vendor  may choose to expose some but not all of the functionality of the DRM adaptor  using a DRM API (Application Programming Interface) . As described in more detail below, the application developer  can develop an application  that uses DRM functionality provided by the DRM API . The application  can be used, for example, by a user of the client device ","For example, a user of a client device may browse content items (e.g., multimedia content) accessible from the web server . The web server  may, for example, be maintained by a retailer. The retailer may, for example, receive content from content owners or content distributors and may encode the received content. Content owners, content distributors, and the retailer may desire to restrict access to content to authorized users only and the retailer may encrypt a respective content item so that the content item can only be consumed by a user who has obtained a license for the content item. Metadata which specifies usage rules for the content item may be included with an encrypted version of the content item. The retailer may host content on the content server .","The user of the client device may request a resource located on the web server  that corresponds to a particular content item. The user may, for example, enter or otherwise select (e.g., by clicking on a hyperlink) a URL (Uniform Resource Locator), corresponding to a resource located on the web server , into a web browser running on the client device . In response to the request for the resource by the client device , the web server  or the content server  can send a copy of the resource to the client device . In some implementations, the resource can be sent using a content delivery network (CDN). The content associated with the resource can be, for example, a file that is sent to the client device , or the content can be content that is streamed to the client device . The content can be stored on the client device as content  in a user area  of the computer readable medium .","The content server  or the web server  can provide the application  to present the content . The application developer , who may be a content owner, a content distributor, or a third party application developer, can, for example, make the application  available from the content server  or from the web server . The application  can provide a runtime environment for presenting video, audio, text, and\/or other information. The application  can, for example, be included in one or more files that are separate from the content . For example, in some implementations, the web server  can provide a SWF file. Note that SWF is a file format, such as the SWF File Format Specification (Version 10) as published by Adobe Systems Incorporated of San Jose, Calif. As another example, the application  can be an Adobe\u00ae Integrated Runtime (AIR\u00ae) application.","The retailer associated with the web server  may desire that the content  be viewed using an application provided by the web server  or by the content server  and not some other application. For example, the application  provided by the web server  or content server  can be configured to present advertisements, gather user behavior data or analytics, or perform other functionality beneficial to the retailer associated with the web server  or beneficial to the content owner. Moreover, control of the application  used to present the content  can prevent third parties from deriving an unauthorized benefit from proprietary or otherwise protected (e.g., copyrighted) content.","In response to the request for the resource by the client device , the web server  or the content server  can send a copy of the application  (e.g., a copy of a player file, such as a SWF file) to the client device . The web server  can, for example, forward a request for the resource and\/or the application  to the content server . The web server  or the content server  can send the copy of the application  to the client device before, concurrently with, or after the sending of the content . The client device can store the copy of the application  as an application .","The application  may be runnable using an application runtime . For example, the user may have previously installed the application runtime , or the application runtime  may be sent to the client device before, concurrently with, or after the sending of the content  or the application . The application runtime  may be, for example, a virtual machine that can execute the application  as well as other scripts or applications. The application runtime  may be, for example, a media player such as Adobe\u00ae Flash\u00ae Player software or may be the Adobe\u00ae Integrated Runtime (AIR\u00ae) software.","In some implementations, the resource or the corresponding content  can indicate that one or more licenses are needed to access (e.g., view or play) the content. In response to receiving the resource with such an indication or in response to the user attempting to access (e.g., view, play) the content , the client device can request a license for the content  from the web server  or from the license server . In some implementations, the web server  can forward a request for a license to the license server  in response to the request for the resource from the client device . In some implementations, a URL of the license server  can be included in metadata associated with the content .","In some implementations, the request for the license can be initiated by the application . The request for the license can include an identity of the application  and\/or some other authorization information, such as a machine certificate associated with the application runtime  and the client device . The license server  can validate the license request, can digitally sign or otherwise authenticate a license, and can send the license to the client device . The license can be sent concurrently with the sending of the content  or before or after the sending of the content .","Before processing the license, the application  or the application runtime  can verify the license, such as by verifying a digital signature. The digital signature can be verified, for example, using one or more functions provided by the DRM API . A copy of the license can be stored in the client device . The license can include a content identifier, an encryption key, and an authorization to present the content . In some implementations, the authorization to present the multimedia content  can include information to verify the application . The application runtime  can verify the application , such as by confirming that a signature associated with the application matches a signature included on a white list of applications, by confirming that the application was received from a trusted source, or by hashing an application file and confirming that a calculated hash value matches an expected hash value included in or with the license. The application runtime  can verify the application  using one or more functions provided by the DRM API .","The application  or the application runtime  can use an encryption key included in the license to decrypt the content . In general, the application  or the application runtime  can use decryption, hashing, and other DRM-related functionality provided by the DRM adaptor  through the DRM API . Using the DRM API  and DRM adaptor  can result in stronger security and faster development times for the application developer , as compared to the application developer  implementing DRM functionality from scratch.","The DRM adaptor  can use the hardware encryption element  for cryptographic utilities calls into the DRM adaptor . Before using the hardware encryption element , the DRM adaptor  (or the runtime ) can verify the hardware encryption element . For example, the DRM adaptor  (or the runtime ) can verify a digital signature associated with the dynamic library  that supports the hardware encryption element . As another example, as illustrated by an arrow , the DRM adaptor  (or the runtime ) can perform a handshake process with the dynamic library .","For example, the DRM adaptor  can determine a cryptographic key to use for the dynamic library . The DRM adaptor  can generate a random number R and can encrypt R using the key to produce an encrypted random number R\u2032. The DRM adaptor  can send the key and the encrypted random number R\u2032 to the dynamic library . The dynamic library  can decrypt the encrypted random number R\u2032 using the key (e.g., using the hardware encryption element ) to produce a copy of the random number R. The dynamic library  can increment the copy of the random number R to produce a number R2. The dynamic library  can encrypt R2 using the key (e.g., using the hardware encryption element ) to produce an encrypted number R2\u2032. The dynamic library  can send the encrypted number R2\u2032 to the DRM adaptor . The DRM adaptor  candecrypt R2\u2032 using the key to produce R2. The DRM adaptor  can perform a test to determine whether R2=R+1. If the test is true, the DRM adaptor  can determine that the dynamic library  and the hardware encryption element  are available and valid. If the test is false, the DRM adaptor  can determine that the dynamic library  and\/or the hardware encryption element  are not valid, and can use a software-based encryption element for cryptographic utilities calls into the DRM adaptor .","In some implementations, the actions attributed to the DRM adaptor  in the example above can be performed by the application runtime , or by the DRM adaptor  operating in concert with the application runtime . Further, the handshake  can be performed in additional situations. The verification handshake  can be performed for other loadable modules, for example, for any loadable module used to implement the hardware-based DRM adaptor functionality. In addition, variations on the handshake protocol  are also possible, such as using different operations (e.g., other than addition or subtraction) to modify R, adding additional information to avoid replay attacks, etc.","The DRM adaptor  can be built by the software provider  for a new computing platform. For example, suppose the client device is a new computing device being developed by the device manufacturer . The software provider  can work with the device manufacturer  to build the DRM adaptor  so that the DRM adaptor  is targeted to the client device . The device manufacturer  can communicate information about a target hardware processor and a target operating system for the client device to the software provider .","The software provider  can discuss with the device manufacturer  whether the target hardware processor includes a hardware-based encryption element. If the target hardware processor does not include a hardware-based encryption element, the software provider  can generate a software-based encryption element  using a software-based encryption element generator . The software-based encryption element  can be specific to the targeted hardware processor, the targeted operating system, and a targeted compiler . The targeted compiler  can be identified from a set of possible compilers. In some implementations or for some build processes, the software provider  can generate the software-based encryption element  even if the targeted hardware processor includes a hardware-based encryption element. For example, the software-based encryption element  can be used as fallback functionality if, for example, the DRM adaptor  is unable to successfully communicate with the hardware-based encryption element in the field.","The DRM adaptor source code  can implement logic that includes determining, at run time, whether a hardware-based encryption element is available, using the hardware-based encryption element, if available, for cryptographic utilities, and using a software-based encryption element (such as the software-based encryption element ), if a hardware-based encryption element is not available, for the cryptographic utilities. If the client device includes a hardware-based encryption element, the software provider  and the device manufacturer  can identify a messaging interface and the software provider  may add one or more hooks to communicate with the target hardware processor for the client device to a hardware abstraction component associated with (or in some implementations, included in) the DRM adaptor source code .","Continuing with the example of building the DRM adaptor  for the client device , the software provider  can use an obfuscator  to obfuscate the DRM adaptor source code  to create obfuscated source code . Code may be obfuscated, for example, as a security measure. The software-based encryption element  can be source code, binary code, or a combination of source code and binary code. If the software-based encryption element  includes source code, that source code can be obfuscated using the obfuscator  and the obfuscated source code  can include obfuscated source code corresponding to both the DRM adaptor source code  and the software-based encryption element . If the software-based encryption element  does not include source code, the obfuscated source code  can correspond to the DRM adaptor source code . Some or all obfuscation can be performed manually, automatically, or by a combination of manual and automatic methods.","The software provider  can use the compiler  to compile the obfuscated source code  to generate the DRM adaptor . The DRM adaptor  can be, for example, a library that includes binary code that is configured to run on the client device . The device manufacturer  can include the DRM adaptor  when distributing the client device and the application developer  can develop applications using functionality provided by the DRM adaptor .","The DRM adaptor  can be built for use with multiple, different computing platforms. For example, in some implementations, the DRM adaptor  can be used both with a computing platform that includes a hardware processor that includes a hardware-based encryption element and with a computing platform that includes a hardware processor that does not include a hardware-based encryption element (e.g., in which case, the DRM adaptor  can include one or more software-based encryption elements). As another example, if the DRM adaptor  includes multiple software-based encryption elements, each of the multiple software-based encryption elements can be configured for use on one of multiple, different computing platforms. The DRM adaptor  can be used on each of the multiple, different computing platforms and at runtime can determine which of the multiple software-based encryption elements to use based on the current computing platform. In building the DRM adaptor , for example, multiple, different compilers can be used, one for each software-based encryption element that is targeted for a particular computing platform, and each of the compiler outputs from the multiple, different compilers can be included in or made accessible by the DRM adaptor , to enable the DRM adaptor  to run on each of the multiple, different computing platforms.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 2","b":["200","202","204","202","206","208","210","212","220","222","224","222","226","228","230","232","202","222"]},"Each of the system buses  and  can include multiple different types of busses, such as parallel or serial busses. Each of the computer-readable media  and  can include one or more non-volatile memories and storage devices (e.g., flash memory and a hard disk), one or more volatile memory devices (e.g., dynamic or static random access memory), or a combination of these. Each of the processing devices  and  can include one or more microprocessors and\/or multicore processors. The processing device  and\/or the processing device  can include a hardware-based encryption element (e.g., a secure cryptoprocessor) for performing cryptographic operations. Each of the interfaces  and  can include different types of interface circuitry and devices, such as a network card, or a radio frequency (RF) section and antenna, to connect to a network . Each of the interfaces  and  can also include other types of interface devices such as input\/output (I\/O) devices used to connect with other components, such as a keyboard, a cursor moving device, speaker(s), a microphone, and a digital camera, each of which can also be included in the hardware  or hardware , respectively.","The software  includes an operating system , an application , and a DRM adaptor . The operating system  includes a dynamic library , which can be used, for example, to support a hardware-based encryption element included in the processing device . The software  includes an operating system , an application , and a DRM adaptor . The DRM adaptor  includes or is associated with a software-based encryption element .","The DRM adaptor  can be built into the operating system , can run on top of the operating system  (as shown), or can run in a runtime environment that provides the DRM adaptor  with access to the functions provided by the operating system . Similarly, the DRM adaptor  can be built into the operating system , can run on top of the operating system  (as shown), or can run in a runtime environment that provides the DRM adaptor  with access to the functions provided by the operating system .","The DRM adaptor  and the DRM adaptor  can each be built from a same source code base. The DRM adaptor  can, for example, determine that the processing unit  includes a hardware-based encryption element and can use the hardware-based encryption element to perform one or more cryptographic operations, such as in response to one or more requests from the application . The DRM adaptor  can, for example, determine that the processing unit  does not include a hardware-based encryption element and can use the software-based encryption element  to perform one or more cryptographic operations, such as in response to one or more requests from the application .",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIGS. 3A and 3B","FIG. 3A"],"b":["300","301","302","302"]},"It can be determined whether the target CPU  includes hardware cryptographic capability (e.g., as represented by hardware cryptography ). If the target CPU  includes hardware cryptographic capability, a software provider can work with the vendor of the target CPU  to create a discovery API to implement secure, dynamic device profiling to determine, at run time, if the hardware cryptographic capability is available. If it is determined that the target CPU  does not include hardware cryptographic capability, it can be determined to develop one or more software cryptographic utilities .","A target operating system  can be identified. The target operating system  can be specific to the target CPU  (e.g., such as an operating system developed by a vertical device manufacturer) or the target operating system  can be an operating system that is usable on different hardware platforms.","A target compiler  can be identified. The target compiler  can be a compiler configured to generate code that is runnable by the target operating system  on the target CPU . The target compiler  can be used to build the software cryptography utilities , where the software cryptographic utilities  are based on the target CPU , the target operating system , and the target compiler . The target compiler  can also be used when building the DRM adaptor .",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 3B","b":["340","342","342","344","346","348","349"]},"A utilities component  can include custom implementations of system utilities that can interface with an operating system  that the DRM adaptor  can communicate with. The utilities component  can include, for example, custom implementations for operations such as requesting a memory storage area, copying information to memory, deleting information from memory, or comparing information in one memory location to information in another memory location. The utilities component  can be provided to protect against security threats that may exist if standard implementations of these functions were used.","The implementation of functionality of the DRM adaptor  (e.g., implementations of the AES component , the RSA component , the digest component , and other components) can be based on functionality included in a component , where the component  may include, for example, functionality related to device identifiers, thread synchronization, mutual exclusion processing, time, file input and output, and random number generation, to name a few examples.","A discovery component  can be used to determine, at runtime, whether hardware cryptographic APIs are available to the DRM adaptor . For example, the discovery component  can send a message  to the operating system , such as inquiring about the existence of a dynamic library that may support a cryptographic program interface. Based on a response  received from the operating system , the discovery API  can determine whether hardware cryptographic functionality is available.","If hardware cryptographic functionality is not available, the DRM adaptor  can use a \u201cwhite-box\u201d software-based encryption element . The white-box software-based encryption element  may, for example, be a library specific to a the operating system , a current hardware processor, and a specific compiler used to build the library. The DRM adaptor  may be capable of using other white-box software encryption elements (e.g., , ) that are associated with other computing platforms. For example, each white-box software-based encryption element - may be a library which includes source code that is specific to a particular computing platform.","If hardware cryptographic functionality is available, a hardware-based encryption element may be used for cryptographic utilities calls into the DRM adaptor . A hardware abstraction layer , which may be included in the DRM adaptor  or may be separate from the DRM adaptor , may include hardware hooks  which may include logic specific to interacting with a particular hardware processor. The hardware abstraction layer  can include other hardware hooks (e.g., , ) specific to interacting with other hardware processors.","In general, the hardware abstraction layer  can include specific details about particular computing platforms, such as particular hardware processors or particular operating systems. The hardware abstraction layer  can hide, from the DRM adaptor , functionality  specific to the Android\u2122 operating system, functionality  specific to the QNX operating system, and functionality  specific to the iOS operating system, to name a few examples. The hardware abstraction layer  can include functionality used to interface with two or more operating systems. For example, a JNI (Java Native Interface) component  may be used in conjunction with the functionality  related to the Android\u2122 operating system and to other functionality related to other operating systems.","The hardware abstraction layer  allows for the functionality of the DRM adaptor  to be cross-platform, meaning the DRM adaptor  can be used on multiple computing platforms. APIs  provided by the DRM adaptor  can be provided in a POSIX (Portable Operating System Interface for Unix) compliant format, meaning that the APIs  can be used in any environment that is compatible with the POSIX standard.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 4","b":"410"},"If one or more of the identified hardware processors has a hardware-based encryption element, it can be determined  to add one or more hooks  into the DRM adaptor, to call into one or more programming interfaces of a hardware cryptographic capability of an identified hardware processor. The hardware cryptographic capability can include one of multiple, different sets of cryptographic utilities accessible by the DRM adaptor. If multiple identified hardware processors have a hardware-based encryption element, it can be determined  to add respective, different sets of one or more hooks into the DRM adaptor to call into respective programming interfaces of different hardware cryptographic capabilities of multiple, different identified hardware processors.","If no identified hardware processors have a hardware-based encryption element, or if respective different sets of one or more hooks have been added into the DRM adaptor for each hardware processor that includes a hardware encryption element, it can be determined  to compile  source code to generate a set of cryptographic utilities to include in the DRM adaptor. For example, the set of cryptographic utilities can be a software-based encryption element that is included in the DRM adaptor. The source code for the software-based encryption element can be source code that is different from and in addition to source code for the DRM adaptor. The source code for the software-based encryption element can be obfuscated before compilation.","In some implementations, a software-based encryption element is generated for an identified hardware processor, an identified operating system, and an identified compiler if the identified hardware processor does not have a hardware-based encryption element. In some implementations, a software-based encryption element is generated for multiple identified hardware processor, operating system, and compiler combinations regardless of whether a respective hardware processor includes a hardware-based encryption element. It can be determined  to compile  the additional source code multiple times for different computing platforms, based on an identified operating system, an identified hardware processor, and an identified compiler, for each respective computing platform for which the DRM adaptor is buildable, to generate multiple, different sets of cryptographic utilities to include in the DRM adaptor.","If no or no more software-based encryption elements are to be generated , source code for the DRM adaptor is obfuscated . The source code for the DRM adaptor can be usable for each of the different computing platforms for which the DRM adaptor is buildable. The source code for the DRM adaptor can include code that implements encryption key handling guidelines for a DRM service. For example, the source code for the DRM adaptor can implement secure key storage and protection against hacking and subversion. The obfuscation can be manual or can be performed using an obfuscation tool.","The obfuscated source code is compiled  to generate the DRM adaptor. The generated DRM adaptor can access different sets of cryptographic utilities on multiple, different computing platforms for which the DRM adaptor is buildable. The DRM adaptor is provided  to effect a DRM service on a target computing platform. For example, a device vendor can provide the DRM adaptor on the target computing platform, to enable application developers to create applications that implement secure and robust DRM.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 5","b":"510"},"In some implementations, for example, the checking  can include requesting  information from an operating system regarding the existence of a cryptographic program interface. For example, the discovery API can request information about the existence of a dynamic library that supports a cryptographic program interface provided by the hardware processor.","Acceptability of the cryptographic program interface can be tested  based on the information from the operating system. For example, the testing  can include checking  a digital signature associated with the cryptographic program interface. For example, the discovery API can compare a digital signature of a library file against an expected digital signature.","As another example, the checking  may include sending one or more predetermined messages to the hardware processor. The messages can include one or more challenge-response messages. The determination of whether the hardware processor has a hardware-based encryption element can be based on responses received (or not received) from the hardware processor. The discovery API may, for example, request the hardware processor to encrypt a message and may compare the message encrypted by the hardware processor to an expected digital signature or may examine a digital certificate returned by the hardware processor. The discovery API can perform, for example, the handshake processing described above with reference to arrow  (), or can perform another handshake or verification process.","If the hardware processor has a hardware-based encryption element , the DRM adaptor uses  the hardware-based encryption element for cryptographic utilities calls into the DRM adaptor. Cryptographic utilities calls may be received, for example, from an application that uses the DRM adaptor.","If the hardware processor does not have a hardware-based encryption element , the DRM adaptor uses  a software-based encryption element for the cryptographic utilities calls into the DRM adaptor. The software-based encryption element can include code compiled from source code for the hardware processor. The source code can be prepared for different computer platforms, can be obfuscated before compilation, either manually or using an obfuscation tool, and can include multiple, different libraries, where each library is specific to a particular computing platform.","Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Moreover, while a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal. The computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).","The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources. The term \u201cdata processing apparatus\u201d encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing The apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.","A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.","The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).","Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.","To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.","Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (\u201cLAN\u201d) and a wide area network (\u201cWAN\u201d), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).","The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) can be received from the client device at the server.","While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.","Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.","Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 3A and 3B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
