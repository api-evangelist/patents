---
title: Call center queue administration
abstract: A feature server, e.g., a stored program controller, processes calls to a subscriber's main directory number in a packet network by submitting a subscriber-administered questionnaire to callers. The information in the questionnaire, when completed by the calling party, can be used to automatically route the call or to reposition the call in the incoming call queue. Alternatively, the completed, or even partially completed questionnaire may be displayed in a “pop up” window to a subscriber's operator who can then use the information to assist the caller or, without need of answering the call, to reposition the call within the queue or to divert the call to another directory number. In addition, information previously provided in a questionnaire completed by a caller is stored so that when the caller calls again, the stored information may be employed to more efficiently process the call.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06882641&OS=06882641&RS=06882641
owner: Lucent Technologies Inc.
number: 06882641
owner_city: Murray Hill
owner_country: US
publication_date: 20000223
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION"],"p":["This application incorporates by reference the disclosure of co-pending application Ser. No. 09\/449,824 filed Nov. 26, 1999, entitled \u201cUser Identification Over Circuit And Packet Switched Networks\u201d, now abandoned. This application is related to application Ser. No. 09\/511,257 filed of even date herewith entitled \u201cQuestionnaire Based Call Routing\u201d, now abandoned. This application is also related to application Ser. No. 09\/511,258 filed of even date herewith entitled \u201cMultimedia Call Routing in an IP Network\u201d.","This invention relates to communications systems and, more particularly to telephony conducted over packet networks.","To provide telephonic communications between computer terminals connected to a packet network, \u201cvoice over IP\u201d (VoIP) software called \u201csoftphone\u201d software is employed that typically conforms to the protocols defined in Recommendation H.323 of the International Telecommunications Union (ITU) entitled \u201cVisual Telephone Systems and Equipment for Local Area Networks which Provide a Non-guaranteed Quality of Service\u201d. The first above-identified copending application improves the reliability of calling party identification in VoIP applications by employing a feature server that obtains \u201ccaller-ID\u201d information from the telephone company rather than relying on the information provided by the caller.","In a packet switched communications system which is intended to serve business customers it is important, not only to identify the caller, but also the reason that the call is being made. This is of special importance where a large number of calls may be simultaneously incoming to a called party who has operators or sales attendants standing by to field hundreds or thousands of calls in a day. To facilitate the handling of such calls it would be advantageous to obtain sufficient information from callers before any call is answered and to provide a display of the call queue with sufficient information to enable any of the call center attendants to determine which calls should be answered first, which calls are from repeat callers and to whom a call should be directed.","In accordance with the principles of the invention, a call center's attendant positions in a packet switched network are provided with a display of the queue of incoming calls in which each call's initial priority status is ascertained from an information gathering form (\u201cIGF\u201d) completed by each caller prior to the call being answered. For example, the nature or purpose of the call is elicited by scanning the IGF returned by a caller which, having been indexed against the caller's directory number, indicates when a previous caller makes a repeat call. The \u201crepeat caller\u201d information is included in the display, together with caller-ID information. The IGF allows a caller to indicate the urgency of his call and this information is also included in the queue display to allow an operator to reposition the call within the queue of incoming calls or to divert the call to another directory number.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1","b":["150","160","150","150","120","130","140","141","170","171","130","160"]},"In prior art VoIP telephony, a call from one subscriber to another would begin with the calling terminal sending a limited bandwidth call control message called an admission request signal (ARQ) to the system gatekeeper. The gatekeeper would either accept or reject the call. If the ARQ is accepted, the gatekeeper confirms its acceptance by returning an Admissions Confirm (ACF) call control message, followed by the gatekeeper providing the calling terminal with the called terminal's IP address. This is sufficient for the network to establish an end-to-end connection between the calling and called terminals over which the bandwidth is limited only by the capacity of the network.","In accordance with an aspect of our invention the feature server employs a mixture of different protocol messages having different bandwidth capabilities before an end-to-end connection is established between the caller and the called party. In  the paths through IP network  labeled \u201cA\u201d may advantageously carry the bandlimited H.323 protocol messages used to effect VoIP service. Paths labeled \u201cB\u201d carry messages that are beyond the capabilities of the current version of the H.323 protocol and will be referred-to hereafter as out-of-band (OOB) messages. Among other things, the OOB messages carry the bandwidth intense multimedia enabled IGFs created by subscribers and which are stored in feature server  to be sent to a calling party even before the call is answered. Later, when a calling party completes the IGF, it is sent in an OOB message to an operator and may be viewed before the operator is required to answer the call.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 2","i":["a ","n"],"b":["140","141","1","141","1000","160","160"]},"In response to call setup message , feature server  sends an OOB \u201cqueue status message\u201d  to all of the called subscriber's operator terminals - through -. The queue status message causes the Call Queue Screen, , the Queue Operation Menu, , and the Queue Position Control screen, , to appear at each of terminals - through -. The operator at terminal -, for example, may select one of the calls in the Call Queue screen by using a mouse to direct the cursor to the row in which the particular call is displayed and then \u201cclick\u201d the mouse button. The operator may then select one of the \u201cradio\u201d keys in the Queue Operations Menu, to control the disposition of the call.","If an operator at terminal - selects radio key  in , terminal - transmits an \u201canswer call\u201d OOB message  () to feature server . Feature server  responds by transmitting to terminal - an H.323 \u201ccall setup\u201d message  which contains the IP address of the caller's softphone terminal . Terminal - responds to call setup message  by returning an H.323 \u201caccept call\u201d message  to feature server  which contains the IP address of terminal -. Feature server responds by sending an exact copy  of H.323 \u201caccept call\u201d message  to terminal . Since terminal  now has the IP address of what it believes to be the \u201ccalled party\u201d, terminal  sets up a direct two-way voice path  in IP network  to terminal  as if this were a prior art VoIP call.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 2","FIG. 4","FIG. 4"],"i":["c ","a","b","n "],"b":["141","1","4220","4100","141","1040","160","160","162","141","1","141","162","163","1045","140"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2","i":"d ","b":["140","1050","160","141","1055"]},"To better understand how the feature server accomplishes the above-described functions, reference will now be made to which is an overview of the call processing performed by the feature server. At  the feature server determines the nature of the message it receives. If the message is an H.323 message the flow moves to step  where the message is parsed and at  a determination is made as to whether the message pertains to an existing call (i.e. there is a call reference to the message in the queue) or is a new call such as an H.323 setup message. If the message pertains to a new call, the flow moves to Add to Queue  (which is the queue positioning routine explained in ) Briefly, upon insertion of a call in the call queue a unique call reference value (i.e. a call handle, e.g., \u201cCaller=12345\u201d) is created which uniquely identifies the call within the queue. All references to calls in the queue are based on this handle.","After the call handle is assigned, the flow continues to step  where the unique value is assigned to a variable that is then input to the state machine for message processing, . In , the state machine determines what action should be taken for any particular message. Since this system uses both H.323 messages and OOB messages which may be intermixed, the state machine determines in regards to the call processing message flows the next message to be transmitted and to whom it is to be transmitted. For example, when an H.323 setup message arrives at the feature server, the call is placed in a queue and no further messages are generated until the call is taken by an operator. It is only after the feature server receives an OOB message from the operator that the H.323 message is forwarded to that operator. After the state machine determines the next message to be processed, step  determines if it is an OOB message such as \u201cSend_IGF\u201d to the calling party. If it is, the OOB message is processed. If the operator is to be informed of the action taken, for example, an update to the queue display based on the action just taken, that is determined in . The queue display would indicate that an IGF had been transmitted to the caller. The transmission of the IGF to the caller is performed at . If further updates need to occur on the queue showing the completion of the processing of the OOB or H.323 message, it would be so updated at . The routine then exits at .","If an H.323 message rather than an OOB message is detected in , the appropriate H.323 message is transmitted at . As with the OOB messages, the queue would be updated appropriately in  and the routine would exit in .","Returning to the test for existing call in , if the call is an existing call, the call handle would be identified in  and the previously described steps of flowing through the state machine processing would occur.","If step  determines that the incoming message is an OOB message, for example, an http command from the operator or the submittal of a complete IGF from a caller, the OOB message would be parsed in . If the message pertains to an existing call, the logic flows to \u201cGet Call Handle from Queue\u201d in . The flow from this point would continue as was previously described. An example of such a message (hereinafter to be more fully described) would be the reciept of an \u201cAnswer Call\u201d message such as:\n\n","If the message was received from the \u201cOutside\u201d as shown in , the message will likely be the submittal of an IGF, a reconnect, or a request to work \u201cOffline\u201d. It could also be the receipt of an email from the calling party. At this point, the message is first parsed to see if it is an email in . If it is, the email is simply directed to the appropriate mail box in  and the routine exits at . If it is not an email, it is assumed to be an IGF message (or a complete IGF form). This is message is parsed in IGF_Received and is described in . This routine will attempt to prioritize as well as automatically direct the call for the call queue. Various parameters for the call queue are set within this routine. On return from this routine, the logic branches from  to the on-page connector at  where the logic resumes at  which is Add to Queue (Queue_positioning). This routine will be described in FIG. . The logic opens the unique call handle in  and flows to the state machine  and subsequent previously explained steps. In  Feature Parsing and processing occurs for non-call related functions. An example of this would be the request of a customer database record for a non-active call (i.e. a call not in the call queue). An example would be an http message to the feature server for a customer record look-up for a \u201cCall-Me-Back\u201d request. Such processing is well understood and is not explained here. The program would exit at  after such processing took place.","Referring now to the steps for formatting the IGF are shown. At step  a check is made to determine if the IGF relates to a previous call. At steps  through  stored information pertaining to the caller who had previously called the subscriber is retrieved from memory and entered into local variables to be formatted in step  for insertion into appropriate fields of the IGF to be displayed to the caller. It should be further noted here that the variable names referenced are the variable names, which are user defined in the creation of the IGF. The use of these variables is discussed in the creation of the IFG as is depicted in . As an example to clarify this, in  the stored name of the caller is assigned to the variable$Name. This same variable appears in  of . Normally, this information would be manually entered from a keyboard by the calling party. In this case, the calling party has been identified and their name as it appears on their internally stored record would be substituted in this field. The location of the display of this information has been previously defined in the IGF creation. Thus, when the form is transmitted to the calling party, the known fields are already filled in. The other variables shown in , , and  also have corresponding entries in  and . If the IGF is to be formatted for a caller who had not before called the subscriber, the local variables for name , phone number , vCard structure , multimedia banner object  are assigned null values. Thus, these fields are blank when displayed to the calling party. The calling party could then fill in the fields appropriately. If the caller was a previous caller, the IGF would be formatted with this known data in . If it was not a previous caller, the IGF would be formatted with the null data in . The formatted form is returned to the invoking routine in .",{"@attributes":{"id":"p-0045","num":"0045"},"figref":"FIG. 3","i":"c","b":["1","3100","3105","3110","3115","3120","3125","3130"]},"If the required fields were all validated at step , the calling party's entry in the call queue is marked as IGF_COMPLETE in . At step , the completed IGF is scanned for the appearance of key words to determine the reason for the call. For example, such pre-arranged key words as Order, \u201cCustomer Service\u201d, Emergency, etc. can be parsed from the text entered by the caller. At step , if key words are found, they are entered into the queue status fields (). At step  the caller-ID information from the original call setup message is used to determine whether the caller has a record in the data base. For example, whether the caller is a customer and the status of the customer's account would be useful information for the operator to see in order to properly route the call. If a record is found at step , an active hyperlink to that record is created and added to the queue status field at step . When the called subscriber's operator \u201cdouble clicks\u201d on the active hyperlink in the queue status field the information from the record appears in a pop-up display. The information is transmitted from the server to the operator using well-known web techniques such as hypertext transfer protocol (http). Secure transfers can be used for sensitive applications such as e-commerce. At step , an advertisement (such as an \u201cad-banner\u201d) can selected for display to the caller based on the record information associated with the calling party. For example, if the call is an e-commerce order, the ad-banner can be set to display information about an \u201con-sale\u201d item or a new product or service offered by the called subscriber.","The call flow continues in - at . If the call is an e-commerce call as determined in , the calling party's credit history is looked-up in a database in . This may be a local database lookup or may be a search to an external credit organization\u2014such as in the case as when the calling party has entered a credit card number. The response to this query is inserted into the calling party's record in . The call flow then proceeds to step  to determine whether the caller's IGF contained any critical keywords such as \u201cPlace Order\u201d or \u201cCustomer Service\u201d. If so, processing proceeds to step  where the call may be repositioned in the queue in accordance with the procedure shown in -, to be described hereinafter. Processing continues at  where a queue priority flag is set in the status field column  () for the call. In call center, for example, the priority flag can indicate the nature of the priority, e.g., for customer service, callback, etc. At step  the Urgent Call box  () of the IGF is read. If checked, it means that the caller wished to indicate that the call is urgent. Of course, in actual practice, the box could be checked by anyone. An optional system parameter (not shown) in the caller's stored record could be set so that the \u201curgent call\u201d box of a particularly troublesome caller's IGF would be ignored. At step  if the urgent call box has been checked, the call is elevated in the queue. The Queue_Status_Field_Flag is set at step  to cause the call to be shown as an Urgent Call in the Call Status column  in . At step , a test is performed to see if a specific DN at the called subscriber's DN was specified in the IGF. If it was, the logic flows to  where the call will remain in queue but will be marked for specific person at the called subscriber's premises and the routine is exited at .","If a specific person's DN was not found at step , the text entered into the IGF will be scanned at step  to see if a specific name such as \u201cSidney\u201d or the word \u201cMarketing\u201d or \u201cSales\u201d appears. If such a name is found, processing proceeds to step  where an attempt would be made to look up a DN associated with the detected word text. If a corresponding DN is found, the call remains in queue, is marked to indicate the appropriate called party at step  and the routine exits at . If a DN or called party were not found, the call remains in queue for the next available operator to answer.","The Call Queue Screen , includes a number of useful fields. The time and date of the incoming call is shown at  while caller-ID information provided by an H.233 message is shown at . The current position of a call in the incoming queue in relation to other calls is shown at . At  an indication appears to inform the operator that the caller is a return caller. The return caller indication results from the caller selecting the \u201creconnect\u201d option  () in the IGF. The status of of the IGF for each call at  indicates the time elapsing since the IGF was sent to the caller and whether the IGF has been completed by the caller. If an individual was specified in the IGF, the corresponding name or DN extension is indicated at . If the named extension is busy, the call is automatically placed in a queue for the specified DN. The purpose of the call (indicated in the IGF) is displayed at . Finally, the \u201ctime-in-queue\u201d is displayed at . Advantageously, this time may be stored in a hidden field of the IGF which is read when the caller returns on a repeat call so that the call may be advanced in the call queue. For example, a person who waits 15 minutes for assistance and then \u201changs up\u201d will be advanced by 15 minutes in the call queue on their next call. Once the call is accepted, the time in queue counter is cleared.","As mentioned above, the operator takes action by selecting an entry in the Call Queue Screen, and selecting one of the radio buttons in the Queue Operations Menu, . For example, upon selecting \u201cAnswer Call\u201d,  the following http message is transmitted:\n\n","Other menu options include \u201cTerminate Call\u201d  which, when selected, transmits the message:\n\n","The menu option \u201cTransfer Call to Voice Mail\u201d  is an example of a call transfer in which a message, such as the following, would be transmitted from the operator's terminal to the feature server:\n\n","Changes may have occurred in the queue between the time the queue position was selected and the time it was updated. However, the queue is prevented from making any changes during this period so that only one operator at a time can be acting on the queue. This locking time is minimal and should be transparent to the operator(s). The queue entries maintain the frozen queue position flag. However, this flag is only used by the pre-processing program as was the use of the jog-wheel in . The \u201creposition\u201d command does not refer to the frozen queue position flag. Handling the frozen flag outside the queue with pre-processing minimizes the time the queue is in update and is thus locked out against other operator interaction.","A unique feature of the illustrative embodiment is the ability to \u201cfreeze\u201d a call in a particular call queue position so that a call will not inadvertently be put into a lower-priority call queue position. Thus, adjusting the queue in order to place a particular call higher up in the queue (i.e. by rotating the \u201cjog-wheel\u201d  clock-wise) the next higher call position will not automatically be lowered, as indicated by \u201cFrozen Entry Limit\u201d  displayed on the screen. When this happens, the \u201cAdjusted Queue Position\u201d will not advance any further. The operator may over-ride the frozen entry by depressing the \u201cOverride Frozen Limit\u201d button . After that operation, the queue may be advanced or reduced in priority for the specified caller for the duration of the GUI window. In actual practice, only certain operators may be given administrative permission to override the frozen entry limit.","An operator may manually transmit an IGF to the calling party by selecting menu item  or retrieve a still-open IGF from a calling party by selecting  in the event the caller has not completed the IGF. To manually transmit a particular IGG to the calling party, the following message is transmitted to the feature server:\n\n","When an IGF is retrieved, the information is stored on the feature server and a copy of the IGF is displayable to the operator. If an operator answers a call and the calling party had already submitted in IGF to the system, the stored IFG can be viewed by selecting the \u201cView Submitted IFG from Calling Party\u201d . If a caller's IGF has no information warranting that it be stored permanently in the feature server, the operator may select \u201cDelete IGF\u201d . In this case, a \u201cDELETE_IGF\u201d message would be sent to the feature server and the IGF form would be deleted from the database. Likewise, if the operator has annotated the IGF with additional information, the operator may elect to store it by selecting the \u201cStore IGF to Database\u201d option . If the calling party is a customer, there may exist a more detailed customer \u201cfile\u201d which is stored separately from the described IGF and would be retrieved by use of the \u201cRetrieve Database on Calling Party\u201d. This would be accomplished by transmitting a \u201cRetrieve_database\u201d message to the feature server. For example, in a web browser based system using active server pages, the message from the called subscriber or operator to the feature server would be formatted as:\n\n",{"@attributes":{"id":"p-0057","num":"0064"},"figref":"FIGS. 5","i":["a","c "],"b":["5","5020","5020","5030","5040","5050","5060","5070"]},{"@attributes":{"id":"p-0058","num":"0065"},"figref":["FIG. 5","FIGS. 6 and 7","FIG. 7-3"],"i":"b ","b":["5010","5010","5030","5095","5030","5080"]},"The $time_in_queue field  is of special importance. This field is advantageously hidden from view in the IGF and stores the time and position of the caller in the queue so that this information will be available to the feature server when and if the caller should call back.","Other static fields which are defined on the screen are the Submit button  which allows the caller to transmit a completed IGF to the feature server; a Cancel button  which cancels the IGF and a Work Offline button  which tears down the current H.323 call but allows the caller the option to \u201cReconnect\u201d later at the same or higher queue position. The \u201cCall Me Back\u201d button , will be discussed below with the queuing process which causes the current H.323 call to terminate but which allows the call to remain in the queue with a request that the called subscriber return the call at a later time. Call-back requests are placed at the bottom of the call queue, as is described below.",{"@attributes":{"id":"p-0061","num":"0068"},"figref":"FIG. 5","i":"c ","b":["5120","5100"]},"As mentioned, storing a caller's time in queue in the IGF facilitates changing the queue position of a follow-up call made by the caller. This information may be stored in the IGF by the feature server inserting a CGI script in a format that is not readily visible to the calling party or by inserting a cookie containing multiple parameters in the calling party's browser. However, because some browsers are programmed to reject cookies, the stored CGI script is preferrable. Referring to , the CGI script is generated by Build_time_in_queue routine which begins at . The current time is retrieved and stored in a local variable at . At step , Get_TimeIn_Queue the time that the current referenced caller has spent in the queue is stored in a local variable. At step  the position of the selected call in the queue in relation to other callers is stored in a local variable. The first step in building the CGI script string is to copy the string \u201c<INPUT NAME=\u201dpassword\u201cVALUE=\u201d to a buffer as shown in step . At , the current time in hours is concatenated to this string followed by an \u201c:\u201d. Next, at , the current minutes followed by an \u201c:\u201d is concatenated to the string. At  the current time seconds followed by an \u201c:\u201d is concatenated to the string. Similar steps are taken in the next three steps to concatenate month, day, and year to the CGI script string, as shown in , , and  respectively. The current queue position of the call is then concatenated to the string and delimited with a \u201c:\u201d as shown in . Finally the hours, minutes, and seconds in the queue are concatenated to the string as shown in , , and  respectively. When the CGI strings are completed they are stored in the caller's IGF ready to be parsed by the feature server when the caller makes a return call.",{"@attributes":{"id":"p-0063","num":"0070"},"figref":["FIG. 7","FIG. 7-6","FIG. 4","FIG. 3"],"i":["c","c"],"b":["2","7"]},"At  a new call is detected and handed off to the New_Call_Handling routine  whose steps are detailed in . If this is not a new call, step  determines whether this is a priority call and, if so, hands off control to the priority call processing  whose steps are detailed in . If this is not a priority call, step  determines whether this is an urgent call, as indicated by the caller having checked the \u201cUrgent Call\u201d box  in the IGF, . If so, control is passed to \u201cUrgent Call Handling\u201d  whose steps are detailed in . If this is not an urgent call, step  determines whether this is a reconnect call, as indicated by the caller having checked the \u201cReconnect\u201d box  in the IGF. If so, control is passed to \u201cReconnect Call Handling\u201d  whose steps are detailed in . If this is not a reconnect call, step  determines if this is a call me back call, as indicated by the caller having checked the \u201cCall me back\u201d box  in the IGF. If so, control is passed to \u201cCall Me In Back Handling\u201d  whose steps are detailed in . If this is not a call me back call, the handling of the call continues at .","Referring now to , the steps for handling a new call are shown. At  a pointer is set to the bottom of the call waiting queue. At  the pointer is set to the top of the call me back queue. Step  determines whether the call me back pointer is above the bottom of the queue. If so, the call is inserted above the position ascertained in step . If the call me back pointer is at the bottom of the queue, step  inserts the call at the bottom of the queue and the pointer is returned to its default position.","In  the steps for handling a priority call are shown. At  a first pointer, ptr1, is set to the first \u201cnon-frozen\u201d queue position. (Frozen queue positions are described in .) At  a second pointer, ptr2, is set to point to the first call of the same priority having a queue position lower than that of the first pointer. At , the call pointer is set to the position of the current call in the queue. Step  then determines whether the call pointer set in step  is below that of ptr . If so, the call pointer is set in step  to the position indicated by ptr  and in step  the call pointer is set to its default position.","In  the steps for handling an urgent call are shown. At  a first pointer, ptr1, is set to the first \u201cnon-frozen\u201d queue position. (Frozen queue positions are described in .) At  a second pointer, ptr2, is set to point to the first call of the same priority having a queue position lower than that of the first pointer. At , the call pointer is set to the position of the current call in the queue. Step  then determines whether the call pointer set in step  is below that of ptr . If so, the call pointer is set to the position indicated by ptr  in step  and at step  the call pointer is set to its default position.","In  the steps for handling a reconnect call are shown. At  a first pointer, ptr_old, is set to the queue position that the call had on the previous call. This is obtained from field , of the IGF. At  a second pointer, ptr1, is set to the first \u201cnon-frozen\u201d queue position that is above the position of ptr_old. Step  determines whether there is space available at the place indicated by ptr1. If so, the call pointer is set to the value of ptr1 in step  and control passes to step . Step  sets the call pointer to point to the first non-frozen queue position that is below the old pointer. Step  inserts the call at the position indicated by the call pointer and in step  the call pointer is set to its default position.","In  the steps for handling the call me back call are shown. At , the call pointer pointing to the cal in the lowest queue position is found. At  the queue position is set to the position of call pointer found in step . In step  the call is added to the queue based on the position of the pointer indicated by step  and at step , the pointer is returned to its default position.",{"@attributes":{"id":"p-0070","num":"0077"},"figref":"FIG. 7-6","b":["7600","7610","7620","7630"]},"What has been described is deemed to be illustrative of the principles of the invention. It should be apparent that numerous modifications may be made such, for example, as including the functionalities attributed to feature server  in the same physical apparatus as gateway , and vice versa. It should also be understood that, instead of using IP protocol, ATM, Frame Relay, SONET, or other communications protocols may be used. Instead of the conventional softphone H.323 protocol, other protocols such as SIP or MGCP may be used. Furthermore, those skilled in the art will realize that H.323 can be extended, or a new protocol can be created to encompass both the standard H.323 messages and the additional messages described herein. With respect to the OOB messages, instead of HTTP, file handling across the packet network may be handled by any of several well-known techniques such as TCP\/IP, Common Gateway Interface (CGI), Hyper Text Markup Language (HTML), Dynamic HTML (DHTML), JAVA, Microsoft's VB script, Java Script, Microsoft's Internet Server Application Programming Interface (ISAPI), or Microsoft's Active Server Pages (ASP) enabled web pages which communicate with a server over HTTP may also be used with equally advantageous results. Further and other modifications may be made by those skilled in the art without, however, departing from the spirit and scope."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other features of the invention may become more apparent from a reading of the ensuing description together with the drawing, in which:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2","i":"a "},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2","i":"b "},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2","i":"c "},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2","i":"d "},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3","i":"a "},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3","i":"b "},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 3","i":["c","c"],"b":["1","3","2"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4","i":"a "},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4","i":"b "},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4","i":"c "},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5","i":"a "},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5","i":"b "},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5","i":"c "},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 7-1"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7-2"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7-3"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7-4"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 7-5"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 7-6"}]},"DETDESC":[{},{}]}
