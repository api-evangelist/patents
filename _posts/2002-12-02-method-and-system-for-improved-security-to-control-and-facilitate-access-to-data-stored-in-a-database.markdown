---
title: Method and system for improved security to control and facilitate access to data stored in a database
abstract: A project data service (“PDS”) shields the database from direct client access by requiring all data requests made by a client to go through the PDS, thereby reducing the risk of losing or corrupting data and limiting inconsistencies caused by third-party add-on applications accessing data in the database. In order to access data stored in a database, a client typically must send a request through the PDS, which can determine if the client has access to the requested data. Then PDS typically retrieves the data from the database and passes the data to the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07139758&OS=07139758&RS=07139758
owner: Microsoft Corporation
number: 07139758
owner_city: Redmond
owner_country: US
publication_date: 20021202
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE EXEMPLARY EMBODIMENTS"],"p":["The present invention relates to the field of project management. In particular, the present invention supports secure access to data, such as project management data, in a database, thereby allowing certain clients to view the data in the database, while restricting the ability of other clients to modify, remove, and add data.","The occurrence of low unemployment rates coupled with high levels of business growth in the late 1990's forced companies in all industries to do more work with fewer resources. The need to properly understand and efficiently allocate project tasks to available resources led to increased usage of project management applications. Prior project management applications were designed to operate in a desktop environment. While prior project management applications had the ability to access centrally located databases, the application's primary design called for stand-alone operations, where a single project manager could monitor only his projects and his resources from his desktop computer. A need arose for a project management application designed for enterprise access, whereby any project manager within an enterprise could place a project plan and the resources to be used on a central database so that other project managers and enterprise managers could view projects on an enterprise global basis.","Clients routinely access application programs containing sensitive data. The application programs can comprise project management applications having project scheduling data, resource scheduling data, and resource experience data. The application programs can operate on a desktop computer, with data limited to the data available in a desktop system. Alternatively, the application programs can operate on an enterprise-wide level, with data available from the enterprise system through a central database.","For example, a large organization can have multiple projects in progress at any one point in time. Each project can use multiple resources to achieve the goals of the project. Examples of resources can include employee labor, machinery, and facilities. When a project manager begins a new project, the project manager typically wants to know the current allocation of resources to determine which resources have the time and experience necessary to accomplish the project manager's project. If the project manager accesses the desktop version of the project management application, the project manager typically can only view his own projects and how he has currently allocated resources. The project manager typically cannot view other projects within the same enterprise or how all the resources in the enterprise are allocated among all the projects in the enterprise.","If the project manager accesses the enterprise version of the project management application, the project manager can typically view not only his projects but also projects managed by other project managers. The project manager also can typically view how resources throughout the enterprise are allocated amongst the projects. Having an enterprise view of the project and resource allocation allows a project manager to make a more educated decision on when his project can be completed, what the best resources are for his project, and what resources are available for his project throughout the enterprise.","Prior project management applications either allowed an application user direct access to information stored in the database or required the input of a connection string before access to the database was allowed. Allowing direct access to the database placed the stored data at risk of being lost or modified by any person with access to the system. Requiring the application user to supply a connection string before viewing the database provided improved security of the data in the database. However, management applications requiring a connection string were still prone to being hacked, thereby allowing unfettered access to the database and placing the stored data at risk. A need arose for a project management application with an improved security architecture to control and facilitate access to enterprise project data stored in the database.","Furthermore, third-party application providers can now create specific add-on applications for the project management application which extend the overall functionality of the project management application. However, the inconsistencies of each third-party application's access methods to the data in the database of the project management application can reduce the overall effectiveness of the project management application and place the stored data in the database at risk. Providing a standard access method for add-on applications can increase overall effectiveness of the project management application, reduce the risk of losing the stored data, and provide incentive to third-party add-on application providers to build upon the current architecture of the project management application.","A project data service (PDS) shields the database from direct client access by requiring data requests made by a client to go through the PDS, thereby reducing the risk of losing or corrupting data and limiting inconsistencies caused by third-party add-on applications accessing data in the database. In order to access data stored in a database, a client typically must send a request through the PDS, which can determine if the client has access to the requested data. Based on authorized access, the PDS typically retrieves the data from the database and passes the data to the client.","The inventive methods and system disclosed herein provide a means for improved security to control and facilitate access to project management data stored in a database. Thus, one aspect of the present invention is to require a client, wishing to access project management data in the database, to send all requests for the data in the database through a middle-tier component. The middle-tier component can then determine the type and range of project management data the client is permitted to access from the database, record that the client is accessing the data, retrieve the data from the database, and send the data to the requesting client.","The middle-tier component typically comprises a PDS. The PDS is typically implemented by a middle-tier, data access, internet server application programming interface component object model. The PDS can receive requests for data from a variety of clients using a multitude of applications. The applications used to make requests on the PDS typically include web access programs, project management applications and third-party applications. Third-party applications are typically add-on applications to the project management application and attempt to improve the functionality or scalability of the project management application. Requests can be made on the PDS using a multitude of protocols, including hypertext transfer protocol and simple object access protocol. Furthermore, the PDS can receive multiple method requests from the client. While many of the method requests relate to accessing project data, methods relating to system administration and client access are also recognized and operated on by the PDS.","When a client requests access to a file, the method request typically includes the client identification and the identity of the file requested. The client can also provide a database identification number in connection with the request. The database identification number signals to the PDS where the requested file is located, including the server and the database in which the file resides. The database identification number typically takes the form of a structured query language process identification (SPID). The PDS accepts the information provided by the request and compares it to information stored in the database to determine if the client has permission to access the requested file or method. If the client has permission to access the requested file or method, the PDS stores information related to the client in the database. The information stored in the database typically includes the client identification, the client password, the database identification number, and the file or method requested. Once the information is stored, the PDS typically accesses the database, retrieves the requested file, and sends the file to the client in response to the request.","The present invention supports a computer-implemented method for providing a secure access to a database and can be more readily understood by reference to system  of .  is a block diagram illustrating a project management computer system  constructed in accordance with an exemplary embodiment of the present invention. The exemplary project management system  comprises a client access terminal  including a web access program , a project management application , or a third-party application , and a server  including a web server  and a database . The web server  comprises a PDS , active server pages , a server security object , a session manager , a moniker , and a server cookie storage area . The database  comprises project management tables , server web tables , security tables , resource views , and project views .","The client access terminal  is communicably attached via a computer network to the server . The client access terminal  typically provides a client with a means for communicating with the server , web server , the active server pages (ASP pages) , the server security object (SSO) , and project management tables . For example, the client access terminal  can transmit information to the ASP pages , including method requests, function requests, cookies, and SQL process identifications (SPID). The client access terminal  can receive information from the project management tables , including a SPID associated with the database . The client access terminal  can also receive information from the server security object , such as a cookie.","The web access program  is typically stored in a memory storage area of the client access terminal  and can communicate with the server  using a selected communication protocol. In one exemplary embodiment, the web access program  communicates with the server  using a hypertext transfer protocol (HTTP). The web access program  can be implemented by an application which enables a user to access the internet via a client access terminal  such as the INTERNET EXPLORER or NETSCAPE browser programs.","The project management application  is typically stored in a memory storage area of the client access terminal . The project management application  can communicate with the server  using a selected communication protocol. In one exemplary embodiment, the project management application  communicates with the server  using the HTTP protocol.","The third-party application  is typically stored in a memory storage area of the client access terminal . In one exemplary embodiment, the third-party application  is an add-on application to the project management application  which can extend or enhance the capabilities of the project management application . The third party application  can communicate with the server  using a selected communication protocol, such as the HTTP protocol or the simple object access protocol (SOAP).","The server  is communicably attached via a computer network to the client access terminal . The server  typically represents a computer or program that responds to commands from a client through a client access terminal .","The web server  is communicably attached via a computer network to the client access terminal  and the database . The web server  typically comprises active server page and component object model (COM) components including, but not limited to the PDS , active server page , a server security object , a session manager , a moniker , and a server cookie storage area .","The PDS  is communicably attached via a computer network to the ASP page , the moniker , the security tables , the server web tables , and the project management tables . The PDS  receives method and function requests from the ASP page . The PDS  also receives a session verification, a database connection information and a cookie from the moniker . The PDS  transmits and receives information related to a file's status from the project management tables  and a client's data from the security tables  in the database . The PDS  typically represents a middle-tier data access internet server application programming interface dynamic link library COM component for data. The PDS  typically acts as a security layer between the client and the data in the database , requiring the client to access the data through the PDS .","The ASP page  is communicably attached via a computer network to the client access terminal , PDS , server security object , and moniker . The ASP page  typically represents active server pages comprising text files having text, HTML tags, and commands written in a scripting language. The ASP page  can complete script commands, generate an HTML document and send the document to the client at the client access terminal .","The server security object (SSO)  is communicably attached via a computer network to the client access terminal , the ASP page , the server cookie storage area , and the server web tables . The SSO  typically comprises a COM component in the web server .","The session manager  is communicably attached via a computer network to the moniker , and the server cookie storage area . The session manager  typically manages sessions on the web server , stores configuration information, and provides remote administration support. The session manager  can comprise a COM component in the web server .","The moniker  is communicably attached via a computer network to the PDS , the ASP page , and the session manager . The moniker  typically comprises a COM object that refers to a specific instance of another object in the web server .","The server cookie storage area  is communicably attached via a computer network to the session manager . The server cookie storage area  typically receives a request for and transmits a cookie to the SSO  and the session manager . The server cookie storage area  can be implemented by a memory storage area from which cookies are retrieved in the web server .","The database  is communicably attached via a computer network to the server , the web server , and the client access terminal . The database  typically comprises the project management tables , the security tables , and the server web tables . In one exemplary embodiment, the database  is a structured query language database server.","The project management tables  are communicably attached via a computer network to the PDS , the security tables , and the client access terminal . The project management tables  can comprise multiple data tables, including project views  and resource views . In one exemplary embodiment, the project views  and resource views  contain database files in both read-only and read\/write versions. In another exemplary embodiment, the project views  are database files comprising data on projects occurring within an enterprise or corporation. The resource views  typically comprise database files on the resources within the enterprise or corporation. For example, resources can include employees, contractors, machinery, and floor space.","The security tables  are communicably attached via a computer network to the PDS . The security tables  typically comprise multiple tables containing data fields including, but not limited to a project ID, a resource ID, a SPID, and flags for determining whether the client is granted read-only access or read\/write access. In one exemplary embodiment, the security tables  comprise a project security table and a resource security table.","The server web tables  are communicably attached via a computer network to the SSO . The server web tables  comprise web tables typically containing client access identification (ID) information including, but not limited to the client name, the client password, and a plurality of files and versions the client is permitted to access.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIGS. 2\u201311","FIG. 2","FIG. 1"],"b":["200","100"]},"Now referring to , the exemplary method  begins at the START step and proceeds to step , in which a client logs into the server  from the client access terminal . The client access terminal , which typically represents a point from which the client can access the server , comprises the project management application , the web access program , or the third party application . Both the web access program  and the project management application  typically access the server  through an HTTP post method of communication. In contrast, the third party application  can typically access the server  through either an HTTP post method of communication or a SOAP protocol method of communication.","In step , the client requests database log-in from the client access terminal  to the server . In step , the client directly connects to the database  from a client access terminal . Direct connection to the database  is made by the client to gather a database identification number. The database identification number signals to the PDS  which database connection the client will utilize to access the requested file. The database identification number typically takes the form of a structured query language process identification (SPID). The database  can be one of numerous databases communicably attached to the server  or residing within the server . In step , the client makes a request to the PDS  for access to a file via the client access terminal . The file typically represents a project file or a resource file stored in the project management tables  of the database .","In step , the client uses the database connection, achieved in step , to access files, such as the resource views  and project views , based on access granted by the PDS . The resource views  and project views  are typically implemented by both read only and read\/write files and are stored in the project management tables  of the database . In step , the client completes access to the project management tables  via use of the client access terminal . The method  then terminates at the END step.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 3","FIG. 2","FIGS. 1"],"b":["110","205","2","3","205","110","305","102","110","102","110","310","305","102","118"]},"In step , the ASP page  sends the log-in request to the server security object . The server security object  typically represents a COM component of the web server  housed in the server . The ASP page  typically sends the log-in request to the server security object  to determine if the client is recognized by the server . To determine if the client is recognized by the server , the server security object  compares the log-in request to data stored in the server web tables  in step . In one exemplary embodiment, the data stored in the server web tables  includes a client name and a list of files the client has permission to access.","In step , an inquiry is conducted to determine if the log-in request received by the server security object  is recognized by the server web tables . If so, the \u201cYES\u201d branch is followed to step . Otherwise, the \u201cNO\u201d branch is followed to step . Based on the determination by the server security object  that the log-in request is recognized, the server web tables  send a signal to the SSO  that the log-in request is recognized in step . In step , the SSO  sends a signal to the ASP page  authorizing the log-in request. The SSO  creates a session on the server  in step . The creation of the session can be implemented by providing the client with a method for interacting with the server  for more than log-in purposes, such as requesting and modifying data stored in the database . In step , the ASP page  places a cookie on the client access terminal . In one exemplary embodiment, the cookie represents a text file placed on the client access terminal . The cookie typically serves as an identification card unique to the client. The cookie can be retrieved by the SSO  from the server cookie storage area  and then sent to the client access terminal  through the ASP page . In step , the ASP page  sends a reply to the client at the client access terminal  informing the client that access to the server is granted. The method  then proceeds to step , where the client requests an opportunity to log-in to the database .","Based on the determination by the server security object  that the log-in request is not recognized, the server web tables  typically sends a signal to the SSO  that the log-in request is not recognized in step . A log-in request is typically not recognized when the information provided in the log-in request does not match any of the data stored in the server web tables . In step , the SSO  sends a signal to the ASP page  denying the client's log-in request. The ASP page  sends a reply to the client access terminal  informing the client that access to the server  is denied in step . When access to the server  is denied, the client typically can not retrieve any additional information or further interact with the server . If the client is denied access to the server , the method  then terminates at the END step.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 4","FIG. 2","FIGS. 1"],"b":["207","2","4","207","405","410","405","102","118","116"]},"In step , the PDS  sends a signal to the SSO  to determine if a session was created on the server , as completed by step  of . In step , the PDS  processes the request for database log-in information. The processing step  can be implemented by parsing the request into functional parts, determining a method requested, and executing the method requested. In step , the PDS  determines that the client is requesting database log-in information. The PDS  goes to the registry of the operating system for the server  and gathers the database login information in step . For example, the database log-in information can comprise the server name, name of the database, the client name, and the client password. The PDS  sends the database log-in information to the client at the client access terminal  in step .","In step , the client makes a request to the PDS  to open a file in the project management tables  from the client access terminal . The client access terminal  sends the request through the ASP page  to the PDS  for a file status in step . The file status request can comprise the list of files the client has access to, the status of the accessible files and a determination if the files are currently checked-out such as when the file is opened by another client prior to the request and the other client is still viewing the file when the request is made. In step , the PDS  queries the SSO  to determine the files the client has permission to access. In step , the SSO  sends the PDS  a list of files the client has permission to access.","In step , the PDS  queries the database  to determine the status of files the client has permission to access. In the status query the PDS  attempts to determine if the files are checked-out. In step , the database  sends the PDS  the status of the files the client has permission to access, as well as if those files are currently checked-out. In step , the PDS  transforms the list of files into a computer-readable format, such as an XML document. The PDS  sends the computer-readable format of the list of files through the ASP page  to the client access terminal  in step . In step , the client selects a file, at the client access terminal , from the list of files the client has permission to access. The method  then proceeds to step .",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 5","FIG. 4","FIGS. 1"],"b":["116","415","2","4","5","415","116","118","505","510","116","515","116","116","116"]},"In step , the PDS  initiates a switch case statement on the child node of the XML document parsed in step . The switch case statement tests an expression, the child node, against a range of possible matches to methods stored in the PDS . The switch case statement of step  can allow for a determination of the method requested by the client in the XML document. In step , an inquiry is conducted to determine if the PDS  recognizes the method requested. If so, the \u201cYES\u201d branch is followed to step , where the PDS  performs the method requested. The methods that can be requested by a client comprise: project status, project access, project access completed, projects check-out, projects check-in, project delete, project version, version, version create, version delete, version update, resource status, resource access, resource access completed, resource check-out, resource check-in, resource new, resource deactivate, resource activate, resource account modify, resource check, PDS info, update resource availability and cube, check OLAP cube, project view table create, resource view table create, scheduling context, project security table clean, resource security table clean, project clean, permission check, administrative settings, get log-in information, and get initialization data. The process continues to step  ().","If the PDS  does not recognize the method requested, the \u201cNO\u201d branch is followed to step . In step , an inquiry is conducted to determine if one of numerous PDS extensions is registered with the PDS . The PDS extensions are methods created by a third-party to customize the functionality of the project management system. The PDS extension is typically a COM component stored in the web server . If the PDS extension is not registered with the PDS , the \u201cNO\u201d branch is followed to step , where the PDS  sends a message to the client, informing the client that the method requested was not found. The process continues to step  ().","If the PDS extension is registered with the PDS , the \u201cYES\u201d branch is followed to step , where the PDS  makes a connection to one of numerous PDS extensions. In step , the PDS  passes the XML document and the database connection information to the PDS extension. In step , an inquiry is conducted to determine if the one of the plurality of PDS extensions recognizes the method requested. If so, the \u201cYES\u201d branch is followed to step  (). If not, the \u201cNO\u201d branch is followed and the process returns to step  to determine if another PDS extension is registered with the PDS .",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 6","FIG. 2","FIGS. 1","FIG. 2","FIG. 3"],"b":["116","215","2","6","215","605","102","610","210","116","615","116","116","124","110","340"]},"In step , the PDS  processes the request and determines that the client is requesting access to a file. A request to access a file can comprise the name of the file, the version of the file and view mode of the file. The view mode of the file can be either read only or read\/write. In step , the PDS  queries the SSO  to verify that the client has permission to access the file requested. Verification can be implemented by determining if the client has permission to access the requested view mode of the requested version of the requested file.","In step , an inquiry is conducted to determine if the client has permission to access the requested view mode of the requested version of the requested file. The inquiry is typically conducted by the PDS  analyzing information stored in the SSO . If the client does not have permission, the \u201cNO\u201d branch is followed to step , where the SSO  sends a reply to the PDS  stating that the client does not have permission to access the requested view of the requested version of the requested file. The PDS  sends a reply to the client, at the client access terminal , that the client does not have permission to access the requested view of the requested version of the requested file in step . The process continues to the END step.","If the client does have permission, the \u201cYES\u201d branch is followed to step , where the SSO  sends a reply to the PDS  stating that the client has permission to access the requested view of the requested version of the requested file. In step , the PDS  inputs data into the security tables  comprising the view mode, the version, the file, the SPID used by the client, and a mode of access. The mode of access can be the type of access requested by the client access terminal  used by the client to access the server . The process continues to step  ().",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 7","FIG. 2","FIGS. 1"],"b":["116","230","2","7","230","705","102","710","116","415","116"]},"In step , the PDS  queries the SSO  to verify that the client has permission to terminate access to the file requested. The verification typically comprises determining if the client has permission to terminate access to the requested view of the version of the file. In step , the SSO  queries the server web tables  to verify that the client has permission to terminate access to the requested view of the version of the file by comparing the file requested to data stored in the server web tables  relating to files the client has permission to access. In step , an inquiry is conducted to determine if the client has permission to terminate access to the requested view of the version of the file. If not, the \u201cNO\u201d branch is followed to step , where the server web tables  send a signal to the SSO  that the client does not have permission to terminate access to the view of the version of the file requested. For example, if a client had not earlier requested access to the file, the client would not be granted permission to terminate access. The SSO  sends a signal to the PDS  that the client does not have permission to terminate access to the view of the version of the file requested in step . In step , the PDS  sends a reply to the client that the request was denied. The process continues to the END step.","If the client does have permission to terminate access to the file, the \u201cYES\u201d branch is followed to step . In step , the server web tables  send a signal to the SSO  that the client does have permission to terminate access to the view of the version of the file requested. The SSO  sends a signal to the PDS  that the client does have permission to terminate access to the view of the version of the file requested in step . In step , the PDS  deletes the row of data in the security tables  that was stored in the security tables  in step  of . In step , the PDS  sends a reply to the client that access to the file and the database has been terminated. The reply is sent from the PDS  through the ASP page , to the client access terminal . The process continues to the END step.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 8","FIGS. 1","FIG. 2"],"b":["128","116","2","8","215","205","207","210","805","102","118","116","210","116","810","102","118","116","815","820","116","116","120","120","116","138"]},"In step , the PDS  determines if the requested view of the version of the file is already checked-out. The PDS  typically checks the project management tables  to see if the file is checked-out. In step , the PDS  marks the requested view of the version of the file as checked-out in the project management tables . The PDS  sends data to be stored in the security tables  in step . In one exemplary embodiment, the data stored in the security table comprises the view, the version, the file, the SPID sent by the client, and the mode of access.","In step , the client connects to the database  and accesses the requested file from the project management tables . The client downloads the requested file into the local memory of the client access terminal . The file downloaded is typically a read-only view of the file. In one exemplary embodiment the read-only view of the file is downloaded from either the project views  or the resource views  of the project management tables . In step , the client sends a request to terminate access to the file and the database . The request is typically sent from the client access terminal  through the ASP page  to the PDS . In step , the client closes the connection to the database . In step , the client edits the file downloaded in step . In step , the client saves the edited file to the project management tables  of the database . The process continues to the END step.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 9","FIGS. 1"],"b":["865","128","116","2","8","9","865","905","910","102","102","915","128","102","128","920","130","128","925","1021","118","116","128"]},"In step , the client sends the SPID to the PDS . The client typically inputs the SPID retrieved in step  into the client access terminal . The SPID is then sent from the client access terminal  through the ASP page  to the PDS . The PDS  determines if the client has permission to edit the requested file in step . To determine if the client has permission, the PDS  sends the data received from the client to the SSO . The SSO  can query the server web tables  to determine if the client has permission. Then, the SSO  sends a signal back to the PDS  with a determination of the client's permission to edit the requested file. In step , the PDS  determines if the requested file is checked-out. The determination typically occurs with the PDS  querying the database  to see if the requested file is marked as checked-out. The PDS  typically queries the project management tables  to determine if the requested file is checked-out.","In step , the PDS  inputs data into the security tables  including the view, the version, the file, the SPID used by the client, and a mode of access. The process continues to step , where the client saves the file. The client typically sends the file from the client access terminal  to the project views  which transfer the data through to the project management tables  where the file is stored. The saved file can represent either a new file or an edited file previously stored in the database . The saved file is typically stored in the project views  or the resource views . In step , the client sends a request to terminate access to the file and the database .","In step , the PDS  determines if the client has permission to check-in the requested file. To determine if the client has permission, the PDS  sends the data received from the client to the SSO . The SSO  can query the server web tables  to determine if the client has permission. Then, the SSO  sends a signal back to the PDS  with a determination of the client's permission to check-in the requested file. The PDS  determines if the client checked-out the requested file in step . Typically, the PDS  queries the project mangement tables  to determine if a particular client checked-out the requested file. In step , the PDS  marks the requested file as checked-in. To mark the requested file as checked-in, the PDS  sends a signal to the security tables . In one exemplary embodiment, the signal sent from the PDS  to the security tables  comprises the name of the file, the client's access information and the request to mark the file as checked-in. In step , the PDS  deletes the row of data in the security tables  that was stored in the security tables  in step . The process then continues to the END step.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 10","FIGS. 1"],"b":["215","116","102","110","2","5","10","215","116","102","1005","110","1010","1015","114","102","118","114"],"i":["b ","b "]},"In step  the ASP page  requests session information from the SSO  and the moniker . The ASP page  instantiates the PDS  in step . In step , the ASP page  sends the method request, received in step , and the session information, received in step , to the PDS . The PDS  processes the method request in step  of . In step , the PDS  determines the method the client requested in the method request. In step , the PDS  verifies that the client has permission to access the data associated with the method requested. Verification is typically accomplished with the PDS  instantiating an instance of the SSO . The PDS  sends the session information to the SSO . The SSO  will typically compare the session information to data stored in the server web tables . In step , the SSO  sends a reply back to the PDS  that the client has permission to complete the method requested. The PDS  performs the method requested in step . Then the process continues to step  of .",{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 11","FIGS. 1","FIG. 2"],"b":["215","116","102","110","2","5","11","215","116","102","1105","205","1110","1115","102","116","108","118","116"],"i":["c ","c "]},"The PDS  uses the cookie to access session information from the session manager  in step . In step , the PDS  uses the cookie to access database connection information from the moniker . Database connection information can include the server name, the name of the database, the user name, and the password for the database. In step  of , the PDS  processes the method request. The PDS  determines the method the client requested in the method request in step . In step , the PDS  verifies that the client has permission to access the data associated with the method requested. Verification is typically accomplished with the PDS  instantiating an instance on the SSO . The PDS  sends the session information to the SSO . The SSO  will typically compare the session information to data stored in the server web tables . In step , the SSO  sends a reply back to the PDS  that the client has permission to complete the method requested. The PDS  performs the method requested in step . Then the process continues to step  of .","It is considered that the operations, steps, and procedures described above and illustrated in the accompanying drawings are sufficiently disclosed to enable one of ordinary skill in the art to practice the present invention. However, there are many computers, operating systems, and application programs which may be used in practicing an exemplary embodiment of the present invention. Each user of a particular computer will be aware of the language and tools which are most useful for that user's needs and purposes. In addition, although the invention was described in the context of a project management application, those skilled in the art will appreciate that the invention can be extended to a wide variety of business management applications. It should be understood that the foregoing related only to specific embodiments of the present invention, and that numerous changes may be made therein without departing from the spirit and scope of the invention as defined by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["For a more complete understanding of the present invention and the advantages thereof, reference is now made to the following description in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
