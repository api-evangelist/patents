---
title: Systems and methods for data encryption using plugins within virtual systems and subsystems
abstract: Several embodiments of the present invention provide a means for improving data access security in computer systems to support high-security applications, and certain of these embodiments are specifically directed to providing sector-level encryption of a virtual hard disk in a virtual machine environment. More specifically, certain embodiments are directed to providing sector-level encryption by using plug-ins in a virtual machine environment, thereby providing improved data access security in a computer system that supports high-security applications. Certain embodiments also use encryption plug-ins associated with standard encryption software for exchanging data between a virtual machine (VM) and its associated virtual hard drive(s) (VHDs). Moreover, several embodiments of the present invention are directed to the use of plug-in encryption services that interface with, and provide services for, a VM via a VM Encryption API (or its equivalent).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07987497&OS=07987497&RS=07987497
owner: Microsoft Corporation
number: 07987497
owner_city: Redmond
owner_country: US
publication_date: 20040305
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS","CONCLUSION"],"p":["The present invention generally relates to the field of virtual machines (also known as \u201cprocessor virtualization\u201d) and software that executes in a virtual machine environment. More specifically, the present invention is directed to providing data encryption, including sector-level encryption for virtual hard drives, within a virtual machine environment.","Computers include general purpose central processing units (CPUs) that are designed to execute a specific set of system instructions. A group of processors that have similar architecture or design specifications may be considered to be members of the same processor family. Examples of current processor families include the Motorola 680X0 processor family, manufactured by Motorola, Inc. of Phoenix, Ariz.; the Intel 80X86 processor family, manufactured by Intel Corporation of Sunnyvale, Calif.; and the PowerPC processor family, which is manufactured by Motorola, Inc. and used in computers manufactured by Apple Computer, Inc. of Cupertino, Calif. Although a group of processors may be in the same family because of their similar architecture and design considerations, processors may vary widely within a family according to their clock speed and other performance parameters.","Each family of microprocessors executes instructions that are unique to the processor family. The collective set of instructions that a processor or family of processors can execute is known as the processor's instruction set. As an example, the instruction set used by the Intel 80X86 processor family is incompatible with the instruction set used by the PowerPC processor family. The Intel 80X86 instruction set is based on the Complex Instruction Set Computer (CISC) format. The Motorola PowerPC instruction set is based on the Reduced Instruction Set Computer (RISC) format. CISC processors use a large number of instructions, some of which can perform rather complicated functions, but which require generally many clock cycles to execute. RISC processors use a smaller number of available instructions to perform a simpler set of functions that are executed at a much higher rate.","The uniqueness of the processor family among computer systems also typically results in incompatibility among the other elements of hardware architecture of the computer systems. A computer system manufactured with a processor from the Intel 80X86 processor family will have a hardware architecture that is different from the hardware architecture of a computer system manufactured with a processor from the PowerPC processor family. Because of the uniqueness of the processor instruction set and a computer system's hardware architecture, application software programs are typically written to run on a particular computer system running a particular operating system.","Computer manufacturers want to maximize their market share by having more rather than fewer applications run on the microprocessor family associated with the computer manufacturers' product line. To expand the number of operating systems and application programs that can run on a computer system, a field of technology has developed in which a given computer having one type of CPU, called a host, will include an emulator program that allows the host computer to emulate the instructions of an unrelated type of CPU, called a guest. Thus, the host computer will execute an application that will cause one or more host instructions to be called in response to a given guest instruction. Thus the host computer can both run software designed for its own hardware architecture and software written for computers having an unrelated hardware architecture. As a more specific example, a computer system manufactured by Apple Computer, for example, may run operating systems and application programs written for PC-based computer systems. It may also be possible to use an emulator program to operate concurrently on a single CPU multiple (and possibly different or incompatible) operating systems. In this arrangement, although each operating system is distinct from the others, an emulator program can host one of the two operating systems, allowing the otherwise incompatible operating systems to run concurrently on the same computer system.","When a guest computer system is emulated on a host computer system, the guest computer system is said to be a virtual machine, as the guest computer system exists only as a software representation in the host operating system of the hardware architecture corresponding to the guest computer system. The terms emulator, virtual machine, and processor emulation are sometimes used interchangeably to denote the ability to mimic or emulate the hardware architecture of an entire computer system. As an example, the Microsoft Corporation's Virtual PC software emulates an entire computer that includes an Intel 80X86 Pentium processor and various motherboard components and cards. The operation of these components is emulated in the virtual machine that is being run on the host machine. An emulator program executing on the operating system software and hardware architecture of the host computer, such as a computer system having a PowerPC processor, mimics the operation of the entire guest computer system.","The emulator program acts as the interchange between the hardware architecture of the host machine and the instructions transmitted by the software running within the emulated environment. This emulator program may be a host operating system (HOS), which is an operating system running directly on the physical computer hardware. Alternately, the emulated environment might also be a virtual machine monitor (VMM) which is a software layer that runs directly above the hardware and which virtualizes all the resources of the machine by exposing interfaces that are the same as the hardware the VMM is virtualizing (which enables the VMM to go unnoticed by operating system layers running above it). A host operating system and a VMM may run side-by-side on the same physical hardware.","Data security is important for maintaining a secure computing environment. If access to the data in data files is not restricted and controlled, a myriad of threats to that data are possible\u2014for example, the data content may be intercepted or modified. Examples of these harmful sources include, but are not limited to, viruses, other software applications, employees (disgruntled or otherwise), hackers, and operating system errors.","For example, several governmental agencies have computer systems that require a high level of security with respect to access to the contents of confidential data, but these agencies do not have the technical expertise required to design, implement, and support all aspects of their complex computer systems. On the other hand, there are several companies that design, implement, and support computer systems and their operating systems, but they cannot be granted unrestricted access to these agencies' computer systems because of the highly sensitive nature of the data content housed therein.","One solution is for the agencies to encrypt their data so that, when accessed by such companies, the data content is incomprehensible. Encryption is employed in computer systems to limit readability of data files to those who know how to decrypt it (have the correct encryption algorithm). However, most data encryption is \u201cfile-based\u201d\u2014that is, while the contents of the file are hidden, specific information about the file is still unencrypted, including the file name, header information, metadata, and file characteristics (such as size, location, etc.), and thus the files remain vulnerable. Microsoft Corporation's Encrypting File System (EFS) is an example of a prior art system for encrypting files (see white paper, \u201cEncrypting File System for Windows 2000\u201d, available on the Internet. What is needed is a way to improve data access security in computer systems to support high-security applications\u2014specifically, sector-level data encryption. Also, there is an additional need for a means by which security can be added to a virtual machine without having to be written directly into the VM (or, more correctly, the VMM on behalf of the VM).","Several embodiments of the present invention provide a means for improving data access security in computer systems to support high-security applications, and certain of these embodiments are specifically directed to providing sector-level encryption of a virtual hard disk in a virtual machine environment.","Certain embodiments of the present invention are directed to a system for and method of providing sector-level encryption by using plug-ins in a virtual machine environment, thereby providing improved data access security in a computer system that supports high-security applications. Certain embodiments also use encryption plug-ins associated with standard encryption software for exchanging data between a virtual machine (VM) and its associated virtual hard drive(s) (VHDs). For some of these embodiments, the encryption functionality resides in the host OS and the applications, drivers, and so forth running on said host OS (altogether the \u201chost environment\u201d), which is external to the VM; thus, the VM need not have any knowledge as to whether encryption is occurring or of the nature of encryption, which may be any available encryption technique. Additionally, because a VHD is actually a physical file within the physical hard drive of the host OS, the present invention is essentially providing sector-level encryption and, thus, a high level of data security is achieved. Finally, several embodiments of the present invention are directed to the use of plug-in encryption services that interface with, and provide services for, a VM via a VM Encryption API (defined herein below).","The inventive subject matter is described with specificity to meet statutory requirements. However, the description itself is not intended to limit the scope of this patent. Rather, the inventor(s) has (have) contemplated that the claimed subject matter might also be embodied in other ways, to include different steps or combinations of steps similar to the ones described in this document, in conjunction with other present or future technologies. Moreover, although the term \u201cstep\u201d may be used herein to connote different elements of methods employed, the term should not be interpreted as implying any particular order among or between various steps herein disclosed unless and except when the order of individual steps is explicitly described.","Computer Environment","Numerous embodiments of the present invention may execute on a computer.  and the following discussion is intended to provide a brief general description of a suitable computing environment in which the invention may be implemented. Although not required, the invention will be described in the general context of computer executable instructions, such as program modules, being executed by a computer, such as a client workstation or a server. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand held devices, multi processor systems, microprocessor based or programmable consumer electronics, network PCs, minicomputers, mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","As shown in , an exemplary general purpose computing system includes a conventional personal computer  or the like, including a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within the personal computer , such as during start up, is stored in ROM . The personal computer  may further include a hard disk drive  for reading from and writing to a hard disk, not shown, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer readable media provide non volatile storage of computer readable instructions, data structures, program modules and other data for the personal computer . Although the exemplary environment described herein employs a hard disk, a removable magnetic disk  and a removable optical disk , it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read only memories (ROMs) and the like may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more application programs , other program modules  and program data . A user may enter commands and information into the personal computer  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite disk, scanner or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , personal computers typically include other peripheral output devices (not shown), such as speakers and printers. The exemplary system of  also includes a host adapter , Small Computer System Interface (SCSI) bus , and an external storage device  connected to the SCSI bus .","The personal computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the personal computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the personal computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used. Moreover, while it is envisioned that numerous embodiments of the present invention are particularly well-suited for computerized systems, nothing in this document is intended to limit the invention to such embodiments.","Virtual Machines","From a conceptual perspective, computer systems generally comprise one or more layers of software running on a foundational layer of hardware. This layering is done for reasons of abstraction. By defining the interface for a given layer of software, that layer can be implemented differently by other layers above it. In a well-designed computer system, each layer only knows about (and only relies upon) the immediate layer beneath it. This allows a layer or a \u201cstack\u201d (multiple adjoining layers) to be replaced without negatively impacting the layers above said layer or stack. For example, software applications (upper layers) typically rely on lower levels of the operating system (lower layers) to write files to some form of permanent storage, and these applications do not need to understand the difference between writing data to a floppy disk, a hard drive, or a network folder. If this lower layer is replaced with new operating system components for writing files, the operation of the upper layer software applications remains unaffected.","The flexibility of layered software allows a VM to present a virtual hardware layer that is in fact another software layer. In this way, a VM can create the illusion for the software layers above it that said software layers are running on their own private computer system, and thus VMs can allow multiple \u201cguest systems\u201d to run concurrently on a single \u201chost system.\u201d",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIG. 2"],"b":["94","92","94","96","98","100","98","94","100","90","100","92"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 3A","b":["104","102","104"]},"Alternately, a virtual machine monitor, or VMM, software layer \u2032 may be running in place of or alongside a host operating system \u2033, the latter option being illustrated in . For simplicity, all discussion hereinafter (specifically regarding the host operating system ) shall be directed to the embodiment illustrated in ; however, every aspect of such discussion shall equally apply to the embodiment of  wherein the VMM \u2032 of  essentially replaces, on a functional level, the role of the host operating system  of  described herein below.","Referring again to , above the host OS  (or VMM \u2032) are two virtual machine (VM) implementations, VM A , which may be, for example, a virtualized Intel 386 processor, and VM B , which may be, for example, a virtualized version of one of the Motorola 680X0 family of processors. Above each VM  and  are guest operating systems (guest OSs) A  and B  respectively. Above guest OS A  are running two applications, application A  and application A , and above guest OS B  is Application B .","VM Data Encryption",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIGS. 4A and 4B","FIG. 3B","FIG. 4A"],"b":["108","122","124","112","110","126","114"]},"In this embodiment, VHD  is implemented as a single data file, File X , on the physical hard disk  of the computer hardware ; VHD  is also implemented as a single data file, File Y , on the same physical hard disk ; and VHD  is also implemented as a single data file, File Z , on the physical hard disk  as well. Of course, as will be understood and readily appreciated by those of skill in the art, these VHD representations may be located in several files and across separate hard drives, separate computer systems, or they can be something other than a file (for example, a table in a database, a database, a block of active memory, etc., etc.). Moreover, although for the present embodiment all three VHDs are in fact files maintained by the file system  of the host OS \u2033, in alternative embodiments they may be implemented in other ways, such as files or other data structures maintained by the VMM \u2032. Nevertheless, in the present embodiment, and as illustrated in the figure, the VHDs , , and  are implemented through the file system  of the host operating system \u2033 as files , , and  respectively on the physical hard drive  of the physical computer hardware .",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 4B","b":["122","124","126","104","140","142","144","146","122","124","126","132","134","136"]},"Generally a plug-in is a small application (somewhat akin to a device driver) that contains data that is used to alter, enhance, or extend the operation of a parent application program which, in this case, is the VMM that provides the VM abstraction. Plug-ins are often commercially and independently developed, come in different versions specific to particular operating systems, and interact with the application they are enhancing via an Application Programming Interface (API) exposed by that application.","In reference to , the encryption plug-in , , and  are plug-ins for utilizing available encryption software that resides within host operating system \u2033, thereby providing data security for the VHDs , , and . Example suppliers of encryption software are VeriSign, Inc. (Mountain View, Calif.), PGP Corporation (Palo Alto, Calif.), RSA Security Inc. (Bedford, Mass.), Veridian Corporation (Arlington, Va.), or Certicom Corp. (Mississauga, ON). Furthermore, encryption algorithms used by the U.S. government exist, such as those used by the Central Intelligence Agency (CIA) or the National Security Agency (NSA). In several embodiments, one or more encryption software applications may be loaded within host operating system \u2033, therefore encryption plug-ins are specific to whatever encryption software application they are associated with. In certain embodiments, a flag within the headers of the files that represent each VHD , , and  indicate whether \u201cencryption\u201d is active, and the headers may also include an associated \u201cencryptionID\u201d or equivalent field which matches the type of encryption plug-in used (that is, which specific encryption technique is applied) and thereby act as a pointer to the required encryption plug-in and encryption software application that resides on host operating system \u2033.","In one embodiment of the present invention, each VM (or, more correctly, the VMM on behalf of the VM) maintains a unique identifier for identifying the correct encryption layer plug-in for each of its VHDs. In an alternative embodiment, the encrypted data file maintains in its header information a unique identifier corresponding to the correct encryption layer plug-in. The encryption plug-ins only provide encryption services to those VMs and VHDs for which it is slated to do so using any of various methods known and appreciated by those of skill in the art.","The virtual machine encryption method suggested by the system illustrated in  provides isolation and security between guest OS A  and host operating system \u2033 at the physical hard drive level, thereby providing high-security VHD data that is not understandable by the host operating system \u2033. Furthermore, the virtual machine encryption method suggested by  allows multiple VHDs to be encrypted independently with any of several available encryption methods. Moreover, the invention provides an entirely transparent encryption technique for both an operating system running on a VM\u2014e.g., Guest OS A  running on VM A , wherein Guest OS A  is without knowledge as to whether encryption is occurring\u2014and the host OS \u2033 because, aside from the encryption services available to the VM via the plugins, the file system  treats the VHD encrypted files \u2032, \u2032 and \u2032 as any other file.","The encryption system and method described in  regarding VM A  and guest OS A  are exemplary and equally applicable to VM B  and guest OS B  or any other VM and guest OS. Lastly, the encryption system and method described in  is not limited to a standalone computer system; it may also be generally applied to a virtual network system.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 5A","b":["150","152","154","156"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 5B","b":["160","162","164"]},"In addition to the foregoing, a virtual machine (and, more specifically, a virtual hard disk) can also be utilized by a host operating system to provide virtual sector-level data encryption on a physical hard disk (a \u201csoftware solution\u201d) in lieu of the utilization of specialized hardware otherwise necessary for achieving sector-level encryption (a \u201chardware solution\u201d). In other words, as known and appreciated by those of skill in the art, a host OS alone can only achieve file-level encryption\u2014that is, it can encrypt (and thereby hide) the data in a file that is stored to a hard disk, but it cannot encrypt the file's name, header information, metadata, and file characteristics (such as size, starting location, etc.). To achieve sector-level encryption (where file data as well as the file's name, header information, metadata, and file characteristics), specialized hardware is typically used to encrypt the data before it is written to the physical disk drive (the hardware solution). However, a host OS directly or indirectly using a virtual hard drive, either within a VM or simply as an emulated device in the host operating system, could encrypt the entire contents of that VHD into a single file (XXX) and, thus, the utilization of a VHD in this manner provides a software solution for sector-level file encryption of data. This approach is further enhanced with the use of plug-in encryption for the reasons set forth elsewhere herein regarding the benefits of plug-in encryption.","The various systems, methods, and techniques described herein may be implemented with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus of the present invention, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers, the computer will generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language, and combined with hardware implementations.","The methods and apparatus of the present invention may also be embodied in the form of program code that is transmitted over some transmission medium, such as over electrical wiring or cabling, through fiber optics, or via any other form of transmission, wherein, when the program code is received and loaded into and executed by a machine, such as an EPROM, a gate array, a programmable logic device (PLD), a client computer, a video recorder or the like, the machine becomes an apparatus for practicing the invention. When implemented on a general-purpose processor, the program code combines with the processor to provide a unique apparatus that operates to perform the indexing functionality of the present invention.","While the present invention has been described in connection with the preferred embodiments of the various figures, it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating there from. For example, while exemplary embodiments of the invention are described in the context of digital devices emulating the functionality of personal computers, one skilled in the art will recognize that the present invention is not limited to such digital devices, as described in the present application may apply to any number of existing or emerging computing devices or environments, such as a gaming console, handheld computer, portable computer, etc. whether wired or wireless, and may be applied to any number of such computing devices connected via a communications network, and interacting across the network. Furthermore, it should be emphasized that a variety of computer platforms, including handheld device operating systems and other application specific hardware\/software interface systems, are herein contemplated, especially as the number of wireless networked devices continues to proliferate. Therefore, the present invention should not be limited to any single embodiment, but rather construed in breadth and scope in accordance with the appended claims.","Finally, the disclosed embodiments described herein may be adapted for use in other processor architectures, computer-based systems, or system virtualizations, and such embodiments are expressly anticipated by the disclosures made herein and, thus, the present invention should not be limited to specific embodiments described herein but instead construed most broadly."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of preferred embodiments, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, there is shown in the drawings exemplary constructions of the invention; however, the invention is not limited to the specific methods and instrumentalities disclosed. In the drawings:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 4A","FIG. 3B"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 4B","FIG. 4A"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5B"}]},"DETDESC":[{},{}]}
