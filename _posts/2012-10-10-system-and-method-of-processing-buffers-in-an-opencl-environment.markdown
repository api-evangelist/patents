---
title: System and method of processing buffers in an OpenCL environment
abstract: A processor has access to processing units for performing data processing and to libraries. Functions in the libraries are implementable to perform parallel processing and graphics processing. The processor may be configured to acquire (e.g., to download from a web server) a download script, possibly with extensions specifying bindings to library functions. Running the script may cause the processor to create, for each processing unit, contexts in which functions may be run, and to run, on the processing units and within a respective context, a portion of the download script. Running the script may also cause the processor to create, for a processing unit, a memory object, transfer data into that memory object, and transfer data back to the processor in such a way that a memory address of the data in the memory object is not returned to the processor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09348676&OS=09348676&RS=09348676
owner: Google Technology Holdings LLC
number: 09348676
owner_city: Mountain View
owner_country: US
publication_date: 20121010
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["The present application is related to U.S. patent applications U.S. patent application Ser. Nos. 13\/648,349, 13\/648,341, 13\/684,366, and 13\/648,373, filed on an even date herewith.","The present disclosure is related generally to machine processors.","The OpenCL\u2122 framework is a framework for writing computer programs. OpenCL\u2122 provides for parallel computing to be performed. Further information on OpenCL\u2122 may be found, for example, in \u201cThe OpenCL\u2122 Specification Version: 1.1,\u201d A. Munshi, June 2011, which is incorporated herein by reference.","Typically, websites, web pages, web applications, etc., are provided in the form of scripts (e.g., in HTML format or in JavaScript\u2122, etc.) and are not compiled computer programs.","Turning to the drawings, wherein like reference numerals refer to like elements, techniques of the present disclosure are illustrated as being implemented in a suitable environment. The following description is based on embodiments of the claims and should not be taken as limiting the claims with regard to alternative embodiments that are not explicitly described herein.","The present inventors have realized that as websites become more complicated there is a desire or need for websites, web pages, web applications, etc., to use the power of the computers they are running on (i.e., there is a desire for web pages, etc., to be able to use the multiple processor cores, graphics cards, etc., of a computer). The present inventors have realized that, in order to do so, a mechanism that allows access to the OpenCL\u2122 methods and functions from within a script needs to be provided.","Embodiments provide a machine processor (e.g., a virtual machine processor such as a JavaScript\u2122 module capable of executing JavaScript\u2122 commands) and a method performed by the machine processor. The machine processor may have access to one or more underlying processing units (e.g., a graphics processing unit or a central processing unit of a computer) for performing data processing. The machine processor may have access to a function library (e.g., an OpenCL\u2122 function library, which is described in more detail below) which may contain one or more functions (e.g., OpenCL\u2122 functions, which are described in more detail below). The functions may be implementable by the underlying processing units to perform parallel processing. The machine processor may be configured to acquire (e.g., by downloading over the Internet from a web server) a download script (e.g., a web page, etc.). This download script may comprise commands (e.g., written in JavaScript\u2122) for the machine processor that comprises a binding (e.g., a JavaScript\u2122 binding) to a corresponding function in the function library. The machine processor may be further configured to run the download script such that the commands are run. This may cause the machine processor to create, for each underlying processing unit, a context (i.e., a parallel context) in which one or more of the functions may be run, and run, on one or more underlying processing units and within a respective context, a portion of the download script.","Further embodiments provide a machine processor (e.g., a virtual machine processor such as a JavaScript\u2122 module capable of executing JavaScript\u2122 commands) and a method performed by the machine processor. The machine processor may have access to an underlying processing unit (e.g., a graphics processing unit or a central processing unit of a computer) for performing data processing. The machine processor may have access to a function library (e.g., an OpenCL\u2122 function library, which is described in more detail below) which may contain one or more functions (e.g., OpenCL\u2122 functions, which are described in more detail below). The functions may be implementable by the underlying processing unit, e.g., to perform parallel processing. The machine processor may be configured to acquire (e.g., by downloading over the Internet from a web server) a download script (e.g., a web page, etc.). This download script may comprise commands (e.g., written in JavaScript\u2122) for the machine processor that comprises a binding (e.g., a JavaScript\u2122 binding) to a corresponding function in the function library. The machine processor may be further configured to run the download script such that the commands are run. This may cause the machine processor to create, for the underlying processing unit, a memory object or buffer, thereby reserving at least part of the memory of that underlying processing unit into which data may be transferred from the machine processor, and to transfer data from the machine processor into that memory object or buffer. The memory object or buffer may be such that the underlying processing unit for which the memory object or buffer has been created may process the data transferred into the memory object or buffer. Running the script may further cause data (after having been processed by the processing unit) to be transferred back from the memory object or buffer to the machine processor in such a way that a memory address of the data in the memory object or buffer is not returned to the machine processor.","Further embodiments provide a machine processor (e.g., a virtual machine processor such as a JavaScript\u2122 module capable of executing JavaScript\u2122 commands) and a method performed by the machine processor. The machine processor may have access to an underlying processing unit (e.g., a graphics processing unit) for performing data processing. The machine processor may have access to a function library (e.g., an OpenCL\u2122 function library, which is described in more detail below) which may contain one or more functions (e.g., OpenCL\u2122 functions, which are described in more detail below). The functions may be implementable by the underlying processing unit, e.g., to perform parallel processing. The machine processor may also have access to a further function library (e.g., an OpenGL\u2122 function library, which is described in more detail below) which may contain one or more further functions (e.g., OpenGL\u2122 functions, which are described in more detail below). The further functions may be implementable by the underlying processing unit, e.g., to perform graphics processing or rendering. The machine processor may be configured to acquire (e.g., by downloading over the Internet from a web server) a download script (e.g., a web page, etc.). This download script may comprise commands (e.g., written in JavaScript\u2122) for the machine processor that comprises a binding (e.g., a JavaScript\u2122 binding) to a corresponding function or further function. The machine processor may be further configured to run the download script such that the commands are run. This may cause the machine processor to: create, for the underlying processing unit, a context in which one or more of the functions may be run; create, for the underlying processing unit, a further context in which one or more of the further functions may be run; run, on the underlying processing unit and within the context, a portion of the download script; and run, on the underlying processing unit and within the further context, a further portion of the download script.","Further embodiments provide methods and apparatus for providing download script for accessing or downloading by a machine processor (for running by the machine processor). The machine processor may have access to one or more underlying processing units (e.g., a graphics processing under or a central processing unit of a computer) for performing data processing. The machine processor may have access to a function library (e.g., an OpenCL\u2122 function library, which is described in more detail below) which may contain one or more functions (e.g., OpenCL\u2122 functions, which are described in more detail below). The functions may be implementable by the underlying processing units to perform parallel processing. The methods may comprise a computer sending (e.g., via the Internet), to a first web server, a request for an extension to be returned to the computer. The extension may specify one or more bindings to a corresponding function in the function library. The extension may be such that, when run (e.g., by the machine processor), a corresponding function from the function library is called. The method may further comprise, after receiving the request, the web server sending the extension back to the computer. The computer may then receive the requested extension which may then be used to write a script for implementation by the machine processor. The script may be uploaded to a further web server from which it may be accessed or downloaded by the machine processor.","Further embodiments provide methods and apparatus for storing (e.g., on a web server) and running a download script. The download script may be stored such that it is accessible or downloadable by a machine processor. The machine processor may have access to one or more underlying processing units (e.g., a graphics processing unit or a central processing unit of a computer) for performing data processing. The machine processor may have access to a function library (e.g., an OpenCL\u2122 function library, which is described in more detail below) which may contain one or more functions (e.g., OpenCL\u2122 functions, which are described in more detail below). The functions may be implementable by the underlying processing units to perform parallel processing. The script may be such that, when run by the machine processor, the machine processor creates, for an underlying processing unit, a memory object or buffer, thereby reserving at least part of the memory of that underlying processing unit into which data may be transferred from the web browser. The memory object or buffer may be such that a data type for each data item within the memory object or buffer is specified, thereby providing that data may be stored in the memory object or buffer as a typed array.","An apparatus for implementing any of the below described arrangements, and for performing any of the below described methods, may be provided by configuring or adapting any suitable apparatus, for example one or more computers or other processing apparatus or processors, or providing additional modules. The apparatus may include a computer, a network of computers, or one or more processors, for implementing instructions and using data, including instructions and data in the form of a computer program or plurality of computer programs stored in or on a machine-readable storage medium such as computer memory, a computer disk, ROM, PROM, etc., or any combination of these or other storage media.","It should be noted that certain of the processes depicted in the below described process flowcharts may be omitted or such processes may be performed in an order different from that presented below and shown in the process flowcharts. Furthermore, although all the processes have, for convenience and ease of understanding, been depicted as discrete and temporally-sequential, nevertheless some of the processes may in fact be performed simultaneously or at least overlapping to some extent temporally.","Referring now to the figures,  is a schematic illustration (not to scale) of an example network  in which embodiments can be implemented.","The network  comprises a first web server , a second web server , the Internet , a first computer , and a second computer .","The first web server  is described in more detail below with reference to . The first web server  is connected to each of the second web server , the first computer , and the second computer . These connections are via the Internet . These connections are such that information may be sent between the first web server  and each of the second web server , the first computer , and the second computer , e.g., as described in more detail below with reference to .","The second web server  is described in more detail below with reference to . In addition to being connected to the first web server , the second web server  is connected to the first computer  and to the second computer . These connections are via the Internet . These connections are such that information may be sent between the second web server  and each of the first computer  and the second computer , e.g., as described in more detail below with reference to .","In this embodiment, the first and second web servers ,  are separate web servers. However, in other embodiments, the first and second web servers ,  may be provided by a single web server.","The first computer  is described in more detail below with reference to . In addition to being connected to the first and second web servers ,  (via the Internet ), the first computer  is connected to the second computer . The connection between the first computer  and the second computer  may be via the Internet . The connection between the first computer  and the second computer  is such that information may be passed between the first computer  and the second computer , e.g., as described in more detail below with reference to .","In this embodiment, the first and second computers ,  are separate computing devices. However, the functionality (described in more detail below) of the first and second computers ,  may be provided by a different number computing devices, e.g., by a single computing device.","The second computer  is described in more detail below with reference to .","Each of the first and second computers ,  may be any appropriate type of computer, for example, a desktop personal computer, a laptop computer, a tablet computer, a mobile station, a smartphone, a netbook, etc.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 2","b":"4"},"In this embodiment, the first web server  hosts a web page . The web page  is accessible or downloadable by the first computer  (via the Internet ). The web page  may comprise HTML code, Cascading Style Sheets, scripts (indicated in  by a box and the reference numeral ), and an image (indicated in  by a box and the reference numeral ). The image  may, for example, be in the form of a .jpg file. In other embodiments, a reference to an image that may be used to retrieve or locate that image may form part of the web page .","The scripts  comprise code written in the JavaScript\u2122 scripting language. This JavaScript\u2122 code is indicated in  by a box and the reference numeral . The scripts  may further comprise other scripts that may, for example, include kernel code.","The JavaScript\u2122 code  comprises one or more commands. The commands are hereinafter referred to as \u201cWebCL commands\u201d and are indicated in FIG.  by the reference numeral . The WebCL commands  are commands for an application programming interface (API), hereinafter referred to as the \u201cWebCL API.\u201d The WebCL API is described in more detail below with reference to . In this embodiment, the WebCL API is located on the first computer . In other words, the WebCL commands  are commands that are specified using a framework, hereinafter referred to as the \u201cWebCL framework.\u201d The WebCL framework is described in more detail below. The WebCL API is an API for the WebCL framework.","In this embodiment, the first web server  hosts a web page  specified using a script . However, in other embodiments the script  may specify different content, i.e., other than a web page. For example, in other embodiments, the script  may specify image or video data.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 3","b":"6"},"The second web server  comprises a repository  (i.e., memory or storage). The contents of the repository  are accessible or downloadable by the first and second computer ,  (via the Internet ). The repository  may comprise one or more extensions, hereinafter referred to as \u201cWebCL extensions\u201d and indicated in  by the reference numeral . WebCL extensions  are described in more detail below. A WebCL extension  may comprise or specify one or more commands, methods, interfaces, attributes, etc., for use by a computer programmer or software developer when writing WebCL scripts or by the WebCL API. A WebCL extension  may comprise or specify one or more commands, methods, interfaces, attributes, etc., that do not form part of the WebCL framework.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 4","b":"10"},"The first computer  comprises a web browser , a graphical processing unit (GPU) , a central processing unit (CPU) , an OpenCL\u2122 library , and a display .","The web browser  is described in more detail below with reference to . The terminology \u201cweb browser\u201d is used herein to refer an application that may retrieve and process information resources on the World Wide Web (via the Internet ). The web browser  is connected to the GPU  and to the CPU  such that information may be sent between the web browser  and each of the GPU  and the CPU . The web browser  may, for example, be running on the CPU . Also, the web browser  is connected to the OpenCL\u2122 library  such that information stored in the OpenCL\u2122 library  may be retrieved from the OpenCL\u2122 library  by the web browser . Also, the web browser  is connected to the display  such that information may be sent from the web browser  to the display .","The OpenCL\u2122 library  is a library comprising functions, methods, interfaces, attributes, etc., of the OpenCL\u2122 framework. Such functions, methods, interfaces, attributes, etc., of the OpenCL\u2122 framework are indicated schematically in  by boxes and by the reference numeral . The OpenCL\u2122 framework is a framework for heterogeneous parallel computing. Further information on OpenCL\u2122 may be found, for example, in \u201cThe OpenCL\u2122 Specification Version: 1.1,\u201d A. Munshi, June 2011.","The OpenCL\u2122 library  and the web browser  may be linked (e.g., statically or dynamically). For example, a static linking between the OpenCL\u2122 library  and the web browser  may provide that OpenCL\u2122 code may be compiled as part of the web browser. Also for example, a dynamic linking between the OpenCL\u2122 library  and the web browser  may provide that the OpenCL\u2122 library  may be installed somewhere else on the first computer , and the web browser  may simply access the OpenCL\u2122 library .","The GPU  and the CPU  may each be configured to process information received from the web browser . For example, a computer program received by the GPU  (or by the CPU ) may be implemented by the GPU  (or by the CPU , respectively). Information that has been processed by the web browser  may be returned from the GPU  (or from the CPU ) to the web browser . The functionalities of the GPU  and the CPU  are described in more detail below with reference to . Each of the GPU  and the CPU  may be controlled or accessed using OpenCL\u2122 commands or language. In other words, the GPU  and the CPU  are pieces of hardware that can be controlled or accessed using OpenCL\u2122. Thus, the GPU  and the CPU  are both \u201cOpenCL\u2122 devices\u201d as defined in \u201cThe OpenCL\u2122 Specification Version: 1.1,\u201d A. Munshi, June 2011. In some embodiments, a different type of OpenCL\u2122 device, e.g., a different type of CPU, a different type of GPU, etc., may be used instead of or in addition to the GPU  or the CPU .","The display  may be any appropriate type of display, e.g., a touch-screen display. The display  may be configured to display information sent to it from the web browser .",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 5","b":"28"},"The web browser  comprises a JavaScript\u2122 module . The JavaScript\u2122 module  is configured to process, run, or execute the JavaScript\u2122 code  of the web page . The JavaScript\u2122 module  therefore provides a machine processor, or virtual machine processor, for processing scripts. The JavaScript\u2122 module  comprises the WebCL API .","The WebCL API  is an API for a framework, hereinafter referred to as the \u201cWebCL framework\u201d and described in more detail below. The WebCL framework is a JavaScript\u2122 binding for the OpenCL\u2122 framework. The WebCL framework advantageously allows for the execution of OpenCL\u2122 code in JavaScript\u2122. OpenCL\u2122 code advantageously tends to facilitate or allow computer applications to use or exploit the power of a computer (e.g., by executing programs using multiple processor cores, graphics cards, etc.). The WebCL API  is configured to process, run, or execute the WebCL commands  of the JavaScript\u2122 code  of the web page . The WebCL API  may act as an interface between the web browser  and the OpenCL\u2122 library  such that when a WebCL command  is run by the web browser , OpenCL\u2122 functions  corresponding to that WebCL command  are called.","In this embodiment, the WebCL API  may comprise or have access to one or more interfaces, hereinafter referred to as \u201cWebCL interfaces\u201d and indicated in  by the reference numeral . Each WebCL interface  may comprise one or more methods or objects, which are jointly indicated in  by the reference numeral . When processing, running, or executing a WebCL command , the WebCL API  may call a corresponding OpenCL\u2122 function or method  (from the OpenCL\u2122 library ). In other words, when a WebCL command  is run, the OpenCL\u2122 function that that WebCL command  is a binding to may be called. Thus, running WebCL commands can be thought of as \u201ctranslating\u201d those commands into the OpenCL\u2122 language, e.g., for use by an \u201cOpenCL\u2122 device.\u201d An OpenCL\u2122 device is defined in \u201cThe OpenCL\u2122 Specification Version: 1.1,\u201d A. Munshi, June 2011. In this embodiment, the GPU  of the first computer  is an OpenCL\u2122 device and may be controlled using OpenCL\u2122 commands, methods, functions, etc.","The web browser  may further comprise a number of further modules not shown in the figures. For example, the web browser  may comprise a kernel module that may function as a bridge between the web browser application and the data processing hardware (e.g., the GPU  or the CPU ) of the first computer . Such a kernel may be configured to manage the resources of the first computer .",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 6","b":"12"},"The second computer  comprises a processing module  and a user interface .","The processing module  is connected to the user interface  such that information may be passed between the processing module  and the user interface . The processing unit  is also configured to receive information via the Internet , e.g., from a web server , . The processing module  is configured to process information received by it.","The user interface  may receive inputs from a user of the second computer . A user of the second computer  may be a computer programmer, website designer, software developer, etc. The user interface  may, for example, comprise a user input device (e.g., a keyboard, a mouse, etc.) and a display.","The functionalities of the processing module  and of the user interface  are described in more detail below with reference to .","Example methods that may be performed by the entities of the network  are now described.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 7","b":["14","10"]},"At step s, the first web server  hosts the web page . In other words, the web page  is stored by the first web server  and made available for access or download via the Internet  by one or more client devices.","At step s, the first computer  accesses or downloads (via the Internet ) the web page . The script  (including the JavaScript\u2122 WebCL commands ) and the image data  may be downloaded onto the first computer . This process may comprise a user of the first computer  inputting into the first computer  a web address for the web page . The first computer  may then, using the web address, retrieve the web page  from the first web server .","At step s, the web browser  of the first computer  executes or runs the script  of the web page . For example, the script  may be run in a line-by-line fashion. The JavaScript\u2122 module  of the web browser  may execute or run any JavaScript\u2122 code  in the script . Also, the WebCL API  may execute or run any WebCL commands .","At step s, when, or before, a WebCL command  is encountered in the script , the script  being run by the web browser  may query whether the WebCL language is supported by the web browser . For example, it may be queried by the script  whether or not the WebCL API  has been installed on the web browser , is part of the web browser , or is in some other way accessible by the web browser .","The querying as to whether or not WebCL is supported by the web browser  may be performed by running any appropriate code or script, for example:",{"@attributes":{"id":"p-0067","num":"0066"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/First check if the WebCL extension is installed at all"]},{"entry":[{},"if (WebCL == undefined) {"]},{"entry":[{},"alert(\u201cWebCL not supported.\u201d);"]},{"entry":[{},"return;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In this embodiment, the WebCL API  is installed on the web browser . In other words, in this embodiment, the WebCL language is supported by the web browser . However, in other embodiments, WebCL may not be supported, and an exception or error may be returned.","At step s, after it has been determined that WebCL is supported by the web browser , the running of the script  by the web browser  may query what platform (i.e., operating platform, i.e., the type of the first computer ) the web browser  is running on. It may also be queried what OpenCL\u2122 devices (i.e., hardware accelerators or other processing devices or modules that may be operated or controlled using the OpenCL\u2122 programming language) are available to the web browser .","The querying as to what platform the WebCL API  is running on may be performed by running any appropriate code or script, for example:",{"@attributes":{"id":"p-0071","num":"0070"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var platformList=WebCL.getPlatformIDs( );"]},{"entry":[{},"platform=platformList[0]; \/\/ select the first platform"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"WebCLPlatform[ ] getPlatformIDs( )","This method is expressed in the interface description language (IDL) or web-IDL. That is to say, the first part of the method (WebCLPlatform[ ], i.e., an identifier for a platform that WebCL is running on) is the object or value that is returned by the method, the second part of the method (getPlatformIDs) is the function name, i.e., the function, of the method, and the third part of the method (which is expressed in parentheses and in this case is empty) is the parameters used by the function. In other words, the function getPlatformIDs( ) will return identifiers for the platform the WebCL API  is running on, i.e., the first computer .","The querying as to what OpenCL\u2122 devices are available may be performed using the following method (which is expressed using IDL):","WebCLDevice[ ] getDevices(int device_type)","In other words, the function getDevices may use a parameter that specifies a device type (e.g., GPU-type, etc.) to return identifiers for available OpenCL\u2122 devices. In this embodiment, an identifier for each of the GPU  and the CPU  (which are OpenCL\u2122 devices) may be returned.","At step s, the GPU  or the CPU  are selected as the OpenCL\u2122 device(s) that are to process some or all of the web page data (e.g., data relating to the image ).","At step s, the running of the script  (i.e., the Web CL commands ) by the web browser  (and the WebCL API ) creates a \u201cWebCL context\u201d in or for each of the selected OpenCL\u2122 devices (i.e., the GPU  or the CPU ). A context may be an execution context in which programs or code may be run. Thus, a WebCL context may be a runtime execution context for a WebCL program. A WebCL context may be used to provide a \u201clink\u201d or to allow communication between the OpenCL\u2122 device (i.e., the GPU ) and the web browser . Thus a WebCL context may be created for each selected OpenCL\u2122 device. In other words, parallel contexts (i.e., contexts that may be used in parallel) may be created for multiple OpenCL\u2122 devices. In other embodiments, parallel contexts may be created for a single selected OpenCL\u2122 device.","The creation of a WebCL context on or for the GPU  or the CPU  may be performed by running any appropriate code or script, for example:",{"@attributes":{"id":"p-0080","num":"0079"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ create GPU context for this platform"]},{"entry":[{},"context="]},{"entry":[{},"newWebCL.WebCLContext(WebCL.CL_DEVICE_TYPE_GPU,"]},{"entry":[{},"[WebCL.CL_CONTEXT_PLATFORM,"]},{"entry":[{},"platform]);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0081","num":"0080"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"WebCLContext createContext(int properties[ ], WebCLDevice devices[ ]);"},{"entry":"WebCLContext createContext(int properties[ ], int device_type);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In other words, the function createContext may use a parameter that specifies a device type or device to create a context for in order to create a WebCLContext. In this embodiment, a WebCL context is created in or for the GPU .","At step s, the execution or running of the script  is continued. This may comprise, when the web browser  (which may comprise the WebCL API ) executes or runs a WebCL command , the web browser  (or WebCL API ) calls a corresponding OpenCL\u2122 function  (from the OpenCL\u2122 library ). The OpenCL\u2122 function or method  called when a WebCL command  is executed may be the OpenCL\u2122 function or method  for which that particular WebCL command  is a JavaScript\u2122 binding.","The called OpenCL\u2122 functions  may be run or executed within the WebCL context created within the GPU  (or within the parallel WebCL context created for the CPU ). Thus, in effect, OpenCL\u2122 code may be run in the context of a WebCL environment within or for the GPU .","Command queues may also be created to facilitate, organize, or manage the transfer of data from the web browser  (i.e., from the web browser's memory, i.e., the \u201chost memory\u201d) to an OpenCL\u2122 device memory (e.g., the GPU  or CPU ), control execution of programs and kernels, synchronize events, etc. Code or methods that may be used to create command queues is provided below. A command queue may hold lists of functions, etc., that may then be executed (in list order).","In this embodiment, the script  specifies that data corresponding to the image  that are to be processed by the GPU . Steps s to s describe how this may be performed.","At step s, the running of the script  (i.e., the Web CL commands ) by the web browser  (and the WebCL API ) creates a \u201cWebCL memory object\u201d in the WebCL context in the GPU . This WebCL memory object may be or comprise, or in some other way specify, an amount of memory to be reserved for the image data . The created WebCL memory object may be a buffer within the WebCL context. This buffer may be a buffer for containing general data or a buffer that may be optimized for containing image data (e.g., data relating to the image ). The WebCL memory object may be a buffer configured to contain, e.g., either a JavaScript\u2122 or untied array or a typed array of data.","In this embodiment, the WebCL memory object is a buffer that is configured to contain a typed array of data. Such a WebCL memory object may be provided as follows. The script  specifying the WebCL memory object, i.e., the buffer, may describe its layout, e.g., the script  may specify that the first value in the buffer is an integer, the second value is a float value, etc. A data item within a crated buffer may be specified as any appropriate data type, for example, an integer, a Boolean value, a character, a floating-point number, an alphanumeric string, a vector, etc. When the WebCL memory object is created (by running the script), the WebCL memory object has the specified layout. Thus, when the values within the WebCL memory object are set (by transferring data from the web browser  into the WebCL memory object buffer), the data type of each data item within the WebCL memory object is specified.","Thus, data types of the values in a C area of memory (i.e., GPU memory) may be set. Advantageously, this setting of the types of the values of a C area of memory tends to facilitate the use of local arguments, memory objects and samplers, and user-defined structures (e.g., within OpenCL\u2122 restrictions). Furthermore, a problem that may be caused by the size of an array of values (JavaScript\u2122 is untyped and so numbers are, in general, 64-bit double) tends to be overcome. In particular, these 64-bit double numbers may be unsupported by certain devices. This tends to make it impractical to identify the distinction between char, int, float types, etc., without inspecting the code of the kernel. This problem tends to be overcome by setting the data types of an area of memory as described herein.","At step s, data (i.e., image data ) are transferred, for the web browser , into the WebCL memory object within the WebCL context within the GPU .",{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 8","b":["30","18","18","30","50","14","52","16","18","18","54","54","52","16","52"]},"The transfer of the image data  from the web browser  (i.e., the host memory that may be provided, e.g., by a CPU ) to the memory of the GPU  may comprise using one or more command queues to hold a list of commands that may be executed (in list order) to perform the transfer. Example code or method that may be used to create a command queue is provided below. A \u201cwrite\u201d command may be used to write the image data  onto the WebCL memory object .","At step s, the image data  transferred to the WebCL memory object  in the GPU  are processed by the GPU . By running the script , the web browser  may run WebCL commands  that may call OpenCL\u2122 functions  that may be run in the WebCL context  by the GPU  to process the image data .","The processing of the image data  by the GPU  may be managed or performed using one or more command queues. Example code or method that may be used to create a command queue is provided below.","At step s, the processed image data  (i.e., the image data  after having been processed by the GPU ) may be transferred back to the web browser .","The transfer of the image data  from the memory of the GPU  (i.e., the OpenCL\u2122 device memory) to the web browser  (i.e., the host memory) may be managed or performed using one or more command queues. A \u201cread\u201d command may be used by the web browser  to read processed image data  from the WebCL memory object .","Some OpenCL\u2122 methods, when implemented to process information, return values (i.e., processed information, e.g., the processed image data ) as well as information that may be used to identify the one or more memory regions (e.g., a memory address for a region of the GPU ) from which those values are returned. Using a WebCL memory object  (within a WebCL memory context  within the GPU ) advantageously tends to \u201chide\u201d the identity of the memory regions from which data are returned. Thus, identifiers for the memory regions tend not to be returned to the web browser . Advantageously, this may oppose or prevent a malicious party from using the information that identifies a memory region to access parts of the GPU  or other computer memory.","At step s, the web page  may be displayed by the web browser  on the display  of the first computer  (e.g., to a user of the first computer ). Displaying the web page  may comprise displaying an image that corresponds to or is specified by the processed image data .","Thus, a process by which the web page  may be displayed by the first computer  is provided.",{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 9","b":["14","10"]},"In this embodiment, in addition to comprising WebCL commands , the JavaScript\u2122  of the web page  comprises WebGL commands (not shown in the figures). In other words, the JavaScript\u2122  of the web page  further comprises commands that have been specified using the WebGL framework. Further information about the WebGL framework or specification may be found, for example, in \u201cWebGL Specification 1.0,\u201d which is incorporated herein by reference. Furthermore, in this embodiment, in addition to comprising the WebCL API , the web browser  comprises a WebGL API (not shown in the figures).","In other words, WebGL is supported by the web browser . The WebGL API is a JavaScript\u2122 API for rendering interactive 3D graphics and 2D graphics. WebGL\u2122 advantageously allows a GPU-accelerated usage of physics and image processing. WebGL\u2122 may effect a part of a web-page canvas. Typically, WebGL\u2122 computer programs comprise control code written in JavaScript\u2122 and shader code that is executed on a computer's GPU.","Also, in this embodiment, the GPU , in addition to being an OpenCL\u2122 device, is a \u201cWebGL device\u201d or \u201cOpenGL\u201d device (i.e., a device that may be controlled using functions or methods specified in the WebGL or OpenGL specifications). Further information on OpenGL may be found, for example, in \u201cOpenGL Programming Guide, 7th edition,\u201d which is incorporated herein by reference.","At step s, the first web server  hosts the web page .","At step s, the first computer  accesses or downloads (via the Internet ) the web page . The script  (including the JavaScript\u2122 WebCL commands  and the JavaScript\u2122 WebGL commands) and the image data  may be downloaded onto the first computer .","At step s, the web browser  of the first computer  executes or runs the script  of the web page . The JavaScript\u2122 module  of the web browser  may execute or run any JavaScript\u2122 code  in the script . Also, the WebCL API  may execute or run any WebCL commands . Also, the WebGL API of the web browser  may execute or run any WebGL commands.","At step s, when, or before, a WebGL command is encountered in the script , the script  being run by the web browser  may query whether the WebGL language is supported by the web browser . This querying may be performed by running any appropriate code or script or implementing any appropriate WebGL method.","In this embodiment, the WebGL API is installed on the web browser . In other words, WebGL language is supported by the web browser .","At step s, after it has been determined that WebGL is supported by the web browser , the running of the script  by the web browser  may query what WebGL or OpenGL devices (i.e., what hardware accelerators or other processing devices or modules that may be operated or controlled using the WebGL or OpenGL programming languages) are available to the web browser . This querying may be performed by running any appropriate code or script, using any appropriate WebGL method. In this embodiment, the GPU  is identified as a WebGL or OpenGL device.","At step s, the GPU  is selected as the WebGL or OpenGL device that is to process some or all of the web page data (e.g., is to render the image ).","At step s, the running of the script  (i.e., the Web GL commands) by the web browser  (and the WebGL API) creates a \u201cWebGL context\u201d in or for the GPU . A WebGL context may be an execution context in which WebGL or OpenGL programs or code may be run. A WebGL context may be used to provide a \u201clink\u201d or to allow communication between the GPU  and the web browser . The creation of a WebGL context on the GPU  may be performed by running any appropriate code or script, or by using any appropriate WebGL methods.","At step s, when, or before, a WebCL command  is encountered in the script , the script  being run by the web browser  may query whether the WebCL language is supported by the web browser . This querying may be performed as described at step s of  above.","In this embodiment, the WebCL API  is installed on the web browser .","At step s, after it has been determined that WebCL is supported by the web browser , the running of the script  by the web browser  may query what platform (i.e., operating platform, i.e., the type of the first computer ) the web browser  is running on. It may also be queried what OpenCL\u2122 devices (i.e., what hardware accelerators or other processing devices or modules that may be operated or controlled using the OpenCL\u2122 programming language) are available to the web browser . This querying may be performed as described at step s of  above.","In this embodiment, the GPU  is identified as an OpenCL\u2122 device.","At step s, the GPU  is selected as the OpenCL\u2122 device that is to process some or all of the web page data (e.g., data relating to the image ).","At step s, the running of the script  (i.e., the Web CL commands ) by the web browser  (and the WebCL API ) creates a WebCL context  in or for the GPU . The creation of the WebCL context  may be as described at step s of  above. In other embodiments, the WebCL context  may be created within the previously selected WebGL context (or vice versa). In such a case, the WebCL context may be thought of as a sub-context.","At step s, the script  continues to be executed or run.","This running of the script  may comprise, when the web browser  (which may comprise the WebCL API ) executes or runs a WebCL command , the web browser  (or WebCL API ) calling a corresponding OpenCL\u2122 function  (from the OpenCL\u2122 library ). The OpenCL\u2122 function or method  called when a WebCL command  is executed may be the OpenCL\u2122 function or method  for which that particular WebCL command  is a JavaScript\u2122 binding. The called OpenCL\u2122 functions  may be run or executed within the WebCL context  created within the GPU . Thus, in effect, OpenCL\u2122 code may be run in the context of a WebCL environment within or for the GPU .","WebCL command queues may also be created to facilitate, organize, or manage the transfer of data from the web browser  (i.e., from the web browser's memory, i.e., the \u201chost memory\u201d) to the GPU  (i.e., the OpenCL\u2122 device memory), control execution of programs and kernels, synchronize events, etc. Code or methods that may be used to create command queues are provided below.","Also, the running of the script  may comprise, when the web browser  (which may comprise the WebGL API) executes or runs a WebGL command, the web browser  (or WebGL API) calling a corresponding OpenGL function, e.g., from an OpenGL library that may be part of the WebGL API or accessible by the WebGL API. The called OpenGL functions may be run or executed within the WebGL context created within the GPU .","WebGL command queues may also be create to facilitate, organize, or manage the transfer of data from the web browser  (i.e., from the web browser's memory, i.e., the \u201chost memory\u201d) to the GPU  (i.e., the OpenCL\u2122 device memory), control execution of programs and kernels, synchronize events, etc.","In this embodiment, the script  specifies that data corresponding to the image  are to be processed by the GPU  using both WebCL (or OpenCL\u2122) and WebGL (or OpenGL) methods. For example, the script  may specify that the image data  are to be processed (using WebCL or OpenCL\u2122) by the GPU  before being rendered using (using WebGL or OpenGL) by the GPU . Steps s to s describe how this may be performed.","At step s, the running of the script  by the web browser  creates a memory object in which the image data  are to be placed. This memory object may be or comprise, or in some other way specify, an amount of GPU memory to be reserved for the image data . The created memory object may be a buffer. This buffer may be within both the WebCL context  and the WebGL context. In other words, the buffer into which the image data  are to be transferred is \u201cshared\u201d between the WebCL context  and the WebGL context. Thus, this buffer is hereinafter referred to as the \u201cshared buffer.\u201d",{"@attributes":{"id":"p-0125","num":"0124"},"figref":"FIG. 10","b":["30","54","54","30","50","56","58","58","50","56","58","50","56"]},"The shared buffer  may be a buffer for containing general data or a buffer that may be optimized for containing image data (e.g., data relating to the image ). The shared buffer may be a buffer configured to contain, e.g., either a JavaScript\u2122 or untyped array or a typed array of data.","The sharing of the shared buffer  may be provided by any appropriate code or methods. In other words, the specification of the shared buffer  may be provided by any appropriate code or methods. Example code for providing such interoperability between WebCL and WebGL is provided below.","The shared buffer  may be configured to contain a typed array of data, e.g., as described above for the WebCL memory object .","At step s, data (i.e., image data ) are transferred, from the web browser , into the shared buffer  within the GPU . This transfer of data may be managed or performed using one or more command queues. A \u201cwrite\u201d command may be used to write the image data  into the shared buffer .","At step s, the image data  transferred to the WebCL memory object  in the GPU  are processed by the GPU  using a WebCL or OpenCL\u2122 program being executed in the WebCL context . By running the script , the web browser  may run WebCL commands  that may call OpenCL\u2122 functions  that may be run in the WebCL context  by the GPU  to process the image data .","The processing of the image data  by the GPU  may be managed or performed using one or more command queues.","At step s, the image data  processed using programs running in the WebCL context  may be rendered by the GPU  using a WebGL or OpenGL program being executed in the WebGL context . By running the script , the web browser  may run WebGL commands that may call OpenGL functions that may be run in the WebGL context  by the GPU  to render the processed image data  in the shared buffer .","Steps s and s may, for example, be iterated any number of times.","At step s, the rendered image data  may be transferred back to the web browser .","The transfer of the image data  from the memory of the GPU  (i.e., the shared buffer ) to the web browser  (i.e., the host memory) may be managed or performed using one or more command queues. A \u201cread\u201d command may be used by the web browser  to read processed image data  from the shared buffer .","At step s, the web page  may be displayed by the web browser  on the display  of the first computer  (e.g., to a user of the first computer ). Displaying the web page  may comprise displaying a rendered image that corresponds to or is specified by the processed and rendered image data .","Thus, a process by which the web page  may be displayed by the first computer  is provided.","A web-site developer may use WebCL commands  in accordance with or specified by the WebCL framework (methods and functions of which are provided below) to specify a web page. Advantageously, the WebCL framework may support \u201cextensions\u201d in a similar way to how extensions are supported by the OpenCL\u2122 framework. Such extensions may also be used to specify a web page. An extension to a framework may relate to a capability (e.g., a new capability) of a device (e.g., the GPU ) that may be optionally supported but is not a core capability of that framework. An extension to a framework may, for example, be represented as a class (or interface) that includes one or more methods or attributes. Extensions to the WebCL framework, i.e., WebCL extensions , may be specified, e.g., by users of the WebCL framework. A WebCL extension  may be a general extension to the WebCL framework. Alternatively, a WebCL extension  may be a \u201cproprietary extension\u201d that may be useable only by a certain piece of hardware (e.g., certain accelerator hardware, e.g., a specific CPU or GPU). A WebCL extension  may be made available to other users of the WebCL framework, for example, by storing that extension in a location (e.g., the repository ) that is accessible to other users of the WebCL framework, such that those other users may retrieve, access, or use that WebCL extension .",{"@attributes":{"id":"p-0139","num":"0138"},"figref":"FIG. 11","b":["14","14"]},"At step s, a user of the second computer  inputs an instruction (e.g., by typing a command using the user interface ) into the second computer . This instruction is an instruction to access or download a list of all WebCL extensions  that are available in the repository . This may, for example, be achieved by the user of the second computer  inputting into the second computer , using the user interface , the following command:","var extensions=device.getExtensions( )","At step s, the instruction is sent from the second computer  (e.g., by the processing module ) to the second web server  that hosts the repository .","At step s, the second web server  receives the instruction and returns, to the second computer , a list of the WebCL extensions  that are available in the repository .","This returned list may, for example, be displayed to the user of the second computer  using the user interface .","At step s, the user selects a WebCL extension  that he wishes to use in the specification of the web page . Examples of possible WebCL extensions are provided below.","At step s, the user of the second computer  inputs an instruction (e.g., by typing a command using the user interface ) into the second computer . This instruction is an instruction to access or download the selected WebCL extension  from the repository . This may, for example, be achieved by the user of the second computer  inputting into the second computer , using the user interface , the following command:","var extension_object=device.getExtension(extension_name)","where extension_name is the name of the WebCL extension  that the user of the second computer  wishes returned.","At step s, the instruction is sent from the second computer  (e.g., by the processing module ) to the second web server  that hosts the repository .","At step s, the second web server  receives the instruction and returns, to the second computer , the selected WebCL extension .","At step s, using methods, functions, parameters, etc., specified in the returned WebCL extension , the user of the second computer  may write the web page . This writing of the web page  may further comprise writing one or more WebCL commands  using the WebCL framework. This writing of the web page  may further comprise writing one or more WebGL commands using the WebGL framework. This writing of the web page  may further comprise writing other JavaScript\u2122 commands or specifying other data (e.g., image data ) for the web page .","At step s, the completed (i.e., written) web page may be uploaded, from the second computer , onto the first web server . This may be so that the web page  may be accessed or downloaded via the Internet  (e.g., by the first computer  as described in more detail above with reference to ).","Thus, a process by which the web page  may be specified is provided.","Now described are methods, functions, etc., that may form the WebCL framework (i.e., methods, functions, etc., that may be used to write WebCL commands ). This information will be useful in understanding the above described methods and apparatus.","The WebCL framework may be used for writing web pages, web applications, or computer programs that may be executed on the web browser  or any other device or application that is capable of downloading or accessing data via the Internet .","The WebCL framework provides a set of JavaScript\u2122 bindings to the Khronos\u2122 OpenCL\u2122 framework for heterogeneous parallel computing. The JavaScript\u2122 bindings to OpenCL\u2122 may be thought of as wrapper code between the native code (i.e., OpenCL\u2122) and JavaScript\u2122 code. The JavaScript\u2122 bindings may allow the native code (i.e., OpenCL\u2122) to be called using JavaScript\u2122 code and vice versa.","Similarly to the OpenCL\u2122 framework, the WebCL framework comprises a plurality of document object model (DOM) interfaces. An interface may include one or more methods or one or more attributes that may be used when writing, e.g., a WebCL command  that forms part of a specification for a web page . Also, an instance of an interface is a class or object. Further information on DOM may be found, for example, in \u201cDocument Object Model Core: The DOMString Type,\u201d World Wide Web Consortium (W3C), which is incorporated herein by reference.","In this description, methods of the WebCL framework are specified using IDL or web-IDL. In other words, the first term in the definition of a method or function is the object or value that is returned by the method. The second part of the definition of a method is the function name, i.e., the function, of the method. The third part of the method (which is included in parentheses) is the set of parameters used by the function to return the return first term (i.e., the return object). For example:","ReturnObject getReturnObject(parameters)","means that, using the parameters \u201cparameters,\u201d the function getReturnObject would return an object of the type ReturnObject. The specific object returned would depend on the specific parameters used.","A first interface of the WebCL framework is the WebCLMemory interface. The WebCLMemory interface may derive from (i.e., be a JavaScript\u2122 binding of) the ArrayBuffer interface of OpenCL\u2122. The WebCLMemory interface may be defined (in. as follows:","interface WebCLMemory: ArrayBuffer { }","However, in other embodiments, this interface may have a different definition or an equivalent definition that is expressed differently.","A further interface of the WebCL framework is the ImageFormat interface. The ImageFormat interface may be an associative array with two keys, namely order and data_type. The ImageFormat interface may be defined as follows:",{"@attributes":{"id":"p-0162","num":"0161"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface ImageFormat {"]},{"entry":[{},"order : int;"]},{"entry":[{},"data_type : int;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"A further interface of the WebCL framework is the WebCLMappedRegion interface. Some OpenCL\u2122 methods, when implemented, return values as well as information that may be used to identify the one or more memory regions (e.g., a memory address) from which those values are returned. The WebCLMappedRegion interface of the WebCL framework advantageously tends to \u201chide\u201d the identity of the memory regions from which values are returned. Thus, identifiers for the memory regions tend not to be returned to an application. Advantageously, this may oppose or prevent a malicious party from using the information that identifies a memory region to access parts of the memory of the computer . The WebCLMappedRegion interface may be defined as follows:",{"@attributes":{"id":"p-0164","num":"0163"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"[Callback] interface WebCLMappedRegion {"},{"entry":"ArrayBuffer buffer; \/\/ data in mapped region, may be Undefined"},{"entry":"WebCLEvent event; \/\/ event that may be associated with this buffer, may"},{"entry":"be Undefined"},{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"A further interface of the WebCL framework is the WebCL interface. The WebCL interface includes JavaScript\u2122 bindings for the methods for general objects defined in the OpenCL\u2122 framework. The WebCL interface may be defined as follows:",{"@attributes":{"id":"p-0166","num":"0165"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Callback] interface WebCL {"},{"entry":"[Constructor] WebCL New( );"},{"entry":"WebCLPlatform[ ] getPlatformIDs( );"},{"entry":"WebCLPlatform[ ] getPlatformIDs( );"},{"entry":"WebCLContext createContext(int properties[ ], WebCLDevice devices[ ]);"},{"entry":"WebCLContext createContext(int properties[ ], int device_type);"},{"entry":"void waitForEvents(WebCLEvent events[ ]);"},{"entry":"void unloadCompiler( );"},{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The following list of methods includes methods that may be included in the WebCL interface and describes uses of those methods. Also, in the following list, for each parameter of the methods in the WebCL interface a default value is shown.",{"@attributes":{"id":"p-0168","num":"0167"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"WebCL New( )"},{"entry":"WebCLPlatform[ ] getPlatformIDs( )"},{"entry":"WebCLContext createContext(int properties[ ], WebCLDevice devices[ ])"},{"entry":"WebCLContext createContext(int properties[ ], int device_type)"},{"entry":"void waitForEvents(WebCLEvent events[ ])"},{"entry":"void unloadCompiler( )"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"A further interface of the WebCL framework is the WebCLCommandQueue interface. The WebCLCommandQueue interface includes JavaScript\u2122 bindings for the OpenCL\u2122 methods (defined in the OpenCL\u2122 framework) that relate to command queues (e.g., methods for creating command queues, etc.). The WebCLCommandQueue interface may be defined as follows:",{"@attributes":{"id":"p-0170","num":"0169"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"[Callback] interface WebCL {"},{"entry":"[Constructor] WebCLCommandQueue New( );"},{"entry":"Object getInfo(int name);"},{"entry":"WebCLEvent enqueueNDRangeKernel(WebCLKernel kernel[ ],"},{"entry":"int offsets[1..3], int globals[1..3], int locals[1..3],"},{"entry":"WebCLEvent events[ ]=NULL);"},{"entry":"WebCLEvent enqueueTask(WebCLKernel kernel,"},{"entry":"WebCLEvent events[ ] =NULL);"},{"entry":"WebCLEvent enqueueWriteBuffer(WebCLMemory buffer, boolean"},{"entry":"blocking_write, int offset, int size, Array array, WebCLEvent"},{"entry":"events[ ]=NULL);"},{"entry":"WebCLEvent enqueueWriteBufferRect(WebCLMemory buffer, boolean"},{"entry":"blocking_write, int buffer_offset[1..3],"},{"entry":"int host_offset[1..3], int region[1..3],"},{"entry":"int buffer_row_pitch, int buffer_slice_pitch, int"},{"entry":"host_row_pitch, int host_slice_pitch,"},{"entry":"Array array, WebCLEvent events[ ]=NULL);"},{"entry":"WebCLEvent enqueueReadBuffer(WebCLMemory buffer, boolean"},{"entry":"blocking_read, int offset, int size,"},{"entry":"Array array, WebCLEvent events[ ]=NULL);"},{"entry":"WebCLEvent enqueueReadBufferRect(WebCLMemory buffer, boolean"},{"entry":"blocking_read, int buffer_offset[1..3],"},{"entry":"int\u2003\u2002host_offset[1..3],\u2003\u2002int\u2003\u2002region[1..3],\u2003\u2002int\u2003buffer_row_pitch,"},{"entry":"int buffer_slice_pitch,"},{"entry":"int host_row_pitch, int host_slice_pitch,"},{"entry":"Array array, WebCLEvent events[ ]=NULL);"},{"entry":"WebCLEvent enqueueCopyBuffer(WebCLMemory src, WebCLMemory"},{"entry":"dst, int"},{"entry":"src_offset[1..3], int_dst_offset[1.."},{"entry":"int size, WebCLEvent events[ ]=NULL);"},{"entry":"WebCLEvent enqueueCopyBufferRect(WebCLMemory src,"},{"entry":"WebCLMemory dst,"},{"entry":"int src_origin[1..3], int dst_origin"},{"entry":"int\u2003region[1..3],\u2003int\u2003src_row_pitch[1..3],"},{"entry":"int\u2003src_slice_pitch[1..3],\u2003int\u2003dst_row_pitch[1..3],"},{"entry":"int dst_slice_pitch[1..3], WebCLEvent events[ ]=NULL);"},{"entry":"WebCLEvent enqueueReadImage(WebCLMemory buffer, boolean"},{"entry":"blocking_read, int origin[1..3], int region[1.."},{"entry":"int row_pitch, int slice_pitch, Array array, WebCLEvent"},{"entry":"events[ ]=NULL);"},{"entry":"WebCLEvent enqueueWriteImage(WebCLMemory buffer, boolean"},{"entry":"blocking_write, int origin[1..3], int region[1"},{"entry":"int row_pitch, int slice_pitch, Array array,"},{"entry":"WebCLEvent events[ ]=NULL);"},{"entry":"WebCLEvent enqueueCopyImage(WebCLMemory src, WebCLMemory"},{"entry":"dst, int"},{"entry":"src_origin[1..3], int dst_origin[1..3"},{"entry":"int region[1..3], WebCLEvent events[ ]=NULL);"},{"entry":"WebCLEvent enqueueCopyImageToBuffer(WebCLMemory src_image,"},{"entry":"WebCLMemory dst_buffer, int src_origin[1..3]"},{"entry":"int region[1..3], int dst_offset, WebCLEvent events[ ]=NULL);"},{"entry":"WebCLEvent enqueueCopyBufferToImage(WebCLMemory src_buffer,"},{"entry":"WebCLMemory dst_image, int src_offset,"},{"entry":"int dst_origin[1..3], int region[1..3], WebCLEvent"},{"entry":"events[ ]=NULL);"},{"entry":"WebCLMappedRegion enqueueMapBuffer(WebCLMemory buffer,"},{"entry":"boolean blocking_map, cl_map map_flags, int offs"},{"entry":"int size, WebCLEvent events[ ]=NULL);"},{"entry":"WebCLMappedRegion enqueueMapImage(WebCLMemory image,"},{"entry":"boolean blocking_map, cl_map map_flags, int origin"},{"entry":"int region[1..3], int row_pitch, int slice_pitch, WebCLEvent"},{"entry":"events[ ]=NULL);"},{"entry":"WebCLEvent enqueueUnmapMemObject(WebCLMemory memory,"},{"entry":"WebCLMappedRegion mapped_region, WebCLEvent events"},{"entry":"WebCLEvent enqueueMarker( );"},{"entry":"WebCLEvent enqueueWaitForEvents(WebCLEvent events[ ]);"},{"entry":"void enqueueBarrier( );"},{"entry":"void finish( );"},{"entry":"void flush( );"},{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"In any or all of the methods described herein, e.g., the methods in the WebCLCommandQueue interface, an array object may, for example, be an untyped array buffer or a typed array buffer. For small buffers, it may be may preferable for an array object to be an untyped array buffer (e.g., an ECMAScript array), whereas for larger buffers it may be preferable for an array object to be a typed array (thereby avoiding a relatively large computational cost of converting data from ECMAScript VM space to native memory space).","The following list of methods includes methods that may be included in the WebCLCommandQueue interface and describes uses of those methods. Also, in the following list, for each parameter of the methods in the WebCLCommandQueue interface a default value is provided.\n\n",{"@attributes":{"id":"p-0173","num":"0174"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"int name","type of object returned"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CL_QUEUE_CONTEXT","WebCLContext"]},{"entry":[{},"CL_QUEUE_DEVICE","WebCLDevice"]},{"entry":[{},"CL_QUEUE_REFERENCE_COUNT","Integer"]},{"entry":[{},"CL_QUEUE_PROPERTIES","Integer"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["3. WebCLEvent enqueueNDRangeKernel(WebCLKernel kernel[ ], int offsets[1 . . . 3], int globals[1 . . . 3], int locals[1 . . . 3], WebCLEvent events[ ]=NULL)","4. WebCLEvent enqueueTask(WebCLKernel kernel, WebCLEvent events[ ]=NULL)","5. WebCLEvent enqueueWriteBuffer(WebCLMemory buffer, boolean blocking_write, int offset, int size, Array array, WebCLEvent events[ ]=NULL)","6. WebCLEvent enqueueWriteBufferRect(WebCLMemory buffer, boolean blocking_write, int buffer_offset[1 . . . 3], int host_offset[1 . . . 3], int region[1 . . . 3], int buffer_row_pitch, int buffer_slice_pitch, int host_row_pitch, int host_slice_pitch, Array array, WebCLEvent events[ ]=NULL)","7. WebCLEvent enqueueReadBuffer(WebCLMemory buffer, boolean blocking_read, int offset, int size, WebCLMappedRegion region, WebCLEvent events[ ]=NULL)","8. WebCLEvent enqueueReadBufferRect(WebCLMemory buffer, boolean blocking_read, int buffer_offset[1 . . . 3], int host_offset[1 . . . 3], int region[1 . . . 3], int buffer_row_pitch, int buffer_slice_pitch, int host_row_pitch, int host_slice_pitch, Array array, WebCLEvent events[ ]=NULL)","9. WebCLEvent enqueueCopyBuffer(WebCLMemory src, WebCLMemory dst, int src_offset[1 . . . 3], int dst_offset[1 . . . 3], int size, WebCLEvent events[ ]=NULL)","10. WebCLEvent enqueueCopyBufferRect(WebCLMemory src, WebCLMemory dst, int src_origin[1 . . . 3], int dst_origin[1 . . . 3], int region[1 . . . 3], int src_row_pitch[1 . . . 3], int src_slice_pitch[1 . . . 3], int dst_row_pitch[1 . . . 3], int dst_slice_pitch[1 . . . 3], WebCLEvent events [ ]=NULL)","11. WebCLEvent enqueueReadImage(WebCLMemory buffer, boolean blocking_read, int origin[1 . . . 3], int region[1 . . . 3], int row_pitch, int slice_pitch, Array array, WebCLEvent events [ ]=NULL)","12. WebCLEvent enqueueWriteImage(WebCLMemory buffer, boolean blocking_write, int origin[1 . . . 3], int region[1 . . . 3], int row_pitch, int slice_pitch, Array array, WebCLEvent events [ ]=NULL)","13. WebCLEvent enqueueCopyImage(WebCLMemory src, WebCLMemory dst, int src_origin[1 . . . 3], int dst_origin[1 . . . 3], int region[1 . . . 3], WebCLEvent events[ ]=NULL)","14. WebCLEvent enqueueCopyImageToBuffer(WebCLMemory src_image, WebCLMemory dst_buffer, int src_origin[1 . . . 3], int region[1 . . . 3], int dst_offset, WebCLEvent events[ ]=NULL)","15. WebCLEvent enqueueCopyBufferToImage(WebCLMemory src_buffer, WebCLMemory dst_image, int src_offset, int dst_origin[1 . . . 3], int region[1 . . . 3], WebCLEvent events[ ]=NULL)","16. WebCLMappedRegion enqueueMapBuffer(WebCLMemory buffer, boolean blocking_map, cl_map map_flags, int offset, int size, WebCLEvent events[ ]=NULL)","17. WebCLMappedRegion enqueueMapImage(WebCLMemory image, boolean blocking_map, cl_map map_flags, int origin[1 . . . 3], int region[1 . . . 3], int row_pitch, int slice_pitch, WebCLEvent events[ ]=NULL)","18. WebCLEvent enqueueUnmapMemObj ect(WebCLMemory memory, WebCLMappedRegion mapped_region, WebCLEvent events[ ]=NULL)","19. WebCLEvent enqueueMarker( )","20. WebCLEvent enqueueWaitForEvents(WebCLEvent events[ ])","21. void enqueueBarrier( )","22. void finish( )","23. void flush( )"]}},"The above provided methods of the WebCLCommandQueue interface may be defined or implemented in a different way. For example, the WebCLCommandQueue interface may be implemented using associative arrays (e.g., as for the ImageFormat interface defined earlier above), i.e., as opposed to implementing the WebCLCommandQueue interface as a list of parameters. For example, instead of using a long list of arguments, as defined in the OpenCL\u2122 1.1 specification, the following further definition of the WebCLCommandQueue interface use an associative array \u201cWebCLRegion\u201d to specify an area being read or written within an ArrayBuffer\/WebCLMemory:",{"@attributes":{"id":"p-0175","num":"0197"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"[Callback] interface WebCL {"},{"entry":"[Constructor] WebCLCommandQueue New( )"},{"entry":"Object getInfo(int name);"},{"entry":"WebCLEvent\u2003\u2002enqueueNDRangeKernel(WebCLKernel\u2003\u2002kernel[ ],"},{"entry":"int offsets[1..3], int globals[1..3], int locals[1..3],"},{"entry":"WebCLEvent event_wait_list[ ]=NULL);"},{"entry":"WebCLEvent enqueueTask(WebCLKernel kernel,"},{"entry":"WebCLEvent events[ ] =NULL);"},{"entry":"WebCLEvent\u2003\u2002enqueueWriteBuffer(WebCLMemory\u2003\u2002buffer,"},{"entry":"boolean blocking_write,"},{"entry":"WebCLRegion array, int size, WebCLEvent event_wait_list[ ]=NULL);"},{"entry":"WebCLEvent\u2003\u2002enqueueReadBuffer(WebCLMemory\u2003\u2002buffer,"},{"entry":"boolean blocking_read,"},{"entry":"WebCLRegion array, WebCLEvent event_wait_list[ ]=NULL);"},{"entry":"WebCLEvent enqueueCopyBuffer(WebCLRegion src, WebCLRegion dst,"},{"entry":"WebCLEvent event_wait_list[ ]=NULL);"},{"entry":"WebCLEvent\u2003\u2002enqueueCopyImageToBuffer(WebCLRegion"},{"entry":"src_image, WebCLMemory dst_buffer,"},{"entry":"WebCLEvent event_wait_list[ ]=NULL);"},{"entry":"WebCLEvent\u2003\u2002enqueueCopyBufferToImage(WebCLMemory"},{"entry":"src_buffer, WebCLRegion dst_image,"},{"entry":"WebCLEvent event_wait_list[ ]=NULL);"},{"entry":"WebCLMappedRegion enqueueMapBuffer(WebCLRegion buffer, boolean"},{"entry":"blocking_map, cl_map map_flags,"},{"entry":"WebCLEvent event_wait_list[ ]=NULL);"},{"entry":"WebCLEvent\u2003\u2002enqueueUnmapMemObject(WebCLMemory\u2003\u2002memory,"},{"entry":"WebCLMappedRegion\u2003\u2003\u2003\u2003mapped_region,\u2003\u2003\u2003\u2003WebCLEvent"},{"entry":"event_wait_list[ ]=NULL);"},{"entry":"WebCLEvent enqueueMarker( );"},{"entry":"WebCLEvent enqueueWaitForEvents(WebCLEvent event_wait_list[ ]);"},{"entry":"void enqueueBarrier( );"},{"entry":"void finish( );"},{"entry":"void flush( );"},{"entry":"\/\/ WebGL interop. (this is a subset of OpenGL interop. extensions)"},{"entry":"WebCLEvent\u2003\u2002enqueueAcquireGLObjects(WebCLMemory"},{"entry":"objects[ ], WebCLEvent event_wait_list[ ]=NULL);"},{"entry":"WebCLEvent\u2003\u2002enqueueReleaseGLObjects(WebCLMemory\u2003\u2002objects[ ],"},{"entry":"WebCLEvent event_wait_list[ ]=NULL);"},{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The following list of methods includes methods that may be included in the further WebCLCommandQueue interface and describes uses of those methods. In the following list, for each parameter of the methods in the WebCLCommandQueue interface a default value is provided. Also, in the following list, WebCLRegion specifies a memory region that may be used. This advantageously tends to simplify the number of methods in the WebCLCommandQueue object.\n\n","A further interface of the WebCL framework is the WebCLContext interface. The WebCLContext interface includes JavaScript\u2122 bindings for the OpenCL\u2122 methods relating to contexts (e.g., methods for creating contexts, etc). The WebCLContext interface may be defined as follows:",{"@attributes":{"id":"p-0178","num":"0218"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"[Callback] interface WebCLContext {"},{"entry":"[Constructor] WebCLContext New(int device_type, Object"},{"entry":"properties[ ]);"},{"entry":"Object getInfo(int name);"},{"entry":"WebCLProgram createProgram(String source);"},{"entry":"WebCLCommandQueue createCommandQueue(WebCLDevice device, int"},{"entry":"properties[ ]);"},{"entry":"WebCLMemory createBuffer(int flags, int size);"},{"entry":"WebCLMemory createImage2D(int flags, ImageFormat format, int width,"},{"entry":"int height, int row_pitch);"},{"entry":"WebCLMemory createImage3D(int flags, ImageFormat format, int width,"},{"entry":"int height, int depth, int row_pitc"},{"entry":"WebCLSampler createSampler(boolean normalized_coords, int"},{"entry":"addressing_mode, int filer_mode);"},{"entry":"ImageFormat[ ] getSupportedImageFormats(int flags, int image_type);"},{"entry":"WebCLEvent createUserEvent( );"},{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The following list of methods includes methods that may be included in the WebCLContext interface and describes uses of those methods. Also, in the following list, for each parameter of the methods in the WebCLContext interface a default value is provided.\n\n",{"@attributes":{"id":"p-0180","num":"0222"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["name","ECMAScript returned type"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CL_CONTEXT_REFERENCE_COUNT","Integer"]},{"entry":["CL_CONTEXT_NUM_DEVICES","Integer"]},{"entry":["CL_CONTEXT_DEVICES","WebCLDevice[ ]"]},{"entry":["CL_CONTEXT_PROPERTIES","Integer[ ]"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":["3. WebCLProgram createProgram(String source)\n\nThis method may be used to create a WebCL Program from a UTF-8 string.\n","4. WebCLProgram createProgram(ArrayBuffer binary)\n\nThis method may be used to create a WebCL Program from a binary source.\n","5. WebCLCommandQueue createCommandQueue(WebCLDevice device, int properties[ ])","6. WebCLMemory createBuffer(int flags, int size)\n\nThis method is used to create the WebCL memory object  (i.e., WebCL memory buffer within the WebCL context ).\n","7. WebCLMemory createImage2D(int flags, ImageFormat format, int width, int height, int row_pitch)","8. WebCLMemory createImage3D(int flags, ImageFormat format, int width, int height, int depth, int row_pitch, int slice_pitch)","9. WebCLSampler createSampler(boolean normalized_coords, int addressing_mode, int Filer_mode)","10. ImageFormat[ ] getSupportedImageFormats(int flags, int image_type)","11. WebCLEvent createUserEvent( )"]}},"A further interface of the WebCL framework is the WebCLDevice interface. The WebCLDevice interface includes JavaScript\u2122 bindings for the OpenCL\u2122 methods relating to device objects (e.g., querying what WebCL or OpenCL\u2122 devices are available, etc). The WebCLDevice interface may be defined as follows:",{"@attributes":{"id":"p-0182","num":"0233"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[Callback] interface WebCLDevice {"]},{"entry":[{},"[Constructor] WebCLDevice New( )"]},{"entry":[{},"Object getInfo(int name);"]},{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The following list of methods includes methods that may be included in the WebCLDevice interface and describes uses of those methods. Also, in the following list, for each parameter of the methods in the WebCLDevice interface a default value is provided.\n\n",{"@attributes":{"id":"p-0184","num":"0237"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":[{},"ECMAScript"]},{"entry":["int name","returned type"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CL_DEVICE_TYPE","Integer"]},{"entry":["CL_DEVICE_MAX_COMPUTE_UNITS","Integer"]},{"entry":["CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS","Integer"]},{"entry":["CL_DEVICE_MAX_WORK_ITEM_SIZES","Integer[3]"]},{"entry":["CL_DEVICE_MAX_WORK_GROUP_SIZE","Integer"]},{"entry":["CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR","Integer"]},{"entry":"CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT"},{"entry":"CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT"},{"entry":"CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG"},{"entry":"CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT"},{"entry":"CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE"},{"entry":"CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF"},{"entry":"CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR"},{"entry":"CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT"},{"entry":"CL_DEVICE_NATIVE_VECTOR_WIDTH_INT"},{"entry":"CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG"},{"entry":"CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT"},{"entry":"CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE"},{"entry":"CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF"},{"entry":["CL_DEVICE_MAX_CLOCK_FREQUENCY","Integer"]},{"entry":["CL_DEVICE_ADDRESS_BITS","Integer"]},{"entry":["CL_DEVICE_MAX_MEM_ALLOC_SIZE","Integer"]},{"entry":["CL_DEVICE_IMAGE_SUPPORT","Boolean"]},{"entry":["CL_DEVICE_MAX_READ_IMAGE_ARGS","Integer"]},{"entry":["CL_DEVICE_MAX_WRITE_IMAGE_ARGS","Integer"]},{"entry":["CL_DEVICE_IMAGE2D_MAX_WIDTH","Integer"]},{"entry":"CL_DEVICE_IMAGE2D_MAX_HEIGHT"},{"entry":"CL_DEVICE_IMAGE3D_MAX_WIDTH"},{"entry":"CL_DEVICE_IMAGE3D_MAX_HEIGHT"},{"entry":"CL_DEVICE_IMAGE3D_MAX_DEPTH"},{"entry":["CL_DEVICE_MAX_SAMPLERS","Integer"]},{"entry":["CL_DEVICE_MAX_PARAMETER_SIZE","Integer"]},{"entry":["CL_DEVICE_MEM_BASE_ADDR_ALIGN","Integer"]},{"entry":["CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE","Integer"]},{"entry":["CL_DEVICE_SINGLE_FP_CONFIG","Integer"]},{"entry":["CL_DEVICE_GLOBAL_MEM_CACHE_TYPE","Integer"]},{"entry":["CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE","Integer"]},{"entry":["CL_DEVICE_GLOBAL_MEM_CACHE_SIZE","Integer"]},{"entry":["CL_DEVICE_GLOBAL_MEM_SIZE","Integer"]},{"entry":["CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE","Integer"]},{"entry":["CL_DEVICE_MAX_CONSTANT_ARGS","Integer"]},{"entry":["CL_DEVICE_LOCAL_MEM_TYPE","Integer"]},{"entry":["CL_DEVICE_LOCAL_MEM_SIZE","Integer"]},{"entry":["CL_DEVICE_ERROR_CORRECTION_SUPPORT","Boolean"]},{"entry":["CL_DEVICE_HOST_UNIFIED_MEMORY","Boolean"]},{"entry":["CL_DEVICE_PROFILING_TIMER_RESOLUTION","Integer"]},{"entry":["CL_DEVICE_ENDIAN_LITTLE","Boolean"]},{"entry":["CL_DEVICE_AVAILABLE","Boolean"]},{"entry":["CL_DEVICE_COMPILER_AVAILABLE","Boolean"]},{"entry":["CL_DEVICE_EXECUTION_CAPABILITIES","Integer"]},{"entry":["CL_DEVICE_QUEUE_PROPERTIES","Integer"]},{"entry":["CL_DEVICE_PLATFORM","WebCLPlatform"]},{"entry":["CL_DEVICE_NAME","String"]},{"entry":"CL_DEVICE_VENDOR"},{"entry":"CL_DRIVER_VERSION"},{"entry":"CL_DEVICE_PROFILE"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"A further interface of the WebCL framework is the WebCLEvent interface. The WebCLEvent interface includes JavaScript\u2122 bindings for the OpenCL\u2122 methods relating to Event objects. Furthermore, the WebCLEvent interface includes JavaScript\u2122 bindings for the methods for UserEvent objects defined in the OpenCL\u2122 framework. The WebCLEvent interface may be defined as follows:",{"@attributes":{"id":"p-0186","num":"0239"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[Callback] interface WebCLEvent {"]},{"entry":[{},"[Constructor] WebCLEvent New( );"]},{"entry":[{},"Object getInfo(int name);"]},{"entry":[{},"Object getProfilingInfo(int name);"]},{"entry":[{},"void setUserEventStatus(int status);"]},{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The following list of methods includes methods that may be included in the WebCLEvent interface and describes uses of those methods. Also, in the following list, for each parameter of the methods in the WebCLEvent interface a default value is provided.\n\n",{"@attributes":{"id":"p-0188","num":"0243"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["int name","ECMAScript returned type"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CL_EVENT_COMMAND_QUEUE","WebCLCommandQueue"]},{"entry":["CL_EVENT_CONTEXT","WebCLContext"]},{"entry":["CL_EVENT_COMMAND_TYPE","Integer"]},{"entry":["CL_EVENT_COMMAND_EXECUTION_STATUS","Integer"]},{"entry":["CL_EVENT_REFERENCE_COUNT","Integer"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":"3. Object getProfilingInfo(int name)\n\nThis method may return the value for the passed int name. The type of value returned is the \u201cnatural\u201d type for the requested int name, as specified in the following table:\n"}},{"@attributes":{"id":"p-0189","num":"0245"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["int name","ECMAScript returned type"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CL_PROFILING_COMMAND_QUEUED","Integer"]},{"entry":["CL_PROFILING_COMMAND_SUBMIT","Integer"]},{"entry":["CL_PROFILING_COMMAND_START","Integer"]},{"entry":["CL_PROFILING_COMMAND_END","Integer"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":"4. void setUserEventStatus(int status)"}},"A further interface of the WebCL framework is the WebCLKernel interface. The WebCLKernel interface includes JavaScript\u2122 bindings for the OpenCL\u2122 methods related to Kernel objects. The WebCLKernel interface may be defined as follows:",{"@attributes":{"id":"p-0191","num":"0248"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[Callback] interface WebCLKernel {"]},{"entry":[{},"[Constructor] WebCLKernel New( );"]},{"entry":[{},"Object getInfo(int name);"]},{"entry":[{},"Object getWorkgroupInfo(int name);"]},{"entry":[{},"void setArg(int index, Object value);"]},{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The following list of methods includes methods that may be included in the WebCLKernel interface and describes uses of those methods. Also, in the following list, for each parameter of the methods in the WebCLKernel interface a default value is provided.\n\n",{"@attributes":{"id":"p-0193","num":"0252"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["int name","ECMAScript returned type"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CL_KERNEL_FUNCTION_NAME","String"]},{"entry":["CL_KERNEL_NUM_ARGS","Integer"]},{"entry":["CL_KERNEL_REFERENCE_COUNT","Integer"]},{"entry":["CL_KERNEL_CONTEXT","WebCLContext"]},{"entry":["CL_KERNEL_PROGRAM","WebCLProgram"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0011","list-style":"none"},"li":["3. Object getWorkgroupInfo(int name)\n\nThis method may return an Integer or Integer[1 . . . 3] depending on the name queried.\n","4. void setArg(int index, Object value)\n\nIn this embodiment, depending on the argument being set, the exact native data type of value is not inferred from JavaScript\u2122. Also, it is typically not known if an argument is _global or _local, without inspection of the kernel method's code. A user (e.g., a software developer) may be facilitated to specify a data type of the argument of this method. This may be done by using bitfield value, which may be called \u201ctype.\u201d In some embodiments, the data types of the arguments described by using this type value are defined in OpenCL\u2122 1.1 Specification, Table 6.1 (scalar types), Table 6.2 (vector\/array types), and Table 6.4 (reserved data types), which are hereby incorporated by reference in their entirety. Table 6.3 of the OpenCL\u2122 1.1 Specification (also incorporated herein by reference) defines WebCLObjects data types such as image2D, image3D, sampler, and event, which are WebCLMemory objects, WebCLSampler or WebCLEvent, respectively. The data types of the arguments described by the type value (webcl.Type) may be as provided in the following table:\n"]}},{"@attributes":{"id":"p-0194","num":"0255"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["webcl.Type","Value","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["is_local","1 << 0","_local or _global argument"]},{"entry":["is","1 << 1","A pointer type"]},{"entry":["is unsigned","1 << 2","unsigned type"]},{"entry":["is memory","1 << 3","A WebCLMemory\/WebCLSampler\/WebCLEvent"]},{"entry":["object",{},"object"]},{"entry":["is complex","1 << 4","A complex value"]},{"entry":["is imaginary","1 << 5","an imaginary value"]},{"entry":["bool","1 << 8","A boolean value"]},{"entry":["char","1 << 9","an 8-bit integer value"]},{"entry":["short","1 << 10","A 16-bit integer value"]},{"entry":["int","1 << 11","A 32-bit integer value"]},{"entry":["long","1 << 12","A 64-bit integer value"]},{"entry":["float","1 << 13","A 32-bit IEEE 754 floating-point value"]},{"entry":["half float","1 << 14","A 16-bit IEEE 754-2008 floating-point value"]},{"entry":["double","1 << 15","A double-precision floating-point value"]},{"entry":["quad","1 << 16","A 128-bit floating-point value"]},{"entry":["long long","1 << 17","A 128-bit integer value"]},{"entry":["2","1 << 20","A 2-value vector"]},{"entry":["3","1 << 21","A 3-value vector"]},{"entry":["4","1 << 22","A 4-value vector"]},{"entry":["8","1 << 23","A 8-value vector"]},{"entry":["16","1 << 24","A 16-value vector"]},{"entry":["2xn","1 << 25","A 2xn-value matrix"]},{"entry":["3xn","1 << 26","A 3xn-value matrix"]},{"entry":["4xn","1 << 27","A 4xn-value matrix"]},{"entry":["8xn","1 << 28","A 8xn-value matrix"]},{"entry":["16xn","1 << 29","A 16xn-value matrix"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":"Where i << j means i \u201cleft shifted\u201d by j."}]}}}}},"A further interface of the WebCL framework is the WebCLMemory interface. The WebCLMemory interface includes JavaScript\u2122 bindings for the methods related to memory objects defined in the OpenCL\u2122 framework (e.g., methods for creating memory objects, etc.). As described in more detail above, when using the WebCL framework, a memory object (e.g., the WebCL memory object ) may be a typed array. Further information on Typed Arrays may be found, for example, in \u201cTyped Array Specification: Editor's Draft,\u201d July, 2012, which is incorporated herein by reference. The WebCLMemory interface may be defined as follows:",{"@attributes":{"id":"p-0196","num":"0257"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[Callback] interface WebCLMemory {"]},{"entry":[{},"[Constructor] WebCLMemory New( );"]},{"entry":[{},"Object getInfo(int name);"]},{"entry":[{},"Object getImageInfo(int name);"]},{"entry":[{},"WebCLMemory createSubBuffer(int flags, int type, Object region);"]},{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The following list of methods includes methods that may be included in the WebCLMemory interface and describes uses of those methods. Also, in the following list, for each parameter of the methods in the WebCLMemory interface a default value is provided.\n\n",{"@attributes":{"id":"p-0198","num":"0261"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["int name","ECMAScript returned type"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CL_MEM_TYPE","Integer"]},{"entry":["CL_MEM_FLAGS","Integer"]},{"entry":["CL_MEM_SIZE","Integer"]},{"entry":["CL_MEM_HOST_PTR","ArrayBuffer"]},{"entry":["CL_MEM_MAP_COUNT","Integer"]},{"entry":["CL_MEM_REFERENCE_COUNT","Integer"]},{"entry":["CL_MEM_CONTEXT","WebCLContext"]},{"entry":["CL_MEM_ASSOCIATED_MEMOBJECT","WebCLMemory"]},{"entry":["CL_MEM_OFFSET","Integer"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0013","list-style":"none"},"li":"4. WebCLMemory createSubBuffer(int flags, int type, Object region)\n\nIn this method, the region object may be an associative array {origin: int, size: int} and may be valid for CL_BUFFER_CREATE_TYPE_REGION type. This method may create a sub-buffer from an existing buffer.\n"}},"A further interface of the WebCL framework is the WebCLPlatform interface. The WebCLPlatform interface includes JavaScript\u2122 bindings for the OpenCL\u2122 methods relating to platform objects (e.g., querying what platform or platform type the script is being run on). The WebCLPlatform interface may be defined as follows:",{"@attributes":{"id":"p-0200","num":"0264"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[Callback] interface WebCLPlatform {"]},{"entry":[{},"[Constructor] WebCLPlatform New( );"]},{"entry":[{},"Object getInfo(int name);"]},{"entry":[{},"WebCLDevice[ ] getDevices(int device_type);"]},{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The following list of methods includes methods that may be included in the WebCLPlatform interface and describes uses of those methods. Also, in the following list, for each parameter of the methods in the WebCLPlatform interface a default value is provided.\n\n",{"@attributes":{"id":"p-0202","num":"0268"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"name","ECMAScript returned type"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CL_PLATFORM_PROFILE","String"]},{"entry":[{},"CL_PLATFORM_VERSION","String"]},{"entry":[{},"CL_PLATFORM_NAME","String"]},{"entry":[{},"CL_PLATFORM_VENDOR","String"]},{"entry":[{},"CL_PLATFORM_EXTENSIONS","String"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0015","list-style":"none"},"li":"3. WebCLDevice[ ] getDevices(int device_type)"}},"A further interface of the WebCL framework is the WebCLProgram interface. The WebCLProgram interface includes JavaScript\u2122 bindings for the OpenCL\u2122 methods relating to Program objects. The WebCLProgram interface may be defined as follows:",{"@attributes":{"id":"p-0204","num":"0271"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[Callback] interface WebCLProgram {"]},{"entry":[{},"[Constructor] WebCLProgram New(String source);"]},{"entry":[{},"[Constructor] WebCLProgram New(ArrayBuffer binary);"]},{"entry":[{},"Object getInfo(int name);"]},{"entry":[{},"Object getBuildInfo(WebCLDevice device, int name);"]},{"entry":[{},"void build(WebCLDevice devices[ ], String options);"]},{"entry":[{},"WebCLKernel createKernel(String name);"]},{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The following list of methods includes methods that may be included in the WebCLProgram interface and describes uses of those methods. Also, in the following list, for each parameter of the methods in the WebCLProgram interface a default value is provided.\n\n",{"@attributes":{"id":"p-0206","num":"0276"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","ECMAScript returned type"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CL_PROGRAM_REFERENCE_COUNT","Integer"]},{"entry":["CL_PROGRAM_CONTEXT","WebCLContext"]},{"entry":["CL_PROGRAM_NUM_DEVICES","Integer"]},{"entry":["CL_PROGRAM_DEVICES","WebCLDevice"]},{"entry":["CL_PROGRAM_SOURCE","String"]},{"entry":["CL_PROGRAM_BINARY_SIZES","Integer[ ]"]},{"entry":["CL_PROGRAM_BINARIES[ ]","ArrayBuffer[ ]"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0017","list-style":"none"},"li":["4. Object getBuildInfo(WebCLDevice device, int name)\n\nThis method returns Integer or String values depending on the name queried.\n","5. void build(WebCLDevice devices[ ], String options=NULL)","6. WebCLKernel createKernel(String name)"]}},"A further interface of the WebCL framework is the WebCLSampler interface. The WebCLSampler interface includes JavaScript\u2122 bindings for the OpenCL\u2122 methods for Sampler objects. The WebCLSampler interface may be defined as follows:",{"@attributes":{"id":"p-0208","num":"0281"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[Callback] interface WebCLSampler {"]},{"entry":[{},"[Constructor] WebCLSampler New( );"]},{"entry":[{},"Object getInfo(int name);"]},{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The following list of methods includes methods that may be included in the WebCLSampler interface and describes uses of those methods. Also, in the following list, for each parameter of the methods in the WebCLSampler interface a default value is provided.\n\n",{"@attributes":{"id":"p-0210","num":"0285"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},{},"ECMAScript"]},{"entry":[{},"int name","returned type"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CL_SAMPLER_REFERENCE_COUNT","Integer"]},{"entry":[{},"CL_SAMPLER_CONTEXT","WebCLContext"]},{"entry":[{},"CL_SAMPLER_NORMALIZED_COORDS","Boolean"]},{"entry":[{},"CL_SAMPLER_ADDRESSING_MODE","Integer"]},{"entry":[{},"CL_SAMPLER_FILTER_MODE","Integer"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The WebCL framework may include a plurality of constant values or constants. In some embodiments, the constants of the WebCL framework may be the same as those defined in the OpenCL\u2122 framework (including optional extensions). However, in other embodiments, one or more of the constants of the WebCL framework may be different from defined in the OpenCL\u2122 framework. For completeness, the constants of the WebCL framework in this embodiment are as follows:",{"@attributes":{"id":"p-0212","num":"0287"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"namespace webcl {"},{"entry":"\/* Error Codes *\/"},{"entry":"CL_SUCCESS =0;"},{"entry":"CL_DEVICE_NOT_FOUND =\u22121;"},{"entry":"CL_DEVICE_NOT_AVAILABLE =\u22122;"},{"entry":"CL_COMPILER_NOT_AVAILABLE =\u22123;"},{"entry":"CL_MEM_OBJECT_ALLOCATION_FAILURE =\u22124;"},{"entry":"CL_OUT_OF_RESOURCES =\u22125;"},{"entry":"CL_OUT_OF_HOST_MEMORY =\u22126;"},{"entry":"CL_PROFILING_INFO_NOT_AVAILABLE =\u22127;"},{"entry":"CL_MEM_COPY_OVERLAP =\u22128;"},{"entry":"CL_IMAGE_FORMAT_MISMATCH =\u22129;"},{"entry":"CL_IMAGE_FORMAT_NOT_SUPPORTED =\u221210;"},{"entry":"CL_BUILD_PROGRAM_FAILURE =\u221211;"},{"entry":"CL_MAP_FAILURE =\u221212;"},{"entry":"CL_MISALIGNED_SUB_BUFFER_OFFSET \u221213;"},{"entry":"CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST =\u221214;"},{"entry":"CL_INVALID_VALUE =\u221230;"},{"entry":"CL_INVALID_DEVICE_TYPE =\u221231;"},{"entry":"CL_INVALID_PLATFORM =\u221232;"},{"entry":"CL_INVALID_DEVICE =\u221233;"},{"entry":"CL_INVALID_CONTEXT =\u221234;"},{"entry":"CL_INVALID_QUEUE_PROPERTIES =\u221235;"},{"entry":"CL_INVALID_COMMAND_QUEUE =\u221236;"},{"entry":"CL_INVALID_HOST_PTR =\u221237;"},{"entry":"CL_INVALID_MEM_OBJECT =\u221238;"},{"entry":"CL_INVALID_IMAGE_FORMAT_DESCRIPTOR =\u221239;"},{"entry":"CL_INVALID_IMAGE_SIZE =\u221240;"},{"entry":"CL_INVALID_SAMPLER =\u221241;"},{"entry":"CL_INVALID_BINARY =\u221242;"},{"entry":"CL_INVALID_BUILD_OPTIONS =\u221243;"},{"entry":"CL_INVALID_PROGRAM =\u221244;"},{"entry":"CL_INVALID_PROGRAM_EXECUTABLE =\u221245;"},{"entry":"CL_INVALID_KERNEL_NAME =\u221246;"},{"entry":"CL_INVALID_KERNEL_DEFINITION =\u221247;"},{"entry":"CL_INVALID_KERNEL =\u221248;"},{"entry":"CL_INVALID_ARG_INDEX =\u221249;"},{"entry":"CL_INVALID_ARG_VALUE =\u221250;"},{"entry":"CL_INVALID_ARG_SIZE =\u221251;"},{"entry":"CL_INVALID_KERNEL_ARGS =\u221252;"},{"entry":"CL_INVALID_WORK_DIMENSION =\u221253;"},{"entry":"CL_INVALID_WORK_GROUP_SIZE =\u221254;"},{"entry":"CL_INVALID_WORK_ITEM_SIZE =\u221255;"},{"entry":"CL_INVALID_GLOBAL_OFFSET =\u221256;"},{"entry":"CL_INVALID_EVENT_WAIT_LIST =\u221257;"},{"entry":"CL_INVALID_EVENT =\u221258;"},{"entry":"CL_INVALID_OPERATION =\u221259;"},{"entry":"CL_INVALID_GL_OBJECT =\u221260;"},{"entry":"CL_INVALID_BUFFER_SIZE =\u221261;"},{"entry":"CL_INVALID_MIP_LEVEL =\u221262;"},{"entry":"CL_INVALID_GLOBAL_WORK_SIZE =\u221263;"},{"entry":"CL_INVALID_PROPERTY =\u221264;"},{"entry":"\/* OpenCL(TM) Version *\/"},{"entry":"CL_VERSION_1_0 =1;"},{"entry":"CL_VERSION_1_1 =1;"},{"entry":"\/* cl_bool *\/"},{"entry":"CL_FALSE =0;"},{"entry":"CL_TRUE =1;"},{"entry":"\/* cl_platform_info *\/"},{"entry":"CL_PLATFORM_PROFILE =0x0900;"},{"entry":"CL_PLATFORM_VERSION =0x0901;"},{"entry":"CL_PLATFORM_NAME =0x0902;"},{"entry":"CL_PLATFORM_VENDOR =0x0903;"},{"entry":"CL_PLATFORM_EXTENSIONS =0x0904;"},{"entry":"\/* cl device type - bitfield *\/"},{"entry":"CL_DEVICE_TYPE_DEFAULT =(1 << 0);"},{"entry":"CL_DEVICE_TYPE_CPU =(1 << 1);"},{"entry":"CL_DEVICE_TYPE_GPU =(1 << 2);"},{"entry":"CL_DEVICE_TYPE_ACCELERATOR =(1 << 3);"},{"entry":"CL_DEVICE_TYPE_ALL =0xFFFFFFFF;"},{"entry":"\/* cl_device_info *\/"},{"entry":"CL_DEVICE_TYPE =0x1000;"},{"entry":"CL_DEVICE_VENDOR_ID =0x1001;"},{"entry":"CL_DEVICE_MAX_COMPUTE_UNITS =0x1002;"},{"entry":"CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS =0x1003;"},{"entry":"CL_DEVICE_MAX_WORK_GROUP_SIZE =0x1004;"},{"entry":"CL_DEVICE_MAX_WORK_ITEM_SIZES =0x1005;"},{"entry":"CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR =0x1006;"},{"entry":"CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT =0x1007;"},{"entry":"CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT =0x1008;"},{"entry":"CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG =0x1009;"},{"entry":"CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT =0x100A;"},{"entry":"CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE =0x100B;"},{"entry":"CL_DEVICE_MAX_CLOCK_FREQUENCY =0x100C;"},{"entry":"CL_DEVICE_ADDRESS_BITS =0x100D;"},{"entry":"CL_DEVICE_MAX_READ_IMAGE_ARGS =0x100E;"},{"entry":"CL_DEVICE_MAX_WRITE_IMAGE_ARGS =0x100F;"},{"entry":"CL_DEVICE_MAX_MEM_ALLOC_SIZE =0x1010;"},{"entry":"CL_DEVICE_IMAGE2D_MAX_WIDTH =0x1011;"},{"entry":"CL_DEVICE_IMAGE2D_MAX_HEIGHT =0x1012;"},{"entry":"CL_DEVICE_IMAGE3D_MAX_WIDTH =0x1013;"},{"entry":"CL_DEVICE_IMAGE3D_MAX_HEIGHT =0x1014;"},{"entry":"CL_DEVICE_IMAGE3D_MAX_DEPTH =0x1015;"},{"entry":"CL_DEVICE_IMAGE_SUPPORT =0x1016;"},{"entry":"CL_DEVICE_MAX_PARAMETER_SIZE =0x1017;"},{"entry":"CL_DEVICE_MAX_SAMPLERS =0x1018;"},{"entry":"CL_DEVICE_MEM_BASE_ADDR_ALIGN =0x1019;"},{"entry":"CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE =0x101A;"},{"entry":"CL_DEVICE_SINGLE_FP_CONFIG =0x101B;"},{"entry":"CL_DEVICE_GLOBAL_MEM_CACHE_TYPE =0x101C;"},{"entry":"CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE =0x101D;"},{"entry":"CL_DEVICE_GLOBAL_MEM_CACHE_SIZE =0x101E;"},{"entry":"CL_DEVICE_GLOBAL_MEM_SIZE =0x101F;"},{"entry":"CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE =0x1020;"},{"entry":"CL_DEVICE_MAX_CONSTANT_ARGS =0x1021;"},{"entry":"CL_DEVICE_LOCAL_MEM_TYPE =0x1022;"},{"entry":"CL_DEVICE_LOCAL_MEM_SIZE =0x1023;"},{"entry":"CL_DEVICE_ERROR_CORRECTION_SUPPORT =0x1024;"},{"entry":"CL_DEVICE_PROFILING_TIMER_RESOLUTION =0x1025;"},{"entry":"CL_DEVICE_ENDIAN_LITTLE =0x1026;"},{"entry":"CL_DEVICE_AVAILABLE =0x1027;"},{"entry":"CL_DEVICE_COMPILER_AVAILABLE =0x1028;"},{"entry":"CL_DEVICE_EXECUTION_CAPABILITIES =0x1029;"},{"entry":"CL_DEVICE_QUEUE_PROPERTIES =0x102A;"},{"entry":"CL_DEVICE_NAME =0x102B;"},{"entry":"CL_DEVICE_VENDOR =0x102C;"},{"entry":"CL_DRIVER_VERSION =0x102D;"},{"entry":"CL_DEVICE_PROFILE =0x102E;"},{"entry":"CL_DEVICE_VERSION =0x102F;"},{"entry":"CL_DEVICE_EXTENSIONS =0x1030;"},{"entry":"CL_DEVICE_PLATFORM =0x1031;"},{"entry":"CL_DEVICE_DOUBLE_FP_CONFIG =0x1032;"},{"entry":"CL_DEVICE_HALF_FP_CONFIG =0x1033;"},{"entry":"CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF =0x1034;"},{"entry":"CL_DEVICE_HOST_UNIFIED_MEMORY =0x1035;"},{"entry":"CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR =0x1036;"},{"entry":"CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT =0x1037;"},{"entry":"CL_DEVICE_NATIVE_VECTOR_WIDTH_INT =0x1038;"},{"entry":"CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG =0x1039;"},{"entry":"CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT =0x103A;"},{"entry":"CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE =0x103B;"},{"entry":"CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF =0x103C;"},{"entry":"CL_DEVICE_OPENCL(TM)_C_VERSION =0x103D;"},{"entry":"\/* cl_device_fp_config - bitfield *\/"},{"entry":"CL_FP_DENORM =(1 << 0);"},{"entry":"CL_FP_INF_NAN =(1 << 1);"},{"entry":"CL_FP_ROUND_TO_NEAREST =(1 << 2);"},{"entry":"CL_FP_ROUND_TO_ZERO =(1 << 3);"},{"entry":"CL_FP_ROUND_TO_INF =(1 << 4);"},{"entry":"CL_FP_FMA =(1 << 5);"},{"entry":"CL_FP_SOFT_FLOAT =(1 << 6);"},{"entry":"\/* cl_device_mem_cache_type *\/"},{"entry":"CL_NONE =0x0;"},{"entry":"CL_READ_ONLY_CACHE =0x1;"},{"entry":"CL_READ_WRITE_CACHE =0x2;"},{"entry":"\/* cl_device_local_mem_type *\/"},{"entry":"CL_LOCAL =0x1;"},{"entry":"CL_GLOBAL =0x2;"},{"entry":"\/* cl_device_exec_capabilities - bitfield *\/"},{"entry":"CL_EXEC_KERNEL =(1 << 0);"},{"entry":"CL_EXEC_NATIVE_KERNEL =(1 << 1);"},{"entry":"\/* cl_command_queue_properties - bitfield *\/"},{"entry":"CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE =(1 << 0);"},{"entry":"CL_QUEUE_PROFILING_ENABLE =(1 << 1);"},{"entry":"\/* cl_context_info *\/"},{"entry":"CL_CONTEXT_REFERENCE_COUNT =0x1080;"},{"entry":"CL_CONTEXT_DEVICES =0x1081;"},{"entry":"CL_CONTEXT_PROPERTIES =0x1082;"},{"entry":"CL_CONTEXT_NUM_DEVICES =0x1083;"},{"entry":"\/* cl_context_info + cl_context_properties *\/"},{"entry":"CL_CONTEXT_PLATFORM =0x1084;"},{"entry":"\/* cl_command_queue_info *\/"},{"entry":"CL_QUEUE_CONTEXT =0x1090;"},{"entry":"CL_QUEUE_DEVICE =0x1091;"},{"entry":"CL_QUEUE_REFERENCE_COUNT =0x1092;"},{"entry":"CL_QUEUE_PROPERTIES =0x1093;"},{"entry":"\/* cl_mem_flags - bitfield *\/"},{"entry":"CL_MEM_READ_WRITE =(1 << 0);"},{"entry":"CL_MEM_WRITE_ONLY =(1 << 1);"},{"entry":"CL_MEM_READ_ONLY =(1 << 2);"},{"entry":"CL_MEM_USE_HOST_PTR =(1 << 3);"},{"entry":"CL_MEM_ALLOC_HOST_PTR =(1 << 4);"},{"entry":"CL_MEM_COPY_HOST_PTR =(1 << 5);"},{"entry":"\/* cl_channel_order *\/"},{"entry":"CL_R =0x10B0;"},{"entry":"CL_A =0x10B1;"},{"entry":"CL_RG =0x 10B2;"},{"entry":"CL_RA =0x10B3;"},{"entry":"CL_RGB =0x10B4;"},{"entry":"CL_RGBA =0x10B5;"},{"entry":"CL_BGRA =0x10B6;"},{"entry":"CL_ARGB =0x10B7;"},{"entry":"CL_INTENSITY =0x10B8;"},{"entry":"CL_LUMINANCE =0x10B9;"},{"entry":"CL_Rx =0x10BA;"},{"entry":"CL_RGx =0x10BB;"},{"entry":"CL_RGBx =0x10BC;"},{"entry":"\/* cl_channel_type *\/"},{"entry":"CL_SNORM_INT8 =0x10D0;"},{"entry":"CL_SNORM_INT16 =0x10D1;"},{"entry":"CL_UNORM_INT8 =0x10D2;"},{"entry":"CL_UNORM_INT16 =0x10D3;"},{"entry":"CL_UNORM_SHORT_565 =0x10D4;"},{"entry":"CL_UNORM_SHORT_555 =0x10D5;"},{"entry":"CL_UNORM_INT_101010 =0x10D6;"},{"entry":"CL_SIGNED_INT8 =0x10D7;"},{"entry":"CL_SIGNED_INT16 =0x10D8;"},{"entry":"CL_SIGNED_INT32 =0x10D9;"},{"entry":"CL_UNSIGNED_INT8 =0x10DA;"},{"entry":"CL_UNSIGNED_INT16 =0x10DB;"},{"entry":"CL_UNSIGNED_INT32 =0x10DC;"},{"entry":"CL_HALF_FLOAT =0x10DD;"},{"entry":"CL_FLOAT =0x10DE;"},{"entry":"\/* cl_mem_object_type *\/"},{"entry":"CL_MEM_OBJECT_BUFFER =0x10F0;"},{"entry":"CL_MEM_OBJECT_IMAGE2D =0x10F1;"},{"entry":"CL_MEM OBJECT IMAGE3D =0x10F2;"},{"entry":"\/* cl_mem_info *\/"},{"entry":"CL_MEM_TYPE =0x1100;"},{"entry":"CL_MEM_FLAGS =0x1101;"},{"entry":"CL_MEM_SIZE =0x1102;"},{"entry":"CL_MEM_HOST_PTR =0x1103;"},{"entry":"CL_MEM_MAP_COUNT =0x1104;"},{"entry":"CL_MEM_REFERENCE_COUNT =0x1105;"},{"entry":"CL_MEM_CONTEXT =0x1106;"},{"entry":"CL_MEM_ASSOCIATED_MEMOBJECT =0x1107;"},{"entry":"CL_MEM_OFFSET =0x1108;"},{"entry":"\/* cl_image_info *\/"},{"entry":"CL_IMAGE_FORMAT =0x1110;"},{"entry":"CL_IMAGE_ELEMENT_SIZE =0x1111;"},{"entry":"CL_IMAGE_ROW_PITCH =0x1112;"},{"entry":"CL_IMAGE_SLICE_PITCH =0x1113;"},{"entry":"CL_IMAGE_WIDTH =0x1114;"},{"entry":"CL_IMAGE_HEIGHT =0x1115;"},{"entry":"CL_IMAGE_DEPTH =0x1116;"},{"entry":"\/* cl_addressing_mode *\/"},{"entry":"CL_ADDRESS_NONE =0x1130;"},{"entry":"CL_ADDRESS_CLAMP_TO_EDGE =0x1131;"},{"entry":"CL_ADDRESS_CLAMP =0x1132;"},{"entry":"CL_ADDRESS_REPEAT =0x1133;"},{"entry":"CL_ADDRESS_MIRRORED_REPEAT =0x1134;"},{"entry":"\/* cl_filter_mode *\/"},{"entry":"CL_FILTER_NEAREST =0x1140;"},{"entry":"CL_FILTER_LINEAR =0x1141;"},{"entry":"\/* cl_sampler_info *\/"},{"entry":"CL_SAMPLER_REFERENCE_COUNT =0x1150;"},{"entry":"CL_SAMPLER_CONTEXT =0x1151;"},{"entry":"CL_SAMPLER_NORMALIZED_COORDS =0x1152;"},{"entry":"CL_SAMPLER_ADDRESSING_MODE =0x1153;"},{"entry":"CL_SAMPLER_FILTER_MODE =0x1154;"},{"entry":"\/* cl_map_flags - bitfield *\/"},{"entry":"CL_MAP_READ =(1 << 0);"},{"entry":"CL_MAP_WRITE =(1 << 1);"},{"entry":"\/* cl_program_info *\/"},{"entry":"CL_PROGRAM_REFERENCE_COUNT =0x1160;"},{"entry":"CL_PROGRAM_CONTEXT =0x1161;"},{"entry":"CL_PROGRAM_NUM_DEVICES =0x1162;"},{"entry":"CL_PROGRAM_DEVICES =0x1163;"},{"entry":"CL_PROGRAM_SOURCE =0x1164;"},{"entry":"CL_PROGRAM_BINARY_SIZES =0x1165;"},{"entry":"CL_PROGRAM_BINARIES =0x1166;"},{"entry":"\/* cl_program_build_info *\/"},{"entry":"CL_PROGRAM_BUILD_STATUS =0x1181;"},{"entry":"CL_PROGRAM_BUILD_OPTIONS =0x1182;"},{"entry":"CL_PROGRAM_BUILD_LOG =0x1183;"},{"entry":"\/* cl_build_status *\/"},{"entry":"CL_BUILD_SUCCESS =0;"},{"entry":"CL_BUILD_NONE =1;"},{"entry":"CL_BUILD_ERROR =\u22122;"},{"entry":"CL_BUILD_IN_PROGRESS =\u22123;"},{"entry":"\/* cl_kernel_info *\/"},{"entry":"CL_KERNEL_FUNCTION_NAME =0x1190;"},{"entry":"CL_KERNEL_NUM_ARGS =0x1191;"},{"entry":"CL_KERNEL_REFERENCE_COUNT =0x1192;"},{"entry":"CL_KERNEL_CONTEXT =0x1193;"},{"entry":"CL_KERNEL_PROGRAM =0x1194;"},{"entry":"\/* cl_kernel_work_group_info *\/"},{"entry":"CL_KERNEL_WORK_GROUP_SIZE =0x11B0;"},{"entry":"CL_KERNEL_COMPILE_WORK_GROUP_SIZE =0x11B1;"},{"entry":"CL_KERNEL_LOCAL_MEM_SIZE =0x11B2;"},{"entry":"CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE"},{"entry":"=0x11B3;"},{"entry":"CL_KERNEL_PRIVATE_MEM_SIZE =0x11B4;"},{"entry":"\/* cl_event_info *\/"},{"entry":"CL_EVENT_COMMAND_QUEUE =0x11D0;"},{"entry":"CL_EVENT_COMMAND_TYPE =0x11D1;"},{"entry":"CL_EVENT_REFERENCE_COUNT =0x11D2;"},{"entry":"CL_EVENT_COMMAND_EXECUTION_STATUS =0x11D3;"},{"entry":"CL_EVENT_CONTEXT =0x11D4;"},{"entry":"\/* cl_command_type *\/"},{"entry":"CL_COMMAND_NDRANGE_KERNEL =0x11F0;"},{"entry":"CL_COMMAND_TASK =0x11F1;"},{"entry":"CL_COMMAND_NATIVE_KERNEL =0x11F2;"},{"entry":"CL_COMMAND_READ_BUFFER =0x11F3;"},{"entry":"CL_COMMAND_WRITE_BUFFER =0x11F4;"},{"entry":"CL_COMMAND_COPY_BUFFER =0x11F5;"},{"entry":"CL_COMMAND_READ_IMAGE =0x11F6;"},{"entry":"CL_COMMAND_WRITE_IMAGE =0x11F7;"},{"entry":"CL_COMMAND_COPY_IMAGE =0x11F8;"},{"entry":"CL_COMMAND_COPY_IMAGE_TO_BUFFER =0x11F9;"},{"entry":"CL_COMMAND_COPY_BUFFER_TO_IMAGE =0x11FA;"},{"entry":"CL_COMMAND_MAP_BUFFER =0x11FB;"},{"entry":"CL_COMMAND_MAP_IMAGE =0x11FC;"},{"entry":"CL_COMMAND_UNMAP_MEM_OBJECT =0x11FD;"},{"entry":"CL_COMMAND_MARKER =0x11FE;"},{"entry":"CL_COMMAND_ACQUIRE_GL_OBJECTS =0x11FF;"},{"entry":"CL_COMMAND_RELEASE_GL_OBJECTS =0x1200;"},{"entry":"CL_COMMAND_READ_BUFFER_RECT =0x1201;"},{"entry":"CL_COMMAND_WRITE_BUFFER_RECT =0x1202;"},{"entry":"CL_COMMAND_COPY_BUFFER_RECT =0x1203;"},{"entry":"CL_COMMAND_USER =0x1204;"},{"entry":"\/* command execution status *\/"},{"entry":"CL_COMPLETE =0x0;"},{"entry":"CL_RUNNING =0xl;"},{"entry":"CL_SUBMITTED =0x2;"},{"entry":"CL_QUEUED =0x3;"},{"entry":"\/* cl_buffer_create_type *\/"},{"entry":"CL_BUFFER_CREATE_TYPE_REGION =0x1220;"},{"entry":"\/* cl_profiling_info *\/"},{"entry":"CL_PROFILING_COMMAND_QUEUED =0x1280;"},{"entry":"CL_PROFILING_COMMAND_SUBMIT =0x1281;"},{"entry":"CL_PROFILING_COMMAND_START =0x1282;"},{"entry":"CL_PROFILING_COMMAND_END =0x1283;"},{"entry":"\/*"},{"entry":"* cl_ext.h"},{"entry":"*\/"},{"entry":"\/* cl_khr_fp64 extension - no extension since it has no functions *\/"},{"entry":"CL_DEVICE_DOUBLE_FP_CONFIG =0x1032;"},{"entry":"\/* cl_khr_fp16 extension - no extension since it has no functions *\/"},{"entry":"CL_DEVICE_HALF_FP_CONFIG =0x1033;"},{"entry":"\/************************"},{"entry":"* cl_khr_icd extension *"},{"entry":"************************\/"},{"entry":"\/* cl_platform_info *\/"},{"entry":"CL_PLATFORM_ICD_SUFFIX_KHR =0x0920;"},{"entry":"\/* Additional Error Codes *\/"},{"entry":"CL_PLATFORM_NOT_FOUND_KHR =\u22121001;"},{"entry":"\/******************************************"},{"entry":"* cl_nv_device_attribute_query_extension *"},{"entry":"******************************************\/"},{"entry":"\/* cl_nv_device_attribute_query_extension - no extension since it has no"},{"entry":"functions *\/"},{"entry":"CL_DEVICE_COMPUTE_CAPABILITY_MAJOR_NV =0x4000;"},{"entry":"CL_DEVICE_COMPUTE_CAPABILITY_MINOR_NV =0x4001;"},{"entry":"CL_DEVICE_REGISTERS_PER_BLOCK_NV =0x4002;"},{"entry":"CL_DEVICE_WARP_SIZE_NV =0x4003;"},{"entry":"CL_DEVICE_GPU_OVERLAP_NV =0x4004;"},{"entry":"CL_DEVICE_KERNEL_EXEC_TIMEOUT_NV =0x4005;"},{"entry":"CL_DEVICE_INTEGRATED_MEMORY_NV =0x4006;"},{"entry":"\/*********************************"},{"entry":"* cl_amd_device_attribute_query *"},{"entry":"*********************************\/"},{"entry":"CL_DEVICE_PROFILING_TIMER_OFFSET_AMD =0x4036;"},{"entry":"\/* cl_device_partition_property_ext *\/"},{"entry":"CL_DEVICE_PARTITION_EQUALLY_EXT =0x4050;"},{"entry":"CL_DEVICE_PARTITION_BY_COUNTS_EXT =0x4051;"},{"entry":"CL_DEVICE_PARTITION_BY_NAMES_EXT =0x4052;"},{"entry":"CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN_EXT =0x4053;"},{"entry":"\/* clDeviceGetInfo selectors *\/"},{"entry":"CL_DEVICE_PARENT_DEVICE_EXT =0x4054;"},{"entry":"CL_DEVICE_PARTITION_TYPES_EXT =0x4055;"},{"entry":"CL_DEVICE_AFFINITY_DOMAINS_EXT =0x4056;"},{"entry":"CL_DEVICE_REFERENCE_COUNT_EXT =0x4057;"},{"entry":"CL_DEVICE_PARTITION_STYLE_EXT =0x4058;"},{"entry":"\/* error codes *\/"},{"entry":"CL_DEVICE_PARTITION_FAILED_EXT =\u22121057;"},{"entry":"CL_INVALID_PARTITION_COUNT_EXT =\u22121058;"},{"entry":"CL_INVALID_PARTITION_NAME_EXT =\u22121059;"},{"entry":"\/* CL_AFFINITY_DOMAINs *\/"},{"entry":"CL_AFFINITY_DOMAIN_Ll_CACHE_EXT =0x1;"},{"entry":"CL_AFFINITY_DOMAIN_L2_CACHE_EXT =0x2;"},{"entry":"CL_AFFINITY_DOMAIN_L3_CACHE_EXT =0x3;"},{"entry":"CL_AFFINITY_DOMAIN_L4_CACHE_EXT =0x4;"},{"entry":"CL_AFFINITY_DOMAIN_NUMA_EXT =0x10;"},{"entry":"CL_AFFINITY_DOMAIN_NEXT_FISSIONABLE_EXT =0x100;"},{"entry":"\/* cl_device_partition_property_ext list terminators *\/"},{"entry":"CL_PROPERTIES_LIST_END_EXT =0;"},{"entry":"CL_PARTITION_BY_COUNTS_LIST_END_EXT =0;"},{"entry":"CL_PARTITION_BY_NAMES_LIST_END_EXT =\u22121;"},{"entry":"\/*********************************"},{"entry":"* cl_amd_device_attribute_query *"},{"entry":"*********************************\/"},{"entry":"\/* cl_gl_object_type *\/"},{"entry":"CL_GL_OBJECT_BUFFER =0x2000;"},{"entry":"CL_GL_OBJECT_TEXTURE2D =0x2001;"},{"entry":"CL_GL_OBJECT_TEXTURE3D =0x2002;"},{"entry":"CL_GL_OBJECT_RENDERBUFFER =0x2003;"},{"entry":"\/* cl_gl_texture_info *\/"},{"entry":"CL_GL_TEXTURE_TARGET =0x2004;"},{"entry":"CL_GL_MIPMAP_LEVEL =0x2005;"},{"entry":"\/* Additional Error Codes *\/"},{"entry":"CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR =\u22121000;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Thus, the WebCL framework is provided.","As described above, the WebCL framework advantageously may support and be used with WebCL extensions .","A first example WebCL extension, consider the cl_gl_sharing extension. The cl_gl_sharing extension is an extension that may provide that WebCL methods may use, e.g., as their argument, objects of the WebGL\u2122 framework. This extension may also provide that WebGL methods may use, e.g., as their argument, objects of the WebCL framework.","The cl_gl_sharing extension advantageously tends to provide that buffers (e.g., the shared buffer ) may be shared between WebCL and WebGL contexts. The cl_gl_sharing extension may comprise a plurality of methods and may be defined as follows:",{"@attributes":{"id":"p-0217","num":"0292"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"class WebCLGL {"},{"entry":"any\u2003getGLContextInfo(context:\u2003WebCLContext,\u2003properties:"},{"entry":"number, param_name: number);"},{"entry":"void createFromGLBuffer(context: WebCLContext, flags: number, buffer:"},{"entry":"WebGLBuffer);"},{"entry":"void\u2003createFromGLTexture2D(context:\u2003WebCLContext,\u2003flags:"},{"entry":"number, texture_target: number, miplevel: number, texture:"},{"entry":"WebGLTexture);"},{"entry":"void\u2003createFromGLTexture3D(context:\u2003WebCLContext,\u2003flags:"},{"entry":"number, texture_target: number, miplevel: number, texture:"},{"entry":"WebGLTexture);"},{"entry":"number\u2003\u2009getGLObjectInfo(mem_obj:\u2003\u2009WebCLMemObject);\u2003\u2009\/\/"},{"entry":"returns gl_object_type"},{"entry":"any getGLTextureInfo(mem_obj: WebCLMemObject, param_name:"},{"entry":"number,); \/\/ returns param_value (number for now)"},{"entry":"WebCLEvent\u2003enqueueAcquireGLObject(queue:"},{"entry":"WebCLCommandQueue,"},{"entry":"mem_objects: WebCLMemObject[ ], event_wait_list: WebCLEvent[ ]);"},{"entry":"WebCLEvent\u2003enqueueReleaseGLObject(queue:"},{"entry":"WebCLCommandQueue,"},{"entry":"mem_objects: WebCLMemObject[ ], event_wait_list: WebCLEvent[ ]);"},{"entry":"\/\/ Objects not available in WebGL 1.0"},{"entry":"void\u2002createFromGLRenderbuffer(context:\u2002WebCLContext,\u2002flags:"},{"entry":"number,"},{"entry":"renderbuffer: WebGLRenderBuffer);"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In other embodiments, one or more of the methods included in the cl_gl_sharing extension and described above may be omitted. Also, in other embodiments, the cl_gl_sharing extension may comprise one or more different methods instead of or in addition to one or more of the methods included in the cl_gl_sharing extension and described above. Thus, the cl_gl_sharing extension may be defined in a different way, for example, as follows:",{"@attributes":{"id":"p-0219","num":"0294"},"tables":{"@attributes":{"id":"TABLE-US-00032","num":"00032"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"interface WebCLGL {"},{"entry":"\/\/ Functions"},{"entry":"WebCLMemoryObject\u2003\u2002clCreateFromGLBuffer(WebCLContext"},{"entry":"context, CLenum flags,"},{"entry":"WebGLBuffer bufobj);"},{"entry":"WebCLMemoryObject\u2003createFromGLTexture2D(WebCLContext"},{"entry":"context, CLenum flags,cl_GLenum target, cl_GLint miplevel, cl_GLuint"},{"entry":"texture);"},{"entry":"WebCLMemoryObject\u2003createFromGLTexture3D(WebCLContext"},{"entry":"context, CLenum flags,cl_GLenum target, cl_GLint miplevel,"},{"entry":"cl_GLuint texture);"},{"entry":"WebCLMemoryObject\u2003createFromGLRenderbuffer(WebCLContext"},{"entry":"context, CLenum flags,cl_GLuint renderbuffer);"},{"entry":"WebGLObject getGLObjectInfo(WebCLMemoryObject memobj);"},{"entry":"any\u2003getGLTextureInfo(WebCLMemoryObject\u2003memobj,"},{"entry":"cl_gl_texture_info param_name);"},{"entry":"WebCLEvent\u2003\u2003\u2003\u2002enqueueAcquireGLObjects(WebCLCommandQueue"},{"entry":"command_queue, WebCLMemoryObject[ ] mem_objects,"},{"entry":"optional WebCLEvent[ ] event_wait_list,"},{"entry":"optional CLboolean generate_event = false);"},{"entry":"WebCLEvent\u2003\u2003\u2003\u2002enqueueReleaseGLObjects(WebCLCommandQueue"},{"entry":"command_queue, WebCLMemoryObject[ ] mem_objects,"},{"entry":"optional WebCLEvent[ ] event_wait_list,"},{"entry":"optional CLboolean generate_event = false);"},{"entry":"\/\/ Constants"},{"entry":"\/* cl_gl_object_type *\/"},{"entry":"const CLenum GL_OBJECT_BUFFER = 0x2000;"},{"entry":"const CLenum GL_OBJECT_TEXTURE2D = 0x2001;"},{"entry":"const CLenum GL_OBJECT_TEXTURE3D = 0x2002;"},{"entry":"const CLenum GL_OBJECT_RENDERBUFFER = 0x2003;"},{"entry":"\/* cl_gl_texture_info *\/"},{"entry":"const CLenum GL_TEXTURE_TARGET = 0x2004;"},{"entry":"const CLenum GL_MIPMAP_LEVEL = 0x2005;"},{"entry":"\/* Additional Error Codes *\/"},{"entry":"const CLenum INVALID_GL_SHAREGROUP_REFERENCE = \u22121000;"},{"entry":"\/* cl_gl_context_info *\/"},{"entry":"const CLenum CURRENT_DEVICE_FOR_GL_CONTEXT = 0x2006;"},{"entry":"const CLenum DEVICES_FOR_GL_CONTEXT = 0x2007;"},{"entry":"\/* Additional cl_context_properties *\/"},{"entry":"const CLenum GL_CONTEXT = 0x2008;"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The following list of methods includes methods that may be included in the cl_gl_sharing extension and describes uses of those methods. Also, in the following list, for each parameter of the methods in the cl_gl_sharing extension a default value is provided.\n\n",{"@attributes":{"id":"p-0221","num":"0301"},"tables":{"@attributes":{"id":"TABLE-US-00033","num":"00033"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"dictionary WebCLGLObjectInfo {"},{"entry":"\u201ctype\u201d : CLenum, \/\/ can be GL_OBJECT_BUFFER,"},{"entry":"GL_OBJECT_TEXTURE2D, GL_OBJECT_TEXTURE3D, or"},{"entry":"GL_OBJECT_RENDERBUFFER"},{"entry":"\u201cname\u201d\u2003:\u2003WebGLObject\u2003\/\/\u2003the WebGLObject\u2003used\u2003to\u2003create"},{"entry":"theWebCLMemoryObject memobj"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0020","list-style":"none"},"li":["6. any getGLTextureInfo(WebCLMemoryObject memobj, CLenum param_name);\n\nThis method may return additional information about a GL texture object associated with a WebCL memory object.\n","7. WebCLEvent enqueueAcquireGLObjects(WebCLCommandQueue command_queue, WebCLMemoryObject[ ] mem_objects, optional WebCLEvent[ ] event_wait_list, optional CLboolean generate_event=false);","8. WebCLEvent enqueueReleaseGLObjects(WebCLCommand Queue command_queue, WebCLMemoryObject[ ] mem_objects, optional WebCLEvent[ ] event_wait_list, optional CLboolean generate_event=false);"]}},"The cl_gl_sharing extension may be used to link together WebGL\u2122 and WebCL. In particular, the cl_gl_sharing extension tends to provide that buffers may be shared between WebCL and WebGL contexts (i.e., values in a buffer may be processed by a program running in a WebCL context and a program running in a WebGL context).","A second example WebCL extension  is the WebCLGLSync extension. This extension allows creation of OpenCL\u2122 event objects linked to OpenGL fence sync objects. Advantageously, this tends to improve efficiency of sharing images and buffers between the WebCL and WebGL contexts. The WebCLGLSync extension may comprise a plurality of methods and may be defined as follows:",{"@attributes":{"id":"p-0224","num":"0307"},"tables":{"@attributes":{"id":"TABLE-US-00034","num":"00034"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface WebCLGLSync {"]},{"entry":[{},"WebCLEvent\u2003createEventFromGLsync(WebCLContext\u2003context,"]},{"entry":[{},"GLsync\u2003sync);"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The following method may be included in the WebCLGLSync extension:\n\n","Further example extensions to the WebCL framework include WebCL compiler extensions. These extensions do not provide new JavaScript\u2122 methods and constants. Instead, these extensions may be used to indicate support in an OpenCL\u2122 C compiler for features a developer may use, e.g., for enhancing kernel code. For example, if a WebCLDevice.getExtension(extension_name) command returns a non-null object, support for that extension name is indicated. The WebCL compiler extensions may be defined as follows:",{"@attributes":{"id":"p-0227","num":"0311"},"tables":{"@attributes":{"id":"TABLE-US-00035","num":"00035"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"interface int64_base_atomics {(OpenCL(TM) 1.1 \u00a74.1, man page)"},{"entry":"}"},{"entry":"interface int64_extended_atomics {(OpenCL(TM) 1.1 \u00a74.1, man page)"},{"entry":"}"},{"entry":"interface fp16 {(OpenCL(TM) 1.1 \u00a74.1, man page)"},{"entry":"}"},{"entry":"interface fp64 {(OpenCL(TM) 1.1 \u00a74.1, man page)"},{"entry":"}"},{"entry":"interface 3d_image_writes {(OpenCL(TM) 1.1 \u00a74.1, man page)"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":["52","30"]},{"@attributes":{"id":"p-0228","num":"0312"},"tables":{"@attributes":{"id":"TABLE-US-00036","num":"00036"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"interface WebCLCommandQueue {"},{"entry":"ArrayBuffer\u2003enqueueMapMemObject(WebCLRegion\u2003buffer,"},{"entry":"CLboolean blocking_map,\u2003\u2003CLenum\u2003\u2003map_flags,\u2003\u2003optional"},{"entry":"WebCLEvent[ ] event_wait_list,);"},{"entry":"WebCLCommandQueue"},{"entry":"enqueueUnmapMemObject(WebCLMemoryObject"},{"entry":"memory,\u2003\u2003ArrayBuffer\u2003\u2003mapped_region,\u2003\u2003optional"},{"entry":"WebCLEvent[ ] event_wait_list);"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The following list of methods includes methods that may be included in this definition of the WebCLCommandQueue interface.\n\n","In the above described WebCL framework, setting the arguments of a kernel typically would use knowledge of a C-structure used as arguments in a kernel method. However, since JavaScript\u2122 is untyped, it tends to be difficult or impossible to uniquely map JavaScript\u2122 types to native C types.","The above described WebCL framework comprises the method WebCLKernel.setArg(CLuint index, any value, optional CLtype type). This method advantageously tends to allow any value to be passed to an OpenCL\u2122 kernel. This method tends to be particularly suitable for basic scalar and vector types.","An example extension to the WebCL framework that may be used to set data types in a C area of memory is the ctypes extension. The ctypes extension may be defined as follows:",{"@attributes":{"id":"p-0233","num":"0319"},"tables":{"@attributes":{"id":"TABLE-US-00037","num":"00037"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface ctypes {"]},{"entry":[{},"\/\/ methods"]},{"entry":[{},"ArrayBuffer compile(ctypes_struct struct);"]},{"entry":[{},"CLuint size(ctypes_struct struct);"]},{"entry":[{},"\/\/ constants containing host-dependent sizes"]},{"entry":[{},"\/\/ basic types"]},{"entry":[{},"const CLuint bool = sizeof(bool);"]},{"entry":[{},"const CLuint char = 1"]},{"entry":[{},"const CLuint short = 2"]},{"entry":[{},"const CLuint int = 4"]},{"entry":[{},"const CLuint long = 8"]},{"entry":[{},"const CLuint float = 4;"]},{"entry":[{},"const CLuint double = 8; \/\/ if supported"]},{"entry":[{},"const CLuint half = 2; \/\/ if supported"]},{"entry":[{},"\/\/ special C types"]},{"entry":[{},"const CLuint size = 4;"]},{"entry":[{},"const CLuint ptrdiff = 4;"]},{"entry":[{},"const CLuint intptr = 4;"]},{"entry":[{},"\/\/ vector types (for convenience) with n = 2, 3, 4, 8, 16"]},{"entry":[{},"const CLuint charn = 1 * n;"]},{"entry":[{},"const CLuint shortn = 2 * n;"]},{"entry":[{},"const CLuint intn = 4 * n;"]},{"entry":[{},"const CLuint longn = 8 * n;"]},{"entry":[{},"const CLuint floatn = 4 * n;"]},{"entry":[{},"const CLuint doublen = 8 * n; \/\/ if supported"]},{"entry":[{},"const CLuint halfn = 2 * n; \/\/ if supported"]},{"entry":[{},"\/\/ matrices types (for convenience) with m or n = 2, 3, 4"]},{"entry":[{},"const CLuint shortmxn = 2 * m * n;"]},{"entry":[{},"const CLuint intmxn = 4 * m * n;"]},{"entry":[{},"const CLuint longmxn = 8 * m * n;"]},{"entry":[{},"const CLuint floatmxn = 4 * m * n;"]},{"entry":[{},"const CLuint doublemxn = 8 * m * n; \/\/ if supported"]},{"entry":[{},"const CLuint halfmxn = 2 * m * n; \/\/ if supported"]},{"entry":[{},"\/\/ special OpenCL(TM) objects"]},{"entry":[{},"const CLuint mem = sizeof(cl_mem);"]},{"entry":[{},"const CLuint image2d = mem;"]},{"entry":[{},"const CLuint image3d = mem;"]},{"entry":[{},"const CLuint sampler = sizeof(cl_sampler);"]},{"entry":[{},"const CLuint event = sizeof(cl_event);"]},{"entry":[{},"\/\/ local memory"]},{"entry":[{},"const CLuint local = 0; \/\/ 0 because local memory can't be initialized"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The following list of methods includes methods that may be included in the ctypes extension and describes uses of those methods. Also, in the following list, for each parameter of the methods in the ctypes extension a default value is provided.\n\n",{"@attributes":{"id":"p-0235","num":"0322"},"tables":{"@attributes":{"id":"TABLE-US-00038","num":"00038"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"dictionary ctypes_struct {"]},{"entry":[{},"CLuint name = 0;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0025","list-style":"none"},"li":"2. CLuint size(ctypes_struct astruct);\n\nThis method computes the size in bytes of a ctypes_struct.\n"}},"An example code specifying an example method of setting the values of a C area of memory and to computing its size is as follows:",{"@attributes":{"id":"p-0237","num":"0325"},"tables":{"@attributes":{"id":"TABLE-US-00039","num":"00039"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ in C"},{"entry":"\/\/struct point {"},{"entry":"\/\/ float x, y, z;"},{"entry":"\/\/ char name[10];"},{"entry":"\/\/}"},{"entry":"\/\/ in JavaScript(TM)"},{"entry":"var point_struct = {"},{"entry":"\u201cx\u201d : ctypes.float,"},{"entry":"\u201cy\u201d : ctypes.float,"},{"entry":"\u201cz\u201d : ctypes.float,"},{"entry":"\u201cname\u201d : ctypes.Array(ctypes.char,10),"},{"entry":"};"},{"entry":"\/\/ or"},{"entry":"var point_struct = {"},{"entry":"\u201cxyz\u201d : ctypes.Array(ctypes.float, 3),"},{"entry":"\u201cname\u201d : ctypes.Array(ctypes.char,10),"},{"entry":"}"},{"entry":"\/\/ the point structure values are set in an ArrayBuffer"},{"entry":"\/\/ the size of point_struct should be 4 * 3 + 1 * 10 = 17 bytes"},{"entry":"kernel.setArg(1, buffer, ctypes.size(point_struct) );"},{"entry":"\/\/ alternatively one could define values of each field"},{"entry":"var point_struct = {"},{"entry":"\u201cx\u201d : { ctypes.float, \u22125.4 },"},{"entry":"\u201cy\u201d : { ctypes.float, \u221210 },"},{"entry":"\u201cz\u201d : { ctypes.float, 12.45 },"},{"entry":"\u201cname\u201d : { ctypes.Array(ctypes.char,10), \u201cpoint1\u201d }"},{"entry":"};"},{"entry":"\/\/ or"},{"entry":"var point_struct = {"},{"entry":"\u201cxyz\u201d : { ctypes.Array(ctypes.float, 3), [ \u22125.4, \u221210, 12.45 ] },"},{"entry":"\u201cname\u201d : { ctypes.Array(ctypes.char,10), [\u2018p\u2019,\u2019o\u2019,\u2019i\u2019,\u2019n\u2019,\u2019t\u2019,\u20191\u2019,\u2019\\0\u2019 ] },"},{"entry":"}"},{"entry":"\/\/ and call setArg"},{"entry":"kernel.setArg(1, ctypes.compile(point_struct), ctypes.size(point_struct) );"},{"entry":"\/\/ in C"},{"entry":"\/\/struct point {"},{"entry":"\/\/ float3 vec;"},{"entry":"\/\/ float12 mat;"},{"entry":"\/\/}"},{"entry":"\/\/ in JavaScript(TM)"},{"entry":"var point_struct = {"},{"entry":"\u201cvec\u201d : ctypes.Array(ctypes.float, 3);"},{"entry":"\u201cmat\u201d : ctypes.Array(ctypes.float, 12);"},{"entry":"};"},{"entry":"\/\/ or"},{"entry":"var point_struct = {"},{"entry":"\u201cvec\u201d : ctypes.float3,"},{"entry":"\u201cmat\u201d : ctypes.float12, \/\/ or float3\u00d74"},{"entry":"}"},{"entry":"\/\/ the point structure values are set in an ArrayBuffer"},{"entry":"\/\/ the size of point_struct should be 4 * 3 + 4 * 12 = 60 bytes"},{"entry":"kernel.setArg(1, buffer, ctypes.size(point_struct) );"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Now is an example of a script that may be used to perform a task of adding together two vectors. The example script is as follows:",{"@attributes":{"id":"p-0239","num":"0327"},"tables":{"@attributes":{"id":"TABLE-US-00040","num":"00040"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"var log=console.log;"},{"entry":"function VectorAdd( ) {"},{"entry":"\/\/First check if the WebCL extension is installed at all"},{"entry":"if (WebCL == undefined) {"},{"entry":"alert(\u201cWebCL not supported.\u201d);"},{"entry":"return;"},{"entry":"}"},{"entry":"BUFFER_SIZE=10; \/\/ for example"},{"entry":"var A=new Uint32Array(BUFFER_SIZE);"},{"entry":"var B=new Uint32Array(BUFFER_SIZE);"},{"entry":"var C=new Uint32Array(BUFFER_SIZE);"},{"entry":"for (var i = 0; i < BUFFER_SIZE; i++) {"},{"entry":"A[i] = i;"},{"entry":"B[i] = i * 2;"},{"entry":"C[i] = 0;"},{"entry":"}"},{"entry":"\/\/Pick platform"},{"entry":"var platformList=WebCL.getPlatformIDs( );"},{"entry":"platform=platformList[0]; \/\/ select the first platform"},{"entry":"\/\/ create GPU context for this platform"},{"entry":"context=new"},{"entry":"WebCL.WebCLContext(WebCL.CL_DEVICE_TYPE_GPU,"},{"entry":"[WebCL.CL_CONTEXT_PLATFORM, platform]);"},{"entry":"\/\/Query the set of devices attached to the context"},{"entry":"devices = context.getInfo(WebCL.CL_CONTEXT_DEVICES);"},{"entry":"kernelSource = ["},{"entry":"\u201c_kernel void \u201c,"},{"entry":"\u201cvadd(_global int * a, _global int * b, _global int * c) \u201c,"},{"entry":"\u201c{ \u201c,"},{"entry":"\u201c size_t i = get_global_id(0); \u201c,"},{"entry":"\u201c \u201c,"},{"entry":"\u201c c[i] = a[i] + b[i]; \u201c,"},{"entry":"\u201c} \u201c"},{"entry":"].join(\u201c\\n\u201d);"},{"entry":"\/\/ Create and program from String source"},{"entry":"program = context.createProgram(kernelSource);"},{"entry":"\/\/ Build program"},{"entry":"program.build(devices); \/\/ note: no compilation flags given"},{"entry":"\/\/ Create device buffers"},{"entry":"size=BUFFER_SIZE*4; \/\/ size in bytes"},{"entry":"\/\/ Create buffer for A and copy host contents"},{"entry":"aBuffer = context.createBuffer(WebCL.CL_MEM_READ_ONLY,"},{"entry":"size);"},{"entry":"\/\/ Create buffer for B and copy host contents"},{"entry":"bBuffer = context.createBuffer(WebCL.CL_MEM_READ_ONLY,"},{"entry":"size);"},{"entry":"\/\/ Create buffer for that uses the host ptr C"},{"entry":"cBuffer = context.createBuffer(WebCL.CL_MEM_WRITE_ONLY,"},{"entry":"size);"},{"entry":"\/\/ Create kernel object"},{"entry":"kernel= program.createKernel(\u201cvadd\u201d);"},{"entry":"\/\/ Set kernel args"},{"entry":"kernel.setArg(0, aBuffer);"},{"entry":"kernel.setArg(1, bBuffer);"},{"entry":"kernel.setArg(2, cBuffer);"},{"entry":"\/\/ Create command queue"},{"entry":"queue=context.createCommandQueue(devices[0], 0);"},{"entry":"\/\/ Init ND-range"},{"entry":"var localWS = [6];"},{"entry":"var globalWS = [Math.ceil (BUFFER_SIZE \/ localWS) * localWS];"},{"entry":"log(\u201cGlobal work item size: \u201c + globalWS);"},{"entry":"log(\u201cLocal work item size: \u201c + localWS);"},{"entry":"\/\/ Execute (enqueue) kernel"},{"entry":"log(\u201cusing enqueueNDRangeKernel\u201d);"},{"entry":"queue.enqueueNDRangeKernel(kernel,"},{"entry":"[ ],"},{"entry":"[globalWS],"},{"entry":"[localWS]);"},{"entry":"\/\/ Do the work"},{"entry":"queue.enqueueWriteBuffer (aBuffer, false, 0, A.length*4, A, [ ]);"},{"entry":"queue.enqueueWriteBuffer (bBuffer, false, 0, B.length*4, B, [ ]);"},{"entry":"queue.enqueueReadBuffer (cBuffer, false, 0, C.length*4, C, [ ]);"},{"entry":"queue.finish ( ); \/\/Finish all the operations"},{"entry":"\/\/ print results"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"A further example of script that may be used to add two vectors is as follows.",{"@attributes":{"id":"p-0241","num":"0329"},"tables":{"@attributes":{"id":"TABLE-US-00041","num":"00041"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"log(\u201cusing enqueueMapBuffer\u201d);"]},{"entry":[{},"\/\/ Map cBuffer to host pointer. This enforces a sync with"]},{"entry":[{},"\/\/ the host backing space, remember we choose GPU device."]},{"entry":[{},"output=queue.enqueueMapBuffer("]},{"entry":[{},"cBuffer,"]},{"entry":[{},"true, \/\/ block"]},{"entry":[{},"WebCL.CL_MAP_READ,"]},{"entry":[{},"0,"]},{"entry":[{},"BUFFER_SIZE * 4);"]},{"entry":[{},"\/\/ print results"]},{"entry":[{},"queue.enqueueUnmapMemObject("]},{"entry":[{},"cBuffer,"]},{"entry":[{},"output);"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The WebCL specification advantageously provides additional computing context objects for the HTML5 specification. These content objects tend to allow computing using an application programming interface that conforms closely to the OpenCL\u2122 API).","An advantage provided by the above described WebCL specification, methods, and systems is that increased security tends to be provided. Some OpenCL\u2122 methods, when implemented, return information that may be used to identify the one or more memory regions (e.g., a memory address) of a computer. A malicious party may use this information to access parts of the computer memory. The above described WebCL framework advantageously tends not to return (i.e., hides) this memory address information. Thus, the above described WebCL framework tends to provide a higher level of security than, e.g., the OpenCL\u2122 framework.","The above described WebCL specification tends to allow for a JavaScript\u2122 API design that is familiar to many computer programmers.","The above described WebCL specification tends to have fewer methods than other frameworks (e.g., the OpenCL\u2122). Method overloading has advantageously been exploited to provide this. The WebCL specification provides an object-oriented representation of OpenCL\u2122 that tends to be relatively simple compared to OpenCL\u2122.","An advantage provided by the above described WebCL specification, methods, and systems is that a method that creates an object is attached to the object that creates it. This is instead of that method being a constructor of the created object. For example, if a first WebCL object calls a, for example, \u201ccreate platform\u201d method, a \u201cWebCL Platform Object\u201d is returned. The first WebCL object is a \u201cparent\u201d of the WebCL Platform Object, i.e., the WebCL Platform Object is a \u201cchild\u201d of the first WebCL object. The parent and child objects are linked. For example, if a parent objects is deleted, its children are automatically deleted. This is advantageous, for example, during memory reclamation. This is in contrast to, for example, the OpenCL\u2122 framework.","In the above described WebCL framework, exceptions are used instead of error codes. If an exception is returned (or \u201cthrown\u201d), then an argument of the exception may contain details of the corresponding OpenCL\u2122 error. This use of exceptions as opposed to error messages advantageously tends to avoid a \u201ccascade\u201d of run-time errors. Thus, by using exceptions, lock-down (e.g., of the GPU) may be avoided.","In the above described WebCL framework, all objects are assigned to a unique module or package.","Conveniently, the constants used by the above described WebCL framework are those of the OpenCL\u2122 framework.","In the above described WebCL framework, OpenCL\u2122 Event and UserEvent classes are advantageously merged into a single class, namely the WebCLEvent class. Thus, in JavaScript\u2122 only a single Event Object is used. For a software developer, this tends to simplify the process of creating a computer program.","A method by which the above described WebCL framework may be extended is advantageously provided. For example, extensions that allow WebCL and WebGL to interoperate are advantageously provided. These extensions advantageously tend to facilitate rendering of GPU-accelerated buffers from OpenCL\u2122 using OpenGL standards. This tends to avoiding information transfer from the GPU to the CPU. Further extensions to the WebCL framework tend to provide JavaScript\u2122 representations of OpenCL\u2122 extensions for compiler features available in a GPU. This beneficially tends to allow a software developer to select the best kernel for various applications.","The above described WebCL framework advantageously tends to enable web applications to harness GPU and multi-core CPU parallel processing, e.g., from within a web browser. This tends to enable significant acceleration of applications such as image and video processing and advanced physics e.g., for WebGL games. Furthermore, the WebCL framework tends to extend the capabilities of, e.g., an HTML 5 web browser to accelerate computationally intensive and rich visual computing applications.","In the above embodiments, running the script (which in the above embodiments is JavaScript\u2122 but may be a different type of script) by the machine processor (which in the above embodiments is a JavaScript\u2122 module but may be a different type of machine processor) creates a context for an underlying processing unit (e.g., the GPU). Also in the above embodiments, running the script by the machine processor creates a memory object or buffer within the created context. However, in other embodiments, running the script by the machine processor may implement different types of objects within a created context or may implement different types of functions within the created context. This may be instead of or in addition to creating the memory object or buffer within the context. Also, in other embodiments running the script by the machine processor may create a memory object or buffer that is not within a created context.","In view of the many possible embodiments to which the principles of the present discussion may be applied, it should be recognized that the embodiments described herein with respect to the drawing figures are meant to be illustrative only and should not be taken as limiting the scope of the claims. Therefore, the techniques as described herein contemplate all such embodiments as may come within the scope of the following claims and equivalents thereof."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":["While the appended claims set forth the features of the present techniques with particularity, these techniques, together with their objects and advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings of which:",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 8","FIG. 7"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 10","FIG. 9"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
