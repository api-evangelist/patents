---
title: Language integrated query over vector spaces
abstract: Language-integrated query (LINQ) operators can be extended to a set of vectors associated with a digital signal processing (DSP) environment. A language-integrated query (LINQ) operator can be created to execute a change of basis for a set of vectors. LINQ operators can be further be utilized with specifically generated parameters to perform a change of basis for the set of vectors. Additionally, the standard LINQ operators can be extended to enable querying with LINQ against the set of vectors.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08694565&OS=08694565&RS=08694565
owner: Microsoft Corporation
number: 08694565
owner_city: Redmond
owner_country: US
publication_date: 20110616
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Language-integrated query (LINQ), and supporting technology, provide a convenient and declarative shorthand query syntax (e.g., SQL-like) to facilitate specification of queries within a programming language (e.g., C#\u00ae, Visual Basic\u00ae . . . ). More specifically, query operators are provided that map to lower-level language constructs or primitives such as methods and lambda expressions. Query operators are provided for various families of operations (e.g., filtering, projection, joining, grouping, ordering . . . ), and can include but are not limited to \u201cwhere\u201d and \u201cselect\u201d operators that map to methods that implement the operators that these names represent.","In particular, LINQ defines a set of method names (called standard query operators, or standard sequence operators), along with translation rules from query expressions to expressions using these method names, lambda expressions and anonymous types. These can, for example, be used to project and filter data in arrays, enumerable classes, XML (LINQ to XML), relational databases, and third party data sources. By way of example, a user can specify a query in a form such as \u201cfrom n in numbers where n<10 select n,\u201d wherein \u201cnumbers\u201d is a data source and the query returns integers from the data source that are less than ten. Further, query operators can be combined in various ways to generate queries of arbitrary complexity.","Conventionally, LINQ queries have be specified and executed with respect to a relational store. In a relational store or database, data is structured in terms of one or more tables. Tables are relations that comprise a number of columns and rows, wherein the named columns are referred to as attributes and rows capture data for specific entity instances. However, LINQ queries can be extended to support execution over non-relational data such as key-value stores, which maps unique keys to a set of one or more values. More specifically, the key-value store stores values and an index to facilitate location of the stored values based on a key.","The following presents a simplified summary in order to provide a basic understanding of some aspects of the disclosed subject matter. This summary is not an extensive overview. It is not intended to identify key\/critical elements or to delineate the scope of the claimed subject matter. Its sole purpose is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.","Briefly described, the subject disclosure generally pertains to language-integrated query (LINQ) operators. LINQ operator(s) can be generated and executed with particular parameters in order to effect a change of basis for a set of vectors. The set of vectors can be related to a digital signal processing (DSP) environment in which the set of vectors can be any suitable vector corresponding to discrete time signals. Specifically, LINQ operators can be executed with parameters in order to change the set of vectors from one basis to another basis. In other words, LINQ operators can perform transforms for vector data rather than complex computations or algorithms. Additionally, querying with standard LINQ operators can be extended to the set of vectors.","To the accomplishment of the foregoing and related ends, certain illustrative aspects of the claimed subject matter are described herein in connection with the following description and the annexed drawings. These aspects are indicative of various ways in which the subject matter may be practiced, all of which are intended to be within the scope of the claimed subject matter. Other advantages and novel features may become apparent from the following detailed description when considered in conjunction with the drawings.","Details below are generally directed toward applying a language-integrated query (LINQ) to perform a vector space change of basis. In other words, LINQ operators can implement a change of basis for a set of vectors represented in vector space. Such change of basis for a set of vectors can be a transform by employing LINQ and, in particular, LINQ query operators. LINQ operators can be extended to operate over the set of vectors represented in vector space wherein the vector space is generic over any field (e.g., a generalization of ordinary arithmetic objects with addition and multiplication that obey associative and distributive properties). Stated differently, LINQ operators implement a change of basis for a set of vectors for an underlying field such as complex numbers, real numbers, and quaternion numbers, among others.","Conventional techniques often require complex and resource-intensive calculations in order to perform change of basis for a set of vectors. Furthermore, advanced expertise is typically required in order to comprehend execution of such change of basis. This situation can be addressed by employing LINQ operators to perform a basis change for a set of vectors. Specifically, a \u201cSelectMany\u201d can be called and executed with specific parameters in order to enable a transform and change of basis for a set of vectors. The LINQ operator basis change technique can be employed having knowledge of LINQ yet little or no knowledge of the complexities involved with changing basis with a set of vectors.","Various aspects of the subject disclosure are now described in more detail with reference to the annexed drawings, wherein like numerals refer to like or corresponding elements throughout. It should be understood, however, that the drawings and detailed description relating thereto are not intended to limit the claimed subject matter to the particular form disclosed. Rather, the intention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the claimed subject matter.","Referring initially to , a vector conversion system  is illustrated. The vector conversion system  includes a transform component  that enables language-integrated query (LINQ) operators to be utilized to specify and ultimately effect a change of basis for a set of one or more vectors. In particular, the set of vectors can be represented in a vector space as arrays a length \u201cN\u201d (where \u201cN\u201d is a positive integer) of elements from an underlying mathematical field. Based at least in part upon this representation, the transform component  can extend LINQ operators to perform a change of basis for the set of vectors.","A vector space is a non-empty set of vectors over a field (e.g., real numbers, complex numbers . . . ) defined by two operations, namely vector addition and scalar multiplication as well as associated mathematical properties thereof. Graphically, a vector space can be viewed with respect to a number of vectors in a plane. For example, consider a piece of graph paper including an arrow from one point to another, which is a vector. This vector includes components, or in other words dimensions. For instance, a vector \u201cA\u201d can be drawn on the graph paper that goes four (4) blocks over to the right and three (3) blocks up. The vector \u201cA\u201d can be expressed (e.g., decomposed, expanded, etc.) in the standard basis in which the \u201cX\u201d component is four (4) and the \u201cY\u201d component is three (3). Another vector \u201cB\u201d can be included on the graph paper that starts at the head of the arrow on vector \u201cA\u201d and goes two (2) over and five (5) up (e.g., X component  and Y component ). A vector space allows for vector addition\u2014connect the tail of vector \u201cA\u201d to the head of vector \u201cB\u201d to produce new vector \u201cC.\u2019 Vector \u201cC\u201d goes \u201c4+2\u201d over and \u201c3+5\u201d up (e.g., expression of vector C is X component  and Y component ). In other words, vector \u201cC\u201d is the vector sum of vector \u201cA\u201d and vector \u201cB.\u201d Those components are represented with respect to a particular grid on the graphing paper.","Now consider employment of another sheet of tracing graph paper (e.g., see-through graph paper) placed on top of the graph paper. In other words, vector \u201cA,\u201d vector \u201cB,\u201d and vector \u201cC\u201d can be seen through the tracing graph paper. This tracing paper can be rotated around the tail of vector \u201cA.\u201d For instance, a tack can be placed on the tail of vector \u201cA\u201d through the tracing graph paper and the graph paper in which the tracing graph paper is rotated. The vectors have not changed but the projection of the vectors onto the tracing graph paper has changed\u2014this is a change of basis (e.g., rotation about a point). Other change of basis can include sliding the tracing paper, a combination of a slide and a rotation, a sheering of the tracing graph paper (e.g., not physically possible), and so on. In general, change of basis for a set of vectors is a change of projection and orientation around a particular point.","These changes of basis can be executed with LINQ in which the change of basis can be related to any set of vectors from an underlying mathematical field. For instance, the change of basis can be a Discrete Fourier Transform, a Wavelet Transform, expansion in Legendre Functions, Hermite Functions, Hypergeometric Functions, Chebyshev polynomials, Gegenbaur polynomial, or any complete collection of orthonormal functions, among others. In general, LINQ operators can enable a change of basis for any set of vectors represented in vector space as arrays of length \u201cN\u201d of elements over any underlying mathematical field, where \u201cN\u201d is a positive integer.","The subject disclosure includes exemplary techniques associated with sequence operators (e.g., LINQ operator(s), among others) in order to implement a change of basis for a set of vectors represented in a vector space. However, it is to be appreciated that the subject disclosure is intended to include the extension of any suitable functional programming language as well as any suitable functional programming language operator(s) (e.g., sequence operator(s)) to effect a change of basis for a set of vectors. For example, a sequence operator can be a defined method name for a functional programming language. Furthermore, functional programming languages can include programming structures (e.g., monads) that represent computations (e.g., also referred to as a \u201ccomputational monad\u201d), wherein a computational monad can be expressed in various programming languages such as Java, Scala, Python, Haskell, among others. In general, a monad can include two operators (e.g., a bind and a return) and a type constructor that allows accurate composition of monadic functions. Thus, the subject disclosure further includes extending any suitable computational monad or sequence operator associated therewith in order to employ a change of basis for a set of vectors as described in more detail below. For example, Haskell sequence operator(s) can be extended and in particular, \u201cFlatMap\u201d can be extended to change basis for a set of vectors represented in vector space. It is to be appreciated and understood that such variations from one functional programming language and sequence operator(s) to another functional programming language and sequence operator(s) are within the scope of the subject innovation.","Continuing with , the transform component  includes a generic type component . The generic type component  creates a vector space for the set of vectors. Furthermore, the generic type component  maps the set of vectors and vector space to a generic type within a programming language. Stated differently, the generic type component  represents a basis of the vector space corresponding to the set of vectors as a generic type parameter in a programming language. By way of example and not limitation, the programming language can be any .NET\u00ae language such as C#\u00ae, F#, or a Visual Basic\u00ae. The basis represented by the generic type component  can be, but is not limited to, a standard basis, the Fourier Basis, the Wavelet Basis, a basis related to the standard orthogonal polynomials, a basis related to Legendre Polynomials, a basis related to Gegenbauer Polynomials, a basis related to Hermite Polynomials, a basis corresponding to the Hypergeometric functions, a Chebyshev basis, among others.","The generic type component  further monitors criteria associated with the set of vectors received, collected, gathered, etc. The generic type component  can check the set of vectors to ensure criteria is satisfied. For example, components of the set of vectors can be numbers drawn from a field, wherein the numbers can be added, subtracted, multiplied, and divided. It is to be appreciated the components of the vectors can be other kinds of numbers such as numbers that are drawn from a field (e.g., field of complex numbers, field of real numbers, field of quaternion numbers). Additionally, any number of dimensions can be employed. A vector in \u201cN\u201d dimensions has \u201cN\u201d components, each of which is number from the underlying field (where \u201cN\u201d is a positive integer).","The transform component  further includes a LINQ component  that employs LINQ operators to the set of vectors represented in the vector space. In particular, the LINQ component  executes a LINQ operator with specific and tailored parameters in order to perform a change of basis. For instance, the LINQ component  can implement LINQ operators such as, \u201cReturn\u201d (e.g., constructor), \u201cSelect\u201d and \u201cSelectMany\u201d as change of basis for the set of vectors. Stated differently, the LINQ component  generates parameters with the set of vectors and executes LINQ operators in order to perform a change of basis (also referred to as a transform).","It is to be appreciated that the subject innovation can be employed with LINQ operators as well as any suitable operators, functions, or mechanisms that perform operations comparable to particular LINQ operators. For instance, the \u201cSelectMany\u201d LINQ operator can project each element of a sequence to an IEnumerable<T> and flattens the resulting sequences into one sequence. In particular, \u201cSelectMany\u201d can take a sequence, iterate over each element in the sequence, projecting each element into IEnumerable<T> (e.g., while iterating), and aggregates the resulting IEnumerables back into a single sequence.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2","b":["200","200","110","200","110","120","130","110","110"]},"The change of basis system  further includes a basis selection component . With the basis selection component , the set of vectors can be manipulated by the LINQ operators in order to perform a change of basis. In particular, the basis selection component  can include mappings, algorithms, and processing parameters in which a specific basis change utilizes for a transform.","Generally, the basis selection component  facilitates changing a source basis of a set of vectors to a target basis for the set of vectors. For instance, a change of basis for a set of vectors can include particular set or subset of LINQ operators and parameters to perform the transform to a target basis (discussed in more detail in ). Moreover, the basis selection component  can include interfaces in which available basis changes are displayed for selection to employ. For example, the basis selection component  can enable a selection from a list of available basis (e.g., a standard basis, the Fourier Basis, the Wavelet Basis, a basis related to the standard orthogonal polynomials, a basis related to Legendre Polynomials, a basis related to Gegenbauer Polynomials, a basis related to Hermite Polynomials, a basis corresponding to the Hypergeometric functions, a basis corresponding to Chebyshev polynomials, etc.), wherein based upon such selection, particular LINQ operators and settings (e.g., parameters) are employed to update the set of vectors to a target basis (e.g., selected basis from the list).","The change of basis system  can be employed for any suitable LINQ standard operator store  (also referred to as store ). In general, the LINQ component  can execute LINQ operators via the store  regardless of a data connection there between. Moreover, the basis selection component  can leverage the store  for any suitable LINQ operators for a target basis. For instance, the store  can be cloud-based, server-based, wireless, hard-wired, and the like. In other words, the LINQ component  can directly execute LINQ operators with particular parameters in order to perform a specific change of basis selected (via the basis selection component ). LINQ operators and other LINQ similar syntax can be leveraged from the store  independent of a physical location (e.g., remote, local, any combination thereof, etc.) and\/or data connection (e.g., cloud, wireless, local area network (LAN), any combination thereof, etc.).",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 3","b":["300","300","110","120","130"]},"A vector source component  can aggregate the set of vectors from any suitable source such as, but not limited to, a system, an environment, a store, a server, among others. In general, the vector source component  can collect vector data in which a change of basis is to be performed or can be performed. Although the vector source component  is illustrated as a separate component, it is to be appreciated that the vector source component  can be integrated into the transform component , integrated into the generic type component , integrated into the LINQ component , a cloud-based component, or any combination thereof. Moreover, the vector source component  can be any suitable Application Programming Interface (API) or plug-in that communicates with remote or local systems in order to aggregate vector data to which a change of basis is desired.","The vector transform system  further includes the basis selection component  that is configured to map LINQ operators to effect a particular change of basis for the set of vectors. The basis selection component  can facilitate performing various change of basis, wherein each change of basis can correlate to at least one LINQ operator with specific parameter(s). Stated differently, the basis selection component  manages LINQ operators and corresponding parameters such that a selected change of basis can be performed. It is to be appreciated and understood that the basis selection component  can manage any suitable number of change of basis such as a change of basisto a change of basis, where \u201cN\u201d is a positive integer. Moreover, it is to be appreciated that for each change of basisto change of basis, there can be any suitable number of LINQ operators utilized to perform the transform such as LINQ operatorto LINQ operator, where \u201cM\u201d is a positive integer. By way of example and not limitation, a change of basis of a set of vectors to the Fourier Basis can utilize three (3) LINQ operators whereas a change of basis for the set of vectors to the Wavelet Basis can utilize four (4) LINQ operators.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 4","b":["400","400","110","110"]},"The transform component  includes a generic type component  that can create a vector space for a set of vectors. Moreover, the generic type component  can create a basis as a generic type in a programming language. For instance, the generic type component  can create the following basis as a generic type in a programming language: the Standard Basis, The Fourier Basis, the Wavelet basis, all the standard orthogonal polynomials like Legendre, Gegenbauer, Hermite, Hypergeometric functions, Chebyshev basis, etc. It is to be appreciated that Legendre polynomials can be employed for mapping applications based upon being the foundation for spherical harmonics, which improve accuracy and performance for some models of the \u201cLumpy Earth\u201d (e.g., models related to the Earth's gravity field as being lumpy\u2014also referred to as a geoid).","The LINQ component  generates LINQ operators that execute a change of basis for a set of vectors. In general, the LINQ component  can implement a \u201cReturn\u201d (constructor), \u201cSelect\u201d and \u201cSelectMany\u201d as a change of basis in vector spaces and demonstrate a transform such as, but not limited to a Fourier Transform. The LINQ component  sets up a transform as a Kleisli composition, wherein a \u201cSelectMany\u201d is called over two arguments (e.g., parameters generated by the system ). For instance, the LINQ component  can create an instance of the vector space in a first basis (e.g., Basis \u201cB\u201d) and a function from the first basis (Basis \u201cB\u201d) to a vector space in second basis (e.g., Basis \u201cC\u201d). The LINQ component  can execute \u201cSelectMany\u201d with the instance and the function to produce the vector space in the second basis (e.g., Basis \u201cC\u201d). Moreover, the above can be employed as a lazy mechanization of the change of basis as expansion of the set of vectors in the new basis (e.g., second basis, Basis \u201cC\u201d, etc.).","The system  further includes a standard LINQ operator component  that extends LINQ operators to the set of vectors. The standard LINQ operator component  executes LINQ operators via querying with LINQ in order to perform sophisticated computations (e.g., in Digital Signal Processing (DSP), with sets of vectors, etc.) as well as all the applications of querying with LINQ over lists, arrays, Structured Query Language (SQL) tables, Extensible Markup Language (XML) documents, etc. In particular, operators of a LINQ API (e.g., Standard Query Operators, \u201cReturn,\u201d \u201cSelectMany,\u201d etc.) can be executed with the set of vectors represented in the vector space. It is to be appreciated that the operators of a LINQ API are enabled based upon the theory of monads in programming Vector space is a monad over a choice of basis rather than a monad over changing numbers to complex, quaternions, etc. Stated differently, \u201cSelectMany\u201d is a unique LINQ operator in that if implemented (as discussed and shown herein) then the Standard LINQ operators can be performed.","The set of vectors represented in vector space can originate from a Digital Signal Processing (DSP) environment . In other words, the system  can extend LINQ operators with created parameters in order to perform change of basis as well as implementation of querying with LINQ in connection with the Digital Signal Processing (DSP) environment . The DSP environment  can be any suitable environment that includes vector data related to discrete time signals. Moreover, it is to be appreciated that the DSP environment  can be remote, local, cloud-based, and\/or any combination thereof. Although not depicted in , the vector source component  can aggregate vector data from the DSP environment .",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 5","b":["500","500","110","420"]},"As discussed, the DSP environment  can include vector data related to any discrete time signals. In particular, the DSP environment  can correspond to audio , image , and video . The transform component  extends LINQ operators to audio , image , and video . Moreover, the transform component  allows LINQ operators (e.g., querying with LINQ, employing LINQ to change basis, etc.) to be implemented with DSP applications such as, but not limited to, filtering, harmonic analysis, image processing, audio equalization, video compression, among others.","For example, the DSP environment  can include vector data in which the generic type component  and the LINQ component  can perform a change of basis for such vector data. It is to be appreciated that the change of basis performed can facilitate implementing DSP applications stated above. Moreover, the standard LINQ operator component  extends LINQ operators to query the vector data. Stated differently, vector data associated with the DSP environment  can be queried with LINQ using LINQ operators rather than typical complex algorithms or computations associated with change of basis, transforms, and the like.","The generic type component  represents the set of vectors in a Vector Space (\u201cVS\u201d) as arrays of length \u201cN\u201d of elements from an underlying mathematical field, where \u201cN\u201d is a positive integer. It is to be appreciated that the field can be any suitable mathematical field such as, but not limited to, complex numbers, real numbers, or quaternion numbers, among others. The generic type component  further represents a basis of the Vector Space (\u201cVS\u201d) as an abstract base class supporting: an integer dimension property \u201cn\u201d, where \u201cn\u201d is a positive integer; an n-array of vectors (expressed in a standard basis) constituting this basis; an inner product over pairs of vectors (e.g., when vectors are expressed in the same basis, the inner product can be computed); and an expand method that expresses any vector in this basis (given that the prior basis of the vector is known).","By way of example and not limitation, the standard basis and the Fourier Basis can be implemented as subclasses of the abstract basis class. It is to be appreciated that other basis (e.g., a standard basis, the Fourier Basis, the Wavelet Basis, a basis related to the standard orthogonal polynomials, a basis related to Legendre Polynomials, a basis related to Gegenbauer Polynomials, a basis related to Hermite Polynomials, a basis corresponding to the Hypergeometric functions, a basis corresponding to Chebyshev polynomials, etc.) can be implemented in a substantially similar manner as the example of the standard basis and the Fourier Basis.","The LINQ component  represents the Vector Space (\u201cVS\u201d) as a class generic on its basis parameter. Thus, one instance of this Vector Space class represents vectors expanded in the standard basis. Another instance of the class represents the same mathematical vector space just with vectors expanded in the Fourier Basis. It is to be appreciated that this can be extended to other basis as discussed above.","As discussed, the LINQ component  sets up a transform as a Kleisli composition, wherein a \u201cSelectMany\u201d is called over two arguments (e.g., parameters generated by the system ). For instance, the LINQ component  can create an instance of the vector space in a first basis (e.g., Basis \u201cB\u201d) and a function from the first basis (Basis \u201cB\u201d) to a vector space in second basis (e.g., Basis \u201cC\u201d). The LINQ component  can execute \u201cSelectMany\u201d with the instance and the function to produce the vector space in the second basis (e.g., Basis \u201cC\u201d). Moreover, the above can be employed as a lazy mechanization of the change of basis as expansion of the set of vectors in the new basis (e.g., second basis, Basis \u201cC\u201d, etc.). The LINQ component  can execute the LINQ operator \u201cSelectMany\u201d in order to effect the basis change as follows:",{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public static VS<C> SelectMany<B, C>(this VS<B> mb, Func<B,"]},{"entry":[{},"VS<C>> f)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"where B : Basis"]},{"entry":[{},"where C : Basis { return f(mb.MyBasis); }"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public static VS<C> SelectMany<B, C>(this VS<B> mb, Func<B,"]},{"entry":[{},"VS<B>> f,"]},{"entry":[{},"Func<B, B, C> g)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"where B : Basis"]},{"entry":[{},"where C : Basis"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return mb.SelectMany(x => f(x).Select(y => g(x, y)));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"Additionally, a \u201cSelect\u201d (e.g., map) builds up the generalized \u201cSelectMany\u201d as follows:",{"@attributes":{"id":"p-0051","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"public static VS<C> Select<B, C> (this VS<B> mb, Func<B, C> b2c)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"where B : Basis"]},{"entry":[{},"where C : Basis { return Return(b2c(mb.MyBasis)); }"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"As discussed above, the standard LINQ operator component  extends LINQ standard query operators based on the above technique. Moreover, Fourier transform (following this example) is effected lazily by an expand operator after a basis change. It is to be appreciated that any suitable transform can be effected lazily by an expand operator after a basis change.","The aforementioned systems, architectures, environments, and the like have been described with respect to interaction between several components. It should be appreciated that such systems and components can include those components or sub-components specified therein, some of the specified components or sub-components, and\/or additional components. Sub-components could also be implemented as components communicatively coupled to other components rather than included within parent components. Further yet, one or more components and\/or sub-components may be combined into a single component to provide aggregate functionality. The components may also interact with one or more other components not specifically described herein for the sake of brevity, but known by those of skill in the art.","Furthermore, as will be appreciated, various portions of the disclosed systems above and methods below can include or consist of artificial intelligence, machine learning, or knowledge or rule-based components, sub-components, processes, means, methodologies, or mechanisms (e.g., support vector machines, neural networks, expert systems, Bayesian belief networks, fuzzy logic, data fusion engines, classifiers . . . ). Such components, inter alia, can automate certain mechanisms or processes performed thereby to make portions of the systems and methods more adaptive as well as efficient and intelligent. By way of example and not limitation, the transform component  or one or more sub-components thereof can employ such mechanisms to efficiently determine or otherwise infer conversion techniques related to generating a LINQ operator and associated parameters in order to perform a change of basis for a set of vectors represented within a vector space.","In view of the exemplary systems described supra, methodologies that may be implemented in accordance with the disclosed subject matter will be better appreciated with reference to the flow charts of . While for purposes of simplicity of explanation, the methodologies are shown and described as a series of blocks, it is to be understood and appreciated that the claimed subject matter is not limited by the order of the blocks, as some blocks may occur in different orders and\/or concurrently with other blocks from what is depicted and described herein. Moreover, not all illustrated blocks may be required to implement the methods described hereinafter.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 6","b":["600","610","620"]},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 7","b":["700","710","720","730"]},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 8","b":"810"},"At reference numeral , an instance of the vector space can be created in a first basis. At reference numeral , a function from the first basis to a vector space in a second basis can be created. At reference numeral , a LINQ operator can be utilized with the instance and the function to perform a change of basis for the set of vectors. Stated differently, LINQ operators are employed to perform a transform and basis change for a given set of vectors represented in a vector space.","As used herein, the terms \u201ccomponent\u201d and \u201csystem,\u201d as well as forms thereof are intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an instance, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a computer and the computer can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers.","The word \u201cexemplary\u201d or various forms thereof are used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as \u201cexemplary\u201d is not necessarily to be construed as preferred or advantageous over other aspects or designs. Furthermore, examples are provided solely for purposes of clarity and understanding and are not meant to limit or restrict the claimed subject matter or relevant portions of this disclosure in any manner. It is to be appreciated a myriad of additional or alternate examples of varying scope could have been presented, but have been omitted for purposes of brevity.","As used herein, the term \u201cinference\u201d or \u201cinfer\u201d refers generally to the process of reasoning about or inferring states of the system, environment, and\/or user from a set of observations as captured via events and\/or data. Inference can be employed to identify a specific context or action, or can generate a probability distribution over states, for example. The inference can be probabilistic\u2014that is, the computation of a probability distribution over states of interest based on a consideration of data and events. Inference can also refer to techniques employed for composing higher-level events from a set of events and\/or data. Such inference results in the construction of new events or actions from a set of observed events and\/or stored event data, whether or not the events are correlated in close temporal proximity, and whether the events and data come from one or several event and data sources. Various classification schemes and\/or systems (e.g., support vector machines, neural networks, expert systems, Bayesian belief networks, fuzzy logic, data fusion engines . . . ) can be employed in connection with performing automatic and\/or inferred action in connection with the claimed subject matter.","Furthermore, to the extent that the terms \u201cincludes,\u201d \u201ccontains,\u201d \u201chas,\u201d \u201chaving\u201d or variations in form thereof are used in either the detailed description or the claims, such terms are intended to be inclusive in a manner similar to the term \u201ccomprising\u201d as \u201ccomprising\u201d is interpreted when employed as a transitional word in a claim.","In order to provide a context for the claimed subject matter,  as well as the following discussion are intended to provide a brief, general description of a suitable environment in which various aspects of the subject matter can be implemented. The suitable environment, however, is only an example and is not intended to suggest any limitation as to scope of use or functionality.","While the above disclosed system and methods can be described in the general context of computer-executable instructions of a program that runs on one or more computers, those skilled in the art will recognize that aspects can also be implemented in combination with other program modules or the like. Generally, program modules include routines, programs, components, data structures, among other things that perform particular tasks and\/or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the above systems and methods can be practiced with various computer system configurations, including single-processor, multi-processor or multi-core processor computer systems, mini-computing devices, mainframe computers, as well as personal computers, hand-held computing devices (e.g., personal digital assistant (PDA), phone, watch . . . ), microprocessor-based or programmable consumer or industrial electronics, and the like. Aspects can also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. However, some, if not all aspects of the claimed subject matter can be practiced on stand-alone computers. In a distributed computing environment, program modules may be located in one or both of local and remote memory storage devices.","With reference to , illustrated is an example general-purpose computer  or computing device (e.g., desktop, laptop, server, hand-held, programmable consumer or industrial electronics, set-top box, game system . . . ). The computer  includes one or more processor(s) , memory , system bus , mass storage , and one or more interface components . The system bus  communicatively couples at least the above system components. However, it is to be appreciated that in its simplest form the computer  can include one or more processors  coupled to memory  that execute various computer executable actions, instructions, and or components.","The processor(s)  can be implemented with a general purpose processor, a digital signal processor (DSP), an application specific integrated circuit (ASIC), a field programmable gate array (FPGA) or other programmable logic device, discrete gate or transistor logic, discrete hardware components, or any combination thereof designed to perform the functions described herein. A general-purpose processor may be a microprocessor, but in the alternative, the processor may be any processor, controller, microcontroller, or state machine. The processor(s)  may also be implemented as a combination of computing devices, for example a combination of a DSP and a microprocessor, a plurality of microprocessors, multi-core processors, one or more microprocessors in conjunction with a DSP core, or any other such configuration.","The computer  can include or otherwise interact with a variety of computer-readable media to facilitate control of the computer  to implement one or more aspects of the claimed subject matter. The computer-readable media can be any available media that can be accessed by the computer  and includes volatile and nonvolatile media and removable and non-removable media. By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media.","Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules, or other data. Computer storage media includes, but is not limited to memory devices (e.g., random access memory (RAM), read-only memory (ROM), electrically erasable programmable read-only memory (EEPROM) . . . ), magnetic storage devices (e.g., hard disk, floppy disk, cassettes, tape . . . ), optical disks (e.g., compact disk (CD), digital versatile disk (DVD) . . . ), and solid state devices (e.g., solid state drive (SSD), flash memory drive (e.g., card, stick, key drive . . . ) . . . ), or any other medium which can be used to store the desired information and which can be accessed by the computer .","Communication media typically embodies computer-readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer-readable media.","Memory  and mass storage  are examples of computer-readable storage media. Depending on the exact configuration and type of computing device, memory  may be volatile (e.g., RAM), non-volatile (e.g., ROM, flash memory . . . ) or some combination of the two. By way of example, the basic input\/output system (BIOS), including basic routines to transfer information between elements within the computer , such as during start-up, can be stored in nonvolatile memory, while volatile memory can act as external cache memory to facilitate processing by the processor(s) , among other things.","Mass storage  includes removable\/non-removable, volatile\/non-volatile computer storage media for storage of large amounts of data relative to the memory . For example, mass storage  includes, but is not limited to, one or more devices such as a magnetic or optical disk drive, floppy disk drive, flash memory, solid-state drive, or memory stick.","Memory  and mass storage  can include, or have stored therein, operating system , one or more applications , one or more program modules , and data . The operating system  acts to control and allocate resources of the computer . Applications  include one or both of system and application software and can exploit management of resources by the operating system  through program modules  and data  stored in memory  and\/or mass storage  to perform one or more actions. Accordingly, applications  can turn a general-purpose computer  into a specialized machine in accordance with the logic provided thereby.","All or portions of the claimed subject matter can be implemented using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof to control a computer to realize the disclosed functionality. By way of example and not limitation, the transform component  can be, or form part, of an application , and include one or more modules  and data  stored in memory and\/or mass storage  whose functionality can be realized when executed by one or more processor(s) , as shown.","In accordance with one particular embodiment, the processor(s)  can correspond to a system-on-a-chip (SOC) or like architecture including, or in other words integrating, both hardware and software on a single integrated circuit substrate. Here, the processor(s)  can include one or more processors as well as memory at least similar to processor(s)  and memory , among other things. Conventional processors include a minimal amount of hardware and software and rely extensively on external hardware and software. By contrast, an SOC implementation of processor is more powerful, as it embeds hardware and software therein that enable particular functionality with minimal or no reliance on external hardware and software. For example, the transform component , and\/or associated functionality can be embedded within hardware in a SOC architecture.","The computer  also includes one or more interface components  that are communicatively coupled to the system bus  and facilitate interaction with the computer . By way of example, the interface component  can be a port (e.g., serial, parallel, PCMCIA, USB, FireWire . . . ) or an interface card (e.g., sound, video . . . ) or the like. In one example implementation, the interface component  can be embodied as a user input\/output interface to enable a user to enter commands and information into the computer  through one or more input devices (e.g., pointing device such as a mouse, trackball, stylus, touch pad, keyboard, microphone, joystick, game pad, satellite dish, scanner, camera, other computer . . . ). In another example implementation, the interface component  can be embodied as an output peripheral interface to supply output to displays (e.g., CRT, LCD, plasma . . . ), speakers, printers, and\/or other computers, among other things. Still further yet, the interface component  can be embodied as a network interface to enable communication with other computing devices (not shown), such as over a wired or wireless communications link.","What has been described above includes examples of aspects of the claimed subject matter. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the claimed subject matter, but one of ordinary skill in the art may recognize that many further combinations and permutations of the disclosed subject matter are possible. Accordingly, the disclosed subject matter is intended to embrace all such alterations, modifications, and variations that fall within the spirit and scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
