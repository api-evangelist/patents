---
title: Computer software framework and method for managing communication flow between a user interface and a computer application
abstract: The present invention discloses a computer software framework and method for managing communication flow between a user interface and a computer application performing a task comprising a plurality of steps. The sequence of the steps is controlled by the application, and a user operating the user interface controls the progression through the steps. Each step is mapped to an output file containing information to be sent to the user interface in support of the step. Each task is mapped to an output generator that generates an output sent via an output medium to the user interface based upon the content of the output file. A task object is instantiated, which models the task. The task object receives a progressional input from the user interface and receives a step sequence input from the application. The task object compares the progressional input to the step sequence input to identify a subsequent step, identifies the output file mapped to the subsequent step, and calls the output generator mapped to the task to generate an output to the user interface based upon the content of the output file mapped to the subsequent step.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06971108&OS=06971108&RS=06971108
owner: Sprint Communications Company L.P.
number: 06971108
owner_city: Overland Park
owner_country: US
publication_date: 20000928
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention is a computer software framework and method for managing communication flow between a user interface and a computer application performing a task comprising a plurality of steps. More specifically, the framework and method abstract the communication between the application and a user interface on a step-wise basis, thereby coupling each step with specific input from and output to the user interface.","Computer applications exist that perform a business process (i.e., task), which usually can be broken into individual components (i.e., steps). These applications often contain logic that controls the sequence in which the steps are carried out. Furthermore, these applications, which may reside locally or on a network server, frequently communicate with a user through a user interface such as a terminal or workstation. The user provides information or directions (i.e., a progression input) to the application, and the application provides output to the user interface, for example pages or text to be displayed on a screen. In order to ensure continuity in executing the task, it is important that progression input is received by and output is sent to the user interface in the logical sequence associated with the steps of the task being carried out by the business application. The method and framework of the present invention manages communication flow between the user interface and the computer application performing the task comprising a plurality of steps. More specifically, the framework abstracts the communication functions from the business process functions. In other words, the framework encapsulates the process for communication of information to and from a user interface separate and apart from the underlying business process (i.e., task and associated steps) being carried out by an application, thus creating a set of uniform APIs such that the presentation functions can be reused to link a variety of different applications and\/or tasks with a variety of different user interfaces (e.g., a web browser, an interactive voice response (IVR) console, etc.). The result is easier navigation within the application for the user, improved continuity in execution of the application, code reusability, and availability of a consistent set of application programming interfaces (APIs) to application developers regardless of the computer application, task, steps or user interface.","The present invention discloses a method for managing communication flow between a user interface and a computer application performing a task comprising a plurality of steps, the sequence of the steps controlled by the application and the progression through the steps controlled by a user operating the user interface, comprising (a) mapping each step to an output file containing information to be sent to the user interface in support of the step; (b) mapping each task to a output generator that generates an output sent via an output medium to the user interface based upon the content of the output file; and (c) instantiating a task object modeling the task, the task object receiving a progressional input from the user interface and receiving a step sequence input from the application, the task object further performing the steps of (i) comparing the progressional input to the step sequence input to identify a subsequent step, (ii) identifying the output file mapped to the subsequent step, and (iii) calling the output generator mapped to the task to generate an output to the user interface based upon the content of the output file mapped to the subsequent step.","The present invention further discloses a framework for managing communication flow between a user interface and a computer application performing a task comprising a plurality of steps, the sequence of the steps controlled by the application and the progression through the steps controlled by a user operating the user interface, comprising: (a) an initialization file mapping each step to an output file containing information to be sent to the user interface in support of the step and mapping each task to a output generator that generates an output sent via an output medium to the user interface based upon the content of the output file; and (b) a task object modeling the task, the task object receiving a progressional input from the user interface and receiving a step sequence input from the application, the task object further comprising methods to perform the steps of (i) comparing the progressional input to the step sequence input to identify a subsequent step, (ii) identifying the output file mapped to the subsequent step, and (iii) calling the output generator mapped to the task to generate an output to the user interface based upon the content of the output file mapped to the subsequent step.","The current invention assists a user, communicating through a user interface, with performing a business related task executed on a computer application operating on a computer system. Referring to , user interface  (i.e., a workstation) is connected to application  via network . The network connection can be any suitable type of network connection, for example an internet session, wherein user interface  comprises a web browser accessing a web server, which in turn is linked to an application server hosting application . Upon establishing the internet connection between the user interface and the application, the user can provide input  to the application. For example, a user might need to perform a business task such as updating a client's account information using an account manager application and database residing on a backend server. The user could identify the task and application by sending the corresponding uniform resource locator (URL) as input .","The task the user seeks to perform may comprise a number of individual steps, each of which may require additional input  to application  (via framework ) from the user interface. For example, in order to update an account, the first step might be to determine whether this is a new or existing account, and thus the user may have to enter this information, if known. If unknown, a preliminary database search step may have to be executed to determine if an account exists. If the update is to an existing account, the next step might be to enter the account number. If the update is to a new account, the next step might be to enter the type of new account to be opened. Each of these steps, including the initial or start-up step, will require application  to provide output  to user interface . In other words, the application must tell the user interface what information to communicate to the user, for example what text, page, or screen to display upon the computer monitor.","The sequence of the steps to perform a task is controlled by application . Subsequent steps should follow in a logical, ordered sequence as necessitated by the task being performed, and the computer application typically contains the underlying logic controlling the step sequence. The user navigates through the various steps by supplying input  to the application (also referred to as navigational or progressional input) in response to information and prompts (i.e., output ) communicated by the application to the user via the user interface.","The method and framework of the present invention manages communication flow between user interface  and application  performing a task comprising a plurality of steps. More specifically, framework  abstracts the communication (i.e., presentation) functions from the business process functions\/logic. In other words, the framework encapsulates the process for communication of information from an application to a user interface separate and apart from the underlying business process (i.e., task and associated steps) being carried out by the application, thus creating a set of uniform APIs such that the presentation functions can be reused to link a variety of different applications and\/or tasks with a variety of different user interfaces.","Framework  receives input  from user interface , which comprises a navigational input, and optionally additional task specific information (for example, a personal identification number, account number, etc.). Framework  queries application  (as represented by line ) and receives information from application  (as represented by line ) regarding the identity of the current step in the task corresponding to the navigational input from the user. Based upon the identity of the current step, framework  provides output  corresponding to the current step to user interface  across network .",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2","b":["30","105","100","105","30"]},"In response to the navigational input, task servlet  retrieves information from task utility  and provides the output to send to user interface , preferably in the form of an HTML page to display on the user's screen via a web browser. More specifically, task servlet  stores user requested actions (next, previous, or cancel) on task utility . Task utility  knows the current task  and its sequences of steps, and task  determines the subsequent step based on user requests (next, previous, or cancel). The application looks to an initialization (INI) file and determines from mapping what file (preferably an HTML file) corresponds to the subsequent step, which is provided to task servlet . Task servlet  serves an HTML page and sends it to user interface  for display on the screen.","A step is the basic component of a task, and framework  models the steps of a task through use of step class , which implements performable interface . The implementation of an object consists of a class definition that implements the object interface. As used in object technology, an interface (also known as a message interface) is a communication surface that determines the signals (e.g., calls) that can pass through the surface; in other words, the interface defines which calls an object will respond to. A class defines the methods and variables for a particular type of object; all objects of a given class are identical in form and behavior but contain different data in their variables. An abstract class is a class that contains one or more abstract methods (i.e., a method that has no implementation), and therefore can never be instantiated. Abstract classes contain useful information and methods and are defined so that other classes can extend them and make them concrete by implementing the abstract methods. Accessors are the methods on a class that provide access to the variables of the class (for example, get and set methods). The methods and variables comprising each class are shown in , and it will be understood that these methods and variables may be modified by one skilled in the art without departing from the scope of the present invention.","To create the step objects representing actual steps in a task, step class  may be subclassed. For example, error step class , which represents the step to be performed upon occurrence of an error, is a subclass that extends step class . The perform( ) method may be overridden to do some work associated with the task. The following is example code for creating a step named TestStep1:",{"@attributes":{"id":"p-0017","num":"0016"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Create a step: TestStep1"},{"entry":"public class TestStep1 extends com.sprint.arch.taskMgmt.Step {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public TestStep1(String step1) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"super(step1);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public TestStep1( ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"super( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public void perform(Object taskContext) throws TaskException {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/application code"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Task class  models a complete business process, and thus is comprised of a series of steps. To create a specific task object, subclass is created that extends task class , with steps comprising the individual components of the task. The sequence of the steps, as defined by the application, are coded into the specific task object that extends task class . The first step of the task typically is set during initialization. Task class  queries application  and receives information on the identity of the current step. Preferably, an abstract method, for example abstract method nextStep( ) , is implemented to receive information from the application that may be useful for determining the current step being performed by the application. Upon determining the current step, the task (extended from task class ) determines the identity of the subsequent step (i.e., next step, previous step, or cancel\/reset). If the user calls for the next step, the identity of the next step is determined from the coded task sequence. If the user calls for the previous step, the task utility determines the identity of the previous step from a historical path stored in a cache, which is preferably a Java object vector. If the user cancels the step or task, the application will execute a default setting, as discussed below. The following is example code for creating a task named TestTask and determining the next step:",{"@attributes":{"id":"p-0019","num":"0018"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Create a task: TestTask"]},{"entry":[{},"public class TestTask extends Task {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public TestTask( ) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/Initialize to set first step"]},{"entry":[{},"setFirstStep(\u201cName of first step\u201d)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"protected Performable nextStep(Object taskContext) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Step step = null;"]},{"entry":[{},"String currentStepName = getCurrentStep( ).getName( );"]},{"entry":[{},"\/\/determine the next step based on the current step"]},{"entry":[{},"if (currentStepName.equals(\u201cTestStep1\u201d)) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"step = new TestStep2(\u201cTestStep2\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},". . ."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"return step;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"An output generation component is needed to generate an output  sent via an output medium over network  to user interface . Prefereably, the output generation component is a Java servlet (i.e., task servlet ) or a Java applet. A servlet is a program written in the Java programming language that extends the functionality of a web server, generating dynamic content and interacting with web clients using a request-response paradigm. An applet is a component that executes in a web browser, but can also execute in a variety of other applications or devices that support the applet programming model. Preferably the output medium is HTML pages transmitted via HTTP protocol, but other suitable output mediums and protocols may be used such as interactive voice response (IVR) communications. To create a specific servlet object, a subclass is created that extends task servlet class , implementing methods such as:\n\n",{"@attributes":{"id":"p-0021","num":"0024"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/Create a servlet: TestServlet"},{"entry":"public class TestServlet extends TaskServlet {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public Log logger( )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/create an instance of Log and use it to log message"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ Refer to the Logging framework user guide for more details."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return null;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public String redirectServletName(HttpSession session) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2002\/\/return the name of another URL to which this servlet should"]},{"entry":[{},"redirect"]},{"entry":[{},"return null;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The sample code for task servlet includes an optional logger to log messages. The abstract logging method should be implemented by subclasses defining and returns log types. The sample code also includes a method for servlet redirection, which provides the ability to control navigation among tasks within an application. To redirect, servlets implement the abstract method, redirectServletName( ), which returns a fully qualified URL for redirection.","Task servlet class  defines a reset( ) method which provides a default cancel functionality in the event that navigational input received from the user is cancel\/reset. This responsibility is delegated to task utility class , which will clear any history held in a task and clears the formParameter and screenmap attributes. The reset( ) is invoked when an HTTP request from the user contains the HTML form parameter, RequestName, set to \u201ccancel\u201d. A preferred default setting upon cancel is that task servlet class  continues processing the current task beginning with its first step.",{"@attributes":{"id":"p-0024","num":"0027"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"protected void reset(HttpSession session,HttpServletResponse res) {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TaskUtility util = lookupTaskUtility(session);"]},{"entry":[{},"util.reset( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"30"},{"@attributes":{"id":"p-0025","num":"0028"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"protected void reset(HttpSession session,HttpServletResponse res) {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"super.reset( )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/Redirect to another servlet"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"redirectRequest(res, \u201cURL used in redirection\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Task servlet class  preferably uses a utility class, an HTML template, to generate the HTML associated with a given step that is to be displayed by the web browser. This utility will use a document root and a screenmap from the initilization file to locate an HTML file based on the identity of the given step (i.e., by mapping the step name to a file). Another HTML generation utility may be used or some custom functionality may be defined by overriding the following code:",{"@attributes":{"id":"p-0027","num":"0030"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public void generateScreen(HttpServletResponse response,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002HttpSession aSession,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002TaskUtility taskUtil,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002Object aTaskContext) throws"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002TaskException, IOException"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/generateScreen( ) code"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Dynamic content can be added to the HTML pages, as the HTML template class will parse a static page replacing special tags with application specific content. Dynamic content is useful in obtaining additional task specific information from the user, which is passed through to the application for processing. For example, a tag such as <SUBST KEY=subtKey> should appear in an HTML file wherever dynamic content is desired. The keyword, subtKey, is associated with a value in a hashtable returned by a buildSubstitutionParameters( ) methods on a task servlet subclass. That value will replace the <SUBST> tag once the HTML file is generated. The default implementation returns an empty hashtable.",{"@attributes":{"id":"p-0029","num":"0032"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"protected Hashtable buildSubstitutionParameters(HttpSession session)"},{"entry":"throws TaskException {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return new Hashtable( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0030","num":"0033"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"protected Hashtable buildSubstitutionParameters(HttpSession session)"},{"entry":"throws TaskException {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Hashtable temp = new Hashtable( );"]},{"entry":[{},"temp.put(\u201credirectURL\u201d,"]},{"entry":[{},"\u201ccom.sprint.arch.taskMgmt.examples.TestServlet\u201d);"]},{"entry":[{},"return temp;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The framework should be initialized, for example by defining sets of key\/value pairs to be used during communication management. Preferably, these keys\/values pairs are initialized in a properties object upon startup. An initialization (INI) file preferably contains base servlet information defining the environment settings all servlets will need to process HTML files, locate additional servlets and respond in cases of exceptions. Preferably, the following four keys are defined:\n\n","A one-to-one mapping of a servlet to a task is another preferred entry for the properties object. As used herein one-to-one mapping of a servlet to a task means that for each servlet there is but one corresponding task. An unlimited number of mappings may be used. Furthermore, each servlet defined by the application is preferably defined in the properties object as a key. A preferred key\/value pair format is: fully qualified name of task servlet class=fully qualified name of task class.","The final key\/value pair defines the task to screenmap mapping. The task servlet uses a screenmap to determine which HTML file to generate based on the identity of a given step (i.e., the step name). For each task, a screenmap is preferably defined in a properties object as follows: fully qualified name of task class=screenmap. The screenmap preferably is a comma-separated list of step names mapped to HTML files in the following format: StepName1=file1.html, StepName2=file2.html, . . . . StepNameN=fileN.html. Preferably, steps are mapped to HTML files on a one-to-one basis. As used herein one-to-one mapping of a step to an HTML file means that for each step there is but one corresponding HTML file, provided however that an HTML file may be mapped to by more than one step (that is any given HTML file can be reused by any of the steps). The following example code describes how the required key\/value pairs should be defined in an INI file.",{"@attributes":{"id":"p-0034","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"#***********************************************************"},{"entry":"****"},{"entry":"#Base Servlet Info"},{"entry":"DocumentRoot=d:\/dsta\/ServletTest\/html\/"},{"entry":"ServletRoot=http:\/\/localhost:8080\/servlet\/"},{"entry":"ErrorPageName=ErrorPage.htm"},{"entry":"ValidationErrorPageName=ErrorPageName.htm"},{"entry":"#Servlet to Task Mapping"},{"entry":"com.sprint.arch.taskMgmt.examples.TestServlet="},{"entry":"com.sprint.arch.taskMgmt.examples.TestTask"},{"entry":"#ScreenMap"},{"entry":"com.sprint.arch.taskMgmt.examples.TestTask = TestStep 1 ="},{"entry":"SecondPage.htm,\\"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TestStep2 = ThirdPage.htm,\\"]},{"entry":[{},"TestStepFinal = FinalPage.htm"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The framework also include exception handling to catch and handle all system or application errors and exceptions, as shown by task exception class  and exception subclasses , , , , and . The setAppExceptionHandlerClassName( ) method on task utility takes the name of the application class defined to provide custom exception handling.",{"@attributes":{"id":"p-0036","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public final void setAppExceptionHandlerClassName(String className)"},{"entry":"throws IllegalArgumentException {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/method code"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0037","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"public interface ApplicationExceptionHandler {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public String handle(Throwable e, Log log) throws Throwable;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The present invention may be deployed at any architectural level within an enterprise wide computing system requiring communication flow management capabilities. In a preferred embodiment the method and framework of the present invention are deployed on an application server, which may be any of a number of commercially available computer servers appropriate for accessing backend systems (e.g., databases, mainframes, customer premises equipment, and the like) to serve the needs of a client or group of clients (e.g., a user station, another server, etc.). A preferred application server is a WebLogic server available from BEA Systems Inc.","While the code examples shown herein are written in the Java programming language, which is available from Sun Microsystems Inc., it is understood that other suitable programming languages may be used as will be readily apparent to one skilled in the art. Furthermore, it should be understood that the code examples are in skeleton or outline form, and are not necessarily intended to be in complete executable form, provided however that one skilled in the art could easily tailor executable code based upon these examples. The italicized text following the double backslashes (i.e., \u201c\/\/\u201d) is commentary text."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"}]},"DETDESC":[{},{}]}
