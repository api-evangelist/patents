---
title: Method and apparatus for validation of application data on a storage system
abstract: An authentication processing method and system includes an access control list on both a client system and a storage server system. The access control list stores authentication information for individual files. The authentication information is accessed and used to authenticate an application when the application requests access to a file. The client system adds information from the access control list to a data request sent to the storage server system. The storage server system controls access to the requested file based upon the information included with the data request and the access control list on the storage server system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07549171&OS=07549171&RS=07549171
owner: Hitachi, Ltd.
number: 07549171
owner_city: Tokyo
owner_country: JP
publication_date: 20040610
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Modified NFS Layers","OPEN Routine","CLOSE Routine","READ Routine and WRITE Routine","Enhanced Data Component","WRITE Routine","READ Routine"],"p":["The present invention relates generally to storage systems and in particular to validation of data on a storage system.","Computerization of personal information has created great challenges in ensuring the security of such sensitive data, while at the same time providing easy access by authorized personnel in order to provide needed services. For example, financial institutions and health care organizations maintain highly sensitive data. Financial and health care personnel are typical authorized users who need frequent access to the stored information. However, any large enterprise will employ system maintenance personnel who maintain the computers and data storage devices, but who are typically not authorized to access the stored data. Generally, in any large facility where there is sensitive information, there are people who have authorized access to such data and there are those who can access such data but who are not authorized to do so.","Therefore, it would be desirable to provide additional access control in a data storage facility.","The present invention is directed to a method and system for authenticated access of data on a data server system, the access occurring from a client system. Authentication information is associated with one or more files. Authentication processing is performed on a file when an application attempts to issues a read or a write operation to the file.","The present invention provides a method and a system of authentication between applications and a storage system server. A typical embodiment of the present invention includes a NAS storage server. The NAS server includes an authentication server (decomposer) to give a client access permission. The client uses authentication request modules (composer) comprising APIs or a CLI (Command line interface) to request access permission from the NAS server on behalf of the applications.","The system shown in  includes client systems  in data communication with a network . The network can be any suitable communication network, including but not limited to a local area network (LAN), wide area network (WAN), the Internet, and so on. Each client  typically comprises a data processing system, having components such as a central processing unit (CPU) , a memory component , and local storage . The client  is configured with a suitable communication interface  for communication over the network ; e.g. network interface card (NIC). As will be discussed in more detail below, the client  is configured with various software components to operate in accordance with the present invention.","A server system  is coupled to the network . The server  provides data storage facilities, represented by disks  (storage system), to provide data storage for the clients . A suitable controller unit  provides a communication interface between the server  and the network . The controller unit includes a network interface portion  which interfaces with the network  and one or more ports  which interface with the disks . Merely as an example, the server  shown in  is a network attached storage (NAS) server. As will be discussed in further detail below, the controller unit  is configured according to aspects of the present invention. It will become clear in the following discussion, that other storage server configurations can be readily adapted according to the present invention.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 1","FIG. 1"],"b":["40","30","40","30","71","40","40"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2","b":["10","102"]},"A virtual file system (VFS) component provides the client applications with an application programming interface (API) for accessing various different file systems. The application  invokes programs which comprise the VFS component  via the API to obtain file access services. In accordance with this particular embodiment of the present invention, the VFS component includes a composer  which will be discussed further below. An access control list (ACL) , likewise, will be discussed in greater detail below.","An NFS client  provides remote file access using NFS protocol or CIFS (common internet file system) protocol. It will be explained below that the NFS client  can be configured to operate in accordance with an embodiment the present invention. An RPC (remote procedure call) client stub  allows the NFS client  to communicate with its counterpart NFS server  in the server . A TCP\/IP layer  provides the low level transport protocol for communication over the network . The TCP\/IP layer produces packets (PKT) that can then be sent over the network  to the server . It will be understood from the discussion which follows, that other protocol schemes can be used, and if necessary, can be suitably adapted in accordance with the present invention.","At the server , a similar TCP\/IP layer  receives and transmits packets (PKT) from and to a client . An RPC server stub  is provided to allow an NFS server  to communicate with its counterpart NFS client . It will be discussed below that the NFS server  can be configured to operate in accordance with an embodiment of the present invention. A decomposer layer  will be discussed in further detail below. The disks  () contain a file system (FS) which hold data that is read by the clients  and supplied by the clients.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 3","b":["31","131","131"]},"Each entry in the ACL  includes a File System field  identifies a mount point of the file system that is used by NFS. A Directory field  holds information indicative of the directory in which the file is located, or of the file itself. A FileID field  contains information that identifies the file; e.g.,  uses a numeric value. An Authentications field  contains a list of users who can access the file identified in the FileID field .","The Authentication field  comprises zero or more ID-key pairs . Each ID-key pair comprises an ID field  and a Key field  (e.g., a user password). The ID field  contains information representative of the user. As will become clear in the discussion below, access to a file is permitted if the user attempting the access has an ID-key pair  in the Authentication field  that is associated with the file being accessed.","The ACL  shown in  is used for both read access and write access. It will be appreciated in the discussion below that additional ACL tables can be provide for different file access operations. Thus, if a read operation is attempted, a first ACL table can be consulted. If a delete operation is attempted, a second ACL table can be consulted. If a write operation is attempted, a third ACL table can be consulted, and so on.","In accordance with an embodiment of the present invention, the console  is configured to initialize and otherwise maintain the ACL . The file information that populates the ACL can be ported via an LDAP (lightweight directory access protocol) server, a NIS (network information service) server, or by some other automated mechanism. Thus, the File System field , the Directory field , the FileID field  and the ID fields  can be obtained in an automated fashion via LDAP, or an administrative type user can enter individual file and user information. The Key fields  can be filled in by the users identified in the ID fields  by accessing the server .","When the ACL  in the server  is initialized, it is the uploaded to the clients . This can be accomplished by a client  by requesting an upload of the server's ACL, and storing it in the client; e.g., data store  ().",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 4","b":["131","131"]},"It can be appreciated that the foregoing APIs can be implemented in a command line interface (CLI), providing an administrator with a software tool to set and release file authentication. For example, a CLI counterpart to the set API might have the following command line format:\n\n","In an alternate embodiment, the Key fields  in the ACL  can be initialized to a NULL value when the ACL is created in the server . The ACL  can be uploaded to the various clients  with the NUL Key fields . Users at each client site can then add their passwords to the Key fields at a later and more convenient time. This embodiment requires that ACLs  from different clients  have to be downloaded to the server , merged into a single ACL, and then uploaded back to the clients.","In one embodiment of the present invention, authentication processing is provided by modifying the NFS client  to work with the composer  in the VFS layer, and modifying the NFS server  to work with the decomposer . In another embodiment of the present invention, the NFS layers ,  are unaffected. Instead, the authentication processing is achieved by passing data in the data component of the NFS protocol.","In this particular embodiment of the present invention, suitable modifications are made to library routines comprising the NFS client  and the NFS server . The affected routines include: OPEN, CLOSE, READ, and WRITE.","The API for the NFS open( ) function is unchanged. However, the processing of the invocation is modified in the following manner:\n\n","The API for the NFS close( ) function is unchanged. However, the processing of the invocation is modified in the following manner:\n\n",{"@attributes":{"id":"p-0037","num":"0052"},"figref":"FIG. 5"},"The user-level application  invokes the system call read( ) or write( ) subsequent to an open( ) call in order to perform I\/O with the opened file, step . If an ID-key pair  was found for the opened file (step ) during processing of the open( ) procedure call, then the composer  will invoke a modified API for the read or write function in the NFS client , step . In particular, the ID field  and the Key field  of the ID-key pair  is placed in an extended header () of the modified NFS API.","If an ID-key pair  is not found, then the conventional (generic) API for the read or write operation is used, step . In accordance with a first implementation of this embodiment of the present invention, a single read API and a single write API can be provided. If authenticated read or write access is desired, the ID field  and the Key field  can be copied to extension fields in the header of the modified NFS API. If authenticated access is not desired, the then the extension fields can be set to NULL or some other value to indicate that authenticated access is not desired.","In a second implementation, different read APIs can be provided. A first read API can be provided that uses the extended header for authenticated read operations. A second read API (the standard, generic API) can be used for normal read operations which do not require authenticated processing. Similarly, a first write API can be provided that uses the extended header for authenticated write operations. A second write API (the standard, generic API) can be used for normal write operations which do not require authenticated processing.","Referring for a moment to , modifications respectively to the read and write APIs in the NFS client  are shown. The APIs shown in the figures are for version 2 of the NFS protocol. It can be appreciated, however, that similar enhancements can be made to later releases of the NFS protocol. With respect to , the bolded portions indicate extension fields added to a header component of the read( ) API in accordance with this particular embodiment of the present invention, either by adding new arguments to the read API or by extending a data structure that is presently used by the read API. In this particular embodiment of the present invention, additional arguments are defined for the read API.","An \u201cauthentication_method\u201d identifies the authentication technique that is being used in order to control access to a file. As will be seen, the ACL  shown in  uses the Key field  to determine whether an application is authorized to access the target file. It can be appreciated, however, that any authentication technique can be used. For example, certain files might require stronger authentication techniques in which some form encryption key system is employed. As another example, different vendors might employ authentication techniques different from each other. The specific authentication technique being used for a given file can be identified in the \u201cauthentication_method\u201d component of the API.","Continuing with , a \u201csize_of_username\u201d indicates the size (e.g., number of bytes) of the user name. A \u201cusername\u201d contains the user's name. A \u201csize_of_key\u201d indicates the size (e.g., number of bytes) of the key. A \u201ckey\u201d contains the key value.  shows the same extensions for the write API.","Continuing with , the read or write request is communicated to the server system , step . When the NFS server  receives the request (step ), a determination is made whether authentication needs to be performed, step . This can be accomplished by inspecting the header for NULL or non-NULL values, in the case of the first implementation discussed above. Alternatively, this can be accomplished by virtue of different NFS APIs being invoked, in the case of the second implementation discussed above.","If authenticated access is desired, then the NFS server  sends the request to the decomposer  to authenticate the access attempt, step . The decomposer  accesses its local ACL , stored on the server . Using the file identification information provided in the header of the request, the decomposer  obtains an entry for the file. The file identification information can be the file name that was used in the open( ) call. The user information in the extended header is then compared against the ID-key pairs  in the Authentications field  of the obtained entry. If a match is not found, then the NFS server  returns with an error code indicating that access is unauthorized, step . For example, the NFS protocol defines an code NFSERR_ACCES which means permission denied.","If a match is found, then the requested I\/O operation is performed (step ) on the disks  (). Returning to the decision step , if it is determined that authentication is not needed then processing proceeds to step . Upon completion of the I\/O operation, the result is returned to the NFS client , step . In the case of a write operation, the return typically involves returning a result code. In the case of a read operation, the return will include the data that was read. The NFS client , forwards the return to the VFS layer which then forwards the return to the application , step .","In accordance with the foregoing disclosed embodiment, the NFS layers ,  were modified. As noted above, in accordance with another embodiment of the present invention, the NFS layers ,  are unaffected. Instead, authentication processing is achieved by passing data in the data component (payload portion) of the NFS protocol. This aspect of the invention will now be discussed in further detail.","In accordance with this embodiment of the present invention, the OPEN and CLOSE routines are modified in the same manner as discussed above. Processing for WRITE and READ operations are discussed below","In accordance with this embodiment of the present invention, the API for the NFS write( ) function is unchanged. However, the processing of the invocation of the write operation is modified in the manner as shown in the flow chart of  and illustrated in the functional diagram of .","The user-level application  invokes the write( ) call subsequent to an open( ) call in order to perform I\/O with the opened file, step . If an ID-key pair  was found for the open file (step ), then the composer  will append the ID field  and the Key field  of the ID-key pair  to the data that is to be written by the write operation (step ), thus increasing the size of the data component (, ). In addition to the ID field  and the Key field , a code indicating the authentication method can be appended to the data component  as well. The value of the \u201ccount\u201d parameter in the standard write API is increased by an amount equal to the size of the additional information. A standard call to the NFS client  API for the write operation is then made (step ) to communicate the request to the server system . If the determination step  is negative (i.e., the file does not have a corresponding entry in the ACL ), then processing proceeds to step .","When the server system  receives the request (step ), a determination is made whether authentication needs to be performed, step . This can be accomplished by consulting the ACL  that is local to the server system  for an entry that corresponds to the file that is the target of the write operation. This action can be performed by the NFS server  or by the decomposer .","If an entry in the ACL  corresponding to the target file is found, then authentication is performed (step ) prior to performing the write operation. The decomposer  accesses the additional information appended to the data component to obtain the user information. The user information is then compared against the ID-key pairs  in the Authentications field  of the entry obtained from the ACL  that corresponds to the target file. If a match is not found, then the NFS server  may return with specific error code that indicates a match was not found, or a standard error code that indicates the write operation is unauthorized (e.g., NFSERR_ACCES), step .","If a match is found, then the write operation is performed by accessing the disks  (), step . Returning to the decision step , if it is determined that authentication is not needed then processing proceeds to step . Upon completion of the write operation, the result is returned to the NFS client , step . The return typically involves simply returning a result code. The NFS client , forwards the result of the write operation to the VFS layer which then forwards it to the user-level application , step .","In accordance with this embodiment of the present invention, the API for the NFS read( ) function is unchanged. However, the processing of the invocation of the read operation is modified in the manner as shown in the flow chart of  and illustrated in the functional diagram of .","The application  invokes the read( ) procedure call, step . If an entry in the ACL  for the opened file was found (step ) during processing of the open( ) procedure call, then the value of the \u201ccount\u201d parameter for the read( ) API in the NFS client  is increased to include the size of the entire Authentications field  (step ); i.e., counting each ID-key pair . The reason for doing this will be explained below. The read request is then communicated to the server system , step .","When the server system  receives the read request (step ), a determination is made (step ) whether authentication processing is to be performed. The local ACL  is consulted using file identification information contained in the read request to obtain an entry associated with the file. If an entry is found, then the decomposer  will decrement the \u201ccount\u201d parameter (step ) by an amount equal to the size of the Authentications field  (see step  above). The decremented \u201ccount\u201d parameter now reflects the size of the data to be read. Then, in a step , the read operation is performed on the disks  ().","If the read operation is successful, then in a step  all of the ID-key pairs  in the Authentications field  of the entry in the ACL  that corresponds to the target file are combined with the data that was read from the disks  to produce a data component . This data component is then communicated to the client  from the server  in a response to the read operation, step .","Since the server  does not \u201cknow\u201d who the user that is associated with the user-level application , all of the ID-key pairs  from the ACL entry must be communicated back to the client system . It can therefore be appreciated why in step  the \u201ccount\u201d parameter is incremented by the size of the Authentications field .","In a step , if the client  had previously determined, in step , that the target file of the read operation required authentication processing, then a determination is made (step ) in the VFS layer whether the user associated with the application  is an authorized user. A user ID associated with the application  is obtained and a comparison is made against all of the ID-key pairs that were received from the server system . If no match is found, then the VFS layer will return an error code to the application , step . If a match is found, then the VFS layer will return the data that was read, step .",{"@attributes":{"id":"p-0060","num":"0075"},"figref":"FIG. 9"}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Aspects, advantages, and novel features of the present invention will become apparent from the following description of the invention presented in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 6A and 6B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIGS. 7A and 7B","FIGS. 8A and 8B"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 8A and 8B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
