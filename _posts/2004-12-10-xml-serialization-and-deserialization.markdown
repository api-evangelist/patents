---
title: XML serialization and deserialization
abstract: An object instance is serialized to a serial format, such as an eXtensible Markup Language (XML) document, based on a mapping between an arbitrary annotated source code file and a schema. The arbitrary annotated source code contains at least one programming type that describes a shape of an object instance and the schema describes a format of a document having a serial format. The mapping defines a correspondence between the shape of the object instance and the format of the document having the serial format. Subsequently, an object instance is converted to the serial format by converting public properties, public fields and method parameters of the object instance to a document having the serial format based on the mapping. Once the mapping is defined, an XML document can also be converted to an object instance based on the mapping.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07676740&OS=07676740&RS=07676740
owner: Microsoft Corporation
number: 07676740
owner_city: Redmond
owner_country: US
publication_date: 20041210
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This is a continuation of U.S. application Ser. No. 09\/894,829, filed Jun. 29, 2001, titled \u201cXML SERIALIZATION AND DESERIALIZATION\u201d, which is hereby incorporated herein by reference.","Background","A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","Simple Object Access Protocol (SOAP) is conventionally used for a first program to communicate information to a second program that may be running simultaneously on the same computer as the first program or on two different computers that may or may not be running the same operating system. In that regard, SOAP is used for encoding, or serializing, defined data structures. For example, SOAP specifies exactly how an HTTP header and an XML file are serialized so that one program can send a request to another program, passing information in the request.","Nevertheless, what is needed is a way to serialize an object having an arbitrary structure into an XML document so that the structure and the information contained in the object can be communicated between two programs that may be running simultaneously on the same computer or may be running on different computers that may or may not be running different operating systems.","The present invention provides a way to serialize an object having an arbitrary structure into an XML document so that the structure and the information contained in the object can be communicated between two programs that may be running simultaneously on the same computer, or that may be running on different computers that may or may not be running different operating systems. Additionally, the present invention can be used by a single program to save data for later use, such as after the computer on which the program is running has been turned off and then turned back on.","The advantages of the present invention are provided by a method for serializing an object instance to a serial format in which a mapping is generated between an arbitrary annotated source code file and a schema. The mapping is an internal structure used by the present invention for defining a correspondence between the shape of an object instance and the format of the document having the serial format. The arbitrary annotated source code contains programming types that describe the shape of an object instance, and the schema describes the format of a document having a serial format, such as XML. The mapping can be generated based either on an arbitrary annotated source code file or the pattern of a defined schema. After the mapping has been generated, an object instance corresponding to the arbitrary annotated source code is converted to the serial format based on the mapping by converting public properties, public fields and method parameters of the object instance to a document having the serial format. The serial format contains a shape of each class of the object instance and contains data contained within the object instance. According to the invention, the object instance is preferably converted to an XML document, although the present invention could convert an object instance to a document having a serial format other than XML, such as a custom binary format. Moreover, once the mapping has been defined, an XML document can be converted to an object instance based on the mapping.","XML schema documents and source code can also be generated from the mapping. The source code generated from the mapping describes only the data portions of programming types and does not include any logic or algorithmic statements.","The present invention may be more readily described with reference to .  illustrates a schematic diagram of a conventional general-purpose digital computing environment that can be used to implement various aspects of the present invention. In , a computer  includes a processing unit , a system memory , and a system bus  that couples various system components including the system memory to processing unit . System bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. System memory  includes read only memory (ROM)  and random access memory (RAM) .","A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is stored in ROM . The computer  also includes a hard disk drive  for reading from and writing to a hard disk (not shown), a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media. Hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical disk drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules and other data for personal computer . It will be appreciated by those skilled in the art that other types of computer readable media that can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read only memories (ROMs), and the like, may also be used in the example operating environment.","A number of program modules can be stored on hard disk drive , magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more application programs , other program modules , and program data . A user can enter commands and information into computer  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner or the like. These and other input devices are often connected to processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or a universal serial bus (USB). Further still, these devices may be coupled directly to system bus  via an appropriate interface (not shown). A monitor  or other type of display device is also connected to system bus  via an interface, such as a video adapter . In addition to the monitor, personal computers typically include other peripheral output devices (not shown), such as speakers and printers.","Computer  can operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . Remote computer  can be a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, computer  is connected to local area network  through a network interface or adapter . When used in a WAN networking environment, personal computer  typically includes a modem  or other device for establishing a communications over wide area network , such as the Internet. Modem , which may be internal or external, is connected to system bus  via the serial port interface . In a networked environment, program modules depicted relative to personal computer , or portions thereof, may be stored in a remote memory storage device.","It will be appreciated that the network connections shown are exemplary and other techniques for establishing a communications link between the computers can be used. The existence of any of various well-known protocols such as TCP\/IP, Ethernet, FTP, HTTP and the like is presumed, and the system can be operated in a client-server configuration to permit a user to retrieve web pages from a web-based server. Any of various conventional web browsers can be used to display and manipulate data on web pages.","A primary aspect of the invention provides that when a schema for a document having a serial format is known, the public properties, public fields and method parameters of an object can be converted to a document having the serial format for storage or for transport. Accordingly, deserialization of a document having a serial format recreates an object-in its original state as long as the public properties and public fields of the object comprise the entire state of the object. Preferably, the present invention serializes an instance of an object to an XML document, and deserializes an XML document to an instance of an object.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2","b":["201","202","203","204","205","201","202","203","202","201"]},"A schema contains information about how the XML should look, or be arranged, when data is serialized. A programming type (a class) contains information about how the object should look, or be arranged, when deserialized. Thus, a class annotated with attributes contains information about what the object instance will look like and about how the data should be serialized into XML. Through custom attributes, these two sets of information are merged into mapping . It should be noted, though, that a complete mapping cannot be made solely by importing (i.e., analyzing) a schema because a schema does not contain complete information about what programming types should be created when serializing. Only the annotated source code has both sets of information. Nevertheless, it is possible to generate a mapping for the appropriate programming types using a set of predefined rules that primarily concern naming and that relate the schema to selected programming types when generating source code from a schema. Types generated from schema will have \u201cdefault\u201d names, that is, names that are usually the same names used in the schema. Another exemplary rule relates to how arrays are represented. For example, an array in code can be represented by using a conventional array or by using a collection. Each representation could be serialized in the same way in XML.","An XmlSerializer  and related tools, such as an XML Schema Definition (xsd.exe) tool, provide a bridge between programming language constructs\/XSD schema (i.e., annotated code \/XML schema ) and an object instance\/XML document (i.e., object instance \/XML document ) at both design time and run time. The XmlSerializer  is generated on demand the first time it is necessary to serialize or deserialize an object instance of a given type.","When the design starting point is a given schema  that follows the XML Schema Definition (XSD) language that is proposed by the W3C, the XML Schema Definition (xsd.exe) tool is used for importing schema  and for exporting source code  based on schema . When the design starting point is annotated source code , annotated source code  is compiled at  to produce compiled source code . That is, the data in an object is described using programming language constructs such classes, fields, properties, primitive types, or arrays. Customized classes, annotated with attributes, can be also be created by the present invention. A mapping  is generated by reflection at  based on compiled annotated code .","Reflection is a facility provided by some programming systems, such as the Common Language Runtime (CLR) provided by Microsoft of Redmond, Wash. in the .NET Framework, for code to inspect the nature of types (classes) available on the system. For example, a programmer can write code that queries the system for a list of methods defined on a given type. The information returned would include the names of the methods, their return types, and the names and types of parameters to the methods. Reflection can also be used to determine what properties and fields exist on a type, or what types have been defined on a system.","The Common Language Runtime provided by Microsoft for the .NET environment allows code to be annotated with \u201ccustom attributes,\u201d also called \u201cmetadata.\u201d The annotations are expressed by a programmer in source code. When compiled, the annotations are stored as additional information about the classes, methods, fields, properties and parameters defined in the source code. The Runtime may then use the additional information natively, or programs can use reflection to obtain the information.","Returning to , an XSD schema document (.xsd) is exported by xsd.exe from mapping  based on the custom classes of compiled annotated code . Thus, an XSD schema is optional and is not needed at design time (or at run time) because the present invention can generate a suitable schema based on annotated source code.","In either design situation, i.e., starting with a given schema or starting with annotated source code, the classes are annotated with custom attributes that are used by an XmlSerializer  for mapping between a XSD schema system to a Common Language Runtime (CLR) environment. The CLR environment is a runtime environment and is part of the .NET framework provided by Microsoft of Redmond, Wash. The CLR provides such features as cross-language integration and cross-language exception handling among other features, for developing and executing .NET applications.","At run time, instances of classes contained within an object instance  are serialized by XmlSerializer  into an XML document  based on mapping . Similarly, an XML document  is deserialized by XmlSerializer  into a run time object instance  based on mapping . In this regard, XmlSerializer  provides complete and flexible control over how XML is encoded into classes. For example, a public field or public property can be encoded as an attribute or an element. An XML namespace can be specified, and an element name or attribute name can be specified when a field or property name is inappropriate. Only the shape of an object class and the data contained in the object is contained in the serialized data. The type identity and assembly information is not included in the serialized data because only public properties and public fields are serialized by XmlSerializer . In situations when non-public, i.e., private, data is to be serialized, a conventional binary formatting method is preferred.","The present invention provides the advantages of working with strongly-typed classes while still having the flexibility of XML. For example, by using fields or properties of type XmlElement, XmlAttribute or XmlNode in strongly typed classes, parts of the XML document instance can be read directly into XML objects. Attributes for the application programming interface (API) for XmlSerializer  for controlling XML output and XML input are set forth in the following table:",{"@attributes":{"id":"p-0030","num":"0029"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Attribute Name","Use"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["SoapElementAttribute","Allows specification of a field or"]},{"entry":[{},"property that should be serialized as an"]},{"entry":[{},"element in the XML document. Allows"]},{"entry":[{},"specification of the name and namespace"]},{"entry":[{},"for that element. Applies to SOAP-"]},{"entry":[{},"encoded XML."]},{"entry":["SoapEnumAttribute","Specifies the name to be used in XML"]},{"entry":[{},"Schema for the annotated enumeration."]},{"entry":[{},"Applies to SOAP-encoded XML."]},{"entry":["SoapIgnoreAttribute","Specifies that the annotated public field,"]},{"entry":[{},"property, or parameter should be ignored"]},{"entry":[{},"by the serializer and should not be"]},{"entry":[{},"represented in the schema or serial"]},{"entry":[{},"document. Applies to SOAP-encoded"]},{"entry":[{},"XML."]},{"entry":["SoapIncludeAttribute","Specifies an additional type to be"]},{"entry":[{},"included in the reflection process. All"]},{"entry":[{},"types ,ncountered when examining"]},{"entry":[{},"fields; properties, and parameters are"]},{"entry":[{},"included automatically."]},{"entry":[{},"SoapIncludeAttribute can be used when"]},{"entry":[{},"subclasses not declared as property types"]},{"entry":[{},"will be used. Applies to SOAP-encoded"]},{"entry":[{},"XML."]},{"entry":["SoapTypeAttribute","Allows the type definition emitted in the"]},{"entry":[{},"schema document to be customized."]},{"entry":[{},"Applies to SOAP-encoded XML."]},{"entry":["XmlAnyAttributeAttribute","When deserializing, the array will be"]},{"entry":[{},"filled with XmlElement objects that"]},{"entry":[{},"represent all XML elements unknown to"]},{"entry":[{},"the schema. Applies to \u201cliteral\u201d (XSD-"]},{"entry":[{},"based) XML."]},{"entry":["XmlAnyElementAttribute","When deserialzing, the array will be"]},{"entry":[{},"filled with XmlAttribute objects that"]},{"entry":[{},"represent all XML attributes unknown to"]},{"entry":[{},"the schema. Applies to \u201cliteral\u201d (XSD-"]},{"entry":[{},"based) XML."]},{"entry":["XmlArrayAttribute","The members of an array will be"]},{"entry":[{},"generated as members of an XML array."]},{"entry":[{},"Applies to \u201cliteral\u201d (XSD-based) XML."]},{"entry":["XmlArrayItemAttribute","Derived types that can be inserted into an"]},{"entry":[{},"array. Applies to \u201cliteral\u201d (XSD-based)"]},{"entry":[{},"XML."]},{"entry":["XmlAttributeAttribute","The class will be serialized as an XML"]},{"entry":[{},"attribute. Applies to \u201cliteral\u201d (XSD-based)"]},{"entry":[{},"XML."]},{"entry":["XmlElementAttribute","The field or property will be serialized as"]},{"entry":[{},"an XML element. Applies to \u201cliteral\u201d"]},{"entry":[{},"(XSD-based) XML."]},{"entry":["XmlEnumAttribute","The element name of an enumeration"]},{"entry":[{},"member. Applies to \u201cliteral\u201d (XSD-"]},{"entry":[{},"based) XML."]},{"entry":["XmlIgnoreAttribute","The property or field should be ignored"]},{"entry":[{},"when the containing class is serialized."]},{"entry":[{},"Applies to \u201cliteral\u201d (XSD-based) XML."]},{"entry":["XmlIncludeAttribute","The class should be included when"]},{"entry":[{},"generating schemas (and will thus be"]},{"entry":[{},"recognized when serialized). Applies to"]},{"entry":[{},"\u201cliteral\u201d (XSD-based) XML."]},{"entry":["XmlRootAttribute","The class represents the root element of"]},{"entry":[{},"the XML document. (Use the attribute to"]},{"entry":[{},"further specify the namespace and"]},{"entry":[{},"element name. Applies to \u201cliteral\u201d"]},{"entry":[{},"(XSD-based) XML."]},{"entry":["XmlTextAttribute","That the property or field should be"]},{"entry":[{},"serialized as XML. Applies to \u201cliteral\u201d"]},{"entry":[{},"(XSD-based) XML."]},{"entry":["XmlTypeAttribute","That the class should be serialized as an"]},{"entry":[{},"XML type. Applies to \u201cliteral\u201d (XSD-"]},{"entry":[{},"based) XML."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The XmlAnyElementAttribute or XmlAnyAttributeAttribute attributes can be applied to fields or properties that return arrays of XmlElement, XmlAttribute or XmlNode objects for reading unmapped elements and attributes into these fields or properties. Thus, documents can be processed that have additional elements and attributes that were added after design time and that were not known when the strongly-typed classes were designed.","When a property or field returns a complex object (such as an array or a class instance), XmlSerializer  converts the complex object to an element nested within the main XML document. For example, the first class in the following exemplary C# code returns an instance of the second class:",{"@attributes":{"id":"p-0033","num":"0032"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public Class MyContainer"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003public MyObject MyObjectProperty;"]},{"entry":[{},"}"]},{"entry":[{},"public class MyObject"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003public string ObjectName;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The serialized XML output provided by XmlSerializer , given an instance of the classes MyContainer and MyObject, will be:",{"@attributes":{"id":"p-0035","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<MyContainer>"]},{"entry":[{},"\u2003<MyObjectProperty>"]},{"entry":[{},"\u2003\u2003<ObjectName>My String<\/ObjectName>"]},{"entry":[{},"\u2003<\/MyObjectProperty>"]},{"entry":[{},"<\/MyContainer>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"When only the states of objects are saved, the class does not need to be modified. When, however, XML documents that conform to an exact XML schema are to be read or written, the XML output of XmlSerializer  can be controlled by setting selected attributes of the public properties and fields of the class. As shown in the following exemplary C# code, XmlAttributeAttribute is used for specifying that the Qty field should be encoded as an XML attribute having the name Quantity. Additionally, XmlElementAttribute is used for specifying that the Name field should be encoded as an XML element having the name ProductName.",{"@attributes":{"id":"p-0037","num":"0036"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class Order"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003[XmlAttribute (AttributeName = \u201cQuantity\u201d)]"]},{"entry":[{},"\u2003\u2003public int Qty;"]},{"entry":[{},"\u2003\u2003[XmlElement (ElementName = \u201cProductName\u201d)]"]},{"entry":[{},"\u2003\u2003public string Name;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"After serialization by XmlSerializer , the XML code appears as:",{"@attributes":{"id":"p-0039","num":"0038"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Order Quantity = \u201815\u2019>"]},{"entry":[{},"\u2003<ProductName>.NET<\/ProductName>"]},{"entry":[{},"<\/Order>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"When XmlSerializer  deserializes an instance of the class Order, the ElementName and AttributeName properties describe how to treat the properties named Qty and Name so that XmlSerializer  accurately reconstructs the object with the correct field and property values.","The following exemplary code also illustrates that each public field or public property of an object can be controlled by attributes:",{"@attributes":{"id":"p-0042","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"using System;"},{"entry":"using System.Xml;"},{"entry":"using System.Xml.Serialization;"},{"entry":"using System.IO;"},{"entry":"\/* The XmlRootAttribute allows you to set an alternate name"},{"entry":"\u2003(PurchaseOrder)of the XML element, the element namespace; by"},{"entry":"\u2003default, the XmlSerializer uses the class name. The attribute"},{"entry":"\u2003also allows you to set the XML namespace for the element. Lastly,"},{"entry":"\u2003the attribute sets the IsNullable property, which species whether"},{"entry":"\u2003the xsi:null attribute appears if the class instance is sset to"},{"entry":"\u2003a null reference. *\/"},{"entry":"[XmlRootAttribute(\u201cPurchaseOrder\u201d, Namespace="},{"entry":"\u201chttp:\/\/www.cpandl.com\u201d,"},{"entry":"IsNullable = false)]"},{"entry":"public class PurchaseOrder"},{"entry":"{"},{"entry":"\u2003public Address ShipTo;"},{"entry":"\u2003public string OrderDate;"},{"entry":"\u2003\/* The XmlArrayAttribute changes the XML element name"},{"entry":"\u2003from the default of \u201cOrderedItems\u201d to \u201cItems\u201d. *\/"},{"entry":"\u2003[XmlArrayAttribute(\u201cItems\u201d)]"},{"entry":"\u2003public OrderedItem[ ] OrderedItems;"},{"entry":"\u2003public decimal SubTotal;"},{"entry":"\u2003public decimal ShipCost;"},{"entry":"\u2003public decimal TotalCost;"},{"entry":"}"},{"entry":"public class Address"},{"entry":"{"},{"entry":"\u2003\/* The XmlAttribute instructs the XmlSerializer to serialize the Name"},{"entry":"\u2003\u2003field as an XML attribute instead of an XML element (the default"},{"entry":"\u2003\u2003behavior). *\/"},{"entry":"\u2003[XmlAttribute]"},{"entry":"\u2003public string Name;"},{"entry":"\u2003public string Line1;"},{"entry":"\u2003\/* Setting the IsNullable property to false instructs the"},{"entry":"\u2003\u2003XmlSerializer that the XML element will not appear if"},{"entry":"\u2003\u2003the City field is set to a null reference. *\/"},{"entry":"\u2003[XmlElementAttribute(IsNullable = false)]"},{"entry":"\u2003public string City;"},{"entry":"\u2003public string State;"},{"entry":"\u2003public string Zip;"},{"entry":"}"},{"entry":"public class OrderedItem"},{"entry":"{"},{"entry":"\u2003public string ItemName;"},{"entry":"\u2003public string Description;"},{"entry":"\u2003public decimal UnitPrice;"},{"entry":"\u2003public int Quantity;"},{"entry":"\u2003public decimal LineTotal;"},{"entry":"\/* Calculate is a custom method that calculates the price per item,"},{"entry":"\u2003\u2003and stores the value in a field. *\/"},{"entry":"\u2003public void Calculate( )"},{"entry":"\u2003{"},{"entry":"\u2003\u2003LineTotal = UnitPrice * Quantity;"},{"entry":"\u2003}"},{"entry":"}"},{"entry":"public class Test"},{"entry":"{"},{"entry":"\u2003public static void Main( )"},{"entry":"\u2003{"},{"entry":"\u2003\u2003string filename = \u201cpo.xml\u201d;"},{"entry":"\u2003\u2003\/\/ Create an instance of the XmlSerializer class;"},{"entry":"\u2003\u2003\/\/ specify the type of object to serialize."},{"entry":"\u2003\u2003XmlSerializer serializer ="},{"entry":"\u2003\u2003new XmlSerializer(typeof(PurchaseOrder));"},{"entry":"\u2003\u2003TextWriter writer = new StreamWriter(filename);"},{"entry":"\u2003\u2003PurchaseOrder po=new PurchaseOrder( );"},{"entry":"\u2003\u2003\/\/ Create an address to ship and bill to."},{"entry":"\u2003\u2003Address billAddress = new Address( );"},{"entry":"\u2003\u2003billAddress.Name = \u201cRita Hernandez\u201d;"},{"entry":"\u2003\u2003billAddress.Line1 = \u201c1 Main St.\u201d;"},{"entry":"\u2003\u2003billAddress.City = \u201cAnyTown\u201d;"},{"entry":"\u2003\u2003billAddress.State = \u201cWA\u201d;"},{"entry":"\u2003\u2003billAddress.Zip = \u201c00000\u201d;"},{"entry":"\u2003\u2003\/\/ Set ShipTo and BillTo to the same addressee."},{"entry":"\u2003\u2003po.ShipTo = billAddress;"},{"entry":"\u2003\u2003po.OrderDate = System.DateTime.Now.ToLongDateString( );"},{"entry":"\u2003\u2003\/\/ Create an OrderedItem object."},{"entry":"\u2003\u2003OrderedItem i1 = new OrderedItem( );"},{"entry":"\u2003\u2003i1.ItemName = \u201cWidget S\u201d;"},{"entry":"\u2003\u2003i1.Description = \u201cSmall widget\u201d;"},{"entry":"\u2003\u2003i1.UnitPrice = (decimal) 5.23;"},{"entry":"\u2003\u2003i1.Quantity = 3;"},{"entry":"\u2003\u2003i1.Calculate( );"},{"entry":"\u2003\u2003\/\/ Insert the item into the array."},{"entry":"\u2003\u2003OrderedItem [ ] items = {i1};"},{"entry":"\u2003\u2003po.OrderedItems = items;"},{"entry":"\u2003\u2003\/\/ Calculate the total cost."},{"entry":"\u2003\u2003decimal subTotal = new decimal( );"},{"entry":"\u2003\u2003foreach(OrderedItem oi in items)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003subTotal += oi.LineTotal;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003po.SubTotal = subTotal;"},{"entry":"\u2003\u2003po.ShipCost = (decimal) 12.51;"},{"entry":"\u2003\u2003po.TotalCost = po.SubTotal + po.ShipCost;"},{"entry":"\u2003\u2003\/\/ Serialize the purchase order, and close the TextWriter."},{"entry":"\u2003\u2003serializer.Serialize(writer, po);"},{"entry":"\u2003\u2003writer.Close( );"},{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<?xml version=\u201c1.0\u201d encoding=\u201cutf-8\u201d?>"},{"entry":"<PurchaseOrder xmlns:xsi=\u201chttp:\/\/www.w3.org\/2001\/XMLSchema-"},{"entry":"instance\u201d"},{"entry":"xmlns:xsd=\u201chttp:\/\/www.w3.org\/2001\/XMLSchema\u201d xmlns="},{"entry":"\u201chttp:\/\/www.cpandl.com\u201d>"},{"entry":"\u2003<ShipTo Name=\u201cRita Hernandez\u201d>"},{"entry":"\u2003\u2003<Line1>1 Main St.<\/Line1>"},{"entry":"\u2003\u2003<City>AnyTown<\/City>"},{"entry":"\u2003\u2003<State>WA<\/State>"},{"entry":"\u2003\u2003<Zip>00000<\/Zip>"},{"entry":"\u2003<\/ShipTo>"},{"entry":"\u2003<OrderDate>Tuesday, June 26, 2001<\/OrderDate>"},{"entry":"\u2003<Items>"},{"entry":"\u2003\u2003<OrderedItem>"},{"entry":"\u2003\u2003\u2003<ItemName>Widget S<\/ItemName>"},{"entry":"\u2003\u2003\u2003<Description>Small widget<\/Description>"},{"entry":"\u2003\u2003\u2003<UnitPrice>5.23<\/UnitPrice>"},{"entry":"\u2003\u2003\u2003<Quantity>3<\/Quantity>"},{"entry":"\u2003\u2003\u2003<LineTotal>15.69<\/LineTotal>"},{"entry":"\u2003\u2003<\/OrderedItem>"},{"entry":"\u2003<\/Items>"},{"entry":"\u2003<SubTotal>15.69<\/SubTotal>"},{"entry":"\u2003<ShipCost>12.51<\/ShipCost>"},{"entry":"\u2003<TotalCost>28.2<\/TotalCost>"},{"entry":"<\/PurchaseOrder>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Notice the following general features of source code annotation:\n\n","System.XmlSerialization.XmlSerializer is the main class used for XML Serialization. The previous example illustrates how to use System.XmlSerialization.XmlSerializer for serializing an object instance to XML by calling the Serialize method. Similarly, an object can be deserialized using the Deserialize method, which takes a stream from which to read the XML document and returns the deserialized object.","An exemplary use of the XML Definition Tool (Xsd.exe) could be that of a developer tasked with developing an application for processing XML documents that must conform to a specific XML schema (.xsd) document, such as a particular purchase order. Orders that conform to the XML schema are processed and a confirmation reply is sent to each customer. The specific XML schema is passed to the XML Schema Definition tool (Xsd.exe) as an argument, and the XML Schema Definition tool creates a set of classes that are precisely matched to the specified XML schema. According to the invention, the XML Schema Definition tool processes only schemas that conform to the www.w3.org Proposed Recommendation XMLSchema specification set forth at http:\/\/www.w3.org\/2001\/XMLSchema. The classes having methods, properties, or fields are annotated, as required, by the reflection portion of the invention (i.e., reflection  in ) for the specific XML schema.","Xsd.exe will produce the following schema for the classes used in the previous example:",{"@attributes":{"id":"p-0048","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<?xml version=\u201c1.0\u201d encoding=\u201cutf-8\u201d?>"},{"entry":"<xs:schema xmlns:tns=\u201chttp:\/\/www.cpandl.com\u201d attributeFormDefault=\u201cqualified\u201d"},{"entry":"elementFormDefault=\u201cqualified\u201d targetNamespace=\u201chttp:\/\/www.cpandl.com\u201d"},{"entry":"xmlns:xs=\u201chttp:\/\/www.w3.org\/2001\/XMLSchema\u201d>"},{"entry":"\u2003<xs:element name=\u201cPurchaseOrder\u201d type=\u201ctns:PurchaseOrder\u201d \/>"},{"entry":"\u2003<xs:complexType name=\u201cPurchaseOrder\u201d>"},{"entry":"\u2003\u2003<xs:sequence>"},{"entry":"\u2003\u2003\u2003<xs:element minOccurs=\u201c0\u201d maxOccurs=\u201c1\u201d name=\u201cShipTo\u201d type=\u201ctns:Address\u201d \/>"},{"entry":"\u2003\u2003\u2003<xs:element minOccurs=\u201c0\u201d maxOccurs=\u201c1\u201d name=\u201cOrderDate\u201d type=\u201cxs:string\u201d \/>"},{"entry":"\u2003\u2003\u2003<xs:element minOccurs=\u201c0\u201d maxOccurs=\u201c1\u201d name=\u201cItems\u201d"},{"entry":"type=\u201ctns:ArrayOfOrderedItem\u201d \/>"},{"entry":"\u2003\u2003\u2003<xs:element minOccurs=\u201c1\u201d maxOccurs=\u201c1\u201d name=\u201cSubTotal\u201d type=\u201cxs:decimal\u201d \/>"},{"entry":"\u2003\u2003\u2003<xs:element minOccurs=\u201c1\u201d maxOccurs=\u201c1\u201d name=\u201cShipCost\u201d type=\u201cxs:decimal\u201d \/>"},{"entry":"\u2003\u2003\u2003<xs:element minOccurs=\u201c1\u201d maxOccurs=\u201c1\u201d name=\u201cTotalCost\u201d type=\u201cxs:decimal\u201d \/>"},{"entry":"\u2003\u2003<\/xs:sequence>"},{"entry":"\u2003<\/xs:complexType>"},{"entry":"\u2003<xs:complexType name=\u201cAddress\u201d>"},{"entry":"\u2003\u2003<xs:sequence>"},{"entry":"\u2003\u2003\u2003<xs:element minOccurs=\u201c0\u201d maxOccurs=\u201c1\u201d name=\u201cLine1\u201d type=\u201cxs:string\u201d \/>"},{"entry":"\u2003\u2003\u2003<xs:element minOccurs=\u201c0\u201d maxOccurs=\u201c1\u201d name=\u201cCity\u201d type=\u201cxs:string\u201d \/>"},{"entry":"\u2003\u2003\u2003<xs:element minOccurs=\u201c0\u201d maxOccurs=\u201c1\u201d name=\u201cState\u201d type=\u201cxs:string\u201d\/>"},{"entry":"\u2003\u2003\u2003<xs:element minOccurs=\u201c0\u201d maxOccurs=\u201c1\u201d name=\u201cZip\u201d type=\u201cxs:string\u201d \/>"},{"entry":"\u2003\u2003<\/xs:sequence>"},{"entry":"\u2003\u2003<xs:attribute name=\u201cName\u201d type=\u201cxs:string\u201d \/>"},{"entry":"\u2003<\/xs:complexType>"},{"entry":"\u2003<xs:complexType name=\u201cArrayOfOrderedItem\u201d>"},{"entry":"\u2003\u2003<xs:sequence>"},{"entry":"\u2003\u2003\u2003<xs:element minOccurs=\u201c0\u201d maxOccurs=\u201cunbounded\u201d name=\u201cOrderedItem\u201d"},{"entry":"type=\u201ctns:OrderedItem\u201d \/>"},{"entry":"\u2003\u2003<\/xs:sequence>"},{"entry":"\u2003<\/xs:complexType>"},{"entry":"\u2003<xs:complexType name=\u201cOrderedItem\u201d>"},{"entry":"\u2003\u2003<xs:sequence>"},{"entry":"\u2003\u2003\u2003<xs:element minOccurs=\u201c0\u201d maxOccurs=\u201c1\u201d name=\u201cItemName\u201d type=\u201cxs:string\u201d \/>"},{"entry":"\u2003\u2003\u2003<xs:element minOccurs=\u201c0\u201d maxOccurs=\u201c1\u201d name=\u201cDescription\u201d type=\u201cxs:string\u201d \/>"},{"entry":"\u2003\u2003\u2003<xs:element minOccurs=\u201c1\u201d maxOccurs=\u201c1\u201d name=\u201cUnitPrice\u201d type=\u201cxs:decimal\u201d \/>"},{"entry":"\u2003\u2003\u2003<xs:element minOccurs=\u201c1\u201d maxOccurs=\u201c1\u201d name=\u201cQuantity\u201d type=\u201cxs:int\u201d \/>"},{"entry":"\u2003\u2003\u2003<xs:element minOccurs=\u201c1\u201d maxOccurs=\u201c1\u201d name=\u201cLineTotal\u201d type=\u201cxs:decimal\u201d \/>"},{"entry":"\u2003\u2003<\/xs:sequence>"},{"entry":"\u2003<\/xs:complexType>"},{"entry":"<\/xs:schema>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Similarly, running xsd.exe on that schema would produce classes that look substantially like the classes originally written for the example.","The application for processing the XML documents conforming to a specific XML purchase order schema is then created using XmlSerializer  for reading and processing XML documents, and for generating new XML documents confirming orders. To do this, XmlSerializer  serializes and deserializes the classes created by the XML Schema Definition tool.","Xml Serialization can serialize the parameters of a method in much the same way that a class is serialized. For example, Xml Serialization of attributes for Web Services also allows flexible sets of Web Services to be created and easily shape the Simple Object Access Protocol (SOAP) that a Web Service expects and responds with. There are two sets of Xml Serialization attributes for Web Services: one attribute set for services described literally by an XSD document, and another attribute set for services that use the SOAP encoding, as defined in Section 5 of the SOAP spec, http:\/\/www.w3.org\/TR\/SOAP\/.","For literal services, the attributes listed above can be used for controlling the shape, or arrangement, of the XML document that is being sent to a web service. For example, the following C# code:",{"@attributes":{"id":"p-0053","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<%@WebService language=\u201cc#\u201d class=\u201cSimpleTest\u201d%>"},{"entry":"using System;"},{"entry":"using System.Xml;"},{"entry":"using System.Xml.Serialization;"},{"entry":"using System.Web.Services;"},{"entry":"using System.Web.Services.Protocols;"},{"entry":"public class SimpleTest {"},{"entry":"\u2003[WebMethod]"},{"entry":"\u2003[SoapDocumentMethod(ParameterStyle=SoapParameterStyle.Bare)]"},{"entry":"\u2003public Data SendData(Data x) {"},{"entry":"\u2003\u2003return x;"},{"entry":"\u2003}"},{"entry":"}"},{"entry":"public class Data {"},{"entry":"\u2003[XmlElement(\u201cTheInt\u201d)]"},{"entry":"\u2003public int MyInt;"},{"entry":"\u2003[XmlAttribute(\u201cstr\u201d)]"},{"entry":"\u2003public string MyString;"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0054","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Request:"},{"entry":"POST \/test.asmx HTTP\/1.1"},{"entry":"Host: localhost"},{"entry":"Content-Type: text\/xml; charset=utf-8"},{"entry":"Content-Length: length"},{"entry":"SOAPAction: \u201chttp:\/\/tempuri.org\/SendData\u201d"},{"entry":"<?xml version=\u201c1.0\u201d encoding=\u201cutf-8\u201d?>"},{"entry":"<soap:Envelope xmlns:xsi=\u201chttp:\/\/www.w3.org\/2001\/XMLSchema-"},{"entry":"instance\u201d"},{"entry":"xmlns:xsd=\u201chttp:\/\/www.w3.org\/2001\/XMLSchema\u201d"},{"entry":"xmlns:soap=\u201chttp:\/\/schemas.xmlsoap.org\/soap\/envelope\/\u201d>"},{"entry":"\u2003<soap:Body>"},{"entry":"\u2003\u2003<x str=\u201cstring\u201d xmlns=\u201chttp:\/\/tempuri.org\/\u201d>"},{"entry":"\u2003\u2003\u2003<TheInt>int<\/TheInt>"},{"entry":"\u2003\u2003<\/x>"},{"entry":"\u2003<\/soap:Body>"},{"entry":"<\/soap:Envelope>"},{"entry":"Response:"},{"entry":"HTTP\/1.1 200 OK"},{"entry":"Content-Type: text\/xml; charset=utf-8"},{"entry":"Content-Length: length"},{"entry":"<?xml version=\u201c1.0\u201d encoding=\u201cutf-8\u201d?>"},{"entry":"<soap:Envelope xmlns:xsi=\u201chttp:\/\/www.w3.org\/2001\/XMLSchema-"},{"entry":"instance\u201d"},{"entry":"xmlns:xsd=\u201chttp:\/\/www.w3.org\/2001\/XMLSchema\u201d"},{"entry":"xmlns:soap=\u201chttp:\/\/schemas.xmlsoap.org\/soap\/envelope\/\u201d>"},{"entry":"\u2003<soap:Body>"},{"entry":"\u2003\u2003<SendDataResult str=\u201cstring\u201d xmlns=\u201chttp:\/\/tempuri.org\/\u201d>"},{"entry":"\u2003\u2003\u2003<TheInt>int<\/TheInt>"},{"entry":"\u2003\u2003<\/SendDataResult>"},{"entry":"\u2003<\/soap:Body>"},{"entry":"<\/soap:Envelope>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"For encoded SOAP, the Soap*Attributes found within System.Xml.Serialization can be used for controlling the shape of the XML. For instance, the following C# code:",{"@attributes":{"id":"p-0056","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<%@WebService language=\u201cc#\u201d class=\u201cSimpleTest\u201d%>"]},{"entry":[{},"using System;"]},{"entry":[{},"using System.Xml;"]},{"entry":[{},"using System.Xml.Serialization;"]},{"entry":[{},"using System.Web.Services;"]},{"entry":[{},"using System.Web.Services.Protocols;"]},{"entry":[{},"public class SimpleTest {"]},{"entry":[{},"\u2003[WebMethod]"]},{"entry":[{},"\u2003[SoapRpcMethod]"]},{"entry":[{},"\u2003public Data SendData(Data x) {"]},{"entry":[{},"\u2003\u2003return x;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"}"]},{"entry":[{},"public class Data {"]},{"entry":[{},"\u2003[XmlElement(\u201cTheInt\u201d)]"]},{"entry":[{},"\u2003public int MyInt;"]},{"entry":[{},"\u2003[XmlAttribute(\u201cstr\u201d)]"]},{"entry":[{},"\u2003public string MyString;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0057","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Request:"},{"entry":"POST \/test.asmx HTTP\/1.1"},{"entry":"Host: localhost"},{"entry":"Content-Type: text\/xml; charset=utf-8"},{"entry":"Content-Length: length"},{"entry":"SOAPAction: \u201chttp:\/\/tempuri.org\/SendData\u201d"},{"entry":"<?xml version=\u201c1.0\u201d encoding=\u201cutf-8\u201d?>"},{"entry":"<soap:Envelope xmlns:xsi=\u201chttp:\/\/www.w3.org\/2001\/XMLSchema-"},{"entry":"instance\u201d"},{"entry":"xmlns:xsd=\u201chttp:\/\/www.w3.org\/2001\/XMLSchema\u201d"},{"entry":"xmlns:soapenc=\u201chttp:\/\/schemas.xmlsoap.org\/soap\/encoding\/\u201d"},{"entry":"xmlns:tns=\u201chttp:\/\/tempuri.org\/\u201d xmlns:types=\u201chttp:\/\/tempuri.org\/"},{"entry":"encodedTypes\u201d"},{"entry":"xmlns:soap=\u201chttp:\/\/schemas.xmlsoap.org\/soap\/envelope\/\u201d>"},{"entry":"\u2003<soap:Body soap:encodingStyle=\u201chttp:\/\/schemas.xmlsoap.org\/soap\/en-"},{"entry":"\u2003coding\/\u201d>"},{"entry":"\u2003\u2003<tns:SendData>"},{"entry":"\u2003\u2003\u2003<x href=\u201c#id1\u201d \/>"},{"entry":"\u2003\u2003<\/tns:SendData>"},{"entry":"\u2003\u2003<types:Data id=\u201cid1\u201d xsi:type=\u201ctypes:Data\u201d>"},{"entry":"\u2003\u2003\u2003<MyInt xsi:type=\u201cxsd:int\u201d>int<\/MyInt>"},{"entry":"\u2003\u2003\u2003<MyString xsi:type=\u201cxsd:string\u201d>string<\/MyString>"},{"entry":"\u2003\u2003<\/types:Data>"},{"entry":"\u2003<\/soap:Body>"},{"entry":"<\/soap:Envelope>"},{"entry":"Response:"},{"entry":"HTTP\/1.1 200 OK"},{"entry":"Content-Type: text\/xml; charset=utf-8"},{"entry":"Content-Length: length"},{"entry":"<?xml version=\u201c1.0\u201d encoding=\u201cutf-8\u201d?>"},{"entry":"<soap:Envelope xmlns:xsi=\u201chttp:\/\/www.w3.org\/2001\/XMLSchema-"},{"entry":"instance\u201d"},{"entry":"xmlns:xsd=\u201chttp:\/\/www.w3.org\/2001\/XMLSchema\u201d"},{"entry":"xmlns:soapenc=\u201chttp:\/\/schemas.xmlsoap.org\/soap\/encoding\/\u201d"},{"entry":"xmlns:tns=\u201chttp:\/\/tempuri.org\/\u201d xmlns:types=\u201chttp:\/\/tempuri.org\/en-"},{"entry":"codedTypes\u201d"},{"entry":"xmlns:soap=\u201chttp:\/\/schemas.xmlsoap.org\/soap\/envelope\/\u201d>"},{"entry":"\u2003<soap:Body soap:encodingStyle=\u201chttp:\/\/schemas.xmlsoap.org\/soap\/en-"},{"entry":"\u2003coding\/\u201d>"},{"entry":"\u2003\u2003<tns:SendDataResponse>"},{"entry":"\u2003\u2003\u2003<SendDataResult href=\u201c#id1\u201d \/>"},{"entry":"\u2003\u2003<\/tns:SendDataResponse>"},{"entry":"\u2003\u2003<types:Data id=\u201cid1\u201d xsi:type=\u201ctypes:Data\u201d>"},{"entry":"\u2003\u2003\u2003<MyInt xsi:type=\u201cxsd:int\u201d>int<\/MyInt>"},{"entry":"\u2003\u2003\u2003<MyString xsi:type=\u201cxsd:string\u201d>string<\/MyString>"},{"entry":"\u2003\u2003<\/types:Data>"},{"entry":"\u2003<\/soap:Body>"},{"entry":"<\/soap:Envelope>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"While the invention has been described with respect to specific examples including presently preferred modes of carrying out the invention, those skilled in the art will appreciate that there are numerous variations and permutations of the above described systems and techniques that fall within the spirit and scope of the invention as set forth in the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example and not limitation in the accompanying figures in which like reference numerals indicate similar elements and in which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"}]},"DETDESC":[{},{}]}
