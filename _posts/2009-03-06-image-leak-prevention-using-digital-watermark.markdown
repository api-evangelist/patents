---
title: Image leak prevention using digital watermark
abstract: Unique digital signatures of sensitive or restricted image files are calculated and stored in a database. A hook routine hooks an open or read command when an application opens an image file in order to check for a restricted digital signature of that image file. If present, a digital watermark is added to the image before the application edits that image. A user may then modify the image. A hook routine also hooks a close or write command in order to check for a digital watermark. If present, the digital watermark is removed and a new digital signature for the revised image is calculated. The digital signature for the revised image is then uploaded to a database associated with a DLP server software product, and then pushed periodically down to endpoint DLP client products.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08234496&OS=08234496&RS=08234496
owner: Trend Micro, Inc.
number: 08234496
owner_city: Tokyo
owner_country: JP
publication_date: 20090306
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Flow Diagram","Computer System Embodiment"],"p":["The present invention relates generally to data loss prevention. More specifically, the present invention relates to data loss prevention of images.","Information within organizations and entities is often classified as sensitive either for business reasons or for legal reasons. This information may reside within text files, databases, images, pictures, etc. In addition to the potential threat of an unscrupulous party illegally accessing the organization from the outside via an electronic network, and then removing or disrupting the information, there exists the risk of intentional or inadvertent transmission of the sensitive information from inside the organization to the outside. For example, a disgruntled employee might send a sensitive data file to which he or she has access to an outside party via e-mail, thus causing harm to the organization.","In addition to simple business reasons for not wanting sensitive information to be released, i.e., the desire to keep trade secrets secret, many new government regulations mandate controls over information (requiring the sensitive information not to be released outside the company) and companies must comply in view of significant penalties. For example, HIPAA regulates health information, BASEL II regulates financial information, Sarbanes-Oxley regulates corporate governance, and a large number of states have passed data privacy laws requiring organizations to notify consumers if their information is released. Companies are even subject to a regular information technology audit which they can fail if they do not employ suitable controls and standards.","Technology companies have reacted to this environment with a host of data loss prevention (DLP) products. These products are typically hardware\/software platforms that monitor and prevent sensitive information from being leaked outside the company. These DLP products are also known as data leak prevention, information leak prevention, etc. Gateway-based DLP products are typically installed at the company's Internet network connection and analyze outgoing network traffic for unauthorized transmission of sensitive information. These products typically generate a unique signature of the sensitive information when stored within the company, and then look for these signatures as information passes out over the network boundary, searching for the signatures of the sensitive information. Host-based DLP products typically run on end-user workstations within the organization. These products can address internal as well as external release of information and can also control information flow between groups of users within an organization. These products can also monitor electronic mail and instant messaging communications and block them before they are sent.","Detecting and preventing the leaking of sensitive images can be especially problematic.  illustrates a prior art technique. In this example, image  is a sensitive image that the company wishes to keep within the company. To that end, it employs a data loss prevention product  that has generated a unique signature for this image  while the image is stored within the company. For example, any suitable hash function, such as the MD5 algorithm, may be used to generate a unique signature. When the user attempts to send  the image outside of the company to an entity  outside of the company boundary (that is not trusted) the DLP product  automatically generates the signature of the image to be sent and compares it against a list of sensitive image signatures. A check  reveals that the signatures match and the image is blocked  from being sent.","But, an unscrupulous user may use an image editor  to make minor changes ,  to image \u2032. Or, the user may simply convert the image to another image format. The user then attempts to leak the image by sending it  to an untrusted party  outside the company boundary. When the DLP product  then checks  the signature of the revised image against the list of sensitive image signatures, there is no match because image \u2032 has a different unique signature than original image  because of the modifications. The image is then passed  through the company boundary to the untrusted party.","What is desired is an improved technique for preventing the loss of sensitive images.","To achieve the foregoing, and in accordance with the purpose of the present invention, an image loss prevention technique is disclosed that can trace revisions of sensitive or restricted images.","Data leak prevention software products typically calculate and store the unique digital signature of image files in a database for later reference. The present invention traces revised images by hooking an open command in order to add a digital watermark to the image before an application edits that image, and then also hooks a close command in order to check for that digital watermark and then to calculate a new unique signature for this revised image. The digital watermark is then preferably removed before saving the image, which will make the process transparent to the user. The digital signature for the revised image is then uploaded to a database associated with a DLP server software product, and then pushed periodically down to endpoint DLP client products.","In one embodiment of adding a digital watermark to a file, a DLP product via a software hook module receives an indication that a software application is attempting to open a computer image file stored on disk. A digital signature of the image file is calculated and compared against a sensitive file database. If there is a match, then the image file is copied to a temporary location. A digital watermark is added to the image file that has been copied. The software application is then redirected to read the image (including the watermark) from the temporary location. Any resulting revised image file that the application creates will then necessarily include the added digital watermark.","In a second embodiment of marking a file as being restricted a DLP product via a software hook module receives an indication that an executing software application is attempting to close a computer image file to complete the storing of it from application process memory to disk. The module determines that the image file includes a digital watermark, the existence of this digital watermark indicating that the image file is designated as a restricted file and should not be transmitted outside the organization. The digital watermark is removed from the image file and a digital signature of the image file is calculated. The software application is then allowed to close the image file to complete the storing of the computer image file from the application process memory to disk. The digital signature of the revised image file is then uploaded and stored in a restricted file database of a DLP server before being pushed down to endpoint computers. If the image file had been stored in a temporary location generated by the software hook module, then the image file is stored to its original location on disk.","In a third embodiment of marking a computer file as being restricted, a DLP product hooks an \u201copen file\u201d command from a software application attempting to open a computer image file from disk. The software application is allowed to open and read this image file and may or may not attempt to modify the image. When the application attempts to close (or perhaps write) the modified image, the DLP product hooks a \u201cclose file\u201d command from the software application to prevent the direct writing of the image from the application process memory to disk. A digital signature of the modified image is calculated, and the signature is stored in a restricted file database. The software application is then allowed to store this modified image file from application process memory to disk. This modified image file is marked as being restricted by virtue of its calculated digital signature being present in the restricted file database. Any digital watermark present in the image file is preferably removed prior to calculating the digital signature of the modified image.","An improved data leak prevention product is able to track modified images and prevent these modified images from being leaked outside an organization. A digital watermark is used to facilitate the invention. As known in the art, watermarking embeds recognizable information (the digital watermark) into digital data such as a picture, video frame, image, etc. Even if the digital data is copied, the digital watermark remains with the copy. Watermarking may be invisible or visible. When invisible, the digital watermark cannot be viewed. For example, descriptive information concerning a photograph may be annotated to the photograph for later reference, but cannot be seen in the photograph when viewed. When visible, the digital watermark can be seen on the image itself. Preferably, the present invention uses an invisible watermark.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2","b":["10","10"]},"DLP endpoint product  is a software module arranged to perform the steps of the present invention described herein and preferably resides and executes on a user computer (an endpoint computer). In one embodiment, product  is client software of an enterprise DLP product that also includes server software on a DLP server computer within the enterprise. The server software would then execute steps associated with the server computer as described below. Alternatively, product  may reside upon a gateway computer within the organization; in this situation, when the product is installed on a gateway computer, revisions of sensitive or restricted images will be tracked on the gateway computer. In order to prevent any leaking of images through the gateway computer, the DLP product monitors the network and detects leaking of any sensitive files having a watermark.","Product  is preferably written in the C or C++ programming languages, but may also be written using languages such as Java, C#, etc. Application  is any suitable computer program arranged to open an image file and edit it, and is typically an application that an end user might use to edit a digital image. Examples include photo editing applications, word processing programs, PDF editing applications, PowerPoint, Outlook, etc. Hook  is any suitable software hook. As known in the art, a software hook is a relatively small portion of software code that allows an application (such as DLP endpoint product ) to detect when a certain system command is called (such as an \u201copen file\u201d command) and then execute custom code before, during or after execution of that system command. The custom code execute steps that product  wishes to execute every time the system command executes.","Sensitive image list  is a database containing digital signatures for images that an organization has deemed as being sensitive. An organization may deem any digital image sensitive because it does not wish the image to be transmitted outside the organization, does not want the image to be transmitted outside a particular group of users, does not wish the image to be moved from a storage location, etc. An image may be marked as sensitive by computing a unique digital signature for the image (such as a hash function, message digest, etc.) and then storing that unique digital signature in database  accessible by product . Alternatively, product  also has the capability to input a list of sensitive images, calculate their digital signatures, and store the signatures within product  itself.","Product  has created a hook module  for the \u201copen file\u201d system command being executed by application  when it attempts to open image . Symbol  indicates that application  is effectively blocked from immediately reading image  directly into the application. An example of this hook module is:","\/\/ hook file open","case FILE OPEN EVENT:\n\n","When \u201copen file\u201d is called in step , the hook module then executes custom code in step  to determine if the image about to be opened is considered a sensitive image by the organization. For example, product  calculates the MD5 for image  and compares it against the list of sensitive images in database . If the image signature is not in the database, then no further processing is necessary. On the other hand, if the image has been registered as sensitive, product  then creates a temporary image file, adds a watermark, and then returns the temporary file to the application. The product may also execute a similar hook module for a \u201cread file\u201d system command executed by application  when it attempts to read image . As used herein, the term \u201copen file\u201d or \u201copen\u201d includes reading a file.","As mentioned above, the hook module executes custom code in step  and dynamically adds a digital watermark to the image  in a temporary disk location. Adding a watermark to the image while in a temporary location may be implemented in many ways. In one embodiment, kernel memory associated with product  is used as the temporary location. In another embodiment, a temporary file may be created using the hook module to store the image and its added watermark, and then the read operation of application  is redirected to this temporary file. Other techniques may also be used.","Adding a digital watermark to a computer file is well known to those of skill in the art. As known, one technique converts the image using a special algorithm (a digital image processing algorithm) and perhaps adds information as well. Preferably, the digital watermark used is a robust, invisible watermark that uses one of many common algorithms. The algorithm should be strong enough so that the digital watermark cannot be changed by editing. Examples of watermark algorithms that may be used include DCT Watermarking or Wavelet Watermarking.","Because the watermark is added upon opening the image, the watermark could be seen by the user it if it is a visible watermark. Alternatively, if a visible watermark is used and it is not possible for the user to modify or remove the visible watermark when editing the file, then a visible watermark would be suitable for use with his invention. Preferably, the watermark used to trace the revised version when the user edits the image file is temporary, and will be removed when the revision is completed. In this embodiment, nothing is added to the revised image file stored on disk, the reason being that the user may be concerned if something like a watermark is added to his or her image file.","In one embodiment, the same processing algorithm is used for all image files to which a digital watermark is added. In this fashion, the invention can remove the watermark when the image is eventually written because it knows ahead of time which algorithm was used to put the watermark in place. Alternatively, if a different, custom or special algorithm is used for each image file, it would be necessary to flag in some fashion in the image file which algorithm has been used. For example, the name of the algorithm may be embedded within the added watermark.","When application  attempts to read image  in step , product  transfers image  (residing in a temporary disk location and including the digital watermark) to the application. The user now has opened image  in his or her preferred image editing application  without realizing that this image includes an unseen digital watermark added to the original image .",{"@attributes":{"id":"p-0035","num":"0046"},"figref":["FIG. 3","FIG. 2"],"b":["110","210","160","170","140","140","170","100","170","100"]},"The user using application  had edited image  (either with an intent to circumvent the DLP product or innocently) and makes a change or changes to produce a revised image  that includes user changes  and  as well as the invisible digital watermark. Product  has created hook module  for the \u201cclose file\u201d system command being executed by application  when it attempts to close image  to complete writing it to disk on the user's local computer (or to another storage location chosen by the user). Symbol  indicates that application  is effectively blocked (via the hook module) from immediately closing image  to complete writing it directly to storage. An example of this hook module  is:","\/\/ hook file close","case FILE CLOSE EVENT:\n\n","The product may also execute a similar hook module for a \u201cwrite file\u201d system command executed by application  when it attempts to write image . As used herein, the term \u201cclose file\u201d or \u201cclose\u201d includes writing a file.","When \u201cclose file\u201d is called in step , the hook module then executes custom code in step  to determine if revised image  about to be written includes the digital watermark added to the image previously. Preferably, product  adds the same digital watermark (using the same algorithm) to each image that is about to be opened and read by an application in step , thus making it simpler to determine if any image about to be written includes the digital watermark. Alternatively, each image may have a different or unique digital watermark added to it and product  would then record an indication of which watermark has been embedded in which image. Step  would then involve determining which watermark to look for in which image, and then looking for that watermark. Product  would then keep track in an internal database which watermarking algorithm has been used with which image.","If the revised image about to be closed does not include the digital watermark this indicates that the image was not previously designated a sensitive image and no further processing is necessary. The image may then be written and the file closed. But, if the digital watermark is found, in step  the digital watermark is removed from image  to produce image  which is stored in a temporary location. Once the watermark is removed, then the image  is moved back to its original location. It is preferable to remove the digital watermark before computing the unique signature of the revised image. The watermark currently only exists in the process of the application that has opened the image. One reason to remove the watermark is that it is desirable to only store the user's changes to the image on disk; another reason is to prevent anyone from discovering the watermark used.","Next, in step  product  computes the unique signature  (such as an MD5) of revised image  (without the watermark) and saves this unique signature in sensitive image list database . Because original image  is considered sensitive, it is likely that revised image  is sensitive as well and its unique signature should be kept in the sensitive image list. In addition, the signature  of the revised image may also be associated with signature  of the original image  and these two signatures may be stored together in database .","For example, the signatures may be associated by being stored together in a linked list, by being stored in fields of the same record, etc. By storing the signatures of similar images together, product  is able to provide advantages in the administration of the DLP product.","For example, if the signature of a revised image is associated with the signature of the original image in the database, then the same policy or rules used with the original image may also be used with the revised image, thus providing a more consistent policy and saving time. In addition, if the revised image is flagged or blocked, it can be useful to review the history of the original image to provide more information to the administrator.","In one embodiment, these two signatures are uploaded from the end-user computer to the server  and then stored in database . In one embodiment, the unique signature of the original image is incorporated into the digital watermark that is added to the image when it is opened. Thus, the DLP product is aware of the signature of the original image when it removes the watermark from the revised image and calculates the new unique signature. In this way, the two signatures can be associated with one another when added to the database.","Next, in step , revised image  (including the user's changes but not including the watermark) is written to disk and the image file is closed. Thus, the original image has been revised by the user, and because the revised image  is also considered sensitive, the revised image has had its unique signature registered with the DLP server in the sensitive list.",{"@attributes":{"id":"p-0046","num":"0083"},"figref":"FIG. 4","b":["170","100","410","420","410","420"]},{"@attributes":{"id":"p-0047","num":"0084"},"figref":"FIG. 5","b":["100","310","10","100","310","170","512","310","100","514","516"]},{"@attributes":{"id":"p-0048","num":"0085"},"figref":"FIGS. 6A and 6B","b":["604","140","100"]},"In step  application  attempts to open image file  using a suitable application programming interface (API). In step  this open system command is intercepted by the corresponding hook module (in the operating system kernel) and the hook module then executes the following steps before allowing the application to actually open the image and have it edited. In step  the unique signature of the image file is calculated and compared to the list of sensitive image signatures in database . If the signature is not found in the database then no further action is taken by the hook module and the application is allowed to open the image file. But, if the signature is found, this means that the image is sensitive and in step  a digital watermark is added to the image which is copied to the DLP product temporary location. Optionally, this signature is incorporated into the digital watermark that is added, allowing signatures to be associated together as explained below in step .","In step  the application is then redirected and allowed to open and read the image file from the temporary location (that includes the digital watermark) rather than directly from the original location on disk. In one embodiment, the application is provided the contents of the image file in temporary memory buffer-by-buffer as it requests the contents of the image. In step , the image is now present in the process memory of the application (after being copied buffer-by-buffer from the DLP process memory) and the user is allowed to modify the image.","In step  the application attempts to close the image file after the user edits. It is desirable at this point to determine if the image is a sensitive image, and if so, to calculate a new unique signature for this revised image. Accordingly, in step  the close system command is intercepted by a suitable hook routine (by hooking the API call) and the following steps are executed by the hook routine before the application is actually allowed to close the image file and write it to disk. In step  the revised image is checked to see if it includes a digital watermark. Because it is known ahead of time which algorithm has been used to add any digital watermark, it is straightforward to determine if such a watermark has been added. If none is present, then no further action is taken and the image may be written to disk. If a watermark is present, then in step  this watermark is removed and in step  a new signature is calculated for this revised image file.","In step  the application is then allowed to close the revised image file and the image file is copied back to its original location. In step  the newly calculated signature for the revised image is uploaded from the endpoint computer to DLP server  and stored in the sensitive image database . Thus, the revised image is now also flagged as a sensitive image so it cannot be leaked from the organization.","Optionally, in step  this new signature is associated with the signature of the original image file and these two signatures are stored in the database together, or in some fashion indicating that they are associated or linked. In one embodiment, the signature of the original image file is retrieved from a digital watermark that has been removed from the revised image file in step  (this signature being present in the digital watermark because it was added in step ). The two signatures may then be uploaded together to the DLP server and stored in association in the database.","In step  (as shown in ) the new signature (or any new signatures) are pushed from DLP server  down to any of the managed endpoint user computers  and  and stored in a local sensitive image database associated with these user computers. Depending upon the implementation of the enterprise product and the needs of the organization, a newly calculated signature from step  may be pushed down to the endpoints immediately, or a batch of newly calculated signatures for revised images may be pushed periodically such as every hour, every day, every week, etc. Thus, the endpoint user computers incorporating DLP product  may effectively check the unique signature of any image file attempted to be transmitted against the local database to determine if the transmission should be blocked or not. The present invention thus prevents the transmission of sensitive image files and any image files that have been revised.",{"@attributes":{"id":"p-0055","num":"0092"},"figref":["FIGS. 7A and 7B","FIG. 7A"],"b":["900","900","902","904","906","908","910","912","914","900"]},{"@attributes":{"id":"p-0056","num":"0093"},"figref":"FIG. 7B","b":["900","920","922","924","924","926","922","926","926","924","914"]},"CPU  is also coupled to a variety of input\/output devices such as display , keyboard , mouse  and speakers . In general, an input\/output device may be any of: video displays, track balls, mice, keyboards, microphones, touch-sensitive displays, transducer card readers, magnetic or paper tape readers, tablets, styluses, voice or handwriting recognizers, biometrics readers, or other computers. CPU  optionally may be coupled to another computer or telecommunications network using network interface . With such a network interface, it is contemplated that the CPU might receive information from the network, or might output information to the network in the course of performing the above-described method steps. Furthermore, method embodiments of the present invention may execute solely upon CPU  or may execute over a network such as the Internet in conjunction with a remote CPU that shares a portion of the processing.","In addition, embodiments of the present invention further relate to computer storage products with a computer-readable medium that have computer code thereon for performing various computer-implemented operations. The media and computer code may be those specially designed and constructed for the purposes of the present invention, or they may be of the kind well known and available to those having skill in the computer software arts. Examples of computer-readable media include, but are not limited to: magnetic media such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROMs and holographic devices; magneto-optical media such as floptical disks; and hardware devices that are specially configured to store and execute program code, such as application-specific integrated circuits (ASICs), programmable logic devices (PLDs) and ROM and RAM devices. Examples of computer code include machine code, such as produced by a compiler, and files containing higher-level code that are executed by a computer using an interpreter.","Although the foregoing invention has been described in some detail for purposes of clarity of understanding, it will be apparent that certain changes and modifications may be practiced within the scope of the appended claims. Therefore, the described embodiments should be taken as illustrative and not restrictive, and the invention should not be limited to the details given herein but should be defined by the following claims and their full scope of equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention, together with further advantages thereof, may best be understood by reference to the following description taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 6A and 6B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 7A and 7B"}]},"DETDESC":[{},{}]}
