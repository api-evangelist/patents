---
title: Multi-client generic persistence for extension nodes
abstract: Various embodiments of systems and methods to provide multi-client generic persistence for extension nodes are described herein. A standard field value and an extension field value specific to a client of a business data object are separated. Further, an extension node instance key associated with the extension field value is segregated. Furthermore, the standard field value and associated standard node instance key are stored in a standard persistence unit, and the extension field value is stored in an extension data persistence unit. Also, the extension node instance key and a relation between the standard node instance key and the extension node instance key are stored in an extension key persistence unit.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08935218&OS=08935218&RS=08935218
owner: SAP SE
number: 08935218
owner_city: Walldorf
owner_country: DE
publication_date: 20111104
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Embodiments generally relate to computer systems and more particularly to methods and systems to provide multi-client generic persistence for extension nodes.","Software as a service (SaaS) solution provides the functional depth of a large scale business management solution, which can include applications, standard data objects, databases and the like. To enable customization of the solutions for a client, it can be possible to add one or more extension fields (e.g., client defined business data fields added to standard business objects) to support individual business processes.","Currently, it may be possible to add extension fields under an extension node associated with a business object (e.g., a new extension field can be added for a business data object). However, the SaaS can be hosted on a multi-client system, where multiple clients or users or customers are located on a same computer system. In such a scenario, isolation of extension field values specific to the client and retrieving the business data object specific to the client at a faster pace are important objectives. Further, the extension fields can store not only one value, but they can store multiple values. However, there are no methods to define the extension fields carrying multiple values. If the extension fields carrying multiple values are defined, then the optimization of the resources can be achieved as creating multiple extension fields can be avoided.","Therefore, it is desirable to provide a method and system to provide multi-client generic persistence for extension nodes to support isolation of extension field values specific to the client, to retrieve the business data object specific to the client at the faster pace, and achieve resource optimization.","Various embodiments of systems and methods to provide multi-client generic persistence for extension nodes are described herein. In one aspect, a standard field value and an extension field value specific to a client of a business data object are separated. Further, an extension node instance key associated with the extension field value is segregated. Furthermore, the standard field value and associated standard node instance key are stored in a standard data persistence unit, and the extension field value is stored in an extension data persistence unit. Therefore, by storing the standard field value and the extension field value separately, isolation of extension field values specific to the client can be achieved.","Further, the extension node instance key and a relation between the standard node instance key and the extension node instance key are stored in an extension key persistence unit. Therefore, by storing the extension node instance key and the relation with the standard node instance key separately, it is possible to define the extension node specific to the client in a multi-client system. Thus, semantically grouping extension fields together and defining extension fields which can carry multiple values can be achieved. Also, retrieving the business data object specific to the client at a faster pace and resource optimization can be achieved.","These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof, presented in connection with the following drawings.","Embodiments of techniques to provide multi-client generic persistence for extension nodes are described herein. A client is provided with an option to customize the standard data objects to modify operation of a networked application. The customized data or a business data object can be stored in a business object specific to the networked application. The business object can include one or more standard nodes and corresponding one or more extension nodes. Further, the standard nodes and the extension nodes can include corresponding one or more standard fields and extension fields respectively to store the business data object. The business data object can include standard field values (e.g., stored in the standard fields) and extension field values (e.g., stored in the extension fields) specific to the client. In one embodiment, a business data storage unit is provided to store business data objects associated with multiple clients.","According to one embodiment, the standard field values and the extension field values specific to the client are separated from the business data object. Further, the extension field value and an extension node instance key associated with the extension field value are stored in separate persistence units. Furthermore, a relation between a standard field instance key associated with the standard field values and the extension node instance key are stored. Since the values (e.g., standard field values and user-specific extension field values), the keys (e.g., extension node instance key) and the relation between them are stored separately, it is possible to define existence of the extension node specific to the client in a multi-client system. Therefore, it can be possible to semantically group the extension fields' specific to the business process, which are associated with the client and achieve resource optimization. Also, it can be possible to provide fast navigation to the extension field values.","In the following description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention can be practiced without one or more of the specific details, or with other methods, components, materials, etc. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.","Reference throughout this specification to \u201cone embodiment\u201d, \u201cthis embodiment\u201d and similar phrases, means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures, or characteristics may be combined in any suitable manner in one or more embodiments.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1","b":["100","105","110","115","160","105","160","160"]},"The multi-client computer system  may include one or more processors (e.g., ) and one or more memory devices or data persistence devices or business data storage units (e.g., ). The business data storage unit  provides access to a networked application  being executed in the processor . In one exemplary embodiment, access to the networked application  is provided for a plurality of clients whose data should be kept isolated. The networked application  may be available for execution using application instances (e.g.,  and ) presented to clients, who connect from the client systems (e.g.,  and ). The client may be an entity, person, a system, an application and the like that accesses the networked application  at the multi-client computer system . In one embodiment, the business data storage unit  includes a standard data persistence unit , an extension key persistence unit  and an extension data persistence unit  to provide multi-client generic persistence for extension nodes in the multi-client computer system .","In operation, the user or client operating the client system  can add customizations to standard features and standard data objects (e.g., a business data object) provided by the networked application  via the application instance . The business data object can include a standard field value and an extension field value specific to the client. The standard field value corresponds to one or more standard fields of a standard data object defined by the networked application  and the extension field value corresponds to one or more extension fields to modify operation of the networked application  for the client. For example, consider that the networked application  provides sales order functionality. The standard field value of the business data object can include business object name (e.g., sales order), the business object node (e.g., header) and a node identifier (e.g., 1000). The extension field value can include client specific data fields (e.g., value1_1).","In one embodiment, the business data object is stored in the business data storage unit . The standard field value and associated standard node instance key are stored in the standard data persistence unit . The standard node instance key defines a number of extension nodes associated with the standard node. Further, the extension field value is stored in the extension data persistence unit . An extension node is created specific to the client and the extension field value is stored in an extension field of the extension node. In one exemplary embodiment, the client can define one or more extension nodes to store extension field values specific to a business process.","In one embodiment, an extension node instance key associated with the extension field value, and a relation between the standard node instance key and the extension node instance key are stored in the extension key persistence unit . Further, when an additional business data object associated with the business data object is received, an extension field value associated with the additional business data object is stored in the corresponding extension fields. The storing of the extension field value associated with the additional business data object is achieved using the relation between the standard node instance key and the extension node instance key that are stored in the extension key persistence unit . Therefore, creating extension nodes for every business data object may not be required. Further, it is possible to semantically group the extension fields' specific to the business process, which are associated with the client. Also, it is possible to define the extension fields carrying multiple values through the relation between the standard node instance key and the extension node instance key. Similarly, a business data object specific to the client operating the client system  can be received and stored. Therefore, the business data objects related to the client systems (e.g.,  and ) are stored in the single business data storage unit . However, as the standard field value and the extension field value are stored separately, isolation of extension field values specific to the client (e.g., client system  and client system ) can be achieved. Storing the business data object specific to the client is described in greater detail in .",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2","b":["200","205","210","205","210","215","220"]},"In one embodiment, the extension framework  segregates an extension node instance key associated with the extension field value. Further, the extension field value is converted into a database format having a specific structure at an extension persistence adapter . The converted extension field value is stored in an extension data persistence unit . The extension data persistence unit  can be formatted as a simple database table whose structure may not be specific to the client  as extension field values of multiple clients are stored in the extension data persistence unit . In one example, the extension data persistence unit  can be formatted as a list table with the extension field value specific to the client  is stored in a row.","In one embodiment, the extension node instance key and a relation between the standard node instance key and the extension node instance key are stored in an extension key persistence unit . In one embodiment, the extension node instance key includes an extension node key, a parent node key and a root node key as a reference to the one of the plurality of clients, the standard data object and an instance of the standard data object with which the extension field value is associated. The extension node instance key is described in greater detail in . Storing of the business data object is described with an example in .",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 3","FIG. 4"],"b":["300","310"]},"At step , the standard field value and the extension field value of the business data object are separated. For example, the personal information ID and the list of hobbies are separated. At step , an extension node instance key associated with the extension field value is segregated from the extension field value. For example, the extension node instance key includes an extension node key (e.g., extension node ID hobbies_), the parent key (e.g., a relation between a standard node and an extension node) and the root key (e.g., a root node ID header of the personal information).","At step , the standard field value and associated standard node instance key are stored in a standard data persistence unit. The standard node instance key defines a number of instances of extension nodes associated with a standard node corresponding to the standard field value. For example, if only \u2018hobbies\u2019 are stored as personal information, the standard node instance key indicates there is only one extension node (e.g., hobbies) associated with the standard node (e.g., personal information). Further, if other information such as date of birth is stored, the standard node instance key indicates there are two extension nodes (e.g., hobbies and date of birth) associated with the standard node (e.g., personal information).","Further, the extension field value is stored in an extension data persistence unit. For example, the list of hobbies is stored in an extension data field. In one exemplary embodiment, the extension field value is converted into a database format having a specific structure before storing in the extension data persistence unit. The structure of the extension data persistence unit used to store the extension field value may not be specific to the client as extension field values associated with multiple clients are stored in the extension data persistence unit. In one example, the extension field value can be converted to fit to a format of a table for easy and fast access of the extension field value specific to the client.","At step , the extension node instance key, and a relation between the standard node instance key and the extension node instance key are stored in an extension key persistence unit. In one embodiment, the extension node instance key includes an extension node key, a parent node key and a root node key. The extension node key includes an extension node ID (e.g., hobbies_), the parent node key includes a parent node ID to define a relation between a standard node and an extension node (e.g., relation between the personal information and the hobbies), and the root node key includes a root node ID (e.g., header of personal information). The extension node key, the parent node key and the root node key stored in the extension key persistence unit are used to retrieve or read or navigate the extension field value at a faster pace. Retrieving of the extension field value is explained in greater detail in .","In one embodiment, the parent node key defines the relation between the standard node and the extension node by defining extension fields carrying multiple values. For example, the extension field hobbies may include multiple values such as cricket, reading, gardening and knitting. The parent key of the extension field hobbies includes multiplicity \u2018one-to-many\u2019, indicating the extension field hobbies include multiple values. Similarly, the extension field \u2018date of birth\u2019 includes one value. Thereby, the parent key of the extension field date of birth includes multiplicity \u2018one-to-one\u2019, indicating the extension field \u2018date of birth\u2019 includes one value. The multiplicity \u2018one-to-one\u2019 and \u2018one-to-many\u2019 are described in greater detail in .","In one exemplary embodiment, the extension field can include a special use case of multi value fields (e.g., language dependent fields). In this business requirement, it may be required to maintain an additional description in different languages. To achieve this, a new extension node (e.g., \u2018additional description\u2019, one description for the colleague in Germany, one description for the colleague in India and the like) can be created with the relation multiplicity \u2018one-to-many\u2019 and with two extension fields (e.g., one for the language and one for the additional description). Further, the extension field for language behaves as a semantic key of the new extension node whereas the extension field for additional description field contains the actual extension field values specific to the client. Therefore, the extension data fields containing such special extension field values can be defined by the relation between the standard node instance key and the extension node instance key.","In one exemplary embodiment, an additional business data object associated with the business data object may be received. Storing the additional business data object can include separating the additional extension field value from the standard field value associated with the additional business data. Further, an extension node instance key associated with the additional extension field value is segregated. Furthermore, the extension field value is persisted in an associated extension field of the extension data persistence unit using the relation between the standard node instance key and the extension node instance key after converting the additional user-specific extension field value into the database format with the specific structure.","For example, the additional extension field value can include time spent for the hobbies per week. The hobbies and the time spent per week semantically belong together. Therefore, the hobbies and the time spent per week are grouped together and stored in one extension node. The semantic grouping is achieved by the relation between the standard node instance key and the extension node instance key, stored in the extension key persistence unit. Thereby making it easier for the client to understand the meaning of the extension fields. Further, no extra extension nodes need to be generated to all extension field values. In another exemplary embodiment, the semantic grouping can be done for the standard fields. For example, all header information of a sales order can be grouped together in one standard node.","In general, when the business data object is received, one entry is made in key tables (e.g., standard node instance key, the extension node instance key and the relation between the two are stored). Further, the associated data (e.g., standard field values and extension field values) are stored separately. In another exemplary embodiment, when additional business data object is received, extension field value associated with the additional business data object is stored in reference to the same key tables (e.g., standard node instance key, the extension node instance key and the relation between the two). In yet another exemplary embodiment, when the user customized data object is received with no data (e.g., standard field values and extension field values), then one entry is made in the key tables (e.g., standard node instance key, the extension node instance key and the relation between the two are persisted) with no data stored. Therefore, it can be easily distinguished between nodes (e.g., the extension field node and the standard field node) having data (e.g., initial values), additional data (e.g., non-initial values) and no data by persisting the keys (standard node instance key, the extension node instance key and the relation between the two) associated with the nodes (e.g., the extension field node and the standard field node).",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 4","b":["400","400","405","410","415","405","1","2","405"]},"Further, the standard node  includes a standard node instance key and one or more standard field values. For example, the standard node instance key includes a standard node key, a parent node key and a root node key. The standard field values can be standard field  and standard field  as shown in . Furthermore, the extension node  includes an extension node instance key and one or more extension field values. For example, the extension node instance key includes an extension node key, a parent node key and a root node key. The extension field values can be extension field  and extension field  as shown in . In one exemplary embodiment, the root node key of the extension node  is connected to the standard root node key of the root node . Further, the parent node key of the extension node  is connected to the standard node key of the standard node . Furthermore, the root node key and the patent node key of the standard node are connected to the standard root node key of the root node . The connection of the node key, parent node key and the root node key describe the relation between the standard and extension nodes.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 5","b":["500","505","510","515","500","515","510","111","515","100","515","100","505","101","515","101","510","100","100","510","100","505"]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 6","b":["600","605","610","615","620","600","615","620","610","111","121","615","620","100","615","620","100","605","101","615","620","101","610","615","620","100","100","610","100","505"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 7","FIGS. 8"],"b":["700","700","705","710","710","100","705","1","2","710","715","705","720","700","9","9"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 8","FIG. 9"],"b":"810"},"At step , the extension field data record is converted to the extension field value in a format specific to the client system. For example, the format of the received items may not be compatible to the format of the client system. Therefore, the format of the received items is converted to the format compatible to the client system. At step , the standard field value and the extension field value are combined using the relation between the standard node instance key and the extension node instance key to provide the business data object. For example, the items associated with the sales order is combined using the stored relation (e.g., the sales order includes 100 items specific to the client). Therefore, the business data object can be provided for use by the client with a networked application.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIGS. 9A and 9B","FIG. 9A","FIG. 9B"],"b":["900","900"]},"In one exemplary embodiment, the parent node ID is used to retrieve the extension field value. The parent node ID defines a relation between a standard node (e.g., BO node descriptor ID) and an extension node (e.g., node ID). Therefore, the extension field values corresponding to the BO node descriptor ID and the node ID is retrieved using the parent node ID as illustrated in .","In another exemplary embodiment, the root node ID is used to enable a fast navigation to the root node instance (e.g. the header of a particular sales order). The extension key persistence unit contains the root node ID. Further, the root node ID is read from the extension key persistence unit via the extension node ID as illustrated in  For example, consider the storage of three sales order (e.g., sales order ,  and ). Further, the sales orders (e.g., sales order ,  and ) can have different identifiers, which are ordered by the client. Therefore, using the root ID, the items associated with the respective sales order can be retrieved (e.g., items associated with the sales order  can be retrieved).","In general, the above described method is advantageous as the method provides client data isolation, ensures that the business data objects of the clients are treated in a homogeneous way while providing a seamless work environment to a client such that the client's business data objects are viewable as though they are stored in a customized database table. Further, the data of extension fields are no longer added to the standard database tables and no new tables are generated per node. Instead all extension field data is stored in a generic data persistence unit. Also, the client can develop add-ons specific to the client to support specific business process without making any changes to the standard data persistence unit. Furthermore, a new extension key persistence is introduced which stores the keys and the relations between the nodes. This makes it possible for the client to semantically group extension fields together, define extension fields which can carry multiple values and also define extension fields which can carry language dependent descriptions.","Some embodiments of the invention may include the above-described methods being written as one or more software components. These components, and the functionality associated with each, may be used by client, server, distributed, or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as, functional, declarative, procedural, object-oriented, lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively, the components maybe implemented in server and client applications. Further, these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example, a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level (e.g., a graphical user interface). These first and second computer systems can be configured in a server-client, peer-to-peer, or some other configuration. The clients can vary in complexity from mobile and handheld devices, to thin clients and on to thick clients or even other servers.","The above-illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term \u201ccomputer readable storage medium\u201d should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term \u201ccomputer readable storage medium\u201d should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store, encode, or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described, represented, or illustrated herein. Examples of computer readable storage media include, but are not limited to: magnetic media, such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROMs, DVDs and holographic devices; magneto-optical media; and hardware devices that are specially configured to store and execute, such as application-specific integrated circuits (\u201cASICs\u201d), programmable logic devices (\u201cPLDs\u201d) and ROM and RAM devices. Examples of computer readable instructions include machine code, such as produced by a compiler, and files containing higher-level code that are executed by a computer using an interpreter. For example, an embodiment of the invention may be implemented using Java, C++, or other object-oriented programming language and development tools. Another embodiment of the invention may be implemented in hard-wired circuitry in place of, or in combination with machine readable software instructions.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 10","b":["1000","1000","1005","1055","1000","1040","1055","1010","1015","1010","1015","1005","1015","1000","1025","1030","1000","1025","1030","1000","1035","1000","1050","1050","1000","1045","1000","1020","1060","1060","1060","1050","1060"]},"A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases, such as, relational, transactional, hierarchical, multi-dimensional (e.g., OLAP), object oriented databases, and the like. Further data sources include tabular data (e.g., spreadsheets, delimited text files), data tagged with a markup language (e.g., XML data), transactional data, unstructured data (e.g., text files, screen scrapings), hierarchical data (e.g., data in a file system, XML data), files, a plurality of reports, and any other data source accessible through an established protocol, such as, Open DataBase Connectivity (ODBC), produced by an underlying software system (e.g., ERP system), and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams, broadcast data, and the like. These data sources can include associated data foundations, semantic layers, management systems, security systems and so on.","In the above description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however that the invention can be practiced without one or more of the specific details or with other methods, components, techniques, etc. In other instances, well-known operations or structures are not shown or described in details to avoid obscuring aspects of the invention.","Although the processes illustrated and described herein include series of steps, it will be appreciated that the different embodiments of the present invention are not limited by the illustrated ordering of steps, as some steps may occur in different orders, some concurrently with other steps apart from that shown and described herein. In addition, not all illustrated steps may be required to implement a methodology in accordance with the present invention. Moreover, it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.","The above descriptions and illustrations of embodiments of the invention, including what is described in the Abstract, is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of, and examples for, the invention are described herein for illustrative purposes, various equivalent modifications are possible within the scope of the invention, as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather, the scope of the invention is to be determined by the following claims, which are to be interpreted in accordance with established doctrines of claim construction."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The claims set forth the embodiments of the invention with particularity. The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. The embodiments of the invention, together with its advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 9A and 9B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
