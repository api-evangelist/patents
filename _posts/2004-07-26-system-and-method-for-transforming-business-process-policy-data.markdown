---
title: System and method for transforming business process policy data
abstract: A system that facilitates interactions between heterogeneous information providers, business process policies, and business process policy objects is provided. The system includes a translation services logic that accepts data format definitions and rules for transforming, translating, converting, reordering, merging, splitting and other operations that adapt one data format to another data format. The translation services logic produces a mapping rule object (MRO) for performing the adaptation(s).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08655875&OS=08655875&RS=08655875
owner: CA, Inc.
number: 08655875
owner_city: Islandia
owner_country: US
publication_date: 20040726
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application is a continuation of U.S. application Ser. No. 10\/188,484, entitled \u201cSystem and Method for Transforming Business Process Policy Data\u201d filed Jul. 3, 2002 now abandoned and further claims priority to U.S. provisional application entitled \u201cSystem and Method for Transforming and Translating Services for Business Process Policies,\u201d Ser. No. 60\/303,143, filed Jul. 5, 2001, which is incorporated herein by reference.","The methods, systems, and computer readable media described herein relate generally to computer programming and more particularly to converting data from one format to another.","The emerging e-business paradigm is challenged by the need to eliminate boundaries between information providers and formats to facilitate increasing business value for organizations. One e-business paradigm that faces this challenge is the enterprise application integration (EAI) environment. In the enterprise application integration environment, data and\/or business events that are shared between integrated applications may be commonly representable. However, receiving data from sources outside the pre-defined EAI environment and\/or interacting with new applications can confound inflexible conventional EAI applications. Furthermore, some information providers may be unwilling to tailor their data to each EAI common representation.","Thus, e-business and other applications can benefit from improved data transformation, translation, mapping, and\/or adaptation systems and methods that facilitate converting data between different formats and increasing interactions between applications.","The following presents a simplified summary of methods, systems, and computer readable media associated with translating, transforming, adapting, and\/or reformatting business process policy data. This summary is not an extensive overview and is not intended to identify key or critical elements of the methods, systems, and\/or media or to delineate the scope of the methods, systems, and media. It conceptually identifies the methods, systems, and media in a simplified form as a prelude to the more detailed description that is presented later.","The systems and methods described herein facilitate different information providers collaborating through a seamless layer where operations like mapping, translating, reformatting and so on occur. These operations facilitate sharing information formatted and provided in different formats and\/or representations, for example. The systems and methods can be practiced in an object based environment where data transformation becomes a general purpose, parameter driven service that can be programmatically interfaced in a variety of manners.","In one example, a system for transforming a first data in a first format (e.g., source format) to a second data in a second format (e.g., destination format) is provided. The system includes a translation services logic that takes data definitions and data transformation rules as inputs. The translation services logic then produces a mapping rule object (MRO). The MRO transforms data between formats by applying the data transformation rules to received data. One example MRO includes a source logic that identifies a source from which the first data will be received and a destination logic that identifies the destination to which the second data will be provided. An MRO can also include a rule logic for transforming data and a source filter rule logic for selecting data to be transformed.","An MRO can also include a translation form logic that facilitates controlling the form a mapping rule object will take. An MRO can also include a post translation execution logic that specifies which, if any, business process policies, objects, MROs, and so on to invoke after a MRO completes transforming a first data to a second data. An MRO may also include a target object disposition logic that facilitates controlling how pre-existing objects and objects created by an MRO should interact.","An MRO can have its operations controlled by parameterized input to the MRO and\/or one or more of its logics. Thus, an MRO can include a parameter interface to facilitate receiving parameters that selectively control the MRO and\/or its logics. Similarly, an MRO can include a programmatic interface for receiving commands and\/or data from entities like an application programming interface (API), a command line interface (CLI), a graphical user interface (GUI), a business process policy, a business process policy object, and so on.","In another example, a computer implemented method for adapting business process policy data is described. The method includes defining a business process policy data format and a set of rules for translating the format to or from other format(s). The method also includes creating a mapping rule object that performs the adaptation between formats by applying the set of rules. Once an MRO has been created it can receive a first data in a first format, adapt the first data to a second data in a second format and then provide the second data to another computer component (e.g., application, business process policy, MRO). Alternatively, and\/or additionally, the method can analyze the first format, the second format, and\/or rules employed to transform the data to determine whether to selectively invoke a business process policy and\/or a mapping rule object. Adapting the first data to the second data can include, but is not limited to, creating new objects, updating existing objects, and\/or deleting existing objects. The existing objects may have been created, for example, by a prior operation of a mapping rule object. Furthermore, adapting the first data to the second data can include adding, deleting, merging, updating, and\/or creating fields, values, records, entries, and so on in an object or a data structure.","Certain illustrative aspects of the methods, systems, and computer readable media are described herein in connection with the following description and the annexed drawings. These aspects are indicative, however, of but a few of the various ways in which the principles of the methods, systems, and media may be employed and thus the examples are intended to include such aspects and equivalents. Other advantages and novel features may become apparent from the following detailed description when considered in conjunction with the drawings.","Example methods, systems, and computer readable media are now described with reference to the drawings, where like reference numerals are used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to facilitate thoroughly understanding the methods and systems. It may be evident, however, that the methods and systems can be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to simplify the description.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1","b":["100","102","104","106","110","112","108","100","100","100","100"]},"The processor  can be a variety of various processors including dual microprocessor and other multi-processor architectures. The memory  can include volatile memory and\/or non-volatile memory. The non-volatile memory can include, but is not limited to, read only memory (ROM), programmable read only memory (PROM), electrically programmable read only memory (EPROM), electrically erasable programmable read only memory (EEPROM), and the like. Volatile memory can include, for example, random access memory (RAM), synchronous RAM (SRAM), dynamic RAM (DRAM), synchronous DRAM (SDRAM), double data rate SDRAM (DDR SDRAM), and direct RAM bus RAM (DRRAM). The disk  can include, but is not limited to, devices like a magnetic disk drive, a floppy disk drive, a tape drive, a Zip drive, a flash memory card, and\/or a memory stick. Furthermore, the disk  can include optical drives like a compact disk ROM (CD-ROM), a CD recordable drive (CD-R drive), a CD rewriteable drive (CD-RW drive) and\/or a digital versatile ROM drive (DVD ROM). The memory  can store processes  and\/or data , for example. The disk  and\/or memory  can store an operating system that controls and allocates resources of the computer .","The bus  can be a single internal bus interconnect architecture and\/or other bus architectures. The bus  can be of a variety of types including, but not limited to, a memory bus or memory controller, a peripheral bus or external bus, and\/or a local bus. The local bus can be of varieties including, but not limited to, an industrial standard architecture (ISA) bus, a microchannel architecture (MSA) bus, an extended ISA (EISA) bus, a peripheral component interconnect (PCI) bus, a universal serial (USB) bus, and a small computer systems interface (SCSI) bus.","The computer  interacts with input\/output devices  via input\/output ports . The input\/output devices  can include, but are not limited to, a keyboard, a microphone, a pointing and selection device, cameras, video cards, displays, and the like. The input\/output ports  can include but are not limited to, serial ports, parallel ports, and USB ports.","The computer  can operate in a network environment and thus is connected to a network  by a network interface . Through the network , the computer  may be logically connected to a remote computer . The network  includes, but is not limited to, local area networks (LAN), wide area networks (WAN), and other networks. The network interface  can connect to local area network technologies including, but not limited to, fiber distributed data interface (FDDI), copper distributed data interface (CDDI), ethernet\/IEEE 802.3, token ring\/IEEE 802.5, wireless\/IEEE 802.11 and the like. Similarly, the network interface  can connect to wide area network technologies including, but not limited to, point to point links, and circuit switching networks like integrated services digital networks (ISDN), packet switching networks, and digital subscriber lines (DSL).","Turning now to , an example system  for transforming business process policy data is illustrated. Transforming data includes actions like adding, deleting, updating, changing, reordering, and resizing names, values, types, fields, record objects and so on. The specifics of transforming one data in one format to another data in another format will, of course, be dictated by the relationships, similarities and differences between the formats.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 2","b":["200","240","200"]},"The data received from the information providers can be located in a business event and processed by a business process policy and\/or a business process policy object. A business process policy object can model and implement intelligence like decision making applied in understanding, analyzing, and\/or responding to business events, for example. One example business event can be a message between an information source and an intended target (e.g., workflow manager, enterprise monitor) that describes a significant business activity. Business events may be modeled, for example, in objects, and can be communicated to business process policy objects via, for example, computer communications and\/or object oriented messaging. Business events can be associated with business logic processing and can be involved, for example, in reporting a state, in noting a status change, in providing data, and so on.","A business process policy object can facilitate automatically performing actions including, but not limited to, responding to an inventory change, predicting sales activity, generating appropriate discounts, and scheduling deliveries. These and similar actions can be triggered by business events and\/or messages, for example. These business events and business process policies receive and process data from a variety of sources (e.g., information providers).","Types of business events for which a business process policy object can implement logic, and thus for which data conversions may be required include, but are not limited to, reference events, change events, threshold events, task completion events, and task failure events. An example reference event, which may be a discrete event, can provide information like a date when a company files a financial disclosure or a notification that a company has filed its financial disclosure. A change event can be employed to relate items of prior intelligence that have not been related to other events. For example, a change event may provide information concerning when a product price page changes, or when a company stock price changes. A threshold event facilitates simple levels of correlation between current knowledge and prior knowledge. For example, a threshold event may provide information concerning when a company's stock price has gone up or down ten percent over the previous price. A task completion event relates to business process intelligence and thus may provide information concerning when an on-going task has completed (e.g., informing a business process policy object that a financial disclosure data download has completed).","Business logic can be selectively performed. Business logic processing can include, but is not limited to, invoking one or more methods of a business process policy object, accessing one or more data items of a business process policy object, and\/or updating one or more of the data items. Since the data may be received from a variety of sources, this application describes using mapping rule objects (MROs) to facilitate converting business process policy data between various formats.","Analyzing business data and\/or business events facilitates determining and\/or resolving problems in a business environment by facilitating actions like predicting problems, planning for problems, budgeting, scheduling, and so on. The business event and\/or the data provided from the information providers can be received via a signal and\/or computer communication for example. Since the various information providers, and the applications that process the data from the information providers may have different data format requirements, general purpose mapping rule objects that provide translation\/transformation services facilitate integrating such applications. Furthermore, the MROs facilitate spanning hardware computing platforms, operating systems, networks, applications, processes, interfaces, and so on.","The system  includes a translation services logic . While a single translation services logic  is illustrated, it is to be appreciated that the translation services logic  can reside in a single computer component and\/or be distributed between two or more communicating, cooperating computer components. The translation services logic  receives data definitions  and data transformation rules  and produces a mapping rule object .","The data definitions  can include information concerning a data type, a data name, a data value, and so on. For example, on a first system, a data type may be known as an integer data type. The name of instances of the integer data type may be limited to 8 characters. Furthermore, the value of instances of this data type may range from 0 to 255. In a second system, the data definition  for a similar range of values may be known as the type \u201cshort integer\u201d, and instances of this data type may have names that can be up to 16 characters in length. Thus, one or more data transformation rules  are provided to the translation services logic  to facilitate converting from the first data type to the second data type. While a simple integer conversion is described above, it is to be appreciated that translations\/transformations for simple data types, complex data types, objects, records, and so on, may be provided to the translation services logic .","The system  facilitates transforming a first data  that is formatted in a first format (e.g., a source format) to a second data  formatted in a second format (e.g., destination format). The mapping rule object  performs the transformation according to the data definition  and the data transformation rules  provided to the translation services logic  and encoded in the mapping rule object . The translation services logic  accepts the data definitions  and the data transformation rules  and produces the mapping rule object  so that the mapping rule object  can be invoked to perform the transformation of the first data  to the second data .",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 3","b":["300","300","310"]},"The mapping rule object  also includes a destination logic  for identifying a destination to which a destination data will be provided. The destination can be, for example, a computer component, a process, a thread, an object, an application, an Advantage Integration Server entity, and\/or an XML file. A computer component may be, for example, a computer-related entity like hardware, firmware, software, or a combination thereof. For example, a computer component can be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program and a computer. A computer component can reside within a process and\/or thread of execution and a computer component can be localized on one computer and\/or distributed between two or more computers.","The mapping rule object  also includes a rule logic . A logic may be, for example, hardware, firmware, software and\/or combinations of each to perform a function(s) or an action(s). Based on a desired application or needs, logic may include but is not limited to a software controlled microprocessor, discrete logic such as an application specific integrated circuit (ASIC), or other programmed logic device. Logic may also be fully embodied as software. The rule logic  transforms the source data to the destination data. The rule logic  can perform the transformation by applying one or more transformation rules to the data and\/or data definitions. The rule logic  for transforming the source data to the destination data can employ mapping rules to map fields, properties and so on between the source data received from the source and the destination data to be provided to the destination. These rules support data translation of data definition components like data type, name, and value.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 3A","FIG. 3"],"b":["302","300","302","340","340","302","340","340"]},"The mapping rule object  illustrated in  also includes a translation rule form logic  that facilitates controlling the form (e.g., object, file, record, discrete value) taken by the mapping rule object  and\/or objects created by the mapping rule object . In one example, the translation rule form logic  facilitates selecting between an XML based object and an XML based file. Being able to determine the form a mapping rule object  and\/or an object produced by a mapping rule object  will take facilitates having mapping rule objects take the form of shareable objects pursuant to the specification of object oriented software architectures.","The mapping rule object  also includes a post-translation execution logic . The post-translation execution logic  facilitates specifying a subsequent entity (e.g., object, process, thread, application) to invoke after the mapping rule object  completes transforming a first data to a second data. In one example, the subsequent entity is one of, a business process policy, a business process policy object, and a mapping rule object. Thus, the mapping rule object , via the post-translation execution logic , facilitates chaining together mapping rule objects  and\/or other processes, which can lead to multi-stage translation\/transformations. For example, imagine a first information provider that provides data in, for example, a French format. A mapping rule object  may be employed to convert the data to, for example, a German format. A subsequent entity (e.g., mapping rule object) may convert the data from the German format to a Polish format. Similarly, another subsequent entity may translate\/transform the data from the Polish format to a Latvian format. Ultimately, another subsequent entity may transform the Latvian format to a Russian format. In this way, post-translation execution logics  facilitate performing multi-stage translations leading to translations that would otherwise be difficult, if possible at all. In one example, the subsequent entity can be invoked by one or more of, an application programming interface, a command line interface, a graphical user interface, a library call, a user context action, and a role context action.","The mapping rule object  also includes a target object disposition logic . The target object disposition logic  concerns how the mapping rule object  will interact with pre-existing objects generated by, for example, previous operations of a mapping rule object, and objects created by the mapping rule object . The target object disposition logic  is discussed in greater detail in connection with .",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 4","b":["400","400","410","410","400","400","420","420","400","430","430","400","440","440","440"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 5","b":["500","500","510","510","500","500","530","510","530","500","500","520","500","520"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 6","b":["600","610","620","630","640","640","650","660","640","640","610","620","660"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 7","b":["700","700","710","710","720","730","730","750","740","730","720","760","710","770","780","740","720","720","720","720","795","790","790","720","795","790","720","795"]},"In view of the exemplary systems shown and described herein, methodologies that are implemented will be better appreciated with reference to the flow diagrams of . While for purposes of simplicity of explanation, the illustrated methodologies are shown and described as a series of blocks, it is to be appreciated that the methodologies are not limited by the order of the blocks, as some blocks can occur in different orders and\/or concurrently with other blocks from that shown and described. Moreover, less than all the illustrated blocks may be required to implement an example methodology. Furthermore, additional and\/or alternative methodologies can employ additional, not illustrated blocks.","In the flow diagrams, rectangular blocks denote \u201cprocessing blocks\u201d that may be implemented, for example, in software. Similarly, the diamond shaped blocks denote \u201cdecision blocks\u201d or \u201cflow control blocks\u201d that may also be implemented, for example, in software. Alternatively, and\/or additionally, the processing and decision blocks can be implemented in functionally equivalent circuits like a digital signal processor (DSP), an application specific integrated circuit (ASIC), and the like.","A flow diagram does not depict syntax for any particular programming language, methodology, or style (e.g., procedural, object-oriented). Rather, a flow diagram illustrates functional information one skilled in the art may employ to program software, design circuits, and so on. It is to be appreciated that in some examples, program elements like temporary variables, routine loops, and so on are not shown.","In one example, methodologies can be implemented as computer executable instructions and\/or operations and the instructions and\/or operations can be stored on computer readable media including, but not limited to, an application specific integrated circuit (ASIC), a compact disc (CD), a digital versatile disk (DVD), a random access memory (RAM), a read only memory (ROM), a programmable read only memory (PROM), an electronically erasable programmable read only memory (EEPROM), a disk, a carrier wave, and a memory stick.","Referring now to , an example method  for adapting business process policy data is illustrated. At , a business process policy data format is defined. For example, names, fields, values, types, and other data defining points can be provided to produce the business process policy data format definition. At , business process policy data format translation rules are defined. By way of illustration, a rule for translating a long field name to a short field name can be provided as can a rule for converting a signed integer to an unsigned integer.","At , a mapping rule object is created. A mapping rule object can, for example, adapt a first business process policy data formatted in a first business process policy data format for use by a second business process policy in a second business process policy data format. The first format may be, for example, a source format and the second format may be, for example, a destination format. For example, the mapping rule object created at  can accept data from an information provider (e.g., news service) and adapt it for use by a supply chain application. Since the news service and the supply chain operation may have different data formats, the mapping rule object facilitates adapting the news service data to a format useable by the supply chain application.","At  a first data formatted in a first business process policy data format is received. For example, an object, a record, a field, a value, and so on may be received as the first data at . The first data may be received from, for example, an information provider like a news service, a remote computer, a supplier computer, and a bot.","At , the first data is adapted to a second data formatted in a second business process policy data format. The adaptation can be controlled by one or more parameters supplied to the mapping rule object created at . Furthermore, the mapping rule object that will perform the adaptation can be invoked via different programmatic paradigms (e.g., API, CLI) and can be invoked on a variety of different platforms including, but not limited to, a JAVA platform, an XML platform, a COM platform and an ODBC platform.","At , the second data is provided to a data destination. The data destination may be, for example, an object, a process, a thread, a business process policy, and\/or a business process policy object.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 9","FIG. 8"],"b":["900","900","850","910","920","910","920","930"]},"At , a determination is made concerning whether to invoke one or more mapping rule objects. A determination can be made, at least in part, on the analysis performed at . If the determination at  is yes, than at  a mapping rule object can be invoked. Once again this facilitates chaining together mapping rule object processing which in turn facilitates flexible, multi-stage translation\/transformations.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 10","FIG. 10","FIG. 8"],"b":["850","852"]},"At , processing that includes selectively deleting pre-existing objects and creating new objects can be performed. At , processing that includes creating new objects and adding them to a set of pre-existing objects is illustrated. At , processing that updates one or more pre-existing objects created by a prior operation of a mapping rule object occurs. This updating can include changing one or more of a field, a value, a name, a record, and so on in a pre-existing object. At , processing that includes selectively deleting portions of a pre-existing object and selectively adding portions to a pre-existing object is illustrated. The portions that can be selectively deleted include, but are not limited to, a field, a value, a record and so on. Similarly, components that can be added include, but are not limited to, a field, a value, and a record.","What has been described above includes several examples. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the systems, methods, and computer readable media associated with business process policy data. However, one of ordinary skill in the art may recognize that further combinations and permutations are possible. Accordingly, this application is intended to embrace such alterations, modifications, and variations that fall within the scope of the appended claims. Furthermore, to the extent that the term \u201cincludes\u201d is employed in the detailed description or the claims, such term is intended to be inclusive in a manner similar to the term \u201ccomprising\u201d as that term is interpreted when employed as a transitional word in a claim."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
