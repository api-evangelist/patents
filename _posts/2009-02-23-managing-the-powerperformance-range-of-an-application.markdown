---
title: Managing the power-performance range of an application
abstract: Semiconductor device circuits and methods are provided for adjusting core processor performance based on usage metrics. Metric detection and adjustment are performed in digital logic hardware guided by registers providing maximum and minimum frequency settings, without intervening input from system software or firmware, thus greatly speeding the processor performance adjustment. Power-performance drivers provide applications or the operating system ability to specify maximum and minimum frequency requirements.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08276015&OS=08276015&RS=08276015
owner: International Business Machines Corporation
number: 08276015
owner_city: Armonk
owner_country: US
publication_date: 20090223
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["This invention relates to improving energy efficiency in microprocessors, and more specifically to systems on board the microprocessor integrated circuit for managing the power-performance range of an application by providing ability to specify a minimum and maximum frequency range.","Processors in computers employ variable power-performance states to match operating states to processor load. Modern processors incorporate dynamic voltage and frequency scaling as integral mechanisms to tailor operating states. These operating state changes are typically managed by the operating system or system firmware using explicit, special instructions to cause processor operating state change. Management of these states by the system software layer is typically designed to take a conservative approach, and therefore limits the benefits that can be extracted using the state change mechanisms.","Further, management systems and methods historically have utilized a single operational point to select performance at a given time instant. This traditional scheme, however, inhibits degrees of freedom that may exist in the underlying system where it may be possible to vary operational points in a much faster manner to track very short time interval behavior that is unseen and unmanageable by the higher levels of the system. System software is typically unaware of the fine-grain variations in workload characteristics that rapidly alter the performance-level required from the hardware.","This invention provides a means to support power-performance trade-offs for any given time interval, within a range set by the higher level controller. Semiconductor device circuits and methods are provided for adjusting core processor performance based on usage metrics. Metric detection and adjustment are performed in digital logic hardware guided by registers providing maximum and minimum frequency settings, without intervening input from system software or firmware, thus greatly speeding the processor performance adjustment. Power-performance drivers provide applications or the operating system ability to specify maximum and minimum frequency requirements.","During low IPC (instructions per cycle) and\/or low activity, a CPU core is rapidly adjusted to a minimum frequency value providing a lower power-performance state. This is done with a hardware-only solution built into the CPU semiconductor device. The adjustment may include dropping frequency, voltage, or other power-performance characteristics. While current solutions require either the operating system or system firmware to identify when lower power-performance states are tolerable and issue the transition command, the preferred embodiments herein have no such requirement. Core usage is monitored and usage-level metrics calculated in hardware. Using the usage-level metrics, guided by the maximum and minimum frequency register values, the core power-performance state is chosen. A fast actuator is present in each system core to rapidly adjust the core power-performance state based on the selection.","One embodiment is an integrated circuit device including a processor core and core monitoring circuitry that indicates certain usage-level metrics of the processor core. Other metric values may be calculated in digital logic based on values provided by the core monitoring circuitry. The metrics are used by performance-state selection digital circuitry, together with register settings provided from the system power management driver, to select a desired performance state from among at least two possible desired performance states. Actuator circuitry adjusts the core power-performance state between at least a first and second level based on the selected state.","In preferred implementations, the integrated circuit device can adjust the core power-performance state within as short an interval as approximately 10 microseconds, after a usage sequence in which the processor core achieves an ongoing usage workload usage level corresponding to an adjustment. Some versions are even faster. In some versions performance-state selection digital circuitry is operable to compare a core usage metric value to a low threshold metric value, and when the usage metric is below the threshold, produce a desired performance state output value associated with a lowered activity power performance state. The range of adjustments is limited by settings in maximum and minimum frequency registers. In some versions the ongoing usage-level metrics of the processor core include a metric indicative of a number of active cycles in a given number of total cycles. Another preferred metric is indicates a number of completed instructions in a given interval. The intervals, and the maximum and minimum frequency registers, can be programmed from firmware. The circuitry can also be used to supplement existing software and firmware power-performance state control solutions.","Another implementation provides a method of improving the power efficiency of a processor, including setting minimum and maximum frequency values in registers associated with a processor core. The values may be provided by a particular application or by the system power-performance driver. After the registers are set, the method monitors a processor core to determine one or more selected ongoing usage-level metrics of the processor core. In response to detecting the change, a desired next core performance state is selected using core performance state selection circuitry. The state selection is bounded by the maximum and minimum frequency values set in their respective registers. Further, the selection preferably occurs in the performance state selection circuitry without receiving any data or control input from system software or firmware between detecting the change and selecting the desired next core performance state. After selecting the desired next core performance state, the method changes the performance state of the processor core using core performance actuator circuitry. This also happens without receiving any data or control input from system software or firmware between selecting the desired next core performance state and changing a performance state of the processor core.","The use of hardware digital logic without software intervention, rather than software or firmware-based solutions, can provide many advantages. The software solutions have only limited opportunities to examine metrics and initiate power-performance changes. Firmware performing the same task is also typically slow to respond. Real workloads can show much more fine-grained variation in frequency demands than the system software\/firmware can react to. The preferred embodiments herein provide an automated hardware method for recognizing and acting upon opportunities for rapid state changes\/scaling to match the fine-grained demands of workloads. This can improve the power-efficiency of the processor without sacrificing any performance, by matching the hardware operating state to the exact demands of the workload.","These and other advantages and features of the invention will be apparent from the following description of the preferred embodiments, considered along with the accompanying drawings.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":["100","101","102"]},"The depicted chiplet  is, in a preferred embodiment, one of many processor core chiplets present on a single semiconductor device. As used herein, a chiplet is a complete subsystem IP core, or a semiconductor circuit instantiation of such a core, that may connect to interfaces both internal to a system-on-chip (SOC) and at its pads. Each chiplet typically contains several IP cores and the logic necessary for them to function together as a complete subsystem within an SOC, or a multi-core processor or other complex integrated circuit. Chiplet ports are typically defined to be industry standard interfaces to avoid the need for additional interface logic. More than one such chiplet may exist on a single semiconductor device. While the depicted embodiment is described as having a chiplet, other embodiments may simply include processor cores, which may be of various types known in the industry to be used in single-core or multi-core processor devices. As such, in some embodiments, the depicted circuitry may be part of a processor core rather than a processor core chiplet.","As shown, process core chiplet  includes a maximum frequency register (Fmax)  and a minimum frequency register (Fmin) . These registers provide software configurable values which control the power management fast-adjust circuitry  by providing a range in which the circuitry may operate to control the processor core . The depicted connections are logical rather than strictly electrical. For example the software is, of course, expected to access the registers through operation of the processor core logic . Typically the registers will be considered as part of the core logic , but this is not limiting in various embodiments are defined by their function and not by their circuit location. As an example some embodiments may place the actual circuitry for the registers  and  outside of the area used by core logic . Registers  and  are not calculation registers employed by the processor core, but instead are control registers which store the value written to them and are operatively coupled to the fast-adjust circuitry  to limit the range in which the fast-adjust circuitry  may vary the processor core operating frequency at any given time.","The fast-adjust circuitry  is provided to automatically control the power-performance of the processor core logic  during operation, and may therefore also be referred to as power-performance control circuitry. Fast-adjust circuitry  is operatively coupled to the processor core, and operable to monitor a first selected ongoing usage-level metric of the processor core such as, for example, power usage, instructions per second, or other metrics such as a proxy value used to approximate power consumption of the processor core. Usage-level metrics will be further discussed below. Fast-adjust circuitry  is preferably physically distributed within the layout of the core logic in order to accurately count and measure events occurring in the core. The fast-adjust circuitry preferably includes monitoring and calculation circuitry which calculates certain metric values based on observed events in the core. The circuitry is preferably embodied as appropriate digital logic to count, add, divide, and scale observed core logic values as needed.","The fast-adjust circuitry  controls power-performance of core logic  through connections to the core clock  and the core point-of-load power supply . The fast-adjust circuitry  perfectly operates automatically without intervention from software to make short-term power-performance adjustments, as further described below. This typically enables greater power-performance efficiency than previous methods. Examples of fast-adjust circuitry are shown in the co-pending U.S. patent application Ser. No. 12\/263,597, entitled METHOD FOR AUTOMATED PROCESSOR POWER MANAGEMENT FOR BETTER ENERGY-EFFICIENCY, by Karthick Rajamani et. al., filed on Nov. 3, 2008. This application is hereby incorporated by reference for all purposes. The core clock  and power supply  are both controllable within defined ranges. The fast-adjust circuitry  is also connected to core logic  and may set or control other power-performance features through that connection.","While fast-adjust monitor circuitry  is shown operatively coupled to core logic , the circuitry  is preferably physically distributed within the layout of the core logic in order to accurately count and measure events occurring in the core. Other embodiments may provide a separate region for circuitry  and the semiconductor layout. Fast-adjust circuitry  is operably coupled to the core clock and the core logic in such manner as to effect fast changes in power-performance operating state. Fast-adjust circuitry  may also be coupled to the core point-of-load power supply in order to make adjustments thereto, along with core clock changes. The depicted circuitry presents a hardware decision loop that operates, in preferred embodiments, without intervention from software or firmware in the digital logic decisions in operation of fast-adjust circuit , except to make configuration settings such as to set the values in the depicted registers  and . While this depicted embodiment shows the operating system configuring performance of fast-adjust circuit  by setting values and registers  and , many other configuration values may also be used in combination. For example, the above-incorporated co-pending patent application includes a scheme to configure multiple power-performance states to control operation of an automatic fast-adjust circuit coupled to the processor. The techniques disclosed therein may be used in any functional sub-combination along with the use of minimum and maximum frequency registers  and .","Previous techniques and software interfaces typically afforded a single selection for the power-performance state for a given time interval. However, the Applicants' analysis of the underlying behavior of a system during that time interval show complex behavior in power-performance characteristics. With a single selection specified for the entire time interval, typical prior art systems provide no opportunity to modify the power-performance state to better exploit this complex behavior. This is because power-performance trade-off algorithms running in firmware cannot be easily run on significantly shorter time scales. When such firmware is attempted, processing overhead can become an overly burdensome processor task. Another such task is the ability to communicate new power-performance states from a remote control point. Further, in such software systems, application requests to change power-performance states must pass through driver interfaces, further increasing the overhead of changes.","In preferred versions of the invention, a range of power-performance states is specified, instead of employing a single fixed power-performance state provided at an application API, a driver API, or a physical register interface. The range can then be exploited by the underlying software or hardware entity by observing and actuating on a finer time scale basis than something running above that software or hardware layer in the system complex behavior in power-performance characteristics. With previous systems that provide a single selection specified for the entire time interval, there is no opportunity to modify the power-performance state to better exploit this complex behavior.","The range in the present system is preferably specified by loading two values: an Fmin value, which provides the minimum allowed frequency that low-activity detect and other processor-level hardware feedback control systems can drop to, or the minimum allowed frequency used by a lower level software entity; and an Fmax value, which provides the maximum allowed frequency that processor-level hardware control systems can increase to or that a lower level software entity can raise the frequency to. One example of underlying hardware governed by such Fmax\/Fmin settings is low activity detection hardware. Such hardware enables performance-power state to jump between Fmax and Fmin based on hardware activity levels measured on time scales that can be at least 10\u00d7 shorter in duration than times achieved when power management software alters the range of Fmax\/Fmin. Another example is a power proxy control loop control system in hardware that monitors power proxies (metrics indicative of power usage) and compares to power caps to see if frequency should be increased\/decreased within the Fmax\/Fmin constraints. In the preferred embodiment, there is a unique Fmax\/Fmin set of registers for each individual chiplet on a processor chip.","The present system also provides extended software capabilities to accompany the hardware solutions provided. Some embodiments include a software API interface in which the applications calling the API must provide Fmax\/Fmin parameters for the underlying drivers supporting that API. Underlying drivers then have the freedom to choose any frequency between Fmax\/Fmin until another call is made to the API to change the range. Examples implementations of system software  may include range control Advanced Configuration and Power Interface (ACPI) drivers or Linux CPUFreq interfaces, which are augmented to support not just a single frequency selection at the software interface, but a range of frequencies. Lower level drivers would receive the range information and manage the frequency within that allowed range. Higher level middle-ware may be provided to communicate a frequency range to an application layer, allowing the application to make performance\/power state changes anywhere in the range given by the middle-ware. Some versions of this invention can be embodied in hardware by providing a set of registers that describe Fmax\/Fmin for a given processor chip or a individual chiplet among N chiplets inside a chip assuming said chiplet can have independent frequency control from other chiplets on the same processor chip.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2A","b":["103","104","201","203","202","205","203","206"]},"Complexity of exit logic for low performance state that will eventually be reached by block  is highly dependent on the relationships between the core usage power proxy metric used, the threshold values, the core usage computation interval, and actuation latency of the core DPLL (digital phase-locked loop). A desire for simpler logic can dictate narrower usage scenarios or different choices of core usage metrics and tuning of the threshold value and core usage computation interval. In one example embodiment, the exit logic is a simple core-usage-reset-on-use scheme which targets primarily idle interval power reduction with IPC (instructions per cycle) as the core usage metric, using the low threshold LT<0.01 with approximately 10 micro-second computation interval using DPLLs that have an order of magnitude lower actuation latency.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2B"},"As shown in , this process monitors core usage at block . Output from this step is a usage metric that is a measure of processor power or some proxy measure of processor power. Examples of such core usage metrics may include simple rate measures such as \u2018number of active cycles in a given interval\u2019 or \u2018number of completed instructions in a given interval of X cycles\u2019. The depicted power proxy metric may involve metric values that are calculated from simpler metrics that are counted in core processor monitoring digital logic. The calculation, however, takes place in circuitry and is preferably not performed by the processor core or by any software process. The information passed from block  to block  may further include other metrics, such as temperature and power consumption, that are converted from measured analog values.","The process block  monitors core usage to determine ongoing values for the core usage metric(s), and to detect a change in this metric. Such a metric is produced by core fast-adjust circuitry such as circuitry  described (), and indicates a change in the core usage. As used herein, indicating a change in the core usage means that the metric indicates a change based on measuring, detecting, or monitoring core activity. The preferred version of such a metric is a power proxy metric. The change may result in a corresponding change of the power and performance state. In response to detecting the change at block , a desired next core performance state is selected using core performance state selection circuitry in the following process blocks. This selection preferably occurs in the performance state selection circuitry without receiving any data or control input from system software or firmware between detecting the change and selecting the desired next core performance state. That is, the registers are operatively coupled to the fast-adjust circuitry  such that during operation they continuously control the power-performance state set by circuitry  (in this embodiment by controlling operating frequency), independently of any instructions executed by the processor. After selecting the desired next core performance state, the method changes the power-performance state of the processor core using core performance actuator circuitry. This state change also happens without receiving any data or control input from system software or firmware between selecting the desired next core performance state and changing a performance state of the processor core.","To make the selection, the process at block  determines whether the power proxy metric is greater or less than a determined threshold, which is input at block . As explained, it is possible, but not employed in any preferred embodiments, that a metric proxy may have an inverse relationship to power, in which case the threshold relationship is inverted as well. If the power proxy metric is greater than the threshold, the process moves block , where it determines if the Fmin frequency (which is set in the Fmin register) is already set as the operating frequency in the core. If not, the process goes to block , which reduces the core operating frequency setting of the core's on-chip actuator, thereby reducing power consumption. After this, the process goes to block  where it waits for a programmable time delay. If the Fmin frequency was already reached at block , the process goes directly to the delay at block .","Back at block , if the power proxy metric is not greater than the threshold, the process goes to block , where it determines if the Fmax frequency (which is set in the Fmax register) has already been reached. If so, the process exits to the delay at block . If not, the process is allowed to further increase the core operating frequency and does so at block . Some embodiments increase the operating frequency in gradual steps by increasing the setting of the on chip actuator. Other embodiments may increase to Fmax in one step at block .","Preferably, the metrics and the compared-to thresholds are chosen such that they are appropriate at all power-performance states. By using digital circuitry rather than software and firmware, the system provides rapid response capability to changes in workload characteristics at the 10's of microseconds timescale (as opposed to at best 10's of millisecond timescale in current solutions). Further, the system complements the actuation control logic used in software or firmware.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 3"},"The depicted system  includes an operating system  having installed therein a system power performance control driver and a hardware power-performance control driver. The system power-control driver typically includes performance control software that provides power and performance control over longer intervals of time than that done with the fast-change circuits herein. The hardware power-performance driver provides capability to program the fast adjust hardware included in the depicted processor cores with selected Fmax and Fmin values. In some scenarios, individual cores  have their Fmax and Fmin registers loaded with similar values such as when they are executing instruction threads from the same application, similar applications, or from the operating system, for example. Other scenarios include some cores  having Fmax, Fmin, or both values differing from those in other cores. A first such scenario is, of course, when different cores are executing different applications or threads having differing Fmax and Fmin requirements. In some instances, a particular application, or the operating system, may of course spawn a thread operating with a different priority than other threads, and may require differing Fmax and Fmin values for that thread. Of course, threads with the same priority may also have differing Fmax and Fmin values because of their workload, for example.","Depicted in  are multiple processor cores , each including both a hardware core and fast-adjust circuitry operatively coupled to the core. One preferred embodiment is an eight-core processor designed for high-performance servers. These processors may be provided in a package with two integrated circuit devices mounted to an interposer, each device having eight processor cores. The scope of the invention in various embodiments may, of course, include the entire host system including software and hardware.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 4","FIG. 3"],"b":["401","402","403"]},"After programming at block , the fast-adjust circuit is operational and runs automatically and independently from intervention with the configuration driver. That is, the fast-adjust circuitry now responds to the metric indicating core activity and controls the core frequency based on registers, independently of the processor core executing its instruction stream. At this point, the short term driver's role () is to update the configuration settings of the fast-adjust hardware when needed. In the preferred embodiment that means setting Fmax and Fmin values when needed. This is done by detecting changes from software solution driver (\u201clong-term\u201d in ), which may change a desired long-term power-performance setting for the system processor. This is not shown between step , but will occur before each iteration of step . The detection at block  may also include, of course, accepting user or application input to change the power-performance state. As explained previously, the software solution driver may be integrated with the hardware configuration driver in some embodiments.","In response to detecting a change in the long-term system power-performance settings, the power-performance configuration driver will select alternate register values, if required, at block . Next, at block , the power-performance configuration driver will reprogram the fast-adjust hardware control registers Fmax and Fmin with the selected data set. In some scenarios, the selection of Fmax and Fmin register values does not follow directly from software applications, such as when software is not functional to select such values, or when other system power concerns override or qualify requested values provided from an application. For example, suppose in block  that the system is a notebook PC that was booted with the AC power plugged in, and was therefore, in this example, initiated in to a high performance state from the system software solution driver. The fast-adjust hardware configuration driver would program appropriate selected Fmax and Fmin values into the fast adjust control registers. Now suppose in this scenario the PC were unplugged and the system power-performance software solution driver changed its power-performance setting to a lower power battery extended mode. The process at block  would detect a change, and select appropriate power-performance state values for Fmax and Fmin, and program the respective registers accordingly. Once set, these registers control automatic operation of the fast-adjust hardware. So while the system software solution is able to make long-term adjustments, the hardware circuitry solution provided herein, being embedded in the semiconductor device with processor core, is able to complement system software solution by making short-term adjustments, thus improving energy efficiency.","As another in-use operating scenario, the depicted process may detect at block  that a different software application is now executing in the relevant processor core, in which case the software solution driver may provide or set Fmax and Fmin values required by the processor. It should be noted regarding steps  and  that many embodiments may allow applications to provide a relative set of values for Fmax and Fmin at step , and then the process will translate those relative values into actual register values at step , typically through mapping onto a range of values the core is capable of achieving. Such a translation scheme allows much greater compatibility across different generations of software and hardware platforms. The relative values may be expressed as a percentage of maximum and minimum operating frequencies, or as a series of relative graduated steps. This further allows an application or the operating system to provide a single relative value which may be mapped by the power-performance hardware configuration driver to different values at different times, depending on other power-performance settings in the system. Another option is to provide a mapping of single power-performance selections, which are made available to software applications and operating systems in legacy systems, to match to selected sets of minimum and maximum frequency values as disclosed herein. This helps provide backward compatibility and more universal compatibility with power-performance schemes used by various software developers. The single power-performance setting may be, for example, a single frequency value or relative power-performance state such high, medium, or low. This is mapped by the power-performance configuration driver to a set of values including max frequency, min frequency, and possibly other values such as a frequency step-size and a processor core voltage max and min values. These values are then programmed into the hardware control registers as disclosed herein when the respective application is executing on the processor core(s).","As used herein, the terms \u201ccomprising,\u201d \u201cincluding,\u201d \u201ccarrying,\u201d \u201chaving,\u201d \u201ccontaining,\u201d \u201cinvolving,\u201d and the like are to be understood to be open-ended, that is, to mean including but not limited to.","Any use of ordinal terms such as \u201cfirst,\u201d \u201csecond,\u201d \u201cthird,\u201d etc., to refer to an element does not by itself connote any priority, precedence, or order of one element over another, or the temporal order in which acts of a method are performed. Rather, unless specifically stated otherwise, such ordinal terms are used merely as labels to distinguish one element having a certain name from another element having a same name (but for use of the ordinal term).","The above described preferred embodiments are intended to illustrate the principles of the invention, but not to limit the scope of the invention. Various other embodiments and modifications to these preferred embodiments may be made by those skilled in the art without departing from the scope of the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
