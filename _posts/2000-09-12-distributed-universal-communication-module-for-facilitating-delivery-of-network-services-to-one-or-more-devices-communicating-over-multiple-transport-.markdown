---
title: Distributed universal communication module for facilitating delivery of network services to one or more devices communicating over multiple transport facilities
abstract: A system for providing remote electronic services includes an agent, a communication module, and an access file. The agent receives request for-service-calls in any format selected from a voice format, an internet format, an e-mail format, and a wireless format, and transmits a request-for-service call to the access file in accordance with a hypertext transfer protocol for each of the received request-for-service calls. The access file invokes at least one service module in response to a given request-for-service call received from the agent. The at least one service module performs a prescribed function to produce a service deliverable requested in the given request-for-service call, accesses an instance of the communication module, and passes the one or more control parameters and the service deliverable to the communication module. The communication module transmits the service deliverable received from the at least one service module to the destination network node specified in the given request-for-service call in any format selected from a voice format, an internet format, an e-mail format, and a wireless format.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06938087&OS=06938087&RS=06938087
owner: Hewlett-Packard Development Company, L.P.
number: 06938087
owner_city: Houston
owner_country: US
publication_date: 20000912
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Transport Protocols"],"p":["This invention relates to a universal or generic communication module for facilitating delivery of network services to one or more devices communicating over multiple transport facilities.","Various communication networks exist for enabling distributed devices to communicate and pass information between one another. Networks usually are classified based upon three properties: topology, protocol, and architecture. The topology of a network specifies the geometric arrangement of the network. Common topologies are a bus, ring, and star. The protocol specifies a common set of rules and signals the device on the network use to communicate. The architecture of a network refers to the network design. There are two major types of network architecture: peer-to-peer and client-server. In a peer-to-peer networking configuration, there is no central server, and devices simply connect with each other in a workgroup to share files, printers, and Internet access. In a client-server architecture, there usually is a central server, with which all of the devices register. The central server usually provides a variety of services, including centrally routed Internet access, e-mail, file sharing, and printer access, as well as ensuring security across the network. A network architecture also may be characterized as being open (i.e., the specifications are available to the public) or closed (i.e., the specifications are proprietary).","Unfortunately, different network platforms and transport facilities have developed independently of one another, each with its own idiosyncratic computing platform (hardware and software) and communications protocol. As a result, it has become increasingly difficult to implement communications programs that enable different types of devices to communicate over different networks.","Middleware products have been developed to address the need for interfaces between different computing platforms. Middleware is positioned between different components and resources of a computer network that communicate with each other. Middleware typically includes software products designed to provide various infrastructure and interfacing services between the different components and resources. Most middleware products support a tightly coupled distributed system model that requires all parts of a distributed system to be developed using a pre-defined application program interface (API). As result, any changes to any module require modifications to other modules, and changes to the API may require extensive changes to all modules. Many middleware product models have been developed (e.g., CORBA (Common Object Request Broker Architecture) from OMG, RMI (Remote Method Invocation) from Sun Microsystems, Inc. and DCOM (Distributed Component Object Model) from Microsoft Corporation). Typically, each such model is incompatible with other models, and applications developed under any such model will be unable to communicate with any application developed under a different model. Systems based upon such models typically include modules that rely upon middleware to provide a variety of services (e.g., connectivity, message routing, and data encryption). Applications developed under such a system are integrated tightly with the middleware and, therefore, are not readily integrated with the services of other systems.","The invention provides a scheme by which a computer may communicate with a variety of different systems (e.g., e-mail, voice mail, cellular telephone, pager, facsimile device, computer, motor, and home appliance) notwithstanding the communications protocol employed by different systems. In particular, the invention features a universal communication module that establishes an open, transport-independent communications protocol that may be created and invoked to facilitate communications between any two devices interconnected over a global communication network that includes wireline (e.g., dial-up, dedicated line and local and wide area networks) and wireless (e.g., radio frequency and cellular) networks.","In one aspect, the invention features a system for providing remote electronic services to a network node, comprising an origination agent, a communication module, and a service module. The origination agent resides at the origination network node. The origination agent is configured to transmit a request-for-service call incorporating one or more control parameters, including a destination node address. The communication module encapsulates processes for communicating with the destination network node over multiple transport facilities. The service module resides on a server computer remote from the origination network node. The service module is configured to perform a prescribed function to produce a service deliverable in accordance with the request-for-service call and to access an instance of the communication module and pass the one or more control parameters and the service deliverable to the communication module for delivery to the destination network node.","Embodiments of the invention may include one or more of the following features.","The origination agent preferably is configured to transmit the request-for-service call in accordance with a hypertext transfer protocol (http). The origination agent may be configured to transmit one or more of the following control parameters with the request-for-service call: an origination address, a security profile identifier, a service identifier, an output type identifier, a destination device address, and data. A destination agent preferably resides at the destination network node. The destination agent preferably is configured to communicate with the communication module.","An access file preferably resides on the remote computer. The access file is configured to invoke the service module in response to the request-for-service call. The access file may be an active server page. The access file preferably is configured to obtain one or more control parameters from the request-for-service call and to pass the control parameters to the service module. The service module may be configured to pass the control parameters to the communication module as a function call to a COM (Collaboration Object Model) interface.","The communication module preferably is configured to communicate with the destination network node over any one of the following transport facilities: a voice network, the Internet, an electronic mail (e-mail) network, and a wireless network. The communication module preferably is configured to establish a communication link with the destination network node based upon the destination node address. The communication module preferably is configured to format the service deliverable produced by the service module in accordance with an identified node type classification for the destination network node. The communication module may be configured to identify a node type classification for the destination network node based upon a communication received from the destination network node. The communication module preferably is configured to transmit the formatted service deliverable to the destination network node. The communication module may be configured to transmit to the origination network node a request for one or more control parameters.","A second service module preferably resides on a second server computer remote from the origination network node. The second service module is configured to access a second instance of the communication module. The first and second service modules may be configured to cooperatively perform respective functions to produce the service deliverable and to communicate through the respective instances of the communication module. The instances of the communication module preferably are configured to communicate with each other in accordance with a hypertext transfer protocol (http). The first and second service modules may be registered in a common configuration database.","The service module may be configured to produce an available services list to be presented by the communication object to the origination network node. The communication module preferably is configured to format the available services list in accordance with a received device type classification for the origination network node.","Among the advantages of the invention are the following.","The invention enables messages (e.g., voice and e-mail), data elements and other information to be pushed or pulled from any electronic system that is connected to a network\u2014no matter where it is located\u2014to any other electronic system that is connected to a network. The sending signal and the receiving signal may exist on either side of the inventive universal communication object so that information may be pushed to or sent from a source application. The invention also allows a single shared application to render output appropriate for multiple device types.","Other features and advantages of the invention will become apparent from the following description, including the drawings and the claims.","Referring to , in one embodiment, one or more remote service modules , ,  may perform respective functions cooperatively to provide one or more electronic services to an origination network node  that is connected to service modules \u2013 by a global communication network . Each service module \u2013 accesses a respective instance of a universal or generic communication module , which encapsulates one or more processes for communicating with a variety of different devices over multiple transport facilities. Universal communication module  is accessible simultaneously at multiple nodes of a distributed computing environment to manage the communication requirements of each service module \u2013. In particular, universal communication module  manages service communication in a way that shields service module developers from the idiosyncrasies of different networks, protocols, devices, standards, routing, recovery and other transport difficulties or differences. As a result, a device operating at origination network node  may request a remote electronic service, and service components \u2013 may cooperate to produce a service deliverable that may be transmitted back to the origination node  or transmitted to another destination node  in an appropriate format.","As shown in , global communication network  may include a number of different computing platforms and transport facilities, including a voice network , a wireless network  and a computer network . The remote electronic services mentioned above may be provided through a server computer  of computer network . Request-for-service calls may be made and requested service deliverables (electronic contents) may be presented in a number of different media formats, including a generic format (e.g., text) or a specific format, such as voice, Internet, e-mail and wireless formats. For example, voice contents may be presented as Voice extensible Markup Language (VoxML) documents; Internet contents may be presented as Hypertext Markup Language (HTML) documents; e-mail contents may be presented as Microsoft Exchange or open-mail documents; and wireless contents may be presented as Wireless Markup Language (WML) documents. As explained in detail below, the universal communication module enables messages and service deliverables to be transmitted between service components and other network nodes in accordance with a generic communications protocol (e.g., the Hypertext Transfer Protocol (HTTP)).","Devices connected to global communication network  may access a wide variety of electronic services through server computer . For example, in one illustrative implementation, a wireless device  (e.g., a wireless personal digital assistant (PDA)) may connect to server computer  over wireless network . Communications from wireless device  are in accordance with the Wireless Application Protocol (WAP). A wireless gateway  converts the WAP communications into HTTP messages that may be processed by server computer . In another illustrative implementation, a voice device  (e.g., a conventional telephone or a PBX telephone) may connect to server computer  over voice network . Communications from voice device  may be in the form of conventional analog or digital voice signals, or they may be formatted as VoxML messages. A voice gateway  may use speech-to-text technology to convert the voice signals into HTTP messages; VoxML messages may be converted to HTTP messages based upon an extensible style language (XSL) style specification. Voice gateway  also is configured to receive from server  real time voice messages that may be passed directly to voice device , or formatted messages (e.g., VoxML, XML, WML, e-mail) that must be converted to a real time voice format (e.g., using text-to-speech technology) before the messages may be passed to voice device . In a third illustrative implementation, an e-mail (e.g., an electronic mail messaging system) or Internet-based device  (e.g., a web browser) may connect to server computer  directly over computer network . Communications between device  and server computer  may be in accordance with a standard e-mail protocol (e.g., MAPI, X.400 or HTTP).","When a device initially contacts server computer , server computer  may present to the device an appropriately formatted message containing a list of available electronic services, such as voice services, Internet services, e-mail services and wireless services. The device may transmit a request-for-service call and server computer  may process the call to identify the requested service and the network address where the resulting service deliverable should be transmitted. If additional information is needed to deliver the service, server computer  may transmit a message prompting the user of the device to provide the needed information. In response to the request-for-service call, server computer  initiates one or more service modules \u2013 to produce the requested service deliverable. Through respective instances of universal communication module , one or more service modules \u2013 cooperatively perform respective tasks to produce the requested service deliverable. Universal communication module  also enables service modules \u2013 to access legacy applications ,  and databases , as well as control hardware devices  (a facsimile machine for faxing documents, or a telephone switch for call redirection) that are connected to global network . A source service module passes the service deliverable and one or more control parameters obtained from the request-for-service call to an instance of universal communication module . Based upon the control parameters, universal communication module  communicates with the device operating at destination network node  to determine its type classification. Universal communication module  formats the service deliverable in accordance with the type classification of the destination device, and transmits the formatted service deliverable to the destination device. After delivery of the service deliverable, universal communication module  may call back to the source service, establish a link with another service or end processing.","As used herein, the term \u201cservice deliverable\u201d refers broadly to the results of push services processing, pull services processing, or transaction services processing. Push services send service deliverables to a destination node without receiving a request from the destination node. Pull services send service deliverables to the origination node upon request. Transaction services enable the origination node to control one or more computer processes or applications (e.g., enable an origination device to write data to a database).","Referring to , in one embodiment, server computer  includes a processing unit , a system memory , and a system bus  that couples processing unit  to the various components of server computer . Processing unit  may include one or more processors, each of which may be in the form of any one of various commercially available processors. System memory  includes a read only memory (ROM)  that stores a basic input\/output system (BIOS) containing start-up routines for server computer , and a random access memory (RAM) . System bus  may be a memory bus, a peripheral bus or a local bus, and may be compatible with any of a variety of bus protocols, including PCI, VESA, Microchannel, ISA, and EISA. Server computer  also includes a hard drive , a floppy drive , and CD ROM drive  that are connected to system bus  by respective interfaces , , . Hard drive , floppy drive , and CD ROM drive  contain respective computer-readable media disks , ,  that provide non-volatile or persistent storage for data, data structures and computer-executable instructions. Other computer-readable storage devices (e.g., magnetic tape drives, flash memory devices, and digital video disks) also may be used with server computer . A user may interact (e.g., enter commands or data) with server computer  using a keyboard  and a mouse . Other input devices (e.g., a microphone, joystick, or touch pad) also may be provided. Information may be displayed to the user on a monitor . Server computer  also may include peripheral output devices, such as speakers and a printer. Server computer  may be connected to remote computers , , which may be workstations, server computers, routers, peer devices or other common network nodes. Remote computer  may be connected to server computer  over a local area network (LAN) , and remote computer  may be networked over a wide area network (WAN)  (e.g., the Internet).","Referring to , a number of program modules may be stored on storage drives \u2013 and in RAM , including an operating system  (e.g., the Windows NT Server operating system available from Microsoft Corporation of Redmond, Wash. U.S.A.), one or more application programs, and program data. Operating system  includes an executive  that provides the base operating system services (e.g., memory management, process and thread management, security, input\/output, and inter-process communication) for creating a run-time execution environment on server computer . A configuration database (or registry)  contains the following information: parameters needed to boot and configure the system; system-wide software settings that control the operation of operating system ; a security database; and per-user profile settings. A native operating system (OS) application programming interface (API)  exposes the base operating system services of executive  to user applications and to one or more service modules (or simply \u201cservices\u201d) , , . As used herein, the term \u201cservice\u201d (or \u201cservice module\u201d) refers to a component of an operating system that provides a set of one or more functions. Service modules \u2013 are user-mode processes that may be configured to start automatically at system boot time without requiring an interactive logon; they also may be controlled dynamically during run-time. Service modules \u2013 call certain base operating system services (or functions) to interact with a service controller ; such functions may include registering a successful startup, responding to status requests, and pausing or shutting down the service. Service controller  starts, manages and directs operations within service modules \u2013. Service modules \u2013, on the other hand, create the environment in which one or more processes may operate and control the start-up, maintenance and termination of such processes. Typically, the run-time execution environment is installed on server computer , and one or more client application programs ,  operating on remote computers ,  may access the functionality provided by service modules \u2013 over their respective network connections. In an alternative embodiment, the run-time execution environment may be installed on a single computer that hosts both service modules \u2013 and client programs , .","Before a service module \u2013 may operate in the run-time execution environment, it must be installed on server computer . A service module typically is installed by storing the service module in a data storage area that is accessible by server computer  (e.g., on disk  of in hard drive ), and registering the attributes of the service module in configuration database . The universal communication module also is registered in configuration database . The remote service modules may be configured as a dynamic link library (DLL). A DLL is a computer code module that contains functions that may be linked with application code. A DLL may be loaded and linked to an application at run time, and may be unloaded when its functionality is no longer needed.","Referring to , A and B, in one embodiment, a service may be implemented as a server object  that is formed from service module  and an instance of universal communication module . An access file  (e.g., an active server page implemented in any of the script languages supported by the Microsoft server page facility), which may be stored on any one of storage drives \u2013, handles request-for-services calls and initiates the requested service. Access file  includes a script (e.g., a Visual Basic\u00ae script or a CDO (Collaboration Data Object) script) that initiates service module , and service module  accesses (or embeds) an instance of universal communication module  that is initialized in accordance with one or more control parameters obtained from a received request-for-service call. As explained in detail below, communication module  manages communications for service module . In particular, communication module  manages communications with both an origination device  operating at origination node  and a destination device  operating at destination node . Access to and service deliverables provided by service module  may be presented by universal communication module  in multiple media formats, including voice, Internet, e-mail and wireless formats.","As shown in , in operation, an origination device  operating at origination node  includes an origination agent  that is configured to transmit a request-for-service call that includes a URL (uniform resource locator) with the IP address for an access file  corresponding to the requested service. The request-for-service call is presented originally in HTTP format or it is converted to HTTP format. The HTTP request-for-service call has the following format: an initial line, zero or more header lines, a blank line, and an optional message body. The initial line may specify a request or a response. A request line has three parts, separated by spaces: a method name, the local path of the requested resource, and the version of HTTP being used. The initial response line (i.e., the status line) also has three parts separated by spaces: the HTTP version, a response status code that specifies the result of the request, and a description of the status code. Header lines provide information about the request or response, or about the object sent in the message body. The message body may contain binary data, file contents and query data (collectively referred to herein as \u201cdata\u201d).","In one embodiment, the HTTP request-for-service call may contain one or more of the following control parameters: an origination address, a security profile identifier, a service identifier, an outputtype identifier, a destination address, and data. In this embodiment, a typical HTTP request-for-service would have the following format:\n\n","Upon receipt of the request-for-service call, service controller , which monitors incoming service requests, instantiates in RAM  an access file  corresponding to the requested resource identified by a URL in the initial line of the request-for-service call. Service controller  causes server computer  to execute the script contained within access file . Execution of the script extracts the control parameters from the request-for-service call and initiates service module . The control parameters are passed to the service modules in text format. Service module  executes its service logic to produce a service deliverable, and passes the service deliverable and the control parameters obtained from the request-for-service call to an instance of universal communication module  as a functional call to a COM (Component Object Model) interface.","Service modules may function alone or in combination in accordance with a number of different services models to provide a wide range of electronic services over multiple transport facilities. In a master-slave services model, a master service may access an instance of universal communication module  to launch one or more slave services and send each slave a task to accomplish. The master service may wait until the slave services complete their processing tasks. In a fault tolerant services model, an original service may replicate its tasks to other services through universal communication module  to maintain one or more redundant services that synchronize with the original service until the original service fails. In a load balancing services model, an original service may distribute its tasks through universal communication module  throughout the network. The original service may monitor and process the results produced by the other services. In a cooperative processing model, one or more services may communicate through respective instances of universal communication module  and collaborate to =produce a particular service deliverable.","A service module may be written in any programming language and may be configured to provide any service so long as it communicates with universal communication object  in accordance with a prescribed application program interface (API). In particular, each service module must pass certain parameters obtained from the request-for-service call and the service deliverable in an HTML format or a text format. In addition, a service module should filter or otherwise modify the content of the resulting service deliverable to support delivery to the specified destination device. For example, if the destination device is a wireless device, such as a WAP-enabled cellular telephone or a PDA that has limited viewing resources or limited bandwidth, or both, the service deliverable should be filtered to reduce the amount of information transmitted to the destination device. For example, images or other contents that cannot be adequately viewed or received by destination device  might be removed before the service deliverable is transmitted to destination device .","Based upon the control parameters, the universal communication module may communicate with an agent  operating within destination device  to determine the type classification of destination device . Alternatively, origination device  may specify the destination device format in the request-for-service call. Universal communication module  formats the service deliverable in accordance with the type classification of destination device , and transmits the formatted service deliverable to destination device . Universal communication module  may format the service deliverable into a generic format (e.g., text) or a particular (e.g., style sheet or template) document format. Universal communication module  may format the service deliverable into an appropriate media format based upon an extensible style language (XSL) style specification, which specifies a way in which style may be separated from content in extensible markup language (XML) documents. For example, universal communication module  may pass the service deliverable received from service module  to destination device  in any of the following markup language formats: VoxML for voice-based destination devices; HTML for Internet-based destination devices; and WML for wireless-based destination devices. Universal communication module also is configured to convert the service deliverable into any of the following additional formats: a voice-mail file or phone tree signals activating a text-to-voice or a voice-to-text service for voice-based destination devices; and e-mail, open-mail, SMS (systems management server), SMTP (simple mail transfer protocol) or Microsoft Exchange for e-mail-based destination devices.","After delivery of the service deliverable, universal communication module  may call back to the source service module , establish a link with another server object  or end processing.","Universal communication module  enables a wide variety of services to be provided to one or more devices communicating over a number of different transport facilities, including voice, Internet, e-mail and wireless transport facilities. The following sections described exemplary protocols for implementing services over voice and e-mail transport facilities.","Voice Application Protocols","Referring to , a legacy voice device  (e.g., a conventional analog or digital telephone) and an advanced voice device  (e.g., a VoxML-enabled telephone with text-to-speech and speech-to-text functionality) may access one or more services provided by services server  over a network connection to a VoxML gateway .","For example, legacy voice device  may access the services of services server  as follows. After connection of legacy voice device  to VoxML gateway , VoxML gateway  transmits a VoxML request form to a voice gateway . The VoxML request form may present one or more service options for selection by legacy voice device . The VoxML request form is sent to voice gateway  using the HTTP transfer protocol. Voice gateway  translates the VoxML request form into analog or digital voice signals using text-to-speech technology. The translated VoxML request form may be presented to legacy voice device  as a voice-based option tree. Legacy voice device  may respond to the translated VoxML request form with voice signals or keystroke signals, or both. Voice gateway  translates the signals received from legacy voice device  into a VoxML message using speech-to-text technology and an XSL style specification. The VoxML message is sent to VoxML gateway  using the HTTP transfer protocol. The receipt of the HTTP message triggers an access file (e.g., an active server page) on VoxML gateway . The access file executes a script (e.g., a JAVA script or a Visual Basic\u00ae script) that handles the completed VoxML request form and creates a server object that transmits an HTTP request-for-service call to services server , which processes the request-for-service call as described above.","Advanced voice device  may access the services of services server  in a similar way, except advanced voice device  may bypass voice gateway  and communicate directly with VoxML gateway  because the functionality provided by voice gateway  is incorporated into advanced voice device .","In another embodiment, the functionality of voice gateway  and VoxML gateway  may be incorporated into a single voice gateway server computer.","E-Mail Application Protocols","Referring to , a variety of different devices, including a computer , a wireless device  and a legacy voice device , may access one or more services provided by services server  over a network connection through a mail gateway . Mail gateway  may be implemented, for example, as a Microsoft Exchange server or an OpenMail server.","Legacy voice device  may connect to mail gateway  through a voice gateway . Voice gateway  provides basic speech-to-text and text-to-speech functions for enabling communications between legacy voice device  and mail gateway . Voice gateway  communicates with mail gateway  using a standard e-mail communication protocol (e.g., MAPI, X.400 or HTTP). Voice gateway  may present a request form containing one or more e-mail service options to legacy voice device  as a voice-based option tree. Voice gateway  translates the signals received from legacy voice device  into an e-mail message, and transmits the e-mail message to mail gateway . In one embodiment, the receipt of the e-mail message triggers a CDO script that invokes a COM object, which handles the completed VoxML request form and creates a server object that transmits an HTTP request-for-service call to services server , which processes the request-for-service call as described above. In another embodiment, mail gateway  may be configured to monitor one or more specified mailboxes, and to respond to messages delivered to the specified mailboxes.","Wireless device  may connect to mail gateway  through a WAP gateway . WAP gateway  enables communications between wireless device  and mail gateway . WAP gateway  communicates with mail gateway  using a standard e-mail communication protocol (e.g., MAPI, X.400 or HTTP). WAP gateway  may present a WML request form containing one or more e-mail service options to wireless device . WAP gateway  translates the response signals received from wireless device  into an e-mail message, and transmits the e-mail message to mail gateway . Mail gateway  may process the e-mail message received from WAP gateway  in one or more of the ways described in connection with legacy voice device .","Computer  may communicate directly with mail gateway  using a standard e-mail communication protocol (e.g., MAPI, X.400 or HTTP). Computer  may be presented with one or more service options as a Microsoft\u00ae Outlook\u00ae form, in which the message class can determine the type of data in the form and identify the service object that is needed to handle the message. The one or more service options alternatively may be presented as formatted or tagged text in the e-mail message body or subject line, or both, that performs the same functionality as a Microsoft\u00ae Outlook\u00ae form. Mail gateway  may process the e-mail message received from computer  in one or more of the ways described in connection with legacy voice device .","The systems and methods described herein are not limited to any particular hardware or software configuration, but rather they may be implemented in any computing or processing environment. Universal communication module preferably is implemented in a high level procedural or object oriented programming language; however, the program may be implemented in assembly or machine language, if desired. In any case, the programming language may be a compiled or interpreted language. In one embodiment, universal communication module  is implemented as a library of COM (Component Object Model) objects that may access one or more CDOs (Collaboration Data Objects) that are provided by the standard COM library, which is part of the operating system for Win32 platforms and is available as a separate package for other operating systems.","Universal communication module may be implemented in other programming paradigms, if desired. For example, although the above embodiments have been described in connection with the Microsoft NT server operating system, the embodiments easily may be programmed to operate in another computing environment, such as a Unix-based (e.g., Linux) computing environment utilizing JavaServer Page access file technology.","Other embodiments are within the scope of the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 6A","FIG. 5"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 6B","FIG. 6A"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
