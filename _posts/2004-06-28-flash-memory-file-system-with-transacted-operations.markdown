---
title: Flash memory file system with transacted operations
abstract: A flash memory file system logically divides at least a portion of the flash memory into memory fragments and headers associated with the memory fragments. The flash memory file system also includes a transaction information structure in support of transacted operations. The transaction information structure includes fields to indicate whether a transaction has begun, whether commitment of the transaction has begun, and whether commitment of the transaction has been completed. File system operations may be rolled back if a transaction was interrupted.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07139199&OS=07139199&RS=07139199
owner: Intel Corporation
number: 07139199
owner_city: Santa Clara
owner_country: US
publication_date: 20040628
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","DESCRIPTION OF EMBODIMENTS"],"p":["The present invention relates generally to file systems, and more specifically to file systems in flash memory devices.","Flash memories may have file systems to hold files. Because flash memories are nonvolatile, files in a flash memory should be available after power to the flash memory is cycled. If power is lost when a file in a flash memory is being modified, the file may be corrupt when power is restored.","In the following detailed description, reference is made to the accompanying drawings that show, by way of illustration, specific embodiments in which the invention may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention. It is to be understood that the various embodiments of the invention, although different, are not necessarily mutually exclusive. For example, a particular feature, structure, or characteristic described herein in connection with one embodiment may be implemented within other embodiments without departing from the spirit and scope of the invention. In addition, it is to be understood that the location or arrangement of individual elements within each disclosed embodiment may be modified without departing from the spirit and scope of the invention. The following detailed description is, therefore, not to be taken in a limiting sense, and the scope of the present invention is defined only by the appended claims, appropriately interpreted, along with the full range of equivalents to which the claims are entitled. In the drawings, like numerals refer to the same or similar functionality throughout the several views.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":["102","104","106"]},"In some embodiments, one or more TIS instances are maintained in a flash memory file system to support transacted operations in a file. For example, a TIS may be kept in a file information structure that is stored in flash memory. The file information structure may also maintain other information describing a file, or relating to a file, such as the filename, creation date, size of the file and the location of a sequence table that references the actual file data.","A single write to a file may be an append, truncate, or overwrite of one or more file fragments. A transaction may include a combination of these operations in any order. For example, a transaction may include an append to the end of a file, followed by an overwrite in the middle of the file, followed by an overwrite in the beginning of the file, or any combination.","Flash memory is generally erased prior to writing, and erasing operations are generally performed on multiple locations at once, depending on the underlying architecture of the memory device. Erasing a flash memory is the equivalent of storing a \u201c1\u201d in every location, and when writing to the flash memory, locations are either left as a \u201c1,\u201d or changed from a \u201c1\u201d to a \u201c0.\u201d Once programmed with a \u201c0,\u201d the location may not be written with a \u201c1\u201d without erasing a number of locations. The use herein of \u201c0\u201d and \u201c1\u201d may or many not follow standard convention, and is somewhat arbitrary because an erased location may be considered as holding a \u201c0\u201d and a programmed location may be considered as holding a \u201c1.\u201d In some embodiments, the term \u201csetting a bit\u201d may refer to programming a single bit location, regardless of whether is it considered as changing a \u201c1\u201d to a \u201c0\u201d or a \u201c0\u201d to a \u201c1.\u201d","The flash memory erasing and programming operations described in the previous paragraph lead to special considerations when performing transacted operations. For example, because a single location in flash memory typically cannot be overwritten, changes to files in flash memory may be performed by writing new file fragments to replace old file fragments, rather than simply overwriting the old file fragments. Further, when maintained in flash memory, each field in a TIS may be written to only once between erase operations. In some embodiments, each field in a TIS consists of a single bit, and writing to the field corresponds to setting a single bit.","Transaction information structures support a transaction capability in flash file systems, to enable them to either commit or roll back a number of operations that have been made. For example, a database may perform file operations that modify several pieces of a file, and to avoid corruption of the database, the file system performs either all of the file operations or none of the file operations. If the file operations are left partially complete, the database may be left corrupted.","The transaction capability provided in part by TIS instances  may provide file system services in the event of a flash memory power loss. For example, if power is lost during a transacted operation, TIS instances  provide a mechanism to help the file system recover by \u201crolling back\u201d all operations that were part of the transaction, to leave the file system in the state that existed before the operations started. Transaction information structures  provide fields stored in the flash memory describing the state of the transaction, so that the file system initialization is aware that a transaction was in progress and how to roll back.","Each TIS instance provides a transaction begin field that when set signifies that a transaction has begun. Each TIS instance also provides a commit begin field that when set signifies that all operations associated with the transaction have been completed, and that they may committed. All file operations that are performed between setting the transaction begin field and the commit begin field are part of a transaction. In some embodiments, only one transaction is allowed on a single file at a time, but transactions on different files may be in progress at the same time.","A file system may provide a mechanism for an application to set the various fields in a TIS instance. For example, a file system may allow an application to set a transaction begin field using a \u201ctransaction begin command\u201d or procedure call in an applications programming interface (API). Further, a file system may allow an application to set a commit begin field using a \u201ctransaction end command\u201d or procedure in an API. In some embodiments, the file system provides a transaction begin command and a transaction end command to set the transaction begin field and the commit begin field, respectively, and the file system handles setting the commit end field without intervention by the application.","In operation, an application may issue a transaction begin command, and the file system sets the transaction begin field of a TIS instance. Then the various operations that are part of the transaction may be issued by the application. The file system keeps all the old data valid until the transaction is completed, since it might need to roll back the changes. The new data that is part of the operations in the transaction are kept in an unfinished state. When the application issues a transaction end command, the file system sets the commit begin field in the TIS instance, which indicates that the file system will now begin committing the changes. Committing the changes may include operations such as validating all the new data and invalidating any old data. Once the changes are committed, the file system sets the commit end field in the TIS instance. An example transaction is described below with reference to .","In the case of a power loss, a recovery process may include an initialization routine to check any TIS instances for incomplete transactions. If a transaction is found that is incomplete, then the transaction may be rolled back. For example, if a transaction begin field is set in a TIS instance, and the commit begin field is not set in the same TIS instance, then the initialization routine may roll back the changes by setting the commit end field in the TIS instance. If a transaction is found that is complete, but is not fully committed, the initialization routine may finish committing the transaction. For example, if a transaction begin field and a commit begin field are set in a TIS instance without the commit end field set, then the initialization routine may finish committing the transaction and set the commit end field. Various operations that may be performed as part of a recovery process are described further below with reference to .",{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIGS. 2\u20135","FIG. 2","FIG. 2","FIG. 2","FIG. 2"],"b":["200","210","220","230","210","212","216","212","213","214","215","213","214","215","210","210"]},"Sequence table pointer  includes a pointer to sequence table . Sequence table  includes sequence table entries , , and . Sequence table entries , , and  point to memory fragments that hold file data. By traversing the entries in sequence table , the file in flash memory  may be read.","Memory  includes memory fragments , , , and , and also includes headers , , , and  associated with the memory fragments. For example, header  is associated with memory fragment , header  is associated with memory fragment , header  is associated with memory fragment , and header  is associated with memory fragment . Memory  is shown with four memory fragments, but this is not a limitation of the present invention. A file may include data held in any number of memory fragments, and each of the memory fragments may have a header associated therewith. A memory fragment may be any size. In some embodiments, a memory fragment may be a few bytes in size, and in other embodiments, a memory fragment may be a few kilobytes in size. A memory fragment size may be chosen based on many possible factors, including the type of data expected to be stored therein, and the frequency with which it is expected to be changed.","Headers in memory  have a field to indicate a status of the associated memory fragment. For example, in some embodiments, each header may be marked to indicate whether a memory fragment is valid, invalid, allocating, or free. As shown in , headers , , and  are marked to show that memory fragments , , and  are valid; and header  is marked to show that memory fragment  is free.","File information structure , sequence table  and memory  are shown as separate blocks in . In some embodiments, file information structure , sequence table , and memory  are included in a common block of flash memory within a single flash memory device. In these embodiments, an erase operation will erase all of file information structure , sequence table , and memory  at the same time. In other embodiments, file information structure , sequence table , and memory  are distributed across multiple blocks within one or more flash memory devices. In these embodiments, an erase operation may erase a portion of the blocks shown in .","The structure shown in  represents a single file in a flash file system held in flash memory before a transaction begins. The file includes data shown as \u201cOLD\u201d in three memory fragments , , and , and each of memory fragments , , and  has an associated header marked as valid. When sequence table  is traversed to read the file, each of memory fragments , , and  is treated as having valid file data because the associated headers are marked as valid.","Transaction information structure  is shown with all three fields erased. Transaction begin field  is not set, indicating that a transaction has not yet begun.  show the progression of a transaction in memory , starting at the state shown in .","As shown in , transaction begin field  is set. This indicates that a transaction will be started. In this example transaction, a portion of the file will be overwritten. The data that will be overwritten is included in memory fragment . To overwrite the file data in memory fragment , a new memory fragment will be written that includes the changed and unchanged portions of fragment . Memory fragment  is identified as a free memory fragment (shown at  in ), and the new data is written into memory fragment . Header  is marked as allocating (shown by \u201cA\u201d in ).","Sequence table entry  is added to sequence table , and sequence table entry  is modified to point to sequence table entry . Sequence table entry  is modified to point to the new memory fragment . Sequence table entry  is a \u201creplacement entry\u201d that will ultimately replace sequence table entry . In some embodiments, each sequence table entry includes a field reserved for pointing to a future replacement entry. This field may be written once when the replacement entry is created. The sequence table entries may be co-located as shown in , or may not be co-located. For example, sequence table entry  may be located in a region of memory far removed from the remainder of sequence table .","At this point, the transaction is partially complete. The transaction may or may not include more operations. Until the commit begin field  is set, the transaction is considered to be in process. Further, the old data is still marked as valid, and the new data is marked as allocating, so if necessary, the change to the file may be rolled back.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 4","b":["214","215","234","244","238","248"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 5","FIG. 4","FIG. 5","FIG. 5"],"b":"212"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 6","FIG. 6"],"b":["600","600","600","600","600"]},"Method  is shown with application flow , file system operations , and power loss recovery operations . Application flow  includes blocks , , , , and . File system operations  includes blocks , , , , and . Power loss recovery operations  includes blocks , , and . Application flow  is arranged top down in  to show possible transacted file operations. For example, in some embodiments, application flow  corresponds to the transacted file operations described above which reference to .","File system operations  are shown corresponding to blocks in application flow . Each block in file system operations  provides an example operation that may be performed in the file system corresponding to an operation performed at the application level. Power loss recovery operations  represent operations that may be performed by an initialization routine when recovering from a partially completed transaction.","At , an application may begin a transaction. In some embodiments, this may correspond to an application program issuing a transaction begin command or performing a procedure call within an application programming interface. At file system operation , the flash file system may set the transaction begin bit in a TIS instance in response to the transaction beginning at . If power were lost with the file system in this state, upon power recovery, an initialization routine may set a commit end bit in the TIS at . By setting the commit end bit, the initialization routine marks the transaction as having been committed without actually performing the transaction. In doing so, the file in the flash file system is not left in an intermediate state.","At , an application may append data to a file. In some embodiments, this may correspond to an application program requesting that the file system write data to the end of the file. At file system operation , the flash file system may create memory fragments with new data, without validating the new memory fragments. For example, new memory fragments may be created by marking their associated headers as allocating. If power were lost with the file system in this state, upon power recovery, an initialization routine may invalidate the new memory fragments and set the commit end bit in the TIS at . The new memory fragments may be invalidated by marking their associated headers as invalid. This is an example of rolling back a partially completed transaction. By invalidating new memory fragments and setting the commit end bit in the TIS, the transaction is marked as committed with all of the old memory fragments valid, and no new memory fragments left as allocating.","At , an application may overwrite data in the file. In some embodiments, this may correspond to an application program requesting that the file system overwrite a portion of the data in the file. At file system operation , the flash file system may create memory fragments without validating the new memory fragments. In addition, the flash file system may leave the old data marked as valid. Examples of file system operation  are shown in, and described with reference to, . If power were lost with the file system in this state, upon power recovery, an initialization routine may invalidate the new memory fragments and set the commit end bit in the TIS at .","At , an application may begin to commit a transaction. In some embodiments, this may correspond to an application program issuing a commit begin command or performing a procedure call within an application programming interface. At file system operation , the flash file system may set the commit begin bit in the TIS, and then proceed to validate all new memory fragments and invalidate all old memory fragments that are being replaced. If power were lost during the process of committing the changes, upon power recovery, an initialization routine may continue the process of committing the changes. For example, as shown at , an initialization routine may validate all new memory fragments, invalidate all old memory fragments that are being replaced, and set the commit end bit in the TIS.","At , an application may end the commit process. In some embodiments, this may correspond to an application program issuing a commit end command or performing a procedure call within an application programming interface. At file system operation , the flash file system may set the commit end bit in the TIS to signify that the transaction has been committed. In some embodiments, the application does not request both a commit begin at  and a commit end at . In some of these embodiments, an application may issue a transaction end command, and the operations concerning the commit begin and commit end fields in the TIS are performed by the file system.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 7","b":["700","710","720","725","730","740","750","710","720","710","720","710"]},"Example systems represented by  include cellular phones, personal digital assistants, wireless local area network interfaces, and the like. Flash memory  may be adapted to hold information for system . For example, flash memory may hold device configuration data, such as contact information with phone numbers, or settings for digital circuit  or analog circuit . Many other systems uses for flash memory  exist. For example, flash memory  may be used in a desktop computer, a network bridge or router, or any other system without an antenna.","Analog circuit  communicates with antenna  and digital circuit . In some embodiments, analog circuit  includes a physical interface (PHY) corresponding to a communications protocol. For example, analog circuit  may include modulators, demodulators, mixers, frequency synthesizers, low noise amplifiers, power amplifiers, and the like. In some embodiments, analog circuit  may include a heterodyne receiver, and in other embodiments, analog circuit  may include a direct conversion receiver. In some embodiments, analog circuit  may include multiple receivers. For example, in embodiments with multiple antennas , each antenna may be coupled to a corresponding receiver. In operation, analog circuit  receives communications signals from antenna , and provides signals to digital circuit . Further, digital circuit  may provide signals to analog circuit , which operates on the signals and then transmits them to antenna .","Digital circuit  is coupled to communicate with processor  and antenna . In some embodiments, digital circuit  includes circuitry to perform error detection\/correction, interleaving, coding\/decoding, or the like. Also in some embodiments, digital circuit  may implement all or a portion of a media access control (MAC) layer of a communications protocol. In some embodiments, a MAC layer implementation may be distributed between processor  and digital circuit .","Analog circuit  may be adapted to receive and demodulate signals of various formats and at various frequencies. For example, analog circuit  may be adapted to receive time domain multiple access (TDMA) signals, code domain multiple access (CDMA) signals, global system for mobile communications (GSM) signals, orthogonal frequency division multiplexing (OFDM) signals, multiple-input-multiple-output (MIMO) signals, spatial-division multiple access (SDMA) signals, or any other type of communications signals. The present invention is not limited in this regard.","Antenna  may include one or more antennas. For example, antenna  may include a single directional antenna or an omni-directional antenna. As used herein, the term omni-directional antenna refers to any antenna having a substantially uniform pattern in at least one plane. For example, in some embodiments, antenna  may include a single omni-directional antenna such as a dipole antenna, or a quarter wave antenna. Also for example, in some embodiments, antenna  may include a single directional antenna such as a parabolic dish antenna or a Yagi antenna. In still further embodiments, antenna  may include multiple physical antennas. For example, in some embodiments, multiple antennas are utilized to support multiple-input-multiple-output (MIMO) processing or spatial-division multiple access (SDMA) processing.","Memory  represents an article that includes a machine readable medium. For example, memory  represents a random access memory (RAM), dynamic random access memory (DRAM), static random access memory (SRAM), read only memory (ROM), flash memory, or any other type of article that includes a medium readable by processor . Memory  may store instructions for performing the execution of the various method embodiments of the present invention.","In operation, processor  reads instructions and data from memory  and performs actions in response thereto. For example, processor  may access instructions from memory  and perform transacted file operations in a flash file system held in flash memory . In some embodiments, flash memory  and memory  are combined into a single memory device. For example, flash memory  and memory  may both be include in a single flash memory device.","Although the various elements of system  are shown separate in , embodiments exist that combine the circuitry of processor , flash memory , memory  and digital circuit  in a single integrated circuit. For example, memory  or flash memory  may be an internal memory within processor  or may be a microprogram control store within processor . In some embodiments, the various elements of system  may be separately packaged and mounted on a common circuit board. In other embodiments, the various elements are separate integrated circuit dice packaged together, such as in a multi-chip module, and in still further embodiments, various elements are on the same integrated circuit die.","The type of interconnection between processor  and flash memory  is not a limitation of the present invention. For example, bus  may be a serial interface, a test interface, a parallel interface, or any other type of interface capable of transferring command and status information between processor , flash memory , and memory .","In some embodiments, flash memory  may be a NOR-type, and in other embodiments, flash memory  may be a NAND-type. Memory cells in flash memory  may store one data bit per cell, or memory cells may be multilevel cells (MLC) capable of storing more than one bit per cell. Any flash memory arrangement may be utilized within flash memory  without departing from the scope of the present invention.","Although the present invention has been described in conjunction with certain embodiments, it is to be understood that modifications and variations may be resorted to without departing from the spirit and scope of the invention as those skilled in the art readily understand. Such modifications and variations are considered to be within the scope of the invention and the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIGS. 2\u20135"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
