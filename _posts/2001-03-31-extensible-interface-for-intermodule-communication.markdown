---
title: Extensible interface for inter-module communication
abstract: A method and apparatus for inter-module communication is disclosed. The method includes forming a message that includes customer relations management system information. The customer relations management system information may include, for example, agent information, work item information, queuing information, statistical information, connection information or rule information, among other such information. The message can be communicated in order to perform a function, such as an agent-related function, a work item-related function, a statistics-related function or an administrative function, for example. The message can be, for example, a command, a request or a notification.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07730204&OS=07730204&RS=07730204
owner: Siebel Systems, Inc.
number: 07730204
owner_city: San Mateo
owner_country: US
publication_date: 20010331
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Field of the Invention","The present invention relates to communications between software modules, and, more particularly, to a method and apparatus providing an extensible interface for inter-module communication.","2. Description of the Related Art","In today's technological economy, companies are moving towards managing and interacting with their customers through a wide variety of communication channels. Such communication channels include face-to-face interaction, telephone communications, facsimile (colloquially, \u201cfax\u201d) communications, e-mail, voice-mail, Internet information inquiries via \u201ccall me now and call me later,\u201d collaborative sessions via the Internet and other such communications channels. With all these communication channels, companies are faced with efficiently managing each customer interaction while meeting desired service levels and maximizing customer satisfaction. In addition, companies are faced with optimally staffing and training their workforce to deal with these communication channels, whether through their call center(s), telebusiness organizations, or their sales, marketing, and service professionals.","Currently, many customers have dedicated e-mail inboxes, fax inboxes, and voice-mail boxes defined for specific business areas as well as automated call distributors. Employees are assigned to poll and manage the inquiries for each communication channel. Combined with the traditional call queues for inbound telephone calls, agents are tasked with managing all these communication channels while having no visibility into the queue status and priorities of each channel.","Thus, it is desirable to provide a system that includes a universal queue strategy capable of assigning, routing, and queuing work items from multiple channels of communications to an agent having the appropriate skills to respond to the request. This reduces the response times and customer satisfaction, while balancing priorities amongst multiple communication channels.","As will be appreciated by those of skill in the art, the queuing of such work items may be performed by a software module dedicated to such tasks. Such a module would dole out work items to agents as appropriate, based on some paradigm. In providing such functionality in a separate module, the question of the manner in which such a module (and indeed, any such inter-module communications) are to take place.","A traditional approach would be to define a application programming interface (API) that would allow calls to be made to the queuing module, in order to produce the desired results (e.g., the queuing of a work item). Alternatively, a dynamic link library (DLL) could be employed. A DLL is a collection of sub-modules (e.g., subroutines or objects\/methods), any of which can be called (instantiated) when needed by a program currently being executed in a computer. DLL files are so named because they are dynamically linked with the program that uses them during program execution rather than being compiler with the main program. Again, as with a library, an API is provided to allow the programmer to access the functions contained therein.","Unfortunately, by using a library or DLL, several obstacles can present themselves. First, the library or DLL may have what are termed \u201cside effects\u201d\u2014that is, one or more of the sub-modules may cause unexpected changes in the data of the calling module. Moreover, if the calling module supplies data to the sub-module in the wrong format, the sub-module may simply take the incorrectly formatted data as data in the expected format, again producing unexpected results. Given there and other sources of errors, the time required to test and debug software thus created is increased substantially, as such effects are difficult to track down. Collaboration of different groups creating various modules is also affected, as the time required to integrate the module with the library\/DLL is also increased. In fact, not only is the creation of software using such techniques error prone, but the maintenance of such systems also becomes more difficult, with the potential for small changes to the module and\/or sub-modules to have catastrophic unforeseen effects. Thus, a way for modules to communicate that avoids the aforementioned problems is desirable, as such a technique would provide the requisite functionality without the potential burdens of increased development time, integration time and maintenance efforts.","In one embodiment of the present invention, a method of inter-module communication is disclosed. The method includes forming a message that includes customer relations management system information. The customer relations management system information may include, for example, agent information, work item information, queuing information, statistical information, connection information or rule information, among other such information.","In one aspect of this embodiment, the method further includes communicating the message from a commerce server to a universal queuing system. In another aspect of this embodiment, the method further includes forming a command, a request or a notification. The command can be defined such that a module receiving the message performs an operation, for example. The request can be configured to cause a module receiving the message to reply with other customer relations management system information, for example. The notification can include, for example, other customer relations management system information generated by a module generating the message. In yet another aspect of this embodiment, the message defines a function. The function, in turn, can be one of an agent-related function, a work item-related function, a statistics-related function and an administrative function.","In another embodiment of the present invention, a inter-module communication is disclosed. The inter-module communication includes message that includes customer relations management system information. The customer relations management system information may include, for example, agent information, work item information, queuing information, statistical information, connection information or rule information, among other such information.","In one aspect of this embodiment, the message may include, for example, a command, a request or a notification. The command can be configured to cause a module receiving the message to perform an operation. The request can be configured to cause a module receiving the message to reply with other customer relations management system information. The notification can include, for example, other customer relations management system information, that being generated by the module generating the message.","In another aspect of this embodiment, the message can be communicated in order to perform a function, such as an agent-related function, a work item-related function, a statistics-related function or an administrative function, for example.","In yet another embodiment of the present invention, a inter-module interface definition is disclosed. The inter-module interface definition includes a message definition. The message definition defines a message containing customer relations management system information. The customer relations management system information may include, for example, agent information, work item information, queuing information, statistical information, connection information or rule information, among other such information.","In one aspect of this embodiment, the message definition defines, for example, a command, a request or a notification. The command can be defined such that a module receiving the message performs an operation, for example. The request can be defined such that a module receiving the message replies with other customer relations management system information, for example. The notification can include, for example, other customer relations management system information, which is generated by a module generating the message.","In one aspect of this embodiment, the message defines a function. The function can be, for example, one of an agent-related function, a work item-related function, a statistics-related function or an administrative function.","The foregoing is a summary and thus contains, by necessity, simplifications, generalizations and omissions of detail; consequently, those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. As will also be apparent to one of skill in the art, the operations disclosed herein may be implemented in a number of ways, and such changes and modifications may be made without departing from this invention and its broader aspects. Other aspects, inventive features, and advantages of the present invention, as defined solely by the claims, will become apparent in the non-limiting detailed description set forth below.","The use of the same reference symbols in different drawings indicates similar or identical items.","The following is intended to provide a detailed description of an example of the invention and should not be taken to be limiting of the invention itself. Rather, any number of variations may fall within the scope of the invention which is defined in the claims following the description.","Introduction","The present invention provides a method and apparatus for providing an extensible interface for inter-module communication. An inter-module interface can be described that allows communication of application-specific information between modules in the systems described subsequently herein. The basic unit of communications using the interface is a message that can be, for example, a command (a directive that is to cause the recipient to do something), a request (in response to which the recipient replies with requested information) or a notification (notifying the recipient of some event or autonomously providing information of some sort).","A method and apparatus for inter-module communication typically includes forming a message that includes customer relations management system information. This will typically be done in accordance with the inter-module communications required by the system, as well as in accordance with the various protocols and languages employed. The customer relations management system information may include, for example, agent information, work item information, queuing information, statistical information, connection information or rule information, among other such information. The message can be communicated in order to perform a function, such as an agent-related function, a work item-related function, a statistics-related function or an administrative function, for example. The message can be, for example, a command, a request or a notification.","An inter-module interface such as that described above provides a number of benefits. Such an interface effectively isolates the two modules communicating with one another. This avoids problems described subsequently. Also, the time required to test and debug software thus created is decreased substantially, improving collaboration between different development groups.","An inter-module interface such as that described herein also supports operation in a platform independent manner. Because the only contact the modules have with one another is the transmission and reception of messages structured in a previously agreed upon format. Additionally, because each message (e.g., command, request, notification and other such messages) can be coded separately, the code in each module for performing the requisite function (e.g., a specific command) can also be coded separately. This greatly simplifies the coding of each module, as it engenders an incremental approach. Extending the interface is also simplified, as discussed subsequently. Other advantages are also provided, some of which are discuss in detail subsequently.","An Extensible Interface for Inter-Module Communication","The present invention employs various standard networking protocols and languages in supporting the communications described herein. Among these protocols and languages are the Extensible Markup Language, the Simple Object Access Protocol and the Hyper-Text Transfer Protocol.","Extensible Markup Language (XML) is a language used to describe a class of data objects called XML documents and also describes, in part, the behavior of computer programs which process them. XML is an application profile (or restricted form) of SGML, the Standard Generalized Markup Language defined in ISO 8879. By construction, XML documents are conforming SGML documents. XML documents are made up of storage units called entities, which contain either parsed or unparsed data. Parsed data is made up of characters, some of which form character data, and some of which form markup. Markup encodes a description of the document's storage layout and logical structure. XML provides a mechanism to impose constraints on the storage layout and logical structure. A software module called an XML processor is used to read XML documents and provide access to their content and structure. It is assumed that an XML processor is doing its work on behalf of another module, called the application.","Simple Object Access Protocol (SOAP) is a lightweight protocol that supports the exchange of information in a decentralized, distributed environment using XML. SOAP does not itself define any application semantics such as a programming model or implementation specific semantics; rather it defines a simple mechanism for expressing application semantics by providing a modular packaging model and encoding mechanisms for encoding data within modules. This allows SOAP to be used in a large variety of systems ranging from messaging systems to RPC. It is an XML-based protocol that consists of three parts: an envelope that defines a framework for describing what is in a message and how to process it, a set of encoding rules for expressing instances of application-defined datatypes, and a convention for representing remote procedure calls and responses. SOAP can potentially be used in combination with a variety of other protocols; however, the bindings typically used support the use of SOAP in combination with HTTP and HTTP Extension Framework (although such communications can be made secure through the use of HTTPs, the secure version of HTTP).","As noted, SOAP consists of three parts:\n\n","Although these parts are described together as part of SOAP, they are functionally orthogonal. In particular, the envelope and the encoding rules are defined in different namespaces in order to promote simplicity through modularity.","A SOAP message is an XML document that consists of a mandatory SOAP envelope, an optional SOAP header, and a mandatory SOAP body. This XML document is referred to as a SOAP message. The namespace identifier for the elements and attributes defined in this section is defined in a URL that provides the namespace information. A SOAP message contains the following:\n\n","Grammar rules exist for the envelope, header, and body sections of a message. An envelope has an element name of \u201cEnvelope,\u201d and must appear in the message. A header has an element name of \u201cHeader,\u201d and may appear in the message, but is not mandatory. The body of the message has an element name of \u201cBody,\u201d and must appear in the message.","SOAP messages are fundamentally one-way transmissions from a sender to a receiver. However, SOAP messages can be combined to implement patterns such as request\/response paradigms. SOAP implementations can be optimized to exploit the unique characteristics of particular network systems. For example, the HTTP binding provides for SOAP response messages to be delivered as HTTP responses, using the same connection as the inbound request.","Regardless of the protocol to which SOAP is bound, messages are routed along a so-called \u201cmessage path\u201d, which allows for processing at one or more intermediate nodes in addition to the ultimate destination. A SOAP application receiving a SOAP message processes the message by performing the following actions:\n\n","Processing a message or a part of a message requires that the SOAP processor understands, among other things, the exchange pattern being used (one way, request\/response, multicast, etc.), the role of the recipient in that pattern, the employment (if any) of RPC mechanisms, the representation or encoding of data, as well as other semantics necessary for correct processing.","While attributes such as the SOAP encodingStyle attribute can be used to describe certain aspects of a message, the SOAP specification does not mandate a particular manner in which the recipient makes such determinations in general. For example, certain applications will understand that a particular element signals an RPC request using one set of predefined conventions, while another application may infer that all traffic directed to that application is encoded as one way messages.","Hyper-Text Transfer Protocol (HTTP) is the network protocol used to deliver virtually all files and other data (collectively called resources) on the World Wide Web, whether the files are HTML files, image files, query results, or other such collection of data. HTTP typically operates using Transmission Control Protocol\/Internet Protocol (TCP\/IP) sockets. A browser or other application is an HTTP client because the application sends requests to an HTTP server (i.e., Web server), which then sends responses back to the client. The standard (and default) port for HTTP servers to listen on is port 80, although HTTP servers can use any port.","HTTP is used to transmit resources, not just files. A resource is a unit of information that can be identified by a universal resource locator (URL). The most common kind of resource is a file, but a resource may also be a dynamically-generated query result, the output of a script, a document available in several languages, or other such information. Typically, however, most HTTP resources are currently either files or server-side script output","Using XML and SOAP, an inter-module interface can be described that allows communication of application-specific information between modules in the systems described subsequently herein. The basic unit of communications using the interface is a message that can be, for example, a command (a directive that is to cause the recipient to do something), a request (in response to which the recipient replies with requested information) or a notification (notifying the recipient of some event or autonomously providing information of some sort).","The basic format for communications using the interface is as follows:",{"@attributes":{"id":"p-0055","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<message>"]},{"entry":[{},"\u2003\u2003<name tag> value <\/name tag>"]},{"entry":[{},"\u2003\u2003<name tag> value <\/name tag>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003."]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003."]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003."]},{"entry":[{},"\u2003\u2003<name tag> value <\/name tag>"]},{"entry":[{},"<\/command\/request\/notification >"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"More specifically, the format for communications using the interface appears as follows:",{"@attributes":{"id":"p-0057","num":"0065"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<element name=\u2019command\/request\/notification\u2019>"]},{"entry":[{},"\u2003\u2003<type>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<element name=\u2019element1\u2019 type=\u2019element1type\u2019\/>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<element name=\u2019element2\u2019 type=\u2019element2type\u2019\/>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003."]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003."]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003."]},{"entry":[{},"\u2003\u2003\u2003\u2003<element name=\u2019elementN\u2019 type=\u2019elementNtype\u2019\/>"]},{"entry":[{},"\u2003\u2003<\/type>"]},{"entry":[{},"<\/element>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"where the element name can be one of \u201ccommand\u201d, \u201crequest\u201d and \u201cnotification\u201d among other such possible messages. Other examples of such messages are provided subsequently herein. It will be noted that multiple XML messages can be encased in a single SOAP envelope, providing more efficient transfer of commands\/requests\/notifications. By defining the inter-module interface in this manner, the concept of an application programming interface (API) is effectively done away with\u2014what is used in its place is a data format specification, an example of which appears in the Appendix filed herewith that includes XML code that implements an extensible interface for inter-module communication according to the present invention such as that described herein and which is discussed in detail below. This application incorporates by reference herein, in its entirety, that Appendix.","It will be noted that the variable identifier \u201cN\u201d is used both above and in several instances in the figures to more simply designate the final element (e.g., elementN and elementNtype) of a series of related or similar elements (e.g., elements and types). The repeated use of such variable identifiers is not meant to imply a correlation between the sizes of such series of elements, although such correlation may exist. The use of such variable identifiers does not require that each series of elements has the same number of elements as another series delimited by the same variable identifier. Rather, in each instance of use, the variable identified by \u201cN\u201d may hold the same or a different value than other instances of the same variable identifier.","An inter-module language such as that described above provides a number of benefits. As an initial matter, such an effectively isolates the two modules communicating with one another. This avoids any unwanted \u201cside effects,\u201d because the modules are compiled and executed separately. The only link between the two modules is the communication channel provided by HTTP, TCP\/IP and related protocols. The opportunity for inadvertent type mismatches is also avoided, as a result of all values being converted into character representations (which occurs when generating the XML for the message","Moreover, if the calling module supplies data to the sub-module in the wrong format, the sub-module may simply take the incorrectly formatted data as data in the expected format, again producing unexpected results. Given there and other sources of errors, the time required to test and debug software thus created is increased substantially, as such effects are difficult to track down. Collaboration of different groups creating various modules is also affected, as the time required to integrate the module with the library\/DLL is also increased. In fact, not only is the creation of software using such techniques error prone, but the maintenance of such systems also becomes more difficult, with the potential for small changes to the module and\/or sub-modules to have catastrophic unforeseen effects. Thus, a way for modules to communicate that avoids the aforementioned problems is desirable, as such a technique would provide the requisite functionality without the potential burdens of increased development time, integration time and maintenance efforts.","An inter-module interface such as that described herein also supports operation in a platform independent manner. Because the only contact the modules have with one another is the transmission and reception of messages structured in a previously agreed upon format. The platform on which a given module is executed, the language in which the module is written, the conventions used in the module and other platform-specific information are immaterial\u2014so long as the module sending the message puts the proper information in the proper format into the message, no issues will exist as to the manner in which this is accomplished. It is, of course, considered a given that the receiver will not encounter any problems in reading the message, because it is assumed that the message is properly formatted and the receiving module expects the message in the agreed upon format.","Given this platform independence, it will be apparent to one of skill in the art that such an interface can be expected to avoid compatibility problems. Again, so long as the modules are using the same version of the interface, no errors will result from mismatches between the transmitted message and the message expected by the receiving module. The interface thus completely defines the interaction between the modules because the modules are completely separate. This allows the modules to be unit tested with a high confidence that successful unit testing will portend successful integration. This ease of integration is further supported the use of standard networking protocols and languages. Typically, the only integration problems will be those caused by mismatches between developer's understanding of the interface specification, which are easily remedied, typically. Thus, the time spent in development and debugging is reduced, speeding time-to-market and lowering the cost of developing the software system being implemented.","Additionally, because each message (e.g., command, request, notification and other such messages) can be coded separately, the code in each module for performing the requisite function (e.g., a specific command) can also be coded separately. This greatly simplifies the coding of each module, as it engenders an incremental approach.","This also implies that extending interface to perform other functions is simplified. To add functionality, the developer simply describes one or more new messages that address the desired function. The modules' developers agree on the structure of the message, and proceed with creating additional code for their respective modules. This coding is simplified because each command is a separate path through the given module. Thus, encapsulation and code re-use are supported in the code that employs such an inter-module interface.","Finally, an inter-module interface according to embodiments of the present invention are network extensible. Because an inter-module interface such as that described herein uses standard networking protocols and languages, communications can take place within one computer or over a network. In fact, so long as compatible protocols and languages are employed, the modules communicating with one another can be located anywhere. In fact, an application service provider (ASP) model can even be used, with one module (e.g., UQ) acting as the ASP and the other (e.g., CS) acting as the client.","An example of a system in which the present invention can be used, as well as an embodiment of the present invention, is provided below, in connection with the description of such a system.","An Example Implementation of an Extensible Inter-Module Communication Interface","Example Communications Server and Associated Systems",{"@attributes":{"id":"p-0068","num":"0076"},"figref":"FIGS. 1A through 1D","b":"100"},{"@attributes":{"id":"p-0069","num":"0077"},"figref":"FIG. 1A","b":["100","130","130","130","130","130"]},"In accordance with the present invention, client\/server system  includes a universal queuing (UQ) system  capable of assigning, routing, and queuing work items from multiple channels of communication to an agent having the appropriate skills to respond to a customer support request. The term work item refers to a request from a customer that requires a response from an agent assigned by client\/server system , such as responding to a customer support request in the form of a telephone call, e-mail, fax or other communication of a different media type. A work item can be initiated when an event such as an incoming customer support request arrives or by an agent using a user interface to client\/server system .","Client\/server system  also includes a communication server  that enables agents to use communication channels of different media types to communicate with customers. Communication server  handles events such as the arrival of incoming customer support requests from a channel driver  such as one of channel drivers A, B, and C. Each channel driver  communicates with a communication channel  such as one of communication channels A, B, C and D.","Interaction between UQ system  and communication server  occurs when, for example, communication server  receives and routes an incoming customer request as a work item to UQ system  for assignment to an agent. UQ system  assigns an agent to the work item and identifies an assigned agent to communication server  for communication concerning the work item to the assigned agent.","Web browser client A includes a web browser program such as Microsoft's Internet Explorer running on a client computer system (not shown). The web browser client A communicates with a web server . Application server  in client\/server system  performs functions for and sends information to web browser client A via web server , which provides web pages for web browser client A to display. Web server  can download program instructions, such as Java applet , to the web browser client A to provide additional functionality, such as a user interface.","Web browser client A is shown including a toolbar . One of skill in the art will recognize that other user interfaces providing the functionality of toolbar  can be implemented using a variety of different display formats to interface with multiple communication channels of different media types within the scope of the invention. Toolbar  is presented as part of a user interface.","In one embodiment, application server  of client\/server system  includes object manager , session mode communication server , request mode communication server , inbound communication receiver , UQ system , web server , web server , Enterprise Application Interface (EAI) object manager , and workflow process . In one embodiment, communication between componentsin application server  is enabled using a suitableinter-process communication protocolin conjunction with transfer control protocol\/Internet protocol (TCP\/IP) as known in the art.","UQ business service  allows communication server  to request information from UQ system , which returns the information via web server , and EAI object manager . In one embodiment, both session mode communication server  and inbound communication receiver  can communicate with UQ system . Other embodiments can communicate with a third party queuing system for maintaining work item queues and assigning agents to work items.","Communication server  includes at least one of session mode communication server , request mode communication server , and inbound communication receiver . It is important to note that the functionality provided by servers , , and  can be implemented on one server computer system or distributed across two or more server computer systems. Communication server  handles all communication between agents and customers via communication channels  of one or more media types. Communication server  is not media-specific and has no knowledge of communication channels or media.","To communicate with multiple communication channels of different media types, communication server  is designed to communicate with a channel driver  such as one of channel drivers A, B, and C. A channel driver  is written according to Communication Application Program Interface (API) . Communication API  provides an interface for third party vendors of communication devices and software (e.g., middleware vendors for communication devices) to provide a channel driver  so that their products are compatible with application server . By implementing a channel driver , vendors can take advantage of the customer support center management features and multi-media communication channel capabilities of application server .","Communication API  is designed to provide flexibility to third party vendors for integrating their products. In the implementation of a channel driver, a vendor defines the commands the vendor's communication channel  understands so that communication server  can issue commands for the communication channel  to perform. Normally these commands are issued when session mode communication server  is presenting a user interface to the agent, although inbound communication receiver  also can send commands in some circumstances.","In addition, the vendor defines the events that the vendor's communication channel  provides regarding activity of a specific communication channel . Finally, the vendor provides a channel driver  implementation, such as a dynamic link library (.DLL file), for performing each command and generating and providing each event. The channel driver  implementation is required by communication API  to include code to instantiate a driver object and at least one service object.","By requiring the vendor to provide facilities for the communication server  to issue commands to and to receive information from the vendor's communication channel , communications API  enables communications server  to operate independently of the communication channel  media type and specific protocols to communicate with the vendor's communication device or software.","Referring to , an example of a database schema  that can be used by client\/server system  () for storing and communicating channel driver information, agent limitations on media access, commands and events, inbound task management, agent preferences, agent status, media status, communication channel configurations, multiple queue support, and agent management is shown. Database schema  includes data structures for configuration base , command and event , system base , response group , and e-mail profile access control .","Examples of tables corresponding to table names in  are provided in U.S. patent application Ser. No. 09\/823,590, \u201cSystem and Method for Multi-Channel Communication Queuing,\u201d which application was filed on the same day and is assigned to the same assignee as the present application and is incorporated by reference herein. It will be noted that, for simplicity of presentation,  does not indicate all of the relationships between the tables, and that many instances of a table may exist for a particular configuration, depending on the number and types of communication channels authorized. Additionally, one skilled in the art will realize that this collection of tables, the parameters included in each table, and the storage space allowed for the parameters, is one example of how the database schema may be configured, and that other suitable arrangements can be used in accordance with the present invention.",{"@attributes":{"id":"p-0084","num":"0092"},"figref":"FIG. 1B","b":["110","110","104","104","130","130","109","100"]},"Session thread  represents a session during which an agent interacts with client\/server system  using web browser client A. A customer uses a customer communication device, here a telephone, to access the communication channel. The agent also uses a communication device, such as a telephone headset, to access the communication channel.","Session thread  listens for inputs from its web browser client A and dispatches notifications of events from ACD switch driver  to web browser client A. Session thread  uses a communication channel manager such as communication channel manager  to interact with a ACD switch driver . Each channel driver  provides an active connection such as active connection  between the client and the associated communication channel. Channel driver  can be implemented to establish a persistent connection for interactive communication between client  and communication channel E but providing a persistent connection is not required by communication API .","The following examples describe processes that are followed by web browser client A during startup, initialization and operation. The processes for web browser client A are applicable to other types of clients, as will be explained in further detail below.","When web browser client A begins execution:",{"@attributes":{"id":"p-0088","num":"0000"},"ul":{"@attributes":{"id":"ul0007","list-style":"none"},"li":{"@attributes":{"id":"ul0007-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":["1. Web browser client A downloads program instructions for generating a user interface on the display for the web browser, such as toolbar , shown here for implemented using Java applet , from web server . Java applet  also establishes persistent HTTP connection  between Java applet  and web server  so that web server  can continuously provide information to web browser client A.","2. Web browser client A interfaces with session mode communication server  via web engine session thread . Object manager  spawns web engine session thread  to interface with web browser client A using web engine plug-in  and web engine . Communication client service  provides all communication related to the user interface with web browser client A.","3. Communication client service  requests the object manager  for communication service. Communication service , which provides all communications not related to the user interface, is provided.","4. Communication service  loads configuration information such as commands, events, agent information and preferences, channel driver information and channel driver parameters.","5. Communication service  registers an asynchronous event receiving function with object manager  to be invoked when an asynchronous event is subsequently received. The asynchronous event receiving function is also referred to as a callback function. Receiving asynchronous events is described in further detail below.","6. Communication service  request an active connection A between object manager  and web engine plug-in  and an active connection B between communication service  and session mode communication server . Persistent HTTP connection , and active connections A and B enable session mode communication server  to continually push user interface changes to toolbar  using Java applet .","7. Session mode communication server  spawns a session thread such as session thread  in response to the connection request.","8. Session thread  runs communication channel manager .","9. Communication channel manager  loads ACD switch driver D and passes the channel driver parameters determined by communication service .","10. ACD switch driver D establishes an active connection  to the ACD switch E. A vendor implementing channel driver  may choose to provide a persistent connection to the communication channel , as for telephone connections such as active connection . However, a persistent connection is not required by communication API . In this example, activated connection B is a persistent telephone connection between the customer to the agent."]}}}},"When the agent performs an activity using web browser client A that requires a command to be executed, such as clicking a button on toolbar :\n\n","This requires asynchronous interruption at session thread  for event posting.\n\n",{"@attributes":{"id":"p-0091","num":"0120"},"figref":"FIG. 1C","b":["140","140","140","110","140","110"]},"A request mode server thread such as server thread  is spawned when request mode communication server  begins execution. Communication manager  is loaded to collect data for the request. Request mode communication server  determines the appropriate channel driver to handle the request and directs a communication channel manager  to load e-mail driver E. Communication channel manager  dispatches the request and data to e-mail driver E, which sends the information to e-mail communication channel F. In the embodiment shown in , e-mail driver E sends the e-mails via e-mail server  to e-mail client .","As another example of the operation of request mode communication server , object manager  can send one or more work items from UQ system  to request mode communication server . Similar to the previous example, a request mode server thread is spawned and communication manager  is loaded to collect data for the request. Request mode communication server  determines the appropriate channel driver to handle the request and directs a communication channel manager  to load an appropriate driver, such as e-mail driver E. Communication channel manager  dispatches the request and data to the driver, which sends the information to a communication channel.",{"@attributes":{"id":"p-0094","num":"0123"},"figref":"FIG. 1D","b":["170","170","110","170","110","170","110"]},"Inbound communication receiver  uses channel drivers  such as e-mail\/fax channel driver F to \u201clisten\u201d for particular types of customer support requests from a common source. E-mail channel driver F handles all e-mail messages directed to a particular e-mail address and all faxes sent to a particular fax number. To avoid overlap among agents, inbound communication receiver  can be configured to work with UQ system  to assign an agent to the inbound customer support request (e-mail  or fax ) and route the customer support request to a component associated with or representing the assigned agent, such as a client.","Inbound communication receiver  is also configured during initialization to recognize events, such as receiving a customer support request, and to include corresponding channel driver information and background profiles to handle recognized events. Background profiles include one or more monitored media objects, such as a list of e-mail addresses, fax numbers, and web-chat end points. For example, e-mail communication channel G represents a background profile for info@company.com, and fax communication channel H represents a background profile for fax number 1-800-123-4567.","Inbound communication receiver  spawns a server thread such as server thread  to handle inbound events, such as customer support requests. This contrasts to session mode communication server , which spawns a session thread such as session thread  for each client  being used by an agent. Communication channel manager  then initializes a service such as fax service object A, e-mail service object B, or phone service object C with the designated background profile.","When the e-mail\/fax channel driver F receives an incoming customer support request, e.g. new fax , fax channel driver F posts the event to communication channel manager . This posting interrupts the idle state of server thread  and causes server thread  to invoke communication channel manager  to process the event. Communication channel manager  determines how to respond to the event based on an event response included in an event response table, such as EVTRESP (), and invokes the appropriate media service, such as fax service object A. If the event response also specifies notifying UQ system  of the event, the event is then passed to UQ system  via UQ business service . A response to the event notification is returned to inbound communication receiver  via UQ business service .","In alternative embodiments, client\/server system  can support multiple types of clients  having hardware\/software configurations that are different from web browser client A.  shows an alternative embodiment of client\/server system  that supports web browser client A, thin client B, and dedicated client C.","Thin client B includes one or more client software modules that are installed and executed on the client computer system used by the agent. Thin client B provides minimal functionality, with the majority of the functions for thin client B are performed by application server . It is often desirable to use thin clients so that application programs can be updated once in a centralized location instead of multiple times for each thin client B.","Thin client B provides more functionality on the client side than web browser client A, and can, for example, perform some functions of object manager . Thin client B also controls the user interface including toolbar . If changes are necessary to the functions performed on the client side, a new copy of thin client B must be installed on each individual agent's computer system.","Dedicated client C includes software modules that perform a significant portion of the functions required to support an agent. Dedicated clients are sometimes referred to as \u201cfat clients,\u201d in contrast to the \u201cthin client\u201d designation. If changes are necessary to the functionality provided by dedicated client C, a new copy of the dedicated client software modules usually must be installed on the client computer system.","Dedicated client C provides even greater functionality than does thin client B, including, for example, all functionality provided by object manager , web server , communication client service  (), and communication service . Because dedicated client C assumes all responsibility for the user interface and toolbar , there is no communication between dedicated client and communication server , web server , web engine plug-in  and web engine  (). Dedicated client C does include web server  that is capable of interfacing with UQ system , and object manager  to communicate with channel drivers .","It is important to note that other types of clients having hardware and software components that are different from clients A, B, and C can also be integrated with client\/server system . passed to UQ client business service , which sends a corresponding request to UQ requester server . The request is passed to UQ system  and a response is received via web server , EAI server , and UQ receiver server .","Communication API","Referring now to , communication API  is provided in one embodiment of the present invention for channel drivers  to communicate with communication server . Note that communication server  is used in the following discussion of communication API  to represent session mode communication server , request mode communication receiver server , or inbound communication receiver .","As shown in , an example of communication between communication server  and channel driver  using communication API  includes three types of objects: driver objects , service objects , and client objects . Driver objects  and service objects  are instantiated at the channel driver , however client objects  are instantiated at communication server . Communication server  interfaces with driver objects  and service objects , but only service objects  communicate with client objects .","Driver objects  maintain the instantiation of service objects . Any special steps for constructing and destructing service objects  can be implemented in driver objects . Multiple driver objects  can be included to manage different types of media. Also, a single driver object  can manage one type of service objects  or different type of service objects . For example, a single driver object  can manage phone, e-mail and fax media.","As an example of the operation of driver objects , when communication server  is starting up, the channel driver  data link library (DLL) is loaded. Communication server  calls CreateISCSDriverInstance( ) function of channel driver  to ask for the construction of a driver object . The channel driver  returns the driver handle back to communication server . The channel driver  determines how driver objects  are created. If driver objects  already exist, for example, the channel driver  could simply pass the handle of an existing driver object  instead of creating a new one.","Service objects  provide functionality in the form of device commands to interact with the associated media type. For example, making an outbound call, or sending an outbound e-mail is implemented at service objects . A service object  is usually associated with a single type of media. For example, there can be service objects  for phone media and other service objects  for e-mail media. Communication server  interfaces directly with service objects  to invoke a device command.","After communication server  obtains the handle to a service object , communication server  will use the service handle directly to interact with the service object . Since service objects  are created by driver objects , service objects  can inherit some facilities from driver objects  and\/or share some resource with driver objects . For example, driver objects  can establish and maintain the physical TCP\/IP connection to a middleware server of a communication channel  and service objects  can share the connection with the driver objects .","After communication server  obtains the driver handle, communication server  uses a RequestService( ) function to request a service object  for the specified media type. The driver returns the handle of the corresponding service object  to communication server . Communication server  then uses this handle in an InvokeCommand( ) function directly to request the corresponding service object  for executing a particular type of function.","Client objects  are instantiated and implemented by communication server . The handles to client objects  are passed to service objects . Service objects  can utilize the client handles and invoke the function to be executed at communication server .","Every service object  will have its corresponding client object . Therefore, each client object  has knowledge of the media type that its corresponding service object  is using. Since service objects  can each be instantiated for different media from different driver DLLs, this one-to-one relationship allows a client object  to know the channel driver  and service object  that initiate the notification when client object  receive notification from service object .",{"@attributes":{"id":"p-0114","num":"0143"},"figref":"FIG. 1G","b":["189","120","189","183","1","183","2","183","3","183","1","183","2","183","3","179","1","179","2","179","3"]},{"@attributes":{"id":"p-0115","num":"0144"},"figref":["FIG. 1H","FIG. 1D"],"b":["189","183","183","183","183","183","183","179","179","179","170","179","179","179","179","179","179","183","183","183"]},{"@attributes":{"id":"p-0116","num":"0145"},"figref":"FIG. 1I","b":["189","189","120","189","189","130","189","189","183","189","189","189","189"]},"There are several alternatives for implementing asynchronous notification of events from middleware servers to driver objects  including:\n\n","With alternative 1, since the driver objects  are implemented as a DLL, the driver object DLL either constructs a listening thread which blocks on select( ) call until the arrival of an event, or a polling thread which periodically polls the middleware server for the arrival of event. Polling threads are useful for low-priority media type, e.g. e-mail or fax, because polling periods typically last seconds or minutes. Polling threads are not as useful to detect high-priority media events, such as phone requests, because it is desirable to report the arrival of an incoming call at any time. Listening threads generate less network traffic than polling threads, and are generally useful for high priority and low priority media, however, some types of middleware servers do not support listening threads.","To implement both polling threads and listening threads, a \u201ctask\u201d thread is required in the driver object DLL. The \u201ctask\u201d thread can be executed in driver objects  as shown in  or in service objects  as shown in .","Referring to , a task thread (or listen thread) implemented the driver objects  may be \u201cshared\u201d by all service objects . For example, this listen thread can listen for all incoming events for all service objects . Once the listen thread receives an event, the listen thread then invokes and executes the event handling function implemented at service objects .","Referring to , if the listen thread is implemented at the domain of service objects , every service object  constructs its own listen thread and the listen thread is not shared. Each listen thread is listens to a different target. For example, listen thread for user  listens for events on the first phone extension (ext.","1234), while the listen thread for user  listens for events on the second phone extension (ext. 5678).","Client objects  are a collection of function pointers implemented by Communication server  and passed to the service objects  for asynchronous event notification. In one implementation, when the listen thread in channel driver  receives an event, the following processes occur:\n\n","Communication API  includes commands and data structures to allow third parties to develop applications that can integrate with client\/server system . The data structures include arrays for passing data elements such as an agent's key value element, key value parameters, and string parameter lists.","The following provide examples of runtime status flags that can be used in communication API :",{"@attributes":{"id":"p-0126","num":"0162"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NOTSUPPORTED = 1;","Command is not supported"]},{"entry":["DISABLED = 2;","Command is disabled at this time"]},{"entry":["CHECKED = 4;","Command is in \u201cchecked\u201d state, for example"]},{"entry":[{},"when agent is in busy mode the \u201cbusy\u201d"]},{"entry":[{},"command will be \u201cchecked\u201d"]},{"entry":["BLINKING = 8;","This is special effect flag to enable the blinking"]},{"entry":[{},"\u201canswer call\u201d command"]},{"entry":["NOPARAMSOK = 16;","Command does not require any parameters to"]},{"entry":[{},"execute"]},{"entry":["STRPARAMSOK = 32;","Command can be executed by providing single"]},{"entry":[{},"unnamed string parameters. Such commands"]},{"entry":[{},"are invoked when the agent types something"]},{"entry":[{},"in the edit control of the communication"]},{"entry":[{},"toolbar 105 and clicks the corresponding"]},{"entry":[{},"button."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The following provide examples of commands that can be used in one embodiment of communication API :","The MediaType command is used from channel driver  to provide the media type. The media-type-string is passed to the channel driver  at CreateISCDriverInstance( ).","PHONECONTROL=1","CALLROUTING=2","EMAIL=3","FAX=4","WEBCALL=5","WEBCHAT=6","Channel driver  uses the CommandTypeEx function to request different services, such as making calls and sending messages, from communication server .","The SCObjectype function is used to monitor the communication objects, which can be represented by the following parameter values:","OB_LINK=1","SWITCH=2","QUEUE=3","TELESET=4","DN=5","AGENT=6","CALL=7","CALLROUT=8","EMAIL=9","FAX=10","WEBCALL=11","WEBCHAT=12","OTHERS=1000","The function ObjectProperty can be used to provide properties of monitored communication objects, such as:","OP_ONOFF=1","OP_AGENTID=2","OP_NOTREADY=4","OP_BUSY=5","OP_DESCRIPTION=7","OP_TIMEINQUEUE=9","OP_QUEUEID=12","OP_ISLOGON=13","Channel Driver Functions","In one embodiment, a driver objects  within each of channel drivers  include the following functions:","FreeSCStrParamList is invoked by communications server  to release the memory which is initially allocated by channel drivers .\n\n","RequestCommandEventList is invoked by communications server  to query the list of device commands and device events supported by the channel drivers .","FreeSCStrParamList( ) is invoked by communication server  to release memory.","RequestCommandEventList is invoked to generate lists of commands and events that are implemented for a particular media type. The parameters can include an input parameter specifying the media type, and output parameters that include lists of the commands and events.","CreateISCDriverInstance is invoked to create a channel driver . The following parameters can be used:\n\n","RequestService requests media functions from the channel driver . The following parameters can be used:\n\n","ReleaseISCDriverInstance is invoked by communication server  to release the driver instance specified by the driver handle supplied as a parameter.","Service Object Functions","In one embodiment, service objects  within each of channel drivers  can include the following functions:","ReleaseISCServiceInstance is invoked to release the service object's handle.","NotifyEventHandlingFinished is invoked by communications server  to notify the channel driver  that the event handling is complete and the channel driver  can move on or continue the process. This function is invoked to respond to HandleEvent's notifyWhenDone parameter. The following parameter list can be used:\n\n","InvokeCommand is invoked by communications server  to invoke a driver command. The following parameter list can be used:\n\n","InvokeCommandEx is invoked by communications server  to invoke a certain type of command. The following parameter list can be used:\n\n","ReleaseWorkItem is invoked by communication server  to request release of a work item. Parameters can include:\n\n","SuspendWorkItem is invoked by communication server  to request the service object to suspend a work item. Parameters can include:\n\n","ResumeWorkItem is invoked by communication server  to request the service object to resume a work item. Parameters can include:\n\n","HandleQueuedEvent is invoked by communication server  to pass an event previously queued in UQ system  to the service object for handling. The channel driver  can treat this as an incoming media event from the middleware server. Parameters can include:\n\n","CancelQueuedEvent is invoked by communication server  to notify the channel driver  that a media-event is cancelled, released, or transferred by UQ system . This function is the companion function of HandleQueuedEvent( ). The following parameters can be used:\n\n","The following are examples of functions that can be included in Client Objects . The interface to these functions can be implemented with a function pointer so that driver objects  do not need to link to any libraries in communication server .","RequestService( ) issues a request from client objects  to driver objects . The CLIENT_INTERFACE object and the CLIENT_HANDLE are passed as parameters.","ReleaseClientInstance causes driver object  to release a client object's handle.","BeginBatch and Endbatch are designed to saving network overhead. The ISC_CLIENT_INTERFACE function calls between BeginBatch and EndBatch will be cached and sent out at EndBatch call. These two functions can be used at the discretion of the driver object . This is the example usage,",{"@attributes":{"id":"p-0180","num":"0251"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003BeginBatch_Helper(clientInterface);"},{"entry":"\u2003\u2003\u2003\u2003\u2003CacheCommandInformation_Helper(clientInterface, ...);"},{"entry":"\u2003\u2003\u2003\u2003\u2003<-- cached"},{"entry":"\u2003\u2003\u2003; ; ; ;\/\/ some processing"},{"entry":"\u2003\u2003\u2003if (error)"},{"entry":"\u2003\u2003\u2003\u2003\u2003HandleError_Helper(clientInterface, ...); <-- cached"},{"entry":"\u2003\u2003\u2003HandleEvent_Helper(clientInterface, ...); <-- cached"},{"entry":"\u2003\u2003\u2003EndBatch_Helper(clientInterface); <-- All requests will be sent"},{"entry":"out in one request"},{"entry":"\u2003*\/"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"HandleEvent is used to handle the named event received from the driver, using the given fields. By calling this method, the driver notifies the client objects  of the event, such as a call coming in on the monitored teleset. The following is the parameter list:\n\n","ShowStatusText displays textual status information in the status line of the client objects . The following is the parameter list:\n\n","HandleError handles asynchronous errors and logs them to an error log file. The following parameters can be used:\n\n","CacheCommandInformation is used to notify the client objects  about command status caching. The following parameters can be used:\n\n","UpdateObjectInformation is used to notify the client objects  about status change of objects. The following parameters can be used:\n\n","IndicateNewWorkItem notifies client objects  about the arrival of new inbound work item(e.g. call, e-mail or fax). The following parameters can be used:\n\n","WorkItemStarted notifies client objects  that the agent has started working on one particular work item. This happens when (1) the agent answers a call and the call is connected, or (2) the agent accepts a e-mail\/fax work item. In response, client objects  set the work item identified by \u201ctrackingID\u201d as the active work item and start tracking this work item. The agent will be treated as talking or working. The start time of this work item will be recorded by client objects . The following parameters can be used:\n\n","WorkItemReleased is used to notify client objects  that a particular work item is released. This happens when (1) the agent releases a call and the call is disconnected, or (2) the agent completes an e-mail\/fax work item. In response, client objects  stop tracking this work item and remove this work item. The following parameters can be used:\n\n","CleanAllWorkItems notifies client objects  that all work items stored in client objects  should be removed.","WorkItemSuspended notifies client objects  that a work item is suspended. This happens when (1) the agent puts a call to hold, or (2) the agent suspends an e-mail\/fax work item. The driver implementation calls this function when suspension is done. In response, client objects  save the working context for this particular work item. The following parameter can be used:\n\n","WorkItemResumed notifies client objects  that a suspended work item is resumed. This happens when (1) the agent unholds a call and the call is retrieved, or (2) the agent resumes an e-mail\/fax work item. The driver objects  call this function when restoring is complete. In response, client objects  restore the working context(screen+work-tracking obj) and set the active work item as the one identified by \u201ctrackingID\u201d. The following parameters can be used:\n\n","Note that other functions and parameters can be included in communication API  instead of, or in addition to, the functions listed herein.","Universal Queuing System","UQ system  queues requests for all types of media until an agent is assigned to the request. As agents become available (either by an agent logging in, finishing a task, or due to a change in state or assignment), UQ system  pushes a work item from a communication channel to an agent, and removes the work item from the respective queue. In one implementation, when multiple work items are routed to an agent, the work item that arrived first is presented to the agent and the other work item is returned to its respective queue and rerouted\/pushed to the next available agent that is capable of handling the particular work item.","UQ system  includes UQ receiver  and UQ requester  that interface with UQ engine  via UQ server . An enterprise application integration (EAI) server  can be included in system  to receive messages from UQ system . In one embodiment, web server  receives the message and sends it to EAI server . EAI server  packages the messages using a suitable protocol, such as simplified object access protocol (SOAP), and transmits it to UQ receiver server . In other embodiments that do not include EAI server , the message can be sent directly to UQ receiver server  using a suitable message format and transport protocol.","UQ Configuration",{"@attributes":{"id":"p-0195","num":"0295"},"figref":"FIGS. 1A-E","b":["3","104","310","102","190","102","102","102","109"]},"UQ Business Service","UQ system  interfaces with UQ requester server  and web server  via UQ business service . UQ business service  places information received from UQ system  into appropriate data structures used by SRM API . UQ business service  places information in SRM API  data structures into commands and parameters recognized and used by UQ system .","In one embodiment, UQ business service  includes the following functions, with input and output parameters shown in parentheses, for initializing and communicating with the UQ system :\n\n","The foregoing lists are examples of functions that can be included in UQ business service . Other functions can be included in addition to, or instead of, these examples. Some of the functions include return codes and\/or state codes to indicate whether a requested function was performed successfully and\/or the state of UQ system , a work item, or an agent. The following lists provide examples of codes that are used as parameters in the preceding functions:",{"@attributes":{"id":"p-0199","num":"0375"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Return Code"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","Success"]},{"entry":["1","Success_More_Status"]},{"entry":["2","Error_Uq_Initialized"]},{"entry":["3","Error_Uq_Not_Initialized"]},{"entry":["4","Error_Failed"]},{"entry":["5","Error_System_Wrong_Api"]},{"entry":["6","Error_System_Initialization_Failed"]},{"entry":["7","Error_Agent_Setting_Invalid_State"]},{"entry":["8","Error_Agent_Undefined"]},{"entry":["9","Error_Agent_Unable_To_Change_Skill"]},{"entry":["10","Error_Queue_Not_Initialized"]},{"entry":["11","Error_Queue_Undefined"]},{"entry":["12","Error_Queue_Capacity_Exceeded"]},{"entry":["13","Error_Workitem_Adding_Failed"]},{"entry":["14","Error_Workitem_Failed_Change_State"]},{"entry":["15","Error_Unknown_Media"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0200","num":"0376"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Agent State"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","Available"]},{"entry":["2","Logout"]},{"entry":["3","Busy"]},{"entry":["4","AuxWork"]},{"entry":["5","InitAuxWork"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0201","num":"0377"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Media Mode"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","Available"]},{"entry":["2","Unavailable"]},{"entry":["3","Busy"]},{"entry":["4","Wrap_Up"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0202","num":"0378"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Operation Reason Code"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","Setting_Invalid_State"]},{"entry":["2","Agent_Not_Available"]},{"entry":["3","Route_Undefined"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0203","num":"0379"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Work Item State"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","Active"]},{"entry":["2","Wrap_Up"]},{"entry":["3","Alerting"]},{"entry":["4","Completed"]},{"entry":["5","Queued"]},{"entry":["6","Scheduled"]},{"entry":["7","On_Hold"]},{"entry":["8","Received"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"UQ driver  handles packing and unpacking information using appropriate data transfer protocols for outgoing and incoming messages. In one implementation, for example, HTTP is used to communicate messages to and from UQ system . Web server  converts information in HTTP format to another suitable transport protocol which UQ driver  unpacks for use by UQ business service  in UQ receiver server . In other embodiments, other protocols known in the art can be used instead of, or in addition to, HTTP.","In one embodiment, UQ business service  includes functions and entry points as described herein that are invoked to initialize and communicate with UQ system  regarding the state of an agent, the skills of an agent, state of a work item, errors, alarms, and responses to a request. For example, during initialization, the function UQOpenConnection is invoked to inform UQ system  about the presence of each client.","When UQOpenConnection is invoked, UQ business service  determines whether rules need to be uploaded to UQ system . If so, UQ business service  invokes UQRulesInit to provide UQ system  with a list of rule definitions for generating a route rules list and an escalation rules list. After successfully downloading the rules, UQ system  is ready to accept requests.","When a client does not need service from UQ system , the function UQDisconnect can be invoked to disconnect clients  from UQ system . However, UQ system  can continue operation to serve other clients.","UQ Routing","UQ engine  defines a route for processing each work item. For example, if a work item is a fax requiring response from an agent with knowledge of computer networking, the UQ engine  would define a route that specifies an agent with computer networking skills. An agent can transfer the work item to a route queue using the functions TransferWorkItemToRoute(Route configuration Name) or BlindTransferWorkItemToAgent(agentID) if the agent is not able to respond to the work item. The skill requirements for the work item can be changed before invoking the transfer if the agent determines that a different skill is necessary to respond to the work item. In one embodiment, route points are generated, wherein each route point has specific skill requirements. When a work item is to be transferred to another point, the transferring agent can choose a route point from a pop up list, for example. The list can include the option to either list all agents or all route points.","UQ API","In one embodiment, a system  () in accordance with the present invention includes an application programmer's interface (UQ API)  for UQ system . For example, the interface can translate information in one format, such as simplified object access protocol (SOAP) used by UQ business service  () to an extensible markup language (XML) format used in UQ system . UQ API  can also translate information between other formats suitable for use in business service  and UQ system . Alternatively, the same format can be used throughout system , thereby eliminating the need for UQ API .","In one embodiment, a user interface for entering and editing agent skills is provided. An example of an agent skill graphical user interface (GUI) is described in U.S. patent application Ser. No. 09\/823,531, entitled \u201cUser Interface for Multi-Channel Communication\u201d, which application was filed on the same day and is assigned to the same assignee as the present application and is incorporated by reference herein. The agent skill GUI includes fields for selecting, entering and editing agent information including name, employee number, job title, login name, contact information, skills, and the level of expertise for each skill item. After a client updates the skills of an agent through the agent skill GUI, the ChangeAgentSkill function in UQ business service  can be used to update agent information in UQ system .","UQ API Data Structures","Tables representing data structures that are used in one embodiment of UQ API  for communicating information between UQ system  and communication server  are provided in patent application Ser. No. 09\/823,590 entitled \u201cSystem and Method for Multi-Channel Communication Queuing,\u201d as previously incorporated by reference herein.","Example Interface for CS\/UQ Communications","A more specific example of an inter-module interface according to embodiments of the present invention is now defined. As previously noted, no library or DLL is needed before a UQ driver using the interface can be developed. In the same manner as a regular DLL, however, the interface defines a collection of export functions. These export functions are the entry points for applications to either request a service (send a command) or data (send a request or a notification) from another module. An implementation overview is now provided.","The first step is the configuration of UQ. Certain basic information is required in order for CS to communicate with UQ. The requisite information includes UQ server name and UQ listening port. This information is in a UQ configuration table, such as that previously described. There is also information about the preference for this UQ operation. An example of such preferences is whether an agent should be auto-ready after login or auto-auxwork after login. Such information will be in the CS configuration table for each agent. Therefore, the behavior of each configuration can be different. Those pieces of information are be name value pair information, fundamentally. Such information is described in greater detail in patent application Ser. No. 09\/823,590 entitled \u201cSystem and Method for Multi-Channel Communication Queuing,\u201d as previously incorporated by reference herein.","The following is a general example of using an HTTP POST or GET message in a system such as that described herein:\n\n",{"@attributes":{"id":"p-0215","num":"0396"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"URL = http:\/\/<webserver>\/<path>\/start.swe"]},{"entry":[{},"HTTP Body = <SOAP-ENV:Envelope xmlns:SOAP-"]},{"entry":[{},"ENV=\u201chttp:\/\/soapserver.com\/uq\/envelope\u201d SOAP-"]},{"entry":[{},"ENV:encodingStyle=\u201chttp:\/\/soapserver.com\/uq\/encoding\u201d>"]},{"entry":[{},"\u2003\u2003<SOAP-ENV:Body>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<HandleAgentStateChange>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<AgentID>Bond007<\/AgentID>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<NewAgentState>3<\/NewAgentState>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<\/HandlAgentStateChange>"]},{"entry":[{},"\u2003\u2003<\/SOAP-ENV:Body>"]},{"entry":[{},"<\/SOAP-ENV:Envelope>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0100","list-style":"none"},"li":"URL=http:\/\/<webserver>\/<path>\/start.swe?SWEExtCmd=Logoff"}},"When a UQ client starts, the UQ client first uses UQOpenConnection( ) to open a connection to UQ. This is not necessarily a one-to-one connection, but rather a mechanism to inform UQ that one more client desires to use the facilities provided by UQ. There is typically only one connection from CS to UQ. CS sends requests via UQ business service to US via an HTTP connection, as described elsewhere herein.","Using the UQOpenConnection, a UQ client chooses which UQ configuration to use. UQ business service packages the message together along with information needed by UQ. Then the UQ business service sends the message to UQ. Information needed by UQ includes \u201cUQ receiver server name\u201d and \u201cUQ receiver Port\u201d. UQ uses these two pieces of information to determine where the asynchronous response will be sent. Therefore, if there is a need to support multiple receivers, several UQ configurations can be employed. For UQ clients that are not agents, such UQ clients choose their UQ configuration or use the default. For agent, each CS configuration contains the parameter \u201cUQ ConfigurationName\u201d. It is this configuration that is passed to UQ business service.","In each UQ configuration, there are primary receiver parameters, including parameters such as HTTPLoginBodyTemplate, HTTPLoginURLTemplate and HTTPLogoutURLTemplate, general examples of which are given subsequently. The primary receiver is the receiver to which UQ will send the events and responses. For each request that requires an asynchronous response, there is a ConnectionID parameter. This ConnectionID is the \u201cReceiver Name\u201d and \u201cReceiver Port\u201d. In this manner, UQ determines where the response should be sent.","Each UQ client uses UQOpenConnection to inform UQ about the client's presence. This UQOpenConnection( ) also contains information about the existence of a receiver on the CS side. After a successful initialization, UQ should be ready, but will typically not be operational. UQ then receives UQRulesInit( ). This call passes a list of rules definition to UQ. Based on the information thus received, UQ is able to build the route rules list and escalation rules list. After this call, UQ is ready to accept request. It should be noted that there should only be one such call from CS to UQ. Although multiple UQRulesInit( ) does not cause errors, such multiple calls are a waste of system resources. For subsequent UQRulesInit( ) calls, the call returns SUQ_ERROR_UQ_INITIALIZED as the error code. Because subsequent UQRulesInit( ) calls will wrap out all existing rules, UQReplaceRules should be used after the initial rules download. After a successful rules download, UQ is ready to provide services using the inter-module messages described herein.","When a UQ client has completed the requisite processing, and the UQ client does not currently need further interaction with UQ, the UQ client calls UQDisconnect( ) to disconnect itself from UQ. UQ will, of course, continue to execute so as to maintain its ability to serve other UQ clients. If UQ fails to detect further connections, UQ can assume that the UQ service is no longer needed. UQ continues to be operational and awaits new connection requests at that point, however.","There are several method entry points in the CS\/UQ interface. Those entry points allow UQ to inform CS about state of an agent, state of a work item, errors, alarms, response(s) to a request and the like. Some of the method calls are for CS to request service from UQ. Some of those methods are asynchronous. Therefore, the result may be available immediately. The UQ interface specifies whether a call is synchronous or asynchronous. Asynchronous function calls use a request ID, among other such parameters. The purpose of the request ID is to allow the UQ client to track the response. It is important that UQ should return the same request ID in responding to the request. It will be noted that some responses can be made via specific call-back functions and some responses can be made via HandleMessage( ).","The parameters for this function are as follows.\n\n","One of the error codes defined in the header file. Refer to the error code section for more information on the error code\n\n","HandleMessage( ) is:",{"@attributes":{"id":"p-0225","num":"0415"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["handle","same client handle as in ISUQ_CLIENT_INTERFACE"]},{"entry":["nMessageType","SUQ_MESSAGE_REQUEST_RESPONSE"]},{"entry":["nMessageCode","SUQ_ERROR_FAILED"]},{"entry":["nRequestID","the same request ID as that of the request"]},{"entry":["pParams","pParams should be empty for a successful invocation"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0226","num":"0416"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"308pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"List of parameters for various errors."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["SUQ_ERROR_FAILED","vendor specific error code"]},{"entry":["SUQ_ERROR_SYSTEM_WRONG_API","major version supported, minor version"]},{"entry":[{},"supported"]},{"entry":["SUQ_ERROR_AGENT_SETTING_INVALID_STATE","current state, state to be set"]},{"entry":["SUQ_ERROR_AGENT_UNDEFINED","agent ID"]},{"entry":["SUQ_ERROR_AGENT_UNABLE_TO_CHANGE_SKILL","agent ID, Skill, Skill Item, . . ."]},{"entry":["SUQ_ERROR_QUEUE_CAPACITY_EXCEEDED","queue ID, current capacity"]},{"entry":["SUQ_ERROR_WORKITEM_FAILED_CHANGE_STATE","current state, state to be set"]},{"entry":["SUQ_SUCCESS_MORE_STATUS","vendor specific status code"]},{"entry":["SUQ_ERROR_QUEUE_UNDEFINED","queue ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"It is sometimes necessary for UQ to inform the condition of the system as a result of some situation. For example, UQ may need to inform UQ client about certain queue exceeding its maximum capacity. This and similar situations are reported through HandleMessage( ) with the proper message type. This message received by the UQ receiver. UQ receiver then dispatches the message to UQ business service. This business service deals with handling the messages. The most common reactions are expected: log the error and report the condition to the appropriate party. Reporting can be done through the message bar. Logging in such situations is written to the database.","If the secondary receiver does not exist, errors and alarms are reported to the primary receiver, otherwise they are reported to the secondary receiver. Three different kinds of messages are reported through HandleMessage( ): response to a request, alarm and error. Response to a request is the condition after executing a request. An alarm is a condition in which the UQ client needs to know of, but does not affect the general operation of UQ. For example, of the number of work item in a route exceeds the pre-configured limit an error condition occurs. An error is condition that will affect the operation of the system. For example, an error condition exists if the UQ server is low on memory and therefore cannot accept more requests. All three kinds of conditions can be reported through HandleMessage using different in parameters in Table 2.",{"@attributes":{"id":"p-0229","num":"0419"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"406pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"List of conditions reported through HandleMessage."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter","Response to a request","Alarm","Error"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Handle","Client handle","Client handle","Client handle"]},{"entry":["SUQ_MESSAGE_TYPE","SUQ_MESSAGE_REQUEST_RESPONSE","SUQ_MESSAGE_ALARM","SUQ_MESSAGE_ERROR"]},{"entry":["nRequestID","Same request ID when request","NA","NA"]},{"entry":[{},"is submitted"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"There are several objects in the system in which state information is important. Such information is passed between UQ and CS so that the state of the object will be synchronized. For example, when UQ sets an agent state to wrap, a message will be sent to CS about the change. Table 3 describes the information sent from CS to UQ and from UQ to CS in various scenarios.",{"@attributes":{"id":"p-0231","num":"0421"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"center"}},"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"List of scenarios for CS\/UQ exchanges."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Scenario","CS Responsibility","UQ Responsibility"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Logon","Use AgentLogon( ) to log the","Synchronously respond to CS whether"]},{"entry":[{},"agent to UQ","the logon is successful or not. Also"]},{"entry":[{},{},"report the current state of the agent"]},{"entry":["Logout","Use AgentLogout( ) to log the","Synchronously respond to CS whether"]},{"entry":[{},"agent out of UQ","the logoff is successful or not. Also"]},{"entry":[{},{},"report the current state of the agent"]},{"entry":["Initiate Auxwork","Use AgentInitAuxWork( ) to","Synchronously respond to CS that the"]},{"entry":[{},"initiate aux work. Typically,","request has been accepted. When the"]},{"entry":[{},"agent is still working on work","agent is finally being set to AuxWork"]},{"entry":[{},"item. Initiating aux work will","mode, the changes will be reported"]},{"entry":[{},"inform UQ to put the agent into","through HandleAgentStateChange( )."]},{"entry":[{},"auxwork mode when all the"]},{"entry":[{},"work items are completed."]},{"entry":["Request for Available","Use AgentAvailable( ) to request","Synchronously respond to CS whether"]},{"entry":[{},"to put the agent into available","the request is successful or not. Also"]},{"entry":[{},"state","report the current state of the agent."]},{"entry":["Wrap-up\/Complete\/","Use WrapUpWorkItem( )\/","Synchronously respond to CS whether"]},{"entry":["Complete Wrap a work","CompleteWorkItem\/CompleteWrap","the request is successful or not. Also"]},{"entry":["item","WorkItem to inform UQ that","report the new agent state and new work"]},{"entry":[{},"agent is trying to wrap up or","item state as a result of this request."]},{"entry":[{},"complete or finishing wrap up"]},{"entry":[{},"for the work item."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Examples are now provided showing the manner in which requests from clients are processed by one embodiment of system .","Initialization and Rules Download","Communication server background mode server  uses UQOpenConnection function in UQ business service  to connect clients with UQ system . In one embodiment, two or more configurations can be available to initialize UQ business service , including a default configuration. The default UQ configuration parameters are used if no other configuration specified. The UQPropertyInfo parameters of UQOpenConnection included PrimaryReceiverName and PrimaryReceiverPort which identify the location of the UQ receiver server .","UQOpenConnection can be invoked multiple times to connect multiple UQ receiver servers  to UQ system , and UQ system  maintains a list of all connections to UQ receiver servers . After a successful UQOpenConnection, the function UQInitRules can be invoked to download agent skill information, as well as rules for escalating agents and specifying routes. In one embodiment, UQInitRules is invoked only once during initialization, and the function UQReplaceRules is used to update the rules once they have been initialized. The parameter ERROR_UQ_INITIALIZED indicates an error if UQInitRules if subsequently invoked. An indicator of whether the initialization was successful is supplied in the Return parameter associated with the UQInitRules function.","Agent Logon","New agents invoke UQOpenConnection through business service  to inform UQ system  that there is a new agent. The function AgentLogon is then invoked by UQ business service  to log the agent into UQ system . UQ business service  then sends a message that includes the agent skill information to UQ system .","If multiple UQ receiver servers  are connected, each invocation of the function AgentLogon includes information about the UQ receiver server  that the agent is associated with. Agent information also includes information including auto-available setting and auto-wrap setting. UQ system  returns either the error if the invocation to AgentLogon fails, or returns the new agent state if the logon operation was successful.","Email Arrival","When communication server  receives an e-mail message, it sends the message along with related information regarding the client who sent the message to business service  in UQ requester server . Business service  transfers the e-mail message and related information to UQ system  via the AddWorkItem function. UQ system  determines whether to accept the work item and issues a response to communication server  via business service  in UQ receiver server  indicating whether the work item was accepted using the status parameter in the HandleWorkItem function.","UQ Delivers Work Item","UQ system  determines an agent for a work item and sends a message that the work item was assigned to an agent to communication server  via the UQ receiver server  associated with the agent. UQ system  then transmits a message via the HandleWorkItem function to the UQ receiver server  associated with the agent. The ProcessEvents function in UQ business service  is then invoked to dispatch the message to an agent via SRM API . The agent invokes the WorkItemAccept function to inform UQ system  that it received the work item.","UQ System Issues an Alarm or Error","As an example of one method for UQ system  to notify communication server  of an error or alarm, assume UQ system  determines that the number of requests that can be handled by one of the communication channels has exceeded a predefined threshold. UQ system  sends a return code to UQ receiver server  via the HandleError function indicating that the queue capacity has been exceeded. If an EAI server  is included in the particular embodiment of the invention, the EAI server  receives the message and invokes the function \u201cProcessEvents\u201d in UQ business service . The error message can be logged and broadcast to the component that issued the request. Alarm messages are handled in a similar manner. The error\/alarm can be broadcast visually, aurally, textually, and\/or by any other suitable means known in the art.","UQ System Sends Statistics to Communication Server","A client or other component in system  () can request statistics regarding its communication channels, agents, and\/or the routing of agents, from UQ system  via SetChannelStatInterval, StartAgentStat, and StopAgentStat functions. UQ system  generates the requested statistics and transmits them to UQ receiver . When UQ receiver  receives the message, it can log the statistics and broadcast them through an interface such as a message bar mechanism, as known in the art. Agent configurations can be set up to request statistics on a continual basis. The statistics can include information for work items completed as well as work items in the agent's queue.","Agent Accepts a Work Item","When an agent is in AuxWork mode, the agent can choose a work item from the queue through a user interface such as the toolbar . When a work item is selected, UQ system  is notified via the RequestWorkableItemList function in business service . If the work item is available, the function will indicate a successful selection through the return parameter and the work item is delivered via the HandleWorkItem function. The RequestWorkableItemList function can return an error indicator if the work item is not available for the agent.","Call Routing","When UQ system  receives a route request, UQ system  determines the agent to assign to the work item and sends a message to UQ receiver server  that includes the assigned agent and the work item. If UQ system  cannot find an agent to assign within the time allowed, the request is placed in a waiting queue as implemented by UQ engine . It is important to note that many different types of commercially available queuing engines  can be used in UQ system .","Automated Call Distribution (ACD) Interaction With The UQ System","Referring to  and , an agent can be connected to receive calls directly from ACD switch E, without interacting with UQ system . Agents can also be connected to receive calls from ACD switch E as well as other work items through UQ system . This type of configuration is referred to auxiliary work mode (AuxWork mode). An agent can place themselves in the AuxWork state through an interface such as toolbar , or an administrator may configure the agent to enter the AuxWork state.","In one implementation of AuxWork mode, ACD switch E dispatches a call to an agent, and the agent informs session mode communication server  when it answers the call. Session mode communication server  then relays the notice to UQ system . At this point, UQ system  asks session mode communication server  to place the agent in the AuxWork state using, for example, the AgentInitAuxwork function as described herein, after the agent finishes the call.","When the agent finishes the call, it informs session mode communication server  that the call is done, and the session mode communication server  in turn informs UQ system  that the call is finished. UQ system  then determines whether there is a suitable work item to assign to the agent based on the media channels in the agent's configuration. If a work item is available, the work item will be sent to the agent through UQ receiver server  via UQ requester . The agent informs UQ system  when it finishes the work item. If UQ system  determines that there are no more work items for the agent, it informs session mode communication server  to set the agent's ACD mode to ready to continue receiving calls through ACD switch E.","There are several alternative implementations that can be used to place an agent in the AuxWork state. For example, an agent can default to AuxWork state. UQ system  can be notified when ACD switch E receives a call that should be handled by the agent, and the agent notified to suspend processing a work item, such as a response to an e-mail request, to take the call. The agent notifies UQ system  when the call is completed, and returns to processing the suspended work item.","Agent State Change","When a work item is dispatched to an agent, the agent invokes the AcceptWorkItem function to accept the work item. Output parameters in AcceptWorkItem inform UQ system  of the new agent state and work item state. When the agent completes the work item, it invokes the CompleteWorkItem function to inform UQ system  of the new agent state and work item state.","An auto-wrap option can be set in the agent's configuration table that allows an agent time to wrap up a work item upon completion. Agents can select an interface option that invokes the AgentAvailable function to indicate that they are out of wrap up mode and ready to accept another work item. UQ system  changes the status of the work item to Complete and places the agent in the Auxwork state if AgentInitAuxWork function has been invoked. If the AgentInitAuxWork function is not invoked, the agent's state is set to BUSY if there are other work items in the queue that the agent can handle. Otherwise the agent is placed in the Available state.","Work Item Cancelled","A situation can arise when a work item is cancelled after it has been assigned to an agent, but before the agent has accepted the work item. Such a situation may arise, for example, when a caller hangs up while waiting. In this case, the UQ system  informs the client that the work item is cancelled through HandleWorkItemStatus and a signal, such as a blinking button on the agent's user interface display, can be changed to indicate that the work item was removed.","PBX And Email with PBX Higher Priority","The term private branch exchange (PBX) refers to a subscriber-owned telecommunications exchange that usually includes access to the public switched network. When an e-mail and a PBX work item are queued, UQ system  uses the priority set forth in the route rules to determine which media will have higher priority over the other. Client configurations typically give PBX work items higher priority than e-mail.","Work Item Journal","When a work item is completed, UQ system  sends a work item journal entry to communication server  via the HandleJournal function. The journal entry includes information to identify whether the journal entry pertains to the agent state history and\/or the work item escalation history of the work item.","System Failure","If the connection between UQ system  and session mode communication server  fails, UQ system  will remove all agents associated with session mode communication server  and mark all work items as \u201cComplete\u201d with a failure error code.","Multiple Requesters and Receivers","When UQ business service  is instantiated, it will load the UQ configuration including the sender's server component name and the workflow name. In one embodiment, the sender server component is the EAI server , which is transparent to clients . If there are multiple instances of EAI server , communication server  routes the request to the appropriate component in communication server . A load balancer can be included to balance the load between multiple instances of EAI server .","Each work item sent by UQ clients include a login and a client key associated with the work item. When the same work item is being returned form UQ system  as a result of either an agent assignment or problem with the work item, the login and the client key are used to route the result to the right client.","Blind Transfer of a Work Item to an Agent","An agent can use the function BlindTransferWorkItemToAgent to transfer a work item to another agent if the agent cannot respond to the work item, or thinks that another agent is better qualified to respond. If the transferred agent is not available to accept the work item being transferred, the work item will be queued until the agent is available.","Consultative Transfer of a Work Item to an Agent","An agent can invoke the TransferWorkItemToAgent function to transfer a work item to another agent to consult with the other agent regarding the work item. If the agent is not available for consultation, UQ system  informs the agent that the other agent is not available. The agent can select whether to hold on to the work item, retry, or send the work item to a route.","Transfer Work Item to a Route","An agent can use the function TransferWorkItemToRoute to transfer a work item to along a route to another agent. This is useful, for example, when an agent receives a work item that would be handled more efficiently by an agent with other skills.","Example Data Models",{"@attributes":{"id":"p-0258","num":"0448"},"figref":["FIG. 4","FIG. 4"],"b":"100"},"Tables representing data in the Universal Queuing definition include tables designated UQ_CFG and UQ_CFG_PARAM. Table UQ_CFG defines configuration parameters for UQ system , such as the UQ server name, server port, receiver name, receiver port and the like. Table UQ_CFG_PARAM includes configuration parameters for UQ system  such as the configuration identifier and the name of the configuration.","Tables representing data in the Route definition include tables designated UQ_ROUTE, UQ_ROUTE_PROP, UQ_ROUTE_ESCL and UQ_RTESCL_RUL. Table UQ_ROUTE allows a user to define different routes for different media types, priorities and other characteristics. Table UQ_ROUTE_PROP further defines the data properties of a route. The characteristic of a route can be defined by one or more route properties. Table UQ_ROUTE_ESCL defines how the processing of a work item can be escalated because the work item has not been served for a pre-defined period of time. Each escalation process defines a way that a work item should be processed. In general, the escalation process is to generalize the skill requirement of a work item so that the chance of having the work item served is improved. Table UQ_RTESCL_RUL defines the skill requirement for each escalation rule. Each rule generalizes the skill requirement of a work item.","The table representing data in the Route Skill Map is designated UQ_SKL_MAP. Table UQ_SKL_MAP is a map between route properties and skills. For example, \u201cDNIS\u201d=\u201c8000\u201d could be translated into \u201cProduct\u201d=\u201cNT\u201d. This is basically a list of possible properties for each media. For example, e-mail has subject, CC, recipient. PBX has ANI and Language.","The table representing data in Agent Skill End Point is designated UQ_USER_MEDIA. Table UQ_USER_MEDIA represents the number of end points, also referred to as maximum number of sessions, for each media type that an agent is allowed.","Tables representing data in the Real Statistics include tables designated UQ_ROUTE_STS, UQ_AGNT_STS, UQ_MEDIA_STS and UQ_AGMD_STS. These tables store route, agent, media and agent media statistics information, respectively. In one embodiment, the statistics are sent from UQ system  to communication server  at pre-defined time intervals as specified in the UQ configuration passed to UQ system . An agent or administrator can also request statistics when desired through communication server . Some of the statistics, such as \u201cAverage Wait Time\u201d are time dependent, and therefore, the time period is also included as part of the data.","The table representing data regarding alarms and errors is designated UQ_ERR_LOG. As its name suggests, table UQ_ERR_LOG stores information regarding alarms (an alarm log) and errors (an error log).","Tables representing data in the Work Item Journal include tables designated UQ_WORK_ITEM, UQ_WKIT_ESCHS, UQ_WKIT_PROP and UQ_WKIT_TRNHS. These tables contain historical information regarding the processing history of each work item, escalation history of a work item, properties of a work item and transaction history of a work item, respectively","Tables representing data regarding historical statistics include tables designated UQ_AGENT_JRNL and UQ_AGMD_JRNL. These tables contain historical information regarding the processing history of each work item, escalation history of a work item, properties of a work item and transaction history of a work item, respectively","UQ Interface","An example of an inter-module interface definition is given in the Appendix, as noted previously. This interface defines, as its basic unit, a message. A message communicates information regarding an agent, a work item, queuing, statistics, connections, rules and other information regarding a customer relations management system such as system .","As has been noted, a message can be, for example, a command (a directive that is to cause the recipient to do something), a request (in response to which the recipient replies with requested information) or a notification (notifying the recipient of some event or autonomously providing information of some sort). Commands defined in the example interface definition in the Appendix include:\n\n","Messages are also classified as to the functions to which they relate. Defined in the Appendix are agent-related functions, work item-related functions, statistics-related functions and administrative functions (or, more specifically in the example interface definition startup\/shutdown-related functions). These can be divided as follows. Examples of agent-related functions (command\/request and response) provided in the example inter-module interface definition in the Appendix are as follows:\n\n","Certain of the messages define one-way communications, while others define two-way communications. Examples of one-way communications include those messages that allow a module to autonomously provide another module with information (e.g., an alarm). Further examples of one-way communications provided in the example inter-module interface definition in the Appendix include:\n\n","Such commands need to be supported within each module, of course, so that the command (and attendant information, if any) can be handled appropriately. This includes providing data structures that support the inter-module interface. Two sets of such data structures that support the example inter-module interface definition in the Appendix are now discussed, those for an agent skill interface and an assignment rule interface.","UQ Interface for Agent Skill","In UQ API, two function calls are defined. This function is used for reporting the change of agent state from CS to UQ. The first function can be coded as follows:",{"@attributes":{"id":"p-0273","num":"0574"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IUQAPI ISCS_ERROR ChangeAgentState"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003(ISCS_SERVICE_HANDLE","handle,"]},{"entry":[{},"\u2003\u2003const int","nRequestID,"]},{"entry":[{},"\u2003\u2003const ISCS_STRING","szAgentID,"]},{"entry":[{},"\u2003\u2003const SUQAgentState","nAgentState)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0274","num":"0575"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IUQAPI ISCS_ERROR ChangeAgentSkill"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003(ISCS_SERVICE_HANDLE","handle,"]},{"entry":[{},"\u2003\u2003const int","nRequestID,"]},{"entry":[{},"\u2003\u2003const ISCS_STRING","szAgentID,"]},{"entry":[{},"\u2003\u2003const SUQ_AgentSkillList*","pAgentSkill);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0275","num":"0576"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/*"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UQ Skill items"]},{"entry":[{},"szSkillItem"]},{"entry":[{},"name of the skill item (e.g., \u201cEnglish\u201d for Language skill)"]},{"entry":[{},"nWeight"]},{"entry":[{},"numeric representative of expertise."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"*\/"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef struct UQ_SkillItem"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"char","szSkillItem[SUQ_SKILL_ITEM_LEN];"]},{"entry":[{},"SUQSkillExpertise","nWeight;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} SUQ_SkillItem;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/*"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UQ Skill item with range"]},{"entry":[{},"nSkillItemType"]},{"entry":[{},"data type of the skill item"]},{"entry":[{},"szSkillItemLow"]},{"entry":[{},"low range of the skill item"]},{"entry":[{},"szSkillItemHigh"]},{"entry":[{},"high range of the skill item"]},{"entry":[{},"nWeight"]},{"entry":[{},"numeric representative of expertise."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"*\/"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef struct UQ_SkillItemRange"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SUQSkillItemType","nSkillItemType;"]},{"entry":[{},"char","szSkillItemLow[SUQ_SKILL_ITEM_LEN];"]},{"entry":[{},"char","szSkillItemHigh[SUQ_SKILL_ITEM_LEN];"]},{"entry":[{},"SUQSkillExpertise","nWeight;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} SUQ_SkillItemRange;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/*"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SUQ_SkillUnion"]},{"entry":[{},"Skill item could be a single value skill or could be a"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"range of skill value"},{"entry":"*\/"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef struct UQ_SkillUnion"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"union"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SUQ_SkillItemRange*","pSkillItemRange;"]},{"entry":[{},"SUQ_SkillItem*","pSkillItem;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"};"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} SUQ_SkillUnion;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/*"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UQ Agent Skill"]},{"entry":[{},"This structure defines the skill that an agent has"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"processed."},{"entry":"*\/"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef struct UQ_AgentSkill"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"char","szSkill[SUQ_SKILL_LEN];"]},{"entry":[{},"int","nSkillItemCount;"]},{"entry":[{},"SUQ_SkillUnion*","pSkillUnion;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} SUQ_AgentSkill;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/*"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UQ Agent Skill List"]},{"entry":[{},"This structure defines the agent skill set. An agent could"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"process more than one skill."},{"entry":"*\/"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef struct UQ_AgentSkillList"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int","nSkillCount;"]},{"entry":[{},"SUQ_AgentSkill*","pSkill;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} SUQ_AgentSkillList;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/*"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UQ agent end point limit"]},{"entry":[{},"define number of max sessions allowed for each media type"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"*\/"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef struct UQ_AgentMedia"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"char","szMedia[SUQ_MEDIA_TYPE_LEN];"]},{"entry":[{},"int","nNumberOfSessions;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} SUQ_AgentMedia;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/*"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UQ Agent End point List"]},{"entry":[{},"Define number of max sessions allowed for each media type"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"*\/"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef struct UQ_AgentMediaLimit"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int","nMediaCount;"]},{"entry":[{},"SUQ_AgentMedia*","pAgentMedia;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} SUQ_AgentMediaLimit;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/*"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UQ Agent Skill and media definition"]},{"entry":[{},"define the agent skill set and the active sessions"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"limitation on each channel"},{"entry":"*\/"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef struct UQ_AgentDefinition"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SUQ_AgentMediaLimit*","pAgentMedia;"]},{"entry":[{},"SUQ_AgentSkillList*","pAgentSkill;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} SUQ_AgentDefintion;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"The following defines the route and escalation rules. This structure will be passed to UQ as part of the UQInitRoute( )",{"@attributes":{"id":"p-0277","num":"0578"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/*"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Escalation Skill"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"*\/"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef struct UQ_EscSkill"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"char","szSkill[SUQ_SKILL_LEN];"]},{"entry":[{},"char","szSkillItem[SUQ_SKILL_ITEM_LEN];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} SUQ_EscSkill;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/*"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Escalation Skill List"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"*\/"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef struct UQ_EscSkillList"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int","nSkillCount;"]},{"entry":[{},"SUQ_EscSkill*","pEscSkill;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} SUQ_EscSkillList;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/*"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Escalation Rules"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"*\/"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef struct UQ_EscalationRule"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"char \u2003szEscalationName[SUQ_ESCALATION_NAME_LEN];"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"SUQ_EscSkillList*","pSkillList;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} SUQ_EscalationRule;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/*"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Route Escalation Rule List"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"*\/"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef struct UQ_EscalationRuleList"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int","nItemCount;"]},{"entry":[{},"SUQ_EscalationRule*","pItem;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} SUQ_EscalationRuleList;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/*"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UQ Route Rules"]},{"entry":[{},"This is the UQ Route Rule definition."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"*\/"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef struct UQ_RouteRules"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ISCS_UNIQUE_ID"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"szRuleID[SUQ_UNIQUE_ID_LEN];"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ISCS_STRING"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"szRuleName[SUQ_ROUTE_NAME_LEN];"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int","nPriority;"]},{"entry":[{},"ISCS_STRING","szMediaType;"]},{"entry":[{},"int","nCapThreshold;"]},{"entry":[{},"bool","bActive;"]},{"entry":[{},"SUQ_EscalationRuleList*","pEscalationRules;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} SUQ_RouteRules;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Initially, UQ receives UQOpenConnection( ) informing UQ that UQ client is starting. Once connection is successful, UQInitRules( ) will be called to transfer rules information to UQ. An example of a message using an inter-module interface according to the present invention that is an XML data representation of a routing rule appears below.",{"@attributes":{"id":"p-0279","num":"0580"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003<RouteDef>"]},{"entry":[{},"\u2003\u2003<RuleID>1234<\/RuleID>"]},{"entry":[{},"\u2003\u2003<RuleName>Test Route<\/RuleName>"]},{"entry":[{},"\u2003\u2003<Priority>1<\/Priority>"]},{"entry":[{},"\u2003\u2003<MediaType>Email<\/MediaType>"]},{"entry":[{},"\u2003\u2003<CapThreshold>200<\/CapThreshold>"]},{"entry":[{},"\u2003\u2003<ServiceLevel>120<\/ServiceLevel>"]},{"entry":[{},"\u2003\u2003<Active>true<\/Active>"]},{"entry":[{},"\u2003\u2003<EscalationRules arrayType=\u201darrayElement[1]\u201d >"]},{"entry":[{},"\u2003\u2003\u2003\u2003<arrayElement>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<EscalationName>Escalation Rule"]},{"entry":[{},"\u2003\u2003\u2003\u2003One<\/EscalationName>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<SkillList"]},{"entry":[{},"\u2003\u2003\u2003\u2003arrayElement=\u201darrayElement[1]\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<arrayElement>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<Skill>Language<\/Skill>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<SkillItem>Eng<\/SkillItem>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/arrayElement>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<\/SkillList>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<\/arrayElement>"]},{"entry":[{},"\u2003\u2003<\/EscalationRules>"]},{"entry":[{},"<\/RouteDef>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"It is appreciated that operations discussed herein may consist of (or be initiated by) directly entered commands by a computer system user or by steps executed by application specific hardware modules, but the preferred embodiment includes steps executed by software modules. The functionality of steps referred to herein may correspond to the functionality of modules or portions of modules.","The operations referred to herein may be modules or portions of modules (e.g., software, firmware or hardware modules). For example, although the described embodiment includes software modules and\/or includes manually entered user commands, the various example modules may be application specific hardware modules. The software modules discussed herein may include script, batch or other executable files, or combinations and\/or portions of such files. The software modules may include a computer program or subroutines thereof encoded on computer-readable media.","Additionally, those skilled in the art will recognize that the boundaries between modules are merely illustrative and alternative embodiments may merge modules or impose an alternative decomposition of functionality of modules. For example, the modules discussed herein may be decomposed into submodules to be executed as multiple computer processes, and, optionally, on multiple computers. Moreover, alternative embodiments may combine multiple instances of a particular module or submodule. Furthermore, those skilled in the art will recognize that the operations described in example embodiment are for illustration only. Operations may be combined or the functionality of the operations may be distributed in additional operations in accordance with the invention.","Alternatively, such actions may be embodied in the structure of circuitry that implements such functionality, such as the micro-code of a complex instruction set computer (CISC), firmware programmed into programmable or erasable\/programmable devices, the configuration of a field-programmable gate array (FPGA), the design of a gate array or full-custom application-specific integrated circuit (ASIC), or the like.","Each of the actions described herein may be executed by a module (e.g., a software module) or a portion of a module or a computer system user using, for example, a computer system such as the storage router previously mentioned, or a similar network element, as well as a computer system such as computer system . Thus, the above described method, the operations thereof and modules therefor may be executed on a computer system configured to execute the operations of the method and\/or may be executed from computer-readable media. The method may be embodied in a machine-readable and\/or computer-readable medium for configuring a computer system to execute the method. Thus, the software modules may be stored within and\/or transmitted to a computer system memory to configure the computer system to perform the functions of the module.","Such a computer system normally processes information according to a program (a list of internally stored instructions such as a particular application program and\/or an operating system) and produces resultant output information via I\/O devices. A computer process typically includes an executing (running) program or portion of a program, current program values and state information, and the resources used by the operating system to manage the execution of the process. A parent process may spawn other, child processes to help perform the overall functionality of the parent process. Because the parent process specifically spawns the child processes to perform a portion of the overall functionality of the parent process, the functions performed by child processes (and grandchild processes, etc.) may sometimes be described as being performed by the parent process.","Such a computer system typically includes multiple computer processes executing \u201cconcurrently.\u201d Often, a computer system includes a single processing unit which is capable of supporting many active processes alternately. Although multiple processes may appear to be executing concurrently, at any given point in time only one process is actually executed by the single processing unit. By rapidly changing the process executing, a computer system gives the appearance of concurrent process execution. The ability of a computer system to multiplex the computer system's resources among multiple processes in various stages of execution is called multitasking. Systems with multiple processing units, which by definition can support true concurrent processing, are called multiprocessing systems. Active processes are often referred to as executing concurrently when such processes are executed in a multitasking and\/or a multiprocessing environment.","The software modules described herein may be received by such a computer system, for example, from computer readable media. The computer readable media may be permanently, removably or remotely coupled to the computer system. The computer readable media may non-exclusively include, for example, any number of the following: magnetic storage media including disk and tape storage media. optical storage media such as compact disk media (e.g., CD-ROM, CD-R, etc.) and digital video disk storage media. nonvolatile memory storage memory including semiconductor-based memory units such as FLASH memory, EEPROM, EPROM, ROM or application specific integrated circuits. volatile storage media including registers, buffers or caches, main memory, RAM, etc. and data transmission media including computer network, point-to-point telecommunication, and carrier wave transmission media. In a UNIX-based embodiment, the software modules may be embodied in a file which may be a device, a terminal, a local or remote file, a socket, a network connection, a signal, or other expedient of communication or state change. Other new and various types of computer-readable media may be used to store and\/or transmit the software modules discussed herein. An example of such a computer system is computer system  of .","An Example Computing and Network Environment",{"@attributes":{"id":"p-0288","num":"0589"},"figref":["FIG. 6","FIG. 6"],"b":["600","610","1","620","1","620","1","610","1","620","1","610","1","620","1"]},"One or more of client computers ()-(N) and\/or one or more of servers ()-(N) may be, for example, a computer system of any appropriate design, in general, including a mainframe, a mini-computer or a personal computer system. Such a computer system typically includes a system unit having a system processor and associated volatile and non-volatile memory, one or more display monitors and keyboards, one or more diskette drives, one or more fixed disk storage devices and one or more printers. These computer systems are typically information handling systems which are designed to provide computing power to one or more users, either locally or remotely. Such a computer system may also include one or a plurality of I\/O devices (i.e., peripheral devices) which are coupled to the system processor and which perform specialized functions. Examples of I\/O devices include modems, sound and video devices and specialized communication devices. Mass storage devices such as hard disks, CD-ROM drives and magneto-optical drives may also be provided, either as an integrated or peripheral device. One such example computer system, discussed in terms of client computers ()-(N) is shown in detail in .",{"@attributes":{"id":"p-0290","num":"0591"},"figref":"FIG. 7","b":["710","620","1","710","712","710","714","716","718","720","722","724","726","728","730","732","733","734","736","738","740","742","746","712","728","747","712","730","748","712"]},"Bus  allows data communication between central processor  and system memory , which may include both read only memory (ROM) or flash memory (neither shown), and random access memory (RAM) (not shown), as previously noted. The RAM is generally the main memory into which the operating system and application programs are loaded and typically affords at least 66 megabytes of memory space. The ROM or flash memory may contain, among other code, the Basic Input-Output system (BIOS) which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system  are generally stored on and accessed via a computer readable medium, such as a hard disk drive (e.g., fixed disk ), an optical drive (e.g., CD-ROM drive ), floppy disk unit  or other storage medium. Additionally, applications may be in the form of electronic signals modulated in accordance with the application and data communication technology when accessed via network modem  or interface .","Storage interface , as with the other storage interfaces of computer system , may connect to a standard computer readable medium for storage and\/or retrieval of information, such as a fixed disk drive . Fixed disk drive  may be a part of computer system  or may be separate and accessed through other interface systems. Many other devices can be connected such as a mouse  connected to bus  via serial port , a modem  connected to bus  via serial port  and a network interface  connected directly to bus . Modem  may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider (ISP). Network interface  may provide a direct connection to a remote server via a direct network link to the Internet via a POP (point of presence). Network interface  may provide such connection using wireless techniques, including digital cellular telephone connection, Cellular Digital Packet Data (CDPD) connection, digital satellite data connection or the like.","Many other devices or subsystems (not shown) may be connected in a similar manner (e.g., bar code readers, document scanners, digital cameras and so on). Conversely, it is not necessary for all of the devices shown in  to be present to practice the present invention. The devices and subsystems may be interconnected in different ways from that shown in . The operation of a computer system such as that shown in  is readily known in the art and is not discussed in detail in this application. Code to implement the present invention may be stored in computer-readable storage media such as one or more of system memory , fixed disk , CD-ROM , or floppy disk . Additionally, computer system  may be any kind of computing device, and so includes personal data assistants (PDAs), network appliance, X-window terminal or other such computing device. The operating system provided on computer system  may be MS-DOS\u00ae, MS-WINDOWS\u00ae, OS\/2\u00ae, UNIX\u00ae, Linux\u00ae or other known operating system. Computer system  also supports a number of Internet access tools, including, for example, an HTTP-compliant web browser having a JavaScript interpreter, such as Netscape Navigator\u00ae 8.0, Microsoft Explorer\u00ae 8.0 and the like.","Moreover, regarding the signals described herein, those skilled in the art will recognize that a signal may be directly transmitted from a first block to a second block, or a signal may be modified (e.g., amplified, attenuated, delayed, latched, buffered, inverted, filtered or otherwise modified) between the blocks. Although the signals of the above described embodiment are characterized as transmitted from one block to the next, other embodiments of the present invention may include modified signals in place of such directly transmitted signals as long as the informational and\/or functional aspect of the signal is transmitted between blocks. To some extent, a signal input at a second block may be conceptualized as a second signal derived from a first signal output from a first block due to physical limitations of the circuitry involved (e.g., there will inevitably be some attenuation and delay). Therefore, as used herein, a second signal derived from a first signal includes the first signal or any modifications to the first signal, whether due to circuit limitations or due to passage through other circuit elements which do not change the informational and\/or final functional aspect of the first signal.","The foregoing described embodiment wherein the different components are contained within different other components (e.g., the various elements shown as components of computer system ). It is to be understood that such depicted architectures are merely examples, and that in fact many other architectures can be implemented which achieve the same functionality. In an abstract, but still definite sense, any arrangement of components to achieve the same functionality is effectively \u201cassociated\u201d such that the desired functionality is achieved. Hence, any two components herein combined to achieve a particular functionality can be seen as \u201cassociated with\u201d each other such that the desired functionality is achieved, irrespective of architectures or intermediate components. Likewise, any two components so associated can also be viewed as being \u201coperably connected\u201d, or \u201coperably coupled\u201d, to each other to achieve the desired functionality.",{"@attributes":{"id":"p-0296","num":"0597"},"figref":["FIG. 8","FIG. 8"],"b":["800","710","810","820","830","840","810","820","830","840","710","747","748","710","810","710","820","830","840","710","820","830","840","840"]},"Referring to ,  and , a browser running on computer system  employs a TCP\/IP connection to pass a request to server , which can run an HTTP \u201cservice\u201d (e.g., under the WINDOWS\u00ae operating system) or a \u201cdaemon\u201d (e.g., under the UNIX\u00ae operating system), for example. Such a request can be processed, for example, by contacting an HTTP server employing a protocol that can be used to communicate between the HTTP server and the client computer. The HTTP server then responds to the protocol, typically by sending a \u201cweb page\u201d formatted as an HTML file. The browser interprets the HTML file and may form a visual representation of the same using local resources (e.g., fonts and colors).","While particular embodiments of the present invention have been shown and described, it will be obvious to those skilled in the art that, based upon the teachings herein, changes and modifications may be made without departing from this invention and its broader aspects and, therefore, the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of this invention. Furthermore, it is to be understood that the invention is solely defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention may be better understood, and its numerous objects, features, and advantages made apparent to those skilled in the art by referencing the accompanying drawings.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 1A through 1D"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1E"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1F"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1G"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1H"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1I"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1J"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1K"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 2","FIGS. 1A through 1D"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 4","FIGS. 1A through 1D"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 7","FIG. 6"]}]},"DETDESC":[{},{}]}
