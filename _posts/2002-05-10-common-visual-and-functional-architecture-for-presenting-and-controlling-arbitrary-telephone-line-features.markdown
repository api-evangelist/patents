---
title: Common visual and functional architecture for presenting and controlling arbitrary telephone line features
abstract: A user interface for screen phones monitors telephone line state information and displays user interface controls and telephone line status information dependent on the telephone line state. The user interface includes a display element referred to as a call slip that expands and collapses in response to changes in telephone line state and user input. The call slip updates the information that it displays based on telephone line state changes and information communicated from one or more telephony monitoring applications. The call slip displays user interface controls representing tasks that are dependent on information derived from a telephone call, such as caller ID information. The software used to control the display of call slips and to monitor telephone line state is part of a software platform that may be customized for a particular device or application. For example, an implementer may select default display elements and monitoring application programs from the platform and add custom display elements that communicate with the default programs via their programming interfaces.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06975712&OS=06975712&RS=06975712
owner: Microsoft Corporation
number: 06975712
owner_city: Redmond
owner_country: US
publication_date: 20020510
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION","CONCLUSION"],"p":["This patent application is a continuation of and claims priority to U.S. patent application Ser. No. 09\/383,039, filed Aug. 25, 1999 now U.S. Pat. No. 6,389,124, which claims priority to U.S. Provisional Patent Application Nos. 60\/098,187, filed Aug. 26, 1998, and 60\/122,975, filed Mar. 3, 1999, all of which are hereby incorporated herein by reference.","The invention relates to telephony systems, and more particularly, relates to graphical user interfaces and software architectures for telephony devices.","Today's telephony devices are becoming increasingly more sophisticated. A driving force of this trend is the convergence of functionality typically found in computers with functionality found in conventional telephones. One significant example of the convergence of phones and computers is a class of devices called screen phones. Though the specific hardware configuration of these devices varies widely, they typically share common elements such as a screen display, hardware buttons, telephone line interface hardware and a processor. Despite the advanced features that many of these devices provide, there is still need for improvement in many areas.","First, some screen phones available today have a small text-based display, typically arranged in a matrix of characters, and hardware buttons around the screen that are associated with specific screen areas to create virtual or soft buttons. This allows new functions to be programmed in to the buttons over time, or as a result of navigating through menu choices with the buttons. Usability testing and research have shown that the mapping of a physical button and the on-screen text is often confusing and hard to follow.","Another problem is that traditional enhanced telephony services are difficult to use (such as call forwarding) because they require the user to remember arbitrary sequences of key-presses, and remember sequences of operations without explicit feedback (feedback tones or clicks).","An additional problem with the screen phone industry is the lack of an extendable, flexible software architecture that allows others to build a rich array of functions and application programs. Screen phones tend to be highly specialized devices constructed with special hardware and software to support a set of features. As such, they are difficult to customize or extend to support new features.","This lack of flexibility is particularly problematic in view of the lack of uniformity in the telephone network\u2014where infrastructure components vary from region to region, country to country, and service provider to service provider. Each area may provide Caller ID, but these areas may supply it using different technologies, or supply Call Forwarding, but use different access codes.","The problems associated with architectural flexibility extend beyond the challenges raised by differences in central office switching, hardware, and configuration. The underlying telecommunication network infrastructure is changing as well, and telephony devices must be adaptable to these infrastructures. For example, the telephone architecture should support choices between conventional infrastructures such as PSTN and ISDN. Looking to the future, the use of the Internet Protocol may become more commonplace as a telephone network infrastructure, and thus, there is a need to make telephony architectures readily adaptable to a variety of network infrastructures.","The invention provides a user interface and related telephony program architecture for telephony devices. While aspects of the invention are particularly well suited for telephones with screen displays (e.g., screen phones), they apply to other telephony devices as well such as modems, answering machines and personal digital assistants.","One aspect of the invention is a user interface (UI) feature of a telephony device, which exposes line management and call control features in a user interface element called a \u201ccall slip.\u201d This user interface includes a variety of features that are unique, whether used alone or in combination with other features.","The call slip UI element occupies a portion of the display screen of a telephony device. To convey telephone line state information, the call slip UI reacts to changes in telephone line state and displays line specific status information. The call slip UI is sometimes referred to as being \u201cstate-smart\u201d, meaning that it presents different user options and line status information based on the state of the telephone, such as ringing or idle. It also changes the user options that it presents in response to events that occur in those states.","In one implementation, the call slip has two modes: expanded mode and collapsed mode. In response to events where telephone line status is more critical to the user, the call slip UI element is displayed in an expanded state in the foreground of the screen. For example, it expands to the expanded state in response to phone line related user input or in response to telephone events. Conversely, in response to events where the line state is less critical, the call slip becomes less prominent relative to other screen elements on the display.","The call slip may be adapted to provide the user with information and user interface controls to control the phone based on the state of the telephone call. This feature prevents the user from having to remember how to initiate a variety of advanced phone features, and also makes the display less cluttered. For example, the call slip UI element can be adapted to expand, collapse, and change the information and control options that it provides in response to changes in device or telephone line state. As such, it displays context sensitive information relative to the state of the telephone line (e.g., what is happening on the telephone line during a call) and other software in the system (what other software components are installed and what other data is already available in the system).","In one implementation, the call slip is visible from all display screens (i.e., regardless of the application program that is currently running, the call slip remains at least partially visible), and there is a call slip user interface element for each phone line. However, this feature is not an absolute requirement.","The call slip is extensible so that it can be modified to display information and control options added by a third party. In particular, the call slip has plug in regions called \u201cpanes\u201d that display information for plug-in code modules. Call slips are implemented as part of a software platform that may be adapted to a variety of telephony devices and applications. In this platform, the software that controls the display of a call slip creates an instance of a call slip object for each call slip display element. The call slip object has a programming interface for receiving telephone line state changes and information, such as caller ID information, from programs that monitor the telephone line, called telephony monitoring applications.","The software platform includes default call slip objects and user interface controls that control the display of information and user options within a call slip. The system implementer may develop a call slip display element by selecting one or more default panes to include in a call slip, and by adding custom panes and user interface controls. In addition, the system implementer may select telephony monitoring applications provided in the software platform, or create custom monitoring applications. The telephony monitoring applications may communicate changes in telephone line state and telephone line information to the call slip, and its panes and user interface controls, via the programming interfaces of the call slip, and of the call slip panes and controls. A telephony monitoring application and a call slip control may also agree on a private interface for communicating events and information between them.","Another aspect of the call slip UI is that it may be updated dynamically and remotely. The call slip UI is dynamic in that it reacts in response to telephone company services (e.g., deluxe call waiting) and displays appropriate call information and control options in response. A related feature is the ability of a third party to control telephone features made available through the call slip UI from a remote location. For instance, a telephone company may download a new call slip control that enables the telephony device to access a new telephony feature such as a feature that allows the user to view caller ID information from an incoming call while another call is in progress on the same line.","1.0 Introduction","The invention is implemented in a software platform for a category of products referred to as \u201cWeb Telephones.\u201d A Web Telephone integrates voice telephony, Internet access including e-mail and Web browsing, an answering machine, and possibly other communications media such as fax and voice mail, into a single device. While this platform is designed for web telephones it also applies to a variety of telephony devices, including virtually any device that has access to a telephone network line (cable modem, ISDN, DSL, wireless, plain old telephone line, packet switched networks or Wide Area Networks that support telephone calls such as the Internet).","While the software platform provides a fully functional user interface, and application programs, it is designed to expose programming interfaces and customizable features that allow others to modify its software components and user interface as well as add new software applications. The current implementation of the software platform interfaces with the Windows\u00ae CE Operating System, a subset of the Telephony Application Programming Interface (TAPI), and device drivers. Building on these components, it further provides a shell, application-level telephony applications, and integrated application programs such as e-mail, address book, web browser, and a message center. Each of these components is described in U.S. Provisional Application Nos. 60\/098,187 and 60\/122,975, which are hereby incorporated by reference.","2.0 Call Slip UI","The call slip user interface exposes line management and call control features in a single user interface element. The user-interface is state-smart, meaning that it presents different options based on the state of the telephone, such as ringing, receiving Caller ID information, Caller ID on Call Waiting, etc. The term \u201ccall slip\u201d refers to the portion of the user interface software that displays line status information and manages user on-screen interaction with the telephone line.","In the current implementation, the graphical representation of the call slip has two modes: expanded mode and collapsed mode. There is one call slip per phone line, located in a dedicated area of the screen. Call slips are visible and accessible from all screens. When the phone is idle, the call slip is in a collapsed state. It expands to the expanded state in response to user input or in response to telephone events (i.e. an event occurs where it can be assumed that the user will want to be able to see either more of the call slip or more of the screen \u2018behind\u2019 the call slip).","The state-driven approach enables the call slip to provide only information that is relevant to the current state, and as a result, it avoids overloading the user with useless and distracting information.","Each call slip is a discrete unit, capable of displaying all information relevant to the line with which it is associated. This is preferable because it dictates that the behavior of any individual call slip will provide a similar user experience regardless of the number of telephone lines available in the device. This also has the desirable effect of maintaining a consistent user interface for any application that is controlling a phone line, and for any type of network interface, e.g., PSTN, ISDN, ASDL, cable modem, packet switched networks, Ethernet telephony, etc. The user always knows where to look to see if a line is in use.","The call slip appearance is modified according to the application that is currently using the line. For example, the call slip will expose different information and controls while the line is in use by the modem than while the line is in use by voice or fax machine.","2.1 Call Slip Window",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 1","b":["100","102"]},"As shown in , the current implementation of the call slip UI is composed of the following display elements:\n\n","While the panes in the above example are rectangular, they can be drawn into a variety of arbitrary shapes, at a variety of places on the screen, and occupy a variety of portions of the device's screen display. Preferably, collapsed call slips are located at the outer perimeter of the display screen.  shows a collapsed call slip () for a single line device. The call slip is located at the bottom left portion of the display screen.  shows two collapsed call slips (, ) side by side for a two-line device.","As shown in , the expanded state () of the display extends outward from the collapsed state () and offers additional telephone line information () (e.g., the calling\/called party and telephone number) and user interface controls (e.g., buttons to initiate program tasks (, )) that operate on or relate to line state data. For instance, the edit contact button initiates a program task to add the caller's name and phone number from the caller ID information to the contact database.","The call slip UI software works in conjunction with software that monitors the phone line. A number of application programs may be monitoring the phone line, and each can communicate with the call slip UI to present status and line control options to the user. An example of a state diagram of a telephone is shown in .  illustrates phone states as circles, call slip actions with rectangles, and user input events with trapezoids. When the phone rings (), TAPI implementation code notifies a client of TAPI, called the Operator Agent, of the change in phone state. The Operator Agent, in turn, notifies a call slip manager process, which executes the call slip UI code. In response, the call slip UI code animates the call slip UI element such that it extends to the expanded state (). When a connection is established, the phone state transitions to the connected state ().","When the call slip UI is extended, the user may manually collapse it by selecting it (), such as by touching the portion that it occupies on the screen in a touch screen implementation. This form of user input is passed from the input device driver, to the operating system, and finally to the window procedure of the call slip. In response, the call slip UI code animates the call slip UI element such that it appears to slide into the collapsed state.","During a call, the call slip may toggle between the expanded and collapsed states in response to user input, changes in phone state, network signals, or the expiration of a timer. For example, if the phone receives caller ID on call waiting (), a Telephony Monitoring Application (TMA) passes this information to the call slip process. The call slip UI code then extends the UI element to the expanded state () and fills in an information field with the caller ID information. In addition, as noted above, the call slip UI code may also present UI controls in response to the call state information, such as the edit contact button.","When the user hangs up (), the phone state transitions to the idle state (). A program module called the Voice Transport (VT) communicates this change in state to the call slip process, which in turn, collapses the call slip UI element ().","When the phone line is idle, the call slip UI expands automatically when the phone line is placed off-hook (), by the user activating the speaker phone, initiating a speed dial, or initiating a modem connection. In each of these cases, a TAPI client application communicates a change in state to the call slip process, which extends the call slip to the expanded state in response. The user may also expand the call slip when the phone is idle by selecting the collapsed call slip UI element on the display (). The platform software communicates this input event to the call slip process as described above.","In the above example, there are two methods of triggering a change in the display state of the call slip UI element: 1) in response to user selection of the call slip UI element; and 2) in response to changes in the telephone line state. The first method is referred to as a manual action, e.g., manual extend or collapse, while the second method is referred to as an automatic action, e.g., auto-extend or auto-collapse.","The following discussion provides additional examples of the \u201cstate-smart\u201d attributes of the call slip UI element. Its behavior is responsive to changes in state of the phone line as well as the state of software programs installed in the device.","The image shown in  shows how the call slip might look when displaying Caller ID information. Notice that the view card button () is state-smart as well. It has detected that the caller is already in the address book and has selectively displayed the \u201cedit contact\u201d button instead of the \u201cadd contact\u201d button. The call slip has selectively included the \u201cTake a Message\u201d button () on the application software available on the device. This feature is only available if the user has an answering machine in their phone. Once the answering machine has taken the call, the call slip is updated appropriately to indicate that the \u201cTake a Message\u201d button is no longer available (different state).","In a more complicated example shown in , the user is already on the phone and has received a call waiting signal that includes caller ID information (variously called Call Waiting Deluxe, Caller ID on Call Waiting, etc. by different Bell operating companies).","Call Waiting Deluxe offers users several options when they receive a second call such as, play a \u201cplease hold\u201d message (), or join the calls (), switch calls (), or take a voice message (). In this example, these enhanced features have been implemented as feature buttons that play the right signals back to the switch to carry out these commands.","The following sections describe further implementation details for each of the panes in the call slip window.","2.2 The Summary Status Pane","In the current implementation, the summary status pane is always visible, even while the host call slip element is collapsed. In light of this attribute, the summary status pane is used to display general information about the line that the user will find useful at all times.  provides an example of a call slip illustrating fields in the summary status pane.","The summary status pane includes the following fields:\n\n","The user may extend or collapse the call slip by selecting any portion of the summary status pane.","2.2.1 The Application Bitmap","The application bitmap () is located in the upper left-hand corner of the call slip window and is used to inform the user of which application is currently using the line. It may animate to display line activity.","2.2.2 Line Status Field","The line status field () displays messages as the line state changes and other events are received. The type of messages displayed in this field depend on the application program currently in control of the telephone line, such as the interactive voice call manager, answering machine, fax machine, or modem application. Tables 1\u20134 below summarize examples of line status messages that may be implemented.","Table 1 shows interactive voice states and the corresponding messages.",{"@attributes":{"id":"p-0063","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["STATE","MESSAGE","COMMENT"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CHECK LINE","\u201cCheck the line!\u201d","A \u2018live\u2019 line is not plugged into the RJ-11 Jack."]},{"entry":["IN USE","\u201cIn use\u201d","A special instance of Parallel Set"]},{"entry":[{},{},"Detection, wherein a telephone set"]},{"entry":[{},{},"which shares the same line as the"]},{"entry":[{},{},"device is off-hook AND the device is IDLE."]},{"entry":[{},{},"Note, if the device is not IDLE,"]},{"entry":[{},{},"then Parallel Set Detection is indicated only via"]},{"entry":[{},{},"the Parallel Set Detection Icon."]},{"entry":[{},{},"Technically a sub-state of IDLE."]},{"entry":["IDLE",":<BLANK>","The phone is on-hook no Parallel"]},{"entry":[{},{},"Set is detected and the user is not"]},{"entry":[{},{},"using the ON-HOOK DIALING feature."]},{"entry":["INCOMING RING","\u201cIncoming call . . .\u201d","The near-end is ringing."]},{"entry":["READY\/DIAL TONE","\u201cReady to dial . . .\u201d","The user has generated an off-hook"]},{"entry":[{},{},"event while the phone was IDLE."]},{"entry":[{},{},"\u2018Ready to dial . . .\u2019 is displayed until"]},{"entry":[{},{},"the user initiates a dial sequence"]},{"entry":[{},{},"either by pressing a Dialpad Button"]},{"entry":[{},{},"or initiating an Automated-dial Button."]},{"entry":["CONNECTED","\u201cConnected\u201d","The far-end and the near-end are connected."]},{"entry":[{},{},"For outgoing calls, a timer is used, so this description"]},{"entry":[{},{},"may not accurately describe the state of the line."]},{"entry":[{},{},"See \u2018Dialing . . .\u2019 for details. For incoming calls, the"]},{"entry":[{},{},"device will know when connect takes place."]},{"entry":["DIALING (CONNECTED):","\u201cDialing. . .\u201d","The user has generated an off-hook"]},{"entry":[{},{},"while the device was IDLE."]},{"entry":[{},{},"This uses a timer to change to \u2018Connected\u2019."]},{"entry":[{},{},"Technically, a sub-state of CONNECTED."]},{"entry":["HOLD (CONNECTED)","\u201cOn hold\u201d","The line is CONNECTED and on HOLD."]},{"entry":[{},{},"This means that the Handset's or Speakerphone's"]},{"entry":[{},{},"microphone and speaker are muted."]},{"entry":[{},{},"Technically, a sub-state of CONNECTED."]},{"entry":["MUTE (CONNECTED)","\u201cMuted\u201d","The far-end can be heard over the handset or"]},{"entry":[{},{},"speakerphone, but the microphone is disabled."]},{"entry":[{},{},"Technically a sub-state of CONNECTED."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Table 2 shows answering machine line states and the corresponding messages.",{"@attributes":{"id":"p-0065","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["STATE","MESSAGE","COMMENT"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ANSWERING","\u201cAnswering call . . .\u201d","This message may be used to indicate that the"]},{"entry":[{},{},"Operator Agent has answered the call."]},{"entry":[{},{},"In implementations where the Operator Agent"]},{"entry":[{},{},"is configured to detect the media mode, it may"]},{"entry":[{},{},"be displayed while the Operator Agent is"]},{"entry":[{},{},"determining the media mode by listening for"]},{"entry":[{},{},"tell-tale audio signals."]},{"entry":["GREETING","\u201cPlaying greeting . . .\u201d","The Answering Machine is playing the Greeting."]},{"entry":["ALERT\/FULL","\u201cAnswering sys full\u201d","The Answering Machine is full."]},{"entry":[{},{},"The default Answering Machine"]},{"entry":[{},{},"is Full Greeting is being played."]},{"entry":["RECORDING","-\u201dRecording . . .\u201d","The Answering Machine has picked up the call and"]},{"entry":[{},{},"the far end is leaving a message."]},{"entry":[{},{},"If Call Screening is on, then the user can hear"]},{"entry":[{},{},"the far end leaving a message."]},{"entry":["REMOTE","\u201cRemote access\u201d","The Answering Machine has picked up the call and"]},{"entry":[{},{},"the far-end has entered the Remote Access system."]},{"entry":["DISCONNECTING","\u201cDisconnecting . . .\u201d","The far-end party has disconnected, or the Caller has"]},{"entry":[{},{},"run out of time and the Answering Machine has hung-up."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Table 3 shows fax line states and the corresponding messages.",{"@attributes":{"id":"p-0067","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["STATE","MESSAGE","COMMENT"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["FAX DIALING","\u201cDialing . . .\u201d","The line has been taken off-hook and the modem is dialing."]},{"entry":["FAX BUSY","\u201cFax busy\u201d.","The line is busy."]},{"entry":["FAX REDAIL","\u201cRedial. Attempt: N\u201d","The Fax is attempting the call again."]},{"entry":["FAX WAITING","\u201cWaiting to connect . . .\u201d","The Fax has finished dialing and is waiting for Fax tones."]},{"entry":["FAX CONNECTING","\u201cConnecting . . .\u201d","Fax tones are detected and the"]},{"entry":[{},{},"Fax is negotiating with the far-end."]},{"entry":["FAX CONNECTED","\u201cFax connected\u201d","Negotiation is completed."]},{"entry":["FAX SEND","\u201cSending fax . . .\u201d","The far-end and near-end are"]},{"entry":[{},{},"connected, and the near-end is transmitting."]},{"entry":["FAX RECEIVE","\u201cThe far-end is transmitting . . .\u201d","The far-end and near-end are connected,"]},{"entry":[{},{},"and the far-end is receiving."]},{"entry":["FAX DISCONNECTING","\u201cDisconnecting . . .\u201d","The Fax is hanging up."]},{"entry":["FAX INCOMING","\u201cIncoming call . . .\u201d","The device is Fax-capable and a call has been received."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Table 4 shows modem line states and the corresponding messages.",{"@attributes":{"id":"p-0069","num":"0078"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["STATE","MESSAGE","COMMENT"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CHECK LINE","\u201cCheck the line!\u201d","A \u2018live\u2019 line is not plugged into the RJ-11 Jack."]},{"entry":["IN USE","\u201cIn use\u201d","A special instance of Parallel Set Detection,"]},{"entry":[{},{},"wherein a telephone set which shares the same line as"]},{"entry":[{},{},"the device is off-hook AND the device is IDLE."]},{"entry":[{},{},"Note, if the device is not IDLE, then Parallel"]},{"entry":[{},{},"Set Detection is indicated only via the"]},{"entry":[{},{},"Parallel Set Detection Icon."]},{"entry":[{},{},"Technically, a sub-state of IDLE."]},{"entry":["IDLE",{},"The phone is on-hook, no Parallel Set is detected and"]},{"entry":[{},{},"the user is not using the ON-HOOK DIALING feature."]},{"entry":["MODEM DIALING","Dialing ISP . . .\u201d","The line has been taken off-hook"]},{"entry":[{},{},"and the modem is dialing."]},{"entry":["MODEM BUSY","\u201cISP busy\u201d","The line is busy."]},{"entry":["MODEM REDIAL","\u201cRedial. Attempt: N\u201d","The modem is attempting the call again."]},{"entry":["MODEM WAITING","\u201cWaiting to connect . . .\u201d","The modem has finished dialing and is waiting for"]},{"entry":[{},{},"modem tones."]},{"entry":["MODEM CONNECTING","\u201cConnecting . . .\u201d","Modem tones are detected and the modem is negotiating"]},{"entry":[{},{},"with the far-end."]},{"entry":["MODEM CONNECTED","\u201cConnected to ISP\u201d","Negotiation is completed."]},{"entry":["MODEM DISCONNECTING","\u201cDisconnecting . . .\u201d","The modem is hanging up."]},{"entry":["CHECKING EMAIL","\u201cChecking email . . .\u201d","An email application is checking for email."]},{"entry":["SENDING EMAIL","\u201cSending email . . .\u201d","The email application is sending email."]},{"entry":["RECEIVING EMAIL","\u201cVerifying password\u201d","A password is being authenticated."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"2.2.3 Duration of Connection Field","The duration of connection field () displays the total contiguous time a line has been non-IDLE.","If the Line State is IDLE and Parallel Set Detection is FALSE, then the duration of connection field display is left blank.","If the line state transitions from IDLE to any state (except CHECK LINE), then the call duration begins counting. The duration of connection of outgoing voice calls is dependent on the device's ability to detect an \u201coff-hook\u201d state in the far-end device. For modem connections, far-end off-hook can be detected and the call duration will be accurate.","If the line state transitions from any state to IDLE, then the following events occur:\n\n","2.2.4 General Information Field","The general information field (, ) is located in the summary status pane, directly under the line status field ().","The general information field is used to display caller information. Because caller information is so important to the user, if the call slip is extended, then this information is not displayed in the general information field. Instead it is displayed in a much larger point size in the large call information field (located in the call information pane (see , for example)). Furthermore, because duplicated information is visual noise, if the information is indeed displayed in the large information field, it is NOT displayed in the general information field.","The types of messages displayed in the general information field depend on the application currently in control of the telephone line. If the line state is IDLE, IN USE or CHECK LINE, then the general information field is blank regardless of whether the call slip is extended or collapsed.","For interactive voice calls, the general information field is blank when the call slip is extended. If the call slip is collapsed and the line state is NOT IDLE, IN USE or CHECK LINE, then the general information field displays the text that is stored in the large call information field as described further below.","An exception to the previous two cases is as follows. If the line state is CONNECTED and the user requests the generation of DTMF signals via either the Keypad or an automated dial button, then the general information field displays the digits dialed for a pre-determined time duration (e.g., 10 seconds) OR until another event occurs which uses the general information field. If another DTMF is dialed before the timer has elapsed, then the 10 second timer begins counting anew. These \u2018post-connection\u2019 digits are not appended to the phone number displayed in the call information pane nor are they included in the phone number should the user decide to add the number to the contact database. The purpose of this feature is to display the digits the user has dialed without creating a confusing heap of useless information for the user. It is assumed that numbers dialed after a connection is achieved need to be displayed only temporarily. For example, the user may enter their credit card information. The user will want to be sure they have dialed the correct string, but the user will not want this information displayed permanently, nor will the user want to add this to the contact database should he decide to create a database entry.","For the calls handled by the answering machine application, the general information field contains caller information when the call slip is collapsed. The caller ID text is stored in a field called the large CID field, which is explained further below.","For calls handled by the modem application, the general information field contains the text that is stored in the Large CID Field when the call slip is collapsed.","2.2.5 Parallel Set Detection Bitmap","The parallel set detection icon () is displayed to indicate that a parallel set has been detected. It is visible when the device detects a parallel set.","2.3 Call Information Pane","The call information pane is used to display the called party information produced by an outgoing call or the Caller ID received on an incoming call or Caller ID on Call Waiting.  highlights the fields in the call information pane.","As shown in , the call information pane is composed of the following elements:\n\n","2.3.1 Large and Small Call Information Fields","The large call information field displays information deemed to be the most important for a telephone call. Unfortunately, the information that is \u2018known\u2019 about any particular call varies depending upon the availability of Caller ID (for incoming calls) and Contacts information (for outgoing calls). For example, the name of a caller is almost always more important to the user than the phone number. Therefore, if name information can be culled from the Caller ID number or Contact database, then the name is displayed in the large information field. If no name can be derived and a telephone number is available, then the phone number becomes the most important piece of information available, and it is displayed in the large call information field.","The small information field is another portion of the call information pane used to display information obtained from Caller ID or the contact database. The information is deemed to be of lesser importance than that displayed in the large call information field. As such, it is displayed using a smaller font. The separation of the call information into two fields reflects a specific design choice. Call information can be formatted for display in a variety of ways, using one or more fields with the call slip.","Caller ID information is delivered to the near-end device during the first and second ring. Caller ID consists of two fundamental types of information: CND and CNAM. CND stands for caller number delivery and is the telephone number of the calling party. CND, when successfully delivered, contains one of the following: the caller's 10-digit phone number (area code, prefix, number), \u2018private number\u2019 or \u2018unavailable number\u2019. A caller who is blocking the delivery of their number produces \u2018Private number\u2019. A caller who is calling from a location that the Telco cannot find a number for (or is unwilling to transmit) produces \u2018Unavailable number\u2019.","CNAM stands for caller name delivery and is the name associated with the Telco account holder of the far-end party's phone line. CNAM, when successfully delivered, contains one of the following: the account holder's name, \u201cPrivate Name\u201d or \u2018unavailable name\u2019.","2.3.4 Call Information Display","The call information fields can display information derived from the Caller ID, the contact database, or a combination of both.  is a flow diagram illustrating the operation of an implementation of the call information display. For incoming calls, the process of displaying caller information begins when the line state transitions from idle () to incoming ringing (). In response to this state transition, the call information pane displays \u201cwaiting for Caller ID\u201d (). The caller information remains in this state until either Caller ID is received and a contact database search has been performed, or the line state becomes connected.","The call slip displays caller ID information from the line or caller information from the contact database as explained below. If Caller ID information is not received by the end of the second ring (), then the call information field displays \u201cno Caller ID\u201d ().","If 10-digit CND information is received (), then the search of the contact database for a matching phone number commences (). The search compares the CND number to phone number fields in the contact database for all contacts in the database. If a match is found (), then the call information fields display the name from the contact database and the phone number for the Caller ID information ().","If no match is found and the CNAM data is available (), then the call information field displays the phone number and the message about the CNAM information that is provided (). Table 5 below provides some examples of types of messages displayed based on the nature of the CNAM information received.","If \u201cprivate number\u201d CND information is received (), the call information field indicates that the caller has a private number. The display of caller name information in this context depends on the nature of the CNAM information received. For example, if CNAM data is available (), then the call information field displays the CNAM data as described below in Table 5 ().","If CND information is unavailable, then the call information field indicates that the number is unavailable, for example, by displaying the text, \u201cnumber unavailable.\u201d In the event that CND information is not available but CNAM information is available (), then the call information field displays an indicator reflecting the nature of the CNAM information that is available as set forth in Table 5 (). Finally, if neither CND nor CNAM information is available, the call information field displays \u201cno Caller ID\u201d ().","While the implementation illustrated in  does not initiate a search of the contact database based on CNAM information, such a search could be conducted in an alternative implementation. For example, the call slip could be programmed to initiate a search through the contact database for a matching name, and fill in the caller information field with a phone number from the contact database if the CND information were unavailable.","Table 5 provides an example of how the call information field may be organized depending upon the type of information received from Caller ID. Caller ID may deliver either CND or CNAM, or it may deliver both.",{"@attributes":{"id":"p-0101","num":"0115"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"CALL SLIP",{}]},{"entry":["SCENARIO","DISPLAY","EXAMPLE"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Private\/Blocked","Name =","Unknown caller",{}]},{"entry":[{},"Number =","Private number"]},{"entry":["Out of Area","Name =","Unknown caller"]},{"entry":[{},"Number =","Out of area"]},{"entry":["Unavailable","Name =","Unknown caller"]},{"entry":[{},"Number =","No Caller ID"]},{"entry":["CNAM received","Name =","CNAM","Justin Cooper"]},{"entry":["CND received","Number =","CND","6504629171"]},{"entry":["CNAM received","Name =","CMA","Justin Cooper"]},{"entry":["No CND received","Number =","Number unavailable","Number"]},{"entry":[{},{},{},"unavailable"]},{"entry":["CND received","Name =","CND","6504629171"]},{"entry":["No CNAM received","Number =","Unknown caller","Unknown caller"]},{"entry":["No CNAM received","Name =","Unknown caller"]},{"entry":["No CND received","Number =","Number unavailable"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"If no name is received, but a number is received, then the number and name fields are reversed. If a match for the caller is found in the address book, then the caller name and number are displayed as if they were received through caller ID.","The scenarios in the left-hand column of Table 5 are defined below.\n\n","Call slip control panes provide the opportunity to customize the call slip by adding graphical user interface controls. Call slip control panes may be used for any purpose, although it is assumed that, at a minimum, some call disposition controls will be included. The call slip control panes are cognizant of certain changes to the phone state and to the receipt of particular data (such as Caller ID information) and may be modified dynamically in response to these events. For example, the default call slip control pane (see below) displays a \u2018Take a message\u2019 button only when it is appropriate to do so (i.e. the call has not yet been answered and the answering machine is ready). Multiple call slip control panes can be added Furthermore, the vertical positions of all call slip panes within the call slip are customizable.","2.4.1 Default Call Slip Control Pane","The software platform includes a default call slip control pane with pre-configured behavior. These buttons provide advanced control of the device. The default call slip control pane, like the call information pane, is removable. The default call slip control pane provides the following features via user interface controls:\n\n","As noted above, the software platform includes a number of software modules for managing telephony functions. Referred to as the application-level telephony software, these modules manage access to the telephone line, send and receive information via the line, and communicate telephone line information to the call slip interface.","Before outlining the telephony application software, it is helpful to begin with a picture of the entire software architecture.","3.1 Application Level Architecture",{"@attributes":{"id":"p-0109","num":"0134"},"figref":"FIG. 12","b":["1200","1202","1204"]},"The shell () provides the framework of the graphical user interface. Though not specifically shown, applications can make direct access to the API of the operating system. In addition, applications can access services that the shell provides, such as an event scheduling service. The shell replaces the shell of the Windows\u00ae CE operating system, and it cooperates with application programs to provide a consistent user interface.","The application programs include telephony components (described more fully below), the message center (), address book (i.e. a software component for accessing the contact database) (), web browser (), help system (), and an application () for modifying settings (). The implementer may incorporate custom application programs (e.g., 3party application () into the software platform). These applications may invoke platform services through the APIs of the shell (), TAPI and telephony extensions (), and the operating system ().","The message center () provides integrated access to all types of messages that the user can receive through the host device, such as answering machine messages, e-mails, and faxes. For each type of message, the message canter relies on a pair of components: a message transport and a message viewer. Examples of the message transport include answering machine transport (), e-mail transport (), voice transport (), fax transport and voice-mail transport (). The message transport executes in the background, independent of the shell (). It receives messages of a particular type and saves them to persistent storage. The message viewer plugs into the message center (which in turn plugs into the shell (), as shown in ), and provides the functionality for displaying and managing messages of a particular type. Examples of the message viewers include an answering machine viewer (), an e-mail viewer (), and fax viewer ().","The Address Book application () allows users to create, view, and manage a collection of \u201caddress cards,\u201d each of which contains information such as a name, address, phone numbers, and e-mail address. The persistent storage mechanism for the Address Book is the contact database in the Windows CE operating system.","The software platform includes a number of software modules for managing telephony functions. Referred to as the application level telephony software, these modules manage access to the telephone line, send and receive information via the line, and communicate telephone line information to a software module that manages the call slip UI element called the call slip manager.","The application-level telephony modules include an operator agent program (), telephone monitoring application (TMA) programs (), the transports (\u2013), a call slip manager (), and call slip programs (). Some call slip software components are provided with the software platform (e.g., built-in or \u201cdefault\u201d call slip objects ()). The call slip manager provides an API and software architecture framework that enables an implementer, such as an Original Equipment Manufacturer (OEM) or telephone company (Telco) to incorporate new call slip components into the platform (e.g., OEM Add-on (), Telco Add-on (), etc.).","3.2 Overview of Telephony Application Architecture","Having provided an overview of the entire system, we can now focus on the implementation of the telephony components.  is a block diagram illustrating these components in more detail. The operator agent () is a code module responsible for determining the media mode of an incoming call and handing the call off to the appropriate transport.","The operator agent is implemented as a Protected Service Library (PSL). A PSL shares traits of a dynamic link library in that it exposes a programming interface, yet unlike a DLL, it is a separate, executable program that runs in its own address space. A PSL helps prevent data corruption because it does not allow client applications to access its address space.","The transports (, , , ) are responsible for sending and receiving calls of a particular media mode. Some, but not all, of the message transports are telephony applications (that is, they are clients of TAPI). The e-mail transport () is not a client of TAPI, but the voice () and the answering machine transports () are clients of TAPI. The e-mail transport () can both send and receive, while the answering machine transport () can only receive.","Those message transports that are telephony applications are marked in the registry as being potential targets of calls handed off from the operator agent (). Each such telephony message transport is marked in the registry with the media modes it is willing to handle.","The voice transport () plays the role of the message transport for interactive voice calls. It is the application to which the operator agent () hands off an incoming call when a human answers, and it is the application responsible for creating and managing an outgoing voice call.","The call slip manager (CSM ()) provides the user interface to telephony applications. The call slips () are software objects whose functions and data are accessible via a programming interface. In particular, the call slip objects are implemented as in-process COM servers within the CSM process. To enable other processes to communicate with the call slips, the CSM exposes an API via the PSL mechanism.","Each pane within a call slip window is implemented as an in-process COM server in the CSM process. The user interface controls (e.g., buttons, list boxes, check boxes, etc.) are also COM objects and are implemented as window controls in their respective panes.",{"@attributes":{"id":"p-0123","num":"0148"},"figref":"FIG. 13","b":["1316","1318","1320","1322","1324","1320"]},"The telephony architecture divides call logging and line in\/out-of-service monitoring functions into separate TAPI client applications, each of which has a monitor privilege on the phone or the lines. These applications are referred to as telephony monitoring applications (TMAs). Examples of the TMAs include a Parallel Set Detection (PSD) TMA (), a call logger (), a caller ID monitor (), and a call duration monitor (). The implementer may also supply other TMAs ().","A TMA can expose a user interface by communicating with the CSM (the line in\/out-of-service application does this). It can also write information to a database (the call logger does this).","The advantage of having a separate application for each monitoring function is that it allows an implementer to add an additional monitoring function without modifying a complicated, monolithic TAPI application. For instance, an implementer could write a TMA to listen for metering pulses (special signals used for billing purposes on European telephone networks).","The process that houses the TMAs is the Telephony Container (TC). TC is launched automatically during system boot. When a TMA detects an event that it is monitoring, it invokes a function in the CSM programming interface to communicate the event to the CSM.","3.3 Message Transports","The message transports each have a programming interface. Other program modules may access the services of a transport programmatically by invoking its functions. In addition, a transport communicates with other program modules by issuing events to other modules registered to receive these events.","In the current implementation, the voice transport is a PSL. It exposes an API that allows an application such as an on-screen dialer to perform call control. The API includes such functions as VtMakeCall(int iLine, LPCTSTR psznumber) and VtDropCall(int iLine, void*pvReserved). The first function instructs the voice transport to take the phone off-hook, and to initiate an interactive voice call on the specified line (iLine) by dialing the specified digits (pszNumber). The second function instructs the voice transport to terminate the call on the specified line.","The other transports may be implemented to expose their functions in a similar fashion.","3.4 Call Slip Manager","The Call Slip Manager (CSM) provides the user interface for telephony applications. It makes the call slips accessible to other programs via a series of programming interfaces.","3.4.1 The ICallSlip Interface","Each call slip object is implemented as an in-process COM server (in the CSM process) that exposes the programming interface ICallSlip. The ICallSlip interface has a number of functions (called methods), including Extend and Collapse, which slide the call slip up and down. Other methods of ICallSlip respond to telephony events; for instance a function named OnIncomingCall is called when an incoming call arrives. Functions like OnIncomingCall enable the TMAs in the telephony container to communicate changes in line state and line information, such as Caller ID information, to the call slip.","3.4.2 Call Slip Panes","Each call slip is divided visually and logically into a collection of call slip panes. A system implementer can customize the call slips by;\n\n","3.4.2.1 Pane Interfaces","Each pane is implemented as an in-process COM server (in the CSM process) that exposes the interface ICallSlipPane. Each specific type of pane exposes an additional interface. The summary status pane exposes a programming interface called the ICallSlipSummaryStatusPane, the call information pane exposes ICallSlipCallInformationPane, and control panes expose ICallSlipControlPane.","This architecture allows a system implementer to customize the appearance of the standard panes. It also allows a system implementer to build a Call Slip UI without panes at all. The behavioral repertoire of panes could be extended by allowing them to expose additional programming interfaces (e.g., ICallSlipCallInformationPane).","Each call slip pane receives an ICallSlip interface pointer to the call slip that contains it. This allows the call slip to offer certain services, such as phone number formatting and Caller ID tracking, to any pane that wants to make use of them. For instance, the call slip provides functions such as ICallSlip::GetCanonicalDialedDigits and ICallSlip::GetLastCallerID to get the dialed phone number in canonical format and to get the Caller ID information of the last caller, respectively.","3.4.2.2 Registry Information For Call Slip Panes","The description of each pane is stored in the registry, so panes can be added and removed by a system implementer without changing the code of the CSM. The registry format is as follows:",{"@attributes":{"id":"p-0142","num":"0171"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"HKEYLOCALMACHINE\\HALTA\\CSM\\Panes\\"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"0\\"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"@=\u201c{00000000-0000-0000-0000-000000000000}\u201d \/\/"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Summary Status Pane"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"1\\"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"@=\u201c{11111111-1111-1111-1111-111111111111}\u201d \/\/ Call"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Information Pane"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"2\\"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"@=\u201c{22222222-2222-2222-2222-222222222222}\u201d \/\/"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Standard Control Pane"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"3\\"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"@=\u201c{33333333-3333-3333-3333-333333333333}\u201d \/\/ OEM"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Control Pane (optional)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Each key under HALTA\\CSM\\Panes represents a pane. The name of the key gives the vertical ordering of the pane within the Call Slip (0 is topmost). The default value of the key is the CLSID of the COM object that implements the pane. COM uses the CLSID to locate the DLL server for the component. It is possible to have the same DLL serve more than one pane. A system implementer with more than one custom control pane might choose to group them into a single DLL to save memory.","3.4.3 Control Panes","The default control pane contains a collection of buttons. These buttons are enabled and disabled, shown and hidden under various conditions. When they are clicked, they initiate some action. A control pane can contain any type of control.","One important decision in the design of the control pane is who is responsible for the behavior of the controls. That is, who decides when a control is enabled or disabled, when it is shown or hidden, and what action it performs when clicked? From the highest to the lowest level, these decisions could be made by the clients of the CSM (the telephony applications), by the CSM itself, by the call slip, by the control pane, or by the controls themselves. In the current implementation, the controls are responsible for their own behavior. That way, as the product evolves, controls can be added or removed without affecting the logic of the control pane or any higher-level software component.","This design also makes it possible for a system implementer to customize the control pane by adding controls. Since the controls encapsulate their own behavior, the logic of the control pane need not change when a system implementer adds a control.","Each control in the control pane is implemented as an in-process COM server exposing the interface ICallSlipControl. This interface has methods such as OnIncomingCall, OnDisconnect, etc., which mirror the methods of the ICallSlip and ICallSlipPane interfaces.","When a telephony application detects an event of interest, it notifies the CSM via one of the CsmOnEvent API functions. The CSM forwards the event to the call slip for the appropriate line via ICallSlip::OnEvent, which in turn forwards it to each pane via ICallSlipPane::OnEvent. The control pane's implementation of ICallSlipPane::OnEvent iterates over the controls in the pane, calling ICallSlipControl::OnEvent on each in turn.","Each control implements the various ICallSlipControl::OnEvent methods. In any of these methods, the control can choose to enable, disable, show, or hide itself, or even change its caption. For instance, the \u201cAdd contact\u201d button responds to the OnIncomingCall event by showing and enabling itself.","A Windows control reacts to user input events by sending Windows messages to its parent window. For instance, when a user taps a button, the button sends WMCOMMAND(BNCLICKED) to its parent. When a user types a character into an edit control, the edit control sends WMCOMMAND(ENUPDATE) and WMCOMMAND(EN CHANGE) to its parent. Newer Win controls send WMNOTIFY, rather than WMCOMMAND, to their parents.","Call slip control panes reflect WMCOMMAND and WMNOTIFY messages back to the originating control. Each call slip control is designed to react to these reflected Windows messages (for instance, by adding the appropriate entry to its message map, or adding a case to its window procedure). This means that each call slip control is implemented by subclassing the appropriate Windows control.","3.4.3.1 Registry information","The description of each control is stored in the registry, so controls can be added and removed by the system implementer without changing the code of the control pane. The registry format is as follows:",{"@attributes":{"id":"p-0155","num":"0184"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HKEYLOCALMACHINE\\HALTA\\CSM\\CTL\\2\\"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{55555555-5555-5555-5555-555555555555} \/\/ \u201cAdd"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"contact\u201d button"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"row","1"]},{"entry":[{},"col","1\/1"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{66666666-6666-6666-6666-666666666666} \/\/ \u201cEdit"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"contact\u201d button"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"row","1"]},{"entry":[{},"col","1\/2"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{77777777-7777-7777-7777-777777777777} \/\/ \u201cDial\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"button"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"row","1"]},{"entry":[{},"col","2\/2"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{88888888-8888-8888-8888-888888888888} \/\/ \u201cTake"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"message\u201d button"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"row","1"]},{"entry":[{},"col","1\/2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"Each key under HALTA\\CSM\\CTL represents a control pane. The name of the key (in the example above, \u201c2\u201d) is the pane number as found under [HKEYLOCALMACHINE]\\HALTA\\CSM\\Panes. Each key under the pane identifier represents a control to be displayed in that pane. The name of the key is the CLSID of the COM object that implements the control. COM uses the CLSID to locate the DLL server for the control. It is perfectly possible to have the same DLL serve more than one control. A system implementer with more than one extra control might choose to group them into a single DLL to save memory.","The named value \u201crow\u201d is the 1-based row number on which the control is displayed. Rows  and  are reserved for standard call slip controls. Rows  and up are available to a system implementer.","The named value \u201ccol\u201d is the column number. A value \u201c1\/1\u201d (\u201c1 of 1\u201d) says that there is only one control in the row, and it occupies the full width of the call slip (with some space left for a border). \u201c1\/2\u201d (\u201c1 of 2\u201d) means that there are two controls, each approximately half the width of the call slip, and that this is the first, or leftmost, of the two. Standard call slip controls are either full-width or half-width, but a system implementer could choose to put three narrow controls in a row, with \u201ccol\u201d values of \u201c1\/3\u201d, \u201c2\/3\u201d, and \u201c3\/3\u201d.","The registry information does not include the control's text. For one thing, the control's text might change during normal operation. The text is in the string table of the resource file for the DLL that serves the control object. When the control's Init method is called, it extracts the text from the resource file before creating the control's window.","3.4.4 The PSL Interface","In the current implementation, the call slips are in-process servers within the CSM process; therefore the other processes in , such as the message transports, cannot obtain interface pointers to them. Yet we must provide a mechanism for these processes to communicate with the call slips. Therefore the CSM exposes an API via the PSL mechanism. We can consider this API the logical equivalent of a \u201cICallSlipManager\u201d interface.","In the default implementation, most functions in this API simply delegate to a method in ICallSlip (which in turn frequently delegates to a method in ICallSlipPane). For instance, the API function CsmOnIncomingCall(int iLine) looks up the ICallSlip interface pointer for line iLine, and calls ICallSlip::OnIncomingCall through that pointer. This method in turn iterates over each pane in the call slip, invoking ICallSlipPane::OnlncomingCall on each in turn. Each pane responds appropriately. For instance, in the default implementation, the summary status pane implements OnIncomingCall by displaying the message \u201cIncoming call . . . \u201d in the line status field. The CSM's API is thus largely a union of the individual pane interfaces.","As noted above, there are also a few API functions for higher-level operations such as extending or collapsing the call slip as a whole.","This architecture allows a system implementer to provide a phone control UI that does not have call slips at all. A system implementer could choose to dedicate a large area of the home screen to the phone interface, and never hide or show it. That implementation of the CSM would implement the CSM API directly, without delegating to an underlying call slip and its panes. In this case, a system implementer would implement the CsmExtendCallSlip and CsmCollapseCallSlip functions as no-ops.","3.4.5 Interface design goals","So far we have enumerated components (the CSM, call slips, and call slip panes) and named their interfaces (ICallSlipPane, etc.).","In creating the current implementation, we followed a set of design goals, which are listed below. These design goals represent guidelines for our implementations but they are not necessarily required to implement the invention.","One design goal is to hide the details of the call slip user interface behavior from the clients that utilize this interface, such as the operator agent.","To accomplish this goal, the CSM API offers a set of functions named CsmOnEvent, which inform that CSM that events of interest to it have occurred. The CSM can implement whatever UI behavior it wishes in response to those events. So for instance, when a call comes in, the operator agent\u2014a client of the CSM\u2014calls CsmOnIncomingCall, and the CSM takes care of the UI behavior for responding to that event.","The intention of the telephony application architecture is that standard telephony components use the CsmOnEvent APIs exclusively. System implementers should also use these APIs as much as possible, to minimize the coupling of UI behavior into other components of the system, but can use the lower-level CSM API functions if there is no appropriate CsmOnEvent function.","Another design objective in the current implementation is to avoid duplication of telephony logic between the CSM and its clients. In principle, the CSM could on its own detect all the telephony events it requires by being a TAPI monitor application. Then there would be no need for other telephony components such as the operator agent to inform the CSM of interesting events, and there would be no need for the CsmOnEvent API functions.","But those other telephony components\u2014the operator agent, voice transport, caller ID monitor application, etc.\u2014already have logic to detect these events. Therefore rather than duplicate this logic in the CSM, the other telephony monitoring applications inform the CSM of these events through the CSM API.","This couples the telephony apps to the CSM in the sense that 1) they know which events are of interest to the CSM, and 2) they link with the CSM's thunking library. We consider this coupling to be minimal, and an acceptable price for avoiding code duplication. This code duplication would itself have been a form of coupling (changes made in one place would have to be duplicated in the other).","Another design objective is to allow for customization by system implementers. The software platform provides CSM API functions such as CsmOnIncomingCall, CsmOnDisconnect, etc., to respond to certain telephony events. But an implementer might want the CSM to respond to events other than those for which the platform provides an API function.","For these situations, the CSM API includes functions for explicitly manipulating the call slip (CsmCollapseCallSlip, CsmExtendCallSlip), and for displaying information in the call slip (CsmDisplayStatus, CsmDisplayInformation, etc.). When a custom telephony application added by a system implementer detects a condition that should be reflected in the UI, it can call these lower level API functions to obtain the desired effects.","Yet another design objective is to hide CSM UI details from its clients. The location and format of information within the UI may be hidden from other telephony components. For instance, depending on circumstances, the CID number might be displayed in the general information field of the summary status pane, or in either the large or small call information field of the call information pane. The specific display format of the line state and call information is hidden from the monitoring programs by exposing general interface functions to them in the CSM programming interface. The CSM API has functions like CsmOnCallerID rather than functions such as \u201cCsmSetSmallCallInformationField\u201d. The internal components of the CSM decide what to do with the information provided in these function calls.","3.4.6 Response of the Call Slip to Windows Messages","In the current implementation, there are two circumstances when the default behavior of the Call Slips is modified, The first is during a backup or restore. When the contact database is being backed up or restored, the \u201cAdd contact\u201d and \u201cEdit contact\u201d buttons in the control pane should be unavailable. A system implementer's control might have a similar restriction. Therefore the window procedure for each control is implemented to detect specific Windows message WMBACKUPRESTORE and respond to it by invoking the control's implementation of the method ICallSlipControl::OnBackupRestore( ), A control can choose to implement this method as a no-op if its operation is not affected by backup\/restore operations.","The second circumstance that modifies the call slip behavior is when an application is remaining full screen. In this case, the Call Slip is completely invisible in its collapsed state (but it still expands automatically in certain circumstances). Therefore the window procedure for the call slips detects the Windows message WMFULLSCREEN and responds to it by invoking the call slip's implementation of the method ICallSlip::OnFullScreen( ). The default implementation of this method causes the call slip to become completely invisible whenever its ICallSlip::Collapse( ) method is invoked. A system implementer could change this behavior.","3.5 Telephony Monitoring Applications","The telephony architecture divides call logging and line in\/out-of-service monitoring functions into separate TAPI client applications, each of which has monitor privilege on the phone or the lines. These applications are referred to as Telephony Monitoring Applications (TMAs).","A TMA can expose a user interface by communicating with the CSM (the line in\/out-of-service application does this). It can also write information to a database (the call logger does this).","The advantage to having a separate application for each monitoring function is that it allows an implementer to add an additional monitoring function without modifying a complicated, monolithic TAPI application. For instance, an implementer could write a TMA to listen for metering pulses (special signals used for billing purposes on European telephone networks).","The drawback to implementing TMAs as separate applications is that Windows\u00ae CE is limited to 32 processes. To conserve process slots, we choose instead to implement each TMA as an in-process COM server exposing ITelephonyMonitorApp. This architecture allows an implementation to provide additional monitoring functionality.","3.5.1 The Telephony Container Application","The process that houses the TMAs is the Telephony Container (TC). When TC starts, it calls TAPI functions lineInitializeEx and phoneInitialize. It calls TAPI functions lineOpen (on each line) and phoneOpen. TC then reads the list of TMAs from the registry. For each TMA, TC calls COM function CoCreateInstance to create an instance of the TMA, and then calls ITelephonyMonitorApp::Init, passing the phone handle and line handles to the TMA.","The TC's phoneCallback function forwards each phone message it receives to each TMA by calling ITelephonyMonitorApp::PhoneCallback; likewise, its lineCallback function forwards line messages to the TMAs by calling ITelephonyMonitorApp::LineCallback. A TMA that it is not interested in phone or line messages can implement the corresponding callback method as a no-op that simply returns SOK. Of course, the TMA must implement at least one of the callback methods, or there would be no point to its existence.","As an alternative implementation, each TMA could register separately with TAPI, receiving its own TAPI instance handle and registering its own phoneCallback and lineCallback functions. The disadvantage of this approach is that TAPI would have had to deliver every message to each TMA; each such message delivery would involve a process switch. The chosen design runs faster, and at the same time simplifies the TMAs because they do not have to call lineInitializeEx, lineOpen, phoneInitialize, or phoneOpen.","3.5.2 Registry Information","The description of each TMA is stored in the registry, so TMAs can be added and removed by the system implementer without changing the code of the TC. The registry format is as follows:",{"@attributes":{"id":"p-0190","num":"0219"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HKEYLOCALMACHINE\\HALTA\\TC\\TMA"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa} \/\/ Line"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"in\/out-of-service Monitor"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb} \/\/ Call"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Logger"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Each key under HALTA\\TC\\TMA represents a TMA. The name of the key is the class identification (CLSID) of the COM object that implements the TMA. COM uses the CLSID to locate the DLL server for the TMA. It is perfectly possible to have the same DLL serve more than one TMA. A system implementer with more than one extra TMA might choose to group them into a single DLL to save memory.","3.5.3 Phone Ownership","In TAPI, the term \u201cphone\u201d refers to the collection of lamps, buttons, microphones, speakers, and hookswitches that make up the physical phone set. Only one TAPI application can \u201cown\u201d the phone (by calling phoneOpen and specifying PHONEPRIVILEGEOWNER for the dwPrivilege parameter, or by calling phoneSetPrivilege and specifying PHONEPRIVILEGEOWNER). The software components of application-level telephony architecture (the OA, the VT, other transports, the CSM, or the TC) share ownership of the phone. The implementation of shared ownership enables each component to focus on its individual role and maintains symmetry among the transports. Moreover, it allows each component to access phone hardware at different times. The application-level telephony architecture specifies that when an application needs ownership of the phone, it calls phoneSetPrivilege requesting ownership privilege. If another application already owns the phone, the request will fail. Therefore an application should relinquish ownership of the phone as soon as possible by calling phoneSetPrivilege and requesting monitor privilege.","It is possible that there could be resource conflicts if the processing of calls on two different lines\u2014for instance, a voice call on Line 1 and a data call on Line 2\u2014both require ownership of the phone at the same time. This potential conflict can be avoided by retrying the phoneSetPrivilege call until it succeeds.","4.0 Hardware Implementation","The software platform described above is designed to run on a variety of telephony device architectures. Some basic hardware elements are common to most implementations such as a processor (e.g., a CPU), a computer readable medium (e.g., RAM\/ROM), a screen display, and an input device capable of selecting display elements on the screen display.  is a block diagram illustrating an overview of a hardware architecture for a web telephone. This FIGURE provides an example of hardware features, yet these features are not required in all implementations. The description of these features and an understanding of the software platform described above should make it clear that a variety of deviations from the hardware architecture are possible while still being capable of executing the software platform.","The processing resources of the telephony device may reside in one or more processor chips. Since the required processor performance varies depending on the demands of the processing functions of the device, the hardware implementation of the processing resources will vary as well. In the context of the web telephone discussed above, the processing functions include running the operating system and application programs and performing signal processing functions of the telephone, modem and fax machine. These functions may be carried out on a single host CPU or on a CPU in combination with a supporting Digital Signal Processing (DSP) chip and possibly other chips (e.g., a hardware modem).","In the following discussion, we describe the device architecture shown in , and then discuss a number of alternative architectures. In , the processing workload is shared between a CPU () and a DSP called a Telephone Answering Device (TAD) (). As explained in further detail, a variety of telephony related program modules might be executed either in the host CPU or the TAD.","The CPU and TAD each have access to a memory system () that stores program code and data. The memory system of the device may include a combination of Read Only Memory (ROM) () and Random Access Memory (RAM) () as shown, as well as other conventional memory devices such as Flash memory and ADRAM (Audio DRAM). The CPU and TAD may access a shared memory system via a common memory bus () as shown, or alternatively, they may have their own memory systems that they access via a private bus. The CPU and TAD may also use a combination of shared and private memory. For example, a TAD chip may have a dedicated Flash\/ADRAM device.","The program code and associated data of the software platform may be stored on a variety of computer readable media. Typically, it is installed on the ROM of the telephony device and loaded into RAM at runtime. The program code and its data may be distributed on a conventional storage media such as compact disk and loaded into the device's memory system by the manufacturer or end user. Alternatively, the code and data may be transmitted electronically via a telephone communication line connected to the device or via a computer network, and then installed by the user or by the device, for example, when it is re-booted.","There are a variety of alternative ways to enable remote updating of telephony features, and specifically features enabled through call slip components. These alternatives include updating the entire program image on the device, updating only the program files and data that have changed or are new, or installing code to support an array of features and then selectively enabling features.","The specific implementation of these alternatives depends in part on the configuration of the hardware. For example, in some devices, the memory system includes ROM and RAM memory. The RAM memory may further include a DRAM memory with a portion that serves as working memory (e.g., acts as storage for the operating system's memory heap) and another portion that serves as an object store (e.g., acts as storage for the operating system's file system). In addition, the device may include a flash memory to store data persistently such as the contact database, email data files, etc. In the current implementation, the contact database is a Windows\u00ae CE database, which has a size limitation of 64 kB per record. Flash memory has the advantage that it does not require a battery, but depending on the implementation, may have limitations in the way data can be stored on it (e.g., such as the 64 kB limitation of Windows\u00ae CE databases mentioned previously).","To implement remote updating using the first approach, the implementer may create an installer application that would be downloaded and run in the DRAM. It is responsible for partitioning a downloaded code image into chunks (e.g., each 64 kB) and loading these chunks into the flash memory. Instead of replacing the entire code image with a new, downloaded image, the installer could be designed to update the current code image with new, downloaded portions of the image that have changed or are new. Yet another approach to updating telephony features, and in particular call slip features, is to download an application program that turns on a key in the registry to activate a telephony component associated with that key.","The architecture shown in  supports two telephone lines (, ). The signal path of for each line is similar. Each telephone line connects to a standard telephone jack (RJ). The telephone jack is connected to a Direct Access Arrangement (DAA) module (, ), which in turn is connected to a crossbar (). A \u201ccrossbar\u201d refers generally to a switching arrangement used to connect line terminating devices (e.g., handset audio, speakerphone audio, answering machine or modem) to a desired telephone line. Switches or crossbar arrangements are commonly used to switch codecs between DAA transformers. Software executing in the CPU uses the crossbar connected to the DAA modules to switch the modern and voice circuits (the TAD) to the available lines.",{"@attributes":{"id":"p-0204","num":"0233"},"figref":"FIG. 14","b":["1430","7546","1430","1428"]},"The TAD () manages a variety of telephony functions relating to voice calls. As noted, it interfaces with the telephone line via a crossbar () or equivalent switching arrangement. The TAD interfaces with the components familiar to the user, such as the speaker (), microphone () and handset (), via a variety of standard drivers and switching arrangements, shown functionally as a crossbar () in . In both cases, the TAD generally uses a codec chip to manage coding and decoding of the voice signal.","The device may also include a variety of peripherals connected to the CPU via a bus or collection of interface circuitry (). These peripherals include a display (), keyboard (), Infrared Data Association (IrDA) compliant transceiver (), PCMCIA port (), serial port (), etc. The device preferably includes an input device () that allows the user to select user interface controls on the display, such as a cursor control device or touch screen. The device may also be implemented to support voice activated input with a combination of hardware (e.g., the microphone) and software to decode and perform voice recognition of voice signals.","As noted above, the telephony device may execute telephony programs in the host CPU, a TAD or other hardware components.","These functions include: voice compression, Dual Tone MultiFrequency (DTMF) detection, DTMF generation, modem functions, speaker phone functions (for full duplex speaker phones, this functionality may include double talk detection, acoustic and near end echo cancellation), digital telephone answering machine functions, and Analog Display Services Interface (ADSI) signaling.","ADS is a Bellcore standard defining a protocol on the flow of information between something (a switch, a server, a voice mail system, a service bureau) and a subscriber's telephone, PC, data terminal or other communication device with a screen. ADSI signaling encompasses caller identification (CID) and Caller Identification on Call Waiting (CID CW). To implement CID, the caller's number and name are transmitted to the receiving device during the first and second ring signaling an incoming call. To implement CID CW, the caller's number and name are transmitted to the receiving device along with the call waiting signal. A modulation technique called Frequency Shift Keying (FSK) is used for the transmission of Caller ID and Call Waiting Caller ID data.","The devices used to support these telephony functions vary, depending on the implementation.","The following list provides some possible implementations:\n\n","In the last two cases, there is essentially no DSP software running on the host CPU, and therefore, the main requirement of the CPU is the ability to handle line management and user controls in a real time fashion. As illustrated in this brief list, there are a wide variety of possible implementations.","While the invention is described with reference to specific implementations, the scope of the invention is not limited to these implementations. The call slip UI elements have a number of features that are unique, whether considered alone or in combination with other features. Therefore, the specific combination of features shown above should not be construed as being a necessary element of a call slip interface.","In view of the many possible implementations of the invention, it should be recognized that the implementations described above is are only examples of the invention and should not be taken as a limitation on the scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 13","FIG. 12"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 14"}]},"DETDESC":[{},{}]}
