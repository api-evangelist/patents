---
title: Method and apparatus for data recovery using storage based journaling
abstract: A storage system maintains a journal and a snapshot of one or more data volumes. Two journal entry types are maintained, an AFTER journal entry and a BEFORE journal entry. Two modes of data recovery are provided: “fast” recovery and “undo-able” recovery. A combination of both recovery modes allows the user to quickly recover a targeted data state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08145603&OS=08145603&RS=08145603
owner: Hitachi, Ltd.
number: 08145603
owner_city: Tokyo
owner_country: JP
publication_date: 20060228
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCES TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE SPECIFIC EMBODIMENTS"],"p":["The present application is a Continuation Application of U.S. application Ser. No. 10\/621,791, filed Jul. 16, 2003, which is herein incorporated by reference for all purposes.","This application is related to the following commonly owned and co-pending U.S. applications:\n\n","The present invention is related to computer storage and in particular to the recovery of data.","Several methods are conventionally used to prevent the loss of data. Typically, data is backed up in a periodic manner (e.g., once a day) by a system administrator. Many systems are commercially available which provide backup and recovery of data; e.g., Veritas NetBackup, Legato\/Networker, and so on. Another technique is known as volume shadowing. This technique produces a mirror image of data onto a secondary storage system as it is being written to the primary storage system.","Journaling is a backup and restore technique commonly used in database systems. An image of the data to be backed up is taken. Then, as changes are made to the data, a journal of the changes is maintained. Recovery of data is accomplished by applying the journal to an appropriate image to recover data at any point in time. Typical database systems, such as Oracle, can perform journaling.","Except for database systems, however, there are no ways to recover data at any point in time. Even for database systems, applying a journal takes time since the procedure includes:\n\n","Recovering data at any point in time addresses the following types of administrative requirements. For example, a typical request might be, \u201cI deleted a file by mistake at around 10:00 am yesterday. I have to recover the file just before it was deleted.\u201d","If the data is not in a database system, this kind of request cannot be conveniently, if at all, serviced. A need therefore exists for processing data in a manner that facilitates recovery of lost data. A need exists for being able to provide data processing that facilitates data recovery in user environments other than in a database application, or database application interacting with other applications.","The invention is directed to method and apparatus for data recovery and comprises performing a fast recovery mode operation in conjunction with an undo-able recovery mode operation. In the fast recovery mode operation, after-journal entries are applied to a snapshot to update the snapshot. In the undo-able recovery mode operation, a before-journal entry is taken of the snapshot before applying an after-journal entry to it. A user can perform one or more undo operations when a snapshot has been updated in the undo-able recovery mode.",{"@attributes":{"id":"p-0026","num":"0030"},"figref":"FIG. 1","b":"101"},"The backup and recovery system shown in  includes at least one storage system . Though not shown, one of ordinary skill can appreciate that the storage system includes suitable processor(s), memory, and control circuitry to perform IO between a host  and its storage media (e.g., disks). The backup and recovery system also requires at least one host . A suitable communication path  is provided between the host and the storage system.","The host  typically will have one or more user applications (APP)  executing on it. These applications will read and\/or write data to storage media contained in the data volumes  of storage system . Thus, applications  and the data volumes  represent the target resources to be protected. It can be appreciated that data used by the user applications can be stored in one or more data volumes.","In accordance with the invention, a journal group (JNLG)  is defined. The data volumes  are organized into the journal group. In accordance with the present invention, a journal group is the smallest unit of data volumes where journaling of the write operations from the host  to the data volumes is guaranteed. The associated journal records the order of write operations from the host to the data volumes in proper sequence. The journal data produced by the journaling activity can be stored in one or more journal volumes (JVOL) .","The host  also includes a recovery manager (RM) . This component provides a high level coordination of the backup and recovery operations. Additional discussion about the recovery manager will be discussed below.","The storage system  provides a snapshot (SS)  of the data volumes comprising a journal group. For example, the snapshot  is representative of the data volumes  in the journal group  at the point in time that the snapshot was taken. Conventional methods are known for producing the snapshot image. One or more snapshot volumes (SVOL)  are provided in the storage system which contain the snapshot data. A snapshot can be contained in one or more snapshot volumes. Though the disclosed embodiment illustrates separate storage components for the journal data and the snapshot data, it can be appreciated that other implementations can provide a single storage component for storing the journal data and the snapshot data.","A management table (MT)  is provided to store the information relating to the journal group , the snapshot , and the journal volume(s) .  and the accompanying discussion below reveal additional detail about the management table.","A controller component  is also provided which coordinates the journaling of write operations and snapshots of the data volumes, and the corresponding movement of data among the different storage components , , . It can be appreciated that the controller component is a logical representation of a physical implementation which may comprise one or more sub-components distributed within the storage system .",{"@attributes":{"id":"p-0034","num":"0038"},"figref":"FIG. 2","b":["110","100","219","225","219","225","225"]},"The Journal Header  comprises an offset number (JH_OFS) . The offset number identifies a particular data volume  in the journal group . In this particular implementation, the data volumes are ordered as the 0data volume, the 1data volume, the 2data volume and so on. The offset numbers might be 0, 1, 2, etc.","A starting address in the data volume (identified by the offset number ) to which the write data is to be written is stored to a field in the Journal Header  to contain an address (JH_ADR) . For example, the address can be represented as a block number (LBA, Logical Block Address).","A field in the Journal Header  stores a data length (JH_LEN) , which represents the data length of the write data. Typically it is represented as a number of blocks.","A field in the Journal Header  stores the write time (JH_TIME) , which represents the time when the write request arrives at the storage system . The write time can include the calendar date, hours, minutes, seconds and even milliseconds. This time can be provided by the disk controller  or by the host . For example, in a mainframe computing environment, two or more mainframe hosts share a timer, called the Sysplex Timer, and can provide the time in a write command when it is issued.","A sequence number (JH_SEQ)  is assigned to each write request. The sequence number is stored in a field in the Journal Header . Every sequence number within a given journal group  is unique. The sequence number is assigned to a journal entry when it is created.","A journal volume identifier (JH_JVOL)  is also stored in the Journal Header . The volume identifier identifies the journal volume  associated with the Journal Data . The identifier is indicative of the journal volume containing the Journal Data. It is noted that the Journal Data can be stored in a journal volume that is different from the journal volume which contains the Journal Header.","A journal data address (JH_JADR)  stored in the Journal Header  contains the beginning address of the Journal Data  in the associated journal volume  that contains the Journal Data.",{"@attributes":{"id":"p-0042","num":"0046"},"figref":"FIG. 2","b":["106","210","220","210","219","220","225","219","215","214"]},"A journal type field (JH_TYPE)  identifies the type of journal entry. In accordance with the invention, two types of journal entries are kept: (1) an AFTER journal and (2) a BEFORE journal. An AFTER journal entry contains the data that is contained in the write operation for which a journal entry is made. A BEFORE journal entry contains the original data of the area in storage that is the target of a write operation. A BEFORE journal entry therefore represents the contents \u201cbefore\u201d the write operation is performed. The purpose of maintaining BEFORE journal entries will be discussed below.","Journal Header  and Journal Data  are contained in chronological order in their respective areas in the journal volume . Thus, the order in which the Journal Header and the Journal Data are stored in the journal volume is the same order as the assigned sequence number. As will be discussed below, an aspect of the present invention is that the journal information ,  wrap within their respective areas , .",{"@attributes":{"id":"p-0045","num":"0049"},"figref":["FIG. 3","FIG. 1"],"b":["108","210","220","102","106","105"]},"The management table  shown in  illustrates an example management table and its contents. The management table stores a journal group ID (GRID)  which identifies a particular journal group  in a storage system . A journal group name (GRNAME)  can also be provided to identify the journal group with a human recognizable identifier.","A journal attribute (GRATTR)  is associated with the journal group . In accordance with this particular implementation, two attributes are defined: MASTER and RESTORE. The MASTER attribute indicates the journal group is being journaled. The RESTORE attribute indicates that the journal group is being restored from a journal.","A journal status (GRSTS)  is associated with the journal group . There are two statuses: ACTIVE and INACTIVE.","The management table includes a field to hold a sequence counter (SEQ) . This counter serves as the source of sequence numbers used in the Journal Header . When creating a new journal, the sequence number  is read and assigned to the new journal. Then, the sequence number is incremented and written back into the management table.","The number (NUM_DVOL)  of data volumes  contained in a give journal group  is stored in the management table.","A data volume list (DVOL_LIST)  lists the data volumes in a journal group. In a particular implementation, DVOL_LIST is a pointer to the first entry of a data structure which holds the data volume information. This can be seen in . Each data volume information comprises an offset number (DVOL_OFFS) . For example, if the journal group  comprises three data volumes, the offset values could be 0, 1 and 2. A data volume identifier (DVOL_ID)  uniquely identifies a data volume within the entire storage system . A pointer (DVOL_NEXT)  points to the data structure holding information for the next data volume in the journal group; it is a NULL value otherwise.","The management table includes a field to store the number of journal volumes (NUM_JVOL)  that are being used to contain the data (journal header and journal data) associated with a journal group .","As described in , the Journal Header Area  contains the Journal Headers  for each journal; likewise for the Journal Data components . As mentioned above, an aspect of the invention is that the data areas ,  wrap. This allows for journaling to continue despite the fact that there is limited space in each data area.","The management table includes fields to store pointers to different parts of the data areas ,  to facilitate wrapping. Fields are provided to identify where the next journal entry is to be stored. A field (JI_HEAD_VOL)  identifies the journal volume  that contains the Journal Header Area  which will store the next new Journal Header . A field (JI_HEAD_ADR)  identifies an address on the journal volume of the location in the Journal Header Area where the next Journal Header will be stored. The journal volume that contains the Journal Data Area  into which the journal data will be stored is identified by information in a field (JI_DATA_VOL) . A field (JI_DATA_ADR)  identifies the specific address in the Journal Data Area where the data will be stored. Thus, the next journal entry to be written is \u201cpointed\u201d to by the information contained in the \u201cJI_\u201d fields , , , .","The management table also includes fields which identify the \u201coldest\u201d journal entry. The use of this information will be described below. A field (JO_HEAD_VOL)  identifies the journal volume which stores the Journal Header Area  that contains the oldest Journal Header . A field (JO_HEAD_ADR)  identifies the address within the Journal Header Area of the location of the journal header of the oldest journal. A field (JO_DATA_VOL)  identifies the journal volume which stores the Journal Data Area  that contains the data of the oldest journal. The location of the data in the Journal Data Area is stored in a field (JO_DATA_ADR) .","The management table includes a list of journal volumes (JVOL_LIST)  associated with a particular journal group . In a particular implementation, JVOL_LIST is a pointer to a data structure of information for journal volumes. As can be seen in , each data structure comprises an offset number (JVOL_OFS)  which identifies a particular journal volume  associated with a given journal group . For example, if a journal group is associated with two journal volumes , then each journal volume might be identified by a 0 or a 1. A journal volume identifier (JVOL_ID)  uniquely identifies the journal volume within the storage system . Finally, a pointer (JVOL_NEXT)  points to the next data structure entry pertaining to the next journal volume associated with the journal group; it is a NULL value otherwise.","The management table includes a list (SS_LIST)  of snapshot images  associated with a given journal group . In this particular implementation, SS_LIST is a pointer to snapshot information data structures, as indicated in . Each snapshot information data structure includes a sequence number (SS_SEQ)  that is assigned when the snapshot is taken. As discussed above, the number comes from the sequence counter . A time value (SS_TIME)  indicates the time when the snapshot was taken. A status (SS_STS)  is associated with each snapshot; valid values include VALID and INVALID. A pointer (SS_NEXT)  points to the next snapshot information data structure; it is a NULL value otherwise.","Each snapshot information data structure also includes a list of snapshot volumes  () used to store the snapshot images . As can be seen in , a pointer (SVOL_LIST)  to a snapshot volume information data structure is stored in each snapshot information data structure. Each snapshot volume information data structure includes an offset number (SVOL_OFFS)  which identifies a snapshot volume that contains at least a portion of the snapshot image. It is possible that a snapshot image will be segmented or otherwise partitioned and stored in more than one snapshot volume. In this particular implementation, the offset identifies the isnapshot volume which contains a portion (segment, partition, etc) of the snapshot image. In one implementation, the isegment of the snapshot image might be stored in the isnapshot volume. Each snapshot volume information data structure further includes a snapshot volume identifier (SVOL_ID)  that uniquely identifies the snapshot volume in the storage system . A pointer (SVOL_NEXT)  points to the next snapshot volume information data structure for a given snapshot image.",{"@attributes":{"id":"p-0059","num":"0063"},"figref":"FIG. 4","b":["111","100"]},"Further in accordance with the invention, a single sequence of numbers (SEQ)  are associated with each of one or more snapshots and journal entries, as they are created. The purpose of associating the same sequence of numbers to both the snapshots and the journal entries will be discussed below.","Continuing with , the recovery manager  might define, in a step , a journal group (JNLG)  if one has not already been defined. As indicated in , this may include identifying one or data volumes (DVOL)  for which journaling is performed, and identifying one or journal volumes (JVOL)  which are used to store the journal-related information. The recovery manager performs a suitable sequence of interactions with the storage system  to accomplish this. In a step , the storage system may create a management table  (), incorporating the various information shown in the table detail  illustrated in . Among other things, the process includes initializing the JVOL_LIST  to list the journal volumes which comprise the journal group  Likewise, the list of data volumes DVOL_LIST  is created. The fields which identify the next journal entry (or in this case where the table is first created, the first journal entry) are initialized. Thus, JI_HEAD_VOL  might identify the first in the list of journal volumes and JI_HEAD_ADR  might point to the first entry in the Journal Header Area  located in the first journal volume. Likewise, JI_DATA_VOL  might identify the first in the list of journal volumes and JI_DATA_ADR  might point to the beginning of the Journal Data Area  in the first journal volume. Note, that the header and the data areas ,  may reside on different journal volumes, so JI_DATA_VOL might identify a journal volume different from the first journal volume.","In a step , the recovery manager  will initiate the journaling process. Suitable communication(s) are made to the storage system  to perform journaling. In a step , the storage system will make a journal entry (also referred to as an \u201cAFTER journal\u201d) for each write operation that issues from the host .","With reference to , making a journal entry includes, among other things, identifying the location for the next journal entry. The fields JI_HEAD_VOL  and JI_HEAD_ADR  identify the journal volume  and the location in the Journal Header Area  of the next Journal Header . The sequence counter (SEQ)  from the management table is copied to (associated with) the JH_SEQ  field of the next header. The sequence counter is then incremented and stored back to the management table. Of course, the sequence counter can be incremented first, copied to JH_SEQ, and then stored back to the management table.","The fields JI_DATA_VOL  and in the management table identify the journal volume and the beginning of the Journal Data Area  for storing the data associated with the write operation. The JI_DATA_VOL and JI_DATA_ADR fields are copied to JH_JVOL  and to JH_ADR , respectively, of the Journal Header, thus providing the Journal Header with a pointer to its corresponding Journal Data. The data of the write operation is stored.","The JI_HEAD_VOL  and JI_HEAD_ADR  fields are updated to point to the next Journal Header  for the next journal entry. This involves taking the next contiguous Journal Header entry in the Journal Header Area . Likewise, the JI_DATA_ADR field (and perhaps JI_DATA_VOL field) is updated to reflect the beginning of the Journal Data Area for the next journal entry. This involves advancing to the next available location in the Journal Data Area. These fields therefore can be viewed as pointing to a list of journal entries. Journal entries in the list are linked together by virtue of the sequential organization of the Journal Headers  in the Journal Header Area .","When the end of the Journal Header Area  is reached, the Journal Header  for the next journal entry wraps to the beginning of the Journal Header Area. Similarly for the Journal Data . To prevent overwriting earlier journal entries, the present invention provides for a procedure to free up entries in the journal volume . This aspect of the invention is discussed below.","For the very first journal entry, the JO_HEAD_VOL field , JO_HEAD_ADR field , JO_DATA_VOL field , and the JO_DATA_ADR field  are set to contain their contents of their corresponding \u201cJI_\u201d fields. As will be explained the \u201cJO_\u201d fields point to the oldest journal entry. Thus, as new journal entries are made, the \u201cJO_\u201d fields do not advance while the \u201cJI_\u201d fields do advance. Update of the \u201cJO_\u201d fields is discussed below.","Continuing with the flowchart of , when the journaling process has been initiated, all write operations issuing from the host are journaled. Then in a step , the recovery manager  will initiate taking a snapshot of the data volumes . The storage system  receives an indication from the recovery manager to take a snapshot. In a step , the storage system performs the process of taking a snapshot of the data volumes. Among other things, this includes accessing SS_LIST  from the management table (). A suitable amount of memory is allocated for fields - to represent the next snapshot. The sequence counter (SEQ)  is copied to the field SS_SEQ  and incremented, in the manner discussed above for JH_SEQ . Thus, over time, a sequence of numbers is produced from SEQ , each number in the sequence being assigned either to a journal entry or a snapshot entry.","The snapshot is stored in one (or more) snapshot volumes (SVOL) . A suitable amount of memory is allocated for fields -. The information relating to the SVOLs for storing the snapshot are then stored into the fields -. If additional volumes are required to store the snapshot, then additional memory is allocated for fields -.",{"@attributes":{"id":"p-0070","num":"0074"},"figref":"FIG. 5","b":["520","101","102","510","0","1","420","2","111","500","3","0","1"]},"Recovering data typically requires recover the data state of at least a portion of the data volumes  at a specific time. Generally, this is accomplished by applying one or more journal entries to a snapshot that was taken earlier in time relative to the journal entries. In the disclosed illustrative embodiment, the sequence number SEQ  is incremented each time it is assigned to a journal entry or to a snapshot. Therefore, it is a simple matter to identify which journal entries can be applied to a selected snapshot; i.e., those journal entries whose associated sequence numbers (JH_SEQ, ) are greater than the sequence number (SS_SEQ, ) associated with the selected snapshot.","For example, the administrator may specify some point in time, presumably a time that is earlier than the time (the \u201ctarget time\u201d) at which the data in the data volume was lost or otherwise corrupted. The time field SS_TIME  for each snapshot is searched until a time earlier than the target time is found. Next, the Journal Headers  in the Journal Header Area  is searched, beginning from the \u201coldest\u201d Journal Header. The oldest Journal Header can be identified by the \u201cJO_\u201d fields , , , and  in the management table. The Journal Headers are searched sequentially in the area  for the first header whose sequence number JH_SEQ  is greater than the sequence number SS_SEQ  associated with the selected snapshot. The selected snapshot is incrementally updated by applying each journal entry, one at a time, to the snapshot in sequential order, thus reproducing the sequence of write operations. This continues as long as the time field JH_TIME  of the journal entry is prior to the target time. The update ceases with the first journal entry whose time field  is past the target time.","In accordance with one aspect of the invention, a single snapshot is taken. All journal entries subsequent to that snapshot can then be applied to reconstruct the data state at a given time. In accordance with another aspect of the present invention, multiple snapshots can be taken. This is shown in  where multiple snapshots \u2032 are taken. In accordance with the invention, each snapshot and journal entry is assigned a sequence number in the order in which the object (snapshot or journal entry) is recorded. It can be appreciated that there typically will be many journal entries  recorded between each snapshot \u2032. Having multiple snapshots allows for quicker recovery time for restoring data. The snapshot closest in time to the target recovery time would be selected. The journal entries made subsequent to the snapshot could then be applied to restore the desired data state.",{"@attributes":{"id":"p-0074","num":"0078"},"figref":"FIG. 6","b":["106","111","102"]},{"@attributes":{"id":"p-0075","num":"0079"},"figref":"FIG. 6","b":"100"},{"@attributes":{"id":"p-0076","num":"0080"},"figref":"FIG. 7","b":["100","710","106","331","332","300"]},"If the free space falls below a predetermined threshold, then in a step  some of the journal entries are applied to a snapshot to update the snapshot. In particular, the oldest journal entry(ies) are applied to the snapshot.","Referring to , the Journal Header  of the \u201coldest\u201d journal entry is identified by the JO_HEAD_VOL field  and the JO_HEAD_ADR field . These fields identify the journal volume and the location in the journal volume of the Journal Header Area  of the oldest journal entry. Likewise, the Journal Data of the oldest journal entry is identified by the JO_DATA_VOL field  and the JO_DATA_ADR field . The journal entry identified by these fields is applied to a snapshot. The snapshot that is selected is the snapshot having an associated sequence number closest to the sequence number of the journal entry and earlier in time than the journal entry. Thus, in this particular implementation where the sequence number is incremented each time, the snapshot having the sequence number closest to but less than the sequence number of the journal entry is selected (i.e., \u201cearlier in time). When the snapshot is updated by applying the journal entry to it, the applied journal entry is freed. This can simply involve updating the JO_HEAD_VOL field , JO_HEAD_ADR field , JO_DATA_VOL field , and the JO_DATA_ADR field  to the next journal entry.","As an observation, it can be appreciated by those of ordinary skill, that the sequence numbers will eventually wrap, and start counting from zero again. It is well within the level of ordinary skill to provide a suitable mechanism for keeping track of this when comparing sequence numbers.","Continuing with , after applying the journal entry to the snapshot to update the snapshot, a check is made of the increase in the journal volume free space as a result of the applied journal entry being freed up (step ). The free space can be compared against the threshold criterion used in step . Alternatively, a different threshold can be used. For example, here a higher amount of free space may be required to terminate this process than was used to initiate the process. This avoids invoking the process too frequently, but once invoked the second higher threshold encourages recovering as much free space as is reasonable. It can be appreciated that these thresholds can be determined empirically over time by an administrator.","Thus, in step , if the threshold for stopping the process is met (i.e., free space exceeds threshold), then the process stops. Otherwise, step  is repeated for the next oldest journal entry. Steps  and  are repeated until the free space level meets the threshold criterion used in step .",{"@attributes":{"id":"p-0082","num":"0086"},"figref":["FIG. 7A","FIG. 7"],"b":["720","720"]},{"@attributes":{"id":"p-0083","num":"0087"},"figref":["FIG. 7A","FIG. 7"],"b":["720","720","721"]},"If such a snapshot can be found in step , then the earlier journal entries can be removed without having to apply them to a snapshot. Thus, in a step , the \u201cJO_\u201d fields (JO_HEAD_VOL , JO_HEAD_ADR , JO_DATA_VOL , and JO_DATA_ADR ) are simply moved to a point in the list of journal entries that is later in time than the selected snapshot. If no such snapshot can be found, then in a step  the oldest journal entry is applied to a snapshot that is earlier in time than the oldest journal entry, as discussed for step .","Still another alternative for step  is simply to select the most recent snapshot. All the journal entries whose sequence numbers are less than that of the most recent snapshot can be freed. Again, this simply involves updating the \u201cJO_\u201d fields so they point to the first journal entry whose sequence number is greater than that of the most recent snapshot. Recall that an aspect of the invention is being able to recover the data state for any desired point in time. This can be accomplished by storing as many journal entries as possible and then applying the journal entries to a snapshot to reproduce the write operations. This last embodiment has the potential effect of removing large numbers of journal entries, thus reducing the range of time within which the data state can be recovered. Nevertheless, for a particular configuration it may be desirable to remove large numbers of journal entries for a given operating environment.","In another aspect of the present invention, recovery of the production volume(s)  can be facilitated by allowing the user to interact with the recovery process. A \u201cfast recovery\u201d can be performed which quickly recovers the data state to a point in time prior to a target time. A more granular recovery procedure can then be performed which allows a user to hone in on the target data state. The user can perform \u201cundo-able recoveries\u201d to inspect the data state in a trial and error manner by allowing the user to step forward and backward (undo operation) in time. This aspect of the invention allows a user to be less specific as to the time of the desired data state. The target time specified by the user need only be a time that he is certain is prior to the time of the target data state. It is understood that \u201cthe target data state\u201d can refer to any desired state of the data.",{"@attributes":{"id":"p-0087","num":"0091"},"figref":"FIG. 3A","b":["300","300","330","331","340","332","333","341"]},"The fields related to the AFTER journal entries include a field to store the number of journal volumes (NUM_JVOLa)  that are used to contain the data (journal header and journal data) associated with the AFTER journal entries for a journal group .","As described in , the Journal Header Area  contains the Journal Headers  for each journal; likewise for the Journal Data components . As mentioned above, an aspect of the invention is that the data areas ,  wrap. This allows for journaling to continue despite the fact that there is limited space in each data area.","The management table includes fields to store pointers to different parts of the data areas ,  to facilitate wrapping. Pointer-type information is provided to facilitate identifying where the next journal entry is to be stored. A set of such information (\u201cAFTER journal pointers\u201d) is provided for the AFTER journal entries. A field (JVOL_PTRa)  in the management table identifies the location of the AFTER journal pointers.","The AFTER journal entries are stored in one or more journal volumes, separate from the BEFORE journal entries. A field (JI_HEAD_VOL) identifies the journal volume  that contains the Journal Header Area  from which the next Journal Header  will be obtained. A field (JI_HEAD_ADR) identifies where in the in Journal Header Area the next Journal Header is located. The journal volume that contains the Journal Data Area  into which the journal data will be stored is identified by information in a field (JI_DATA_VOL) . A field (JI_DATA_ADR) identifies the specific address in the Journal Data Area where the data will be stored. Thus, the next AFTER journal entry to be written is \u201cpointed\u201d to by the information contained in the \u201cJI_\u201d fields , , , ","The AFTER journal pointers also includes fields which identify the \u201coldest\u201d AFTER journal entry. The use of this information will be described below. A field (JO_HEAD_VOL) identifies the journal volume which stores the Journal Header Area  that contains the oldest Journal Header . A field (JO_HEAD_ADR) identifies the address within the Journal Header Area of the location of the journal header of the oldest journal. A field (JO_DATA_VOL) identifies the journal volume which stores the Journal Data Area  that contains the data of the oldest journal. The location of the data in the Journal Data Area is stored in a field (JO_DATA_ADR) ","The management table includes a list of journal volumes (JVOL_LISTa)  associated with the AFTER journal entries of a journal group . In a particular implementation, JVOL_LISTa is a pointer to a data structure of information for journal volumes. As can be seen in , each data structure comprises an offset number (JVOL_OFS) which identifies a particular journal volume  associated with a given journal group . For example, if a journal group is associated with two journal volumes , then each journal volume might be identified by a 0 or a 1. A journal volume identifier (JVOL_ID) uniquely identifies the journal volume within the storage system . Finally, a pointer (JVOL_NEXT) points to the next data structure entry pertaining to the next journal volume associated with the journal group; it is a NULL value otherwise.","The management table also includes a set of similar fields for managing the BEFORE journal entries. The fields related to the BEFORE journal entries include a field to store the number of journal volumes (NUM_JVOLb)  that are being used to contain the data (journal header and journal data) associated with the BEFORE journal entries for a journal group .","As discussed above for the AFTER journal entries, an aspect of the invention is that the data areas ,  wrap. The management table includes fields to store pointers to different parts of the data areas ,  to facilitate wrapping. Pointer-type information is provided to facilitate identifying where the next BEFORE journal entry is to be stored. A set of such information (\u201cBEFORE journal pointers\u201d) is provided for the BEFORE journal entries. A field (JVOL_PTRb)  in the management table identifies the location of the BEFORE journal pointers.","The BEFORE journal entries are stored in one or more journal volumes, separate from the journal volume(s) used to store the AFTER journal entries. A field (JI_HEAD_VOL) identifies the journal volume  that contains the Journal Header Area  from which the next Journal Header  will be obtained. A field (JI_HEAD_ADR) identifies where in the in Journal Header Area the next Journal Header is located. The journal volume that contains the Journal Data Area  into which the journal data will be stored is identified by information in a field (JI_DATA_VOL) . A field (JI_DATA_ADR) identifies the specific address in the Journal Data Area where the data will be stored. Thus, the next BEFORE journal entry to be written is \u201cpointed\u201d to by the information contained in the \u201cJI_\u201d fields , , , ","The AFTER journal pointers also includes fields which identify the \u201coldest\u201d BEFORE journal entry. The use of this information will be described below. A field (JO_HEAD_VOL) identifies the journal volume which stores the Journal Header Area  that contains the oldest Journal Header . A field (JO_HEAD_ADR) identifies the address within the Journal Header Area of the location of the journal header of the oldest journal. A field (JO_DATA_VOL) identifies the journal volume which stores the Journal Data Area  that contains the data of the oldest journal. The location of the data in the Journal Data Area is stored in a field (JO_DATA_ADR) ","The management table includes a list of journal volumes (JVOL_LISTb)  associated with the AFTER journal entries of a journal group . In a particular implementation, JVOL_LISTa is a pointer to a data structure of information for journal volumes. As can be seen in , each data structure comprises an offset number (JVOL_OFS) which identifies a particular journal volume  associated with a given journal group . A journal volume identifier (JVOL_ID) uniquely identifies the journal volume within the storage system . Finally, a pointer (JVOL_NEXT) points to the next data structure entry pertaining to the next journal volume associated with the journal group; it is a NULL value otherwise.","The recover manager  provides the following interface to the storage system for the aspect of the invention which provides for \u201cfast\u201d and \u201cundo-able\u201d recovery modes. The interface is shown in a format of an application programmer's interface (API). The functionality and needed information (parameters) are described. It can be appreciated that any suitable programming language can be used.",{"@attributes":{"id":"p-0100","num":"0104"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["BACKUP","journal_volume"]},{"entry":[{},"This initiates backup processing to commence in the"]},{"entry":[{},"storage system 100. More specifically, the logging"]},{"entry":[{},"of AFTER journal entries is initiated for each write "]},{"entry":[{},"operation to the data volumes 101. The parameter"]},{"entry":[{},"journal_volume identifies the volume 102 that"]},{"entry":[{},"contains the journal entries. As discussed above, a"]},{"entry":[{},"initial snapshot is taken after journaling commences."]},{"entry":["RECOVER_PH1","journal_volume target_time"]},{"entry":[{},"This initiates a PHASE I recovery process. This"]},{"entry":[{},"recovery is the procedure discussed above. Briefly, "]},{"entry":[{},"AFTER journal entries are applied to an appropriate"]},{"entry":[{},"snapshot. The journal entries are contained in"]},{"entry":[{},"the volume(s) identified by journal_volume."]},{"entry":[{},"The desired data state is specified by target_time."]},{"entry":[{},"The target_time can be a time format (e.g.,"]},{"entry":[{},"year:month:date:hh:mm). Alternatively, the"]},{"entry":[{},"target_time can be a journal sequence"]},{"entry":[{},"number 215, so that journal entries subsequent"]},{"entry":[{},"to the sequence number associated with the"]},{"entry":[{},"snapshot and up to the specified sequence number"]},{"entry":[{},"are applied. Still another alternative is that"]},{"entry":[{},"the target_time is simply the number of journal"]},{"entry":[{},"entries to be applied to a snapshot (e.g., apply"]},{"entry":[{},"the next one hundred journal entries)."]},{"entry":[{},"Depending on configuration and storage resources,"]},{"entry":[{},"the snapshot can be copied to the production"]},{"entry":[{},"volume. Data recovery can then proceed on"]},{"entry":[{},"the production volume."]},{"entry":["RECOVER_PH2","journal_volume_1 journal_volume_2 target_time"]},{"entry":[{},"This initiates a PHASE II recovery process. As"]},{"entry":[{},"will be discussed in more detail below, this"]},{"entry":[{},"procedure involves making a BEFORE journal"]},{"entry":[{},"entry before applying eacn AFTER journal"]},{"entry":[{},"entry to a snapshot. As will be explained below,"]},{"entry":[{},"this recovery process allows for \u201cun-doing\u201d an"]},{"entry":[{},"update operation on a snapshot. The AFTER journal"]},{"entry":[{},"entries are located in the volume identified by"]},{"entry":[{},"journal_volume_1. The BEFORE journal entries"]},{"entry":[{},"are located in the volume identified by"]},{"entry":[{},"journal_volume_2. The desired data state is"]},{"entry":[{},"specified by target_time. The desired data"]},{"entry":[{},"state is specified by target_time. The target_time"]},{"entry":[{},"can be a time format (e.g., year:month:date:hh:mm)."]},{"entry":[{},"Alternatively, the target_time can be a journal"]},{"entry":[{},"sequence number 215, so that journal entries"]},{"entry":[{},"subsequent to the sequence number associated"]},{"entry":[{},"with the snapshot and up to the specified sequence"]},{"entry":[{},"number are applied. Still another alternative is that"]},{"entry":[{},"the target_time is simply the number of journal"]},{"entry":[{},"entries to be applied to a snapshot (e.g., apply"]},{"entry":[{},"the next one hundred journal entries)."]},{"entry":["STOP_RECOVER","This will cause the storage system to cease recovery"]},{"entry":[{},"processing. Thus, a PHASE I recovery operation or"]},{"entry":[{},"a PHASE II recovery operation will be terminated."]},{"entry":[{},"In addition, BEFORE journaling is initiated. This"]},{"entry":[{},"will cause BEFORE journal entries to be made"]},{"entry":[{},"each time the host 110 issues a write operation, in"]},{"entry":[{},"addition to the making an AFTER journal entry."]},{"entry":["UNDO_RECOVER","journal_volume_1 journal_volume_2 target_time"]},{"entry":[{},"As will be discussed in more detail below,"]},{"entry":[{},"this operation will revert an updated snapshot"]},{"entry":[{},"to an earlier point in time. This is accomplished"]},{"entry":[{},"by \u201cundoing\u201d one or more applications"]},{"entry":[{},"of an AFTER journal entry. The target_time"]},{"entry":[{},"can be any of the forms previously discussed."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Referring now to , a generalized process flow is shown highlighting the steps for recovering data in accordance with the \u201cfast\u201d and \u201cundo-able\u201d recovery mode aspects of the present invention. One will appreciate from the following that the described technique can be used to recover or otherwise retrieve a desired data state of any data volume(s). The retrieval methods and apparatus disclosed herein are not limited to disaster recovery scenarios. The invention has applicability for users (e.g., system administrators) who might have a need to look at the state of a file or a directory at an earlier point in time. Accordingly, the term \u201crecovery volume\u201d is used in a generic sense to refer to one or more volumes on which the data recovery process is being performed.","It can be appreciated that the recovery manager  can include a suitable interface for interaction with a user. An appropriate interface might be a graphical user interface, or a command line interface. It can be appreciated that voice recognition technology and even virtual reality technology can be used as input and output components of the interface for interacting with a user. Alternatively, the \u201cuser\u201d can be a machine (such as a data processing system) rather than a human. In such a case, a suitable machine-machine interface can be readily devised and implemented.","The first phase of the recovery process is referred to as \u201cfast\u201d recovery. The idea is to quickly access the data state of the recovery volume at a point in time that is \u201cclose\u201d in time to the desired data state, but prior in time to the desired data state. Thus, in a step , the recovery manager  obtains from the user a \u201ctarget time\u201d that specifies a point in time that is close to the time of the desired data state. A suitable query to the user might inform the user as to the nature of this target time. For example, if the user interacted with a system administrator, she might tell the administrator that she was sure her files were not deleted until after 10:30 AM. The target time would then be 10:30 AM, or earlier. Likewise, a user interface can obtain such information from a user by presenting a suitable set of queries or prompts. Given the target time, the recovery manager can then issue a RECOVER_PH operation to the storage system (e.g., system , ) that contains the recovery volume.","In response, the storage system would initiate phase I recovery. Referring to  for a moment, the storage system  in response to the RECOVER_PH request, would determine in a step  whether recovery is possible. Two conditions are checked:\n\n","Then in a step , the recovery volume is set to an offline state. In the context of the present invention \u201coffline\u201d is taken to mean that the user, and more generally the host device , cannot access the recovery volume. For example, in the case that the production volume is being used as the recovery volume, it is likely to be desirable that the host  be prevented at least from issuing write operations to the volume. Also, the host typically will not be permitted to perform read operations. Of course, the storage system itself has full access to the recovery volume in order to perform the recovery task.","In a step , the snapshot is copied to the recovery volume in preparation for phase I recovery. The production volume itself can be the recovery volume. However, it can be appreciated that the recovery manager  can allow the user to specify a volume other than the production volume to serve as the target of the data recovery operation. For example, the recovery volume can be the volume on which the snapshot is stored. Using a volume other than the production volume to perform the recovery operation may be preferred where it is desirable to provide continued use of the production volume.","In a step , one or more AFTER journal entries are applied to update the snapshot volume in the manner as discussed previously. Enough AFTER journal entries are applied to update the snapshot to a point in time up to or prior to the user-specified target time.","Returning to , upon completion of phase I recovery, the storage system  can signal the recovery manager (step ) to indicate phase I has completed. The recovery manager  would then issue a STOP_RECOVER operation to the storage system. In response, the storage system  (step ) would put the recovery volume into an online state. In the context of the present invention, the \u201conline\u201d state is taken to mean that the host device  is given access to the recovery volume.","Next, in a step , the user is given the opportunity to review the state of the data on the recovery volume to determine whether the desired data state has been recovered. At this point, the data state has been recovered to some point in time prior to the time of the desired data state. Additional recovery might bee needed to reach the desired data state. If the desired data state has been achieved then the recovery process is stopped. If the desired data state is not achieved, then a determination is made whether another phase I recovery operation is to be performed, or whether a phase II recovery operation is to be performed.","Recall that phase I recovery involves updating the snapshot by applying the AFTER journal entries to it to reproduce the sequence of write operations made since the snapshot was taken. A phase II recovery operation involves taking a BEFORE journal entry for each AFTER journal entry that is applied. It can be appreciated that phase II recovery is a slower process than phase I recover. The decision whether to proceed using phase I recovery mode or phase II recovery mode can be made by the user after she has inspected the recovered data state. For example, she may learn from inspecting the recovered data state that an additional few hours of recovery is needed, in which case she may specify via the recovery manager  to perform the faster phase I recovery and provide a refined target time. If the recovered data state seems close to the desired data state, then the user may want to perform the slower phase II recovery to take advantage of the \u201cundo\u201d aspect (see below) provided by a phase II recovery operation.","Alternatively, the user interface can algorithmically determine whether to perform phase I or phase II recover. The interface can input the user's refined target time and compare that against the initial target time. Based on the comparison, the interface can choose an appropriate recovery mode. For example, if the difference in time is X minutes or greater, then a phase I recovery is performed, otherwise a phase II recovery is commenced.","A factor to consider at this decision point (step ) is that phase I recovery cannot be conveniently \u201cundone.\u201d If the recovered data state is beyond the desired data state, then the only way to reverse the data recovery action is to start again from the original snapshot. This can be time consuming. A phase II recovery in accordance with the present invention, on the other hand, can be undone. Thus, if a recovered data state is close to the user's refined time estimate, then a phase II recovery operation may be preferred.",{"@attributes":{"id":"p-0113","num":"0119"},"figref":"FIG. 8","b":["850","313"]},"In a step , a STOP_RECOVER operation is issued to put the recovery volume in an online state. The user is then able to inspect the recovery volume. Based on the inspection, if the user determines in a step  that the desired data state of the recovery volume is achieved, then the recovery process is complete. If the user determines that the desired data state is not achieved, then a further determination is made whether the data recovery has gone beyond the desired data state. If so, then the snapshot updates are \u201cundone\u201d (step ) by accessing one or more BEFORE journal entries. This combination of taking BEFORE journals and AFTER journals constitutes a phase II recovery.",{"@attributes":{"id":"p-0115","num":"0121"},"figref":["FIG. 10","FIG. 1"],"b":["1020","101","1012","1012","1012","1012"],"i":["a ","a "]},"Continuing, to the next AFTER journal entry , again a BEFORE journal entry  is created to record the original data in the area of the production volume that is the target of the AFTER journal entry before the AFTER journal entry is applied to the snapshot . Again, a pair of journal entries result: an AFTER journal entry and its corresponding BEFORE journal entry . Similar BEFORE journal entries  and  are created for the AFTER journal entries and ","Now, with reference to , in accordance with phase II processing, the snapshot  is updated by the sequential application of the AFTER journal entries -(along with the creation of the corresponding BEFORE journal entries -). Thus, the snapshot  is updated by performing the write operation indicated in the AFTER journal entry to produce an updated snapshot . The updated snapshot is again updated by performing the write operation indicated in the AFTER journal entry to produce . The updated snapshot is subsequently updated in turn by the AFTER journal entries and to produce snapshots and ","Referring to , an \u201cundo\u201d operation can now be described. The","procedure includes applying the information contained in the BEFORE journals to the updated snapshots. The BEFORE journal entries are applied in timewise reverse order. Thus, to restore the snapshot from its state in to its previous state in , the BEFORE journal entry  is applied to the snapshot to reproduce the snapshot . To perform another \u201cundo\u201d iteration, the BEFORE journal entry  is applied to the snapshot to reproduce the snapshot . From this discussion, it can be appreciated that in order to \u201cundo\u201d a snapshot that has been updated by a set of AFTER journals, a BEFORE journal is needed that exists earlier in time than any of the AFTER journals in the set. Phase II processing provides the requisite BEFORE journal entries in order to perform the undo operation.","Returning to , one or more of the BEFORE journal entries can be applied (step ) to the updated snapshot in this manner to perform a \u201creverse update\u201d of one or more of the AFTER journal entries. This has the effect of moving the state of the recovered data in the recovery volume backward in time. The number of BEFORE journal entries to apply can be a fixed number; for example, move back in time by one minute increments, or by some number N of BEFORE journal entries. Alternatively, the user can specify how far back in time to move the data state by specifying a reverse target time (e.g., an absolute time such as 10:34 AM), or an increment of time (e.g., a delta time value such as 10 minutes). The user is given the opportunity to inspect the data state of the recovery volume to determine whether to continue backward in time or to move forward. Repeating this allows the user to restore the desired data state in an iterative and interactive manner by shuffling the data state backward and forward in time.","It can be appreciated that phase II processing will be slower than phase I recovery for the reason that a BACKUP journal entry must be created before applying an AFTER journal entry to update the snapshot. For this reason, phase I recovery is also referred to as \u201cfast recovery.\u201d Since phase II recovery permits the user to undo an updated snapshot, it can be referred to as \u201cundo-able\u201d recovery.","The foregoing disclosed embodiments typically can be provided using a combination of hardware and software implementations; e.g., combinations of software, firmware, and\/or custom logic such as ASICs (application specific ICs) are possible. One of ordinary skill can readily appreciate that the underlying technical implementation will be determined based on factors including but not limited to or restricted to system cost, system performance, the existence of legacy software and legacy hardware, operating environment, and so on. The disclosed embodiments can be readily reduced to specific implementations without undue experimentation by those of ordinary skill in the relevant art."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Aspects, advantages and novel features of the present invention will become apparent from the following description of the invention presented in conjunction with the accompanying drawings:",{"@attributes":{"id":"p-0012","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0019"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0016","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0022"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0019","num":"0023"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0024"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0025"},"figref":["FIG. 7A","FIG. 7"]},{"@attributes":{"id":"p-0022","num":"0026"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0023","num":"0027"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0024","num":"0028"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0025","num":"0029"},"figref":["FIG. 11","FIG. 10"]}]},"DETDESC":[{},{}]}
