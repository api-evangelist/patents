---
title: Service logic context cache for signaling events
abstract: A method for sharing signaling event data in a telephony system can include receiving within a first service logic component an event from a telephony signaling network. An event context can be determined for the event and asynchronously stored within an event context cache communicatively linked with at least said first service logic component and a second service logic component.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07130408&OS=07130408&RS=07130408
owner: International Business Machines Corporation
number: 07130408
owner_city: Armonk
owner_country: US
publication_date: 20020614
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Technical Field","The invention relates to the field of telephony and, more particularly, to exchanging information between service logic components in a telephony network.","2. Description of the Related Art","Telecommunication companies continually create new telephony services and\/or features (hereafter \u201cservices\u201d) to be offered to subscribers. Often, these services require the interaction of multiple service logic components. One common example is call control service logic and transaction service logic. While the call control service logic is associated with setting up the voice communication aspects of a telephone call, the transaction service logic provides the foundation for non-voice processing aspects of a telephone service such as 800 number translation, database querying, Short Message Service (SMS), Local Number Portability, and other transaction-based services or service components. Thus, to implement a given telephony service, call control service logic often must interact with transaction service logic.","For example, if a telephone call is to be transferred to another directory number as a result of a number translation performed by the transaction service logic, the call control service logic must be able to obtain the call transfer information from the transaction service logic. That is, responsive to receiving a telephone call, the call control service logic must query the originating service, in this case the transaction service logic, to determine how to handle the telephone call. Traditionally, this interaction between different service logic components has been accomplished through the use of a service-to-service messaging protocol.","Through the service-to-service messaging protocol, a receiving service can determine contextual information regarding a given telephone call. Accordingly, the receiving service, in this case the call control service logic, with reference to the contextual information, can process the telephone call. The service-to-service messaging mechanism, however, has disadvantages. One such disadvantage is that the originating service must remain active to provide information in the form of multiple messages to any receiving services in need of contextual information to complete a call. The originating service becomes the \u201cmaster\u201d and the receiving service becomes the \u201cslave\u201d. The originating service remains active solely to provide needed messaging functions for receiving services despite the fact that the primary function of the originating service has completed. In consequence, costly memory and processor resources are consumed for the duration of the service-to-service lifetime.","Another disadvantage is that the cost of updating a service-to-service messaging protocol can be very high. Notably, each service logic component that relies on the service-to-service messaging protocol must be updated along with the protocol itself. Thus, at a minimum, two service logic components must be updated for a given protocol enhancement. In consequence, multiple nodes within a telephony network may have to undergo a coordinated update process.","These types of issues have been a hindrance to the development of the Intelligent Network (IN) as well as Advanced Intelligent (AIN). Although multiple protocols such as SR-3511, 1129 CORE, CORE INAP, and the like have been developed, no global standard has emerged. Additionally, the cost model for maintaining a service control point (SCP) has begun to rival that of maintaining a telephony switch. Moreover, as services implemented using the SCP cost model are resource intensive, the need to utilize memory and processor resources for the duration of the service-to-service lifetime further increases the cost of service implementation, deployment, and maintenance.","The invention provides a solution for sharing signaling event data between two or more service logic components in a telephony system. For example, the invention can be used as an interface between a call processing system and a transaction processing system in a telephony environment. In particular, an event context cache can be communicatively linked with two or more service logic components of a telephony system. As such, the present invention can eliminate the need for the coordinated implementation of a service-to-service messaging protocol within each telephony service component. The service logic components can make entries within the event context cache and then process other events. Other service logic components can access the information within the event context cache. Accordingly an originating service logic component need not remain in focus or continue executing only to provide other service logic components with call processing instruction messages.","One aspect of the present invention can include a method for sharing signaling event data in a telephony system. The method can include receiving within a first service logic component an event from a telephony signaling network, determining an event context for the event, and storing the event context within an event context cache communicatively linked with the first service logic component and at least a second service logic component.","The first service logic component can be a call processing system including an ISDN and\/or User Part interface (ISUP). The second service logic component can be a transaction processing system including a transaction capability application part (TCAP) interface. The telephony signaling network can be a Signaling System Number 7 network. Accordingly, where the event is a TCAP event, the determining event data step can include identifying a dialed number inbound service, a called directory number, and at least one telephony service to be executed from the received TCAP event.","The method further can include receiving a subsequent TCAP event, determining whether an event context for the subsequent TCAP event exists in the event context cache, and if not, determining an event context for the subsequent TCAP event. The event context for the subsequent TCAP event can specify a dialed number inbound service, a called directory number, and at least one telephony service to be executed. The event context can be stored within the event context cache. Accordingly, the call processing component can access the event context cache to determine how to process a transferred call.","Another aspect of the present invention can include a method for sharing signaling event data in a telephony system including receiving a call and determining whether an event context associated with the received call exists in an event context cache. For example, the determining step can include identifying a dialed number inbound service and a called directory number from the call and searching the event context cache according to the dialed number inbound service and the called directory number. If an entry exists in the event context cache, the event can be retrieved. For example, a location of a voice markup language script to be executed for processing the received call can be identified. If the event specifies attributes, the attributes can be identified and provided to the voice markup language script upon execution. If no event context exists in the event context cache for the received call, a call recovery mechanism can be executed.","Another aspect of the present invention can include a telephony system including a first service logic component, a second service logic component, and an event context cache communicatively linking the first service logic component and the second service logic component. The first service logic component can be a call processing system configured to process ISUP events. The second service logic component can be a transaction processing system configured to process TCAP events. The event context cache can provide information exchange between the first service logic component and the second service logic component without using a service-to-service messaging protocol.","Another aspect of the present invention can include a telephony system including a call processing component having a distributed logical environment for executing voice markup language script implementations telephony services and a transaction processing component having a distributed logical environment for executing TCAP markup language script implementations of telephony services. The call processing component and the transaction processing component can be communicatively linked by an event context cache.","The call processing component can include a call processor unit configured to receive calls. The call processor unit can include addresses of voice markup language document implementations of telephony services associated with directory numbers. The call processing component also can include a voice markup language parser configured to retrieve the voice markup language documents from the addresses and parse the voice markup language documents responsive to receiving the calls. The call processing component further can include a service processor configured to execute the parsed voice markup language documents to implement the telephony services and at least one session manager configured to coordinate the operation of the voice markup language parser and the service processor.","The transaction processing component can include a transaction service processor having addresses of TCAP markup language script implementations of telephony services associated with directory numbers. The transaction service processor can be configured to execute parsed TCAP markup language scripts to implement the telephony services. The transaction processing component also can include a TCAP markup language parser and at least one transaction session manager. The TCAP markup language parser can be configured to retrieve the TCAP markup language script implementations of telephony services from the addresses and parse the TCAP markup language scripts. The transaction session manager can be configured to coordinate the operation of the TCAP markup language parser and the transaction service processor.","The invention provides a solution for sharing signaling event data between two or more service logic components in a telephony system. For example, the invention can be used as an interface between a call processing system and a transaction processing system in a telephony environment. In particular, an event context cache can be communicatively linked with two or more service logic components of a telephony system. The service logic components can communicate via the event context cache by storing event context information which can indicate to other service logic components how to process a received call.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1","b":["10","25","15","20","25","15","20","25","15","25","15","20","15","20","25","25"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2","b":["50","65","55","60","55","60"]},"In operation, the transaction processing service component  can receive a TCAP event. The transaction processing service component  can access the event context cache  to determine whether an event context associated with the received TCAP event exists in the event context cache . If so, then the transaction processing service component  can refresh the event context cache entry. If not, the transaction processing service component  can place a new entry in the event context cache . For example, the transaction processing service component  can place an entry within the event context cache  specifying a dialed number inbound service (DNIS), a called number, as well as any call processing applications, scripts, and\/or associated data required for the execution of the call processing applications and scripts.","The transaction processing service component  can determine that, responsive to the TCAP event, a call is to be transferred to a voice mailbox associated with the DNIS. Accordingly, the transaction processing service component  can determine the directory number to which the call is to be transferred as well as any applications to be executed to process the transferred call. Thus, in this case, the transaction processing service component can make an entry in the event context cache specifying the DNIS, the calling number, the directory number to which the call is to be transferred, as well as any applications and application parameters.","The call processing service component , upon receiving the call can consult the event context cache  using the DNIS and the calling directory number specified by the incoming call. The call processing service component  can obtain information such as the directory number to which the call is to be transferred as well as any application to be executed and application parameters. The event context cache entries need only be retained for several seconds such that a receiving service component, in this case the call processing service component , can access needed information for processing a received call. Otherwise, if no entry in the event context cache  is located for the received call, the call processing service component can implement a recovery mechanism such as dropping the call, playing a message to the calling party, forwarding the call to a voice mail associated with the DNIS, or the like.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 3","FIG. 3"],"b":["100","100","102","104","102","104","260"]},"The call control component  can include a media gateway , bean\/script applications (service processors) , session managers , VXML parsers , a hyper-text transfer protocol (HTTP) server , and a data store . The data store  can include one or more VXML scripts specifying documents, audio, text, and the like. The VXML scripts, for example script , are script implementations specifying call control aspects of telephony services. The VXML scripts within the data store  can be accessed via the HTTP server . It should be appreciated that although the data store  is depicted as a single data store, it can be implemented as one or more distributed data stores.","The media gateway  can be communicatively linked to one or more telecommunication trunk lines (not shown) such as T1 lines and\/or ISDN lines. Each incoming telecommunication trunk line can be interfaced with a channel processor  serving as an interface between the media gateway  and the telecommunications trunk line. One channel processor  can be included for each voice circuit of a corresponding telephony switch. The media gateway  also can include an application table  and a bean\/script interface . The application table  can specify associations between DNISs, and the VXML script implementations of telephony services stored in data store . More specifically, the application table  maintains a listing of DNISs and telephony services for which the DNISs have been registered.","The application table  further specifies network locations from which the various VXML script implementations of the telephony services can be retrieved.","Accordingly, upon receiving an incoming call, the media gateway  can determine the DNIS specified by the incoming call. The DNIS can be matched to one or more VXML scripts using the application table . Thus, the locations or addresses of the VXML script implementations of the telephony services for which the DNIS has been registered can be identified. The locations of the VXML scripts of the telephony services can be provided to the session managers .","The media gateway  also can include a signaling system number 7 (SS7) interface . The SS7 interface  can include a Message Transfer Part (MTP) interface as well as an ISDN User Part Interface (ISUP). The SS7 interface  of the media gateway  can support those protocols necessary to set up and tear down calls and support voice communications. For example, the MTP interface can support services for the physical layer, the data link layer, and the network layer. The MTP interface can facilitate reliable exchange of signaling messages between two communicating endpoints. Through the use of MTP, one may perform tasks such as flow control, error checking, and message sequencing between the endpoints. The MTP interface also can provide the services necessary for ensuring the delivery between signaling points by performing addressing, routing, and congestion control. The ISUP interface can provide the necessary call control services that can be used during the establishment and termination of calls over a PSTN. Notably, the ISUP interface can be utilized to determine which procedures are appropriate for setting up, maintaining and tearing down trunk calls on the signaling network.","The bean\/script interface , which can include bridge services or functions for connecting one local area network (LAN) to another LAN, can be included in the media gateway . The bean\/script interface  can facilitate communications between the service processors  and the other components of the media gateway  such as the channel processors  and the voice interface . The bean\/script interface  can be configured to support the range of functionality that can be provided through the VXML scripts as interpreted by the service processors  to be discussed herein. Notably, as the VXML scripts can support extended call control and TCAP functions, the bean\/script interface  also can be configured to support those call control and TCAP functions. The voice interface  can provide speech recognition as well as text-to-speech (TTS) functions. Accordingly, speech received via the telecommunications trunk lines can be converted to text, and text data can be converted to an audio stream to be provided to one or more subscribers via the telecommunications trunk lines.","Taken together, the service processors , the session managers , and the VXML parsers , provide the components of a distributed voice browser. The VXML parsers  can be instantiated at runtime and can retrieve the VXML scripts from the data store  via the HTTP server . The VXML parsers  can convert the retrieved VXML scripts into an intermediate format which can be mapped to, and interpreted by, the service processors . Notably, the VXML scripts can be enhanced to include new tags defining TCAP transactions such as Allow Call, Block Call, Forward Call, Selective Forward Call, and Bridge Call. Accordingly, the VXML parser  also can be configured to identify any additional tag enhancements to the VXML scripts.","The service processors  can be reusable software components which can be combined with other components in the same or different computer system in a distributed computing environment. One service processor  can be instantiated at runtime for each channel processor , and thus, can be associated with that particular channel processor. The service processors  effectively serve as interpreters which provide the execution environment for the parsed VXML scripts to implement the telephony services specified by the VXML scripts. Accordingly, the service processors  match the internal functionality of the media gateway  with the parsed VXML script representation of the telephony service. As shown, the service processors  can be communicatively linked to the voice interface  of the media gateway . Thus, the service processors  can access TTS and speech recognition functions for implementing the telephony service as specified by the parsed VXML script. For example, text and recognized speech can be used to populate fields of a VXML script, form, and\/or document.","Notably, the service processors  and the VXML parsers  can execute within Java virtual machines  and  respectively. Although  depicts a plurality of service processors  and VXML parsers  executing within individual Java virtual machines  and , each of the service processors  and the VXML parsers  can execute within an individual Java virtual machine thereby minimizing the risk that an error occurring within one program will adversely affect another.","Each of the service processors  and the VXML parsers  can register with the session managers . Accordingly, the session managers  can track which service processors  and VXML parsers  are available for call processing. The session managers  further can coordinate the operation of a service processor \/VXML parser  pair. The session manager  can pass information between service processors  and VXML parsers . In particular, requests provided to the session managers  from the media gateway  can include the called directory number, one or more universal resource identifiers (URI), including universal resource locators (URLs), specifying one or more VXML script representations of telephony services, and an identifier representing the particular channel processor upon which the call was received. The session managers  can save the information in a local data store. As such, the session managers  can determine a free VXML parser  to which the received URI can be provided. Additionally, results from the VXML parsers  can be provided back to the proper service processor  according to the saved URI, called directory number, and channel processor identifier.","As was the case with the service processors  and the VXML parsers , a plurality of session managers  can execute within a single Java virtual machine, or each session manager  can execute within an individual Java virtual machine. In any case, as mentioned, the service processors , the session managers , and the VXML parsers  can exist in separate computing machines distributed throughout a computing network. Further, these various components can be replicated as needed to support increased processing loads. In consequence, the service processors , the session managers , and the VXML parsers , when taken together, provide a distributed voice browser architecture which can be scaled to support a large volume of system requests. A cache memory  can be disposed between the session managers  and the VXML parsers . The cache memory  can increase system performance by reducing multiple fetching and parsing of frequently used VXML scripts.","The transactional processing component  can include an SS7 TCAP server , an SS7 TCAP client , TCAP bean\/script applications (transaction service processors) , transaction session managers , TCAP XML parsers , a hyper-text transfer protocol (HTTP) server , and a data store . The data store  can include one or more TCAP XML scripts, such as script , specifying transactions to be performed in accordance with one or more telephony services. For example, the TCAP XML scripts can implement 800 number translation, database querying, Short Message Service (SMS), Local Number Portability, and other transaction-based services or service aspects. The TCAP XML scripts within the data store  can be accessed via the HTTP server . It should be appreciated that although the data store  is depicted as a single data store, it can be implemented as one or more distributed data stores.","The SS7 server  can provide an interface to the signaling network, in this case the SS7 network. The SS7 server  can include an MTP interface, a Signaling Connection Control Part Interface (SCCP), as well as a TCAP interface. The SCCP interface can provide addressing capabilities to applications within a signaling point. For example, the SCCP interface can be utilized for addressing the applications that provide 800 number call processing, advanced intelligent network (AIN) services, calling or credit card processing services and custom local area signaling services (CLASS). The SS7 server  can provide other interfaces, for example, a mobile application part (MAP) interface, an intelligent network (IN) interface, and an advanced intelligent network (AIN) interface or an IN (ITU-T\/ETSI CS1\/2) interface. These interfaces can be used to either augment existing services or provide new service capabilities or enhancements.","The TCAP interface can be an application-based interface which can provide the services necessary for supporting non-circuit related activities including the exchange of transaction-related information between network entities. The TCAP interface can, for example, utilize the SCCP interface for delivering messages to applications. Notably, the TCAP interface can provide the services necessary for 800 number transactions, calling or credit card transactions, as well as AIN and CLASS transactions. The SS7 client  can include a library of application programming interfaces (API) that can be used to interact with the SS7 server . Additionally, the SS7 client  can facilitate communications with the transaction processors  through a Java enabled TCAP interface which can be referred to as a Java enabled TCAP application protocol interface.","The TCAP XML parsers  can be instantiated at runtime and can retrieve the TCAP XML scripts from the data store  via the HTTP server . The TCAP XML parsers  can convert the retrieved TCAP XML scripts into an intermediate format which can be mapped to, and interpreted by, the transaction service processors . The TCAP XML scripts can include tags defining TCAP transactions such as allow call, block call, forward call, selective forward call, and bridge call. Accordingly, the TCAP XML parser  also can be configured to identify any TCAP related tags within the TCAP XML scripts.","The transaction service processors  can be reusable software components which can be combined with other components in the same or different computer system in a distributed computing environment. The transaction service processors  can be configured to communicate with the SS7 client  via a Java enabled TCAP interface. One transaction service processor  can be instantiated at runtime for each received TCAP event, or alternatively, one or more transaction service processors  can remain in operation to receive TCAP events. In any case, additional transaction service processors  can be instantiated as needed to process additional TCAP events. Each of the transaction service processors  can be associated with a copy of an application table . The application table  can specify associations between DNISs, and the TCAP XML script implementations of telephony services stored in data store . More specifically, the application table  maintains a listing of DNISs and telephony services for which the DNISs have been registered. The application table  further specifies network locations from which the various TCAP XML script implementations of the telephony services can be retrieved.","Upon receiving a TCAP event through a TCAP interface from the SS7 client , a transaction service processor  can be instantiated. The transaction service processor  can receive the DNIS specified by the incoming TCAP event from the TCAP client . The transaction service processor  can match the DNIS to one or more TCAP XML scripts using the application table . Thus, the locations or addresses of the TCAP XML script implementations of the telephony services for which the DNIS has been registered can be identified. The locations of the TCAP XML scripts of the telephony services can be provided to the transaction session managers .","The transaction service processors  also serve as interpreters which provide the execution environment for the parsed TCAP XML scripts to implement the transactional aspects of telephony services. Through the TCAP interface, the transaction service processors  can interact with a TCAP stack to implement the transaction based services defined by the TCAP XML scripts.","Notably, the transaction service processors  and the TCAP XML parsers  can execute within Java virtual machines  and  respectively. Although  depicts a plurality of transaction service processors  and TCAP XML parsers  executing within individual Java virtual machines  and , each of the transaction service processors  and the TCAP XML parsers  can execute within an individual Java virtual machine thereby minimizing the risk that an error occurring within one program will adversely affect another.","Each of the transaction service processors  and the TCAP XML parsers  can register with the transaction session managers . Accordingly, the transaction session managers  can track which transaction service processors  and TCAP XML parsers  are available for call processing. The transaction session managers  further can coordinate the operation of a transaction service processor \/TCAP XML parser  pair. The transaction session manager  can pass information between transaction service processors  and TCAP XML parsers .","For example, TCAP events provided to the transaction session managers  from the transaction service processors , after being matched to an appropriate TCAP XML script from the application table , can specify the DNIS, one or more universal resource identifiers (URI), including universal resource locators (URLs), specifying one or more TCAP XML script representations of telephony services, a TCAP identifier, and a transaction processor identifier. The transaction session managers  can save the information in a local data store. Accordingly, the transaction session managers  can determine a free TCAP XML parser  to which the received URI can be provided. Additionally, results from the TCAP XML parsers  can be provided back to the proper transaction service processor  according to the saved URI, the DNIS, and transaction processor identifier.","As was the case with the transaction service processors  and the TCAP XML parsers , a plurality of transaction session managers  can execute within a single Java virtual machine, or each transaction session manager  can execute within an individual Java virtual machine. In any case, as mentioned, the transaction service processors , the transaction session managers , and the TCAP XML parsers  can exist in separate computing machines distributed throughout a computing network. Further, these various components can be replicated as needed to support increased processing loads. In consequence, the transaction service processors , the session managers , and the TCAP XML parsers , when taken together, provide a distributed TCAP event processing architecture having distinct logical components which can be scaled to support a large volume of TCAP events.","A cache memory  can be disposed between the transaction session managers  and the TCAP XML parsers . The cache memory  can increase system performance by reducing multiple fetching and parsing of frequently used TCAP XML scripts. The inventive arrangements disclosed herein further can include one or more firewalls , , and . Although firewalls are not necessary for operation of the system  as disclosed herein, the addition of the firewalls provides added network security. In particular, firewalls  and  provide double firewall protection as required by many telecommunications companies. Firewall  can provide isolation of the VXML and TCAP XML parsers from corporate or other private networks.","The call processing component  and the transactional processing component  can be communicatively linked by an event context cache . The event context cache  can be an asynchronous cache wherein the entries have a life cycle of only several seconds. The transactional processing component  can store information regarding a call, a TCAP event, or service within the event context cache . The information stored in the context cache by the transactional processing component  can be accessed by the call processing component . As such, the information can provide the call processing component  with an indication as to how to process a call that is transferred or received by the call processing component  as a result of a TCAP event received in the transactional processing component .","For example, when executing a TCAP XML script, the transaction service processors  can make an entry in the context cache . Though each entry is maintained for only a few seconds, the entry can specify information including the DNIS, the calling number, as well as a service name or URI, for example a VXML script to be executed, as well as any parameters which may be needed by the VXML script for execution. Notably, the event context for a received TCAP event can be determined through execution of a TCAP XML script. When the call processing component receives a transferred call, the call processing component  can access the context cache  to determine a proper course of action for processing the call, rather than querying the transaction processing component  through a service-to-service messaging protocol.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 4","FIG. 3","FIG. 3"],"b":["300","405","410"]},"The TCAP event then can be provided to a transaction service processor in step . The TCAP event can specify a DNIS and a calling directory number. Accordingly, in step , one or more TCAP XML scripts which are associated with the DNIS can be identified. For example, the listing of DNISs and associated TCAP XML scripts can be consulted to determine the particular TCAP XML script implementations of telephony services for which the DNIS has been registered.","In step , a determination can be made as to whether an entry corresponding to the received TCAP event has been made in the event context cache. If so, the method can proceed to step . If not, however, the method can continue to step  where an entry can be made in the event context cache. The entry in the event context cache can include the DNIS, the calling directory number, one or more associated VXML call processing scripts, as well as any parameter data that may be required by the specified VXML call processing scripts. Additionally, any other information subsequently determined through execution of a TCAP XML script also can be written to the event context cache.","In step , the transaction service processor can send at least the following information to the transaction session manager via a TCP\/IP connection: the DNIS, one or more URIs specifying TCAP XML script implementations of telephony services for which the directory number has been registered, an identifier representing the particular transaction processor to which the TCAP event was initially assigned, as well as a TCAP identifier. Although not shown in , prior to transmitting the URI to an available parser, the transaction session manager can query a script cache memory via a TCP\/IP connection to determine whether the TCAP XML script specified by the URI is contained within the cache memory. If so, the TCAP XML script has already been parsed by the parser and exists in an intermediate format which can be executed by the transaction service processors. Accordingly, the parsed TCAP XML script can be retrieved from the cache memory and provided to the transaction session managers, thereby skipping steps , , , and continuing with step .","In step , the transaction session manager can identify an available parser and provide the URI to the parser through a TCP\/IP connection. Notably, the transaction session manager can save a local copy of the transaction processor identifier. In step , the parser can issue an HTTP request to an HTTP server to retrieve the TCAP XML script specified by the URI. The TCAP XML script can implement services such as allow call, block call, forward call, selective forward call, bridge call, as well as other functions including querying network databases, and the like. In step , the parser can receive the requested TCAP XML script via an HTTP connection. The parser then can parse the TCAP XML script, converting the TCAP XML script into an intermediate format which can be interpreted and executed by the transaction service processors.","In step , the parsed call processing script can be transmitted from the parser to the transaction session manager via a TCP\/IP connection. The session manager, in step , having retained the transaction processor identifier, can identify the transaction service processor associated with the original TCAP event and the received parsed TCAP XML script for processing the TCAP event. In step , the transaction session manager can transmit the parsed TCAP XML script to the identified transaction service processor. Accordingly, the transaction service processor can implement the telephony service by executing the parsed TCAP XML script. As mentioned, any other information subsequently determined through execution of a TCAP XML script also can be written to the event context cache. After step , the method can continue to jump circle A and continue to step  in .",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 5","FIG. 3","FIG. 3"],"b":["505","510"]},"In step , a determination can be made as to whether an entry exists in the event context cache for the received call. For example, entries in the event context cache can be stored using a hash table. Accordingly, the DNIS and the called directory number of a received call can be used to determine a hash key for locating an entry for the received call. If no entry exists in the event context cache, then the method can continue to step , where a recovery procedure can be implemented. As mentioned, the recovery procedure can include playing a message to the caller, dropping the call, or forwarding the call to a default voice mail address associated with the DNIS. After the recovery procedure has been implemented, the method can end.","If an entry does exist in the event context cache for the received call, then the method can proceed to step . In step , the information specified by the event context cache entry can be retrieved from the event context cache. In step , one or more call processing scripts associated with the DNIS can be identified. For example, the listing of DNISs and associated VXML scripts can be consulted to determine the particular call processing scripts, or VXML script representations of telephony services, for which the DNIS has been registered. Notably, the listing of DNISs and associated VXML scripts can be searched using the DNIS or other information including directory numbers as specified by the event context cache entry. For example, the event context cache entry can specify one or more VXML scripts or locations of VXML scripts to be executed.","In step , the media gateway can send the following information to the session manager via a TCP\/IP connection: the called directory number, one or more URIs specifying call processing script representations of telephony services for which the directory number has been registered, and an identifier representing the particular channel processor upon which the call was received.","Although not shown in , prior to transmitting the URI to an available parser, the session manager can query a script cache memory via a TCP\/IP connection to determine whether the call processing script specified by the URI is contained within the cache memory. If so, the call processing script has already been parsed by the parser and exists in an intermediate format which can be executed by the service processors. Accordingly, the parsed call processing script can be retrieved from the cache memory and provided to the session managers, thereby skipping steps , , , and continuing with step .","The session manager can identify an available parser and provide the URI to the parser through a TCP\/IP connection in step . Notably, the session manager can save a local copy of the channel processor identifier. In step , the parser can issue an HTTP request to an HTTP server to retrieve the call processing script specified by the URI. The call processing script can include, for example, voice markup language scripts such as VXML documents, text, scripts, as well as selected portions of audio. The parser can receive the requested call processing script via an HTTP connection. Accordingly, in step , the parser then can parse the call processing script, converting the call processing script into an intermediate format which can be interpreted by the service processors.","In step , the parsed call processing script can be transmitted from the parser to the session manager via a TCP\/IP connection. The session manager, in step , having retained the channel processor identifier, can identify a service processor (script\/bean) associated with the channel processor that received the call. In step , the session manager can transmit the parsed call processing script to the identified service processor. Accordingly, the service processor can implement the telephony service by executing the parsed call processing script in step . The service processors can access any required functionality, such as the voice processor of the media gateway, via the bean\/script interface to implement the telephony service.","Below is an exemplary TCAP XML script that can be utilized for requesting a forwarding directory number for routing a call.",{"@attributes":{"id":"p-0071","num":"0070"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<?xml version=1.0\u201d?>"},{"entry":"<txml version=1.0\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<catch event=\u201cjain.protocol.ss7.tcap.component.InvokeIndEvent\u201d"]},{"entry":[{},"name=\u201crequest\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<var name=\u201cnumber\u201d"]},{"entry":[{},"expr=\u201cOnlinecalendar.getForwardNumber(request.getDigits( )."]},{"entry":[{},"newDate( ))\u201d\/>"]},{"entry":[{},"<object name=\u201cprovider\u201d expr=\u201crequest.getProvider( )\u201d>\/"]},{"entry":[{},"<script>"]},{"entry":[{},"<![CDATA["]},{"entry":[{},"provider.sendResults(number);"]},{"entry":[{},"]]>"]},{"entry":[{},"<\/script>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/catch>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/txml>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The event context can be written to the event context cache. As previously noted, the event context cache entry can specify voice markup language scripts, parameters of the scripts, as well as any directory numbers which can be used by the call processing component for determining one or more voice markup language scripts to be executed for processing a given call.","The invention provides a solution for sharing event context data between two or more service logic components in a telephony system. By providing an event context cache serving as an interface between service logic components such as call processing and transaction processing, the present invention eliminates the need for the coordinated implementation of a service-to-service messaging protocol within each telephony service component. In addition to eliminating the need for developing and maintaining coordinated service-to-service protocols within multiple service logic components, the present invention also frees much needed telephony computing resources, thereby reducing the cost of telephony service development, deployment, and maintenance.","The present invention can be realized in hardware, software, or a combination of hardware and software. The present invention can be realized in a centralized fashion in one computer system, or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software can be a general purpose computer system with a computer program that, when being loaded and executed, controls the computer system such that it carries out the methods described herein.","The present invention also can be embedded in a computer program product, which comprises all the features enabling the implementation of the methods described herein, and which when loaded in a computer system is able to carry out these methods. Computer program in the present context means any expression, in any language, code or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following: a) conversion to another language, code or notation; b) reproduction in a different material form.","This invention can be embodied in other forms without departing from the spirit or essential attributes thereof. Accordingly, reference should be made to the following claims, rather than to the foregoing specification, as indicating the scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["There are shown in the drawings embodiments which are presently preferred, it being understood, however, that the invention is not limited to the precise arrangements and instrumentalities shown.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 5","FIG. 3"]}]},"DETDESC":[{},{}]}
