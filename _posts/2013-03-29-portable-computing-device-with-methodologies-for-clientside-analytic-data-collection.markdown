---
title: Portable computing device with methodologies for client-side analytic data collection
abstract: A portable computing device with methodologies for client-side analytic data collection are described. In one embodiment, for example, a method performed by a portable computing device having volatile and non-volatile memory includes obtaining a plurality of events to be logged; serializing the events to be logged; storing the serialized events in the volatile memory; encrypting the serialized events to produce serialized and encrypted events; storing the serialized and encrypted events in the non-volatile memory; decrypting the serialized and encrypted events to produce serialized and decrypted events; storing the serialized and decrypted events in the volatile memory; compressing the serialized and decrypted events to produce compressed, serialized, and decrypted events; encrypting the compressed, serialized, and decrypted events to produce encrypted, compressed, and serialized events and storing the encrypted, compressed, and serialized events in the non-volatile memory.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08996889&OS=08996889&RS=08996889
owner: Dropbox, Inc.
number: 08996889
owner_city: San Francisco
owner_country: US
publication_date: 20130329
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY OF SOME EMBODIMENTS","DETAILED DESCRIPTION","Glossary","INTRODUCTION"],"p":["Some embodiments of the present invention relate generally to portable computing devices with methodologies for logging information and, more particularly, to a portable computing device with methodologies for client-side analytic data collection.","The first web applications were largely server-based with little or no functionality implemented by dedicated applications executing at end-user client computing devices. Transitions between application states were mainly accomplished with request\/response round-trips over a network between end-user devices and server devices. Typically, a web browser executing on an end-user device would send, to a server device, a Hypertext Transfer Protocol (HTTP) request specifying a Web address (e.g., a URL) that identified the next user interface state (e.g., a new web page). In response, the server device would send, back to the end-user device, a HTTP response including Hypertext Markup Language (HTML) content of the requested user interface state. The web browser would then update a user interface (e.g., a web page window) displayed at the end-user computing device based on the received HTML content. With the first web applications, logging information about application behavior and user interaction with such applications was relatively simple because overall application functionality was centralized on the server-side.","With the ever-increasing computing power and capabilities of end-user devices, however, more and more application functionality is being implemented by dedicated software designed to execute on end-user devices. One class of dedicated software applications designed to run on portable computing devices, such as mobile phones, tablet computers, and other mobile devices, are commonly known as \u201cmobile applications\u201d. Today, mobile applications are available that perform a wide-variety of different functions. As just a few examples, there are mobile applications for general productivity, information retrieval, playing games, checking e-mail, calendaring, banking, and many others.","Many mobile applications can transition between some application states without having to interact with a server. Because of this, developers of mobile applications often have little insight into how their applications behave for users and how and where users interact with their applications. Such insight is valuable to developers, for example, to improve the functionality of the applications they offer. For example, a developer of a mobile application might want to know which operating system platform the application is most often used on, which features of the application are most often used, which features are rarely used, which countries the application is used in, which features cause the application to crash or generate errors, among other usage information.","For many developers, the ability to capture information about the runtime behavior and user interaction with their mobile applications would be useful to gain the desired insight into how their applications behave for users and how and where users interact with their applications. Accordingly, there is a need for portable computing devices with more efficient methods for collecting information about the runtime behavior and user interaction with mobile applications executing on the devices. Such methods should reduce the performance impact on end-user facing functions of the applications. For battery-operated portable computing devices, such methods should conserve power and increase the time between battery charges.","The approaches described in this section are approaches that could be pursued, but not necessarily approaches that have been previously conceived or pursued. Therefore, unless otherwise indicated, it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.","A portable computing device with methodologies for client-side analytic data collection are described. In one embodiment, for example, a computer-implemented method is provided for execution at a portable computing device having volatile memory and non-volatile memory. The method includes obtaining a plurality of events to be logged; serializing the plurality of events to be logged to produce a serialized form of the events; storing the serialized form of the events in volatile memory of the device; encrypting the serialized form of the events to produce a serialized and encrypted form of the events; storing the serialized and encrypted form of the events in non-volatile memory of the device; decrypting the serialized and encrypted form of the events to produce a serialized and decrypted form of the events; storing the serialized and decrypted form of the events in volatile memory of the device; compressing the serialized and decrypted form of the events to produce a compressed, serialized, and decrypted form of the events; encrypting the compressed, serialized, and decrypted form of the events to produce an encrypted, compressed, and serialized form of the events and storing the encrypted, compressed, and serialized form of the events in non-volatile memory of the device.","HTTP: HTTP is the acronym for \u201cHyperText Transfer Protocol\u201d, which is the underlying communication protocol used by the World Wide Web on the Internet. HTTP defines how messages are formatted and transmitted, and what actions Web servers and browsers should take in response to various commands. For example, when a user enters a URL in his or her browser, this actually sends an HTTP command to the Web server directing it to fetch and transmit the requested Web page. Further description of HTTP is available in RFC 2616: Hypertext Transfer Protocol\u2014HTTP\/1.1, the disclosure of which is hereby incorporated by reference. RFC 2616 is available from the World Wide Web Consortium (W3), and is currently available via the Internet at \/Protocols in the www.w3c.org domain. Additional description of HTTP is available in the technical and trade literature; see e.g., William Stallings, The Backbone of the Web, BYTE, October 1996, the disclosure of which is hereby incorporated by reference.","JSON: JSON stands for \u201cJavaScript Object Notation\u201d, which a text-based standard for human-readable data interchange between computers. The JSON format was originally specified by Douglas Crockford and is described in RFC 4627: The application\/json Media Type for JavaScript Object Notation (JSON), the disclosure of which is hereby incorporated by reference. RFC 4627 is available from the Internet Engineering Task Force (IETF), and is currently available via the Internet at \/html\/rfc4627 in the tools.ietf.org domain.","Referring to the figures, exemplary embodiments of the invention will now be described. The following description will focus on some embodiments of the present invention, which are implemented in portable computing device software (e.g., driver, application, or the like) operating in an Internet-connected environment running under a mobile operating system, such as the ANDROID operating system. Some embodiments of the present invention, however, are not limited to any one particular application or any particular environment. Instead, those skilled in the art will find that the system and methods of some embodiments of present invention can be advantageously embodied on a variety of different platforms, including BLACKBERRY, IOS, S40, WINDOWS PHONE, WINDOWS 8, WINDOWS RT, and the like. Therefore, the description of the exemplary embodiments that follows is for purposes of illustration and not limitation.","The exemplary embodiments are primarily described with reference to block diagrams or flowcharts. As to the flowcharts, each block within the flowcharts represents both a method step and an apparatus element for performing the method step. Depending upon the implementation, the corresponding apparatus element may be configured in hardware, software, firmware or combinations thereof.","Computer-Based Implementation","Some embodiments of the present invention can be implemented on a conventional or general-purpose computing device, such as personal computing device (e.g., a stationary or portable personal computing device) or a server computing device. In some embodiments, the present invention is implemented on a portable personal computing device such as a mobile phone or smart phone.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":["100","100","102","112","120","118","108","110","111","113","106","112","116","124","100","103"]},"Memory  can include high-speed random access memory and can also include non-volatile memory, such as one or more magnetic disk storage devices, flash memory devices, or other non-volatile solid-state memory devices. Access to memory  by other components of device , such as CPU  and peripherals interface , can be controlled by memory controller .","Peripherals interface  couples the input and output peripherals of device  to the CPU  and memory . One or more processors  run or execute various software programs and\/or sets of instructions stored in memory  to perform various functions for device  and to process data.","In some embodiments, peripherals interface , CPU , and memory controller  are implemented on a single chip, such as chip . In some other embodiments, they are implemented on separate chips.","The RF (radio frequency) circuitry  receives and sends RF signals, also called electromagnetic signals. RF circuitry  converts electrical signals to\/from electromagnetic signals and communicates with communications networks and other communications devices via the electromagnetic signals. RF circuitry  can include well-known circuitry for performing these functions, including but not limited to an antenna system, an RF transceiver, one or more amplifiers, a tuner, one or more oscillators, a digital signal processor, a CODEC chipset, a subscriber identity module (SIM) card, memory, and so forth. RF circuitry  can communicate with networks, such as the Internet, also referred to as the World Wide Web (WWW), an intranet and\/or a wireless network, such as a cellular telephone network, a wireless local area network (LAN) and\/or a metropolitan area network (MAN), and other devices by wireless communication. The wireless communication may use any of a plurality of communications standards, protocols and technologies, including but not limited to Global System for Mobile Communications (GSM), Enhanced Data GSM Environment (EDGE), high-speed downlink packet access (HSDPA), wideband code division multiple access (W-CDMA), code division multiple access (CDMA), time division multiple access (TDMA), Bluetooth, Wireless Fidelity (Wi-Fi) (e.g., IEEE 802.11a, IEEE 802.11b, IEEE 802.11g and\/or IEEE 802.11n), voice over Internet Protocol (VoIP), Wi-MAX, a protocol for email (e.g., Internet message access protocol (IMAP) and\/or post office protocol (POP)), instant messaging (e.g., extensible messaging and presence protocol (XMPP), Session Initiation Protocol for Instant Messaging and Presence Leveraging Extensions (SIMPLE), and\/or Instant Messaging and Presence Service (IMPS)), and\/or Short Message Service (SMS)), or any other suitable communication protocol, including communication protocols not yet developed as of the filing date of this document.","Audio circuitry , speaker , and microphone  provide an audio interface between a user and device . Audio circuitry  receives audio data from peripherals interface , converts the audio data to an electrical signal, and transmits the electrical signal to speaker . Speaker  converts the electrical signal to human-audible sound waves. Audio circuitry  also receives electrical signals converted by microphone  from sound waves. Audio circuitry  converts the electrical signal to audio data and transmits the audio data to peripherals interface  for processing. Audio data may be retrieved from and\/or transmitted to memory  and\/or RF circuitry  by peripherals interface . In some embodiments, audio circuitry  also includes a headset jack (not shown). The headset jack provides an interface between audio circuitry  and removable audio input\/output peripherals, such as output-only headphones or a headset with both output (e.g., a headphone for one or both ears) and input (e.g., a microphone).","The I\/O subsystem  couples input\/output peripherals on device , such as the touch screen  and other input\/control devices , to peripherals interface . I\/O subsystem  can include display controller  and one or more input controllers  for other input or control devices. One or more input controllers  receive\/send electrical signals from\/to other input or control devices . Other input\/control devices  can include physical buttons (e.g., push buttons, rocker buttons, etc.), dials, slider switches, joysticks, click wheels, and so forth. In some alternate embodiments, input controller(s)  may be coupled to any (or none) of the following: a keyboard, infrared port, USB port, and a pointer device such as a mouse. One or more buttons (not shown) may include an up\/down button for volume control of speaker  and\/or microphone . The one or more buttons may include a push button (not shown). A quick press of the push button may disengage a lock of the touch screen  or begin a process that uses gestures on the touch screen to unlock the device. A longer press of the push button can turn power to device  on or off. The user may be able to customize a functionality of one or more of the buttons. Touch screen  is used to implement virtual or soft buttons and one or more soft keyboards.","Touch-sensitive touch screen  provides an input interface and an output interface between the device and a user. Display controller  receives and\/or sends electrical signals from\/to the touch screen . Touch screen  displays visual output to the user. The visual output may include graphics, text, icons, video, and any combination thereof (collectively termed \u201cgraphics\u201d). In some embodiments, some or all of the visual output may correspond to user-interface objects.","Touch screen  has a touch-sensitive surface, sensor or set of sensors that accepts input from the user based on haptic and\/or tactile contact. Touch screen  and display controller  (along with any associated modules and\/or sets of instructions in memory ) detect contact (and any movement or breaking of the contact) on touch screen  and converts the detected contact into interaction with user-interface objects (e.g., one or more soft keys, icons, web pages or images) that are displayed on the touch screen. In an exemplary embodiment, a point of contact between touch screen  and the user corresponds to a finger of the user.","Touch screen  can use LCD (liquid crystal display) technology, or LPD (light emitting polymer display) technology, although other display technologies may be used in other embodiments. Touch screen  and display controller  can detect contact and any movement or breaking thereof using any of a plurality of touch sensing technologies now known or later developed, including but not limited to capacitive, resistive, infrared, and surface acoustic wave technologies, as well as other proximity sensor arrays or other elements for determining one or more points of contact with touch screen .","Device  also includes power system  for powering the various components. Power system  can include a power management system, one or more power sources (e.g., battery, alternating current (AC)), a recharging system, a power failure detection circuit, a power converter or inverter, a power status indicator (e.g., a light-emitting diode (LED)) and any other components associated with the generation, management and distribution of power in portable devices.","Device  can also include one or more optical sensors . Optical sensor  can include charge-coupled device (CCD) or complementary metal-oxide semiconductor (CMOS) phototransistors. Optical sensor  receives light from the environment, projected through one or more lens, and converts the light to data representing an image. Optical sensor  can capture still images or video. In some embodiments, optical sensor  is located on the back of device , opposite touch screen display  on the front of device , so that touch screen display  can be used as a viewfinder for either still and\/or video image acquisition. In some embodiments, optical sensor  is located on the front of device  so that the user's image may be obtained for videoconferencing while the user views the other video conference participants on touch screen display . In some embodiments, the position of optical sensor  can be changed by the user (e.g., by rotating the lens and the sensor in the device housing) so that a single optical sensor can be used along with touch screen display  for both video conferencing and still and\/or video image acquisition.","Device  can also include one or more proximity sensors . Proximity sensor  can be coupled to peripherals interface . Alternately, proximity sensor  can be coupled to input controller  in I\/O subsystem . In some embodiments, proximity sensor  turns off and disables touch screen  when device  is placed near the user's ear (e.g., when the user is making a phone call). In some embodiments, proximity sensor  keeps screen  off when device  is in the user's pocket, purse, or other dark area to prevent unnecessary battery drainage when device  is a locked state.","Device  can also include one or more accelerometers . Accelerometer  can be coupled to peripherals interface . Alternately, accelerometer  can be coupled to input controller  in I\/O subsystem . In some embodiments, information is displayed on touch screen display  in a portrait view or a landscape view based on an analysis of data received from accelerometer .","Device  can also include one or more external ports . External port  can be coupled to peripherals interface . Alternatively, external port  can be coupled to input controller  in I\/O subsystem . The external port  (e.g., Universal Serial Bus (USB), FIREWIRE, etc.) can be adapted for coupling directly to other devices or indirectly over a network (e.g., the Internet, wireless LAN, etc.). In some embodiments, the external port is a multi-pin (e.g., 30-pin) connector.","In some embodiments, the software components stored in memory can include an operating system , one or more functional modules , and one or more applications .","Operating system  (e.g., ANDROID, BLACKBERRY, IOS, S40, WINDOWS PHONE, WINDOWS 8, WINDOWS RT, or the like) includes various software components and\/or drivers for controlling and managing general system tasks (e.g., memory management, storage device control, power management, etc.) and facilitates communication between various hardware and software components.","Functional modules  include software components or sets of instructions supporting one or more different functions of device  including, as non-limiting examples, communications functions (e.g., facilitating communication with other devices over external ports ), contact\/motion detection functions (e.g., detecting contact with touch screen  or other touch sensitive device), graphics functions (e.g., rendering and displaying graphics on touch screen ), text input functions (e.g., supporting a soft keyboard function of device ), or Global Positions Satellite (GPS) functions (e.g., determining geographic location of device ).","Applications  can include software components, modules, or sets of instructions implementing application functions on device  including, as non-limiting examples, e-mail functions, instant messaging functions, gaming functions, calendaring functions, JAVA-enabled applications, etc. In one exemplary embodiment, one of applications  is a version of the \u201cDropbox for mobile\u201d application available from Dropbox, Inc. of San Francisco, Calif.","The above-described device is presented for purposes of illustrating examples of the basic underlying computer components that can be employed for implementing some embodiments of the present invention. However, it should be understood that other devices including devices with more, less, or different computer components that those described above can be employed for implementing some embodiments of the present invention. Further, for purposes of discussion, the following description will present examples of client-side analytic data collection in a JAVA-enabled application operating in an ANDROID operating system environment. Some embodiments of the present invention, however, are not limited to any particular environment or device configuration. In particular, a JAVA-enabled application or an ANDROID operating system environment is not necessary to all embodiments of the invention, but is used to provide a framework for discussion. Instead, some embodiments of the present invention can be implemented in any type of device, system architecture, and processing environment capable of supporting the methodologies of embodiments presented in detail below.","Overview","In accordance with some embodiments of the present invention, a logging system is provided for collecting analytic data on the runtime behavior of and user interaction with an application executing on a portable computing device. Here, \u201canalytic data\u201d, can be considered to be any data useful for analyzing the runtime behavior of or the user interaction with the application. For example, the analytic data can be sent to an analytics server for analysis, perhaps even in conjunction with analytic data sent to the server from other user devices running the application. Thus, analytic data is not necessarily data on which analysis has been conducted or data that reflects results of data analysis, but it can be. Non-limiting examples of analytic data include, but are not limited to, data reflecting user interaction with graphical user interface elements of the application (e.g., when and what user interface windows are open and closed, when user interface windows are backgrounded, etc.), data reflecting user usage of certain application features (e.g., when a user uses a photo upload feature of the application, if and when a user uses a help function, etc.), data reflecting device resources (e.g., device battery level, memory usage, etc.), data reflecting errors in application (e.g., uncaught exceptions, unexpected errors, etc.), data reflecting network performance and usage (e.g., when a network connection is established by the application, byte-rate of received data over the network connection, etc.), data reflecting interaction with third-party applications (e.g., when the application is used to send information to FACEBOOK or TWITTER), or any other data useful for analysis of application behavior and user usage thereof.","The logging system is lightweight in the sense that it facilitates collection of useful analytic data generated by the application with reduced impact on user perceptible performance of the application. One way the logging system achieves a lightweight impact on the application is to write analytic data to be logged first to a volatile-memory buffer, which can be a relatively inexpensive operation, and then later in batches to a non-volatile memory, which can be a relatively expensive operation. By writing analytic data to be logged first to a volatile-memory buffer, many application tasks that log analytic data are not blocked waiting for the analytic data to be written to a non-volatile memory.","Another way the logging system achieves a lightweight impact on the application is to use execution threads or processes to rotate log files stored on non-volatile memory and to upload log files over a data network to a remote analytics server that are separate from the threads and processes that perform other application tasks such as responding to user interface events and user input. By using separate threads or processes for log rotation and upload, log rotation and upload functions of the logging system have reduced impact on user-facing functions of the application.","Yet another way the logging system is achieves a lightweight impact on the application is to upload analytic data to the analytics server in a compressed format (e.g., a GZIP format). By doing so, less network bandwidth is used to upload the analytic data, thereby conserving battery power and increasing the time between charges on portable computing devices that operate on battery power.","The logging system is secure in the sense that logged analytic data is stored in non-volatile memory in an encrypted form using a stream cipher when writing the analytic data to the non-volatile memory. The encrypted form provides security by obfuscating the contents of the analytic data when stored in non-volatile memory.","The logging system is opportunistic in the sense that log files are uploaded to the analytics server under ideal upload conditions such as when the device is connected to the analytics server by a relatively high-bandwidth network connection such as when connected to the analytics server by a wireless network (e.g., a IEEE 802.11 network) as opposed to a cellular network (e.g., a GSM network). By opportunistically uploading log files, the logging system reduces impact on other potentially more critical application functions.","Logging System Runtime Environment",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 2","FIG. 1"],"b":["100","102","1","102","2","102","1","102","2","126","100","128","1","126","102","1","102","2"]},"Application - includes sub-modules, sub-components, or sub-sets of instructions including primary application functions , logging system , and log rotation and upload task manager . While in some embodiments as depicted in  logging system  and task manager  are wholly part of application -, logging system  and\/or task manager , or a portion of portions thereof, are part of operating system  and\/or another application or applications (not shown) in other embodiments.","Primary application functions  include any modules, components, or sets of instructions that implement primary application functions and features of application - including, for example, features and functions supporting end-user operations such as, for example, receiving and processing user input, generating and display graphical user interface output, storing application data and metadata to volatile memory - and non-volatile memory -, reading application data and metadata from volatile memory - and volatile memory -, connecting to and sending data to a server over a network, receiving data from a server over a network, etc. Primary application functions  can use services of operating system  to carry out application functions.","Logging system  offers a \u201clogging\u201d Application Programming Interface (API)  to primary application functions . Logging API  can include an API to initialize logging system . For example, a call  from primary application functions  to logging API  to initialize the logging system  can be made after application - starts, launches, or otherwise begins execution. Logging API  can also include an API for logging an event with logging system . For example, multiple calls  from primary application functions  to Logging API  to log an event can be made during the course of application - execution by device .","The event to log in a call  from primary application functions  can be one of many different types of events. Example event types are described below. In general, however, as described in greater detail below with respect to some embodiments, an event to be logged in a call  to logging system  can include a variety of information describing the event including:\n\n","In response to receiving a call  to log an event, logging system  serializes the event and writes the serialized form of the event to a buffer (not shown) stored in volatile memory -. For example, the buffer can be a character stream buffer of a predetermined size (e.g., 8K characters). Serializing the event can include producing a character string-based representation of the event. For example, serializing the event can include producing a JavaScript Object Notation (JSON) representation of the event. In addition, logging system  periodically flushes the buffer. For example, logging system  can flush the buffer after a predetermined number of events to log have been obtained since the last time the buffer was flushed. As another example, the buffer can be automatically flushed when the buffer is full. Flushing the buffer can include cryptographically encrypting the serialized events stored in the buffer using stream cipher and appending (writing) the encrypted serialized form of the events in the buffer to the end of current log file  stored in non-volatile memory -.","In some embodiments, the buffer stored in volatile memory is a circular stored queue buffer that stores up to at most N number of events where N is predefined, user configured, or dynamic determined based on historical operating conditions. In an exemplary embodiment, N is sixteen (16). However, in other embodiments N may be less or greater than sixteen (16).","In some embodiments, in response to an unexpected error in or program crash of application -, for example, as manifested by an uncaught programmatic exception in application -, the current events stored in the buffer are stored in an encrypted form in a \u201ccore dump\u201d file in non-volatile -. The core dump file can be uploaded by the logging system  to the analytics server when the application - next executes. The core dump file can be uploaded to the analytics sever in an encrypted and\/or compressed format or a decrypted and uncompressed format. The core dump file can be the current log file , for example. By storing the current events stored in the volatile memory buffer in non-volatile memory when an unexpected error or program crash occurs, potentially valuable information about what may have caused the error or crash is not lost.","Log rotation and upload task manager  includes modules, components, of sets of instructions for periodically calling  logging system  to rotate current log file  and to upload uncompressed log files ---N to an analytics server. For this, logging system  offers rotation and upload API  to task manager .","In some embodiments, task manager  operates in a separate thread or thread or process or processes from the threads or processes that execute primary application functions . By doing so, log rotation and uploading functions can be executed concurrently with many primary application functions . In addition, task manager  offers a scheduling API  by which logging system  can schedule log rotation and upload tasks with task manager . In particular, logging system  uses scheduling API  to schedule rotation and upload operations to occur at times that are more likely to have reduced impact on primary application functions . Logging system  can call  scheduling API  to schedule log rotation to occur at a variety of different times. In some embodiments, logging system  calls  scheduling API  to schedule log rotation to occur at some or all of the following times:\n\n","As mentioned above, logging system  can call  scheduling API  to schedule log rotation to occur when the application - is \u201clinked\u201d to a network service that provides application services to application - over a data network. Application linking can occur at a variety of different times including, for example, when the user of application - is successfully authenticated by the network service and a new application service session is established with the network service. For example, the user may provide a username and password to primary application functions  at device  which is then sent over a data network to the network service. Upon receiving the user's credentials, the network service can authenticate the username and password and communicate application service session information (e.g., a browser cookie or other session state information) back to device . Such service session information can be used to allow the user to conduct multiple interactions with the network service through application - without requiring the user to provide authentication credentials to the network service for each such interaction. Primary application functions , upon receiving the session information from the network service, can call (not shown) logging system  through logging API  to schedule an immediate log rotation. In turn, logging system  can call  task manager  to schedule a log rotation for immediate execution. Task manager  can then call  logging system  to rotate current log file .","Logging system  can also call  scheduling API  to schedule log uploads to occur at a variety of different times. In some embodiments, logging system  calls  scheduling API  to schedule upload of logs - -M to occur at some or all of the following times:\n\n","Logging system , with the aid of operating system , can store in non-volatile memory - current log file , one or more uncompressed log files - through -N, and one or more compressed log files - through -M. Logging system  can store all log files , , and  in directory . Directory  can be a file system directory in a file system supported by operating system . Although log files , , and  are shown in  as stored in a single directory, log files , , and  can be stored in separate directories or more than one directory.","Current log file  can be held open by logging system  for appending (writing) serialized and encrypted events to the end of current log file . Serialized events can be stored in current log file  in an encrypted but uncompressed form.","Uncompressed log files  are log files that were previously a current log file but have since been rotated out by logging system . Once rotated out, logging system  does not write events to uncompressed log files . Serialized events stored in uncompressed log files  can still be in an encrypted form.","In some embodiments, before uncompressed log files  are uploaded to an analytics server, logging system  reads encrypted\/serialized events from uncompressed log files  into volatile memory -. Once in volatile memory -, logging system  decrypts the encrypted\/serialized events, then compresses the decrypted\/serialized events, then encrypts the compressed,\/decrypted,\/serialized events, and finally stores the encrypted,\/compressed\/serialized events in compressed log files  in non-volatile memory -.","In some embodiments, the decrypting of encrypted\/uncompressed events, the compressing of decrypted\/uncompressed events, and the encrypting of decrypted\/compressed events are performed by separate stream filters arranged in series in a data stream processing pipeline. By doing so, logging system  can incrementally stream encrypted\/serialized events from uncompressed log files  into volatile memory - without having to load the entire contents of the uncompressed log files  into volatile memory - before beginning to decrypt encrypted\/serialized events. Specifically, as encrypted\/serialized events are streamed from uncompressed log files  they are streamed to the decryption stream filter, the output of the decryption stream filter is streamed to compression stream filter, the output of the compression filter is streamed to encryption filter, and the output of the encryption filter is streamed to compressed log files . By streaming the events from uncompressed log files  through the various filters and to compressed log files , the amount of volatile memory - used for incremental stream processing can be independent of the size of the uncompressed log files . Notably, the amount of volatile memory - needed to incrementally process all events from an uncompressed log file  to a compressed log file  can be smaller than the size of the uncompressed log file .","Logging system  maintains uncompressed log files  separately from compressed log files  so that log rotation operations and upload operations can occur separately. For example, logging system  can rotate current log file  to uncompressed log file - at one time. At a later time, logging system  can produce compressed log file - based on uncompressed log file - and then upload compressed log file - to an analytics server.","Logging system  stores current log file , uncompressed log file , and compressed log files  in non-volatile memory - as opposed to volatile memory - to reduce the amount of analytic data lost in the event of power loss to the device  or unexpected catastrophic failure of application - (e.g., program crash).","Current log file , uncompressed log files , and compressed log files  can be distinguished by their file names. For example, current log file , uncompressed log files , and compressed log files  can have different filename prefixes or suffixes that distinguish the three different types of log files. Such file name distinctions can be used by logging system  to find uncompressed log files  that have yet to be uploaded to an analytics server as compressed log files .","Exemplary Event",{"@attributes":{"id":"p-0071","num":"0084"},"figref":"FIG. 3","b":["300","300","300","206","201","202","300","302","314","300"]},"Event  can have a label . Label  can be an arbitrary character string reflecting the type of event . The label  can be chosen by the primary application function logging event . For example, the label  \u201cpopup.shown\u201d can be used when a primary application function logs event  after a graphical user interface window popup is shown to the user. This is just one example of a label and virtually any descriptive character string can be used as label .","Boot timestamp  includes data that reflects the time since the last device boot up that event  occurred. Thus, boot timestamp  does not need to be relative to the time zone in which the device is located or configured for. A series of events from the same device can be ordered chronologically independent of the device time zone based on the boot timestamps of the events. In some embodiments, a group of events logged at a device is associated with an increasing \u201clog sequence number\u201d (which can be reset from time to time to avoid excessively large sequence numbers or to avoid overflow). For example, the log sequence number can be written to the current log file before writing the associated events to the log file. Within a group of events, the events in the group can be ordered by their associated boot timestamps. Thus, events in all of the groups can be ordered by their associated log sequence numbers and their boot timestamps. Such ordering is still possible even if the device moves time zones, the time zone of the operating system clock of the device is otherwise changed, or the operating system clock time is changed. Boot timestamp  can be obtained from a real-time clock of the device.","Current timestamp  includes data that reflects the time of the event which may be relative to a particular time zone or locale.","Network state  indicates data that indicates the state of the application logging event  with respect to a data network at the time event  occurred. For example, network state  can indicate whether the application is connected to a data network or not connected to a data network at the time of the event. If connected to a data network at the time of the event, network state  can indicate what type of connection is established (e.g., an encrypted (e.g., HTTPS) or unencrypted (e.g., HTTP) network connection).","If connected to a data network at the time of the event as indicated by network state , wireless network  includes data that indicates whether the application is connected to a wireless network (e.g., an IEEE 802.11 network or a cellular network (e.g., GSM)) or not connected to a wireless network (e.g., connected to an IEEE 802.3 network). If connected to a wireless network, wireless network  can indicate what type or class of wireless network the application is connected to.","If connected to a data network at the time of the event as indicated by network state , network roaming  includes data that indicates whether the application is connected to a cellular network in roaming mode.","Key-value mapping  is a serializable data structure for storing event-specific data. Key-value mapping  can be populated with the event-specific data by the primary application function logging event . The data structure can be any suitable data structure for associating keys with values such as a data dictionary, an associative array, or other mapping type. The keys of the data structure can be immutable data types (e.g., strings and numbers). The values of the data structure can be immutable or mutable data types (e.g., lists, tuples, data dictionaries, and associative arrays).","Event  is provided as merely an example of a possible event data structure that can be passed in a call to log an event from a primary application function to the logging system. Other event data structures that may be used can have more, less, or different fields than event .","Example Event Types","As mentioned, an event can have a character string label that reflects the type of the event. In addition, an event can have event-specific data in the form of a key-value mapping. However, not all events need have event-specific data. Both the label and the event-specific data of an event can be selected by the primary application function logging the event. The label and event-specific data selected can depend on a variety of factors including, but not limited to, the execution context of the application and the primary application function logging the event.","Table 1 below lists example event types without event-specific data. Table 2 below lists example event types with event-specific data.",{"@attributes":{"id":"p-0083","num":"0096"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example Event Types Without Event-Specific Data"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Event Label","Event Logged After"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["app.launch","The application begins executing on the"]},{"entry":[{},"device."]},{"entry":["app.link","The application is successfully linked with"]},{"entry":[{},"a network service."]},{"entry":["app.unlink","The application successfully unlinks from"]},{"entry":[{},"a network service."]},{"entry":["login.twofactor.prompted","The user is prompted to login to a network"]},{"entry":[{},"service using two-factor authentication."]},{"entry":["login.twofactor.","The user successfully authenticates with a"]},{"entry":[{},"network service using two-factor"]},{"entry":[{},"authentication."]},{"entry":["login.twofactor.didntreceive","The user is prompted to login to a network"]},{"entry":[{},"service using two-factor authentication but"]},{"entry":[{},"the user did not provide authentication"]},{"entry":[{},"credentials in response to the prompt."]},{"entry":["cu.turned_on","The user enables (turns on) a camera upload"]},{"entry":[{},"feature of the application."]},{"entry":["cu.turned_off","The user disables (turns off) a camera upload"]},{"entry":[{},"feature of the application."]},{"entry":["image.view","The application presents a digital image for"]},{"entry":[{},"the user to view."]},{"entry":["folder.rename","The application renames a file folder at user"]},{"entry":[{},"direction."]},{"entry":["file.rename","The application renames a file at user"]},{"entry":[{},"direction."]},{"entry":["help.view_TOS","The application presents terms of service"]},{"entry":[{},"information to the user."]},{"entry":["help.view_privacy","The application presents network service"]},{"entry":[{},"privacy information to the user."]},{"entry":["help.send_feedback","The user invokes a provide feedback feature"]},{"entry":[{},"of the application."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0084","num":"0097"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example Events With Event-Specific Data"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Event Label","Event-Specific Data","Event Logged After"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["popup.shown","which\u2014A string","The application displays a"]},{"entry":[{},"indicating which","popup graphical user"]},{"entry":[{},"application was shown.","interface window or dialog."]},{"entry":["popup.closed","which\u2014A string","The application closes a"]},{"entry":[{},"indicating which","graphical user interface"]},{"entry":[{},"application was shown.","window popup or dialog."]},{"entry":[{},"how\u2014A string indicating",{}]},{"entry":[{},"how the popup was",{}]},{"entry":[{},"closed.",{}]},{"entry":["download.net.start","id\u2014A download task","The application is about to"]},{"entry":[{},"identifier.","send a download request to a"]},{"entry":[{},"class\u2014A download task","network service to download"]},{"entry":[{},"class name.","data to the device."]},{"entry":["download.net.end","id\u2014A download task","The application has finished"]},{"entry":[{},"identifier.","downloading data from a"]},{"entry":[{},"class\u2014A download task","network service."]},{"entry":[{},"class name.",{}]},{"entry":["upload.net.start","id \u2014An upload task","The application is about to"]},{"entry":[{},"identifier.","send an upload request to a"]},{"entry":[{},"class\u2014An upload task","network service to upload"]},{"entry":[{},"class name.","data to the service."]},{"entry":["upload.net.end","id\u2014An upload task","The application has finished"]},{"entry":[{},"identifier.","receiving uploading data to a"]},{"entry":[{},"class\u2014An upload task","network service."]},{"entry":[{},"class name."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The event types in tables 1 and 2 are merely exemplary. Other event types are possible and may be used according to the requirements of the implementation at hand and the present invention is not limited to any particular set of event types.","Logging System Initialization",{"@attributes":{"id":"p-0087","num":"0100"},"figref":"FIG. 4","b":["100","202","205","201"]},"At block , a logging directory is created in non-volatile memory of the personal computing device if it does not already exist. The logging directory is an operating system file system directory. The logging directory contains log files. The logging directory may have been created by a prior logging system initialization in which case it does not need to be created again. If, however, the logging directory does not exist, then it is created at block .","At block , a current log file stored in non-volatile memory of the personal computing device is opened for writing. The current log file is an operating system file system file stored in the logging directory. Opening the current log file can include creating the current log file if the current log file does not exist in the logging directory. If the current log file does exist in the logging directory, then the existing current log file is opened for writing.","Opening the current log file can include creating a volatile memory buffer for writing to the current log file. In some embodiments, a character stream buffer of a predetermined size (e.g., 8K characters) is created in volatile memory. Opening the current log file can also include creating a cryptographic stream cipher that cryptographically encrypts characters flushed from the volatile memory character stream buffer before writing the encrypted character stream to the current log file stored in non-volatile memory.","Opening the current log file can also include writing a \u201cheader event\u201d to the current log file. The header event can contain useful meta-information about the events that follow the header event in the current log file. In some embodiments, the header event specifies one or more of the following pieces of information:\n\n","At block , one or more log rotation tasks are scheduled for execution at specified times. For example, logging system  can make one or more calls  to task manager  to schedule one or more log rotations. In some embodiments, if rotation of the current log file is past due or the version of the application has changed since the last log rotation (e.g., the application has since been upgraded), then a synchronous log rotation is performed. After the synchronous log rotation has completed, an upload task is scheduled for execution at a predetermined time in the future (e.g., 5 seconds from now). Determination of whether rotation of the current log file is past due can be made based on the current time and by reading data previously written to non-volatile memory of the device that indicates when the next rotation of the current log file is scheduled. If the next rotation data exists in non-volatile memory and the current time is after the next scheduled rotation time, then rotation of the current log file is past due. Detecting when the application has been upgraded can be made similarly by storing the upgraded version of the application in non-volatile memory of the device after the application has been upgraded to a new version. If the new current version is different from the old upgraded version, then the application has been upgraded. If the synchronous log rotation was performed because rotation of the current log file was past due or the version of the application changed, or if no rotation of the current log file is currently scheduled, then a new log rotation is scheduled to execute at a predetermined time in the future (e.g., 24 hours from now) and the time of the next schedule log rotation is written to non-volatile memory of the device. If, on the other hand, rotation of the current log file is currently scheduled but the time for rotation has not yet arrived, then a new log rotation is scheduled to execute at the currently scheduled time. Thus, with this embodiment, the current log file is rotated immediately only if rotation is past due or the application has been upgraded. Otherwise, the current log file is scheduled to be rotated at the next scheduled interval (e.g., every 24 hours).","At block , one or more log upload tasks are scheduled for execution at specified times. For example, logging system  can make one or more calls  to task manager  to schedule one or more log uploads. In some embodiments, an upload tasks is scheduled to execute in a separate thread or process at a predetermined time (e.g., 5 seconds from now). In addition, an upload task is scheduled to execute in a separate thread or process at a predetermined intervals thereafter (e.g., every 7 hours thereafter). Thus, with this embodiment, if a log file is available for upload at the time of initialization it will be uploaded to an analytics server soon after the initialization is commenced.","Logging an Event",{"@attributes":{"id":"p-0095","num":"0116"},"figref":"FIG. 5","b":["100","202","206","201","300"]},"At block , an event to be logged is obtained. For example, the obtained event can be instance of event .","At block , the obtained event is serialized. In some embodiments, serializing the event includes producing a character string representation of the event. For example, the character string representation can be a JSON representation or other character string-based representation.","At block , the serialized form of the event is written to a character string buffer resident in volatile memory of the device. The buffer can contain other serialized events previously written to the buffer for previously obtained events.","At block , a determination is made whether to flush the character string buffer. The determination can be based on a wide variety of factors including, but not limited to:\n\n","If, at block , a determination is made to flush the character string buffer, then, at block , the serialized events currently stored in the buffer are encrypted using a cryptographic stream cipher. At block , the encrypted serialized events produced at block  are appended to the current contents of the current log file stored in non-volatile memory.","If, on the other hand, at block , a determination is made not to flush the buffer, then the method ends at block .","Rotating the Current Log File",{"@attributes":{"id":"p-0103","num":"0127"},"figref":"FIG. 6","b":["100","202","208","203","207","209"]},"At block , the current log file is closed for writing.","At block , the current log file is renamed with a file name that indicates that the current log file has been rotated out. For example, the current log file can be renamed to a file name with a particular prefix and\/or suffix that indicates that the renamed file is a log file that has been rotated.","At block , the log sequence number is incremented. The log sequence number can be stored in non-volatile memory of the device. Incrementing the log sequence number can include reading the current log sequence number from non-volatile memory, incrementing the current log sequence number by a fixed amount, and writing the incremented log sequence number back to non-volatile memory. As mentioned above, the current log sequence number can be written as part of a header event to the current log file so that ordering of multiple log files from the same device is possible.","At block , a new current log file is opened. Performance of this step can be similar to the step corresponding to block  of method  described above.","Uploading Uncompressed Events as Compressed Events",{"@attributes":{"id":"p-0109","num":"0133"},"figref":"FIG. 7","b":["100","202","208","203","209"]},"At block , the logging directory is scanned for uncompressed log files to upload. For example, logging directory  can be scanned for uncompressed log files - through -N. The scanning can be based on the file name of the uncompressed log files. For example, scanning can include enumerating files in the logging directory and identifying files with a file name pattern that indicates that the file is an uncompressed log file.","Steps corresponding to blocks , , , and  are performed for each uncompressed log file identified in the step corresponding to block .","At block , a determination is made whether events in the current uncompressed log file should be summarized before upload. Summarization is useful if a certain type of event is unexpectedly logged very frequently. The determination can include counting the number of events and the number of each different type of event according to each event's label. Determining whether events in the current uncompressed log file should be summarized can be based on a variety of factors including, but not limited to:\n\n","For example, a determination to summarize events in the current uncompressed log file can be made in response to detecting that the total number of events in the log file is greater than a predetermined threshold (e.g., 250 events) and the top N (e.g., 2) most common types of events in the log file account for more than a predetermined percentage (e.g., 99%) of the total number of events. In some embodiments, a set of \u201cwhitelisted\u201d events is determined which include events that do not count toward the determination of whether to summarize the log file. In this embodiment, for example, a determination to summarize events in the current uncompressed log file can be made in response to detecting that the total number of events in the log file is greater than a predetermined threshold (e.g., 250 events) and the top N (e.g., 2) most common non-whitelisted types of events in the log file account for more than a predetermined percentage (e.g., 99%) of the total number of events. The set of whitelisted events can be determined based on historical log files uploaded to the analytics server that satisfy the previous conditions.","Also at block , if events in the current uncompressed log file should be summarized, then the contents of the uncompressed log file is replaced with an event summary. The event summary can include the original header event followed by a summary of the other events in the original uncompressed log file. The summary of the other events can include for each event type summarized, the label of the summarized event and the number of times the event was founded in the original uncompressed log file. Other event summaries are possible and the present invention is not limited to any particular event summary.","At block , the serialized and encrypted but uncompressed form of the events stored in the current uncompressed log file is read into volatile memory of the device as a serialized, decrypted, and uncompressed form of the events. The encrypted form can be decrypted using a cryptographic stream cipher. The serialized, decrypted, and uncompressed form of the events is compressed using a compression algorithm (e.g., GZIP).","At block , the serialized, decrypted, and compressed form of the events are encrypted using a cryptographic stream cipher and then written to a compressed log file stored in non-volatile memory of the device.","At block , the compressed log file is uploaded to an analytics server for further processing. In some embodiments, the encrypted\/compressed events stored in the compressed log file are decrypted before being uploaded as decrypted\/compressed events to the analytics server. By doing so, the analytics server does not need the encryption key used to encrypt the events in order to decrypt the events. Security of the events on the network can be protected using other encryption mechanisms such as by encapsulating the decrypted\/compressed event stream in a Secure Hyper Text Transfer Protocol (HTTPS) stream.","In the above example method there is a one-to-one correspondence between uncompressed log files and compressed log files that are uploaded to an analytics server. In other embodiments, there is a one-to-many or many-to-one correspondence between uncompressed log files and compressed log files. For example, the serialized, encrypted, and uncompressed form of events stored in one uncompressed log file can be stored in a serialized, encrypted, and compressed form across multiple compressed files. Similarly, the serialized, encrypted, and uncompressed form of events stored in multiple uncompressed log files can be stored in a serialized, encrypted, and compressed form in a single compressed log file.","In the foregoing specification, embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense. The sole and exclusive indicator of the scope of the invention, and what is intended by the applicants to be the scope of the invention, is the literal and equivalent scope of the set of claims that issue from this application, in the specific form in which such claims issue, including any subsequent correction."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
