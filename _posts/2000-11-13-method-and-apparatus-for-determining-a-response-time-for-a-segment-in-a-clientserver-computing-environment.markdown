---
title: Method and apparatus for determining a response time for a segment in a client/server computing environment
abstract: A method, apparatus, system, article of manufacture, etc. of determining response times for various computing segments is provided in accordance with one or more embodiments of the invention. Accordingly, the following segments in the execution of a computer program may be directly measured, computed, determined, or derived: total response time, client segment compute time, network segment trivial response time, network segment response time, server segment response time, and think time response time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06917971&OS=06917971&RS=06917971
owner: International Business Machines Corporation
number: 06917971
owner_city: Armonk
owner_country: US
publication_date: 20001113
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","CONCLUSION"],"p":["This application claims the benefit under 35 U.S.C. Section 119(e) of the following U.S. provisional patent application, which is incorporated by reference herein:","Provisional Application Ser. No. 60\/172,026, filed Dec. 23, 1999, now abandoned, by Paul F. Klein, entitled \u201cMEASURING RESPONSE TIME FOR VARIOUS SEGMENTS OF A STANDARD CLIENT\/SERVER COMPUTING ENVIRONMENT BY DIRECTLY MEASURING ONE SEGMENT AND STATISTICALLY DERIVING RESPONSE TIME FOR THE REST\u201d.","This application is related to the following co-pending and commonly assigned patent applications, which applications are incorporated by reference herein:","U.S. patent application Ser. No. 09\/428,271, filed Oct. 27, 1999 entitled \u201cEND-TO-END RESPONSE TIME MEASUREMENT FOR COMPUTER PROGRAMS USING STARTING AND ENDING QUEUES\u201d, by Paul F. Klein et al., now U.S. Pat. No. 6,202,036, issued Mar. 13, 2001, which application is a continuation of U.S. Pat. No. 5,991,705, issued on Nov. 23, 1999, application Ser. No. 08\/899,195, filed Jul. 23, 1997, entitled \u201cEND-TO-END RESPONSE TIME MEASUREMENT FOR COMPUTER PROGRAMS USING STARTING AND ENDING QUEUES,\u201d by Paul F. Klein et al.; and","U.S. patent application Ser. No. 09\/428,262, filed Oct. 27, 1999 entitled \u201cROUND TRIP RESPONSE TIME MEASUREMENT FOR COMPUTER PROGRAMS\u201d, by Paul F. Klein et al., now U.S. Pat. No. 6,526,371, issued Feb. 25, 2003.","1. Field of the Invention","The present invention relates generally to measuring response time for various segments of a standard client\/server computing environment by directly measuring one segment and statistically deriving response time for the rest.","2. Description of the Related Art","In today's environment, it is common for desktop computers to run many different local and\/or network applications simultaneously. Within such computing environments, it is not unusual for one application to execute significantly slower than other applications. Further, it is not uncommon for the operation of one application to seriously impact the performance of other applications on the computer. As a result, the user may have to wait an inordinate amount of time for applications to respond. The wait time experienced by a user is typically directly related to that user's productivity and business opportunity.","As more software applications and information are transferred via the Internet or are utilized on a network, determining performance of individual applications or network segments, based only on their observable behavior, becomes difficult. For example, a user may be unable to reliably detect whether abnormal performance for a specific application is the result of operations performed by that application, or whether it is the result of the impact from another application, or whether it is the result of the performance of the server or another remote system. Further, since each application may be able to perform many different kinds of processing, the user may have no idea that certain requests have significantly worse performance.","By having an ability to measure response time of each Client\/Server segment in a computing environment, a decision can be made by the owner of the computing environment, as to which segment to investigate when a real-time delay should arise. Should one particular segment show signs of a delay, the owner of that computing segment can be called upon to do repairs or enhancements of that segment, reducing delays and ultimately making it operate that much faster. Thus, being able to get response time measurements of one or more segments in a computing environment is invaluable to the responsive operation of the total Client\/Server computing environment.","For example, within the computer industry, different segments of a computer process directly relate to a standard industry model of a corporation's information technology structure. Corporations, as related to computing environments, may divide their information technology divisions into three logical parts: desktop management, network management, and application management. These divisions are typically run with different people and different skill sets. By measuring segment delays, delays within the three corporate divisions may be measured, thereby allowing the corporation to assign the correct expertise to manage the problems based on the segment in question. For example, if the client response time shows delays, then it is the responsibility of the desktop management division to solve the problem. For poor network response times, the network management division will be dispatched. Similarly, for delays in the server, the corporation's application management division would be responsible.","Currently, response time measurements in a segmented computing environment are hampered by the need to take measurements at each physical segment in question\u2014which in most cases is not practical or even possible. Many of the segments to be measured are not in the physical realm of a measurement agent or the segment's design is such that a measurement agent would be ineffective because of a lack of an instrumentation point. In situations like this, the best that can be accomplished is to measure response time at a starting point segment giving what is known as the \u201cTotal Round Trip Response Time\u201d. The Total Round Trip Response Time measurement contains the summation of delays due to all computing segments but gives no information about delays in any specific segment. To reduce the Total Round Trip Response Time of any computing environment, the response time of one or more individual computing segments must be reduced.","To overcome the limitations in the prior art described above, and to overcome other limitations that will become apparent upon reading and understanding the present specification, the present invention discloses a method, apparatus, and article of manufacture for measuring response time of several related computing segments in a client\/server computer environment.","The method derives, using a statistical method, the response time of several related segments in a client\/server computing environment. A final segment, the total of all segment response times, is also computed. The segments that can be derived by a single direct measurement are client response time, network response time, server response time, total end-to-end response time, and client think time. Each of these segments is calculated and derived by directly measuring the client segment using a software measurement agent.","In the following description, reference is made to the accompanying drawings which form a part hereof, and in which is shown, by way of illustration, one or more embodiments of the invention. It is understood that other embodiments may be utilized and structural and functional changes may be made without departing from the scope of the present invention.","Overview","A method, apparatus, system, article of manufacture, etc. of determining response times for various computing segments is provided in accordance with one or more embodiments of the invention. Accordingly, the following segments in the execution of a computer program may be directly measured, computed, determined, or derived: total response time, client segment compute time, network segment trivial response time, network segment response time, server segment response time, and think time response time.","Hardware Environment",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1","b":["100","102","104","106","102","104","106","104","106","108"]},"In accordance with one or more embodiments of the invention, network  (such as the Internet) connects client computers  executing applications  (e.g., a Web browser) to server computers  executing applications such as Web servers . In one or more embodiments of the invention, the application  is a Web browser such as NETSCAPE NAVIGATOR or MICROSOFT INTERNET EXPLORER. Further, software may be downloaded from server computer  to client computer  and installed as a plug in or ActiveX control of application . Web Server  may be a web server  currently available in the market such as the Web Server available from Netscape, the Internet Information Server (IIS) available from Microsoft, or the Web Server available from Apache.","In one or more embodiments of the invention, Web server  hosts an Active Server Page (ASP) or Internet Server Application Programming Interface (ISAPI) application that may be executing scripts. The scripts may invoke objects that execute business logic (referred to as business objects). The business objects may then manipulate data in a database. When a developer encapsulates business functionality into objects, the system may be referred to as a component object model (COM) system. Accordingly, the scripts executing on Web server  invoke COM objects that implement the business logic. Further, server  may utilize Microsoft's Transaction Server (MTS) to access required data stored in a database via an interface such as ADO (Active Data Objects), OLE DB (Object Ling and Embedding DataBase), or ODBC (Open DataBase Connectivity).","In one or more embodiments of the invention, additional applications (that may be implemented using hardware or software, for example) such as total response time agent , trivial response time agent , and datastream agent  execute in cooperation with client . Total response time agent  and trivial response time agent  are software agents written in a suitable programming language that is applicable to the computer hardware and software environment that segmented response time measurement is to take place on. For example, the computing environment may be Microsoft Windows 95, Windows 98, Windows NT 4.0, Windows ME, Windows 2000, etc. operating systems. In accordance with one or more embodiments of the invention, agents , , and  work in conjunction with any operating system currently available or that may be available in the future. Software agents - may be written in any programming language currently available (e.g., C or C++) or that may be available in the future. For example, any programming language that is capable of addressing operating system metrics, sending and receiving data over a network (e.g., a TCP\/IP network), and\/or reading and writing data to an external memory device (e.g., a hard drive) may be utilized.","A client \u2014 server  computer segment is a portion of a distributed computing environment that processes and routes computer requests from one location to another, typically over a complex computer network , with the caveat that these locations can be set physically apart. Each segment is typically made up of computing hardware and computer programs for the purpose of processing and routing these requests. The real-time that is utilized by a computing segment is also referred to in the computer industry as the segment's response time. Understanding the response time of several related computer segments is also known as segmentation.","The operation\/execution of applications, devices, and components of system  may be viewed with respect to segmentation and segments. Processing performed by client  is said to be in the client  segment of computing. Network  requests that are sent and received to and from the client  segment and processed by network  software (commercial or otherwise), is said to be part of a network  segment. Processing that takes place by the server , on behalf of the client  segment's processing, is said to be part of the server  segment. Time spent at the client  segment, after the network  segment and server  segment have processed their requests, is part of the client  think tire segment .","Generally, components - all comprise logic and\/or data that is embodied in or retrievable from a device, medium, signal, or carrier, e.g., a data storage device, a data communications device, a remote computer or device coupled to the computer across a network  or via another data communications device, etc. Moreover, this logic and\/or data, when read, executed, and\/or interpreted, results in the steps necessary to implement and\/or use the present invention being performed.","Thus, embodiments of the invention may be implemented as a method, apparatus, or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof. The term \u201carticle of manufacture\u201d (or alternatively, \u201ccomputer program product\u201d) as used herein is intended to encompass logic and\/or data accessible from any computer-readable device, carrier, or media.","Those skilled in the art will recognize many modifications may be made to this exemplary environment without departing from the scope of the present invention. For example, those skilled in the art will recognize that any combination of the above components, or any number of different components, including different logic, data, different peripherals, different software, and different devices, may be used to implement the present invention, so long as functionality as described below are performed thereby.","Software Components","A method for measuring response time of one or more several related computing segments in a client \/server  computer environment is provided that is based directly on measuring one or more of the segments and using a statistical technique, derive the response time for several of the other segments. A final segment, the total of all segment response times, may also be computed.","The one or more segments that can be derived by a single direct measurement are client  response time, network  response time, server  response time, total end-to-end response time, and client think time . Each of these segments may be calculated and derived by directly measuring the client  segment using a software measurement agent. Accordingly, the client  segment and total response time may be directly measured at one physical location. Thereafter, the network  segment, server  segment, and client  think time segment  may be derived.","Directly Measuring Total Response Time","To derive the response time for a segment, the total response time must be directly measured first at the client . The total response time agent  is responsible for directly measuring the total response time. The total response time is equivalent to the summation of the following derived values: client  segment time+network  segment time+server  segment time.","Total response time measurement for a computer program begins with the activation of an event at client . For example, the cursor control device  (e.g., a computer mouse), ENTER key, or other valid keyboard key may be depressed at client . The event activation causes one or more requests to travel over the network  and induces server  to process the request. Total response time measurement ends when the server  completes processing, sends the results back over network , then onto the client  where the client  processes the results (e.g., by presenting the results onto a computer display).","For the purpose of measuring total response time, a method is needed to capture the activation of an event (e.g., computer Mouse and Keyboard events) as they are acted upon and displayed on a computer display. For example, in one or more embodiments of the invention, the Window's WINSETHOOK Application Program Interface (API) may be used. A similar API exists and may be utilized for operating systems that are not manufactured by Microsoft under the Windows or NT logo. The use of the WINSETHOOK API technique is further illustrated in U.S. patent application Ser. No. 09\/428,271, filed Oct. 27, 1999 entitled \u201cEND-TO-END RESPONSE TIME MEASUREMENT FOR COMPUTER PROGRAMS USING STARTING AND ENDING QUEUES\u201d, by Paul F. Klein et al., now U.S. Pat. No. 6,202,036, issued Mar. 13, 2001, which application is a continuation of U.S. Pat. No. 5,991,705, issued on Nov. 23, 1999, application Ser. No. 08\/899,195, filed Jul. 23, 1997, entitled \u201cEND-TO-END RESPONSE TIME MEASUREMENT FOR COMPUTER PROGRAMS USING STARTING AND ENDING QUEUES,\u201d by Paul F. Klein et al., which applications are fully incorporated by reference herein.","Total response time agent  is responsible for measuring the total response time and implementing any measurement techniques. For example, total response time may be measured by Windows Events and Network Packet flows.","Operating Systems (e.g., Windows 95, Windows 98 and NT 4.0) may utilize message queues  to move data between computer hardware (e.g., display ) and software (e.g., application ). Various components (e.g., the WINSETHOOK feature) may be utilized to capture the message as they arrive and depart a message queue . When an event activation occurs (e.g., a mouse  click or Keyboard event), signaling the start of a transaction, a message may be placed on the application's  message queue . A timestamp is taken when this event occurs and becomes the starting time for the transaction. When the results of the transaction return from the server , the results arrive at message queue  first, and may then be utilized by other applications, hardware (e.g., placed on the display ), etc. after completing the transaction. An ending timestamp is taken when the transaction results are placed on message queue . The difference is the total response time. Messages placed on a message queue  may be referred to as events or \u201cWindows Events\u201d.","As a software agent, datastream agent  sits logically between the client segment  and the network segment  as a datastream \u201csniffer\u201d or \u201cwatcher\u201d. The job of datastream agent  is to intercept the TCP\/IP (transmission control protocol\/internet protocol) network  packets as they flow into and out of the client segment  for the purpose of calculating a timestamp indicating packet arrival time, count of packets as well as packet sizes in bytes. Datastream agent  may be implemented in a variety of manners. Two of such manners are described herein. In one or more embodiments, datastream agent  comprises a TCP\/IP Network filter that is part of the TCP\/IP Network Stack that is part of most all-commercial TCP\/IP implementations. Alternatively, in one or more embodiments, datastream agent comprises a WINSOCK2 Layered Service Provider of an operating system (e.g., WINDOWS 98 or NT 4.0).","Using datastream agent  (implemented using any available method), data representing a transaction flows through the datastream agent  and can be captured for the purpose of taking a timestamp. Thus, as data leaves the application  and enters the datastream agent \u2014a starting timestamp is taken. An ending timestamp is taken when the transaction results flow back into the datastream agent  across network  from the server . The difference is calculated as the response time. However, with this technique, time spent in the client segment  is not captured.","Therefore, if the WINSETHOOK technique is utilized, the total response time is calculated or determined by taking a starting timestamp when an event activation (e.g., mouse  click) arrives at message queue  and taking an ending timestamp when the results arrive back from the server  and onto message queue .",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 2","b":["200","114","108","202","204","114","102","104","204","122","206"]},"Computing Client  Segment Time","The direct measurement of client  segment response\/compute time begins when total response time agent  detects an event activation (e.g., a computer mouse  or keyboard event) signaling the start of a client  transaction.","As stated above, total response time agent  may utilize the WINSETHOOK API to measure the start of the client  transaction. Using the WINSETHOOK API, the event activation may be detected upon the arrival of a message on message queue . As this message queue  event occurs, total response time agent  sets a software timestamp. When the first network  event is detected by datastream agent  outbound toward network segment , an ending timestamp is generated for the client  segment. The difference between the two timestamps is the amount of time it took to process the request on the outbound leg of the client  segment.","In a similar fashion, the inbound results are treated the same way. Datastream agent  takes a timestamp when the last inbound network  flow is detected. Total response time agent  then takes a timestamp after the last update is presented to message queue  prior to further processing (e.g., presenting the information on display ). The difference between the two timestamps is the amount of time it took to process the request on the inbound leg of the client  segment. The response time of the outbound client  segment time is added to the inbound client  segment time to get the total client  segment compute time.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 3","b":["104","300","114","108","104","302","304","118","306","308","118","102","118","310","122","312","314","104","316"]},"Computing a Network  Segment's Trivial Response Time","Trivial response time agent  maintains information about how long it takes to make a trivial request, of a specific network packet size, to the server  and back again. A trivial request is one that causes a network packet to flow across network  to server  where server  does little or no computer processing because of it. Instead, all the server  does in response to this trivial request is to echo the network packet back to the client  where trivial response time agent  resides. Thus, almost all the time taken to accomplish this trivial request can be attributed to the network  since the server  does almost nothing. For this reason, the trivial request provides a good measure of the network  response time, for a given packet size, at a specified moment in time.","Trivial response time agent  calculates trivial response time by sending a trivial request packet to the server  on timed intervals. At every interval, a TCP\/IP Network  ping (also called a ping and referred to as a trivial request) is sent to the server . Trivial response time agent  takes a timestamp before calling\/sending the ping\/trivial request packet and takes another after the ping\/trivial request packet returns. The difference of these two timestamps, divided by two, is the network  segment trivial response time (also referred to as a trivial response time) to the server . Since networks  in general are very dynamic in load and response time, in one or more embodiments of the invention more than one trivial response time calculation may be taken and averaged to ensure a reliable trivial response time. In addition, time in the network  may vary by the size of the network  packet that flows over the network . Therefore, for each network  ping in a timed interval, several pings of various network  packet sizes may be transmitted as well. When embodiments utilize several pings, trivial response time agent  maintains a running average of trivial response times, not only by the number of pings, but also by the packet size of each ping.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 4","b":["102","402","116","404","106","116","406","116","408","410","102"]},"Deriving Network  Segment Response Time","To derive the network  segment response time (also referred to as network response time), datastream agent  keeps track of network  packets that flow outbound from and inbound to client  that occur between a transaction starting event and its end. Accordingly, datastream agent  may maintain information about the number of network  packets that flow outbound from and inbound to client , the size of each packet, in bytes, that flow outbound from and inbound to client , and the response time of a trivial request to the server  as measured by trivial response time agent .","Once the response time that is measured by the total response time agent  has completed, the network  response time can be derived. Using information in the above statements, for each packet viewed as going outbound and inbound from the client , the size of the network  packet is matched with a packet of an equal size measured by the trivial response time agent . If the two network  packets flowed over the network  at approximately the same time, they should have had the same response times. Thus, all of the matched trivial times may be added (by datastream size) of all discrete network  packets collected by datastream agent  to derive the network  segment response time.","As a practical matter, trivial response time agent  may not measure every size packet that flows over network . If trivial response time agent  did record every measurement, the trivial measurement agent  could become intrusive to the network  and actually degrade the network  response time. Therefore, when matching a network  packet size collected from datastream agent  to that of a trivial response time collected by the trivial response time agent , a \u201cbest fit\u201d technique may be used. In a \u201cbest fit\u201d technique, the trivial packet size that most closely matches the network  packet size, but is just larger, is interpolated in a linear fashion to the actual network  packet size. For example, the following interpolation technique may be used in accordance with one or more embodiments of the invention:\n\n","One or more situations may govern the accuracy of computing the derived response time in the above example. If any of the situations are not accounted for, the value for derived response time may be off by several hundred percent. Accordingly, situations that may need to be considered include:\n\n","Under normal network  conditions, as seen in standard industry network  implementations, the above-identified situations may pose little problem to measuring network  response time.","Another possible source of derivation error can occur when the network  segment response time and the server  are actually close to being equal and of very small time value (e.g., less than one second or two). It may be possible to derive a network  segment response time larger than the measured total response time due to interpolation error. In this case, one or more embodiments of the invention may divide the derived time by two and use that number for the network  segment time since in this situation\u2014the times were equal to being with.","Still another possible source of derivation error can occur when the actual network  segment's response time varies wildly at various network  moments. To adjust for this situation, trivial response time agent  may calculate responses more frequently. Accordingly, trivial response time measurements may be made twice or more times during the actual network  activity within the bounds of the client  transaction. In one or more embodiments, in addition to pinging the network  on an interval, the network  may be pinged based on a specified number of packets (e.g., every five (5) or more packets) that flows during the transaction. Thereafter, the largest trivial response time measured is used to compute the network  segment response time.",{"@attributes":{"id":"p-0061","num":"0064"},"figref":"FIG. 5","b":["102","502","102","504","102"]},"Deriving Server  Segment Response Time","To derive server  segment response time, the total response time as calculated by the total response time agent  is subtracted from the network  segment response time. Additionally, the client  segment response time is subtracted from the result:\n\n","The think time segment  is the time that a client  takes to think or activate another action once presented with information. To derive the think time segment  response time, total response time agent  takes a timestamp when an ending event updates the message queue  (e.g., prior to updating a computer display ). Total response time agent  takes another timestamp when a second client  event is activated (e.g., when a computer mouse  or keyboard event arrives at message queue ) indicating the start of a new client  request. The difference between these two timestamps is the think time segment  response time.","This concludes the description of one or more embodiments of the invention. In summary, one or more embodiments of the invention derive response times for various processing and routing segments in a client \/server  computer environment by directly measuring one segment of the environment. Accordingly, a client segment compute time, network segment compute time, server segment response time, and think time segment response time may be determined by measuring. Deriving response times as opposed to directly measuring response times provides many advantages. Such advantages are further enhanced when the computer environment is such that these segments are not physically located together or that the segments are designed in a way that does not allow direct measurement.","Since the total response time of any computer request is the sum of each segment that a request travels over, being able to identify a computer segment with poor response time for the purpose of repairing or reworking may be useful in the efficient operation of any computer network.","The foregoing description of the preferred embodiment of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
