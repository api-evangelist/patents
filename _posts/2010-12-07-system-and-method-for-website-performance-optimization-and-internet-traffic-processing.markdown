---
title: System and method for website performance optimization and internet traffic processing
abstract: A system for optimizing the performance of a website that runs on one or more HTTP servers and is configured to receive HTTP requests from one or more clients via user agents and provide HTTP responses to the one or more clients includes an intermediary component configured to connect to the clients and the servers via network connections. The intermediary component includes a traffic management system (TMS) that includes means for managing HTTP requests originating from the clients and targeting the servers and HTTP responses originating from the servers and targeting the clients and means for redirecting the HTTP requests to the intermediary component. The intermediary component further includes a traffic processing system that includes means for receiving the redirected HTTP requests and the HTTP responses and means for applying optimization techniques to the redirected HTTP requests and the HTTP responses.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08112471&OS=08112471&RS=08112471
owner: YOTTAA, Inc
number: 08112471
owner_city: Boston
owner_country: US
publication_date: 20101207
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED CO-PENDING APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application claims the benefit of U.S. provisional application Ser. No. 61\/267,149 filed on Dec. 7, 2009 and entitled DISTRIBUTED NETWORK SERVICE FOR TRAFFIC PROCESSING AND OPTIMIZATION, which is commonly assigned and the contents of which are expressly incorporated herein by reference.","The present invention relates to a system and a method for website performance optimization and Internet traffic processing, and in particular to an intermediary system that optimizes requests directed to a website and responses originating from the website.","Every day, millions of people visit various websites for learning, reading, sharing, social networking, shopping, blogging, gaming, dating, dining and travel, among others. At the same time, millions of websites are trying to be successful in serving their objectives, whether it is to build an online business, support an offline business, or both. According to NetCraft, there are over 68,000,000 active websites as of March 2009, with over 1,400,000 new websites created every month for the last 15 years. While each website serves its own purpose, together they form part of the foundation of our society today.","The performance of a website directly impacts its success or failure in serving its objective. When a website is slow, users have to spend more time waiting and become less productive. More often, they lose patience, abandon their activities and leave. Further, users are much less likely to come back to slower websites. On the contrary, faster performance results in more pleasant user experience. Users are more productive and are more likely to come back.","The impact of web performance on business success has been demonstrated many times in the real world. The following is a partial list of web performance problems:\n\n","Since the beginning of the web, website owners have been trying to find ways to improve their website performance. First, it is relevant to look at the factors that influence website performance.","The performance of a website is determined by a complex chain of elements along the web application delivery chain, starting from the data center where the website is running to the end user's browser.","When a user requests a web page, the user's browser sends out the request as an HTTP request. The HTTP request is transmitted from the user's computer to the user's last mile connectivity, which can be dial-up, DSL, Cable modern, wifi, cellular, T1, T3, among others, to some local Internet Service Provider (ISP). The request is further transmitted from the local ISP to some other ISP networks according the Internet's routing protocols (BGP). Along the path, there may be firewalls, network gateways, filters, address translations, among others, at each hop that the request passes through. If there is no error, eventually the request reaches the data center where the website is running Inside the data center, an HTTP server processes the request, which may go through a few additional steps such as invoking some middleware logic and database lookups, and eventually produces an HTML document. The HTTP server returns the HTML document in response to the HTTP request. The HMTL document is transmitted as an HTTP response message, traversing a similar network path along the chain, until eventually the HTTP response is received by the user's browser. The browser parses the HTTP response, interprets it and processes it. Once the browser recognizes the HTTP response is an HTML document, it starts to render the HTML document. Along the way of rendering, if the HTML page contains additional resources such as images, JavaScript files, cascade style sheet (CSS) files, media files, among others, the browser issues additional requests for these resources. Each request results in one round trip. It is fairly typical for today's web pages to require over 100 round trips. Eventually all these resources are loaded, the browser fully renders the page and the web page is ready for user interaction.","The various components that impact website performance along the delivery path can be classified into the following categories:\n\n","There are various approaches for optimizing website performance. Different approaches focus on different influence factors. The following lists these approaches:\n\n","Another approach is to optimize the client side browser performance. Different browsers have different strength. It is possible to exploit the unique strength of a particular browser to build a higher performing website. In fact, some websites do require a specific browser or browser version in order to perform. However, this is not a suitable approach for most websites because websites rarely have control on the client side user environment.","The current technology landscape for web performance optimization is complex with hundreds of factors involved. Each of the above mentioned approaches addresses only a small portion of these factors. To effectively optimize the performance of a website, significant technical know-how is required. It is a tedious and manual process that requires continued investment in order to yield results. In reality, most websites do not have the technical know-how, or the financial resources, to make such commitments. For these websites that do have the financial resources, they typically have to employ a large technical team, with skills covering both web development and network operations, to continuously evaluate the various techniques, experiment with them, monitor the results and iterate.","In summary, prior art web performance optimization approaches are complex, expensive, highly manual and are only affordable by large web properties. Accordingly, there is a need for a system and a method that addresses the above mentioned limitations in the current web performance optimization solutions.","In general, in one aspect, the invention features a system for optimizing the performance of a website that runs on one or more HTTP servers and is configured to receive HTTP requests from one or more clients via user agents and provide HTTP responses to the one or more clients. The system includes an intermediary component configured to connect to the clients and the servers via network connections. The intermediary component includes a traffic management system (TMS) that includes means for managing HTTP requests originating from the clients and targeting the servers and HTTP responses directed to the clients and means for redirecting the HTTP requests to the intermediary component. The intermediary component further includes a traffic processing system (TPS) that includes means for receiving the redirected HTTP requests and the HTTP responses and means for applying optimization techniques to the redirected HTTP requests and HTTP responses.","Implementations of this aspect of the invention may include one or more of the following features. The means for applying optimization techniques include means for applying browser optimization, means for applying content optimization, means for applying HTTP optimization, means for applying network optimization, means for applying content delivery network (CDN) optimization and means for applying infrastructure optimization. The intermediary component is cloud based and is configured to run in a private cloud, a public cloud or a hybrid cloud computing infrastructure. The cloud based intermediary component runs in different geographic locations around the world. The cloud based intermediary component includes means for scaling its processing capacity by scaling up and down the cloud based computing infrastructure in response to web traffic processing demand. The intermediary component further includes means for processing the redirected HTTP requests by applying one of fulfilling selected HTTP requests locally, relaying selected HTTP requests to the HTTP servers or relaying selected HTTP request to other HTTP hosts. The traffic management means further include means for directing the optimized HTTP requests to the website and means for directing the optimized HTTP responses to the users. The system traffic management means for redirecting the HTTP requests to the intermediary component comprise Domain Name Service (DNS) means for adding a Canonical Name (CNAME) to the DNS record of the website and means for resolving the CNAME to the intermediary component. The traffic management means for redirecting the HTTP requests to the intermediary component comprise DNS means for hosting the DNS record of the website and resolving DNS requests to the websites to the intermediary component. The traffic management means for redirecting the HTTP requests to the intermediary component comprise a network gateway and the HTTP requests and HTTP responses are configured to pass through the network gateway. The intermediary component may be one of a proxy server, a library module that runs as part of the one or more HTTP servers that host the website or a hardware device or appliance that connects the clients to the one or more HTTP servers. The means for applying content optimization comprise means for optimizing HTML pages, means for optimizing JavaScript files, means for optimizing CSS files, means for optimizing image files and means for optimizing media files. The optimization means reduce the number of HTTP requests required to load the webpage. The means for optimizing HTML pages include means for minification, Gzip, resource bundling, de-duplication, request order shifting, resource inlining and using DataURI technique. The means for optimizing JavaScript files include means for minification, Gzip, JavaScript file bundling, obfuscation, de-duplication, deferred execution, JavaScript inlining and using DataURI technique. The means for optimizing CSS files include means for minification, Gzip, CSS bundling, obfuscation, de-duplication, CSS inlining and using DataURI technique. The means for optimizing image files include means for metadata removal, color table adjustment, right sizing, sprite, compression and using DataURI technique. The means for optimizing media files include means for metadata removal, viewpoint right sizing, transcoding and compression. The means for applying browser optimization include means for detecting a specific browser and its unique capabilities and means for rewriting web content to utilize the specific browser's unique capabilities in order to improve browsing experience. The means for applying browser optimization include means for providing domain sharing in order to enable multiple browser connections. The means for applying browser optimization include means for using SPDY protocol if the browser supports it, means for detecting viewport and prioritizing HTTP content that are visible in the viewport, means for optimizing HTML page layout for a specific browser to improve rendering time and means for detecting the caching capability of the browser and maximizing client side caching. The means for applying browser optimization include means for using optimized TCP protocol to communicate with a web browser. The means for applying browser optimization include means for detecting a web browser as being a mobile web browser and transforming the webpage content to fit into the mobile web browser screen display and rendering. The means for applying CDN optimization include means for CDN stuffing that optimize website performance by detecting cacheable assets, automatically storing the cacheable assets in selected CDNs, managing these assets and serving them from these CDNs. The means for applying CDN optimization include means for CDN balancing that optimize website performance by monitoring the performance and cost of various CDNs and serving assets from the best CDN according to a certain measure. The means for applying HTTP optimization include means for pre-fetching to optimize website performance by analyzing an HTTP response for additional web resources that it requires, requesting such web resources from one the HTTP servers before requests for such resources have been received, and serving such resources upon receiving such requests. The means for applying HTTP optimization include means for improving webpage loading speed by applying \u201cGzip\u201d compression to HTTP content and setting \u201cGzip\u201d header, using HTTP 1.1 when possible to reuse HTTP connections, using SPDY protocol when client-side user agent supports it, using optimized TCP protocol to communicate with client-side user agent, setting proper HTTP caching headers, and offloading HTTPS\/SSL processing from the one or more HTTP servers. The means for applying network optimization include means for improving webpage loading speed by using an optimized network protocol, detecting connection congestion status and selecting less congested connections, optimizing TCP parameters to improving connection handling with a client-side browser as well as the one or more HTTP servers. The means for applying network optimization include means for using intermediary nodes to communicate relay connections between a client-side web browser and the one or more HTTP servers, wherein the intermediary nodes communicate with the client-side web browser using optimized TCP connections comprising one of 3-way handshake, window size, error handling, packet size, packet count and acknowledgement handling. The means for applying network optimization include means for using intermediary nodes to relay connections between a client-side web browser and the one or more HTTP servers, wherein the intermediary nodes communicate with the HTTP servers using optimized TCP connections by reusing existing connections, or optimizing TCP parameters comprising one of 3-way handshake, window size, error handling, packet size, packet count and acknowledgement handling. The means for applying network optimization include means for using multiple intermediary nodes to relay connections between a client-side web browser and the one or more HTTP servers, wherein the intermediary nodes communicate with each other using optimized communication means. The optimized communication means comprise high speed links or tuned communication channels. The means for applying network optimization comprise means for using multiple intermediary nodes to relay connections between a client-side web browser and the one or more HTTP servers, and the intermediary nodes communicate with each other using multiple parallel connections, and split traffic payload among these parallel connections for network transmission. The means for applying infrastructure optimization comprise means for DNS optimization, means for increasing the number of HTTP server presences, means for providing server load balancing, means for providing global load balancing and means for improving server reachability by adding more data centers or adding more edge presences. The intermediary component further includes means for changing its configuration and optimization settings and these means include one of a user interface, an application programming interface or both.","In general, in another aspect, the invention features a method for web performance optimization including the following. Providing one or more clients configured to send HTTP requests via web browsers. Next, providing a website running on one or more HTTP servers and being configured to receive the HTTP requests and provide HTTP responses to the users. Providing an intermediary component that manages HTTP requests originating from the clients and targeting the servers and HTTP responses originating from the servers and targeting the clients and redirects the HTTP requests to the intermediary component. The intermediary component receives the HTTP requests directed to the website, receives the HTTP responses directed to the clients and applies optimization techniques to the HTTP requests and HTTP responses.","In general, in another aspect, the invention features a method for routing and processing network traffic including the following. Providing first and second parties. Each party is configured to run on one or more computing devices and is accessible via a first network. Providing a second network comprising a plurality of traffic processing nodes. Providing means for redirecting network traffic from the first network to the second network. Redirecting network traffic originating from the first party and being directed to the second party from the first network to a traffic processing node of the second network via the means for redirecting network traffic. Optimizing and processing the redirected network traffic by the traffic processing node and routing redirected network traffic that has been optimized and processed by the traffic processing node to the second party via the second network.","Implementations of this aspect of the invention may include one or more of the following features. The second network is an overlay network superimposed over the first network. The first network is the Internet. The first party is a web browser and the second party is a website. The second network scales up and down its processing capacity by adjusting its number of traffic processing nodes based on the traffic processing needs. The optimizing and processing includes optimizing the redirected network traffic for faster performance. The optimizing and processing includes optimizing the redirected traffic content to reduce the number of round trips, and to reduce traffic payload. The method optimizing and processing includes optimizing network connections between the first party and the traffic processing node. The optimizing and processing includes optimizing network connections between the second party and the traffic processing node. The traffic processing node relays the redirected network traffic to one or more additional traffic processing nodes, and the one or more additional traffic processing nodes optimize and deliver the optimized network traffic to the second party. The traffic processing nodes use optimized network connections between each other to improve communication performance. The traffic processing nodes use parallel networking between each other to improve communication performance, by splitting traffic into multiple packets, delivering the multiple packets over multiple connections in parallel, and re-assembling the multiple packets at a receiving traffic processing node.","Among the advantages of this invention may be one or more of the following. Based on the concept of overlay networks and cloud computing, the present invention discloses an Internet routing system that uses many commodity nodes available from typical cloud computing infrastructure such as Amazon EC2, instead of specialized equipments, to deliver both performance and economy of scale. Though each node itself is not as powerful and reliable as a specialized router, combining many of them together can achieve high performance and high availability. The present invention uses software that run on commodity hardware, instead of application specific integrated circuitry, to route traffic. The present invention provides on-demand scaling, instead of provisioning a fixed capacity. This reduces costs and carbon footprint without sacrificing quality of service. The present invention significantly enhances Internet traffic routing by leveraging the recent advancements in cloud computing. This cloud-based routing gives us a better alternative to Internet routing by overcoming the current inefficiencies while lowering the associated cost and carbon footprint.","The details of one or more embodiments of the invention are set forth in the accompanying drawings and description below. Other features, objects and advantages of the invention will be apparent from the following description of the preferred embodiments, the drawings and from the claims.","Over the recent years, cloud computing has emerged as an efficient and more flexible way to do computing. Cloud computing \u201crefers to the use of Internet-based (i.e. cloud) computer technology for a variety of services (\u201cCloud Computing\u201d, http:\/\/en.wikipedia.org\/wiki\/Cloud_computing). It is a style of computing in which dynamically scalable and often virtualized resources are provided as a service over the Internet. Users need not have knowledge of, expertise in, or control over the technology infrastructure \u2018in the cloud\u2019 that supports them\u201d. The word \u201ccloud\u201d is a metaphor, based on how it is depicted in computer network diagrams, and is an abstraction for the complex infrastructure it conceals. In this document, we use the term \u201cCloud Computing\u201d to refer to the utilization of a network-based computing infrastructure that includes many inter-connected computing nodes to provide a certain type of service, of which each node may employ technologies like virtualization and web services. The internal works of the cloud itself are concealed from the user's point of view.","Various vendors provide cloud computing infrastructure to customers using a \u201cpay as you go and pay for what you use\u201d model, including Amazon.com's Elastic Computing Cloud (EC2), RackSpace, SoftLayer, GoGrid and FlexiScale. All cloud infrastructures provide ways for a customer to dynamically start new nodes or shut down existing nodes in a matter of a few minutes. There are also many vendors providing an end-to-end stack for customers to build and deploy cloud-based applications, notably Google's App Engine and Microsoft's Azure. Further, many customers have built cloud-based applications. By utilizing commodity hardware and virtualization, cloud computing has proven to be able to increase computing efficiency, enhance operational flexibility and reduce costs.","The present invention applies cloud computing techniques to Internet routing as a way to address the scalability and economic challenges of adopting new ways of Internet routing. The invention leverages the recent advancements in cloud computing to automatically scale up and scale down infrastructure capacity in response to network load demand while intelligently routes traffic through optimal routes and transport, delivering much improved performance, reliability and security, while reducing cost and carbon footprint associated with such routing activities.","Referring to ,  and , a web performance optimization system (WPO)  includes a traffic processing system  (TPS), a traffic management system  (TMS) and a data processing system  (DPS). The web optimization system  further includes an application programming interface (API)  and a user interface (UI) . The TPS  includes geographically dispersed traffic processing units (TPU), such as TPU , TPU , shown in  and  or TPU , TPU  in cloud , TPU , TPU  in cloud , TPU , TPU  in cloud , shown in . TPS  receives and processes HTTP communications, request and responses between clients  and website  and TMS  manages the routing of client requests through TPS . DPS  contains the various data gathered for optimal traffic processing, such as status of the network, status of various HTTP servers, settings, configuration, optimization status, customer information, pricing information, website performance, optimization technique configurations, load balancing preferences, among others. Third parties can also use user interface  or API  to query, add, remove and adjust the settings, status, configuration of the entire system to achieve desired results.","Web users , ,  use web browsers A, A, A to connect to hypertext transfer protocol (HTTP) servers , ,  where website  is running When the web users issue HTTP requests  to website , these HTTP requests are directed to pass through the intermediary component . This HTTP request re-direction is managed via the TMS . Upon receiving HTTP requests  from web users , , , TPS  applies optimization techniques  to process these requests. As a result of optimization, some of the requests are fulfilled locally within TPS , some of the requests are forwarded to external hosts for fulfillment, such as external HTTP requests B, and some of the requests are forwarded to website  for processing, such as optimized HTTP requests A, As responses to optimized HTTP requests A, TPS  receives HTTP responses A from website . Further, as responses to external HTTP requests B, intermediary component  also receives external HTTP responses B. Upon receiving any of these HTTP responses, TPS  immediately applies optimization techniques  to optimize the received HTTP response. After optimization processing, TPS  eventually forwards the processed HTTP responses  to clients . The optimization techniques  include the following categories: content optimization, browser optimization, HTTP optimization, network optimization, Content Delivery Network (CDN) optimization and infrastructure optimization.","Content optimization reduces the number of HTTP requests required to load a webpage and includes optimization of the following items: Hypertext Mark-up Language (HTML) pages, JavaScript files, Cascading Style Sheets (CSS) files, image files and media files. Content optimization of HTML pages includes minification, Gzip, resource bundling, de-duplication, request order shifting, resource inlining and Data Uniform Resource Interface (DataURI) technique. Content optimization of JavaScript files includes minification, Gzip, JavaScript file bundling, obfuscation, de-duplication, JavaScript inlining, JavaScript concatenation and compression, deferred execution and DataURI technique. Content optimization of CSS files includes minification, Gzip, CSS bundling, obfuscation, de-duplication, CSS inlining, sprite, concatenation and compression and DataURI technique. Content optimization of image files includes metadata removal, color table adjustment, right sizing, sprite, DataURI technique and compression. Content optimization of media files includes metadata removal, viewport right sizing, transcoding and compression. Furthermore, HTTP web content optimization includes domain sharing.","Browser optimization refers to detecting the unique capabilities of the specific browser of each web user (client) and rewriting content to utilize the specific browser's unique capabilities in order to improve the browsing experience. Browser optimization techniques include domain sharing, SPDY (Speedy), client-side caching, viewport detection and prioritization and mobile transformation. Domain sharing (or splitting) refers to taking a bunch of resources that are being downloaded on a single domain and splitting them across multiple domains to enable multiple simultaneous connections. SPDY refers to an experimental application-layer protocol for transporting content over the web, designed specifically for minimal latency. Client-side caching refers to detecting the caching capability of the client browser and maximizing client-side caching. Viewport detection and prioritization refers to optimizing HTTP content that is visible in the detected viewpoint and optimizing HTML page layout for the specific client browser to improve rendering time. Mobile transformation refers to detecting the client browser as a mobile browser (i.e., browser for mobile communication devices) and transforming the web content to fit the mobile browser screen display and rendering.","HTTP optimization refers to techniques used to improve webpage loading speed. HTTP optimization includes applying \u201cGzip\u201d to HTTP content and setting \u201cGzip\u201d header, using HTTP 1.1 when possible to reuse HTTP connections, using SPDY protocol when client side user agent supports it, setting proper HTTP caching headers, offloading HTTPS\/SSL processing from HTTP server and prefetching. Prefetching refers to optimizing website performance by analyzing an HTTP response for additional web resources that are required, requesting such web resources from the target server before requests for such resources have been received, and serving such resources upon receiving such requests.","Network optimization refers to techniques used to improve webpage loading speed. Network optimization includes using optimized transport protocols rather than TCP protocol, detecting connection congestion status and selecting uncongested connections, optimizing TCP parameters to improving connection handling with the client side browser as well as the target HTTP server, connection reuse, use of SPDY and use of parallel networks. The intermediary component uses multiple intermediary nodes to relay connections between the browser and the target HTTP server. The intermediary nodes communicate with each other using an optimized network protocol. In some embodiments, the intermediary nodes communicate with each other using multiple parallel connections, and split traffic payload among these parallel connections for network transmission.","CDN optimization includes CDV stuffing and CDN balancing. The intermediary component uses CDN stuffing to optimize web performance, by detecting cacheable assets, automatically storing the cacheable assets in selected CDNs, managing these assets and serving them from these CDNs. The intermediary components uses CDN balancing to optimize website performance, by monitoring the performance and cost of various CDNs and serving assets from the best CDN according to a certain measure.","Infrastructure optimization includes Domain Name Service (DNS) optimization, increased number of servers, server load balancing, global load balancing and improved reachability by adding more data centers and\/or by adding more edge presence for assets.","In one example, TPS  is a proxy server. In other examples TPS  is a library module that runs as part of the HTTP servers or a hardware device that connects web visitors , ,  to the HTTP servers , , . The TMS  redirects the HTTP requests  from the web users to the TPS . The TPS  applies the above mentioned optimization techniques to the HTTP request and forwards the optimized request A to the target server  of website . The target server  processes the optimized HTTP request A and sends back an HTTP response A to the TPS . The TPS  applies the above mentioned optimization techniques to the received HTTP response A and sends an optimized HTTP response  to the user's browser A. The intermediary component  is cloud based and is designed to run on a private cloud, public cloud or a hybrid cloud computing infrastructure, as shown in . This cloud based system is designed to run in many different geographic locations around the world, as shown in . The cloud based intermediary component system adjusts its processing capacity by scaling up and down its computing infrastructure capacity in response to the traffic processing demand, as shown in . This cloud routing network is also called an \u201cApplication Delivery Network (ADN)\u201d sometimes in the rest of this document. The traffic management mechanism  that redirects traffic to the intermediary component  is a domain name service (DNS) based mechanism. A canonical name (CNAME) is added to the DNS record of the website  domain name (www.yahoo.com) and the CNAME is resolved to the proxy server . In other embodiments, the DNS record of the website is hosted in the TPU and the TPU resolves the DNS requests to the proxy server. In other embodiments, the traffic management mechanism is a network gateway based mechanism and webpage requests are configured to go through this network gateway.","The invention also describes a method for using content delivery network services by adding web assets to selected content delivery networks and then selecting the most appropriate content delivery network for serving content requests so that a certain measure is optimized. The content delivery networks may be one of the following: Akamai, LimeLight, Amazon CloudFront, EdgeCast, HighWinds, CDNetworks, ChinaCache, Cotendo, NetDNA\/MaxCDN, SimpleCDN, ATT CDN, BigGravity, Advection.NET, Bitorrent, CacheFly, Velocix, Digital Foundation, GridNetworks, Ignite Technologies, Internap, Level 3 Communications, Mirror Image, Move Networks, NaviSite, OctoShape, Pando Networks, PEER1, SoftLayer CDN, Microsoft, Swarmcast, Tata Communications, or Voxel.net, among others. The certain measure that is optimized may be performance metric, cost metric or combination of performance and cost metrics. The method may also include selecting different content delivery networks for serving different users from different geographic locations. The method may also include using an intermediary component to process webpage (including CSS and JavaScript files) requests. The intermediary component analyzes additional web resources referenced by these pages, fetches these additional resources and adds them to a list of CDNs, and modifies the web page URL references so that these additional resources are served from selected CDNs according to a certain measure. The modified URL references point to a selected CDN directly. Alternatively, the modified URL references point to a certain domain name that requires DNS resolution via a DNS service. During DNS resolution phase, the DNS service selects the most appropriate CDN service according to a certain measure, and returns appropriate IP addresses or domain names of the selected CDN service so that the selected CDN serves the requested content.","To ensure the TPS's goal is being met, we will present the solution from four different perspectives:\n\n","In order to ensure a distribution of geographic locations with on-demand scalability, the system takes advantage of cloud infrastructure providers. Some of these cloud providers include Amazon EC2, GoGrid, RackSpace, SoftLayer, ATT, Fujitsu, Savvis, FlexiScale, Verizon, among others.","System Overview","As noted above the traffic processing system (TPS)  is a collection of traffic processing units , as shown in . Once a visitor  resolves a host name to a TPU , all traffic generated by the visitor will be sent to that IP Address. Each TPU  has a load balancer ,  at each of its public IP addresses, as shown in . Once the traffic is sent to the load balancer, a TPU router ,  or  will be chosen to forward the traffic to the customer's server .","The TPU router is responsible for applying both traffic processing and traffic management services. When a router receives a client's request, the router sends the request to another TPU , the customer's origin server , or respond immediately if it can (i.e., information is in the local store or request blocked).","Traffic Processing Unit (TPU)  provides the scalable infrastructure that accepts incoming visitor requests and applies traffic processing services to them before and after sending the requests to the customer's end point, known as an origin server .  shows the high level design of a TPU. Each TPU includes one or more load balancers , , one or more routers , , , a fabric manager  and a data processing toolkit , as shown in . A load-balancer is at each of the TPU's public IP addresses. The load-balancer spreads the traffic over the TPU's routers. The router software is custom designed software and it can accept incoming traffic apply traffic processing services and then send the traffic to a customer's origin server, another TPU or response directly. Each TPU has at least one fabric manager  that all routers talk to. The fabric manager  has server responsibilities, including monitoring, instance management, communication with the Data Processing System (DPS)  and unit-level performance calculations. The data processing toolkit (DPT)  has the ability to interact with the rest of the system in four ways; access to key\/value store, distributed log file publication, message Bus, and the configuration server.","The system  uses the following information:\n\n","The system  creates the following information:\n\n","As was mentioned above, the traffic processing services include content optimization, HTTP optimization, load balancing, parallel networking and message protocol.","Content Optimization","Web pages are made up of many different web resources that vary in their content-type and purpose. Each web resource is stored and requested individually on a web server. This web page structure makes deployment of web pages and websites easy as there is no building process needed for web resources. However, the issue with this deployment model is that the web browser needs to request each of the web resources individually. The web browser requests one web resource and then processes it to see if other web resources are needed. If more resources are required, it will request them one at a time and then it will repeat the process.","Today's websites require many web resources to create the interactivity and presentation envisioned by their designers. Ajax, Web 2.0, and Collaboration Websites all lead to an increase in the interactivity and design required to acquire and keep customers. Developers take the ideas and design and implement web pages by breaking up the page into images, JavaScript, CSS, HTML, and media (Flash, Sound, Video). Developers do this in a way that makes it quick to build, debug, deploy, test, and maintain. This web page development process usually results in resources being broken down into specific tasks including, JavaScript files that implements a specific set of tasks, CSS files that manage the presentation of a certain section, component or element of a page, and images that display one graphical element of a page. The above mentioned method of processing these multi-resource containing web pages by a web browser causes the following issues.\n\n","The content optimization service of the TPS system resolves these issues by default and without developers having to change the way they build their websites or create their resources. The method for providing content optimization includes the following steps. First, a client wanting to use the TPS content optimization service creates an Application Delivery Network (AND). Next, the client changes their DNS setting for their website to point to the TPS's traffic management system. When a visitor requests a resource from the client's website, the request is routed to one of the TPS routers. Next, the router requests the resource from the client's origin server. When the origin server responds with the content, the client's optimization scenario configures the routers content optimization service to apply the desired optimization techniques.","By applying the content optimization as it is streamed through the routers, the TPS achieves a significant reduction in the number of resources requested and the amount of the bytes needed for each resource. This results in a significant savings in web page loading time and user experience.","Definition of Terms","Router","A node within the TPS's routing platform. It can be any machine or process that is designated to process incoming traffic and apply the TPS's traffic services.","Origin Server","A server that is specified by the client to serve original content for a visitor's request.","Traffic Management System","A collection of machines and\/or processes that can resolve DNS requests based on a client's ADN settings.","Application Delivery Network (ADN)","An Application Delivery Network is the set of configuration parameters that is needed to process traffic for a particular client of the TPS.","Optimization Scenario","A set of configuration variables within a client's ADN, which determines how the content optimization engine is applied to a visitor's requests.","Optimization Techniques","A set of content specific processing units that are applied to content. Each processing unit is designed to optimize the content in a specific way. Below is a list of optimization techniques that are applied to content:\n\n","As was mentioned above, first, a client creates an ADN configuration that specifies at least one parameter, i.e., the IP address or hostname of the origin server to forward the traffic to when received. Other information can be added to the ADN configuration to enhance the functionality of the TPS platform. As part of the ADN creation process, the TPS supplies a client with an unique hostname that they will be used in their Name\/DNS server's settings. Once the client supplies the origin server information, an ADN will be created in the TPS's central configuration database. ADN information can be fetched and modified by clients through various interfaces such as a graphical user interface (GUI) or an application programming interface (API). The TPS platform components fetch the ADN information based on the hostname present in the HTTP requests using the programmatic API. Once the client has created their ADN, they need to change their DNS entry for traffic that they want to be redirect through the TPS platform.","Traffic Management System","Once the client has created their ADN and modified their DNS entries, visitors will start to resolve DNS requests via the TPS's traffic management system. The TPS's traffic management system resolves the DNS requests by choosing a Traffic Processing Unit (TPU) or a client origin server and returns it's IP address. The selection of the TPU or the origin server is made by matching a variable number of conditions such as, geographic location, latency, throughput, and any value that can be obtained by the DNS resolver and matched to the value specified by the ADN configuration, TPS or TMS.","Referring to , the traffic management work flow  includes the following. Once the traffic management system receives a DNS request (), it sends it to the request processor, which then changes the request's data into an object (). This object is then used by the rest of the system. Based on the \u201cname\u201d field of the DNS request (), the traffic management system checks to see if the ADN information is currently present (). If the ADN information is not present, the ADN configuration is fetched from the configuration server by looking up the information based \u201cHost\u201d field (). This value is then matched to the unique hostname that was supplied to the client when they created their ADN. The traffic management system will then retrieve the latest metric information needed to choose which TPU to direct the visitor (). Once the metrics have been collected, the TMS will compare each TPU against the set of conditions that are present in the ADN ().","The TPU selection process  is shown in . If the TPU passes the set of conditions (), it will be placed in the list of possible TPUs (). After all TPUs have been tested, the system chooses the TPU that provides the lowest latency for processing visitor traffic (). The lowest latency is determined using timing information, geographic information, historical information, and the TPU's performance information. After the visitor's DNS request is returned with the TPU's IP address, all requests to the client's hostname are sent to the selected TPU.","Once a TPU receives a client request it processes it according to the flow diagram , shown in . First, client  sends a client request (http:\/\/www.foo.com\/index.html) and the request is directed to entry router  of the selected TPU (). Next, the request information is processed into an HTTP request object (). This object is then used throughout the lifecycle of the request. An example of an HTTP request is shown below with a \u201cHost\u201d HTTP header value of \u201cfoo.com\u201d.",{"@attributes":{"id":"p-0081","num":"0146"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"--------- BEGIN HTTP REQUEST ---------------"},{"entry":"GET \/ HTTP\/1.1"},{"entry":"Host: foo.com"},{"entry":"User-Agent: Mozilla\/5.0 (Windows; U; Windows NT 5.1; en-US;"},{"entry":"rv:1.9.1.3)"},{"entry":"Gecko\/20090824 Firefox\/3.5.3"},{"entry":"Accept: text\/html,application\/xhtml+xml,application\/xml;q=0.9,*\/*;q=0.8"},{"entry":"Accept-Language: en-us,en;q=0.5"},{"entry":"Accept-Encoding: gzip,deflate"},{"entry":"Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7"},{"entry":"Keep-Alive: 300"},{"entry":"Connection: keep-alive"},{"entry":"--------- END HTTP REQUEST --------------"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Next, the host name is fetched from the HTTP request (). Using the host name in the HTTP request, the router  checks if the latest copy of the client's ADN configuration is present (). If new information is needed, it will fetch the ADN information for the configuration database based on the host name (). If the ADN information is present, the router may modify the HTTP request () before sending it to the client's origin server (). A request may be modified because some origin servers  require the \u201chost\u201d HTTP header to match the address of the server rather than the one sent by the client's web browser. An example of the modified HTTP request is shown below.",{"@attributes":{"id":"p-0083","num":"0148"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"--------- BEGIN HTTP REQUEST ---------------"},{"entry":"GET \/ HTTP\/1.1"},{"entry":"Host: the TPS.foo.com"},{"entry":"User-Agent: Mozilla\/5.0 (Windows; U; Windows NT 5.1; en-US;"},{"entry":"rv:1.9.1.3)"},{"entry":"Gecko\/20090824 Firefox\/3.5.3"},{"entry":"Accept: text\/html,application\/xhtml+xml,application\/xml;q=0.9,*\/*;q=0.8"},{"entry":"Accept-Language: en-us,en;q=0.5"},{"entry":"Accept-Encoding: gzip,deflate"},{"entry":"Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7"},{"entry":"Keep-Alive: 300"},{"entry":"Connection: keep-alive"},{"entry":"--------- END HTTP REQUEST --------------"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"After the HTTP request is modified, it is sent to the client's origin server using a standard HTTP connection (). HTTP connections are recycled as long as then can be based on HTTP Keep-Alive information. Connection reuse increases performance of the overall request processing because connection creation is an expensive process.","Referring to , the processing of the response  includes the following steps. The origin server  send the response to the TPS router (). The TPS's routing functionality changes the response of the origin server into an object () and pass it through the rest of the work flow. Once the object is created, the TPS tests whether or not the content should be optimized (). If the content should be optimized, the object is passed into the content optimization engine (). If the content should not be optimized, the response is sent back to the requester  (). The requester can be another TPS router or a visitor. Whether or not the content should be optimized is made by testing one of the following:\n\n","After the content is optimized a new response object is created that contains the optimized content () and then sent to the requester ().","Referring to , the content optimization process  includes the following steps. Once the request object is passed into the content optimization engine, the engine retrieves all the resource's content from the request object and pass it to the content specific parser (). The parser turns the content into an object model that can easily be navigated, modified, and reserialized (). Content parsing may require the content to be completely available before parsing can occur. If this is the case the request objects are aggregated until all content is present. Content parsers that require the full set of information are known as \u201cDocument Parsers\u201d. Content parsers that can parse the response as they arrive are \u201cStream Parsers\u201d. Once the content is parsed into an object model, it is checked for embedded resource requests (). Any embedded resource request will be fetched and passed back into the content optimization engine (). After fetching embedded resource requests, the request object is passed to a content specific optimization process (). This process optimizes the content based on the optimization scenario in the client's ADN configuration. The list of possible content optimizations include optimization of HTML pages, optimization of JavaScript files, optimization of CSS files, optimization of image files and optimization of media files, among others. After the content is optimized it is serialized back into text (), and placed into the local \u201ccontent store\u201d (). The optimized response is placed into the content store because the content that was optimized may not have been requested yet. This is the case of embedded resource requests, i.e. CSS files, JavaScript files, media or image files that are optimized as part of the HTML's content optimization process. Furthermore, the optimized response is placed into the content store in order to avoid re-generating the optimized content. Optimization is a time consuming process and therefore in order to limit the CPU and memory overhead needed for running the optimization process again, the optimized content is placed in the local content store. Optimized content that is placed in the local content store is assigned a unique set of identifiers including URL, session cookie, or other visitor identifier, which can be used to retrieve the stored content. The content optimization engine may choose to distribute fetching embedded resource requests and their subsequent optimization across several servers.","Referring to , the processing of future requests  for content that has been previously optimized includes the following steps. When a request comes in for content that has been previously optimized (), the router  processes the request into a request object (). The request object is passed into the local content store to see if a response to the request already exists (). By testing the properties of the request object, including URL, cookies, host name, among others, the system determines if the content is stored in the content store () and if the content has been previously optimized (). If the optimized content is found in the local content store, the system creates an HTTP response object () and sends it to the client (). If the optimized content is in the process of being optimized, the system waits until the content optimization process is completed () and then creates an HTTP response object () and sends it to the client (). If the content is not in the local store, the system fetches the content from the origin server ().","HTTP Optimization","The TPS provides a set of HTTP optimization techniques that increase the performance of the origin server. These HTTP optimization techniques include cache header correction, connection reuse, pre-fetching, distributed content store, store cleaning and keep-alive.","In some cases, web applications set cache headers incorrectly. This results in poor application performance. The TPU optimizes the headers by providing and fixing the content response of cache headers including Etag, Expires, Cache-Control and Last-Modified.","\u201cConnection reuse\u201d refers to reusing open HTTP connections as many times as possible. This minimizes the impact of running traffic through the TPS. Once a connection is created and has finished processing a visitor's request, it is placed in a pool of connections that can be selected to process a new request. HTTP connections are configured to understand the \u201ckeep-alive\u201d signal, i.e., a message sent from one device to another to check that the link between the two devices is operating.","Pre-fetching refers to requesting resources that are embedded within the requested content prior to the browser's request. Once a resource, such as an HTML page is retrieved the pre-fetch functionality starts requesting the additional resources that are embedded within the content of the HTML page that the browser will request in the future, optimizes them and stores them in the local content. This reduces the response time for retrieving all the embedded content that is required for the complete response without adding a significant amount of additional processing. In cases where multiple router hops are required for retrieving content, the content is pushed to the \u201centry\u201d router so that the response time can be further reduced. The TPS system stores resources in the local content store and then tries to retrieve them before requesting them from the customer's origin server.","Referring to , the pre-fetching process  includes receiving a client request by the entry router  and sending it to the exit router . The exit router  processes the response content () and looks for embedded resources (). If the resources are in the local content store it retrieves them () and sends them back to the entry router , which then forwards it to the client. If the resources are not in the local store they are requested from the origin server  (). The TPS router retrieves content in the following order. First content in the \u201cin-memory\u201d local store is retrieved. Next, content in the \u201cdisk\u201d local store is retrieved. Next, content from other routers within the TPU is retrieved and then content from other TPUs within the TPS is retrieved. The content store automatically moves content into and out of in-memory, disk and other distributed stores based on the number of requests, and the amount of storage available to the store. Things that have a high request rate are the fastest to fetch while things that have a lower request rate have slower fetch. Content is placed in a specific content store based on factors such as fees paid for the service.","The system allows customers to perform store cleaning by removing old content from the store using the customer portal. This allows visitors to receive the newest content from the origin server. The system's TPUs provide \u201ckeep-alive\u201d headers to the visitors. This allows the client software on the visitor's machine to reuse HTTP connections. If this is not done then the user will suffer from poor performance because HTTP or TCP connections are extremely expensive to create.","Load Balancing","Referring to , TPUs , , ,  and more directly TPU routers ,  provide customers the ability to \u201cload balance\u201d their traffic across a set of end points also known as origin servers. Referring to , the load-balancing work flow  includes the following. TPU  receives a client request and processes it (). Next, it looks up the AND based on the hostname (), then retrieves the rule definition () and sends the request to the rule engine (). Next, the input variables are selected. Input variables include, the best path table (), path cost table (), external values such as time, weather, population () and location variables such as resolver, end points, visitor (). Finally, the output possibilities are determined. The output possibilities include other TPUs () and other customer configured end points ()","This process is very similar to the session grooming process. When traffic passes through the TPU, the router decides which origin server will process the visitor's requests. The load-balancing service of the present invention has the following advantages over the session grooming process. It is an active process, meaning that it happens every time a request is made to a TPU. This is different from the session grooming service, which happens when the host name is resolved. It doesn't have the time-to-live (ttl) issues that the session grooming service does. DNS requests are cached according to the time-to-live provided in the response, if the DNS resolver honors the ttl. Furthermore, when the TPU is handling traffic it is interacting directly with the visitor's IP address and therefore makes better decisions regarding access (\u201cKnown visitor IP Address\u201d). Contrary to that, in the session grooming service the decision is made based on the information of the visitor's DNS resolver, which may not be anywhere near the actual visitor.","Parallel Networking","Parallel Networking refers to the ability to send information to a single node over multiple nodes or channels. Referring to , traditional client\/server interactions work on a single node-to-node architecture where the client machine  opens up a network connection  with the server  and all communications between the client and server are sent along that single network connection . Network interactions that contain more than one hop repeat the node-to-node single network connection pattern. This model of communication has drawbacks which reduce the throughput of the communication between the client and server based on certain conditions. Listed below are conditions that will result in decreased performance:\n\n","The TPS's parallel networking minimizes the impact of traditional networking issues and substantially increases the throughput between two nodes. Referring to  and , the TPS places a set of nodes , , , , in the path of the client  and server  and this set of nodes can implement advanced networking optimization without changing either the client or server. A node within the TPS routing platform can be any machine or process that is designated to handle the TPS's router-to-router traffic or help with facilitating its operation. The TPS's routing platform has multiple nodes that have varying roles, such as timing nodes, request routing nodes, response nodes, or management nodes, among others. As shown in , responses from the exit router  are sent to a set of nodes , , , and not just the entry router . The set of nodes that are capable of receiving responses is called a \u201ccluster\u201d . The function of the cluster nodes is to receive messages from the routing nodes that need to be forwarded to the entry router  that originally received the request from the client . Each entry router has it's own cluster. The system also includes a response multiplexor  that is responsible for taking the responses from the origin server  and sending them to nodes , ,  within the entry router's  cluster table . The selection of nodes that belong to a cluster is based on a collection of metrics such as round-trip-time (RTT), geography, network hops between a router and other nodes in the system, among others. Timing nodes within the system calculate the round-trip-times between routers. If the RTT is less than the \u201ccluster-time-tolerance\u201d a node is placed in the router's cluster table. Periodically the RTTs are recalculated to determine if nodes are still suitably placed in the router's cluster table. Timing nodes do not need to be separated from the routers and timing information can come from either specific timing requests or response times of other request\/response times.","Nodes in the TPS routing system setup communication channels with each other. Each channel includes multiple transmission control protocol (TCP) and\/or user datagram protocol (UDP) socket connections. When a data packet is sent, the channel determines which of the connections within the channel to use based on throughput, availability, network conditions, among others. The TPS nodes communicate with a specific packet format that allows the TPS to add meta-data to both the incoming request from the client and responses from the origin server. Meta-data is added to allow nodes to understand specific node interactions. Examples of meta-data include a router's cluster nodes, packet version, encoding process, clients connection identified, sequence number and other useful information. The TPS's routing system has multiple packet structures that are specifically designed to send different types of data. A \u201crequest routing message\u201d structure indicates a message that is sent from one node to another node specifically to process a client's request. A \u201cnode management message\u201d structure indicates messages that are sent between nodes that update system level information, including updates to router state changes, time requests, cluster table changes, among others.","As mentioned above, the response multiplexor  is responsible for taking responses from the origin server  and sending the data to nodes within the entry router's cluster table . The entry router's cluster table is sent to the exit router  either as part of a \u201crequest routing message\u201d or a \u201cnode management message\u201d. The response multiplexor  applies different \u201ccluster node selection algorithms\u201d to choose the appropriate cluster node and socket connection within a channel to send the data to. The cluster node selection techniques include \u201cround-robin\u201d, \u201cchannel-bursting\u201d and \u201cbest node\u201d. \u201cRound-robin\u201d refers to sending data to each cluster node in the entry router's cluster table in order. Once all cluster nodes have had data sent to them, the process starts from the beginning of the table and repeats itself. \u201cChannel-bursting\u201d refers to sending \u201cN\u201d pieces of data to a cluster node in the entry router's cluster table, before moving to the next cluster node. Once all the nodes in the cluster table have had data sent to them, the process starts from the beginning of the table and repeats itself \u201cBest node\u201d refers to using meta-data about cluster nodes. The response multiplexor chooses the best node based on the provided meta-data and sends the data to it. In the following, the response multiplexor picks the best node again and again until all the data are sent. Meta-data that can be used to choose the \u201cbest node\u201d include throughput, system information, such as memory, CPU, Network Utilization and other information that is helpful for making the decision.","Because the entry router  receives messages from multiple sources (cluster nodes , ,  and client ), and over multiple network connections , , , , the data are no-longer guaranteed to be in the correct order. A response re-sequencer  handles the re-sequencing of the data, placing messages in the correct order before sending them to client .","End-to-End Parallel Networking Process","System Initialization:","The TPS routing system  starts up multiple router nodes , , , , which are dispersed geographically so that the latency between possible clients  and a router node is minimized, as well as the latency between the origin server  and a router node is minimized. Once the router nodes are operational, the TPS's timing system calibrates the latency and network conditions (i.e., number of hops, throughput capacity) between the router nodes, shown in . When the latency and network conditions information is determined, the TPS system creates a single \u201ccluster node metric\u201d that is compared against the \u201ccluster-node-tolerance\u201d value, shown in . Each router node for which the \u201ccluster node metric\u201d is less than the \u201ccluster-node-tolerance\u201d is added to the cluster node table. Periodically the timing system recalculates the \u201ccluster node metric\u201d and adjusts the cluster node table according to the \u201ccluster-node-tolerance\u201d.","Request Processing","Referring to , a client  looking to request resources from origin server  connects to entry router . The connection is made in the same manner as if the client was connecting directly to the origin server . In one example, the connection between client  and entry router  is an HTTP connection. Once, entry router  receives a client request, it choose one of the following two processes.\n\n","The choice of which exit router to forward the request to is done by calculating which router will be able to execute the request and send all response data to the entry router in the least amount time. This calculation takes into account the entry router to exit router latency, exit router to origin server latency, network conditions, throughput between nodes, system level statistics (i.e., memory, CPU, and network load) and other information that is determined to be helpful in making this decision.","Requests from the client  which are forwarded to the exit router  are encapsulated into a request forwarding message . This message  includes the original message from the client along with a client identifier, packet version, cluster table, sequence number, encoding process, and other useful information. When the exit router  receives the request forwarding message  it stores the meta-data  contained in the message so that it can be easily retrieved based on a response from the origin server . A network connection then is made to the origin server, if a network connection isn't already currently available. Whenever possible the router  reuses network connections to save time. Once the connection is established, the exit router  forwards the original message to the origin server .","Response Processing","Referring to , when the origin server  responds to the exit router  with data, the exit router  processes the data using its response multiplexor . Once the response multiplexor  receives data from the exit router , it retrieves the meta-data  contained in the request forwarding request. The entry router's cluster table is used to choose which nodes the response data will be sent to. If no cluster nodes are present, then all data will be sent directly to the entry router . The response multiplexor  chooses a \u201ccluster node selection algorithm\u201d that can achieve the highest throughput. For every packet of data that is received from the origin server the response multiplexor  chooses the best cluster node using the \u201ccluster node selection algorithm\u201d. Once the cluster node is chosen, the response multiplexor  encapsulates the origin server's response data into a response forwarding message  and sends the message to the chosen cluster node. The cluster node's channel may contain more than one socket connection, and therefore the system needs to pick the best suited connection to send the data through.","The response forwarding message  contains meta-data  to ensure that it can be forward to the entry router  that requested the data and that the origin server's response data  can be placed into a response packet in correct order. Meta-data  that is placed into the response packet include the entry router that requested the data, the client identifier, sequence number, encoding process and other meta-data that is needed to process the response data. Once a cluster node receives a response forwarding message from an exit router , it immediately relays the message to the entry router  based on the entry router meta-data  field in the response forwarding message .","Response Re-Sequencer","Referring to , response forwarding messages  received by the entry router  may be received out of order. This is due to the fact that the response messages  come from different cluster nodes  and from multiple socket connections within a channel. The entry router must ensure that the origin server's response data is placed into the correct sequence before sending it to the client. A response re-sequencer  performs this function. Re-sequencing of the data is done by looking at the incoming response forwarding message's sequence number meta-data and checking its sequence number that was last sent to the client. If the sequence number is one more than the last sequence number sent to the client, the origin server's response is immediately sent to the client. If the sequence number is not one more than the last sequence number, it is placed into an ordered queue of messages. The order of the queue is based on the sequence number. After the response forwarding message  is received that can be sent to the client, the response re-sequencer  looks at the message queue to see if the first message contained in the queue is one more than the last sequence number sent to the client, and if it is that message is sent to the client. This process continues until the all messages are sent.","Several embodiments of the present invention have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the invention. Accordingly, other embodiments are within the scope of the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0022","num":"0038"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0023","num":"0039"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0024","num":"0040"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0025","num":"0041"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0026","num":"0042"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0027","num":"0043"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0028","num":"0044"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0029","num":"0045"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0030","num":"0046"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0031","num":"0047"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0032","num":"0048"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0033","num":"0049"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0034","num":"0050"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0035","num":"0051"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0036","num":"0052"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0037","num":"0053"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0038","num":"0054"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0039","num":"0055"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0040","num":"0056"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0041","num":"0057"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0042","num":"0058"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0043","num":"0059"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0044","num":"0060"},"figref":"FIG. 23"}]},"DETDESC":[{},{}]}
