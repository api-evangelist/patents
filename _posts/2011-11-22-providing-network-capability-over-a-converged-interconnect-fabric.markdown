---
title: Providing network capability over a converged interconnect fabric
abstract: A subject disclosure is directed towards emulating a data network interface for operating an interconnect controller in accordance with a networking standard. The emulated data network interface provides address resolution data associated with a destination, within a converged interconnect fabric, for application data. The address resolution data identifies a communication path that is compatible with the interconnect controller. The application data conforms to the networking standard. The emulated data network interface instructs the interconnect controller to route the application data to the destination via the compatible communication path.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09231846&OS=09231846&RS=09231846
owner: Microsoft Technology Licensing, LLC
number: 09231846
owner_city: Redmond
owner_country: US
publication_date: 20111122
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","CONCLUSION"],"p":["Various implementations of interconnect technologies (e.g., an optical\/electrical interconnect technology) provide an interface that enables data communication between a computer and peripheral devices. The interconnect technologies may also enable the communication of data between computing devices (i.e., nodes) via cables\/connectors. Optical data communication, for example, is in general any form of telecommunication that uses light as a transmission medium. Light in general requires less energy than copper cables and produce less heat than electrical telecommunication.","INTEL\u00ae Thunderbolt\u2122 (which may be also known as Light Peak\u2122) and SEAMICRO\u00ae SM10000\u2122 represent types of a converged interconnect fabric technology that is connection-oriented and\/or bus protocol independent and may use electrical or optical cables. INTEL\u00ae Thunderbolt\u2122 is an interoperable standard that can deliver a bandwidth that exceeds Universal Serial Bus (USB) and Serial ATA and replace the multitudinous connector types (e.g., USB, FireWire, DVI, HDMI, DisplayPort) with a single connector. INTEL\u00ae Thunderbolt\u2122 chips interconnect two or more computing devices\/peripheral devices and transmit and receive information for both PCI Express\u2122 (PCIe) and DisplayPort\u2122 protocols. The INTEL\u00ae Thunderbolt\u2122 chip switches between the two protocols to support communications over a single electrical or optical cable. Because certain interconnect technologies, such as INTEL\u00ae Thunderbolt\u2122, have not been accepted by a significant number of computer\/peripheral device manufacturers that rely on USB or application software developers that rely on existing networking standards, an average consumer may have to wait several years before taking advantage of such a technology.","This Summary is provided to introduce a selection of representative concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used in any way that would limit the scope of the claimed subject matter.","Briefly, various aspects of the subject matter described herein are directed towards enabling a local area network over a converged interconnect fabric by emulating a data network interface that is interoperable with the converged interconnect fabric. In one aspect, the converged interconnect fabric includes a plurality of optical interconnects that employ nanostructure reflectors and\/or a plurality of electrical interconnects. The data network interface may include a software implementation of a networking standard that controls networking hardware components, such as a switch, which comply with the converged interconnect fabric. The network hardware components may also include an interconnect controller and a bus protocol device. In one aspect, the data network interface may provide address resolution data associated with a destination, within the converged interconnect fabric, for application data. The data network interface uses the interconnect controller to route the application data to the destination based on the address resolution data.","In another aspect, the software implementation of the networking standard may include a kernel mode component and a user mode component that cooperate to provide an intermediate driver that implements an data communication protocol for a native miniport driver associated with the networking hardware components. In another aspect, the intermediate driver also provides a miniport to overlaying protocol drivers in a protocol stack. For example, the overlaying protocol drivers may attempt to request host configuration data using a Dynamic Host Configuration Protocol (DHCP) message. The intermediate driver redirects the message to a root node within the converged interconnect fabric, which replies with a network address associated with the data network interface.","In one aspect, the kernel mode component may intercept requests for the address resolution data associated with the destination with the user mode component redirecting the requests to a root node via the interconnect controller. In one aspect, an orchestrator running on the root node responds with a mapping between a network address and a physical address associated with a data network interface of the destination. The kernel mode component may store a communication path to the destination that is represented as one or more topology identifiers and the destination physical address. The kernel mode component may instruct the interconnect controller to communicate the application data to the destination via the communication path along the converged interconnect fabric (e.g., an optical or electric communication path).","Other advantages may become apparent from the following detailed description when taken in conjunction with the drawings.","Various aspects of the technology described herein are generally directed towards providing a communication network in accordance with a networking standard. In one example implementation, the communication network may be a local area (Ethernet) network over a converged interconnect fabric. A native networking standard for the local area network may be the same networking standard associated with the converged interconnect fabric or may be a completely different networking standard. Each node of the communication network may include one or more emulated data network interfaces that are interoperable with an interconnect controller for communicating application data, which conforms to the native networking standard, through the converged interconnect fabric. An example emulated data network interface may provide an Ethernet network capability over non-Ethernet networking components (e.g., optical interconnects).","In one example implementation, each emulated data network interface may comprise an abstraction of a data communication protocol that conforms to the native networking standard and one or more networking hardware components, such as a switch for coupling with one or more electrical or optical interconnects and\/or an optical or electrical interconnect controller for the converged interconnect fabric. It is appreciated that the term \u201cdata network interface\u201d may be used interchangeably with other terms having similar or equivalent meanings, such as network interface controller, network adapter and\/or the like. Any of these terms may be used throughout the present specification.","It should be understood that any of the examples herein are non-limiting. As such, the present invention is not limited to any particular embodiments, aspects, concepts, structures, functionalities or examples described herein. Rather, any of the embodiments, aspects, concepts, structures, functionalities or examples described herein are non-limiting, and the present invention may be used various ways that provide benefits and advantages in computing, networking and electrical\/optical communications in general.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 1","FIG. 1"],"b":["102","104","106","106","106","106"],"sub":["1 ","N"]},"The plurality of nodes  may form at least a portion of a network , which may be a type of communication network, such as a local area network over a converged interconnect fabric. The converged interconnect fabric may integrate all communication (e.g., inter-process\/cluster communications, network traffic, storage input\/output and\/or the like) into a single fabric of common interconnects over which a consolidated set of computing, storage and networking capabilities may be provided. According to one example implementation, the converged interconnect fabric may be deployed in a data center environment to enhance communications for a collection of blade servers. The network  may communicate data between the plurality of nodes  and\/or with external computing devices, such as nodes of another network, via a connection-oriented interconnect technology (e.g., INTEL\u00ae Thunderbolt\u2122 (which may be also known as Light Peak\u2122) and\/or the like).","The interconnect technology may be protocol-independent and, hence, may be compatible with any type of serial or parallel bus protocol (e.g., Universal Serial Bus (USB), PCI Express\u2122 (PCIe), DisplayPort\u2122) and\/or the like). The interconnect technology may utilize hardware\/software implementations of these protocols to perform data input\/output operations. Alternatively, the interconnect technology may incorporate a proprietary bus protocol for point-to-point data communications. In one example implementation, the network  may include an electrical or optical communication network between two or more of the plurality of nodes , which generally refers to any form of a telecommunication network that uses copper or light, respectively, as a transmission medium.","Each of the plurality of nodes  may be logically connected to the orchestrator , which enables a data network (e.g., TCP\/IP over Ethernet) over the interconnect technology as described herein. The orchestrator  may include software code that is executed on another node as a software module, which may be referred to as a root node, within the network . The connection manager  may also communicate with the orchestrator  via a logical connection. The connection manager  may also be a software module that runs on the root node or may run on a computing device that is located outside of the network and configured to manage the plurality of nodes .","As described herein, the connection manager  controls various interconnect technology mechanisms (e.g., firmware, drivers, hardware controllers, switches and\/or the like) for discovering a bus topology and establishing (logical) communication paths within the network . In conjunction with these mechanisms, the connection manager  enumerates each data network interface and builds a topology graph in which a topology identifier (e.g., TopologyID), which may be a unique identifier within the network , is assigned to each data network interface within each of the nodes  according to one example implementation. Hence, an example node comprising multiple data network interfaces may have multiple topology identifiers. Each identifier may be valid for a limited time period, such as the duration between topology enumerations. The connection manager  may be notified of topology changes resulting from certain events (e.g., plug\/unplug events, power on\/power off nodes and\/or the like) and modify the topology identifier assignment within the network  in response.","During an initial enumeration, the connection manager  configures the (logical) communication paths between the plurality of nodes . After the initial enumeration, the connection manager  may reconfigure the communication paths between the plurality of nodes  based on specific network traffic patterns. The connection manager  may assign an identifier to each communication path that is accessible from a particular node. Hence, the particular node corresponds with a set of local communication path identifiers in which each path identifier represents a number of data network interfaces between a source and a destination data network interface, inclusively. With respect to implementations comprising multiple communication networks that may be interconnected arbitrarily, multiple connection managers  in adjacent networks utilize primitives to configure inter-network communication paths.","In one example implementation, the network  may be a local area network over a plurality of electrical or optical interconnects between various pairs of the plurality of nodes . Each interconnect may include an optical or electrical cable connecting two data network interfaces (adapters) at each port (e.g., mini port). The cable may be manufactured using one or more electrical conductors or optical fibers. The data network interface port may be configured to form a coupling with a cable connector such that the optical cable is communicably connected to a converged interconnect fabric technology hardware component, such as a switch (e.g., a non-blocking switch).","An example data network interface may include a software implementation of a data communication protocol (e.g., a data link layer protocol, such as a media access control sub-layer protocol) in accordance with a particular networking standard (e.g., Ethernet). According to such an implementation, for higher level protocols, the data communication protocol emulates functionality that conforms to the particular networking standard and enables interoperability with the converged interconnect fabric technology. The example data network interface may also include a hardware implementation (e.g., a Network Interface Card (NIC)) of the converged interconnect fabric technology and\/or the bus protocol.","In one example implementation, the data network interfaces use physical addresses (e.g., data link layer address in a protocol stack, topology identifiers in an optical or electrical communication network and\/or the like) and path identifiers to route data along a corresponding communication path that may include one or more interconnects. For example, the corresponding communication path (e.g., data link layer communication path) may include two or more interconnects that define a chain through which one data network interface communicates with the destination data network interface via one or more intermediary data network interfaces (e.g., hops). When routing data along such a communication path, each interconnect transports the data to an intermediary data network interface, which relays the data to a next intermediary data network interface or ultimately the destination data network interface.","In addition to the communication path configuration, the connection manager  may assign Internet Protocol (IP) addresses to the plurality of nodes . For example, the connection manager  may implement a dynamic host configuration protocol (DHCP) server. Because the data network interfaces initially lack a globally unique identifier, the connection manager  determines the IP addresses based on a globally unique identifier for each of the nodes  (e.g., host name) and the locally unique identifier for each data network interface.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 2","b":["202","204","206","202","204"]},"In one example implementation, the root node  includes various example components, such as the connection manager , the orchestrator  and network configuration information . The root node  may also include one or more interconnect technology-compliant networking components, such as a switch , through which data is communicated to the host node  along the native communication path . In conformity with the interconnect technology, the connection manager  may provision the native communication path  between the switch  and a complementary switch on the host node , such as a switch . In one example implementation, the native communication path  may be represented by one or more topology identifiers that correspond to one or more interconnects that couple the switch  and the switch .","Initially, the connection manager  may pre-configure the root node  with one or more addresses that enable a computing device, such as the host node , to locate and communicate with the root node . The connection manager  and\/or the orchestrator  may provide the one or more addresses to the host node  as well as other host nodes within the communication network. The one or more addresses may correspond with layers of a protocol stack (e.g., Open Systems Interconnection (OSI) Reference networking model), such as a data link layer and a network layer. For example, the root node  may be pre-configured with a physical address and a network address that are associated with the data link layer protocol and the network layer protocol, respectively.","As described herein, the connection manager  and the orchestrator  may produce the network configuration information  as a description of an underlying network topology. In one example implementation, the network configuration information  may include a mapping between a locally unique identifier and one or more addresses for each switch in the communication network. For example, the connection manager  and the orchestrator  may assign a network topology identifier (e.g., a TopologyID) and a physical or hardware address (e.g., a MAC address), respectively, to the switch  in combination with an assignment of a network address (e.g., an IP address), which are stored in the network configuration information  and communicated in whole or in part to the host node  and other host nodes.","When another host node desires to communicate data to the host node , some of these addresses may be used to identify and locate the host node  within the communication network. In one example implementation, the network configuration information  may map a physical address of the host node  and\/or a physical address of a source host node to a unique path identifier (e.g., a HopID) that refers to a logical connection from the source host node to the (destination) host node . As described herein, the unique path identifier may represent a communication path that is compatible or native to the interconnect controller . Based on the unique path identifier, the interconnect controller  identifies an appropriate switch port to communicate the application data , such as an Ethernet frame, to ensure delivery at the host node . The application data  may reach an intermediary host node that routes such data to a next node along the compatible communication path.","The host node  includes various example components, such as an emulation mechanism , host configuration data , application data , an interconnect controller  and address resolution data . In one example implementation, the emulation mechanism  may implement a data communication protocol (driver) in accordance with a networking standard (e.g., Ethernet) and interoperable with the interconnect controller . The emulation mechanism  may provide higher layer protocols with various data network interface services that behave in conformity with the networking standard. To perform these services, the emulation mechanism  may call device driver functions associated with the interconnect controller  in order to communicate the application data  to a destination (node). For example, the emulation mechanism  may transform TCP\/IP data sequences (e.g., packets) into Ethernet-formatted frames that are capable of being transmitted on a communication path by the interconnect controller .","The emulation mechanism  may store a physical address and a network address associated with the host node  in the host configuration data . The emulation mechanism  may also store a physical address and a network address associated with other host nodes including the root node  in the address resolution data . In one example implementation, the emulation mechanism  may also store a set of (path) identifiers for one or more accessible communication paths between the host node  and the other host nodes. Each identifier may be translated by the interconnect controller  into a set of interconnects that define a compatible communication path to the destination. Optionally, the address resolution data  may also include a topology identifier (e.g., a TopologyID) for each intermediary switch between the host node  and the destination as well as the destination itself.","The emulation mechanism  may include various example components, such as a kernel mode (driver) component and a user mode (service) component, which execute the data communication protocol operations. In one example implementation, the kernel mode component and the user mode component may coordinate requests for the host configuration data  (e.g., Dynamic Host Configuration Protocol (DHCP) requests) to the root node . In another example implementation, the kernel mode component and the user mode component may coordinate requests for the address resolution data  (e.g., Address Resolution Protocol (ARP) requests) to the root node .","In one example implementation, the emulation mechanism  and the orchestrator  may coordinate multicasting and\/or broadcasting services on top of a connection-oriented interconnect technology. For example, when the emulation mechanism  receives a request for the address resolution data  associated with a destination class D IP address for a multicast packet, the emulation mechanism  may communicate the request to the orchestrator . The orchestrator  responds with a MAC address associated with the switch  and a HopID path identifier associated with the native communication path . As a result, the address resolution data  includes the MAC address and the HopID path identifier as the appropriate destination physical address and appropriate logical connection, respectively, for the multicast packet and\/or the broadcast packet.","Upon receiving the multicast packet, the orchestrator  references a multicast group membership table within the network configuration information , identifies one or more member nodes associated with the destination class D IP address and generates a list comprising each member IP address. The orchestrator  determines whether any member node is outside of a subnet based on past participations with the corresponding multicast group. If there are any such nodes, the orchestrator  adds each associated gateway mechanism IP address to the list. For each IP address in the list, the orchestrator  creates a copy of the multicast packet and communicates the copy to the corresponding member node. According to one example implementation, the orchestrator  may resolve each IP address to a physical address and a communication path identifier for the corresponding member node.","With respect to implementations associated with receiving the broadcast packet, the orchestrator  identifies each host node with a same subnet as the host node  and creates a list comprising each IP address of other host nodes within the subnet. The orchestrator  excludes any host node outside of the subnet from such a list. The orchestrator  creates a copy of the broadcast pack and communicates the copy to each host node. In one example implementation, the orchestrator  may resolve each IP address to a physical address and a path identifier associated with another subnet host node.","The interconnect controller  is in general a building block for creating interconnect technology networking components, such as the switch  and the switch . In one example implementation, these switches may be high-performance, unblocking crossbar (bus) protocol switches. The interconnect controller  may be a chip that provides protocol-switching capabilities such that multiple protocols (e.g., DisplayPort and PCI Express) may be run over a single cable (e.g., an electrical or optical cable). In addition to one or more ports for a switch, the interconnect controller  includes one or more bus protocol adapter ports. External interfaces of the interconnect controller  may provide functionality to a specific application.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 3","FIG. 2"],"b":["302","302","304","306","214"]},"In one example implementation, the kernel mode component  may function as a data link layer protocol configured to perform various services, which may include transferring data between nodes in a network (i.e., a communication network), such as a local area network over a converged interconnect fabric. For example, the kernel mode component  may utilize a native miniport driver  associated with a interconnect technology device, which includes various networking hardware components, such as a switch, one or more transceivers, one or more bus protocol modules and\/or the like. The various networking hardware components may implement a physical layer within the protocol stack , which manages reception and transmission of an unstructured raw bit stream over a physical medium (e.g., electrical conductors or optical fibers) to which the interconnect technology device is attached.","In one example implementation, the kernel mode component  may abstract vendor-specific functionality that is provided by the native miniport driver  for the various networking hardware components. Such an abstraction may ensure that the kernel mode component  may be able to emulate a data network interface using networking hardware components from different hardware vendors. In addition, the kernel mode component  may abstract the hardware vendor-specific functionality from a connection manager, such as the connection manager  of . The kernel mode component  may also use the native miniport driver  to control the various hardware components for the purpose of communicating application data to a destination (node).","In addition to transferring the application data, the kernel mode component  may provide host configuration services and\/or address resolution services. The user mode component  may support these services by communicating host configuration requests and\/or address resolution requests to an orchestrator running on a root node (e.g., the root node  of ). For example, the kernel mode component  may intercept such requests from upper layer protocol drivers, such as a network layer protocol  and a transport layer protocol , and may redirect the requests to the user mode component , which modifies the requests in order to be communicated to the root node. Address information provided by the root node in response to these requests may be stored in the host configuration data  and\/or the address resolution data .","In one example implementation, the kernel mode component  intercepts an Address Resolution Protocol (ARP) request associated with the destination and redirects the request to the user mode component , which inserts a network address and a physical address associated with the root node into destination address fields. The purpose of the ARP request may be to determine a physical address (e.g., a data link layer protocol address, such as a MAC address) of the destination that maps to a known network address (e.g., a network layer protocol address, such as an IP address). When the root node responds with the physical address, the user mode component  stores the physical address associated with the destination in the address resolution data  and the kernel mode component  proceeds to route the application data. If another set of application data is to be communicated to the destination in the future, the network layer protocol  may reference the address resolution data  in order to resolve the known network address to the appropriate physical address. In such an implementation, the address resolution data  functions as a cache for known physical addresses of other host nodes.","In another example implementation, the kernel mode component  intercepts a Dynamic Host Configuration Protocol (DHCP) request and redirects the request to the user mode component , which inserts a network address and a physical address associated with the root node  into the destination address fields. The purpose of the DHCP request is to ascertain an appropriate and unique network address for the host node . When the root node  responds with the network address, the user mode component  stores the network address associated with the host node  in the host configuration data .","The DHCP is in general a network configuration protocol for host nodes on a local area network, such as an Internet Protocol (IP) network. In order to communicate with other host nodes, a source host node is to be configured with a unique network address. The host node may also be configured with a physical address. The root node implements the DHCP and provides a central database of network configuration information to prevent duplicate network address assignments. The root node may also provide addition network configuration information, such as a network topology identifier. Alternatively, an external server residing outside of the local area network implements the DHCP and assigns the network addresses (i.e., IP addresses) to the host nodes. Such a server maps the network address to physical addresses (i.e., MAC addresses) that may be assigned by the root node or assigned statically. Furthermore, a gateway mechanism for the local area network may function as a DHCP proxy and relay DHCP requests up to the external server.","In yet another example implementation, the kernel mode component  may perform multicasting and\/or broadcasting services on top of a connection-oriented interconnect technology. For example, when the kernel mode component  receives a request (e.g., an ARP request) to resolve a class D IP address, which includes any IP address having a first byte value that ranges from 224 to 247, the kernel mode component  may redirect the request to the user mode component , which queries the orchestrator running on the root node. The class D IP address may refer to a destination of a multicast packet. Instead of responding with a specific MAC address for the class D IP address, the orchestrator provides a MAC address associated with a switch attached to the root node. As a result, the network layer protocol  resolves the class D IP address to the orchestrator MAC address and the kernel mode component  communicates the multicast packet to the orchestrator.","Upon receiving the multicast packet, the orchestrator references a multicast group membership table to identify one or more member nodes of the corresponding multicast group and generates a list comprising each member IP address. The orchestrator determines whether any member node is outside of a subnet based on past participations with the corresponding multicast group. If there are any such nodes, the orchestrator adds each associated gateway mechanism IP address to the list. For each IP address in the list, the orchestrator creates a copy of the multicast packet and communicates the copy to the IP address. With respect to a broadcast packet, the orchestrator creates another list comprising each IP address of the host nodes within the subnet and communicates a copy of the broadcast packet to each host node.","In one example implementation, the native miniport driver  (e.g., a Media Access Controller (MAC) device driver) wraps a hardware implementation of various portions of the data link layer and\/or the physical layer of the protocol stack  such that the interconnect technology devices may be accessed using a common API, such as the Network Driver Interface Specification (NDIS) . The NDIS  may in general define a standard application programming interface (API) for networking devices (e.g., Network Interface Cards (NICs)). The NDIS  provides services to simplify development and maintenance of the native miniport driver  and protocol drivers for upper layers of the protocol stack . Furthermore, the native miniport driver , the kernel mode component  and the network protocol layer  may be bound together through the NDIS .","The network layer protocol  may be configured to perform application data packet delivery, which may include routing data packets through intermediate nodes, whereas the data link layer protocol performs media access control, physical addressing, flow control and\/or error checking. The network layer protocol  may implement various methods of transferring variable length data sequences via the network to the destination. The network layer protocol , for instance, may include a group of internetworking methods in the Internet Protocol Suite, which may be known as TCP\/IP, for transporting data packets network boundaries, if necessary, to the destination specified by a network address (e.g., an IP address as defined by an Internet Protocol (IP)). The transport layer protocol  may provide end-to-end communication services for sockets  and an application  within a layered architecture of the protocol stack . The transport layer protocol  provides various services, such as connection-oriented data stream support, reliability, flow control, and multiplexing.","In one example implementation, the kernel mode component  may be a NDIS intermediate driver (e.g., a NDIS filter intermediate driver) that is layered on top of the native miniport driver  (e.g., a third party interconnect technology miniport driver). The kernel mode component  and the user mode component  may emulate an Ethernet Network Interface Controller (NIC), which provides overlaying protocol drivers with a data network interface for connecting a host node to an Ethernet network. The Ethernet in general refers to a networking standard (e.g., Institute of Electrical and Electronic Engineers (IEEE) 802.3) for Local Area Networks (LAN), which may be used for connecting close-proximity computing devices together in order to share resources. In one example implementation, the kernel mode component  may expose an Ethernet miniport (e.g., NDISMedium IEEE 802.3 networking standard miniport) to the overlaying protocol drivers in the protocol stack , which may use the Ethernet miniport to communicate Ethernet frames to the destination node. To the native miniport driver , the kernel mode component  may also expose the data communication protocol for consuming the Ethernet frames.","Because the NDIS intermediate driver operates in between one or more overlying protocol drivers and the native miniport driver , the kernel mode component  may communicate with both the overlying protocol drivers and the native miniport driver  in order to expose protocol entry points and miniport driver entry points, respectively. The NDIS  calls functions at the protocol entry points on the kernel mode component  to communicate requests from the native miniport driver . The NDIS  calls miniport functions at the miniport driver entry points on the kernel mode component  to communicate the requests of one or more overlaying protocol drivers. As a result, the kernel mode component  may be presented as a protocol driver to the native miniport driver  and as a miniport driver to the overlying protocol drivers.","In one example implementation, the kernel mode component  exposes one virtual miniport for each underlying miniport driver that may be bound to the kernel mode component , such as the native miniport driver . The kernel mode component  exports one or more virtual miniports (i.e., adapters) to which the overlaying protocol drivers may bind. To each overlaying protocol driver, the virtual miniport appears to be a physical data network interface that controls the networking hardware components of the interconnect technology device.","When the virtual miniport receives data packets, the kernel mode component  forwards the data packets down to the native miniport driver  as Ethernet frames. The kernel mode component  may also include a NDIS filter intermediate driver or a NDIS filter driver that modifies the data packets before sending them to the native miniport driver . For example, the kernel mode component  may encrypt and compress the payloads within the data packets. NDIS filter drivers in general may monitor and modify the interaction between the overlying protocol drivers and the native miniport driver .","The kernel mode component  may expose an MTU (Maximum Transmission Unit) size, such as four thousand ninety-six (4096 or 4K bytes), which may be a largest possible (Ethernet) payload frame size that may be fragmented (at a source host node) and reassembled (at a destination host node) by an interconnect controller. The interconnect technology medium may support a maximum of 256 byte payload sizes, but may perform fragmentation and reassembly such that the upper layers of the protocol stack  may essentially operate at the 4 KB payload size. Alternatively, the kernel model component  may expose 256 bytes as the MTU size and let the protocol stack  perform the fragmentation and reassembly of the frames (e.g., Ethernet frames).",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 4","b":["402","404","406","408","404","404"]},"In one example implementation, the local area network  may be a communication network in which one of the plurality of nodes  may be a root node comprising the connection manager  and the orchestrator . For instance, the plurality of nodes  may include computing devices (e.g., servers) that are arranged into a rack mounted computing system for which the orchestrator  maintains a consistent set of network configuration information. In one implementation, the converged interconnect fabric  may be configured to integrate computing, storage and networking services for linked nodes within a data center environment, such as the rack mounted computing system.","In one example implementation, each interconnect within the converged interconnect fabric  may include a cable connecting a pair of the plurality of data network interfaces , such as the data network interface and the data network interface . The cable may be manufactured using one or more electrical conductors or optical fibers. Ports associated with the plurality of data network interfaces  may be configured to form couplings with cable connectors such that the cable may be communicably connected to a networking hardware component, such as a non-blocking switch.","An example interconnect  may couple to a physical switch  to which a native miniport driver (e.g., the native miniport driver  of ) controls access. The emulation mechanism  may function as a data communication protocol (driver) to the native miniport driver. As described herein, a combination of the physical switch , the native miniport driver and the kernel mode component  of the emulation mechanism  may be abstracted to present the data network interface as a first emulated data network interface or network interface controller (NIC) to overlaying protocol drivers of a protocol stack. For example, the kernel mode component  may present the data network interface as a hardware driver\/object, such as a (virtual) miniport.","Within the node , the data network interface and\/or the data network interface may be virtual data network interfaces according to another example implementation. Similar to the data network interface , an emulated data network interface  may be implemented using a physical switch and the kernel mode component  and by abstracting hardware vendor-specific functionality that is provided by the native miniport driver. Such an abstraction may ensure that the emulated data network interface  is interoperable with networking hardware components from different interconnect technology hardware vendors. Alternatively, the emulation mechanism  may abstract the hardware vendor-specific functionality from a connection manager, such as the connection manager  of .","A virtualization manager (e.g., Microsoft\u00ae Hyper-V) running within the node may unbind the host operating system's protocol stack (e.g., TCP\/IP stack) from the physical switch and bind the protocol stack to a virtual switch, the native miniport driver and the kernel mode component  of the emulated data network interface . The virtual switch may be used to regulate data communications with respect to the data network interface and\/or the data network interface .","The virtualization manager may partition the physical switch and provision data network interface and\/or the data network interface as virtual data network interfaces (e.g., virtual NICs) of which each may include a virtual version of the native miniport driver and emulation mechanism . The data network interface , for instance, may provide a virtual machine with a virtual protocol stack, which includes an Ethernet-compliant data communication protocol that is interoperable with a virtual version of the native miniport driver. The virtual machine may request a host configuration from the orchestrator , which assign a network address and\/or a physical address to the data network interface . When the virtual machine communicates data to a destination, the data network interface transfers the data to the virtual switch using a Virtual Network Switch Protocol. The virtual switch receives the data and uses a miniport exposed by the emulated data network interface  to route the data to the destination via the native miniport driver and the physical switch.","Optionally, the emulation mechanism  may enable a Single Root Input\/Output Virtualization (SR-IOV) feature and\/or a Virtual Machine Queue (VMQ) feature for the virtual switch. With respect to the VMQ feature, the physical switch classifies received packets using the destination media access control (MAC) address and routes the packets to different receive queues according to one example implementation. The connection manager  may configure a separate path and assign a different path identifier (e.g., HopIDs) for each virtual data network interface. The physical switch may also support other VMQ networking hardware requirements, such as scatter and gather I\/O operations. Each receive queue\/transmit queue pair may represent a single virtual switch port and\/or may be processed by a dedicated processor. As an alternative, each receive queue\/transmit queue pair may represent a specific communication path or grouping of communication paths for a particular virtual data network interface. Multiple packets in the receive queue may be transferred directly to a virtual machine in one function call. For example, the emulation mechanism  may transfer the packets directly to the virtual machine's shared memory.","With respect to the SR-IOV feature, the emulated data network interface  includes a PCIe device\/interface that exposes physical functions and virtual functions through the native miniport driver. The emulation mechanism  may partition the emulated data network interface  such that the PCIe device is presented to the host operating system or the virtualization manager as multiple separate physical PCIe devices. For example, a four-port SR-IOV network interface controller may be partitioned into four devices in which each is assigned a single port. Each of these devices may, for example, be further partitioned into two-hundred and fifty-six single port NICs (virtual functions) for a theoretical total of 1,024 single NIC ports. In one example implementation, a set of path identifiers associated with a certain destination physical address may be partitioned into groupings such that each grouping may be accessed as a separate PCIe device from different virtual machines or physical machines.","The converged interconnect fabric  may provide connection-oriented communication in which each associated endpoint data network interface may use a protocol to establish an end-to-end logical or physical connection before any data may be sent. For example, an example pair of data network interfaces may utilize a PCIe device to create a point-to-point communication channel between two PCIe ports, which allows both data network interfaces to send\/receive ordinary PCI-requests (e.g., configuration read\/write, I\/O read\/write, memory read\/write) and PCI-interrupts (e.g., INTx, MSI, MSI-X).","In one example implementation, the plurality of data network interfaces  use physical addresses (e.g., data link layer address, such as a MAC address) and path identifiers to route data along a communication path that may include one or more interconnects of the converged interconnect fabric . For example, two or more interconnects may be a chain together and enable one endpoint data network interface to communicate with another data network interface via one or more intermediary data network interfaces (e.g., hops). When routing data along the communication path, each interconnect transports the data to an intermediary data network interface, which relays the data to a next intermediary data network interface or ultimately the other data network interface.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 4","b":["404","404","404","404","404","410","404","404","416","404","404","404","418","404","420","404","404"],"sub":["3 ","11","3 ","4 ","11","3 ","5","5 ","6","9 ","9 ","11","3 "]},"Starting from each data network interface at a root node of the plurality of nodes , the connection manager  enumerates each of the data network interfaces  in the example configuration and builds a topology graph. The connection manager  may notified of topology changes caused by hot-plug and hot-unplug events. After an initial enumeration, the connection manager  configures communication paths to enable data transmission between the plurality of data network interfaces .",{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 5","b":["502","504","104","104"]},"Step  is directed to configuring a data network interface on the host node. In one example implementation, the orchestrator  communicates a physical address to the host node, which stores these addresses in host configuration information. In another example implementation, the orchestrator  communicates a message indicating a physical address assignment to each host node, which facilitates a binding process between the kernel mode component  and overlaying protocol drivers. If a host node does not acknowledge the receipt of the message, the orchestrator  resends the message at a later point in time. Alternatively, the orchestrator  may instruct the connection manager  to program a serial number register with a lower portion of a MAC address assigned to the host node, which may be combined with a predefined MAC prefix to form a locally unique 48-bit MAC address. As another alternative, the physical address for the host node may be derived from a native, unique identifier provided by the interconnect technology.","Once the orchestrator configures a particular host node with the physical address, the particular host node may request a network address to complete the host configuration process. In one example implementation, the emulation mechanism  communicates a DHCP request to which the orchestrator replies with the network address, such as an IP address. The emulation mechanism  may store the network address in the host configuration data and proceed to handling ARP requests, providing multicast\/broadcast services and\/or communicating application data.","Step  refers to a determination as to whether one or more current packets include a multicast request, a broadcast request or an ARP request. If the orchestrator  received the broadcast request, step  proceeds to step  at which the orchestrator  accesses network configuration information and delineates IP addresses for each host node within a same subnet as a source node of the broadcast request. The orchestrator  replies to the broadcast request with an IP address associated with the root node such that subsequent broadcast packets arrive at the root node. Step  is directed to communicating a copy of the subsequent broadcast packets to each host node with the subnet. Accordingly, the orchestrator  may function as proxy or a gateway for broadcasting the application data to these host nodes.","If the orchestrator  received the ARP request, step  proceeds to step  at which the orchestrator  extracts the network address from the ARP request and uses the network configuration information to access a mapping between the network address and a physical address associated with a destination host node. In one example implementation, the orchestrator  also identifies a mapping between a communication path identifier and the physical addresses of the destination node and the host node. Step  is directed to communicating the physical address of the destination node and the communication path identifier to the host node in response to the ARP request.","If the orchestrator  received the multicast request, step  proceeds to step  at which the orchestrator  uses the network configuration information to access a multicast group membership associated with the multicast request and enumerate IP addresses for each host node within the multicast group membership. The orchestrator  replies to the multicast request with the IP address associated with the root node such that subsequent multicast packets arrive at the root node. Step  is directed to communicating a copy of the subsequent multicast packets to each host node with the subnet. If a particular host node is located outside of the same subnet as the source node, the orchestrator  uses a gateway mechanism IP address to route the multicast packets.","Step  is directed to determining whether there are more requests from host nodes within the network. If there are more requests, step  returns to step . If there are no more requests, step  proceeds to step . Step  represents terminating the steps described in .",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 6","b":["602","604","214","214","104"]},"Step  is directed to intercepting and redirecting a host configuration data request. In one example implementation, overlaying protocol layer drivers desire a network layer protocol address to communicate application data to another node in a manner that complies with a networking standard, such as Ethernet. The orchestrator  may replay with a locally unique network layer protocol address assignment. Step  is directed to processing the network layer protocol address (i.e., a network address), which is stored in the host configuration data.","Step  represents receiving the application data to be communicated to a destination node. Step  determines whether a physical address that resolves to the network layer protocol address for the destination node is stored in a cache (e.g., an ARP cache). If the physical address is not stored in the cache, step  proceeds to step . Step  is directed to intercepting and redirecting an address resolution data request to the orchestrator . Step  is directed to storing the physical address and\/or a path identifier in the address resolution data. The path identifier may refer to one or more intermediary data network interfaces along a communication path to the destination node. If the physical address is not stored in the cache, step  proceeds to step . Step  refers to instructing an interconnect controller to route application data frames (e.g., Ethernet frames) to the destination node via the communication path. Step  refers to a termination of the steps described in .","Example Networked and Distributed Environments","One of ordinary skill in the art can appreciate that the various embodiments and methods described herein can be implemented in connection with any computer or other client or server device, which can be deployed as part of a computer network or in a distributed computing environment, and can be connected to any kind of data store or stores. In this regard, the various embodiments described herein can be implemented in any computer system or environment having any number of memory or storage units, and any number of applications and processes occurring across any number of storage units. This includes, but is not limited to, an environment with server computers and client computers deployed in a network environment or a distributed computing environment, having remote or local storage.","Distributed computing provides sharing of computer resources and services by communicative exchange among computing devices and systems. These resources and services include the exchange of information, cache storage and disk storage for objects, such as files. These resources and services also include the sharing of processing power across multiple processing units for load balancing, expansion of resources, specialization of processing, and the like. Distributed computing takes advantage of network connectivity, allowing clients to leverage their collective power to benefit the entire enterprise. In this regard, a variety of devices may have applications, objects or resources that may participate in the resource management mechanisms as described for various embodiments of the subject disclosure.",{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 7","b":["710","712","720","722","724","726","728","730","732","734","736","738","710","712","720","722","724","726","728"]},"Each computing object , , etc. and computing objects or devices , , , , , etc. can communicate with one or more other computing objects , , etc. and computing objects or devices , , , , , etc. by way of the communications network , either directly or indirectly. Even though illustrated as a single element in , communications network  may comprise other computing objects and computing devices that provide services to the system of , and\/or may represent multiple interconnected networks, which are not shown. Each computing object , , etc. or computing object or device , , , , , etc. can also contain an application, such as applications , , , , , that might make use of an API, or other object, software, firmware and\/or hardware, suitable for communication with or implementation of the application provided in accordance with various embodiments of the subject disclosure.","There are a variety of systems, components, and network configurations that support distributed computing environments. For example, computing systems can be connected together by wired or wireless systems, by local networks or widely distributed networks. Currently, many networks are coupled to the Internet, which provides an infrastructure for widely distributed computing and encompasses many different networks, though any network infrastructure can be used for example communications made incident to the systems as described in various embodiments.","Thus, a host of network topologies and network infrastructures, such as client\/server, peer-to-peer, or hybrid architectures, can be utilized. The \u201cclient\u201d is a member of a class or group that uses the services of another class or group to which it is not related. A client can be a process, e.g., roughly a set of instructions or tasks, that requests a service provided by another program or process. The client process utilizes the requested service without having to \u201cknow\u201d any working details about the other program or the service itself.","In a client\/server architecture, particularly a networked system, a client is usually a computer that accesses shared network resources provided by another computer, e.g., a server. In the illustration of , as a non-limiting example, computing objects or devices , , , , , etc. can be thought of as clients and computing objects , , etc. can be thought of as servers where computing objects , , etc., acting as servers provide data services, such as receiving data from client computing objects or devices , , , , , etc., storing of data, processing of data, transmitting data to client computing objects or devices , , , , , etc., although any computer can be considered a client, a server, or both, depending on the circumstances.","A server is typically a remote computer system accessible over a remote or local network, such as the Internet or wireless network infrastructures. The client process may be active in a first computer system, and the server process may be active in a second computer system, communicating with one another over a communications medium, thus providing distributed functionality and allowing multiple clients to take advantage of the information-gathering capabilities of the server.","In a network environment in which the communications network  or bus is the Internet, for example, the computing objects , , etc. can be Web servers with which other computing objects or devices , , , , , etc. communicate via any of a number of known protocols, such as the hypertext transfer protocol (HTTP). Computing objects , , etc. acting as servers may also serve as clients, e.g., computing objects or devices , , , , , etc., as may be characteristic of a distributed computing environment.","Example Computing Device","As mentioned, advantageously, the techniques described herein can be applied to any device. It can be understood, therefore, that handheld, portable and other computing devices and computing objects of all kinds are contemplated for use in connection with the various embodiments. Accordingly, the below general purpose remote computer described below in  is but one example of a computing device.","Embodiments can partly be implemented via an operating system, for use by a developer of services for a device or object, and\/or included within application software that operates to perform one or more functional aspects of the various embodiments described herein. Software may be described in the general context of computer executable instructions, such as program modules, being executed by one or more computers, such as client workstations, servers or other devices. Those skilled in the art will appreciate that computer systems have a variety of configurations and protocols that can be used to communicate data, and thus, no particular configuration or protocol is considered limiting.",{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 8","b":["800","800","800","800"]},"With reference to , an example remote device for implementing one or more embodiments includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit .","Computer  typically includes a variety of computer readable media and can be any available media that can be accessed by computer . The system memory  may include computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM) and\/or random access memory (RAM). By way of example, and not limitation, system memory  may also include an operating system, application programs, other program modules, and program data.","A user can enter commands and information into the computer  through input devices . A monitor or other type of display device is also connected to the system bus  via an interface, such as output interface . In addition to a monitor, computers can also include other peripheral output devices such as speakers and a printer, which may be connected through output interface .","The computer  may operate in a networked or distributed environment using logical connections to one or more other remote computers, such as remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, or any other remote media consumption or transmission device, and may include any or all of the elements described above relative to the computer . The logical connections depicted in  include a network , such local area network (LAN) or a wide area network (WAN), but may also include other networks\/buses. Such networking environments are commonplace in homes, offices, enterprise-wide computer networks, intranets and the Internet.","As mentioned above, while example embodiments have been described in connection with various computing devices and network architectures, the underlying concepts may be applied to any network system and any computing device or system in which it is desirable to improve efficiency of resource usage.","Also, there are multiple ways to implement the same or similar functionality, e.g., an appropriate API, tool kit, driver code, operating system, control, standalone or downloadable software object, etc. which enables applications and services to take advantage of the techniques provided herein. Thus, embodiments herein are contemplated from the standpoint of an API (or other software object), as well as from a software or hardware object that implements one or more embodiments as described herein. Thus, various embodiments described herein can have aspects that are wholly in hardware, partly in hardware and partly in software, as well as in software.","The word \u201cexample\u201d is used herein to mean serving as an example, instance, or illustration. For the avoidance of doubt, the subject matter disclosed herein is not limited by such examples. In addition, any aspect or design described herein as \u201cexample\u201d is not necessarily to be construed as preferred or advantageous over other aspects or designs, nor is it meant to preclude equivalent example structures and techniques known to those of ordinary skill in the art. Furthermore, to the extent that the terms \u201cincludes,\u201d \u201chas,\u201d \u201ccontains,\u201d and other similar words are used, for the avoidance of doubt, such terms are intended to be inclusive in a manner similar to the term \u201ccomprising\u201d as an open transition word without precluding any additional or other elements when employed in a claim.","As mentioned, the various techniques described herein may be implemented in connection with hardware or software or, where appropriate, with a combination of both. As used herein, the terms \u201ccomponent,\u201d \u201cmodule,\u201d \u201csystem\u201d and the like are likewise intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on computer and the computer can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers.","The aforementioned systems have been described with respect to interaction between several components. It can be appreciated that such systems and components can include those components or specified sub-components, some of the specified components or sub-components, and\/or additional components, and according to various permutations and combinations of the foregoing. Sub-components can also be implemented as components communicatively coupled to other components rather than included within parent components (hierarchical). Additionally, it can be noted that one or more components may be combined into a single component providing aggregate functionality or divided into several separate sub-components, and that any one or more middle layers, such as a management layer, may be provided to communicatively couple to such sub-components in order to provide integrated functionality. Any components described herein may also interact with one or more other components not specifically described herein but generally known by those of skill in the art.","In view of the example systems described herein, methodologies that may be implemented in accordance with the described subject matter can also be appreciated with reference to the flowcharts of the various figures. While for purposes of simplicity of explanation, the methodologies are shown and described as a series of blocks, it is to be understood and appreciated that the various embodiments are not limited by the order of the blocks, as some blocks may occur in different orders and\/or concurrently with other blocks from what is depicted and described herein. Where non-sequential, or branched, flow is illustrated via flowchart, it can be appreciated that various other branches, flow paths, and orders of the blocks, may be implemented which achieve the same or a similar result. Moreover, some illustrated blocks are optional in implementing the methodologies described hereinafter.","While the invention is susceptible to various modifications and alternative constructions, certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood, however, that there is no intention to limit the invention to the specific forms disclosed, but on the contrary, the intention is to cover all modifications, alternative constructions, and equivalents falling within the spirit and scope of the invention.","In addition to the various embodiments described herein, it is to be understood that other similar embodiments can be used or modifications and additions can be made to the described embodiment(s) for performing the same or equivalent function of the corresponding embodiment(s) without deviating therefrom. Still further, multiple processing chips or multiple devices can share the performance of one or more functions described herein, and similarly, storage can be effected across a plurality of devices. Accordingly, the invention is not to be limited to any single embodiment, but rather is to be construed in breadth, spirit and scope in accordance with the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example and not limited in the accompanying figures in which like reference numerals indicate similar elements and in which:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
