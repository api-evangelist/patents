---
title: Interface method and system for accessing inner layers of a network protocol
abstract: A method of performing network communications includes receiving a datagram for transmitting information over a network, selecting a layer in a network protocol stack to establish communication over the network using an inner layer application programming interface (IL API), establishing an inner layer socket at the selected network layer using the IL API without accessing other layers in the layered network protocol stack, and transmitting the datagram packet over the selected layer using the inner layer socket.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06845397&OS=06845397&RS=06845397
owner: Nortel Networks Limited
number: 06845397
owner_city: Billerica
owner_country: US
publication_date: 20001229
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","CODE EXAMPLE A","CODE EXAMPLE B"],"p":["The present invention relates to the field of computer data networking and an interface method and system for accessing inner layers of a network protocol.","The use of layered data communications protocols promotes system interoperability, vendor portability and simplicity in system integration. Each protocol layer operates at a different layer of abstraction and performs different types of data manipulation and formatting. Because each layer is concerned with events at its own level of abstraction, different software designers can work together to design the protocols. Layers of the network protocol can also be replaced individually without significant communication incompatibilities problems arising.","The Internet Protocol (IP) stack is a widely used layered communication protocol. Applications use the IP stack to transmit and receive data over a variety of different local and wide area networks. Typically, a transmitting application passes application data to a transport layer in the IP stack, which in turn adds routing information to the data and passes the results to a data link layer. The data link layer also adds additional header information and passes the resulting information to a physical layer, where it is finally transmitted over the network.","A receiving application associated with a receiving IP stack receives and processes the information. Each layer of the receiving IP stack performs various communication functions and format conversions in reverse going from the physical layer, the data link layer, the network layer, the transport layer, and then to the receiving application. In a conventional network, applications send and receive messages from each other and use the IP stack as a conduit for data. Notwithstanding these messages, other information being transmitted between the sending and receiving IP stacks is not typically made available to either the sending or receiving applications.","While layered protocols such as used in a conventional IP stack have some advantages, they are have been obtained by lowering programmatic flexibility. For example, application data is encapsulated with protocol-generated headers whose content cannot be accessed and controlled by the application itself. Applications are masked from the inner operation of a network protocol and network operation. This inflexibility makes it difficult for an application to send data encapsulated with a non-standard header when required or monitor operation of the network.","A method of performing network communications includes receiving a datagram for transmitting information over a network, selecting a layer in a network protocol stack to establish communication over the network using an inner layer application programming interface (IL API), establishing an inner layer socket at the selected network layer using the IL API without accessing other layers in the layered network protocol stack, and transmitting the datagram packet over the selected layer using the inner layer socket.",{"@attributes":{"id":"P-00014","num":"00014"},"figref":"FIG. 1","b":["100","100","100","102","104","106","108","102","104","100","1110","112","114","116","118","100","120","122","124","126"]},"Conventional layered communications provides applications with application to application or peer-to-peer or communication capabilities. Information at the lower layers of the protocol stack are masked from the application through abstract interfaces. This simplifies network programming over the IP stack but does not provide much flexibility if access to these other layers is desired. IL API  and IL API  provides this communication capability to both transmit application  and receive application . For example, transmit application  and receive application  have access to IP stack  and IP stack  directly using their respective IL API. Additionally, transmit application  and receive application  also have access to other protocol layers using the IL API such as data link layer  and data link layer .",{"@attributes":{"id":"P-00016","num":"00016"},"figref":"FIG. 2","b":["202","204","206","208","210","206","202","212","214","216","212","212","212","212"]},"Network layer  provides application  with access through IL API  to information carried over Appletalk , IPv, IPv, and IPX . These protocols provide packet delivery services and routing capabilities for transport protocols such as TCP  and UDP . Networks based on Appletalk  and IPX  can be integrated to work with the TCP and UDP transport protocols. In addition, routers, switches, hubs and other network devices exchange status and network routing information describing network layer resources using ICMP (Internet Control Message Protocool) and IGMP (Internet Gateway Message Protocol). Appletalk  provides packet delivery services primarily to computers designed by Apple Computer of Cupertino, Calif. IPv (version 4) provides 32-bit addresses and IPv (version 6) provides 64-bit addresses in the Internet Protocol (IP) defined in specification DOD-STD-1777. Further references to the IP protocol include these additional protocols described above.","Application  also has access to data link layer  through IL API . Fiber distributed data interface (FDDI) protocol  is a standard for data transmission on fiber optic lines in a local area network that can extend in range up to 200 km (124 miles). FDDI protocol  is based on the token ring protocol and in addition can support thousands of users. In addition, application  can also access information from Ethernet  through IL API . Ethernet  is the most widely-installed local area network technology and specifies sharing physical access over coaxial cable or special grades of twisted pair wires (10BASE-T) providing transmission speeds from several Mbps to Gbps. Devices are connected to the cable and compete for access using a Carrier Sense Multiple Access with Collision Detection (CSMA\/CD) protocol.",{"@attributes":{"id":"P-00019","num":"00019"},"figref":"FIG. 3","b":["300","300","302","304","306","308","312","300","310"]},"In conventional network communication, application  and application  communicate through either TCP  or UDP  for connection or connectionless type communication over a network. As an alternative, both application  and application  can communicate with transport layer  through TCP Socket  in IL API . Although, additional information is not available, a more uniform implementation is achieved by offering the transport interface with IL API .","Application  and application  can use IL API  to access network layer  and data link layer  in ways previously unavailable. For example, application  can access Internet Control Message Protocol (ICMP)\/Internet Group Multicast Protocol (IGMP)  resources and interact with routers, switches, hubs, gateways, and hosts communicating with each other about errors and system control. ICMP provides message control and error-reporting protocol between a host server and a gateway to the Internet. ICMP uses Internet Protocol (IP) datagrams that IL API  provides to an application. On conventional systems, this information is processed by the TCP\/IP protocol and is not available directly to the application. IGMP is used to support multicasting between nodes on a network and provides resources to applications through IL API  in a similar manner. Application  also has access to ARP  and RARP  resources. Application  opens a socket using IP Socket  interface and establishes a direct connection with network layer . Because application  bypasses transport layer , ARP  and RARP  resources are exposed and available for application  to process. For example, ARP  resources include Media Access Control (MAC) addresses associated with each Ethernet device on a network.","Application  operates in a similar manner with respect to data link layer . To gain access to data link layer , application  establishes a session directly to data link layer  through link socket . Once the session through link socket  is created, application  has access to resources in data link  and physical layer . For example, application  can create customized headers for an Ethernet packet  creating TCP Header and IP Header as illustrated in Ethernet packet  in FIG. . Ethernet header and Ethernet trailer are added by an Ethernet type data link . This provides an application with additional flexibility when developing network management software or developing text routines that need access to lower layers of the network protocol stack.","FIG. . is a block diagram depicting a computer system  that provides the IL API and IP stack to applications. Computer system includes a memory , a processor , a network communication port , a secondary storage , and input-output ports . Processor can be a general-purpose processor such as manufactured by Intel Corporation of Santa Clara Calif. or can be a specialized ASIC or other type of processor device. Network communication port  can be implemented as a Ethernet card or built-in communication port on a computer and secondary storage  is a hard-disk, CDROM, or other mass storage device. Input-output ports includes ports for corresponding peripheral devices such as keyboard, mouse, printer, display, and scanner.","Memory  includes an application , an inner layer API (IL API) , inner layer extensions , virtual machine runtime environment , TCP\/IP protocol , network resources  and operating system . Application  is an application that can access one or more different layers of a network protocol stack such as TCP\/IP protocol . Generally, application  should be a user application but may need to be run with increased permissions such as \u201croot\u201d or \u201csuperuser\u201d due to the sensitive information accessible within the inner layers of TCP\/IP protocol .","Inner layer API  is the interface routines linked into application  that provides direct access to the transport, the network, data link layers and physical layers in the protocol stack. Inner layer extensions  include any supporting routines necessary to make the IL API  available on the given platform. In some cases, this could involve recompiling an operating system kernel to include these particular functionalities not previously available to applications. In an object-oriented implementation, such as using the Java programming language by Sun Microsystems of Mountain View, Calif., these extensions can be dynamically loaded at run-time or immediately when they are loaded into the overall system. Because Java allows dynamic loading of routines, inner layer extensions  can be loaded as application  requires.","Virtual machine runtime environment  is typically used with an object-oriented programming language such as Java. If a non-object oriented or interpreted programming language is not being used, then virtual machine runtime environment  may not be required. For Java, a Java Virtual Machine or JVM simulates a virtual machine and provides hardware independent computing capabilities in addition to dynamic loading of libraries, applications, and applets in real-time over a network.","TCP\/IP  is the conventional layered protocol stack typically available on most computers and computer-like platforms. As previously mentioned, TCP\/IP generally only provides applications with access to the transport layer but with IL API , application  accesses the network layer, the data link layer, and the physical layer in addition to the transport layer. Network resources  represent the various tables and other network resources on a network device. These resources include information stored in routing tables, ARP tables, ICMP\/IGMP related tables, tables for storing physical port information and any other tables or resources used to manage and or describe an aspect of a network device.","Operating system  manages resources on computer system  so they are used efficiently and uniformly.",{"@attributes":{"id":"P-00029","num":"00029"},"figref":"FIG. 5","b":"502"},"Given several layers to communicate with, application selects a network layer to establish communication (). In part, the layer selected depends on the type of datagram the application has created. If the application creates a transport session using a transport socket such as TCP  in , the application provides the data and necessary headers. However, a network session uses a network socket such as IP Socket  in FIG.  and the application needs to create the appropriate network layer TCP header or UDP header around the data or payload section of each packet. Similarly, if the application creates a link layer session using link socket  then the application must also include IP header information in the packet.","The application also selects a layer in the network protocol stack depending on the layer a resource associated with the network device uses for communication. For example, the ICMP and IGMP tables are resources that use the IP protocol because they communicate that the network layer in the protocol stack. Similarly, an ARP table is a resource that uses the link layer to communicate information about the network device, in particular an Ethernet or MAC address of the network device.","The application then opens a socket at the selected layer of the network protocol using the IL API (). Often, the communication occurs over a \u201craw\u201d type of socket rather than a \u201ccooked\u201d socket. The information is considered raw because control characters and other information in the data stream are not stripped out or interpreted by other programs before being delivered to the application. For example, two common types of packets sent or received over raw sockets are ICMP packets and IGMP packets. Specific resources such as routing tables, ICMP and IGMP tables are identified with predetermined or well-known socket identifiers. Applications open an inner layer socket using these specific socket identifiers to access the information in these particular resources. Alternatively, the application can open inner layer sockets with other socket identifiers to intercept other types of information being transmitted across the particular network protocol layer.","Communication continues between the application and the selected layer or specific resource until the application ends or the connection is terminated ().","In one implementation using the Java object-oriented programming environment, an application may contain source code that generates and utilizes Java link layer sockets as shown in the following code example A.",{"@attributes":{"id":"P-00035","num":"none"},"ul":{"@attributes":{"id":"ul200001","list-style":"none"},"li":{"@attributes":{"id":"ul200002-li00002"},"ul":{"@attributes":{"id":"ul200002","list-style":"none"},"li":["Ethernet Packet ep=New Ethernet Packet (data, destination Ethernet Address);","Ethernet Socket s=New Ethernet Socket (source Ethernet Address);","Byte size;","Byte buffer=new byte[size];\n        \n        "]}}}},"The Code Example A details the use of a combination send\/receive Java link layer socket \u201cs\u201d whose address is \u201csource Ethernet Address\u201d. A datagram packet \u201cep\u201d is created for use in an Ethernet networking environment, where \u201cep\u201d is intended to be sent to a destination \u201cdestination Ethernet Address\u201d. A receive buffer \u201cbuf\u201d is created for socket \u201cs\u201d, and given size \u201csize\u201d. After \u201cep\u201d is sent by Java link layer socket \u201cs\u201d, Java link layer socket \u201cs\u201d receives any return packets in buffer \u201cbuf\u201d.","Another example of the use of Java link layer sockets is given below in code example B.",{"@attributes":{"id":"P-00043","num":"none"},"ul":{"@attributes":{"id":"ul200004","list-style":"none"},"li":{"@attributes":{"id":"ul200005-li00005"},"ul":{"@attributes":{"id":"ul200005","list-style":"none"},"li":["Ethernet Address destination=new Ethernet Address;","Ethernet Address source=new Ethernet Address;","Byte [ ] buf=new byte [2000];","Ethernet Packet ep=new Ethernet Packet (buf, destination);\n        \n        ","Ethernet Socket es=new Ethernet Socket (source);","es.send(ep);","es.receive(ep);\n\n\/\/ now look at data in the buffer buf\n"]}}}},"In the code example B, a buffer \u201cbuf\u201d is utilized as a bi-directional send\/receive buffer for supporting the socket \u201ces\u201d.","While specific implementations have been described herein for purposes of illustration, various modifications may be made without departing from the spirit and scope of the invention. For example, implementations and examples are provided with reference to TCP\/IP however, an alternate implementation could also be adapted to work with the Open Systems Interconnection (OSI) network model. In the OSI communication model, IP is in layer , and other layers are as illustrated in FIG. . Inner sockets for the transport, network and data link layer are described but an inner socket for a physical layer could also be implemented. The physical layer would provide information about the ports on a network device and information about the physical media being used. Additional implementations could be created using conventional procedural programming languages such as \u201cC\u201d as well as object-oriented programming environments\/languages such as Java or C++. Furthermore, although aspects of the present invention are described as being stored in memory and other storage mediums, one skilled in the art will appreciate that these aspects can also be stored on or read from other types of computer-readable media, such as secondary storage devices, like hard disks, floppy disks, or CD-ROM; a carrier wave from the Internet; or other forms of RAM or ROM. Accordingly, the invention is not limited to the above-described embodiments, but instead is defined by the appended claims in light of their full scope of equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The features and aspects of the present invention will become more fully apparent from the following detailed description, appended claims, and accompanying drawings in which:",{"@attributes":{"id":"P-00009","num":"00009"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00010","num":"00010"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00011","num":"00011"},"figref":"FIG. 3"},"FIG. . is a block diagram depicting a computer system that provides the IL API and IP stack to applications.",{"@attributes":{"id":"P-00013","num":"00013"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
