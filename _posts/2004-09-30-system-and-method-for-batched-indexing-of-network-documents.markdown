---
title: System and method for batched indexing of network documents
abstract: A process takes advantage of a structure of a server hosting a network site that includes a change log stored in a database to batch index documents for search queries. The content of the site is batched and shipped in bulk from the server to an indexer. The change log keeps track of the changes to the content of the site. The indexer incrementally requests updates to the index using the change log and batches the changes so that the bandwidth usage and processor overhead costs are reduced.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07644107&OS=07644107&RS=07644107
owner: Microsoft Corporation
number: 07644107
owner_city: Redmond
owner_country: US
publication_date: 20040930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention is related to a patent application having Ser. No. 09\/493,748, entitled \u201cAdaptive Web Crawling Using a Statistical Model\u201d, filed on Jan. 28, 2000. The present invention is also related to U.S. Pat. No. 6,067,541, entitled, \u201cMonitoring Document Changes in a File System of Documents with the Document Change Information Stored in a Persistent Log\u201d, that issued on May 23, 2000. The related application and patent are assigned to the assignee of the present patent application and are hereby incorporated by reference.","Searches among networks and file systems for content have been provided in many forms but most commonly by a variant of a search engine. A search engine is a program that searches documents on a network for specified keywords and returns a list of the documents where the keywords were found. Often, the documents on the network are first identified by \u201ccrawling\u201d the network.","Crawling the network refers to using a network crawling program, or a crawler, to identify the documents present on the network. A crawler is a computer program that automatically discovers and collects documents from one or more network locations while conducting a network crawl. The crawl begins by providing the crawler with a set of document addresses that act as seeds for the crawl and a set of crawl restriction rules that define the scope of the crawl. The crawler recursively gathers network addresses of linked documents referenced in the documents retrieved during the crawl. The crawler retrieves the document from a Web site, processes the received document data from the document and prepares the data to be subsequently processed by other programs. For example, a crawler may use the retrieved data to create an index of documents available over the Internet or an intranet. A \u201csearch engine\u201d can later use the index to locate documents that satisfy specified criteria.","For retrieving documents in a crawl, an operation for each document on the network is executed to get the document and populate the index with records for the documents. These roundtrip queries for documents can consume a great deal of overhead with regard to bandwidth and processor utilization. Also, for accurate results to be provided by the search engine, the index also needs to be accurate with regard to the documents on the network. If the documents on the network change, by altering documents, adding documents, deleting documents, or other operations, the index needs to be updated to reflect these changes. However, crawls of the network can be expensive operations. Having to roundtrip back and forth to the network can overtax the bandwidth available between the indexer and the network.","Embodiments of the present invention are related to a system and method for batched indexing of a web site that mitigates the bandwidth used when crawling a network for documents. The present invention takes advantage of the structure of a server hosting a network site that includes a change log stored in a database or other repository. The present invention batches the content of the site and ships the content in bulk from the server to an indexer.","In accordance with one aspect of the present invention, a batch size limit is set for transmitting batches of documents to an indexer. Metadata corresponding to each of the documents is examined and the documents are selected to be included in the batch. The batch of documents is then forwarded to the indexer.","In accordance with one aspect of the present invention, all the changes in the network are recorded in change logs. The change log records add, remove, modify, move, rename, and other document altering operations. The change log idicates which documents have changed. Generally, most of the documents on the network do not change between two crawls, but without the change log a crawler would be required to roundtrip for each document to get the last modified time. The changes are then retrieved by the indexer from the change log using service call that batches a specified number of the changes. The service call prevents repeating an operation to retrieve each document that has changed and instead allows a large number of the changes to be forwarded to the indexer at one time. Accordingly, the number of database queries required to be sent to the network are reduced, effectively reducing the overhead of updating the index.","The present invention now will be described more fully hereinafter with reference to the accompanying drawings, which form a part hereof, and which show, by way of illustration, specific exemplary embodiments for practicing the invention. This invention may, however, be embodied in many different forms and should not be construed as limited to the embodiments set forth herein; rather, these embodiments are provided so that this disclosure will be thorough and complete, and will fully convey the scope of the invention to those skilled in the art. Among other things, the present invention may be embodied as methods or devices. Accordingly, the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment combining software and hardware aspects. The following detailed description is, therefore, not to be taken in a limiting sense.","Illustrative Operating Environment","With reference to , one exemplary system for implementing the invention includes a computing device, such as computing device . Computing device  may be configured as a client, a server, mobile device, or any other computing device. In a very basic configuration, computing device  typically includes at least one processing unit  and system memory . Depending on the exact configuration and type of computing device, system memory  may be volatile (such as RAM), non-volatile (such as ROM, flash memory, etc.) or some combination of the two. System memory  typically includes an operating system , one or more applications , and may include program data . In one embodiment, application  includes a batched indexing application  for implementing the functionality of the present invention. This basic configuration is illustrated in  by those components within dashed line .","Computing device  may have additional features or functionality. For example, computing device  may also include additional data storage devices (removable and\/or non-removable) such as, for example, magnetic disks, optical disks, or tape. Such additional storage is illustrated in  by removable storage  and non-removable storage . Computer storage media may include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information, such as computer readable instructions, data structures, program modules, or other data. System memory , removable storage  and non-removable storage  are all examples of computer storage media. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device  may also have input device(s)  such as keyboard, mouse, pen, voice input device, touch input device, etc. Output device(s)  such as a display, speakers, printer, etc. may also be included.","Computing device  also contains communication connections  that allow the device to communicate with other computing devices , such as over a network. Communication connection  is one example of communication media. Communication media may typically be embodied by computer readable instructions, data structures, program modules, or other data in a modulated data signal, such as a carrier wave or other transport mechanism, and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.","Illustrative Embodiment for Batched Indexing","Throughout the following description and the claims, the term \u201cdocument\u201d refers to any possible resource that may be returned by as the result of a search query or crawl of a network, such as network documents, files, folders, web pages, and other resources.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 2","FIG. 2"],"b":["204","206","206","216","218","216","204","218"]},"Crawler  searches (\u201ccrawls\u201d) remote server  connected to network  for documents  and . Crawler  retrieves documents as document data. The document data from the documents  and  can be used in a variety of ways. For example, crawler  may pass the document data to indexer . Indexer  is a computer program that maintains an index  of documents. The type of information stored in index  depends upon the complexity of indexer .","In accordance with the present invention, indexer  and remote server  may be configured to operate in accordance with a web service . For example, remote server  may be configured according to Windows SharePoint Services technology produced by Microsoft Corporation of Redmond, Wash. to include web service . Accordingly, a web service call may be utilized to query web service  for the document located on remote server . Web service  then communicates with an application programming interface (API) that is exposed by a database associated with the documents on remote server . The application programming interface enumerates the documents present in the database and allows the document data corresponding to the documents to be returned and indexed by indexer . Accordingly, the roundtrips to and from remote server  are significantly reduced due to the return of multiple sets of document data from the single web services call. The return of results are effectively \u201cbatched\u201d together. Other embodiments may utilize other resident code on remote server , or utilize other communication protocols than a web services call in providing the batched indexing of the network documents. A more detailed description of the communication between an indexer and a web service is provided in the discussion of  below.","A client computer , such as a personal computer, is connected to the server by a network . Network  may be a local area network, a wide area network, or a combination of networks. Network  may be the same network as the network  or a different network. Client computer  includes a computer program, such as a \u201cbrowser\u201d  that locates and displays documents to a user.","When a user at client computer  desires to search for one or more documents, client computer  transmits a search request to search engine . Search engine  examines its associated index  to find documents that may relate to the search request. Search engine  may then return a list of those documents to the browser  at the client computer . The user can examine the list of documents and retrieve one or more from remote computing devices such as remote server .","In another embodiment, server  itself may include documents  and  that are accessed by crawler . Also crawler , indexer , and search engine  may reside on different computers. Additionally, browser  and crawler  may reside on a single computer.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3","b":["300","302","310","310","312","314","312","320","322"]},"Indexer  maintains an index of the documents located on a network. Indexer is shown to communicate with server , however, other intermediate functional blocks may facilitate the communication between indexer  and server . For example,  illustrates a crawler  that provides communication between indexer  and remote server  across network . In at least one embodiment, the intermediary functional blocks do not affect the functionality of the present invention and are therefore not shown.","Indexer  communicates with web service  to obtain the document data for populating the index. Web service  in turn communicates with object model  to request the document data from database . In one embodiment, database  is organized according to the illustrated hierarchy . Hierarchy  is structured as a site that includes subsites. Each subsite includes one or more containers that can further include other containers or documents. In one embodiment, hierarchy  is structured similar to a file system of a computing device.","For an initial crawl, indexer  is aware of the site associated with server  and indexer  provides a web service call to web service  that requests information about the site. The request is forwarded by web service  to object model . Object model  provides an object for each of the documents, containers, and subsites of the site included in database . In other embodiments, other structures in database  may also have objects provided by object model  (e.g., lists, list items, document libraries, etc.). Object model  returns a list of subsite objects to web service , which propagates that list to indexer  as a list of URLs (Uniform Resource Locators). In one embodiment, the list of subsites is not provided to the indexer according to the batching functionality of the present invention when the number of subsites is below a specified number.","Using the list of subsites, indexer  provides web service calls that request information about each of the subsites, similar to the previous web service call requesting information about the site. Again, the request is forwarded by web service  to object mode . Object model  then returns a list to indexer  of the containers within the subsite for which the request was made. In one embodiment, the list of subsites is not provided to the indexer according to the batching functionality of the present invention when the number of subsites is below a specified number. Batching of the containers, documents, or other object related structures in the database hierarchy involves examining metadata about the object related structures and collecting the structures in a batch for transmission to indexer . An exemplary process for batch indexing of the site is described in the discussion of  below.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 4","b":["400","402","404"]},"At block , the web service gets document metadata for up to N documents, where N is set according to a specified limit (e.g., 1000 items). The document metadata is retrieved by the web service from the database. In other embodiments, the limit for items may be set to another limit, or may not have an associated limit. The metadata includes the document extension, the document size, and other metadata that assists in efficiently batching the documents for transmission to the indexer. In another embodiment, a container may be larger than N items. If the container contains more than N items, the web service also returns a cookie that will be passed in the next web service call so that the web service knows to get the next N documents from the database. Once the web service retrieves the document metadata, processing continues at block .","At block , the crawler processes the metadata retrieved by the web service and groups the documents related to the metadata into batches according to a batch size limit. In one embodiment, the batch size limit is associated with a size of the batch in terms of bytes (e.g., 50 MB). In another embodiment, the batch size limit is associated with the number documents included in the batch. In still another embodiment, the indexer sets a maximum size limit, and the web service then determines an efficient size lower than the maximum for batching the documents. One determination of an efficient size corresponds to a batch size where the number of queries to the database is minimized while also minimizing the bandwidth utilization between the indexer and server.","In one embodiment, a document that is a certain type according to its extension (e.g., mpg) may be excluded from the batch. For example, certain documents that must first be rendered to provide meaningful results to a search query do not benefit from the batched indexing, and are therefore obtained through other means after the documents are rendered. Other documents, such as movies, may also not provide meaningful results to a keyword search using a search engine, and are therefore also excluded from the batch. In another embodiment, the size of the document may exclude it from batch indexing. For example, when the size of the document exceeds the batch size limit (e.g., greater than 50K), the document is retrieved by other means (e.g., another \u201cget document\u201d operation). Once the documents are batched, processing proceeds to block .","At block , a batch of documents is requested by the crawler from the web service. The web service gets the batch of documents from the database and returns the documents to the crawler. Once the crawler receives the batch of documents, processing moves to decision block .","At decision block , a determination is made whether more batches need to be retrieved by the crawler corresponding to the retrieved document metadata. If more batches need to be retrieved, processing returns to block . However, if further batches need not be retrieved, processing continues to block .","At block , the documents corresponding to the retrieved batches are forwarded from the crawler to the indexer so that the documents are indexed. The index is therefore updated according to the changes in the documents. Once the documents are forwarded, processing continues at decision block ","At decision block , a determination is made whether a cookie is associated with the web service call that requested the metadata for the N documents. The cookie ensures that documents of a particular container are associated with other documents of the same container for indexing when the number of documents in a container are greater than N. If there is a cookie associated with the documents, processing returns to block  where process  is repeated for the next set of N documents associated with the cookie. However, if there is no cookie associated with the documents, processing proceeds to block , where process  ends.","Process  describes the initial batch indexing process for the present invention as it relates to a single container of documents. Many containers of documents may be present on a network, and process  may be repeated as necessary for batch indexing all the documents on the network.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 5","FIG. 3"],"b":["500","502","504","506","514","500","314"]},"Each change record (e.g., ) includes an event type , an object identification , and a change ID (i.e., token) . Event type  refers to the type of change event that occurred corresponding to the change record. Some event types include add, remove, modify, move, and rename events. These events are associated with a particular document according to object identification . Object identification  refers to identification information sufficient enough to identify the particular object associated with the changed document. Some exemplary information included in object identification  includes the document ID, the container ID, object ID, and\/or other identifier information for identifying the object corresponding to the changed document. Change ID  identifies the change record itself and provides an indication of where in change log  the update process is currently.","The points in the change log (e.g.,  and ) where the last update occurred may be identified as to the last change ID or the current change ID. The last change ID refers to an identification of the position in the change log for the last change that has been reflected in the index. The current change ID refers to an identification of the current position in the change log at the time the change log is queried for its position. When requested by the indexer, batches of the changes that occurred between the last change ID (e.g., ) and the current change ID (e.g., ) are resolved to update the index. Processes for using the change log for batch indexing are described below in the discussions of .",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 6","b":["600","602","604"]},"At block , the web service receives a request from the indexer for the current position in the change log. Processing continues at block .","At block , the web service forwards the request for the current position in the change log to the database, where the request corresponds to a request for the last change ID in the change log. Once the request is forwarded by the web service, processing moves to block .","At block , the last change ID from the change log is forwarded to the indexer by the web service. The indexer stores the last change ID for future use in the incremental crawls. The incremental crawl process is described below in the discussion of . Once the last change ID is stored by the indexer, processing moves to block , where process  ends.","In one embodiment, multiple change logs may be on the server corresponding to multiple databases. For multiple change logs, the last change IDs are aggregated before being returned to the indexer.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 7","b":["700","702","704"]},"At block , a request is received by the web service from the indexer for the changed content. The request includes the last change ID that was previously stored by the indexer (see  above). Once the request is received by the web service, processing continues at block .","At block , the request is forward to the database as a request for the changes that have occurred in the change log since the position in the change log corresponding to the last change ID. Once this request is received by the database, processing continues at block .","At block , the web service retrieves a first batch of changes that occurred since the last change ID. In one embodiment, the batch of changes corresponds to the first one thousand change records appearing after the last change ID. The web service also retrieves the current change ID. Once the batch of changes and the current change ID are retrieved, processing continues at block .","At block  the batch of change records are sorted for retrieving the changed content. For example, changes that occurred to documents within the same container are sorted to be grouped together. Sorting the change records for retrieving the changed content reduces the number of queries to the database by the object model. Once the change records are sorted and the changed content is retrieved, processing moves to block .","At block , the batched changes in the documents that correspond to the batch of change records retrieved from the change log are forwarded to the indexer. Also forwarded to the indexer is the current change ID that is stored by the indexer. The indexer uses the current change ID as the last change ID for the next incremental crawl. Once the current change ID is stored by the indexer, and the index has been updated according to the forwarded changed content, processing moves to block , where process  ends.","In one embodiment, multiple change logs may be on the server corresponding to multiple databases. For multiple change logs, the current change IDs and changed content are aggregated before being returned to the indexer.","The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
