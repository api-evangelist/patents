---
title: Methods and systems for providing access to an application
abstract: The invention enables the publishing of a graphical user interface application on the web in a manner so that they can be discovered by manual or automatic searches. The invention includes the step of receiving a service access point (SAP) from a web service directory. The SAP is associated with a first application and identifies a web server. The invention also includes the step of retrieving address information associated with the first application from the web server identified by the SAP and launching a second application. The second application establishes a communication channel with an application server identified by the retrieved address information. The application server subsequently executes the first application and returns information to the second application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08135843&OS=08135843&RS=08135843
owner: Citrix Systems, Inc.
number: 08135843
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20020322
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates generally to publishing web services on the web and, more specifically, to providing access to an application using a web service directory.","Many companies having web sites on the World Wide Web enrich the experience of visiting their sites by using content from other service providers or web sites. For instance, a web portal can integrate numerous services from other web sites, such as travel information and search capabilities. The supplier of these services, such as the particular travel company providing the travel information, can benefit from greater exposure and\/or an increase in income. The integration of these services, also called web services, typically enables the web portal to offer more services to its users.","Referring to , a computer system  known to the prior art typically includes a client computer , or client, a content server , and a web server . The client  is typically a personal computer that can download content from the content server  and\/or web server  over a network , such as the Internet or World Wide Web. The client  is typically in communication with the content server  over a client-content server communication channel . Moreover, the client  is typically in communication with the web server  over a client-web server communication channel .","The client  may also include a web browser , such as INTERNET EXPLORER developed by Microsoft Corporation in Redmond, Wash. or NETSCAPE NAVIGATOR developed by Netscape Communications Corporation of Mountain View, Calif., to connect to the web and\/or download content from the servers , . A conventional content server  hosts one or more programs or files that can be accessed by the client . The web server  typically delivers web pages to the client  (e.g., web browser ).","To advertise web services, firms or companies can publish their services on the web using the content server . As more and more web services are written, a central repository (i.e., depository) for public web services, or a web service directory , is typically stored on the content server . The web service directory  may include a table listing supported web services and may also include documentation for each listed web service.","One example of the web service directory  includes the Universal Description, Discovery, and Integeration (UDDI) registry, jointly developed by Microsoft Corporation of Redmond, Wash., International Business Machines Corporation of Armonk, N.Y., and Ariba Inc. of Sunnyvale, Calif. Web services can alternatively be published on the web service directory  using the Lightweight Directory Access Protocol (LDAP), Microsoft's ACTIVE DIRECTORY, developed by Microsoft Corporation of Redmond, Wash., Common Object Request Broker Architecture (CORBA) name service, or ebXML service registry developed by the Organization for the Advancement of Structured Information Standards (OASIS) of Billerica, Mass.","A potential user of the conventional web service uses the client  to access the web service directory . The client  typically accesses the web service through a programming interface. For example, the service may be encoded by an interface description language, such as Web Services Description Language (WSDL). Alternatively, the client  may access the web service through a web page or a web page address (i.e., a Uniform Resource Locator, or URL).","There are several drawbacks to using the conventional techniques of accessing a web service. Programmatic service interfaces, for instance, typically require client-side applications (having client-side application logic) to be developed by the supplier of the web service to ensure that the client  can properly execute the web service through its interface. Moreover, web pages typically require an application to have a web user interface (UI) to access the web page. A web UI can limit the amount of interactivity between a user of the client  and the web page. For example, the amount of interactivity can be limited by delays in loading the next screen or object. Additionally, using a web UI for the execution of an application may constrain the complexity of the interface.","Therefore, there is a need to access web services in a more user-friendly manner, such as by providing greater interactivity between the client  and the web service and less dependence on suppliers of web services for applications to correctly execute with the web service.","The invention relates to methods and systems for providing access to a graphical user interface (GUI) application using web services. Providing access to, or publishing, a GUI rather than a web UI or a programming service interface has several benefits to the user of a client. For example, using a GUI to access a web service can provide a more powerful interface than a web UI and a more user-friendly environment. Additionally, using a GUI can provide a general UI to a user of the client compared to different web UIs for different web pages. Further, an application executing with the GUI does not need client-side application logic to properly execute on the client.","In one aspect, a method for remoting an application to an application client or end user application includes the step of receiving a service access point (SAP) from a web service directory. The SAP is associated with a first application and identifies a web server. The method also includes retrieving address information associated with the first application from the web server identified by the SAP and launching a second application. The second application establishes a communication channel with an application server identified by the retrieved address information.","In one embodiment, the method also includes the step of transmitting a query to the web service directory to search for the first application. The method can also include receiving the address of the web server and receiving a key for locating information associated with the first application in a database. In another embodiment, the step of retrieving address information from the web server also includes the step of retrieving a Multipurpose Internet Mail Extensions (MIME) document including the address information.","In another aspect, a client for use with executing a remote first application provided by a service provider on a web service directory includes a client browser. The client browser receives a SAP associated with the first application from the web service directory. The SAP identifies a web server. The client browser also retrieves address information associated with the first application from the web server identified by the SAP. The client also includes an application client that is launched in response to the retrieved address information. The application client also establishes a communication channel with an application server identified by the retrieved address information to receive data from the first application.","In another aspect, a method for remoting an application to an application client or end user application includes the steps of sending a query to a web service directory for information associated with a first application and transmitting a SAP associated with the first application to the client from the web service directory. The SAP identifies a web server. The method also includes the steps of retrieving address information associated with the first application from the web server identified by the SAP and launching a second application by the client. The second application establishes a communication channel with an application server identified by the retrieved address information. The method additionally includes the step of launching the first application by the application server and returning information to the second application. In one embodiment, the method additionally includes accessing a local database using a key contained within the SAP and having the local database return address information associated with the first application.","In yet another aspect, a method for remoting an application to an application client or end user application includes the step of receiving a request to access a SAP from a client. The SAP is associated with a first application. The method also includes identifying that the requested SAP can be used with an application client and retrieving address information associated with the first application identified by the SAP. The method additionally includes the step of converting the retrieved address information into a file where the format of the file is associated with the application client. The method also includes transmitting the file including the converted address information to the client.","In one embodiment, the SAP is identified in a web service directory. In other embodiments, the method includes transmitting the SAP associated with the first application to the client from the web service directory. In some embodiments, the method includes launching an application client by the client. The application client may also establish a communication channel with an application server identified by the retrieved address information.","Referring to , an embodiment of a computer system  enabling the publishing of GUIs in a web service directory includes the client , the content server , the web server , and an application server . The client  can download content from the content server , the web server , and the application server  over the network . In one embodiment, the client  can download content (e.g., an application) from the application server  over a client-application server communication channel .","Although illustrated with three servers , , , any number of servers can be used to implement the functions described above and below. In one embodiment, two or more of the servers , ,  are aggregated together and provided as a single physical machine. Moreover, any number of clients  can be connected to the servers , ,  to implement the functions described above and below.","The client  can be any personal computer (e.g., based on a microprocessor from the x86 family, the Pentium family, the 680x0 family, PowerPC, PA-RISC, MIPS families), smart or dumb terminal, network computer, wireless device, information appliance, workstation, minicomputer, mainframe computer or other computing device. Operating systems supported by the client  can include any member of the WINDOWS family of operating systems from Microsoft Corporation of Redmond, Wash., MacOS, JavaOS, and various varieties of Unix (e.g., Solaris, SunOS, Linux, HP-UX, A\/IX, and BSD-based distributions).","In one embodiment, the web browser  uses Secure Socket Layer (SSL) support for communications to the content server  and\/or the web server . SSL is a secure protocol developed by Netscape Communication Corporation of Mountain View, Calif., and is now a standard promulgated by the Internet Engineering Task Force (IETF). The web browser  can alternatively connect to the content server  and\/or the web server  using other security protocols, such as, but not limited to, Secure Hypertext Transfer Protocol (SHTTP) developed by Terisa Systems of Los Altos, Calif., HTTP over SSL (HTTPS), Private Communication Technology (PCT) developed by Microsoft Corporation of Redmond, Wash., and the Transport Level Security (TLS) standard promulgated by the IETF.","Additionally, the client  includes an application client  for establishing and exchanging communications with the application server  over the client-application server communication channel . In one embodiment, the application client  is a GUI application. In some embodiments, the application client  is an Independent Computing Architecture (ICA) client, developed by Citrix Systems, Inc. of Fort Lauderdale, Fla., and is also referred to below as ICA client . Other embodiments of the application client  include a Remote Display Protocol (RDP) client, developed by Microsoft Corporation of Redmond, Wash., a client-side player, interpreter or simulator capable of executing multimedia applications, email, Java, or .NET code. Moreover, in one embodiment the output of an application executing on the application server  can be displayed at the client  via the ICA client .","The client  searches the web service directory  for a web service. In one embodiment, the search is a manual search. Alternatively, the search is an automatic search. The web service directory  may also provide a service based view, such as white and yellow pages, to search for web services in the web service directory. In another embodiment, the web service directory  supports a hierarchical browsing based on a structured service name and service kind for GUI applications. In one embodiment, the web service directory  executes on a server independent of the content server , such as a directory server. In other embodiments, the web service directory  executes on multiple servers.","In some embodiments, the content server  enables the client  to select web services based on additional analysis or information by providing this information or analysis in the web service directory . Examples of service information that the web service directory  can list includes, but is not limited to, the name of the business offering the service, the service type, a textual description of the service, one or more service access points (SAPs), the network type, the path to use (e.g., TCP or HTTPS), and quality of service (QoS) information. Moreover, service information can be client device type or user (e.g., role) specific. Thus, service selection can be based on one or more of the above attributes.","In one embodiment, the service type denotes a programming interface that the client  must use to access the web service. For instance, the service type can state that the service is encoded by an interface description language, such as Web Services Description Language (WSDL).","The service access point, or SAP, is a unique address for an application. The SAPs enable the computer system  to support multiple applications at the client  and each server , , . For example, the application server  may support an electronic mail (i.e., e-mail) application, a file transfer application, and\/or a GUI application. In one embodiment, these applications would each have a SAP that is unique within the application server . In one embodiment, the SAP is a web or Internet address (e.g., Domain Name System (DNS) name, IP\/port, or Uniform Resource Locator (URL)). Thus, in one embodiment the SAP identifies the address of the web server  as part of the address for an application stored on the web server . In some embodiments, the SAP identifies the address of a publishing server plug-in  as part of the address for an application stored on the web server , as described below. In one embodiment, the SAP is an \u201caccessPoint\u201d from the UDDI registry.","To prepare an item for publishing in the web service directory , the content server  includes a web publishing tool . In one embodiment, the web publishing tool  is a software module. Alternatively, the web publishing tool  is another server that may be externally located from or internally located in the content server .","In one embodiment, the web server  delivers web pages to the client . The web server  can be any personal computer (e.g., based on a microprocessor from the x86 family, the 680x0 family, the Pentium family, PowerPC, PA-RISC, MIPS families), Windows-based terminal, network computer, wireless device (e.g., cellular phone), information appliance, X-device, workstation, mini computer, main frame computer, personal digital assistant, or other communications device capable of providing web pages to the client .","In another embodiment, the web server  is an Enterprise Information Portal (e.g., corporate Intranet or secured business-to-business extranet). Enterprise portals are company web sites that aggregate, personalize and serve applications, data and content to users, while offering management tools for organizing and using information more efficiently. In some companies, portals have replaced traditional desktop software with browser-based access to a virtual workplace.","The web server  also includes a publishing server plug-in  to enable the publishing of graphical user interface (GUI) applications. More specifically, the publishing server plug-in  translates a new web service entry URL into a GUI application service so that the GUI can be accessed via the web service directory . In one embodiment, the publishing server plug-in  is a Common Gateway Interface (CGI) script, which is a program designed to accept and return data that conforms to the CGI specification. The program can be written in any programming language, such as C, Perl, Java, or Visual Basic. In another embodiment, the publishing server plug-in  is a Java Server Page (JSP). Using the publishing server plug-in  to facilitate the publishing of remote GUI applications, the client  can thereby access the web service, not through a programming interface or a web page, but through a full GUI interface, such as with Citrix's ICA or Microsoft's RDP.","The application server  hosts one or more applications that are available for the client . Examples of such applications include word processing programs such as MICROSOFT WORD and spreadsheet programs such as MICROSOFT EXCEL, both manufactured by Microsoft Corporation of Redmond, Wash., financial reporting programs, customer registration programs, programs providing technical support information, customer database applications, or application set managers.","The network  can be a local-area network (LAN), a wide area network (WAN), or a network of networks such as the Internet or the World Wide Web (i.e., web). In other embodiments, one or more of the communication channels , ,  are established over different networks. For example, the client-content server communication channel  can belong to a first network (e.g., the World Wide Web) and the client-web server communication channel  can belong to a second network (e.g., a secured extranet or Virtual Private Network (VPN)).","Example embodiments of the communication channels , ,  include standard telephone lines, LAN or WAN links (e.g., T1, T3, 56 kb, X.25), broadband connections (ISDN, Frame Relay, ATM), and wireless connections. The connections over the communication channels , ,  can be established using a variety of communication protocols (e.g., HTTP, HTTPS, TCP\/IP, IPX, SPX, NetBIOS, Ethernet, RS232, messaging application programming interface (MAPI) protocol, real-time streaming protocol (RTSP), real-time streaming protocol used for user datagram protocol scheme (RTSPU), the Progressive Networks Multimedia (PNM) protocol developed by RealNetworks, Inc. of Seattle, Wash., manufacturing message specification (MMS) protocol, and direct asynchronous connections).","In one embodiment, the web publishing tool  stores information about an application that the web publishing tool  is publishing in the web service directory  in a persistent mass storage . As discussed below, in one embodiment the information is a URL for the dynamic publishing server plug-in . The persistent mass storage  may be a magnetic disk or magneto-optical drive. In one embodiment, the persistent mass storage  is a database server, which stores data related to the published application in one or more local service databases. The persistent mass storage  may be a component internally located in or externally located from any or all of the servers , , .","Referring to , the web publishing tool  receives a web service description and access information for an application (e.g., GUI application) for publishing (step ). In one embodiment, the web service description includes the service information described above (e.g., the name of the business offering the web service, the service type, a textual description of the service, and a SAP). The access information may include, for example, a published application name, a Transmission Control Protocol (TCP) browsing server farm address, and a MetaFrame server IP address. In some embodiments, the access information specifies the address to use and a ticket to use to traverse network or security gateways or bridge devices.","The web publishing tool  then constructs a service-publishing request to request the publication of the web service (i.e., GUI application) (step ). In one embodiment, the service-publishing request includes a SAP. In some embodiments, the SAP is a URL including the web address of the web server  and the publishing server plug-in . Further, the web address can be a Uniform Resource Identifier (URI), which is the generic term for the types of names and addresses that refer to objects on the web. A URL is one kind of URI. An example of the URI is the name of the web server  (e.g., \u201cweb-server\u201d) and the CGI script name (e.g., \u201cdynamic-component\u201d) for the publishing server plug-in .","The web publishing tool  stores a SAP entry associated with the SAP in the persistent mass storage  (step ). In some embodiments, the web publishing tool  also associates published application information (e.g., ICA-published-app-info) with the GUI application. In further embodiments, the web publishing tool  also includes a key in the service-publishing request to identify the SAP entry that the content server  stores in the persistent mass storage . For instance, the key can have the value of \u201c123456677.\u201d An example of a SAP identifying the web server , the CGI script name of the publishing server plug-in , and the key described above is \u201chttp:\/\/web-server\/dynamic-component\/?app=123456677.\u201d","An example of the SAP entry associated with the SAP described above is \u201ckey=123456677, value=ICA-published-app-info.\u201d The key can be any length (e.g., 56 bit key, 128 bit key). In one embodiment, the key is a cryptographic random number. The key may also provides an access right to the key holder. Although illustrated with a key, any means can be used to provide a form of security to the SAP entry stored in the persistent mass storage .","The web publishing tool  then provides the service-publishing request to the content server  for publishing in the web service directory  (steps  and ). Moreover, in one embodiment, the content server  transmits the key of the SAP to the client  requesting the particular web service for subsequent use in locating the SAP entry. In one embodiment, the publishing of the service-publishing request enables users of the client  to access the service. In one embodiment, GUI applications are published on the web service directory  using NFUSE developed by Citrix Systems, Inc. of Fort Lauderdale, Fla. In some embodiments, a publisher of a GUI application customizes the publication of the GUI application on the web service directory  using Application Launching And Embedding (ALE), also developed by Citrix Systems, Inc. ALE enables the launching of a GUI application from or the embedding of the application into an HTML page.","The client  then queries a service name from the web service directory  (step ). The content server  receives the query from the client  (step ) and finds the requested service name in the web service directory . In another embodiment, the user of the client  navigates the web service directory  until locating a particular service name that the user of the client  was attempting to find. Although illustrated with the client , any web service directory client (e.g., UDDI client or LDAP browser) can query or navigate the web service directory  to discover published web services.","Upon location of the SAP associated with the received query, the content server  transmits the SAP to the client  (step ). The client  receives the SAP (step ) and determines the address of the publishing server plug-in  from the SAP. The client  subsequently transmits a request for the GUI application to the web server  (step ). In some embodiments, the request from the client  is an HTTP request transmitted from the web browser  to the web server . In other embodiments, an application (e.g., general directory browser or HTML UI) executing on the client  receives the SAP from the content server  and provides the SAP as an argument to the web browser . The web browser  may then automatically transmit an HTTP request (for the GUI application) to the web server . Following along the lines of the previous examples, a particular example of the application request to the web server  is \u201chttp:\/\/web-server\/dynamic-component\/?app=123456677).\u201d","The web server , and, more particularly, the publishing server plug-in , receives the application request associated the SAP (step ) and determines the SAP entry associated with the request (step ). In one embodiment, the publishing server plug-in  receives the request from the client  and retrieves the published application information associated with the request that had been stored (as part of the SAP entry) in the persistent mass storage . In some embodiments, the publishing server plug-in  uses the SAP (or part of the SAP) that the client  received from the content server  as the key to access the proper service entry (e.g., the published application information) stored in the persistent mass storage .","The publishing server plug-in  then constructs a file or document having the published application information (e.g., HTTP address of the application server ) (step ) and transmits this document to the client  (step ). The publishing server plug-in  constructs the file so that the file has a format compatible with the application client . In one embodiment, the document is a Multipurpose Internet Mail Extensions (MIME) or a secure MIME (S\/MIME) document. In another embodiment, the document is an HTML document containing an ICA web client embedded object HTML tag.","The web browser  subsequently receives the document and attempts to open the document. In one embodiment, if the application client  is not installed on the client , the client  communicates with the application server  to download and install the application client . Upon installation of the application client  or, alternatively, if the application client  has already been installed on the client , the client  launches the application client  to view the document received from the web server  (step ).","Once the application client  is installed and executing on the client , the application server  then executes the application and displays the application on the application client  (step ). In another embodiment, the client  views the document (even before launching the application client ) and uses the information in the document to obtain the GUI application from the application server . In this embodiment, the display of the GUI application includes the installation and execution of the application client . Moreover, the viewing of the document may be transparent to the user of the client . For example, the client  may receive the document from the web server  and interpret the document before automatically requesting the GUI application from the application server .","Authentication to the application server  can be done in any number of ways. For example, the user can be required to provide a password that the application server  verifies is correct. In other embodiments, a \u201cticket authority\u201d generates one or more tickets for use by the client  to authenticate the client  to the application server .","In one embodiment, an email is sent to potential service users directing the user to view the web service directory . For instance, if an organization updates the web service directory  and consequently wants to direct users to the company's update, the organization may send an email to potential service users to advertise the update.","Thus, the application client  provides service-based access to published applications, desktops, desktop documents, and any other application that is supported by the application client . Examples of applications that the application client  can provide access to include, but are not limited to, the WINDOWS desktops, WINDOWS documents such as MICROSOFT EXCEL, WORD, and POWERPOINT, all of which were developed by Microsoft Corporation of Redmond, Wash., Unix desktops such as SUN SOLARIS developed by Sun Microsystems of Palo Alto, Calif., and GNU\/Linux developed by Red Hat, Inc. of Durham, N.C.","An organization or firm using a corporate portal, such as XPS developed by Citrix Systems, Inc. of Fort Lauderdale, Fla., to provide users (e.g., employees, suppliers, partners, and customers) with a collection of information associated with the organization or firm may benefit from the publishing of GUI applications. In more detail and in some embodiments, the computer system  supports role-based access control for additional security. A role describes a particular group of users who can access certain content and applications within the portal. As users log onto the portal, the presentation they see is generated depending upon their roles.","By defining roles, a portal administrator can control and present information that is most relevant to the group's job function. Thus, the computer system  can provide users having a certain role access to particular GUI applications (and\/or application information). Moreover, the computer system  may support subscription-based access to GUI applications (and\/or application information) where, for example, a customer pays a subscription fee each month to access published GUI applications.","For example, an employee of an organization creates a report of results of a test conducted over a six month period in a spreadsheet program, such as \u201cSpreadsheet X\u201d (e.g., MICROSOFT EXCEL), using a desktop computer. The desktop has the most current version of Spreadsheet X available, which was the version used to create the report. The employee then departs on a business trip. Before leaving, the employee knows that, upon return from the business trip, the employee has to present the report to the organization's customer (e.g., another organization) at the customer's site. Thus, the employee saves the report onto a disk before his departure. Upon return, the employee travels to the customer's site. The employee then realizes that the customer's machines only support a previous version of Spreadsheet X. Because the employee used some of the new features of the latest version of Spreadsheet X in the report, the employee would prefer not to use an earlier version of the software.","The developer of Spreadsheet X recently released the latest version of Spreadsheet X. To attract customers and increase the user-base of Spreadsheet X, the developer publishes Spreadsheet X on the web service directory . For instance, the developer's application server  transmits Spreadsheet X and web service publishing information about Spreadsheet X (e.g., developer's name, web address of developer's application server ) to the content server . The content server  uses this information to create a service publishing request for the Spreadsheet X, such as \u201chttp:\/\/web-server\/dynamic-component\/SpreadsheetX=987654321,\u201d stores an associated SAP entry in a local database (i.e., persistent mass storage ), and publishes the service publishing request in the web service directory .","Instead of traveling back to his office and wasting valuable time, the employee can use the customer's computer (i.e., the client ) to display the latest version of Spreadsheet X on the customer's computer for his presentation. First, the employee connects the customer's computer to the web. Once connected, the employee queries the content server  for the current version of Spreadsheet X. The customer's computer then receives the associated SAP, which is the address of the publishing server plug-in , from the content server . The customer's computer then communicates with the publishing server plug-in  (using the SAP received from the content server ) to obtain a document containing information to retrieve the published application. To open the document, the customer's computer launches the ICA client  and subsequently interprets the document. Using the information in the document, the customer's computer establishes a communication session with the application server  to view the latest version of Spreadsheet X using the ICA client . Thus, the employee can present the test data using the most current version of Spreadsheet X. Alternatively, the employee can only access the Spreadsheet X if the organization subscribes to the published application service.","Having described certain embodiments of the invention, it will now become apparent to one of skill in the art that other embodiments incorporating the concepts of the invention may be used. Therefore, the invention should not be limited to certain embodiments, but rather should be limited only by the spirit and scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The advantages of the invention described above, together with further advantages, may be better understood by referring to the following description taken in conjunction with the accompanying drawings. In the drawings, like reference characters generally refer to the same parts throughout the different views. Also, the drawings are not necessarily to scale, emphasis instead generally being placed upon illustrating the principles of the invention.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 3","FIG. 2"]}]},"DETDESC":[{},{}]}
