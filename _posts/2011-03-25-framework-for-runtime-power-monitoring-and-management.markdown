---
title: Framework for runtime power monitoring and management
abstract: Systems and methods of managing power in a computing platform may involve monitoring a runtime power consumption of two or more of a plurality of hardware components in the platform to obtain a plurality of runtime power determinations. The method can also include exposing one or more of the plurality of runtime power determinations to an operating system associated with the platform.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09152218&OS=09152218&RS=09152218
owner: Intel Corporation
number: 09152218
owner_city: Santa Clara
owner_country: US
publication_date: 20110325
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["1. Technical Field","Embodiments generally relate to the monitoring and management of power consumption in computing platforms. In particular, embodiments relate to operating system runtime techniques for determining transient power at a hardware component level.","2. Discussion","Conventional power management techniques for computing platforms may include operating system (OS) battery monitoring and energy profiling solutions that provide for generic functionality adjustments (e.g., disabling audio\/CD\/DVD, dimming displays) to extend battery life. These approaches are typically triggered by low battery life conditions and can therefore effectively involve decision making with limited information and granularity. For example, battery consumption determinations may not provide sufficient information regarding individual hardware components to make appropriate power management decisions at the OS level.","Embodiments may include an apparatus having logic to monitor a runtime power consumption of two or more of a plurality of hardware components in a platform to obtain a plurality of runtime power determinations. The logic can also expose one or more of the plurality of runtime power determinations to an operating system associated with the platform.","Embodiments may also include a non-transitory computer readable storage medium including a set of stored instructions which, if executed by a processor, cause a computer to identify a plurality of runtime power determinations, wherein two or more of the runtime power determinations are to correspond to a hardware component of a platform. The instructions can also assign relative priorities to one or more processes based on the plurality of runtime power determinations, and schedule the one or more processes based on the relative priorities.","Other embodiments can include a computing system having a plurality of hardware components, wherein at least one of the hardware components is a processor, and logic to monitor a runtime power consumption of two or more of the plurality of hardware components to obtain a plurality of runtime power determinations. The logic may also expose one or more of the plurality of runtime power determinations to an operating system associated with the computing system. In addition, the computing system can include a non-transitory computer readable storage medium having a set of stored operating system instructions which, if executed by the processor, cause the computing system to identify the plurality of runtime determinations and map the plurality of runtime determinations to one or more processes. The instructions may also assign relative priorities to the one or more processes based on the plurality of runtime power determinations and schedule the one or more processes based on the relative priorities.","Other embodiments may involve a method in which a runtime power consumption of two or more of a plurality of hardware components in a platform is monitored to obtain a plurality of runtime power determinations. The method can also provide for exposing one or more of the plurality of runtime power determinations to an operating system associated with the platform.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1","b":["10","12","10","14","10","12"]},"The OS\/SW portion , on the other hand, could be implemented in executable software of a computing system as a set of OS-related logic instructions (e.g., kernel device driver, application program interface\/API, inter-processor communication\/IPC instructions) stored in a machine or computer readable storage medium of a memory such as random access memory (RAM), read only memory (ROM), programmable ROM (PROM), flash memory, etc. For example, computer program code to carry out operations shown in the OS\/SW portion  may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages.","Processing block  provides for determining the power domain mapping of a computing system at a boot time of the computing system (e.g., when the computing system boots up). In one example, the power domain mapping is made on a per voltage rail basis. Thus, block  could involve identifying a voltage rail for each hardware component\/subsystem of the platform. One approach to the identification might include reading a table such as a simple firmware interface (SFI) table from a memory of the computing system at boot time. An example of a structure for such a table is shown in Table I below.",{"@attributes":{"id":"p-0017","num":"0016"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE I"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"Field","Field",{}]},{"entry":["Field Name","Offset","Length","Notes"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["INFO_TABLE_ID","0","4","Used to positively"]},{"entry":[{},{},{},"identify this table"]},{"entry":["TABLE_LENGTH","4","4","Length of the entire"]},{"entry":[{},{},{},"table including the header."]},{"entry":[{},{},{},"This field can be used to"]},{"entry":[{},{},{},"determine the number of"]},{"entry":[{},{},{},"subsystem mapping blocks"]},{"entry":[{},{},{},"present."]},{"entry":["REVISION","8","1","Revision number"]},{"entry":[{},{},{},"for this table"]},{"entry":["CHECKSUM","9","1","Entire table,"]},{"entry":[{},{},{},"including the checksum"]},{"entry":[{},{},{},"field, adds to zero in order"]},{"entry":[{},{},{},"to be considered valid."]},{"entry":["DEV_INFO_BLOCK","10","N","An array of"]},{"entry":[{},{},{},"subsystem-to-voltage rail"]},{"entry":[{},{},{},"mappings. The number of"]},{"entry":[{},{},{},"blocks can be determined"]},{"entry":[{},{},{},"by using the"]},{"entry":[{},{},{},"TABLE_LENGTH field."]},{"entry":["SUBSYS_NUM","0","4","Indicates the subsystem #"]},{"entry":["SUBSYS_VOLT_NUM","2","4","Indicates the voltage rail #"]},{"entry":[{},{},{},"corresponding to the above"]},{"entry":[{},{},{},"subsystem #"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"The table can be used by the OS\/SW to construct a hierarchical representation (e.g., tree diagram) of the platform specific power distribution. As will be discussed in greater detail, the tree diagram may also include information regarding the platform specific clock distribution. Accordingly, the platform specific power\/clock distributions may be used by the OS\/SW at runtime to obtain information regarding hardware component (e.g., subsystem) specific power consumption.","Block  provides for monitoring the runtime power consumption of each of a plurality of hardware components in a platform\/computing system to obtain a plurality of runtime power determinations. The hardware components\/subsystems could include processors, controllers, chipset components, programmable logic arrays (PLAs), memory chips, network chips, audio devices, multimedia devices, or other logical hardware blocks constituting a power domain from the perspective of the power delivery module of the platform. As already noted, the monitoring of runtime power consumption may be conducted on a per voltage rail basis, wherein the power consumption of each voltage rail is associated with the hardware component(s)\/subsystem(s) that the particular voltage rail services.","For example,  shows a rail monitoring module  that measures the runtime power draw on a voltage rail (V) provided by a battery . In the illustrated example, the voltage across a resistor R(\u201cRBATT_SNS+\u201d and \u201cRBATT_SNS\u2212\u201d) is sampled by a conditioning circuit , amplified by an amplifier , and fed to a coulomb counting analog to digital converter (ADC) engine  to determine the current through a sensing resistor (\u201cR\u201d) and the associated runtime power consumption for the hardware components associated with the voltage rail V. The output of the ADC engine  may be provided to an accumulator , which can accumulate the measured power drawn for a time period obtained from an interface  (e.g., counting clear value, \u201cCCLEAR\u201d) to an OS associated with the platform. In one example, the interface  includes a set of registers  (-), wherein the OS or related software component may write the accumulation time period as well as other control information (e.g., coulomb counting enable value, \u201cCCEN\u201d) to a control register . The measured power drawn can be written to a result register and used by a comparator  to write interrupt information (e.g., coulomb counting interrupt value, \u201cCCINT\u201d) to an interrupt register as appropriate.","Returning now to , illustrated block  provides for exposing the runtime power determinations to an OS associated with the platform. As already noted, the exposure of the runtime power determinations could involve the use of one or more registers  () that are accessible either directly or indirectly by the OS. The runtime power determinations are identified by the OS\/SW at illustrated block  based on the power domain mapping previously determined at block . In one example, block  uses the information contained in the table to collect the runtime power determinations from one or more result registers in the computing system. For example, the OS\/SW portion  might parse through the DEV_INFO_BLOCK field array to identify the voltage rail that corresponds to an input\/output (I\/O) hardware block of a chipset, and read the measured power drawn from the result register corresponding to the identified voltage rail. Such a process can be repeated for each hardware component\/subsystem in the computing platform to identify a plurality of runtime power determinations.","The OS\/SW can read the appropriate registers either directly (e.g., via an application programming interface\/API) or indirectly (e.g., via an inter-process communication\/IPC protocol). For example, the power domain framework API below could be used to obtain runtime power determinations as well as to conduct power throttling.","Clock\/Power Domain Framework & API","get_power_info( )\u2014get subsystem voltage rail information for a particular subsystem.","get_power( )\u2014get power information for a particular subsystem voltage rail.","enable_power( )\u2014enable power on a particular subsystem voltage rail.","disable_power( )\u2014disable power on a particular subsystem voltage rail.","The HW\/FW portion  of the method  might also provide for identifying a clock domain in the platform for each of the plurality of hardware components to obtain a plurality of clock determinations, and exposing the plurality of clock determinations to the OS. Thus, in addition to the above power domain framework, a clock framework API such as the API below might be used to access the clock determinations and conduct clock throttling.","clk_get ( )\u2014lookup and obtain a reference to a clock producer.","clk_enable ( )\u2014inform the system when the clock source should be running.","clk_disable ( )\u2014inform the system when the clock source is no longer required.","clk_set_parent ( )\u2014set the parent clock source for this clock.","clk_get_parent ( )\u2014get the parent clock source for this clock.","clk_get_sys ( )\u2014get a clock based upon the device name.","IPC Interface","If there is no direct access to the result registers from the host processor, a generic inter-process communication (IPC) interface of the OS might be used to communicate with a hardware component\/firmware that does have access. For example, the IPC interface framework below could be used to obtain runtime power determinations in an architecture in which the registers are contained on a power delivery mixed signal integrated circuit (MSIC) of a mobile Internet device (MID).","mid_ioread8 (u16 addr, u8*data)\u2014This may function read one byte of data from a specified MSIC register address.","mid_ioread16 (u32 addr, u16*data)\u2014This can function read two bytes of data from a specified MSIC register address. The argument passed may contain two 16 bit MSIC addresses packed in a 32 bit word.","mid_ioread32 (u64 addr)\u2014This function could read four bytes of data from a specified MSIC register address. The argument passed can contain four 16 bit MSIC addresses packed in a 64 bit word. On success, it may fill the caller's u32 data-type with 4 bytes of data packed as u32.","mid_ioread64 (u64 addr1, u64 addr2, u64*data)\u2014This can function read eight bytes of data from a specified MSIC register addresses. The argument passed may contain eight 16 bit MSIC addresses packed in two 64 bit words each containing eight addresses. On success, it might fill the caller's data type with 8 bytes of data packed as u64. The first 32 bit may contain data corresponding to an address passed as the first argument and the second 32 bit data returned can correspond to an address passed as the second argument.","Thus, with the above infrastructure in place, OS components can obtain complete knowledge of which hardware component in a computing system is consuming how much power at runtime. Illustrated block  provides for mapping the runtime power determinations to one or more active and\/or pending processes. Block  can assign relative priorities to the one or more processes based on the plurality of runtime power determinations, wherein the priority assignments could be made under the authorization and\/or direction of a user of the computing system (e.g., in conjunction with user prompts\/menus). Moreover, block  may schedule the one or more processes based on the relative priorities. Thus, the illustrated approach can enable the creation and implementation of application\/process prioritization policies such as prioritizing email traffic over browsing, or audio playback over a background process that is synchronizing folders, based on highly granular runtime power consumption information. Moreover, the OS\/SW portion  could conduct power and\/or clock throttling activities (e.g., write throttle values to control registers) based on the runtime power determinations and clock determinations.","Turning now to , a computing system  is shown. The computing system  could be part of a mobile platform such as a laptop, personal digital assistant (PDA), mobile Internet device (MID), wireless smart phone, media player, imaging device, etc., or any combination thereof. The computing system  could alternatively include a fixed platform such as a desktop personal computer (PC) or a server. Generally, the computing system  may include a processor , system memory , a platform controller hub (PCH) , mass storage , and a MSIC power delivery module . In particular, the illustrated MSIC power delivery module  generates central processing unit (CPU) voltage rails  and external voltage rails . The CPU voltage rails  can be supplied to one or more cores  of the processor , and the external voltage rails  can be supplied to various other hardware blocks on the processor  and the PCH . A PMU  of the processor  may perform on die clock and\/or power gating of the hardware blocks of the to processor , whereas a PMU  of the PCH  can perform on die clock and\/or power gating of the hardware blocks of the PCH .","In the illustrated example, the power delivery module  includes rail monitoring logic  that is configured to monitor the runtime power consumption of each of a plurality of hardware components in the computing system  to obtain a plurality of runtime power determinations. Thus, the rail monitoring logic  may include functionality such as the rail monitoring module  (), already discussed, wherein power delivery registers  containing the runtime power determinations can be exposed to an operating system (OS)  executing on the computing system . The power delivery registers  may reside anywhere within the computing system .","The OS  may be implemented as a set of logic instructions stored in a non-transitory computer readable storage medium such as the mass storage  for execution by the processor  or other system processor. The mass storage  may include a hard disk drive (HDD), ROM, optical disk, flash memory, etc. Execution of the OS  might provide for a closed telephony stack configured to support off-platform wireless communication (e.g., W-CDMA (UMTS), CDMA2000 (IS-856\/IS-2000), etc.) in a mobile platform, for desktop functionality (e.g., Windows\u00ae 7) in a PC system, and so on. The illustrated OS  includes an OS power management module , a scheduler  and a user level power profiler .","At boot time, the illustrated power management module  reads a table that identifies a voltage rail for each hardware component in the computing system  and constructs a hierarchical representation (e.g., tree diagram)  based on the platform specific power distribution and any available information regarding the distribution of clock domains in the computing system . The table could be retrieved from the mass storage , BIOS (basic input\/output system) memory (not shown) or elsewhere in the computing system . In addition, the power management module  can access the power delivery registers  either directly (e.g., via an API) or indirectly (e.g., via an IPC function) to identify a plurality of runtime power determinations and conduct power and\/or clock throttling activities.","The power management module  may also map the runtime power determinations to one or more processes and inform a user of the computing system  of the results of the mapping operation via the user level power profiler . In fact, the power management module  and user level power profiler  may enable a substantially more robust and intelligent \u201cbattery monitor\u201d functionality that provides the user with a more granular level of information (e.g., power consumption per component, per process, per application). In response to the user input through the power profiler  (or based solely on the runtime power determinations without user input), the power management module  can assign relative priorities to the various processes, and use the scheduler  to schedule the processes based on the relative priorities. Thus, process scheduling at the OS level can take on an additional dimension\u2014power awareness. For example, processes that account for lesser CPU\/resource time might be rewarded for being power efficient, and the scheduler  may take these rewards\/bonus points into account when it is scheduling tasks for processors.","Embodiments described herein are applicable for use with all types of semiconductor integrated circuit (\u201cIC\u201d) chips. Examples of these IC chips include but are not limited to processors, controllers, chipset components, programmable logic arrays (PLAs), memory chips, network chips, and the like. In addition, in some of the drawings, signal conductor lines are represented with lines. Some may be thicker, to indicate more constituent signal paths, have a number label, to indicate a number of constituent signal paths, and\/or have arrows at one or more ends, to indicate primary information flow direction. This, however, should not be construed in a limiting manner. Rather, such added detail may be used in connection with one or more exemplary embodiments to facilitate easier understanding of a circuit. Any represented signal lines, whether or not having additional information, may actually comprise one or more signals that may travel in multiple directions and may be implemented with any suitable type of signal scheme, e.g., digital or analog lines implemented with differential pairs, optical fiber lines, and\/or single-ended lines.","Example sizes\/models\/values\/ranges may have been given, although embodiments of the present invention are not limited to the same. As manufacturing techniques (e.g., photolithography) mature over time, it is expected that devices of smaller size could be manufactured. In addition, well known power\/ground connections to IC chips and other components may or may not be shown within the figures, for simplicity of illustration and discussion, and so as not to obscure certain aspects of the embodiments of the invention. Further, arrangements may be shown in block diagram form in order to avoid obscuring embodiments of the invention, and also in view of the fact that specifics with respect to implementation of such block diagram arrangements are highly dependent upon the platform within which the embodiment is to be implemented, i.e., such specifics should be well within purview of one skilled in the art. Where specific details (e.g., circuits) are set forth in order to describe example embodiments of the invention, it should be apparent to one skilled in the art that embodiments of the invention can be practiced without, or with variation of, these specific details. The description is thus to be regarded as illustrative instead of limiting.","The term \u201ccoupled\u201d may be used herein to refer to any type of relationship, direct or indirect, between the components in question, and may apply to electrical, mechanical, fluid, optical, electromagnetic, electromechanical or other connections. In addition, the terms \u201cfirst\u201d, \u201csecond\u201d, etc. may be used herein only to facilitate discussion, and carry no particular temporal or chronological significance unless otherwise indicated.","Those skilled in the art will appreciate from the foregoing description that the broad techniques of the embodiments of the present invention can be implemented in a variety of forms. Therefore, while the embodiments of this invention have been described in connection with particular examples thereof, the true scope of the embodiments of the invention should not be so limited since other modifications will become apparent to the skilled practitioner upon a study of the drawings, specification, and following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The various advantages of the embodiments of the present invention will become apparent to one skilled in the art by reading the following specification and appended claims, and by referencing the following drawings, in which:",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
