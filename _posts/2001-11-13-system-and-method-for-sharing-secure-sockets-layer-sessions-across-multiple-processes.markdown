---
title: System and method for sharing secure sockets layer sessions across multiple processes
abstract: The invention is a system and method for sharing secure sockets layer (SSL) sessions across multiple processes, comprising: at least one SSL wrapper receiving a request for a shared SSL session from an application program; an SSL daemon process receiving at least one request for a shared SSL session from an SSL wrapper; the SSL daemon calling at least one SSL session; the SSL daemon receiving at least one return code from at least one called SSL session; at least one SSL wrapper receiving at least one return code from the SSL daemon; and at least one SSL wrapper passing a return code to the return code's requesting application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07073181&OS=07073181&RS=07073181
owner: International Business Machines Corporation
number: 07073181
owner_city: Armonk
owner_country: US
publication_date: 20011113
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED EMBODIMENT OF THE INVENTION"],"p":["This invention relates to secure data communications and more specifically the sharing of secure communications sessions across multiple processes.","A computer program being executed on a computer is known as a computer process and may simply be referred to as a process. Processes require mechanisms for exchanging data among them. These mechanisms are known as inter process communications mechanisms (IPCs). One category of IPC, known as sockets, was initially developed in the early 1980s at the university of California at Berkeley for use with computer systems utilizing the UNIX computer operating system. Sockets technology has since been adopted by many computer software and operating system developers including IBM. Exponential increases in the use of computer networks and the expansion of public networks such as the Internet have resulted in a need for secure data communications. In response, Netscape Communications developed a secure IPC mechanism known as Secure Sockets Layer (SSL) (see U.S. Pat. No. 5,657,390). SSL is responsible for authenticating computer systems involved in the exchange of information and for encrypting and decrypting the data they exchange. SSL has been revised on at least two occasions and a derivative implementation, known as Transport Layer Security version 1 (\u201cTLS\u201d), is defined in Internet Engineering Task Force (\u201cIETF\u201d) Request for Comments (\u201cRFC\u201d) 2246.","SSL operates as an intermediary between an application process, such as a web browser, and a TCP\/IP stack. TCP\/IP is a combination of communications protocols used to route data over a data network and ensure its delivery. When a computer is enabled to transport data using TCP\/IP the computer is referred to as having a TCP\/IP stack. SSL sessions and SSL enabled processes exchange messages using a predetermined message format known as SSL Application Programming Interface (\u201cAPI\u201d). The messages exchanged are referred to as API calls. Where several instances of SSL are simultaneously executed on a computer, each instance of SSL is referred to as an SSL session.","Because an SSL session is generally tied to the application process that requested its services and terminating an application process terminates the corresponding SSL session, individual processes requiring SSL services must initiate separate SSL sessions. Current SSL implementations generally require that an application process remain un-terminated until its SSL session has completed communications. As a consequence, available computer resources must be sufficient to maintain all unterminated processes regardless of whether or not those processes are involved in active communications. Computer resources include processor time, volatile and non-volatile memory, and data throughput bandwidth. As the number of requesting processes and SSL sessions grow, the depletion of available computer resources creates the danger of computer system failure. These circumstances are often encountered in high-volume distributed computing environments including those with high numbers of concurrent transactions such as credit card transaction authorization systems. The possibility of computer system failure is heightened further where individual applications utilize multiple requesting processes or where computer systems execute multiple applications concurrently.","While such concerns may be combated by strategies such as increasing overall data throughput at the TCP\/IP transport level, the present invention provides a solution that allows for SSL session sharing and makes more efficient use of existing computer resources.","The invention is a system and method for sharing secure sockets layer (SSL) sessions across multiple processes, comprising: at least one SSL wrapper receiving a request for a shared SSL session from an application program; an SSL daemon process receiving at least one request for a shared SSL session from an SSL wrapper; the SSL daemon calling at least one SSL session; the SSL daemon receiving at least one return code from at least one called SSL session; at least one SSL wrapper receiving at least one return code from the SSL daemon; and at least one SSL wrapper passing a return code to the return code's requesting application program.","The above-described and other features and advantages of the present invention will be appreciated and understood by those skilled in the art from the following detailed description, drawings, and appended claims.","Although this exemplary detailed embodiment suggests the utilization of SSL sessions for secured communications, it is understood by one of ordinary skill in the art that any known alternative secured communications mechanism may be used. Alternative secured communications mechanisms include existing, future, and derivative implementations of SSL such as TLS. Similarly, although this exemplary detailed embodiment of the invention suggests the utilization of TCP\/IP for transporting data across a data network, it is understood by one of ordinary skill in the art that any alternative transport protocols known in the art may be used. Alternative protocols may also include existing, future, and derivative implementations of TCP\/IP.","One aspect of the current invention is to enable SSL sessions to be shared by multiple processes on computer systems which do not otherwise support SSL session sharing and on computer systems lacking operating system or kernel-based SSL session sharing. Another aspect of the invention is to provide a system and method for sharing SSL sessions that requires no inter process communications (IPC) except communications using the SSL application programming interface (API), thereby eliminating the need for applications to be reprogrammed to function with additional IPCs. Yet another aspect of the invention is to provide a system and method for sharing SSL sessions across multiple processes which enables a shared SSL session to remain active and available for use after the application process which initially requested the shared SSL session has been terminated.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIGS. 1 and 2","FIG. 1"],"b":["250","9","10","11","9","10","9","10"]},"If an alternative secure communications mechanism other than SSL is used then the alternative secure communications daemon would communicate with alternative secure communications wrappers and alternative secure communications sessions using the alternative secure communications mechanism's application programming interface (API).","A daemon process  may own or manage multiple shared sessions , the number of which is limited by available system memory. Furthermore, the maximum number of simultaneous API calls allotted to a given daemon process is limited by the maximum allowable number of simultaneous threads per process as determined by the host computer system. Where the desired number of concurrently executing API calls exceeds this limit, additional bandwidth may be achieved by incrementing the host computer system's maximum allowable thread setting and\/or by executing multiple daemon processes.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 2","FIG. 1"],"b":["260","260","5","6","7","8","5","5","7","8","5","5","5"]},"The wrapper process  includes program code for receiving requests for SSL sessions, for determining whether the request is for a shared SSL session or an unshared SSL session, for passing requests for unshared SSL sessions to the unshared SSL session  tied to the application process , and for passing requests for shared SSL sessions to a daemon process. The wrapper process  also includes program code for communicating with application process , daemon processes, and unshared sessions  via SSL API 270 calls.","In order for an application process  to indicate the type of SSL session desired, the application process  must include with the request an input parameter indicating the desired SSL session type. The request may also include additional input parameters, such as the data that the application process  is requesting to be sent over a data network via an SSL session.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3","b":["60","6","19","70","90","70","6","5","23","6","23"]},"When the input parameter indicates a shared session is requested, the wrapper process  passes the SSL_write API call  and any accompanying input parameters to a daemon process . If a shared session already exists the daemon process  passes the SSL_write API call  and accompanying input parameters to an existing shared session . The shared session  processes the SSL_write API call, and encrypts the accompanying data. The shared session reformats the SSL_write API call into a socket API call understandable by the TCP\/IP stack  and passes a reformatted socket write API call  and the encrypted data to the TCP\/IP stack . The TCP\/IP stack  may be tied to the daemon or kernal-based, as is determined by the host computer system. The TCP\/IP stack  packages the encrypted data according to the TCP\/IP protocol and sends the encrypted data  over the data network .","The TCP\/IP stack passes a first return code  to the shared session . The shared session generates a second return code  and passes the second return code  to the daemon process . The daemon process  passes the second return code  to the wrapper process . The wrapper process  passes the second return code  to the application process .","The application process  passes an SSL_read API call  to the wrapper process . The purpose of the SSL_read API call is to direct the SSL session and TCP\/IP stack to await incoming data. The wrapper process  passes the SSL_read API call  to the SSL daemon process . The daemon process  passes the SSL_read API call  to the SSL session . The shared session  reformats the SSL_read API call into a socket read API call understandable by the TCP\/IP stack  and passes the reformatted socket read API call  to the TCP\/IP stack . If incoming data is received by the TCP\/IP stack before the TCP\/IP stack receives the socket read APT call, the incoming data is held by the TCP\/IP stack until the TCP\/IP stack receives the socket read API call.","When packaged encrypted data  is received by the TCP\/IP stack  from the data network , the TCP\/IP stack  unpacks the encrypted data and the encrypted data  is retrieved by the shared session . The shared session  decrypts the data and the decrypted data  is retrieved by the daemon process . The decrypted data  is retrieved from the daemon process  by the wrapper process . The application process  retrieves the decrypted data  from the wrapper process . The procedure is repeated for additional application processes as is visually depicted in .",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3","b":["90","19","43","18","43","19"],"sub":"13 "},"When the input parameter indicates an unshared session is requested, the wrapper process  passes the SSL_write API call  and any accompanying input parameters to the unshared session . The unshared session  processes the SSL_write API call and encrypts any accompanying data. The unshared session  reformats the SSL API call into a socket API call understandable by the TCP\/IP stack  and passes the reformatted socket write API call  and the encrypted data to the TCP\/IP stack . The TCP\/IP stack  may be tied to the daemon or kernal-based as is determined by the host computer system. The TCP\/IP stack  packages the encrypted data according to the TCP\/IP protocol and sends the encrypted data  over the data network .","The TCP\/IP stack passes a first return code  to the unshared session . The shared session generates a second return code  and passes the second return code  to the wrapper process . The wrapper process  passes the second return code  to the application process .","The application process  passes an SSL_read API call  to the wrapper process . The wrapper process  passes the SSLread API call  to the SSL session . The unshared session  reformats the SSL_read API call into a socket read API call understandable by the TCP\/IP stack  and passes the reformatted socket read API call  to the TCP\/IP stack . If incoming data is received by the TCP\/IP stack before the TCP\/IP stack receives the socket read API call, the incoming data is held by the TCP\/IP stack until the TCP\/IP stack receives the socket read API call.","When packaged encrypted data  is received by the TCP\/IP stack  from the data network , the TCP\/IP stack  unpacks the encrypted data and the encrypted data  is retrieved by the unshared session . The unshared session  decrypts the data and the decrypted data  is retrieved by the wrapper process . The application process  retrieves the decrypted data  from the wrapper process .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIGS. 4","FIG. 4"],"i":["a ","b ","a"],"b":["4","150","152","154"]},"If an application process has requested a shared SSL session, the SSL wrapper process passes the SSL_write API call to an SSL daemon process . The SSL daemon process passes the SSL_write API call to a shared SSL session . The shared SSL session encrypts the data  and passes the encrypted data to a TCP\/IP stack . The TCP\/IP stack packages and sends the encrypted data over a data network . As shown in , the SSL session generates a return code and passes the return code to the SSL daemon process which in turn passes a second return code to the SSL wrapper process . The SSL wrapper process passes a second return code to the application process .","The application process passes an SSL_read API call to the wrapper, the wrapper passes the SSL_read API call to the daemon process, the daemon process passes the SSL_read API call to the shared SSL session, the shared SSL session reformats the SSL_read API call into a socket read API call and passes the socket read API call to the TCP\/IP stack .","Upon receipt of encrypted data over the data network , the TCP\/IP stack passes the encrypted data to the shared SSL session . The SSL session decrypts the data  and passes the decrypted data to the SSL daemon process. . The SSL daemon process passes the decrypted data to the SSL wrapper process  which in turn passes the decrypted data to the application process.","Returning to : If an SSL wrapper process receives a request for a separate unshared SSL session, the wrapper process passes the SSL_write API call and any accompanying data\/input parameters to an SSL session tied to the application process . The SSL session encrypts the data  and passes the encrypted data to the TCP\/IP stack . The TCP\/IP stack packages and sends the encrypted data over a data network . The SSL wrapper receives a return code from the SSL session and passes the return code to the application process .","In , the application process passes an SSL_read APT call to the wrapper, the wrapper passes the SSL_read API call to the unshared SSL session, the unshared SSL session reformats the SSL_read API call into a socket read API call and passes the socket read API call to the TCP\/IP stack .","Upon receipt of encrypted data over the data network , the TCP\/IP stack passes the encrypted data to the unshared SSL session . The unshared SSL session decrypts the encrypted data  and passes the decrypted data to the SSL wrapper process . The SSL wrapper process passes the decrypted data to the application process .","The description applying the above embodiments is merely illustrative. As described above, embodiments in the form of computer-implemented processes and apparatuses for practicing those processes may be included. Also included may be embodiments in the form of computer program code containing instructions embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other computer-readable storage medium, wherein, when the computer program code is loaded into and executed by a computer, the computer becomes an apparatus for practicing the invention. Also included may be embodiments in the form of computer program code, for example, whether stored in a storage medium, loaded into and\/or executed by a computer, or as a data signal transmitted, whether a modulated carrier wave or not, over some transmission medium, such as over electrical wiring or cabling, through fiber optics, or via electromagnetic radiation, wherein, when the computer program code is loaded into and executed by a computer, the computer becomes an apparatus for practicing the invention. When implemented on a general-purpose microprocessor, the computer program code segments configure the microprocessor to create specific logic circuits.","While the invention has been described with reference to exemplary embodiments, it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted for elements thereof without departing from the scope of the invention. In addition, many modifications may be made to adapt a particular situation or material to the teachings of the invention without departing from the essential scope thereof. Therefore, it is intended that the invention not be limited to the particular embodiments disclosed for carrying out this invention, but that the invention will include all embodiments falling within the scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 4","i":["a ","b "],"b":"4"}]},"DETDESC":[{},{}]}
