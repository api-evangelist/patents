---
title: User interface with context-based communication using media prediction
abstract: A method, system, computer system, and computer program product provide a context-sensitive user interface. The context in which the user interface operates is used to predict a media type of a communication channel that can be used for communicating via the user interface. Examples of media types include telephone, web chat, and web collaboration. The communication is facilitated according to the media type predicted. For example, an object of the user interface can be activated to enable communication according to the media type, or the user interface can initiate the communication via the communication channel. The user interface can be used for communicating with multiple communication channels of different media types. The context can include data presented by the user interface, data entered using the user interface, data selected using the user interface, and an action performed using the user interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07788679&OS=07788679&RS=07788679
owner: Siebel Systems, Inc.
number: 07788679
owner_city: San Mateo
owner_country: US
publication_date: 20030610
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","COPYRIGHT NOTICE","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","Other Embodiments"],"p":["This application is a continuation of application Ser. No. 09\/823,531, filed on Mar. 31, 2001, entitled \u201cUser Interface for Multi-Channel Communication\u201d and naming Mingte Chen, Anil K. Annadata, and Kuang Huang as inventors, the parent application being incorporated herein by reference in its entirety.","This application relates to application Ser. No. 09\/823,590, filed on Mar. 31, 2001, entitled \u201cSystem and Method for Multi-Channel Communications Queuing\u201d and naming Anil K. Annadata, Wai H. Pak, and Rohit Bedi as inventors, the application being incorporated herein by reference in its entirety.","This application relates to application Ser. No. 09\/823,770, filed on Mar. 31, 2001, entitled \u201cSystem and Method for Maintaining Real-Time Agent Information for Multi-Channel Communication Queuing\u201d and naming Anil K. Annadata, Wai H. Pak, and Mingte Chen as inventors, the application being incorporated herein by reference in its entirety.","This application relates to application Ser. No. 09\/823,828, filed on Mar. 31, 2001, entitled \u201cAdaptive Communication Application Programming Interface\u201d and naming Mingte Chen, Anil K. Annadata, and Leon Chan as inventors, the application being incorporated herein by reference in its entirety.","This application relates to application Ser. No. 09\/823,835, filed on Mar. 31, 2001, entitled \u201cMulti-Channel Media Independent Server\u201d and naming Mingte Chen, Anil K. Annadata, and Leon Chan as inventors, the application being incorporated herein by reference in its entirety.","This application relates to application Ser. No. 09\/823,769, filed on Mar. 31, 2001, entitled \u201cConfigurable Media-Independent Server\u201d and naming Anil K. Annadata and Mingte Chen as inventors, the application being incorporated herein by reference in its entirety.","This application relates to application Ser. No. 09\/823,678, filed on Mar. 31, 2001, entitled \u201cAn Extensible Interface for Inter-Module Communication\u201d and naming Wai H. Pak as inventor, the application being incorporated herein by reference in its entirety.","Portions of this patent application contain materials that are subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document, or the patent disclosure, as it appears in the Patent and Trademark Office file or records, but otherwise reserves all copyright rights whatsoever.","1. Field of the Invention","The present invention relates to communication using multiple communication channels of different media types.","2. Description of the Related Art","In today's emerging technological and information world, companies are interacting with their customers, potential customers and other contacts through a wide variety of different communication channels. Such communication channels include face-to-face, telephone, fax, email, voicemails, wireless communication, Internet information inquiries via call me now and call me later, Internet collaborative sessions, paging and short messaging services. With all these communication channels, companies are faced with managing each customer interaction while meeting service levels and maximizing customer satisfaction. In addition, companies are faced with optimally staffing and training their workforce to deal with customers through these communication channels whether through their customer support center(s), telebusiness organizations, or their sales, marketing, and service professionals.","Currently, many companies have dedicated email inboxes, fax inboxes, and voicemail boxes defined for specific business areas as well as automated call distributors. Employees called agents are assigned to poll and manage the support requests from customers for each communication channel. Combined with the traditional call queues for inbound telephone calls, each agent is tasked with managing his or her work using all these communication channels while not having any visibility to the queue status and priorities of each customer support request and\/or communication channel.","Most communication software is designed to work with a single communication device or type of communication channel. If a company wishes to implement a customer support center where agents can communicate using multiple communication channels of different media types, typically the company must purchase different software products to handle each media type because of the different communication protocols involved. For example, normally an email server is sold separately from software that can receive data via wireless access protocol. Because different products must be purchased, agents must learn to use a different user interface for each media type of the multiple communication channels. Efficiency of an agent typically degrades when he or she must remember different user interfaces for communicating with customers via different media types.","With customer support centers handling very large numbers of customer support requests daily, increasing the efficiency of each agent in responding to each customer request by only seconds can produce enormous cost savings for the customer support center.","Thus, it is desirable to provide a system that includes a universal queue strategy capable of assigning, routing, and queuing work items from multiple channels of communications to an agent having the appropriate skills to respond to the request. The system should enable the agent to view and manage his or her work items for all communication channels. Such a system reduces the response times and increases customer satisfaction, while balancing priorities amongst work items in multiple communication channels.","What is needed is a user interface that allows an agent to receive and respond to customer support requests as efficiently as possible. The user interface should provide a consistent interface independent of the media type of the communication channel. The user interface should enable the agent to receive and respond to events such as customer support requests and send outgoing commands to a communication channel. The user interface should allow the agent to simultaneously work on multiple active work items independently of the media types of the communication channels involved. The user interface should provide the capability for the agent to accept new work items, release completed work items, suspend active work items, and resume suspended work items. The user interface should allow the user to work interactively with the customer for communication channels providing interactive communication, such as communication channels for telephone and web collaboration.","The present invention includes a method, system, computer system, and computer program product that provide a context-sensitive user interface. The context in which the user interface operates is used to predict a media type of a communication channel that can be used for communicating via the user interface. Examples of media types include telephone, web chat, and web collaboration. The communication is facilitated according to the media type predicted. For example, an object of the user interface can be activated to enable communication according to the media type, or the user interface can initiate the communication via the communication channel. The user interface can be used for communicating with multiple communication channels of different media types. The context can include data presented by the user interface, data entered using the user interface, data selected using the user interface, and an action performed using the user interface.","The foregoing is a summary and thus contains, by necessity, simplifications, generalizations and omissions of detail; consequently, those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects, inventive features, and advantages of the present invention, as defined solely by the claims, will become apparent in the non-limiting detailed description set forth below.","The following is intended to provide a detailed description of an example of the invention and should not be taken to be limiting of the invention itself. Rather, any number of variations may fall within the scope of the invention which is defined in the claims following the description.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIGS. 1A through 1D","b":"100"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 1A","b":["100","130","130","130","130","130"]},"In accordance with the present invention, client\/server system  includes a universal queuing (UQ) system  capable of assigning, routing, and queuing work items from multiple channels of communication to an agent having the appropriate skills to respond to a customer support request. The term work item refers to a request from a customer that requires a response from an agent assigned by client\/server system , such as responding to a customer support request in the form of a telephone call, email, fax or other communication of a different media type. A work item can be initiated when an event such as an incoming customer support request arrives or by an agent using a user interface to client\/server system .","Client\/server system  also includes a communication server  that enables agents to use communication channels of different media types to communicate with customers. Communication server  handles events such as the arrival of incoming customer support requests from a channel driver  such as one of channel drivers A, B, and C. Each channel driver  communicates with a communication channel  such as one of communication channels A, B, C and D.","Interaction between UQ system  and communication server  occurs when, for example, communication server  receives and routes an incoming customer request as a work item to UQ system  for assignment to an agent. UQ system  assigns an agent to the work item and sends the work item back to communication server  for communication to the assigned agent.","Web browser client A includes a web browser program such as Microsoft's Internet Explorer running on a client computer system (not shown). The web browser client A communicates with a web server . Application server  in client\/server system  performs functions for and sends information to web browser client A via web server , which provides web pages for web browser client A to display. Web server  can download program instructions, such as Java applet , to the web browser client A to provide additional functionality, such as a user interface.","Web browser client A is shown including a toolbar . One of skill in the art will recognize that other user interfaces providing the functionality of toolbar  can be implemented using a variety of different display formats to interface with multiple communication channels of different media types within the scope of the invention. Toolbar  is presented as part of a user interface.","In one embodiment, application server  of client\/server system  includes object manager , session mode communication server , request mode communication server , inbound communication receiver , UQ system , web server , web server , Enterprise Application Interface (EAI) object manager , and workflow process . In one embodiment, communication between components in application server  is enabled using a suitable inter-process communication protocol in conjunction with transfer control protocol\/Internet protocol (TCP\/IP) as known in the art.","UQ business service  allows communication server  to request information from UQ system , which returns the information via web server , and EAI object manager . In one embodiment, both session mode communication server  and inbound communication receiver  can communicate with UQ system . Other embodiments can communicate with a third party queuing system for maintaining work item queues and assigning agents to work items. Communication server  includes session mode communication server .","Communication server  may optionally include one or both of request mode communication server  and inbound communication receiver . It is important to note that the functionality provided by servers , , and  can be implemented on one server computer system or distributed across two or more server computer systems. Communication server  handles all communication between agents and customers via communication channels  of one or more media types. Communication server  is not media-specific and has no knowledge of communication channels or media.","To communicate with multiple communication channels of different media types, communication server  is designed to communicate with a channel driver  such as one of channel drivers A, B, and C. A channel driver  is written according to Communication Application Program Interface (API) . Communication API  provides an interface for third party vendors of communication devices and software (e.g., middleware vendors for communication devices) to provide a channel driver  so that their products are compatible with application server . By implementing a channel driver , vendors can take advantage of the customer support center management features and multi-media communication channel capabilities of application server .","Communication API  is designed to provide flexibility to third party vendors for integrating their products. In the implementation of a channel driver, a vendor defines the commands the vendor's communication channel  understands so that communication server  can issue commands for the communication channel  to perform. Normally these commands are issued when session mode communication server  is presenting a user interface to the agent, although inbound communication receiver  also can send commands in some circumstances.","In addition, the vendor defines the events that the vendor's communication channel  provides regarding activity of a specific communication channel . Finally, the vendor provides a channel driver  implementation, such as a dynamic link library (.DLL file), for performing each command and generating and providing each event. The channel driver  implementation is required by communication API  to include code to instantiate a driver object and at least one service object.","By requiring the vendor to provide facilities for the communication server  to issue commands to and to receive information from the vendor's communication channel , communications API  enables communications server  to operate independently of the communication channel  media type and specific protocols to communicate with the vendor's communication device or software.","Referring to , an example of a database schema  that can be used by client\/server system  () for storing and communicating channel driver information, agent limitations on media access, commands and events, inbound task management, agent preferences, agent status, media status, communication channel configurations, multiple queue support, and agent management is shown. Database schema  includes data structures for configuration base , command and event , system base , response group , and email profile access control .",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIGS. 2","FIG. 2","FIG. 2"],"i":["a ","cc "],"b":"2"},"The tables in , , , and are part of system base  and store channel driver information and channel driver parameters. The tables of and store the general information for a channel driver, such as channel drivers A, B, and C, and can be used by any customer support center configuration. The typical data stored in these tables are the file name of the channel driver DLL, the media type of the associated communication channel  (e.g. email, fax, etc.), a media string which is used by communication server  at run time to invoke a media service for the channel driver, the complete list of channel driver parameters, and the default value for each channel driver parameter. The parameters INBOUND_FLG and OUTBOUND_FLG of table CNCTR () indicate whether the channel driver  supports inbound and\/or outbound communications.","Customer support centers can establish configurations that define the groups of agents that have similar requirements to communicate, therefore requiring access to the same communication channel . For example, salespersons within a company may need the ability to communicate via wireless access protocol, whereas telephone operators may not. A configuration can be established for each group within the company. A channel driver profile allows more than one customer support center configuration to share a single channel driver , with each additional channel driver profile overriding the values of some channel driver parameters such as the location of the channel driver DLL. For example, due to the network architecture of the company, salespersons for the company in Phoenix may use a different channel driver  than salespersons in Palo Alto. A channel driver profile will enable the Phoenix and Palo Alto salespersons to use the same channel driver but point to different DLLs. The term channel driver  is used herein to include at least one channel driver profile providing default values for the channel driver parameters.","The tables in and store the channel driver profile for a particular customer support center configuration and the channel driver profile is not shared or used by other customer support center configurations. Typically, an administrator uses the table CNCTR_PARM to override a default value for a channel driver parameter for the particular customer support center configuration. Referring to , the string stored in the variable CNCTR_MEDIA_STR is based on a list of names of communication media supported by the channel driver . An administrator enters the name of the media in the CNCTR_MEDIA_STR field in character string format. The string stored in this field is used to determine the channel driver  to issue a command or from which an event originated. If one channel driver  supports multiple types of communication media, the administrator creates one record for each media type. The following examples show the parameters in the CNCTR table for telephone, email, and web chat media:","{\u201cXYZ Phone Driver\u201d, \u201cTelephone\u201d, \u201cxyz.dll\u201d, \u201cY\u201d, \u201cY\u201d, \u201cXYZ Phone Implementation\u201d, \u201cN\u201d},","{\u201cXYZ Email Driver\u201d, \u201cEmail\u201d, \u201cxyz.dll\u201d, \u201cY\u201d, \u201cY\u201d, \u201cXYZ Email Implementation\u201d, \u201cN\u201d},","{\u201cXYZ Web Chat Driver\u201d, \u201cWeb Chat\u201d, \u201cxyz.dll\u201d, \u201cY\u201d, \u201cY\u201d, \u201cXYZ Web-Chat Implementation\u201d, \u201cN\u201d}","Note that when a work item is submitted to UQ system  () for agent assignment, the CNCTR_MEDIA_STR is also passed with the work item to help UQ system  to identify an agent with skills in using that media type.","An example of an algorithm for determining the list of channel drivers  for a particular agent is as follows:","1. Determine the configuration ID for the agent by searching AGENT table ().","2. For the configuration ID, search the CFG_PROF table () for the list of channel driver profiles associated with the configuration.","3. For each of channel drivers , load the channel driver information and channel driver parameters from CNCTR, CNCTR_PARM, PROF, and PROF_PARM tables (-, respectively).","An example of an algorithm for loading a list of channel drivers  upon the agent logging in to client\/server system  is as follows:","1. For each of channel drivers ,\n\n","2. End Loop","By default, an agent is authorized to access all channel drivers  associated with the configuration to which the agent belongs. For example, if the agent belongs to \u201cCustomer support center ,\u201d all channel driver profiles configured in \u201cCustomer support center \u201d are accessible for all agents in \u201cCustomer support center \u201d by default. The administrator can further limit the agent's access to channel drivers  using table AGENT_LIM () that lists the channel driver profiles the agent cannot access.","Agent preferences are stored in table AGENT_PREF () in a centralized database so that an agent's settings are available independently of the type of client or communication channel being used. A user interface for modifying the settings is also supplied in an embodiment of the present invention.","Embodiments of the present invention support multiple communication media channels and agent assignment with UQ system  (). Table AGENT_STAT () stores the current working status of a particular agent for all types of media that the agent is authorized to use. From this table, the administrator can see a list of media types that agent is currently authorized to access and the status of each media type.","When the \u201cNOT_READY_FLG\u201d parameter in table AGENT_STAT () indicates that an agent is not ready to take work items, UQ system  () will not assign any work items to the agent. The \u201cBUSY_FLG\u201d parameter indicates that the agent is busy.","Table AGENT_STAT is updated mainly at run time. When the agent first logs on using the user interface, one record for each media type that the agent is authorized to access is created. For example,","{\u201cagent_emp_id\u201d, \u201cPhone Control\u201d, \u201c \u201d, \u201c \u201d, \u201c1234\u201d, \u201c \u201d},","{\u201cagent_emp_id\u201d, \u201cEmail\/Fax\u201d, \u201c \u201d, \u201c1234\u201d, \u201c \u201d},","{\u201cagent_emp_id\u201d, \u201cWeb Chat\u201d,\u201c \u201d, \u201c1234\u201d, \u201c \u201d}","The records are updated according the agent's working status. For example","{\u201cagent_emp_id\u201d, \u201cPhone Control\u201d, \u201cY\u201d, \u201c \u201d, \u201c1234\u201d, \u201cY\u201d} indicates that agent is not ready but is talking on the phone,","{\u201cagent_emp_id\u201d, \u201cEmail\/Fax\u201d, \u201cY\u201d, \u201c \u201d, \u201c1234\u201d, \u201c \u201d} indicates that the agent is not ready to accept Email\/Fax type of work, and","{\u201cagent_emp_id\u201d, \u201cWeb Chat\u201d, \u201cN\u201d, \u201c \u201d, \u201c1234\u201d, \u201cY\u201d} indicates that the agent is ready to accept web chat type work and he or she is currently working on a web chat session.","Referring to table MEDIA_STAT (), the parameter \u201cMEDIA_OBJECT_STR\u201d for phone is the agent's extension number. For email, it is the mailbox name or the sender's email address. For fax, it is the fax number. The form of the content of MEDIA_OBJECT_STR is defined in each of the channel drivers .","\u201cWORKING_SINCE_DT\u201d is the time the agent starts to talk on the phone, or the time the agent starts to work on a work item such as an email or fax.","\u201cWORK_ITEM_STR\u201d is the unique string to identify the work item and the value of the field is determined by communication server . The MEDIA_STAT table is updated at run time to reflect the agent's current work status. An example of an agent's data records at run time is as follows:","{\u201cagent_id\u201d, \u201cPhone Control\u201d, \u201cExt. 5216\u201d, \u201cJun. 25, 2000 12:34:45\u201d, \u201cphone_item_str\u201d, \u201c1-1S2-X7E\u201d},","{\u201cagent_id\u201d, \u201cEmail\u201d, \u201cinfo@company.com\u201d, \u201cJun. 25, 2000 11:34:00\u201d, \u201cemail_item_str\u201d, \u201c1-1S2-X7D\u201d}","The above records show that the agent is currently talking on extension  and is working on an email sent to info@company.com.","Multiple extensions and multiple queues are supported in client\/server system  () using tables TELESET, EXTENSION, and AGENT_QUE, , , and , respectively. The following terms are referenced in , , and . The term automatic call distribution (ACD) extension refers to a type of extension that is used to log in to an ACD queue associated with an ACD switch such as ACD switch E. Once an extension logs in to the ACD queue, the ACD switch begins to dispatch customer calls to the extension. One ACD extension can log in to one or more ACD queues.","The term standard extension refers to a type of telephone extension that is not allowed to log in to the ACD queue. Standard extensions are mainly used for dialing outbound calls or answering internal calls. The ACD switch does not dispatch customer calls to a standard extension.","The term agent ID refers to an identifier used by client\/server system  to identify the agent. In order for client\/server system  to be aware of the agent's availability, each customer support center agent is assigned an agent ID. When the agent logs in to a communication channel having an ACD switch E, the agent ID is provided to the ACD switch E. Depending upon the configuration of the system, either the ACD switch E or UQ system  determines an available agent ID for the work item. Then either the ACD switch E dispatches the customer call to the ACD extension of the agent ID or, when UQ system  is used to assign agents, communication server  uses one of channel drivers  to dispatch the customer call to the ACD extension of the agent ID.","\u201cMultiple DN\u201d refers to multiple extensions configured for one telephone handset, and one or more extensions are ACD extensions.","\u201cMultiple queue\u201d means that one ACD extension can log in to multiple queues. In general, since an ACD queue is a list of agent IDs, as long as the agent ID is acceptable for ACD queue, any ACD extension can be used to login to ACD queue.","In one embodiment, a method for determining the list of extensions for an agent includes searching by the agent's ID in the AGENT table () to find the primary Teleset ID in the ACTIVE_TELESET_ID parameter, which identifies the primary handset used by the agent. The extension list is then determined from the DN_EXT parameter in the EXTENSION table (). Once the list of extensions is found, all extensions that the agent uses can login to all ACD queues defined in the AGENT_QUE tables () for that particular agent.","As described above, customer support centers can establish configurations that define the groups of agents that have similar requirements to communicate, therefore requiring access to the same communication channel . Configuration base  includes tables about configurations. CFG table () contains information about configurations. Configuration data includes a configuration name and an INGRP_FLAG indicating whether this configuration is for inbound response groups used in inbound communication receiver . CFG_PROF table () is the configuration\/channel driver profile relationship table showing which channel driver profiles belong to each configuration. Each configuration has a single channel driver profile.","AGENT_CFG table () is the agent\/configuration relationship table showing which agents belong to each configuration.","CFG_PARM table () is the configuration parameter table. A name and a value are provided for each configuration parameter. An ACTIVE_FLG field is a flag indicating whether the value of the configuration parameter is active.","The command and event data structure , includes information describing commands and events implemented by channel drivers . This information includes associating each command with a channel driver  and each event with a channel driver .","CMD table () includes commands for each channel driver . As described above, a vendor providing a channel driver  specifies the commands that it supports. A command is issued to channel driver  by communications server  to perform a command using communication channel . Every click on a button of toolbar  invokes a command, which is issued to channel driver .","A command can have a group of associated commands which operate as subcommands. A group command includes other commands with a Subcommand keyword.","Following is an example of a single command for making a telephone call to a contact.",{"@attributes":{"id":"p-0099","num":"0101"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["[Command: MakeCalltoContact]","Command definition"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CmdData","=","\u201cMakeCalltoContact\u201d","Command parameter"]},{"entry":[{},"DeviceCommand","=","\u201cMakeCall\u201d","Command parameter"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Description","=","\u201cMake Call to Contact\u201d Command param."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Hidden","=","TRUE","Command parameter"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[CmdData: MakeCalltoContact]","Command data def."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"BusComp","=","\u201cContact\u201d","Command parameter"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"RequiredField.\u2019Work Phone #\u2019","=\u201c?*\u201d","Command parameter"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Param.PhoneNumber =","\u201c{Work Phone # : Lookup}","Command"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"210pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Parameter"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Following is an example of a group command for making a telephone call to a contact:",{"@attributes":{"id":"p-0101","num":"0103"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[Command: MakeCallGroup]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Hidden","=","TRUE"]},{"entry":[{},"SubCommand","=","MakeCalltoPhone"]},{"entry":[{},"SubCommand","=","MakeCalltoSRContact"]},{"entry":[{},"SubCommand","=","MakeCalltoSROwner"]},{"entry":[{},"SubCommand","=","MakeCalltoEmployee Home"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"The following example command can be either a single command or a subcommand.",{"@attributes":{"id":"p-0103","num":"0105"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["[Command: MakeCalltoPhone]","Command definition"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003CmdData","=\u2003\u201cMakeCalltoPhone\u201d","\u2003Command parameter"]},{"entry":["\u2003DeviceCommand","=\u2003\u201cMakeCall\u201d","Command parameter"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003Description","=\u2003\u201cMake Call to {@Phone}\u201d Cmd param"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003Hidden","=\u2003TRUE","Command parameter"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003[CmdData: MakeCalltoPhone]","Command data def."]},{"entry":["\u2003[CmdData: MakeCalltoPhone]","Command data def."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"RequiredField.\u2019Work Phone #\u2019","=\u201c?*\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Param.PhoneNumber =","\u201c{@Phone: PhoneTypeLookup}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"A command can have a command data section with a CmdData keyword to specify the data parameter in order to communicate with channel driver .","When a customer support center configuration includes multiple channel drivers , it is then possible for communication server  to determine which commands and events are handled by each of channel drivers . This configuration can also help distinguish between channel drivers  from different vendors that use the same name for commands performing different functions.","Following is an example of a command with a data section having a CmdData keyword.",{"@attributes":{"id":"p-0107","num":"0109"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"[Command: MakeCalltoContact]"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CmdData","=","\u201cMakeCalltoContact\u201d"]},{"entry":[{},"DeviceCommand","=","\u201cMakeCall\u201d"]},{"entry":[{},"Description","=","\u201cMake Call to Contact\u201d"]},{"entry":[{},"Hidden","=","TRUE"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[CmdData: MakeCalltoContact]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"BusComp","=","\u201cContact\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"RequiredField.\u2019Work Phone #\u2019","=\u201c?*\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Param.PhoneNumber =","\u201c{Work Phone # : Lookup}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The event table contains events that are sent to communication server  from channel driver . Vendors specify the events that will be sent in channel driver . An event response determines how communication server  reacts upon receiving each media event. The process of handling an event includes the following: searching for the event handler for the event, querying a customer support center database to determine the appropriate event response, and logging the event.","An example of an event, the event handler, event response, and event log for an InboundCall event are shown below:",{"@attributes":{"id":"p-0110","num":"0112"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[EventHandler:OnInboundCall]","first stage, EventHandler"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"definition"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"DeviceEvent","= \u2033EventRinging\u2033","media event definition"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Response","= \u2033OnInsideCallReceived\u2033","EventResponse declaration"]},{"entry":[{},"Filter.Call","= \u2033?*\u2033","EventHandler parameter"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Order","= \u20331\u2033","EventHandler order"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[EventResponse:OnInboundCallReceived]","second stage, EventResponse"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"definition"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"QueryBusObj","= \u2033Contact\u2033","EventResponse parameter"]},{"entry":[{},"QueryBusComp","= \u2033Contact\u2033"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"QuerySpec","= \u2033\u2032Work Phone #\u2032=\u2032 {ANI}\u2032\u2033"]},{"entry":[{},"SingleView","= \u2033Service Contact Detail View\u2033"]},{"entry":[{},"MultiView","= \u2033Contact List View\u2033"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"FindDialog","= \u2033Service Request\u2033"]},{"entry":[{},"FindField.CSN","= \u2033Ask Caller\u2033"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"FindLog","= \u2033LogIncomingCallContactNotFound\u2033","EventLog"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"declaration"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SingleLog","\u2003= \u2033LogIncomingCallContactFound\u2033","EventLog declaration"]},{"entry":[{},"Log","= \u2033LogIncomingCallContactNotFound\u2033","EventLog declaration"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[EventLog:LogIncomingCallContactFound]","\u03b2 EventLog definition"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Display","= \u2033TRUE\u2033","\u03b2 EventLog parameters"]},{"entry":[{},"BusObj","= \u201cAction\u201d"]},{"entry":[{},"BusComp","= \u201cAction\u201d"]},{"entry":[{},"LogField.Type","= \u201cCall \u2212 Inbound\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LogField.\u2019Account Id\u2019","= \u201c{Contact.\u2019Account Id\u2019}\u201d"]},{"entry":[{},"LogField.\u2019Contact Id\u2019","= \u201c{Contact.Id}\u201d"]},{"entry":[{},"LogField.Description","= \u201cInbound call\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LogField.\u2019Call Id\u2019","= \u201c{ConnID}\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"AfterCall.\u2019ACD Call Duration\u2019= \u201c{@CallDuration}\u201d"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Each event handler corresponds to an event provided by channel driver  and it is sequenced among the event handlers for an event. Each event handler has an event response. An event response can be shared among event handlers. An event response can have multiple event logs, and an event log can be shared among event responses.","When operating in session mode, communication server  is under the control of session mode communication server . Session mode communication server  receives incoming events such as customer support requests and communicates interactively with the agent by controlling a user interface presented to the agent. Preferably the incoming customer support request is communicated to the agent at substantially the same time the customer support request is received by the communication channel , with brief intermissions only to allow for processing and transport time in transporting the customer support request. This ensures that the customer's waiting time is minimized, particularly for requests for live interaction with an agent.","When an event such as arrival of an incoming telephone call occurs, the user interface notifies the agent using a notification function to change the user interface to capture the agent's attention. For example, a notification function can cause a button to blink to notify the agent of the phone call. A notification function can also display other information such as information about the caller before the agent picks up the phone. When the agent uses toolbar  to accept a telephone call, put a call on hold, or release a call, the user interface sends a command to session mode communication server , which communicates with one of channel drivers  to issue the command to the communication channel controlling the telephone.","Session mode communication server  also handles establishing and maintaining connections to one or more communication channels , such as communication channels A through D. Session mode communication server  uses one of channel drivers , such as channel driver A, to establish the connection. Having a connection to a communication channel enables the agent to receive an incoming work item, such as an email, intended specifically for that agent in real time. The connection can be to a middleware server, to a web server, directly to a media device, or to any other communication intermediary from which the customer can receive a communication. The connection can be established as a TCP\/IP socket connection to a middleware server, as an OLE interface such as the IadviseSink interface, or as any other suitable inter-process communication scheme. Each of channel drivers  contains all information needed to establish the connection with communication channel  so that communication server  operates independently of communication channel .",{"@attributes":{"id":"p-0115","num":"0117"},"figref":"FIG. 1B","b":["110","110","104","104","130","130","109","100"]},"Session thread  represents a session during which an agent interacts with client\/server system  using web browser client A. A customer uses a customer communication device, here a telephone, to access the communication channel. The agent also uses a communication device, such as a telephone headset, to access the communication channel.","Session thread  listens for inputs from its web browser client A and dispatches notifications of events from ACD switch driver D to web browser client A. Session thread  uses a communication channel manager such as communication channel manager  to interact with ACD switch driver D. Each channel driver  provides an active connection such as active connection  between the client and the associated communication channel. Channel driver  can be implemented to establish a persistent connection for interactive communication between client  and communication channel E but providing a persistent connection is not required by communication API .","The following examples describe processes that are followed by web browser client A during startup, initialization and operation. The processes for web browser client A are applicable to other types of clients, as will be explained in further detail below.","When web browser client A begins execution:","1. Web browser client A downloads program instructions for generating a user interface on the display for the web browser, such as toolbar , shown here as implemented using Java applet , from web server . Java applet  also establishes persistent HTTP connection  between Java applet  and web server  so that web server  can continuously provide information to web browser client A.","2. Web browser client A interfaces with session mode communication server  via web engine session thread . Object manager  spawns web engine session thread  to interface with web browser client A using web engine plug-in  and web engine . Communication client service  provides all communication related to the user interface with web browser client A.","3. Communication client service  requests the object manager  for communication service. Communication service , which provides all communications not related to the user interface, is provided.","4. Communication service  loads configuration information such as commands, events, agent information and preferences, channel driver information and channel driver parameters.","5. Communication service  registers an asynchronous event receiving function with object manager  to be invoked when an asynchronous event is subsequently received. The asynchronous event receiving function is also referred to as a callback function. Receiving asynchronous events is described in further detail below.","6. Communication service  requests an active connection A between object manager  and web engine plug-in  and an active connection B between communication service  and session mode communication server . Persistent HTTP connection , and active connections A and B enable session mode communication server  to continually push user interface changes to toolbar  using Java applet .","7. Session mode communication server  spawns a session thread such as session thread  in response to the connection request.","8. Session thread  runs communication channel manager .","9. Communication channel manager  loads ACD switch driver D and passes the channel driver parameters determined by communication service .","10. ACD switch driver D establishes an active connection  to the ACD switch E. A vendor implementing channel driver  may choose to provide a persistent connection to the communication channel , as for telephone connections such as active connection . However, a persistent connection is not required by communication API .","When the agent performs an activity using web browser client A that requires a command to be executed, such as clicking a button on toolbar :","1. Communication client service  searches the command configuration data previously loaded for the command to invoke. It also collects the data associated with that command and then passes the command and data to communication service .","2. Communication service  passes the command and data to communication channel manager .","3. Communication channel manager  then determines which of channel drivers  performs the command requested by the client, and passes the command and data to the channel driver  such as ACD switch driver D for execution.","4. ACD switch driver D issues the command to the communication channel . In this example, the ACD switch driver D issues the command to ACD switch E.","When a channel driver  such as ACD switch driver D needs to push an event (status data or an incoming event such as a customer call) to web browser client A:","1. ACD switch driver D receives the event and posts the event to communication channel manager . This requires asynchronous interruption at session thread  for event posting.","2. Communication channel manager  pushes the event to communication service .","3. Communication service  receives the event and executes the registered asynchronous event receiving function.","4. The registered asynchronous event receiving function inserts the event sent from ACD switch driver D into an event queue stored inside object manager .","5. A frame manager (not shown) running in session thread  picks up the event from the event queue and invokes the registered asynchronous event receiving function using communication client service .","6. Communication client service  asks communication service  to process the event.","7. After communication service  has processed the event, communication client service  continues to communicate with Java applet  to control the web browser for user interface changes.",{"@attributes":{"id":"p-0143","num":"0145"},"figref":"FIG. 1C","b":["140","140","140","110","140","110"]},"A request mode server thread such as server thread  is spawned when request mode communication server  begins execution. Communication manager  is loaded to collect data for the request. Request mode communication server  determines the appropriate channel driver to handle the request and directs a communication channel manager  to load email driver E. Communication channel manager  dispatches the request and data to email driver E, which sends the information to email communication channel F. In the embodiment shown in , email driver E sends the emails via email server  to email client .","As another example of the operation of request mode communication server , object manager  can send one or more work items from UQ system  to request mode communication server . Similar to the previous example, a request mode server thread is spawned and communication manager  is loaded to collect data for the request. Request mode communication server  determines the appropriate channel driver to handle the request and directs a communication channel manager  to load an appropriate driver, such as email driver E. Communication channel manager  dispatches the request and data to the driver, which sends the information to a communication channel.",{"@attributes":{"id":"p-0146","num":"0148"},"figref":"FIG. 1D","b":["170","170","110","170","110","170","110"]},"Inbound communication receiver  uses channel drivers  such as email\/fax channel driver F to \u201clisten\u201d for particular types of customer support requests from a common source. Email channel driver F handles all email messages directed to a particular email address and all faxes sent to a particular fax number. To avoid overlap among agents, inbound communication receiver  can be configured to work with UQ system  to assign an agent to the inbound customer support request (email  or fax ) and route the customer support request to a component associated with or representing the assigned agent, such as a client.","Inbound communication receiver  is also configured during initialization to recognize events, such as receiving a customer support request, and to include corresponding channel driver information and background profiles to handle recognized events. Background profiles include one or more monitored media objects, such as a list of email addresses, fax numbers, and web-chat end points. For example, email communication channel G represents a background profile for info@company.com and fax communication channel H represents a background profile for fax number 1-800-123-4567.","Inbound communication receiver  spawns a server thread such as server thread  to handle inbound events, such as customer support requests. This contrasts to session mode communication server , which spawns a session thread such as session thread  for each client  being used by an agent. Communication channel manager  then initializes a service such as fax service object A, email service object B, or phone service object C with the designated background profile.","When the email\/fax channel driver F receives an incoming customer support request, e.g. new fax , fax channel driver F posts the event to communication channel manager . This posting interrupts the idle state of server thread  and causes server thread  to invoke communication channel manager  to process the event. Communication channel manager  determines how to respond to the event based on an event response included in an event response table, such as EVTRESP (), and invokes the appropriate media service, such as fax service object A. If the event response also specifies notifying UQ system  of the event, the event is then passed to UQ system  via UQ business service . A response to the event notification is returned to inbound communication receiver  via UQ business service .","In alternative embodiments, client\/server system  can support multiple types of clients  having hardware\/software configurations that are different from web browser client A.  shows an alternative embodiment of client\/server system  that supports web browser client A, thin client B, and dedicated client C.","Thin client B includes one or more client software modules that are installed and executed on the client computer system used by the agent. Thin client B provides minimal functionality, with the majority of the functions for thin client B are performed by application server . It is often desirable to use thin clients so that application programs can be updated once in a centralized location instead of multiple times for each thin client B.","Thin client B provides more functionality on the client side than web browser client A, and can, for example, perform some functions of object manager . Thin client B also controls the user interface including toolbar . If changes are necessary to the functions performed on the client side, a new copy of thin client B must be installed on each individual agent's computer system.","Dedicated client C includes software modules that perform a significant portion of the functions required to support an agent. Dedicated clients are sometimes referred to as \u201cfat clients,\u201d in contrast to the \u201cthin client\u201d designation. If changes are necessary to the functionality provided by dedicated client C, a new copy of the dedicated client software modules usually must be installed on the client computer system.","Dedicated client C provides even greater functionality than does thin client B, including, for example, all functionality provided by object manager , web server , communication client service  (), and communication service . Because dedicated client C assumes all responsibility for the user interface and toolbar , there is no communication between dedicated client and communication server , web server , web engine plug-in  and web engine  (). Dedicated client C does include web server  that is capable of interfacing with UQ system , and object manager  to communicate with channel drivers .","It is important to note that other types of clients having hardware and software components that are different from clients A, B, and C can also be integrated with client\/server system .","Communication API","Referring now to , communication API  is provided in one embodiment of the present invention for channel drivers  to communicate with communication server . Note that communication server  is used in the following discussion of communication API  to represent session mode communication server , request mode communication receiver server , or inbound communication receiver .","As shown in , one embodiment of communication API  includes three types of objects: driver objects , service objects , and client objects . Driver objects  and service objects  are instantiated at the channel driver , however client objects  are instantiated at communication server . Communication server  interfaces with driver objects  and service objects , but only service objects  communicate with client objects .","Driver objects  maintain the instantiation of service objects . Any special steps for constructing and destructing service objects  can be implemented in driver objects . Multiple driver objects  can be included to manage different types of media. Also, a single driver object  can manage one type of service objects  or different types of service objects . For example, a single driver object  can manage phone, email and fax media.","As an example of the operation of driver objects , when communication server  is starting up, the channel driver  data link library (DLL) is loaded. Communication server  calls CreateISCSDriverInstance( ) in channel driver  to ask for the construction of a driver object . The channel driver  returns the driver handle back to communication server . The channel driver  determines how driver objects  are created. If driver objects  already exist, for example, the channel driver  could simply pass the handle of an existing driver object  instead of creating a new one.","In one embodiment, service objects  are created by driver objects  and provide functionality in the form of device commands to interact with the associated media type. For example, making an outbound call, or sending an outbound email is implemented at service objects . A service object  is usually associated with a single type of media. For example, there can be service objects  for phone media and other service objects  for email media. Communication server  interfaces directly with service objects  to invoke a device command.","After communication server  obtains the driver handle, communication server  uses a RequestService( ) function to request a service object  for the specified media type. The driver returns the handle of the corresponding service object  to communication server . Communication server  then uses this handle in an InvokeCommand( ) function directly to request the corresponding service object  for executing a particular type of function.","After communication server  obtains the handle to a service object , communication server  will use the service handle directly to interact with the service object . Service objects  can inherit facilities from, and\/or share resources with, driver objects . For example, driver objects  can establish and maintain the physical TCP\/IP connection to a middleware server of a communication channel  and service objects  can share the connection with the driver objects .","Client objects  are instantiated and implemented by communication server . The handles to client objects  are passed to service objects . Service objects  can utilize the client handles and invoke the function to be executed at communication server .","In one embodiment, every service object  has a corresponding client object . Therefore, each client object  has knowledge of the media type that its corresponding service object  is using. Since service objects  can each be instantiated for different media from different driver DLLs, this one-to-one relationship allows a client object  to know the driver object  and service object  that initiate the notification when client object  receives notification from service object .",{"@attributes":{"id":"p-0167","num":"0169"},"figref":"FIG. 1G","b":["189","120","189","183","1","183","2","183","3","183","1","183","2","183","3","179","1","179","2","179","3"]},{"@attributes":{"id":"p-0168","num":"0170"},"figref":["FIG. 1H","FIG. 1D"],"b":["189","183","183","183","183","183","183","179","179","179","170","179","179","179","179","179","179","183","183","183"]},{"@attributes":{"id":"p-0169","num":"0171"},"figref":"FIG. 11","b":["189","189","120","189","189","189","189","183","189","189","189","189"]},"There are several alternatives for implementing asynchronous notification of events from middleware servers to driver objects  including:\n\n","With alternative 1, since the driver objects  can be implemented as a DLL, the driver object DLL either constructs a listening thread which blocks on select( ) call until the arrival of an event, or a polling thread which periodically polls the middleware server for the arrival of an event. Polling threads are useful for low-priority media types, e.g. email or fax, because polling periods typically last seconds or minutes. Polling threads are not as useful to detect high-priority media events, such as phone requests, because it is desirable to report the arrival of an incoming call at any time. Listening threads generate less network traffic than polling threads, and are generally useful for high priority and low priority media, however, some types of middleware servers do not support listening threads.","To implement both polling threads and listening threads, a \u201ctask\u201d thread is required in the driver object DLL. The \u201ctask\u201d thread can be executed in driver objects  as shown in  or in service objects  as shown in .","Referring to , a task thread (or listen thread) implemented in the driver objects  may be \u201cshared\u201d by all service objects . For example, this listen thread can listen for all incoming events for all service objects . Once the listen thread receives an event, the listen thread then invokes and executes the event handling function implemented at service objects .","Referring to , if the listen thread is implemented at the domain of service objects , every service object  constructs its own listen thread and the listen thread is not shared. Each listen thread is listens to a different target. For example, the listen thread for user  listens for events on the first phone extension (ext. 1234), while the listen thread for user  listens for events on the second phone extension (ext. 5678).","In one embodiment, client objects  are a collection of function pointers implemented by communication server  and passed to the service objects  for asynchronous event notification. In one implementation, when the listen thread in channel driver  receives an event, the following processes occur:\n\n","Communication API Commands","Communication API  includes commands and data structures to allow third parties to develop applications that can integrate with client\/server system . The data structures include arrays for passing data elements such as an agent's key value element, key value parameters, and string parameter lists.","The following provide examples of runtime status flags that can be used in communication API :",{"@attributes":{"id":"p-0179","num":"0188"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NOTSUPPORTED = 1;","Command is not supported"]},{"entry":["DISABLED = 2;","Command is disabled at this time"]},{"entry":["CHECKED = 4;","Command is in \u201cchecked\u201d state, for example"]},{"entry":[{},"when agent is in busy mode the \u201cbusy\u201d"]},{"entry":[{},"command will be \u201cchecked\u201d"]},{"entry":["BLINKING = 8;","This is special effect flag to enable the"]},{"entry":[{},"blinking \u201canswer call\u201d command"]},{"entry":["NOPARAMSOK = 16;\u2002","Command does not require any parameters"]},{"entry":[{},"to execute"]},{"entry":["STRPARAMSOK = 32;\u2002","Commands can be executed by providing single"]},{"entry":[{},"unnamed string parameters. Such commands"]},{"entry":[{},"are invoked when the agent types something"]},{"entry":[{},"in the edit control of the communication"]},{"entry":[{},"toolbar 105 and clicks the corresponding"]},{"entry":[{},"button."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The following provide examples of commands that can be used in one embodiment of communication API :\n\n",{"@attributes":{"id":"p-0181","num":"0191"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PHONECONTROL =","1"]},{"entry":[{},"CALLROUTING =","2"]},{"entry":[{},"EMAIL =","3"]},{"entry":[{},"FAX =","4"]},{"entry":[{},"WEBCALL =","5"]},{"entry":[{},"WEBCHAT =","6"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":{"@attributes":{"id":"ul0009-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0010","list-style":"none"},"li":["CommandTypeEx: Channel driver  uses the CommandTypeEx function to request different services, such as making calls and sending messages, from communication server .","ObjectType: The ObjectType function is used to monitor the communication objects, which can be represented by the following parameter values:"]}}}},{"@attributes":{"id":"p-0182","num":"0194"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"char"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"OB_LINK =","1"]},{"entry":[{},"SWITCH =","2"]},{"entry":[{},"QUEUE =","3"]},{"entry":[{},"TELESET =","4"]},{"entry":[{},"DN =","5"]},{"entry":[{},"AGENT =","6"]},{"entry":[{},"CALL =","7"]},{"entry":[{},"CALLROUT =","8"]},{"entry":[{},"EMAIL =","9"]},{"entry":[{},"FAX =","10"]},{"entry":[{},"WEBCALL =","11"]},{"entry":[{},"WEBCHAT =","12"]},{"entry":[{},"OTHERS =","1000"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0011","list-style":"none"},"li":{"@attributes":{"id":"ul0011-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0012","list-style":"none"},"li":"ObjectProperty: The function ObjectProperty can be used to provide properties of monitored communication objects, such as:"}}}},{"@attributes":{"id":"p-0183","num":"0196"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Channel Driver Functions"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ONOFF =","1"]},{"entry":[{},"AGENTID =","2"]},{"entry":[{},"NOTREADY =","4"]},{"entry":[{},"BUSY =","5"]},{"entry":[{},"DESCRIPTION =","7"]},{"entry":[{},"TIMEINQUEUE =","9"]},{"entry":[{},"QUEUEID =","12"]},{"entry":[{},"ISLOGON =","13"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"In one embodiment, driver objects  within each of channel drivers  can include the following functions:\n\n","Service Object Functions","In one embodiment, service objects  within each of channel drivers  can include the following functions:\n\n","Client Object Functions","The following are examples of functions that can be included in Client Objects . The interface to these functions can be implemented with a function pointer so that driver objects  do not need to link to any libraries in communication server .","ReleaseClientInstance causes driver object  to release a client object's handle.\n\n",{"@attributes":{"id":"p-0190","num":"0254"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"BeginBatch_Helper(clientInterface);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CacheCommandInformation_Helper(clientInterface, ...); <-- cached"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003;\u2003; ; ;\/\/ some processing"},{"entry":"\u2003if (error)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HandleError_Helper(clientInterface, ...); <-- cached"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003HandleEvent_Helper(clientInterface, ...); <-- cached"},{"entry":"\u2003EndBatch_Helper(clientInterface); <-- All requests will be sent out"},{"entry":"\u2003in one"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003request"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"*\/"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"ul":{"@attributes":{"id":"ul0029","list-style":"none"},"li":{"@attributes":{"id":"ul0029-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0030","list-style":"none"},"li":["HandleEvent is used to handle the named event received from the channel driver , using the given fields. By calling this method, the channel driver  notifies the client objects  of the event, such as a call coming in on the monitored teleset. The following is the parameter list:\n        \n        ","ShowStatusText displays textual status information in the status line of the client objects . The following parameter list can be used:\n        \n        ","HandleError handles asynchronous errors and logs them to an error log file. The following parameters can be used:\n        \n        ","CacheCommandInformation is used to notify the client objects  about command status caching. The following parameters can be used:\n        \n        ","UpdateObjectInformation is used to notify the client objects  about status change of objects. The following parameters can be used:\n        \n        ","IndicateNewWorkItem notifies client objects  about the arrival of new inbound work item (e.g. call, email or fax) if the driver or the middleware supports a facility to change the work item's ID. The following parameters can be used:\n        \n        ","WorkItemStarted notifies client objects  that the agent has started working on one particular work item. This happens when (1) the agent answers a call and the call is connected, or (2) the agent accepts an email\/fax work item. In response, client object  sets the work item identified by \u201ctrackingID\u201d as the active work item and starts tracking this work item. The agent will be treated as talking or working. The start time of this work item can be recorded by client objects . The following parameters can be used:\n        \n        ","WorkItemReleased is used to notify client objects  that a particular work item is released. This happens when (1) the agent releases a call and the call is disconnected, or (2) the agent completes an email\/fax work item. In response, client objects  stop tracking this work item and remove this work item. The following parameters can be used:\n        \n        ","CleanAllWorkItems notifies client objects  that all work items stored in client objects  should be removed.","WorkItemSuspended notifies client objects  that a work item is suspended. This can happen, for example, when (1) the agent puts a call to hold, or (2) the agent suspends an email\/fax work item. The driver implementation calls this function when suspension is done. In response, client objects  save the working context for this particular work item. The parameter trackingID can be used to identify the work item","WorkItemResumed notifies client objects  that a suspended work item is resumed. This happens when (1) the agent unholds a call and the call is retrieved, or (2) the agent resumes an email\/fax work item. The driver objects  call this function when restoring is complete. In response, client objects  restore the working context (screen +work-tracking obj) and set the active work item as the one identified by \u201ctrackingID\u201d. The parameter trackingID can be used to identify the work item."]}}}},"Note that other functions and parameters can be included in communication API  instead of, or in addition to, the functions listed herein.",{"@attributes":{"id":"p-0192","num":"0294"},"figref":["FIG. 3","FIG. 3"],"b":["109","110","110","104","110","140","170"]},"An agent logs in to client\/server system  by activating a user interface object such as a login object of a user interface indicating that he or she is able to begin providing support for customer support requests. An agent can log in to any communication channel  associated with a customer support center configuration to which the agent is also associated. At login, web browser client A sends a connection command to session mode communication server  communicated through intermediate components (omitted here, as shown by the breaks in the arrows) of application server , as described in .","The result of the connection command is that a session is established between toolbar  and session mode communication server . The session connection enables session mode communication server  to push information from communication channel  to toolbar . If the communication channel  is one that allows agents and customers to communicate interactively such as a live web collaboration session, channel driver  is responsible for maintaining the persistent connections within the communication channel .","Channel driver  is implemented according to communications API  to communicate with communications server . Communications API  requires a vendor providing channel driver  for a particular communication channel  to implement certain functions and data structures in order to communicate with communications server , as described above for .","One requirement of communications API  is that channel driver  provide instructions to create a driver object and a service object for communicating with communication server . The driver object is specific to the media type of communication channel . The driver object creates service objects for communication channel , such as email service object B for email communication channel G and fax service object A for fax communication channel H of .","Channel driver  monitors communication channel  for communication activity, as described above with reference to . In , driver object  listens to communication channel , and in , service objects A and B listen. Whether the listening is performed via a driver object  or a service object  is a decision made by the vendor in developing the channel driver .","The service objects  implement the functionality for communicating with one or more communication channels  such as the handshaking and protocol(s) to send commands to and receive events from the hardware devices and\/or software elements of communication channel .","Upon agent login, session mode communication server  loads all channel drivers  for the configuration to which the agent using client  belongs. A listen thread of session mode communication server  then listens to web browser client A for commands and the channel driver objects  or server objects  listen for events from channel driver  indicating activity on communication channel .","When an agent activates a user interface object (such as by clicking on an accept work item button) on toolbar , an InvokeCommand function of the user interface object is activated that sends the name of a command to be issued to session mode communication server . Session mode communication server  determines a channel driver  to issue the command by using the command name received from the user interface object to query customer support center database . The command table CMD (), the channel driver table CNCTR (), and the configuration table CFG () are examples of tables that can be used by session mode communication server  to determine the channel driver  associated with the command. Session mode communication server  obtains the parameters necessary for the command from a command parameter table such as CMD_PARM () and uses the service objects  to provide the command and the parameters to channel driver . Channel driver  issues the command to the communication channel .","When an event from channel driver  is received, session mode communication server  determines the channel driver  for the communication channel  that originated the event by querying customer support center database . Tables such as channel driver table CNCTR (), event table EVT (), and configuration table CFG () are among the tables used to identify the channel driver .","Having identified channel driver  as responsible for originating the event, session mode communication server  determines an event response to be made. The event response may be in the form of a data window presented via web browser client  as directed by Java applet . Other types of event responses include presentation of a scripted dialogue of questions for the agent to ask the customer, running a software program to perform an operation, calling a business service of a server component of system  such as UQ business service , and creating a database record in customer support center database . An event response corresponds to an event. Event responses are configurable by an administrator using configuration user interface  and are stored in an event response table such as EVTRESP (). Session mode communication server  also logs the event response for tracking purposes in an event log table such as EVT_LOG ().","Communications server  uses configuration data  from customer support center database  to control the presentation of information to the agent via the client. For instance, the appearance of the toolbar presented by the client is determined according to configuration data . The buttons that appear, the commands that are invoked when an agent clicks each button, and the response triggered by an incoming event are all specified as part of configuration data  by an administrator using configuration user interface .",{"@attributes":{"id":"p-0204","num":"0306"},"figref":"FIG. 4","b":["100","1","120","2","110","3","4","110","5","330","6","104","7","105"]},"In step , the agent accepts the web collaboration request by activating a user interface object such as a work item object of toolbar , such as clicking on an accept work item button. The work item object is associated with a command, here an AcceptWebCollab command, that is sent in step  to session mode communication server . Session mode communication server  sends the AcceptWebCollab command to web collaboration driver G as shown in step , which performs the AcceptWebCollab command as shown in step . In this case, web collaboration driver G dynamically establishes web collaboration connection  between web server  and web browser client .","In step , web collaboration driver G generates a WebCollabStarted event and sends the WebCollabStarted event to session mode communication server  in step . In step , session mode communication server  receives the WebCollabStarted event and determines the appropriate event response in step . In this case, the event response, as shown in step , is to create a record and store it in customer support center database . When the web collaboration session is completed, web collaboration driver G will generate the appropriate events and send them to session mode communication server , which will determine an appropriate event response and perform the event response.",{"@attributes":{"id":"p-0207","num":"0309"},"figref":["FIG. 5","FIG. 1"],"b":["100","1","120","130","170","130"]},"Inbound communication receiver  monitors particular phone numbers including 1-800-company. When inbound communication receiver  receives the CallArrived event in step , inbound communication receiver  determines the originating channel driver D as shown in step  and determines the event response in step . In this case, the event response is to run an e-script, as shown in step . In this example, the e-script requests an agent assignment in step , and when the agent assigned message arrives, sends a transfer call command to the originating channel driver . In step , the request agent assignment is submitted to UQ system  and UQ system  assigns an agent in step . In step , UQ system  sends an agent assigned message to inbound communication receiver , as described above. Note that several components of system  between inbound communication receiver  and UQ system  are omitted from the figure, as shown in the breaks in the lines of the arrows between the two components.","Inbound communication receiver  receives the agent assigned message in step , and, following step of the c-script, sends a transfer call command to ACD switch driver D. ACD switch driver D performs the TransferCall command and transfers the call to the agent in step . In step , the agent's phone rings. In step , ACD switch driver D detects that the agent's telephone handset is ringing and generates a CallRinging event. ACD switch driver D sends the CallRinging event to session mode communication server  in step , which handles notification of the agent of an incoming telephone call.","In step , session mode communication server  determines an appropriate event response, here to perform a notification function, and in step  sends a notification to toolbar . In step , toolbar  notifies the agent of the incoming call, and in step , the agent accepts the call by activating an accept work item object. In step , an AcceptCall command is sent to session mode communication server , which sends the AcceptCall command to ACD switch driver D, as shown in step . In step , ACD switch driver D performs the AcceptCall command to connect the customer placing the call with the assigned agent. ACD switch driver D will continue to generate events and session mode communication server  will continue to perform event responses as long as agents are logged in.","If the agent does not click an accept work item object on toolbar , but instead picks up the handset, no AcceptCall command is generated. Instead, ACD switch driver D detects that a call has been connected by listening to ACD switch E. In such a case, ACD switch driver D would generate a CallConnected event and session mode communication server  would perform the appropriate event response.",{"@attributes":{"id":"p-0212","num":"0314"},"figref":"FIG. 6","b":["105","105","105","602","604","606","608"]},"Work item buttons  includes buttons for enabling the agent to manage all of his or her active work items for all media types and communication channels.","Initiate work item button  enables the agent to initiate a work item. Select communication channel control  enables the user to select a media type for initiating a work item request. For example, the user of toolbar  can choose to use media types such as the telephone, email, fax, or paging. Media types available to the user are determined by session mode communication server  by accessing customer support center database  to obtain the customer support center configuration to which the agent belongs from table AGENT_CFG () and the agent limitation table AGENT_LIM () to eliminate the media types of the communication channels for which the agent cannot access.","The icon shown on initiate button  includes symbols representing multiple media types of telephone, email, and paging. The icon is used to show that the initiate work item is an abstract icon representing a work item for any media type. If the agent clicks on the initiate button  when displaying the abstract icon, toolbar  will determine from the context of the toolbar what the agent is trying to do. For instance, if the user is currently on the telephone with a customer, media indicator button  will show a telephone. If the agent simultaneously is viewing an email address for a contact and the user clicks on the initiate work item button, toolbar  will determine that, because the agent is already on the telephone and the contact has an email address, the agent must be trying to send an email to the contact. Toolbar  can be configured so that the new email screen is loaded with the customer information in order to save the agent time in typing the email. Toolbar  is configurable by an administrator using a configuration user interface .","Sources of context for controlling toolbar  include the content of the database record(s) currently being presented by toolbar , the content of edit box  or other data entered by the agent, and the toolbar  user interface object or data currently selected by the agent. For example, if the agent types a string including an @ sign in edit box , toolbar  can be configured to predict that the agent is trying to send an e-mail and provide a window for entering email data.","The context-sensitivity of toolbar  is also configurable by an administrator by defining methods to be executed when a user interface object on toolbar  is activated using a configuration user interface . Therefore, context can also be based on company needs because the company can configure the toolbar  to operate using data-dependent criteria, for example, depending upon the volume of customer support requests being received. Toolbar  has the capability to traverse the commands associated with each button contained within to determine a command that applies to the agent's current context.","Accept work item button  allows the user to accept an incoming work item. Notification of an incoming work item is provided by toolbar  using a notification function. For example, the notification function can cause a button on toolbar  to blink when the agent has an incoming work item. When the agent accepts a work item, a command is sent by web browser client A to communication channel , which responds to the command by performing the command.","Accept work item control  enables the agent to select from a list of incoming work items. Release work item button  is used to release an active work item. Session mode communication server  can be configured to release the telephone call work item automatically when the agent hangs up the telephone handset without clicking the release work item button . The hardware controlling the telephone connection sends a disconnect signal to the telephone switch to disconnect the agent's and customer's telephone lines.","For client\/server system , and particularly UQ system , to be aware that the telephone work item has been released, session mode communication server  must be aware of the physical disconnection. Channel driver  associated with the communication channel including the telephone switch is listening to the communication channel  and detects the physical disconnection of the telephone lines. In response, channel driver  sends a \u201cline disconnected\u201d event to session mode communication server . Session mode communication server  performs the appropriate event response and notifies UQ system  that the work item has been released.","Transfer buttons  are related to transferring work items such as telephone calls. Blind transfer button  enables the agent to transfer a telephone call to another extension and hang up without confirming whether an agent at the extension accepted the telephone call. If the telephone call is not accepted by another agent, the session mode communication server  can be configured to send the telephone call as a work item to UQ system  for placement into a queue of work items. The telephone call is removed from the transferring agent's list of active work items.","Consultative transfer button  enables an agent to consult with an agent at another extension before the call is transferred and to keep the telephone call if the other agent does not answer. Conference button  enables the agent to connect more than two telephone lines together for a joint telephone conversation. Retrieve button  enables the agent to retrieve a telephone call that the agent has transferred.","Suspend button  enables an agent to suspend a work item; for example, put a telephone call on hold or suspend writing an email response, to work on another work item or take a break. Active work items window  enables the agent to see the currently active work item. Select work item control  enables the agent to select a work item from the list of work items currently assigned to the agent. Resume button  allows the agent to resume work on a work item selected from the list of work items.","Forward button  applies to media types such as telephones and email. All telephone calls to a particular telephone number can be automatically forwarded to another telephone number when, for example, an agent is away from his usual work location. In the context of media types such as email, forward button command  can be configured to operate as a forward command, retaining a copy of the original email or as \u201ctransfer\u201d of the email removing the email from the agent's inbox and from the agent's list of active work items. Toolbar  can be configured to issue a command to notify UQ system  accordingly.","Login button  allows the agent to login to client\/server system  to work on work items. A persistent connection is established between web browser client A used by the agent and each communication channel  that the agent is authorized to use.","Logout button  allows the agent to logout from client\/server system .","Because client\/system  is designed to monitor and provide real time information to agents, the agent needs a means of communicating his or her availability to accept work items from client\/system . Reason code button  allows the agent to toggle between ready and not ready states for each media type. Select reason code control  allows the user to select from a list of reason codes when the agent is not ready to accept work items. Reason codes can be used by managers of the customer support center to monitor the efficiency of agents in providing customer support.","Other button  is provided to allow a company to provide other functionality via toolbar . Because the operation of each button of toolbar  is configurable by the company by associating the user interface object with a command using the configuration user interface , toolbar  provides maximum flexibility in providing its customer support center with a tool for communicating via multiple communication channels of different media types.","An example of commands implemented by a channel driver  for an email\/fax server is provided in Table 1 below.",{"@attributes":{"id":"p-0230","num":"0332"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["AcceptEmailFax","For agent to accept the incoming email or"]},{"entry":[{},"fax item. When this device command is"]},{"entry":[{},"invoked, the original media event received"]},{"entry":[{},"at the background-mode Communication Server"]},{"entry":[{},"will be dispatched to Communication Media"]},{"entry":[{},"Manager."]},{"entry":["ReleaseEmailFax","For agent to release the active email or"]},{"entry":[{},"fax work item. Then the driver uses SRM"]},{"entry":[{},"to notify UQ server that the agent is ready"]},{"entry":[{},"for the next work item."]},{"entry":["TransferEmailFax","For agent to transfer the current email or"]},{"entry":[{},"fax item to another agent. This will be"]},{"entry":[{},"implemented using SRM API."]},{"entry":["NotReadyForEmailFax","Set agent to not ready state in UQ system"]},{"entry":[{},"for email or fax. The implementation is the"]},{"entry":[{},"same as \u201cReleaseEmailFax\u201d using SRM."]},{"entry":["AcceptWorkCollab","For agent to accept the incoming web"]},{"entry":[{},"collaboration. When this device command is"]},{"entry":[{},"invoked, the original media event received"]},{"entry":[{},"at the background-mode Communication Server"]},{"entry":[{},"will be dispatched to Communication Media"]},{"entry":[{},"Manager."]},{"entry":["ReleaseWorkCollab","For agent to release the incoming web"]},{"entry":[{},"collaboration. Same implementation as"]},{"entry":[{},"\u201cReleaseEmailFax\u201d."]},{"entry":["TransferWebCollab","For agent to transfer the current web"]},{"entry":[{},"collaboration session to another agent."]},{"entry":[{},"(This device command is still open and"]},{"entry":[{},"subject to change)"]},{"entry":["NotReadyForWebCollab","Set agent to not ready state in UQ system"]},{"entry":[{},"for web collaboration. Same implementation"]},{"entry":[{},"as \u201cNotReadyForEmailFax\u201d."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"An example of events provided by a channel driver  for an email\/fax server is provided in Table 2 below.",{"@attributes":{"id":"p-0232","num":"0334"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["EventEmailFaxArrive","Report the arrival of new email or fax"]},{"entry":["EventEmailFaxConnected","Report the agent has accepted the new email"]},{"entry":[{},"or new fax"]},{"entry":["EventEmailFaxReleased","Report the agent has released the email of"]},{"entry":[{},"the fax"]},{"entry":["EventWebCollabArrive","Report the arrival of new web collaboration"]},{"entry":["EventWebCollabConnected","Report the agent has accepted the new web"]},{"entry":[{},"collaboration"]},{"entry":["EventWebCollabRelease","Report the agent has released web"]},{"entry":[{},"collaboration"]},{"entry":["EventAgentReady","Report the agent is ready for a particular"]},{"entry":[{},"media type"]},{"entry":["EventAgentNotReady","Report the agent is not ready for a"]},{"entry":[{},"particular media type"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The user interface as described herein provides many advantages, such as enabling an agent to receiving incoming and send outgoing communication via multiple communication channels of different media types. Customer support requests are received and presented to an agent, along with information providing context about the customer and the nature of the support request, are provided to the user in real time as the customer support request arrives. The agent uses this information to determine whether to accept the work item. The user interface also allows the agent to manage active work items. For example, the agent can initially accept a work item, and then if the agent finds that a work item should be handled by another agent, transfer the work item to the other agent or place the work item in a queue to be assigned to an expert in a particular area. The user interface provides the agent with tools for tracking the efficiency and progress in responding to customer support requests.","The present invention has been described in the context of software applications running on one or more computer systems. However, those skilled in the art will appreciate that the present invention is capable of being distributed as a program product in a variety of forms, and that the present invention applies equally regardless of the particular type of signal bearing media used to actually carry out the distribution. Examples of signal bearing media include: recordable media such as floppy disks and CD-ROM and transmission media such as digital and analog communication links, as well as media storage and distribution systems developed in the future.","Additionally, the foregoing detailed description has set forth various embodiments of the present invention via the use of block diagrams, flowcharts, and examples. It will be understood by those within the art that each block diagram component, flowchart step, operation and\/or element illustrated by the use of examples can be implemented, individually and\/or collectively, by a wide range of hardware, software, firmware, or any combination thereof. In one embodiment, the present invention may be implemented via Application Specific Integrated Circuits (ASICs). However, those skilled in the art will recognize that the embodiments disclosed herein, in whole or in part, can be equivalently implemented in standard integrated circuits, as a computer program running on a computer, as firmware, or as virtually any combination thereof. Designing the circuitry and\/or writing the programming code for the software or firmware would be well within the skill of one of ordinary skill in the art in light of this disclosure.","The present invention is well adapted to attain the advantages mentioned as well as others inherent therein. While the present invention has been depicted, described, and is defined by reference to particular embodiments of the invention, such references do not imply a limitation on the invention, and no such limitation is to be inferred. The invention is capable of considerable modification, alteration, and equivalents in form and function, as will occur to those ordinarily skilled in the pertinent arts. The depicted and described embodiments are exemplary only, and are not exhaustive of the scope of the invention. Consequently, the invention is intended to be limited only by the spirit and scope of the appended claims, giving full cognizance to equivalents in all respects."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention may be better understood, and its numerous objects, features and advantages made apparent to those skilled in the art by referencing the accompanying drawings.","The use of the same reference symbols in different drawings indicates similar or identical items.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 1A through 1D"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1E"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1F"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1G"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1H"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1I"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1J"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1K"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIGS. 1A through 1K"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIGS. 2","FIG. 2"],"i":["a ","cc "],"b":"2"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 3","FIGS. 1A through 1K"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 4","FIGS. 1A through 1K"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 5","FIGS. 1A through 1K"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
