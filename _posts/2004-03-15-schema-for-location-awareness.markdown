---
title: Schema for location awareness
abstract: A method, schema and computer system for a location service provides data structures that are extensible by allowing different types of location awareness applications to retrieve and deposit location data. The method includes providing an abstract location object arranged in a schema to enable servicing a received request for a logical location of an electronic endpoint; and arranging one or more location elements within the context of the abstract location object. The location elements are configured to act as peers relative to the logical location and each location element is configured to act as a proxy relative to any other location element within the abstract location object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07640288&OS=07640288&RS=07640288
owner: Microsoft Corporation
number: 07640288
owner_city: Redmond
owner_country: US
publication_date: 20040315
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application relates to co-pending U.S. patent application Ser. No. 10\/402,609, filed on Mar. 28, 2003, entitled \u201cArchitecture and System for Location Awareness\u201d and naming Mohammad Shabbir Alam, Warren Vincent Barkley, Timothy M. Moore, Geoffrey E. Pease, Steven A. N. Shafer, Florin Teodorescu, Yinghua Yao, Madhurima Pawar and John C. Krumm as inventors, the application being incorporated herein by reference in its entirety.","This invention relates generally to computer systems and, more particularly, relates to a schema for location awareness of computer systems and computer devices.","With the advent of the Internet and the growth of inter-active applications available to computer users comes an increasing need for ubiquitous computing. In this context, ubiquitous computing means the ability of computers to affect most of a user's daily tasks. Computers are called \u201ccomputers\u201d because of their ability to \u201ccompute\u201d or perform mathematical tasks. Computers are no longer seen as only computing machines, but are personal companions that are blending into the fabric of society in the form of personal digital assistants (PDAs) and personal information managers (PIMs), high functioning cellular phones and the like.","Computers no longer take up the space of an office to be able to compute pi to the 20decimal place and, instead, fit into the palm of a hand with the same computing power. Software developers cognizant of the personal companion persona of newer computing tools create user-friendly applications making the computing aspect of computers nearly invisible to users. Such technology results in user interfaces closely resembling human-type interfaces in sharp contrast to prior art computer-readable punch cards required in the past. Another growing technology affecting the ubiquitous nature of computing is wireless technology. Increasing growth of wireless and wired communication networks and the newer types of wireless networks create a need for computers to take advantage of the communication abilities of computers. Wireless no longer means a cellular phone that must be hard-wired within a vehicle, as was known in the past. Modern lithium-ion type batteries and other small but powerful batteries enable cellular phones, PIMS, PDAs and notebook computers to operate for hours at a time without requiring recharging. The long-term operation of computing devices enables a user to move from place to place without concerns of recharging looming while using a device. However, the long-term operation by a user creates opportunities for development of new computing products heretofore not fathomed as being necessary or even possible. One type of new computing product can be referred to as a location awareness product type.","Current location awareness devices are fragmented, do not work together and are not extensible or unified. For example, global positioning systems, home networking systems, local area networks (LANs) and wireless phones connected to a computing system all are capable of providing data relevant from the location perspective to a computer system. There is no common denominator between these systems allowing synergistic utilization of the location data. Each device outputs location data in different formats. What is needed, therefore, is a location awareness system that allows for synergy among location awareness products to enhance a user's experience with a computer system and appropriate data structures and schemas to enable such a system to interact with different computer components. Regarding such a schema, what is needed is a schema that operates as an organizational element, enables the functioning for location awareness, and provides a semantic common denominator to promote interoperability.","Accordingly, a method and schema for a location service includes an abstract location type that contains a variety of location elements. The location elements can include a position, an address, an spatial entity, and an electronic endpoint. The location elements can act as peers that represent a single logical location. The location elements also function as proxies for each other. According to an embodiment, applications which understand one type, but not another, function normally because a resolver populates the specific kind of location information a given application needs based on information determined from one or more other proxies that make up that location object. For example, an application that needs a position can ask a street address geocoder to resolve the address element of the schema, return a position, and store the returned position in the position component of the schema thereby enabling the application that can only understand position. The schema logically wraps disparate location elements that represent a given location.","Thus, the schema supports a location service is extensible and agnostic to the provider of the information and the technology used by the provider. The location service can be either a locally executed module or method or a distributed function that can be aggregated in the cloud.","A location object can be a collection of elements that defines a location and represents all the information known about any given location. For example, a location object can contain different types of data such as the street address, latitude\/longitude, and building\/floor\/room.","The schema is configured to be extensible by providing a generic definition of the location element and location object, and by providing the ability to inherit from generic definitions. The schema is also configured to be flexible and can contain zero or more location elements, and each location element can be a location element or anything that extends from it. Applications, services and storage engines can choose to use any subset of the location elements. Location elements can be defined with attributes, such as the city name in a street address. Other location elements can be defined with attributes that include complex data types, referred to herein as nested types. For example, the uncertainty of a position can be described in a nested type. The uncertainty provides information enabling an application\/service\/storage engine to determine whether position data is accurate and to what extent.","Additional features and advantages of the invention will be made apparent from the following detailed description of illustrative embodiments, which proceeds with reference to the accompanying figures.","Turning to the drawings, wherein like reference numerals refer to like elements, the invention is illustrated as being implemented in a suitable computing environment. Although not required, the invention will be described in the general context of computer-executable instructions, such as program modules, being executed by a personal computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multi-processor systems, microprocessor based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to: personal computers, server computers, hand-held or laptop devices, tablet devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in local and\/or remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of the computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","The computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer  and includes both volatile and nonvolatile media, and removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules  and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media, discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules  and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers hereto illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a tablet, or electronic digitizer, , a microphone , a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . The monitor  may also be integrated with a touch-screen panel or the like. Note that the monitor and\/or touch screen panel can be physically coupled to a housing in which the computing device  is incorporated, such as in a tablet-type personal computer. In addition, computers such as the computing device  may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface  or the like.","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet. For example, in the present invention, the computer system  may comprise the source machine from which data is being migrated, and the remote computer  may comprise the destination machine. Note however that source and destination machines need not be connected by a network or any other means, but instead, data may be migrated via any media capable of being written by the source platform and read by the destination platform or platforms.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface  or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","In the description that follows, the invention will be described with reference to acts and symbolic representations of operations that are performed by one or more computers, unless indicated otherwise. As such, it will be understood that such acts and operations, which are at times referred to as being computer-executed, include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains it at locations in the memory system of the computer, which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures where data is maintained are physical locations of the memory that have particular properties defined by the format of the data. However, while the invention is being described in the foregoing context, it is not meant to be limiting as those of skill in the art will appreciate that various of the acts and operation described hereinafter may also be implemented in hardware.","Referring to , an exemplary overview block diagram illustrates an architecture for a location aware service . As shown, the location service  can be a user mode service  and can be installed on a computer, such as computer  or on a handheld computing device. Location service  interacts with a plurality of applications (-) and from outside the device\/computer . Location service  is coupled within the device to kernel mode  component such as drivers (-) and a Windows\u00ae file system component . The drivers (-) and Windows\u00ae file system component  are shown coupled to hardware . Each device driver (-) is shown coupled to its respective hardware device (-). Windows\u00ae file system component  is shown coupled to a memory device , which could be a database for holding Windows\u00ae file system data. Location Service  can also be coupled to any compatible remote service, such as a MapPoint\u00ae application  or other application configured to query for location information and consistent with embodiments herein, or device to provide location data. Location service  is also coupled to active directory  via lightweight directory access protocol (LDAP) . Location Service  can also be coupled to an outside device\/client , which could be coupled to a presence server  via a communication channel . More particularly, location service  could provide location information capable of being retrieved by, for example, a real time communication (RTC) client.","Referring now to , a block diagram illustrates location service  in further detail. As shown, the location service  includes one or more location application programming interfaces (APIs) , a fuser engine  and a location management component . The location management component  interacts with provider plugins \u2033 and resolvers . Location management component  can include a user agent , a cache , a master resolver  and a plug-in manager .  also illustrates providers \u2032, which can be providers of sensed data that require at least some interpretation, such as sensor-specific data. For example, a global positioning provider can provide many items of information, including and not limited to items such as time, angle, attitude, a latitude and a longitude. Providers \u2032 transmit sensed data to provider plugins \u2033 as device-specific location information or sensor-specific data from devices. Provider plugins \u2033 can normalize the data, translate the data according to the Location Schema, and transmit the data to location management component . Providers \u2032 can be capable of translating the data prior to transmitting the data to provider plugins \u2033. The capabilities of the providers \u2032 are subject to design requirements and limitations. For example, location management component  can obtain raw device information from one or more devices via providers \u2032 or other sources. Location management component  normalizes the data, and translates the data into location reports.","Location management component  can be configured within location service . Provider plugins \u2033 operate on the data, however, the plugin manager  which is part of the location management system will normalize the data before accepting it and passing it to master resolver . Each of the components: master resolver , fuser engine , and plugin manager  indicate readiness to accept information. Thereafter, applications and components that retrieve data do so only when components ,  and  have data ready to be retrieved.","Resolvers  receive the sensed and translated data or, in some cases, raw location data, such as device specific location information, and interpret the data. Resolvers  can be implemented as plugins to location service  and can include device specific location information translators and data sources. Resolvers  function to translate device specific location information to rich location information by using data sources available to infer new data from existing data. In one embodiment, a resolver  can translate at least a portion of the data received from one or more devices. Each resolver  could be capable of interpreting at least one type of raw or partially-decoded data from a provider  and\/or be configured to interpret data from another resolver. For example, a resolver  could be dedicated to interpreting only 802.11-type data. The resolver would then register with location management component  as interpreting only 802.11-type data and would receive only that type of data. Additionally, each resolver  can be configured to translate information of another resolver, in which case the resolver might not be capable of translating raw data or partially decoded data, but could also be capable of resolving both raw data, data produced by a provider and data produced by another resover.  also shows Windows\u00ae file system (WinFS) component  that receives data from location service .","Fuser engine  generates a current location object. Location service  checks current location data via a plug-in or several plugins, including provider plugins \u2033 and resolver plugins . In this context, a plug-in can be implemented as one or more dynamically loadable libraries or dynamic link libraries (DLLs) or other dynamically loadable module capable of expanding the capabilities of software, firmware, or system components. In one embodiment, a notifications application is created on top of a notifications platform for WinFS or other appropriate system that checks to see if there is a match between what an application cares about and the current location. In an embodiment, an assembly contains one or more DLLs; a lower granularity level of dynamically loadable modules is represented by .NETMODULE files.","System Overview","Referring now to , a block diagram of location system  and surrounding components in general illustrates that location service  acts as a framework agnostic of any applications, and agnostic as to devices and data sources from which information is obtained. Location service  is shown including fuser engine , a cache , user agent , a plug-in manager  and master resolver . Location service  further includes WinFS SQL server , shown as an exemplary server only, location provider API , location resolver API , location notification API , location user API , and location management API . WinFS SQL server  couples location service  to a notification service  and to a user notification API LocUsr  and a location notification API . APIs  and  can interact with an application .","Location user API  allows an application to query for the current location of the computer running location service . Location resolver API  specifies what functions need to be implemented by a plugin in order to register with the service. As shown, location user API  receives data from WinFS server  and passes the data to one or more applications (-). Location management API  receives data from a plurality of components such as fuser engine , user agent , cache , plugin manager  and master resolver  and passes data back and forth to one or more applications . Location management API  allows the parameters of the service and components to be configured. Location management API  also allows providers and resolvers to be added and removed. Location notification API  receives data from notification service  and passes data to applications . Location notification API  allows an application to register to be notified when the location of the computer running the service has changed. In one embodiment, a separate API, an application registration API allows applications to register for notifications and determining a current location. Applications must first register to obtain location data. Once registered, an application can choose to be notified for predetermined reasons. Location resolver API  sends and receives data from plugin manager  and master resolver  and transmits the data to location resolver user\/Windows\u00ae database (), location resolver Active Directory (), and location resolver MapPoint\u00ae (), as well as other location resolvers that could benefit from the location data. Master resolver  is responsible for managing the resolution of location information. When plugin manager  passes to master resolver  device-specific location information, master resolver  routes the data to the resolvers that are both free and able to resolve the information.","Specifically, referring to , the flow through location service  can be described by an example, beginning with providers . A provider, for example, an 802.11 provider obtains scan data. If the provider  determines that there are new access points, the provider bundles the media access control (MAC) address and signal strength information into an 802.11 report. The 802.11 provider signals that information is ready for plugin manager . Plugin manager  picks up the sets of information and signals master resolver  that there is a new location report to be resolved.","Next, master resolver  retrieves the location report from plugin manager . Next, master resolver  passes the location report to user agent .","User agent  checks cache  for this location report. Cache  possibly returns a miss. If so, cache  caches the data and checks a backend. By checking the backend of cache, a user's location could be determined based on the location report. If cache does not determine the user's location, user agent  generates a miss.","After user agent  generates a miss, master resolver  passes the location report to a resolver , such as active directory (AD) resolver (). AD resolver () locates the MAC address information in the location report, connects to Active Directory and finds the location of the access point. Next, AD resolver () returns the location of the access point to master resolver  as a location report. Next, master resolver  passes the location report to user agent . User agent  checks cache  for a match with the location report returned by AD resolver (). If cache  generates a miss, user agent  caches the AD report. Next, user agent  then checks WinFS  to find any saved locations that relate to the location report generated by AD resolver (). If nothing is found, user agent  informs master resolver  that there is no additional data. Next, master resolver  signals to fuser engine  that there is data to be retrieved. Fuser engine  retrieves two location reports, including an 802.11 location report and an AD location report. Fuser engine  fuses these reports and writes a location object representing the fused reports, and both the location reports into WinFS  as the current location. Notifications service , which can be configured to run on top of WinFS or an equivalent system generates a notification. The generated notification passes through a location notification API and onto the applications registered for the notification.","Location resolver API  is an interface between location service  and resolvers. Further, location resolver API  allows each resolver to notify the location service  that a resolver has new location information. Location resolver API  enables the resolver to transfer this information to location service . Location provider API  sends and receives data from location providers such as providers (-) which can include an 802.11 provider, a Bluetooth provider, a global positioning system provider and other types of providers of location data. Location provider API  is an interface between location service  and providers. Location provider API  allows each provider to notify the service that it has new location information and transfers this information to the service.","Location provider API  and location resolver API  are both part of a plugin manager API. Plugin manager API further includes a plugin manager plugin, which is an interface between plugin manager  and a provider plugin . The plugin manager plugin interface provides data to both provider and resolver interfaces. Fuser engine  functions to fuse data obtained from master resolver . Fuser engine  generally resolves conflicts and unifies \u201creports\u201d received from different resolutions of location awareness received from location providers. The data regarding location arrives via master resolver  that can filter the data and transmit the data to cache  and then to fuser engine .","User agent  functions to check cache  to determine whether the current location reports may be resolved further using cached data. User agent  further checks WinFS  to see if the current location reports indicate a location that a user has saved. Cache  functions to store resolution trees.  illustrates an architecture that can use location service  to provide applications  with the ability to query for a current location and the ability to be notified when the location of a user has been changed.","Schema","Referring now to , embodiments are directed to a schema for managing data and location aware applications. More particularly, as discussed above, processes within location service  enable an instantiation of a location object associated with location service  to pass all the location information to an application  as an extension of the location object.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIGS. 5A and 5B","b":["220","210"]},"As shown, the conceptual diagram illustrated in  demonstrates that different types of data can be stored using one schema. Further, applications cooperating with the schema may pick and choose which data to use. The diagram in  illustrates the location object and a collection of location elements it can consist of. An application may understand some of these elements but does not need to understand all, and in particular it may understand some elements in a hierarchy and not their extensions. Thus, for example, Active Directory may be able to understand a MAC address and resolve it into a position which may be understood by a mapping application like MapPoint\u00ae. These separate elements can be combined into one object and presented as a multifunctional location object.","As described above, with reference to , a physical location can be described in many ways: friendly name, address, position, building\/floor\/room, etc. The schema illustrated in  shows how these descriptions may be accommodated through an extensible data structure.","The location profile allows applications, services and data stores to associate a location with some context. For example an application could use this associate the printer used at a home where the printer would be the context, the location would be home and the application would be referenced by some identifier. This is represented as a location profile object.  shows how this location object may be implemented in the WinFS schema definition language. The location object and the location element have already been explained in previously. A position is a type of location data. For example, a latitude, longitude pair specifies a location on earth. A coordinate system refers to the space in which the position is located. A possible implementation of the coordinate system object is shown on . We have defined a coordinate system to include units for each of the three dimensions as well as an engineering reference. An engineering reference refers to an entity model. This is used to define new coordinate systems, and in particular can be useful for enterprise administrators that wish to define coordinate systems that describe their floor plans.","One important aspect of this schema design is that we include device information that can act as a proxy for a location as well as what is traditionally considered to be location data. For example the 802.11 location object includes the MAC address and the signal strength of the access point as perceived by the wireless NIC. This can be used by to infer the user's location because a user must be within a certain proximity to be connected to an access point and see a certain signal strength. Other examples of device information that can act as proxies are IP addresses and phone numbers. Anyone skilled in the art can extend this design to include other devices that have information that can be used to infer the user's location.  shows how the 802.11 object can be implemented in WinFS as a IEEE802dot11 object.","A named location is used to give a name to a location such as \u201cHome\u201d, \u201cWork\u201d or \u201cABC enterprises\u201d.  shows how this may be implemented in WinFS as a named location object.","An entity reference is used to refer to entities that can describe locations hierarchically. Each entity reference is a node in this hierarchy that has zero or one parent, zero or more children. The entity reference also has a pointer to the data store and a schema that defines where the entire entity tree may be defined and how it can be accessed. Entities can be used for describing indoors location. For example one entity could be the building, it's child could be the floor, and it's child could be the room. Similarly an entity reference could refer to a reference to an entity that represents a building, that has a child which refers to an entity that represents a floor that has a child which refers to an entity that represents a room.  shows how an entity reference may be defined in WinFS. There are many ways to describe hierarchical locations.","An address refers to the street address of a location. The street address as defined here includes things such as the address line, city and administrative division.  shows how this may be implemented in WinFS.","A position refers to a point in a one, two or three dimensional coordinate space. It can be used to represent the latitude, longitude and altitude of a place on earth. A position has one, two or three scalar values representing the vectors in the coordinate space, a reference to a coordinate system, an uncertainty representing how accurate the position is, and it may have an angle in one, two or three space.  shows how this may be implemented in WinFS as a position object.","Referring now to , an embodiment is directed to a generic schema operable with traditional types of location information: address, position, etc, and proxies for location: MAC, IP, phone number and the like. The location information component can be configured as an extension to a basic location report that is generic for purposes of allowing any applications to utilize the schema.","The data flow diagram illustrates that a location schema according to embodiments disclosed herein can be composed of three types of reports, including device reports, logical reports, and position reports. More specifically, a user's location can be described in embodiments herein in at least three ways, including through devices nearby, an actual position and a logical association to an actual user position. The report including each type of location information is shown as a hierarchical report culminating in AReport  at the top of the diagram. AReport  is a base class for all location elements. All location objects extend from AReport  either directly or indirectly.","One of the three types of reports, the device report, is exemplified in  by objects shown as IPReport , MACReport  and Ieee80211 Report . The IPReport  contains information available to the network layer such as the IP address and the information available to the link layer. MACReport  contains information available to the link layer such as the MAC address. Ieee80211 Report  can be used to describe the signal strength and SSID of an access point as perceived from a user's device.","Logical location type reports are exemplified by AddressReport , BldgFloorRoomReport , and NamedLocationReport . Each of the AddressReport , the BldgFloorRoomReport , and NamedLocationReport  are provided to base class ACompositeReport  as the base class for logical reports. ACompositeReport  contains location information that represents a spatial hierarchy. For example, AddressReport  contains the country, administrative division, secondary city and primary city, and addressline. Each of the elements can represent a spatial hierarchy. Additional elements can be added as one of ordinary skill the art with the benefit of this disclosure will appreciate. For example, specific street address information can be included. BuildingFloorRoomReport  is also a logical location type of report and can contain building, floor and room information. Additional information can be added by adding elements to NamedLocationReport , which allows the user to name a location e.g. \u201cHome\u201d or \u201cWork\u201d.","Each of the hierarchies in the logical report is a HierarchyLevel  object. HierarchyLevel object  contains the actual content that describes that hierarchy level. For example, content can include elements such as floor number and a spatial certainty parameter that provides a statistical certainty regarding the likelihood that the location service is correct regarding the location of a user relative to a given hierarchy.","Position type reports are shown as PoseReport , VelocitySensorReport  and CoodSystem . PoseReport  describes the position, angle, and coordinate system (via CoodSystem ) of the user's location. VelocitySensorReport  extends from PoseReport  to describe the speed at which a user is traveling. Thus, the speed parameter and SpeedUnit provide a context for a position. A direction can be provided by CoordSystem , shown as holding elements Code, CodeSpace, Edition, Descriptor, xyUnit, zUnit, and angleUnit. As one of skill in the art with the benefit of this disclosure witll appreciate, the actual elements in each object are exemplary in nature and similar, expanded or reduced elements within each object are included within the general description of each object.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 7","b":["710","720","722"]},"In contrast, Location.SimpleUncertainty  represents a sharp cutoff of possible locations or angles at the edge of a sphere, using elements AnglePrecision:float[1:1] and PointPrecision:float[1:1]. For three dimensional locations, a covariance matrix is provided in Location.StatisticalUncertainy , which provide the 3\u00d73 covariance matrices of PointCovarianceMatrix or AngleCovarianceMatrix. For two dimensional or one dimensional locations, the matrix can be used by zeroing the entries in the row(s) and column(s) of the matrix that correspond to the unused dimensions.","Location.Position 3D  denotes the vector representing the position in one, two or three space. Location.PositionUncertainty  is the abstract base class of a position. Any type for describing position uncertainty can derive from base class . Two types of uncertainty are illustrated as deriving from base class , including Location.Simple Uncertainty  and Location.Statistical.Uncertainty . A benefit of separating the types of uncertainty is that it allows developers to have both a simple solution if a coarse description of uncertainty is good enough, and a rich solution if a detailed description of an uncertainty is required.","A simple type of uncertainty contains nothing more than a scalar value for angle uncertainty and one for the position uncertainty. A scalar and angle can be used, for example, to denote a radius around the position in which the true position may lie. A statistical uncertainty contains a covariance matrix for angle uncertainty and one for position uncertainty. A matrix can be used to denote an uncertainty distribution that shows the probability of the true position being in a region around a given position. A location report captures the information the location service may tag to a location object such as the creation time. Such as, for example, when the user was at that location and the confidence of the user being in that location. In one embodiment, every location element contains zero or one location reports, shown as, for example, Core.LocationReport  to allow any location element generated by the location service to contain the extra information such as confidence and creation time. Core.LocationReport  feeds into Core.CategorizedNestedElement  as representing a type of nested element. Location.NonScalarString1024  is configured to hold nonscalar string values as needed.","In view of the many possible embodiments to which the principles of this invention can be applied, it will be recognized that the embodiment described herein with respect to the drawing figures is meant to be illustrative only and are not be taken as limiting the scope of invention. For example, those of skill in the art will recognize that the elements of the illustrated embodiment shown in software can be implemented in hardware and vice versa or that the illustrated embodiment can be modified in arrangement and detail without departing from the spirit of the invention. Therefore, the invention as described herein contemplates all such embodiments as can come within the scope of the following claims and equivalents thereof."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["While the appended claims set forth the features of the present invention with particularity, the invention, together with its objects and advantages, can be best understood from the following detailed description taken in conjunction with the accompanying drawings of which:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 5B","FIG. 5A"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
