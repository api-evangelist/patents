---
title: Performance logging framework
abstract: Techniques for logging performance data are described herein. According to one embodiment, in response to a request for logging performance data, where the request includes a data type indicating a type of performance data and an actual performance data value, a non-linear mathematical operation is performed on the performance data value to generate an index value. The performance data represents a performance measurement of a predetermined operation performed by a data processing system. Thereafter, a value of a data field in a performance data store that stores the performance data is updated based on the type of the performance data and the index value. The value of the data field is updated without having to lock the data field for purpose of simultaneously accesses.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08718978&OS=08718978&RS=08718978
owner: Apple Inc.
number: 08718978
owner_city: Cupertino
owner_country: US
publication_date: 20110228
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF THE DESCRIPTION","DETAILED DESCRIPTION"],"p":["Embodiments of the present invention relate generally to computer systems. More particularly, embodiments of the invention relate to logging performance data of computer systems.","One operation in fine-tuning and troubleshooting of information systems, such as a computer application, is to measure the \u201cperformance\u201d (time taken) to deliver a requested result from that system. Performance tools have been developed which measure certain events from an operating system perspective by measuring the time taken to process operations such as computations and I\/O (Input\/Output).","Typically, the performance data is stored in a database for subsequent analysis of the performance. The performance data is typically stored in a linear fashion where the data is stored under the particular performance category. For example, when a particular measured operation (e.g., a Web access operation) is completed within one second, the performance data corresponding to the one second category is updated. Similarly, when such an operation is completed within two seconds, the corresponding performance data is updated, etc. Such a configuration requires a significantly large storage space to store the performance data. In addition, when performance data is accessed (e.g., logged), a locking mechanism has to be in place for simultaneous accesses. This tends to slow down the access of the performance data, particularly, when there are many clients attempting to access the same performance data.","Techniques for logging performance data are described herein. According to one embodiment, in response to a request for logging performance data, where the request includes a data type indicating a type of performance data and an actual performance data value, a non-linear mathematical operation is performed on the performance data value to generate an index value. The performance data represents a performance measurement of a predetermined operation performed by a data processing system. Thereafter, a value of a data field in a performance data store that stores the performance data is updated based on the type of the performance data and the index value. The value of the data field is updated without having to lock the data field for purpose of simultaneously accesses.","Other features of the present invention will be apparent from the accompanying drawings and from the detailed description which follows.","Various embodiments and aspects of the inventions will be described with reference to details discussed below, and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention. Numerous specific details are described to provide a thorough understanding of various embodiments of the present invention. However, in certain instances, well-known or conventional details are not described in order to provide a concise discussion of embodiments of the present inventions.","Reference in the specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in conjunction with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification do not necessarily all refer to the same embodiment.","According to some embodiments, a performance data logging system is provided to store performance data in an efficient way to reduce an amount of storage space required while still provides sufficient performance logging information. In one embodiment, the performance data is stored in a non-linear fashion, in which certain categories are aggregated or condensed according to a predetermined mathematical algorithm. In one particular embodiment, the performance data is stored based on a logarithm (Log) based distribution, such as, for example, a Log 2 based distribution. In addition, according to one embodiment, the locking mechanism is not required for multiple clients to access the same performance data. Thus, even though there may be a chance of missing some logging activities or data because the locking mechanism is not utilized, since the performance data is stored in an aggregated or condensed manner, such a configuration still can provide sufficiently accurate enough data for the purpose of evaluating performance of a data processing system or a component running within the data processing system.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 1","FIG. 1"],"b":["100","102","101","103","100","101","103","101","103","101","103","103","100","103"]},"In one embodiment, when a request for logging performance data is received at logging framework  from client , the request includes an event identification (ID) identifying a particular event that has been measured and the actual measured data value. In response to the request, data logging module  is configured to perform a non-linear mathematical operation based on non-linear mathematical algorithm  on the data value. The result of the non-linear mathematical operation is used as an index or reference to identify one of data elements of a data set associated with the event ID. The value of the identified data element is then updated (e.g., incremented or decremented) accordingly.","For example, referring to , a request  for logging performance data includes type  indicating a type of performance data to be logged and actual data value . When request  is received at logging framework , mathematical function  is utilized to perform a non-linear mathematical operation, such as a Log 2 operation, on the data value . The result of the mathematical operation in combination with the type information  is used to identify one of data elements - of types - stored in data store . In one embodiment, the data stored in data store is organized based on the types (e.g., events - being logged) of data. Each type of performance data includes an array of data elements, each data element corresponding to a category of performance data (e.g., 1 second, 10 second, or 1 minute categories) of a particular type. Once the data element has been identified based on the mathematical result and the type information, the data value of the identified data element is updated (e.g., increment or decrement).","Data in data store  can be stored in a variety of data structures or tables.  is an example of a data structure that can be used to store the performance data being logged. Referring to , in this example, the data can be stored in a table having rows and columns, where each row represents a type of performance data and includes multiple data elements as columns. Each request for logging performance data is examined based on its type information and the result of mathematical operation on its data value. The logarithm (or log) of a number to a given base is the power to which the base must be raised in order to produce that number. For example, the logarithm of 1000 to base 10 is 3, because 10 to the power of 3 is 1000: 10=1000. The logarithm of x to the base b is written as log(x), such as log(1000)=3. Logarithmic scales reduce wide-ranging quantities to smaller scopes. In one embodiment, the non-linear mathematical operation is a logarithm operation. In one particular embodiment, the logarithm operation is a Log 2 operation. However, it is not so limited; other logarithm operations such as Log 10 based operations may also be applied.","For example, when a request is received having an event ID as 1 and data value is between 2 to 4 seconds (e.g., greater than or equal to 2 and less than 4 with a proper rounding or truncating operation), assuming that the non-linear mathematical function is Log 2 based function, data element  will then be updated (e.g., incremented or decremented). On the other hand, if the data value being logged is between 4 and 8 seconds (e.g., greater than or equal to 4 and less than 8 with a proper rounding or truncating operation), data element  will be updated. As can be shown data element  represents more performance data categories than data element , and thus is more condensed, which in turn saves more storage space. The distribution of the data is non-linear: the higher the index is, more condensed the data element is. In addition, the data structure as shown in  can be made constantly available. The access of the data structure can be performed without having to require locking the data element being accessed for simultaneous accessing or wait for the lock to be released from another client, etc. As a result, the speed of the data logging can be greatly improved. On the other hand, this may also miss some logging events due to the access without locking, which may happen rarely. A data point may be lost only when two data points are extremely close to each other in time. If more data are lost, it may be due to that specific condition in frequent, and the count would still be substantially close to the correct value. As a result, the score for that bracket will still be relatively high. However, due to the aggregated data logging using a non-linear mathematical operation, the data can still has sufficient accuracy.","In one embodiment, in computer programming space, such as C\/C++ programming language, the data structure as shown in  can be implemented as a two-dimensional (2D) array. In response to a request having \u201ctype\u201d information and actual data \u201cvalue,\u201d the corresponding data element can be updated, in this example, incremented as follows:\n\n",{"@attributes":{"id":"p-0022","num":"0022"},"figref":["FIG. 4","FIG. 1","FIG. 4"],"b":["400","400","100","401","402","403","404"]},{"@attributes":{"id":"p-0023","num":"0023"},"figref":["FIG. 5","FIG. 1","FIG. 5","FIG. 5"],"b":["500","100"]},"As shown in , the computer system , which is a form of a data processing system, includes a bus or interconnect  which is coupled to one or more microprocessors  and a ROM , a volatile RAM , and a non-volatile memory . The microprocessor  is coupled to cache memory . The bus  interconnects these various components together and also interconnects these components , , , and  to a display controller and display device , as well as to input\/output (I\/O) devices , which may be mice, keyboards, modems, network interfaces, printers, and other devices which are well-known in the art.","Typically, the input\/output devices  are coupled to the system through input\/output controllers . The volatile RAM  is typically implemented as dynamic RAM (DRAM) which requires power continuously in order to refresh or maintain the data in the memory. The non-volatile memory  is typically a magnetic hard drive, a magnetic optical drive, an optical drive, or a DVD RAM or other type of memory system which maintains data even after power is removed from the system. Typically, the non-volatile memory will also be a random access memory, although this is not required.","While  shows that the non-volatile memory is a local device coupled directly to the rest of the components in the data processing system, the present invention may utilize a non-volatile memory which is remote from the system; such as, a network storage device which is coupled to the data processing system through a network interface such as a modem or Ethernet interface. The bus  may include one or more buses connected to each other through various bridges, controllers, and\/or adapters, as is well-known in the art. In one embodiment, the I\/O controller  includes a USB (Universal Serial Bus) adapter for controlling USB peripherals. Alternatively, I\/O controller  may include an IEEE-1394 adapter, also known as FireWire adapter, for controlling FireWire devices.","Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion, it is appreciated that throughout the description, discussions utilizing terms such as those set forth in the claims below, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","Embodiments of the invention also relate to an apparatus for performing the operations herein. Such a computer program is stored in a non-transitory computer readable medium. A machine-readable medium includes any mechanism for storing information in a form readable by a machine (e.g., a computer). For example, a machine-readable (e.g., computer-readable) medium includes a machine (e.g., a computer) readable storage medium (e.g., read only memory (\u201cROM\u201d), random access memory (\u201cRAM\u201d), magnetic disk storage media, optical storage media, flash memory devices).","The processes or methods depicted in the preceding figures may be performed by processing logic that comprises hardware (e.g. circuitry, dedicated logic, etc.), software (e.g., embodied on a non-transitory computer readable medium), or a combination of both. Although the processes or methods are described above in terms of some sequential operations, it should be appreciated that some of the operations described may be performed in a different order. Moreover, some operations may be performed in parallel rather than sequentially.","Embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of embodiments of the invention as described herein.","In the foregoing specification, embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are, accordingly, to be regarded in an illustrative sense rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments of the invention are illustrated by way of example and not limitation in the figures of the accompanying drawings in which like references indicate similar elements.",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
