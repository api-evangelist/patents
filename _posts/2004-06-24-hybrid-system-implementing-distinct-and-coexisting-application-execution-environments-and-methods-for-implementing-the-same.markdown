---
title: Hybrid system implementing distinct and co-existing application execution environments and methods for implementing the same
abstract: A hybrid system is provided. The system includes a computing device implementing a first application execution environment (AEE) and a second AEE. The first AEE is configured to be isolated from the second AEE. The first software application associated with the first AEE is configured to be processed on the first AEE such that the first software application is denied direct access to the second AEE. A second software application associated with the second AEE is configured to be processed on the second AEE such that the second software application is denied direct access to the first AEE.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08104085&OS=08104085&RS=08104085
owner: Oracle America, Inc.
number: 08104085
owner_city: Redwood City
owner_country: US
publication_date: 20040624
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","COPYRIGHT AUTHORIZATION","BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This application claims priority from U.S. Provisional Patent Application No. 60\/483,543, filed on Jun. 27, 2003, and entitled \u201cHSIIC-PMIS\u201d by Fresko et al., which is incorporated herein by reference in its entirety.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","1. Field of the Invention","This invention relates generally to computing devices, and more particularly, to computing devices implementing isolated and co-existing Application Execution Environments.","2. Description of the Related Art","As is well known, new technologies are being continually developed, supplying consumers with extra features, capabilities, and services. To meet the requirements of the new technologies and\/or to accommodate the newly added features, capabilities, or services, new computing devices executing new software applications may need to be developed. While the new features, capabilities, and services of the new technologies can be used by consumers using the advanced computing devices executing the new software applications, the new features, capabilities, and services may not be supported by computing devices unable to meet the requirements of the new technologies (e.g. running a different software application, thus providing different capabilities). The consumers, however, aspire to utilize the new features, capabilities, and services provided by the new technologies on computing devices failing to meet the requirements of the new technologies. While taking advantage of the new technologies, however, the consumers do not wish to sacrifice any of the capabilities and services originally provided by the computing devices failing to meet the requirements of the new technologies, which at the present time is unachievable.","In view of the foregoing, a need therefore exists in the art for systems and methods implementing the same wherein isolated application execution environments having diverse capabilities can co-exist on a same computing device.","Embodiments of the present invention provide systems and methods wherein distinct application execution environments (AEE) can co-exist on a same computing device. It should be appreciated that the present invention can be implemented in numerous ways, including as a process, an apparatus, a system, a device, or a method. Several inventive embodiments of the present invention are described below.","In one embodiment, a system for implementing isolated application execution environments on a computing device is provided. The system includes means for providing the computing device to include a first environment and a second environment, means for initiating execution of a second software application on the second environment, and means for denying the second software application direct access to the first environment while the second software application is being executed. The first environment is configured to have greater capabilities than the second environment.","In another embodiment, a hybrid system is provided. The system includes a computing device implementing a first application execution environment (AEE) and a second AEE. The first AEE is configured to be isolated from the second AEE. The first software application associated with the first AEE is configured to be processed on the first AEE such that the first software application is denied direct access to the second AEE. A second software application associated with the second AEE is configured to be processed on the second AEE such that the second software application is denied direct access to the first AEE.","In still another embodiment, a system for maintaining a multi-application execution environment is provided. The system includes a computing device that implements an alpha environment and a plurality of beta environments. The alpha environment is configured to have an alpha capability. Each beta environment of the plurality of beta environments is configured to have an associated beta capability. The alpha environment is configured to be isolated from each beta environment of the plurality of beta environments. An alpha software application associated with the alpha environment is configured to be processed on the alpha environment such that the alpha software application is denied direct access to each beta environment of the plurality of beta environments. Each beta software application associated with each beta environment of the plurality of beta environments is configured to be processed on the associated beta environment of the plurality of beta environments such that the beta software application is denied direct access to the alpha environment. Each beta software application of each beta environment of the plurality of beta environments is configured to be denied direct access to non-associated beta environments.","In yet another embodiment, a method for implementing isolated application execution environments on a computing device is provided. The method includes providing the computing device including a first environment and a second environment, initiating execution of a second software application on the second environment, and denying the second software application direct access to the first environment while the second software application is being executed. The first environment is configured to have greater capabilities than the second environment.","In still another embodiment, a method for a Mobile Information Device Profile (MIDP) application execution environment and a Connected Device Configuration (CDC) environment to co-exist on a computing device is provided. The method includes providing the computing device including the MIDP environment and the CDC environment, executing a MIDlet on the MIDP environment, and denying the MIDlet direct access to the CDC environment while the MIDlet is being executed. The CDC environment is configured to have greater capabilities than the MIDP environment.","Other aspects of the invention will become apparent from the following detailed description, taken in conjunction with the accompanying drawings, illustrating by way of example the principles of the invention.","Inventions for hybrid systems including co-existing yet isolated application execution environments (herein after referred to as \u201cenvironment\u201d or \u201cAEE\u201d) and methods for implementing the same are provided. In one embodiment, a less capable environment, hereinafter referred to as \u201cbeta environment\u201d co-exists with a most capable environment, hereinafter referred to as \u201calpha environment\u201d on a computing device. The alpha environment is configured to have more capabilities than the beta environment such that software applications associated with the alpha environment are prevented from directly accessing the beta environment, and software applications associated with the beta environment are prevented from directly accessing the alpha environment. In one example, the hybrid system of the present invention denies direct access to the alpha environment by rejecting beta environment request for alpha environment-only capabilities. In another example, when accessing the capabilities included in the alpha and beta environments, the hybrid system of the present invention denies the beta environment access to the alpha environment by restricting the accessibility of the beta environment to the capabilities of the beta environment.","As used herein, a capability is defined as one or more resources available to the environment (e.g., libraries, interfaces, functionalities, methods, classes, Java properties, static variables of the classes, files, network connections, etc.). The more capable environment, as used herein, refers to the environment providing the broadest set of resources","In another example, a classloader that is a subclass of a user-defined classloader is instantiated, thus creating a namespace in Java. Thereafter, a software application running on top of the beta environment is initiated sending a request to load a class to the classloader. In this manner, every request for a class is directed through the same instance of the classloader. Furthermore every request on behalf of the class is guided through the same classloader instance of the class.","If the new classloader is not capable of processing the request issued by the software application, the issued request is sent to yet another classloader (also a subclass of the user-defined classloader) configured to load the beta environment class library. Delegating the request from the beta software application to the immediate parent is continued until the request is sent to alpha environment \u201cSystem ClassLoader\u201d. Thereafter, the result of loading the class is sent to the alpha environment running on top of the hardware.","According to one embodiment, the alpha environment (the most capable environment) and a plurality of beta environments (less capable environments) can co-exist on the computing device with the alpha environment being capable of supporting each beta environment of the plurality of environments, each being less capable than the alpha environment. In one instance, co-existing but distinct environments can be implemented to prevent direct access to any environment from any Java 2 capable environment, and from any environment to the Java 2 capable environment.","In another embodiment, each of the beta environments can be built on top of the alpha environment as well as all the various environments associated with the alpha environment. The alpha environment as well as all the various environments associated with same is hidden from direct calls generated by the software applications associated with each of the beta environments. In the same manner, each of the beta environments is hidden from direct calls generated by the software applications associated with the alpha environment. Additionally, each of the beta environments is hidden from calls generated by the software applications associated with each of the remaining beta environments.","In one exemplary embodiment, a Mobile Information Device Profile (MIDP) environment (i.e., the less capable environment) can co-exist with a Connected Device Configuration (CDC) environment (i.e., the more capable environment) or any of the various environments associated with the CDC environment. In such exemplary embodiment, the CDC environment is hidden from all direct calls by MIDP applications (MIDlets) while the MIDP environment is hidden from all direct calls by CDC applications. In one example, hiding the MIDP environment from the CDC environment and the CDC environment from the MIDP environment is achieved by using a combination of classloaders and imposition of limitations. In one instance, a classloader subclass MIDletClassLoader is instantiated for each MIDlet such that each of the class requests by the MIDlet goes through the MIDletClassLoader classloader. In the same manner, all of the classes referenced by the requested class are also guided through the same instance of the MIDletClassLoader. If the MIDlet request for the class requested cannot be satisfied by the MIDletClassLoader classloader, the request for the class is delegated to the immediate parent of the MIDletClassLoader.","According to one embodiment, if the MIDlet requests a class that is outside of the MIDlet domain, the MIDletClassLoader rejects the request and instigates an exception. In a different embodiment, the MIDlet request can be for a class that exists both in MIDP and in CDC, with the MIDP version being a subset of the CDC. In such a scenario, once the MIDletClassLoader loads a class of the MIDlet, the MIDletClassLoader traverses the constant pool of the class to determine whether the class has direct access to any \u201cforbidden members\u201d (i.e., members included in CDC but not in MIDP). According to one example, every time the class is defined, the constant pool is traversed in search of forbidden members. If the class includes a forbidden member, the request for the class or the class is rejected. In yet another embodiment, the MIDlet requests a class with a method that contains floating-point byte codes. In one example, the request for loading of the class by the MIDlet can be denied at classloading time. In another example, the request for execution of the floating-point byte codes generates a run-time exception. Several exemplary embodiments of the invention will now be described in detail with reference to the accompanying drawings.","In the following description, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be understood, however, to one skilled in the art, that the present invention may be practiced without some or all of these specific details. In other instances, well known process operations have not been described in detail in order not to unnecessarily obscure the present invention.","I. Environment Description\u2014Java\u2122 2 Enterprise Edition, Platform, Java 2 Desktop Edition, Java 2 Micro Edition, Platform and Java","As embodiments of the present invention can implement the J2EE or J2ME, a brief introduction to J2ME and J2EE architectures are provided below. The Java 2, Micro Edition (J2ME) platform is a Java platform for consumer and embedded devices such as mobile phones, Personal Digital Assistants (PDAs), TV set-top boxes, in-vehicle telematic systems, and a broad range of embedded devices. Similar to the enterprise (J2EE), desktop (J2SE\u2122) and smart card (Java Card\u2122) counterparts, the J2ME platform is a set of standard Java application program interfaces (APIs) defined through the Java Community Processs program by expert groups that include leading device manufacturers, software vendors and service providers.","The J2ME platform delivers the power and benefits of Java technology tailored for consumer and embedded devices. The J2ME provides a flexible user interface, robust security model, broad range of built-in network protocols, and support for networked and disconnected applications. J2ME applications are written for a wide range of devices. As such, the J2ME applications can be downloaded dynamically and leverage each native capability of each device. The J2ME platform can be deployed on millions of devices (e.g., mobile phones, PDAs, automotive devices, etc.) supported by leading Java technology tools vendors and used by companies worldwide. Briefly stated, J2ME is the preferable platform for consumer and embedded devices.","The J2ME architecture defines configurations, environments and optional packages as elements for building complete Java runtime environments that meet the requirements for a broad range of devices and target markets. Each combination is optimized for the memory, processing power, and I\/O capabilities of a related category of devices. The result is a common Java platform that fully leverages each type of device to deliver a rich user experience.","Configurations","Configurations are composed of a virtual machine and a minimal set of class libraries. The configurations provide the base functionality for a particular range of devices that share similar characteristics (e.g., network connectivity, memory footprint, etc.). Currently, there are two J2ME configurations: the Connected Limited Device Configuration (CLDC), and the Connected Device Configuration (CDC):","CLDC","CLDC is the smaller of the two configurations, and by way of example, is designed for devices with intermittent network connections, slow processors, and limited memory (e.g., mobile phones, two-way pagers, PDAs, etc.). By way of example, the devices may have either 16- or 32-bit CPUs, and a minimum of 128 KB to 512 KB of memory available for the Java platform implementation and the associated applications.","CDC","CDC is designed for devices having more memory, faster processors, and greater network bandwidth (e.g., TV set-top boxes, residential gateways, in-vehicle telematics systems, high-end PDAs, etc.). CDC includes a full-featured Java virtual machine, and a much larger subset of the J2SE platform than CLDC. As a result, most CDC-targeted devices have 32-bit CPUs and a minimum of 2 MB of memory available for the Java platform and associated applications.","Environments","In order to provide a complete runtime environment targeted at specific device categories, configurations can be combined with a set of higher level APIs or environments that further define the application life cycle model, the user interface, and access to device specific properties.","Mobile Information Device Profile:","The Mobile Information Device Profile (MIDP) is designed for mobile phones and entry-level PDAs. MIDP is a set of Java APIs which, together with CLDC, provides a complete J2ME application runtime environment targeted at mobile information devices, such as mobile phones and entry level PDAs. In this manner, MIDP offers the core application functionality required by mobile applications (e.g., the user interface, network connectivity, local data storage, and application management, etc.). Combined with CLDC, MIDP provides a substantially complete Java runtime environment that leverages the capabilities of handheld devices and minimizes both memory and power consumption.","Currently, CLDC, combined with the MIDP is the Java runtime environment for mobile information devices (MIDs) (e.g., phones, entry level PDAs, etc.). MIDP provides the core application functionality required by mobile applications (e.g., the user interface, network connectivity, local data storage, and application lifecycle management packaged as a standardized Java runtime environment and set of Java APIs, etc.).","Foundation Profile","CDC Profiles are layered so that profiles can be added as needed to provide application functionality for different types of devices. The Foundation Profile (FP) is the lowest level Profile for CDC and provides a network-capable implementation of CDC that can be used for deeply embedded implementations without a user interface. FP can also be combined with Personal Basis Profile and Personal Profile for devices that require a graphical user interface (GUI).","Personal Profile","The Personal Profile (PP) is the CDC environment aimed at devices requiring full GUI or Internet applet support (e.g., high-end PDAs, communicator-type devices, game consoles, etc.). PP includes the full Java Abstract Window Toolkit (AWT) libraries and offers Web fidelity capable of easily running Web-based applets designed for use in a desktop environment. PP replaces PersonalJava\u2122 technology and provides PersonalJava applications a clear migration path to the J2ME platform.","Personal Basis Profile:","The Personal Basis Profile (PBP), is a subset of PP. PBP provides an application environment for network connected devices that support a basic level of graphical presentation or require the use of specialized graphical toolkits for specific applications. Devices (e.g., TV set-top boxes, in-vehicle telematics systems, information kiosks, etc.) Both PP and PBP are layered on top of CDC and FP.","A computing device including a combination of a configuration (e.g., the CLDC) and an environment (e.g., MIDP) is configured to implement a set of application profile interface (API) associated with the combination. By preventing the use of APIs not associated with the combination, fragmentation of the platform can be achieved.","As J2EE, J2SE, and J2ME all use the Java\u2122 Virtual Machine (hereinafter JVM), an overview of the latter is herein provided. The JVM is an abstract computing machine. Similar to other computing machines, the JVM has an instruction set and manipulates various memory areas at run time. For instance, the JVM may not assume any particular implementation technology, host (i.e., underlying platform) hardware, or host operating system. Furthermore, JVM may not be inherently interpreted, however, the JVM can be implemented by compiling the JVM instruction set to that of the host CPU. The JVM may also be implemented in microcode or directly in hardware.","The JVM knows does not know of the Java\u2122 programming language. Rather, the JVM knows of a class file format, which is a particular binary format. A class file contains JVM instructions (i.e., byte codes), a symbol table (i.e., a constant pool), and other ancillary information. A class file is produced by the Java compiler and can be loaded into any JVM. Furthermore, a class file is usually stored on disk or is accessed by way of a network connection. For additional information on Java\u2122 programming language and JVM reference should be made to \u201cThe Java\u2122 Virtual Machine Specification,\u201d by Lindholm and Yellin, Addison Wesley, second edition.","The JVM can also dynamically load classes needed by a running application, supporting dynamic loading of software components on the Java platform. The JVM uses classloaders to load class files and create class objects defined in Java code. For instance, the classloaders are instances of subclasses of a class ClassLoader. The ClassLoader is a subsystem responsible for locating the appropriate file, copying the appropriate file into the memory, and making the file useful as a part of a running application. In one embodiment, multiple classloaders can exist on a JVM at the same time. The classloaders can be arranged in a hierarchy such that a classloader can forward a classloading request to the parent classloader of the class.","By way of example, when an initial class is loaded by a classloader, the classloader is defined as the class defining classloader. As a result, the JVM will use the specific classloader to load almost all classes referenced by the initial class. In this manner, for the JVM to create an object of a class referenced by the initial class, the virtual machine is configured to first resolve the referenced class. For instance, if the referenced class has not been loaded, the JVM is configured to load the referenced class using the classloader. Once a referenced class has been loaded, the JVM can resolve the reference to the referenced class and then create the object associated with the referenced class.","According to one embodiment, a Java application may use several different kinds of classloaders to manage various software components. Classloaders can be user-defined classloaders or system classloaders that are supplied by the JVM. User-defined classloaders can be used to create classes originating from user-defined sources (e.g., a browser application). Most system classes (such as java.lang.String) are loaded into the system classloader and are supported directly by the JVM.","A user-defined classloader further can specify the remote location from which a class can be loaded. User-defined classloaders can also assign appropriate security attributes to classes that are loaded from a certain source. For more information on classloaders, reference should be made to a paper entitled \u201cDynamic Class Loading in the Java\u2122 Virtual Machine,\u201d by Sheng Liang and Gilad Bracha, dated October 1998.","II. Hybrid System Implementing Co-Existing Yet Isolated Application Execution Environments","Keeping the overviews to J2EE, J2SE, J2ME, Java, classloaders, and user-defined classloaders in mind, reference is made to a simplified block diagram shown in  depicting a computing device  implementing the hybrid system, in accordance with one embodiment of the present invention. A plurality of isolated beta1-betaapplication execution environments (hereinafter referred to as \u201cenvironment\u201d or \u201cAEE\u201d) -are shown to be co-existing with an alpha environment  in a storage  of a computing device . An alpha application  sits on top of the alpha environment  and is executed by the alpha environment  while beta1-betaapplications -sit on top of associated beta1-betaenvironments -, and are configured to be executed on associated beta1-betaenvironments -. In one embodiment, each of the beta1-betaenvironments -is configured to be related to the alpha environment (e.g., have similar architectures, etc.). In the embodiment of , the alpha environment  has the most capabilities. By way of example, a core set of libraries for the alpha environment  has been recognized to be broader than core set of libraries corresponding to each of the beta1-betaenvironments -","In accordance with one embodiment, each beta application of the beta1-betaapplications -is given the illusion that each application is being executed on the associated beta1-betaenvironment -solely. However, in reality, the computing device  has the capability to perform more complex and complicated functions because of including the alpha environment  capable of executing more complicated and complex alpha applications  executed on the alpha environment . One embodiment of the present invention provides such capability by preventing the beta1-betaapplications -from directly accessing the alpha environment . In this manner, the alpha environment  (e.g., the most capable environment) of the hybrid system of the present invention provides compatibility for running beta1-betaapplications -each of which expects to be executed on the corresponding beta1-betaenvironment -. Nonetheless, one embodiment of the present invention may enable the entire capabilities of the alpha environment  available when each of the beta1-betaenvironments -is being implemented.","By way of example, the alpha environment  running on the computing device  in conjunction with beta1-betaenvironments -can provide the user of the computing device  with more capabilities, such as interfaces, functionalities, classes, etc. Barriers, however, are created so that each of the beta1-betaapplications -has no knowledge of the existence of the alpha environment  or any of the remaining beta environments. Likewise, the alpha application  has no knowledge of the existence of the beta1-betaenvironments -, and as such, cannot directly access any of the beta1-betaenvironments -","In accordance with one example, while beta1-betaenvironments -are less capable than the alpha environment , each of the beta1-betaenvironments -may include capabilities not present in the alpha environment. In one example, each pair of beta1-betaenvironment -and the alpha environment  can share code and implementation. In another embodiment, beta1-betaenvironments -can share code and implementation. Thus, in one embodiment of the present invention, the environments and the layers of the hybrid system can share code while respective applications of each environment are merely aware, and as such, can only interface with the associated environment, respectively.","In one exemplary embodiment, beta1-betaenvironments -are not aware of the alpha environment  as beta environments -are denied direct access to the alpha environment by the hybrid system of present invention rejecting beta1-betaenvironments -requests for alpha environment-only capabilities. In another example, when accessing capabilities included in each pair of the alpha environment and beta environment, the hybrid system of the present invention denies beta environments access to the alpha environment by restricting the accessibility of the beta environments to associated capabilities. Additional information regarding the mechanism implemented to hide co-existing environments from one another is provided with respect to .","According to one embodiment of the present invention, an intersection may exist between the classes associated with the alpha environment  and classes associated with each of the beta1-betaenvironments -. In such a scenario, each beta1-betaenvironment -in each pair of the alpha environment  and beta1-betaenvironment -may define a class member (e.g., field, member, etc.) not included in the alpha environment . In a different embodiment, however, an intersection may not exist between the classes associated with the alpha environment  and classes associated with each of the beta1-betaenvironments -","Proceeding to the simplified enlarged block diagram shown in , execution of beta1-betaapplications -on the associated beta1-betaenvironments -using the hybrid system, can further be understood, in accordance with one embodiment of the present invention. In one exemplary embodiment, the hybrid system of the present invention can include a pair of environments including a most capable environment (e.g., the alpha environment ) and a less capable environment (e.g., the beta1 environment ) so as to give the beta application the illusion of being run on the beta1 environment. In one embodiment, all classloaders implemented in the hybrid system are instantiated as the associated environment is being set up. Furthermore, a parent classloader of a classloader is instantiated before instantiating the child classloader. In one example, a CDC System ClassLoader is instantiated when the system is started. Thereafter, a CDCApplicationClassLoader is instantiated as part of setting up the CDC environment. Beta 1 ApplicationClassLibrarylmplementationClassloader and Beta1ApplicationClassLoader are then successively instantiated as part of setting up the MIDP environment. According to one example, the Beta1 ApplicationClassLoader is configured to be a subclass of a user-defined classloader ClassLoader. The user-defined Beta1ApplicationClassLoader  is configured to create a namespace in Java, and is configured to be responsible for loading each requested class as well as almost all the classes referenced by the requested class.","Loading the requested class is delegated to theBeta1ApplicationClassLibrarylmplementationClassloader  if the request for the initial class cannot be processed by the Beta1ApplicationClassLoader . In one example, the Beta1ApplicationClassLibrarylmplementationClassloader is designed to load the beta1 class library. Thereafter, processing the requested class is continued until concluded followed by sending the results to the alpha environment . It must be noted that delegating the request from beta1 application to the immediate parent is continued until the request is sent to CDC System ClassLoader. According to one example, the Beta1ApplicationClassLibrarylmplementationClassloader may include a filter so as to reject the beta1 application request to directly access the alpha environment .","Analogously, the alpha application  is shown to be sent directly to the alpha environment, thus preventing the alpha application  from discovering the existence of the beta1 environment or any of the remaining beta2-betaenvironments -. In the same manner, pairs of alpha environment  and beta2-betaenvironments can be formed so as to give each of the beta applications -the illusion of running on associated beta2-betaenvironments while being able to use the extra capabilities provided by the alpha environment . As shown, each beta environment of beta2-betaenvironments has an associated BetaApplicationClassLoader and BetaApplicationClassLibrarylmplementationClassLoader.","Reference is made to the simplified enlarged block diagram shown in  illustrating the integration of the beta environment  into the computing device  running on the alpha environment , in accordance with one embodiment of the present invention. The beta environment application  associated with the beta environment  is configured to be executed on the computing device  with an underlying operating system and hardware component  via the mediating components, BetaEnvironmentApplicationClassLoader  and BetaEnvironmentClassLibrarylmplementationClassLoader .","According to one example, if the request generated by the beta environment application  is to load an alpha-only capability, such request for a forbidden capability is filtered by the BetaEnvironmentClassLoader  and is rejected. However, if the request generated by the Beta environment application  is for a capability existing in beta environment  and alpha environment , beta environment application  is prevented from directly accessing the alpha environment by restricting the accessibility of the beta environment application  to the capabilities of the beta environment, only. By way of example, and as will be discussed in more detail below, the alpha environment-only capability can be a class defined solely in the alpha environment. An example of restricting access to the beta environment capability can be when the alpha environment includes additional members or additional byte codes of a member. However, as the capability of the beta environment is limited and the beta environment does not support the additional members or the additional byte codes of the member, the Beta environment application  is denied access to the requested capabilities.","In this manner, while the beta environment application  is not aware of the underlying more capable alpha environment and is incapable of accessing the alpha environment directly, the hybrid system of the present invention implementing the mediating BetaEnvironmentApplicationClassLoader  and BetaEnvironmentClassLibrarylmplementationClassLoader  can indirectly access the alpha environment  and benefit from additional capabilities provided by the alpha environment .","Comparatively, the alpha environment application  generates a request for a class that is sent to an AlphaEnvironmentClassLoader . At this point, the requested class is loaded and the alphaEnvironementAppliation  is executed on the alpha environment . In this manner, the Alpha environment application  is run by the associated alpha environment  without the Alpha environment application  having any knowledge of the existence of the isolated and co-existing beta environment .","According to one embodiment of the present invention, the request issued by the beta environment application  may result in the beta environment  needing to access or refer to an alpha-only environment capability (e.g., class, methods, fields, etc.) not provided in the beta environment (as opposed to the beta environment application  referring to the alpha environment-only capability, directly). By way of example, the beta environment  can generate a request for a class in beta environment , which in turn, refers to a class that is part of the alpha environment  but not the beta environment . In such a scenario, the request is dispatched to the BetaEnvironmentClassLibrarylmplementationClassLoader  for processing subsequent to which the result is sent to the alpha environment .","One of ordinary skill in the art must appreciate that the hybrid system of the present invention can be used wherein any number of beta environments can co-exist on a computing device  with the alpha environment  so long as each pair of the alpha and beta environment is related yet distinct. Exemplary pairs of related but distinct alpha and beta environments can be J2SE and CDC and the foundation profile, J2SE and CLDC and MIDP, J2EE, and CDC and the foundation profile, etc.","Furthermore, it must be noted that while alpha and beta environments co-exist on the computing device, when the computing device is certified as compliant with the alpha environment, the computing device is configured to be compliant with the alpha environment. In the same manner, if the computing device is certified as compliant with the beta environment, the computing device is configured to be almost completely compliant with the beta environment.","Yet further, it must be noted that while a request issued by the beta environment application  to directly access a capability in the alpha environment  is denied, the request issued by the Beta environment application  may be processed by the environment beta , accessing the environment alpha environment  via the BetaEnvironmentClassLibrarylmplementationClassLoader . In short, the request issued by the beta environment application  can be processed, indirectly, as the hybrid system of the present invention enables sharing of implementation between the Beta environment application  and the alpha environment .","Utilizing the hybrid system of the present invention wherein the MIDP  (i.e., a less capable environment) has been added to the computing device  running on CDC  (i.e., the more capable environment) is illustrated in the simplified enlarged block diagram depicted in , in accordance with one embodiment of the present invention. The CDC  runs on top of the operating system and hardware . A foundation profile  runs on top of the CDC  and a personal profile \u2032 runs on top of the foundation profile . A CDC application  is shown to run on top of the personal profile \u2032.","As explained in more detail above, the CLDC  is a configuration in J2ME architecture which includes the JVM and the core set of libraries while the CDC  is a configuration in J2ME that includes JVM and the respective core set of libraries. However, the core set of libraries in the CDC  is more similar to the core set of libraries in J2SE, and thus is broader. By way of example, the exemplary computing device \u2032 including the CDC  can access all of the J2SE networking protocols, input\/output facilities, service libraries, etc. while the scope of the CLDC  may be limited. For example, the CLDC  can access a subset of CDC core classes and functionality, a subset of CDC networking protocols, etc. In one embodiment, the CLDC can access the class java.lang.String. However, not all the methods available in the CDC are available to CLDC. Furthermore, while the CLDC can also access the network, the CLDC specification does not include any specific protocols.","In accordance to one example, the MIDP  and CLDC  can be added to the computing device  wherein CDC  is the underlying platform. In this manner, a MIDlet  running on top of the MIDP  and CLDC  is given the illusion of being processed by the CDC . Furthermore, through the MIDletClassLoader  and MIDPClassLibrarylmplementationClassLoader, the MIDlet  can be processed indirectly on the CDC , thus allowing the MIDlet  utilize the additional capabilities of the CDC . In one embodiment of the present invention, the MIDletClassLoader  is instantiated for each downloaded MIDlet.","According to yet another embodiment, the MIDlet  is given the capability to indirectly reference a class of the CDC  not existing in the MIDP . In one embodiment, the MIDlet  can indirectly access a CDC-only object in the CDC  when the CDC-only object is referenced by the MIDP  as opposed to the MIDlet . Under such circumstances, the MIDP  can use the extra capabilities of the CDC  through the MIDPClassLibrarylmplementationClassLoader .","By implementing the hybrid system of the present invention, the computing device  having the CDC  environment can further provide additional features provided by the MIDP  yet not supported by the CDC . In one embodiment, each of the isolated yet co-existing MIDP  and CDC  is given the illusion of being the sole environment running on the computing device , while the MIDP  and the CDC  may share implementation. For instance, in one example, code sharing is enabled between the MIDPApplicationlmplementationLibrary and the CDC library.","In accordance with one example, the CLDC  is a subset of the CDC  and the foundation profile . As such, the CLDC  is less capable than the CDC  and the foundation profile . However, in one example, the MIDP  can add extra capabilities to the CLDC , which may be available to the CDC , foundation profile , or the personal profile \u2032. Such additional capabilities (e.g., APIs, etc.) can be implemented in Java using the capabilities of the CDC . However, in one example, the native software code (e.g., C language) may be used. The native software code can be designed to use the capability of the CDC  to call the native software code. However, the native software code may not be a part of the MIDP .","An exemplary computing device implementing the hybrid system of the present invention can be a mobile device \u2032 shown in the simplified block diagram of , in accordance with one embodiment of the present invention. Two separate, yet related environments, the CLDC  and CDC  co-exist in a storage  of the computing device . A plurality of MIDlets  sits on top of the MIDP , which in turn, sits on top of the CLDC .","By implementing the hybrid system of the present invention, each of the MIDlets  can be run under the illusion that the MIDlet  is running on the computing device \u2032 running MIDP\/CLDC, while preventing the plurality of MIDlets  from accessing the CDC , directly. In reality, however, the plurality of MIDlets  can be processed on the computing device \u2032 such that the additional capabilities of the CDC  can be utilized, indirectly. In this manner, at the same time, not only the computing device \u2032 can perform the standard functions, as expected, but also computing device \u2032 is capable of running more complicated applications typically run on the CDC .","Similarly, the CDC applications  are run on top of the CDC , as the CDC applications are denied access to the MIDP  and CLDC . That is, the CDC applications  are given the illusion that the underlying environment is the CDC , and that MIDP  and CLDC  do not reside on the computing device \u2032. Consequently, a compatibility environment is provided between a commonly used less capable environment MIDP\/CLDC and the more complex CDC  while CDC applications  are also present and running on top of the CDC .","In accordance with one embodiment, running the MIDP  on top of the CVM\/CDC  can be divided into at least three components. The first component can be a MIDP control program configured to be responsible for invoking the MIDlets and managing the MIDlets \u201clifecycles.\u201d The MIDP control can program interact with the MIDlet by way of a set of methods which, in one example, are part of the MIDlet class. Some of such methods are configured to be implemented by the MIDlet and are called by the control program to direct the behavior of the MIDlet (e.g., startApp to start up the MIDlet, destroyApp to shut down the MIDlet, etc.). Other methods can further be implemented by the MIDP control program and can be called by the MIDlet (e.g., notifyPaused to announce that the MIDlet does not want to be run until further notice, etc.).","Table 1 below, includes an exemplary MIDlet Runner computer code which can be implemented as a main software program installing other programs in an exemplary hybrid system of the present invention.",{"@attributes":{"id":"p-0092","num":"0091"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary Code for MIDletRunner.Java"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"import sun.misc.MIDletClassLoader;"},{"entry":"import java.net.URL;"},{"entry":"import sun.misc.MemberFilter;"},{"entry":"import java.security.AccessController;"},{"entry":"import java.security.AccessControlContext;"},{"entry":"import java.security.PrivilegedAction;"},{"entry":"class MIDletRunner{"},{"entry":"\u2003\u2003static String systemPackages[ ] = {"},{"entry":"\u2003\u2003\u2003\u2003\u201cjava.lang.\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u201cjava.io.\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u201cjava.util.\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u201cjavax.microedition.\u201d"},{"entry":"\u2003\u2003};"},{"entry":"\u2003\u2003static String permittedSystemClasses[ ] = {"},{"entry":"\u2003\u2003\u2003\u2003\u201cjava.lang.Runnable\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u201cjava.lang.Character\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u201cjava.lang.Class\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u201cjava.lang.Object\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u201cjava.lang.Runtime\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u201cjava.lang.String\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u201cjava.lang.StringBuffer\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u201cjava.lang.System\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u201cjava.lang.Throwable\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u201cjava.lang.Exception\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u201cjava.lang.Error\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u201cjava.io.PrintStream\u201d,"},{"entry":"\u2003\u2003};"},{"entry":"\u2003\u2003static private class memberAmputator{"},{"entry":"\u2003\u2003\u2003\u2003String className;"},{"entry":"\u2003\u2003\u2003\u2003String permittedFields[ ];"},{"entry":"\u2003\u2003\u2003\u2003String permittedMethods[ ];"},{"entry":"\u2003\u2003\u2003\u2003memberAmputator( String name, String fields[ ], String methods[ ] ){"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003className = name;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003permittedFields = fields;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003permittedMethods = methods;"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003};"},{"entry":"\u2003\u2003private static memberAmputator permittedMembers[ ] = {"},{"entry":"\u2003\u2003\u2003\u2003new memberAmputator("},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201cjava.lang.System\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003new String[ ] {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cerr:Ljava\/io\/PrintStream;\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cout:Ljava\/io\/PrintStream;\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003},"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003new String[ ] {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201carraycopy:(Ljava\/lang\/Object;ILjava\/lang\/Object;II)V\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201ccurrentTimeMillis:( )J\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cgc:( )V\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cexit:(I)V\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cgetProperty:(Ljava\/lang\/String;)Ljava\/lang\/String;\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cidentityHashCode:(Ljava\/lang\/Object;)I\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003),"},{"entry":"\u2003\u2003\u2003\u2003new memberAmputator("},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201cjava.lang.Class\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003new String[0], \/\/ no fields"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003new String[ ] {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cforName:(Ljava\/lang\/String;)Ljava\/lang\/Class;\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cgetName:( )Ljava\/lang\/String;\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cgetResourceAsStream:(Ljava\/lang\/String;)Ljava\/io\/ImputStream;\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cisArray:( )Z\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cisAssignableFrom:(Ljava\/lang\/Class;)Z\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cisInstance:(Ljava\/lang\/Object;)Z\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cisInterface:( )Z\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cnewInstance:( )Ljava\/lang\/Object;\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201ctoString:( )Ljava\/lang\/String;\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003)"},{"entry":"\u2003\u2003};"},{"entry":"\u2003\u2003static MemberFilter mf;"},{"entry":"\u2003\u2003static AccessControlContext ac;"},{"entry":"\u2003\u2003static void"},{"entry":"\u2003\u2003initMemberFilter( ){"},{"entry":"\u2003\u2003\u2003\u2003mf = new MemberFilter( );"},{"entry":"\u2003\u2003\u2003\u2003for (int i = 0; i < permittedMembers.length; i++){"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003mf.addRestrictions(permittedMembers[i].className,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003permittedMembers[i].permittedFields,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003permittedMembers[i].permittedMethods);"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003mf.doneAddingRestrictions( );"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003ThreadGroup\u2003\u2003targetThreadGroup;"},{"entry":"\u2003\u2003Thread\u2003\u2003targetThread;"},{"entry":"\u2003\u2003String\u2003\u2003targetClassname;"},{"entry":"\u2003\u2003SecurityManager\u2003\u2003targetSecurityManager;"},{"entry":"\u2003\u2003String\u2003\u2003MIDPath;"},{"entry":"\u2003\u2003String\u2003\u2003classname;"},{"entry":"\u2003\u2003MIDletRunner(String path, String thisClassname){"},{"entry":"\u2003\u2003\u2003\u2003MIDPath = path;"},{"entry":"\u2003\u2003\u2003\u2003classname = thisClassname;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003public Thread runMIDlet( )"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003URL midJarURL;"},{"entry":"\u2003\u2003\u2003\u2003MIDletClassLoader myClassLoader;"},{"entry":"\u2003\u2003\u2003\u2003Class targetClass;"},{"entry":"\u2003\u2003\u2003\u2003System.out.println(\u201cRunning class \u201d+classname+\u201c in path \u201d+MIDPath);"},{"entry":"\u2003\u2003\u2003\u2003targetClassname = classname;"},{"entry":"\u2003\u2003\u2003\u2003try {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003midJarURL = new URL(\u201cjar:\u201d+MIDPath);"},{"entry":"\u2003\u2003\u2003\u2003}catch(Exception e){"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003System.err.println(\u201cURL Creation:\u201d);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003e.printStackTrace( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003return null;"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003myClassLoader = new MIDletClassLoader(midJarURL, systemPackages,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003permittedSystemClasses, mf);"},{"entry":"\u2003\u2003\u2003\u2003try {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003targetClass = myClassLoader.loadClass(classname, true);"},{"entry":"\u2003\u2003\u2003\u2003} catch (Exception e){"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003System.err.println(\u201cClass lookup:\u201d);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003e.printStackTrace( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003return null;"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003targetThreadGroup = new ThreadGroup(\u201cMIDlet \u201d+classname);"},{"entry":"\u2003\u2003\u2003\u2003try{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003targetThread = new Thread(targetThreadGroup,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(Runnable)(targetClass.newInstance( )));"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003targetThread.start( );"},{"entry":"\u2003\u2003\u2003\u2003}catch(Exception e){"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003System.err.println(\u201cThread create\/start\/join:\u201d);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003e.printStackTrace( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003return null;"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003return targetThread;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003public static void main( String args [ ] ){"},{"entry":"\u2003\u2003\u2003\u2003String MIDPath = args[0];"},{"entry":"\u2003\u2003\u2003\u2003MIDletRunner runner[ ] = new MIDletRunner[args.length\u22121];"},{"entry":"\u2003\u2003\u2003\u2003Thread thread[ ] = new Thread[args.length\u22121];"},{"entry":"\u2003\u2003\u2003\u2003ac = AccessController.getContext( );"},{"entry":"\u2003\u2003\u2003\u2003initMemberFilter( );"},{"entry":"\u2003\u2003\u2003\u2003\/\/ run the MIDlets"},{"entry":"\u2003\u2003\u2003\u2003for (int i=1; i<args.length; i++){"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003MIDletRunner thisRunner = new MIDletRunner(MIDPath, args[i]);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003runner[i\u22121] = thisRunner;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003thread[i\u22121] = thisRunner.runMIDlet( );"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\/\/ wait for them all to terminate"},{"entry":"\u2003\u2003\u2003\u2003for (int i=0; i<thread.length; i++){"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003try {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/\/ this should probably be priv'd too!!"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if (thread[i] != null )"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003thread[i].join( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003}catch (Exception e){"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003System.err.println(\u201cWhile waiting on \u201d+runner[i].targetClassname);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003e.printStackTrace( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003continue;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003System.out.println(\u201cMIDlet \u201d+runner[i].targetClassname+\u201c terminated\u201d);"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The second component is building the classloader MIDP\/CLDC class implementation on top of the selected platform, i.e., CDC . In another embodiment, implementing the class MIDlet can be included. The last component includes modifications to be made to the underlying platform so as to make the underlying platform conform to the CLDC specification. In one instance, modifications to the underlying platform may include loading of MIDP implementation classes either by the system ClassLoader or by another ClassLoader, thus providing access to almost the entire underlying platform.","When implementing the hybrid system of the present invention to create a hybrid system of environments between the CLDC  and the MIDP  and the CDC , particular situations may need to be addressed. Below are brief explanations of each scenario and the respective applicable resolutions.","A. Hiding CDC from Midlets","1. Missing Class","As previously stated, different environments can have different capabilities. By way of example, while certain classes may exist in both alpha and beta environments, the beta environment may lack a number of classes (i.e., capabilities) that solely exist in the alpha environment. In the exemplary hybrid system shown in  wherein the CLDC  and CDC  co-exist on the same computing device \u2032, the CDLC  may lack a number of classes of the CDC . For instance, while the CDC  includes the class \u201cjava.util.HashMaP,\u201d the CLDC  lacks such class. Accordingly, the hybrid system of the present invention causes the MIDlet request to directly access the \u201cjava.util.HashMaP\u201d (i.e., the CDC-only class) be denied. However, such class can be indirectly accessed by the MIDP  referencing the class using the assistance of the MIDPClassLibrarylmplementationClassLoader , the user-defined classloaders.","By way of example, the hybrid system of the present invention prevents a MIDlet from directly accessing CDC-only classes, as shown in the simplified enlarged block diagram depicted in , in accordance with one embodiment of the present invention. The MIDlet includes a plurality of classes A-I , and is configured to run on top of the MIDP  and CLDC co-existing with the CDC . A CDC application  is to run on top of the foundation profile  and CDC . The CDC  has a plurality of classes C-G and J-P in the CDC class library ","According to one example, user-defined class loaders MIDPClassLibrarylmplementationClassLoader , MIDletClassLoader  are instantiated as part of setting up the MIDP, the CDC System ClassLoader  is instantiated at system start up, and the CDCApplicationClassLoader  is instantiated as part of setting up the CDC. Once the MIDlet is initiated, a request is issued to the classloader MIDletClassLoader  to load a class. In one embodiment, MIDletClassLoader  is configured to maintain isolation between the CLDC  and CDC , the co-existing environments by, for example, using a filter. In the illustrated embodiment, the MIDletClassLoader  is capable of handling the request issued by the MIDlet for the class H. As such, the class H is loaded. However, the MIDletClassLoader  is incapable of loading classes I, A, and B. Hence, the request to load the classes I, A, and B is sent to the MIDPClassLibrarylmplementationClassLoader , the parent of the MIDletClassLoader , to be processed.","In the illustrated embodiment, the MIDPClassLibrarylmplementationClassLoader  is also incapable of processing the issued request. As such, the request is conveyed to a CDC System ClassLoader , the parent of the MIDPClassLibrarylmplementationClassLoader . As shown, the MIDP class library is loaded by the MIDPClassLibrarylmplementationClassLoader . It must further be noted that in one example, multiple levels of classloaders may exist.","According to one embodiment, the MIDletClassLoader  can be instantiated for each downloaded MIDlet -. In this manner, all class requests from the MIDlets -are configured to be handled by the corresponding classloader MIDletClassLoader . In this fashion, the MIDlet request for CDC-only classes is rejected and the MIDlet is denied direct access to the CDC-only classes. By way of example, the request can be rejected either by rewriting the member access, or rewriting the constant pool entry thus providing a \u201clazy rejection.\u201d Alternatively, an exception can be instigated substantially instantaneously.","Comparatively, the request for a class, as issued by the CDC application  is delivered to the CDCApplicationClassLoader  for processing. At this point, however, if the CDCApplicationClassLoader  is incapable of handling the request, the request is sent to the CDC System ClassLoader  for processing. As can be seen, the CDCApplicationClassLoader  and the MIDPClassLibrarylmplementationClassLoader  have a common parent, CDC System ClassLoader .","In the embodiment shown in , while classes A-I are included and referenced by the MIDlet , merely classes A, B, I, and H are in the MIDP class library and thus included in the MIDP  environment. As such, merely classes A, B, I, and H in MIDP class library can be directly accessed by the MIDlet . Certain classes referenced by the MIDlet are CDC-only classes as shown in the CDC class library and are included in the CDC . As a result, CDC-only classes cannot be directly accessed by the MIDlet ","According to one example, the hybrid system of present invention implements a filter in the MIDletClassLoader  so as to verify whether a class referenced by the MIDlet is a CDC-only class. In this manner, a request generated by the MIDlet directly referencing any of the rejected classes is denied access, as shown in . However, it must be noted that in a different embodiment, the filter can be implemented in any appropriate classloader so long as the function of identifying the CDC-only classes can be achieved (e.g., the MIDPClassLibrarylmplementationClassLoader , etc.).","Table 2 below includes an exemplary code for the MIDletClassLoader . In the illustrated embodiment, a list of rejected classes is begun in the MidletRunnerjava (shown in Table 1), as the array permittedSystemClasses. Thereafter, the list of rejected classes is passed to the MIDletClassLoader constructor (shown in Table 2). In turn, the MIDletClassLoader constructor calls hashAllowedSystemClasses to construct a HashSet allowedClasses. The MIDletClassLoader consults the HashSet allowedClasses in loadFromSystem so that a determination can be made that the reference to the class is allowed. Thus, in one example, the list of rejected classes is passed in when the MIDletClassLoader is instantiated.",{"@attributes":{"id":"p-0104","num":"0103"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary Code for MIDletClassLoader.Java"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/*"},{"entry":"\u2009* %W%\u2003\u2003\u2003\u2003%E%"},{"entry":"\u2009*"},{"entry":"\u2009* Classloader for MIDlets running on CDC\/PP"},{"entry":"\u2009*\/"},{"entry":"package sun.misc;"},{"entry":"import java.net.URL;"},{"entry":"import java.net.URLConnection;"},{"entry":"import java.io.IOException;"},{"entry":"import java.io.InputStream;"},{"entry":"import java.util.HashSet;"},{"entry":"import java.security.SecureClassLoader;"},{"entry":"import java.security.CodeSource;"},{"entry":"import java.security.ProtectionDomain;"},{"entry":"import java.security.AccessController;"},{"entry":"import java.security.AccessControlContext;"},{"entry":"import java.security.PrivilegedExceptionAction;"},{"entry":"import java.security.cert.Certificate;"},{"entry":"public class MIDletClassLoader extends SecureClassLoader {"},{"entry":"\u2003\u2003URL myBase;"},{"entry":"\u2003\u2003private String systemPkgs[ ]; \/* packages we can ONLY lookup from system *\/"},{"entry":"\u2003\u2003private HashSet allowedClasses; \/* the classes we can lookup in system *\/"},{"entry":"\u2003\u2003private MemberFilter memberChecker; \/* to check for amputated members *\/"},{"entry":"\u2003\u2003\/\/private CodeSource cs;"},{"entry":"\u2003\u2003private ProtectionDomain pd;"},{"entry":"\u2003\u2003private AccessControlContext acc;"},{"entry":"\u2003\u2003\/*"},{"entry":"\u2003\u2003\u2009* Returns the contents of the specified URL as an array of bytes."},{"entry":"\u2003\u2003\u2009*\/"},{"entry":"\u2003\u2003private class URLClassReader implements PrivilegedExceptionAction"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003URL url;"},{"entry":"\u2003\u2003\u2003\u2003URLClassReader(URL thisURL){"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003url = thisURL;"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003public Object run( ) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003try {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return getBytes( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003} catch (Exception e){"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return null;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003private Object"},{"entry":"\u2003\u2003\u2003\u2003getBytes( ) throws IOException{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003URLConnection uc = url.openConnection( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003if (uc instanceof java.net.HttpURLConnection) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003java.net.HttpURLConnection huc = (java.net.HttpURLConnection) uc;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003int code = huc.getResponseCode( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if (code >= java.net.HttpURLConnection.HTTP_BAD_REQUEST) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return null;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003int len = uc.getContentLength( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003InputStream in = uc.getInputStream( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003byte[ ] b;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003try{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if (len != \u22121) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/\/ Read exactly len bytes from the input stream"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003b = new byte[len];"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003while (len > 0) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003int n = in.read(b, b.length \u2212 len, len);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if (n == \u22121) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003throw new IOException(\u201cunexpected EOF\u201d);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003len \u2212= n;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003} else {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/\/ Read until end of stream is reached"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003b = new byte[1024];"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003int total = 0;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003while ((len = in.read(b, total, b.length \u2212 total)) != \u22121) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003total += len;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if (total >= b.length) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003byte[ ] tmp = new byte[total * 2];"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003System.arraycopy(b, 0, tmp, 0, total);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003b = tmp;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/\/ Trim array to correct size, if necessary"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if (total != b.length) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003byte[ ] tmp = new byte[total];"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003System.arraycopy(b, 0, tmp, 0, total);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003b = tmp;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}catch( IOException e ){"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003b = null;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003} finally {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003in.close( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return b;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003public MIDletClassLoader(URL base, String systemPkgs[ ],"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003String allowedSystemClasses[ ],"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003MemberFilter mf){"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003super(null);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003myBase = base;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003this.systemPkgs = systemPkgs;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003acc = AccessController.getContext( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003memberChecker = mf;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003pd = new ProtectionDomain("},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003new CodeSource(base, new Certificate[0]), null);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003hashAllowedSystemClasses(allowedSystemClasses);"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003private void"},{"entry":"\u2003\u2003\u2003\u2003hashAllowedSystemClasses(String allowedSystemClasses[ ]){"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003HashSet classes = allowedClasses = new HashSet( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003for (int i = 0; i<allowedSystemClasses.length; i++){"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003String classname = allowedSystemClasses[i].intern( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003classes.add(classname);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003private Class"},{"entry":"\u2003\u2003\u2003\u2003loadFromUrl(String classname) throws ClassNotFoundException"},{"entry":"\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\/\/ first ensure we like componentName."},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\/\/ it should not have a systemPkg entry as a prefix!"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003String forbidden[ ] = systemPkgs;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003int fLength = forbidden.length;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003for (int i=0; i< fLength; i++){"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if (classname.startsWith(forbidden[i])){"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return null; \/\/ go look elsewhere."},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\/\/ now append \u201c.class\u201d on the end and try to read it."},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003String componentName = classname.replace(\u2018.\u2019,\u2018\/\u2019).concat(\u201c.class\u201d);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003URLClassReader ucr;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003byte classarray[ ];"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003try {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003ucr = new URLClassReader(new URL(myBase, componentName));"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003classarray = (byte[ ])AccessController.doPrivileged(ucr, acc);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003}catch(Exception e){"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/*DEBUG*\/ e.printStackTrace( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return null;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003if (classarray == null )"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return null;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003try {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Class newClass ="},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003defineClass(classname, classarray, 0, classarray.length, pd);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/\/ can throw an Error"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003memberChecker.checkMemberAccessValidity(newClass); \/\/ can throw Error"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return newClass;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003} catch (Exception e){"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003throw new ClassNotFoundException(e.getMessage( ));"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003private Class"},{"entry":"\u2003\u2003\u2003\u2003loadFromSystem(String classname) throws ClassNotFoundException"},{"entry":"\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\/\/ make sure classname is on the list."},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003if (!allowedClasses.contains(classname.intern( )))"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return null;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\/\/return getSystemClassLoader( ).loadClass(classname, false);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003return super.loadClass(classname, false);"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003public Class"},{"entry":"\u2003\u2003\u2003\u2003loadClass(String classname, boolean resolve) throws ClassNotFoundException"},{"entry":"\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003Class resultClass;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003resultClass = findLoadedClass(classname);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003if (resultClass == null){"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003resultClass = loadFromUrl(classname);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if (resultClass == null){"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003resultClass = loadFromSystem(classname);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003if (resultClass == null)"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003throw new ClassNotFoundException(classname);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003if (resolve)"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003resolveClass(resultClass);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003return resultClass;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/*"},{"entry":"\u2003\u2003InputStream getResourceAsStream(String name)"},{"entry":"\u2003\u2003*\/"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In one example, the Member filter shown in Table 3 below can be implemented to process class member references by name and signature as a MIDlet class is being loaded. In this manner, loading of the offending class results in throwing an error. In one instance, the MemberFilter is configured to look at internal CVM data structures. Table 4 below provides an exemplary MemberFilter code in C Language.",{"@attributes":{"id":"p-0106","num":"0105"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary Code for MemberFilter.Java"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"package sun.misc;"},{"entry":"\/\/ probably want this package-visible only when debugged"},{"entry":"public class"},{"entry":"MemberFilter"},{"entry":"{"},{"entry":"\u2003\u2003private int\u2003\u2003 partialData;"},{"entry":"\u2003\u2003private int\u2003\u2003 fullData;"},{"entry":"\u2003\u2003private String badClass;"},{"entry":"\u2003\u2003private String badMember;"},{"entry":"\u2003\u2003private String badSig;"},{"entry":"\u2003\u2003private native void finalize0( );"},{"entry":"\u2003\u2003protected void finalize( ){"},{"entry":"\u2003\u2003\u2003\u2003finalize0( );"},{"entry":"\u2003\u2003\u2003\u2003partialData = 0;"},{"entry":"\u2003\u2003\u2003\u2003fullData = 0;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003public MemberFilter( ){}"},{"entry":"\u2003\u2003\/\/"},{"entry":"\u2003\u2003\/\/ the name of a class and arrays of all the fields and methods"},{"entry":"\u2003\u2003\/\/ -- including type signatures -- which are allowed."},{"entry":"\u2003\u2003\/\/ Separate names from signatures using a colon :"},{"entry":"\u2003\u2003\/\/"},{"entry":"\u2003\u2003public native void"},{"entry":"\u2003\u2003addRestrictions(String classname, String fields[ ], String methods[ ]);"},{"entry":"\u2003\u2003public native void"},{"entry":"\u2003\u2003doneAddingRestrictions( );"},{"entry":"\u2003\u2003private native boolean"},{"entry":"\u2003\u2003checkMemberAccessValidity0(Class newclass);"},{"entry":"\u2003\u2003public void"},{"entry":"\u2003\u2003checkMemberAccessValidity(Class newclass) throws Error"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003if (!checkMemberAccessValidity0(newclass)){"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\/* DEBUG *\/"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003throw new Error(\u201cClass \u201c+(newclass.getName( ))+\u201d makes "},{"entry":"illegal member references to \u201c+badClass+\u201d.\u201c+badMember+\u201d:\u201d+badSig);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\/* END DEBUG *\/"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\/\/ throw new Error(\u201cClass \u201c+(newclass.getName( ))+\u201d "},{"entry":"makes illegal member references\u201d);"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0107","num":"0106"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary MemberFilter Code in C Language"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"#include \u201cjni.h\u201d"},{"entry":"#include \u201cjvm.h\u201d"},{"entry":"#include \u201cjavavm\/include\/classes.h\u201d"},{"entry":"#include \u201cjavavm\/include\/interpreter.h\u201d"},{"entry":"\/*"},{"entry":"\u2009* This is the linked-list representation of our internal data"},{"entry":"\u2009*\/"},{"entry":"struct linkedClassRestriction {"},{"entry":"\u2003\u2003struct linkedClassRestriction* next;"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003CVMClassTypeID","thisClass;"]},{"entry":["\u2003\u2003int","nMethods;"]},{"entry":["\u2003\u2003int","nFields;"]},{"entry":["\u2003\u2003CVMMethodTypeID*","methods;"]},{"entry":["\u2003\u2003CVMFieldTypeID*","fields;"]},{"entry":["};",{}]},{"entry":["\/*",{}]},{"entry":["\u2009* This is the array-element representation",{}]},{"entry":["\u2009*\/",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\u2003\u2003typedef struct ClassRestrictionElement {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003CVMClassTypeID","thisClass;"]},{"entry":["\u2003\u2003int","nMethods;"]},{"entry":["\u2003\u2003int","nFields;"]},{"entry":["\u2003\u2003CVMUint32*","methods;"]},{"entry":["\u2003\u2003CVMUint32*","fields;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003} ClassRestrictionElement;"},{"entry":"typedef struct ClassRestrictions {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003int","nElements;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003struct ClassRestrictionElement\u2003\u2003restriction[1]; \/* nElements of them. *\/"},{"entry":"} ClassRestrictions;"},{"entry":"static CVMUint32*"},{"entry":"parseMemberList("},{"entry":"\u2003\u2003JNIEnv* env,"},{"entry":"\u2003\u2003jarray members,"},{"entry":"\u2003\u2003int* memberCount,"},{"entry":"\u2003\u2003CVMUint32 (*lookupFn)(CVMExecEnv*, const CVMUtf8*, const CVMUtf8*))"},{"entry":"{"},{"entry":"\u2003\u2003int nmembers = (*env)\u2212>GetArrayLength(env, members);"},{"entry":"\u2003\u2003int i;"},{"entry":"\u2003\u2003CVMUint32* memberArray;"},{"entry":"\u2003\u2003CVMExecEnv* ee = CVMjniEnv2ExecEnv(env);"},{"entry":"\u2003\u2003*memberCount = nmembers;"},{"entry":"\u2003\u2003if (nmembers == 0)"},{"entry":"\u2003\u2003\u2003\u2003return NULL;"},{"entry":"\u2003\u2003memberArray = (CVMUint32*)calloc(nmembers, sizeof(CVMUint32));"},{"entry":"\u2003\u2003for (i=0; iGetObjectArrayElement(env, members, i);"},{"entry":"\u2003\u2003\u2003\u2003\/* now get the characters from the string *\/"},{"entry":"\u2003\u2003\u2003\u2003membername = (*env)\u2212>GetStringUTFChars(env, designator, &didCopy);"},{"entry":"\u2003\u2003\u2003\u2003CVMassert(didCopy); \/* hope so because we're going to scribble in it *\/"},{"entry":"\u2003\u2003\u2003\u2003\/* find: separator. Replace it with \u2018\\0\u2019 *\/"},{"entry":"\u2003\u2003\u2003\u2003membersig = strchr(membername, \u2018:\u2019);"},{"entry":"\u2003\u2003\u2003\u2003CVMassert(membersig != NULL);"},{"entry":"\u2003\u2003\u2003\u2003*membersig++ = \u2018\\0\u2019;"},{"entry":"\u2003\u2003\u2003\u2003\/* lookup the pair and save the resulting value *\/"},{"entry":"\u2003\u2003\u2003\u2003memberArray[i] = lookupFn(ee, membername, membersig);"},{"entry":"\u2003\u2003\u2003\u2003\/* release the string characters and the string object *\/"},{"entry":"\u2003\u2003\u2003\u2003(*env)\u2212>ReleaseStringUTFChars(env, designator, membername);"},{"entry":"\u2003\u2003\u2003\u2003(*env)\u2212>DeleteLocalRef(env, designator);"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003return memberArray;"},{"entry":"}"},{"entry":"JNIEXPORT void JNICALL"},{"entry":"Java_sun_misc_MemberFilter_addRestrictions("},{"entry":"\u2003\u2003JNIEnv* env,"},{"entry":"\u2003\u2003jobject thisObject,"},{"entry":"\u2003\u2003jstring classname,"},{"entry":"\u2003\u2003jarray fields,"},{"entry":"\u2003\u2003jarray methods)"},{"entry":"{"},{"entry":"\u2003\u2003int length;"},{"entry":"\u2003\u2003const char* classnameString;"},{"entry":"\u2003\u2003struct linkedClassRestriction* lcrp, *listroot, **nextp;"},{"entry":"\u2003\u2003jclass thisClass;"},{"entry":"\u2003\u2003jfieldID partialDataField;"},{"entry":"\u2003\u2003lcrp = (struct linkedClassRestriction*)calloc(sizeof(struct linkedClassRestriction), 1);"},{"entry":"\u2003\u2003\/* get the typeid of the class *\/"},{"entry":"\u2003\u2003length = (*env)\u2212>GetStringUTFLength(env, classname);"},{"entry":"\u2003\u2003classnameString = (*env)\u2212>GetStringUTFChars(env, classname, NULL);"},{"entry":"\u2003\u2003lcrp\u2212>thisClass = CVMtypeidNewClassID(CVMjniEnv2ExecEnv(env),"},{"entry":"classnameString, length);"},{"entry":"\u2003\u2003(*env)\u2212>ReleaseStringUTFChars(env, classname, classnameString);"},{"entry":"\u2003\u2003\/* allocate the arrays of member typeids *\/"},{"entry":"\u2003\u2003lcrp\u2212>fields = parseMemberList(env, fields, &(lcrp\u2212>nFields),"},{"entry":"CVMtypeidNewFieldIDFromNameAndSig);"},{"entry":"\u2003\u2003lcrp\u2212>methods = parseMemberList(env, methods, &(lcrp\u2212>nMethods),"},{"entry":"CVMtypeidNewMethodIDFromNameAndSig);"},{"entry":"\u2003\u2003\/* insertion sort in linked list based on thisClass value *\/"},{"entry":"\u2003\u2003thisClass = (*env)\u2212>GetObjectClass(env, thisObject);"},{"entry":"\u2003\u2003partialDataField = (*env)\u2212>GetFieldID(env, thisClass, \u201cpartialData\u201d, \u201cI\u201d);"},{"entry":"\u2003\u2003listroot = (struct linkedClassRestriction*)((*env)\u2212>GetIntField(env, thisObject,"},{"entry":"partialDataField));"},{"entry":"\u2003\u2003nextp = &listroot;"},{"entry":"\u2003\u2003while(CVM_TRUE){"},{"entry":"\u2003\u2003\u2003\u2003if (*nextp == NULL \u2225 (*nextp)\u2212>thisClass > lcrp\u2212>thisClass){"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003lcrp\u2212>next = *nextp;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003*nextp =lcrp;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003break;"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003nextp = &((*nextp)\u2212>next);"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003(*env)\u2212>SetIntField(env, thisObject, partialDataField, (jint)listroot);"},{"entry":"}"},{"entry":"JNIEXPORT void JNICALL"},{"entry":"Java_sun_misc_MemberFilter_doneAddingRestrictions("},{"entry":"\u2003\u2003JNIEnv* env,"},{"entry":"\u2003\u2003jobject thisObject)"},{"entry":"{"},{"entry":"\u2003\u2003\/*"},{"entry":"\u2003\u2003\u2009* consolidate linked list into an array for faster access."},{"entry":"\u2003\u2003\u2009* dispose of linked list form."},{"entry":"\u2003\u2003\u2009*\/"},{"entry":"\u2003\u2003struct linkedClassRestriction* lcrp, *listroot;"},{"entry":"\u2003\u2003struct ClassRestrictions* crp;"},{"entry":"\u2003\u2003jclass thisClass;"},{"entry":"\u2003\u2003jfieldID partialDataField;"},{"entry":"\u2003\u2003jfieldID fullDataField;"},{"entry":"\u2003\u2003int\u2003 nentries;"},{"entry":"\u2003\u2003int\u2003 i;"},{"entry":"\u2003\u2003thisClass = (*env)\u2212>GetObjectClass(env, thisObject);"},{"entry":"\u2003\u2003partialDataField = (*env)\u2212>GetFieldID(env, thisClass, \u201cpartialData\u201d, \u201cI\u201d);"},{"entry":"\u2003\u2003fullDataField = (*env)\u2212>GetFieldID(env, thisClass, \u201cfullData\u201d, \u201cI\u201d);"},{"entry":"\u2003\u2003listroot = (struct linkedClassRestriction*)((*env)\u2212>GetIntField(env, thisObject,"},{"entry":"partialDataField));"},{"entry":"\u2003\u2003\/* count *\/"},{"entry":"\u2003\u2003for (nentries=0, lcrp=listroot; lcrp!=NULL; lcrp = lcrp\u2212>next)"},{"entry":"\u2003\u2003\u2003\u2003nentries += 1;"},{"entry":"\u2003\u2003\/* allocate *\/"},{"entry":"\u2003\u2003crp = (struct ClassRestrictions*)calloc(1,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003sizeof(struct ClassRestrictions)"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003+ (nentries\u22121)*sizeof(struct ClassRestrictionElement ));"},{"entry":"\u2003\u2003\/* copy *\/"},{"entry":"\u2003\u2003crp\u2212>nElements = nentries;"},{"entry":"\u2003\u2003for (i=0, lcrp=listroot; inext){"},{"entry":"\u2003\u2003\u2003\u2003struct ClassRestrictionElement *creep = &(crp\u2212>restriction[i]);"},{"entry":"\u2003\u2003\u2003creep\u2212>thisClass = lcrp\u2212>thisClass;"},{"entry":"\u2003\u2003\u2003\u2003creep\u2212>nMethods = lcrp\u2212>nMethods;"},{"entry":"\u2003\u2003\u2003\u2003creep\u2212>nFields = lcrp\u2212>nFields;"},{"entry":"\u2003\u2003\u2003\u2003creep\u2212>methods = lcrp\u2212>methods;"},{"entry":"\u2003\u2003\u2003\u2003creep\u2212>fields = lcrp\u2212>fields;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/* set partialData field to null *\/"},{"entry":"\u2003\u2003(*env)\u2212>SetIntField(env, thisObject, partialDataField, 0);"},{"entry":"\u2003\u2003\/* set fullData field *\/"},{"entry":"\u2003\u2003(*env)\u2212>SetIntField(env, thisObject, fullDataField, (jint)crp);"},{"entry":"\u2003\u2003\/* delete linked list elements *\/"},{"entry":"\u2003\u2003lcrp = listroot;"},{"entry":"\u2003\u2003while (lcrp != NULL){"},{"entry":"\u2003\u2003\u2003\u2003listroot = lcrp\u2212>next;"},{"entry":"\u2003\u2003\u2003\u2003free(lcrp);"},{"entry":"\u2003\u2003\u2003\u2003lcrp = listroot;"},{"entry":"\u2003\u2003}"},{"entry":"}"},{"entry":"\/*"},{"entry":"\u2009* This is the array-element representation"},{"entry":"\u2009*\/"},{"entry":"static ClassRestrictionElement*"},{"entry":"lookupClass(ClassRestrictions* crp, CVMClassTypeID cid){"},{"entry":"\u2003\u2003int i, n;"},{"entry":"\u2003\u2003ClassRestrictionElement* ep;"},{"entry":"\u2003\u2003n = crp\u2212>nElements;"},{"entry":"\u2003\u2003ep = &(crp\u2212>restriction[0]);"},{"entry":"\u2003\u2003for (i=0; ithisClass == cid)"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003return ep;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/* not found *\/"},{"entry":"\u2003\u2003return NULL;"},{"entry":"}"},{"entry":"static CVMBool"},{"entry":"lookupMember(CVMUint32 mid, CVMUint32* memberArray, int nMembers){"},{"entry":"\u2003\u2003int i;"},{"entry":"\u2003\u2003CVMUint32* memberp = memberArray;"},{"entry":"\u2003\u2003for (i=0; iNewStringUTF(env, className);"},{"entry":"\u2003\u2003fieldID = (*env)\u2212>GetFieldID(env, thisClass, \u201cbadClass\u201d, \u201cLjava\/lang\/String;\u201d);"},{"entry":"\u2003\u2003(*env)\u2212>SetObjectField(env, thisObject, fieldID, stringObj);"},{"entry":"\u2003\u2003(*env)\u2212>DeleteLocalRef(env, stringObj);"},{"entry":"\u2003\u2003stringObj = (*env)\u2212>NewStringUTF(env, memberName);"},{"entry":"\u2003\u2003fieldID = (*env)\u2212>GetFieldID(env, thisClass, \u201cbadMember\u201d, \u201cLjava\/lang\/String;\u201d);"},{"entry":"\u2003\u2003(*env)\u2212>SetObjectField(env, thisObject, fieldID, stringObj);"},{"entry":"\u2003\u2003(*env)\u2212>DeleteLocalRef(env, stringObj);"},{"entry":"\u2003\u2003stringObj = (*env)\u2212>NewStringUTF(env, type);"},{"entry":"\u2003\u2003fieldID = (*env)\u2212>GetFieldID(env thisClass, \u201cbadSig\u201d, \u201cLjava\/lang\/String;\u201d);"},{"entry":"\u2003\u2003(*env)\u2212>SetObjectField(env, thisObject, fieldID, stringObj);"},{"entry":"\u2003\u2003(*env)\u2212>DeleteLocalRef(env, stringObj);"},{"entry":"\u2003\u2003free(className);"},{"entry":"\u2003\u2003free(memberName);"},{"entry":"\u2003\u2003free(type);"},{"entry":"}"},{"entry":"JNIEXPORT jboolean JNICALL"},{"entry":"Java_sun_misc_MemberFilter_checkMemberAccessValidity0("},{"entry":"\u2003\u2003JNIEnv* env,"},{"entry":"\u2003\u2003jobject thisObject,"},{"entry":"\u2003\u2003jclass newclass)"},{"entry":"{"},{"entry":"\u2003\u2003ClassRestrictions* crp;"},{"entry":"\u2003\u2003ClassRestrictionElement* creep;"},{"entry":"\u2003\u2003jclass thisClass;"},{"entry":"\u2003\u2003jfieldID fullData;"},{"entry":"\u2003\u2003CVMClassBlock* cbp;"},{"entry":"\u2003\u2003jclass classClass;"},{"entry":"\u2003\u2003jfieldID classBlockPointer;"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003CVMInt32","cpCount;"]},{"entry":["\u2003\u2003CVMInt32","i, classIndex, typeIndex;"]},{"entry":["\u2003\u2003CVMClassTypeID","classID;"]},{"entry":["\u2003\u2003CVMMethodTypeID","mID;"]},{"entry":["\u2003\u2003CVMFieldTypeID","fID;"]},{"entry":["\u2003\u2003CVMConstantPool*","cp;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\/*CVMConstantPoolEntry* cpe;*\/"},{"entry":"\u2003\u2003\/*CVMConstantPoolEntryType* cpet;*\/"},{"entry":"\u2003\u2003\/* get pointer to the classes CVMClassBlock *\/"},{"entry":"\u2003\u2003classClass = (*env)\u2212>GetObjectClass(env, newclass); \/\/ java.lang.Class"},{"entry":"\u2003\u2003classBlockPointer = (*env)\u2212>GetFieldID(env, classClass, \u201cclassBlockPointer\u201d, \u201cI\u201d);"},{"entry":"\u2003\u2003cbp = (CVMClassBlock*)((*env)\u2212>GetIntField(env, newclass, classBlockPointer));"},{"entry":"\u2003\u2003\/* get pointer to our list of restrictions *\/"},{"entry":"\u2003\u2003thisClass = (*env)\u2212>GetObjectClass(env, thisObject);"},{"entry":"\u2003\u2003fullData = (*env)\u2212>GetFieldID(env, thisClass, \u201cfullData\u201d, \u201cI\u201d);"},{"entry":"\u2003\u2003crp = (ClassRestrictions*)((*env)\u2212>GetIntField(env, thisObject, fullData));"},{"entry":"\u2003\u2003\/* we are now on the inside. Look at the class's constant pool."},{"entry":"\u2003\u2003\u2009* barf if we don't like what we see."},{"entry":"\u2003\u2003\u2009*\/"},{"entry":"\u2003\u2003cpCount = CVMcbConstantPoolCount(cbp);"},{"entry":"\u2003\u2003cp = CVMcbConstantPool(cbp);"},{"entry":"\u2003\u2003for (i=1; i"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Summarily, in the illustrated embodiment, referenced classes A, B, and I are included in the MIDP class library , and as such, can directly accessed by the MIDlet . However, referenced classes C, D, E, F, G, are only included in the CDC class library , and as such, cannot be accessed by the MIDlet directly. As can be seen, detecting the MIDlet referencing a rejected class , a rejection semantic (e.g., a runtime exception, a failure to load the offending MIDlet class, etc.) is dispatched to the MIDlet indicative of the MIDlet lacking permission to directly access the referenced class.","2. Missing Members:","Certain classes may exist in both alpha and beta environments. However, the beta environment may lack a number of class members (e.g., methods, fields, etc.) present in the alpha environment. Locating class members missing in the MIDP  is illustrated in the simplified block diagram shown in , in accordance with one embodiment of the present invention. The MIDlet  has issued a request referencing classes Q, R, S, and T with the MIDlet  specifically requesting the execution of a method M from class Q. The CDC class library includes methods M through M of the referenced class Q while MIDP class library lacks method M of the class Q. Consequently, the hybrid system of the present invention is configured to deny the MIDlet  request to directly access the method M of the class Q.","In one embodiment, after the class Q is loaded by the MIDletClassLoader , the loaded class Q is passed to a DefineClass . The DefineClass  is a VM internal method configured to determine the file format of the class Q. The DefineClass  is further configured to utilize the data in the class file to create a representation of the class Q, as the Class Q is loaded in memory. Once the class Q has been defined and thus can be referenced, the DefineClass  is configured to traverse the constant pool of the class Q, as defined in the MIDP . The constant pool of the class Q is configured to include the symbolic references of classes, fields, and methods of the class Q. For instance, as illustrated in the embodiment shown in , the class pool can be a table. The DefineClass  thereafter traverses the constant pool of the class Q looking for all forbidden members (i.e., methods, fields, and classes not included in the MIDP class library ) but included in the CDC class library . In this manner, forbidden members are identified.","According to one embodiment, the VM rejects the MIDlet  request to execute the method M of the class Q by dispatching a rejection semantic to the MIDlet  upon locating the forbidden member (e.g., method M of the class Q). In another example, an exception is dispatched when the forbidden member (e.g., method, field, etc.) is being accessed at run time. In such a situation, a poisoned byte code (e.g., generated by modifying the byte code to one indicating an error) or a poisoned constant pool entry is planted in the constant pool. In the constant pool depicted in the embodiment illustrated in , the forbidden members are methods M, M, and M, as identified by being encapsulated in circles. In one aspect, referring to a poisoned entry can result in throwing an exception (e.g., java.lang.LinkageError, etc.). Furthermore, according to one exemplary embodiment, MIDP\/CLDC classes may not be allowed to have finalizers and are prohibited from having a member named finalize( ). For instance, when a request for processing a finalize( ) is issued, such request can be detected at class-load time.","In accordance with one aspect, the CLDC  may have a reduced set of errors. In such a scenario, the CLDC specification may allow ambiguity to a certain extent when an error is issued. By way of example, if the JVM instigates a type of error that the CLDC  lacks, a type hierarchy can be traveled so as to locate and instigate the closest error existing in the CLDC . In still another embodiment, the VM can be cut short when an expectation exists that embedded programs may not sophisticatedly handle errors. For instance, when referencing a field missing in the CLDC , the CDC can instigate a NoSuchFieldError. In another example, the CLDC-HI implementation may be able to throw an Error, since NoSuchFieldError, the parent IncompatibleClassChangeError, and the grandparent LinkageError, are not part of the CLDC. In another example, the CLDC Reference Implementation can longjmp to main, thus halting the VM. In a different embodiment, a NoSuchFieldError can be thrown as NoSuchFieldError is an instance of Error. In doing so, however, MIDlet may be allowed to get at NoSuchFieldError Class using getclass( ), and then try to instantiate a new class using newInstance( ). Under such circumstances, instantiating the new class using newInstance( ) can be prevented by throwing an IllegalAccessException.","3. Change Semantics","Certain methods of a class defined in more than one environment may behave differently depending on the calling environment. Referring to the simplified block diagram of , handling a request to execute a method M of the class R by a MIDlet  is illustrated, in accordance with one embodiment of the present invention. The MIDlet  has requested the execution of the method M of the class R depicted to be parts of both the MIDP  and CDC  environments as defined in the MIDP class library and the CDC class library . However, the method M of the class R in the MIDP class library exhibits a different behavior than the method M of the class R in CDC class library ","In the embodiment illustrated in , once the MIDlet  is initiated, the MIDletClassLoader  refers to the MIDP class library so as to determine whether method M of class R is defined in the MIDP class library . At this point, an exception is thrown to the MIDlet  if the requested method M of class R is not the same as the method M (MIDP) defined in the MIDP class library . However, if the requested method M of the class R is defined in the MIDP class library , the request is handled by the MIDP . Thereafter, the result of the request is dispatched to the foundation profile  and CDC .","In the same manner, the CDC application \u2032 may issue a request for the execution of the method M of the class R. At this point, a determination is made as to whether the requested method M of the class R is also included in the CDC  and the CDC class library . If the method M of the class R is the same as the method M (CDC) included in the CDC class library , the method M of the class R is sent to the foundation profile  and CDC  to be processed.","An exemplary method defined both in MIDP  and foundation profile  is the method System.getProperty( ). A property is a character string and has a name that is also a character string. In one aspect, System.getProperty( ) takes a string parameter configured to be the name of the property and returns either a string that is a value of the property, or a null pointer if a property having the name does not exist. According to one example, the CDC specification defines the named properties that can be present in the CDC. In the same manner, the MIDP specification provides the named properties that can be present in the MIDP further establishing that almost no other properties are allowed in the MIDP. In one example, the allowable set of properties in the MIDP differs from the allowable set of properties in the CDC set. As a consequence, the method System.getProperty( ) is configured to discover and determine the caller environment running the method. In one embodiment, the method System.getProperty( ) provides different sets of properties available to the caller environment based on the requirements of the caller environment.","According to one embodiment of the present invention, the MIDletClassLoader  and an identifier are used to recognize the requester and to identify the origin of the request. With a continued reference to , when the request for execution of the method M is generated, the method M inquires as to the exact origin of the call. For instance, whether the method M is being called on behalf of the MIDletClassLoader  or a different ClassLoader, e.g., . In one exemplary embodiment, the implementation of the method M is modified such that the method M can identify the requester, and act accordingly. For instance, the method M defined both in the MIDP class library and the CDC class library can throw an exception in the event the method M is called by a MIDlet. A different course of action can be taken if the caller is a CDC application \u2032. In short, to accommodate environments having a common member, the implementation of the common member is modified so as to facilitate identifying the origin of the request.","Yet another example of such common member is the method \u201cSystem.exit( ).\u201d For instance, if the System.exit( ) is called by the CDC application \u2032, the system is configured to halt the process in progress and then exit. Comparatively, if the MIDlet  makes such a request, a security exception is thrown. Accordingly, in an exemplary embodiment wherein n-number of isolated beta environments (i.e., less capable environments) co-exists with an alpha environment (i.e., the most capable environment), the most capable environment is configured to make n-way decisions depending on the beta environment.","4. Class File Restrictions:","Different environments may have different capabilities. For instance, while one environment supports floating-point arithmetic, the others may not. Under such circumstances, the environment incapable of supporting floating-point arithmetic can miss substantially all the byte codes of the Java set of byte codes implementing floating-point arithmetic. As a result, the environment lacking the floating-point byte code can be a subset of the environment including the floating-point byte codes, as the set of byte codes in a parent can include more data. In another exemplary embodiment, one of the environments may be missing the Jump Subroutine (JSR) instructions, Return from Subroutine (RET) instructions, etc.",{"@attributes":{"id":"p-0120","num":"0119"},"figref":"FIG. 8","b":["115","4","114","4","114","2","114","2","2"],"i":["d","d ","d ","d "]},"The DefineClass  traverses the constant pool of the class T for forbidden members (i.e., members included in both MIDP  and CDC ) while almost simultaneously traversing the byte codes of each member of the class T scanning for missing byte codes. In this manner, forbidden members as well as respective missing byte codes are located and identified. In one example, such traversing of the constant pool and the byte codes can be performed for verification purposes.","According to one embodiment, the VM rejects the MIDlet  request for execution of the missing byte codes by sending a rejection semantic to the MIDlet  upon detecting the missing byte codes. In another example, the exception is instigated when the missing byte codes is being accessed at run time. In such a situation, a poisoned byte code or a byte code indicating an error can replace the missing byte code of the method. In yet another embodiment, as the CLDC 1.0 does not include floating points, finding a floating point opcode in a class file while implementing MIDP2\/CLDC1.0 can be grounds for immediate rejection. In another example, rejecting floating point requests can be achieved when loading the class.","B. Hiding MIDP from CDC Applications","In accordance with one embodiment, the hybrid system of the present invention prevents the CDC applications  from directly accessing the MIDP  and CLDC . Referring to the embodiment shown in , CDC applications  are sent to the CDCApplicationClassLoader  to be loaded. At this point, if the CDCApplicationClassLoader  is not capable of processing the request, the request is delegated to the parent, i.e., the CDC System ClassLoader . In this manner, the CDC applications  bypass the MIDPClassLibrarylmplementationClassLoader  eliminating the need to reveal to the CDC applications  the co-existing MIDP  environment.","Reference is made to the flowchart diagram of  depicting the method operations performed in a hybrid system of the present invention, in accordance with one embodiment of the present invention. The method begins with operation  in which a computing device including an alpha environment and a beta environment is provided. The alpha environment has greater capabilities than the beta environment. The method then proceeds to operation  in which the beta application is executed using the beta environment and then proceeding to operation  in which the alpha environment is hidden from the beta application by denying the beta application direct access to the alpha environment, as the beta application is being executed. Next, in operation , an alpha application is executed using the alpha environment followed by the operation  in which the beta environment is hidden from the alpha application by denying the alpha application direct access to the beta environment so long as the alpha application is being executed. In this manner, the co-existing yet isolated environments can be used so as to enable the beta application from benefiting from additional capabilities of the alpha environment while adhering to the stringent requirements of each of the alpha and beta environments.","Proceeding to , a flowchart diagram  of method operations performed in a hybrid system wherein the MIDP and CDC environments co-exist on a single computing device is provided, in accordance with one embodiment of the present invention. The method begins in operation  in which a computing device implementing the CDC environment is provided followed by the operation  wherein the MDIP environment is added to the computing device. Next, in operation , all classloaders are instantiated. In one example, the classloaders CDCApplicationClassLoader, CDC System ClassLoader, MIDletClassLoader, and MIDPClassLibrarylmplementationClassLoader are instantiated. Next, in operation , a request is received to load a class.","In operation , a determination is made as to whether the request is issued by a CDC application. If the request is issued by a CDC application, the method continues to operation  wherein a determination is made as to whether the CDCApplicationClassLoader can load the class. The CDCApplicationClassLoader is a user-defined class loader wherein almost every request for a class of the same CDC application is guided through the same instance of the CDCApplicationClassLoader. In one embodiment, the CDCApplicationClassLoader is configured to load classes form a classpath specified to the CDCApplicationClassLoader at the time the CDCApplicationClassLoader is instantiated. Next, the method continues to operation  wherein a response is generated to the request, if the CDCApplicationClassLoader is capable of processing the request. Thereafter, the method continues to operation  in which a determination is made as to whether another request has been received. If a request has been received, the method continues to operation .","However, if the CDCApplicationClassLoader is not able to process the request in operation , the method continues to operation  wherein processing the request is delegated to the immediate parent classloader, which in one embodiment, is the CDC System ClassLoader. At this point, the immediate parent classloader finishes processing the class in the operation .","If in operation  a determination is made that the request was issued by a MIDlet, the method continues to operation  wherein a determination is made as to whether the MIDletClassLoader is able to load the class. If the MIDletClassLoader is able to load the class, the method continues to operation  in which loading the class is initiated followed by the operation  in which the constant pool of the class is traversed so as to locate forbidden members. In operation , a determination is made as to whether the constant pool includes a forbidden member. Next, the method continues to operation  wherein the request for loading the class is rejected if a forbidden member is located. However, if a forbidden member has not been identified, the method continues to operation  wherein the byte codes of each member of the class in the constant pool is traversed. Continuing to operation , a determination is made as to whether any missing byte codes have been located. Thereafter, the method continues to operation  if no missing byte codes have been identified, subsequent to which the method continues to operation . However, if any missing byte codes are found in operation , the request for loading the class is rejected in operation .","If the MIDletClassLoader cannot load the class, the method continuous to operation  wherein a determination is made as to whether the class to be loaded is a CDC-only class. In operation , the request to load the CDC-only class is rejected subsequent to which the method continues to operation . However, the method continues to operation  in which processing of the class is delegated to the MIDPClassLibrarylmplemenationClassLoader. According to one example, the MIDPClassLibrarylmplementationClassLoader receives a request for two reasons. First, the requesting class was previously loaded by the MIDPClassLibrarylmplementationClassLoader due to being part of the MIDP implementation. Second, the request to load the class is delegated to the MIDPClassLibrarylmplementationClassLoader by the MIDletClassLoader.","In operation  a determination is made as to whether the MIDPClassLibrarylmplementationClassLoader is capable of loading the class. Processing the class is completed in operation  if the MIDPClassLibrarylmplementationClassLoader is able to process the class. Otherwise, the method continues to operation  wherein processing the class is delegated to the next immediate parent classloader, which in one example, is CDC System ClassLoader. Thereafter, processing the class is finished in operation  followed by the operation .","In this manner, the requests issued by the MIDlet are hidden from the CDC using the MIDletClassLoader and MIDPClassLibrarylmplementationClassLoader. In the same manner, the requests issued by the CDC applications are only processed by the CDC environment while the MIDlets are processed by the MIDP environment without the CDC applications or MIDlets being aware of the MIDP and CDC co-existing on the same computing device.","The aspects of the present invention are numerous. The hybrid system of the present invention allows a plurality of environments having different levels of capability to co-exist on the same computing device, irrespective of the associated constraints (e.g., lack of sufficient computing power, memory size, secondary storage size, and bandwidth between the computing device and the rest of the world). Furthermore, the hybrid system of the present invention enables a more capable environment to emulate a similar but less capable environment for purposes of program development and\/or debugging. Yet further, the hybrid system of the present invention can provide a computing system wherein multiple application execution environments can use a single implementation. Still further, in one embodiment, the more capable and less capable environments can be processed simultaneously on the computing device. Yet further, in another embodiment, more capable and less capable environments may be run at different times. Still further, in the hybrid system of the present invention, hiding less capable environment from the more capable environment can be achieved by using Java 2 mechanisms without making extensive changes to the JVM.","It must be noted that the computing device as used in the present invention can be any type of computing device (e.g., network computers, special purpose computers, and general purpose computers such as desktops, servers, hand-held devices (e.g., embedded mobile devices, PDAs, laptops, Ipods, etc.), microprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, etc.). Furthermore, the CDC applications and MIDlets can be of any type and can be obtained from any source in any data acquisition manner.","One must appreciate that generally speaking, the server and the embedded mobile device can communicate using any appropriate communication format (e.g., HyperText Transfer Protocol (HTTP), Linear Network Analysis Package (LNAP), Linear Wireless Application Protocol (LWAP), etc.). Additionally, the communication link between the Internet and the computing device or the servers can be any appropriate communication link (e.g., Open and modular development environment (EDMA) network, global systems for Mobile Communications (GSM) network, cable connection, etc.). Yet further, the computing device and the server can be configured to implement Java programming language. Still further, the MIDlets or CDC applications can be downloaded to any appropriate device data storage (e.g., memory, random access memory (RAM), flash memory, hot disc, mini hot disc, etc.).","Although specific reference may have been made to terminology defined by Sun Microsystems, Inc., it should be understood that any name could be used for such terms, so long as the desired functionality is achieved. For instance, computing device can be any computing device, and can run any operating system. The operating system can support any communication protocol, including protocols for downloading application files. Accordingly, any reference to a particular standard should be viewed only as exemplary and focus should be placed on the claimed functional operation.","With the above embodiments in mind, it should be understood that the invention may employ various computer-implemented operations involving data stored in computer systems. These operations are those requiring physical manipulation of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. Further, the manipulations performed are often referred to in terms, such as producing, identifying, determining, or comparing.","Any of the operations described herein that form part of the invention are useful machine operations. The invention also relates to a device or an apparatus for performing these operations. The apparatus may be specially constructed for the required purposes, or it may be a general-purpose computer selectively activated or configured by a computer program stored in the computer. In particular, various general-purpose machines may be used with computer programs written in accordance with the teachings herein, or it may be more convenient to construct a more specialized apparatus to perform the required operations.","The invention can also be embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data which thereafter be read by a computer system. Examples of the computer readable medium include hard drives, network attached storage (NAS), read-only memory, random-access memory, CD-ROMs, CD-Rs, CD-RWs, magnetic tapes, and other optical and non-optical data storage devices. The computer readable medium can also be distributed over a network coupled computer systems so that the computer readable code is stored and executed in a distributed fashion. Furthermore, although the present invention implements Java programming language, other programming languages may be used to implement the embodiments of the present invention (e.g., C, C, any object oriented programming language, etc.).","Although the foregoing invention has been described in some detail for purposes of clarity of understanding, it will be apparent that certain changes and modifications may be practiced within the scope of the appended claims. Accordingly, the present embodiments are to be considered as illustrative and not restrictive, and the invention is not to be limited to the details given herein, but may be modified within the scope and equivalents of the appended disclosure."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention will be readily understood by the following detailed description in conjunction with the accompanying drawings, and like reference numerals designate like structural elements.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
