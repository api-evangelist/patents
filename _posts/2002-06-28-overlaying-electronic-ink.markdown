---
title: Overlaying electronic ink
abstract: Overlaying electronic ink over a document. A typical scenario may be where one it would be useful to mark up a document with electronic ink, such as by making handwritten comments, drawings, and the like over the underlying document. In some embodiments, a developer may easily define an inking surface, such as a transparent or opaque window, over a document. The inking surface may act as an input interface such that a user may write onto the inking surface such that is appears that the document itself is being marked up.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08166388&OS=08166388&RS=08166388
owner: Microsoft Corporation
number: 08166388
owner_city: Redmond
owner_country: US
publication_date: 20020628
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["This application claims priority to U.S. Provisional Applications Ser. Nos. 60\/379,749 and 60\/379,781, both filed on May 14, 2002, both entitled, \u201cInterfacing With Ink,\u201d both expressly incorporated by reference herein as to their entire contents, including their appendices.","Aspects of the present invention are directed generally to methods and apparatus for overlaying electronic ink, and more particularly to an application programming interface that allows a developer to easily utilize various ink overlaying features.","Typical computer systems, especially computer systems using graphical user interface (GUI) systems such as Microsoft WINDOWS, are optimized for accepting user input from one or more discrete input devices such as a keyboard for entering text, and a pointing device such as a mouse with one or more buttons for driving the user interface. The ubiquitous keyboard and mouse interface provides for fast creation and modification of documents, spreadsheets, database fields, drawings, photos and the like. However, there is a significant gap in the flexibility provided by the keyboard and mouse interface as compared with the non-computer (i.e., standard) pen and paper. With the standard pen and paper, a user edits a document, writes notes in a margin, and draws pictures and other shapes and the like. In some instances, a user may prefer to use a pen to mark-up a document rather than review the document onscreen because of the ability to freely make notes outside of the confines of the keyboard and mouse interface.","Some computer systems permit a user to draw on a screen. For example, the Microsoft READER application permits one to add electronic ink (also referred to herein as \u201cink\u201d) to a document. The system stores the ink and provides it to a user when requested. Other applications (for example, drawing applications as known in the art are associated with the Palm 3.x and 4.x and PocketPC operating systems) permit the capture and storage of drawings. Also, various drawing applications such as Coral Draw and photo and editing applications such as Photoshop may be used with stylus based input products, such as the Wacom tablet product. These drawings include other properties associated with the ink strokes used to make up the drawings. For instance, line width and color may be stored with the ink. One goal of these systems is to replicate the look and feel of physical ink being applied to a piece of paper. However, physical ink on paper may have significant amounts of information not captured by the electronic collection of a coordinates and connecting line segments. Some of this information may include the thickness of the pen tip used (as seen through the width of the physical ink) or angle of the pen to the paper, the shape of the pen tip, the speed at which the ink was deposited, and the like.","Another problem has arisen with electronic ink. It has been considered part of the application in which it is written. This leads to a fundamental inability to provide the richness of electronic ink to other applications or environments. While text may be ported between a variety of application (through use, for example, of a clipboard), ink fails to have this ability of being able to interact with the ink. For example, one could not create an image of a figure eight, copy and paste the created image into a document by means of the clipboard, and then make the ink bold. One difficulty is the non-portability of the image between applications.","Aspects of the present invention provide a flexible and efficient interface for interacting with properties, invoking methods and\/or receiving events related to electronic ink, thereby solving one or more of the problems identified with conventional devices and systems. Some aspects of the present invention relate to improving the content of stored ink. Other aspects relate to modifying stored ink.","It may be desirable to enable developers to easily add first-class support for ink features to their existing and new applications. It is also desirable to encourage the adoption of a consistent look and feel to ink-enabled applications. For example, it may be desirable to be able to add support for writing on and\/or interacting with documents that may or may not normally accept ink input.","These and other features of the invention will be apparent upon consideration of the following detailed description of preferred embodiments.","Below is described a way to overlay electronic ink on a document.","General Computing Platforms",{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 1","FIG. 1"],"b":["100","110","120","130","110","130","120","140","150"]},"A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within the computer , such as during startup, is stored in the ROM . The computer  also includes a hard disk drive  for reading from and writing to a hard disk (not shown), a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical disk drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules and other data for the personal computer . It will be appreciated by those skilled in the art that other types of computer readable media that can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read only memories (ROMs), and the like, may also be used in the example operating environment.","A number of program modules can be stored on the hard disk drive , magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more application programs , other program modules , and program data . A user can enter commands and information into the computer  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or a universal serial bus (USB). Further still, these devices may be coupled directly to the system bus  via an appropriate interface (not shown). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, personal computers typically include other peripheral output devices (not shown), such as speakers and printers. In a preferred embodiment, a pen digitizer  and accompanying pen or stylus  are provided in order to digitally capture freehand input. Although a direct connection between the pen digitizer  and the processing unit  is shown, in practice, the pen digitizer  may be coupled to the processing unit  via a serial port, parallel port or other interface and the system bus  as known in the art. Furthermore, although the digitizer  is shown apart from the monitor , it is preferred that the usable input area of the digitizer  be co-extensive with the display area of the monitor . Further still, the digitizer  may be integrated in the monitor , or may exist as a separate device overlaying or otherwise appended to the monitor .","The computer  can operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  can be a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing a communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device.","It will be appreciated that the network connections shown are exemplary and other techniques for establishing a communications link between the computers can be used. The existence of any of various well-known protocols such as TCP\/IP, Ethernet, FTP, HTTP and the like is presumed, and the system can be operated in a client-server configuration to permit a user to retrieve web pages from a web-based server. Any of various conventional web browsers can be used to display and manipulate data on web pages.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 2","FIG. 1","FIG. 2"],"b":["201","201","202","203","204","201","204"]},"A stylus could be equipped with buttons or other features to augment its selection capabilities. In one embodiment, a stylus could be implemented as a \u201cpencil\u201d or \u201cpen\u201d, in which one end constitutes a writing portion and the other end constitutes an \u201ceraser\u201d end, and which, when moved across the display, indicates portions of the display are to be erased. Other types of input devices, such as a mouse, trackball, or the like could be used. Additionally, a user's own finger could be used for selecting or indicating portions of the displayed image on a touch-sensitive or proximity-sensitive display. Consequently, the term \u201cuser input device\u201d, as used herein, is intended to have a broad definition and encompasses many variations on well-known input devices.","Electronic Ink and the Concept of an Ink Object","Ink as used herein refers to electronic ink. Electronic ink may be structured as a sequence or set of strokes, where each stroke includes a sequence or set of points. A sequence of strokes and\/or points may be ordered by the time captured and\/or by where the strokes and\/or points appear on a page. A set of strokes may include sequences of strokes and\/or points, and\/or unordered strokes and\/or points. The points may be represented using a variety of known techniques including Cartesian coordinates (X, Y), polar coordinates (r, \u0398), and other techniques as known in the art. A stroke may alternatively be represented as a point and a vector in the direction of the next point. A stroke is intended to encompass any representation of points or segments relating to ink, irrespective of the underlying representation of points and\/or what connects the points. Ink collection typically begins at a digitizer (such as the digitizer of the display surface ). A user may place a stylus on the digitizer and begin to write or draw. At that point, new ink packets (i.e., packets of ink-related data) may be generated. The user may also move the stylus in the air proximate enough to the digitizer so as to be sensed by the digitizer. When this occurs, packets of data (called herein \u201cin-air packets\u201d) may be generated according to the sensed in-air movements of the stylus. Packets may include not only position information but also stylus pressure and\/or angle information.","To store ink, an Ink object may be created that represents the original strokes of ink drawn by the stylus  upon the display surface  and\/or other input. The collected strokes of ink may be collected from anywhere on the display surface  or only from a defined portion thereof, such as a particular window. The Ink object is essentially a container of ink data. The particular format of how ink is stored in the ink object is not important to the present invention. It is preferable, however, that the ink strokes as originally drawn are stored in the ink object.","Two illustrative types of ink objects may be defined. A tInk object (the \u201ct\u201d meaning \u201ctext\u201d) may be embodied as an OLE object representing ink that is expected to form letters or words. The tInk object allows the handwritten ink to be converted to text, such as by a text recognizer. The tInk object may be referred to as an ink object that relates to ink and having a textual context. The color and\/or font size of the textual ink, as well as whether the textual ink should be underlined, bold, italic, and\/or the like may be set programmatically and may be based on the attributes of the text around the tInk object. In other words, the ambient properties at the tInk object's intended insertion point may be applied to the tInk object. In one embodiment, the tInk object contains only a single word for submission to the text recognizer, such that a sentence may contain multiple tInk objects. On the other hand, an sInk object (the \u201cs\u201d meaning \u201csketch\u201d) may also be defined as an object representing ink that is not expected to form words. The sInk object may also be an OLE object. An sInk object may therefore be interpreted as a drawing or any other non-textual context. A sInk object may also be useful for representing multiple words. An ink-compatible application (and\/or the user) may mark certain Ink objects as tInk objects and others as sInk objects. For the purposes of description, the two types of ink are described herein as \u201ctInk\u201d and \u201csInk.\u201d It is appreciated, however, that other names may be used to represent the various types of ink object that may be used. Also, alternative types of objects may be used to store electronic ink in any desired format.","Overview of Ink Controls API","Referring to , an API called herein the Ink Controls API provides developers with a model for various objects and controls. The Ink Controls API may be available to developers using various application development software, such as Microsoft native Win32 COM API, Microsoft ActiveX API, and\/or Microsoft Managed API. The Ink Controls API enables developers to easily add first-class support for ink to existing non-ink compatible applications and to new applications. The developer merely needs to add the appropriate controls and set various properties. The Ink Controls API further encourages the adoption of a consistent look and feel to ink-enabled applications; the Ink Controls API may serve as an excellent starting point for implementing a user experience. The Ink Controls API additionally provides inking user interface elements that developers would likely want but otherwise would have had to create themselves from scratch.","Various objects and controls of the Ink Controls API include an InkCollector automation object , an InkCollector managed object , an InkOverlay Automation object , an InkPicture ActiveX control , an InkOverlay managed object , a PictureBox WinForms control , and\/or an InkPicture WinForms control . The InkCollector object  collects ink drawn by a user (such as on the display surface ). The InkOverlay object enables developers to easily add annotation functionality to an application, and extends the ink-collection functionality of the InkCollector object  to provide support for basic editing such as selecting, moving, resizing, and erasing of ink. The InkPicture control encompasses some or all of the API elements of the InkOverlay object and allows developers to add an area to a window intended for the collection and editing of ink. The InkPicture control may further allow the developer to add background pictures, images, and\/or colors to the window.","These objects and controls, described further below, may interact with one or more host applications such as an ActiveX host application (VB6, for example) and\/or a Win32 host application (collectively, ) and\/or a common-language runtime (CLR) host application (VB7\/C#) . The InkOverlay Automation object  and the InkPicture ActiveX control  may be used by native Win32\/ActiveX developers, and the InkOverlay managed object  and the InkPicture WinForms control  may be used by developers who utilize CRL. In this figure, solid arrows represent an illustrative inheritance metaphor and broken arrows indicate an illustrative usage metaphor.","InkCollector Object","The InkCollector object is used to capture ink from an ink input device and\/or deliver ink to an application. The InkCollector object acts, in a sense, as a faucet that \u201cpours\u201d ink into one or more different and\/or distinct ink objects by collecting the ink as one or more ink strokes and storing the ink in one or more associated ink objects. The InkCollector object may attach itself to a known application window. It then may provide real-time inking on that window by using any or all available tablet devices (which may include the stylus  and\/or a mouse). To use the InkCollector object, the developer may create it, assign which window to collect drawn ink in, and enable the object. After the InkCollector object is enabled, it may be set to collect ink in a variety of ink collection modes, in which ink strokes and\/or gestures are collected. A gesture is a movement or other action of the stylus  that is interpreted not as rendered ink but as a request or command to perform some action or function. For example, a particular gesture may be performed for the purpose of selecting ink, while another gesture may be for the purpose of italicizing ink. For every movement of a stylus upon or proximate to the digitizer input, the InkCollector object will collect a stroke and\/or a gesture.","InkOverlay Object","The InkOverlay object is an object useful for annotation scenarios where end users are not necessarily concerned with performing recognition on ink but may be interested in the size, shape, color, and position of the ink. It is well-suited for note-taking and basic scribbling. The primary intended use of this object is to display ink as ink. The default user interface is a transparent rectangle with opaque ink. InkOverlay extends the InkCollector class in several ways. For example, the InkOverlay object (and\/or the InkPicture control discussed below) may support selecting, erasing, and re-sizing ink, as well as Delete, Cut, Copy, and Paste commands.","A typical scenario where the InkOverlay object may be useful is to mark up a document, such as by making handwritten comments, drawings, and the like over the underlying document. The InkOverlay object allows easy implementation of the inking and layout capabilities required for this scenario. For example, to work with InkOverlay object, one may instantiate an InkOverlay object, attach the InkOverlay to the hWnd of of another window, and set the InkOverlay Enabled property to True.","Referring to , a high-level block diagram of the component parts that make of the internals and the external dependencies of the InkOverlay object is shown. Arrows indicate a usage metaphor. An InkOverlay object  may receive ink from an InkCollector object . The InkOverlay object  may have selection management functionality  and\/or editing functionality . As discussed in examples below, the InkOverlay object  may have transparent overlay window management functionality  in order to transparently overlay another object, window, or other displayed item such as a scanned-in paper form. Externally, the InkOverlay object  may interact with various applications and API. For example, an application may utilize the InkOverlay object  for implementing various low-level inking functions. In one embodiment, such an application may be Microsoft WINDOWS\u00ae INK SERVICES PLATFORM\u00ae (WISP) . It should be noted that application  is not limited to WISP, nor, like the other elements discussed herein, to the Microsoft WINDOWS\u00ae environment. The InkOverlay object  may further interact with an API that automates many of the lower-level WISP  functionality. In this embodiment, such an API is called Automation API . The Automation API  includes the Ink Controls API discussed above and provides developers with the object model that includes the Ink object, the InkCollector object, the InkOverlay object, and the InkPicture object. The InkOverlay object  may further interact with one or more operating system APIs such as the Microsoft WINDOWS\u00ae Win32 API  and\/or Microsoft .NET\u00ae API.","The selection management functionality  of the InkOverlay object  supports the selection of ink. Ink may be selected in a variety of ways such as by means of a lasso tool (selection of objects contained in a traced region). The InkOverlay object  may also support tap selection, in which any Ink object that is clicked on and\/or near is selected. When an Ink object or set of Ink objects is selected, re-size handles (e.g., eight re-size handles) may appear at the four corners of the ink's bounding box, as well as at one or more midpoints between adjacent corners. Moving the re-size handles may cause the selected ink to be re-sized in accordance with handle movement. Keyboard or other modifiers may be used to instruct the InkOverlay object to maintain the original aspect ratio while re-sizing. Ink may further be resized using any other means desired. Also, keyboard or other modifiers may be used to instruct the InkOverlay object to copy the selected ink during a drag operation instead of re-sizing the ink during dragging. If the user presses and holds anywhere within the selected region, the ink becomes movable inside the control. A rectangular selection metaphor, and\/or a word, sentence, and\/or paragraph selection metaphor may further be utilized. For example, clicking inside an ink word will select the word, clicking anywhere inside an ink sentence will select that entire sentence, and clicking anywhere inside an ink paragraph will likewise select the entire paragraph. Other means for selecting include utilizing particular gestures that indicate selection behavior, such as a single-click on or near an ink stroke indicating selection of the ink stroke, a double-click on or near a word selecting the entire word, and a triple-click selecting an entire sentence. In addition, ink may be selected and\/or modified by directly calling the API of the InkOverlay object either programmatically or by end user input.","In addition, the InkOverlay object may provide for ink erasing functionality. For example, the InkOverlay object may provide for stroke-erase mode and\/or point-erase mode. In stroke-erase mode, if the cursor is down and comes in contact with an existing ink stroke, that stroke is removed completely. In point-erase mode, if the cursor is down and comes in contact with an existing ink stroke, only the overlapping regions of the cursor and the ink stroke will be erased.","InkOverlay API","An illustrative application programming interface (API) for the InkOverlay object is now discussed with reference to . In , an InkOverlay object  is represented by a box, and various elements (or functionally-grouped elements) of an API are shown as labeled arrows - emerging from and\/or entering the box representing the InkOverlay object . In general, arrows entering the InkOverlay object  box refer to API elements (or functionally-grouped elements) that for the most part modify the InkOverlay object  (e.g., by changing one of its properties) and\/or otherwise provide information to the InkOverlay object . Arrow emerging from the InkOverlay object  box refer to API elements (or functionally-grouped elements) that for the most part represent a flag or some other information that is provided by the InkOverlay object  to its environment. However, the directions of the arrows are not intended to be limiting, and so an arrow entering the InkOverlay object  is not prevented from also representing information provided by the InkOverlay object  to its environment. Likewise, an arrow emerging from the InkOverlay object  is not prevented from also modifying or providing information to the InkOverlay object .  further shows a plurality of properties - of the InkOverlay object .","The InkOverlay API in the exemplary embodiment has some or all of the following enumerations (not shown), in any combination or subcombination. An application gesture enumeration defines values that set the interest in a set of application-specific gestures. A collection mode enumeration defines values that determine the collection mode settings of the InkOverlay object. An event interest enumeration defines which events the developer using the InkOverlay object and\/or InkCollector object is interested in receiving. The InkOverlay object may use the event interest enumeration to determine which information will be provided to the developer via events. A mouse pointer enumeration defines values that specify the type of mouse pointer to be displayed. This enumeration also appears in the InkPicture control and the InkCollector object. An overlay attach mode enumeration defines values that specify where to attach the new InkOverlay object\u2014behind or in front of controls and\/or text in the window to which the InkOverlay object is attached. Where the InkOverlay object is attached in front, this means that the ink will be rendered in front of controls and\/or text in the window. where the InkOverlay object is attached behind, this means that the ink will be rendered directly in the window to which it is attached, thus behind any other controls or child windows in the window hierarchy. An overlay editing mode enumeration defines values that specify which editing mode the InkOverlay object should use\u2014drawing ink, deleting ink, editing ink. An eraser mode enumeration defines values that specify the way ink is erased when An editing mode enumeration is set to delete. A system gesture enumeration defines values that set the interest in a set of operating system-specific gestures.","The InkOverlay API in the exemplary embodiment also has one or more of the following properties, in any combination or subcombination, that can be set and that can return the information they represent. An attach-mode property  represents whether the object is attached behind or in front of the given window. An auto-redraw property  represents whether the InkCollector will repaint when the window is invalidated. A collecting-ink property  represents whether the object is busy collecting ink. A collection-mode property  represents whether the object is collecting only ink, only gestures, or both ink and gestures. A cursor collection-related property  represents the collection of cursors that have been encountered by the object. A drawing-attributes property  represents the default drawing attributes to use when collecting and displaying ink. The drawing attributes specified with this property are the attributes that are assigned to a new cursor, and may be applied to those cursors in the cursors collection for which default drawing attributes are set to null. A packet-description property  represents the packet description of the InkOverlay object . A dynamic-rendering property  represents whether the InkOverlay object  will dynamically render the ink as it is collected. An editing-mode property  represents whether the object is in ink mode, deletion mode, or selecting\/editing mode. An InkCollector-enabled property represents whether the InkCollector will collect pen input (in-air packets, cursor in range events, and so on). Various eraser properties  represent whether ink is erased by stroke or by point and how ink is erased, and the width of the eraser pen tip. A window-handle property  represents the handle to which the InkOverlay object  attaches itself. An associated-Ink-object property  represents the Ink object that is associated with the InkOverlay object. Margin properties  represent the x-axis and y-axis margins, preferably in screen coordinates, of the InkOverlay object  around the window rectangle associated with the window handle that is attached. Also, the margin properties  may provide an alternate means of achieving the behavior associated with window rectangle methods  discussed below. One or more custom mouse cursor properties  represent the current custom mouse icon, the type of mouse pointer displayed when the mouse is over the InkOverlay object , such as over an inkable portion of the object, and\/or the cursor that is displayed when the active pointing device (e.g., the stylus  or the mouse ) causes the displayed cursor to be over the InkOverlay object. A renderer property  represents the renderer that is used to draw ink on the screen. A selection property  represents the collection of ink strokes that are currently selected. High-contrast-ink properties  represent whether the ink will be rendered in high contrast, e.g., just one color, and whether all selection UI (e.g., selection bounding box and selection handles) will be drawn in high contrast when the system is in high-contrast mode. A tablet property  represents the tablet that the object is currently using to collect cursor input.","The InkOverlay API in the exemplary embodiment also has a plurality of associated events and methods, in any combination or subcombination. For example, there may be cursor-related events and methods , . Such cursor-related events occur depending upon whether a cursor (such as the tip of the stylus ) is within physical detection range of the tablet context, or responsive to the cursor being physically in contact with the digitizing tablet surface (e.g., surface ). Cursor-related methods are called responsive to the respective cursor-related event being raised. These features may allow a developer to extend and override the InkOverlay object's cursor functionality.","The InkOverlay API may further have cursor-button-related events and methods . Such cursor-button events occur depending upon whether a button on the cursor (e.g., stylus ) is up or is pressed down. Cursor-button-related methods are called responsive to the respective cursor-button-related event being raised. These features may allow a developer to extend and override the InkOverlay object's cursor button functionality.","The InkOverlay API may further have gesture-related events and methods , . Such gesture-related events occur responsive to a system gesture being recognized or an application-specific gesture being recognized. Certain gesture-related methods are called responsive to the respective gesture-related event being raised. Another gesture-related method specifies the interest of the InkOverlay object  in a given set of gestures, or retrieves that interest. These features allow a developer to extend and override the InkOverlay object's gesture functionality.","The InkOverlay API may further have tablet-related events and methods , . Some tablet-related events occur responsive to a tablet being added or removed from the system. Tablet-related methods are called responsive to the respective tablet-related event being raised. Other tablet-related methods  specify setting the InkOverlay object  into an all tablets mode or into an integrated tablet mode. In the all tablets mode (which may be a default mode), all tablet devices are integrated if there are multiple devices attached to the system. Because all of the tablet devices are integrated, available cursors may be used on any of the tablet devices, and each tablet will map to the entire screen using the same drawing attributes. In the integrated tablet mode, an integrated tablet-style computer input surface shares the same surface as the display screen; this means that the entire tablet-style computer input surface maps to the entire screen, allowing for automatic updating of a window.","The InkOverlay API may further have packet-related events and methods . Such packet-related events are responsive to newly-drawn packets and new in-air packets. Packet-related methods are called responsive to the respective packet-related event being raised. These features may allow a developer to extend and override the InkOverlay object's stylus functionality and responsiveness.","The InkOverlay API may also have painting-related events and methods . Such painting-related events occur just before the InkOverlay object  paints the ink along with any selection of ink, thereby allowing the developer an opportunity to alter the appearance of the ink or alter the ink itself. A painting-related event may also occur responsive to the InkOverlay object  having completed painting the ink a subset thereof, thereby allowing the developer to draw something in addition to the ink already drawn. Painting-related methods are called responsive to the respective painting-related event being raised. This functionality may allow the developer to extend and override the InkOverlay object's ink rendering behavior. These painting-related methods may also not actually be a part of the InkOverlay object, but instead may be available for the developer to implement such methods and connect them to the InkOverlay object such that they are appropriately called responsive to the painting-related events being fired.","The InkOverlay API may also have selection-related events and methods . Some selection-related events occur before the selection changes, thereby providing the developer the opportunity to alter the selection change which is about to occur. A selection-related event may also be responsive to the selection having completed changing\u2014either programmatically or as a result of end-user action. Other selection-related events occur responsive to the position of the current selection being about to move or when the position of the current selection has changed. Still other selection-related events occur responsive to the size of the current selection being about to change or to size of the current selection having changed. Selection-related methods are called responsive to the respective selection-related event being raised. These features may allow a developer to extend and override the InkOverlay object's selection and editing functionality.","The InkOverlay API may further have ink-stroke-related events and methods , . One such stroke-related event is responsive to the user drawing a new stroke on any tablet. Other stroke-related events are responsive to strokes about to be deleted or strokes having been deleted. Stroke-related methods are called responsive to the respective stroke-related event being raised. These features may allow a developer to extend and override the InkOverlay object's ink-erasing functionality.","The InkOverlay API may have various further miscellaneous methods. For example, a draw method  may draw ink and selection UI for a specified rectangle in the provided device context (e.g., screen, printer, etc.). Other methods  set the current state of a particular InkOverlay event (e.g., whether the event is being listened for or used), or retrieve that current state. Still other methods  set specify the window rectangle to set, in window coordinates, within which ink is drawn, or retrieve that window rectangle. Another method  determines whether a given coordinate corresponds with one of the re-size handles, the inner portion of a selected region, or no selection at all. A constructor  specifies the creation of a new InkOverlay object that may be attached to a specified window handle, which may be on a specified tablet, and which may map a window input rectangle to a tablet input rectangle.","The InkOverlay API in the exemplary embodiment may also have various margin constants (not shown). A first margin constant returns a value that specifies whether to clip strokes when they are outside the default margin. A second margin constant returns the default margin used by the margin properties. These constants also appear as properties in the InkCollector object and the InkPicture control.","InkPicture Control","As previously mentioned, a control (called herein the InkPicture control) may be created (which may be, e.g., an ActiveX control) that allows developers to add a window intended for the collection and editing of ink. The InkPicture control provides the ability to place an image in an application or web page to which users can add ink. The image may be in any format such as .jpg, .bmp, .png, or .gif format. The InkPicture control may primarily be intended for scenarios where ink does not necessarily need to be recognized as text, but may instead or additionally be stored as ink. In an illustrative embodiment, the run-time user interface for the InkPicture control is a window with, e.g., an opaque background (such as single color, picture background, or both), containing opaque or semi-transparent ink. In an illustrative embodiment, the InkPicture control wraps the InkOverlay object with an ActiveX or other control.","InkPicture API","Referring to , an illustrative InkPicture control  is shown. The InkPicture control  exposes some or all of the API elements of the InkOverlay object , and additionally some or all of the API elements shown in . For example, in one illustrative embodiment, the InkPicture control  may allow access to all of the InkOverlay API elements with the exception of the attach mode property  and\/or the window handle property . The InkPicture control  may have its own API, as discussed below, that adds to the functionality of the InkOverlay API. In some embodiments, the InkPicture control  may be an ActiveX control and may add the following functionality as compared with the InkOverlay object : keyboard events, control sizing events, additional mouse events, and\/or background color and image-related properties. In addition, the InkPicture control  may inherit from Microsoft PictureBox. For instance, PictureBox may implement some or all of the properties discussed herein with regard to the InkPicture control , such as the background image.","In , the InkPicture control  is represented by a box, and various elements (or functionally-grouped elements) of an API are shown as labeled arrows - emerging from and\/or entering the box representing the InkPicture control . In general, arrows entering the InkPicture control  box refer to API elements (or functionally-grouped elements) that for the most part modify the InkPicture control  (e.g., by changing one of its properties) and\/or otherwise provide information to the InkPicture control . Arrows emerging from the InkPicture control  box refer to API elements (or functionally-grouped elements) that for the most part represent a flag or some other information that is provided by the InkPicture control  to its environment. However, the directions of the arrows are not intended to be limiting, and so an arrow entering the InkPicture control  is not prevented from also representing information provided by the InkPicture control  to its environment. Likewise, an arrow emerging from the InkPicture control  is not prevented from also modifying or providing information to the InkPicture control .  further shows a plurality of properties - of the InkPicture control .","In an illustrative embodiment, the API for the InkPicture control  may have one or more enumerations (not shown). For example, an ink-picture-size enumeration defines values that specify how a background picture behaves inside the InkPicture control, such as whether the picture will auto-size to fit within the control, or will center within the control, or will appear at its regular size within the control, or will be stretched within the control. Also, a user-interface enumeration defines values that specify the state of the user interface for the InkPicture control, such as the states of focus and keyboard cues, whether focus rectangles are displayed after a change in status, and\/or whether keyboard cues are underlined after a change in status.","In the illustrative embodiment, the API for the InkPicture control  may have some or all of the various associated properties -, in any combination or subcombination. For example, one or more accessibility properties  represent the name and description of the InkPicture control used by accessibility client applications, as well as the accessible role of the InkPicture control. An anchor property  represents which edges of the InkPicture control are anchored to the edges of its container. One or more background properties  represent the background color for the InkPicture control and background image displayed in the InkPicture control. A border-style property  represents the border style used for the InkPicture control. A validation property  represents whether the InkPicture control causes validation to be performed on any controls that require validation when focus is received. A container property  represents the container that contains the InkPicture control. A dock property  represents which edge or edges of the parent container the InkPicture control is docked to. One or more drag properties  represent the icon to be displayed as the pointer in a drag-and-drop operation and whether manual or automatic drag mode is used for a drag-and-drop operation. An enabled property  represents whether the InkPicture control is focusable. One or more dimensional properties  represent the height of the InkPicture control, the width of the InkPicture control and both the height and width of the InkPicture control. These dimensional properties may be in any units such as pixels. A context-sensitive help property  represents an associated context identification for the InkPicture control, and may be used to provide context-sensitive help for an application. A window-handle property  represents the handle of the window on which ink is drawn. An image property  represents the image displayed in the InkPicture control. A control array index property  represents the number identifying the InkPicture control in a control array. One or more positional properties  represent the distance between the internal left edge of the control and the left edge of its container and between the internal top edge of the control and the top edge of its container. A lock property  represents whether the contents of the InkPicture control can be edited. A visibility property  represents whether the InkPicture control is visible. A control name property  represents the name of the InkPicture control. An object property  represents the object corresponding to the InkPicture control. A parent object property  represents the object on which the control is located. A size mode property  represents how the InkPicture control handles placement and sizing of images. One or more tab properties  represents the tab order of the InkPicture control within its parent container and whether the user can use the Tab key to provide focus to the InkPicture control. An object tag property  represents extended properties, or custom data, about an object. A tool tip property  represents the text that is displayed when the mouse (or stylus) is paused over the InkPicture control. A help property  represents an associated context number for the InkPicture control. The help property  may be used to provide context-sensitive help for an application using the \u201cWhat's This?\u201d pop-up.","The InkPicture API in the illustrative embodiment may further have a plurality of associated events and methods, in any combination or subcombination. For example, a set focus method  specifies the focus should be assigned to the InkPicture control. One or more focus events  occur responsive to the InkPicture control losing focus or receiving focus. A user-interface focus event  occurs responsive to the focus or keyboard user interface cues changing. A z-order method  specifies that the InkPicture control be placed at the front or back of the z-order within its graphical level. A control size event  occurs responsive to the InkPicture control having been resized. A size mode event  occurs responsive to the size mode property  having been changed. A resize\/move method  specifies the movement and\/or resizing of the InkPicture control. A style event  occurs responsive to the style of the InkPicture control changing. A creation method  specifies the creation of a new InkPicture control. A drag method  specifies the beginning end, and\/or cancellation of a drag operation on the InkPicture control. One or more mouse\/stylus button events  occur responsive to the mouse\/stylus pointer being over the InkPicture control and a mouse button (or a button of a stylus) being pressed or released. One or more click events  occur responsive to the InkPicture control being clicked upon or double-clicked upon. One or more mouse entry\/exit events  occur responsive to the mouse\/stylus pointer entering or exiting the diplayed area associated with the InkPicture control. One or more mouse move events  occur responsive to the mouse\/stylus pointer moving over the InkPicture control or hovering over the InkPicture control. A mouse wheel event  occurs responsive to the mouse wheel moving while the InkPicture control has focus. A drag-over event  occurs responsive to an object being dragged over the bounds of the InkPicture control. A drag-and-drop event  occurs responsive to a drag-and-drop operation being completed. One or more handle methods  raise events responsive to a handle being created or destroyed. One or more key events  occur responsive to a key being pressed or released while the InkPicture control has focus. The InkPicture control  may further send any or all of the events discussed previously with regard to the InkOverlay object .","Overlaying of Electronic Ink","Referring to , a document  may be generated or otherwise provided. The document in the illustrative embodiment of  is a text document. However, the term document should be broadly construed herein to be any other type of document such as, but not limited to, a word-processing document (such as is generated using Microsoft WORD\u00ae), an image document, a graphical document, a text-plus-graphics document, a scanned paper document, a spreadsheet document, a photograph, and\/or a form having a plurality of fields. The term \u201cdocument,\u201d as used herein in describing the present invention, also includes within its scope a software application. An InkOverlay object and\/or an InkPicture control may be defined to create one or more inking surfaces (such as windows) disposed over some or all of the document . The window or other inking surface may preferably be transparent (either fully transparent or semi-transparent) such that the document  underneath is viewable. However, some or all of the window may be opaque and\/or may have a background image and\/or color (such as by use of one or more of the illustrative background properties  of the illustrative InkPicture control). Where a background image is used, the background image may be the document itself as an alternative to overlaying the window over a separate document. The window may optionally have a border  (shown herein illustratively as a dotted line) that may be opaque or otherwise visible. When a user writes on the screen in the area of the window using the stylus , ink data is collected from the handwriting, and the ink data may be rendered and displayed in the window as electronic ink . Thus, it may appear as though the handwritten ink is being written on the document . The ink data may also be stored in an object such as in the ink object. Also, one or more events, such as painting-related events , may trigger during rendering and\/or at the beginning of rendering, and\/or upon the rendering of the ink being completed.","The user may further select a portion of the ink  already rendered and change the selected portion in a variety of ways. Where at least a portion of the ink  is selected (e.g., by circling the selected portion with the stylus ), a reference to the selected portion may be stored. The selection portion may be moved and\/or resized, in which case one or more events, such as events , may trigger during the selection moving or being resized and\/or at the beginning of the moving or resizing, and\/or upon the selection having completed moving or resizing. Some or all of the ink  (such as one or more strokes) may further be deleted. The user and\/or an application, for example, may request that at least a portion of the ink  be deleted, and one or more events, such as events , may trigger during the ink being deleted and\/or at the beginning of the ink being deleted, and\/or upon the ink having been deleted.","In view of the above, an application developer may have programmatic access (i.e., be able to modify the internal structures directly, and not necessarily via the user input or control APIs) to the ink inside the InkOverlay object and\/or the InkPicture control. The developer and\/or user may further be able to modify the selection of ink and\/or various other properties. The InkOverlay object may then manage the internal details of establishing a tablet context, listening for digitizer events, and\/or collecting and interpreting ink strokes according to its current mode.","For example, the developer may easily have access to events associated with new strokes, and may compare the position of the new ink strokes to text and\/or objects in the underlying document  by retrieving position metadata from the new strokes. Thus, by having access to the various events and methods described herein, an application developer may add data structures to an application to facilitate mapping ink to application data. This may allow, for instance, gestures and\/or other commands to be issued by the user and\/or an application, via the InkOverlay object, to modify the underlying document . For instance, as shown in , a portion of the text in the document  is encircled by ink and a large \u201cB\u201d is drawn in the encirclement. This may be interpreted as a command to modify the text in the document  that is encircled to be boldface text. Or, a word may be deleted and\/or inserted such as is shown in  (e.g., the word \u201cdefence\u201d in the underlying document  is deleted and replaced with newly-inserted word \u201cdefense\u201d) using a gesture and\/or other command. The result of these gestures is shown in .","The developer may further easily configure his or her application to rearrange ink in the InkOverlay object as underlying text and\/or objects in the underlying document  move. This may be accomplished, for example, by locating ink strokes in the InkOverlay object window and to move and\/or resize the strokes.","The developer may further easily extend the InkOverlay object's native editing functionality by listening for various events as described herein to include various concepts such as highlighting. This may be accomplished, for example, by overriding the default drawing attributes property. The developer may also add functionality such as selective read-only strokes (through selectively rejecting user-manipulation of specific strokes), as well as parsing (through feeding strokes into a recognizer) and\/or natural user-gestures like erasing with the back of the stylus  (by listening for \u201cnewcursor\u201d events and switching the InkOverlay control's mode).","Also, more than one InkOverlay object and\/or InkPicture control may be disposed over the document  at any one time, and these multiple objects and\/or controls may be layered. Referring to , a second InkOverlay object (for example) may be instantiated and may have a second window with a second optional border . The same user or another user may write ink  on the second InkOverlay object window, and the associated ink data may be stored in the InkOverlay object and\/or rendered in the window of the second InkOverlay object. Alternatively, the user may write ink into the first InkOverlay object window at a location where the first and second windows overlap, and the ink may be sent to the second window.","While exemplary systems and methods as described herein embodying various aspects of the present invention are shown by way of example, it will be understood, of course, that the invention is not limited to these embodiments. Modifications may be made by those skilled in the art, particularly in light of the foregoing teachings. For example, each of the elements of the aforementioned embodiments may be utilized alone or in combination with elements of the other embodiments. Although the invention has been defined using the appended claims, these claims are exemplary in that the invention is intended to include the elements and steps described herein in any combination or sub combination. Accordingly, there are any number of alternative combinations for defining the invention, which incorporate one or more elements from the specification, including the description, claims, and drawings, in various combinations or sub combinations. It will be apparent to those skilled in the relevant technology, in light of the present specification, that alternate combinations of aspects of the invention, either alone or in combination with one or more elements or steps defined herein, may be utilized as modifications or alterations of the invention or as part of the invention. It is intended that the written description of the invention contained herein covers all such modifications and alterations. Also, it should be recognized that although various names of objects and other API elements are provided herein, such names are merely illustrative and any names may be used without departing from the scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary of the invention, as well as the following detailed description of preferred embodiments, is better understood when read in conjunction with the accompanying drawings, which are included by way of example, and not by way of limitation with regard to the claimed invention.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 3-6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 7-9"}]},"DETDESC":[{},{}]}
