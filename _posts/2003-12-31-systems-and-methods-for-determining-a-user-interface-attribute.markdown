---
title: Systems and methods for determining a user interface attribute
abstract: Systems and methods for determining a user interface attribute are described. In one method described, a display processor receives a request to display a content display in a user interface, detects an area of the user interface comprising non-primary content, and creates a content display having an attribute, the attribute associated with the area of the user interface comprising non-primary content. Such a method may also include modifying the attribute in response to changes in the area of the user interface comprising non-primary content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08156444&OS=08156444&RS=08156444
owner: Google Inc.
number: 08156444
owner_city: Mountain View
owner_country: US
publication_date: 20031231
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATION","FIELD OF THE INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application relates to application Ser. No. 10\/750,127, filed herewith, titled \u201cSystems and Methods for Generating a User Interface,\u201d the entirety of which is incorporated herein by reference. This application also relates to application Ser. No. 10\/750,109, filed herewith, titled \u201cSystems and Methods for Constructing a Query Result Set,\u201d the entirety of which is incorporated herein by reference.","The present invention relates generally to methods and systems for user interface generation. The present invention relates particularly to methods and systems for determining a user interface attribute.","Conventional search engines receive a search query from a user and execute a search against a global index. Such conventional search engines typically use one or more conventional methods for performing a search. For example, one known method, described in an article entitled \u201cThe Anatomy of a Large-Scale Hypertextual Search Engine,\u201d by Sergey Brin and Lawrence Page, assigns a degree of importance to a document, such as a web page, based on the link structure of the web page. The search results are often presented in a list format, comprising article identifiers and brief snippets about the documents in a web page that can be resized.","In a conventional user interface, the window comprising the search results may be layered on top of other windows or may be covered by other windows, or may reduce the space available for other windows. In either case, information that may be of interest to the user is obscured. In order to avoid the visual interference in the user interface, the user can manually adjust attributes of the display, such as the position and size of a window, to alleviate interference between windows.","A conventional interface may also provide a capability to adjust the relation of all windows displayed in the interface. For example, in the Microsoft\u00ae Windows environment, windows in the interface may be layered, cascaded, or arranged so that the windows together fill the display area.","A need exists to provide an improved system and method for automatically determining an attribute of a user interface.","Embodiments of the present invention provide systems and methods for determining a user interface attribute. In one embodiment of the present invention, a display processor detects an area of the user interface comprising non-primary content, and creates a content display having an attribute, the attribute associated with the area of the user interface comprising non-primary content.","These exemplary embodiments are mentioned not to limit or define the invention, but to provide examples of embodiments of the invention to aid understanding thereof. Exemplary embodiments are discussed in the Detailed Description, and further description of the invention is provided there. Advantages offered by the various embodiments of the present invention may be further understood by examining this specification.","Embodiments of the present invention provide systems and methods for generating a user interface. Referring now to the drawings in which like numerals indicate like elements throughout the several figures,  is a block diagram illustrating an exemplary environment for implementation of an embodiment of the present invention. While the environment shown reflects a client-side search engine architecture embodiment, other embodiments are possible.","The system  shown in  includes multiple client devices -in communication with a server device  over a network . The network  shown comprises the Internet. In other embodiments, other networks, such as an intranet, may be used instead. Moreover, methods according to the present invention may operate within a single client device.","The client devices -shown each includes a computer-readable medium . The embodiment shown includes a random access memory (RAM)  coupled to a processor . The processor  executes computer-executable program instructions stored in memory . Such processors may include a microprocessor, an ASIC, a state machine, or other processor, and can be any of a number of computer processors, such as processors from Intel Corporation of Santa Clara, Calif. and Motorola Corporation of Schaumburg, Ill. Such processors include, or may be in communication with, media, for example computer-readable media, which stores instructions that, when executed by the processor, cause the processor to perform the steps described herein. Embodiments of computer-readable media include, but are not limited to, an electronic, optical, magnetic, or other storage or transmission device capable of providing a processor, such as the processor  of client , with computer-readable instructions. Other examples of suitable media include, but are not limited to, a floppy disk, CD-ROM, DVD, magnetic disk, memory chip, ROM, RAM, an ASIC, a configured processor, all optical media, magnetic tape or other magnetic media, or any other medium from which a computer processor can read instructions. Also, various other forms of computer-readable media may transmit or carry instructions to a computer, including a router, private or public network, or other transmission device or channel, both wired and wireless. The instructions may comprise code from any computer-programming language, including, for example, C, C++, C#, Visual Basic, Java, Python, Perl, and JavaScript.","Client devices -can be connected to a network  as shown, or can be stand-alone machines. Client devices -may also include a number of external or internal devices such as a mouse, a CD-ROM, DVD, a keyboard, a display, or other input or output devices. Examples of client devices -are personal computers, digital assistants, personal digital assistants, cellular phones, mobile phones, smart phones, pagers, digital tablets, laptop computers, Internet appliances, and other processor-based devices. In general, the client devices -may be any type of processor-based platform that operates on any operating system, such as Microsoft\u00ae Windows\u00ae or Linux, capable of supporting one or more client application programs. For example, the client device shown comprises a personal computer executing client application programs, also known as client applications . The client applications  can be contained in memory  and can include, for example, a word processing application, a spreadsheet application, an e-mail application, an instant messenger application, a presentation application, an Internet browser application, a calendar\/organizer application, a document viewer application, and any other application capable of being executed by a client device.","The user can interact with the various client applications  and articles associated with the client applications  via various input and output devices of the client device . Articles include, for example, word processor, spreadsheet, presentation, e-mail, instant messenger, database, Internet browser, document view, and other client application program content files or groups of files, web pages of various formats, such as HTML, XML, XHTML, Portable Document Format (PDF) files, and audio files, video files, or any other documents or groups of documents or information of any type whatsoever.","The user's interaction with articles, the client applications , and the client device creates event data that may be observed, recorded, analyzed or otherwise used. An event can be any occurrence possible associated with an article, client application , or client device , such as inputting text in an article, selecting text in an article, sending an article, receiving an article, manipulating an input device, opening an article, saving an article, closing an article, highlighting a selection within an article, hovering the mouse over words in an article, opening a client application program, closing a client application program, idle time, processor load, disk access, memory usage, and any other possible occurrence associated with an article, a client application program, or the client device whatsoever.","The memory  of the client device shown also contains a capture processor , a queue , and a search engine . The client device shown also contains or is in communication with a data store . The capture processor  can capture events and pass them to the queue . The search engine  requests events from the queue  when the search engine  is ready to process the events. The queue  may also notify the search engine  when events are available. When the search engine  receives an event it can be processed and can be stored in the data store . The search engine  can receive an explicit query from the user or generate an implicit query and retrieve information from the data store  in response to the query.","In the embodiment shown, the capture processor  comprises multiple capture components. For example, the capture processor  shown comprises a separate capture component for each client application in order to capture event data associated with each application. In general, a capture component may monitor one or more applications, and one or more capture components may monitor a particular application. The capture processor  shown also comprises a separate capture component that monitors overall network activity in order to capture event data associated with network activity, such as the receipt of an instant message. The capture processor  shown also comprises a separate capture component that monitors overall client device performance data, such as processor load, idle time, disk access, the client applications in use, and the amount of memory available. The capture processor  shown also comprises a separate capture component to monitor and capture keystrokes input by the user.","The capture processor  can capture events in real time, termed real time events and can capture events that have occurred in the past, termed historical events. Real time events can be loading, saving, or viewing an article, such as opening a word processing document, viewing a web page, viewing an email, and saving an MP3 file, and updating the metadata of an article, such as bookmarking a web page, printing a presentation document, deleting a word processing document, and moving a spreadsheet document.","Historical events are similar to real time events except that the event occurred before the installation of the search engine  or was otherwise not captured, because, for example, the search engine  was not operational for a period of time while the client device was operational. Examples of historical events include the user's saved word processing documents, spreadsheets, presentations, the emails in a user's inbox, and the web pages bookmarked by the user.","The search engine  shown contains an indexer , a query system , and a formatter . Real time events can be provided by the queue  to the query system  upon request to provide the query system  with information concerning current user context. The queue  may also notify the query system , and the indexer , when new events are available. In one embodiment, performance data is stored in a performance management system (not shown) rather than in the queue . The performance management system is available to any component that requires access to current performance data. The query system  can use information from the queue  to generate an implicit query. The query system  can also receive and process explicit queries from the user ","In the embodiment shown, real time events and historical events are sent by the queue  to the indexer . In one embodiment, not all contextual real time events are indexed and these events are not sent to the indexer . The indexer  can index the indexable real time events and historical events and can send them to the data store  where they are stored. The data store  can be any type of computer-readable media and can be integrated with the client device , such as a hard drive, or external to the client device , such as an external hard drive or on another data storage device accessed through the network . The data store  may include any one or combination of methods for storing data, including without limitation, arrays, hash tables, lists, and pairs. In the embodiment shown, the data store comprises a messaging index , an article index , a database  and a repository .","In the embodiment shown, a user can input an explicit query into a search engine interface displayed on the client device , which is received by the search engine . The search engine  can also generate an implicit query based on a current user context or state, which can be determined by the query system  from contextual real time events. Based on the query, the query system  can locate relevant information in the data store  and provide a result set. In one embodiment, the result set comprises articles associated with the client applications  or client articles. Client articles stored in the article index  include articles associated with the user or client device , such as the word processing documents, previously viewed or any other article associated with the client device or user . In another embodiment, the result set also comprises articles located on the network  or network articles located by a search engine on a server device. Network articles include articles located on the network  not necessarily previously viewed or otherwise referenced by the user , such as web pages not previously viewed by the user ","Articles stored in the messaging index  include one or more types of messages, such as a user's emails, chat messages, and instant messaging messages. Each time a message is received, sent, modified, printed, or otherwise accessed, a record is stored in the messaging index . This information can later be searched to identify messages that should be displayed in the user interface.","An embodiment of the present invention may also store message threads in the messaging index . In such an embodiment, messages are related together by various attributes, including, for example, the sender, recipient, date\/time sent and received, the subject, the content, or any other attribute of the message. The related messages can then be retrieved as a thread, which may be treated as a document by the display processor .","The formatter  can receive the search result set from the query system  of the search engine  and can format the results for output to a display processor . In one embodiment, the formatter  formats the results in XML or HTML. The display processor  can be contained in memory  and can control the display of the result set on a display device associated with the client device . The display processor  may comprise various components. For example, in one embodiment, the display processor  comprises a hypertext transfer protocol (HTTP) server that receives requests for information and responds by constructing and transmitting hypertext markup language (HTML) pages. In one such embodiment, the HTTP server comprises a scaled-down version of the Apache Web server.","Through the client devices -, users -can communicate over the network , with each other and with other systems and devices coupled to the network . As shown in , a server device  may also be coupled to the network . In the embodiment shown, the search engine  can transmit a search query comprised of an explicit or implicit query or both to the server device . The user can also enter a search query in a search engine interface, which can be transmitted to the server device . In another embodiment, the query signal may instead be sent to a proxy server (not shown), which then transmits the query signal to server device . Other configurations are also possible.","The server device  shown includes a server executing a search engine application program, such as the Google\u2122 search engine. Similar to the client devices -, the server device  shown includes a processor  coupled to a computer-readable memory . Server device , depicted as a single computer system, may be implemented as a network of computer processors. Examples of a server device  are servers, mainframe computers, networked computers, a processor-based device, and similar types of systems and devices. The server processor  can be any of a number of computer processors, such as processors from Intel Corporation of Santa Clara, Calif. and Motorola Corporation of Schaumburg, Ill.","Memory  contains the search engine application program, also known as a search engine . The search engine  locates relevant information in response to a search query from a client device . The search engine  then provides the result set to the client device via the network . The result set comprises one or more article identifiers. An article identifier may be, for example, a uniform resource locator (URL), a file name, a link, an icon, a path for a local file, or anything else that identifies an article. In the embodiment shown, an article identifier comprises a URL associated with an article.","In the embodiment shown, the server device , or related device, has previously performed a crawl of the network  to locate articles, such as web pages, stored at other devices or systems connected to the network , and indexed the articles in memory  or on another data storage device.","It should be noted that alternative embodiments of the present invention may comprise systems having different architecture than that which is shown in connection with the exemplary embodiment shown in . For example, in one embodiment, the server device  may comprise a single physical or logical server, or there may be no server. The system  shown in  is merely exemplary, and is used to explain the exemplary methods shown in , , and .","Various methods may be implemented in the environment shown in  and other environments according to the present invention. In one embodiment of the present invention, the display processor  receives a first result set comprising one or more article identifiers from a messaging index in response to a search query. For example, in one embodiment, if a user is editing a document and types the term \u201claptop\u201d into the title, the display processor  receives a result set from the messaging index that includes article identifiers in the messaging index  that are relevant, as determined by the search engine , to the term \u201claptop.\u201d The article identifiers may include links to email threads, chat messages, instant messages, and other messaging articles.","Next, in this embodiment, the display processor  receives a second result set comprising one or more article identifiers from an article index in response to the search query. For example, the display processor receives a result set that includes article identifiers in the article index that are relevant, as determined by the search engine , to the term \u201claptop.\u201d The article index  may include, for example, an index of word-processor documents, and the article identifiers may include links to the documents.","In this embodiment, the display processor  next generates a user interface comprising the first article identifier and the second article identifier. The display processor may, for example, generate a an HTML document or other document that may be viewed in a browser, the document including both the article identifiers from the messaging index and the article index so that the user can easily access either or both of the articles associated with the article identifiers.","The messaging index  may comprise at least one of a chat message identifier, an email message identifier, an instant message identifier, or other messaging article. The messaging index  may comprise article identifiers for any messaging-related articles. Indexes other than an article or messaging index may also be utilized.","In one embodiment, the search query that the search engine  executes against the indexes is a user context-dependent search query. The context in which the user is operating may be determined based on the client applications  that the user is executing, the content of the files on which the user is operating, or other activity or event occurring on the client . The user context may comprise, for example, a user action history comprising a plurality of user actions. Each user action comprises various parameters, including, for example, a date\/time parameter. For example, if the user prints a word-processing document multiple times in a short period of time, the queries against the messaging and article indexes may be related to the content of the document the user printed.","The queries against the messaging and article indexes may be created using a combination of user actions. For example, if the user prints a word-processing document and also highlights a selection of words within that document, the queries generated may be a combination of content from the entire printed document and the highlighted words.","The user interface may comprise a content display. The content display may be constructed as, for example, an HTML document, add-in, or horizontal or vertical toolbar. The display processor  generates the user interface with the articles identifiers. In one embodiment, the article identifiers comprise one or more of a title, URL, text snippet or thumbnail associated with the each article identifier. For example, in one embodiment, the display processor generates a user interface as an HTML document resembling a conventional search engine results page. In such an embodiment, each article identifier includes one or a combination of: a URL or path corresponding to the article, and a text snippet summarizing or otherwise associated with the article to which the article identifier refers.","One embodiment of the present invention provides a method for automatic construction and placement of the user interface. In one such embodiment, the display processor  receives a trigger to display a content display in a user interface, detects an area of the user interface comprising non-primary content, and creates a content display comprising an attribute associated with the area of the user interface comprising non-primary content. The attribute may comprise, for example, the size, height, width, position, transparency, or other attribute of the content display. The display processor  may alter the size or position of the content display when other elements in the display are moved or resized.","In one embodiment, automatically sizing and positioning the content display may comprise resizing existing windows in the display to create an area in which to create the content display. For example, if a client application is currently maximized, the display processor  may call that applications window restore command to clear space somewhere on the display for the content window. Alternatively, the display processor  may explicitly set position and size parameters for the display of a client application to make room for the content display.","Various methods of examining the physical layout of the display may be utilized by an embodiment of the present invention. For example, in one embodiment, the display processor identifies changes in pixel brightness and\/or color as an indicator of where primary or non-primary content is displayed on the display. A large change in pixel brightness and\/or color indicates a transition between an area where content is located and one where no content is located. In one embodiment, the largest empty section at the top of a window is located near the title bar, menu bar, and any task bars. Once an embodiment identifies an area with content, it determines whether the content is primary content or non-primary content.","For example, in one embodiment of the present invention, a display processor  detects an area at the top of a user interface that includes only one small area of content in a large rectangular area. The display processor  queries the operating system using the position of a pixel with in the small area of content to determine what is located in the identified position. The operating system provides information in response that indicates to the display processor  that the content comprises an application icon. The display processor  concludes that the content is non-primary content according to rules in the program and\/or preferences provided by the user. Accordingly, the display processor  constructs a content display that fits within the large rectangular area comprising non-primary content. In one embodiment, the display processor  retrieves the position and size of all windows on the screen and calculates the areas of the screen that are not covered by any window.","One embodiment of the present invention provides methods and systems for reordering the results of searches. In one embodiment, the display processor  receives a request to refresh a first result set comprising a first plurality of article identifiers, receives a second result set comprising a second plurality of article identifiers, compares the first result set to the second result set, and sorts the second plurality of article identifiers in the second result set based at least in part on a sort order of the first plurality of article identifiers in the first result set. In one such embodiment, an article in the second result set is placed in the same position as that article appears in a first result set.","In one embodiment, the display processor  receives a request to refresh the first result set. In response, the display processor requests and receives a second result set comprising a plurality of article identifiers, identifies a first article identifier in the first plurality of article identifiers that is not in the second plurality of article identifiers, and identifies a second article identifier in the second plurality of article identifiers that is not in the first plurality of article identifiers, and replaces the first article identifier with the second article identifier in the first plurality of article identifiers.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 2","b":["132","202","112","120","112"],"i":["a ","a"]},"In response to receiving the query, the query system  executes the search query on a messaging index  stored in the data store () . The query system  then receives the result set from the messaging index . The messaging index may comprise information regarding, for example, chat messages, emails, and instant messages. The result set comprises one or more article identifiers and may comprise snippets or text summaries of the article with which the article identifier is associated.","The query system  then executes the search query on an article index stored in the data store () . The query system  receives the result set from the article index . The result set comprises one or more article identifiers that satisfy the search query. In the case of a file, the article identifier may be a fully qualified path. The query system  then ranks the article identifiers in each of the two result sets  (this may be done separately and then combined or combined and then ranked). The query system  may perform queries on additional indexes, such as an index comprising news articles or any other type of document or file that can be indexed. The query system  may also cause queries to be executed on indexes not stored on the client or in the data store . For example, in one embodiment, the query system  causes queries to be executed on the search engine .","In the embodiment shown, the query system  transmits the result sets to the display processor , which combines the result sets . The display processor  may combine the result sets into one comprehensive list or may combine the result sets into one interface (shown together or separately). In one embodiment in which the result sets are combined into one interface but not into an integrated list, the display processor  creates tabs on the user interface into which the article identifiers are arranged. The tabs may include, for example, an email tab, an instant message tab, a web page tab, a news tab, and\/or a file tab.","In the embodiment shown, the display processor  next constructs a content display comprising the two result sets . The content display may comprise text describing the article identifier, a thumbnail image of the article, or any other information that would be useful to the user in identifying a potentially relevant result. The display processor then causes the content display to be displayed . The functions described may be performed by other components of an embodiment of the present invention. For example, in one embodiment, the query system  and display processor  are combined, and the combined component performs functions to facilitate execution of queries, ranking of result sets, and causing the display of the combined results. Other configurations are also possible.","The content display that the display processor  constructs in step  of  may take of a number of forms. For example, in one embodiment, the display processor  constructs an HTML document comprising various sections, each section comprising results from a different index. In another embodiment, the information from various indexes is combined into a single, integrated listing. The display may be periodically updated (e.g., daily) or updated substantially continuously.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 3","FIG. 2"],"b":["301","301","301"]},"The first section  comprises a result set comprising email threads retrieved from a messaging index . The article identifiers are retrieved from the messaging index  as described in relation to steps  and  in . In the embodiment shown, the email thread comprises a series of related messages. The messages may be related by sender, recipient, subject, and\/or content of the message, or based on other attributes of the message. Taken together, the email messages form a thread, a type of article or document that the user can access. In another embodiment, messages may be shown in this section; the messages may or may not be email messages or threads.","The result set in the shown in the first section  also comprises chat messages or chat message threads retrieved from a messaging index . The email and chat messages may be retrieved simultaneously by the search engine  or may be retrieved separately by repeating steps  and  for each section type.","The second section comprises a result set or a portion of a result containing results from the Internet . In the process illustrated in , the Internet represents a remote article index. In another embodiment, the Internet represents results from an index of pages viewed in the past as described in relation to steps  and .","The second section  of the embodiment shown also comprises a result set comprising files retrieved from an article index . The search engine  may retrieve the article identifiers associated with both the files and other articles in a single step. Alternatively, the search engine  may execute steps  and  repeatedly to retrieve various types of articles.","The two sections ,  and the layout of the display shown in  are merely exemplary of how an HTML document may be constructed according to the present invention. For example, a user may select different, fewer, or additional categories to display on the HTML document. In one embodiment, the user accesses an administration page to vary the layout of the HTML document shown in  as desired.","An embodiment of the present invention may construct the content display as a part of another application. For example, many products that execute within the Microsoft\u00ae Windows environment include a toolbar. These applications often include the capability to support add-ins.  is a screen shot illustrating a content display  according to one embodiment of the present invention constructed as a Microsoft\u00ae Word toolbar.","In the embodiment shown, the display processor  constructs a content display  that appears as an add-in in Microsoft\u00ae Word. The display processor executes the steps in  to retrieve article identifiers from the messaging index  according to steps  and , and article identifiers from the article index  according to steps  and . As described in relation to , the steps shown in  may be executed in various orders and any of the steps may be repeated alone or in combination with other steps to generate the content display shown in . The display may appear as an add-in to other applications, such as Microsoft\u00ae Excel, Microsoft\u00ae Powerpoint, Microsoft\u00ae Internet Explorer, or other products.","The content display  shown is a vertical representation of the various data. The content display  appears between the last toolbar  and the document displayed . The content display  may be displayed in various sections of the application window in embodiments of the present invention.","In the embodiment shown, the content display  appears as a standard add-in. In another embodiment, the display processor  constructs the content display  so that it appears similar to the one shown in . However, rather than causing the display to be displayed as an add-in, the display processor  causes the content display  to be shown in the same spot as an add-in would normally be shown, displacing any portion of the application that would be obscured by the content display . For example, in one application that does not support add-ins, the display processor determines the position of the title bar  and of the content screen of the application, section  in the embodiment shown, and causes the content display  to be shown between the two sections. The display processor  automatically repositions the content display  when the application is moved or resized. In another embodiment, the content display may overlay a region of the current window or screen, without displacing any content. For example, the content display may appear in the titlebar, menubar, or toolbar region of the window where no content is displayed.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 5","FIG. 2","FIG. 2","FIG. 2","FIG. 2"],"b":["502","142","143","502","504","112","112","502","204","210"],"i":["a ","a "]},"Although in the embodiment shown in  the display processor  constructs the title bar  to be displayed horizontally, in one embodiment of the present invention, the display processor  constructs the title bar  so that it may be displayed vertically, e.g., along the right side of the display area on the screen. Such an embodiment may include vertical or horizontal tabs or may instead include sections for each of the types of data shown. The title bar  may be adjustable in size by the user, such that its width and height may be changed via dragging by the mouse or some other mechanism to be different from its original settings.","In one embodiment of the present invention, the display processor automatically constructs the user interface page based on the space available on the display screen. In one such embodiment, the display processor attempts to identify a section of the screen in which non-primary content is displayed. The display processor  then constructs the page to fit in the space.  illustrate one method to allow for such fit-to-space construction.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 6"},"In the embodiment shown in , a display  currently comprises two application windows , . The first window  comprises Application 1 (such as a word processor), and the second window  comprises Application 2 (such as an Internet browser). The display  also comprises a menu bar . These areas , , and  have content (such as text and graphics) present that the user uses in interacting with the applications (such as pull-down menus, menu bars, and other items associated with conventional word processors and Internet browsers).","The display  includes a number of areas in which non-primary content is present. The largest of these areas is at the top of the screen . In one embodiment, the display processor  is able to construct a content display to fit in the area  that does not include any content. The non-primary area mentioned  comprises an area in which only the desktop of an operating system is seen (e.g., icons and background graphics). In other embodiments, other types of non-primary area are present in this area .","It should be noted that, in certain embodiments, the operational definition of non-primary area may be changed by the user, by an application, or otherwise. For example, the user may initially select that only areas in which only the desktop is viewable is considered a non-primary area for a certain time or use. The user may later select that, in addition to such an area, areas that contain content that has not been accessed by the user within a pre-defined time period (e.g., one hour) is considered non-primary area. Other adjustments may be made, and these are meant to be only illustrative.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 7","FIG. 6"],"b":["128","702","702","610"]},"In one embodiment of the present invention, the display processor  uses the following method to locate a position to display a content window overlaying the titlebar\/menubar\/taskbars of an application window:","whenever there is a change in the size or position of the currently focused window, or a change in the content of the window near a content display, or the user switches to a different window then the following analysis is performed to locate the position to display the content window: If the window is large enough to accommodate the minimize sized content display then the display processor retrieves an image of the focused window, including the titlebar\/menubar\/taskbar region.","For each row in the retrieved image from the top to the maximum height of the content display or until the row cannot accommodate a content display of the minimum width, perform the following: find the widest region where the change in pixel brightness and\/or color over a specified range (typically a small number of pixels) does not exceed a threshold. For example, in one such embodiment, the threshold is equal to the sum of the absolute values of the differences between the R, G, and B values of the pixels. Next, analyze the widest regions from each line to find the best size of the content display. Typically, the higher the window is, the less wide it can be as since toolbars often include more content on toolbars at lower points.","In one embodiment, the content display remains rectangular. In such an embodiment, the content display is either narrow and tall or shorter and allowing it to be wider. A heuristic may be used to choose the best size.","In one embodiment of the present invention, the display processor  consults a list of preferences or pre-defined areas that affect the display of the content window. For example, in one embodiment, the display processor  accesses a list of windows to never show the content display on (blacklist), a list of windows to show the content display on (whitelist), and\/or a list of windows to limit the height of the content display to specified values. The display processor  may rely on other attributes of the display to determine how to create the content display window. For example, in one embodiment, the display processor  identifies entry fields in dialog boxes and avoids having the content display overlap these fields.",{"@attributes":{"id":"p-0083","num":"0082"},"figref":["FIG. 8","FIGS. 3"],"b":["128","4","5","802","128","804","128","806"]},"The display processor  may detect an area with non-primary content in a variety of ways. For example, in one embodiment, the display processor  evaluates the color and\/or brightness of the pixels within the display to detect changes. In one such embodiment, the display processor  determines the color of the background and then evaluates pixels to detect pixels that comprise a color different than the background color. If the display processor  detects such a pixel, it concludes that content exists in that pixel. If the color is the same as the background, the display processor  detects an absence of content.","If the display processor  detects content, then the display processor  must further determine whether the content is primary content. The display processor  may determine whether content is primary by locating a pixel with content and then using the position of the pixel to determine what type of content is displayed at that position. For example, the display processor  may make an operating system call to determine which application or applications are displaying content at the position. The display processor  then uses the supplied information to make a determination of whether or not the content is primary.","In another embodiment, the display processor  evaluates the color and\/or brightness intensity of various pixels. Large or sudden changes in intensity between pixels or over a range covering a specified size or number of pixels indicate that content may be present in the more intense pixel. For example, there are often large changes in color and\/or intensity at the edges of characters. The background may change smoothly to show a shaded appearance\u2014by looking for large or sudden changes we are able to ignore relatively slow gradual changes as typical for backgrounds. Anti-aliasing may cause the color and\/or intensity to vary smoothly at the edge of items like characters, in which case it may be necessary to analyze the change over a range of a specified size or number of pixels (typically a small size or number of pixels).","The display processor  evaluates the changes in color or brightness to determine the outer perimeter of each of the elements displayed on the screen. In this way, the display processor  is able to determine the areas with no or with non-primary content.","In other embodiments, the display processor  may evaluate the length of time since functionality in an area has been used by the user in order to determine whether an area is primary or non-primary. In still other embodiments, the display processor  may identify areas containing only background (such as the computer desktop). In still further embodiments, the display processor  may identify non-primary areas by designations provided by a user of the computer. These are only examples of some of the ways to identify primary and\/or non-primary areas in accordance with the present invention, and many other ways may be used. For example, in yet another embodiment, the display processor  evaluates both the color and intensity of pixels to identify primary areas.","Referring still to , display processor  determines whether or not an area exists with non-primary content . In the embodiment shown, if no such area exists, the display processor  resizes the existing application windows comprising primary content to create an area with non-primary content . For example, the display processor  may execute an applications window restore method to cause the application to be non-maximized. Once the area with non-primary content is detected or created, the display processor  creates the content display, an attribute of the content display, such as the height, width, position, transparency (e.g., displayed in a way so that objects behind the content display, such as icons, can be seen by the user), or other attribute of the content display, the attribute associated with the size of the area of the display with non-primary content . The display processor  then causes the content display to be displayed in the area comprising non-primary content .","If the display processor  detects multiple areas with non-primary content, the display processor selects the most appropriate area in which to create the content display. The appropriateness of an area may be determined based on a variety of factors. For example, in one embodiment, the display processor  selects the largest area with no content in which to create the content display. In another embodiment, the display processor  selects an area on the right or left side of the computer display to construct the content display. The relative appropriateness of various areas may be determined when the display processor is programmed or may be based on user-supplied preferences. For example, a user may indicate a preference for a content display arranged vertically on the right-hand side of the screen.","The display processor  may also vary the parameters of the displayed content depending on the available space. For example, in one embodiment, the display processor causes the content display to be semi-transparent so that a user can see an application executing behind the content window.","The computer display  shown in  provides an illustrative display on which the process shown in  may operate. The display processor  first identifies the layout of the screen and is able to determine the perimeter of the Application 1 window , the Application 2 window , and the toolbar . Based on the analysis, the display processor determines that the top section of the screen has an area with non-primary content . The display processor  then constructs a content display , the height, width, and position of the content display  based at least in part on the size and dimensions of the area with non-primary content .","The information displayed in the content display  of  may be generated in various ways in embodiments of the present invention. For example, in one embodiment, the information in the content display  is generated according to the method shown in . Article identifiers from the messaging index  and from the article index  are displayed in the content display . The number of articles identifiers displayed and the layout of the sections of the content display  may vary according to the size of the content display  that is constructed. In one embodiment, the number of article identifiers displayed and the layout of the article identifiers within the content display  is affected by both the size of the content display  and by previously supplied user preferences.","In one embodiment of the present invention, the content of the content display may be refreshed periodically. Refreshing may occur substantially continuously or may be performed after a period of inactivity, e.g., ten minutes. In order to provide an effective user interface to the user, the display processor  according to the present invention reorders the results displayed in the content display. For example, in one embodiment, the display processor  maintains a relatively consistent listing of the article identifiers as the list is refreshed.","One embodiment of the present invention reorders the results presented to the user based on the context of the content display.  is a flowchart illustrating a process for reordering a result set in one embodiment of the present invention. In the embodiment shown, the display processor  receives a request to refresh a result set displayed in a window . The result set comprises a plurality of article identifiers. In response, the display processor  issues a request for a new updated result set . The request may be sent to the search engine  on the client or the search engine  on the server device . The display processor receives a new result set in response to the query .","The display processor  compares the new result set to the first result set . For example, the display processor  may determine how many of the article identifiers in the second set are different from the article identifiers in the first set. The display processor may further determine the position of article identifiers that exist in both result sets. In the embodiment shown, the display processor sorts  the results returned in the new result set based at least in part on the order of the results shown in the first result set.","For example, if an article identifier exists in both result sets and is displayed in the third position in the currently-displayed result set and in the fourth position in the new result set, the display processor may move the article identifier to the third position in the new result set. In this way, the display processor maintains consistency for the user . Once the display processor  has sorted the new result set, the display processor  causes the new result set to be displayed .","In another embodiment of the present invention, the display processor  compares the two result sets and then replaces article identifiers in the currently displayed result set with article identifiers in the new result set. For example, if the third article identifier in the currently displayed list does not appear in the new result set, the display processor may replace the third article identifier with a newly-identified article identifier in the new result set. Such a process also helps to maintain consistency in the user interface for the user. In one embodiment, the display processor  is able to vary the rules for replacing results in the currently displayed result set based on actions by the user . For example, if the user does not click on or otherwise select or indicate an interest in a particular result after the result is displayed for a certain period of time, the display processor removes the result from the displayed set.","Embodiments of the present invention may incorporate additional features as well. For example, in one embodiment of the present invention, the display processor  supports a set of application programming interface (API) calls. In this embodiment, application running on the client , such as the web server, is able to call an API to display information according to an embodiment of the present invention, such as those exemplary methods set out above. The API may also provide the capability of formatting the result set in HTML, XML, or any other format required by the user.","One embodiment of the present invention comprises an administration page. The user clicks on an icon that provides access to the administration page. In one such embodiment, the user is able to set preferences for display, such as the minimum size of the window, the type of window to be displayed, the type of content to include, and various other parameters that may or may not relate to display, such as refresh rate, etc.","The foregoing description of the exemplary embodiments, including preferred embodiments, of the invention has been presented only for the purpose of illustration and description and is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Numerous modifications and adaptations thereof will be apparent to those skilled in the art without departing from the spirit and scope of the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":["These and other features, aspects, and advantages of the present invention are better understood when the following Detailed Description is read with reference to the accompanying drawings, wherein:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
