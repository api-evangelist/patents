---
title: Methods and apparatus for synchronizing virtual and physical mouse pointers on remote KVM systems
abstract: A method and system is disclosed for synchronizing the virtual and physical mouse cursors of a local computer and a remotely controlled computer. Video signals generated by a host computer are transmitted to a client computer in order to allow the user of a client computer to have a virtual presence on the host computer. However, the signals transmitted by the host computer may contain errors that can cause a physical mouse to lose synchronization with a virtual mouse. Therefore this virtual presence architecture uses USB protocol and human interface descriptors that support the movement of a mouse to an absolute position in order to synchronize a virtual mouse cursor with a physical mouse cursor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08881023&OS=08881023&RS=08881023
owner: Avocent Utah
number: 08881023
owner_city: Draper
owner_country: US
publication_date: 20040304
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims priority of U.S. Provisional Patent Application Ser. No. 60\/485,598 filed Jul. 7, 2003, which is hereby fully incorporated by reference.","This invention generally relates to the field of remote computer access. More specifically, an embodiment of the present invention relates to virtual presence architectures.","It is often the case that a host computer is located physically distant from its operator. Some products have been created to facilitate remote control of a computer using devices that remotely project the keyboard, video and mouse. These are typically called keyboard-video-mouse (KVM) devices. For example, a KVM Switch enables a single keyboard, mouse and video display to be shared by multiple computers. A KVM device enables a keyboard, mouse and video display to be viewed remotely, with typically several hundred feet of separation. Remote Control Software enables a computer to \u201ctake over\u201d a remote computer and use the local machine to provide keyboard and mouse input, and video output over a network. Additionally, there are specialized hardware components that interact with proprietary software to provide remote KVM functionality over a network.","Each of these approaches has disadvantages. More specifically, remote KVM systems generally employ relative movements of the mouse to keep the mouse in sync (e.g., move 5 pixels left from where you are). The use of the relative movements is common because real physical mice use relative movements. Since computer operating systems (OS's) are sometimes busy with other tasks, the mouse movement messages may be lost or skipped. Therefore, if a virtual pointer is maintained in a remote KVM system, it may no longer be in sync with the originating system. Both PS\/2 and USB mice send these same relative movements messages. Consequently, it is desirable to implement a mouse synchronization system for use with a remote KVM system that can synchronize mouse movements based on an absolute position.","The present invention, which may be implemented utilizing a general-purpose digital computer, in certain embodiments of the present invention, includes novel methods and apparatus to provide efficient, effective, and\/or flexible ability to provide mouse synchronization without requiring access to the internal state of the host.","In another embodiment of the present invention, existing local area network (LAN) infrastructure is utilized for remote control of host computers without requiring significant reconfiguration of their software and\/or hardware.","One embodiment of the present invention includes an architecture that provides remote control of a host computer over existing Internet protocol (IP) network infrastructure without requiring significant changes to the remote host, but allows deployment with different levels of intrusiveness (e.g., depending on the requirements of the application). In another embodiment of the present invention, the implementation of the architecture requires no software changes to the remote host. In a further embodiment of the present invention, a separate device with its own power and case is utilized (e.g., a stand-alone device), such as a peripheral component interconnect (PCI) card.","In a further embodiment of the invention, the mouse movements on the host computer and the mouse movements on the remote computer may be synchronized. Human interface descriptors (HIDs), operating on universal serial bus (USB) protocol, can be used to move a cursor on a remote host computer to an absolute position. Consequently, the local client computer can use this information to maintain synchronization with its cursor.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1","b":["100","102","104","106","108","110","112","114","118","116","100"]},"The system also comprises system bus , or similar architecture through which some or all of the components shown communicate with each other. Additionally, those with ordinary skill in the art will recognize that computer system  can include an IBM-compatible personal computer utilizing an Intel microprocessor, or any other type of computer. Additionally, instead of a single processor, two or more processors can be utilized to provide faster operations.","The network interface  provides communication capability with other computer systems on the same local network, on a different network connected via modems and the like to the present network, or to other computers across the Internet. In various embodiments, the network interface  can be implemented in Ethernet, Fast Ethernet, Gigabit Ethernet, wide-area network (WAN), leased line (such as T1, T3, optical carrier 3 (OC3), and the like), digital subscriber line (DSL and its varieties, such as high bit-rate DSL (HDSL), integrated services digital network DSL (IDSL) and the like), time division multiplexing (TDM), asynchronous transfer mode (ATM), satellite, cable modem, Universal Serial Bus (USB) and FireWire.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},"Table 1 below provides a glossary of the terms used to describe the VPA architecture in accordance with some embodiments of the present invention (such as those discussed with respect to Figs. herein).",{"@attributes":{"id":"p-0019","num":"0018"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Glossary of Terms"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["TERM","GLOSSARY"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Capture","The process of digitizing and formatting data for"]},{"entry":[{},"processing."]},{"entry":["Decode","Decode: the process of converting data encoded, e.g., by a"]},{"entry":[{},"virtual presence encoder for a device into a form"]},{"entry":[{},"suitable for transfer to that device."]},{"entry":["Encode","The process of converting signals captured for a device into"]},{"entry":[{},"a form suitable for transfer to, e.g. a virtual presence"]},{"entry":[{},"decoder."]},{"entry":["Host","The remote computer that is to be controlled form the local"]},{"entry":[{},"client."]},{"entry":["NIC","Network interface connection, i.e., the device that provides"]},{"entry":[{},"network connectivity."]},{"entry":["VPC","Virtual presence client; the subsystem that captures"]},{"entry":[{},"keyboard, mouse and other local device inputs for"]},{"entry":[{},"transmission to the VPS, and decodes the video display and"]},{"entry":[{},"other outputs from the VPS"]},{"entry":["VPP","Virtual presence protocol; the syntax and semantics of the"]},{"entry":[{},"messages exchanged by the VPS and the VPC. The VPP"]},{"entry":[{},"may be implemented on transmission control protocol"]},{"entry":[{},"(TCP) and user datagram protocol (UDP) over IP in an"]},{"entry":[{},"embodiment of the present invention"]},{"entry":["VPS","Virtual presence server; the subsystem that captures the"]},{"entry":[{},"hardware outputs of the host, encodes them for transmission"]},{"entry":[{},"to the VPC, and decodes the keyboard, mouse and other"]},{"entry":[{},"device inputs transmitted by the VPC."]},{"entry":["Message","The entity that receives messages and tags them as being a"]},{"entry":["Multiplexer","particular type, then delivers them to be compressed and"]},{"entry":[{},"optionally encrypted."]},{"entry":["Message","The entity that takes decrypted and decompressed data from"]},{"entry":["De-","the stream and delivers it to the receiver registered to get"]},{"entry":["multiplexer","that message type."]},{"entry":["Frame","Memory where the digital image of the screen is stored; in"]},{"entry":["Buffer","an embodiment of the present invention, it consists of 16 bit"]},{"entry":[{},"pixels with 5 bits each for Red, Green and Blue intensity."]},{"entry":["Tile","256 pixel area of the frame buffer treated as a unity by the"]},{"entry":[{},"video subsystem in accordance with an embodiment of the"]},{"entry":[{},"present invention."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"In , the VPA  includes a Virtual Presence Server (VPS)  co-located with the remote host  and a Virtual Presence Client (VPC)  at a location remote from the VPS. The host  interacts with the devices connected to the VPC (such as video display , keyboard , mouse , and other device ) as if they were connected directly to host . In one embodiment of the present invention, an advantage of this approach is the flexibility in the design and deployment of the VPS .",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2","b":["212","214","216","208","208","212","214","216","206","202","204","202","216","204","208","206","208","210","216"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3","b":["305","348","350","352","354","362","370","356","364","372","358","366","374","360","368","376","380","304","382","384","386","344","304"]},"Once in VPS , the signals are decrypted and decompressed in items  and , respectively, if required. The input signals are then demultiplexed in  in order to separate the signals for decoding in items , , and . Then the keyboard, mouse and other device signals are sent to the host , where the commands are executed internally. Following the execution of the keyboard, mouse and other device inputs, two hardware output signals are transmitted back to VPS , the video output signal and the other device output signal. The video output signal enters Video Logic element , which captures, compares, analyzes and encodes the output in steps -, respectively. The other device output signal is sent to Other Device Logic element , where it is captured, processed and encoded in steps -, respectively. The encoded video and other device outputs are then multiplexed in step , and can optionally be compressed and\/or encrypted in steps  and , respectively.","The multiplexed output signal is then transported in step  over IP Network  to the VPC . Once the output signal is back in the VPC, it is decrypted and decompressed, if need be, in steps  and , respectively. The output signal is then demultiplexed into separate video and other device signals in step . Following that, the two signals are decoded in steps  and , and then sent to video display  and other device , where the outputs are displayed to the remote user. For example, the video output signal of host  is displayed on video display , and the other device output signal is executed on other device .","In another embodiment of the present invention, the devices in the VPA can be characterized by their data flow requirements. For example, the video logic system  on the VPS captures video frames, does delta analysis, and encodes the stream for the VPC to decode and display. This does not require any return information in accordance with an embodiment of the present invention. Similarly, the mouse and keyboard subsystems may simply transmit the stream from their corresponding devices on the VPC for transmission to the VPS. On the other hand, special devices such as USB may require bi-directional transfers which are treated as independent directional flows by the architecture.","In a further embodiment of the present invention, the VPS captures video and transmits it to the VPC. For example, the VPS receives the mouse and keyboard data streams from the VPC and decodes them into signals for the Host. The VPS manages input and output data streams for other devices and simulates the local interactions necessary to provide remote functionality.","In accordance with another embodiment of the present invention, the keyboard and mouse may both be simple byte streams. Therefore, there would be little processing necessary to decode the streams. However, there is significant processing to maintain synchronization and duplicate the semantics and timing of the streams so that the Host can properly maintain its states as if the devices were directly connected.","More specifically, in an embodiment of the present invention, the VPS keyboard subsystem relays the byte stream from the remote keyboard to the Host without any additional processing. In a further embodiment, the VPS mouse subsystem relays the byte stream from the remote mouse to the Host. This byte stream may include \u201cdelta\u201d messages (e.g. indicating change), which are interpreted by the Host relative to the current position of the cursor. Due to timing and other issues, the relative position of the cursor can get out of sync. Consequently, special processing in both the VPS and VPC can be used to mitigate this problem.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 4","FIG. 1"],"b":["400","402","404"]},"In an embodiment of the present invention, the VPS video logic may specifically benefit from the creation of custom hardware to support the process. In another embodiment of the present invention, a field-programmable gate-array (FPGA) may be utilized to implement the logic in hardware. Further information regarding an FPGA apparatus for a VPA is later described in detail.","For example, in one embodiment, the video may be first captured into one of two frame buffers that alternate between being the current frame buffer  and the last frame buffer . In the present embodiment, the frame buffer is divided into \u201ctiles\u201d of 256 pixels. The Monochrome detection logic  analyzes each tile to see if its pixels are within a specified difference in color. If they are, then the Monochrome Map  corresponding to that tile receives a 1; otherwise, it receives a 0. The Difference Detection logic  compares each pixel in the Current frame buffer  with the corresponding pixel in the Last frame buffer . If more than a specified number of pixels have changed, then the bit corresponding to this tile is set to one in the Difference Map ; otherwise it is set to zero.","In accordance with another embodiment of the present invention, the video encoder  then processes the two maps minimizing the data transmitted to indicate which tiles are changed, and sending a \u201craw\u201d tile or a \u201cmonochrome\u201d tile or a \u201cno change\u201d tile, and using, for example, run-length encoding to eliminate duplicates. The encoded stream is then passed to the message delivery subsystem  for optional compression and encryption, and then transmission to the VPC .","It is envisioned that other devices may be remotely connected to the host using a similar architecture. For example, a USB device, which provides a serial connection to deliver a stream of bytes between two entities. USB devices have certain timing and signaling characteristics that are required for their function. Additionally, because USB is bi-directional, a complete encode and decode subsystem may be implemented for both the VPS and VPC.","Moreover, the VPS may implement the logic necessary to emulate the USB device for the Host. The VPC may implement the logic necessary to emulate the Host for the USB device. This may require buffering of the byte stream on both ends and emulating the timing characteristics required. This may also require special processing, similar to the video subsystem, depending on the particular device. In particular, new digital display devices, such as liquid crystal displays (LCDs) are replacing traditional cathode ray tubes (CRTs) in many applications, and are connected using USB technology.","In a further embodiment of the present invention, the VPC  captures keyboard and mouse data streams, encodes them, and transmits the streams to the VPS . The VPC  later receives an encoded video stream, decodes it in step , and then processes the stream to remove encoding artifacts in step . The VPC then transfers the image to its own display, mapping the pixel image as needed. In particular, because the mouse is used as a pointing device and its motion is translated to a cursor on the video image, special processing may be utilized to keep the VPC cursor synchronized with the Host cursor.","Moreover, since the VPS may have no access to information about the internal state of the host (e.g., if the host operating system does not operate in a deterministic manner on the given inputs), the host state may become out of sync with the VPC. In particular, Microsoft Windows operating systems periodically ignore mouse moves, which can cause a significant problem.","In one embodiment of the present invention, the USB protocol is utilized to provide movement of the mouse to an absolute position. In a further embodiment of the present invention, human interface descriptors (HIDs) are utilized, which can define many different types of devices, some of which support moving a pointer to an absolute position (e.g., move to coordinates x543, y234). A PC tablet, for example, would use one of these descriptors supporting the movement of a pointer to an absolute position. If a remote KVM device uses one of these absolute descriptors, then it will not lose mouse sync and the physical and virtual mouse pointer will always be in sync. This eliminates the rather complex set of algorithms, which may be otherwise required to make up for lost messages and signals, and keep the points in sync.","There are several different operating systems that use USB, such as Windows, MAC, Solaris, and Linux. Although each supports USB, every operating system may not support a specific set of HIDs. HIDs can, for example, include, but are not limited to, PC Tablets. In accordance with various embodiments of the present invention, the remote KVM system can solve this problem in several ways. In one embodiment, testing may be done ahead of time to determine which HIDs are supported by each OS. For example, it could be tested and determined that Windows supports the use of a PS\/2 mouse. Then the device code may be written to ask which OS the host computer is using. Once this information is obtained, the USB channel can be initialized with the correct HIDs. Another method of automatically accomplishing this would be to try different HIDs and determine which ones work. This method would avoid the need to test different operating systems before the synchronization method is implemented. Additionally, this would allow for the synchronization method to be used on operating systems that are not currently available. However, in each of the aforementioned methods, the logical and actual host mouse position can be synchronized transparently, without the need for operator intervention.","In another embodiment of the present invention, the VPC encodes the byte stream from the local keyboard and delivers it to the message subsystem, which in turn optionally compresses and encrypts the stream. The byte stream is then delivered to the VPS. Keyboard processing is envisioned to be a simple direct transfer with no feedback between the VPS and VPC, in accordance with an embodiment of the present invention.","In a further embodiment of the present invention, the VPC encodes the byte stream from the local mouse and delivers it to the message subsystem, which in turn optionally compresses and encrypts the stream, and then delivers it to the VPS. The encoding consists of aggregating mouse move messages and transmitting them. Additional processing may be performed by the mouse subsystem to keep the cursors synchronized.","In another embodiment of the present invention, the VPC receives an encoded video stream from the VPS. The VPC decodes the stream into a working buffer, which it then processes to remove artifacts of the encoding algorithm used. Then the working buffer is transmitted to the actual display buffer on the VPC, which the video hardware displays on the local display device.","It is envisioned that the architecture discussed herein may be implemented in many different ways. In various embodiments of the present invention, the Virtual Presence Architecture may be implemented utilizing one or more different techniques. For example, a heavily pipelined application specific integrated circuit (ASIC) or FPGA to create the Tile Map and the Monochrome Map may be used. Also, when compressing and sending large data blocks, they may be split up, so they overlap (for example: compress some data while sending some data. Further, DIB Section application programming interfaces (API's) on Windows, or DirectX may be used. Additionally, to enhance compression, the extents of the changed area on the display can be detected and only info for that area can be sent. Also, the client may start the request for a next update area before it processes a current area, or the server may automatically prepare the next update area. Further, if there is more than one Monochrome or No Change tile, they may be stacked together and sent as one count. Speed can also be increased by overlapping as many operations as possible that can happen in parallel and, for example, blending the edges with a surrounding area when painting the monochrome tile on the client. Further, for slower links such as Dial-up or DSL, the packet turn around time can be relatively long, so one can modify any transport used to send long streams of packets and not spend time waiting for acknowledgements. Also, a compression function can be picked that is balanced in time with the transport time (for example, one may avoid spending more time compressing than the bandwidth of the transport may easily handle). Also, the client code can be tuned to the native OS and CPU for best performance. Finally, for very slow transports, extra time can be spent to break up tiles into subsections, and reduce data (e.g., blend groups or pixels into one, or reduce to 8-bit color instead of 32-bit color, and the like).","The foregoing description has been directed to specific exemplary embodiments of the present invention. It will be apparent to those with ordinary skill in the art that modifications may be made to the described embodiments of the present invention, with the attainment of all or some of the advantages. For example, the techniques of the present invention may be utilized for provision of remote situations, gaming and the like. Therefore, it is the object of the appended claims to cover all such variations and modifications as come within the spirit and scope of the invention."],"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
