---
title: Edge detection based on variable-length codes of block coded video
abstract: Edges are detected in block coded video by a threshold comparison upon the lengths of variable-length codes used for encoding the differential DC coefficients of the pixel blocks. A thinning filter compares the code lengths of the differential DC coefficients of adjacent blocks in order to retain the edge indications of more significant edges and to exclude the edge indications of less significant edges. The edge indications can be split into substantially independent channels for luminance or chrominance, for edges having positive or negative horizontal gradient components, and for edges having positive or negative vertical gradient components. The edge indications for successive frames in an MPEG sequence are compared to each other in various ways in order to detect scene changes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07054367&OS=07054367&RS=07054367
owner: EMC Corporation
number: 07054367
owner_city: Hopkinton
owner_country: US
publication_date: 20011231
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["1. Field of the Invention","The present invention relates to processing of compressed visual data, and in particular the processing and storage of compressed visual data for playing, transmission, or editing of an MPEG data stream.","2. Background Art","It has become common practice to compress audio\/visual data in order to reduce the capacity and bandwidth requirements for storage and transmission. Some of the most popular audio\/video compression techniques are defined by the MPEG family of standards. MPEG is an acronym for the Moving Picture Experts Group, which was set up by the International Standards Organization (ISO) to work on the compression of audio\/visual information. MPEG provides a number of different variations (MPEG-1, MPEG-2, etc.) to suit different bandwidth and quality constraints. MPEG-2, for example, is especially suited to the storage and transmission of broadcast quality television programs.","For the video data, MPEG provides a high degree of compression (up to 200:1) by transforming 8\u00d78 blocks of pixels into a set of discrete cosine transform (DCT) coefficients, quantizing and encoding the coefficients, and using motion compensation techniques to encode most video frames as predictions from or between other frames. In particular, the encoded MPEG video stream is comprised of a series of groups of pictures (GOPs), and each GOP begins with an independently encoded (intra) I-frame and may include one or more following P-frames and B-frames. Each I-frame can be decoded without information from any preceding and\/or following frame. Decoding of a P-frame in general requires information from a preceding (I or P) frame in the same GOP. Decoding of a B-frame in general requires information both from a preceding (I or P) frame in the previous or the same GOP and a following (I or P) frame in the same GOP.","The MPEG-2 standard is documented in ISO\/IEC International Standard (IS) 13818-1, \u201cInformation Technology-Generic Coding of Moving Pictures and Associated Audio Information: Systems,\u201d ISO\/IEC IS 13818-2, \u201cInformation Technology-Generic Coding of Moving Pictures and Associated Audio Information: Video,\u201d and ISO\/IEC IS 13818-3, \u201cInformation Technology-Generic Coding of Moving Pictures and Associated Audio Information: Audio,\u201d which are incorporated herein by reference. A concise introduction to MPEG is given in \u201cA Guide to MPEG Fundamentals and Protocol Analysis (Including DVB and ATSC),\u201d Tektronix Inc., 1997, incorporated herein by reference.","One application of MPEG-2 coded video is video-on-demand (VOD). In a VOD application, the video is stored in a server as MPEG-2 coded video. The server streams MPEG-2 coded video in real time to a subscriber's decoder. The subscriber may operate a remote control providing well-known classical videocassette recorder (VCR) functions including play, stop, fast-forward, fast-reverse, pause, slow-forward and slow-reverse.","Another application of MPEG-2 coded video is an MPEG-2 VCR. In an MPEG-2 VCR application, the video is stored on a digital cassette in MPEG-2 coded video format. The MPEG-2 VCR streams MPEG-2 coded video in real time to an MPEG-2 decoder. The operator may operate a control providing well-known classical VCR functions including play, stop, fast-forward, fast-reverse, pause, slow-forward and slow-reverse.","A third application of MPEG-2 coded video is an MPEG-2 based video editing station. In an MPEG-2 based video editing station, all video materials are stored in MPEG-2 coded video format on tapes or disks. The operators may compile and edit the MPEG-2 coded video in order to create a final broadcast version.","In the above applications of MPEG-2 coded video, it would be desirable to provide an automatic method of detecting scene changes or identifying certain objects in the (visual) scenes. For example, in lieu of a conventional fast-forward function, the viewer could be provided with a function to skip forward to a next scene or skip back to a previous scene, or a function to successively display new scenes in a forward or reverse direction. Such scene display functions would omit the display of repetitious and therefore irrelevant video frames in order for the viewer to find more quickly a new scene from which regular speed forward-play may commence. The detection of a scene change, however, involves a comparison of video information between successive frames, and conventional methods for performing such a comparison are computationally intensive. For real-time detection of scene changes, there is a need for fast, computationally efficient, and reasonably successful detection of scene changes.","In accordance with a basic aspect of the invention, there is provided a method of detecting edges in a compressed video sequence. The compressed video sequence includes at least one frame of block encoded video data. The frame of block encoded video data includes variable-length codes for transform coefficients of blocks of pixels in the compressed video sequence. The transform coefficients include a respective DC coefficient for each of the blocks of pixels. Each respective DC coefficient for at least some of the blocks of pixels is encoded as a respective variable-length code having a length indicating a certain range of differences in DC coefficient values between adjacent ones of the blocks of pixels. The method includes decoding only the length of the respective variable-length code for the respective DC coefficient for each of at least some of the blocks of pixels in order to produce an indication of whether or not the compressed video sequence includes an edge associated with each of the at least some of the blocks of pixels, and performing a code length threshold comparison upon the length of the respective variable-length code for the respective DC coefficient for each of the at least some of the blocks of pixels for producing at least one respective bit indicating whether or not the compressed video sequence includes an edge associated with said each of the at least some of the blocks of pixels.","In accordance with another aspect, the invention provides a method of detecting edges in a compressed video sequence. The compressed video sequence includes at least one I-frame of MPEG video data. The I-frame of MPEG video data includes variable-length codes for DCT coefficients of 8\u00d78 pixel blocks in the image. The DCT coefficients include a respective DC coefficient for each of the 8\u00d78 pixel blocks. Each respective DC coefficient for at least some of the 8\u00d78 pixel blocks is encoded as a respective variable-length code having a length indicating a certain range of differences in DC coefficient values between adjacent ones of the 8\u00d78 pixel blocks. The method includes decoding only the length of the respective variable-length code for the respective DC coefficient for each of the at least some of the 8\u00d78 pixel blocks in order to produce an indication of whether or not the compressed video sequence includes an edge associated with each of the at least some of the 8\u00d78 pixel blocks, and performing a code length threshold comparison upon the length of the respective variable-length code for the respective DC coefficient for each of the at least some of the 8\u00d78 pixel blocks for producing at least one respective bit indicating whether or not the compressed video sequence includes an edge associated with each of the at least some of the 8\u00d78 pixel blocks.","In accordance with yet another aspect, the invention provides a method of detecting a scene change between I-frames of MPEG video data. The method includes detecting edges in images represented by the I-frames by decoding lengths of variable-length codes for DCT DC coefficients of 8\u00d78 pixel blocks in the I-frames and performing code length threshold comparisons upon the decoded code lengths to produce respective edge indications for each of the I-frames. The method further includes comparing the edge indications between the I-frames in order to signal a scene change when there is a significant change in the edge indications between the I-frames.","In accordance with a final aspect, the invention provides a method of detecting a scene change between I-frames of MPEG video data. Each of the I-frames includes a series of 8\u00d78 pixel blocks. The method includes detecting edges in images represented by the I-frames to produce a series of respective bits indicating whether or not an edge is associated with at least some of the 8\u00d78 pixel blocks. The method further includes filtering the series of the respective bits indicating whether or not an edge is associated with the at least some of the 8\u00d78 pixel blocks with a thinning filter in order to produce a filtered series of respective bits including more significant edge indications and excluding less significant edge indications. The method further includes operating a digital processor to process the filtered series of respective bits in order to signal a scene change when there is a significant change in features between the I-frames.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof have been shown by way of example in the drawings and will be described in detail. It should be understood, however, that it is not intended to limit the form of the invention to the particular forms shown, but on the contrary, the intention is to cover all modifications, equivalents, and alternatives falling within the scope of the invention as defined by the appended claims.","With reference to , there is shown a block diagram of a system for processing of an MPEG coded video stream to provide a scene change signal upon reaching a current video frame having features that are substantially different from features in the previous video frame. The features are comprised of edges. An edge detector  detects the edges occurring between and within blocks in each frame. A thinning filter  receives edge indications from the edge detector , and eliminates some of the less significant edge indications.","The thinning filter in effect refines the initial edge information and produces information that can be visualized as edge graph information. The amount of the thinning should be carefully selected, and a three-pixel deep thinning is preferred. The remaining edge indications are loaded into a selected one of two ping-pong (parallel) frame buffers  and .","In order to provide a scene change signal, a digital processor  accesses edge indications for a current frame in a selected one of the frame buffers and edge indications for a prior frame in the other one of the frame buffers. The digital processor  performs feature extraction and comparison and detects a scene change when there is a significant difference between features in the current frame and features in the previous frame. When a scene change is detected, the current frame is identified as a \u201ckey frame\u201d in the MPEG video sequence. If the MPEG video sequence is being read from or written to an MPEG file in data storage, the frames identified as \u201ckey frames\u201d could be marked as such in the data storage in a frame or GOP index table or in a metadata file associated with the MPEG file.","There are many known edge detection procedures having varying complexities. However, most are quite complex and computationally expensive. For real-time applications, the computation time is a major factor. In addition not all applications need edge detection results with high fidelity. For the edge detector  in the system of , there is a need for a fast and computationally efficient but reasonably successful edge detection procedure.","As will be further described below with reference to , the preferred edge detection procedure for the MPEG scene change detection system of  is based on the DC coefficients rather than all 64 coefficients within the DCT block. Therefore, the resolution of the edge detail image drops to \u215bin both horizontal and vertical directions for a resultant reduction to 1\/64 times in the resolution. Moreover, the preferred procedure also does not need to decode the actual value of the DC coefficient. Instead, the edge detection procedure is responsive to the length of the variable-length code used for the predictive encoding of the DC coefficient (dct_dc_differential).",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 2","FIG. 1"],"b":"31"},"The following Tables B-12 and B-13, reproduced from page 125 of the above-cited MPEG-2 standard document ISO\/IEC IS 13818-2, show how the respective differences between the DCT DC coefficients of neighboring 8\u00d78 pixel blocks of the same color component, luminance (Y) or chrominance (Cb or Cr), are variable-length coded. The tables are such that as the difference becomes larger in magnitude, more bits are required to code it. Therefore, the longer VLC codes indicate substantial differences, and the VLC code length can be compared to a threshold length to provide an indication of whether or not an edge with a contrast (gradient) stronger than a predefined value is present in the vicinity of the respective 8\u00d78 pixel bock in the image.",{"@attributes":{"id":"p-0051","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE B-12"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Variable length codes for dct_dc_size_luminance"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Variable length code","dct_dc_size_luminance"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"100","0"]},{"entry":[{},"00","1"]},{"entry":[{},"01","2"]},{"entry":[{},"101","3"]},{"entry":[{},"110","4"]},{"entry":[{},"1110","5"]},{"entry":[{},"1111 0","6"]},{"entry":[{},"1111 10","7"]},{"entry":[{},"1111 110","8"]},{"entry":[{},"1111 1110","9"]},{"entry":[{},"1111 1111 0","10"]},{"entry":[{},"1111 1111 1","11"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE B-13"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Variable length codes for dct_dc_size_chrominance"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Variable length code","dct_dc_size_chrominance"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"00","0"]},{"entry":[{},"01","1"]},{"entry":[{},"10","2"]},{"entry":[{},"110","3"]},{"entry":[{},"1110","4"]},{"entry":[{},"1111 0","5"]},{"entry":[{},"1111 10","6"]},{"entry":[{},"1111 110","7"]},{"entry":[{},"1111 1110","8"]},{"entry":[{},"1111 1111 0","9"]},{"entry":[{},"1111 1111 10","10"]},{"entry":[{},"1111 1111 11","11"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"To detect edges, the MPEG-2 video bit stream is only parsed and the dct_dc_size (luminance and\/or chrominance) variable length codes possibly simply inspected, to determine how many bits are used to code the difference between the DCT DC coefficient of the current block and the DCT DC coefficient of the previous block of the same color component (without a need for finding out what the current DC coefficient value is nor what the difference is). This code length is compared to a threshold length to produce a bit indicating the presence or absence of an edge, Case I: code length greater than or equal to the threshold, and Case II: code length less than the threshold, respectively. There is a trade-off in selecting the threshold length. If the threshold length is too large, only the strongest edges will be detected. If the threshold length is too small, some features will mistakenly be detected as edges, i.e., the false alarm rate will increase, especially in high frequency texture areas (for example, the hair in the standard MPEG video test sequence known as \u201cSusie\u201d). A mid-range of values about 7, 8, or 9 for the luminance or chrominance dct_dc_sizes is a good compromise.","The edge information obtained from the threshold comparison of step  may not be immediately suitable for many applications, because a very large change in the value of the DC coefficient may occur over a sequence of consecutive blocks. Such a change appears in the image as a single edge feature yet the threshold comparison may produce a sequence of consecutive edge indications. In such a case it is desired to confine the edge indication to the location of the maximum gradient, i.e., to the location of the maximum rate of color (luminance and\/or chrominance) change, which is at about the beginning of the block having the largest dct_dc_size value, or the longest code length. Therefore, in step , the edge indicating signal is applied to a thinning filter. The thinning filter compares the lengths of the dct_dc_size variable-length codes or alternatively the values of the dct_dc_size attributes for adjacent blocks. Such a thinning filter is further described below with reference to . In the case of two edges that are separated by about the width or height of one 8\u00d78 pixel block, such a thinning filter will also select the most significant of the two edges. The elimination of the less significant edge indications produces a frame of bits that is more representative of the distinctive features in the image.","The frame of bits output from the thinning filter can be further processed to produce auto-coincidence counts that are characteristics of the individual frames, and cross-coincidence counts that indicate the similarity between the contents of the current frame and the contents of other frames. The auto-coincidence counts and cross-coincidence counts are computed in a fashion similar to auto-correlation and cross-correlation. Correlation involves a summing of products, or in the case of binary signals, a summing of logic 1's produced by an exclusive-NOR function. In contrast, coincidence involves a summing of logic 1's produced by a logic AND function. In other words, what is significant for coincidence is a match of logic 1's.","One way of detecting a scene change is to compute a coincidence coefficient indicating a degree of coincidence between significant edges in a current frame and significant edges in a prior frame to within a distance of a small number of (8\u00d78 pixel) blocks, such as 0 or 1 block. In general the number of blocks can be determined on the basis of the temporal distance between the current and the prior frames and the amount of motion in the scene in that temporal vicinity. For example, in step , an auto-coincidence count (C) is computed for the current frame that indicates the number of significant edges that match between the current frame and a copy of it without any shift and between the current frame and its copies shifted by one block position in each of the two horizontal directions, the two vertical directions, and the four diagonal directions. A way of computing such an auto-coincidence count is described below with reference to . In step , a cross-coincidence count (C) is computed that indicates the number of significant edges that match between the current frame and the prior frame without any shift and between the current frame and the copies of the prior frame shifted by one block position in each of the two horizontal directions, the two vertical directions, and the four diagonal directions. A way of computing such a cross-coincidence count is described below with reference to .","In step , the coincidence coefficient is computed by dividing the cross-coincidence count (C) by the arithmetic mean of the auto-coincidence count (C) for the current frame and the auto-coincidence count (C) for the prior frame. In step , the coincidence coefficient is compared to at least one coincidence threshold to detect a scene change when the coincidence coefficient fails to reach the threshold. For example, the coincidence coefficient ranges from zero, indicating no coincidence between significant edges in the current and prior frames, to one, indicating complete coincidence between significant edges in the current and prior frames, and the coincidence threshold is about 0.3 to 0.7.","With reference to , there is shown logic for producing a luminance or chrominance edge signal. If the current block is the first block in the slice, then an inverter  and an AND gate  set the edge signal to a logic zero. Otherwise, a decoder  decodes the code length of the dct_dc_size_luminance or dct_dc_size_chrominance variable-length code. A comparator  compares the code length to a length threshold to produce the luminance or chrominance edge signal. The comparator  produces a logic 1 when the code length is equal to or greater than the length threshold.","For a color image, the logic of  produces three relatively independent edge signals, one for luminance and one for each of the two chrominance components Cb and Cr. In MPEG-2, the chrominance components of the video frames typically are sub-sampled with respect to luminance, so that there will be fewer chrominance edge indicating bits than luminance edge indicating bits. However, as shown in , it is possible to produce a combined luminance and chrominance edge signal in order to reduce the number of edge indicating bits. The logic of , for example, produces a number of combined luminance and chrominance edge indicating bits equal to the number of luminance edge indicating bits produced by the logic of . For this purpose, depending on the chrominance sub-sampling pattern, each dct_dc_size_chrominance code length from both Cb and Cr components may have to be repeatedly used with multiple dct_dc_size_luminance code lengths.","As shown in , an inverter  and an AND gate  set the luminance and chrominance edge signal to a logic zero for the first block in every slice. Otherwise, decoders ,  and  decode the code length of the dct_dc_size_luminance variable-length code and the code lengths of the dct_dc_size_chrominance variable-length codes for both Cb and Cr components. An adder  adds the luminance code length to the chrominance code lengths to compute a combined code length. A comparator  compares the combined code length to a threshold length to produce the combined luminance and chrominance edge signal. The comparator  produces a logic 1 when the combined code length is equal to or greater than the length threshold.","Although the logic in  combines the luminance and chrominance code lengths by a simple addition , it should be apparent that the luminance and chrominance code lengths could be combined in various other ways to produce a combined code length, such as by computing a weighted arithmetic mean, a geometric mean, a sum of the squares of the luminance and chrominance code lengths, or some other average or combination of the luminance and\/or chrominance code lengths.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 5","FIG. 4","FIG. 5"]},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 6","b":["71","72","73","74","75","76","77"]},"The filtered edge signal  is a logic one when an edge is indicated for the prior block and the prior block has a dct_dc_size code length that is not less than the dct_dc_size code length for the current block if an edge is indicated for the current block, and the prior block has a dct_dc_size code length that is not less than the dct_dc_size code length for the block just before the prior block if an edge is indicated for the block just before the prior block. An inverter  and an OR gate  provide a signal to the AND gate  indicating whether or not the prior block has a dct_dc_size code length that is not less than the dct_dc_size code length for the current block if an edge is indicated for the current block. An inverter , an OR gate , and a single-bit register  provide a signal to the AND gate  indicating whether or not the prior block has a dct_dc_size code length that is not less than the dct_dc_size code length for the block just before the prior block if an edge is indicated for the block just before the prior block.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 7","FIG. 6","FIG. 6","FIG. 6","FIG. 6","FIG. 8","FIG. 6","FIG. 6","FIG. 6","FIG. 6","FIG. 3","FIG. 4","FIG. 6"],"b":["91","92","75","92","77","93","82","105","105","82","94","94","71","71","95","75","95"]},"In , step , if the processor finds that the \u201cPRIOR_EDGE\u201d variable is not equal to zero, execution continues to step . In step , the processor compares the value of the variable \u201cCDLENG\u201d (representing the dct_dc_size code length for the current block) to the value of the variable \u201cPRIOR_CDLENG\u201d (representing the dct_dc_size code length for the prior block). If the comparison finds that \u201cCDLENG\u201d is greater than \u201cPRIOR_CDLENG,\u201d then execution branches from step  to step , to set the logical variable \u201cDAGTB\u201d to one. Otherwise, execution continues from step  to step , to set the logical variable \u201cDAGTB\u201d to zero. After steps  and , execution continues to step .","In step , execution continues to step  if the comparison finds that \u201cCDLENG\u201d is not less than \u201cPRIOR_CDLENG.\u201d In step , if the edge signal \u201cEDGE\u201d is equal to zero, then execution branches to step . Execution also branches to step , from step , if the comparison finds that \u201cCDLENG\u201d is less than \u201cPRIOR_CDLENG.\u201d In step , execution branches to step  if the logical variable \u201cQAGTB\u201d is equal to zero. Execution also continues from step  to step  if the edge signal \u201cEDGE\u201d is not equal to zero. In step , the output signal \u201cFILTERED_EDGE\u201d is set to zero, and execution continues to step  in . In step , if the logical variable \u201cQAGTB\u201d is not equal to zero, the execution branches to step . In step , the output signal \u201cFILTERED_EDGE\u201d is set to one, and execution continues to step  in . In step , the value of the logical variable \u201cQAGTB\u201d is set equal to the value of the logical variable \u201cDAGTB,\u201d and execution continues to step . In step , the variable \u201cPRIOR_CDLENG\u201d is set to the value of the variable \u201cCDLENG\u201d and execution continues to step . In step , the logical variable \u201cPRIOR_EDGE\u201d is set to the value of the variable \u201cEDGE\u201d. After step , the computations of the thinning filter are done for the processing of the \u201cEDGE\u201d and \u201cCDLENG\u201d signals for the current block along this alternate path of execution taken when \u201cPRIOR_EDGE\u201d does not compare equal to 0 at step .",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 9","FIG. 6","FIG. 9","FIG. 6","FIG. 9","FIG. 4"],"b":["101","112","71","82","113","114","105","113","105","113","105","113","113","114","113","114","114","102","114","109","111"]},{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 10","FIG. 9","FIG. 7","FIG. 11","FIG. 11","FIG. 8","FIG. 11","FIG. 9","FIG. 9","FIG. 9"],"b":["121","123","91","93","123","140","140","124","125","105","94","95","126","113","113","113","126"]},"In step  of , if the value of the logical variable \u201cPRIOR_EDGE\u201d is not equal to zero, then execution continues to step . In step , the processor computes the exclusive-OR of the sign of the dct_dc_luminance or dct_dc_chrominance (for Cb or Cr components) and the value of the logical variable \u201cPRIOR_SIGN,\u201d in order to implement the exclusive-OR gate  in . In step , if the exclusive-OR result is not equal to zero, execution branches to step  to set the logical variable \u201cDAGTB\u201d equal to 1. After step , execution continues to step  in . Steps  to  in  are similar to steps  to  in .","In step , if the exclusive-OR result is equal to zero, then execution continues to step . Steps , ,  and  are similar to steps  to  of . After steps  or , execution continues to step  in . Steps  to  are similar to steps  to  in .",{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 12","b":["151","152","151","152","151","152"]},"The circuitry of  successively compares selected bytes or words of data from the first frame buffer  to selected bytes or words of data from the second frame buffer . A first multiplexer  selects an addressed byte or word from the first frame buffer  and loads the addressed byte or word into a first (cyclic) shift register . A second multiplexer  selects an addressed byte or word from the second frame buffer  and loads the addressed byte or word into a second (cyclic) shift register . An array of AND gates  compare bits of a byte or word in the first shift register  to corresponding bits of a byte or word in the second shift register . A population counter  computes the number of logic 1's produced by the AND gates. The population counter , for example, is comprised of an array of full adders, or a memory programmed with a look-up table. An adder  adds the number from the population counter to the output of accumulator register  to accumulate a coincidence count.","The circuitry of  can be implemented by suitable programming of a general purpose digital processor. If the general purpose digital processor does not have a machine instruction providing a population count function, then the population count function can be implemented by a look-up table in random access memory. A 256 entry look-up table with 4 bits of storage per entry, is sufficient for computing the population count of a byte of data from the logical AND of a single byte in the first shift register  to a single byte in the second shift register . Following is a pseudo-code listing for the programming of a general-purpose digital processor for computing the auto-coincidence counts of step  in  or the cross-coincidence count of step  in . For the auto-coincidence count of step , FRAME is the same as FRAME. For the cross-coincidence count of step , FRAME is different from FRAME.",{"@attributes":{"id":"p-0075","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\/* FRAME HAS \u201cM\u201d ROWS AND \u201cN\u201d COLUMNS OF","*\/"]},{"entry":"8 \u00d7 8 BLOCKS"},{"entry":["\/* THE EDGE INDICATING BIT FOR THE FIRST BLOCK IN","*\/"]},{"entry":"EACH"},{"entry":["\/* ROW IS LEFT-JUSTIFIED TO THE LEAST SIGNIFICANT BIT","\/*"]},{"entry":["\/* POSITION. THE FRAME BUFFER BYTE CONTAINING THE","*\/"]},{"entry":["\/* EDGE INDICATING BIT FOR THE LAST BLOCK IN EACH","*\/"]},{"entry":"ROW"},{"entry":["\/* HAS ITS MOST SIGNIFICANT BITS ZERO-FILLED IF THE","*\/"]},{"entry":["\/* NUMBER OF BLOCKS PER ROW IS NOT A MULTIPLE OF","*\/"]},{"entry":["\/* EIGHT. THEREFORE THE FRAME BUFFER HAS \u201cM\u201d ROWS","*\/"]},{"entry":["\/* OF BYTES AND \u201cP\u201d COLUMNS OF BYTES WHERE \u201cP\u201d IS","*\/"]},{"entry":"\/* THE NUMBER OF BYTES PER ROW COMPUTED AS:\u2003\u2003*\/"},{"entry":["\/*","*\/"]},{"entry":["\/* P = INT(N\/8)","*\/"]},{"entry":["\/* IF (REM(N\/8).NE.0) THEN P = P + 1","*\/"]},{"entry":["\/* WHERE THE INT(.) FUNCTION RETURNS THE INTEGER","*\/"]},{"entry":"PART"},{"entry":["\/* OF ITS FLOATING POINT ARGUMENT AND THE","*\/"]},{"entry":"FUNCTION"},{"entry":["\/* REM(.) RETURNS THE REMAINDER OF ITS ARGUMENT","*\/"]},{"entry":["\/* WHICH IS IN THE FORM OF A RATIO OF INTEGERS.","*\/"]},{"entry":"\/* BEGIN COINCIDENCE COUNT CALCULATION \u2003\u2003*\/"},{"entry":"CLEAR ACCUMULATOR (OF SIZE (INT( LOG_2"},{"entry":"(9*M*P)) + 1) BITS)"},{"entry":"FOR I = 2 TO M\u22121"},{"entry":"FOR K = 1 TO 3"},{"entry":"CLEAR CYCLIC SHIFT_REGISTER_1 (OF SIZE 9 BITS)"},{"entry":"CLEAR CYCLIC SHIFT_REGISTER_2 (OF SIZE 9 BITS)"},{"entry":"FOR J = 1 TO P"},{"entry":"BYTE_ADDR_1 = ((I \u2212 1) * P) + J"},{"entry":"BYTE_ADDR_2 = ((I + K \u2212 3) * P) + J"},{"entry":"\/* LOAD SHIFT_REGISTER_1 AND SHIFT_REGISTER_2 *\/"},{"entry":["\/* IN THE FOLLOWING LOAD OPERATIONS ALL 9 BITS OF","*\/"]},{"entry":"THE"},{"entry":["\/* SHIFT REGISTER UNDER CONSIDERATION ARE LOADED;","*\/"]},{"entry":["\/* THE LEFTMOST (LEAST SIGNIFICANT) 8 BITS ARE","*\/"]},{"entry":"LOADED"},{"entry":["\/* WITH THE ADDRESSED BYTE; AND THE REMAINING","*\/"]},{"entry":["\/* RIGHTMOST (MOST SIGNIFICANT) 1 BIT IS LOADED WITH","*\/"]},{"entry":["\/* THE LEAST SIGNIFICANT BIT OF THE NEXT BYTE ON THE","*\/"]},{"entry":["\/* SAME ROW","*\/"]},{"entry":"SHIFT_REGISTER_1 = FRAME1(BYTE_ADDR_1)"},{"entry":"SHIFT_REGISTER_2 = FRAME2(BYTE_ADDR_2)"},{"entry":"\/* DO HORIZONTALLY ALIGNED COMPARISON *\/"},{"entry":["\/* IN ALL CONSEQUENT LOGICAL \u201cAND\u201d OPERATIONS,","*\/"]},{"entry":"ONLY"},{"entry":["\/* THE LEFTMOST (LEAST SIGNIFICANT) 8 BITS OF BOTH","*\/"]},{"entry":["\/* REGISTERS ARE INVOLVED TO PRODUCE AN 8 BIT","*\/"]},{"entry":"RESULT"},{"entry":["\/* (INDEX)","*\/"]},{"entry":"INDEX = SHIFT_REGISTER_1.AND.SHIFT_REGISTER_2"},{"entry":"INCREMENT = POPULATION_COUNT_FUNCTION(INDEX)"},{"entry":"ACCUMULATOR = ACCUMULATOR + INCREMENT"},{"entry":["\/* DO COMPARISON WITH ONE BLOCK HORIZONTAL","*\/"]},{"entry":"SHIFT OF"},{"entry":["\/* FRAME 1 TO THE LEFT WITH RESPECT TO FRAME 2","*\/"]},{"entry":"CYCLICLY ROTATE SHIFT_REGISTER_1 LEFT BY ONE BIT"},{"entry":"INDEX = SHIFT_REGISTER_1.AND.SHIFT_REGISTER_2"},{"entry":"INCREMENT = POPULATION_COUNT_FUNCTION(INDEX)"},{"entry":"ACCUMULATOR = ACCUMULATOR + INCREMENT"},{"entry":"\/* RESTORE SHIFT_REGISTER_1 TO ORIGINAL STATE *\/"},{"entry":"CYCLICLY ROTATE SHIFT_REGISTER_1 RIGHT BY ONE BIT"},{"entry":"\/* DO COMPARISON WITH ONE BLOCK HORIZONTAL"},{"entry":"SHIFT OF *\/"},{"entry":["\/* FRAME2 TO THE LEFT WITH RESPECT TO FRAME 1","*\/"]},{"entry":"CYCLICLY ROTATE SHIFT_REGISTER_2 LEFT BY ONE BIT"},{"entry":"INDEX = SHIFT_REGISTER_1.AND.SHIFT_REGISTER_2"},{"entry":"INCREMENT = POPULATION_COUNT_FUNCTION(INDEX)"},{"entry":"ACCUMULATOR = ACCUMULATOR + INCREMENT"},{"entry":"\/* RESTORE SHIFT_REGISTER_2 TO ORIGINAL STATE *\/"},{"entry":"CYCLICLY ROTATE SHIFT_REGISTER_2 RIGHT BY ONE BIT"},{"entry":"NEXT J"},{"entry":"NEXT K"},{"entry":"NEXT I"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"If it is desired to detect changes between the contents of frames regardless of possibly extensive (more than one 8\u00d78 pixel block in all possible horizontal, vertical and diagonal directions) translations of objects in the frames, it may be more desirable to compute the variance between the auto-coincidence matrices of the frames rather than the cross-coincidence counts between the frames. The auto-coincidence matrix of a frame is a matrix of auto-coincidence counts for the frame. The auto-coincidence count in the cell (m, n) of the auto-coincidence matrix is the count of matches between the frame and the same frame shifted by m rows and n columns. The counts in the auto-coincidence matrix for limited ranges of m and n, for example, m=0, 1, 2, . . . , M and n=0, 1, 2, . . . , N for relatively small values of M and N such as M=3 and N=3 provide a way of identifying the frame. These counts are relatively independent of the translation of the frame as a whole and are also relatively independent of the translation of objects in the frame so long as the objects do not completely overlap each other. The counts could be computed for each I-frame of an MPEG-2 clip and stored as part of the metadata of the clip.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 13","b":["171","172","173","174"],"sub":["c(M,N) ","c(M,N) ","p(M,N) "]},"Unless there is a scarcity of computational resources, it is desirable to use information about the gradient or orientation of the edges in order to better distinguish a scene change from change in frames due to some motion of the background or objects in a frame or due to changes in lighting conditions between frames. It is most desirable to provide additional independent bits or channels of bits in such a way that the frame of the bits for each channel will be relatively sparse. Under these conditions, there will be a greater variance between the auto-coincidence matrix elements of different frames for relatively small values of m and n.","One way of distinguishing edges is based on the signs of the horizontal and\/or vertical components of the gradient (vector) for each edge, as indicated by the sign of the differential DCT DC (C) coefficient and the block scan direction reaching the block containing this coefficient. For example, for a luminance edge, it is the sign of the DCT Ccoefficient for luminance and the direction along which the prediction is performed to produce this coefficient; for a chrominance edge, it is the sign of the DCT Ccoefficient for the same chrominance channel and the prediction direction for this coefficient; and for a combination luminance and chrominance edge, it is the sign of the DCT Ccoefficient for luminance and the prediction direction for this coefficient. In any of these cases, the sign is very distinctive because the magnitude of the DCT Ccoefficient, as classified by the value of \u201cdct_dc_size,\u201d is at least as large as the threshold for edge detection.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":["FIG. 14","FIGS. 15 to 17","FIG. 6","FIG. 9"],"sub":["00 ","00 ","00","00 "],"b":["180","181","182","183","181","182","184","181","185","184","182"]},{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 15","sub":["00 ","00 "]},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 16","sub":["00 ","00 "]},{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 17","sub":["00 ","00 ","00 ","00 "]},"Another source of additional information about the edges is the sign and magnitude of the lowest (horizontal and vertical) frequency DCT AC coefficients. Vertically and horizontally oriented edges depending on their contrast levels, respectively induce horizontal and vertical frequency components. For example,  shows an idealized case of a close-to-vertical edge with a positive horizontal gradient component (pixel values increasing towards right) being detected by an edge signal that is a logic 1 for a current block, and  shows an idealized case of another close-to-vertical edge with a negative horizontal gradient component (pixel values decreasing towards right) being detected by an edge signal that is a logic 1 for a current block. In each of these idealized (due to their involving an ideal step-edge) cases, the edge is centered almost right at the vertical boundary between the current block and the prior block. The discontinuity of the edge is predominantly confined to neither the current block nor the prior block. Therefore the contents of both the current block and the prior block are predominantly low-pass (smooth) and the existence of a vertical edge between the blocks for the case illustrated in  and  will be revealed only through a significant change in the mean pixel value from the prior to the current block or equivalently a large magnitude differential DCT DC (C) coefficient in the current block. As long as the edges of  and  are close to being vertical and located almost at the vertical boundary between the prior and current blocks, the exact values of their slopes are immaterial to the above observation. As the almost vertical edges of  or  shift into either the prior block or the current block as illustrated in  or , respectively, the difference in the mean pixel values of the prior and the current block or equivalently the magnitude of the differential DCT DC (C) coefficient in the current block decreases. To detect such edges without too much decreasing the threshold on dct_dc_size_luminance or dct_dc_size_chrominance which will increase the noise in the edge signal, and\/or to achieve more precise vertical edge localization whenever it is required, the magnitude and the sign of the lowest order AC horizontal frequency coefficient (C) can be inspected in both the prior block and the current block. Whether or not there is a vertical edge within the bounds of the prior block or the current block not aligned with the vertical boundary between these two blocks, should be indicated by whether or not there is a lowest order AC horizontal frequency coefficient (C) with considerable magnitude in either of the two blocks, and if there is a lowest order AC horizontal frequency coefficient (C) with considerable magnitude in either of the two blocks, then the sign of this lowest order AC horizontal frequency coefficient (C) should indicate whether the gradient of the vertical edge is positive or negative in the horizontal direction.",{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 24","sub":["01 ","01","C01","01 ","C01","01","01","C01 ","01","01","C01 ","00 ","01 ","00 ","01 ","00 ","00 ","01 ","00 ","00 ","01","C01 ","01 ","01 ","00 ","01 ","00","00 ","01 ","00","01 ","01 ","01","C01 ","01 ","01 ","00 ","01 ","00","00 ","01 ","00"],"b":["190","191","195","191","192","195","193","194","195"]},{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 25","sub":["10 ","10","C10","10 ","C10","10","10","C10 ","10","10","C10 ","00 ","10 ","00 ","10 ","00 ","00 ","10 ","00 ","00 ","10","C10 ","10 ","10 ","00 ","10 ","00","00 ","10 ","00","10 ","10 ","10","C10 ","10 ","10 ","00 ","10 ","00","00 ","10 ","00"],"b":["200","201","205","201","206","202","205","203","204","205"]},"As described above, there are various ways of producing edge indicating bits from which can be calculated auto-coincidence counts and cross-coincidence counts for detecting scene changes. Another way of extracting features from the edge indicating data is to trace the edges to detect joints where the edges intersect in order to construct graphs representing the morphology of objects in a scene. The graph of a current frame can be compared to a graph of a prior frame to detect significant differences in the location and number of the joints and in the number of edges that intersect at the joints. The information about the edge graphs for the I-frames could be stored as I-frame metadata for use by a media database search engine to find the I-frames that match a given frame or a search specification in terms of graph characteristics. As such, the edge graph information can be used for object identification in the compressed data domain.","When tracing edges to find joints, the thinning filter of  could be used to retain less significant edge segments that would provide connections between the joints. The code length and sign of the DCT DC coefficients could be saved in a frame buffer for ease of access and comparison when tracing the edges in a vertical, horizontal or diagonal direction when searching for the joints. It may also be desirable to have more information about the direction of the edges. One way of extracting more information about the direction of the edges is to compute an estimate of the gradient vector of an edge from the lowest AC horizontal frequency DCT coefficient Cand the lowest AC vertical frequency DCT coefficient Cfor the current block.",{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 26","b":["211","212","213"],"sub":["cx ","01 ","cy ","10 ","01 ","10 ","cx","cy"]},"In view of the above, there have been described very fast and computationally efficient methods of edge detection for block coded video and scene change detection for MPEG video. Edges are detected in block coded video by a threshold comparison upon the lengths of variable-length codes used for encoding the differential DC coefficients of the pixel blocks. A thinning filter compares the code lengths of the differential DC coefficients of adjacent blocks in order to retain the edge indications of more significant edges and to exclude the edge indications of less significant edges. The edge indications can be split into substantially independent channels for luminance or chrominance, for edges having positive or negative horizontal gradient components as indicated by the sign of the differential DC coefficient, the prediction direction of the differential DC coefficient, and the sign of the lowest horizontal frequency DCT coefficient for the pixel block containing the edge or for edges having positive or negative vertical gradient components as indicated by the sign of the differential DC coefficient, the prediction direction of the differential DC coefficient, and the sign of the lowest vertical frequency DCT coefficient for the pixel block containing the edge. An approximate gradient vector of an edge can be computed from the lowest horizontal frequency DCT coefficient and the lowest vertical frequency DCT coefficient. The edge indications for successive frames in an MPEG sequence can be compared to each other in various ways in order to detect scene changes."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Other objects and advantages of the invention will become apparent upon reading the following detailed description with reference to the accompanying drawings, in which:",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 8","FIG. 7"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 9","FIG. 6"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 10","FIG. 9"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 11","FIG. 10"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 26"}]},"DETDESC":[{},{}]}
