---
title: Apparatus and method for preventing falsification of client screen
abstract: An apparatus and method for preventing falsification of a client screen is provided, in which a web server dynamically generates URIs and provides them to clients, thus preventing the falsification of client screens due to a web injection attack or a memory hacking attack. The apparatus includes a random web generation unit for converting an identical web page into random URIs that are randomly generated, at a request of a plurality of clients, generating different random web sources, and providing the different random web sources to the respective clients. A web falsification determination unit compares display web source eigenvalues respectively generated by the clients with respect to any one of the random web sources with a generative web source eigenvalue for the one of the random web sources, thus determining whether screens corresponding to the random web sources displayed on the respective clients have been falsified.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08667294&OS=08667294&RS=08667294
owner: Electronics and Telecommunications Research Institute
number: 08667294
owner_city: Daejeon
owner_country: KR
publication_date: 20111123
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This application claims the benefit of Korean Patent Application No. 10-2011-0087435, filed on Aug. 30, 2011, which is hereby incorporated by reference in its entirety into this application.","1. Technical Field","The present invention relates generally to an apparatus and method for preventing the falsification of a client screen and, more particularly, to an apparatus and method for preventing the falsification of a client screen, which can defend a user screen against attacks by which data received from a server is modified using a web injection attack, a memory hacking attack, or the like to cause the user screen to be forged.","2. Description of the Related Art","An attack of falsifying a client screen is one of the attack methods used to hack user information, and is carried out in such a way that screen-related information provided by a web server is falsified due to malicious code installed on a user computer (that is, a client), an inappropriate screen is displayed on the client, and then the information of the user is hacked. That is, such an attack of falsifying a client screen is a kind of attack wherein a screen unintended by the user is transferred after falsifying the screen transmitted from a server using web injection, memory hacking or the like before a relevant web page is displayed to the user. In the case of this attack, the data viewed by the user and the data processed by a service provider are different from each other.","The technique of web injection is configured to falsify received data after a server's response to a user's Uniform Resource Locator (URL) request has been received from a user (in the case of a request and a response using Hypertext Transfer Protocol Secure: HTTPS) via a web browser. The server's response is composed of pieces of text configuring a screen such as in Hypertext Markup Language (HTML), JavaScript, or Extensible Markup Language (XML). A hacker can perform his or her desired task under the authority of the user by falsifying (inserting, substituting, deleting, or the like) the server's response using a web injection technique or a memory hacking technique. For example, when there is a homepage that receives an ID and a password from the user and that enables the user's password to be entered using a keyboard security solution, a hacker may add an input tag such as \u201cpassword confirmation\u201d entry using a screen falsification technique, thus inducing the user to re-enter his or her password. Since the input tag injected by the hacker is not protected by the keyboard security solution, the hacker can easily access the user's password. A memory hacking attack is a method of changing or modifying the values of the memory of a client, and displaying falsified data or transferring the falsified data to a server. Since this attack is made without the service provider's and the user's knowledge, it is difficult for the web page provider and the user to be aware of such an attack.","A conventional representative method of coping with these attacks is implemented using a scheme for installing a vaccine that is capable of detecting and eliminating malicious code installed on a client, and then preventing the attacks from being made. This scheme can cope with well-known malicious code and can fundamentally eliminate such malicious code, thus effectively coping with the attacks. However, this method is disadvantageous in that it cannot defend the client against mutant malicious code which the vaccine cannot detect, and is problematic in that this scheme depends on a user, and thus a service provider cannot cope with such attacks.","Another conventional method of coping may include a method of preventing the forgery of memory data of a computer application program. Such a method is configured to hook a memory data-related Application Programming Interface (API) function during the execution of a specific application program on a computer and then to prohibit access to memory data due to a hacking program from being made. Accordingly, the forgery of memory data can be prevented early so that the results of the execution of the memory data-related API function do not influence a program to be protected. This method has the effect of initially blocking abnormal access to memory data, but has the problem of having to install exclusive software such a secure browser and making it difficult to cope with new memory attack methods.","A further conventional method of coping may include address space randomization. This enables a memory address space, which is used or newly allocated whenever a program is operated, to be handled so that it is randomly changed. Accordingly, even if overflow occurs when an input value forged by a hacker is transmitted, the memory address space is not used in the manner in which the hacker had initially anticipated to be used, thus making it impossible to freely change program control. This method can efficiently cope with buffer overflow attacks, but is problematic in that it cannot cope with web injection attacks.","Accordingly, the present invention has been made keeping in mind the above problems occurring in the prior art, and an object of the present invention is to provide an apparatus and method for preventing the falsification of a client screen, which can prevent the falsification of the client screen due to a web injection attack, a memory hacking attack or the like, by providing random webs, such as URIs and web sources that are dynamically generated, to clients.","Another object of the present invention is to provide an apparatus and method for preventing the falsification of a client screen, which determine whether a web document generated by a web provider to process the request of a client has been falsified during a procedure for displaying the web document on the client.","A further object of the present invention is to provide an apparatus and method for preventing the falsification of a client screen, which transfer the principal information of a displayed screen to a web provider (that is, a web server), so that the web provider (that is, the web server) verifies the screen recognized by a client, thus determining whether data has been changed.","In accordance with an aspect of the present invention to accomplish the above objects, there is provided an apparatus for preventing falsification of a client screen, including a random web generation unit for converting an identical web page into random Uniform Resource Identifiers (URIs) that are randomly generated, at a request of a plurality of clients, generating different random web sources, and providing the different random web sources to the respective clients; and a web falsification determination unit for comparing display web source eigenvalues respectively generated by the clients with respect to any one of the random web sources with a generative web source eigenvalue for the one of the random web sources, thus determining whether screens corresponding to the random web sources displayed on the respective clients have been falsified.","Preferably, the random web generation unit may include a random URI generation module for generating the random URIs corresponding to the web page requested by the plurality of clients; and a random web source generation module for generating the random web sources in connection with the generated random URIs.","Preferably, the random web source generation module may generate random variables corresponding to variables that are included in a web source corresponding to the web page corresponding to the generated random URIs, convert the variables of the web source into the generated random variables, and then generate the random web sources.","Preferably, the random web source generation module may insert meaningless web source text into a random location, and randomly changes at least one of a variable name, a tag name, and a function name that are included in a web source.","Preferably, the web falsification determination unit may include a generative web source eigenvalue calculation module for calculating generative web source eigenvalues of the random web sources; and a falsification determination module for comparing the display web source eigenvalues generated by the respective clients with the calculated generative web source eigenvalues, thus determining whether screens corresponding to the web sources displayed on the respective clients have been falsified.","Preferably, the generative web source eigenvalue calculation module may calculate the generative web source eigenvalues using at least one unique key that is shared with the plurality of clients.","Preferably, the falsification determination module may share different unique keys with the respective clients.","Preferably, the falsification determination module may receive a display web source eigenvalue of a random web source calculated using the unique key from at least one of the plurality of clients.","Preferably, the apparatus may further include a storage unit for storing the generated random URIs, the random web sources, and the generative web source eigenvalue calculated to determine whether the screens corresponding to the random web sources have been falsified.","Preferably, the apparatus may further include a display screen verification unit for requesting entry of input information corresponding to principal information by transmitting the principal information to at least one of the plurality of clients, and for verifying whether a display screen has been falsified by comparing the input information received from the at least one of the clients with the principal information.","In accordance with another aspect of the present invention to accomplish the above objects, there is provided a method of preventing falsification of a client screen, including at a random web generation unit, converting an identical web page into random Uniform Resource Identifiers (URIs) that are randomly generated, at a request of a plurality of clients, generating different random web sources, and providing the different random web sources to the respective clients; and at a web falsification determination unit, comparing display web source eigenvalues respectively generated by the clients with respect to any one of the random web sources with a generative web source eigenvalue for the one of the random web sources, thus determining whether screens corresponding to the random web sources displayed on the respective clients have been falsified.","Preferably, the providing the random web sources may include at the random web generation unit, if a previously generated random web source corresponding to a web request received from at least one of the plurality of clients is not present, generating a random Uniform Resource Identifier (URI) for a web page corresponding to the web request; at the random web generation unit, generating a random web source in connection with the generated random URI; at the random web generation unit, storing the generated random URI and the random web source; and at the random web generation unit, transmitting the generated random web source to at least one of the plurality of clients.","Preferably, the providing the random web source may further include, at the random web generation unit, if the previously generated random web source corresponding to the received web request is present, detecting the random web source, and the transmitting is configured such that, at the random web generation unit, the detected random web source is transmitted to the client.","Preferably, the generating the random web source may include at the random web generation unit, generating random variables corresponding to variables that are included in the web page corresponding to the generated random URI; and at the random web generation unit, changing the variables included in the web page to the generated random variables, thus generating random web sources.","Preferably, the generating the random web source may include at least one of at the random web generation unit, randomly inserting meaningless web source text into a random location; and at the random web generation unit, randomly changing at least one of a variable name, a tag name, and a function name that are included in a web source.","Preferably, the determining whether the screens have been falsified may include at the web falsification determination unit, receiving a display web source eigenvalue for a random web source calculated from at least one of the plurality of clients using at least one unique key that is shared with the client; at the web falsification determination unit, calculating a generative web source eigenvalue for the random web source using the unique key; and at the web falsification determination unit, comparing the received display source eigenvalue with the calculated generative web source eigenvalue, thus determining whether a relevant screen has been falsified.","Preferably, the determining whether the screens have been falsified may further include, at the web falsification determination unit, sharing at least one unique key required to calculate web source eigenvalues with the plurality of clients, and the sharing the unique key is configured such that, at the web falsification determination unit, different unique keys are shared with the respective clients.","Preferably, the determining whether the screens have been falsified may further include, at a storage unit, storing the calculated generative web source eigenvalue.","Preferably, the method may further include, at a display screen verification unit, verifying whether a display screen corresponding to the web source has been falsified, based on input information related to principal information transmitted to at least one of the plurality of clients.","Preferably, the verifying whether the display screen has been falsified may include at the display screen verification unit, transmitting the principal information to at least one of the plurality of clients; at the display screen verification unit, displaying the transmitted principal information on the at least one of the plurality of clients and then requesting entry of input information; at the display screen verification unit, receiving the input information from the at least one of the plurality of clients; and at the display screen verification unit, comparing the transmitted principal information with the received input information, and then verifying whether the display screen has been falsified.","According to the present invention, the client screen falsification prevention apparatus and method are advantageous in that random webs in which Uniform Resource Identifiers (URIs) and web sources are dynamically generated are provided to respective clients, thus preventing the falsification of the screen of each client from occurring due to a web injection attack, a memory hacking attack, etc. That is, the client screen falsification prevention apparatus and method are advantageous in that even if malicious code or hacking tools are installed on the client, the web server generates and provides a random web such as a web page, and thus a normal screen which avoids attacks can be provided to the client being subjected to a screen falsification attack.","Further, the client screen falsification prevention apparatus and method are advantageous in that when the screen displayed on the client is attacked and falsified, the web server can recognize whether the screen has been falsified by determining whether the principal information of the screen has been falsified, thus coping with the falsification of the screen.","Furthermore, the client screen falsification prevention apparatus and method are also advantageous in that mutual authentication between each client and the web server is carried out by determining whether principal data transmitted or received therebetween has been changed, so that hacking, caused by the falsification of the screen on the client after authenticating users, can be detected and prevented at the time of conducting important transactions (for example, Internet banking, stock trading, electronic commerce, etc.) over the Internet. That is, in existing security solutions, each user has been authenticated using a password or a One-Time Password (OTP) upon conducting important transactions (for example, Internet backing, stock trading, electronic commerce, etc.) over the Internet. However, in order to solve the problem of the existing security solutions in that it was impossible to determine whether contents displayed on the screen of the client are identical to contents provided by the service provider, the present invention can detect most hacking trials based on the falsification of the screen of the user using a method of checking whether an important transaction such as an electronic transaction recognized by the user is identical to a transaction desired to be performed by the service provider.","Furthermore, the client screen falsification prevention apparatus and method have the advantage of coping with screen falsification attacks such as a web injection attack attributable to unknown malicious code.","The present invention will be described in detail below with reference to the accompanying drawings to such an extent that those skilled in the art can easily implement the technical spirit of the present invention. Reference now should be made to the drawings, in which the same reference numerals are used throughout the different drawings to designate the same or similar components. In the following description, redundant descriptions and detailed descriptions of known functions and elements that may unnecessarily make the gist of the present invention obscure will be omitted.","Hereinafter, a web service system including an apparatus for preventing the falsification of a client screen according to an embodiment of the present invention will be described in detail with reference to the attached drawings.  is a diagram showing a web service system including an apparatus for preventing the falsification of a client screen according to an embodiment of the present invention.","As shown in , the web service system includes a web server , an apparatus  for preventing the falsification of a client screen (hereinafter referred to as a \u201cclient screen falsification prevention apparatus \u201d), and a plurality of clients .","The web server  manages a plurality of web pages provided to the plurality of clients . In this case, the web server  is connected to the client screen falsification prevention apparatus  over a network. The web server  transmits a relevant web page (or a relevant web source) to the client screen falsification prevention apparatus  in response to a web request received from a relevant client .","The client screen falsification prevention apparatus  provides the same web page provided by the web server  to the individual clients  in the form of different random web sources so as to prevent the screens of the clients  from being falsified due to a web injection attack, a memory hacking attack or the like. That is, the client screen falsification prevention apparatus  converts the same web page requested by the clients  into random Uniform Resource Identifiers (URIs) that are randomly generated. The client screen falsification prevention apparatus  provides different random web sources to the respective clients  using the randomly generated URIs. The client screen falsification prevention apparatus  verifies the integrity of display screens (whether the display screens have been falsified) using response information to pieces of information displayed on the clients . Here, the client screen falsification prevention apparatus  is shown as being formed separately from the web server , but it may be included in the web server  in the form of a module or an application.","In this way, in the present invention, whenever each client  (that is, each user) requests a web from the web server  via the client screen falsification prevention apparatus , the web server  (that is, the web page provider) responds to the request by randomly generating a URI or a web source having the same function. In this case, the client screen falsification prevention apparatus  stores web page provision information about web pages provided to respective users in the web server  (for example, in web sessions), and guarantees the provision of the same functionality and screen for different pieces of source code with respect to all web requests.","Each client  calculates a display web source eigenvalue which becomes the basis for determining whether a client screen has been falsified. That is, the client  calculates the display web source eigenvalue of a displayed web source using a unique key that is shared with the client screen falsification prevention apparatus . The client  transmits the calculated display web source eigenvalue to the client screen falsification prevention apparatus .","The client  displays the principal information received from the client screen falsification prevention apparatus  so as to verify the display screen. The client  receives input information related to the displayed principal information and transmits the input information to the client screen falsification prevention apparatus .","For this, as shown in , the client  includes a communication unit  for transmitting or receiving data to or from the client screen falsification prevention apparatus , an input unit  for receiving input information related to displayed principal information, a display web source eigenvalue calculation unit  for calculating the display web source eigenvalue of a displayed web source using a unique key, and a web source processing unit  for displaying the web source and the principal information, which are received from the client screen falsification prevention apparatus , on a screen.","Hereinafter, the client screen falsification prevention apparatus  according to an embodiment of the present invention will be described in detail with reference to the attached drawings.  is a diagram showing the client screen falsification prevention apparatus  according to an embodiment of the present invention.  are diagrams showing the random web generation unit  of ,  is a diagram showing the web falsification determination units  of ,  are diagrams showing the display screen verification unit  of , and  is a diagram showing the client  of .","As shown in , the client screen falsification prevention apparatus  includes a communication unit , a random web generation unit , a web falsification determination unit , a display screen verification unit , and a storage unit .","The communication unit  transmits or receives data to or from the plurality of clients . That is, the communication unit  transmits or receives data that is used to prevent the falsification of the screen of each client  to or from the client .","The communication unit  transmits a random web source generated by the random web generation unit  to a client  that made a web request.","The communication unit  receives a display web source eigenvalue from the client . The communication unit  transmits the received display web source eigenvalue to the web falsification determination unit .","The communication unit  transmits the principal information generated by the display screen verification unit  to the client . The communication unit  receives input information related to the transmitted principal information from a relevant client  and transmits the input information to the display screen verification unit .","The random web generation unit  converts the same web page requested by the plurality of clients  into random URIs that are randomly generated, and provides the different random web sources to the respective clients . That is, the random web generation unit  generates different random web sources for the same web page and provides the different random web sources to the respective clients . In this case, the random Web generation unit  stores and manages the generated random URIs in the storage unit  so as to provide the random URIs to the respective clients . The random web generation unit  may also store the random web sources in the storage unit . For this operation, as shown in , the random web generation unit  includes a random URI generation module generation module  and a random web source generation module .","The random URI generation module  generates random URIs corresponding to a web page requested by individual clients . That is, the random URI generation module  generates dynamic URIs, which are randomly implemented for the same web page, at the request of the clients . The random URI generation module  stores the generated random URIs in the storage unit .","The random web source generation module  generates random web sources in connection with the random URIs generated by the random URI generation module . In this case, the random web source generation module  generates random variables corresponding to variables that are included in the relevant web page corresponding to the random URIs generated by the random URI generation module . The random web source generation module  converts the variables of the web source corresponding to the web page into previously generated random variables, and then generates random web sources.","The random web source generation module  randomly changes one of a variable name, a tag name, and a function name that are included in the web source and then inserts the randomly changed results into the relevant web source. For example, as shown in , the random web source generation module  generates a random character string composed of three characters. The random web source generation module  changes the name of a JavaScript variable included in the web page to a generated random character string. As shown in , the random web source generation module  generates a random character string composed of five characters. The random web source generation module  converts the name of a JavaScript function included in the web page into a random character string composed of five characters. As shown in , the random web source generation module  randomizes the name of a tag used in the form of the web page. In this case, characters that are randomly generated to randomize the tag name corresponding to ACCOUNT_NO are stored in the web sessions.","The random web source generation module  inserts meaningless web source text into a random location of the web source. For example, as shown in , the random web source generation module  inserts meaningless text that is not displayed on the screen of each client  into the second and third rows of the web source.","In this way, in order to prevent the location of web injection from being found using malicious code, the random web source generation module  changes the name of a JavaScript function included in the web page to a generated random character string, changes the name of a JavaScript variable included in the web page to a generated random character string, and randomizes the name of a tag used in the form of the web page, and inserts meaningless HTML text into a random location of JavaScript syntax code.","The random web source generation module  stores the generated random web sources in the storage unit . The random web source generation module  transmits a relevant random web source to the client  that made the web request via the communication unit .","The web falsification determination unit  determines using the eigenvalues of the random web sources whether the screens of the clients  have been falsified. That is, the web falsification determination unit  may determine whether a screen corresponding to the random web source displayed on each client  has been falsified by comparing the display web source eigenvalue of the random web source provided from the random web generation unit  to the client  with the generative web source eigenvalue of the random web source generated by the random web generation unit .","For this operation, as shown in , the web falsification determination unit  includes a generative web source eigenvalue calculation module  and a falsification determination module .","The generative web source eigenvalue calculation module  calculates the generative web source eigenvalues of random web sources generated by the random web generation unit . In this case, the generative web source eigenvalue calculation module  calculates the generative web source eigenvalues of the random web sources using unique keys that are shared with clients . The generative web source eigenvalue calculation module  stores the calculated generative web source eigenvalues in the storage unit .","The falsification determination module  determines whether the screen corresponding to each displayed web source has been falsified by comparing a display web source eigenvalue for the random web source received from the client  with a relevant generative web source eigenvalue. In this case, the falsification determination module  receives the display web source eigenvalue from the client via the communication unit . That is, the client  calculates the display web source eigenvalue using a shared unique key. The client  transmits the calculated display web source eigenvalue to the falsification determination module  over the network. For example, the falsification determination module  (or the web server  (that is, the web service provider)) shares a unique key required to calculate an eigenvalue via a secure method. In this case, the falsification determination module  shares the unique key with the client  by using a value only the client  and the falsification determination module  are aware of, for example a Diffie-Hellman (DH) Key exchange, an ID or a password. The falsification determination module  calculates a generative web source eigenvalue that has been generated using the web page provided whenever each client  requests a web source from the web server . Here, the web source is the term collectively designating sources used to provide web page services, such as HTML, JavaScript, or XML sources. A generative web source eigenvalue denotes a resulting value obtained by converting such a web source into Hash-based Message Authentication Code (HMAC). After the falsification determination module  stores the calculated generative web source eigenvalue in the storage unit , it transmits the generative web source eigenvalue to a relevant client . The client , after displaying the received web source (that is, the web page) on the screen, calculates a display web source eigenvalue, and transmits the display web source eigenvalue to the falsification determination module . The falsification determination module  determines whether the screen has been falsified by comparing the stored web source eigenvalue with the received display web source eigenvalue. In this case, if the display screen has been falsified, the falsification determination module  notifies the web server  (that is, the web service provider) that the screen was falsified.","The display screen verification unit  verifies, using the input information corresponding to the principal information provided to the client , whether the screen displayed on the client  has been falsified. That is, as shown in , the display screen verification unit  generates principal information and stores it in the storage unit . In this case, the display screen verification unit  may detect previously generated principal information from the storage unit  instead of generating the principal information. The display screen verification unit  transmits the generated principal information to the client  via the communication unit . As shown in , the client  displays on the screen the received principal information and an input window required to request the entry of the input information, thus requesting the user to enter the input information corresponding to the principal information. In this case, when a memory hacking attack or a web injection attack is made, another piece of information entered by a hacker is displayed on the screen of the client  instead of the principal information. As shown in , the client  recognizes the input information entered by the user using a character recognizer. The client  transmits the recognized input information to the display screen verification unit  via the communication unit . The display screen verification unit  verifies whether the display screen has been falsified by comparing the input information received from the client  with the previously transmitted principal information. The display screen verification unit  provides a subsequent service (that is, a web page) to the client  only if the transmitted principal information is identical to the received input information. In this case, the principal information that must be requested to be entered by the user or must be recognized by the character recognizer must be randomly selected without being designated. That is, the principal information is composed of different pieces of information for respective clients  (for example, the name, unique number, etc. of each user) and is then provided. In this case, each client  requests a relevant user to enter input information including all of characters and numerals contained in the principal information. Of course, the client may also request the user to enter input information including only some of the characters and numerals contained in the principal information. For example, when the principal information is the name of a user, the client  of a first user requests the first user to enter a first character and a third character of the first user's name, the client  of a second user requests the second user to enter a second character and a third character of the second user's name, and the client  of a third user requests the third user to enter only the initial consonant of the third user's name.","The storage unit  stores random URIs and random web sources generated by the random web generation unit . The storage unit  stores the generative web source eigenvalues calculated by the web falsification determination unit  to determine whether the screens corresponding to the random web sources have been falsified.","Hereinafter, a method of preventing the falsification of the screen of a client  according to an embodiment of the present invention will be described in detail with reference to the attached drawings.  is a flowchart showing a method of preventing the falsification of the screen of the client  according to an embodiment of the present invention.  is a flowchart showing the random web page provision step of ,  is a flowchart showing the web page falsification determination step of , and  is a flowchart showing the display screen verification step of .","The client screen falsification prevention apparatus  converts the same web page requested by a plurality of clients  into random URIs that are randomly generated, and then provides different random web sources to the respective clients  at step S. The random web source provision step will be described in detail with reference to the attached drawings.","If a web request made by a relevant client  is received at step S (in the case of YES), the client screen falsification prevention apparatus  determines whether a previously generated random web source corresponding to the web request is present at step S.","If it is determined at step S that the previously generated random web source is present (in the case of YES), the client screen falsification prevention apparatus  detects the random web source corresponding to the web request from a plurality of random web sources stored in the storage unit  at step S.","if it is determined at step S that there is no previously generated random web source (in the case of NO), the client screen falsification prevention apparatus  generates a random URI for the web page corresponding to the web request at step S.","After storing the generated random URI in the storage unit  at step S, the client screen falsification prevention apparatus  generates a random web source in connection with the generated random URI at step S. That is, the client screen falsification prevention apparatus  generates random variables corresponding to variables that are included in the web page corresponding to the generated random URI. The client screen falsification prevention apparatus  changes the variables included in the web page into the generated random variables, and then generates a random web source. Thereafter, the client screen falsification prevention apparatus  randomly inserts meaningless web source text into a random location of the web source. Of course, the client screen falsification prevention apparatus  may randomly change at least one of a variable name, a tag name, and a function name in the web source, and may insert the changed results into the web source.","The client screen falsification prevention apparatus  transmits the detected random web source or the generated random web source to the client  that made the web request at step S.","The client screen falsification prevention apparatus  determines whether the screen corresponding to the random web source displayed on the client  has been falsified by comparing the display web source eigenvalue of the random web source, provided to the client  at the step of providing the different random web sources, with the generative web source eigenvalue of the random web source at step S. The step of determining whether the screen has been falsified will be described in detail below with reference to the attached drawings.","First, the client screen falsification prevention apparatus  shares unique keys required to determine the occurrence of falsification with the plurality of clients  at step S. In this case, the client screen falsification prevention apparatus  shares different unique keys with the respective clients . Of course, the client screen falsification prevention apparatus  may also share a single unique key or a plurality of partially overlapping unique keys with the plurality of clients .","When a web request is received from a relevant client  at step S (in the case of YES), the client screen falsification prevention apparatus  calculates a generative web source eigenvalue for the random web source provided to the relevant client , and stores the generative web source eigenvalue at step S. In this case, the client screen falsification prevention apparatus  calculates the generative web source eigenvalue using a unique key that is shared with the client  that made the web request.","The client screen falsification prevention apparatus  receives the display web source eigenvalue from the client  at step S. In this case, the client  calculates the display web source eigenvalue for the web source displayed on the screen using the shared unique key, and transmits the display web source eigenvalue to the client screen falsification prevention apparatus .","The client screen falsification prevention apparatus  determines whether the screen has been falsified by comparing the received display web source eigenvalue with the calculated generative web source eigenvalue. Here, when the two eigenvalues are different from each other, the client screen falsification prevention apparatus  determines that the screen has been falsified. In contrast, if the two eigenvalues are identical to each other, the client screen falsification prevention apparatus  determines that the screen has not been falsified.","If it is determined that the screen has been falsified at step S (in the case of YES), the client screen falsification prevention apparatus  performs the processing of display errors in the web page at step S. That is, the client screen falsification prevention apparatus  displays an error message on the screen of the client  or sends an error message to the web server , thus notifying the web service provider of the occurrence of the falsification of the screen.","The client screen falsification prevention apparatus  verifies whether the display screen corresponding to the web source has been falsified, on the basis of the input information related to the principal information transmitted to the client , at step S. The step of verifying whether the display screen has been falsified will be described in detail with reference to the attached drawings.","First, the client screen falsification prevention apparatus  transmits the principal information to the client  to verify the display screen at step S. Here, the principal information is information, generated by a combination of numerals and characters, and such principal information is randomly generated whenever verification is performed.","The client  displays the principal information received from the client screen falsification prevention apparatus  on the screen, and then requests the user to enter relevant input information at step S. The user enters the input information corresponding to the displayed principal information. The client  transmits the entered input information to the client screen falsification prevention apparatus .","When the input information is received from the client  at step S (in the case of YES), the client screen falsification prevention apparatus  verifies the display screen by comparing the transmitted principal information with the received input information at step S. In this case, the client screen falsification prevention apparatus  determines that the verification of the display screen has been successfully performed when the principal information is identical to the input information.","If the verification of the display screen has been successfully performed at step S (in the case of YES), the client screen falsification prevention apparatus  transmits a subsequent web page at step S.","If the verification of the display screen has failed at step S (in the case of NO), the client screen falsification prevention apparatus  performs the processing of errors in the display screen at step S. That is, the client screen falsification prevention apparatus  sends an error message to the client  and then displays it on the screen. The client screen falsification prevention apparatus  sends the error message to the web server and then notifies the web service provider of the failure to verify the display screen.","As described above, the client screen falsification prevention apparatus  and method are advantageous in that random webs in which URIs and web sources are dynamically generated are provided to respective clients , thus preventing the falsification of the screen of each client  from occurring due to a web injection attack, a memory hacking attack, etc. That is, the client screen falsification prevention apparatus  and method are advantageous in that even if malicious code or hacking tools are installed on the client , the web server  generates and provides a random web such as a web page, and thus a normal screen which avoids attacks can be provided to the client  being subjected to a screen falsification attack.","Further, the client screen falsification prevention apparatus  and method are advantageous in that when the screen displayed on the client  is attacked and falsified, the web server  can recognize whether the screen has been falsified by determining whether the principal information of the screen has been falsified, thus coping with the falsification of the screen.","Furthermore, the client screen falsification prevention apparatus  and method are also advantageous in that mutual authentication between each client  and the web server  is carried out by determining whether principal data transmitted or received therebetween has been changed, so that hacking, caused by the falsification of the screen on the client  after authenticating users, can be detected and prevented at the time of conducting important transactions (for example, Internet banking, stock trading, electronic commerce, etc.) over the Internet. That is, in existing security solutions, each user has been authenticated using a password or a One-Time Password (OTP) upon conducting important transactions (for example, Internet backing, stock trading, electronic commerce, etc.) over the Internet. However, in order to solve the problem of the existing security solutions in that it was impossible to determine whether contents displayed on the screen of the client  are identical to contents provided by the service provider, the present invention can detect most hacking trials based on the falsification of the screen of the user using a method of checking whether an important transaction such as an electronic transaction recognized by the user is identical to a transaction desired to be performed by the service provider.","Furthermore, the client screen falsification prevention apparatus  and method have the advantage of coping with screen falsification attacks such as a web injection attack attributable to unknown malicious code.","Although the preferred embodiments of the present invention have been disclosed for illustrative purposes, those skilled in the art will appreciate that various modifications, additions and substitutions are possible, without departing from the scope and spirit of the invention as disclosed in the accompanying claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIGS. 3 to 7","FIG. 2"]},{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 8","FIG. 2"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIGS. 9 to 11","FIG. 2"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 12","FIG. 1"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 14","FIG. 13"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 15","FIG. 13"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 16","FIG. 13"]}]},"DETDESC":[{},{}]}
