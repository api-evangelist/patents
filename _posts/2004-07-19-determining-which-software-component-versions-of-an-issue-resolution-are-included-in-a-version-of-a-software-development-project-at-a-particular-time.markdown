---
title: Determining which software component versions of an issue resolution are included in a version of a software development project at a particular time
abstract: Systems and methods for automatically determining, for a version of a software developing project, which software component versions defined for an issue resolution at a particular time, for example, a time in the past, are included in the project version at the particular time. Such determination may include determining the software component versions included in an issue resolution at a particular time, and, for each determined version, determining whether the version is included in the project version. The software components that should be propagated to other versions of a software development project so that these versions have a complete issue resolution may be determined. Further, differences between software project versions, from an issue resolution prospective, may be determined.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07437722&OS=07437722&RS=07437722
owner: Accurev, Inc.
number: 07437722
owner_city: Lexington
owner_country: US
publication_date: 20040719
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND","SUMMARY","DEFINITIONS","DETAILED DESCRIPTION","EXAMPLES"],"p":["Commonly-owned U.S. patent application titled SYSTEMS AND METHODS FOR DETERMINING THE SOFTWARE COMPONENTS INCLUDED IN A VIEW OF A SOFTWARE DEVELOPMENT PROJECT AT A PARTICULAR TIME by Damon B. Poole, filed on even date herewith under Ser. No. 10\/894,964 (hereinafter, the Poole application) is hereby incorporated by reference in its entirety.","Developing software applications and products often requires the coordinated efforts of many developers (e.g., software programmers). This coordinated effort is referred to herein as a \u201csoftware development effort\u201d or \u201cdevelopment effort,\u201d and the body of work (e.g., one or more software applications and\/or products) being developed by the effort is referred to as a \u201csoftware development project,\u201d \u201cdevelopment project\u201d or \u201cproject.\u201d At any given time, as part of a software development effort, multiple developers may be working on different components of a software development project and\/or different versions of these components (e.g., for different users or situations). Managing the concurrent development of these different software components and versions is commonly referred to as configuration management (CM). CM software applications (i.e., programs) assist developers and project managers in the management of a software development project, including maintaining coherency between different components and versions.","A software development effort typically involves adding or improving functionality (i.e., adding features) to a product, and fixing functionality that is not working properly (i.e., fixing defects or \u201cbugs\u201d). Typically, one or more fixes, features or combinations thereof (i.e., development items) are grouped together as a development unit called an \u201cissue.\u201d At a minimum, an issue defines one or more development items, and often includes other information. Issues are often tracked as part of a development effort, and tracking information may be added to an issue description, including information indicating that the issue has been resolved. Because of the often significant numbers of issues involved in a development effort, development efforts typically employ an issue tracking system to track the progress of the resolution of each issue.","A primitive issue tracking system may involve the creation of a list of issues on paper, where a description of each issue is written down. Notes may be taken throughout the progress of resolving the issue, and the issue may be checked off when it has been resolved. More often, tracking systems are implemented using a computer system, for example, as part of a CM application. Such computerized tracking systems may provide a unique identifier (e.g., a serial number) for each issue, and provide data fields that enable a user (e.g., a developer, supervisor or project team leader) to track the progress of the issue's resolution.","During the resolution of an issue, the one or more software components (e.g., objects, records, programs, files, directories, etc.) that need to be modified or added to resolve the issue is\/are determined. Some issue tracking systems enable an association to be created and maintained between an issue and the one or more software components needed to resolve the issue. More specifically, an association can be created and maintained between an issue and the versions of the one or more software components needed to resolve the issue. As used herein, an \u201cissue resolution\u201d or \u201cresolution\u201d is an abstraction (e.g., a software abstraction such as an object, record, variable or table) defining an association between a an issue and one or more software components and versions thereof that provide a solution to the issue. For example, an issue is created describing a bug, and it is determined that a first version of a file is causing the bug. A second version of the file that resolves the problem is developed, and an issue resolution created that associates the second version of the file with the resolution of the issue.","As described above, a software development effort often involves multiple developers working concurrently on different versions of different software components. Some CM applications provide each developer a \u201cworkspace\u201d (defined below) in which the developer can add, modify and delete components of the development project pertinent to the developer's objective. Further, a CM application may maintain one or more versions of the project itself (e.g., branches or streams\u2014defined below), and a developer's workspace may be configured to enable the developer to make changes to a particular version of the project. As used herein, a \u201cversion\u201d of a software development project (or other software entity) is a set of software components of the project, and for each software component, a version thereof. It should be appreciated that different versions of a software project (or other type of software entity) may have the same content (e.g., may include a same set of software component versions) or different content. A developer's workspace may be considered a version of the project. It is often desirable to propagate modifications made in a developer's workspace (e.g., an addition, change or deletion of one or more software objects) to other versions of the project, including other workspaces. CM applications often are configured to provide such propagation.","In addition to providing the propagation of modified software components, some CM applications provide an issue tracking system that enables a user to record that an issue resolution has been propagated to one or more versions of the project. For example, the user can make an entry in the tracking system that indicates that a particular issue resolution has been propagated to a particular version of the project. To determine that an issue resolution has been propagated to a version of the project, the user determines the software components and versions associated with the issue resolution, for example, by looking up the issue resolution in the issue tracking system. Then the user determines whether all of the versions of the software components have been propagated to the version of the project, for example, by looking up the list of software components and their associated versions currently in the project.","Thus, known issue tracking systems require a user to manual determine whether an issue resolution has been propagated to particular version of a project, for example, by looking up information on the system. Further, the user must manually record the propagation of the issue resolution. Such manual determination is time-consuming and susceptible to human error.","Some known issue tracking systems allow the definition of an issue resolution to be altered after the versions of the software components defined by the issue resolution have been propagated to one or more versions of a project. Consider the following example. An issue resolution specifies a second version of a file, which resides in a first branch of a project. The second version of the file is then propagated to a second branch of the project, and a user creates a record indicating that the issue resolution is included in (i.e., has been propagated to) the second branch. Then, after the issue resolution has been propagated, the developer realizes that there is another change that needs to be made to the file. The developer then creates a third version of the file in the first branch and alters the definition of the issue resolution to include the third version of the file, replacing the second version. Another example is if the developer adds another file to the issue resolution.","If the record is not updated to reflect that the issue resolution (in its current form) has not been propagated to the branch, then the propagation record is now inaccurate, as the second branch does not actually include the issue resolution. Rather, the second branch includes the earlier second version of the file. Known systems do not have the ability to automatically detect this scenario and update the record, such that user must manually do so.","Thus, known issue tracking systems are susceptible to human error resulting in the maintenance of an inaccurate record of issue propagation. As a result, a customer may be provided a version of a software product that allegedly includes a resolution to an issue (e.g., a bug fix or a new feature), but, in fact, does not include the resolution.","Another shortcoming of known issue tracking systems is that no electronic record is maintained of the history of changes made to an issue resolution (i.e., changes to the set of software component versions included therein). Thus, known systems are limited to maintaining only the current state of an issue resolution, such that the state of an issue resolution (e.g., the software components included therein) at a time in the past cannot be determined automatically.","In an embodiment of the invention, a method is provided for a software development project represented by a hierarchy of versions of the software development project, each version including a set of versions of software components. It is determined determining whether the one or more software component versions included in an issue resolution at a first time are also included in a first version of the software development project at the first time. The issue resolution represents a change to the software development project. The one or more software component versions included in the issue resolution at a first time are determined by accessing a data structure representing a history of changes to the issue resolution. For each determined software component, it is determined whether the software component version was included in the first version at the first time.","In another embodiment of the invention, a computer-readable medium is provided that stores computer-readable signals defining instructions that, as a result of being executed by a computer, instruct the computer to perform the method described in the preceding paragraph.","In another embodiment, a system is provided for a software development project represented by a hierarchy of versions of the software project, each version including a set of versions of software components. The system determines whether one or more software component versions included in an issue resolution at a first time are included in a first version of the software development project at the first time, the issue resolution representing a change to the software development project. The system includes an issue resolution components generator to receive one or more inputs specifying an issue resolution and a value corresponding to a first time. The issue resolution components generator determines the one or more software components versions included in the issue resolution at the first time by accessing a data structure representing a history of changes to the issue resolution, and outputs the one determined software component versions. The system also includes a version checking module to receive one or more inputs specifying the one or more determined software component versions and a value corresponding to the first time. The version checking module determines, for each of the one or more determined software component versions, whether the determined version was included in the first project version at the first time.","In yet another embodiment, a system is provided for a software development project represented by a hierarchy of versions of the software project, each version including a set of versions of software components. The system determines whether one or more software component versions included in an issue resolution at a first time are included in a first version of the software development project at the first time, the issue resolution representing a change to the software development project. The system includes means for determining the one or more software component versions included in the issue resolution at a first time by accessing a data structure representing a history of changes to the issue resolution The system also includes a version checking module to receive one or more inputs specifying the one or more determined software component versions and a value corresponding to the first time. The version checking module determines, for each of the one or more determined software component versions, whether the determined version was included in the first project version at the first time.","In another embodiment, provided is a computer-readable medium having stored thereon a plurality of computer-readable signals. The signals define a data structure for use in conjunction with a configuration management software application for managing a software development project including a plurality of software components. The data structure represents a history of changes to an issue resolution, the issue resolution including one or more software components representing a change to the software development project. The data structure includes a plurality of entries. Each entry includes one or more values corresponding to a particular time, one or more values indicating a version of a software component and one or more values indicating whether the version of the software component was included in the issue resolution at the particular time.","In another embodiment, a method is provided for a software development project represented by a hierarchy of versions of the software project, each version including a set of versions of software components. The contents of an issue resolution representing a change to the software development project are modified. At a first time, one or more inputs specifying whether to include a first software component version in a first issue resolution are received. An entry is recorded in a data structure representing a history of changes to at least the first issue resolution. The entry includes one or more values corresponding to the first time, and one or more values specifying whether to include the first software component in the first issue resolution at the first time.","In another embodiment of the invention, a computer-readable medium is provided that stores computer-readable signals defining instructions that, as a result of being executed by a computer, instruct the computer to perform the method described in the preceding paragraph.","In yet another embodiment, a system is provided for a software development project represented by a hierarchy of versions of the software project, each version including a set of versions of software components. The system modifies the contents of an issue resolution representing a change to the software development project. The system includes a user interface to receive, at a first time, one or more inputs specifying whether to include a first software component version in a first issue resolution. The system also includes an issue resolution engine to record an entry in a data structure representing a history of changes to at least the first issue resolution. The entry includes one or more values corresponding to the first time, and one or more values specifying whether to include the first software component in the first issue resolution at the first time.","In another embodiment, a system is provided for a software development project represented by a hierarchy of versions of the software project, each version including a set of versions of software components. The system modifies the contents of an issue resolution representing a change to the software development project. The system includes a user interface to receive, at a first time, one or more inputs specifying whether to include a first software component version in a first issue resolution. The system also includes means for recording an entry in a data structure representing a history of changes to at least the first issue resolution. The entry including one or more values corresponding to the first time, and one or more values specifying whether to include the first software component in the first issue resolution at the first time.","Other advantages, novel features, and objects of the invention, and aspects and embodiments thereof, will become apparent from the following detailed description of the invention, including aspects and embodiments thereof, when considered in conjunction with the accompanying drawings, which are schematic and which are not intended to be drawn to scale. In the figures, each identical or nearly identical component that is illustrated in various figures is represented by a single numeral. For purposes of clarity, not every component is labeled in every figure, nor is every component of each embodiment or aspect of the invention shown where illustration is not necessary to allow those of ordinary skill in the art to understand the invention.","The following terms have the following meanings in this application. All definitions, as defined and used herein, should be understood to control over dictionary definitions, definitions in documents incorporated by reference, and\/or ordinary meanings of the defined terms.","As used herein, a \u201cplurality\u201d means two or more.","As used herein, a \u201csoftware component\u201d is a component of a larger software entity, for example, an application (program), a development project, a product, another software component, another type of software entity or any combination thereof. A software component may be, for example, a program, a file, a directory, a directory element, an object, a record, a table, another type of software component or any combination thereof. As used herein, a \u201cdirectory element\u201d is a directory or a file.","As used herein, a \u201cfile hierarchy\u201d is a logical hierarchy defining an organization of files. , described in more detail below, illustrates an example of a directory hierarchy. A file hierarchy includes at least a \u201croot directory\u201d at a highest level of the hierarchy. The root directory may include, at a second level in the hierarchy, one or more directory elements. As used herein, a \u201cdirectory element\u201d is an element of a directory, and may be any of a variety of types of software components (e.g., a file or directory). As used herein, a \u201cdirectory,\u201d including the root directory and any of its sub-directories, is a directory element (e.g., of a file hierarchy) that includes one or more other directory elements, e.g., files and\/or directories. As used herein, a \u201cchild element\u201d or \u201cchild\u201d of a directory (e.g., the root directory or any of its sub-directories) is an element included within the directory at a level immediately below the level of the hierarchy, whereas any element included within the directory, regardless of level, is referred to as a \u201cdescendant element\u201d or \u201cdescendant\u201d of the directory. Conversely, a directory is referred to herein as a \u201cparent directory\u201d or \u201cparent\u201d of any elements included in the directory at the level immediately below the directory, and is referred to as an \u201cancestor element\u201d or \u201cancestor\u201d of any included element, regardless of hierarchy level. Conceptually, a file hierarchy is not limited to a maximum number of levels, although in practice, this number may be limited by computational and storage capabilities of the system on which the file hierarchy is implemented.","As used herein, a \u201cstream\u201d is a software abstraction representing a version of a software development project (or other type of software entity) and including a set of software components. As used herein, a \u201cset\u201d of items may include one or more of such items. For example, a set of software components may include one or more software components.","As will be described in more detail below, a stream may be part of a stream hierarchy. As used herein, a \u201cstream hierarchy\u201d is a logical hierarchy of streams defining relationships between streams. , described in more detail below, illustrates an example of a stream hierarchy. A stream hierarchy includes at least one stream, the \u201csource stream\u201d, which is at a highest level of the hierarchy, and is the stream from which the other streams of the hierarchy are ultimately derived. A stream having one or more children is a \u201cparent stream\u201d or \u201cparent\u201d of each child stream. A parent stream, including the source stream, may have one or more \u201cchildren\u201d or \u201cchild streams,\u201d that each inherit one or more properties of the parent stream and its ancestors. For example, as will be described in more detail below, a child stream may be configured to inherit one or more software components and properties thereof from its parent. As will be explained in more detail below, although a child stream typically is derived directly (i.e., created from) its parent stream, this is not always the case, as a stream's relative position within the hierarchy may change over time. As a result, a child stream may have a parent from which the child was not derived.","As used herein, a \u201cworkspace\u201d is a type of stream in which a user (e.g., a developer) can make changes to the content of a software entity (e.g., a software development project). Workspaces may be limited to being at the bottom of a stream hierarchy and any stream ancestry chains (described below) determined for the stream hierarchy. In some embodiments, workspaces are configured such that they cannot have child streams; i.e., so that they cannot be a parent stream. Thus, in some embodiments, as will be described in more detail below, changes to a software entity are made only in workspaces, and then propagated to other streams.","As used herein, a \u201cuser interface\u201d is an application or part of an application (i.e., a set of computer-readable instructions) that enables a user to interface with an application during execution of the application. A user interface may include code defining how an application outputs information to a user during execution of the application, for example, visually through a computer screen or other means, audibly through a speaker of other means, and manually through a game controller or other means. Such user interface also may include code defining how a user may input information during execution of the application, for example, audibly using a microphone or manually using a keyboard, mouse, game controller, track ball, touch screen or other means.","As used herein, a \u201cvisual user interface\u201d is the portion of the user interface that defines how information is visually presented (i.e., displayed) to the user, and defines how the user can navigate the visual presentation (i.e., display) of information and input information in the context of the visual presentation. During execution of the application, the visual interface controls the visual presentation of information and enables the user to navigate the visual presentation and enter information in the context of the visual presentation. Types of visual user interfaces range from command-driven interfaces, where users type commands, menu-driven interfaces, where users select information from menus, and combinations thereof, to GUIs, which typically take more advantage of a computer's graphics capabilities, are more flexible, intuitive and easy to navigate and have a more appealing \u201clook-and-feel\u201d than command-driven and menu-driven visual user interfaces.","As used herein, the visual presentation of information presented by a user interface, visual user interface or GUI is referred to as a \u201cuser interface display\u201d, \u201cvisual user interface display\u201d or a \u201cGUI display\u201d, respectively.","As used herein, an \u201capplication programming interface\u201d or \u201cAPI\u201d is a set of one or more computer-readable instructions that provide access to one or more other sets of computer-readable instructions that define functions, so that such functions can be configured to be executed on a computer in conjunction with an application program. An API may be considered the \u201cglue\u201d between application programs and a particular computer environment or platform (e.g., any of those discussed below) and may enable a programmer to program applications to run on one or more particular computer platforms or in one or more particular computer environments.","As used herein, a \u201cdata structure\u201d is an ordered arrangement of data defined by computer-readable signals recorded by a program for use by that or another program(s). These signals may be read by a computer system, stored on a medium associated with a computer system (e.g., in a memory, on a disk, etc.) and may be transmitted to one or more other computer systems over one or more communications media such as, for example, one or more segments of a network.","The indefinite articles \u201ca\u201d and \u201can,\u201d as used herein in the specification and in the claims, unless clearly indicated to the contrary, should be understood to mean \u201cat least one.\u201d","The phrase \u201cand\/or,\u201d as used herein in the specification and in the claims, should be understood to mean \u201ceither or both\u201d of the elements so conjoined, i.e., elements that are conjunctively present in some cases and disjunctively present in other cases. Other elements may optionally be present other than the elements specifically identified by the \u201cand\/or\u201d clause, whether related or unrelated to those elements specifically identified. Thus, as a non-limiting example, a reference to \u201cA and\/or B\u201d, when used in conjunction with open-ended language such as \u201ccomprising\u201d can refer, in one embodiment, to A only (optionally including elements other than B); in another embodiment, to B only (optionally including elements other than A); in yet another embodiment, to both A and B (optionally including other elements); etc.","When separating items in a list, \u201cand\/or\u201d shall be interpreted as being inclusive, i.e., the inclusion of at least one, and potentially including more than one, of a number or list of elements, and, optionally, additional unlisted items. Only terms clearly indicated to the contrary, such as \u201conly one of\u201d or \u201cexactly one of,\u201d or, when used in the claims, \u201cconsisting of,\u201d will refer to the inclusion of exactly one element of a number or list of elements. In general, the term \u201cor\u201d as used herein shall only be interpreted as indicating exclusive alternatives (i.e. \u201cone or the other but not both\u201d) when preceded by terms of exclusivity, such as \u201ceither,\u201d \u201cone of,\u201d \u201conly one of,\u201d or \u201cexactly one of.\u201d \u201cConsisting essentially of\u201d, when used in the claims, shall have its ordinary meaning as used in the field of patent law.","As used herein in the specification and in the claims, the phrase \u201cat least one,\u201d in reference to a list of one or more elements, should be understood to mean at least one element selected from any one or more of the elements in the list of elements, but not necessarily including at least one of each and every element specifically listed within the list of elements and not excluding any combinations of elements in the list of elements. This definition also allows that elements may optionally be present other than the elements specifically identified within the list of elements to which the phrase \u201cat least one\u201d refers, whether related or unrelated to those elements specifically identified. Thus, as a non-limiting example, \u201cat least one of A and B\u201d (or, equivalently, \u201cat least one of A or B,\u201d or, equivalently \u201cat least one of A and\/or B\u201d) can refer, in one embodiment, to at least one, optionally including more than one, A, with no B present (and optionally including elements other than B); in another embodiment, to at least one, optionally including more than one, B, with no A present (and optionally including elements other than A); in yet another embodiment, to at least one, optionally including more than one, A, and at least one, optionally including more than one, B (and optionally including other elements); etc.","As used herein, whether in the written description or the claims, the terms \u201ccomprising\u201d, \u201cincluding\u201d, \u201ccarrying\u201d, \u201chaving\u201d, \u201ccontaining\u201d, \u201cinvolving\u201d, and the like are to be understood to be open-ended, i.e., to mean including but not limited to. Only the transitional phrases \u201cconsisting of\u201d and \u201cconsisting essentially of\u201d, respectively, shall be closed or semi-closed transitional phrases, as set forth, with respect to claims, in the United States Patent Office Manual of Patent Examining Procedures (Original Eighth Edition, August 2001), Section 2111.03.","Described herein are systems and methods for automatically determining for a stream (or other type of version of a project, e.g., a branch), which software component versions defined for an issue resolution at a particular time (e.g., a current time or a time in the past) are included in the stream. Such determination may include determining the software component versions included in an issue resolution at a particular time, and, for each determined version, determining whether the version is included in the stream.","In some embodiments, the definition of an issue resolution is changed over time, even after the issue resolution has been propagated to a stream. In such embodiments, the above determinations still may be made accurately for the stream.","From the above determinations, software component versions that should be propagated to a stream so that the stream has a complete issue resolution may be determined. Further, differences between streams (e.g., from an issue resolution perspective) may be determined.","Any of the following data structures and combinations thereof may be provided in embodiments of the invention to assist in the aforementioned determinations: one or more data structures representing a history of changes to an issue resolution (e.g., the component versions defined therefor); one or more data structures that represent a history of changes to the component versions included in streams; and one or more data structures (e.g., historical and non-historical) that represents relationships between versions of software components.","Some embodiments described below do not require the recording (e.g., at the explicit instruction of a user) of the fact that an issue resolution as a whole or in part (i.e., less than all of the component versions thereof) was included or not included in a particular stream at a particular time. Rather, in such embodiments, a determination may be made \u201con the fly\u201d (i.e., dynamically), for example, by accessing one or more of the aforementioned data structures, as is described below in more detail.","A user interface may be provided that enables a user (e.g., a developer, project leader, team leader, etc.) to enter an issue, and to assign one or more software components and versions thereof to a resolution of the issue. The user interface may enable a user to dynamically configure an issue tracking system (e.g., dynamically configure the issue tracking system after it has been deployed on a customer site).","Although several embodiments discussed herein are described primarily in reference to files, it should be appreciated that the invention is not limited thereto. Embodiments of the invention may be applied to or implemented using any of a variety of types of software components such as, for example, any of those described above. Further, although several embodiments described herein are described primarily in reference to a software development project, it should be appreciated that the invention is not limited thereto. Embodiments of the invention may be applied to or implemented using any of a variety of types of software entities such as, for example, any of those described above.","Further, although some embodiments discussed herein are discussed primarily in relation to streams, the invention is not so limited. The methods and systems described herein may be applied to any type of version of a software development project or other entity.","In some embodiments of the invention, every transaction affecting a software entity (e.g., a software development project) is recorded, for example, in a database. A transactions may include: a creation, modification or deletion of any of a software entity, a software component or a stream; a promotion of a software component from one stream to another, an updating of a stream; a change of location of a stream within a stream hierarchy; a change of location of a software component within a file hierarchy; the creation, modification or deletion of an issue and\/or an issue resolution; the creation, modification or deletion of any information (e.g., meta data) relating to any of the foregoing; any other type of transaction; and any combination of the foregoing.","Each transaction may be assigned a unique transaction identifier, for example a number. Such an identifier may be referred to herein as a \u201ctransaction number.\u201d A time (e.g., a standard time) at which the transaction occurred may be associated with each transaction, such that each transaction corresponds to a time. The association of a transaction and a time may be stored as an entry in a data structure. Such a data structure may be referred to herein as \u201ctransaction data structure,\u201d and may include a plurality of entries, each entry representing a transaction and including a transaction number, a time and possibly other information (e.g., a description of the transaction).","Each transaction may result in a new entry being created in one or more other data structures as well, for example, any of data structures -. described below in more detail. Each new entry may include the transaction number associated with the transaction. The transaction data structure and the other data structures together may form a historical project development database, from which the state of various properties (e.g., content and other parameters) of a development project at any time during the life of the project may be determined and recreated. Specific examples of this ability to determine and recreate a past state of one or more parameters of a project is discussed in more detail below.","The function and advantage of these and other embodiments of the present invention will be more fully understood from the examples described below. The following examples are intended to facilitate an understanding of the invention and to illustrate the benefits of the present invention, but do not exemplify the full scope of the invention.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 1","b":["100","100","102","106","108","102","114","110","112"]},"The issue tracking engine  may be configured to create one or more issue resolutions, to associate\/disassociate software component versions with issue resolutions based on the user inputs , and to store information relating thereto in one or more of the data structures  of database , for example, as described in more detail below. As used herein, associating a software component version with an issue resolution is the same as adding a software component version to an issue resolution. Similarly, disassociating a software component version from an issue resolution is the same as removing a software component version from an issue resolution.","Each modification (e.g., addition, change, deletion) to an issue resolution may be stored along with a transaction number so that a history of changes to issue resolutions may be maintained.","Engine  may be configured to access one or more of the data structures , based on user inputs , to determine the software component versions included in an issue resolution at a particular time. Further, for each determined component version, engine  may be configured to determine whether the software component version is\/was included in a stream at a particular time. From these determinations, issue tracking engine  may determine which component versions included in an issue resolution at a particular time are included in a stream at a particular time. For the remainder of the detailed description, determining whether a software component version \u201cwas\u201d included in a stream at a particular time (e.g., a queried time) covers a scenario in which the particular time is the current time. Thus, even if the particular time is the current time, an act of determining may still be referred to in the past tense, e.g., determining whether the software component version \u201cwas\u201d included in a stream at a particular time.","The remainder of the detailed description proceeds as follows: First, file hierarchies, stream hierarchies and software component versions () are discussed to provide context for the remaining description. This discussion is followed by an example of a method of modifying an issue resolution (e.g., associating and disassociating software component versions). (). Next, various data structures that may be used in embodiments of the invention are described (), followed by an example of a method of determining the software component versions of an issue resolution included in a stream at a particular time (). The description concludes with a more detailed example of a system for modifying an issue resolution and for determining which software component versions of an issue resolution are included in a stream at a particular time ().",{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 2","b":["200","200","201","201","202","208","210","204","206","212","202","216","218","214","218","220","124","220","222","224","232","226","228","230","234"]},"File hierarchy , in particular File , is referred to throughout the remainder of the detailed description, as is the stream hierarchy  illustrated in , which will now be described.",{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 3","b":["300","301","301","302","304","306","308","310","302","301","308","310"]},"It should be appreciated that a user may make changes to software components outside of the scope of the project itself. For example, some CM applications, such as those available from AccuRev, Inc., enable a user to create, change and delete software components (which may have originated within the project) on the user's computer, for example, using any of a variety of editors or software tools. However, the user has the option of specifying whether these changes are recorded as part of the project. If not recorded, the changes do not affect the software project. The systems and methods described herein are concerned with changes to a software project, not changes made by a user that are not recorded as part of the project. Accordingly, for the remainder of the detailed description, when software components are described as being modified, changed, added or removed from a workspace, it is meant that these transactions have been recorded as part of the workspace, unless otherwise specified.","If changes made within a workspace are to be made part of other versions (e.g., streams) of the project, the elements affected by the changes may be propagated up through the hierarchy to the source stream (e.g., source stream ). As used herein, to \u201cpromote\u201d means to propagate up a hierarchy, whereas \u201cupdate\u201d means to propagate down through a hierarchy. For example, a file added to workspace  then may be promoted to workspace , from which the file then may be promoted to source stream . Stream  then may be updated with the added file.","GUI display  may include visual indicators to assist a user in determining whether a stream is a workspace. For example, GUI display  provides workspace indicators  and  to indicate that streams  and , respectively, are workspaces. Other indicators may be used.","GUI display  also may include visual indicators to indicate when a stream is in progress. A stream is \u201cin progress\u201d when the stream includes one or more changes to a project (e.g., a new element, a modified element or a purged element) that have not been promoted to its parent stream. If a change in a first stream has not been promoted to the first stream's parent stream, then the first stream and its descendants include a change to the project that is not included in the other remaining streams. Accordingly, the contents of the first stream and its descendant streams are different than the contents of the remaining streams, such that the visual indicator indicates the existence of this difference.","GUI display  may include visual indicator  to indicate that stream  is in progress. For example, a directory may have been removed from workspace  and then promoted to stream , but not promoted (not yet at least) from stream  to source stream . Accordingly, visual indicator  indicates that stream  and its descendant  have different content than the remaining streams  and . This condition will remain until the changes are promoted from stream  to parent stream . Before the changes were promoted from workspace  to stream , a visual indicator may have been included in GUI display  to indicate that workspace  was in progress. Such a visual indicator may have been a same or different visual indicator than the visual indicator . It should be appreciated that such a visual indicator may be any kind of visual indicator and is not limited to the visual indicator  illustrated in .","Such an indicator may be beneficial for several reasons. For example, a user can determine from a glance at GUI display whether a particular stream has changes that have not been promoted. This quick look saves the user the time that typically would be required to open a stream and examine its contents. Another benefit is that a user (e.g., a supervisor or project team leader) can visually determine the progress (to an extent) of an entire project from a brief inspection of GUI display . Moreover, as a user becomes more familiar with GUI display , the information gleaned therefrom may become more intuitive.","As described above, each stream in a stream hierarchy (e.g., hierarchy ) may inherit one or more properties from its ancestor streams. For example, unless an element is currently in progress within a stream (e.g., a workspace), the determination of whether or not the element is included within the stream may be determined based on ancestor streams, as will be described in more detail below.","In some embodiments, a stream's position within the hierarchy may change over time. For example, a stream's parent stream, and thus its ancestors, may be different than the parent stream and ancestors from which the stream was originally derived. For example, workspace  may originally have been created as a child of stream , and then moved in the hierarchy to be a child of stream . Accordingly, although element  originally inherited properties from stream  from which it was derived, element  no longer inherits properties from stream , but now inherits properties from source stream . In another example, element  may initially have been a child of source stream  and then moved to be a child of stream .","In some embodiments, a user interface (e.g., the GUI that provides GUI display ) may enable a user to select a stream (e.g., any of streams -). The user may be enabled to select a stream using any of a variety of types of input devices, for example, any of those described herein. The GUI preferably enables the user to move the location of a stream within a hierarchy such as, for example, by clicking and dragging a stream from one location to another on the GUI display . Further, such a GUI may enable the user to double-click on a stream or otherwise select a stream, resulting in the user being presented with a view of the stream, through which the user may modify the stream.","Having described directory hierarchies and stream hierarchies, software component versions will now be described.","As discussed above, a development effort may involve multiple developers working on multiple versions of a software project concurrently, each project version including a set of software component versions. In some CM applications, for example, those available from AccuRev, Inc. of Lexington, Mass., a distinction is made between a \u201cvirtual version\u201d and a \u201creal version\u201d of a software component. This distinction may assist in tracking which versions of a software component are included in a stream (or other type of project version) at a particular time, as is discussed in more detail below in relation to .","Typically, for a given software component included in a project, each version of the project includes a different \u201cvirtual version\u201d of the software component. As used herein, a \u201cvirtual version\u201d of a software component is an instance of the software component. A virtual version may have the same content as, or different content than, other virtual versions of the software component, including the software component from which it was created. Thus, although it is common in the field of software configuration management to refer to different instances of a software component (e.g., components in different branches of a project) as different \u201cversions\u201d of the component (even if the content of each \u201cversion\u201d is in fact the same), such instances are referred to herein as \u201cvirtual versions.\u201d","As used herein, a \u201creal version\u201d is an edition of a software component having different content than the previous real version of a software component, from which the edition was created. Thus, if a change is made to a software component and recorded (as part of a project), a new real version of the software component may be created.","For example, referring to stream hierarchy  in  and directory hierarchy  of , if file  were created in workspace  and promoted to stream , the virtual version (i.e., instance) of file  in each stream would be different, although the real version (i.e., edition) of the file would be the same. If file  then were edited in workspace , workspace  would have a different real version of file  than workspace .","As used herein, a \u201cversion\u201d of a software component (e.g., a file) or a \u201csoftware component version\u201d means the real version of the software component, not the virtual version of the software component. Thus, in determining a software component version included in an issue resolution or a stream, the real version of the software component is determined. As discussed above, in some embodiments of the invention, modifications to a software component (e.g., add, change, remove) are made in workspaces only. In such embodiments, each version (i.e., real version) of a software component may correspond to the workspace in which it was created.",{"@attributes":{"id":"p-0098","num":"0097"},"figref":["FIG. 4","FIGS. 8-12"],"b":["401","401","501","800","1200"]},"In , the horizontal axis (i.e., from left to right) corresponds to time or transaction number, as indicated by the transaction numbers  running along the top of the figure (e.g., transaction numbers -). The vertical axis in  corresponds to streams of a stream hierarchy, for example, streams , ,  and  of stream hierarchy . For each stream shown in , the number following the name of the stream represents a stream ID of the stream. For example, for stream , the stream ID equals \u201c1\u201d. Stream IDs are described in more detail below in relation to . It should be appreciated that the order in which stream , ,  and  are listed in  does not necessarily correlate to their position within stream hierarchy .","Version ancestry graph  includes graph elements -. The horizontal position of each graph element corresponds to the transaction number that created the virtual version represented by the graph element, and the vertical position of the graph element represents the stream in which the virtual version represented by the graph element is included. As will be described in more detail below, in some embodiments of the invention, each version (i.e., real version or edition) of a software component is uniquely identified by a stream\/edition pair (e.g., a stream ID\/edition ID pair), and virtual version (i.e., instance) of a software component is uniquely identified by a stream\/instance pair (e.g., a stream ID\/instance ID pair). In each graph element -, the virtual version represented by the element may be defined by the pair of numbers not surrounded by parenthesis, and the real version represented by each graph element may be defined by the pair of numbers surrounded by parenthesis.","For example, graph element  may represent a virtual version defined by stream\/instance pair 4\/1, corresponding to a real version defined by stream\/edition pair 4\/1. In other words, graph element  indicates that, in transaction , the first instance of the component in stream  (stream ID=4) was created, and this first instance corresponds to the first edition of the software component created in stream .","As another example, graph element  may represent a virtual version of the component identified by stream\/instance pair 1\/1, which corresponds to a real version defined by the stream\/edition pair 4\/1. In other words, graph element  indicates that, in transaction 8, the first instance of the component in stream  (stream ID=1) was created, and this first instance corresponds to the first edition of the software component created in stream .","It should be appreciated that each creation of a new version (i.e., a new edition) of a software component results in the creation of a new virtual version (i.e., a new instance) of the software component, but not all creations of a new virtual version of the software component result in the creation of a new real version. Further, several virtual versions of a software component may correspond to a same real version, as shown in .","The solid lines in  (e.g., , , , , , , and ) may indicate an instance relationship\u2014i.e., solid lines point from a first virtual version of a software component to a second virtual version of a software component from which the first version was created. The dashed lines (e.g., ,  and ) in  represent a relationship between a virtual version of a software component and it's corresponding real version\u2014i.e., the dashed lines point from a virtual version of a software component to its corresponding real version. The bold lines (e.g., bold lines , ,  and ) in  represent a real version relationship\u2014i.e., each bold line points from a first real version of a software component to a second real version of the software component from which the first real version was created.",{"@attributes":{"id":"p-0105","num":"0104"},"figref":["FIG. 5","FIGS. 13-19"],"b":["501","501","404","410","412","414","418","502","6","9","10","11","13","501","401"]},{"@attributes":{"id":"p-0106","num":"0105"},"figref":"FIG. 6","b":"600"},"In Act , an instruction indicating to add or remove a version of a software component from an issue resolution may be received. For example, a user may be presented with the GUI display shown in , and the user may select or enter an issue resolution and one or more software components to add\/remove to\/from the issue resolution.","Digressing briefly from method ,  is a screen shot illustrating an example of a GUI display  for associating\/disassociating versions of software components with\/from an issue resolution. GUI display  may include an issue field  visually indicating the issue corresponding to the issue resolution. The GUI providing GUI display may enable a user to select or enter issue numbers in field .","GUI display  also may include component versions table  listing versions of software components included in the issue resolution corresponding to the issue specified in field . Table  may include one or more entries, for example, entries  and . Each entry may include a value for any of software component ID field , version field  and component location field . Table  may include more or less than the number of entries and fields shown in , and the order of entries - and field - may be different than as shown in .","For each entry, software component ID field  may hold a value representing a unique identifier for a software component, for example, an EID. For example, entry  specifies a software component ID of \u201c35.\u201d","For each entry, version field  may hold a value representing a real version of a software component, for example, a stream\/edition pair. For example, in entry , field  specifies real version 7\/1. In other words, field  of entry  specifies the first edition, in the stream identified by stream ID \u201c7\u201d of the software component having an EID of \u201c35.\u201d","For each entry, component location field  may specify the location of the software component version identified by fields  and . For example, the location may include a directory path portion  and a name portion . For example, in entry , component location field  specifies directory path \u201c\/menu bar\/tools,\u201d and the name \u201cfoo.cc.\u201d The component location specified in field  may correspond to a position within a directory hierarchy, for example, within directory hierarchy .","The GUI providing GUI display  may enable a user to add and remove entries from table , and provide the requisite information for fields -. Some of the information in fields - may be provided automatically in response to information being entered for other fields. For example, if a user selects and\/or enters a component location in field , the component ID and version may be determined from this location and automatically provided in fields  and . The GUI that provides GUI display  may provide a variety of other displays, for example, displays corresponding to any of tabs .","Returning to method , in Act , an entry may be recorded in a historical issue resolution data structure, for example, data structure  shown in . The entry may include any of a transaction number corresponding to the time in which the entry was made, and whether the version was included in the resolution at the time. For example, the entry may indicate that the entry was made in response to a software component version being added to the issue resolution or may indicate that the entry was made in response to a software component version being removed from an issue resolution.","Data structures , , , , and , each of which may be used in determining which software component versions of an issue resolution are included in a stream at a particular time, will now be described. Table 1. below shows stream IDs of some of the streams of stream hierarchy  described above in relation to . The values in Table 1. are used to illustrate examples of the contents of data structures -, and are referred to throughout the specification.",{"@attributes":{"id":"p-0116","num":"0115"},"figref":["FIG. 8","FIGS. 13 and 14"],"b":["800","800","800"]},"Data structure  may include a plurality of entries, including entries -. Each entry may include a value for any of: issue number field ; software component (element) identifier (EID) field ; transaction number field ; stream ID field ; edition field ; and member field . The order of entries - and fields - may be different than as shown in .",{"@attributes":{"id":"p-0118","num":"0117"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Stream IDs of Streams"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Stream ID","FIG. 2 Identifier","Name"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"1","302","acme"]},{"entry":[{},"2","306","fixes"]},{"entry":[{},"3","304","interface"]},{"entry":[{},"4","310","fixes_fred"]},{"entry":[{},"5","308","interface_george"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"For each entry, issue number field  may hold a value representing a unique identifier of an issue corresponding to the issue resolution. EID field  may hold a value representing a unique identifier of a software component. For example, referring to , file  may have an EID of 2. and file  may have an EID of 3. These EID values are used as examples throughout the detailed description.","For each entry, transaction number field  may hold a value representing a transaction number corresponding to the time at which the entry was made, and stream ID field  may hold a stream ID of the stream (e.g., the workspace) corresponding to the version (i.e., the real version) represented by the entry.","For each entry, field  may hold an edition ID corresponding to the version of the software component represented by the entry. Together, fields  and  may specify a stream\/edition pair defining a real version of a software component. Member field  may hold a value representing whether the software component version represented by the entry is currently a member of the issue resolution represented by the entry. For example, an entry may have resulted from a software component version being added to (i.e., associated with) an issue resolution, in which case member field  may indicate that the software component version is a member at the time represented by transaction number field . Further, the entry may have resulted from the software component version being removed from (i.e., disassociated from) the issue resolution, in which case member field  may indicate that the software component version is not a member of the issue resolution at the time represented by transaction number field . The value held in member field  may be any of a variety of types, for example, a Boolean value where \u201c1\u201d means that the software component is a member at the time corresponding to the entry, and a value equal \u201c0\u201d means that the software component version is not a member of the issue resolution at the time corresponding to the entry.","Referring to  and Table 1. above, entries - may result from the following transactions. Entry  may have resulted from transaction twenty, which added the real version of file  (EID=2) defined by stream\/edition pair 5\/1 (e.g., the first edition of file  in stream ) to the issue resolution of issue . Entry  may have resulted from transaction number twenty as well, in which real version 5\/1 of file  (i.e., the first edition of file  (EID=3) in workspace ) was added to the issue resolution of issue .","Entry  may have resulted from transaction twenty-one, in which real version 5\/3 of file  (i.e., the third edition of file  in stream ) was added to the issue resolution. As illustrated by the combination of entries  and  (and the combination of entries  and ), if a later version of a software component is added to, or removed from, a historical issue resolution data structure (e.g., structure ), entries made as a result of adding or removing previous versions of the software component still may remain in the historical data structure. Accordingly, a history may be maintained of the different versions of a same software component being included in an issue resolution at different times.","Entry  may have resulted from transaction twenty-two, in which real version 5\/1 of file  (i.e., the first edition of file  in workspace ) was removed from the issue resolution corresponding to issue . Accordingly, member field  may be set equal to \u201c0\u201d in entry .","Such transactions may have been performed by a user using the user interface display  described above in relation to .","Having described historical issue resolution data structure , data structures , ,  and  will now be described, each of which may be used in determining which software component versions of an issue resolution are included in a stream at a particular time.",{"@attributes":{"id":"p-0127","num":"0126"},"figref":"FIG. 9","b":["900","900","900","900"]},"Data structure  may include a plurality of entries -. Data structure  may include more or less than the number of entries and fields shown in , and the order of entries - and fields - may be different than as shown in .","Each entry may include a value for any of the following fields: stream ID field , EID field , transaction number field , and in-progress field . Stream ID field  may hold a value specifying an ID of the stream to which the entry applies. EID field  may hold the EID of the software component represented by the entry. Transaction field  may hold a value representing a transaction number or other value corresponding to a time at which the entry was made.","In-progress field  may hold a value indicating whether the software component is in progress for the stream at the time corresponding to the value of transaction field . As described above, a software component of a stream is \u201cin progress\u201d if a modification has been made to the software component (i.e., it has been added, modified, or removed) and the stream has not been promoted to a parent stream. If a software component is in progress within a stream, then the version of the software component in the stream and its children may be different than the version of the software component elsewhere within the stream hierarchy. For example, the software component may not even exist in other streams in the hierarchy. Alternatively, the software component may have been removed from the subject stream and its children, but still may be present in other streams of the stream hierarchy.","Each of entries - resulted from a transaction involving file  (EID=3). The transactions that resulted in entries - are described in more detail below in relation to how these transactions and others affect data structures  and , which will now be described.",{"@attributes":{"id":"p-0132","num":"0131"},"figref":["FIG. 10","FIG. 4","FIG. 10","FIG. 10"],"b":["1000","401","1000","1014","1028","1002","1004","1006","1008","1010","1012","1000","1014","1028","1002","1012"]},"Each entry may specify a virtual version of a software component, the corresponding real version of the software component, and the transaction number of the transaction that created the virtual version of the software component. A new entry may be added to data structure  each time a transaction results in a new virtual version of a software component.","For each entry, EID field  may hold a value representing a unique identifier (e.g., a number) of a software component, and transaction number field  may hold a value representing a transaction number or other value corresponding to a time at which the entry was made.","Stream ID field  may hold a value representing a stream ID of the stream of a virtual version of the software component specified in field . Field  may hold a value representing an identifier of the instance of the virtual version of the software component specified in field . Thus, the combination of fields  and  may hold values specifying a stream\/instance pair defining the virtual version of the software component specified in field , created at a time corresponding to the transaction number specified in field .","Fields  and  may hold a stream ID and an edition ID, respectively, this combination defining the real version of the software component corresponding to the virtual version defined by fields  and .","The transactions that resulted in entries - are described below after the description of data structure .",{"@attributes":{"id":"p-0138","num":"0137"},"figref":["FIG. 11","FIG. 5","FIG. 10","FIG. 11"],"b":["1100","501","1100","1112","1118","1102","1104","1106","1108","1110","1100","1112","1118","1102","1110"]},"Each entry of data structure  may specify a parent\/child relationship between real versions of a software component. As used herein, a \u201cparent\u201d version of a particular version of a software component is the version from which the particular version was created. Conversely, a \u201cchild\u201d version of a particular version of a software component is a version created from the particular version. A new entry may be added to data structure  each time a transaction results in the creation of a new real version of a software component.","For each entry, EID field  may hold a value representing a unique identifier (e.g., a number) of a software component. The combination of fields  and  may hold values specifying a unique stream\/edition pair defining a real version of the software component specified by field . This real version is the parent of the real version defined by the unique stream\/real version pair specified by fields  and .","Having now described the arrangement of data structures , , and , examples of transactions that may result in the entries of these data structures illustrated in  will now be described. Reference should be made to the element hierarchy  in , the stream hierarchy  in , and Table 1. Reference should also be made to ancestry graphs  and  of , respectively, which provide a visual representation of information represented in data structures -.","In transaction six, file  may have been created in workspace , resulting in the creation of a new virtual version and a new real version of file . This transaction may have resulted in entry  of data structure  and entry  of data structure . As indicated by entry , because file  is yet to be promoted from workspace  to stream , in-progress field  indicates that file  is in progress in workspace . Field  of data structure  indicates that the virtual version (4\/1) and the real version (4\/1) resulting from transaction six are the same.","Transaction six does not result in the creation of an entry in data structure  because file  is a new file for which version ancestry has not yet been established.","In transaction seven, file  may be promoted from stream  to stream , resulting in the creation of a new virtual version of file . Transaction seven may result in entries  and  in data structure  and entry  in data structure . As indicated by entries  and , as a result of transaction seven, file  is no longer in-progress in workspace , but is in-progress in stream . Entry  in data structure  indicates that virtual version (i.e., stream\/instance pair) 2\/1 corresponds to real version (i.e., stream\/edition pair) 4\/1. Transaction seven does not result in the creation of an entry in data structure  because transaction seven did not result in the creation of a new real version of the file , but merely the creation of a new virtual version.","In transaction eight, file  may be promoted from stream  to source stream , resulting in the creation of a new virtual version of file . Transaction eight may result in entries  and  of data structure  and entry  of data structure . Transaction eight does not result in the creation of an entry in data structure  because a new version of file  has not been created.","In transaction nine, file  may be modified in workspace  and the modification recorded to create a new virtual version and a new real version of file . Transaction nine may result in entry  in data structure , entry  in data structure  and entry  in data structure . Entry  reflects that real version 5\/1 was created from real version 4\/1.","In transaction ten, file  may be modified in workspace  and the modification recorded to create a new virtual version and a new real version of file . Transaction ten may result in entry  in data structure , entry  in data structure  and entry  in data structure . Entry  indicates that new real version 4\/2 was created from real version 4\/1.","In transaction eleven, file  may be modified in stream  and the modification recorded to create a new virtual version and a new real version of file . Transaction eleven may result in entry  in data structure , entry  in data structure  and entry  in data structure .","In transaction twelve, file  may be sent from workspace  to workspace , thereby creating a new virtual version of file . In other words, rather than promoting file  from workspace  to stream  to stream , a user (e.g., a developer, project leader, etc.) may directly send (e.g., copy and paste) file  from workspace  to workspace , thereby replacing whatever version of file  currently resides in workspace . For example, a user interface (e.g., a GUI) may enable a user to specify file  (e.g., by typing in an identifier or selecting it from a user interface display), and send file  to workspace .","Transaction twelve may result in entry  in data structure  and entry  in data structure . Entry  of data structure  indicates that virtual version 5\/2 of the file  created in workspace  corresponds to real version 4\/3 of the software component in workspace . It should be appreciated that transaction twelve did not result in an entry in data structure  because the sending of file  did not result in the creation of a new real version.","In transaction thirteen, file  may be modified in workspace  and the modification recorded to create a new virtual version and a new real version of file . Transaction thirteen may result in entry  in data structure , entry  in data structure  and entry  in data structure . Entry  indicates that the new real version 5\/3 of file  was created from real version 4\/3 of file .","Another data structure that may be used in determining which software component versions of an issue resolution are included in a stream at a particular time is data structure  of .  is a block diagram illustrating an example of a historical stream hierarchy data structure .","As described above in relation to , the position of a stream within a stream hierarchy may change over time. Data structure  may be used to record these changes such that the state of the stream hierarchy at a particular time (e.g., a past time) may be determined. Further, a stream ancestry chain of a stream may be determined using data structure , for example, as described below in relation to .","Data structure  may include a plurality of entries -. Each entry may hold a value for any of the following fields: stream ID field ; name field ; parent stream ID field ; and transaction field .","For an entry: stream ID field  may hold a unique identifier for a stream; name field  may hold a name of the stream identified in field ; parent stream ID field  may hold a unique identifier of the parent stream of the stream identified in field ; and transaction field  may hold a transaction number (or another value corresponding to a time at which the entry was created). Each entry may have been created to record a change of a name of a field or a change of a relationship between a stream and its parent (i.e., a change of location within the stream hierarchy). For example, entries - may have resulted from the following transactions, which may be better understood with reference to Table 1. and .","Entry  may have resulted from the creation of stream  (\u201cacme\u201d). In some embodiments, a parent stream ID of \u201c0\u201d may be assigned as the stream ID of a parent of a source stream because such a value is not eligible to be a stream ID of a stream. Thus, a parent stream ID equal to \u201c0\u201d may serve as an indication that an entry in data structure , for example, entry , represents a source stream (e.g., stream ). Other values may be used as a parent stream ID, as long as the value is not eligible to be a stream ID of a stream.","Entries  and  may have resulted from the creation of streams  and , respectively, as children of source stream . Entry  may have resulted from the creation of stream  as a child of stream , and entry  may have resulted from the creation of stream  as a child of stream .","Data structure  may represent a history of stream hierarchy . It should be appreciated that data hierarchy  is merely one example of how stream hierarchy  may have been formed. Stream hierarchy  may have been formed in any of a variety of ways, resulting in one or more entries in historical stream hierarchy data structure  different from those depicted in . For example, in the Poole application, historical stream hierarchy data structure  illustrates entries resulting from a change of a stream's name and a change in a stream's position within a stream hierarchy.","Having now described data structures -, which may be used in a method of determining which software component versions of an issue resolution are included in a stream at a particular time, an example of such a method will now be described.",{"@attributes":{"id":"p-0160","num":"0159"},"figref":"FIG. 13","b":["1300","1300","1300"]},"In Act , a query may be received. The query may specify any of an issue resolution, a stream and a time or transaction number. A time specified by a query may be a standard time (e.g., Jan. 2, 2004, 1:52:15). If no time or transaction number is specified by the query, time may default to the time at which the query was received. For example, a user may simply select an issue resolution (e.g., using a user interface display such as GUI display  described above) without specifying any time at all.","If the query specifies a time, then the time may be translated into a transaction number, for example, by accessing a transaction data structure (e.g., such as the one described above) that maintains a mapping between transaction numbers and time. For example, the time may be translated to the transaction number of the transaction recorded closest to and preceding the time specified in the query.","As used herein, a \u201cqueried time\u201d is either the time specified by the query or a time corresponding to the transaction number specified by the query. The time corresponding to a transaction number may be the time indicated in the entry of the transaction data structure, or an index derived therefrom, that represents the transaction identified by the transaction number. Unless otherwise stated, throughout the description of method , the queried time will be a time corresponding to transaction  or later (e.g., a present time). Further, unless otherwise stated, the specified issue is issue  and the specified stream is stream  (\u201cinterface_george\u201d, EID=5).","In Act , the software component versions included in the issue resolution at the queried time may be determined, for example, as described below in relation to method .","In Act , for each software component version determined in Act , it may be determine whether such software component version was in the queried stream at the queried time. For example, Act  may be performed as described below in relation to Act .","In Act , the results of the query may be reported. For example, the results of the query may be displayed to a user on a user interface display, stored in a data structure (e.g., on a volatile medium such as local memory for temporary use or on a non-volatile medium for more permanent use), communicated across a network, etc. In some embodiments, a user interface (e.g., GUI) display may present the results of the query in a tabular format, where each row of a table represents a software component version. In such embodiments, each row may hold a value representing any value stored in any of fields - of data structure  described above, and may include values for other fields as well, for example, a software component name and\/or a stream name.","Method  may include additional acts. Further, the order of the acts performed as part of method  is not limited to the order illustrated in , as the acts may be performed in other orders and\/or one or more of the acts may be performed in parallel (at least partially).",{"@attributes":{"id":"p-0168","num":"0167"},"figref":"FIG. 14","b":["1400","1400","1400"]},"In Act , entries in a historical issue resolution data structure that correspond to the queried issue may be determined. For example, referring to data structure  described above, if the query specifies issue , then entries - may be determined in Act . It should be appreciated that data structure  may include entries corresponding to issues other than issue .","In Act , the entries determined in Act  may be sorted according to software component (e.g., by software component identifier). For example, entries  and , which each specify software component  (EID=2), may be sorted together, and entries  and , which each specify software component  (EID=3), may be sorted together.","In Act , a current component variable may be set equal to a next software component of the sorted entries. Act  may represent a first act of a computational loop including Acts -, where the loop is performed once for each software component represented by at least one of the sorted entries. For example, for entries -, the computational loop may be performed twice, once for software component  (EID=2) and once for software component  (EID=3). Accordingly, for a first pass through the loop, Act  may set a current component variable equal to \u201c2.\u201d","In Act , for the current component, the sorted entry representing a most recent time (e.g., a highest transaction number) up to and including the queried time may be selected. For example, from entries  and  for the current component, entry  may be selected because entry  specifies transaction number , which is higher than transaction number  specified by entry .","In Act , it may be determined whether the entry selected in Act  indicates that the current component was a member of the issue resolution at the time corresponding to the entry. For example, Act  may involve accessing the value stored in member field  of the selected entry. In the case where the selected entry is entry , Act  may determine that the current component was a member of the issue resolution at the time corresponding to transaction  because the value of member field  is \u201c1.\u201d Alternatively, if the selected entry was entry  (e.g., during a second pass through the computational loop of Acts -), then Act  may determine that the current component (file  having EID=\u201c3\u201d) was not a member of the issue resolution at the time corresponding to transaction  because the value of member field  is \u201c0.\u201d","If it is determined in Act  that the current component was not a member of the issue resolution at the current time, then in Act , it may be determined whether there is a next software component specified by any of the sorted entries. If not, method  may end, whereas if there is a next software component, then method  may proceed to Act .","If it is determined in Act  that the current component was a member of the issue resolution at the time corresponding to the entry, then in Act , it may be recorded (e.g., temporarily in local memory) that the version of the current component specified by the entry was included in the issue resolution at the queried time. For example, the stream\/edition pair specified by the combination of fields  and  of the selected entry may be recorded. The record then may be accessed throughout performance of method , for example, during performance of Act .","In an example using the data of data structure , method  (and\/or Act ) may determine that only a single software component, file  (EID=2) is included in issue resolution at the queried time. Although data structure  includes entries for file  (EID=3), method  may determine that file  was not a member of the issue resolution at the queried time. For example, Acts - may determine that the most recent entry  for file  indicates in field  that file  is not a member of issue resolution  at the queried time.","Method  may include additional acts. Further, the order of the acts performed as part of method  is not limited to the order illustrated in , as the acts may be performed in other orders and\/or one or more of the acts may be performed in parallel (at least partially).",{"@attributes":{"id":"p-0178","num":"0177"},"figref":"FIG. 15","b":["1500","1500","1500"]},"Method  may be performed as part of Act , to determine whether each software component determined in Act  was included in the queried stream at the queried time. Thus, method  may include a plurality of computational loops, each loop corresponding to one of the software components determined in Act .","In Act , the current component variable may be set equal to a next software component, for example, a next software component of the components determined in Act . During a first loop, the current component variable may be set equal to a first software component version of those determined in Act  (e.g., a software component having a highest or lowest EID). For example, if Act  (which may include performance of method ) were performed on data structure , only a single software component, file  (EID=2) may be determined to be included in the issue resolution at the queried time. Thus, Act  may include setting a current component equal to 3.","In Act , a stream ancestry chain for the queried stream at the queried time may be determined, for example, in accordance with method  described below in relation to .","Digressing briefly from method ,  is a flow chart illustrating an example of a method  of determining a stream ancestry chain for a stream at a particular time. Method  is merely an illustrative embodiment of a method of determining whether software component versions are included in a queried stream at a queried time, and is not intended to limit the scope of the invention. Any of numerous other implementations of such a method, for example, variations of method , are possible and are intended to fall within the scope of the invention.","In Act , a value of a present stream variable may be set equal to a value of the queried stream. For example, the present stream may be set equal to a value representing stream  (e.g., stream ID=5).","In Act , a most recent entry in a historical stream hierarchy data structure for the present stream, that corresponds to a time up until or including the queried time, may be determined. For example, if the queried stream is stream  and the queried time is a time corresponding to transaction  or later, then Act  may select entry  of historical stream hierarchy data structure .","In Act , the parent stream of the present stream may be determined from the most recent entry determined in Act . For example, stream  (stream ID=3) may be determined from the parent stream ID in field  of entry . Act  may include determining that the present stream is the source stream, for example, if the parent stream ID field holds the value \u201c0\u201d (e.g., if the present stream is stream  (stream ID=1) and the most recent entry is entry ).","In Act , the position of the determined parent stream in the ancestry chain may be recorded. For example, a temporary data structure (e.g., stored in local memory) defined by one or more variables may hold values indicating the position. This temporary data structure may be initialized (e.g., prior to a first performance of Act ) by recording information regarding the queried stream being the lowest link in the ancestry chain (e.g., the stream lowest in the stream hierarchy).","If it was determined in Act  that the parent stream is\/was the source stream, then Act  may control method  to end. In other words, if the parent stream is the source stream, there are no further ancestors in the stream ancestor chain.","If the parent stream is not the source stream, then in Act , the present stream may be set equal to the parent stream. For example, the variable holding a value representing the present stream may be set equal to stream  (e.g., may be set equal to 3, the stream ID of stream ). The method then may return to Act  and repeat steps - for the new present stream. For example, in Act , the method may determine entry , which is the most recent entry in data structure  for stream  that corresponds to a time (i.e., the time corresponding to transaction ) up until or including the queried time (i.e., a time corresponding to transaction  or later). In Act , the parent stream of stream  may be determined to be stream  (stream ID=1). In Act , the position of the parent stream in the ancestry chain may be recorded, and in Act , it may be determined that stream  is the source stream, such that the method ends.","The result of the performance of method  is a stream ancestry chain which may be used for the remainder of the performance of methods  and . For example, the results may be a stream ancestry chain reflecting that, at the queried time, stream  is a child of stream , which is a child of source stream .","Method  may include additional acts. Further, the order of the acts performed as part of method  is not limited to the order illustrated in , as the acts may be performed in other orders and\/or one or more of the acts may be performed in parallel (at least partially).","Returning to method  illustrated in , it may be determined in Act  whether the current component was included in the queried stream at the queried time. Thus, as a preliminary act (i.e., before determining the version of the current component included in the queried stream at the queried time), it may be determined whether any version of the current component is included in the queried stream at the queried time. Act  may be performed as described in the Poole application, for example, in accordance with method  discussed in relation to  of the Poole application. Act  may involve accessing historical data structures that represent changes made to streams over time, including changes made to the set of software components included in streams. For example, Act  may involve accessing an historical element location data structure, such as data structure  described in relation to  of the Poole application.","As an alternative to determining whether the current component was included in the queried stream at the queried time, Act  may include determining whether the current component was included in a particular view of the queried stream at the queried time. As described in the Poole application, a \u201cview\u201d can be considered a developer's window into a software project, and may be specific to a stream (e.g., a workspace). The software components included within a view at a particular time may be defined using I\/E rules, for example, as described in the Poole application. Determining whether a software component was included within a view of a stream at a particular time may be performed as described in the Poole application, for example, in accordance with method  discussed in relation to  thereof. This determination may involve accessing a historical Include\/Exclude data structure, for example, data structure  described in relation to  of the Poole application.","Thus, method  may include accessing data structures reflecting a history of changes to the sets of software components included in streams or views of streams, for example, prior to accessing data structures (e.g., data structures  and ) reflecting a history of changes to software component versions included in streams.","If it is determined in Act  that the current element was not included in the queried stream at the queried time, then method  may end. In other words, if the current component was not even included in the queried stream at the queried time, then there is no need to check if any version of the current component included in the queried stream at the queried time.","If the current component was included in the queried stream at the queried time, then, in Act , the stream (of the streams in the stream ancestry chain) in which the current component was in progress at the queried time may be determined. Act  may include performance of method , described below.","In Act , a version of the current component in the queried stream at the queried time may be determined based on the stream determined in Act , for example, in accordance with method  described below in relation to .","In Act , it may be determined whether the version of the current component included in the issue resolution at the queried time is the same version of the current component included in the queried stream at the queried time, or is an ancestor thereof. It should be appreciated that a descendent version of an ancestor version includes (e.g., comprises or incorporates) the ancestor version itself, even if there are intervening versions. For example, referring to , version 5\/3 (graph element ) includes each of its ancestor versions 4\/3, 4\/2 and 4\/1 (graph elements , , and , respectively). Thus, as used herein, a stream \u201cincludes a software component version\u201d if it includes the software component version itself or if it includes a descendant of the software component version. Act  may be performed in accordance with method  described below in relation to .","In Act , it may be determined whether there is a next component, for example, another component determined in Act  to be included in the queried issue resolution at the queried time. If not, method  ends. Otherwise, method  may return to Act  in which a current component variable is set equal to the next software component, and the computational loop comprising Acts - may be repeated.","Method  may include additional acts. Further, the order of the acts performed is part of method  is not limited to the order illustrated in , as the acts may be performed in other orders and\/or one or more of the acts may be performed in parallel (at least partially).",{"@attributes":{"id":"p-0200","num":"0199"},"figref":"FIG. 17","b":["1700","1508","1700","1500"]},"In Act , entries may be selected from a historical stream in-progress data structure, for example, data structure  described above in relation to . In particular, entries may be selected that specify the queried stream or any other streams in the determined ancestry chain (e.g., determined in Act ) and that correspond to a time up to or including the queried time. For example, if the queried stream is workspace  (stream ID=5) and the queried time is a time equal to or greater than the time corresponding to transaction , then Act  may result in the selection of entries , ,  and . These entries may be selected because each entry has a transaction number less than or equal to 22. and each entry specifies either stream  (EID=1) or stream  (EID=5), each of which was in the stream ancestry chain for stream  at the time of transaction  or later.","In Act , from the entries selected in Act , a lowest stream within the ancestry chain specified by any of the entries may be determined. For example, from entries , ,  and , the lowest stream in the ancestry chain is stream  (EID=5).","In a following Act , a current stream variable may be set equal to the lowest stream determined in Act . For example, the current stream variable may be set equal to the stream ID of the lowest determined stream, e.g., \u201c5.\u201d In Act , from the entries selected in Act  that specify the current stream, the entry corresponding to a most recent time may be selected. For example, entries ,  and  specify stream . From these entries, entry  corresponds to a most recent time, e.g., the time corresponding to transaction . Thus, entry  may be selected in Act .","In Act , it may be determined whether the selected entry specifies that the current software component was in progress in the current stream at the current time. Act  may include accessing field  in data structure  for the selected entry. For example, Act  may include accessing field  of entry  and determining that the current software component was in progress in the current stream at the current time because field  holds a value of \u201c1.\u201d Alternatively, if the selected entry was entry , then Act  may determine that the current stream was not in progress at the current time because the value of field  is \u201c0.\u201d","If it is determined in Act  that the current software component was not in progress in the current stream at the current time, then, in Act , the current stream variable may be set equal to a next lowest stream specified by any of the selected entries, and method  may return to Act . Acts  and  then may be repeated for the next lowest stream. For example, if the selected entry was entry , then Act  may have proceeded to Act , which may have set the current stream variable equal to stream  (EID=1).","Acts ,  and  may be repeated until the stream in which the current component was in progress at the queried time is determined.","If it is determined in Act  that the current software component was in progress in the current stream at the current time, then, in Act , it may be recorded that the current stream is the stream in which the current component was in progress at the queried time. This recorded information then may be used in Act , for example, during the performance of method .","Method  may include additional acts. Further, the order of the acts performed as part of method  is not limited to the order illustrated in , as the acts may be performed in other orders and\/or one or more of the acts may be performed in parallel (at least partially).",{"@attributes":{"id":"p-0209","num":"0208"},"figref":"FIG. 18","b":["1800","1800","1800","1800","1510","1500"]},"In Act , entries may be selected from a historical virtual version data structure, for example, data structure  described above in relation to . More specifically, Act  may include selecting entries that specify a virtual version of the current component for the current stream, and that correspond to a time up to and including the queried time. For example, Act  may include selecting entries from data structure  having: an EID field  specifying the current component, a stream ID field  specifying the current stream and a transaction number field  specifying a value corresponding to a time no later than the queried time. If the current component is file  (EID=2), the current stream is workspace  (stream ID=5) and the time corresponds to a time no later than the time corresponding to transaction , then Act  may include selecting entries , , and  from data structure .","In Act , an entry corresponding to a most recent time may be selected from the entries selected in Act . For example, from entries , , and , entry  may be selected because entry  specifies transaction , which is higher than transactions  and  specified by entries  and , respectively, and thus corresponds to a most recent time.","In Act , a real stream variable may be set equal to the real stream specified by the selected entry. For example, if the selected entry is entry , then Act  may include setting a real stream variable equal to \u201c5,\u201d which is the stream ID for stream . In Act , an edition variable may be set equal to the edition specified by the selected entry. For example, if the selected entry is entry , then Act  may include setting an edition variable equal to \u201c3,\u201d which is the edition specified by field  of entry .","As described above, a version (i.e., a real version) of a software component may be defined by a stream\/edition pair. Thus, Acts  and  record (at least temporarily) the stream\/edition pair (i.e., the real version) specified by fields  and  that corresponds to the virtual version specified by the combination of fields  and . This determined real version of the software component may be used as part of Act , for example, as part of performing method , which will now be described.","Method  may include additional acts. Further, the order of the acts performed as part of method  is not limited to the order illustrated in , as the acts may be performed in other orders and\/or one or more of the acts may be performed in series or in parallel (at least partially).",{"@attributes":{"id":"p-0215","num":"0214"},"figref":["FIG. 19","FIG. 18"],"b":["1900","1800","1800"]},"Act  may include determining whether the version of the current component that is included in the issue resolution at the current time (e.g., as determined in Act ) is the same as the version of the current component included in the queried stream at the queried time. Act  may include determining whether the stream\/edition pair of the current component determined in Act  of method  is the same as the stream\/edition pair determined in Act  of method  (which may have been recorded in Acts  and  of method ).","If the versions are the same, then, at the queried time, the queried stream included the same version of the current component included in the issue resolution. This information may be recorded in Act , and may be reported as part of Act .","For example, if the current software component is file  (EID=2), the queried stream is workspace  (stream ID=5) and the queried time corresponds to a time no later than the time corresponding to transaction , then Acts  and  both may determine real version 5\/3 (i.e., the third edition of file  in workspace ). This information may be recorded in Act .","As another example, if the current software component is file , the queried stream is workspace , but the queried time corresponds to a time no later than the time corresponding to transaction  (e.g., the time specified by entry  is data structure ), Act  may determine real version 5\/1 (i.e., the first edition of file  in workspace ) and Act  determines real version of 5\/3. In this situation, method  may proceed to Act , described below.","Thus, in Act  it may be determined whether there is an exact match between the version of the current component included in the issue resolution at the current time and the version of the current component included in the queried stream at the queried time. If there is not an exact match, then method  may include determining whether the version of the current component included in the issue resolution at the queried time is an ancestor of the version included in the queried stream at the queried time. This determination may be made by performance of Acts -, which will now be described.","If in Act  it is determined that the versions are not the same, then, in Act , one or more current version variables may be set equal to the version of the current component determined to be included in the issue resolution at the queried time. For example, one or more current version variables may be set equal to the stream\/edition pair determined for the current component in Act  (e.g., 5\/1 in the preceding example).","The entry from an ancestry data structure that specifies, as a child version, the determined version of the current component for the issue resolution may be selected in Act . For example, the entry in ancestry data structure  that specifies the current component in field , and specifies the determined stream\/edition pair of the current component for the issue resolution in fields  and , respectively, may be selected. For example, continuing the example in which the software component is filed , the stream is workspace  and the time corresponds to a time no later than the time corresponding to transaction , act  may include selecting entry .","In Act , it may be determined whether there is an entry in the ancestry structure that specifies, as a child version, the version of the current component specified by the one or more current version variables. For example, Act  may include determining whether the combination of fields  and  of any entry in data structure  specify the version of the software component determined in Act . There may be no such entry in the ancestry data structure if the software component version represented by the one or more variables was not derived from any other software component version. Such a situation may exist if a software component version results from the creation of a new software component in a workspace. In such a situation, the software component version would not have any ancestor version.","If it is determined that the determined software component version for the issue resolution does not have any ancestor version, then method  may end. In such a case, method  results in the determination that the version of the current component included in the issue resolution at the queried time was not included in the queried stream at the queried time. Otherwise, method  may proceed to Act .","In Act , the entry from a version ancestry data structure (e.g., data structure ) that specifies, as a child version, the version specified by the one or more current version variables may be selected. For example, if the current software component is file , the queried stream is workspace  and the queried time corresponds to a time no later than the time corresponding to transaction , then Act  may include selecting entry .","In Act , it may be determined whether the parent version of the current component specified by the selected entry is the same version as the version of the current component specified by the one or more current version variables. Act  may include comparing the version specified by the one or more current version variables to the version specified by the combination of fields  and  of the entry selected in Act .","If it is determined in Act  that the parent version and the version specified by the one or more variables are the same, then, at the queried time, the version of the current component included in the queried stream is same version of the current component included in the issue resolution. Accordingly, method  may proceed to Act . Otherwise, method  may proceed to Act .","For example, if the current software component is file , the queried stream is workspace  and the queried time corresponds to a time no later than the time corresponding to transaction , then the parent version may be determined to be version 4\/1 from fields  and  of entry . This real version is not the same as version 5\/3 included in the issue resolution at the query time (e.g., as determined in Act ). Accordingly, method  may proceed to Act .","In Act , the one or more current version variables (described above in relation to Act ) may be set equal to the parent version determined in Act . For example, Act  may include setting the one or more current version variables equal to version 4\/1 specified by fields  and  of entry . Method  then may proceed to Act , and Acts - may be repeated.","Thus, Acts - may navigate through the version ancestry data structure, for the version of the current component determined to be included in the issue resolution at the queried time, until an ancestor version is found or it is determined that there is no ancestor version.","Method  may include additional acts. Further, the order of the acts performed as part of method  is not limited to the order illustrated in , as the acts may be performed in other orders and\/or one or more of the acts may be performed in parallel (at least partially).","Methods  and -, acts thereof and various embodiments and variations of these methods and acts, individually or in combination, may be defined by computer-readable signals tangibly embodied on a computer-readable medium, for example, a non-volatile recording medium, an integrated circuit memory element, or a combination thereof. Such signals may define instructions, for example, as part of one or more programs, that, as a result of being executed by a computer, instruct the computer to perform one or more of the methods or acts described herein, and\/or various embodiments, variations and combinations thereof. Such instructions may be written in any of a plurality of programming languages, for example, Java, Visual Basic, C, C#, or C++, Fortran, Pascal, Eiffel, Basic, COBOL, etc., or any of a variety of combinations thereof. The computer-readable medium on which such instructions are stored may reside on one or more of the components of any of systems ,  and  described herein, and may be distributed across one or more of such components.","The computer-readable medium may be transportable such that the instructions stored thereon can be loaded onto any computer system resource to implement the aspects of the present invention discussed herein. In addition, it should be appreciated that the instructions stored on the computer-readable medium, described above, are not limited to instructions embodied as part of an application program running on a host computer. Rather, the instructions may be embodied as any type of computer code (e.g., software or microcode) that can be employed to program a processor to implement the above-discussed aspects of the present invention.","It should be appreciated that any single component or collection of multiple components of a computer system, for example, the computer system described below in relation to , that perform the functions described above with respect to describe or reference the method can be generically considered as one or more controllers that control the above-discussed functions. The one or more controllers can be implemented in numerous ways, such as with dedicated hardware, or using a processor that is programmed using microcode or software to perform the functions recited above.",{"@attributes":{"id":"p-0235","num":"0234"},"figref":["FIG. 20","FIG. 19"],"b":["2000","1900","1900"]},"System  is an example of system  described above in relation of . System  may include issue tracking engine  and historical development project database . Issue tracking engine  may include any of user interface , issue resolution engine , transaction number generator , issue resolution components generator  and stream components version checker .","User interface  may be configured to receive an issue value  and one or more software component version values  (e.g., provided by a user) and pass these values (or alternative representations of these values) to issue resolution engine . Issue resolution engine  may be configured to perform method  described above in relation to . Issue resolution engine  may be configured to receive values  and  and generate one or more historical issue resolution entries . This generation may involve interacting with transaction number generator  to determine a transaction number for the one or more entries . Generator  may be configured to determine a next available transaction number to assign to the one or more entries, for example, by accessing transaction data structure . Engine  may be configured to store the one or more historical issue resolution entries  (e.g., and of entries -) in historical issue resolution data structure  (e.g., data structure  described above in relation to ).","User interface also may be configured, in response to receiving an issue value  and a time\/transaction value  (e.g., a time or a transaction number), to pass these values to issue resolution components generator . Generator  may be configured to determine the one or more software component versions included in an issue resolution at a particular time (e.g., in accordance with method ), and to output the one or more software component versions  to stream components version checker . Generator  may be configured to make such a determination by accessing historical issue resolution data structure , based on the issue value  and the time\/transaction value  received from the user interface . In some embodiments, no time\/transaction value  is specified by the user. In such cases, a default time\/transaction value of the current time may be used. If value  specifies a time or if a default time is used, generator  may interact with transaction number generator  to determine a transaction number corresponding to the time. Transaction number generator  may determine a transaction number by accessing a transaction data structure  to map the specified time to a transaction number, as described above. Historical issue resolution data structure  may be configured similar to or the same as data structure  described above in relation to .","User interface  may be configured to receive a stream value , and to pass the stream value (or another representation of the stream value) along with a time\/transaction value  (or another representation thereof), to stream components version checker . Time\/transaction value  alternatively may be received from issue resolution components generator  if generator  already determined or received a transaction number. Further, stream components version checker  may determine a transaction number itself by interacting with transaction number generator .","Stream components version checker may be configured to determine whether software component versions  determined by generator  are included in the stream specified by stream value  (e.g., the queried stream) at a queried time (e.g., the time specified or corresponding to value ). Version checker  may be configured to make this determination by accessing any of historical stream hierarchy data structure  (e.g., data structure  described above in relation to ), historical element location data structure  (e.g., in the Poole application, data structure  described in relation to ), historical Include\/Exclude rules data structure  (e.g., in the Poole application, data structure  described in relation to ), historical stream in-progress data structure  (e.g., data structure  described above in relation to ), historical virtual version mapping data structure  (e.g., data structure  described above in relation to ) and version ancestry data structure  (e.g., data structure  described above in relation to ). Version checker  may access any of these data structures based on any of inputs ,  or .","Version checker  may be configured to perform method  described above in relation to , and may output one or more software component versions . Software component versions  may represent the software component versions included in an issue resolution (e.g., specified by issue value ) at a queried time (e.g., specified or corresponding to value ) that were also included in a queried stream (e.g., specified by value ) at the queried time. Version checker  may include any of the system components described in the Poole application in relation to system  (), for example, stream view engine  and any components thereof.","Issue resolution components generator  and stream components version checker  may be configured to interact with one another to perform method  described above in relation to .","Any of components of system , including stream view engine  and components , , , ,  and  thereof, may be configured (e.g., programmed) using any of a variety of techniques. In some embodiments, one or more parameters or functionality of a component may be configured to exhibit permanent behavior by a programmer. For example, the system may be configured such that, after it is installed at a customer site, it cannot be altered by a programmer by altering program code or by any other means.","In some embodiments, one or more parameters or functionality of a component may be dynamically programmable by a programmer after the system has been installed. For example, the component may provide one or more programming \u201chooks\u201d that enable a programmer to program functionality of the component by manipulating program code (e.g., through one or more APIs) and\/or that enable a user to program functionality using high-level scripts.","In some embodiments, one or more parameters or functionality of a component may be dynamically programmable by a user without resort to program code or scripts after the system has been installed. For example, a user interface such as any of those described herein may enable a user to program functionality, for example, by providing values for certain parameters. For example, a user may be enabled to program the user interface  to control GUI display  to display or not display certain information.","Any of the components of system  may be configured (using any combination of the above techniques) to exhibit default behavior. For example, the issue resolution components generator  and the stream components version checker may be configured to use a current time as the queried time by default. It should be appreciated that any of the components of system  may be configured with any suitable functionality described herein, including default functionality.","System , and components thereof may be implemented using software (e.g., C, C#, C++, Java, or a combination thereof), hardware (e.g., one or more application-specific integrated circuits), firmware (e.g., electrically-programmed memory) or any combination thereof. One or more of the components of system  may reside on a single device (e.g., a computer), or one or more components may reside on separate, discrete devices. Further, each component may be distributed across multiple devices, and one or more of the devices may be interconnected.","Further, on each of the one or more devices that include one or more components of system , each of the components may reside in one or more locations on the system. For example, different portions of the components of system  may reside in different areas of memory (e.g., RAM, ROM, disk, etc.) on the device. Each of such one or more devices may include, among other components, a plurality of known components such as one or more processors, a memory system, a disk storage system, one or more network interfaces, and one or more busses or other internal communication links interconnecting the various components.","Various embodiments according to the invention may be implemented on one or more computer systems. These computer systems, may be, for example, general-purpose computers such as those based on Intel PENTIUM-type processor, Motorola PowerPC, Sun UltraSPARC, Hewlett-Packard PA-RISC processors, or any other type of processor. It should be appreciated that one or more of any type computer system may be used to modify an issue resolution and\/or to determine which software component versions of an issue resolution are included in a version of a software development project at a particular time, according to any of the embodiments described above.","A general-purpose computer system, according to some embodiments of the invention, is configured to perform one or more of the methods described above and\/or portions thereof. It should be appreciated that the system may perform other functions, and the invention is not limited to having any particular function or set of functions.","For example, various aspects of the invention may be implemented as specialized software executing in a general-purpose computer system  such as that shown in . The computer system  may include a processor  connected to one or more memory devices , such as a disk drive, memory, or other device for storing data. Memory  is typically used for storing programs and data during operation of the computer system . Components of computer system  may be coupled by an interconnection mechanism , which may include one or more busses (e.g., between components that are integrated within a same machine) and\/or a network (e.g., between components that reside on separate discrete machines). The interconnection mechanism  enables communications (e.g., data, instructions) to be exchanged between system components of system . Computer system  also includes one or more input devices , for example, a keyboard, mouse, trackball, microphone, touch screen, and one or more output devices , for example, a printing device, display screen, speaker. In addition, computer system  may contain one or more interfaces (not shown) that connect computer system  to a communication network (in addition or as an alternative to the interconnection mechanism .","The storage system , shown in greater detail in , typically includes a computer readable and writeable nonvolatile recording medium  in which signals are stored that define a program to be executed by the processor or information stored on or in the medium  to be processed by the program. The medium may, for example, be a disk or flash memory. Typically, in operation, the processor causes data to be read from the nonvolatile recording medium  into another memory  that allows for faster access to the information by the processor than does the medium . This memory  is typically a volatile, random access memory such as a dynamic random access memory (DRAM) or static memory (SRAM). It may be located in storage system , as shown, or in memory system , not shown. The processor  generally manipulates the data within the integrated circuit memory ,  and then copies the data to the medium  after processing is completed. A variety of mechanisms are known for managing data movement between the medium  and the integrated circuit memory element , , and the invention is not limited thereto. The invention is not limited to a particular memory system  or storage system .","The computer system may include specially-programmed, special-purpose hardware, for example, an application-specific integrated circuit (ASIC). Aspects of the invention may be implemented in software, hardware or firmware, or any combination thereof. Further, such methods, acts, systems, system elements and components thereof may be implemented as part of the computer system described above or as an independent component.","Although computer system  is shown by way of example as one type of computer system upon which various aspects of the invention may be practiced, it should be appreciated that aspects of the invention are not limited to being implemented on the computer system as shown in . Various aspects of the invention may be practiced on one or more computers having a different architecture or components that that shown in .","Computer system  may be a general-purpose computer system that is programmable using a high-level computer programming language. Computer system  may be also implemented using specially programmed, special purpose hardware. In computer system , processor  is typically a commercially available processor such as the well-known Pentium class processor available from the Intel Corporation. Many other processors are available. Such a processor usually executes an operating system which may be, for example, the Windows 95, Windows 98, Windows NT, Windows 2000 (Windows ME) or Windows XP operating systems available from the Microsoft Corporation, MAC OS System X available from Apple Computer, the Solaris Operating System available from Sun Microsystems, or UNIX or LINUX available from various sources. Many other operating systems may be used.","The processor and operating system together define a computer platform for which application programs in high-level programming languages are written. It should be understood that the invention is not limited to a particular computer system platform, processor, operating system, or network. Also, it should be apparent to those skilled in the art that the present invention is not limited to a specific programming language or computer system. Further, it should be appreciated that other appropriate programming languages and other appropriate computer systems could also be used.","One or more portions of the computer system may be distributed across one or more computer systems (not shown) coupled to a communications network. These computer systems also may be general-purpose computer systems. For example, various aspects of the invention may be distributed among one or more computer systems configured to provide a service (e.g., servers) to one or more client computers, or to perform an overall task as part of a distributed system. For example, various aspects of the invention may be performed on a client-server system that includes components distributed among one or more server systems that perform various functions according to various embodiments of the invention. These components may be executable, intermediate (e.g., IL) or interpreted (e.g., Java) code which communicate over a communication network (e.g., the Internet) using a communication protocol (e.g., TCP\/IP).","It should be appreciated that the invention is not limited to executing on any particular system or group of systems. Also, it should be appreciated that the invention is not limited to any particular distributed architecture, network, or communication protocol.","Various embodiments of the present invention may be programmed using an object-oriented programming language, such as SmallTalk, Java, C++, Ada, or C# (C-Sharp). Other object-oriented programming languages may also be used. Alternatively, functional, scripting, and\/or logical programming languages may be used. Various aspects of the invention may be implemented in a non-programmed environment (e.g., documents created in HTML, XML or other format that, when viewed in a window of a browser program, render aspects of a graphical-user interface (GUI) or perform other functions). Various aspects of the invention may be implemented as programmed or non-programmed elements, or any combination thereof.","Having now described some illustrative embodiments of the invention, it should be apparent to those skilled in the art that the foregoing is merely illustrative and not limiting, having been presented by way of example only. Numerous modifications and other illustrative embodiments are within the scope of one of ordinary skill in the art and are contemplated as falling within the scope of the invention. In particular, although many of the examples presented herein involve specific combinations of method acts or system elements, it should be understood that those acts and those elements may be combined in other ways to accomplish the same objectives. Acts, elements and features discussed only in connection with one embodiment are not intended to be excluded from a similar role in other embodiments. Further, for the one or more means-plus-function limitations recited in the following claims, the means are not intended to be limited to the means disclosed herein for performing the recited function, but are intended to cover in scope any equivalent means, known now or later developed, for performing the recited function.","Use of ordinal terms such as \u201cfirst\u201d, \u201csecond\u201d, \u201cthird\u201d, etc., in the claims to modify a claim element does not by itself connote any priority, precedence, or order of one claim element over another or the temporal order in which acts of a method are performed, but are used merely as labels to distinguish one claim element having a certain name from another element having a same name (but for use of the ordinal term) to distinguish the claim elements."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 22","FIG. 21"]}]},"DETDESC":[{},{}]}
