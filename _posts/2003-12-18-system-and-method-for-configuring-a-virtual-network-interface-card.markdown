---
title: System and method for configuring a virtual network interface card
abstract: A system includes an interface device that executes a driver and a processing device that executes instructions to implement a virtual machine, and to implement a virtual network interface card that is configurable to enable communication between the driver and the virtual machine. The processor executes instructions to configure the virtual network interface card.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07752635&OS=07752635&RS=07752635
owner: Intel Corporation
number: 07752635
owner_city: Santa Clara
owner_country: US
publication_date: 20031218
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DESCRIPTION"],"p":["This invention relates to configuring a virtual network interface card (VNIC).","A virtual machine (VM) is a self-contained operating environment that emulates a hardware platform and can run a \u201cguest\u201d operating system. A VM runs \u201con top\u201d of a virtual machine monitor (VMM), which is an operating system that is run on the underlying hardware platform. The VMM contains multiple virtual devices, one of which can be a virtual network interface card (VNIC).","The VNIC runs as part of the VMM and routes data packets between a network interface card (NIC) on the hardware platform and various VMs.","Like reference numerals in different figures indicate like elements.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 1","FIG. 2"],"b":["10","10","11"]},"Hardware platform  may be a personal computer, a server, a mainframe computer, or any other type of computing device. Hardware platform  includes a processing device , such as a microprocessor or controller, and one or more memory device(s) . Memory device(s)  store machine-executable instructions  that are executed by processing device  to implement VMM  and VM  (). Additional VMMs and VMs may also be implemented within system .","Each VM comprises a \u201cshell\u201d in which a \u201cguest\u201d operating system is run. The guest operating systems are unaware that they are running on top of VMM . VMM  makes it possible for the guest operating systems to operate as if they were running on hardware. The manner in which VMM  does this is described below.","NIC  is an expansion board that is installed in hardware platform  and that enables hardware platform  to connect to a network. NIC  may be any type of network interface card. For example, NIC  may be an Ethernet NIC, which supports Ethernet connections, or a 10\/100\/1000 NIC that supports both Ethernet and higher-performance Fast Ethernet connections. NIC  may also support wireless networking. Wireless networking uses radio frequency (RF) technology to transmit a signal through air, instead of over a wire. Such a NIC performs substantially the same functions as a NIC in a wired environment, including preparing data for transmissions over a medium and receiving data from the medium.","Processing device  executes a NIC driver  that enables NIC  to exchange communications with VMM . NIC driver  acts as a mediator between NIC  and software that interacts with NIC . Specifically, NIC driver  acts as a high-level interface for software modules running on NIC .","VMM  includes generic virtual NIC (GVNIC) . GVNIC  is configurable to route data packets between NIC  and various VMs (e.g., VM ). GVNIC  interfaces to NIC driver  via a high-level application programming interface (API).","GVNIC  is \u201cgeneric\u201d in the sense that it contains core functionality needed to use the API exposed by NIC driver  and to support a NIC driver  run on the guest operating system of VM . This core functionality comprises a set of common tasks, which include, but are not limited to, claiming a region in configuration space to allow the guest operating system access to the GVNIC's peripheral component interconnect (PCI) header; claiming a region in memory and\/or input\/output (I\/O) space to allow NIC driver  to access the GVNIC's control and status registers (CSRs); injecting interrupts into VM ; transmitting and receiving data frames; handling callbacks from NIC driver , e.g., completion of transmit requests, reception of frames, and diagnostics; and programming receiver side filters for, e.g., multicasting and broadcasting. GVNIC  is programmed to emulate hardware that performs these functions, as described below.","VMM  also includes virtual space module , virtual programmable interrupt control (PIC) module , and virtual PCI module . Virtual space module  routes memory accesses from VM  to GVNIC . For example, virtual space module  directs all memory accesses within a specified range previously claimed, such as 00-FF, to GVNIC  or to other virtual devices. Virtual PIC module  routes interrupts to VM . Virtual PCI module  enables discovery and programming of GVNIC  by the guest operating systems.","More specifically, virtual PCI module  scans the virtual PCI bus associated with VMM  and informs the guest operating system running on VM  of the identity of devices on the virtual PCI bus, such as GVNIC . The identity may include the type of the device, a device identifier (ID), and\/or a manufacturer\/vendor ID. The guest operating system configures identified devices to work with the guest operating system. This configuring includes, but is not limited to, assigning, in each device and for the guest operating system, memory address space and an input\/output (I\/O) address range. After each device, such as GVNIC , is programmed, the device informs virtual space module , which routes communications (e.g., data packets) between the guest operating system and GVNIC  accordingly.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3","b":["19","22","19","32","22","22","22","22","22","22","21","24","17"]},"The configuration information may include data specifying the contents of PCI registers that are unique to the hardware being emulated by GVNIC , the method of implementing direct memory accesses (DMA) performed by the hardware being emulated by GVNIC , and the configuration of data structures for use in transmitting data between NIC driver  and VM . Other types of configuration information may be included as well.","In one embodiment, the configuration file is an eXtensible Markup Language (XML) file that stores the configuration information as parameters (or \u201ctags\u201d) in various fields. GVNIC  parses () the XML file to obtain the parameters and uses the parameters to configure itself accordingly. Configuration files other than XML may be used.","Instead of configuring GVNIC  by parsing a configuration file, GVNIC  may be configured to \u201ccall\u201d (i.e., reference) a separate module . Specifically, in response to identifying the hardware device, GVNIC  retrieves instructions to call module . The instructions may be retrieved from an internal or external database. Module  may be called once or as required, depending on the requirements of the hardware being emulated.","Instead of calling module , module  may be loaded into, and run from, GVNIC  in order to configure GVNIC .","Module  is used to implement functionality that is specific to the hardware being emulated by GVNIC . For example, module  may provide data specifying the contents of PCI registers that are unique to the hardware being emulated by GVNIC , may implement direct memory accesses (DMA) performed by the hardware being emulated by GVNIC , and may configure data for transmission between NIC driver  and VM . In this regard, GVNIC  may also provide module  with data that is being transferred between NIC driver  and VM . This data may be processed and\/or formatted by module  and then sent back to GVNIC  for transfer.","Module  may be an interpretive module () or a compiled module (). An interpretive module is written in an interpretive language, such as C. Code in the interpretive module needs to be complied in order to configure GVNIC . Different types of code may be required for different hardware platforms. By contrast, a compiled module is already in binary form. As such, compiling is not necessary, making the binary code portable between platforms.","Referring back to , in process , virtual PCI module  identifies () GVNIC  to the guest operating system. As noted above, virtual PCI module  may provide GVNIC  with identifiers or the like that correspond to GVNIC . The guest operating system running in VM  uses the identifiers to program () GVNIC  to run with the guest operating system, as described above.","The system  described herein has numerous advantages. For example, it separates generic VNIC functionality from functionality that is VM-specific. System  thus reduces development time by requiring developers to write code only for VM-specific functions. System  also allows the GVNIC to be configured without re-compiling the VMM, making it possible for the GVNIC and the VMM to be provided by different vendors. System  allows dynamic loading and unloading of VNIC modules and allows VNIC modules to reside outside of the VMM. System  supports different types of virtual PCI devices and different types of VMs. More than one VM may be interfaced to GVNIC .","System  is not limited to use with the hardware and software of ; it may find applicability in any computing or processing environment","System  may be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. System  may be implemented as a computer program product or other article of manufacture, e.g., a computer program tangibly embodied in an information carrier, e.g., in a machine-readable storage device or in a propagated signal, for execution by, or to control the operation of, a data processing apparatus, e.g., a programmable processor, a computer, or multiple computers. A computer program can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.","System  can be implemented via one or more programmable processors executing a computer program to perform functions. System  can also be implemented by, and apparatus of system  can be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).","Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. Elements of a computer can include a processor for executing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.","Information carriers suitable for embodying computer program instructions and data include all forms of non-volatile memory, including, by way of example, semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.","System  can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a system administrator can interact with the management modules, or any combination of such back-end, middleware, or front-end components.","The components of system  can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (\u201cLAN\u201d) and a wide area network (WAN\u2033), e.g., the Internet.","The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","System  is not limited to the specific embodiments described herein. For example, system  is not limited to the specific processing order of . Rather, the blocks of  may be re-ordered and\/or omitted, as desired, to achieve the results set forth above.","Other embodiments not described herein are also within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIG. 2","FIG. 1","FIG. 3"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 3","FIG. 1"]}]},"DETDESC":[{},{}]}
