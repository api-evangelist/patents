---
title: Catalog-based software component management
abstract: Multiple software component identifiers are maintained in a catalog of an operating system running on a device. Each of these software component identifiers corresponds to one of multiple software components installed on the device. The catalog is accessed in response to a request regarding one of the multiple software components, and the request is responded to based at least in part on information included in the catalog. Additionally, two or more versions of a software component that are installed on the computing device can be identified. Which one of the two or more versions of the software component is an active version of the software component to be run is determined. In response to requests for information regarding the software component, information regarding the active version of the software component is returned.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08495621&OS=08495621&RS=08495621
owner: Microsoft Corporation
number: 08495621
owner_city: Redmond
owner_country: US
publication_date: 20090615
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["A computer typically runs an operating system that provides various functionality including allowing other applications to be installed and run on the computer. Different applications can oftentimes be installed on a computer and run in different manners, resulting in various files and information being stored in numerous locations, folders, and so forth on the computer. Accordingly, managing such different applications on a computer can create numerous difficulties, such as when attempting to upgrade the application to a new version, when uninstalling an application, and so forth.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","In accordance with one or more aspects, multiple software component identifiers are maintained in a catalog of an operating system of a device. Each of these software component identifiers corresponds to one of multiple software components installed on the device. The catalog is accessed in response to a request regarding one of the multiple software components, and the request is responded to based at least in part on information included in the catalog.","In accordance with one or more aspects, in an operating system of a computing device two or more versions of a software component that are installed on the computing device are identified. Which one of the two or more versions of the software component is an active version of the software component to be run is determined. In response to requests for information regarding the software component, information regarding the active version of the software component is returned.","Catalog-based software component management is discussed herein. A software product is made up of one or more software components. Each software component has an identity that is maintained in a catalog of an operating system on a computing device. The catalog identifies which software components are installed on the computing device. The catalog allows the operating system to readily identify software components installed on the system as well as to manage those software components.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1","b":["100","100","100","100"]},"Computing device  includes an operating system  having a software component access control module  and a catalog . Two software products  and , also referred to as software applications, are illustrated as being included in computing device . Although two software products  and  are illustrated in the example of , alternatively fewer than two or more than two software products can be included in computing device . Each software product  and  includes one or more software components. In the example of , software product  includes software component , software component , and software component , while software product  includes software component  and software component . As can be seen in , multiple different software products can share a software component (e.g., software component ).","Software component access control module  manages the software components installed on computing device . Control module  maintains as catalog  a record of the software components that are installed on computing device  (e.g., software components - in the example of ). Catalog  is a record of the software components that are installed on and thus can be run on computing device . In order to run a software component on computing device , that software component is installed on computing device. This installation process is typically performed by an installation component or module, and typically includes storing files in various locations of a file system of operating system , storing various information describing the software component, and so forth. As part of the process of installing a software component on computing device , control module  is made aware of the software component, allowing an identifier of the software component to be added to catalog . Such installed software components can also be referred to as \u201cactive\u201d software components because the software components can be run on computing device .","Other software components may be stored on computing device  but not be installed on computing device . Operating system  is typically not aware of such software components, does not include identifiers of such components in catalog , and does not support running such software components. Accordingly, such software components can also be referred to as \u201cdormant\u201d because although they are stored on computing device , such software components are not installed on computing device . It is to be appreciated that situations can arise where a software component is an executable file that can be executed by operating system  even though the executable file has not been installed on computing device . However, as such software components are not installed on computing device , operating system  is typically not aware of information regarding such software components (e.g., the functionality provided by such software components, the developer or publisher of such software components, etc.), and thus such software components are still referred to as dormant software components.","Software component access control module  provides centralized management of software components installed on computing device . By maintaining catalog , control module  is aware of and can readily provide various functionality for the specific software components as discussed in more detail below. For example, control module  can readily identify all the software components  installed on computing device , and can provide various functionality with regard to these identified software components.","As can be seen in , each software product is comprised of one or more software components. The software components of a software product include instructions and data that can be run on computing device  and together the software components provide the functionality of the software product. Operating system  communicates with the individual software components when running, rather than with the software product as a whole.","Although a single catalog  is illustrated in , operating system  may alternatively include multiple catalogs . In one or more embodiments, operating system  includes a different catalog  for each account on computing device . In such embodiments, operating system  allows different users to each set up a different account (or multiple different accounts), maintaining different settings, access rights, and so forth for the different accounts. In addition, one or more system or administrator accounts can also be set up on computing device . Operating system  maintains a different catalog  for each of these different accounts. Operating system  may also allow multiple different users to be logged in to computing device  at any given time. However, in such situations typically only one of the multiple users is a currently active user (using a currently active account). Accordingly, the catalog  used by control module  at any given time can vary based on the particular account of computing device  that is logged into at that given time, and possibly which of multiple accounts logged into is a currently active account at that given time.","A particular catalog  includes identifiers of software components that are installed on computing device . In situations where different catalogs  are maintained for different accounts, a particular catalog  includes identifiers of software components that are installed on computing device  under that account. Different users can install different software components on computing device , resulting in different identifiers being included in different catalogs .",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2","b":["200","200","202","204","206","208","222","224","226","228","222","228","200"]},"Each software component - has a component identity that allows the software component to be distinguished from other software components. In one or more embodiments this identity is provided by the software components, such as being included in a manifest as discussed in more detail below. Alternatively, the component identity can be generated in other manners, such as by the operating system (e.g., operating system  of ), by another component or module, by another local or remote service, by another local or remote device, and so forth.","Returning to , in one or more embodiments catalog  includes a single index of installed software components. In other embodiments, catalog  includes multiple indexes or portions of software components. These multiple indexes or portions include, for example, one index or portion that includes all the installed software components installed, which is also referred to as a full index. These multiple indexes or portions can also include, for example, a second index or portion that includes a subset of software components that satisfy a particular set of rules or criteria, which is also referred to as an effective index. This set of rules or criteria can be used to effectively reduce the software components that are installed and can be run.","Typically, the effective index identifies the active versions of software components that are installed on computing device . Multiple different versions of a software component can be installed on computing device , each of which is included in the full index. However, for multiple versions of a software component, one of those versions is selected for inclusion in the effective index.","A variety of different rules or criteria can be used to determine the versions selected for inclusion in the effective index. In one or more embodiments, one such rule is a versioning rule. A versioning rule specifies which of multiple different versions of a software component is the active version based on a version number or other version identifier. Such a versioning rule can be, for example, that the most recent version is to be run (e.g., the version with the highest version number), that the version having a version identifier in a particular format or having a particular value is to be run, and so forth. In such embodiments, the active version of the software component is included in the effective index and other versions of the software component are excluded from the effective index even though they may be included in the full index.","Another rule that can be used to determine the effective index is a policy rule. A policy can be established by, for example, an administrator of computing device  or an administrator of a network to which computing device  is coupled for a variety of different reasons. This policy can specify that particular software components or versions thereof are not to be run on computing device , that only software components or versions thereof digitally signed by a particular publisher are to be run, and so forth. In such situations, the specified software components or versions thereof are excluded from the effective index even though they may be included in the full index.","Another rule that can be used to determine the effective index is a duplicate rule. A duplicate rule specifies that if multiple copies of the same software component are installed on the computing device, only one such copy is to be maintained in the effective index. Multiple such copies can be installed for a variety of different reasons, such as as a result of multiple software products being installed on the computing device each of which includes a common software component.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 3","b":["300","300","302","300","302","300","300"]},"Manifest  stores metadata describing software component  and the functionality exposed by software component . In one or more embodiments, manifest  includes an identifier of software component . The identifier of software component  allows software component  to be distinguished from other software components installed on the device. This identifier can be made up of various attributes, such as one or more version numbers of software component , a digital signature over resource files  (and optionally parts of manifest ), and an identifier of the publisher or developer of software component . Alternatively, these version numbers, digital signature, and identifier of the publisher or developer can be maintained separately instead of (or in addition to) being included as attributes of the identifier of software component .","The version number of software component  allows different versions of software component  to be readily identified. These version numbers can be used to facilitate managing of software component  as discussed in more detail below.","Manifest  can also include hash values generated by applying a hash function to resource files . A variety of different hash functions can be used to generate the hash values, such as one or more cryptographic or one-way hash functions. Examples of such hash functions include the MD5 (Message-Digest algorithm 5) hash function, the SHA-1 (Secure Hash Algorithm 1) hash function, and so forth.","A digital signature over at least a portion of manifest  (e.g., those portions of manifest  other than the digital signature) is generated by or on behalf of a publisher of software component . The digital signature can alternatively also be over resource files  (in place of or in addition to hashes of the resource files  being included in manifest ). The publisher of software component  can be a developer of resource files  of software component , or alternatively another entity that distributes software component . The digital signature can be generated using any of a variety of well-known techniques based on public key cryptography. The digital signature changes if the resource files  (e.g., due to the hash values of the resource files  in manifest ) as well as the other portions of manifest  over which the digital signature is made change. Accordingly, the digital signature can also serve as an identifier of a particular set of resource files  as well as the other portions of manifest  over which the digital signature is made change.","The identity of the publisher and\/or developer of software component  and can also be included in manifest . The digital signature can also be generated over this identity of the publisher and\/or developer.","When software component  is to be installed on a computing device, such as computing device  of , software component  is obtained by an installation or deployment component or module. Software component  can be obtained from any of a variety of local and\/or remote services and\/or devices.","As part of the installation process, the identifier of software component  is added to the catalog of the particular account of the operating system of the computing device at the time of installation or alternatively as identified by the installation process. The installation process can add the identifier of software component  to the catalog, or alternatively can communicate with a software component access control module (e.g., control module  of ) which in turn can add the identifier of software component  to the catalog.","In one or more embodiments, one or more validation actions are taken by a software component access control module or by an installation component or module prior to adding the identifier of software component  to the catalog. A variety of different validation actions can be taken. For example, a set of rules or criteria can be established that software component , manifest , and\/or resource files  are to conform to. As part of the validation, a check can be made as to whether the set of rules or criteria has in fact been conformed to. If the set of rules or criteria has not been conformed to, then the identifier of software component  is not added to the catalog.","By way of another example, a check can be made as to whether a digital signature over resource files  and\/or manifest  as discussed above is present in manifest . If no such digital signature is present in manifest , then the identifier of software component  is not added to the catalog. However if such a digital signature is present in manifest , then a check is made that the resource files  and\/or manifest  over which the digital signature was made have not been altered since being digitally signed. This check can include calculating hash values for the resource files  to verify that the calculated hash values are the same hash values as are stored in manifest . Checking that the manifest  over which the digital signature is made has not been altered can be performed in any other variety of well-known manners using public-key cryptography. A check can also be made as to whether an identifier of a publisher of software component  is included in manifest  matches (e.g., is the same as) a publisher identifier included in the digital signature. If the resource files  and\/or manifest  over which the digital signature was made have been altered since being digitally signed, then the identifier of software component  is not added to the catalog.","By way of yet another example, a check can be made as to whether an entity that generated the digital signature over resource files  and\/or manifest  is trusted. This check can be made by accessing a certificate store to determine whether a digital certificate of the entity that generated the digital signature is included in a certificate store of the device on which software component  is being installed. Alternatively, rather than being included in the certificate store, a certificate chain from a digital certificate in the certificate store to the digital certificate of the entity that generated the digital signature can be established. If such a digital certificate is not included in the certificate store (or a certificate chain cannot be established), then the identifier of software component  is not added to the catalog.","Returning to , once software components - are installed on computing device , paths to the locations of one or more of the resource files of the software components - can be maintained. These paths can be maintained in catalog  or alternatively as metadata in other stores of operating system . These paths allow the particular files to be retrieved and executed, loaded, or otherwise used as appropriate. For example, paths to icons to be displayed as shortcuts can be maintained, paths to executable files can be maintained, paths to dynamic link libraries (DLLs) can be maintained, and so forth. By maintaining these paths, information regarding the software components can be readily identified and returned. For example, if a particular software component is to be run, the path to an executable file for the software component can be readily identified. By way of another example, if an icon representing a shortcut to a software component is to be displayed, the file storing the data for the icon can be readily identified. By way of yet another example, if a DLL is to be loaded, the path to the file storing that DLL can be readily identified.","Software component access control module  allows various other components and modules to obtain information regarding installed software components from catalog . Such other components and modules can be part of operating system , or alternatively can be one or more of software components -. Information maintained in catalog  regarding the installed software components can be returned to a requesting component or module, or alternatively can be used by control module  in generating a response to a request. Catalog  can also be leveraged by other components or modules of operating system  as catalog  maintains a record of the software components installed on computing device .","In one or more embodiments, various operations are supported by control module  in accessing catalog . These operations can be exposed as methods of an application programming interface (API) or alternatively requests for these operations to be performed can be made to control module  in other manners. Table I below describes an example of such operations supported by control module  in accessing catalog .",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE I"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Operation","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Enumerate","Returns a list of catalogs in the operating system."]},{"entry":"catalogs"},{"entry":["Get catalog","Returns a catalog for an account specified in the"]},{"entry":[{},"request to perform the operation."]},{"entry":["Add component","Adds a software component to a catalog."]},{"entry":["Remove","Removes a software component from a catalog."]},{"entry":"component"},{"entry":["Enumerate","Returns a list of the software components in the full"]},{"entry":["components","index and\/or effective index of a catalog."]},{"entry":["Enumerate","Returns a list of the software components in the full"]},{"entry":["components by","index and\/or effective index of a catalog specified in"]},{"entry":["identity","the request having a software component identifier that"]},{"entry":[{},"matches a specified identity. The specified identity can"]},{"entry":[{},"be partial or full. For example, the specified identity"]},{"entry":[{},"can use wildcards to indicate unspecified attributes or"]},{"entry":[{},"parts of the component identity."]},{"entry":["Get component","Returns a software component identifier from the"]},{"entry":["by path","effective index and\/or the full index given a specified"]},{"entry":[{},"catalog and path of a directory or a file. This allows a"]},{"entry":[{},"caller to determine whether a given file belongs to a"]},{"entry":[{},"component in the effective index and\/or full index."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"As discussed above, in one or more embodiments the identifier for a software component includes a component identifier that identifies a version number for the software component. In situations where two software components have the same version number, then (assuming the remaining portions of the component identifiers of the two software components are the same) one of the two software components is determined to be a new replacement version of the other. The one of the two software components that is determined to be the new replacement version can be determined in a variety of different manners, such as the one that has the higher version number. Control module  replaces the older version of the software component with the new replacement version of the component, resulting in subsequent requests for that software component to have the new replacement version returned. In one or more embodiments, control module  adds the new replacement version of the component to the effective index of catalog  and removes the older version of the software component from the effective index of catalog . Alternatively, control module  can determine which of the two versions of the software component is the new replacement version at other times, such as in response to a request for the software component.","Additionally, each software component has a manifest as discussed above. In one or more embodiments, the manifest of each software component also identifies whether the software component relies on other software components for operation. For example, software component  may rely on software component  also running in the system, and software component  may rely on software component  also running in the system.","Given this information in the manifests of the software components, control module  can readily determine whether a particular software component can run on computing device . For example, control module  can access the manifest of software component  and determine that, in order for software component  to run that software component  (and thus also software component ) also be running. Accordingly, control module  can respond to queries from other components or modules (which can be part of operating system  or alternatively separate from operating system ) regarding whether a particular software component can run in computing device . If the other software components that the particular software component relies on are in catalog , then the particular software component can run in computing device . However, if the other software components that the particular software component relies on are not in catalog , then the particular software component cannot run in computing device .","Similarly, given this information in the manifests of the software components, control module  can readily determine whether removal of a particular software component from computing device  will prevent other software components from running. For example, control module  can access the manifest of software component  and determine that, in order for software component  to run that software component  (and thus also software component ) also be running. Accordingly, control module  can respond to queries from other components or modules (which can be part of operating system  or alternatively separate from operating system ) regarding whether software component  can be removed from computing device  by indicating that software component  cannot be removed without resulting in at least one other software component possibly failing to run properly. The identity of the software component that might fail to run properly can also be included in the response to such a query.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 4","FIG. 1"],"b":["400","400","104","400"]},"In process , software component identifiers are maintained in a catalog (act ). These software component identifiers distinguish software components from one another, and can take a variety of different forms as discussed above. Multiple different catalogs can be included on a device, each optionally including different indexes, as discussed above.","Eventually, a request regarding a software component is received (act ). Process  waits until such a request is received, and in response to the request accesses the catalog (act ). The catalog to be accessed can be identified as part of the request, or alternatively can be inherent in the request (e.g., the catalog of a current user of the computing device implementing process ).","The request is responded to based on the information in the catalog (act ). This information in the catalog includes at least the component identifiers, as discussed above. The particular response can vary based on the nature of the requested operation, as discussed above.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 5","FIG. 1"],"b":["500","500","500","104","500"]},"In process , multiple versions of a software component accessible to a user that is installed on a device are identified (act ). Different users can have access to different software components, as discussed above.","A determination is made as to which of the multiple versions is an active version of the software component (act ). This determination can be made when the multiple versions are identified or at other times, and a list of the active versions can be maintained (e.g., as an effective index) as discussed above. Alternatively, this determination can be made in response to a request for information regarding the software component.","In response to requests for information regarding the software component, information regarding the active version of the software component is returned (act ). Such requests can be requests received from other components or modules of an operating system implementing process , or alternatively other software components as discussed above.","Process  refers to a single software component. It is to be appreciated that process  can be repeated for multiple software components. For example, an effective index of the active versions of multiple software components can be maintained as discussed above.","It should also be noted that the identification performed in act  and the determination performed in act  can be performed at various times. In one or more embodiments, acts  and  are performed each time a change is made to the software components installed on computing device . A software access control module implementing process  can be informed by another component or module of the operating system when such a change is made. Examples of such changes include installing a software component and uninstalling a software component. Alternatively, acts  and  can be performed at other times, such as in response to a request for information regarding a software component or catalog, during times of low activity (e.g., when the operating system is not busy performing other tasks), and so forth.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 6","FIG. 1"],"b":["600","600","100"]},"Computing device  includes one or more processors or processing units , one or more computer readable media  which can include one or more memory and\/or storage components , one or more input\/output (I\/O) devices , and a bus  that allows the various components and devices to communicate with one another. Computer readable media  and\/or one or more I\/O devices  can be included as part of, or alternatively may be coupled to, computing device . Bus  represents one or more of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, a processor or local bus, and so forth using a variety of different bus architectures. Bus  can include wired and\/or wireless buses.","Memory\/storage component  represents one or more computer storage media. Component  can include volatile media (such as random access memory (RAM)) and\/or nonvolatile media (such as read only memory (ROM), Flash memory, optical disks, magnetic disks, and so forth). Component  can include fixed media (e.g., RAM, ROM, a fixed hard drive, etc.) as well as removable media (e.g., a Flash memory drive, a removable hard drive, an optical disk, and so forth).","The techniques discussed herein can be implemented in software, with instructions being executed by one or more processing units . It is to be appreciated that different instructions can be stored in different components of computing device , such as in a processing unit , in various cache memories of a processing unit , in other cache memories of device  (not shown), on other computer readable media, and so forth. Additionally, it is to be appreciated that the location where instructions are stored in computing device  can change over time.","One or more input\/output devices  allow a user to enter commands and information to computing device , and also allows information to be presented to the user and\/or other components or devices. Examples of input devices include a keyboard, a cursor control device (e.g., a mouse), a microphone, a scanner, and so forth. Examples of output devices include a display device (e.g., a monitor or projector), speakers, a printer, a network card, and so forth.","Various techniques may be described herein in the general context of software or program modules. Generally, software includes routines, programs, objects, components, data structures, and so forth that perform particular tasks or implement particular abstract data types. An implementation of these modules and techniques may be stored on or transmitted across some form of computer readable media. Computer readable media can be any available medium or media that can be accessed by a computing device. By way of example, and not limitation, computer readable media may comprise \u201ccomputer storage media\u201d and \u201ccommunications media.\u201d","\u201cComputer storage media\u201d include volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules, or other data. Computer storage media include, but are not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by a computer.","\u201cCommunication media\u201d typically embody computer readable instructions, data structures, program modules, or other data in a modulated data signal, such as carrier wave or other transport mechanism. Communication media also include any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media include wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.","Generally, any of the functions or techniques described herein can be implemented using software, firmware, hardware (e.g., fixed logic circuitry), manual processing, or a combination of these implementations. The terms \u201cmodule\u201d and \u201ccomponent\u201d as used herein generally represent software, although can alternatively also incorporate firmware and\/or hardware. In the case of a software implementation, the module or component represents program code that performs specified tasks when executed on a processor (e.g., CPU or CPUs). The program code can be stored in one or more computer readable memory devices, further description of which may be found with reference to . The features of the catalog-based software component management described herein are platform-independent, meaning that the techniques can be implemented on a variety of commercial computing platforms having a variety of processors.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The same numbers are used throughout the drawings to reference like features.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
