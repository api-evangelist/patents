---
title: Centralized enforcement of name-based computer system security rules
abstract: This disclosure describes techniques of using a centralized rule database to control the abilities of software processes to perform actions with regard to resources provided by a computer. As described herein, each software process executing in a computer executes within a chamber and each resource provided by the computer is associated with a canonical name that uniquely identifies the resource. Furthermore, the computer stores a set of security rules in a centralized rule database. In addition, this disclosure describes techniques of enforcing the rules stored in the centralized rule database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07930760&OS=07930760&RS=07930760
owner: Microsoft Corporation
number: 07930760
owner_city: Redmond
owner_country: US
publication_date: 20080627
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims the benefit of U.S. Provisional Application No. 61\/041,425, filed Apr. 1, 2008, the entire content of which is hereby incorporated by reference.","The arrival of Internet has ushered in an era in which computer security is of great importance. Because computers can now easily communicate, computer users can now unwittingly download and install software applications that, when executed as software processes, maliciously steal or destroy sensitive information or otherwise cause computers to behave in unexpected and undesirable ways. For instance, a software application embedded in an innocuous email attachment may, when clicked on by a user of a computer, launch a software process that sends credit card information stored on the computer to another computer. Accordingly, various computer security techniques have been developed to control the ability of software processes executing on a computer to perform actions with regard to other resources provided by the computer.","In one such technique, each sensitive resource provided by a computer is associated with an access control list. The access control list associated with a resource specifies users who are allowed to perform actions with regard to the resource. For instance, an access control list associated with a file that contains a credit card number may specify that processes associated with a user named \u201cHarry\u201d are allowed to read the file and may specify that processes associated a user named \u201cTom\u201d are not allowed to read the file.","In another such technique, a computer stores capability lists associated with each user of the computer. The capability list associated with a user lists which sensitive resources the user is allowed to access. For instance, a capability list associated with a user named \u201cRobert\u201d may specify that processes initiated by \u201cRobert\u201d are allowed to communicate on the Internet and that processes initiated by \u201cRobert\u201d are allowed to read a file that contains a credit card number.","This disclosure describes techniques of using a centralized rule database to control the abilities of software processes to perform actions with regard to resources provided by a computer. As described herein, each software process executing in a computer executes within a chamber and each resource provided by the computer is associated with a canonical name that uniquely identifies the resource. Furthermore, the computer stores a set of security rules in a centralized rule database. In addition, this disclosure describes techniques of enforcing the rules stored in the centralized rule database.","The techniques of this disclosure may be conceptualized in a variety of ways. For example, the techniques of this disclosure may be conceptualized as a method that comprises storing a set of rules in a centralized rule database, each rule specifying a set of actions that a subject account has a right to perform with regard to protected resources having canonical names described by a resource name pattern. In addition, the method comprises associating each software process of a device with a chamber in a plurality of chambers, wherein none of the software processes are associated with more than one of the chambers. Each chamber in the plurality of chambers is associated with at least one of the software processes. The method also comprises providing a set of service providers that performs an action with regard to one of the protected resources in response to a request from one of the software processes when the centralized rule database includes a rule that grants to an account associated with the chamber associated with the software process a right to perform the action with regard to the one of the protected resources. For each of the software processes, the software process uses the service providers to perform actions on any of the protected resources that are not associated with the software process. Furthermore, the method comprises receiving, with a target service provider that is one of the service providers, a request from a requesting software process that is one of the software processes. The method also comprises performing, with the target service provider in response to the request, an action with regard to a target resource when the centralized rule database includes a rule that grants to a subject account a right to perform the action with regard to the target resource, wherein the target resource is one of the protected resources, wherein the subject account is an account associated with the chamber associated with the requesting software process.","In another example, the techniques of this disclosure may be conceptualized as a device that comprises a plurality of protected resources, each of which is associated with a distinct canonical name. The device also comprises a centralized rule database that stores a set of rules, each rule specifying a set of actions that a subject account has a right to perform with regard to ones of the protected resources having canonical names described by a resource name pattern. In addition, the device comprises a set of software processes that includes each software process of the device. Each of the software processes is associated with a chamber in the plurality of chambers and each of the chambers is associated with at least one of the software processes. Furthermore, the device comprises a security infrastructure that, for any of the software processes associated with any of the chambers, prevents the software process from directly or indirectly performing an action on any of the protected resources that are outside the chamber, except when one of the rules in the centralized rule database grants to a subject account a right to perform the action on a target resource. The target resource is one of the protected resources that is not associated with the chamber. The subject account is an account associated with the chamber.","In another example, the techniques of this disclosure may be conceptualized as a computer-readable medium comprising instructions that, when executed by a computer, cause the computer to extract a set of rules from a document that contains extensible markup language (XML) elements, one or more of which represents one of the rules. Each of the rules includes: 1) a resource name attribute that specifies a resource name pattern that describes Internationalized Resource Identifiers (IRIs) that identify protected resources of the device, 2) a speaker attribute that specifies an account identifier that identifies an account associated with a process that created the rule; and 3) a priority attribute that specifies a priority of the rule. A first subset of the rules also include an authorize property that includes one or more delegation match attributes, wherein each match attribute of a rule in the first subset of the rules includes: 1) a delegate account identifier attribute that specifies an account identifier; and 2) a delegation action attribute that specifies a set of actions. A second subset of the rules also includes a delegation property that includes one or more match attributes, wherein each match attribute of a rule in the first subset of the rules includes: 1) an account identifier attribute that specifies an account identifier; and 2) an action attribute that specifies a set of actions. The instructions also cause the device to store the set of rules in a centralized database. In addition, the instructions cause the device to generate, for each software process of the device, an access token that specifies a chamber in a plurality of chambers, wherein none of the software processes are associated with more than one of the chambers, wherein each chamber in the plurality of chambers is associated with at least one of the software processes. The instructions also cause the device to provide a set of service providers that only perform an action with regard to one of the protected resources in response to a request from one of the software processes when the centralized rule database includes a rule that grants to an account associated with the chamber associated with the software process a right to perform the action with regard to the one of the protected resources. For each of the software processes, the software process must use the service providers to perform actions on any of the protected resources that are not associated with the software process. In addition, the instructions cause the device to launch a client process. The instructions also cause the device to invoke, with the requesting process, a method of a software interface implemented by a target server provider that is one of the service providers. Furthermore, the instructions cause the device to invoke, with the method of the target service provider after the method of the target service provider is invoked, a rule check method implemented by a rule enforcement engine that is part of a trusted computing base of the device, specifying a canonical resource name of a target resource that is one of the protected resources as a resource name parameter of the rule check method, specifying the access token for the requesting process as a subject parameter of the rule check method, and specifying a set of at least one right as a rights requested parameter of the rule check method. In addition, the instructions cause the device to invoke, with the rule check method after the rule check method is invoked, a query method implemented by a database service provider that is part of the trusted computing base of the device, specifying a trusted computing base account as a speaker parameter of the query method, specifying the resource name specified by the resource name parameter of the rule check method as a resource name parameter of the query method, and specifying the access token specified by the subject parameter of the rule check method as a subject parameter of the query method. The instructions also cause the device to initialize, with the query method when the query method is invoked, a priority variable to indicate a lowest priority, a rights granted variable to an empty set of rights, a stop processing flag to false. Furthermore, the instructions cause the device to identify, with the query method after the priority variable is initialized, a matching rule set that includes all rules in the centralized database that include a speaker attribute that specifies the trusted computing base account and that include a resource name attribute that specifies a resource name pattern that describes the resource name specified by the resource name parameter of the query method. The instructions also cause the device to (1) identify, with the query method after identifying the matching rule set, a current rule set that includes all rules in the matching rule set that include a priority attribute that specifies a priority equal to a priority specified by the priority variable. In addition, for each of the rules in the current rule set, the instructions cause the device to (2):\n\n","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.",{"@attributes":{"id":"p-0016","num":"0024"},"figref":["FIG. 1","FIG. 1"],"b":"2"},"Device  may be a wide variety of different types of devices. For instance, device  may be a handheld computing device such as a mobile telephone, a tablet computer, a smart phone, a personal digital assistant, a personal media player, a portable gaming system, or another type of handheld computing device. In another instance, device  may be a personal computer, a laptop computer, a computer kiosk, a server, an intermediate network device, a network appliance, a server blade, a telephone, a television set top box, a game console, an electronic gambling device, a mainframe computer, a specialized scientific computer, or another type of computing device. In a third instance, device  may be a device integrated into a vehicle (including manned and autonomous civilian and military vehicles, trucks, trains, watercraft, aircraft, spacecraft, and other types of vehicles).","As illustrated in the example of , device  includes a chipset  that facilitates data communication between a processor , a graphics chipset , an Input\/Output (I\/O) controller , a network interface , and a data storage medium . Chipset  may be many different types of chipsets. For instance, chipset  may be a chipset in the Advanced Micro Devices  chipset series manufactured by Advanced Micro Devices of Sunnyvale, Calif., a chipset in the nForce  chipset series by Nvidia Corporation of Santa Clara, Calif., or another type of chipset. Chipset  may exchange information with processor , graphics chipset , I\/O controller , networking interface , and data storage medium  using a variety of different types of buses and\/or interconnects. For instance, chipset  may use a PCI Express interconnect to exchange data with graphics chipset  and may use a Low Pin Count (LPC) bus to exchange data with I\/O controller .","It should be appreciated that device  may include many other components in addition to processor , graphics chipset , I\/O controller , network interface , and data storage medium . For instance, device  includes a power distribution system that is not illustrated in the example of . Furthermore, it should be appreciated that in other instances, devices implementing the techniques of this disclosure may not include all of the components illustrated in the example of . For instance, a device that implements the techniques of this invention might not include a network interface, a graphics chipset, and\/or an I\/O controller.","Data storage medium  represents a logical collection of one or more volatile and\/or non-volatile data storage media that are capable of storing data, including software instructions and application data. For instance, data storage medium  may represent one or more magnetic disks, optical discs, flash memory units, dynamic random access memory (RAM) units, RamBus RAM units, synchronous dynamic RAM units, or other types of data storage media.","Processor  is an integrated circuit that is capable of executing instructions. For example, processor  may be a microprocessor, an application-specific integrated circuit, a digital signal processor, a graphics processing unit, or another type of integrated circuit that is capable of executing instructions. For instance, processor  may be a Core processor manufactured by Intel Corporation of Santa Clara, Calif., or a K10 processor manufactured by Advanced Micro Devices, Inc. of Sunnyvale, Calif. Although not illustrated in the example of , device  may include several such processors. Processor  may read data stored in data storage medium  by retrieving the data via chipset . Moreover, processor  may write data to data storage medium  by sending the data to data storage medium  via chipset .","Network interface  enables device  to send data on a network and to receive data from the network. For instance, network interface  may be an Ethernet network interface, a token ring network interface, a fiber optic network interface, a WiFi network interface, a WiMax network interface, or another type of wired or wireless network interface. When network interface  receives data from the network, network interface  may store the data in data storage medium  by sending the data to data storage medium  via chipset . Furthermore, processor  may send data via chipset  to network interface  for transmission on the network.","Graphics chipset  may be one or more integrated circuits that render graphics for output on a display device. For instance, graphics chipset  may perform 2-dimensional and 3-dimensional graphics operations in response to requests from processor .","I\/O controller  enables device  to receive input from peripheral input devices such as keyboards, mice, trackballs, touch-sensitive screens, microphones, and other peripheral input devices. In addition, I\/O controller  may enable input from and output to devices attached to device  via Universal Serial Bus (USB) ports, serial buses, parallel buses, and other types of devices.","As illustrated in the example of , data storage medium  stores software applications A-N (collectively, software applications ). Software applications  may be a wide variety of different types of software applications. For instance, software applications  may be word-processing applications, spreadsheet applications, multimedia applications, game applications, network browser applications, computer virus applications, spyware applications, or other types of legitimate or malicious software applications. When executed by processor , software applications  become one or more software processes. In other words, when processor  executes instructions in any of software applications , the instructions may cause processor  to manage one or more \u201csoftware processes.\u201d","As illustrated in the example of , data storage medium  stores an operating system . For example, operating system  may be a Microsoft VISTA\u00ae operating system, a Microsoft Windows XP operating system, a Microsoft Windows CE operating system, a Windows Server\u00ae operating system, a Linux operating system, an Apple Macintosh operating system, or another type of operating system. When executed by processor , operating system  manages the sharing of the resources of device . For example, operating system  controls and allocates random access memory, manages a file system, sends and receives data via a network, manages creation and termination of software processes, manages prioritization of software processes, manages software process context switching, manages thread context switch, manages virtual memory, manages inter-process communication, manages a registry, and so on. Furthermore, operating system  provides software interfaces that enable software processes to access resources of device . For example, operating system  may provide a software interface that enables software processes to read data from and write data to files in the file system, a software interface that enables software processes to create other software processes, a software interface that enables software processes to receive data from and send data to a network, and so on.","When device  starts up, device  automatically begins executing operating system . After launching, but before operating system  allows any user-mode processes to begin executing, operating system  may require a user  of device  to log in. For example, operating system  may require user  to provide a username and password and may log in user  when user  provides a password that corresponds to the entered username. After user  logs in, operating system  may automatically launch one or more of software applications . In addition, after user  logs in, user  may instruct operating system  to launch one or more of software applications .","As described in detail below, when operating system  launches one of software applications , operating system  may create an access token associated the resulting software process. The access token of the software process identifies a chamber within which the software process executes. As used in this disclosure, a \u201cchamber\u201d is a virtual execution environment. A chamber is a virtual execution environment in the sense that a software process executing in the chamber can interact with resources within the chamber, but cannot interact with resources in other chambers, except when granted the right to do so. For example, a first software process operating in a first chamber cannot interact with a second software process operating in a second chamber, but the first software process and the second software process can interact with a common set of lower-level resources. In some circumstances, a software process operating in a first chamber can use a lower-level resource to communicate with a software process operating in a second chamber.","Each chamber is associated with an account or a group of accounts recognized by device . Each account is associated with a unique name. In other words, in the example shown, no two accounts recognized by device  can have the same name.","Device  may recognize several different types of accounts. For example, device  may recognize accounts associated with individual people, accounts associated with supervisors, and an account associated with a Trusted Computing Base (TCB). An account associated with an individual person may have limited rights to perform actions on resources. A supervisor account is an account that has greater rights than a user account. The TCB account is a special account that has unlimited rights to all resources of device . Processes in the TCB of device  are only permitted to operate in a chamber associated with the TCB account.","As described in detail below, each resource of device  is associated with a canonical name. In the example shown, no two resources of device  can have the same canonical name. In one implementation, the canonical names of resources are Internationalized Resource Identifiers (IRIs) as defined in Internet Engineering Task Force (IETF) Request For Comment (RFC) 3987. An IRI is a sequence of characters from the Universal Character Set (Unicode\/ISO 10646) that identifies a resource. For example, the canonical name of a file in a file system may be \u201cManagement:\/\/file\/Documents and Settings\/Smith\/My Documents\/bookreport.doc\u201d. In another example, the canonical name of a fax service may be \u201cManagement:\/\/Windows\/System32\/Fax\u201d. Slash characters (i.e., \u201c\/\u201d) divide canonical names of resources into path segments. For instance, in the previous example, \u201cWindow,\u201d \u201cSystem32,\u201d and \u201cFax\u201d are each path segments.","A centralized rule database  maintained by operating system  stores rules, each of which specifies one or more actions that a software process associated with an account or group of accounts is permitted to perform on one or more resources. For instance, each rule stored in centralized rule database  includes an account portion, an action portion, and a resource name pattern portion. In this instance, the account portion of a rule is a string that identifies an account or group of accounts. The action portion of a rule is a string that describes a particular type of action. These actions may include \u201cread,\u201d \u201cwrite,\u201d \u201cexecute,\u201d and\/or other types of actions. The resource name pattern portion of a rule is a string that describes a set of canonical names of resources. For example, \u201cManagement:\/\/Windows\/System32\/Fax\u201d is a resource name pattern that describes the canonical name of a single resource.","Resource name patterns may include wildcard characters. In one example implementation, resource name patterns may include \u201c*\u201d wildcard characters and\/or \u201c+\u201d wildcard characters. In this implementation, the \u201c*\u201d wildcard character represents one or more path segments and is only valid as the last path segment of a resource name pattern. For example, \u201cManagement:\/\/Windows\/System32\/*\u201d is a resource name pattern that describes all canonical names that begin with the string \u201cManagement:\/\/Windows\/System32\/\u201d. In this example, \u201cManagement:\/\/Windows\/System32\/Fax\u201d and \u201cManagement:\/\/Windows\/System32\/TCP\u201d are canonical names of resources that begin with the string \u201cManagement:\/\/Windows\/System32\/\u201d. Furthermore, in this implementation, the \u201c+\u201d wildcard character represents any one path segment and may be used in place of any path segment in a resource name pattern. For example, \u201cManagement:\/\/dms\/+\/ext\u201d is a resource name pattern that describes all canonical names that begin with the string \u201cManagement:\/\/dms\/\u201d, specify any single path segment, and end with the string \u201cext\u201d. In this example, \u201cManagement:\/\/dms\/ABC\/ext\u201d and \u201cManagement:\/\/dms\/XYZ\/ext\u201d are canonical names of hypothetical resources described by the resource name pattern \u201cManagement:\/\/dms\/+\/ext\u201d.","When a software process executing in a chamber associated with a specific account wants to perform an action that requires the use of a particular resource, the software process may invoke a method of a software interface provided by operating system . For example, when the software process wants to read information from a particular file, the software process may invoke a hypothetical \u201cread(String filename)\u201d method provided by operating system . When the software process invokes the method, operating system  automatically determines whether the invoked method is permitted to perform the requested action on behalf of the software process. Operating system  may determine whether the invoked method is permitted to perform the action on behalf of the software process by determining whether a rule in centralized rule database  grants to the account the right to perform the requested action with regard to the protected resource. If centralized rule database  contains such a rule, operating system  may permit the invoked method to perform the requested action on behalf of the software process. Otherwise, if centralized rule database  does not contain such a rule, operating system  does not permit the invoked method to perform the requested action on behalf of the software process.",{"@attributes":{"id":"p-0035","num":"0043"},"figref":["FIG. 2","FIG. 2"],"b":["2","18","40"]},"When the software process invokes the method, operating system  uses rules in centralized rule database  to determine whether the account has a right to perform the action on the protected resource (). In the previous example, operating system  uses the rules in centralized rule database  to determine whether the account has a right to write to the particular file.","If the account has a right to perform the action on the protected resource (\u201cYES\u201d of ), operating system  permits the invoked method to perform the action on the protected resource (). In the previous example, when the account has a right to perform the action on the protected resource, operating system  permits the \u201cwriteToFile\u201d method to write the data to the particular file.","On the other hand, if the account does not have a right to perform the action on the protected resource (\u201cNO\u201d of ), operating system  does not permit the invoked method to perform the action on the protected resource (). In the previous example, when the account does not have a right to perform the action on the protected resource, operating system  does not permit the \u201cwriteToFile\u201d method to write the data to the particular file.",{"@attributes":{"id":"p-0039","num":"0047"},"figref":"FIG. 3","b":["2","2"]},"As illustrated in the example of , device  includes operating system  and operating system  includes a security infrastructure . Security infrastructure  prevents any process operating in a chamber from directly or indirectly performing an action on any protected resources that are outside the chamber, except when one of the rules in the centralized rule database explicitly grants to the account associated with the chamber a right to perform the action on one of the protected resources that is outside the chamber. Security infrastructure  may be part of a trusted computing base of device . The trusted computing base of device  is the software in device  that is considered vital to the security of device .","Furthermore in the example of , security infrastructure includes a set of one or more account documents . Account documents  are files that define \u201caccounts.\u201d As used in this disclosure, an account is a logical group of one or more users. Each account is associated with an account identifier that is usable in rules. For example, one of account documents  may include the following Extensible Markup Language (XML) element that defines an account:",{"@attributes":{"id":"p-0042","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Account"]},{"entry":[{},"\u2003Id=\u201cSupervisor_Account\u201d"]},{"entry":[{},"\u2003FriendlyName=\u201cWindows Mobile System Account\u201d"]},{"entry":[{},"\u2003Action=\u201cCreateNew\u201d"]},{"entry":[{},"\u2003Description=\u201cLocal System\u201d"]},{"entry":[{},"\u2003Type=\u201cUser\u201d>"]},{"entry":[{},"\u2003\u2003<MemberOfGroup Action=\u201cAdd\u201d"]},{"entry":[{},"\u2003\u2003\u2003GroupAccountID=\u201c$(SYSTEM_GROUP_NAME)\u201d\/>"]},{"entry":[{},"\u2003\u2003<MemberOfGroup Action=\u201cAdd\u201d"]},{"entry":[{},"\u2003\u2003\u2003GroupAccountID=\u201c$(SUPERVISOR_GROUP_NAME)\u201d\/>"]},{"entry":[{},"<\/Account>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Furthermore, in the example of , security infrastructure  includes a set of rule documents . Rule documents  are files that contain rules. In one implementation, rule documents  may contain XML elements that represent the rules.","In one example implementation, each rule has a \u201cresource name pattern\u201d attribute, a \u201cpriority\u201d attribute, and \u201cspeaker\u201d attribute. The \u201cresource name pattern\u201d attribute of a rule specifies a resource name pattern that describes a set of canonical names of resources.","The \u201cpriority\u201d of a rule specifies the priority category of the rule. Because the \u201cresource name pattern\u201d attributes of rules may specify resource name patterns that describe the canonical names of multiple resources, multiple rules may be applicable to a single resource. These rules may potentially contradict each other. For instance, a first rule may indicate that a particular account only has a right to read a particular resource and a second rule may indicate that the particular account only has a right to execute the particular resource. The priority categories specified by \u201cpriority\u201d attributes of rules may help to resolve such conflicts by indicating which rule to apply when more than one rule is applicable.","The \u201cspeaker\u201d attribute of a rule specifies an account identifier of a \u201cspeaker\u201d of the rule. As used in this disclosure, an account that created a rule is the \u201cspeaker\u201d of the rule. Rules may be created by a variety of different accounts. As a result, a rule created by a user associated with a low-level account could contradict a rule created by a user associated with a high-level account. For example, a senior information technology (IT) officer at a company may create rules in rule documents  and a junior IT officer may also create rules in rule documents . Consequently, the junior IT officer may inadvertently create a rule that contradicts a rule created by the senior IT officer. To prevent this result, each rule includes a \u201cspeaker\u201d attribute that specifies an account identifier associated with a user who created the rule. As described below, when conflicting rules are evaluated, preference may be given to a rule that was created by a user with higher priority.","Furthermore, rules in centralized rule database  may include one or more \u201cauthorize\u201d properties. Each \u201cauthorize\u201d property of a rule includes one or more match properties. A match property of an \u201cauthorize\u201d property indicates actions that accounts are authorized to (i.e., have a right to) perform with regard to resources having canonical names described by the resource name pattern specified by the \u201cresource name pattern\u201d attribute of the rule.","In one implementation, each match property has an \u201caccount identifier\u201d attribute, an \u201caction\u201d attribute, and a \u201cstop\u201d attribute. The \u201caccount identifier\u201d attribute of a \u201cmatch\u201d property specifies an account identifier that identifies an account or group of accounts. For example, the \u201caccount identifier\u201d attribute of a \u201cmatch\u201d property may specify the account identifier \u201cSupervisor_Group\u201d. The \u201caction\u201d attribute of a \u201cmatch\u201d property specifies one or more actions. For instance, the \u201caction\u201d attribute of a \u201cmatch\u201d property may specify the actions \u201cREAD\u201d and \u201cWRITE\u201d. The \u201cstop\u201d attribute of a \u201cmatch\u201d property specifies \u201ctrue\u201d or \u201cfalse.\u201d When the \u201cstop\u201d attribute of the \u201cmatch\u201d property specifies \u201ctrue,\u201d then no lower priority rule is permitted to grant a right to the account identified by the \u201caccount identifier\u201d attribute of the \u201cmatch\u201d property to perform an action on a resource having a canonical name described by the resource name pattern specified by the \u201cresource name pattern\u201d attribute of the rule. On the other hand, if the \u201cstop\u201d attribute of the \u201cmatch\u201d property specifies \u201cfalse\u201d, then a lower priority rule is permitted to grant a right to the account identified by the \u201caccount identifier\u201d attribute of the \u201cmatch\u201d property to perform an action on a resource having a canonical name described by the \u201cresource name pattern\u201d specified by the resource name pattern attribute of the rule.","In this way, each \u201cmatch\u201d property of an \u201cauthorize\u201d property of a rule indicates that a process in a chamber associated with an account identified by the \u201caccount identifier\u201d attribute of the \u201cauthorize\u201d property has a right to perform the action specified by the \u201caction\u201d attribute of the \u201cauthorize\u201d property on resources having canonical names described by a resource name pattern specified by the \u201cresource name pattern\u201d attribute of the rule.","In an implementation in which rules are represented as XML elements, one of rule documents  may include the following rule element:",{"@attributes":{"id":"p-0051","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Rule"]},{"entry":[{},"\u2003Description=\u201cProtect the connection manager directory\u201d"]},{"entry":[{},"\u2003ResourceIRI=\u201c$(FILESYS_PRIMARY_ROOT)\/CONNMGR\/(*)\u201d"]},{"entry":[{},"\u2003SpeakerAccountId=\u201c$(SYSTEM_USER_NAME)\u201d"]},{"entry":[{},"\u2003PriorityCategoryId=\u201cPRIORITY_STANDARD\u201d>"]},{"entry":[{},"\u2003\u2003<Authorize>"]},{"entry":[{},"\u2003\u2003\u2003<Match"]},{"entry":[{},"\u2003\u2003\u2003\u2003AccountId=\u201cSupervisor_Group\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003Actions=\u201cALL_ACCESS\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003Stop=\u201cfalse\u201d \/>"]},{"entry":[{},"\u2003\u2003\u2003<Match"]},{"entry":[{},"\u2003\u2003\u2003\u2003AccountId=\u201cNormal_User_Group\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003Actions=\u201cREAD, EXECUTE\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003Stop=\u201ctrue\u201d \/>"]},{"entry":[{},"\u2003\u2003<\/Authorize>"]},{"entry":[{},"<\/Rule>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Rule documents  may include rules that include \u201cdelegation\u201d properties. In general terms, a \u201cdelegation\u201d property specifies that a specific account is allowed to create rules that govern the ability of processes in chambers associated with other accounts to perform actions on the resources covered by the rule. In one implementation, a \u201cdelegation\u201d property of a rule indicates an account. Users associated with this account have the right to make rules that authorize other accounts to perform actions with regard to resources having canonical names described by the resource name pattern specified by the \u201cresource name pattern\u201d attribute of the rule. For example, a rule having a \u201cspeaker\u201d attribute that specifies a trusted computing base (TCB) account may include a \u201cdelegation\u201d property that indicates that a \u201csupervisor\u201d account is permitted to make rules that authorize other accounts to perform actions with regard to files in a particular directory of a file system.","In one implementation, \u201cdelegation\u201d properties are formatted in rule documents  as XML properties of rule elements. For instance, one of rule documents  may include the following XML rule element:",{"@attributes":{"id":"p-0054","num":"0062"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<Rule"},{"entry":"\u2003Description=\u201cProtect the connection manager directory\u201d"},{"entry":"\u2003ResourceIRI=\u201c$(FILESYS_PRIMARY_ROOT)\/CONNMGR\/(*)\u201d"},{"entry":"\u2003SpeakerAccountId=\u201cSYSTEM\/TCB\u201d"},{"entry":"\u2003PriorityCategoryId=\u201cPRIORITY_STANDARD\u201d>"},{"entry":"\u2003\u2003<Delegation>"},{"entry":"\u2003\u2003\u2003<Match AccountId=\u201cSupervisor_Group\u201d Actions=\u201cREAD\u201d \/>"},{"entry":"<\/Rule>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Rules that include \u201cdelegation\u201d properties may form chains of delegation rules. For example, a chain of delegation rules may include a first rule that indicates that a first account delegates a right to make rules regarding an action performed on certain resources to a second account. In this example, the chain of delegation rules may include a second rule that indicates that the second account delegates a right to make rules regarding the action performed one or more of the certain resource to a third account, and so on.","It should be appreciated that the rules may include other types of properties. For example, a rule may include a \u201ccall DLL\u201d property that specifies that a particular dynamic link library (DLL) must be invoke to determine whether an account has a right to perform an action with regard to a particular resource.","As illustrated in the example of , security infrastructure  includes a rule loader . When security infrastructure  is initialized, rule loader  reads account documents  and loads the accounts stored in account documents  into an account database . In implementations in which the accounts are represented in account documents  as XML elements, the accounts may be accessed more quickly when the accounts are stored in account database  than when the accounts are represented as XML elements in account documents . In addition, rule loader  reads rule documents  and loads the rules stored in rule documents  into centralized rule database . In implementations in which the rules are represented in rule documents  as XML elements, the rules may be accessed more quickly when the rules are stored in centralized rule database  than when the rules are represented as XML elements in rule documents .","Account database  and centralized rule database  may be a variety of different types of databases. For instance, account database  and\/or centralized rule database  may be relational databases, associative databases, files, file systems, Online Analytic Processing (OLAP) data cubes, object-oriented databases, hash tables, or other data storage structures. It should be appreciated that in some implementations, account database  and\/or centralized rule database  may be regarded or implemented as a single database or as multiple databases.","Furthermore, as illustrated in the example of , security infrastructure  includes a rule database provider . Rule database provider  implements a software interface that includes one or more methods for querying centralized rule database  and account database . For example, rule database provider  may implement an access right query method that accepts a \u201cspeaker\u201d parameter, a \u201cresource name\u201d parameter, and a \u201csubject\u201d parameter. In this example, the \u201cspeaker\u201d parameter specifies an account identifier of a first account, the \u201cresource name\u201d parameter specifies a canonical name of a resource, and the \u201csubject\u201d parameter specifies an account identifier that identifies a second account. Furthermore, in this example, the access right query method returns a value that indicates rights to perform actions with regard to the resource that are granted to the second account by rules created by the first account. An example operation of rule database provider  to identify rights to perform actions with regard to the resource that are granted to the second account by rules created by the first account is provided below with regard to .","Furthermore, the software interface implemented by rule database provider  may include methods for querying account database . Other methods in the software interface implemented by rule database provider  may include one or more methods to write rules to centralized rule database , methods to write accounts to account database , and methods that provide other functionality.","Security infrastructure , in the example of , also includes a rule enforcement engine . Rule enforcement engine  implements a software interface that includes a rule check method. In one example implementation, the rule check method accepts an \u201caccess token\u201d parameter, a \u201crights requested\u201d parameter, and a \u201cresource name\u201d parameter. The \u201caccess token\u201d parameter accepts an access token of a software process. The \u201crights requested\u201d parameter accepts data that indicates a type of right. The \u201cresource name\u201d parameter indicates a resource of device .","When the rule check method is invoked, the rule check method may invoke a method of the software interface implemented by rule database provider  to identify an account associated with the chamber indicated by the access token specified by the \u201caccess token\u201d parameter. After identifying the account associated with the chamber, the rule check method may invoke the access right query method of the software interface implemented by rule database provider  to identify rights provided by rules created under the authority of the TCB account to the identified account with regard to the resource indicated by the \u201cresource name\u201d parameter of the rule check method.","In response to invoking the access right query method implemented by rule database provider , the rule check method of rule enforcement engine  may receive a list of rights that specifies rights of processes operating a chamber associated with the identified account to perform actions with regard to the resource indicated by the \u201cresource name\u201d parameter of the rule check method. The rule check method of rule enforcement engine  may then determine whether the rights specified by the \u201crights requested\u201d parameter of the rule check method are a subset of the rights specified by the list of rights returned by the access right query method of rule database provider . If the rule check method determines that the rights requested are a subset of the rights specified the list of rights, the rule check method may return to the caller of the rule check method a value that indicates that software processes operating in the chamber indicated by the access token have the right to perform the requested action on the requested resource. On the other hand, if the rule check method determines that the requested rights are not a subset of the rights specified in the list of rights, the rule check method may return to the caller of the rule check method a value that indicates that software processes in the chamber indicated by the access token do not have the right to perform the requested action on the requested resource.","In the example of , operating system  includes a set of service providers A-N (collectively, \u201cservice providers \u201d). Service providers  implement software interfaces that include methods that use protected resources of device . For example, one or more of service providers  may be system service providers that provide access to system services such as a file system, a registry, a user interface, and so on. In another example, service provider B may implement a software interface that enables other software processes to control a modem attached to device . In another example, one or more of service providers may provide services other than operating system services. Although not illustrated in the example of , one or more of service providers  may exist outside of operating system . Service providers  may operate in kernel-mode or in user-mode.","In addition, service providers  may include a process creation service provider. The process creation service provider implements a software interface that includes one or more methods that, when invoked, create a new software process. When the process creation service provider creates a new software process, the process creation service provider may interact with a token infrastructure  to create a new access token for the new software process. In one implementation, the new access token for the new software process contains the same information as an access token of a software process that invoked the method of the process creation service provider. Consequently, the new software process is not associated with an account that is afforded greater rights than an account that caused the new software process to be created. In other words, a software process may not elevate its rights by creating a new software process.","The software interface implemented by the process creation service provider may also include one or more methods that, when invoked, create a new software thread. The process creation service provider may similarly interact with token infrastructure  to create a new access token for the new software thread. The access token for the new software thread may include the same information as an access token of a software process or software thread that invoked the method of the process creation service provider.","Each of service providers  that implement a method that performs an action on a protected resource of device  invokes the rule check method of rule enforcement engine  prior to performing the action on the protected resource. In order to invoke the rule check method of rule enforcement engine , service providers  may first interact with token infrastructure  to retrieve an access token associated with a software process that invoked the method of the service provider. The method of the service provider may then use this access token as a parameter of the rule check method of rule enforcement engine .","One or more of service providers  may be responsible for managing resources of device . In some example implementations, protected resources are classified into a plurality of types of system services by service providers that manage the resources. In these implementations, the canonical names of the protected resources that are classified into different types belong to different hierarchical namespaces. For example, service provider A may be a file system manager that is responsible for managing files on a disk drive. In this example, the file system manager uses a hierarchical namespace to identify files on the disk drive. For instance, the file system manager may use the name \u201cC:\\Documents and Settings\\hk\\My Documents\\Resume.doc\u201d to identify a particular file on disk drive \u201cC.\u201d In this example, the canonical name of the file may be \u201crule:\/\/Resources\/File\/C\/Documents and Settings\/hk\/My Documents\/Resume.doc\u201d In a second example, service provider B may be a registry key manager that manages registry keys. In this second example, the registry key manager uses a hierarchical namespace to identify registry keys. In such implementations, these ones of service providers  may implement \u201ccanonicalizer\u201d methods that translate names in the hierarchical namespaces into canonical names. Furthermore, in such implementations, these ones of service providers  may first use their canonicalizer methods to translate names in their hierarchical namespaces into canonical names. After using the canonicalizer methods to translate names in their hierarchical namespaces into canonical names. These ones of service providers  may then invoke the rule check method of rule enforcement engine  using the canonical names.","Other ones of service providers  may perform actions on system resources that are not identified using hierarchical namespaces. A system resource is a resource that is not specific to any account. For instance, system resources such as application programming interfaces (APIs), privileges, and system resources are generally not identified using hierarchical namespace. However, such system resources are typically associated with classes and sub-classes of objects. For example, each system API in Microsoft WINDOWS\u00ae operating systems has a distinct name. Because such system resources are typically associated with classes and sub-classes, canonical names can be identified for such system resources by substituting the class names and sub-class names into a standard format. For example, a canonical name can be identified for a system resource in a class \u201cX\u201d and a sub-class \u201cY\u201d by substituting \u201cX\u201d and \u201cY\u201d into the indicated places in the following format:","rule:\/\/Resources\/System\/$(Class)\/$(Sub-Class)","In this example, the resulting canonical name of the system resource is:","rule:\/\/Resources\/System\/X\/Y","Because canonical names can be identified for such system resources by simple substitution, the rule check method of rule enforcement engine  may accept class names and sub-class names of system resources in place of canonical names of resources.","Other ones of service providers  may perform actions on account-specific resources that are not identified using a hierarchical namespace. An account-specific resource is a resource that is specific to an account. Like system resources, account-specific resources are not necessarily identified using hierarchical namespaces. However, such account-specific resources are typically associated with classes and subject-classes. For example, a debug process may be operating in a chamber associated with an account \u201cY\u201d. In this example, the debug process may be in a class of objects named \u201cPROCESSES\u201d and may be in a sub-class named \u201cDEBUG\u201d. Because such account-specific resources are typically associated with classes and sub-classes, canonical names can be identified for such account-specific resources by substituting account names, class names, and sub-class names into a standard format. Continuing the previous example, a canonical name can be identified for the debug process by substituting the account identifier, the class name, and the sub-class name into the following format:","rule:\/\/Resources\/$(AccountID)\/$(Class)\/$(Sub-Class)","In this example, the resulting canonical name of the account-specific debug resource is:","rule:\/\/Resources\/Y\/PROCESSES\/DEBUG","Because canonical names can be identified for such account-specific resources by simple substitution, the rule check method of rule enforcement engine  may accept class names and sub-class names of account-specific resources in place of canonical names of resources.","In some implementations, token infrastructure  may provide a stack of access tokens to the service provider when the service provider requests the access token of the software process that invoked the method of the service provider. In these implementations, the access tokens in the stack of access tokens include the access tokens of each software process and\/or service provider in a chain of method invocations. For example, if a software process \u201cA\u201d invokes a method implemented by a software process \u201cB\u201d and the method implemented by software process \u201cB\u201d invokes a method implemented by service provider A, the stack of access tokens may include the access token for software process \u201cA\u201d and the access token for software process \u201cB\u201d. In a similar example, if a software process \u201cA\u201d invokes a method implemented by service provider A and the method implemented by service provider A invokes a method implemented by service provider B, the stack of access tokens returned by token infrastructure  to service provider B may include the access token associated with software process \u201cA\u201d and the access token associated with service provider A. When service providers  receives a stack of access tokens from token infrastructure , service providers  provide the stack of access tokens as a parameter to the rule check method of rule enforcement engine . The rule check method of rule enforcement engine  returns a value that indicates that the service provider is permitted to perform the requested action on the resource only when the accounts associated with the chambers indicated by each of the access tokens in the stack have the right to perform the requested action on the resource. For instance, if the stack of access tokens includes a first access token that indicates that account \u201cA\u201d is permitted to read and write to a file \u201cF\u201d and the stack of access tokens includes a second access token that indicates a chamber associated with account \u201cB\u201d is permitted to read to file \u201cF\u201d, then the rule check method does not return a value that indicates that the requesting service provider can write to file \u201cF\u201d.","After receiving value from the rule check method of rule enforcement engine , methods of service providers  may perform a variety of actions. For instance, when the rule check method returns a value indicating that software processes operating in a chamber associated with an account do not have the right to perform the requested action with regard to a resource, methods implemented by service providers  may return error messages. On the other hand, when the rule check method returns a value indicating that software processes operating in the chamber associated with the account have the right to perform the requested action with regard to the resource, the methods of service providers  may perform the requested action with regard to the resource.","In the example of , device  includes a client process  that operates in a chamber. Although not illustrated in the example of , device  may include a large number of client processes. One or more of the other client processes may operate in the same chamber as client process . Client process  may be a wide variety of software processes or software threads operating in kernel-mode or user-mode. Furthermore, client process  may be a part of operating system  or a part of one of software applications  (). For example, client process  may be a software process of a word processor application or a video game. In another example, client process  may be a software process of a malicious application, such as computer virus. To use a resource of device , client process  invokes a method implemented by one of service providers . When client process  invokes the method implemented by one of service providers , components of operating system  and security infrastructure  may perform various operations, such as the example operation provided below with regard to . Because service providers  are responsible for invoking the rule check method of rule enforcement engine , it is not necessary to trust client process  to check whether it has the right to perform an action with regard to a resource.","It should be understood that client process , when operated in different chambers associated with different accounts, may or may not be permitted to perform an action with regard to a resource. Accordingly, client process  should be coded such that client process  is able to gracefully handle situations in which client process  is not permitted to perform the action with regard to the resource.",{"@attributes":{"id":"p-0080","num":"0088"},"figref":["FIG. 4","FIG. 3","FIG. 4"]},"As illustrated in the example of , rule loader  extracts rules in the set of rules from rule documents  (). As discussed above, rule documents  contain at least one XML element that represents the each of the rules. After extracting the rules, rule loader  may store the extracted rules in centralized rule database  ().","Subsequently, client process  invokes a method of a software interface implemented by a \u201ctarget\u201d service provider that is one of service providers  (). When invoked, the method retrieves an access token associated with client process  from token infrastructure  ().","Next, the method of the \u201ctarget\u201d service provider invokes a rule check method of rule enforcement engine  (). When the method invokes the rule check method of rule enforcement engine , the method may provide the access token associated with client process  to rule enforcement engine  as a parameter of the rule check method. Furthermore, when the method invokes the rule check method of rule enforcement engine , the method may provide to rule enforcement engine  the canonical name of a resource as a \u201ctarget resource\u201d parameter. This resource may be referred to herein as a \u201ctarget\u201d resource. The method may also provide to rule enforcement engine  the type of action to be performed on the resource as a \u201crequested rights\u201d parameter.","After the rule check method is invoked, rule enforcement engine  invokes an access right query method of rule database provider  (). Rule enforcement engine  may provide, as a parameter of the access right query method, a query that requests a list of rights that software processes operating in an account associated with the chamber identified by the access token of client process  have with regard to a resource identified by the canonical resource name. The list of rights specifies actions that the software processes operating in the chamber associated with the account are allowed to perform with regard to the resource. When invoked, the query method of rule database provider  uses centralized rule database  to generate the list of rights (). An example operation to generate the list of rights is provided below with regard to . The query method of rule database provider  may then return the list of rights to the rule check method of rule enforcement engine  ().","When the rule check method of rule enforcement engine  receives the list of rights, the rule check method determines whether the rights requested by the target service provider are a subset of the rights specified by the list of rights returned by rule database provider  (). For instance, if the list of rights returned by the access right query method of rule database provider  does not specify any rights, the rule check method may determine that the set of rights requested by client process  is not a subset of the rights specified by the list of rights returned by rule database provider . After determining whether the rights requested by the \u201ctarget\u201d service provider are a subset of the rights specified by the list of rights returned by rule database provider , the rule check method may return, to the method of the \u201ctarget\u201d service provider, a value that indicates whether the account associated with the chamber in which client process  operates has the right to perform the action on the resource ().","Once the method of the \u201ctarget\u201d service provider receives the value, the method of the service provider determines whether the value indicates that the account associated with the chamber associated with client process  has the right to perform the action on the \u201ctarget\u201d resource (). If the method of the service provider determines that the value indicates that the account associated with the chamber associated with client process  has the right to perform the action on the \u201ctarget\u201d resource (\u201cYES\u201d of ), the method of the \u201ctarget\u201d service provider performs the action on the \u201ctarget\u201d resource (). On the other hand, if the method of the \u201ctarget\u201d service provider determines that the value indicates that the account associated with the chamber associated with client process  does not have the right to perform the action on the \u201ctarget\u201d resource (\u201cNO\u201d of ), the method of the service provider may return an error message to client process  ().",{"@attributes":{"id":"p-0087","num":"0095"},"figref":["FIG. 5","FIG. 5"],"b":["80","80"]},"As illustrated in the example of , the operation may begin when rule database provider  receives a \u201cspeaker\u201d parameter, a \u201cresource name\u201d parameter, and a \u201csubject\u201d parameter (). The \u201cspeaker\u201d parameter indicates an account identifier of a speaker of a rule. The \u201cresource name\u201d parameter indicates a canonical name of a resource. The \u201csubject\u201d parameter indicates an account identifier associated with a chamber.","After receiving the parameters, rule database provider  initializes a \u201crights granted\u201d variable, a \u201ccurrent priority\u201d variable, and a \u201cstop processing\u201d flag (). When initialized, the \u201crights granted\u201d variable is a null value, the \u201ccurrent priority\u201d variable is equal to the lowest priority, and the \u201cstop processing\u201d flag is equal to false.","Once rule database provider  has initialized the variables, rule database provider  may query centralized rule database  for rules that include a \u201cspeaker\u201d attribute that specifies the account identifier indicated by the \u201cspeaker\u201d parameter and that include a \u201cresource name pattern\u201d attribute that specifies a resource name pattern that described the canonical name specified by the \u201cresource name\u201d parameter (). The rules returned by this query are referred to herein as the \u201cmatching rule set.\u201d","After rule database provider  receives the matching rule set, rule database provider  identifies the rules in the matching rule set that include \u201cpriority\u201d attributes that specify a priority equal to the priority indicated by the \u201ccurrent priority\u201d variable (). The rules in the matching rule set that include \u201cpriority\u201d attributes that specify a priority equal to the priority indicated by the \u201ccurrent priority\u201d variable are referred to herein as the \u201ccurrent rule set.\u201d","Next, rule database provider  determines whether all rules in the current rule set have been evaluated (). If not all rules in the current rule set have been evaluated (\u201cNO\u201d of ), rule database provider  may determine whether an unevaluated rule in the current rule set (i.e., the \u201ccurrent rule\u201d) includes an \u201cauthorize\u201d property ().","If the current rule includes an \u201cauthorize\u201d property (\u201cYES\u201d of ), rule database provider  identifies rights granted by the current rule to the account identified by the account identifier specified by the \u201csubject\u201d parameter (). For example, rule database provider  may identify \u201cREAD\u201d and \u201cWRITE\u201d as rights granted by the current rule to the account identified by the account identifier specified by the \u201csubject\u201d parameter. After identifying the rights granted by the current rule to the account identified by the account identifier specified by the \u201csubject\u201d parameter, rule database provider  sets the \u201crights granted\u201d variable to the union of the current value of the \u201crights granted\u201d variable and the rights granted by the current rule to the account identified by the account identifier specified by the \u201csubject\u201d parameter ().","After setting the \u201crights granted\u201d variable or after determining that the current rule does not include an \u201cauthorized\u201d property (\u201cNO\u201d of ), rule database provider  may determine whether the current rule includes a \u201cdelegation\u201d property and the \u201cspeaker\u201d parameter indicates the trusted computing base (TCB) account (). If rule database provider  determines that the current rule includes a \u201cdelegation\u201d property and the \u201cspeaker\u201d parameter indicates the TCB account (\u201cYES\u201d of ), rule database provider  may recursively invoke the method of rule database provider  to identify rights of an account with regard to a resource (). When rule database provider  invokes the method, rule database provider  may use the account identifier specified by the \u201cspeaker\u201d attribute of the current rule as the \u201cspeaker\u201d parameter of the method, the resource name specified by the \u201cresource name\u201d parameter as the \u201cresource name\u201d parameter of the method, and the \u201csubject\u201d parameter as the \u201csubject\u201d parameter of the method. After invoking the method, rule database provider  sets the \u201crights granted\u201d variable to the union of the current value of the \u201crights granted\u201d variable and the rights returned by the method ().","After setting the \u201crights granted\u201d variable or after determining that the current rule does not include a \u201cdelegation\u201d property or the \u201cspeaker\u201d parameter does not specify the TCB account (\u201cNO\u201d of ), rule database provider  may determine whether the current rule includes a \u201cstop\u201d attribute (). If the current rule includes a \u201cstop\u201d attribute (\u201cYES\u201d of ), rule database provider  may determine whether the \u201cstop\u201d attribute is applicable to the account identified by the account identifier specified by the \u201csubject\u201d parameter (). In one example implementation, the \u201cstop\u201d attribute is applicable to the account identified by the account identifier specified by the \u201csubject\u201d parameter when the \u201cstop\u201d attribute is an attribute of an \u201cauthorize\u201d property or a \u201cdelegate\u201d property that includes an \u201caccount identifier\u201d attribute that specifies the account identifier. If the \u201cstop\u201d attribute is applicable to the account identified by the account identifier specified by the \u201csubject\u201d parameter (\u201cYES\u201d of ), rule database provider  sets the \u201cstop processing\u201d flag equal to true ().","After setting the \u201cstop processing\u201d flag, or after rule database provider  determines that the \u201cstop\u201d attribute is not applicable to the account identified by the account identifier specified by the \u201csubject\u201d parameter (\u201cNO\u201d of ) or after rule database provider  determines that the current rule does not include a \u201cstop\u201d attribute (\u201cNO\u201d of ), rule database provider  may loop back and again determine whether all of the rules in the current rule set have been evaluated (), and so on.","If all of the rules in the current rule set have been evaluated (\u201cYES\u201d of ), rule database provider  may increment the \u201ccurrent priority\u201d variable (). Next, rule database provider  may determine whether the \u201ccurrent priority\u201d variable is equal to a maximum priority value (). In one example implementation, the maximum priority value is the highest value specified by a \u201cpriority\u201d attribute of any rule in the matching rule set. If the \u201ccurrent priority\u201d variable is equal to the maximum priority value (\u201cYES\u201d of ), rule database provider  may set the \u201cstop processing\u201d flag equal to true ().","After setting the \u201cstop processing\u201d flag or after determining that the \u201ccurrent priority\u201d variable is equal to the maximum priority value (\u201cNO\u201d of ), rule database provider  may determine whether the \u201cstop processing\u201d flag is set to true (). If the \u201cstop processing\u201d flag is set to true (\u201cYES\u201d of ), rule database provider  may return the \u201crights granted\u201d variable (). On the other hand, if the \u201cstop processing\u201d flag is not set to true (\u201cNO\u201d of ), rule database provider  may loop back and again identify rules in the matching rule set that include \u201cpriority\u201d attributes that specify the value specified by the \u201ccurrent priority\u201d variable (), and so on.","Because of this operation, rule enforcement engine  determines that one of the rules in centralized rule database  grants to the subject account the right to perform the action on the target resource when one of the rules in the first set of rules is associated with a speaker attribute that identifies a TCB account and grants to the subject account the right to perform the action on the target resource. In addition, because of this operation, rule enforcement engine  determines that one of the rules in centralized rule database  grants to the subject account the right to perform the action on the target resource when one of the rules in the first set of rules is associated with a speaker attribute that identifies a given account and explicitly grants to the subject account the right to perform the action on the target resources and the second set of rules includes a chain of delegation rules that describes a delegation of rule-making authority from the TCB account to the given account.","It is to be understood that the embodiments described herein may be implemented by hardware, software, firmware, middleware, microcode, or any combination thereof. When the systems and\/or methods are implemented in software, firmware, middleware or microcode, program code or code segments, they may be stored in a machine-readable medium, such as a storage component. A code segment may represent a procedure, a function, a subprogram, a program, a routine, a subroutine, a module, a software package, a class, or any combination of instructions, data structures, or program statements A code segment may be coupled to another code segment or a hardware circuit by passing and\/or receiving information, data, arguments, parameters, or memory contents. Information, arguments, parameters, data, etc. may be passed, forwarded, or transmitted using any suitable means including memory sharing, message passing, token passing, network transmission, etc.","For a software implementation, the techniques described herein may be implemented with modules (e.g., procedures, functions, and so on) that perform the functions described herein. The software codes and instructions may be stored in computer-readable media and executed by processors. The memory unit may be implemented within the processor or external to the processor, in which case it can be communicatively coupled to the processor via various means as is known in the art.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0020"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0021"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0014","num":"0022"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0015","num":"0023"},"figref":["FIG. 5","FIG. 3"]}]},"DETDESC":[{},{}]}
