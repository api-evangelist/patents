---
title: System and method for using aspects to generate event data records
abstract: Methods and systems are described for generating event data records by using aspects. Cross cutting concerns are applied in order to generate the EDRs. In various embodiments, the EDRs are generated within a gateway or another type of software application that processes various communications. In processing data, the gateway can generate data records, which capture information regarding traffic flow within the gateway. The event data records are generated at various points in the gateway by using an aspect to weave code at compile time. Once generated, the EDRs can be picked up by an external listener and filtered based on various criteria, such as Java type-based filtering and classification. The listener can use predefined filtering coming from the gateway or customize the filtering according to specific needs. The EDRs can also be classified by using a configuration file, which can be modified without altering any programming code within the gateway.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08850412&OS=08850412&RS=08850412
owner: Oracle International Corporation
number: 08850412
owner_city: Redwood Shores
owner_country: US
publication_date: 20090514
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM OF PRIORITY","COPYRIGHT NOTICE","FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present application claims the benefit of U.S. Provisional Patent Application No. 61\/077,416 entitled SYSTEM AND METHOD FOR USING ASPECTS TO GENERATE EVENT DATA RECORDS WITHIN A TELECOMMUNICATION SERVICE ACCESS GATEWAY, filed on Jul. 1, 2008, which application is incorporated herein by reference in its entirety.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","The current invention relates generally to event tracking and data records, and more particularly to using aspects in order to generate event data records (EDRs), such as within a telecommunications gateway.","With the ever-increasing popularity of the World Wide Web, more and more previously unrelated technologies are becoming integrated with the enormous network of information and functionality that the internet provides. Everything from television and radio to books and encyclopedias are becoming available online, amongst a wide variety of other technologies. One such area of technology is telephony and the related telecommunications services.","Conventionally, telecommunications and network infrastructure providers have relied on often decades-old switching technology to providing routing for network traffic. Businesses and consumers, however, are driving industry transformation by demanding new converged voice, data and video services. The ability to meet these demands can often be limited by existing IT and network infrastructures that are closed, proprietary and too rigid to support these next generation services. As a result, telecommunications companies have been transitioning from traditional, circuit-switched Public Switched Telephone Networks (PSTN), the common wired telephone system used around the world to connect any one telephone to another telephone, to Voice Over Internet Protocol (VoIP) networks. VoIP technologies enable voice communication over \u201cvanilla\u201d IP networks, such as the public Internet. Additionally, a steady decline in voice revenues has resulted in heightened competitive pressures as carriers vie to grow data\/service revenues and reduce churn through the delivery of these more sophisticated data services. Increased federal regulation, security and privacy issues, as well as newly emerging standards can further compound the pressure.","Delivering these more sophisticated data services has proved to be more difficult than first imagined. Existing IT and network infrastructures, closed proprietary network-based switching fabrics and the like have proved to be too complex and too rigid to allow the creation and deployment of new service offerings.","While the worlds of TCP\/IP applications and of telephony networks continue to converge, the relationship between them has often been overly complex and difficult to manage for various organizations, as well as for consumers. In recent times, specialized telecommunication servers and various service gateways have emerged to enable simpler ways for developers to include telephony-based functionality in their software applications, as well as provide increased security and stability. Nevertheless, these specialized solutions continue to need improvements in performance generally required by network operators and demanded by their subscribers.","One such area for improvement involves the tracking of events and other data during request processing time at the gateway level by a network operator. In many instances, it can be desirable to generate events and to capture information regarding runtime processing of various communications that are flowing through a gateway. This information can then be used to measure performance, track errors in operations, perform charging operations, implement additional functionality and conduct other business-related activities by the network operator. In the past, capturing such event data has been performed by implementing some form of alarms, data records or other similar mechanism within the server or application. However, the code necessary to implement such information tracking has generally been cumbersome to implement, tedious to change and generally inefficient. What is needed is an improved approach that allows for separation of concerns and better delineation of responsibilities between code implementing traffic processing and code generating associated events.","Methods and systems are described for generating event data records by using aspects. Cross cutting concerns are applied in order to generate the EDRs. In various embodiments, the EDRs are generated within a gateway or another type of software application that processes various communications. In processing data, the gateway can generate data records, which capture information regarding traffic flow within the gateway. The event data records are generated at various points in the gateway by using an aspect to weave code at compile time. Once generated, the EDRs can be picked up by an external listener and filtered based on various criteria, such as Java type-based filtering and classification. The listener can use predefined filtering coming from the gateway or customize the filtering according to specific needs. The EDRs can also be classified by using a configuration file, which can be modified without altering any programming code within the gateway.","The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. References to embodiments in this disclosure are not necessarily to the same embodiment, and such references mean at least one. While specific implementations are discussed, it is understood that this is done for illustrative purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without departing from the scope and spirit of the invention.","In the following description, numerous specific details are set forth to provide a thorough description of the invention. However, it will be apparent to those skilled in the art that the invention may be practiced without these specific details. In other instances, well-known features have not been described in detail so as not to obscure the invention.","Although a diagram may depict components as logically separate, such depiction is merely for illustrative purposes. It can be apparent to those skilled in the art that the components portrayed can be combined or divided into separate software, firmware and\/or hardware components. For example, one or more of the embodiments described herein can be implemented in a network accessible device\/appliance such as a server or a router. Furthermore, it can also be apparent to those skilled in the art that such components, regardless of how they are combined or divided, can execute on the same computing device or can be distributed among different computing devices connected by one or more networks or other suitable communication means.","In accordance with the embodiments of the invention, there are provided mechanisms and methods for using aspects to generate event data records (EDRs). The EDRs can be generated in a gateway or some other type of software program. In various embodiments, cross-cutting concerns can be applied in generating the EDRs. Once generated, the EDRs can be classified into various categories, such as by using a configuration file that can be easily modified. This allows a user to change the EDR classifications without altering any programming code. Various EDR listeners can also be provided for registering and filtering EDRs as they are generated. For example, an external EDR listener can either use predefined filtering coming from the gateway or customize the filtering according to its specific needs. Furthermore, type-based filtering and classification can be implemented. Java classes and exceptions can be grouped and filtered into categories by using the Java class hierarchy. This element of the filtering allows grouping relevant or similar events. For example, the exceptions and therefore failures can be treated as a crosscutting concern. This can allow isolating and handling failures based on the package and class hierarchy of the exception after the code has been written. For example, this feature can enable specialized handling of all database related exceptions and than sub-categorizing that into connection related failures vs. failures related to the constraints of the data schema. Examples with java.sql package, java.sql.SQLException, and java.sql.SQLRecoverableException are illustrative. Separating database failures from connection failures to other external systems, or from internal traffic processing failures is another example. One could then differentiate how each type of failure is handled and what external monitoring systems are notified.","In various embodiments, the EDRs can be generated within a telecommunication service access gateway. The service gateway can be an intermediary entity deployed by a telecommunications provider for managing access by various applications to the subscriber network and to the various subscriber clients of the provider. During the processing of various communications between the subscribers and the service provider applications, gateways often need to generate records, such as event data records (EDRs), charging data records (CDRs), alarms and the like. In the past, the code used to generate these types of records has been hard-coded into the system as part of the interface or class used within the gateway. However, because the gateway can be deployed by multiple network operators with different business requirements, and can be accessed by multiple external third party applications, such hard-coding can be inefficient when a change to the record generating functionality is desired. Accordingly, in various embodiments, an aspect can be used in conjunction with the event data record (EDR) service in order to generate the records within the gateway. The aspect can perform this by weaving the EDR generating code into the various portions of the gateway interfaces.","As such, cross-cutting concerns can be applied to generate the EDRs. Cross-cutting concerns are those elements of the computer program which affect other functionality in the program and thus cannot be easily separated from the rest of the system. Some examples of such cross-cutting concerns include, but are not limited to, usage statistics, policy enforcement and tracing. In order to apply these cross-cutting concerns when generating EDRs, a set of aspects can be applied at build or compile time in order to weave byte code of previously compiled packages into various portions of the gateway. Subsequently, EDRs can be generated at runtime when requests are processed at these locations in the gateway.","In various embodiments, the weaving can be based on Java annotations associated with various methods or callbacks that are invoked within the gateway. For example, methods which are annotated with the \u201c@Edr\u201d annotation can be woven by the aspect, while methods that lack any annotation can be skipped. The aspect can also catch exceptions that are thrown out of the invoked methods within the gateway interfaces. In addition, the aspect can weave calls to a specific interface.","The aspect weaving in conjunction with the EDR service can enable users and developers to specify which type of EDR is generated at which particular point in the gateway flow, to filter and categorize EDRs, and to perform customized functionality based on the generated EDR. For example, an external EDR listener can be provided, which listens to the various EDRs generated within the gateway. This EDR listener can either use the predefined filtering coming from the gateway or customize the filtering according to its specific needs.","In the field of software development, aspect oriented programming (AOP) is a well known concept used to help the programmer with the separation of concerns in a software application. It is generally desirable to break down the application into distinct parts (e.g. modules) that do not overlap (or overlap as little as possible) in functionality. This is in part due to the fact that changes to the application are significantly easier and less complex to implement when each module can be modified and recompiled separately, without affecting the entire program. However, some concerns \u201ccross-cut\u201d across many different portions of the application and as such they are not easily encapsulated into independent entities. For example, logging can be a cross-cutting concern because it usually affects multiple logged parts of a system.","In order to deal with such concerns, several aspect oriented programming languages have been developed in the marketplace. AspectJ is one example of such a language developed at XEROX Palo Alto Research Center (PARC). AspectJ encapsulates cross-cutting concerns in one place and can be used with the embodiments described herein. It should be noted, however, that other aspect oriented languages can also be used and that the various embodiments of the present invention are not limited to AspectJ.","In various embodiments described herein, an aspect is a class that encapsulates cross-cutting concerns. The aspect can alter the behavior of underlying code. In one embodiment, the aspect weaves in EDR-generating code into various locations of the gateway. In order to differentiate the EDRs, the aspect can use information such as the direction of the request, the interface location and other attributes. As a non-limiting example, EDRs can be generated automatically by an aspect in the following locations:\n\n","In various embodiments, aspects can be used to generate EDRs in a network gateway application built on top of an application server. The gateway can be, for example, a policy driven telecommunications web services gateway that allows granular control over access to network resources from un-trusted domains. In one embodiment, the gateway can be an application deployed by a telecom provider in order to manage access to its network by the third party services that are offered to the various subscribers of the telecom provider. It should be noted, however, that the gateway is described purely for purposes of illustration and that the various embodiments described herein are not limited to any particular type of software application.","In various embodiments, as events are automatically generated by the aspect, they can be transmitted outside of the gateway, where the EDRs can be picked up by a listener. The listener can filter the EDRs based on various criteria, categorize the EDRs, as well as perform various functionality depending on the information captured by the EDRs. This provides an ability for the telecommunication provider to implement customized functionality based on the call flow within the gateway. For example, if the provider wished to bill a client when the call reaches at a particular point within the gateway, it could use the listener categorization mechanism to denote events at that particular point as CDRs. Furthermore, the gateway code and plug-ins would not need to be altered in order to perform certain types of customized functionality. Therefore, the developer is allowed to categorize EDRs as alarms, charging data records (CDRs) or as plain undesignated EDRs. It should be noted that in the past, CDRs, alarms and EDRs were all distinct events with no particular relation to each other. In the present embodiments, on the other hand, every event can be expressed as an EDR. It is only the interpretation of this general EDR that will categorize it into a more specific CDR, Alarm or plain EDR. For example, an extensible markup language (XML) configuration file can be used in order to define which EDR will be considered a CDR and which will be considered an alarm, etc.","As illustrated below, the figures and their associated descriptions show the use of aspects to generate EDRs and the service access gateway within various contexts. It should be noted, however, that the components illustrated in the figures are not intended to limit the scope these embodiments and are provided purely for purposes of illustration and explanation.",{"@attributes":{"id":"p-0029","num":"0031"},"figref":"FIG. 1"},"As illustrated, the network gateway  can be deployed by a telecommunications provider in order to manage the interactions between its subscriber network  and the third party external service provider applications . As an illustration, the external application could provide a text voting feature where the subscribers of the telecom provider can text a vote on a specific topic by using their mobile device. Many other such external third party applications are possible and the present disclosure should not be limited in any way to any specific type of application.","The service access gateway  can include one or more traffic paths , , ,  between the application and the various subscriber devices. The traffic path can be a basic functional unit of the network gatekeeper. In one embodiment, the traffic path is comprised of a service type (Short Messaging, User Location, etc.), an application-facing \u201cnorth\u201d interface , and a network-facing \u201csouth\u201d interface . A request for service enters through one interface, is subjected to internal processing, including evaluation for policy and protocol translation, and is then forwarded using the other interface.","The aspect  can weave methods, callbacks and exceptions, so that appropriate EDRs will be generated as requests are being processed in the various traffic paths of the gateway  network tier. For example, the following table illustrates one possible implementation (among many) of weaving the various invocations within the gateway by the aspect:",{"@attributes":{"id":"p-0033","num":"0035"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},{},"Modifiers",{}]},{"entry":["Trigger","When","restrictions","What is woven"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Method","Before","Public method","Only in methods annotated with"]},{"entry":[{},"executing","only","@Edr"]},{"entry":["Method","After","Public method","Only in methods annotated with"]},{"entry":[{},"executing","only","@Edr"]},{"entry":["Method-","Before","Any method","Only for method call to a class"]},{"entry":["call","calling",{},"implementing the Plug-in North"]},{"entry":[{},{},{},"Callback interface (EJB callback)"]},{"entry":["Method-","After","Any method","Only for method call to a class"]},{"entry":["call","calling",{},"implementing the Plug-in North"]},{"entry":[{},{},{},"Callback interface (EJB callback)"]},{"entry":["Exception","After","Any method","Any exception thrown except in"]},{"entry":[{},"throwing",{},"methods annotated with @NoEdr"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"As the EDRs are generated by the gateway, they can be sent to an external listener . In one embodiment, the gateway itself filters the EDRs by marking them with an appropriate tag (e.g. if they are categorized as an alarm, CDR or plain EDR). For example, an internal listener within the gateway can dispatch the EDR to a Java Messaging Service (JMS) distributed topic so that the external client can receive the EDR. Thus, external listeners can subscribe to the JMS topic in order to receive the stream of generated EDRs from the gateway. This default gateway filtering can also be modified by a user, such as by changing the configuration file, without having to alter any code within the gateway.","In one embodiment, the EDRs can be categorized into one or more of: CDRs, alarms, and general events. General events are expected system occurrences that are of importance to the operator, but do not need corrective action. Alarms are system occurrences that are unexpected and may require corrective action. Charging events are the basis for CDRs, the records that provide the information needed to charge for services. As such, rather than having multiple types of separate and unrelated objects for each construct (CDR, alarm, etc.), the gateway can instead generate one type of object\u2014EDR\u2014which can then be categorized as one of these constructs.","In one embodiment, to categorize the EDR objects as EDRs, alarms, or as CDRs, a set of extensible markup language (XML) configuration files can be used. For example, an \u201cedr.xml\u201d file can contain descriptors that describe which EDR object(s) should be considered as an EDR. An \u201calarm.xml\u201d file can contain descriptors that describe which EDR object(s) should be considered as an alarm. Similarly, \u201ccdr.xml\u201d file can contain descriptors that describe which EDR object(s) should be considered as a CDR. The configuration file can contain a filter element and a data element that defines what data is to be added to an EDR if it is matched by the filter element. In other possible embodiments, other types of configuration files can be implemented in order to categorize the EDRs, as will be apparent from this disclosure to one of ordinary skill in the art. Based on the categorizing and filtering, customized functionality can be performed, such as billing, error detection, statistics and other desirable functions.","In one embodiment, when an EDR is generated by the aspect, it contains the following values: Class name, method name, direction (south, north), position (before, after), interface (north, south), and source (method, exception). In addition to these values, the EDR can also contain any custom values that can be added to it. In various embodiments, values can be added by using parameter annotations or a designated method(s), and stored in the RequestContext. In one embodiment, the RequestContext is an object that contains metadata associated with the requests being processed within the gateway. The RequestContext can be specifically designed to be used by plug-ins to make values available during a request. It can be automatically created by the aspect when a request (thread) enters the north or south interface and destroyed when the thread of the request terminates. In one embodiment, when using annotations to add values, two parameter annotations can be used, such as @ContextKey and @ContextTranslate. An example of a method that uses these parameters is shown in the following table:",{"@attributes":{"id":"p-0038","num":"0040"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"@Edr"]},{"entry":[{},"Public @ContextKey(\u201ccorrelator\u201d) String"]},{"entry":[{},"playTextMessage(@ContextKey(\u201caddress\u201d)"]},{"entry":[{},"URLaddress) {"]},{"entry":[{},"Return correlator;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The method illustrated above declares that the first parameter \u201caddress\u201d should be put into the current RequestContext under the name \u201caddress\u201d and that the returned value \u201ccorrelator\u201d should be put into the current RequestContext under the name correlator.","The values can also be added to the RequestContext by using a designated method such as putEdr( ) in the application programming interface (API) of the gateway plug-in. Accordingly, in one embodiment, when an EDR is generated from an aspect, all values that have been put into the current RequestContext by using the designated method(s) are included in the EDR. An example of this is illustrated below:",{"@attributes":{"id":"p-0041","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"..."]},{"entry":[{},"RequestContext ctx = RequestContextManager.getCurrent( );"]},{"entry":[{},"ctx.putEdr(\u201caddress\u201d, \u201ctel:1234\u201d); \/\/ this"]},{"entry":[{},"value would be part of any EDRs generated"]},{"entry":[{},"ctx.put(\u201cfoo\u201d, \u201cbar\u201d); \/\/ this value would not be part of any EDRs"]},{"entry":[{},"..."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In various embodiments, a context translator interface can also be used to translate complex objects. The translator can extract the relevant information from the complex object based on the parameter. The context translator class specified in the @ContextTranslate annotation can be automatically instantiated by the aspect when needed. For example, the translator can be a class implementing the ContextTranslator interface shown below:",{"@attributes":{"id":"p-0043","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class ACContextTranslator implements ContextTranslator {"]},{"entry":[{},"\u2003public void translate(Object param, ContextInfo info) {"]},{"entry":[{},"\u2003\u2003if (param instanceof PlayTextMessage) {"]},{"entry":[{},"\u2003\u2003\u2003PlayTextMessage msg = (PlayTextMessage) param;"]},{"entry":[{},"\u2003\u2003\u2003info.put (\u201caddress\u201d, msg.getAddress( ).toString( ));"]},{"entry":[{},"\u2003\u2003}else if (param instanceof PlayTextMessageResponse) {"]},{"entry":[{},"\u2003\u2003\u2003PlayTextMessageResponse"]},{"entry":[{},"\u2003\u2003\u2003response = (PlayTextMessageResponse) param;"]},{"entry":[{},"\u2003\u2003\u2003info.put (\u201ccorrelator\u201d, response.getResult( ));"]},{"entry":[{},"\u2003\u2003\u2003..."]},{"entry":[{},"\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In various embodiments, when implementing a listener for the EDRs, two objects can be received from the gateway as the EDRs are generated. The first object is EDRData, which is the EDR itself. The second object is an EDRConfigDescriptor, which is the descriptor that matched the EDR and is built using the values found in the appropriate XML configuration file (edr.xml, alarm.xml, cdr.xml). While most of the values for the EDR can be available through the EDRData object, some values may be accessible in the descriptor. For example, the identifier, description, severity of the alarm or custom values from the data section can be available in the descriptor object.","In various embodiments, in order to make a plug-in able to take advantage of the aspect EDR, the plug-in objects should be registered with the appropriate managed plugin and\/or plug-in managers. In one embodiment, the plug-in manager is a module in the gateway that is responsible for routing requests to the appropriate plug-in. The methods that are desired to be woven should then be annotated using an annotation, such as \u201c@Edr\u201d. The specific arguments that are desired to be contained in the EDR should be annotated for each of the annotated methods. In addition, the configuration file should be modified to add all of the EDRs that are being triggered.",{"@attributes":{"id":"p-0046","num":"0048"},"figref":"FIG. 2"},"As illustrated, event data records can be generated at various points during the processing in the gateway. For example, in the southbound thread , an invocation is received from an external service providing application. The method can be invoked and return, as shown in the illustration. In the northbound thread , on the other hand, the message is received from a mobile client in the subscriber network. The function of the south plug-ins ,  and the north plug-ins ,  can be to translate the communications into the appropriate protocols suitable for communication. For example, the application may communicate in Web Services, while the network communications may need to be translated into Parlay Gateway protocol or some other language. The plug-ins can perform the translation processing needed to enable a converged platform and services.","As shown in the illustration, the aspect can generate EDRs in the southbound thread  before a method is invoked (, ) in the plug-in, after a method is executed (, ), after an exception is thrown (, ). Furthermore, all EDRs generated in the same thread will contain the information put into the Request Context (, ), as previously described. Similarly, in the northbound thread , EDRs can be generated before annotated methods are invoked (, ), after their execution (, ), after throwing exceptions (, ) and may also contain information placed in the Request Context (, ).","In one embodiment, when throwing exceptions, an EDR can be generated for the first throw occurrence and need not be re-generated as the exception is propagated within the gateway. In some cases, multiple exceptions may be thrown, causing multiple EDRs to be generated.",{"@attributes":{"id":"p-0050","num":"0052"},"figref":"FIG. 3"},"As shown in step , a service access gateway can be maintained by a telecom network operator. The gateway can be used to process and control communications flow between external third party service provider applications and the internal network clients of the operator. One example of the gateway is the network gatekeeper, as previously described.","In step , an aspect is used to weave byte code into various locations of the gateway. In one embodiment, the aspect can alter the behavior of the gateway components by weaving in the packaged EDR-generating byte code. In step , a request is received to the service access gateway at runtime. In one scenario, the request is received from an external application. In another scenario, the request is received from the internal network element. In any event, EDRs can be automatically generated by the code previously weaved by the aspect, as shown in step .","In step , the generated EDRs can be sent outside of the service access gateway to be picked up by an external listener. In one embodiment, this is accomplished by publishing the EDR to a JMS topic. In step , the EDR can be picked up by the external listener and categorized into one of multiple categories (e.g. CDR, alarm, general event). Custom functionality can also be implemented according to the generated EDR.",{"@attributes":{"id":"p-0054","num":"0056"},"figref":"FIG. 4"},"As shown in step , a request is received to the gateway. In step , the request can be processed by a gateway component, such as a plug-in. If the method being executed is annotated (step ) by a designated annotation (e.g. \u201c@Edr\u201d) the EDR is automatically generated (step ) by the code previously weaved by the aspect. If the method is not annotated, the process continues. If an exception is being thrown (step ), caused by some internal processing within the gateway, an EDR can be generated to reflect this occurrence, as shown in step . If the request is a callback to an object implementing a specific interface (step ), the appropriate EDR can be generated, as shown in step . It should be noted that the various decisions illustrated here are placed in this order purely for purposes of illustration and can be rearranged according to any requirements and\/or preferences of the gateway implementation.","In various aspects, the embodiments described throughout this specification encompass computer apparatus, computing systems and machine-readable media configured to carry out the foregoing methods. In addition to an embodiment consisting of specifically designed integrated circuits or other electronics, the present invention may be conveniently implemented using a conventional general purpose or a specialized digital computer or microprocessor programmed according to the teachings of the present disclosure, as will be apparent to those skilled in the computer art.","Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure, as will be apparent to those skilled in the software art. The invention may also be implemented by the preparation of application specific integrated circuits or by interconnecting an appropriate network of conventional component circuits, as will be readily apparent to those skilled in the art.","The present invention includes a computer program product which is a storage medium (media) having instructions stored thereon\/in which can be used to program a computer to perform any of the processes of the present invention. The storage medium can include, but is not limited to, any type of rotating media including floppy disks, optical discs, DVD, CD-ROMs, microdrive, and magneto-optical disks, and magnetic or optical cards, nanosystems (including molecular memory ICs), or any type of media or device suitable for storing instructions and\/or data.","Stored on any one of the machine readable medium (media), the present invention includes software for controlling both the hardware of the general purpose\/specialized computer or microprocessor, and for enabling the computer or microprocessor to interact with a human user or other mechanism utilizing the results of the present invention. Such software may include, but is not limited to, device drivers, operating systems, virtual machines and user applications.","Included in the programming (software) of the general\/specialized computer or microprocessor are software modules for implementing the teachings of the present invention, including, but not limited to providing mechanisms and methods for aspect generated EDRs, as discussed herein.","As previously described herein, the term application broadly includes any data entry, update, query or program that processes data on behalf of a user. Users may be human or computational entities. The term external application or third party application are used interchangeably and are intended to be broadly construed to mean any applications which reside outside of the gateway of the telecommunications provider and which provide a particular service to the subscribers of the provider. The term gateway is to be interpreted broadly to mean any software application or hardware that serves as an intermediary entity for processing requests between two or more other entities. The term subscriber device is intended to be broadly construed to be any mobile or other hardware devices that are connected to the gateway, including but not limited to cellular telephones, personal digital assistants (PDAs), laptops, personal computers.","As previously mentioned, the various embodiments include a computer program product which is a storage medium (media) having instructions stored thereon\/in which can be used to program a general purpose or specialized computing processor(s)\/device(s) to perform any of the features presented herein. The storage medium can include, but is not limited to, one or more of the following: any type of physical media including floppy disks, optical discs, DVDs, CD-ROMs, microdrives, magneto-optical disks, holographic storage, ROMs, RAMs, PRAMS, EPROMs, EEPROMs, DRAMs, VRAMs, flash memory devices, magnetic or optical cards, nanosystems (including molecular memory ICs); paper or paper-based media; and any type of media or device suitable for storing instructions and\/or information. The computer program product can be transmitted in whole or in parts and over one or more public and\/or private networks wherein the transmission includes instructions which can be used by one or more processors to perform any of the features presented herein. In various embodiments, the transmission may include a plurality of separate transmissions.","The foregoing description of the preferred embodiments of the present invention has been provided for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations can be apparent to the practitioner skilled in the art. Embodiments were chosen and described in order to best explain the principles of the invention and its practical application, thereby enabling others skilled in the relevant art to understand the invention. It is intended that the scope of the invention be defined by the following claims and their equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
