---
title: Declarative service domain federation
abstract: A mechanism for declarative service domain federation uses a declarative approach to both the visibility aspect and the management aspect of service domain federation. Instead of manually exporting services, that is, selecting individual services from source domains to be visible in the target domain, using the present system, a federation architect uses a federation console to specify federation intent. The federation intent may include federation rule, query-based service group, and quality-of-service (QoS) policy. Based on the declared federation intent, a planning engine resolves the individual services based on the group query, generates the service visibility configuration, and creates the necessary service proxies and/or mediation objects to satisfy the goal. At runtime, a service monitor collects the performance metrics of federated services and dynamically adjusts the mediation/proxy configurations to maintain the QoS objectives specified by the federation architect.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09389922&OS=09389922&RS=09389922
owner: International Business Machines Corporation
number: 09389922
owner_city: Armonk
owner_country: US
publication_date: 20110311
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present application relates generally to an improved data processing apparatus and method and more specifically to mechanisms for declarative service domain federation.","Service-oriented architecture (SOA) is a flexible set of design principles used during the phases of systems development and integration in computing. A system based on a SOA will package functionality as a suite of interoperable services that can be used within multiple separate systems from several business domains. SOA also generally provides a way for consumers of services, such as Web-based applications, to be aware of available SOA-based services. For example, several disparate departments within a company may develop and deploy SOA services in different implementation languages; their respective clients will benefit from a well understood, well defined interface to access them.","Service-orientation requires loose coupling of services with operating systems, and other technologies that underlies applications. SOA separates functions into distinct units, or services, which developers make accessible over a network in order to allow users to combine and reuse them in the production of applications. These services and their corresponding consumers communicate with each other by passing data in a well-defined, shared format, or by coordinating an activity between two or more services.","SOA has seen rapid adoption in enterprise computing. One main advantage of SOA is service reuse. This is enabled through connectivity between service consumers and service providers. Connectivity middleware such as Enterprise Service Bus (ESB) provides four basic principles of connectivity: visibility, management, security, and governance.","Traditionally, the deployment of SOA has started with individual business units. The services with a particular business unit, the associated connectivity middleware, and necessary service registry and repository form what is called a service domain. The incremental nature of SOA adoption typically results in islands of service domains that are not connected. To enable greater service reuse and to scale up the SOA scope, it is highly desirable to have federated connectivity among the service domains. A federated service domain effectively connects these islands of SOA together to form an enterprise-spanning SOA.","In one illustrative embodiment, a method, in a federation server data processing system, for declarative service domain federation comprises receiving, in a planning engine of the federation server data processing system, one or more federation rules, one or more quality-of-service policies, and one or more service group definitions. The method further comprises identifying, by the planning engine, a set of services based on the service group definition. The method further comprises generating, by the planning engine, a service visibility configuration and one or more service proxies based on the federation rule and the quality-of-service policy. The method further comprises deploying, by the federation server, the visibility configuration to one or more service domains comprising the individual services. The method further comprises deploying, by the federation server, the one or more service proxies to connectivity middleware of the one or more service domains.","In other illustrative embodiments, a computer program product comprising a computer useable or readable medium having a computer readable program is provided. The computer readable program, when executed on a computing device, causes the computing device to perform various ones, and combinations of, the operations outlined above with regard to the method illustrative embodiment.","In yet another illustrative embodiment, a system\/apparatus is provided. The system\/apparatus may comprise one or more processors and a memory coupled to the one or more processors. The memory may comprise instructions which, when executed by the one or more processors, cause the one or more processors to perform various ones, and combinations of, the operations outlined above with regard to the method illustrative embodiment.","These and other features and advantages of the present invention will be described in, or will become apparent to those of ordinary skill in the art in view of, the following detailed description of the example embodiments of the present invention.","The illustrative embodiments provide a mechanism for declarative service domain federation. The mechanism uses a declarative approach to both the visibility aspect and the management aspect of service domain federation. Instead of manually exporting services, that is, selecting individual services from source domains to be visible in the target domain, using the present system, a federation architect uses a federation console to specify federation intent. The federation intent may include federation rule, query-based service group, and quality-of-service (QoS) policy.","Based on the declared federation intent, a planning engine resolves the individual services based on the group query, generates the service visibility configuration, and creates the necessary service proxies and\/or mediation objects to satisfy the goal. An automated deployment tool assists the federation architect in deploying the configuration and mediation artifacts into the underlying connectivity middleware to realize the federation intent. At runtime, a service monitor collects the performance metrics of federated services and dynamically adjusts the mediation\/proxy configurations to maintain the QoS objectives specified by the federation architect.","The declarative nature of this mechanism allows a federation architect to succinctly and precisely express the federation goal without resorting to low-level specification. The mechanism saves time and reduces possible errors. Also, the mechanism of the illustrative embodiments described hereafter enables federation patterns to be created that can then be reused and applied easily when changes in the underlying service domains occur.","The illustrative embodiments may be utilized in many different types of data processing environments including a distributed data processing environment, a single data processing device, or the like. In order to provide a context for the description of the specific elements and functionality of the illustrative embodiments,  are provided hereafter as example environments in which aspects of the illustrative embodiments may be implemented. It should be appreciated that  are only examples and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the present invention may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1","b":["100","100","102","100","102"]},"In the depicted example, server  and server  are connected to network  along with storage unit . In addition, clients , , and  are also connected to network . These clients , , and  may be, for example, personal computers, network computers, or the like. In the depicted example, server  provides data, such as boot files, operating system images, and applications to the clients , , and . Clients , , and  are clients to server  in the depicted example. Distributed data processing system  may include additional servers, clients, and other devices not shown.","In the depicted example, distributed data processing system  is the Internet with network  representing a worldwide collection of networks and gateways that use the Transmission Control Protocol\/Internet Protocol (TCP\/IP) suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, governmental, educational and other computer systems that route data and messages. Of course, the distributed data processing system  may also be implemented to include a number of different types of networks, such as for example, an intranet, a local area network (LAN), a wide area network (WAN), or the like. As stated above,  is intended as an example, not as an architectural limitation for different embodiments of the present invention, and therefore, the particular elements shown in  should not be considered limiting with regard to the environments in which the illustrative embodiments of the present invention may be implemented.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 2","FIG. 1"],"b":["200","110"]},"In the depicted example, data processing system  employs a hub architecture including north bridge and memory controller hub (NB\/MCH)  and south bridge and input\/output (I\/O) controller hub (SB\/ICH) . Processing unit , main memory , and graphics processor  are connected to NB\/MCH . Graphics processor  may be connected to NB\/MCH  through an accelerated graphics port (AGP).","In the depicted example, local area network (LAN) adapter  connects to SB\/ICH . Audio adapter , keyboard and mouse adapter , modem , read only memory (ROM) , hard disk drive (HDD) , CD-ROM drive , universal serial bus (USB) ports and other communication ports , and PCI\/PCIe devices  connect to SB\/ICH  through bus  and bus . PCI\/PCIe devices may include, for example, Ethernet adapters, add-in cards, and PC cards for notebook computers. PCI uses a card bus controller, while PCIe does not. ROM  may be, for example, a flash basic input\/output system (BIOS).","HDD  and CD-ROM drive  connect to SB\/ICH  through bus . HDD  and CD-ROM drive  may use, for example, an integrated drive electronics (IDE) or serial advanced technology attachment (SATA) interface. Super I\/O (SIO) device  may be connected to SB\/ICH .","An operating system runs on processing unit . The operating system coordinates and provides control of various components within the data processing system  in . As a client, the operating system may be a commercially available operating system such as Microsoft Windows 7 (Microsoft and Windows are trademarks of Microsoft Corporation in the United States, other countries, or both). An object-oriented programming system, such as the Java programming system, may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system  (Java is a trademark of Oracle and\/or its affiliates).","As a server, data processing system  may be for example, an IBM\u00ae eServer\u2122 System p\u00ae computer system, running the Advanced Interactive Executive (AIX\u00ae) operating system or the LINUX operating system (IBM, eServer, System p, and AIX are trademarks of International Business Machines Corporation in the United States, other countries, or both, and LINUX is a registered trademark of Linux Torvalds in the United States, other countries, or both). Data processing system  may be a symmetric multiprocessor (SMP) system including a plurality of processors in processing unit . Alternatively, a single processor system may be employed.","Instructions for the operating system, the object-oriented programming system, and applications or programs are located on storage devices, such as HDD , and may be loaded into main memory  for execution by processing unit . The processes for illustrative embodiments of the present invention may be performed by processing unit  using computer usable program code, which may be located in a memory such as, for example, main memory , ROM , or in one or more peripheral devices  and , for example.","A bus system, such as bus  or bus  as shown in , may be comprised of one or more buses. Of course, the bus system may be implemented using any type of communication fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communication unit, such as modem  or network adapter  of , may include one or more devices used to transmit and receive data. A memory may be, for example, main memory , ROM , or a cache such as found in NB\/MCH  in .",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 3","b":["310","320","330","310","314","312","340","310","320","330","340"]},"In one solution, service domain federation focuses on the aspect of federated service visibility, that is, to enable service consumers to interact with service providers residing in different service domains. In this solution, a federation architect must manually identify services from a source domain and spec where these services should be made visible (the target domain) and how (either directly through service registry or indirectly through proxies to enable loose-coupling between domains).","The drawback of the above approach is that the federation process is highly procedural and involves manual operating procedure. The process is generally tedious and error-prone and puts a large burden on the federation architect to understand all the service domains. Furthermore, this approach handles only the federated visibility aspect, but leaves the management aspect, for example, quality of service (QoS) adaptation, largely unaddressed.","In accordance with an illustrative embodiment, a mechanism for declarative service domain federation uses a declarative approach to both the visibility aspect and the management aspect of service domain federation. Instead of manually exporting services, that is, selecting individual services from source domains to be visible in the target domain, using the present system, a federation architect uses a federation console to specify federation intent. The federation intent may include federation rule, query-based service group, and quality-of-service (QoS) policy.","Based on the declared federation intent, a planning engine resolves individual services based on the group query, generates the service visibility configuration, and creates the necessary service proxies and\/or mediation objects to satisfy the goal. An automated deployment tool assists the federation architect in deploying the configuration and mediation artifacts into the underlying connectivity middleware to realize the federation intent. At runtime, a service monitor collects the performance metrics of federated services and dynamically adjusts the mediation\/proxy configurations to maintain the QoS objectives specified by the federation architect.","Those of ordinary skill in the art will appreciate that the hardware in  may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash memory, equivalent non-volatile memory, or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in . Also, the processes of the illustrative embodiments may be applied to a multiprocessor data processing system, other than the SMP system mentioned previously, without departing from the spirit and scope of the present invention.","Moreover, a data processing system may take the form of any of a number of different data processing systems including client computing devices, server computing devices, a tablet computer, laptop computer, telephone or other communication device, a personal digital assistant (PDA), or the like. In some illustrative examples, a data processing system may be a portable computing device which is configured with flash memory to provide non-volatile memory for storing operating system files and\/or user-generated data, for example. Essentially, a data processing system may be any known or later developed data processing system without architectural limitation.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 4","b":["410","440","410","420","412","414","440","442","444","448"]},"Federation console  may be a Web-based administrative tool used by a federation architect to define federation rules and policies. Federation console  comprises three main editors, federation rule editor , quality-of-service (QoS) policy editor , and service group editor .","The federation architect defines the overall federation rules using the federation ride editor . Federation console  stores these rules in a textual or binary data format. In one example embodiment, federation console  stores the federation rules in a Connectivity Federation Definition Language (CFDL), which is described in further detail below.","The federation architect uses QoS policy editor  to describe the capability of existing services in the source service domains and the requirement of federated services in the target service domains. Federation console  stores the QoS policies in a textual or binary format. In one example embodiment, federation console  stores the QoS policies using a Web services (WS) performance language, a WS-Policy assertion language compatible with the WS-Policy framework, which is described in further detail below.","The federation architect uses service group editor  to specify the definition of service groups using a query-based structure. Federation console  stores the queries (group definitions) in a textual or binary format. In one example embodiment, federation console  stores the group definitions using a Service Group Description Language (SGDL), which is described in further detail below.","The federation rules reference QoS policies and service group definitions to allow for high flexibility and re-usable federation artifacts throughout a service domain federation lifecycle. Planning engine  consume federation rules, QoS policy, and service group definitions from federation rule editor , QoS policy editor , and service group editor , respectively. Planning engine  generates a federation plan consisting of visibility configuration and service proxies and\/or mediation. Planning engine  deploys service proxies  to service domains .","In one example embodiment, visibility configuration is realized as entries in service registries  in the pertinent service domains . Planning engine  derives the location and type of service proxies\/mediations from both QoS requirements and the underlying service capabilities. The federation profiles provide the required semantic knowledge to perform the federation task. During the planning phase, planning engine  may invoke group expander  to dynamically resolve the service group memberships.","Federation server  communicates with service domains  through an application programming interface (API) or protocol . In one example embodiment, the API\/protocol is extended federation connectivity management (FCM). Through API\/protocol  and using group expander , planning engine  queries service registries  of service domains  for service group memberships, and planning engine  deploys service proxies  to middleware . Monitoring engine  monitors containers  and populates service registry  with QoS capabilities.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 5","b":["514","520","530","520","522","524","534","530","530","532","534","530","540"],"sub":["1 ","1 ","1 "]},"In step 1, planning engine  receives federation policies  and CFDL rules and QoS requirements . The CFDL rules and QoS requirements  may reference one or more of the federation policies . In step 2, planning engine  receives Sservice definition and capabilities . Planning engine  generates a federation plan in step 3. Then, in step 4, planning engine  deploys service proxy  to domain A  and deploys service proxy  to domain B . Client  then may access service S through service proxy  in domain A  and service proxy  in domain B .","The connectivity federation description language (CFDL) is an example embodiment of the federation rule language. CFDL allows a federation architect to define federation patterns in a concise, abstract, and reusable form. Each rule has a simple structure comprising the following elements: verb, subject, object, and adverb. The verb is an action, for example \u201cadd\u201d or \u201cremove.\u201d The subject specifies a set of services using the service group construct. The object specifies a set of service domains. The adverb, or QoS specifies how the federation should be carried out. The planning engine of the federation server executes these rules on a set of service domains to federate a potentially large number of services.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 6","b":["610","620","620","622","624","626","628","622","624","626","628"],"sub":["1","2","3","B","C","D","1","2","3"]},"The Web services performance language is a Web services policy framework (WS-Policy) compatible assertion language that enables formal specification of performance-related Quality-of-Service (QoS) capabilities and requirements. For example, the WS-Performance language may allow the federation architect to specify latency, throughput, and availability requirements. When used to describe QoS capabilities, WS-Performance language specifies the latest service performance measurements. The performance measurements may be retrieved from the service registries, which are populated by a runtime service monitoring engine. When used to describe QoS requirements, WS-Performance language specifies a set of service level assurance and\/or optimization objectives. Each objective may be specified over a complex performance indicator, which is a function of one of multiple primitive measurement metrics. Each measurement metric is associated with an attribute in the service metadata in the service registry.","Service group description language (SGDL) defines service groups for service domain federation. A service group is a collection of service endpoints defined by a) explicit enumeration, b) a query against a set of service properties, including syntactic, semantic, and quality-of-service attributes, or c) union or intersection of other service groups. Definition of service groups simplifies the federation service domain management by enabling operations at group level. These include, but are not limited to, importing services from foreign domains, exporting services to foreign domains, and specifying QoS requirements.","As will be appreciated by one skilled in the art, the present invention may be embodied as a system, method, or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present invention may take the form of a computer program product embodied in any one or more computer readable medium(s) having computer usable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CDROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in a baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Computer code embodied on a computer readable medium may be transmitted using any appropriate medium, including hut not limited to wireless, wireline, optical fiber cable, radio frequency (RF), etc., or any suitable combination thereof.","Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java\u2122, Smalltalk\u2122, C++, or the like, and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer, or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the present invention are described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to the illustrative embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions that implement the function\/act specified in the flowchart, and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus, or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 7","b":["702","704","706","708","710"]},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 8","b":["802","804","802"]},"The flowchart and block diagrams in the figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","Thus, the illustrative embodiments provide mechanisms for declarative service domain federation. The mechanisms use a declarative approach to both the visibility aspect and the management aspect of service domain federation. Instead of manually exporting services, that is, selecting individual services from source domains to be visible in the target domain, using the present system, a federation architect uses a federation console to specify federation intent. The federation intent may include federation rule, query-based service group, and quality-of-service (QoS) policy.","Based on the declared federation intent, a planning engine resolves the individual services based on the group query, generates the service visibility configuration, and creates the necessary service proxies and\/or mediation objects to satisfy the goat. An automated deployment tool assists the federation architect in deploying the configuration and mediation artifacts into the underlying connectivity middleware to realize the federation intent. At runtime, a service monitor collects the performance metrics of federated services and dynamically adjusts the mediation\/proxy configurations to maintain the QoS objectives specified by the federation architect.","The declarative nature of the mechanisms of the illustrative embodiments allows a federation architect to succinctly and precisely express the federation goal without resorting to low-level specification. The mechanisms save time and reduce possible errors. Also, the mechanisms of the illustrative embodiments described hereafter enable federation patterns to be created that can then be reused and applied easily when changes in the underlying service domains occur.","As noted above, it should be appreciated that the illustrative embodiments may take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment containing both hardware and software elements. In one example embodiment, the mechanisms of the illustrative embodiments are implemented in software or program code, which includes but is not limited to firmware, resident software, microcode, etc.","A data processing system suitable for storing and\/or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.","Input\/output or I\/O devices (including but not limited to keyboards, displays, pointing devices, etc.) can be coupled to the system either directly or through intervening I\/O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modems and Ethernet cards are just a few of the currently available types of network adapters.","The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":["The invention, as well as a preferred mode of use and further Objectives and advantages thereof, will best be understood by reference to the following detailed description of illustrative embodiments when read in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
