---
title: Managing program applications
abstract: Techniques for managing program applications include an application being managed having an object-oriented interface with objects having data and methods to change the data. Changing these objects and/or the data of the objects changes the outcome of the application. A hyper-text transfer protocol (HTTP) server, a server-side script engine, and a scheduling mechanism are embedded in the application, i.e., they are made part of, and therefore run on, the same programming process as the application. Tasks to be performed by the application, the HTTP server, and the script engine are scheduled. The HTTP server processes requests of HTTP clients, typically supplied via a Web browser, and forwards them to the script engine. The script engine, which has direct access to the application objects, interacts with the application being controlled. The HTTP server runs the script engine for the requested script and formats the resulting information being returned to the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07974990&OS=07974990&RS=07974990
owner: Hewlett-Packard Development Company, L.P.
number: 07974990
owner_city: Houston
owner_country: US
publication_date: 20030716
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT","OVERVIEW","The Signaling Application","Method Illustrating a Method for Managing Objects of Signaling Application ","Computer System Overview"],"p":["The present invention relates generally to program applications and, more specifically, to managing those applications.","In one approach of programming management, the Simple Network Management Protocol (SNMP), which enables client\/server relationships, allows a manager console to manage a remote network device, through a User Datagram Protocol\/Internet Protocol (UDP\/IP) network. Typically, the client application is referred to as the network manager, and an application program residing and running on the remote network device is referred to as the SNMP agent, which generates information about the device, organizes the information in a database referred to as the MIB (Management Information Base), maintains the MIB, answers the request of the manager, etc. The SNMP protocol also defines primitives to get and set properties of program object instances as defined in the MIB. However, both the agent and the manager must implement the full SNMP protocol, and the agent must store and retrieve management data as defined by the MIB. Even though SNMP primitives allow the manager to get and set properties of object instances defined in the MIB, it is not possible to run object methods and perform actions on the managed system. Further, the approach requires additional and specific software to equip the SNMP management with a graphic-user interface (GUI) on the manager side.","A common-gateway-interface (CGI) program allows users to control applications on a system hosting an HTTP server. Therefore, an HTTP client, via the CGI program, can interact with the application to be controlled on the server. Unfortunately, CGI-based programs are difficult to develop, require lots of overheads, and do not maintain persistent data across client requests, multiple clients, multiple applications, etc. In terms of performance, portability, extensibility, and maintainability, etc., the traditional CGI approach is also inferior to web applications run by application servers.","Some approaches allow server pages to communicate with external common-object-request-broker architecture (CORBA) or COM objects provided by an application. However, these approaches require the embedment of CORBA\/COM infrastructure in the application system. Their complex nature, along with the incompatibility between different implementations, prevents their adoption for performance-critical and real-time processes or for managing embedded applications, which are typically \u201clight-weighted,\u201d e.g., designed to work with limited system resources such as memory, processor power, input\/output interfaces, etc. For use in the network elements, CORBA is known to be too slow, too unpredictable, and too big.","Another approach includes management tools that are based on GUIs and use management protocol like CORBA-based management wherein each management request is translated into a remote invocation of a management procedure via message passing. The management request processed by the management server produces a message of the format expected by the GUI client application. However, in addition to the disadvantages of using CORBA as mentioned above, this approach is less open and often ends with proprietary message formats or remote procedures.","Based on the foregoing, it is desirable that mechanisms be provided to solve the above deficiencies and related problems.","The present invention provides techniques for managing program applications. In an embodiment, an application to be managed has an object-oriented interface that includes objects having data and procedures or methods to change the data. Changing these objects and\/or the data of the objects changes the outcome of the application.","A hyper-text transfer protocol (HTTP) server, a server-side script engine, and a scheduler are embedded in the application. That is, they are made part of, and therefore run on, the same programming process as the application. The scheduler schedules tasks to be performed by the application, the HTTP server, and the script engine. The HTTP server processes requests of HTTP clients or management terminal and forwards them to the script engine. The script engine, which has direct access to the application objects, can interact with the application to be managed. Typically, a user, through a web browser, connects to the HTTP server and loads the server script that passes program parameters within the underlying HTTP request. The HTTP server runs the script engine for the requested script, which accesses application data, manages its objects, performs action, retrieves data, formats the resulting information to be returned to the user interface, etc.","In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. However, it will be apparent to one skilled in the art that the invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid obscuring the invention.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":"100"},"Voice portal application  is a service that offers telephone users a natural-language interface to access and retrieve web or web-like resources and services such as email, news, financial services, etc.","Telco signaling network  generally includes network elements such as switches, routers, etc., and their corresponding communication protocols, that manage telephone connections between telephone users and voice portal application .","Signaling stack  includes hardware and software that process signaling applications between signaling network  and voice portal . In an embodiment, stack  uses the Signal System 7 (SS7) protocol defined by the International Telecommunication Union (ITU) to manage data traffic. The SS7 network and protocol are normally used for efficient and secure telecommunications, wireless services such as personal communication services (PCS), wireless roaming, mobile-subscriber authentication, call setup, management, etc. For illustration purposes, the software application running on signaling stack  is referred to as signaling application , and, in the example of , is also referred to as the application to be managed, monitored, controlled, etc.","An operator uses computer system , such as a PC, a MAC, a workstation, etc., that is equipped with an HTTP client to manage objects of application , monitor and update the SS7 parameters, etc. Normally, the operator uses a web browser, and thus the extensible markup language (XML) or the hyper-text markup language (HTML) to communicate between computer system  and manage signaling application . However, other software tools using a different language may be used in place of the web browser such as the OpenView Network Manager or similar management applications. Communication link or communication network  is mechanisms for communicating between computer  and stack . Communication link  may be a single network or a combination of networks that utilizes one or a combination of communication protocols such as the Local Area Network (LAN), the Wireless LAN (WLAN), the Transmission Control Protocol\/Internet Protocol (TCP\/IP), the Public Switched Telephone Network (PSTN), the Digital Subscriber Lines (DSL), the cable network, the satellite-compliant, the wireless-compliant, the Internet, etc. Examples of a communication link include network media, interconnection fabrics, rings, crossbars, etc. A computer system may use a communication link different from that of another computer system. In , the Internet is used as an example as communication link . However, techniques of the invention are applicable to the Intranet, the Extranet, other networks and their equivalence. In general, Intranets refer to networks that are for use by employees of a corporation, and Extranets refer to networks that are for use by employees of different corporations. The invention is not limited to a particular type of network.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2","b":["1130","210","220","230","240"]},"Signaling application  is written in the object-oriented language such as C++, Java, etc., and includes various programming objects, which are self-contained entities that include both data and procedures or methods to manipulate the data. These objects provide an object-oriented representation of application . Application , through its objects, handles calls between customers and voice portal application . For illustration purposes, objects handling telecommunication for system  are referred to as application logic . Usually, updating and\/or changing objects in signaling application  desires a quick response of, e.g., less than 100 ms, and therefore application logic  has higher priority in receiving system resources than HTTP server  and script engine . Examples of objects of signaling application  include ISDN User Part (ISUP), distributed ISUP (DISUP), destination point code (DPC), circuit identification code (CIC), object representation of voice portal applications, which are services running on voice portal , etc. A DISUP communicates with multiple voice portal applications, each of which is connected to signaling network  that processes calls from the network through a set of DPC. Accessing the SS7 network is through point code virtual address. Each call is defined by the corresponding DPC and CIC. Each voice portal application in signaling application  processes the call traffic for the given set of DPC and CIC. Each client uses one or a plurality of switches in their telephone conversation, and each switch handles a number of physical lines identified by a CIC. A trunk or a communication channel between two points corresponds to a physical line having a CIC. Network  may connect to 200,000 lines and thus is associated with 200,000 CICs. Data for objects of signaling application  may be seen on a display screen, e.g., of computer , using the HTML or XML. In an embodiment, clicking on a voice portal application causes displays of information related to the DPC, the CIC, etc., for that application.","HTTP server  and script engine  may be referred to as \u201cembedded\u201d in signaling application . That is, signaling application , HTTP server , and script engine  are made part of a program running on a process, and because they run on the same process, they share various libraries. Consequently, HTTP server  and script engine  have access to objects of application logic . In an embodiment, embedding HTTP server  and script engine  in application  is done at compile time wherein the compiler links various libraries, such as static, archive, shared, dynamic libraries, etc., of signaling application , HTTP server , script engine , etc.","HTTP server  is responsible for handling management interactions between computer  and application . Examples of these interactions include HTTP-related tasks such as processing requests and responses from and to the HTTP client or management interface of computer . For example, HTTP server  uses the HTTP protocol to define how messages are formatted and transmitted. In response to HTTP requests from client , HTTP server  loads the scripts to be executed by script engine . In the embodiment of , HTTP server  delivers the document content employed by the web browser such as the XML and\/or HTML. However, if another software tool working with another content type is used in place of the web browser, then another server, instead of the HTTP server, will be used to produce that content.","Script engine  interprets and executes program scripts. In various situations, HTTP server  may invoke script engine  to interpret a script. Generally, a program script is a macro, a batch file, etc., which are stored in a disk and have a list of commands that can be executed without human interaction. When scripts are executed, they have access to the objects of application logic  because script engine  includes an application programming interface (API) to enrich its built-in objects and define\/create additional objects. Script engine  thus includes objects reflecting actual objects of the application to be managed  and are available within the script program. Via these objects and the server-side scripts that use these objects, managing signaling application  is possible. Script engine , having the output of the script execution, returns it to the HTTP client interface between HTTP server  and client system .","In an embodiment, the customers themselves may generate scripts that monitor and\/or affect signaling application  without having to recompile any part of application . This is advantageous over other approaches in which the customers would need authorization from the manufacturer of signaling application  to affect such application. Further, script engine  provides a C\/C++ language interface to define customized objects, methods and properties, which are also available in scripts and which depict the application to be managed .","Examples of program scripts include listing a number of trunks that are being used in the system, explicitly closing a connection between the computer running portal application  and signaling application , getting properties of a voice portal application, identifying circuits managed by an application, resetting a circuit, a range of circuits, a set of circuits, querying the state of a circuit, getting traffic statistics, etc.","Scheduler  schedules tasks to be performed by application logic , HTTP server , script engine , etc. In an embodiment, scheduler  is also embedded in application  and is implemented in an infinite loop and regularly checks whether application logic  and HTTP server  has tasks to perform. If either one of them is not performing a task, then scheduler , based on the priority, assigns tasks to them. Tasks for application logic  include, for example, calls processing, and tasks for HTTP server  include new and\/or existing HTTP requests, etc. In general, scheduler  minimizes the impact on application logic , and thus gives higher priority to application logic  than HTTP server  and script engine  in using system resources. Scheduler  thus allows application processing to be executed before executing management requests. During the process, scheduler  may divide tasks of HTTP server  and\/or script engine  into smaller tasks for them to be executed in several small steps. For example, if an HTTP request takes up to 2 seconds to process, then scheduler  may divide and thus execute the request in 100 ms-second subtasks. Similarly, a request may be for 10,000 circuits, scheduler  then schedules work to be performed on  circuits each time, etc.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 3","b":"1130"},"In step , a user, from a web browser on computer , loads the home page of HTTP server  from which the user may manage signaling application . For example, the user types in http:\/\/server.company.com\/index.asp. HTTP server  then loads the corresponding page and sends it to client 's interface as an HTML document.","In step , the web browser displays the home page on the display screen of computer system . Normally, the home page shows choices for the user to select and thus manage signaling application . Examples of those choices include getting the trunk number, getting configurations of the system including the trunks, getting statistic of the system, of a particular trunk, getting help information, etc. For illustration purposes, the user clicks on the hyper-link for getting the configuration of the trunks, which will activate a dedicated script e.g., get_trunk_config.asp, on signaling application . Clicking on the hyper-link, in effect, initiates an HTTP request for a command or set of commands desired by the user.","In step , the browser sends the HTTP request for getting the configuration of the trunk to HTTP server  along with program parameters as appropriate.","In step , HTTP server , upon receiving the request, analyzes it and determines that the requested file is the script get_trunk_config.asp, loads this script from disk, and invokes script engine  to interpret script get_trunk_config.asp along with parameters extracted from the HTTP request.","In step , script engine  interprets the loaded script get_trunk_config.asp. Because script get_trunk_config.asp has access to internal objects of signaling application , script get_trunk_config.asp calls these objects, e.g., invoking C++ and\/or Java methods, to get information and\/or executes commands to change the objects.","In step , script engine , via script get_trunk_config.asp, formats the results, e.g., in HTML or XML, and adds them to the reply, which may also be a scriptable object.","In step , HTTP server  gets the result of the script and sends the reply to the web browser.","In step , the web browser loads and displays the requested information on the screen of computer . If the data is in XML, then the current HTML page on the client can itself analyze\/parse the XML data to create and\/or modify the corresponding HTML display.","In the above steps, scheduler  performs its function as appropriate. For example, scheduler , in step , invokes HTTP server  to read the request, and later to process the request, etc. In step , scheduler  the calls the script engine  to process the data, etc.","Embodiments of the invention can allow dynamically debugging of signaling application  and\/or voice portal application . For example, scripts can be provided to debug voice portal application  while this application is running and without stopping the application. Scripts can be modified without having to stop the application.","Signaling application  and the voice portal solution in  are used as an example. Techniques of the invention are applicable in managing other applications that run on a system having access to a network and that are able to schedule a script engine and an application server such as the HTTP server. Generally, an application running on a computer and manipulating data exports its functions to access these application data via an API. The script engine built-in objects are enriched with dedicated objects encapsulating application data using the API. The server-side scripts are created to perform requests on these data. These scripts are executed in response to the remote client actions, and the client, in return, receives the response of the server script that ranges from a simple acknowledge to complex result tables. For example, signaling application  may be used to manage a photo album wherein signaling application  is replaced with an album managing application and the pictures are objects of the album application. The managing application exports methods to access and manipulate photos within the album. The script engine is enriched with album, photo, owner, objects, etc. The objects are interfaced to the application functions and are available at the scripting level. Server-side scripts are written to perform actions such as listing photos of the album, removing a photo, etc.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 4","b":["400","400","140","110","1130","400","404","408","412","416","420","424"]},"CPU  controls logic, processes information, and coordinates activities within computer system . In an embodiment, CPU  executes instructions stored in RAMs  and ROMs , by, for example, coordinating the movement of data from input device  to display device . CPU  may include one or a plurality of processors.","RAMs , usually being referred to as main memory, temporarily store information and instructions to be executed by CPU . Information in RAMs  may be obtained from input device  or generated by CPU  as part of the algorithmic processes required by the instructions that are executed by CPU .","ROMs  store information and instructions that, once written in a ROM chip, are read-only and are not modified or removed. In an embodiment, ROMs  store commands for configurations and initial operations of computer system .","Storage device , such as floppy disks, disk drives, or tape drives, durably stores information for use by computer system .","Communication interface  enables computer system  to interface with other computers or devices. Communication interface  may be, for example, a modem, an integrated services digital network (ISDN) card, a local area network (LAN) port, etc. Those skilled in the art will recognize that modems or ISDN cards provide data communications via telephone lines while a LAN port provides data communications via a LAN. Communication interface  may also allow wireless communications.","Bus  can be any communication mechanism for communicating information for use by computer system . In the example of , bus  is a media for transferring data between CPU , RAMs , ROMs , storage device , communication interface , etc.","Computer system  is typically coupled to an input device , a display device , and a cursor control . Input device , such as a keyboard including alphanumeric and other keys, communicates information and commands to CPU . Display device , such as a cathode ray tube (CRT), displays information to users of computer system . Cursor control , such as a mouse, a trackball, or cursor direction keys, communicates direction information and commands to CPU  and controls cursor movement on display device .","Computer system  may communicate with other computers or devices through one or more networks. For example, computer system , using communication interface , communicates through a network  to another computer  connected to a printer , or through the world wide web  to a server . The world wide web  is commonly referred to as the \u201cInternet.\u201d Alternatively, computer system  may access the Internet  via network .","Computer system  may be used to implement the techniques described above. In various embodiments, CPU  performs the steps of the techniques by executing instructions brought to RAMs . In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the described techniques. Consequently, embodiments of the invention are not limited to any one or a combination of software, firmware, hardware, or circuitry.","Instructions executed by CPU  may be stored in and\/or carried through one or more computer-readable storage media, which refer to any medium from which a computer reads information. Computer-readable media may be, for example, a floppy disk, a hard disk, a zip-drive cartridge, a magnetic tape, or any other magnetic medium, a CD-ROM, a CD-RAM, a DVD-ROM, a DVD-RAM, or any other optical medium, paper-tape, punch-cards, or any other physical medium having patterns of holes, a RAM, a ROM, an EPROM, or any other memory chip or cartridge. Computer-readable transmission media may be coaxial cables, copper wire, fiber optics, acoustic or electromagnetic waves, capacitive or inductive coupling, etc. As an example, the instructions to be executed by CPU  are in the form of one or more software programs and are initially stored in a CD-ROM being interfaced with computer system  via bus . Computer system  loads these instructions in RAMs , executes some instructions, and sends some instructions via communication interface , a modem, and a telephone line to a network, e.g. network , the Internet , etc. A remote computer, receiving data through a network cable, executes the received instructions and sends the data to computer system  to be stored in storage device .","In the foregoing specification, the invention has been described with reference to specific embodiments. However, it will be evident that various modifications and changes may be made without departing from the broader spirit and scope of the invention. Accordingly, the specification and drawings are to be regarded as illustrative rather than as restrictive."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings in which like reference numerals refer to similar elements and in which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
