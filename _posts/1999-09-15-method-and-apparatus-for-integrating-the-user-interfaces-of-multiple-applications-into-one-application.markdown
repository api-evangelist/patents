---
title: Method and apparatus for integrating the user interfaces of multiple applications into one application
abstract: A method including receiving a request to launch a first application and then launching the first application in a suspended mode. Further, installing a message hook in the first application; and unsuspending the first application. Also, an apparatus for performing the above method including a processor and a memory connected to the processor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06871348&OS=06871348&RS=06871348
owner: Intel Corporation
number: 06871348
owner_city: Santa Clara
owner_country: US
publication_date: 19990915
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","DESCRIPTION OF RELATED ART","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This invention relates to computer user interfaces. Specifically, this invention is directed towards integrating the user interfaces of multiple applications into one application.","Currently, with multiple applications running at the same time, window management is often a problem. In addition, transferring the content created in one application into another application is not often easy. Having multiple separate applications for creating and sending documents adds complexity for users.","For example, digital imaging is quickly becoming popular with consumers and professional photographers alike. There are many programs available for capturing digital still images and digital video. In addition, programs are available for converting traditional images (e.g., chemical based photographs) or videos (e.g., analog video tapes) into digital formats suitable for processing by a computer.","Typically, a user would use multiple programs for capturing, manipulating, and outputting any digital media that the user has as each program is optimally suited for a particular phase. However, task flow among multiple image capture and manipulation applications often poses a problem. For example, in order for a user to complete the task of creating and sending an e-mail postcard, the user would have to run a first program to create or capture new videos or still images; another program to edit the video or still images; and a third application to locate existing videos on their hard drive. Finally, the user would have to use a fourth application to build the postcard.","One solution for managing task flow with multiple applications involves creating a suite of applications that, together, provide the necessary functions desired by most users. These solutions provide control over a user's experience. For example, certain elements like an image and video gallery may always be made available. New content (videos, audio, or stills) may be generated at any time, and when it is, may be immediately inserted into the active application without the user having to locate it on their hard drive. Also, integrated solutions provide flow from creation applications (e.g., movie editors) into sending applications (e.g., e-mail programs or web page creators).","Although having an integrated suite of applications provides a unified solution, many users still prefer to use third party applications. For example, a third party still image editor and a third party calendar\/card marker may be used to supplement or substitute the functionality provided by the applications in the suite. These additional applications should be integrated into the suite of applications such that the user experience is still relatively consistent and the user is not able to distinguish whether the program that is providing the functionality is part of the original suite of applications or from a third-party application. However, since these additional applications are often commercial, third party applications, the integration would have to be achieved without modifying any code of the third party application.","Thus, it is desirable to be able to integrate separate applications together in a fashion that would provide a more uniform user interface. In addition, it would be desirable to be able to integrate any off-the-shelf applications without modifying the code from these applications.","The present invention provides a method including receiving a request to launch a first application and then launching the first application in a suspended mode. Further, installing a message hook in the first application; and unsuspending the first application. Also, an apparatus for performing the above method including a processor and a memory connected to the processor.","An application referred to as a shell application is used to provide an integrated environment for suite applications and any third-party applications. In one embodiment, the user runs the shell application, and the shell allows the user to choose the task the user wants to complete. When the user makes their task selection, the shell launches the appropriate application using one of two techniques described herein. Both of these techniques cause the launched application to become a part of the shell. With these techniques there is only one application running from the user's perspective. In reality, the shell can be running several different applications at the same time, and present them as dialogs or just different work modes.","There are two different approaches for attaching a process to the shell. The first is for applications designed to be a part of a suite of applications. In this case, special code may be added that allows the separate task application to be fully integrated in the most efficient manner.","In the second approach of attaching an application, the application being attached to the shell is a third party application that is not aware about the shell. Normally, a third party application is not designed to be operated within the context of another application such as the shell application. When the shell application launches the task application, the operating system returns a process identifier (ID) to the launched application. The shell application then creates a operating system hook, which it uses to monitor all messages sent to all applications. The hook specifically watches for window creation messages. For each one of these messages it sees, it examines whether that window is being created for the process it launched, by comparing processes IDs. If so it looks at the style of the window being created to see if it is an application frame window, or some other splash screen. Once the hook locates the launched application's frame window, the attributes of the window are modified. For example, the parent of the window is set to be the shell application's view and the window's style is adjusted to make it a child window. In addition, other styles of the window may be modified.","The shell application also has to do some extra work for the third party application windows. The shell application must set the window size of the task application, and keep the task application's window size updated if the shell's window size changes. It must also size the window in such a way that the frame around the window is clipped by the shell's container window. This helps enforce the feeling to the user that the windows generated are all from one application. The shell application also has to simulate the operating system shutting down to force the task applications to exit. In one embodiment, the messages sent to the task applications are operating system messages that all applications are designed to handle. In this approach, the shell application sends them instead of the operating system, and in this case the operating system is not shutting down, the shell application is indirectly asking the task application to close in a way where it can refuse if it is not able to close at that time.","Although the present invention is described with the use of the shell application in a digital imaging application, the use of integrating applications for digital imaging is just one embodiment. Virtually any suite of separate applications, especially those made from multiple vendors, would benefit from this invention.",{"@attributes":{"id":"P-00026","num":"00026"},"figref":"FIG. 1","b":["100","120","125","160","170"]},"Application space  contains a shell application , a set of 32-bit applications , and a set of 16-bit applications . Shell application  is the shell application that provides the necessary integration between the applications of the system. Shell application  is further described herein. Applications space  may contain one or more applications (e.g., 32-bit or 16-bit) in addition to shell application , which when executed, provide functionality such as word processing, image editing, image capture, and e-mail access. In other embodiments, application space  may contain applications of other bit sizes (e.g., 8-bit, 64-bit). Set of 32-bit applications  are 32-bit applications running on the system. This includes the applications that are contained within the shell as well as other applications running on the operating system not contained within the shell. Set of 16-bit applications  is a set of 16-bit applications running on the operating system. The 16-bit applications are contained together in a combined virtual machine.","The Windows system architecture also contains 32-bit shell . 32-bit shell  is the operating system's application interface to display high level common controls. For example, 32-bit shell  provides interface to display common dialogs (e.g., \u201cOpen\u201d, \u201cSave\u201d, and \u201cFont\u201d dialogs), tree controls, and list views.","Windows OS core  provides the operating system's core functionality and includes a USER module , a GDI module , and a KERNEL . USER module  is responsible for passing messages around the operating system and for managing windows and other user interface elements. This includes menus, keyboards, the mouse, cursors, and all windows (top level and child). GDI module  is the heart of the windows graphics system. GDI module  takes care of drawing lines, shapes, and images. In general, GDI module  is responsible for displaying the screen to the user. To display a window on the screen requires an intense amount of cooperation between USER module  and GDI module . KERNEL  is the core of the Windows operating system, and is responsible for all the non-user interface tasks. This includes managing memory, threads, and processes, and also managing the file system input and output.","Windows OS core  also contains modules such as a virtual machine manager (for managing memory, scheduling processes, and providing MS-DOS protected mode interfaces); an installable file system (IFS) manager (for managing local and networked files systems); and a configuration manager (for managing \u201cplug-and-play\u201d devices).","The Windows system architecture also contains set of device drivers , which are software components, usually provided by the manufacture of a particular piece of hardware, that allows the operating system to communicate and make use of the hardware component. A driver is the interface between the operating system and the hardware.","Set of hardware  is the set of actual hardware of the computer system. As described below, this includes disk drives, keyboards, mouse, modems, monitors, and printers.",{"@attributes":{"id":"P-00033","num":"00033"},"figref":"FIG. 2","b":["200","200","102","106","1"]},"Referring to , the computer system  comprises a processor or a central processing unit (CPU) . The illustrated CPU  includes an Arithmetic Logic Unit (ALU) for performing computations, a collection of registers for temporary storage of data and instructions, and a control unit for controlling operation for the system . In one embodiment, the CPU  includes any one of the x86, Pentium\u2122, Pentium II\u2122, Pentium Pro\u2122, and Pentium\u2122 III microprocessors as marketed by Intel\u2122 Corporation, the K-6 microprocessor as marketed by AMD\u2122, or the 6\u00d786MX microprocessor as marketed by Cyrix\u2122 Corp. Further examples include the Alpha\u2122 processor as marketed by Digital Equipment Corporation\u2122, the 680X0 processor as marketed by Motorola\u2122 or the Power PC\u2122 processor as marketed by IBM\u2122. In addition, any of a variety of other processors, including those from Sun Microsystems, MIPS, IBM, Motorola, NEC, Cyrix, AMD, Nexgen and others may be used for implementing CPU . The CPU  is not limited to microprocessor but may take on other forms such as microcontrollers, digital signal processors, reduced instruction set computers (RISC), application specific integrated circuits, and the like. Although shown with one CPU , computer system  may alternatively include multiple processing units.","The CPU  is coupled to a bus controller  by way of a CPU bus . The bus controller  includes a memory controller  integrated therein, though the memory controller  may be external to the bus controller . The memory controller  provides an interface for access by the CPU  or other devices to system memory  via memory bus . In one embodiment, the system memory  includes synchronous dynamic random access memory (SDRAM). System memory  may optionally include any additional or alternative high speed memory device or memory circuitry. The bus controller  is coupled to a system bus  that may be a peripheral component interconnect (PCI) bus, Industry Standard Architecture (ISA) bus, etc. Coupled to the system bus  are a graphics controller, a graphics engine or a video controller , a mass storage device , a communication interface device , one or more input\/output (I\/O) devices -, and an expansion bus controller . The video controller  is coupled to a video memory  (e.g., 8 Megabytes) and video BIOS , all of which may be integrated onto a single card or device, as designated by numeral . The video memory  is used to contain display data for displaying information on the display screen , and the video BIOS  includes code and video services for controlling the video controller . In another embodiment, the video controller  is coupled to the CPU  through an Advanced Graphics Port (AGP) bus.","The mass storage device  includes (but is not limited to) a hard disk, floppy disk, CD-ROM, DVD-ROM, tape, high density floppy, high capacity removable media, low capacity removable media, solid state memory device, and combinations thereof. The communication interface device  includes a network card, a modem interface, or a similar communications device for accessing network  via communications link . In addition, communications interface device  includes communication ports such as serial ports (e.g., IEEE RS-232), parallel ports (e.g., IEEE-1284), Universal Serial Bus (USB) ports, and infra-red (IR) ports.","The I\/O devices -include a keyboard, mouse, audio\/sound card, printer, and the like. The expansion bus controller  is coupled to nonvolatile memory , which includes system firmware . The system firmware  includes system BIOS , which is for controlling, among other things, hardware devices in the computer system . The system firmware  also includes ROM  and flash (or EEPROM) . The expansion bus controller  is also coupled to expansion memory  having RAM, ROM, and\/or flash memory (not shown). The system  may additionally include a memory module  that is coupled to the bus controller . In one embodiment, the memory module  comprises a ROM  and flash (or EEPROM) .","As is familiar to those skilled in the art, the computer system  further includes an operating system (OS) and at least one application program, which in one embodiment, are loaded into system memory  from mass storage device  and launched after POST. The OS may include any type of OS including, but not limited or restricted to, DOS, Windows\u2122 (e.g., Windows 95\u2122, Windows 98\u2122, Windows NT\u2122), Unix, Linux, OS\/2, OS\/9, Xenix, etc. The operating system is a set of one or more programs which control the computer system's operation and the allocation of resources. The application program is a set of one or more software programs that performs a task desired by the user.","In accordance with the practices of persons skilled in the art of computer programming, the present invention is described below with reference to symbolic representations of operations that are performed by computer system , unless indicated otherwise. Such operations are sometimes referred to as being computer-executed. It will be appreciated that operations that are symbolically represented include the manipulation by CPU  of electrical signals representing data bits and the maintenance of data bits at memory locations in system memory , as well as other processing of signals. The memory locations where data-bits are maintained are physical locations that have particular electrical, magnetic, optical, or organic properties corresponding to the data bits.","When implemented in software, the elements of the present invention are essentially the code segments to perform the necessary tasks. The program or code segments can be stored in a processor readable medium or transmitted by a computer data signal embodied in a carrier wave over a transmission medium or communication link. The \u201cprocessor readable medium\u201d may include any medium that can store or transfer information. Examples of the processor readable medium include an electronic circuit, a semiconductor memory device, a ROM, a flash memory, an erasable ROM (EROM), a floppy diskette, a CD-ROM, an optical disk, a hard disk, a fiber optic medium, a radio frequency (RF) link, etc. The computer data signal may include any signal that can propagate over a transmission medium such as electronic network channels, optical fibers, air, electromagnetic, RF links, etc. The code segments may be downloaded via computer networks such as the Internet, Intranet, etc.",{"@attributes":{"id":"P-00041","num":"00041"},"figref":["FIG. 3","FIG. 3"],"b":["105","140","105","106","106","106","140","106","105","140","106","106","106","106","190","140","105","106","105","106","140","140","106","106","105","106"]},{"@attributes":{"id":"P-00042","num":"00042"},"figref":"FIG. 4","b":["195","106","106","105","130","195","130","190"]},{"@attributes":{"id":"P-00043","num":"00043"},"figref":"FIG. 5","b":["185","190","190","185","140","105","140","185","185","105","190","195"]},{"@attributes":{"id":"P-00044","num":"00044"},"figref":["FIG. 6","FIG. 6"],"b":["185","105","185","106"]},{"@attributes":{"id":"P-00045","num":"00045"},"figref":"FIG. 7","b":["106","185","105","140","106","106"]},"During operation, the hooks,.running in each process space, loads the shared data from shared global memory object  into the local memory of each process. Each hook then examines all messages sent to any window in the operating system. For each window create (WM_CREATE) message found, the hook will compare the process ID of the window the message was sent to with the process ID retrieved from shared global memory object . If the process ID's match, and the window has the title bar (WS_CAPTION) and the dialog frame (WS_DLGFRAME) window styles, the hook adjusts the creation parameters of the window to make it a child of the window specified by shell application  (via shared global memory object ) by setting the parent of the contained window to the window specified by the shell and adding the child window style (WS_CHILD) and removing the free floating window style (WS_POPUP).","In one embodiment, a WS_POPUP style window is a window that floats free on the desktop and the user can move wherever the user wishes. For example, a typical application window has this style. In contrast, a WS_CHILD style window is a window that is contained and constrained by its parent window. Most of these windows are not move able, but a window that has that style does not actually stop the user from moving the window (the WS_CAPTION style does this). However, the child window's position is based on the parent window. For example, if the parent window is moved, then the child window is automatically moved. If the caption style is on the child window, the user can move the child window within the parent's window, but the user cannot move the child window outside of the parent's window. If the parent window is destroyed, the child is also removed. If the user hides the parent window, the child window is also hidden. If the user disables the parent window, the child is also disabled. However, this relationship does not including sizing. The WS_CHILD style and the WS_POPUP style are stylistically and functionally opposite from each other, and a window is not allowed to have both of these styles set at the same time.","The found window's window handle is stored in shared global memory object , and the hook sends a message to shell application  that a window has been found. Shell application  then reads the information for the found window from the shared memory, and disables the hook and frees the global shared memory. Shared global memory object  is used only to locate and set-up the main window of contained application .",{"@attributes":{"id":"P-00049","num":"00049"},"figref":"FIG. 8","b":"105"},"In block , shell application  receives a request from the user to run a task application. For example, the user may select a button in the tool bar provided by shell application  to capture an image.","In block , shell application  determines if the task application to be run is a suite application\u2014i.e., an application that contains code for integration with shell application . If the task application is a suite application, then operation continues with block . Otherwise, operation continues with block . Thus, the way the task application is initiated and configured falls into two possible scenarios.","In block , where the task application is a suite task application, shell application  launches the task application with a special command line parameter that contains the handle of the view window of shell application . Operation then continues with block .","In block , when the task application creates its main frame window, the task application uses the handle to the view window of shell application  passed on its command line as its parent window. When this switch is provided, the task application also knows to resize its window to be the size of its parent window, and to remove its title bar and window frame. As the application is developed as part of a suite by the developer of shell application , a protocol may be established to allow the shell to query the application for information such as types of images or videos that can be transferred from shell application , shared menu items that the application supports, hotkeys, and application programming interfaces (APIs) for shutting down the application gracefully.","In block , if the task application that is to be launched is not a suite application, as determined in block , then shell application  creates task application process (e.g., contained application ) suspended. A process ID for the task application process is returned to shell application  as part of the process. At this point, the task application has been initialized, but is not allowed to run.","In block , shell application  sets up a system hook (e.g., message hook  in ) in the task application. Shell application  uses the process ID obtained in block  to set up the system hook. Then, in block , the task application is allowed to run. Specifically, the task application is removed from suspended mode.","In block , the system hook that is installed in the task application monitors all messages involving the task application, and determines, in block , whether a window create message (WM_CREATE) is sent. The WM_CREATE message is the message sent before a window is created. If a WM_CREATE message is detected, shell application  examines whether the window that is being created is for the process shell application  launched, by comparing process IDs in block . If the process IDs match, then operation continues with block . If a WM_CREATE message is not detected in block  or if the process IDs do not match in block , then operation returns to block .","Once the process IDs match in block , then operation continues with block , where the style of the window being created is examined to see if it is an application frame window, or some other splash screen. If the window being created is the task application frame window, then operation continues with block , where the system hook sets the parent of the frame window to be shell application 's view, and modifies the frame window by removing the WS_POPUP style and setting the WS_CHILD style.","In block , shell application  positions and\/or sizes task application window. Specifically, shell application  must set the window size of the task application, and keep the task application's window size updated if shell application 's window size changes. Shell application 's must also size the task application's window in such a way that the frame around the window is clipped by shell application 's container window. This helps enforce the feeling to the user that the task application is integrated into shell application .",{"@attributes":{"id":"P-00059","num":"00059"},"figref":"FIG. 9","b":"105"},"In block , shell application  determines whether the task application that is being terminated is a suite application. If so, then operation continues with block . Otherwise, application continues with block .","In block , shell application  sends a \u201cQueryEndTask\u201d message to the task application. This allows the task application the option of providing the user the ability to save the document, or cancel the termination of the task application. Then, in block , it is determined whether the task application is able to terminate. If so, then in block , the task application returns a value of \u201cTRUE\u201d to shell application  in response to the QueryEndTask message. Operation then continues with block , where it is determined whether shell application  is running another task application that has not been asked. If not, then operation continues with block . Otherwise, operation returns to block , where the process begins again for the task application that has not been asked.","In block , shell application  sends a \u201cShellEndTask\u201d message to all task windows with a parameter of \u201cTRUE\u201d. The task application then posts a \u201cTaskEnded\u201d message to shell application  in block , and unregisters itself with shell application  in block .","In block , where it is determined in block  that the task application is not able to quit, shell application  sends a \u201cWM_ENDSESSION\u201d with a \u201cFALSE\u201d parameter to all non-suite task windows. In one embodiment, the WM_ENDSESSION message is typically a message the operating system normally sends to applications when a user chooses to shut down the operating system.","In block , shell application  also sends a \u201cShellEndTask\u201d message to each suite task window with a \u201cFALSE\u201d parameter. The messages sent in block  and in block  inform the task windows that they are not being closed and, in effect, that shell application  is not being shut-down.","In block , where the task application is not a suite application, shell application  sends a \u201cWM_QUERYENDSESSION\u201d message to the task application, which is a message typically sent by the operating system that asks whether the task application may be terminated. Operation then continues with block , where the task application may ask whether the user wishes to save any documents before the task application is terminated or cancel the termination request altogether. In one embodiment, the user is asked with a dialog box, which contains a \u201cCancel\u201d button. If the user presses the Cancel button, the task application returns \u201cFALSE\u201d to the WM_QUERYENDSESSION message and shell application  then cancels the termination request and remains running. If the user saves all their documents or decides not to save and does not press the Cancel button, the task application typically returns \u201cTRUE.\u201d","In block , it is determined whether the task application is able to terminate. If so, then operation continues with block . Otherwise, operation continues with block , where separate messages are sent to the suite and non-suite applications.","In block , where the task application is able to terminate, the task application returns a \u201cTRUE\u201d response to the WM_QUERYENDSESSION message. Operation then continues with block , where it is determined if shell application  is running another task that has not been queried to see if the task is able to terminate. If shell application  is running another task application that hasn't been queried, then operation returns to block . Otherwise, operation continues with block . In one embodiment, shell application  sends the WM_QUERYENDSESSION message to the next task application until all running task application have returned \u201cTRUE.\u201d Once that happens, shell application  sends the WM_ENDSESSION message and the task application must terminate immediately.","In block , if shell application  is not running another task that has not been queried, then shell application  sends a \u201cWM_ENDSESSION\u201d message to all task windows with a \u201cTRUE\u201d parameter. Then, in block , shell application  terminates the task application, and, in block , waits for process handle to become signaled.","This above is the procedure for shutting down the shell, including all task applications. To terminate a single task application, block  and block  would be skipped and the procedure would be proceed along the \u201cNo\u201d branches for these two blocks.",{"@attributes":{"id":"P-00070","num":"00070"},"figref":"FIGS. 10A-C","b":"105"},"In block , it is detected by shell application  that the user has selected a menu item. Operation then continues with block , where shell application  determines if it has focus. If shell application  has focus, then operation continues with block . Otherwise, operation continues with block .","In block , shell application  sends a message to the contained task application for each menu item to query whether the menu item is enabled. Then, in block , shell application  enables any menu item it needs to process that has not be enabled by the contained task application.","In block , a pop-up menu is displayed that contains menu items that have been enabled. Then, in block , the user makes a menu selection, which is routed to the application that enabled the menu item in block . The menu selection is then processed by the task application.","In blocks , where it is determined that shell application  has focus, shell application  enables menu items first. Then, in block , shell application  sends a message to the contained task application for each menu item that is disabled to see if the contained task application wants to enable the item. Operation then continue with block , which is described above.","Another event that may be received by shell application  is that the user may attempt to resize shell application 's window, as in block . Then, in block , shell application  determines the minimum sizes for the contained task application by sending a query to retrieve the minimum and maximum window sizes for the contained task application (WM_GETMINMAXINFO).","In block , shell application  resizes its window within the constraints of the minimum and maximum sizes for the contained task application as retrieved from block . Once the user has finished resizing shell application 's window, shell application  resizes and move the contained task application as necessary to ensure an aligned view.","In block , the user has enabled\/activated a modal dialog box or window from shell application . When this occurs, shell application , in block , disables the contained task application's main window such that it will not accept any input. Shell application  then waits for the modal dialog to close in block , and then re-enables the contained task application's main window in block .","In block , shell application  receives an activation request for another contained application. For example, the user, when satisfied with his edits to an image, activates the e-mail program to e-mail out the image. In block , shell application  minimizes and hides the current contained application's main window, and, in block , restores the second contained application's main window.","In block , shell application  has detected that a short-cut, or \u201chot\u201d key has been pressed, for example, the user has selected the hot key for capturing an image. In block , it is determined whether shell application  has focus. If shell application  has focus, operation continues with block . Otherwise, operation continues with block .","In block , where shell application  has focus, it is determined whether shell application  processes the hot key. If so, operation continues with block . Otherwise, operation continues with block , where it is determined whether a contained application would process the hot key. The contained task application processes the hot key, but operation continues with block . Otherwise, the hot key is ignored.","In block , where the contained task application processes the hot key, shell application  routes the hot key to the contained task application for processing.","In block , where shell application  does not have focus, it is determined whether the contained task application processes the hot key. If the contained task application processes the hot key, then operation continues with block , where the hot key is routed to the contained task application. Otherwise, operation continues with block , where it is determined whether shell application  processes the hot key. If shell application  processes the hot key, then operation continues with block , where the hot key is routed to shell application . Otherwise, the hot key is ignored.","Containing applications in a shell eliminates all window management issues for a suite of applications, allowing the user to move, resize, minimize and restore any contained applications as if they were just one application.","The present invention also provides content flow between applications, because shell application  is aware of exactly what application on which the user is working. Shell application  may coordinate new content creation. So if the user is in an e-mail application, the user can press a \u201cRecord Video\u201d button, available in shell application , which runs a recorder application. When the user is done, the video is automatically added into the e-mail.","Shell application  can also \u201cmerge\u201d applications together. For example, for a web camera application, which allows the user to set up a web camera on their web page, asks all the properties for the web camera, and then asks the user if they already have a web camera on their web page. If they don't the shell application tells shell application  to swap in the suite web page editor application that then allows the user to edit their web page in the middle of the web camera application. Once the user finishes editing their web page, shell application  automatically transitions back to the web camera application that finalizes the web camera setup now that it knows the web page to use.","Having shell application  presents common elements and allows certain elements such as an image and video gallery and a new content tool bar to be always available to the user in all applications\u2014including applications that are not written as part of the suite.","Placing common elements such as tool bars and the gallery in shell application  means that the task applications do not have to add these common elements themselves. Task applications (e.g., contained application ) benefit from the features of shell application  without having to do the additional work of actually incorporating the controls or code to make that functionality possible. This reduces and localizes code.","Using shell application  also allows applications to be sold separately. Since applications are typically developed separately, applications may be debugged by developers as separate components. They may even be sold as stand alone products without common elements such as the gallery and new content creation toolbar.","In the foregoing specification, the invention has been described with reference to specific exemplary embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The system is illustrated, by way of example and not limitation, in the figures of the accompanying drawings in which like references indicated similar elements and in which:",{"@attributes":{"id":"P-00011","num":"00011"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00012","num":"00012"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00013","num":"00013"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"P-00014","num":"00014"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"P-00015","num":"00015"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"P-00016","num":"00016"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"P-00017","num":"00017"},"figref":["FIG. 7","FIG. 3"]},{"@attributes":{"id":"P-00018","num":"00018"},"figref":"FIG. 8"},{"@attributes":{"id":"P-00019","num":"00019"},"figref":"FIG. 9"},{"@attributes":{"id":"P-00020","num":"00020"},"figref":"FIGS. 10A-C"}]},"DETDESC":[{},{}]}
