---
title: Service framework with local proxy for representing remote services
abstract: In an information appliance system , a user device comprises a client platform (, FIG. ) that includes a service framework (, FIG. ) to discover and connect with a variety of services, both remote and local, transient and persistent, and to disconnect from them when they are no longer of interest or become unavailable. The service framework provides a standard, consistent, simplified way for services to make themselves available and for service-using entities to locate and connect with the services of interest to them. From the perspective of the client platform , all services, whether local or remote, are presented as local services to the application. Each remote service is represented as a local service through the use of a local proxy that insulates the service user from the complexities of communicating with a remote server. Various methods of operating a service framework are also described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06895444&OS=06895444&RS=06895444
owner: Motorola, Inc.
number: 06895444
owner_city: Schaumburg
owner_country: US
publication_date: 20000915
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED INVENTIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION OF THE DRAWINGS","Overview of Client Platform","Overview of Server Platform","Overview of Services","Consolidator Service\u2014Hidden Services","Private Services","Security","Representation of Remote Services Through Local Proxy","Service Components","Service Framework\u2014General","Service Framework Architecture","Remote Service Lookup","Service Location\u2014Setup","Service Location\u2014Completion","Remote Service Discovery and Connection","Service Framework APIs","Use Case #1\u2014Resident Address Book:","Use Case #2\u2014Accommodated Device Address Book","Use Case #3\u2014Authenticated Address Book","Use Case #4\u2014Address Book Restricted by Security Policy","Use Case #5\u2014Remote Service Provided by a Local Node","Use Case #6\u2014Client Service Advertisement","Use Case #7\u2014Consolidated Address Book","Service Framework Characteristics","Class\/Interface Usage Overview","Class\/Interface Descriptions","Methods of Operation","Conclusion"],"p":["This invention is related to the following inventions which are assigned to the same assignee as the present invention and which were filed on even date herewith:\n\n","This invention relates generally to communications systems and, in particular, to methods and apparatus for providing services to wireless equipment in a wireless communications system.","There is an ever increasing demand for wireless communications. Wireless subscribers desire to have access to information at any time and at any place. One of the fastest growing markets for providing wireless services is known as \u201ctelematics\u201d and entails delivering a wide spectrum of information via wireless links to vehicle-based subscribers. The information can originate from multiple sources, such as the Internet and other public, private, and\/or government computer-based networks; wireless telecommunications such as cellular, Personal Communication Service (PCS), satellite, land-mobile, and the like; terrestrial and satellite direct broadcasts including traditional AM\/FM bands, broadband, television, video, geolocation and navigation via a global position system (GPS), and the like; concierge services providing roadside assistance, emergency calling, remote-door unlocking, accident reporting, travel conditions, vehicle security, stolen vehicle recovery, remote vehicle diagnostics, and the like; advertising services identifying names and locations of businesses such as gas stations, restaurants, hotels, stores, and offices, and the like; tourist services such as points of interest, directions, hours of access, and the like; and many other sources that can provide information of any type. Many of the above services are not universally available, but rather they are transient in both the time and geoposition domains.","Information can be communicated to telematics devices over relatively long wireless links, such as from a satellite or terrestrial node, or from relatively short wireless or wired links, such as from in-vehicle equipment or from hand-held devices like PDAs, portable computers, cellular phones, and the like.","The services provided by telematics systems are not restricted to vehicle-based subscribers, and they can also be provided to subscribers at home, at work, or elsewhere. With so much mobility, the equipment located in the subscriber's vehicle, or the equipment carried by or otherwise serving a subscriber, needs a way to connect with the plethora of services that are potentially available to it. The equipment needs a way to discover, identify, select, and invoke services that are of interest to it, as well as to disconnect from services that are no longer of interest to it.","It is known in the prior art to utilize certain commercially available software to locate services. However, systems utilizing such software are fixed, not mobile. Mobile systems require connection software that is specifically designed to fulfill requirements that distinguish mobile systems from fixed systems. For example, mobile systems often have limited battery power, limited bandwidth, limited memory, and only stay in any given place for a limited time.","Mobile systems also may have rigorous security requirements in order to protect the identify and location of mobile subscribers, as well as to insure that the mobile equipment, including software, is not involuntarily altered or corrupted, for example, by downloading uncertified software that could replace, infect, or otherwise have an adverse impact upon the software residing in the system. Known systems that dynamically provide access to services typically download software code to the client platform and execute the code on the client platform. Not only does this introduce potentially dangerous security issues, but the downloaded code can overwhelm the mobile system's limited memory capability.","It is known in the art for applications residing on a client platform to individually locate any desired service. For example, this can be done using the Jini\u2122 connection technology commercially available from Sun Microsystems, Inc., Palo Alto, Calif. However, it can be an undesirable drain upon the applications, their platform, and the bandwidth available to the platform, for each application to independently interact with a desired service. Further, the need to interact differently with local or remote services requires additional complexity in the client platform.","Accordingly, there is a significant need for methods and apparatus that are more conserving of application and platform resources, particularly for mobile platforms.","There is also a significant need for methods and apparatus that make services appear the same to applications and platform resources, irrespective of where the services reside.","There is further a significant need for methods and apparatus that insulate applications from the complexities of interacting with remote servers to connect with remote services.","The present invention is a distributed communications system with software components running on mobile client platforms and on remote server platforms.",{"@attributes":{"id":"p-0026","num":"0030"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","102","104","106","104","102","104","106","100","104","114","112"]},"Servers , while illustrated as coupled to regional node , could be implemented at any hierarchical level(s) within information appliance system . For example, servers  could also be implemented within one or more local nodes , concierge service , and Internet .","Without limitation, local node  can be a kiosk, cell site, local area network (LAN), telephone company, cable company, satellite, or any other information service, structure, or entity that can transmit, receive, and\/or communicate information. An information service can be any desired service including, but not limited to, telecommunications, broadband communications, entertainment, television, radio, recorded music, movies, computer-based games, Internet, and other types of public, private, personal, commercial, government, and military communications.","Local node  is coupled to any number of user nodes  via wireline or wireless interface means. In the embodiment depicted in , user nodes  can transmit and receive information using wireless communications means. User nodes  without limitation can include a wireless unit such as a cellular or Personal Communication Service (PCS) telephone, a pager, a hand-held computing device such as a personal digital assistant (PDA) or Web appliance, or any other type of communications and\/or computing device. Without limitation, one or more user nodes  can be contained within, and optionally form an integral part of a vehicle, such as a car , truck, bus, train, aircraft, or boat, or any type of structure, such as a house, office, school, commercial establishment, and the like. As indicated above, a user node  can also be implemented in a device that can be carried by the user of the information appliance system .","In one embodiment, a user node  comprises an in-vehicle information appliance comprising various human interface (H\/I) elements such as a display , a multi-position controller , one or more control knobs  and , one or more indicators  such as bulbs or light emitting diodes (LEDs), one or more control buttons , one or more speakers , a microphone , and any other H\/I elements required by the particular applications to be utilized in conjunction with the information appliance.","User nodes  can also transmit and\/or receive data to and from devices and services other than local node . For example, user nodes  can transmit and receive data to and from a satellite .","The information appliance system  including the user nodes  is capable of utilizing audio data in any number of encoding methods from any number of sources that include, but are not limited to, ADPCM (adaptive differential pulse-code modulation); CD-DA (compact disc-digital audio) digital audio specification; and ITU (International Telecommunications Union) Standards G.711,G.722,G.723 & G.728.","The information appliance system  including the user nodes  is capable of utilizing video data in any number of encoding methods from any number of sources that include, but are not limited to, ITU Standards H.261 & H.263; Motion JPEG (Joint Photographic Experts Group); and MPEG-1, MPEG-2 and MPEG-4 (Motion Picture Experts Group) standards.","Additionally, the information appliance system  is capable of utilizing audio and video data in any number of formats and using any type of transport technology that include, but are not limited to, USB (Universal Serial Bus); IEEE (Institute of Electrical and Electronics Engineers) Standards 1394-1995; and IEEE 802.11; and using protocols such as HTTP (hypertext transfer protocol); TCP\/IP (transmission control protocol\/Internet protocol); and UDP\/IP (user datagram protocol\/Internet protocol).",{"@attributes":{"id":"p-0035","num":"0039"},"figref":["FIG. 2","FIG. 2","FIG. 1"],"b":["108","100","108","108","120","128","128","126","128","108","126","128"]},"User node  also comprises a user interface device  that can include without limitation a tactile interface , microphone , speakers , any number of displays , and the like.","User node  also comprises an extra-vehicle interface , typically implemented as a transmitter\/receiver for transmitting and receiving communications via a wireless link  among the various nodes depicted in FIG. . Extra-vehicle interface  also facilitates communications among other devices via wireless link , for example, satellite , and the like. Communications are transmitted and received through one or more antennas  of any type, which can include any one or combination of a fixed, steerable, omni-directional, or phased array antenna. Steerable antenna can include, but is not limited to, an electronically steerable antenna, physically steerable antenna, and the like. User node  can also include positioning devices  of any type, for example, global positioning system (GPS), gyroscope, compass, accelerometer, altimeter, rate sensors, and other positioning devices  that can define the position, attitude, and\/or motion vector of the user node .","User node  can also comprise an intra-vehicle interface , which can include antenna . Intra-vehicle interface  can include multiple types of transceivers (not shown) and antennas  to implement different short-range wireless protocols, such as Bluetooth\u2122, IEEE wireless local area network (LAN) standard 802.11, and infrared. Intra-vehicle interface  is capable of short-range wireless communications, via wireless link , with other wireless devices  and sensors  of any type, for example, wireless telephones, computers, pagers, PDA's, entertainment devices, printers, fax machines, wireless local networks such as Bluetooth\u2122, vehicle sensors, vehicle actuators, vehicle displays, and the like. In addition, intra-vehicle interface  can be used to communicate with wireless devices that are physically outside the vehicle but close to the vehicle, such as a service station kiosk. One or more wireless devices  can comprise one or more antennas such as antenna  and communicate via wireless link . One or more sensors  can comprise one or more antennas such as antenna  and communicate via wireless link .","In one embodiment, the various components and systems in  can communicate with each other via a wireline link , for example, a power\/data\/control bus, and the like. In another embodiment, some of the various components and systems in  could communicate via a wireless link.",{"@attributes":{"id":"p-0040","num":"0044"},"figref":["FIG. 3","FIG. 3","FIG. 1"],"b":["106","100","106","121","148","148","146","148","106","146","148"]},"Local node  also comprises any number of transmitters\/receivers  for transmitting and receiving communications via wireless link  to and from any number of user nodes . Communications are transmitted and received through antenna .","Local node  also comprises any number of transmitter\/receivers  for transmitting and receiving communications via wireless link  to and from any number of regional nodes . Communications are transmitted and received through antenna . As shown in , the various components and systems can also communicate via terrestrial links such as wireline, radio frequency (RF), or optical links, and the like, with other local nodes  and regional nodes .","In one embodiment, the various components and systems in  can communicate with each other via a wireline link , for example, a power\/data\/control bus, and the like. In another embodiment, some of the various components and systems in  could communicate via a wireless link.",{"@attributes":{"id":"p-0044","num":"0048"},"figref":["FIG. 4","FIG. 4","FIG. 1"],"b":["104","100","104","123","152","152","150","152","104","150","152"]},"Regional node  also comprises any number of transmitters\/receivers  for transmitting and receiving communications via wireless link  to and from any number of local nodes . Communications are transmitted and received through an antenna .","Regional node  also comprises any number of transmitters\/receivers  for transmitting and receiving communications via wireless link  to and from any number of regional nodes , servers , and the like. Communications are transmitted and received through antenna . As shown in , the various components and systems can also communicate, via terrestrial links such as wireline, radio frequency (RF), or optical links, and the like, with other local nodes  and regional nodes .","In one embodiment, the various components and systems in  can communicate with each other via a wireline link , for example, a power\/data\/control bus, and the like. In another embodiment, some of the various components and systems in  could communicate via a wireless link.","In , processors , , and , respectively, perform distributed, yet coordinated, control functions within information appliance system  (FIG. ). Processors , , and  are merely representative, and information appliance system  can comprise many more processors within the distributed servers , regional nodes , local nodes , and user nodes .","Processors , , and  can be of any suitable type or types, depending upon the functional requirements of the overall information appliance system  and its constituent elements, including servers , regional nodes , local nodes , and user nodes .","Processors , , and  comprise portions of data processing systems that perform processing operations on computer programs that are stored in computer memory such as, but not limited to, user node memory , local node memory , and regional node memory . Processors , , and  also read data from and store data to memory, and they generate and receive control signals to and from other elements within information appliance system .","The particular elements of the information appliance system , including the elements of the data processing systems, are not limited to those shown and described, and they can take any form that will implement the functions of the invention herein described.","To provide an example of one context in which the present invention may be used, a brief overview of a client platform and a server platform, together with their associated software modules, will now be described. The present invention is not limited to implementation by any particular set of elements, and the description herein is merely representational of one embodiment. The specifics of one or more embodiments of the invention are provided below in sufficient detail to enable one of ordinary skill in the art to understand and practice the present invention.",{"@attributes":{"id":"p-0053","num":"0057"},"figref":"FIG. 5","b":["200","108","200","108"]},"These software blocks are computer program modules comprising computer instructions, such as user node control algorithms , that are stored in a computer-readable medium such as user node memory . These software modules are merely representative of one embodiment of the invention. In other embodiments, additional modules could be provided as needed, and\/or unneeded modules could be deleted.","The software blocks include the following modules, each of which is briefly summarized below according to its reference numeral in FIG. .","The client platform software comprises three general layers: applications , foundation software  upon which the applications  are supported, and platform-specific software . In one embodiment, the upper two layers are implemented in the Java\u2122 programming language, available from various suppliers, including Sun Microsystems, Inc., Palo Alto, Calif. One advantage of the Java\u2122 programming language is the support of code distribution in a platform-independent manner.","The lowest layer, i.e. the platform-specific software , comprises a real-time operating system , a virtual machine platform (such as the Java\u2122 2 Virtual Machine, available from Sun Microsystems, Inc.) and associated classes , and a native library interface .","Referring to , applications  can comprise an extremely wide variety of informational, safety, query, communications, entertainment, and other applications, for example navigation , weather , stocks , traffic , news , and others  of any type. As used herein, an \u201capplication\u201d is defined as any computer program that provides one or more functions that are of interest to a user of the information appliance system .","Foundation software , in one embodiment, comprises the following modules, each of which will now be discussed.","Selector module  launches and controls applications selected by the user. It is user-configurable.","Abstract user interface (UI)  supports a wide variety of input\/output (I\/O) functions that enable the user to interact with the user device.","Focus manager  enforces priority-based access to UI and media resources. Focus manager  also controls interactions between synchronous applications and asynchronous notifications and alerts.","Logical button manager (LBM)  allows an application to map logical buttons to actual physical buttons on a user device. It allows physical buttons to be referenced by logical names. It manages different sets of buttons, such as pre-set buttons, application buttons, and so on.","Personal information manager (PIM) service  supports functions to enhance user productivity, such as an address book, a calendar, a memo management capability, and so forth. The address book can comprise information that is up-loaded from a PDA, entered by voice or by keys from the user, down-loaded from the Internet, and so forth.","Trip plan service  provides a variety of trip-planning functions, such as route and map retrieval, route-planning, determination of route distance, etc.","Position service  provides abstract positioning application programming interfaces (API) to support a variety of position-determining mechanisms, such as GPS, differential GPS, in-road transmitters, cellular base stations, etc.","Profile service  provides server-based profiles for users, devices, vehicles, etc. It assists in the application configuration. It can also ensure that user profiles are portable from one user vehicle to another.","Data sync service  synchronizes one or more databases on client platform  with counterpart databases on server platform .","Debug service  provides debug functions to isolate, examine, and correct errors in the operation of the software residing on the client platform .","Application manager  controls the installation and updating of applications, including security attributes of the applications.","User interface manager\/media manager  manages the user interface, e.g. what entities can access what portions of a display screen (in the case of the user interface manager), and manages all aspects of audio and video functions, e.g. radio, voice-recognition, sound clips, etc. (in the case of the media manager).","Security manager  provides permission and policy restraints within the client platform .","Service framework , to which the current invention pertains, is responsible for locating, connecting, and controlling services required by applications  and other services. Additional description of the service framework  is provided elsewhere herein.","Connection manager  manages connection(s) of the client platform  to one or more networks, such as geographically distributed cellular and server networks. It ensures continuity of sessions across physical and\/or logical network interfaces. It can require security (e.g. authentication, encryption, etc.) as a precondition to a connection. It can ensure that low bandwidth connections are used efficiently.","Other modules  can also be provided within the foundation software  of the client platform , depending upon the functional requirements of the client platform .","Platform specific software , in one embodiment, comprises the following modules, each of which will now be discussed.","Power manager  provides power status change events to applications, such as \u201cpower on\u201d, \u201cpower off\u201d, \u201csleep\/accessory mode\u201d, etc. It can enforce a low-power mode in emergency situations, reserving power to the highest priority functions. It can also monitor power consumption to identify elements that may be consuming unreasonable amounts of power.","Resource manager  manages priority-based access to system resources, such as a processor, threads being processed, memory elements, and persistent storage. The resource manager  can ensure the required resources to support an emergency call by halting or suspending lower priority applications.","Vehicle information  provides information to support primarily mission-critical vehicular functions. It comprises information to control certain in-vehicle functions, such as remote door unlock. It comprises status information from the in-vehicle system, e.g. vehicular speed. It also can comprise information derived from integrated vehicle components, such as global positioning information from an in-vehicle GPS system.","Other modules  can also be provided within the platform specific software  of the client platform , depending upon the functional requirements of the client platform .",{"@attributes":{"id":"p-0081","num":"0085"},"figref":["FIG. 6","FIG. 1"],"b":["300","102","300","102"]},"These software blocks are part of computer program modules comprising computer instructions, such as local node control algorithms  (FIG. ), that are stored in a computer-readable medium such as local node memory . Additionally, or alternatively, they can be implemented as regional node control algorithms  (FIG. ), which are stored in regional node memory .","These software modules are merely representative of one embodiment of the invention. In other embodiments, additional modules could be provided as needed, and\/or unneeded modules could be deleted.","The software blocks include the following modules, each of which is briefly summarized below according to its reference numeral in FIG. .","The server platform software comprises three general layers: applications , middleware  upon which the applications  are supported, and enterprise platform . Enterprise platform  comprises software, including an operating system, that is specific to the particular server platform being used. Different servers  can utilize different server platforms .","Server platform  supports an extremely wide variety of informational, safety, query, communications, entertainment, and other applications , for example navigation , weather , stocks , traffic , news , and others  of any type. The application set supported by server platform  will typically be much broader than that supported by any one client platform .","The middleware  of server platform , in one embodiment, comprises the following modules, each of which will now be discussed.","Ad service  provides advertising related services, such as the availability and location of commercial businesses.","Trip plan service , PIM service , profile service , data sync service , security manager , connection manager , and application manager  perform similar functions to the corresponding modules previously discussed with reference to client platform  in FIG. .","Usage service  provides a logging service that tracks the usage of any desired service, module, or other element in the server platform .","Access modules  each provide a unique entry point for users into a corresponding database. Each database in the server platform  has one and only one entry point in the form of an access module . The access modules  provide a consistent programming interface to their using entities regardless of the underlying database technology.","Application databases  provide a variety of databases to support any application required in server platform . These can include, for example, databases to support navigation, personal information management (PIM) functions such as address books, and the like.","System databases  provide a variety of databases to support system functions within server platform . These can include, for example, profile data, session data, event data, and usage logs.","Service framework , to which the current invention pertains, is responsible for providing services required by applications . Additional description of the server platform service framework  is provided elsewhere herein.","Event manager  manages the creation and dispatching of server-side events that represent server activities in a generic way.","Call center  supports services requested of and responded to by a remote call center, such as a concierge center.","Structured query language (SQL)  is a database query language commercially available from various suppliers, including Oracle Corporation, Redwood Shores, Calif. The associated relational database management system (RDBMS) is a database management system commercially available from various suppliers, including Microsoft Corporation, Redmond, Wash.","LDAP (lightweight directory access protocol) server  provides a set of communications protocols for accessing information directories.","HTTP server  supports Internet accesses originated by a client platform  or by another server platform  on behalf of a client platform .","Other modules  can also be provided within the middleware  of the server platform , depending upon the functional requirements of the server platform .","One purpose of this invention is to provide a system to allow a mobile client platform to discover and use services that become available dynamically within the client platform's environment. Many of the features of the present invention are facilitated by making remote services available to a mobile client platform.","The availability of some of these remote services is based on the physical proximity of the remote server to the vehicle. These types of remote services are typically accessed via a short-range wireless link that is established when the vehicle comes within range of a server, e.g. a kiosk at a gas station, and which are lost when the vehicle leaves the immediate area.","Other services, both local and remote, will be available regardless of the vehicle's location. Servers in the infrastructure can provide remote services over long-range links such as cellular. In addition, remote services may be provided by devices within the vehicle over short-range links, such as Bluetooth\u2122. Local services may also be provided by devices that are directly wired in, such as an odometer or digital video disk (DVD). The present invention supports a wide number of interfaces to enable both short-range and long-range bidirectional and unidirectional communications links.","Services are a fundamental building block of the software architecture. They play a variety of roles and are found at all levels of the architecture. As used herein, a \u201cservice\u201d is defined as an encapsulation of some functionality that is of use to one or more service-using entities (current or anticipated) or that needs to be isolated from the service-using entity for some reason. A service may provide access to information or perform some computation. Or it may provide access to a hardware capability such as a communications link or other device.","A client application typically uses a set of services to provide the desired functionality to a human user. Services are identified primarily based on the interface implemented by the service. Service interfaces are abstract and serve to insulate the service consumer from the service implementation. Services can be further identified based on attributes associated with the service. Attributes may be used to characterize services and to aid in distinguishing services implementing the same interface from one another, such as on the basis of cost, performance, and so forth.","Services can be considered to fall into two broad categories, local services and remote services. Local services provide access to functionality that is local to the platform such as an on-board GPS device. Remote services are offered by an external server, such as a remote communications node, and are accessed via a communications link, such as a wireless link or interface.","A system can have a number of instances of the same service. In order to reduce the complexity of using such services, a consolidation service can be utilized. This service consolidates the underlying services and presents a single, unified service to users. The underlying services can be declared \u201chidden\u201d, so as to obscure their presence from service-requesting entities when performing a service lookup.","These services can be explicitly located by specifying that \u201chidden\u201d services be included in the search. The service framework  provides access to a hidden service only if the service-requesting entity explicitly specifies that \u201chidden\u201d services should be considered when performing the lookup. When this is done, and access is provided to a hidden service, the existence of the service is disclosed to the service-requesting entity.","The exposure of a service on a client platform to external communications nodes is controlled by declaring the service \u201cprivate\u201d or not. Most services on a mobile client platform, e.g. stock portfolio or personal address book, would be private. However, some services may be visible to an external communications node. For example, a juke box service could be visible to a home entertainment system and\/or personal computer when a mobile client platform is parked at home, but it could be invisible when it is away from home. Any service that needs, as part of its normal function, to be accessed by an external communications node, particularly where the access is also initiated by the external communications node, would be non-private.","A service can have any of four possible combinations of \u201chidden\u201d and \u201cprivate\u201d attributes, as shown by Table 1 below:",{"@attributes":{"id":"p-0111","num":"0115"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Security"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cHidden\u201d","\u201cPrivate\u201d","Result"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"No","No","Service is"]},{"entry":[{},{},{},"visible locally"]},{"entry":[{},{},{},"and externally."]},{"entry":[{},"No","Yes","Service is"]},{"entry":[{},{},{},"visible locally"]},{"entry":[{},{},{},"but not"]},{"entry":[{},{},{},"externally."]},{"entry":[{},"Yes","No","Service is"]},{"entry":[{},{},{},"visible locally"]},{"entry":[{},{},{},"and externally"]},{"entry":[{},{},{},"only if"]},{"entry":[{},{},{},"\u201chidden\u201d is"]},{"entry":[{},{},{},"explicitly"]},{"entry":[{},{},{},"specified on"]},{"entry":[{},{},{},"lookup"]},{"entry":[{},"Yes","Yes","Service is"]},{"entry":[{},{},{},"visible locally"]},{"entry":[{},{},{},"only if"]},{"entry":[{},{},{},"\u201chidden\u201d is"]},{"entry":[{},{},{},"explicitly"]},{"entry":[{},{},{},"specified on"]},{"entry":[{},{},{},"lookup; service"]},{"entry":[{},{},{},"is not visible"]},{"entry":[{},{},{},"externally."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"The above-described \u201chidden\u201d and \u201cprivate\u201d attributes determine whether or not a service can be exposed to internal and\/or external entities. Additionally, a suitable security check is made prior to providing access to the service by internal and\/or external entities. The security check is performed using appropriate access controls, e.g. certificates. Access is granted only to those services and applications having proper authorization.","In order to simplify things for the entity using the service, it is desirable for remote services to appear exactly like local services from the perspective of the user platform. One way to accomplish this is to represent each remote service as a local service through the use of a local proxy. This proxy insulates the service-using entity from the complexities of communicating with the remote server. It also unifies the access methods. The same methods are used to access a remote service as are used to access a local service. This is useful should a remote service become available that is in some way superior to a corresponding local service. An application using the local service could switch to the remote service and use it just like the local service.","A major benefit of using services is the flexibility derived from the abstraction of the functionality performed by the service. Every service comprises two basic components: the service interface and the service implementation. The service interface comprises details concerning the methods and variables that the service exposes in order for some service-requesting entity, such as an application or another service, to make use of the service. The service implementation comprises details concerning the implementation of these methods as well as any additional, internal methods. In order to use the service, only the interface need be known. The details of the implementation are hidden and of no interest to the using entity. This allows the implementation to change without impacting the using entity (so long as the interface is preserved).","In a distributed wireless information appliance system , such as that disclosed herein, a rendezvous mechanism is required to allow services to advertise themselves and to enable potential service-using entities to locate them. The service framework provides such a mechanism. The service framework is a facilitator that provides a standard, simple way for services to make themselves available and for service-using entities to locate the services that they are interested in. It provides an organization or structure for services that results in a unified and consistent view of the services.","For example, the details of obtaining navigation information from a gas station kiosk versus an Internet navigation server via a cellular data link when on the highway will be very different. The application does not have to concern itself with these details. It is primarily interested in getting the navigation information. Implementing this functionality as a separate service rather than incorporating it in the application itself isolates the application from the details of the implementation and also provides flexibility in dealing with facilities that are similar but different. It also provides multiple applications with access to the same functionality in an efficient manner that conserves memory, communications bandwidth, and processing resources.","The service framework provides a way for services to announce their availability. Services register themselves with the service framework. Services de-register themselves when they become unavailable.","The primary way in which a service is identified and selected is based on the type of the service, i.e. the classes and interfaces that comprise the service. Services that are similar in this respect require a way to distinguish themselves from one another. This is accomplished using attribute sets. Each service may optionally specify a group of attribute set objects that further characterizes the service. An example of such an object is a service information object that specifies the service vendor, version identifier, etc. The service framework allows the service to alter these attributes while maintaining its registration.","Attributes provide a potential user with a way to refine service selection beyond just the service type. Different implementations of the same service can be distinguished from one another through the use of attributes. For example, there may be some characteristic of a service (such as cost or performance) that may be valuable to the user when selecting one service over another.","The service framework provides a way to resolve dependencies. Services may be employed by other services and not just by applications. It is possible that a circular dependency loop is formed amongst a group of services. A deadlock may arise if each service registers only after it has successfully located all services upon which it is dependent. Attributes may be used to avoid such a situation. Dependent services proceed to register themselves but include an attribute indicating the service is unavailable. This exposes the service to any other services that may be dependent on it. Once the service has located all services it is dependent on, it may alter the attribute to indicate the service is now available.","The service framework provides a way for a service-using entity, whether an application or another service, to look up a service. The service of interest is described in terms of its type and possibly also attribute set values. On a successful match, the service framework provides the caller with an object containing a reference to the service object. The caller can invoke the service via this object.","The service framework provides a synchronization mechanism to allow services and their service-using entities to come up in any order with respect to one another. Service-using entities may register for asynchronous notification of service events. Such events may be used to inform the client of a service becoming available, becoming unavailable or changing in some way.","According to one embodiment, the service framework includes a service registry, a local service lookup function, and a remote service lookup function. The local and remote lookup functions also include an asynchronous notification function. Although the architecture is symmetrical, the normal behavior is asymmetrical. In normal operation, the mobile client plays more of a master role with the servers acting like slaves. Also, local services can be designated as \u201cprivate\u201d, making them invisible to entities off the client platform.","The service registries are repositories for local services. Facilities are provided to add services to, remove services from, and alter services within the registry. Support of basic life-cycle management functions is provided. These can be used by services to provide a hot upgrade capability. The old version and the upgrade are gracefully switched after the internal state is transferred, completely transparently to the subscribing services and applications.","From the perspective of a service consumer, local and remote services are located and used in an identical manner. The consumer employs a single lookup facility that consolidates a potentially large number of remote lookup services under it. Remote services are represented by a small local proxy (also referred to herein as the \u201cremote service frontend\u201d or \u201cremote service proxy\u201d). This proxy is installed on the client platform through a secure provisioning mechanism. This obviates the need to dynamically load code in the field. This proxy becomes aware of the availability of the remote service and, after establishing communications with the remote service, it registers itself as the service. Service-using entities on the client platform wishing to make use of the service do so through the proxy and are unaware of the existence of the remote component.","Local proxies representing remote services are provided with additional capabilities not available to normal services or service consumers. These facilities provide access to remote lookup services and allow the proxy to locate its remote counterpart. These lookups are performed just-in-time so as to minimize the caching of remote service information locally. Proxies can request asynchronous notification of a remote service becoming available. Such requests are resolved as a batch when a remote lookup service becomes available to reduce the demands on the communications medium.","Remote services inherit all attributes associated with its lookup service. This supports a hierarchical organization of services that is useful in constraining lookups.","Language independence is achieved by implementing the underlying remote service support using a language independent service location technology. The local proxies are able to locate their remote counterpart in a language independent fashion but still present a local, Java\u2122-based view of the service.","The system imposes a set of mandatory methods to be implemented by all services. These include methods to support life-cycle management functions.","Overall, the service framework architecture supports security, performance, and ease of use.","Since, in one embodiment, the present invention is implemented in a vehicle-based information appliance, such appliance needs to be as reliable as a car radio. In addition, security is of utmost concern. The suppliers of automotive original equipment manufacture (OEM) equipment typically prohibit the downloading of software onto a vehicle-based information appliance. Any software to be installed on the customer platform must first be certified. Even software that has passed certification can only be installed on the platform by an authorized installer. These restrictions preclude the dynamic downloading of service proxies as is done by prior art connection technologies, such as the Jini\u2122 connection technology.","The service framework addresses this through the use of distributed remote services. Every remote service comprises two portions: a frontend portion and a backend portion. The service frontend or local proxy is installed on the client platform. The service backend resides on the server providing the service. The proxy can request asynchronous notification of a remote service becoming available. The service framework only looks for the service backend when the proxy has requested the service. When the service frontend discovers the service backend via the service framework, the two halves effectively coalesce, resulting in a fully formed service that is made available to service-using entities. Service-using entities invoke the service through the service frontend, which communicates with the service backend to carry out the service. No code is downloaded to accomplish this. No effort is made to locate the remote service until a request to do so is made by the service frontend (i.e. the local proxy).","Since all remote services are represented by a local service frontend, loss of communications with the service backend due to a fault or mobility can be detected by the service frontend. The service frontend can respond by de-registering the service. This obviates the need for a leasing mechanism such as is provided by the known Jini\u2122 connection technology and simplifies the job of a service writer.","Also in the interest of security, the service framework supports an asymmetrical view of services. Local services may be tagged as being \u201cprivate\u201d to prevent their advertisement to external lookup servers.","The service framework also handles remote services in a manner that conserves memory and reduces the load on the wireless communications pipe. Whereas, the Jini\u2122 connection technology suggests that services register themselves with all lookup servers belonging to the same group irrespective of demand for the service, this could overwhelm an information appliance both in terms of memory usage and communications traffic. The service framework does not over-populate its local registry with entries representing all available remote services. Instead, it performs just-in-time lookups by invoking the remote lookup service itself on an as needed basis. Successful lookups return information that is required to communicate with the remote service. This information is propagated to the interested entities by the service framework but is not otherwise cached. Memory utilization is minimized, and the bandwidth is used efficiently, since all of the traffic is demand driven.","In the interest of simplicity, the service framework presents all services, whether local or remote, as local services to the application. The service framework provides a single consolidated lookup service that can be used by applications to locate any service. Any remote lookup services that become available are handled internally by the service framework and are not exposed to applications.","Remote service frontends, however, are aware of the local\/remote distinction and are provided with a special interface into the service framework to support the discovery of the remote service backends. This interface is hidden from applications.","The service framework requires that all services implement a basic interface. This interface declares a number of mandatory methods that support functions such as life-cycle management.","Services may invoke other services. If a service is implemented to act solely as an aid to other services, it may be tagged as being \u201chidden\u201d. The presence of such \u201chidden\u201d services is obscured from applications. They are located only by explicitly specifying that \u201chidden\u201d services be included in the lookup.",{"@attributes":{"id":"p-0140","num":"0144"},"figref":"FIG. 7","b":["235","250","252","254","256","260","261","263","264","270","272","273","250","250","250"]},"As mentioned above, services typically comprise two parts: an interface to the service and an implementation of the service. These are packaged as two distinct things. The implementation of the service can be changed without affecting the interface.","The service event notification registry  is a data object within the service framework in which notification requests are stored. Notification requests can originate from services as well as applications. Notification requests include the type of service (using one or more Java\u2122 classes defining the service interface of interest, e.g. position devices, network access devices, etc.), a reference to the entity (e.g. application or service) that issued this service request, the service events of interest (e.g. match, no match, change), and optionally attributes. If an application says \u201ctell me when a service XYZ becomes available\u201d, a notification request is stored in service event notification registry . This applies to both local and distributed (remote) services. When a local service (not shown) or a service frontend  registers, unregisters, or alters its attributes with the service framework , the service framework  will look at the service event notification registry  to determine whether a notification request for this service has been registered as requested by a service-requesting entity, such as application . If there's a match, the event delivery daemon  is invoked to dispatch the event to the entity, such as application , interested in that service.","Remote service event notification registry  is analogous to service event notification registry , but it only deals with the backend of a distributed service. When a service frontend  (also referred to herein as a \u201clocal proxy\u201d or \u201cremote service proxy\u201d and discussed in greater detail below in the section entitled \u201cRemote Service Discovery and Connection\u201d) puts in a request for a remote service, that request is stored in remote service event notification registry . Remote service event notification registry  contains similar information to the service event notification registry , but remote service event notification registry  only contains information relating to remote service backends.","Proximity daemon  is interested in communications links being completed or terminated. The connection manager service  comprises a proximity-detecting program module that sends a notification of a communications interface coming up or going down to the proximity daemon . When an interface comes up, the proximity daemon  creates an instance of the remote lookup service frontend, such as remote lookup service frontend , , or  and informs it of the connection details.","Assuming in this case that remote lookup service frontend  has been created, it tries to communicate with its corresponding remote lookup service backend. The remote lookup service frontend searches for a remote lookup service backend by broadcasting or multicasting for a response from a listening remote lookup service backend.","If it locates its remote lookup service backend, and if the remote lookup service frontend determines that it is compatible with the remote lookup service backend, the remote lookup service frontend notifies the remote lookup daemon . There is one remote lookup daemon , and it can handle multiple remote lookup service frontends such as remote lookup service frontends -.","Remote lookup daemon  performs a lookup on any notification requests pending in the remote service event notification registry , batching them within the remote lookup daemon , and it sends them to the remote lookup service frontends - that found a compatible remote lookup service backend. The remote lookup service frontends - pass the information across the interface to the remote lookup service backend, which looks for a service backend in a backend service registry on the remote communications node. The remote lookup service backend replies with each of the requests, whether it found a suitable match or not. For matches, the remote lookup service backend also obtains the parameters necessary for the service frontend to communicate with the service backend.","The responses, including the parameters for any matches, are delivered to the remote lookup daemon  via the remote lookup service frontend. If a match is found, the remote lookup daemon  tells the remote service event notification registry  to dispatch the match (i.e. which entry matched) to the event delivery daemon , and from there a dispatch is sent to a service frontend, such as service frontend .","The listener extracts the parameters and establishes a connection to the remote service backend. The remote service frontend and remote service backend communicate to determine whether they are compatible. If so, the remote service frontend registers the combined service (i.e. remote service frontend and remote service backend) as a remote service with the service registry  of service framework . This registration is for the distributed or remote service.","The service framework  checks the service event notification registry  to see if there are any pending requests for this particular service, and if it finds one, an event is dispatched by the event delivery daemon  to the requestor, such as application , informing it of the availability of the service. The application  can then invoke the service, whereupon the remote service frontend communicates with the remote service backend to implement the service.","The operation of one embodiment of service framework  will now be explained in terms of how a service-requesting entity, such as application  requests and locates a remote service. In this scenario, an application  attempts to locate a point of interest (POI) service, which is assumed to be a remote service. The order in which the actions are presented is not critical.","Before a service or application can use the service framework , it must obtain a reference to the service framework . This is done through a static method. This method provides an object that implements the external interface  to the service framework. This interface is used to perform service lookups, register, unregister, and alter services, and to register and cancel service notification requests.","The application  constructs a template describing the service it is interested in, e.g. the POI service. This template comprises an array of classes and interfaces to implement the service, plus an optional array of attribute sets that further describe the service. The template is passed via arc  to external interface  and into the service framework  which internally examines the service registry  for a matching service. In the current example, after the service registry  is examined, it returns a null indicating a service matching the template was not found.","Upon learning that the service was not found, the application registers a request to be notified of the service's availability. The same template is passed via arc  and external interface  into the service framework , this time requesting notification. In addition, a service event listener and a transition mask are supplied within the service framework . The listener specifies the method to be invoked when the event occurs. The transition mask controls the match semantics and, in this case, is set to generate an event when a match is made. The service framework  caches this request in its service event notification registry , and a registration object is returned to the application . This object can be used subsequently to cancel the request.","The individual remote service frontends go through a similar sequence attempting to locate their respective remote service backends. These services use a different service framework interface from the one used by the application. They use the portion of the service framework interface supporting remote services . Each remote service frontend performs a lookup via arc  through interface  to remote lookup daemon , which looks for a corresponding remote service backend. Since, assuming for the current example, there are no remote lookup services in proximity at this time, all of these lookups fail and return null.","As was done by the application, the remote service frontends then register requests to be notified of the remote service backends' availability. The manner in which this is done can be identical to that followed by the service-requesting entity in registering a notification request in the service event notification registry . However, in this case it results in a request via arc  through interface  to the service framework , which caches the request in its remote service event notification registry .","At some point in time, the client platform  () of user device  () comes in proximity of a place containing remote services, such as a local node , and a short-range wireless communications connection or link is established between the local node  and the client platform . This causes the proximity daemon  of the service framework  to be notified. The proximity daemon  is an internal component of the service framework  that is created during startup. It requests to be notified of the establishment of a connection on any platform communications interface. This request is serviced by a component external to the service framework , i.e., the connection manager service .","When the proximity daemon  receives notification of a new connection, it instantiates a remote lookup service frontend, such as one of remote lookup service frontends -, and passes it the particulars of the connection. This remote lookup service frontend - differs from other remote service frontends in that it does not use the service framework  to locate its remote lookup service backend. Rather it sends out either a multicast or broadcast soliciting a response from a listening remote lookup service backend. If there is no response, retries are sent at periodic intervals. These continue until the remote lookup service frontend is instructed by the proximity daemon  to exit, e.g., if the platform moves out of range of the local node .","If, however, a response is received, the remote lookup service frontend and remote lookup service backend exchange parameters and verify that they are compatible with one another. If so, the distributed remote lookup service frontend - is fully formed and is registered via arc  through interface  with the remote lookup daemon .","The remote lookup daemon  is another internal component of the service framework . It is responsible for dispatching remote lookup requests to whatever remote lookup services happen to be available.","On receipt of the remote lookup service registration, the remote lookup daemon  sets out to see if it can resolve any of the pending notification requests for remote services. The remote lookup daemon  accesses the remote service event notification registry  containing these requests. The remote lookup daemon  delivers these to the remote lookup service frontend -. The remote lookup service frontend - asks a remote lookup service backend on the remote server to perform the actual lookup by looking for the remote service backend on the remote server, e.g. in a backend service registry on the remote server.","For each lookup request received by the remote lookup service backend, it determines whether the specified service exists in its registry of service backends. If it does, the parameters required to establish communication between the remote service frontend and remote service backend are returned to the requestor. In the current example, the point of interest (POI) service backend is found, and the parameters pertinent to this service are returned to the remote lookup daemon  via the remote lookup service frontend.","On receipt of the successful lookup response, including transfer of parameters, the remote lookup daemon  generates an event to notify the POI service frontend of the existence of its remote counterpart. This event carries the parameters that the POI service frontend will need to communicate with the POI service backend.","The listener (within the remote service event notification registry ), that the POI service frontend specified when it registered the notification request, is invoked and is passed the event. The listener extracts communication parameters from the event and uses these to establish a connection to the POI service backend. If the POI service backend is determined to be compatible with the POI service frontend, the POI service is fully formed. The POI service frontend registers the POI service via arc  with the service registry  of service framework . This results in the POI service being added to the service registry .","On this registration, the service framework  examines its service event notification registry  for notification requests that are satisfied by this registration. The listener associated with the application waiting for the POI service is invoked and sent an event announcing the availability of the service. This event provides the application with a reference to an object implementing the POI service interface, namely the POI service frontend.","The application then invokes the POI service methods, and the POI service frontend communicates with the POI service backend to carry out the requests.","The service framework provides a mechanism by which remote services can be discovered and connected. Remote services can register with the service framework through a remote service frontend  (FIG. ), also referred to herein as a \u201clocal proxy\u201d or a \u201cremote service proxy\u201d. Remote services are also unregistered by the remote service frontend , when their remote service backends become unavailable. Thus, the service framework provides a way for client-platform based service-using entities, whether an application or another service, to discover and connect to a service, whether it is a local service or a remote service.","More specifically, when a service is requested from a remote server, a remote lookup service entity on the client platform, known as a remote lookup service frontend, attempts to find its counterpart on the remote server, known as a remote lookup service backend. If a remote lookup service backend exists, this service becomes available to the service framework and can be employed to perform lookups for remote service backends.","If the remote lookup service backend finds a requested service in its server-based registry of remote service backends, it returns the parameters to the client-side remote service frontend that are needed to establish communications with the server-based remote service backend.","If the remote service frontend determines that it is compatible with the remote service backend, the remote service frontend registers itself as a remote service with the service framework on the client side.","This will be explained in further detail regarding  below. However, first a local service-locating operation will be discussed with reference to FIG. .",{"@attributes":{"id":"p-0172","num":"0176"},"figref":"FIG. 8","b":"235"},"In  three entities are depicted: an application , a service ABC  that application  is interested in and is requesting, and service framework . In this case service ABC happens to be a local service, i.e. one that is resident on the client communications platform.","In arc , application  puts together an object describing the service ABC that application  is interested in, and it passes that object into service framework  to have service framework  perform a lookup.","In arc , service framework  responds to application  either that it found service ABC or it didn't find it. However, for the purposes of this illustration, it is assumed that service framework  hasn't yet found service ABC.","In arc , application  sends a notification request to service framework  to notify application  when service ABC comes into existence.","In arc , after the passage of some time, it is assumed that service ABC is instantiated.","In arc , service ABC is registered with service framework . As part of that registration, service framework  determines that this service ABC satisfies the service request from application .","In arc , service framework  notifies application  about service ABC. The notification comprises all of the information that application  needs in order to utilize the service.","In arc , application  invokes service ABC.",{"@attributes":{"id":"p-0181","num":"0185"},"figref":["FIG. 9","FIG. 8"],"b":["235","235"]},"In , the portion above dashed arrows  contains entities located on the client platform, and the portion below dashed double-headed arrows  contains entities located on a remote server. The dashed double-headed arrows  extending between the client and server portions represent the fact that the client and server are not currently in proximity to each other.","In , operations represented by arcs - can be performed in various orders, and they are not necessarily limited to any sequence that is related to the choice of reference numbers.","In arc , application  puts together an object describing the service XYZ that application  is interested in, and it passes that object into service framework  to have service framework  perform a lookup.","In arc , service framework  responds to application  either that it found service XYZ or it didn't find it. However, for the purposes of this illustration, it is assumed that service framework  hasn't yet found service XYZ.","In arc , application  sends a notification request to service framework  to notify application  when service XYZ comes into existence.","In arc , service framework  performs an implicit request for notification of a remote lookup service.","In arc , the remote service frontend XYZ  requests notification of the remote service backend.","In arc , the service framework  requests notification of any interface state changes observed by the connection manager service .","Meanwhile, on the remote server, in arc  the remote service XYZ backend  registers itself with the remote lookup service backend . This registration can be made, for example, into a backend service registry on the remote server.",{"@attributes":{"id":"p-0191","num":"0195"},"figref":"FIG. 10","b":"235"},"As represented by arrow , the client platform comes into proximity to the remote server.","In arc , the connection manager service  becomes aware of the proximity of the client platform to the remote server, and it notifies the service framework  of the change of state to \u201cconnected\u201d.","In arc , the service framework  instantiates an instance of the remote lookup service frontend .","As represented by double-headed arrow , the remote lookup service frontend  attempts to communicate with its counterpart (remote lookup service backend ).","Assuming the interchange of parameters is successful, in arc  the remote lookup service frontend  registers itself with the service framework . This registration represents the remote lookup service frontend and service backend as one unit.","In arc , as part of the registration, the service framework  invokes this new remote lookup service backend  to search for any pending remote services, in this example, the remote service XYZ backend  of the desired service XYZ. In this example, it is assumed that remote service XYZ backend  is found, and that the parameters necessary for remote service XYZ frontend  to communicate with remote service XYZ backend  are obtained by remote lookup service frontend .","In arc , also as a part of the registration, the remote lookup service frontend  returns (to the service framework ) the parameters needed by the remote service XYZ frontend , so that remote service XYZ frontend  can talk to remote service XYZ backend .","In arc , the service framework  proceeds to notify the remote service XYZ frontend  that the remote service XYZ backend  has been found. The parameters are passed along with this notification.","As represented by double-headed arrow , the remote service XYZ frontend  communicates with the remote service XYZ backend  over a bidirectional wireless link using the parameters. The parameters can include the address of remote service XYZ backend  (e.g. Internet address and port number), version information (if incompatible, the service discovery operation could be terminated), possibly attributes (e.g. if a printer, the capabilities\u2014color, resolution, speed, etc), and so forth.","In arc , assuming the communication was successful, the remote service XYZ frontend  registers the combination service (i.e. remote service XYZ frontend  plus remote service XYZ backend ) with the service framework . As part of that registration, the service framework  determines that there is an application  that has a request pending for this particular service XYZ.","In arc , the service framework  notifies the application  about service XYZ. That notification provides the application  with all of the information it needs to make use of the service XYZ.","In arc , the application  invokes the service XYZ. The remote service XYZ frontend  communicates with remote service XYZ backend  to perform the requested service XYZ.","From the foregoing description of remote service discovery and connection, it will be seen that application  is minimally involved in discovering and connecting with remote service XYZ. In arc  (FIG. ), it requested notification from service framework  of service XYZ; in arc  it was informed of service XYZ; and in arc  it invoked service XYZ.","In , the service XYZ represented by the combination of remote service XYZ frontend  plus remote service XYZ backend  can be viewed as a distributed service that has both a local and a remote component. The local component acts as a proxy for the remote component. The service represented by connection manager service  is viewed as a local service.","In , the operations represented by the arcs are not necessarily ordered in any particular way, and they could be performed in a different sequence from that shown.","The following is a high level description of the service framework APIs and their constituent classes and interfaces.","The service framework envisions an environment of applications and services. In this context, an application is a UI-based presentation of a service or a set of services to a human user. A service is a reusable application component. It may originate as part of an application but migrate to a service if multiple applications have a common need it satisfies.","The service framework API set provides several functions. First, it provides services with a means by which they can advertise themselves to potential service-using entities (applications and other services). This is done through a registration process.","Secondly, it provides applications and services with a mechanism to search for available services. It also allows applications and services to request notification should a service meeting certain specified criteria become available in the future.","Thirdly, it provides a uniform mechanism for accessing both remote and local services.","The service framework APIs apply to the interface between applications\/services and the service framework to register and discover local and remote services. The remote services that are supported require a local proxy or service frontend.","The APIs provide application and service developers with a simple yet powerful set of APIs to advertise and locate services.","The following examples typify several scenarios that are implemented by the APIs.","The information appliance is configured with an address book application that provides the user with an interface to the various address books that may be present on the client. In addition to the permanent resident address book, transitory address books may be created and populated from accommodated devices such as PDAs, wireless phones, personal computers, etc. The application can present the contents of these address books to the user as individual address books or as a single merged virtual address book.","During system startup, the service representing the resident address book is registered. Although this service is created very early in the startup sequence, it is able to locate the service registry  () and successfully register itself with it.","The address book application starts up and issues a query to the service registry to determine what address book services are currently available. It is informed of a single service\u2014the resident address book. Upon examination of the service's attributes, the application determines the service is permanent so notification of status changes is not required. The application then obtains a reference to the service in order to access its entries. This interface is used to inform the application of any additions or deletions.","In order to incorporate any address books that may become available from accommodated devices, the address book application registers a notification request with the service framework  which adds the request to the service event notification registry . This request states that the address book application be notified of any address book service registrations.","The driver powers up his PDA and begins transferring the addresses of the various sales calls he needs to make that day into the information appliance via a wireless link. The first address is received by the object exchange protocol module associated with the wireless interface being used and is recognized to be an address book object. The module learns from the discovery module in the protocol stack that the device is named \u201cJack's PDA\u201d. Since this device is registered in the information appliance's configuration, user authentication is not required. The registry is queried to see whether an address book service with a name attribute equal to \u201cJack's PDA\u201d already exists. It does not, so the object exchange module creates the service with the single entry received so far and registers it. This service also has an attribute indicating it is a transient service.","The address book application receives notification about the new address book. It obtains a reference to the service and incorporates its address book entries for presentation to the user. Although the implementation of this service differs from the resident address book (Use Case #1), the application interaction with it is identical due to the use of a standardized interface.","The application examines the service attributes and uses the name \u201cJack's PDA\u201d in the user interface. It also notices the transient attribute. This causes the application to request notification of when the service is no longer available.","The information appliance is configured to expire address books associated with accommodated devices after some period of time. When this time has elapsed, the \u201cJack's PDA\u201d address book service is unregistered. The address book application is\n\n","The passenger powers up her PDA to provide some additional addresses. The PDA is detected by the information appliance. Unlike the driver's PDA, this one is not registered in the information appliance configuration and requires user authentication. The address book service created to represent this device performs the authentication. Only if the authentication was successful does it register the service and allow the transfers to proceed. It is the service itself and not the service framework that is responsible for the authentication.","The passenger has a huge address book on her PDA and inadvertently initiates a transfer of its entire contents. Addresses proceed to be transferred into the information appliance until the service's storage quota is reached. Attempts by the service to store additional addresses fail. This quota is enforced by the entity responsible for the runtime management of applications and services.","The driver receives a lengthy email while on the road. Since it is getting close to lunch, the driver configures the information appliance to look for a restaurant of a specific fast food chain that has a print service. He would like to read the email hardcopy while eating. As he comes within range of a restaurant belonging to the desired chain, a lookup is performed and indicates both criteria are met. He pulls in, has his email printed, and has lunch.","Two families are driving to an amusement park together in two separate cars. Each car has an information appliance with a \u201cwalkie-talkie\u201d service and an application that supports voice communication. Since the cars are traveling close together, the information appliances are able to communicate via a wireless interface. Both devices were configured in terms of security rights prior to departure. Suddenly, an emergency rest stop situation arises in one car. The driver invokes the \u201cwalkie-talkie\u201d application to let the other car know they need to pull over. To do this, a service in one client device discovers and makes use of a service in another client device. Another car equipped with an information appliance passes them. As it passes, it joins the wireless network formed by the two original cars. The passing car attempts to perform lookups on the two other cars but doesn't find anything. Services are not advertised to it.","The information appliance is configured to present a consolidated address book to the user. In this configuration, an address book service that aggregates various address books registers itself with the service framework . It also registers a notification request with the service framework to be notified when a hidden address book service registers. The resident address book service and address books associated with accommodated devices register with the service framework as hidden address book services. The consolidating address book service is informed of these services and proceeds to incorporate their entries into the consolidated address book. When the address book application performs a lookup via the service framework for address book services, it is informed about one address book service: the consolidator. It is not informed about the two hidden services.","The service framework  provides the following functions that satisfy the above scenarios or \u201cuse cases\u201d.","The service framework allows a service to register itself.","The service framework allows a service to unregister itself when it becomes unavailable.","The service framework allows applications\/services to search for a currently registered service.","The service framework allows applications\/services to request notification of future service registrations.","The service framework allows applications\/services to request notification of service attribute changes and registration state changes.","The service framework allows applications\/services to cancel a notification request.","The service framework supports service attributes that allow a service search to be refined.","The service framework supports examination of service attributes.","The service framework is available and locatable by all applications\/services.","Services are restricted to the same stringent security policies imposed by the application manager module .","User authentication and authorization need not be requirements of the service framework.","Services are derived from published interfaces when available in order to de-couple the dependency on specific service implementation.","Services and service stubs are resident on the client platform, and they are typically not downloaded.","The service framework detects terminated communications links, and it unregisters services that were solely provided over such communications links.","The service framework is capable of dynamically discovering services external to the client device and using these services via a pre-loaded local proxy.","The service framework is capable of selectively advertising its services to external clients.","The service framework provides a way to disable advertisement of its services to external clients by designating a service as \u201cprivate\u201d or not.","Remote services inherit the attributes of their lookup service.","The service framework provides a way to obscure or hide services from local clients by designating a service as \u201chidden\u201d or not.","The following optional functions of service framework  deal with dynamically loading code onto the client in an alternative embodiment of the invention.","The service framework could dynamically discover and download services that are external to the client device, e.g. on external communications nodes.","The service framework could provide a suitable mechanism to enable or disable the function of dynamic discovery and downloading of services from external communications nodes.","The service framework  comprises two main components: a ServiceFramework class and an object implementing the ServiceRegistrar interface. The ServiceFramework class defines static methods used by the ServiceRegistrar implementation object to make itself known and by service-using entities to obtain this reference. The ServiceRegistrar object provides service registration and lookup facilities.","In order to use the service framework, a service or application obtains a reference to the ServiceRegistrar object. This is done via the static method ServiceFramework.getRegistrar( ). A reference to the object is returned to the caller.","To register a service with the service framework, the service constructs a ServiceItem object and then passes it to the ServiceRegistrar object via the ServiceRegistrar.register( ) method. The ServiceItem object is composed of a ServiceID (null on initial registration), an Object implementing the interface to the service and an array of ServiceAttributeSet objects that specify the service attributes. The service is returned a ServiceRegistration object which it can use to manipulate its attributes (add, delete and modify) and also unregister the service. Services are required to unregister themselves with the service framework prior to going \u201cout of service\u201d.","Services are discovered by constructing a ServiceTemplate object and passing it to the ServiceRegistrar.lookup( ) method. This object specifies the service type and characteristics that are of interest. It comprises a ServiceID, an array of Class objects, and an array of ServiceAttributeSet objects. If a component is to be wildcarded, a null may be supplied. The caller is returned an array of ServiceItem objects that match the supplied ServiceTemplate.","Notification of service availability may also be requested. A ServiceTemplate object is passed to the Registrar.notify( ) method along with a reference to the caller's ServiceEventListener object. A ServiceEventRegistration object is returned to the caller. This object can be used to cancel the notification request. When services meeting the criteria specified in the template become available, the notify( ) method in the supplied ServiceEventListener object is invoked and passed a ServiceEvent object.","The preceding description was presented in terms of local services. From the perspective of an entity requesting a service, remote services are located and accessed in exactly the same way. This is accomplished by employing a local proxy for the actual remote service. Remote services can be considered to comprise two components: a client-side or frontend portion (the proxy), and the server-side or backend portion (the remote service). Each proxy is responsible for discovering and linking up with its service backend. Once this is done, the proxy registers itself with the service framework.","The service is made available to service-using entities and has the appearance of a local service. The fact that the proxy needs to communicate with its service backend to carry out service functions is hidden from the service-using entity. When the service frontend loses contact with the service backend, e.g. the communications link terminates, it unregisters itself from the service framework.","Remote service backends are discovered by constructing a ServiceTemplate object and passing it to the ServiceRegistrar.remoteLookup( ) method. This object specifies the service type and characteristics of the remote service backend that are of interest. It comprises a null ServiceID, an array of Class objects, and an array of ServiceAttributeSet objects. The service framework performs the lookup using any available remote lookup services and returns either a RemoteServiceItem object or a null.","Notification of remote service backend availability may also be requested. A ServiceTemplate object is passed to the Registrar.remoteNotify( ) method along with a reference to the caller's ServiceEventListener object. A ServiceEventRegistration object is returned to the caller. This object can be used at a later time to cancel the notification request.","When services meeting the criteria specified in the template become available, the notify( ) method in the supplied RemoteServiceEventListener object is invoked and passed a RemoteServiceEvent object.","The following are class\/interface descriptions applicable to the service framework as implemented in one embodiment:","Service\u2014an interface that is implemented by service objects.","HiddenService\u2014an extension of the Service interface that is implemented by services to be obscured from normal lookups.","PrivateService\u2014an extension of the Service interface that is implemented by services not wishing to be advertised externally.","ServiceAttributeSet\u2014an interface used to represent arbitrary service attributes. This is a marker interface used to group a number of typed object references.","ServiceEvent\u2014a class indicating the occurrence of an event within the service framework. It provides a reference to the ServiceItem associated with the event. The class also provides information to help identify the event source. This supports event notification by the services themselves. The class also has a reference to a \u201chandback\u201d object that may have been specified during registration. This can help to demultiplex events within the listener.","RemoteServiceEvent\u2014this class is very similar to the ServiceEvent class with the exception that it provides access to a RemoteServiceItem rather than a ServiceItem.","ServiceEventListener\u2014an interface to an object to be notified of the occurrence of an event within the service framework. This object is registered with the service framework. When an event meeting criteria specified during registration occurs, a ServiceEvent is passed to the object via its notify( ) method.","ServiceEventRegistration\u2014a class returned when notification of service availability is requested. It contains a reference to the event source and the identifier of the event for which notification was requested.","ServiceFramework\u2014a class used to obtain a reference to an object implementing the ServiceRegistrar interface. It comprises the static method getServiceRegistrar( ).","ServiceID\u2014services are assigned an instance of this class during registration by the service framework. It is a unique identifier representing a particular ServiceItem instance.","ServiceItem\u2014services are registered with the service framework using instances of the ServiceItem class. It contains a ServiceID, a Service object implementing the interface to the service, and an optional array of ServiceAttributeSets specifying the service attributes.","RemoteServiceItem\u2014A remote service backend is represented by an instance of this class. It contains the parameters needed by the service frontend to establish communications with the service backend.","ServiceRegistrar\u2014an interface to the service framework. The object implementing this interface forms an important component of the service framework. It contains methods to register a ServiceItem and to look up ServiceItems that meet a specified set of criteria contained in a ServiceTemplate. There is also a method to request notification of events such as the registration of a service or a change in a service. This method is supplied with a ServiceTemplate, a ServiceEventListener, and an optional \u201chandback\u201d object to be passed to the listener in the ServiceEvent.","ServiceRegistration\u2014an interface returned in response to a service registration. It contains the ServiceID that was assigned to the service. It contains methods to modify the service's attributes as well as a method to unregister the service.","ServiceTemplate\u2014a class that specifies the match criteria pertaining to a service lookup. It comprises a ServiceID, an array of class types, and an array of ServiceAttributeSets.","ServiceException\u2014the class represents an exception that occurred within the service framework.","ServiceUnregisteredException\u2014a service method was invoked after the service has unregistered.","UnknownServiceEventException\u2014a listener received an event that it didn't recognize.","ServiceName\u2014a ServiceAttributeSet representing the service name.","ServiceStatus\u2014a ServiceAttributeSet representing the service status (i.e. availability).","The particular APIs, Class\/Interface Descriptions, functions, and operations relating to the computer programs described herein are merely illustrative of one or more embodiments of the invention, and other implementations will be apparent to those of ordinary skill in the art.",{"@attributes":{"id":"p-0283","num":"0288"},"figref":"FIGS. 11 and 12"},"In , a service-requesting entity (e.g. an application or another service) on a communications platform  () requests a service that happens to be a remote service. The remote service comprises a remote service frontend residing on the communications platform and a remote service backend residing on a remote communications node  (FIG. ). The remote service is represented on the communications platform only by a proxy, i.e., the remote service frontend.","In , the remote service frontend registers a notification request for the remote service backend in a remote service event notification registry  (FIG. ).","In , a determination is made whether the connection manager service  () is indicating that the communications link between the communications platform and the remote communications node is up. If so, the method proceeds to ; else it goes to .","In , the method continues to check whether the connection manager service  has indicated that the communications link is up yet.","In , the service framework locates the remote service backend on the remote communications node .","In , the service framework  () notifies the remote service frontend that the remote service backend is on the remote communications node . This can be done by remote lookup daemon  (FIG. ).","In , the remote service frontend communicates with the remote service backend, e.g. exchanging parameters.","In , the remote service frontend registers the remote service in the service registry  (FIG. ).","In , the service-requesting entity is notified that the remote service is registered in the service registry  (FIG. ). This notification is via an event generated by event delivery daemon  (FIG. ).","In , a suitable program module associated with the service-requesting entity listens for an event notification from event delivery daemon  and then invokes the remote service. To the service-requesting entity, the remote service appears indistinguishable from a local service.","In , a determination is made whether the connection manager service  is indicating that the communications link between the communications platform  and the remote communications node  is inactive or down. If so, the method proceeds to ; else, it goes to .","In , the remote service remains available to this service-requesting entity, as well as to any other service-requesting entities that have subsequently requested it since it became available on the communications platform .","In , the remote service frontend unregisters the remote service in the service registry .","The various elements illustrated in  are merely representational and are not drawn to scale. Certain proportions thereof may be exaggerated, while others may be minimized. The drawings are intended to illustrate various implementations of the invention that can be understood and appropriately carried out by those of ordinary skill in the art. Any arrangement, which is calculated to achieve the same purpose, may be substituted for the specific embodiments shown.","The sequences and methods shown and described herein can be carried out in a different order than those described. It will also be understood that while certain flowcharts in  have an \u201cEnd\u201d block, in general the methods that they depict are continuously performed. The particular sequences, functions, and operations depicted in  are merely illustrative of one or more embodiments of the invention, and other implementations will be apparent to those of ordinary skill in the art.","What have been described are methods and apparatus for providing a service framework within a wireless information appliance system that provides a standard, consistent, simplified way for services to make themselves available and for service-using entities to locate and connect with the services of interest to them.","The methods and apparatus of the present invention support the identification and connection of services to which user equipment can be readily coupled without unduly expending power, memory, bandwidth, and other resources available to the user equipment.","The present invention provides an innovative way to implement dynamic networking for managing distributed and transient services. It does so in a manner that offers a high degree of security. It completely eliminates the dynamic downloading of the service code and its execution in the client. The asymmetric lookup\/advertising\/discovery of services increases client privacy.","The implementing platform is extremely light-weight due to eliminating the downloading of service code, eliminating object serialization and remote method invocation (RMI), performing asymmetric lookup\/advertising\/discovery of services, performing just-in-time lookups of required services, and consolidating lookup activities by the local lookup services.","Support is provided for life-cycle management of the part of the distributed service on the client, including hot-upgrades, in the service interface.","Communication is minimized between the wireless client and server for administrative functions by eliminating downloading of service code, eliminating object serialization and RMI, performing just-in-time lookups, and batching lookup requests.","The consolidation of similar services is performed through the use of the \u201chidden\u201d service feature.","The inheritance of attributes supports a hierarchical service tree that is useful for constraining lookup.","The implementation of the invention is language-independent, both on the client and on the server.","The present invention is conserving of application and platform resources, particularly in mobile platforms. The present invention makes all services appear the same to applications and platform resources, irrespective of where the services reside. It also insulates applications from the complexities of interacting with remote servers to connect with remote services through the use of a local proxy that represents a remote service as a local service.","The methods and apparatus described herein are quite versatile and can be implemented in any type of information appliance system. As described herein, the advantages of the present invention will be apparent to those of skill in the art and will provide improved methods and apparatus for locating, connecting with, and utilizing wireless services.","While the invention has been described in terms of specific examples, it is evident that many alternatives and variations will be apparent to those skilled in the art based on the description herein, and it is intended to include such variations and alternatives in the claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention is pointed out with particularity in the appended claims. However, other features of the invention will become more apparent and the invention will be best understood by referring to the following detailed description in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0014","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0023"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0024"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0025"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0026"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0023","num":"0027"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0024","num":"0028"},"figref":"FIGS. 11 and 12"}]},"DETDESC":[{},{}]}
