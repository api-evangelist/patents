---
title: Method, system, and program for mapping objects in different language formats
abstract: Disclosed is a system, method, and program for translating source code statements to executable code. A source code statement including an application program interface (API) that is a member of a set of standard APIs calling an object in a first format is processed. A mapping is used to determine at least one user interface API corresponding to the determined standard API. The user interface API provides an implementation of the standard APIs in a user interface program. A mapping is determined of the called object to a corresponding object in a second format utilized by the user interface program is accessed. The source code statement comprising the standard API calling the object in the first format is converted to the determined user interface API calling the corresponding object in the second format. The user interface program is capable of executing the user interface API calling the corresponding object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06957439&OS=06957439&RS=06957439
owner: International Business Machines Corporation
number: 06957439
owner_city: Armonk
owner_country: US
publication_date: 20000509
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE PREFERRED EMBODIMENTS","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","Using the W3C Interface to Manipulate the DOM","Alternative Embodiments and Conclusions"],"p":["This application is related to the following co-pending and commonly-assigned patent applications, all of which are filed on the same date herewith, and all of which are incorporated herein by reference in their entirety:\n\n","1. Field of the Invention","Preferred embodiments provide a method, system, and program for using a set of standard application program interface (API) that are adopted as an industry standard, such as the W3C DOM API interfaces, in a cross-platform application program, such as a Java application program.","2. Description of the Related Art","One of the purposes of the Java** programming language is to allow programmers to develop applications that can execute across operating system platforms. The Java language accomplishes the cross-platform implementation by providing an added layer of execution between the underlying operating system and programs written in the Java computer language. The Java Platform converts Java source code (.Java files) to bytecodes (.class files), which are machine independent representations of a Java class. Thus, the same bytecodes would be created for all operating system platforms. The bytecodes are then inputted to a Java Virtual Machine program that converts the byte codes to the object code in the native machine language of the operating system on which the Java Virtual Machine is installed. There is a platform-specific Java Virtual Machine program for each platform on which Java programs can execute.","** Java and JDBC are trademarks of Sun Microsystems, Inc., Microsoft is a registered trademark of Microsoft Corporation; OS\/2 is a registered trademark of International Business Machines Corporation; Netscape is a registered trademark and Netscape Communicator, Netscape Navigator, Mozilla are trademarks of Netscape Communications Corporation. ","All Java programs utilize Java specific toolkits to implement a graphical user interface for Java, which is based on the Java look-and-feel. The purported goal of the Java look-and-feel is to provide a distinctive platform-independent appearance and standard behavior. To implement the Java look-and-feel, Sun Microsystems, Inc. provides the Abstract Window Toolkit (AWT) and Swing components which are classes that implement a Java graphical user interface (GUT). One drawback to implementing the GUI in the Java look-and-feel is that the Java look-and-feel is significantly different from the look-and-feel implemented in the native operating system, such as Windows, OS\/2, etc.** Thus, users running a Java program on a particular operating system platform will have to use the Java GUI interface which differs from the operating system GUI interface to which they are accustomed. These differences can discourage users from adopting Java applications, especially when other application programs, such as those implemented in C++, all use the same native API function calls to implement the native operating system GUI components. Sun Microsystems, Inc. addresses this problem by continually trying to incorporate elements of common operating system platforms into the Java look-and-feel. However, this approach consistently leaves the Java look-and-feel a step behind what is currently implemented in the operating system platform.","** Java and JDBC are trademarks of Sun Microsystems, Inc., Microsoft is a registered trademark of Microsoft Corporation; OS\/2 is a registered trademark of International Business Machines Corporation; Netscape is a registered trademark and Netscape Communicator, Netscape Navigator, Mozilla are trademarks of Netscape Communications Corporation. ","Another drawback with the Java GUI interface is that the Java interface must be converted to Java bytecodes and then to native operating system commands using the Java Virtual Machine layer. This extra layer of compilation for the user interface slows down the execution of Java programs on the native operating system. Non-java programs that use the native operating system API function calls to implement the GUI do not have this problem as they directly call the native operating system API functions that implement the GUI and do not need an additional layer of conversion as in the case of Java.","Another drawback with Java is that Java application programs, including Java Applets that often execute within a Java enabled HTML web browser, are confined to executing within the Java area of execution. An executing Java program cannot interact with other components and objects in the operating system. For instance, a Java applet executing within a web browser cannot access tables and data outside of the area of execution of the applet, even if such tables are in the HTML document displayed in the web browser.","To address this problem, Microsoft has provided a mechanism to allow Java applications to access the Microsoft operating system component objects, referred to as COM objects. COM objects are used to store reusable software components. A component is a reusable piece of software in binary form that can easily interface with components from different vendors. For example, a spell checking component can be used with word processing programs from different programs.","Component objects are accessed through interfaces. An interface is a strongly-typed group of semantically-related functions, also called \u201cinterface member functions.\u201d The interface is defined according to its use and behavior. A client system or process calls the interface to access the implementation of an object and requests the object's services. The interface includes member functions that act upon the object. The client maintains a pointer to the interface which is, in actuality, a pointer to an array of pointers to the object's implementations of the interface member functions.","When calling member functions, the caller would construct a COM API (application program interface) with an argument which is the pointer to the object instance itself. The interface would then access the code in the object to carry out a particular operation or set of operations. Further details of the Microsoft Corporation implementation of COM is described in the publication \u201cThe Component Object Model Specification, Draft Version 0.9\u201d (Copyright 1992-95 Microsoft Corporation), which publication is incorporated herein by reference in its entirety.","Microsoft Corporation currently provides an architecture to make Windows COM objects available to Java programs. The Microsoft Java Virtual Machine (VM) internally uses a Java-Callable Wrapper (JCW) to represent a COM object in Java. JCWs appear to Java developers as generic Java objects. JCWs are programmatically manipulated in exactly the same way as any regular Java object. The JCW contains all the information necessary for the Microsoft VM to manipulate the underlying COM object. COM objects can be used in the same manner as Java objects because the Microsoft VM exposes COM objects as Java objects. Microsoft further provides J\/Direct to access Windows API COM functions to create new instances of COM classes. J\/Direct provides classes that map COM functions to Java calls. Further details of how Microsoft provides Java applications access to COM objects are described in the publications \u201cUsing COM Objects from Java,\u201d by Chad Verbowski (Copyright Microsoft January 1999) and \u201cIntegrating Java and Com\u201d, by Chad Verbowski (Copyright Microsoft, January 1999), which publications are incorporated herein by reference in their entirety.","By using J\/Direct to expose COM objects to Java applications, J\/Direct allows the Java application to access objects outside of the area of execution of the Java application. However, Microsoft's J\/Direct system is limited to the Microsoft operating systems and Microsoft Java Virtual Machine. Microsoft's proprietary approach defeats the Java goal of allowing the application program to execute across different operating system platforms. A Java developer who writes a Java application using the J\/Direct interfaces to COM objects is limited to the Microsoft Windows platform and cannot access the COM version of objects in other operating systems, thus defeating the cross-platform goal of Java.","Thus, there is a need in the art for an improved platform independent technology to allow Java applications to access operating system components and objects outside of the area of execution of the Java program to take advantage of the objects and interfaces available in different operating system platforms.","There is also a need in the art to allow Java applications to use more commonly used graphical user interface (GUI) components, other than the GUI components offered in Java tool kits, such as AWT.","To overcome the limitations in the prior art described above, preferred embodiments disclose a method, system, and program for translating source code statements to executable code. A source code statement including an application program interface (API) that is a member of a set of standard APIs calling an object in a first format is processed. A mapping is used to determine at least one user interface API corresponding to the determined standard API. The user interface API provides an implementation of the standard APIs in a user interface program. A mapping is determined of the called object to a corresponding object in a second format utilized by the user interface program is accessed. The source code statement comprising the standard API calling the object in the first format is converted to the determined user interface API calling the corresponding object in the second format. The user interface program is capable of executing the user interface API calling the corresponding object.","In further embodiments, the user interface program executes on multiple operating system platforms thereby allowing the application program to include standard API interfaces calling objects in the first format to execute on the multiple operating system A platforms via the user interface program.","Preferred embodiments make available standard API interfaces, such as those specified in the W3C DOM specifications, for use with programs written in cross-platform languages, such as Java, to allow the application program to manipulate objects and interfaces in a user interface program, such as a Mozilla browser or Internet Explorer, that implements the standard API interfaces. This extends the Java environment by making any object accessible to the user interface program accessible to the Java application program. The preferred embodiments take advantage of the fact that many user interface programs, such as the common web browsers, implement the W3C DOM specification and API interfaces. Preferred embodiments allow objects in the application program to map to a corresponding implementation of that object in the user interface program. By providing a mapping of the W3C interfaces to the specific user interface implementation and the application program objects to the user interface objects, the preferred embodiments allow Java developers to utilize W3C standard interfaces to access objects in the user interface program to allow the Java program to use the user interface.","By making user interface objects accessible to the Java program, the Java program can implement its user interface using the interface component objects of the user interface program. This allows a Java program user interface to have the same \u201clook-and-feel\u201d as the user interface program, e.g., Internet web browser, as the Java program is ultimately using the same user interface component objects utilized by the user interface program. Because the translator programs of the preferred embodiments allow the Java application program and standard API interfaces to execute across different operating system platforms, preferred embodiments provide a mechanism for a Java program to access and manipulate user interface and operating system objects across operating system platforms","In the following description, reference is made to the accompanying drawings which form a part hereof, and which illustrate several embodiments of the present invention. It is understood that other embodiments may be utilized and structural and operational changes may be made without departing from the scope of the present invention.",{"@attributes":{"id":"p-0028","num":"0029"},"figref":"FIG. 1","b":["2","2"],"i":["a, b, c","a, b, c "]},"The DOM model is a standard interface used to define the structure of documents, particularly HTML and XML documents. In the DOM specification, the term \u201cdocument\u201d is used in the broad sense to include the components of a textual document as well as components of an application program. The DOM interface represents the document or application program as a hierarchical arrangement of nodes. All the components of an HTML or XML document, including data as well as program elements, such as the user interface elements, can be expressed as hierarchically arranged nodes. The W3C DOM specifications provide API interfaces to access, change, delete or add nodes to the DOM representation of a document, or application program. The API interfaces specified in the DOM specifications are referred to herein as \u201cW3C API interfaces.\u201d","In preferred embodiments, the mixed statement programs may incorporate the W3C API interfaces of DOM specifications, such as the DOM level 1 Core, including DOM Level 1 HTML, which provides W3C interfaces representing all of the HTML 4.0 elements, DOM Level 2 Core which comprises modifications to DOM Level 1, DOM Level 2 Cascading Style Sheets, etc. Many browsers such as Microsoft Internet Explorer version 5 and Mozilla based browsers, such as Netscape Communicator, implement the W3C DOM Level 1 HTML interface, as well as Cascading Style Sheets. In this way, developers creating mixed statement programs may utilize the W3C API interfaces as specified in the W3C specifications, such as the \u201cDocument Object Model (DOM) Level 1 Specification, Version 1.0\u201d (Oct. 1, 1999) and \u201cDocument Object Model (DOM) Level 2 Specification, Version 1.0\u201d (Dec. 10, 1999), which are incorporated herein by reference in their entirety, and which include the DOM Level 1 HTML, DOM Level 2 Core, DOM Level 2 CSS, DOM Level 2 Views and Events, DOM Level 2 HTML, DOM Level 2 Stylesheets, DOM Level 2 CSS, DOM Level 2 Traversal, etc.","After the mixed statement programs are written to include Java programming language statements as well as W3C API interface calls, the mixed statement program is processed by a bridge . The bridge  maintains an API mapping  of W3C API interfaces to the corresponding implementation of the W3C API interface in a user interface (UT) program  that implements the DOM, such as Internet Explorer, Netscape Communicator and Navigator, Mozilla, the Scalable Vector Graphics format used by Adobe Systems, Inc., or any other user interface that implements the DOM.","The user interface program  includes user interface (UI) APIs  that are used to manipulate user interface (UI) objects  that implement the elements and components of the observable user interface features produced by the user interface program . A user interface layout engine  would transform the UI APIs  and UI objects  to the native operating system objects and interfaces  on which the browser layout engine  was written to operate. For instance, Internet browsers, such as Internet Explorer and Netscape Navigator, include different layout engines for different operating systems to transform the user interface APIs  and objects  to native operating systems objects and interfaces . The browser layout engine has all the mappings to access and control the native operating system. The Mozilla browser layout engine, referred to as the Next Generation Layout (NGLayout) or Gecko layout engine, processes the API functions that implement the W3C DOM Level 0, Level 1, and Level 1 HTML, as well as cascading style sheets and other DOM standards, and generates the native operating system calls to execute the requested operation.","The bridge  API mapping  would include for each supported W3C API interface, the corresponding UI API  interface in the user interface program . In preferred embodiments, the API mapping  would map the Java class names to the unique identifiers of the user interface APIs . The user interface APIs  would in turn manipulate browser objects, such as browser COM objects.","The bridge  further includes an object mapping  of Java objects, that may be called from within the mixed statement programs . The mixed statement programs would include a W3C API interface call to a Java object, which maps to a corresponding UI COM object  in the user interface , The mixed statement programs may include W3C API calls instantiating and manipulating Java objects, that map to UI objects  in the user interface . For instance, the object mapping  for Internet Explorer describes the mapping of Java objects to COM objects, whereas for Mozilla based browsers the mapping  is to XPCOM objects in the Mozilla browser. The bridge  uses the API  and object  mappings to transform W3C API interfaces in the mixed statement programs to the corresponding user interface APIs  and objects  that can be executed directly by the user interface layout engine , which would then access the underlying operating system interfaces and objects  to execute the action. The bridge  will forward Java language statements to a Java Virtual Machine (JVM)  to process. Thus, in preferred embodiments, the bridge  separately processes the Java language statements to generate bytecodes executable by the native operating system and separately processes the W3C API interfaces to produce language statements and object code that the user interface  can directly execute.","The W3C API interfaces include numerous methods to implement objects in the user interface . By exposing a Java program, or mixed statement programs , to the W3C API interfaces, a mixed statement program including Java program statements can access any user interface feature and object that the user interface program  is capable of implementing. Thus, with the preferred computer architecture, the Java program is no longer constrained to the Java programming space, and may extend the Java program to other objects and programs available in commonly used user interface programs. For instance, the mixed statement programs may include the W3C HTML API interfaces to implement a user interface using the underlying UI objects  supported in the user interface . With this approach, the mixed statement programs can generate a user interface that has the same look-and-feel as the commonly used user interface  with which the user is intimately familiar.","Because the bridge  maps to user interface APIs , the mixed statement programs may execute on any operating system on which the user interface  may execute. The user interface layout engine  will handle the conversion of the browser APIs  and objects  to the specific operating system  platform.","As discussed the object mapping  exposes user interface objects  to the mixed statement programs to provide Java applications access to the user interface  functions and elements. The object mapping  provides a linkage of an instance of a user interface object , e.g., COM object, XPCOM object, etc., to a corresponding Java object that may be manipulated by the mixed statement program . When a W3C API interface is used in a mixed statement program to instantiate an instance of a Java object that corresponds to a native operating system object, the Bridge  would generate the Java native object  and node info object  data structures illustrated in  to provide a linkage between the Java object  and the corresponding user interface (UT) object . The node info object  comprises a pointer to the instantiated UI object . The Java native object  has a pointer to the node info object . The Java object  inherits all the properties of the Java native object class and can access all the functions implemented in the Java native object class. In this way, the Java object  is bound to the corresponding UI object  through the Java native object  and the methods that allow the Java object  to access the node info object , which can then be used to access the UI object .","In preferred embodiments, the bridge  maintains an object table  (FIG. ), which includes the value of the pointer for any native operating system object, e.g., COM object, linked to a Java object. The bridge  uses the object table  to avoid creating multiple instances of the same Java object. If a pointer to a user interface object is listed in the table , then the bridge  will have the API function calling such object use the already existing instance of the object instead of instantiating an additional instance of the same object.",{"@attributes":{"id":"p-0039","num":"0040"},"figref":["FIGS. 3","FIG. 3"],"i":["a, b ","a, b, c","a, b, c","a, b, c","b "],"b":["4","2","100","4","2","4","102","8","4","104","22","4","106","8","12","12","14","108","4","110","14","4","112","14","18","4","1114","14","18","12","100","2","4","14","14","14","18","1116","12","30","36"]},"At block  in , the bridge  generates the UI API function  to create a new instance of the UI object . The bridge  then creates (at block ) a node info object  that includes a pointer to the instantiated UI object . A Java user interface (UI) object  is created (at block ) to implement the Java UI object class and includes a pointer to the node info object . The Java object specified in the W3C API function instantiating the Java object is then created and defined (at block ) to inherit from the Java UI object class. In this way, an instance of the Java object and instances of the Java UI object  and node info object  are created to provide linkage from the Java object  to the corresponding UI object . The pointer to the new UI object  is then added (at block ) to the object table  to ensure that additional instances of the same UI object are not created. From block , control would transfer back to block  to process any further statements in the mixed statement program ","If, at block  in , the bridge  determines that the W3C API function call is not to instantiate a new Java object, then the bridge  further determines (at block ) whether there is a Java UI object  for the Java object  that includes a pointer to a node info object . If a Java UI object  has not yet been created for the Java object , then the bridge  uses the pointer to the UI API function  determined from the API mappings  to determine (at block ) the pointer to the UI object  to which the UI function interfaces. From block , control proceeds to block  in to create the linkage data structures from the Java object  specified in the W3C API function call to the existing UI object .","If, at block , there is already a Java UI object  for the Java object  in the W3C API function call, then the bridge  uses (at block ) a method in the Java UI object class to determine the pointer to the node info object  from the Java UI object  for the Java object  called in the W3C APT function. The functions in the Java UI object class are also used to query the node info object  to determine the pointer to the UI object corresponding to the Java object. After obtaining the pointer to the UI object, the bridge  then constructs (at block ) a statement comprising the determined user interface function call including the pointer to the UI object determined from the node info object , resulting in a user interface function call to a UI object.","In further embodiments, it is possible that multiple UI objects and interfaces are used to implement a single W3C class. In such case, the bridge  would create an additional data structure referred to as a proxy object to which the node info object points. This proxy object would in turn include pointers to multiple UI interfaces providing access to one or more UI objects that implement the W3C interface. In this way, the proxy object exposes the Java object and corresponding W3C API interface to one or more UI interfaces and objects. When processing calls to such a Java object, the bridge  would transform the call to the Java object to the multiple UI API interfaces specified in the proxy object to which the node info for the Java object points.","The result of the logic of is that the bridge transforms W3C API function calls added to mixed statement programs to the implementation of those W3C calls in the user interface . Preferred embodiments exploit the fact that many current user interfaces, such as Mozilla browsers, Microsoft Internet Explorer version 5, Adobe Scalable Vector Graphics, etc., implement the W3C DOM interfaces. A program developer may then include W3C API calls in a mixed statement program also including Java language statements to directly access the user interface objects maintained in the operating system. Preferred embodiments thus allow Java developers to extend Java programs beyond the Java runtime environment and utilize existing structures and objects implemented in the operating system. This preferred embodiment computing architecture allows a Java program, such as an Applet, to be a full citizen of the operating system as the mixed statement program can access any user interface program  interface and object defined in the operating system that implements a W3C API interface.","In preferred embodiments, the mixed statement programs may execute using multithreading techniques known in the art to concurrently execute multiple mixed statement programs in a single browser or web page.","Further, with the preferred embodiment architecture, the Java developer may expose data in any object accessible to the user interface, including DOM trees, to java tools. For instance, the mixed statement program may include Java Database Connectivity (JDBC**) calls to perform queries to access data from a database. The program could then include W3C API interface calls to insert database records returned from the JDBC calls into the DOM for a displayed HTML page to display the returned data in the HTML page. Alternatively, the mixed statement program may call a Java Bean application to perform various calculations or operations on data, and then include W3C API interfaces to insert the results of the operation from the Java program in the HTML DOM to display in the web page.","** Java and JDBC are trademarks of Sun Microsystems, Inc., Microsoft is a registered trademark of Microsoft Corporation; OS\/2 is a registered trademark of International Business Machines Corporation; Netscape is a registered trademark and Netscape Communicator, Netscape Navigator, Mozilla are trademarks of Netscape Communications Corporation. ","The bridge  may be included in a Java Development Kit (JDK) or Java Runtime Environment (JRE) package for a specific operating system, e.g., Linux, Windows, OS\/2, or any other supported operating system platform. The API mappings  would map each supported W3C API interface to the corresponding implementation of that interface in a user interface capable of executing on the specific operating system. In this way, the mixed statement program can execute on any operating system for which there is a version of the JDK or JRE including the bridge  and API mappings .","The above implementation concerned the general mapping of W3C API interfaces to user interface APIs  to manipulate the user interface objects  from a Java mixed statement program. Another aspect of the DOM is that it allows a document, or program or any component in the system to be expressed as a hierarchical relationship of objects that may separately be manipulated. Each element is maintained with attributes of the element. This allows a user to delete, add, or change an element, change its content or add, delete or change an attribute. For instance, the different parts of a document, such as sections, images, chapters, etc., may each be expressed as a DOM element in a hierarchical tree of DOM elements that define the entire document. Further, an HTML page may be expressed in a DOM tree where the elements of the HTML page, including user interface elements and program components, are expressed in a hierarchical relationship. The DOM makes all of the objects in a page, e.g., and HTML or XML page, such as images, forms, and even CSS properties, accessible to an application program. Various W3C API functions are available for manipulating DOM objects arranged in a hierarchical relationship. By manipulating particular DOM objects of an HTML page using W3C API interfaces or their corresponding implementation in a particular web browser or operating system, the user may specifically alter particular sections of the HTML page by manipulating the element(s) without affecting other sections of the HTML page defined in other elements.","Currently, the DOM is widely accepted as a standard for defining components within documents and applications, especially those related to the Internet, such as XML and HTML documents. In fact Microsoft Explorer 5.0 and Mozilla implement HTML using the DOM model and APIs. Further details of expressing document and application components in a DOM tree are described in the DOM specifications incorporated by reference above.","With the preferred embodiment bridge , a developer may use W3C API interfaces to implement the elements of a program or document, e.g., web browser, HTML page, user interface, etc., in a DOM tree and control the user interface through W3C API interfaces that manipulate the nodes of the DOM that implement the user interface. The W3C includes specific API interfaces to access, manipulate, create, modify and destroy node elements in a DOM tree. In such case, the API mappings  would include mappings for W3C API interfaces to access and manipulate nodes in a DOM tree to the corresponding command in the underlying browser or native operating system. In this way, the program developer may insert W3C API interfaces in a mixed statement program to manipulate a DOM implemented by the user interface program , which the bridge  would transform to API interfaces in the user interface program .","With the preferred embodiment architecture, the program developer can access the browser layout engine to generate the user interface for a program written in a different program language, such as Java. This allows the program developer to \u201cdraw\u201d the user interface using use the HTML browser on the user's system to provide a user interface that has the same \u201clook-and-feel\u201d presented by the installed browser. Moreover, by using the APIs of the browser, the bridge  does not have to be capable of providing the transformation to native operating system machine code as all such transformations are handled by the web browser's layout engine. Such implementations of the bridge to interface with the browser engine frees the Java programmer from the Java \u201clook-and-feel\u201d and the limitations of the Java AWT and Swing kits. With preferred embodiments, the look-and-feel of the mixed statement program would have the same user interface and look-and-feel of the browser already installed on the user's system.","With the preferred embodiments, a program developer may write the user interface using the W3C API interfaces related to HTML and the program logic in Java. Using the W3C interfaces, the mixed statement program could include event listeners to modify the HTML page upon the occurrence of certain events such as user input. Another way to write the mixed statement program is to embed the program in an empty HTML page in a manner similar to a Java Applet. During runtime, the mixed statement program embedded in a Web page like an Applet may dynamically add buttons, tables, text and graphics to the HTML page by manipulating the HTML DOM. Still further, the mixed statement program may include a combination of preconstructed HTML elements for the user interface as well as adding elements by manipulating the DOM. Yet further, the program can be written to run as a standalone application, using the HTML elements to generate a separate GUI window, like any other operating system window. In such case, the mixed statement program may utilize the browsers engine to generate the user interface without necessarily having the look and feel of a typical HTML page, including the browser chrome.","In preferred implementations, the bridge  including its API mappings would be implemented in different packages to interface with different operating system platforms. Thus, the Bridge may be included in the JRE and JDK kits for each operating system platform that supports Java to map the W3C API interfaces to the native operating system API interfaces. Further, the bridge may be implemented in the Java code included with Java enabled browsers to map the W3C APIs to the API interfaces used by the browser engine. This would allow a user to download a mixed statement program through the web browser and execute the mixed statement program in the web browser. The executing mixed statement program, through the Bridge, would issue W3C API calls that are mapped to the corresponding browser implementation of those calls. The browser layout engine would then directly execute the mapped API calls to generate the user interface and manipulate components.","The following describes some alternative embodiments for accomplishing the present invention.","The preferred embodiments may be implemented as a method, apparatus or information bearing media using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof. The programs defining the functions of the preferred embodiment can be delivered to a computer via a variety of information bearing media, which include, but are not limited to, computer-readable devices, carriers, or media, such as a magnetic storage media, \u201cfloppy disk,\u201d CD-ROM, a file server providing access to the programs via a network transmission line, wireless transmission media, signals propagating through space, radio waves, infrared signals, etc. Of course, those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the present invention. Such information bearing media, when carrying computer-readable instructions that direct the functions of the present invention, represent alternative embodiments of the present invention.","In preferred implementations, the W3C API interfaces are provided and mapped to corresponding API interfaces in the user interface in which the mixed statement program will execute. However, alternative embodiments may allow the use of standard API interfaces other than W3C. For instance, if another set of API interfaces, not those proposed by W3C, is adopted industry wide, then the Bridge may provide mappings from those alternative industry standard API interfaces to the implementation of those standard APIs in a native operating system or web browser. In this way, the present invention for mapping standard interfaces may apply to allow the Java developer to utilize the API interface standards to access non-Java components in the operating system.","In preferred embodiments, the mixed statement programs include Java programming language statements, which are capable of being implemented on different operating system platforms. In further embodiments, the mixed statement programs may include code from other computer languages as well as alternative cross-platform languages other than Java. In such case, the preferred embodiments provide a methodology for extending standard API interfaces to programs to allow the developer to utilize the standard API interfaces to enhance the capabilities of the program and program language being used. With preferred embodiments, the programmer may write one application program or mixed statement program including code in the cross-platform computer language and include the industry standard API interfaces, and then use implementations of the bridge to allow the program to execute on different operating system through the browser layout engine.","Preferred embodiments described the user interface as a graphical user interface, such as a web browser. However, the user interface may be in any human observable format, such as voice interface, wherein the code in the mixed statement program generates voice commands.","In non-Java implementations, a virtual machine program may be provided to translate the application program to code that is independent of the operating system platform, and then transform the operating system independent bytecodes to native operating system object code.","The bridge may be implemented in a JDK kit including the Java virtual machine. Alternatively, the bridge may be embedded into a ROM or flash memory.","Preferred embodiments described the bridge mapping W3C API interfaces to corresponding interfaces in Mozilla browsers and the Microsoft Internet Explorer 5. However, there may be further implementations of the bridge to provide API for any browser that implements aspects of the W3C DOM standard, including DOM level 1, all of the W3C HTML 4.0, and parts of the DOM level 2, including the CORE, HTML, Events, StyleSheets, and Cascading Style Sheets.","Preferred embodiments were described with respect to using the W3C API interfaces to access user interface objects, such as COM and XPCOM objects, which is the format of component objects in the Internet Explorer and Mozilla browser user interfaces, respectively. However, the bridge may map the W3C API interfaces to interfaces in any supported user interface program to access the objects in the format for that user interface. For instance, the bridge  may be used to interface with objects in the IBM System Object Model (SOM) format.","Mixed statement programs may be executed on any computing device that is capable of executing the bridge to transform the mixed statement code to either the native operating system code used by the computing device or the user interface APIs  and objects .","The preferred algorithm described particular steps as occurring in a particular order. However, in further embodiments the order of the steps may be changed and certain steps removed and added without departing from the scope of the invention. Moreover, different steps may be performed to execute the overall operation of the algorithm.","In summary, the present invention provides a system, method, and program for for translating source code statements to executable code. A source code statement including an application program interface (API) that is a member of a set of standard APIs calling an object in a first format is processed. A mapping is used to determine at least one user interface API corresponding to the determined standard API. The user interface API provides an implementation of the standard APIs in a user interface program. A mapping is determined of the called object to a corresponding object in a second format utilized by the user interface program is accessed. The source code statement comprising the standard API calling the object in the first format is converted to the determined user interface API calling the corresponding object in the second format. The user interface program is capable of executing the user interface API calling the corresponding object.","The foregoing description of the preferred embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto. The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"p-0024","num":"0025"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0025","num":"0026"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0026","num":"0027"},"figref":"FIGS. 3","i":"a, b "}]},"DETDESC":[{},{}]}
