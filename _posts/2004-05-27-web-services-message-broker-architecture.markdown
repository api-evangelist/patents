---
title: Web services message broker architecture
abstract: A web services message broker architecture. In one embodiment, a system may include a server system and a plurality of applications, each configured to implement one or more enterprise functions and to execute on the server system. The system may further include a web services message broker configured to execute on the server system and to present a central web services interface to the plurality of applications, through which a given one of the plurality of applications is configured to communicate with a web service. In one specific implementation of the system, the web services message broker may be further configured to receive an incoming web service request and to convey the incoming web service request to one of the plurality of applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07702724&OS=07702724&RS=07702724
owner: Oracle America, Inc.
number: 07702724
owner_city: Santa Clara
owner_country: US
publication_date: 20040527
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENTS","Overview of Web Services System"],"p":["1. Field of the Invention","This invention relates to computer systems and, more particularly, to web services communication among computer systems.","2. Description of the Related Art","As enterprises increase their use of information technology solutions to manage various enterprise functions, and with the promulgation of various Internet standards for communicating between computer systems, demand for techniques to facilitate the exchange of information and services across enterprises (or within large, decentralized enterprises) has also increased. For example, the World Wide Web (or simply, the web) has become a common portal for selling products and services to end consumers. However, in some early web-storefront implementations, only the order-entry process was automated by the web application; in some instances, web-entered orders were simply printed out while the order fulfillment process (including steps such as payment verification, order picking\/supplier provisioning, and order delivery) was conducted manually.","Over time, as enterprises and their partners automated their business processes and increased their Internet presence, the possibility to extend such automation to interfaces between dissimilar applications or enterprises became realized. For example, a credit card provider may provide a facility whereby a merchant may submit an Internet request to validate a customer's payment information, such that the merchant may configure an order entry application to automatically verify customer payment information without manual intervention. Similarly, distributors, subcontractors, and other clients may provide ordering and fulfillment interfaces for computer-submitted requests to potentially allow for automation of all phases of a customer transaction, from order entry to fulfillment.","One common model for configuring application services to be accessed by requesting clients is the web services model, in which a client may be configured to request a web service by conveying a message or document including the details of the request to the web service, typically using a web protocol such as Hypertext Transfer Protocol (HTTP). Upon receiving the request, the web service may process the request (e.g., using one or more applications) and may return results to the client or carry out some other action. In typical web service implementations, a provider of a web service may indicate the availability of a given web service by publishing a description (using a protocol such as Web Services Description Language (WSDL), for example) of the web service in a directory (using a protocol such as Universal Description, Discovery and Integration (UDDI), for example). A client desiring to interact with a web service may use such directory and description information to locate the service.","Although the web services model of providing client access to application services is increasingly popular, conventional web services implementations may limit scalability and maintenance of applications. For example, in one conventional embodiment, each client application that desires access to web services must implement its own interface to access and coordinate communication with the desired services, such as by sending an outgoing message from the enterprise to a particular web service. In a complex enterprise where numerous applications are configured to generate outgoing messages to access web services, such an implementation may result in redundant development effort, as the necessary interfaces are coded into each application, as well as long-term scalability and maintenance issues arising from such a decentralized web services interface (such as modifying all applications if the web services interfaces change, for example).","Various embodiments of a web services message broker architecture are disclosed. In one embodiment, a system may include a server system and a plurality of applications, each configured to implement one or more enterprise functions and to execute on the server system. The system may further include a web services message broker configured to execute on the server system and to present a central web services interface to the plurality of applications, through which a given one of the plurality of applications is configured to communicate with a web service.","In one specific implementation of the system, the web services message broker may be further configured to receive an incoming web service request and to convey the incoming web service request to one of the plurality of applications. In another specific implementation of the system, communicating with the web service may include exchanging a message with a web service entity configured to execute on another server system. In yet another specific implementation of the system, the message exchanged may include a document formatted according to a version of Extensible Markup Language (XML) format.","A method is further contemplated that in one embodiment may include a plurality of applications executing on a server system, where each of the plurality of applications is configured to implement one or more enterprise functions, and a web services message broker executing on the server system. The method may further include the web services message broker presenting a central web services interface to the plurality of applications, and a given one of the plurality of applications communicating with a web service through the central web services interface.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.","Broadly speaking, a web services system may be configured to provide users and\/or applications executing on one computer system with access to various types of services that may be configured to execute on another computer system. A web service generally may be understood to include any type of computing activity that may be performed on behalf of another application or client, such as in response to a request for service. For example, in one embodiment a web service may be configured to provide a real-time stock quote to a requesting application or client that provides a ticker symbol. In another embodiment, a web service may be configured to process credit card validation and transaction processing on behalf of a number of different vendor applications. In many embodiments, a web services model may be used to flexibly link providers and consumers of services across different enterprises or within a diverse, distributed, and possibly geographically dispersed enterprise.","A block diagram illustrating one embodiment of a web services system is illustrated in . In the illustrated embodiment, a client system  is configured to communicate with an application server  via internet\/intranet connectivity , and application server  is configured to communicate with another server  via internet\/intranet connectivity . (Internet\/intranet connectivity -may also be referred to herein as network -). Additionally, in the illustrated embodiment application server  is configured to communicate directly with data store . Client system  is configured to host a web browser . Application server  is configured to host a web server , a web services message broker  (which may also be referred to herein simply as broker ) and a plurality of applications -. Server  is configured to host a web service .","In the illustrated embodiment, client system  may be a computer system configured to initiate a request for application services provided by application server . For example, in one embodiment client system  may be an individual user's computer system coupled to network via an Ethernet, modem, or other network connection. In such an embodiment, an individual user may initiate a request for application services by interacting with a web page via web browser . For example, a user may initiate a web-based purchase order transaction by requesting a relevant form or document from application server  via web server , entering relevant information into the form via web browser , and submitting the form to application server  for processing.","Application service requests originating from client system  need not be interactively generated in response to a user's request. In some embodiments, such requests may be automatically generated by a process or application executing on client system . For example, client system  may be configured to automatically generate application service requests in response to various detected conditions or elapsed time intervals, such as automatically placing a purchase order when detected inventory levels fall below a given threshold. Further, application service requests need not be conveyed from client system  using a web-based protocol. In some embodiments, alternative mechanisms for client-application server communication may be employed, such as the Common Object Request Broker Architecture (CORBA), for example.","In various embodiments, client system  may be any type of computer system capable of interacting with application server  via network . For example, client system  may be a conventional desktop or notebook computer, a handheld computer such as a personal digital assistant (PDA), a thin client, or any other suitable type of computer system. In some embodiments, client system  may employ a hardware and\/or operating system architecture that is dissimilar from the architecture implemented by application server . For example, in one embodiment client system  may be based on an x86-compatible hardware architecture running a version of the Windows operating system, while application server  may be based on a SPARC hardware architecture running a version of the Solaris, Unix, or Linux operating systems.","Network may be any suitable type of data communication network configured to convey data between client system  and application server . In various embodiments, network may include local area network (LAN), wide area network (WAN), or telecommunications network functionality, or a combination of these. Network may include devices such as routers, hubs, switches, multiplexers, concentrators, or other network interface devices, and may implement any of a variety of networking protocols such as Ethernet, Token-Ring, Synchronous Optical Network (SONET), or other suitable protocols. Network may be implemented using electrical wire, optical fiber, wireless (e.g., radio frequency) or other interconnect technologies or a combination of these.","Application server  may be configured to process requests or transactions for application functionality received from client system  via web server . For example, application server  may implement business logic for processing a purchase order transaction via applications , where one application may be configured to manage financial aspects of the purchase order transaction (such as verifying purchasing authority of the requestor, assessing funds availability, etc.) and where another application may be configured to manage logistical aspects of the transaction (such as verifying inventory availability from a supplier, scheduling delivery, etc.). Generally speaking, a given application  may be configured to implement one or more specific enterprise functions. Such enterprise functions may include the business logic functions just described, for example, as well as other exemplary functions such as database query functions, communication\/notification functions, decision logic, transaction management logic, or any other suitable application function. It is contemplated that in various embodiments, application server  may implement an arbitrary number of different types of applications  depending, for example, on the specific processing needs of a given enterprise. It is further contemplated that in some embodiments, the program functions represented by applications  may be implemented as separate submodules of a single application .","In the illustrated embodiment, application server  may be configured to interface directly with back-end data store . In one embodiment, data store  may be configured as a database server including one or more datasets and a query engine configured to evaluate queries against the datasets. For example, data store  may be configured to maintain a database including customer identity and order information. While performing a particular enterprise function, a given application  may be configured to generate a query to retrieve information stored within the database, such as the status of all orders associated with a particular customer. Data store  may be configured to responsively evaluate such queries and return resulting data. In some embodiments, data store  may include physical storage such as individual disk drives, drive arrays, or storage devices configured as a Storage Area Network (SAN). In the illustrated embodiment, data store  may be privately connected to application server  such that data store  is not accessible by client system  or by other systems. However, in other embodiments it is contemplated that data store may be publicly connected via network or and generally accessible by other systems.","In the course of execution, a given application  may need to perform a transaction or access data not available within the scope of application server . For example, in an instance where application server  implements business logic for a web storefront, one application may be configured to process a user's credit card payment instructions and another application may be configured to interact with an external supplier to coordinate order fulfillment. In one embodiment, such applications  may be configured to communicate via network with a particular web service  hosted by a server  to perform the desired transaction or access the needed data. Referring to the previous example, application may be configured to interact with a credit card validation web service  made available by a bank in order to validate a given user's credit card information and to post a charge. Similarly, application may be configured to interact with an order fulfillment web service  made available by an external supplier, through which an order for product or reservation for services may be made. It is noted that an arbitrary number of web services  may be accessible to applications , and an arbitrary number of servers  may be provided to host web services . In various embodiments, server  may be any type of computer system suitable for hosting associated web service . For example, in one embodiment server  may be configured similarly to application server . In various embodiments, network may be configured similarly to network described above, and in one embodiment, network and network may be part of the same network (i.e., may overlap such that nodes connected to either network instance may directly or indirectly communicate).","In a complex enterprise, numerous applications  may need access to various web services . Additionally, in some embodiments, any of applications  may function as a web service on behalf of other applications external to application server . That is, a given application  may respond to requests for web services in addition to or instead of originating such requests. Rather than implementing a web services interface within each application  that may originate or service web service requests, which may result in inefficient replication of code and difficulty in maintaining and scaling applications , in the illustrated embodiment broker  is configured to provide a central web services interface to applications , as described in greater detail below. In one embodiment, broker  may be configured to centralize both incoming (i.e., originating externally to application server ) and outgoing web services communication.","It is noted that although client system , application server  and data store  have been illustrated as distinct entities (sometimes referred to as a \u201cthree-tier architecture\u201d), it is contemplated that in other embodiments, some or all of the functions of these elements may be consolidated into fewer systems or even a single system. For example, in some embodiments data store  may be omitted or integrated into application server . Also, in some embodiments such as ultra-thin-client systems (e.g., Sun Ray systems), client system  may be replaced by a client configured to perform only minimal input and display functionality, and application server  may be configured to execute client-system functions such as web browser  on behalf of a given user in addition to executing applications . It is further noted that in various embodiments, an arbitrary number of client systems , application servers , data stores , and\/or servers  may be provided.","Additionally, other configurations of applications and processes within application server  are possible and contemplated. For example, in some embodiments, application server  may be configured to provide distinct environments for application execution. Such environments may also be referred to as \u201ccontainers\u201d and may function at different levels of software abstraction. For example, in one embodiment application server  may be configured to provide a web container in which web server  executes, and an application container such as an Enterprise JavaBeans (EJB) container in which applications  and broker  execute. In other embodiments, different numbers and types of containers may be provided, and applications and other processes may be differently partitioned among them. For example, in some embodiments, web server  may be configured to execute on a server distinct from application server .","Although only the web services functionality hosted by server  on behalf of application server  is shown to improve clarity, in some embodiments, server  may be configured as an application server within a single- or multiple-tier architecture of its own. For example, in one embodiment server  may be provisioned within a distinct enterprise in a capacity analogous to that of application server , such that server  may host its own applications on behalf of one or more client systems analogous to client systems . In such an embodiment, server  may also be configured to interface with its own back-end data store analogous to data store . In some embodiments, server  may be configured to communicate with one or more of applications  as web services, such that each of application server  and server  may provide certain web services to the other in a roughly symmetric fashion. The methods and techniques of broker  described below may thus be similarly applicable to some embodiments of server .","Broker Architecture and Functionality","In some embodiments, broker  may be configured to coordinate message- or document-based communications among applications  and web service . Specifically, in one embodiment the messages exchanged among these entities may include documents formatted according to a version of the Extensible Markup Language (XML) data format (i.e., XML documents). Generally speaking, XML documents may be self-describing documents that include both data fields and corresponding tag fields that delimit and describe data fields.","One embodiment of broker  configured to present a central web services interface to applications  is illustrated in . In the illustrated embodiment, broker  is configured to interact with applications -as well as one or more web services  and one or more calling applications . (Although some of these entities may be configured to execute on particular systems and to communicate via specific networking infrastructure as illustrated in , these details are omitted from  for clarity.) Additionally, in the illustrated embodiment broker  includes an endpoint  configured to interact with a validator , a transformation engine , and a message router . Respectively, these entities in turn reference one or more schema maps , transformation maps , and routing maps .","In one embodiment, endpoint  may be configured to present the primary addressable interface of broker  to applications  that are local to broker  as well as to remote web services  and calling applications . For example, endpoint  may present method interfaces of broker  that may be invoked by a particular application  that desires to initiate a web service call to web service . Additionally, endpoint  may present a remotely addressable service name such as a Uniform Resource Indicator (URI) that may be referenced by a remote client, such as calling application , requesting access to a web service provided by one of applications . In some embodiments, endpoint  may be implemented in a Java programming environment using the Java Application Programming Interface for XML-Based Remote Procedure Calls (JAX-RPC) technology, while in other embodiments endpoint  may be implemented using Enterprise JavaBeans or another suitable technology.","A given application  may be configured to initiate a web services request in one embodiment by conveying an XML document including information specific to the request to broker . Such a document may also be referred to as a web services request document. In one embodiment, given application  may convey a web services request document to broker  via endpoint , although it is contemplated that in other embodiments, applications  may use any suitable distributed communications technology to communicate with broker . For example, applications  may utilize a Java Message Service (JMS) queue or a remote Enterprise JavaBean (EJB) for communication with broker .","As an example of web services request initiation, an application  seeking to validate credit card information for a given purchase order transaction may assemble an XML-format web services request document including information such as the credit card number, expiration date, the name of the credit card holder, the transaction amount, and the identity of the payee. In one embodiment, application  may also embed within the XML document the name (e.g., the URI) of the specific web service  associated with the desired web service. For example, if the URI of the credit card validation web service were \u201chttp:\/\/www.bigbank.com\/services\/ccvalidate\u201d, application  may include this information within its request document. In another embodiment, broker  may be configured to exchange documents formatted using a version of the Simple Object Access Protocol (SOAP), which allows XML document metadata to be readily distinguished from document contents. In such embodiments, the application  may place the web service URI in a SOAP header field.","In various embodiments, other information about a particular web service request besides the name of the requested web service may be provided by application . For example, a given web service request may require higher-priority processing than the default level of priority. Alternatively, security information such as encryption or authentication information may need to be included with the request. Such additional information may be embedded within an XML document or a SOAP header by a requesting application . In an alternative embodiment, application  may qualitatively indicate the desired web service and\/or any additional information regarding the request (e.g. priority information, security requirements, etc.) to broker  while making the request. For example, in such an embodiment an application  may pass a service-identifying parameter \u201cccvalidate\u201d to broker  along with an XML document including details of the validation request. Subsequently, broker  may be configured to resolve that parameter to a specific URI of the requested web service, and may also translate or reformat the provided XML document to include any necessary additional data or metadata as described below.","Once broker  receives a web services request document from a particular application , it may be configured to convey the document to the requested web service . For example, in one embodiment broker  may be configured to convey the document to the URI of the requested web service  using a Hypertext Transfer Protocol (HTTP) command. However, in some embodiments the web service request document generated by application  may be translated and\/or validated before it is conveyed to the requested web service . For example, in some instances web service  may be configured to expect document data fields to be formatted, tagged, or structured in a manner that differs from the document produced by a requesting application . Also, in some instances a document that is malformed (i.e., syntactically incorrect, missing information essential to the requested web service , etc.) may create undesirable consequences if it is submitted to and processed by a web service .","In the illustrated embodiment, broker  includes transformation engine , which may be configured to apply necessary transformations to a web services request document before the document is conveyed to a requested web service . In one embodiment, transformation engine  may be configured to detect the destination web service of a given document (e.g., the credit card validation web service) as well as the type of a given document (e.g., purchase transaction, refund transaction, credit-hold transaction). For example, transformation engine  may examine information embedded in data fields within the document body or within document metadata as described above. Subsequently, transformation engine  may reference transformation maps  to determine what (if any) features of the request document need to be transformed prior to sending the document. In one embodiment, transformation maps  may include tables or other data structures corresponding to known web services  and document types, which data structures specify mappings between formatting employed by applications  and web services . In some embodiments, such mappings may encompass the document data itself, the tags delimiting the document data, the structure of the document (e.g., the hierarchical relationship of data fields), or a combination of these or other document features.","For example, a credit card validation web service  may expect a credit card expiration date to be included with the credit card number in a record formatted as follows:",". . .","<ccinfo>\n\n","<\/ccinfo>",". . .","where the date is a four-digit string and the tags used to delimit the data are as shown. (The request document may of course include other information; only those portions relevant to this example are shown.) In contrast, a requesting application  may use a delimiter to separate the month and year of the expiration date, and may use different tags and record structure, such as:",". . .","<card_number>digits<\/card_number>","<card_exp>MM\/YY<\/card_exp>",". . .","In one embodiment, transformation maps  may include the information necessary to allow transformation engine  to translate the latter format to the former, such as by removing the \u201c\/\u201d character from the expiration date, renaming the tags, and restructuring the document hierarchy. Numerous other types of transformations are possible and contemplated, and it is further contemplated that in various embodiments an arbitrary number of transformation maps  may be defined.","In the illustrated embodiment, broker  also includes validator . In one embodiment, validator  may be configured to determine whether a given web services request document is properly formed or malformed by checking the document against a corresponding one of schema maps . In one embodiment, a schema map  may be an abstract representation of the structure of a document, such as a template. In various embodiments, schema map  may indicate that certain data fields should or should not be present within a document, that certain data fields should be tagged in a particular way, that the document conform to a particular structure (e.g., a particular hierarchical relationship of data fields). Additionally, a schema map  may provide a basis for evaluating any other textual aspect or combination of aspects of a document.","As an example, in one embodiment a validator  may be configured use an appropriate schema map  to check a web services request document destined for a credit card verification web service to ensure that both a credit card number and expiration date are provided and that the expiration date is a valid date. Numerous other types of schema-based document checks are possible and contemplated. In various embodiments, an arbitrary number of schema maps  may be defined. For example, a schema map  may be defined for each type of document handled by a particular web service , or only for a subset of such document types. Also, in various embodiments where a web service request document may be transformed by transformation engine  prior to conveying the document to web service , validator  may be configured to apply a schema map  to the document either before or after transformation, both before and after transformation, or not at all.","As noted above, in some embodiments web services communication through broker  may be bidirectional. For example, a web service  may return a response (such as a document) to a request originated by an application . Also, in some embodiments one or more external applications such as calling application(s)  may be configured to convey web service request documents to one or more of applications  (though it is noted that broker  need not be implemented on the system hosting a calling application ). In either case, endpoint  may be configured to receive documents that may correspond to web service requests or responses. For example, endpoint  may be configured to receive HTTP message traffic directed to URIs corresponding to the various applications .","Like outgoing web service request documents, in some embodiments incoming documents may also need to be validated and\/or transformed into a format suitable for use by one or more of applications . In some such embodiments, validator  and transformation engine  may be invoked by broker  to process incoming documents in a manner similar to that described above for outgoing documents. For example, in response to a credit card purchase transaction request submitted in a previous web services document, a credit card validation web service  may return a document that includes a transaction identifier and an approval code. In one embodiment, validator  may be configured to employ an appropriate schema map  to ensure that the returned document includes the expected fields, and transformation engine  may be configured to employ an appropriate transformation map  to rename tags used in the document to values expected by requesting application .","Once an incoming web service request document is received by broker  (which document may be either an initial web services request originating from a calling application , or a response from a web service  to a previous request initiated by an application ) and processed by validator  and transformation engine  if necessary, the incoming document may be routed to a particular application  for further processing. In the illustrated embodiment, broker  includes message router , which may be configured to consult routing maps  to determine the destination application  for a given incoming document. For example, a calling application  may submit a web services request to a particular URI that references endpoint . Routing maps  may be configured to store a mapping from the requested URI to a particular application . Using this mapping, message router  may direct the message appropriately. In some embodiments, when an application  prepares a web service request document, it may include an indication of its own identity within the document. In some such embodiments, when web service  returns a result document, it may preserve the application identity indicated in the request, so that message router  may use the indication to route the result document to the original requesting application .","In various embodiments, incoming documents may be routed directly to their corresponding applications , or they may be buffered or queued. For example, in one embodiment one or more Java Message Service (JMS) queues may be configured to queue and deliver incoming documents to applications . In other embodiments, EJB method calls or web services calls may be used by broker  to convey incoming documents to applications . In some embodiments, a combination of such techniques may be employed.","As noted previously, in some embodiments an application  that generates a web services request document may know the exact URI of the web service  it is requesting, and may convey this information to broker  within the request document data, metadata, as a parameter of a method call, or via other means. In such an embodiment, broker  may be configured to convey the request document to web service  without further processing the specified URI. In other embodiments, application  may not include the exact URI of the requested web service , but may indirectly identify the requested service such as with a pseudonym. In some such embodiments, message router  may also be configured to translate the web service indication supplied by application  to an actual URI corresponding to requested web service . For example, routing maps  may include an entry matching the pseudonym \u201cccvalidate\u201d to the URI \u201chttp:\/\/www.bigbank.com\/services\/ccvalidate\u201d. In some such embodiments, if web service URIs change, routing maps  may be updated without changing the mechanism used by applications  to specify requested web services.","Over time, it is possible that not just web service URIs but also the types of web service documents exchanged by broker  may change. A given web service  may change the functionality it provides and consequently change how functionality is to be requested via a web service request document. For example, a credit card validation web service  may add support for biometric or hardware-based security information, defining one or more tagged data fields with which to convey such information. Additionally, new web services  may be added over time, which may define new document types specific to the service provided. It is contemplated that in some embodiments, rather than providing a specific message-receiving method interface within endpoint  for each conceivable document type, broker  may be configured to generically receive documents of any type. In such embodiments, broker  may determine how to route a given document for processing based on the document contents, such as whether a document conforms to a particular schema map , rather than what method of endpoint  was invoked to receive the given document.","It is possible that, in some embodiments, a given web service request made by a calling application  may involve processing by not just one, but several applications . For example, in one embodiment application server  may be configured to provide order fulfillment web services on behalf of requesting applications. In such an embodiment, a calling application  may make a single web services request by conveying a document that includes order details as well as payment information. Application server  may provide one application to process payment details while providing another application to facilitate order assembly and delivery. (It is contemplated that in performing these activities, applications -may generate additional web service calls in some embodiments.)","In some embodiments where a single web services request may correspond to several applications , broker  may be configured to split or copy the incoming web services request document prior to conveying the portions or copies to the relevant applications . For example, in one embodiment message router  may be configured to direct a copy of the received request document to each of several applications  as indicated by routing maps . In another embodiment, transformation engine  may be configured to split the received request document into several documents, which message router  may subsequently convey to their respective applications . For example, transformation engine  may consult transformation maps  to extract payment information into one document and order details into a second document.","When incoming web services requests are distributed among multiple applications  for servicing, in some embodiments broker  may also be configured to facilitate tracking the relationship of the distributed application activity to the original request. Referring to the order fulfillment example, an order fulfillment web services request that is divided among several applications  may not be considered complete until each application  completes its relevant portion (i.e., the request may be transactional). Correspondingly, in one embodiment broker  may be configured to facilitate the processing of transactional web service requests by identifying each document generated from the request (e.g., by splitting or copying) as part of a single transaction. For example, transformation engine  or message router  may be configured to embed the same unique identifier (such as an alphanumeric string) in each generated document that corresponds to a single web service request document. Such a unique identifier may also be referred to as a correlation identifier or correlation ID.","One embodiment of a method of processing incoming web services message traffic, such as may be implemented by broker , is illustrated in . Referring collectively to  through , operation begins in block  where broker  receives an incoming web services request, for example as an HTTP message from a calling application . In some embodiments, the web services request may be represented as an XML document as previously described.","After the request has been received, identifying information is extracted from the request (block ). For example, metadata identifying the type of the request, document version or other salient information may be embedded within the body of a request document, within a SOAP header encapsulating the document, or may be otherwise conveyed with the request.","Based on the identifying information corresponding to the request, broker  then determines whether any format transformations are necessary and applies necessary transformations (block ). For example, in one embodiment transformation engine  may be configured to identify and apply format transformations as described above. Additionally, in some embodiments such transformations may include splitting or copying the received request into multiple request documents. Also, in some embodiments the received request may be validated by validator  before or after any necessary transformations have been applied.","Following format transformations (if any were applied), broker  then routes the request and dispatches it to the appropriate application  for processing (block ). For example, in one embodiment message router  may be configured to route incoming requests according to mappings defined within routing maps . In embodiments where an incoming request may be transformed into multiple documents, each document may be separately routed to a respective application .","One embodiment of a method of processing outgoing web services message traffic, such as may be implemented by broker , is illustrated in . Referring collectively to ,  and , operation begins in block  where broker  receives an outgoing web services request, for example as an invocation of a method of endpoint  by a requesting application . In some embodiments, the web services request may be represented as an XML document as previously described.","After the request has been received, identifying and destination information is extracted from the request (block ). For example, the requesting application  may embed a specific URI of the requested web service  within the body of a request document or within a SOAP header encapsulating the document, or may otherwise convey such destination information with the request. Additional document data or metadata may be included to identify the type of the request or any other salient feature. In some embodiments, it is contemplated that broker  may be configured to map destination information provided by requesting application  to a URI of the requested web service .","Based on the destination and\/or identifying information corresponding to the request, broker  then determines whether any format transformations are necessary and applies necessary transformations (block ). For example, in one embodiment transformation engine  may be configured to identify and apply format transformations as described above. Also, in some embodiments the received request may be validated by validator  before or after any necessary transformations have been applied.","Following format transformations (if any were applied), broker  then dispatches the web services request to the appropriate web service  for processing (block ). For example, broker  may be configured to convey an XML document including the web services request to a corresponding web service  via an HTTP operation.","Exemplary Server System","One embodiment of an exemplary server system that may be illustrative of application server  or server  is shown in . In the illustrated embodiment, server system  includes a processor  coupled to a memory  via interface logic . Also, network interface  is coupled to processor  and memory  via interface logic . In one embodiment, server system  may be configured to execute any of the software functions, methods or techniques illustrated within application server  or server  and described above. In some embodiments, server system  may also be configured to execute the functions, methods or techniques of client system  or data store  of .","Processor  may be configured to execute program instructions stored in memory  or received via network interface . In one embodiment, processor  may be a microprocessor configured to implement a given instruction set architecture (ISA), such as the SPARC ISA or the x86 ISA, for example. In another embodiment, processor  may be a digital signal processor, while in still another embodiment, processor  may be an integrated device such as a microcontroller, an Application Specific Integrated Circuit, or a Field Programmable Gate Array (FPGA). In some embodiments, processor  may include an integrated memory controller (not shown) enabling it to couple directly to memory such as memory , whereas in other embodiments, processor  may couple to memory via an interface separate from interface logic , such as a dedicated north bridge.","Memory  may be configured to store program instructions and data during operation of server system . In various embodiments, memory  may include any of a variety of memory technologies such as static random access memory (SRAM) or dynamic RAM (DRAM), including variants such as dual data rate synchronous DRAM (DDR SDRAM), error correcting code synchronous DRAM (ECC SDRAM), or Rambus DRAM (RDRAM), for example. Memory  may also include nonvolatile memory technologies such as nonvolatile \u201cflash\u201d RAM (NVRAM) or read-only memory (ROM). In some embodiments, it is contemplated that memory  may include a combination of technologies such as the foregoing, as well as other technologies not specifically mentioned. In the illustrated embodiment, memory  includes software code , which may include program instructions and data corresponding to one or more of broker , applications , or web service  illustrated in . Code  may also include program instructions and data corresponding to other application or operating system software modules. For example, code  may include program instructions and data corresponding to a version of the Solaris, Unix, Linux, Microsoft Windows or other suitable operating systems, and\/or to one or more applications configured to execute within an environment provided by such an operating system.","Interface logic  may be configured to interface various peripheral devices, such as network interface , to processor  and to memory . In one embodiment interface logic  may include logic and interconnect devices configured to implement a bus interconnect standard such as the peripheral component interconnect (PCI) bus standard, although in other embodiments other bus interconnect types or a combination of such types may be supported. In some embodiments, interface logic  may include logic configured to support direct memory access (DMA) transfers between peripheral devices and memory .","Network interface  may be configured to transmit data from server system  to other computer systems as well as to receive data from other computer systems via a communication network. In one embodiment, network interface device  may be physically coupled to one or more other computer systems and may implement a networking standard such as Ethernet, for example. Alternatively, network interface device  may implement a fiber optic communication network protocol, or it may implement a telephony protocol and function as a dial-up modem, for example. In another embodiment, network interface device  may use a wireless networking protocol to interface with one or more other computer systems, such as a wireless Ethernet protocol (e.g., Wi-Fi), the Bluetooth standard, or a wireless telephony standard. In some embodiments, it is contemplated that network interface device  may include more than one network interface implementing more than one type of interface protocol, including other types of devices and protocols.","In some embodiments, server system  may be configured to include other embodiments not shown. For example, server system  may include one or more mass storage devices such as hard disk drives, optical drives (e.g., CD or DVD-based drives), or solid-state storage devices (e.g., NVRAM-based devices) that may be coupled to interface logic  via a variety of interfaces, such as the Small Computer System Interface (SCSI), AT Attachment Peripheral Interface (ATAPI), IEEE 1394 (Firewire), Universal Serial Bus (USB), or another suitable interface. Server system  may also include input and output devices such as keyboards, computer mice, graphic displays and associated graphics hardware, or any other suitable peripheral devices.","As noted above, in some embodiments code  may correspond to one or more of the software modules illustrated in , such as broker , applications , web service , and\/or web server . In the illustrated embodiment of server system , code  resides in memory . Memory  may be one embodiment of a computer-accessible medium configured to store program instructions and\/or data such as included in code . However, in other embodiments, the program instructions and\/or data included in code  may be received, sent or stored upon different types of computer-accessible media. Generally speaking, a computer-accessible medium may include storage media or memory media such as magnetic or optical media, e.g., disk or CD-ROM included in some embodiments of server system  as one or more mass storage devices, as mentioned above. A computer-accessible medium may also include volatile or non-volatile media such as RAM (e.g. SDRAM, DDR SDRAM, RDRAM, SRAM, etc.), ROM, etc, such as memory  as previously described. Further, a computer-accessible medium may include transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as network and\/or a wireless link, such as may be implemented by network interface .","Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
