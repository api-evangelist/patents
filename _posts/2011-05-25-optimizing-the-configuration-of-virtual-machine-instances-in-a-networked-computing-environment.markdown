---
title: Optimizing the configuration of virtual machine instances in a networked computing environment
abstract: Embodiments of the present invention provide an approach for optimizing a configuration of virtual machine (VM) instances. In a typical embodiment, such optimization comprises either the splitting of a single VM instance into multiple VM instances or the consolidation of multiple VM instances into fewer (e.g., a single) VM instance. Along these lines, it will first be determined which VM instances would be good candidates for reconfiguration. Under one approach, VM instances that are candidates for reconfiguration are identified based upon an analysis of applicable/associated service level agreement (SLA) terms versus the performance of the VM instances. For example, VM instances can be reconfigured if such reconfiguration will maximize a benefit provided by the applicable SLA terms (e.g., if the splitting of a single VM instance into multiple VM instances would cause a workload to be processed more efficiently, resulting in a more favorable cost/benefit ratio). In another embodiment, candidate VM instances can be identified based upon a commonality of an entity (e.g., a consumer) associated therewith. For example, if a single entity is utilizing multiple VM instances, such VM instances could be considered candidates for consolidation to avoid unnecessary computing resource consumption.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08769531&OS=08769531&RS=08769531
owner: International Business Machines Corporation
number: 08769531
owner_city: Armonk
owner_country: US
publication_date: 20110525
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","SUMMARY","ILLUSTRATIVE EXAMPLE"],"p":["The present invention relates generally to the optimization of virtual machine (VM) instances. Specifically, the present invention relates to the optimization of the configuration of VM instances in a networked computing environment (e.g., a cloud computing environment).","The networked computing environment (e.g., cloud computing environment) is an enhancement to the predecessor grid environment, whereby multiple grids and other computation resources may be further enhanced by one or more additional abstraction layers (e.g., a cloud layer), thus making disparate devices appear to an end-consumer as a single pool of seamless resources. These resources may include such things as physical or logical computing engines, servers and devices, device memory, storage devices, among others.","Within networked computing environments, it is often the case that virtual machines (VM) are utilized. In general, VM instances comprise a type of computing environment (e.g., a program or operating system) that is based upon a software abstraction layer within a computing system. In this context, a VM instance is often called a \u201cguest\u201d while the environment in which it operates is called a \u201chost.\u201d VM instances are typically created to execute a set of instructions different than that of the host environment. Because VM instances are separated from the physical resources they use, the host environment is often able to dynamically assign those resources among the VM instances. Challenges can exist in that VM instances may be configured in a less than optimal fashion. For example, it could be the case that too many or too few VM instances are provisioned within an environment. Such provisioning can result in unnecessary consumption of computing resources, and\/or inefficient processing of workloads.","Embodiments of the present invention provide an approach for optimizing a configuration of virtual machine (VM) instances. In a typical embodiment, such optimization comprises either the splitting of a single VM instance into multiple VM instances or the consolidation of multiple VM instances into fewer (e.g., a single) VM instance. Along these lines, it will first be determined which VM instances would be good candidates for reconfiguration. Under one approach, VM instances that are candidates for reconfiguration are identified based upon an analysis of applicable\/associated service level agreement (SLA) terms versus the performance of the VM instances. For example, VM instances can be reconfigured if such reconfiguration will maximize a benefit provided by the applicable SLA terms (e.g., if the splitting of a single VM instance into multiple VM instances would cause a workload to be processed more efficiently, resulting in a more favorable cost\/benefit ratio). In another embodiment, candidate VM instances can be identified based upon a commonality of an entity (e.g., a consumer) associated therewith. For example, if a single entity is utilizing multiple VM instances, such VM instances could be considered candidates for consolidation to avoid unnecessary computing resource consumption.","A first aspect of the present invention provides a computer-implemented method for optimizing virtual machine instances in a networked computing environment, comprising: identifying a set of virtual machine (VM) instances in the networked computing environment that are potential candidates for optimization based upon at least one of the following: a performance of the set of VM instances with respect to a set of service level agreement (SLA) terms, or a commonality of an entity associated with the set of VM instances; and optimizing the set of VM instances by performing at least one of the following actions: splitting a single instance of the set of VM instances into multiple instances, or consolidating multiple instances of the set of VM instances into a single instance.","A second aspect of the present invention provides a system for optimizing virtual machine instances in a networked computing environment, comprising: a bus; a processor coupled to the bus; and a memory medium coupled to the bus, the memory medium comprising instructions to: identify a set of virtual machine (VM) instances in the networked computing environment that are potential candidates for optimization based upon at least one of the following: a performance of the set of VM instances with respect to a set of service level agreement (SLA) terms, or a commonality of an entity associated with the set of VM instances; and optimize the set of VM instances by performing at least one of the following actions: splitting a single instance of the set of VM instances into multiple instances, or consolidating multiple instances of the set of VM instances into a single instance.","A third aspect of the present invention provides a computer program product for optimizing virtual machine instances in a networked computing environment, the computer program product comprising a computer readable storage media, and program instructions stored on the computer readable storage media, to: identify a set of virtual machine (VM) instances in the networked computing environment that are potential candidates for optimization based upon at least one of the following: a performance of the set of VM instances with respect to a set of service level agreement (SLA) terms, or a commonality of an entity associated with the set of VM instances; and optimize the set VM instances by performing at least one of the following actions: splitting a single instance of the set of VM instances into multiple instances, or consolidating multiple instances of the set of VM instances into a single instance.","A fourth aspect of the present invention provides a method for deploying a system for optimizing virtual machine instances in a networked computing environment, comprising: providing a computer infrastructure being operable to: identify a set of virtual machine (VM) instances in the networked computing environment that are potential candidates for optimization based upon at least one of the following: a performance of the set of VM instances with respect to a set of service level agreement (SLA) terms, or a commonality of an entity associated with the set of VM instances; and optimize the set VM instances by performing at least one of the following actions: splitting a single instance of the set of VM instances into multiple instances, or consolidating multiple instances of the set of VM instances into a single instance.","The drawings are not necessarily to scale. The drawings are merely schematic representations, not intended to portray specific parameters of the invention. The drawings are intended to depict only typical embodiments of the invention, and therefore should not be considered as limiting the scope of the invention. In the drawings, like numbering represents like elements.","Illustrative embodiments now will be described more fully herein with reference to the accompanying drawings, in which exemplary embodiments are shown. This disclosure may, however, be embodied in many different forms and should not be construed as limited to the exemplary embodiments set forth herein. Rather, these exemplary embodiments are provided so that this disclosure will be thorough and complete and will fully convey the scope of this disclosure to those skilled in the art. In the description, details of well-known features and techniques may be omitted to avoid unnecessarily obscuring the presented embodiments.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of this disclosure. As used herein, the singular forms \u201ca\u201d, \u201can\u201d, and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. Furthermore, the use of the terms \u201ca\u201d, \u201can\u201d, etc., do not denote a limitation of quantity, but rather denote the presence of at least one of the referenced items. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising\u201d, or \u201cincludes\u201d and\/or \u201cincluding\u201d, when used in this specification, specify the presence of stated features, regions, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, regions, integers, steps, operations, elements, components, and\/or groups thereof.","Embodiments of the present invention provide an approach for optimizing a configuration of virtual machine (VM) instances. In a typical embodiment, such optimization comprises either the splitting of a single VM instance into multiple VM instances or the consolidation of multiple VM instances into fewer (e.g., a single) VM instance. Along these lines, it will first be determined which VM instances would be good candidates for reconfiguration. Under one approach, VM instances that are candidates for reconfiguration are identified based upon an analysis of applicable\/associated service level agreement (SLA) terms versus the performance of the VM instances. For example, VM instances can be reconfigured if such reconfiguration will maximize a benefit provided by the applicable SLA terms (e.g., if the splitting of a single VM instance into multiple VM instances would cause a workload to be processed more efficiently, resulting in a more favorable cost\/benefit ratio). In another embodiment, candidate VM instances can be identified based upon a commonality of an entity (e.g., a consumer) associated therewith. For example, if a single entity is utilizing multiple VM instances, such VM instances could be considered candidates for consolidation to avoid unnecessary computing resource consumption.","It is understood in advance that although this disclosure includes a detailed description of cloud computing, implementation of the teachings recited herein are not limited to a cloud computing environment. Rather, embodiments of the present invention are capable of being implemented in conjunction with any other type of computing environment now known or later developed.","Cloud computing is a model of service delivery for enabling convenient, on-demand network access to a shared pool of configurable computing resources (e.g. networks, network bandwidth, servers, processing, memory, storage, applications, virtual machines, and services) that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics, at least three service models, and at least four deployment models.","Characteristics are as follows:","On-demand self-service: a cloud consumer can unilaterally provision computing capabilities, such as server time and network storage, as needed, automatically without requiring human interaction with the service's provider.","Broad network access: capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms (e.g., mobile phones, laptops, and PDAs).","Resource pooling: the provider's computing resources are pooled to serve multiple consumers using a multi-tenant model, with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction (e.g., country, state, or datacenter).","Rapid elasticity: capabilities can be rapidly and elastically provisioned, in some cases automatically, to quickly scale out and rapidly released to quickly scale in. To the consumer, the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.","Measured service: cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service (e.g., storage, processing, bandwidth, and active consumer accounts). Resource usage can be monitored, controlled, and reported providing transparency for both the provider and consumer of the utilized service.","Service Models are as follows:","Software as a Service (SaaS): the capability provided to the consumer is to use the provider's applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser (e.g., web-based email). The consumer does not manage or control the underlying cloud infrastructure including network, servers, operating systems, storage, or even individual application capabilities, with the possible exception of limited consumer-specific application configuration settings.","Platform as a Service (PaaS): the capability provided to the consumer is to deploy onto the cloud infrastructure consumer-created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks, servers, operating systems, or storage, but has control over the deployed applications and possibly application-hosting environment configurations.","Infrastructure as a Service (IaaS): the capability provided to the consumer is to provision processing, storage, networks, and other fundamental computing resources where the consumer is able to deploy and run arbitrary software, which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems, storage, deployed applications, and possibly limited control of select networking components (e.g., host firewalls).","Deployment Models are as follows:","Private cloud: the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on-premises or off-premises.","Community cloud: the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns (e.g., mission, security requirements, policy, and compliance considerations). It may be managed by the organizations or a third party and may exist on-premises or off-premises.","Public cloud: the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.","Hybrid cloud: the cloud infrastructure is a composition of two or more clouds (private, community, or public) that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability (e.g., cloud bursting for load-balancing between clouds).","A cloud computing environment is service oriented with a focus on statelessness, low coupling, modularity, and semantic interoperability. At the heart of cloud computing is an infrastructure comprising a network of interconnected nodes.","Referring now to , a schematic of an example of a cloud computing node is shown. Cloud computing node  is only one example of a suitable cloud computing node and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the invention described herein. Regardless, cloud computing node  is capable of being implemented and\/or performing any of the functionality set forth hereinabove.","In cloud computing node , there is a computer system\/server , which is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well-known computing systems, environments, and\/or configurations that may be suitable for use with computer system\/server  include, but are not limited to, personal computer systems, server computer systems, thin clients, thick clients, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputer systems, mainframe computer systems, and distributed cloud computing environments that include any of the above systems or devices, and the like.","Computer system\/server  may be described in the general context of computer system-executable instructions, such as program modules, being executed by a computer system. Generally, program modules may include routines, programs, objects, components, logic, data structures, and so on that perform particular tasks or implement particular abstract data types. Computer system\/server  may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment, program modules may be located in both local and remote computer system storage media including memory storage devices.","As shown in , computer system\/server  in cloud computing node  is shown in the form of a general-purpose computing device. The components of computer system\/server  may include, but are not limited to, one or more processors or processing units , a system memory , and a bus  that couples various system components including system memory  to processor .","Bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnects (PCI) bus.","Computer system\/server  typically includes a variety of computer system readable media. Such media may be any available media that is accessible by computer system\/server , and it includes both volatile and non-volatile media, removable and non-removable media.","System memory  can include computer system readable media in the form of volatile memory, such as random access memory (RAM)  and\/or cache memory . Computer system\/server  may further include other removable\/non-removable, volatile\/non-volatile computer system storage media. By way of example only, storage system  can be provided for reading from and writing to a non-removable, non-volatile magnetic media (not shown and typically called a \u201chard drive\u201d). Although not shown, a magnetic disk drive for reading from and writing to a removable, non-volatile magnetic disk (e.g., a \u201cfloppy disk\u201d), and an optical disk drive for reading from or writing to a removable, non-volatile optical disk such as a CD-ROM, DVD-ROM, or other optical media can be provided. In such instances, each can be connected to bus  by one or more data media interfaces. As will be further depicted and described below, memory  may include at least one program product having a set (e.g., at least one) of program modules that are configured to carry out the functions of embodiments of the invention.","The embodiments of the invention may be implemented as a computer readable signal medium, which may include a propagated data signal with computer readable program code embodied therein (e.g., in baseband or as part of a carrier wave). Such a propagated signal may take any of a variety of forms including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium including, but not limited to, wireless, wireline, optical fiber cable, radio-frequency (RF), etc., or any suitable combination of the foregoing.","Program\/utility , having a set (at least one) of program modules , may be stored in memory  by way of example, and not limitation, as well as an operating system, one or more application programs, other program modules, and program data. Each of the operating system, one or more application programs, other program modules, and program data or some combination thereof, may include an implementation of a networking environment. Program modules  generally carry out the functions and\/or methodologies of embodiments of the invention as described herein.","Computer system\/server  may also communicate with one or more external devices  such as a keyboard, a pointing device, a display , etc.; one or more devices that enable a consumer to interact with computer system\/server ; and\/or any devices (e.g., network card, modem, etc.) that enable computer system\/server  to communicate with one or more other computing devices. Such communication can occur via I\/O interfaces . Still yet, computer system\/server  can communicate with one or more networks such as a local area network (LAN), a general wide area network (WAN), and\/or a public network (e.g., the Internet) via network adapter . As depicted, network adapter  communicates with the other components of computer system\/server  via bus . It should be understood that although not shown, other hardware and\/or software components could be used in conjunction with computer system\/server . Examples include, but are not limited to: microcode, device drivers, redundant processing units, external disk drive arrays, RAID systems, tape drives, and data archival storage systems, etc.","Referring now to , illustrative cloud computing environment  is depicted. As shown, cloud computing environment  comprises one or more cloud computing nodes  with which local computing devices used by cloud consumers, such as, for example, personal digital assistant (PDA) or cellular telephone A, desktop computer B, laptop computer C, and\/or automobile computer system N may communicate. Nodes  may communicate with one another. They may be grouped (not shown) physically or virtually, in one or more networks, such as private, community, public, or hybrid clouds as described hereinabove, or a combination thereof. This allows cloud computing environment  to offer infrastructure, platforms, and\/or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It is understood that the types of computing devices A-N shown in  are intended to be illustrative only and that computing nodes  and cloud computing environment  can communicate with any type of computerized device over any type of network and\/or network addressable connection (e.g., using a web browser).","Referring now to , a set of functional abstraction layers provided by cloud computing environment  () is shown. It should be understood in advance that the components, layers, and functions shown in  are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted, the following layers and corresponding functions are provided:","Hardware and software layer  includes hardware and software components. Examples of hardware components include mainframes. In one example, IBM\u00ae zSeries\u00ae systems and RISC (Reduced Instruction Set Computer) architecture based servers. In one example, IBM pSeries\u00ae systems, IBM xSeries\u00ae systems, IBM BladeCenter\u00ae systems, storage devices, networks, and networking components. Examples of software components include network application server software. In one example, IBM WebSphere\u00ae application server software and database software. In one example, IBM DB2\u00ae database software. (IBM, zSeries, pSeries, xSeries, BladeCenter, WebSphere, and DB2 are trademarks of International Business Machines Corporation registered in many jurisdictions worldwide.)","Virtualization layer  provides an abstraction layer from which the following examples of virtual entities may be provided: virtual servers; virtual storage; virtual networks, including virtual private networks; virtual applications and operating systems; and virtual clients.","In one example, management layer  may provide the functions described below. Resource provisioning provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and pricing provide cost tracking as resources are utilized within the cloud computing environment, and billing or invoicing for consumption of these resources. In one example, these resources may comprise application software licenses. Security provides identity verification for cloud consumers and tasks, as well as protection for data and other resources. Consumer portal provides access to the cloud computing environment for consumers and system administrators. Service level management provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement (SLA) planning and fulfillment provides prearrangement for, and procurement of, cloud computing resources for which a future requirement is anticipated in accordance with an SLA. Further shown in management layer is VM instance optimization, which represents the functionality that is provided under the embodiments of the present invention.","Workloads layer  provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include: mapping and navigation; software development and lifecycle management; virtual classroom education delivery; data analytics processing; transaction processing; and consumer data storage and backup. As mentioned above, all of the foregoing examples described with respect to  are illustrative only, and the invention is not limited to these examples.","It is understood that all functions of the present invention as described herein typically may be performed by the VM instance optimization functionality (of management layer , which can be tangibly embodied as modules of program code  of program\/utility  (). However, this need not be the case. Rather, the functionality recited herein could be carried out\/implemented and\/or enabled by any of the layers - shown in .","It is reiterated that although this disclosure includes a detailed description on cloud computing, implementation of the teachings recited herein are not limited to a cloud computing environment. Rather, the embodiments of the present invention are intended to be implemented with any type of networked computing environment now known or later developed.","Referring to , the approach provided under the embodiments of the present invention is depicted. Specifically,  represents a system diagram showing a process in which a VM instance optimization system  that provides VM instance configuration\/reconfiguration. In a typical embodiment, VM instance optimization system  comprises one or more software programs\/utilities such as program  of  that enables the functionality discussed herein and that is represented by the VM instance optimization function of management layer  of . Along these lines, VM instance optimization system  can comprise a rules engine or the like that is configured to split a single VM instance  into multiple VM instances  and\/or consolidate multiple VM instances  into fewer (e.g., a single) VM instance . As will be further described below, such determinations can be made based upon one or more factors such as SLA terms  associated with the VM instances and\/or commonality of entities  associated with the VM instances. It is understood in advance that the section headings that appear below are utilized for ease of reading purposes only and are not intended to indicate a particular relevance of one section over another.","Identification of Reconfiguration Opportunities","The following describes two methods to determine opportunities to reconfigure (e.g., consolidate and\/or split) service VM instances of the same VM instances template type. Service VM instances are defined as VM instances which host generic services such as a database or middleware. The following criteria are indicative of good VM instance candidates to be reconfigured.\n\n","Consolidation Opportunities","When these similar criteria are observed, then the VM instances should be selected for reconfiguration. The following two algorithms determine good consolidation candidates based on the two previously mentioned examples of consolidation criteria.","Determination Algorithm 1: Selecting Consolidation Candidates Using SLA",{"@attributes":{"id":"p-0070","num":"0000"},"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":{"@attributes":{"id":"ul0003-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":["1. For each customer c do:","2. For each VM instances Template t which has at least one currently provisioned instance do:","3. candidateList=[ ]","4. for each instance i for template t do:","5. if max usage of VM instance i is <50% of SLA do:","6. candidateList.append(i)\n\nDetermination Algorithm 2: Selecting Consolidation Candidates Using Same Access ID\n\nFunction Prototype\/Description:\n","get Majority Access ID(VM instance i)\u2014This method determines an ID (be it IP address or login name or some other identifier) which is primarily accessing VM instance i. If no one ID has over 50% of the accesses, then null is returned.\n\nAlgorithm Steps:\n","1. for each customer c do:","2. for each VM instances Template t which has at least two currently provisioned instance do:","3. candidateGroups=HashMap<String,List>","4. for each instance i for template t do:","5. MainID=getMajority AccessID(i)","6. If mainID==null do:","7. Continue","8. cg=consolidationGroups.get(mainID)","9. if cg==null do:","10. new consolidation List=[i]","11. consolidationGroups.put(mainID,newconsolidationList)","12. else:","13. cg.append(i)","14.","15. finalCandidateGroups=[ ]","16. for candidate group list cgl in candidateGroups do:","17. if cgl.length>=2 do:","18. finalCandidateGroups.append(cgl)\n\nOnce a list of the good consolidation candidates has been determined, these candidates can be presented to the consumer for consideration, consumer authorization may be requested before consolidation because the consolidation process allows partial VM instances access between projects which may be an unwanted security threat.\n"]}}}},"Split Opportunities","In addition to determining when a VM instance should be consolidated, there are times when a service VM instance should be split into multiple service VM instances. This should be done in scenarios where high-value customers have demanding SLA agreements and their associated service VM instances are close to its maximum usage. For example, say project  and project  were consolidated and project  had a high-value SLA. Consider the possibility that the average load of the consolidated service VM instances are >90% of the SLA. Since project  has a high-value SLA which must be maintained, it is safer to now separate the VM instances into their own service VM instances. The algorithm to determine split candidates can be found below:","Determination Algorithm 3: Selecting Split Candidates Using SLA",{"@attributes":{"id":"p-0073","num":"0000"},"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":{"@attributes":{"id":"ul0005-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":["1. For each customer c do:","2. candidateList=[ ]","3. for each service VM instance i which contains multiple service do:","4. if max usage of i is >90% of SLA do:","5. candidateList.append(i)"]}}}},"Referring to , an illustrative interface  for reconfiguring VM instances is shown. It is understood in advance that although  depicts a VM instance consolidation operation, a similar interface can be presented for a VM instance split operation. As depicted, interface  comprises: a candidate area  for listing VM instances that have a potential to be consolidated; a selection area  for selecting VM instances to be consolidated; an VM instance addition area  for requesting new VM instances, and an action mechanism , the selection of which will cause VM instances selected via selection area  to be consolidated.","Reconfiguration Algorithm","This section described the process that occurs once VM instance candidates have been identified and\/or selected. Specifically, the following are the steps in the general consolidation\/split (collectively referred to as reconfiguration) algorithm:\n\n","Step 1\u2014Update Network Configuration: This initial step configures a firewall with the appropriate Virtual local Area Network (VLAN) and IP\/port information. Depending on the level of required security two methods can be employed:\n\n","Step 2\u2014Create Resources: This step is only needed during the split process to create additional VM instances resources. This step creates new service VM instances of the same type which will contain at least one of the services after the split process has been completed.","Step 3\u2014Move Services: Once the resources and the necessary network configuration are complete, the VM instance optimization  can start the consolidation\/split process. This involves calling the\n\n","Step 4\u2014Update Service Pointers: There are a number of ways to update the pointers to the resource VM instances after the consolidation\/splitting has taken place. The first two were introduced hereinabove, but a more advanced update process is described as well.\n\n","During the split process, the service IP method can only split services grouped under different IP addresses. That is, a prior consolidation could be necessary for a split to occur since consolidation is the only way for a service VM instance to have multiple IP addresses. This is not typically an issue since a majority of splits occur when a consolidated service VM instance outgrows its current capacity.","Step 5\u2014Delete Unused Resources: The final step is to delete any resources which are no longer required. This step is only applicable in a consolidation scenario where a VM instance has been completely consolidated into another service VM instance and is no longer running any services.","Determining which Services to Move to which Locations","While it has been described above how to determine which services are consolidation\/split candidates, this section will discuss how it is determined which VM instances should be maintained for consolidations and which services should be separated during the split processes.","Consolidation","1. Choose the consolidation path which will take the least amount of time. This method used the following function:\n\n","Splitting","1. Choose the service(s) which require the lesser amount of time to move. This method looks through all of the services on the VM instances to be split and selects the service which requires the least time to move via the\n\n","The following is an algorithm describing how to minimize split time:\n\n","2. Choose the service(s) which holds the higher-value SLAs. This method looks through all of the services on the VM instances and chooses the service which is associated with the highest-value SLA via the\n\n","One noteworthy property of the previously disclosed consolidation\/split algorithm is that it can occur automatically. That is, at any point during the consolidation\/split process, the entire cloud can be reverted to the state before the consolidation\/split was initiated. This is noteworthy since it prevents the cloud from becoming inconsistent due to failures. For example, assume that the consolidation\/split process failed midway through the update service pointers step and the algorithm was not atomic. Under such a scenario, there would be VM instances communicating to both new and old service VM instances which would result in data loss. However, when the consolidation\/split process fails with atomicity, the cloud is reverted to the state before the consolidation\/split occurred. Thus, preventing any inconsistencies.","In addition, under the embodiments recited herein, VM instances can be pooled. Service VM instances consolidations can incorporate the concepts of SLA terms in two distinct ways, each with their own benefits. Under one method, VM instances with differing SLA terms are pooled into the same service VM instances pool. This method groups VM instances into service VM instances pools with differing SLA terms. The idea is that high-value SLA VM instances would be able to consume the lower-value SLA VM instances' resources within the same pool as needed. When the high-value SLA VM instances do not require the resources however, the lower-value SLA VM instances would be free to use those resources without interfering with the high-value SLA VM instances. Under an alternate method, VM instances with similar SLA terms can be pooled into the same service VM instances pool. This latter method keeps all low-value SLA VM instances in the same service VM instances pool and all high-value SLA VM instances in another. By doing this, a cloud management system would be able to direct the majority of its resources to the high-value SLA service VM instances pool while the low-value SLA pools could have lower priority.","To increase the security while using a proxy configuration, deep packet inspections can be used in order to ensure port misuse does not occur. For instance, when DB2 VM instances are being consolidated, DB2 traffic must be passed through the proxy server to the VM instances where those services will now be available. As all access to those services will be through the proxy, deep packet inspection can be used to verify that the data being transmitted back and forth is reasonable under the assumption that the packets are DB2 traffic.","This section will utilize the above-referenced teachings within the confines of a consolidation operation. It is understood that a similar process could be utilized for a splitting operation. In this example, once a consumer (e.g., a cloud consumer) decides which VM instances to consolidate, the consolidation process can begin. It is further noted that this consolidation algorithm utilizes a consolidation service to exist in a virtual image template which can then be used by the cloud management software to do the following.","VM instancesTemplateInstance Instance;","VM instancesTemplateInstance instance;","Instance.incorportateServicesRunningOn (instance).","This functionality can be implemented through a service on a particular port of the VM instance which will take another instance of the same type's access information such as IP address and password. With this information, all the services running on instance  will, after consolidation, be running on instance . The cloud will then be able to delete instance  as all services are now provided on instance . It will be in the best interest of the cloud image provider to implement this consolidation API since images which do will be more attractive to cloud consumers because of the increased consolidation flexibility.",{"@attributes":{"id":"p-0097","num":"0156"},"figref":"FIG. 9","b":["200","1","2","2","1","2","1","2","2","1","2"]},"Before the consolidation algorithm is explained in greater detail, an explanation will be given for the \u201cUpdate Service Connections\u201d (e.g., step ). Specifically, there are at least two implementations for step . The first is a straightforward direct update of all the existing service connections using the provisioning topology. The second, however, requires that a customer-wide proxy be used for each type of service VM instances. The proxy VM instances act similar to a DNS directory for accessing services. While this may result in increased overhead with the extra VM instances, it enables simpler consolidation and enables consolidation in environments where the original provisioning topology is not accessible. The following algorithm describes how to consolidate VM instances using the aforementioned direct and proxy methods.","Inputs:",{"@attributes":{"id":"p-0099","num":"0000"},"ul":{"@attributes":{"id":"ul0023","list-style":"none"},"li":{"@attributes":{"id":"ul0023-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0024","list-style":"none"},"li":["1. VM instance =The VM instances which will host all service after the consolidation.","2. VM instance =the VM instances whose services will be transferred to VM instances .\n\nAlgorithm Steps:\n","1. Open selective access between projects: Since VM instances  will need to access VM instances  and the VM instances in VM instances 's project will now need to talk to VM instances , a pinhole must be opened between the VLANs to allow for cross-communication. This can be done by configuring the networking firewalls in a similar way to when the VLANS are set up initially. (Note: this step is not necessary if VM instances  and VM instances  are in the same project.)","2. Copy VM instances 's service into VM instances : From the Cloud Management software, connect to VM instances) on the consolidation service listening on a specified VM instances  port. Over this connection, provide the necessary information for VM instances  to log into VM instances . This will initiate the service consolidation code written by the image provider to connect to VM instances  and pull\/propagate over all information necessary to continue VM instances 's services on VM instances . This consolidation process may include increasing VM instances 's resources to accommodate VM instances 's services.","3. a) Update service connections (direct connection): Since the VM instances in VM instances 's project have access to VM instances  via the previously opened pinholes, all the service connections can now be updated. Using a topological approach (e.g., Zepher) which was used to create VM instances 's project, obtain a list of VM instances which are connected to VM instances . Rerun the initial configuration workflow for each of these VM instances and pass the access information for VM instances . This update will change all VM instances  pointers to VM instances  instead. An example of the direct connection approach is shown in . Both Figs. show domain , projects A-B, VM instances A-N, and project DBs  and . In , each VM instance A-N is connected to a project DB  and  within the project A-B with which the VM instances A-N are associated. In , the VM instances C-N in project B are disconnected from project DB  and instead directly connected to project DB  in project A.\n        \n        ","4. Delete VM instances : Once all the services previously running on VM instances  have been transferred over to VM instances  and all VM instances  pointers have been changed, VM instances  can safely be deleted."]}}}},"Referring now to , a method flow diagram according to an embodiment of the present invention is shown. After the processes is started in step S, it is determined in step S whether a set of VM instances will identifying based upon a performance of the set of VM instances with respect to a set of service level agreement (SLA) terms. If not, the set of VM instances will be identified based upon a commonality of an entity associated with the set of VM instances in step S. In either event, once the set of VM instances that are candidates for optimization (e.g., reconfiguration) are identified, it will be determined in step S whether the optimization of the set of VM instances will occur via a consolidation operation. If so, the set of VM instances are consolidated in step S before the processes is ended in step S. However, if consolidation operation does not occur, optimization will occur via a split operation in step S before the process is ended in step S.","While shown and described herein as a VM instance optimization solution, it is understood that the invention further provides various alternative embodiments. For example, in one embodiment, the invention provides a computer-readable\/useable medium that includes computer program code to enable a computer infrastructure to provide VM instance optimization functionality as discussed herein. To this extent, the computer-readable\/useable medium includes program code that implements each of the various processes of the invention. It is understood that the terms computer-readable medium or computer-useable medium comprise one or more of any type of physical embodiment of the program code. In particular, the computer-readable\/useable medium can comprise program code embodied on one or more portable storage articles of manufacture (e.g., a compact disc, a magnetic disk, a tape, etc.), on one or more data storage portions of a computing device, such as memory  () and\/or storage system  () (e.g., a fixed disk, a read-only memory, a random access memory, a cache memory, etc.).","In another embodiment, the invention provides a method that performs the process of the invention on a subscription, advertising, and\/or fee basis. That is, a service provider, such as a Solution Integrator, could offer to provide VM instance optimization functionality. In this case, the service provider can create, maintain, support, etc., a computer infrastructure, such as computer system  () that performs the processes of the invention for one or more consumers. In return, the service provider can receive payment from the consumer(s) under a subscription and\/or fee agreement and\/or the service provider can receive payment from the sale of advertising content to one or more third parties.","In still another embodiment, the invention provides a computer-implemented method for VM instance optimization. In this case, a computer infrastructure, such as computer system  (), can be provided and one or more systems for performing the processes of the invention can be obtained (e.g., created, purchased, used, modified, etc.) and deployed to the computer infrastructure. To this extent, the deployment of a system can comprise one or more of: (1) installing program code on a computing device, such as computer system  (), from a computer-readable medium; (2) adding one or more computing devices to the computer infrastructure; and (3) incorporating and\/or modifying one or more existing systems of the computer infrastructure to enable the computer infrastructure to perform the processes of the invention.","As used herein, it is understood that the terms \u201cprogram code\u201d and \u201ccomputer program code\u201d are synonymous and mean any expression, in any language, code, or notation, of a set of instructions intended to cause a computing device having an information processing capability to perform a particular function either directly or after either or both of the following: (a) conversion to another language, code, or notation; and\/or (b) reproduction in a different material form. To this extent, program code can be embodied as one or more of: an application\/software program, component software\/a library of functions, an operating system, a basic device system\/driver for a particular computing device, and the like.","A data processing system suitable for storing and\/or executing program code can be provided hereunder and can include at least one processor communicatively coupled, directly or indirectly, to memory elements through a system bus. The memory elements can include, but are not limited to, local memory employed during actual execution of the program code, bulk storage, and cache memories that provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution. Input\/output and\/or other external devices (including, but not limited to, keyboards, displays, pointing devices, etc.) can be coupled to the system either directly or through intervening device controllers.","Network adapters also may be coupled to the system to enable the data processing system to become coupled to other data processing systems, remote printers, storage devices, and\/or the like, through any combination of intervening private or public networks. Illustrative network adapters include, but are not limited to, modems, cable modems, and Ethernet cards.","The foregoing description of various aspects of the invention has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed and, obviously, many modifications and variations are possible. Such modifications and variations that may be apparent to a person skilled in the art are intended to be included within the scope of the invention as defined by the accompanying claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["These and other features of this invention will be more readily understood from the following detailed description of the various aspects of the invention taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 14"}]},"DETDESC":[{},{}]}
