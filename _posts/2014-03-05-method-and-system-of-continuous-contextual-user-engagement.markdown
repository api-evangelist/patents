---
title: Method and system of continuous contextual user engagement
abstract: In one exemplary aspect, a contextual user engagement system for automatically engaging in a conversation with a user is provided. A context manager manage, with at least one processor, the context of the conversation with a user. The context manager receives a user utterance, wherein the context manager calls the other modules of the contextual user engagement system to obtain information with respect to the user utterance. The context manager maintains a context object for a conversation with a user. The context manager automatically updates the context object based on an information detected by the other modules of contextual user engagement system. A content knowledge database stores a content knowledge of the contextual user engagement system. The content knowledge includes a history of interactions with the user. An information extraction engine extract information from a specified source based on a set of rules.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09460155&OS=09460155&RS=09460155
owner: 
number: 09460155
owner_city: 
owner_country: 
publication_date: 20140305
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","Exemplary System","Exemplary Processes","Additional Exemplary Environment and Architecture","Example User Interfaces","Additional Example Implementations","CONCLUSION"],"p":["This application claims priority to U.S. provisional patent application No. 61\/773,145 filed on Mar. 6, 2013. This application also claims priority to U.S. provisional patent application No. 61\/948,489 filed on Mar. 5, 2014. These applications are incorporated herein by reference.","1. Field","This application relates generally to natural language user interfaces, for domains such as expense management, enterprise mobility and e-commerce, and more specifically to a system, article of manufacture and method of continuous contextual user engagement.","2. Related Art","The increasing functionality of electronic devices, such as smart phones, is leading to a significant increase in their popularity. In turn, these trends are leading to an increase in the number and types of software applications that are available for use on these electronic devices. Users often utilize electronic devices to request services from applications. Increasingly natural language user interfaces are available to interact with various applications. Natural language user interfaces can perform such functions as recommendations and delegate requests to a set of services (e.g. search queries of databases or the Internet). Accordingly, a contextual user engagement system for automatically engaging in a conversation can increase user satisfaction with natural language user interfaces.","In one aspect, a contextual user engagement system for automatically engaging in a conversation with a user is provided. A context manager manages, with at least one processor, the context of the conversation with a user. The context manager receives a user utterance, wherein the context manager calls the other modules of the contextual user engagement system to obtain information with respect to the user utterance. The context manager maintains a context object for a conversation with a user. The context manager automatically updates the context object based on information detected by the other modules of contextual user engagement system. A content knowledge database stores a content knowledge of the contextual user engagement system. The content knowledge includes a history of interactions with the user. An information extraction engine extracts information from a specified source based on a set of rules. A contextual topic engine extract topics and entities from text provided by a user based on a specified semantic model. A discourse manager provides an interactive dialog with the user. A natural language generation module generates an explanation for results and appropriate utterances to be communicated to the user. An inference engine infers a fact or a user intent based on at least one of an inference rules, the specified semantic model or a set of information in the context object. An Execution Engine creates a query plan for the query engine to execute. The query engine contains connectors for SQL\/NoSQL databases, Enterprise Systems such as Oracle and ERP, an API engine and an engine for analyzing unstructured data.","The Figures described above are a representative set, and are not an exhaustive with respect to embodying the invention.","Disclosed are a system, method, and article of continuous contextual user engagement. The following description is presented to enable a person of ordinary skill in the art to make and use the various embodiments. Descriptions of specific devices, techniques, and applications are provided only as examples. Various modifications to the examples described herein may be readily apparent to those of ordinary skill in the art, and the general principles defined herein may be applied to other examples and applications without departing from the spirit and scope of the various embodiments.","Reference throughout this specification to \u201cone embodiment,\u201d \u201can embodiment,\u201d \u201cone example,\u201d or similar language means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, appearances of the phrases \u201cin one embodiment,\u201d \u201cin an embodiment,\u201d and similar language throughout this specification may, but do not necessarily, all refer to the same embodiment.","Furthermore, the described features, structures, or characteristics of the invention may be combined in any suitable manner in one or more embodiments. In the following description, numerous specific details are provided, such as examples of programming, software modules, user selections, network transactions, database queries, database structures, hardware modules, hardware circuits, hardware chips, etc., to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art can recognize, however, that the invention may be practiced without one or more of the specific details, or with other methods, components, materials, and so forth. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.","The schematic flow chart diagrams included herein are generally set forth as logical flow chart diagrams. As such, the depicted order and labeled steps are indicative of one embodiment of the presented method. Other steps and methods may be conceived that are equivalent in function, logic, or effect to one or more steps, or portions thereof, of the illustrated method. Additionally, the format and symbols employed are provided to explain the logical steps of the method and are understood not to limit the scope of the method. Although various arrow types and line types may be employed in the flow chart diagrams, and they are understood not to limit the scope of the corresponding method. Indeed, some arrows or other connectors may be used to indicate only the logical flow of the method. For instance, an arrow may indicate a waiting or monitoring period of unspecified duration between enumerated steps of the depicted method. Additionally, the order in which a particular method occurs may or may not strictly adhere to the order of the corresponding steps shown.","It is noted that data may be sampled in various locations and different time periods according there are several methods which may be used to select a proper sample size and\/or use a given sample to make statements (within a range of accuracy determined by the sample size) about a specified population. These methods may include, for example:","1. Classical Statistics as, for example, in \u201cProbability and Statistics for Engineers and Scientists\u201d by R. E. Walpole and R. H. Myers, Prentice-Hall 1993; Chapter 8 and Chapter 9, where estimates of the mean and variance of the population are derived.","2. Bayesian Analysis as, for example, in \u201cBayesian Data Analysis\u201d by A Gelman, I. B. Carlin, H. S. Stem and D. B. Rubin, Chapman and Hall 1995; Chapter 7, where several sampling designs are discussed.","3. Artificial Intelligence techniques, or other such techniques as Expert Systems or Neural Networks as, for example, in \u201cExpert Systems: Principles and Programming\u201d by Giarratano and G. Riley, PWS Publishing 1994; Chapter 4, or \u201cPractical Neural Networks Recipes in C++\u201d by T. Masters, Academic Press 1993; Chapters 15, 16, 19 and 20, where population models are developed from acquired data samples.","A system and method that continuously engages the user to accomplish a wide range of tasks (e.g. refining search queries to find of information of interest, refining a plan to be executed such as party planning, filling complex expense forms, finding meeting rooms, querying enterprise systems such as expense management, financial systems and customer relationship management, etc.). The system can utilize rule based and statistical natural language processing (NLP)\/natural language understanding (NLU) approaches to parse and understand the user's requests in natural language. As used herein NLP functionalities can include machine learning functionalities (e.g. statistical machine learning functionalities) to process natural language information.","As used herein, NLU can include various methods of machine reading comprehension. For example, the system can include a lexicon of the language and a parser and\/or grammar rules to break sentences into an internal representation. The system can also include semantic theory functionalities to guide comprehension and interpretation capabilities. Semantic theory functionalities can include, inter alia: naive semantics, stochastic semantic analysis and\/or pragmatics to derive meaning from context.","Rich semantic models and ontologies can also be utilized to reason about and infer additional context and information left implicit by the user. Discourse management techniques to guide the engagement with the user by asking questions in natural language to obtain clarification and\/or additional information (e.g. not communicate) to perform the task at hand. System modules can communicate with and maintain facts based on ongoing dialog with the user in a context knowledge base.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 1","b":["100","100","102","102","102","100","102","102","100","106","122","106"]},"Information extraction engine  can extract information from various sources based on a set of rules and\/or patterns. For example, probabilistic information extraction rule engine  can extract complex attributes and\/or facets from text based on specified information extraction rules and\/or patterns. Key features can include the ability of users to extend the probabilistic information extraction rule engine  with domain specific rules and\/or patterns . Users can also extend the probabilistic information extraction rule engine  by providing software code instructions for complex patterns. Probabilistic information extraction rule engine  can assign a probability to each extracted attribute feature based on such factors as number of occurrences, dealing with negation, etc. Information extraction engine  can extract complex attributes and facets from text (e.g. user input) based on information extraction rules and patterns. Key features can include the ability of users to extend information extraction engine  with domain-specific rules and\/or patterns. Users can also extend information extraction engine  by writing code for complex patterns. Information extraction engine  can assign a probability to each extracted attribute feature (e.g. a confidence value as provided in  infra) based on number of occurrences, dealing with negation etc.","Contextual topic engine  can extract topics and\/or entities from text based on semantic ontologies and models. Key features can include the concept of semantic \u2018breadcrumbs\u2019. Semantic breadcrumbs can leverage the information in the context object to determine a most likely entity to be extracted and\/or deal with negation. In one example, a user utterance can include a generic word, which can map to more than one candidate concepts. The contextual topic engine can use semantic matching between the context object and the candidate topics to identify the most likely topic. For example, the user may say\u2014\u201cI want helmets\u201d. The contextual topic engine can determine a number of candidate topics (e.g. baseball helmet, football helmet, bike helmet, etc.). The contextual topic engine can utilize semantic similarity between the context object and the candidate topics to determine a most likely topic. If the user had mentioned \u201cI like football\u201d in an earlier statement, the contextual topic engine can select \u201cfootball helmet\u201d from the candidate topics. However, in the event no semantic match is determine then all the topics can be returned.","Discourse manager  can provide an interactive dialog with the user. Discourse manager  can be configured by specifying a set of states and rules . Discourse manager  can be used to generate and manage and interactive dialog with the users. In one example, discourse manager  can follow a mixed initiative dialog paradigm. For example, discourse manager  can starts with asking questions, but users can change the dialog direction. Discourse manager  can understand the user even when the user enters input about details he was not asked about yet. The system designer can configure discourse manager  by specifying a set of states and scripts. At every query from the user, discourse engine  can check to see whether there are any states whose triggers evaluate to true by evaluating the facts in the context knowledge base. If there are any such states of one of them is executed and the appropriate dialog is shown to the user. If the state being executed has a response\/verify construct then the discourse engine stays in the same state until it verifies the response, otherwise it goes back to evaluating which state to next evaluate. Discourse manager  can also include a help of a script specifies a set of states to be executed when a certain trigger evaluates to true. A discourse state can be of form: {trigger: t, dialog: d, responseVerify: rv, standalone: [T\/F], repeat: [T\/F]}. The discourse state can become ready to be executed if all assertions in trigger \u2018t\u2019 are true in the context knowledge base. Dialog \u2018d\u2019 is used to specify a set of equivalent alternative dialogues to be shown to the user when the state is executed. \u2018responseVerify\u2019 variable \u2018rv\u2019 can specifies a set of patterns for each specific response that the discourse manager  can be expecting from the user. \u2018standAlone\u2019 variable can be used to specify the state can be executed outside a script. \u2018repeat\u2019 can be used to specify whether a state can be repeated if the trigger still evaluates to true after the state has been executed once, signifying that the user did not provide the appropriate response.","An example of a trigger construct of discourse manager  is now provided. The trigger construct can include a set of assertions which evaluate to true for an assertion to be executed. Each assertion can be of form (attr=value|min_conf) pair with confidence at least min_conf value (e.g. as specified by a system administrator). Each trigger consists of a set of assertions and each assertion can a three-tuple <attr, val, min_conf>> consisting of: attribute (attr) (e.g. a name of the attribute); value (val) (e.g. the value of the attribute); and\/or minimum confidence (min_conf) (e.g. the assertion can have at least min_conf confidence in the context knowledge base). In one example, the trigger can evaluate to true when both the assertions also evaluate to true:\n\n","\u2018trigger\u2019:[{\u2018attr\u2019:\u2018groups_goodfor\u2019, \u2018val\u2019:None, \u2018min_conf\u2019:None}, {\u2018attr\u2019:\u2018event_type\u2019, \u2018val\u2019:\u2018birthday\u2019, \u2018min_conf\u2019:0.8}],","An example of a response-verify construct of discourse manager  is now provided. The response-verify construct can include a set of responses which discourse manager  can expect after a state is executed. Each response can be a three-tuple such as: <p, a, chain>. This example three-tuple can include pattern \u2018p\u2019 (e.g. the pattern of the response. Pattern \u2018p;\u2019 can be as the pattern construct in a rule-based NL engine. Action \u2018a\u2019 can include a set of assertions asserted in the context knowledge base when the state executes. Action \u2018a\u2019 can be the same as the action construct in a rule-based NL engine. Chain \u2018chain\u2019 can be the next state to be executed when the response is verified. In the example below, discourse manager  can expect a user to respond with either \u2018romantic\u2019 or \u2018honeymoon\u2019. When the user as expected, the \u2018vacation_type=romantic\u2019 can be asserted with confidence 1.0 and discourse manger  can transition to a subsequent state such as romantic_01.","\u2018response\u2019: [{pattern\u2019: \u2018romantic|honeymoon\u2019, \u2018action\u2019: [(\u2018valType\u2019:None, \u2018valXform\u2019:None, \u2018attr\u2019:\u2018vacation_type\u2019, \u2018val\u2019:\u2018romantic\u2019, \u2018confidence\u2019: 1.0)}],], \u2018chain\u2019: \u2018romantic 01\u2019.","Additional information about discourse engine  is provided in  infra.","Information and function (NLG) module  can generate explanations for results and appropriate utterances to be shown to the user NLG module  can generate natural language from a machine representation system such as a knowledge base or a logical form. NLG module  can convert a computer based representation into a natural language representation.","Inference engine  can infers new facts and\/or user intent based on inference rules  and\/or semantic models\/ontologies , as well as all the information in a context object. In some embodiments, inference engine  can be included in a semantic engine  that also includes a semantic reasoner (not shown).","Query engine  can include connector(s) for such entities as SQL\/NoSQL databases , an application programming interface (API) engine , an enterprise system connector  (such as Oracle and\/or ERP), and\/or an engine for analyzing unstructured data . The query engine  can generate a query plan based on the context object for the conversation and the configured data sources for that domain. The query plan can be represented using web services business process execution language (WS-BPEL). Query engine  can contain a rich set of connectors that allows it to connect to variety of data sources inside and outside the enterprise. The SQL\/NoSQL connector  can leverage open source technologies (such as Hibernate\u00ae, Apache Tomcat\u00ae, and\/or PyMongo\u00ae) to connect to relational databases and\/or non-relational databases. The SQL\/NoSQL databases  connector can provide the following capabilities, inter alia: declarative approach of specifying mappings; ability to assess data quality and automatically; generate data quality rules; ability to detect similar columns in relational databases. API engine  can provide various capabilities for API based services such as, inter cilia: calling both RESTful and SOAP-based services. APIs can be added for each domain, either as a list or in a proprietary semantic registry. APIs are ranked based on automated feedback from system. For example, for a category jewelry, if there are five (5) APIs then these can be ranked using various factors such as the number of results clicked by user and\/or number of results returned. APIs can be bound at run-time to execution plans created by execution engine  by querying the semantic registry. Results from different APIs for same node can be combined based on the query plan created by execution engine . These results can include: results ranked by API rank; results ranked by match to query; results for top three (3) ranked APIs for a particular category etc. An example of an API semantic registry is provided in  infra.","The engine for analyzing unstructured data  can implement the extraction of attributes from unstructured data. For a corpus, point-wise mutual information is used to find terms that occur in each other's context exclusively (with four (4) words of each other). If a certain term pair has a certain frequency, it can be flagged as a potential attribute. For example, unstructured data can be matched to user queries. Term frequency-inverse document frequency (TF-IDF) vectors can be created from unstructured data such as restaurant reviews. Terms that occur in semantic model are given higher weights. TF-IDF vectors can be created from user queries and\/or cosign similarity can be used to find reviews that are semantically close to the user query.","Enterprise system connector  can be based on creating semantic models for commonly used artifacts in enterprise systems. These models can have specific connectors for different existing enterprise systems including, but not limited to: SAP ERP\u00ae, Oracle ERP\u00ae, SalesForce CRM\u00ae, Microsoft Exchange, and\/or Sharepoint\u00ae. The semantic models can provide integrated access to various enterprise systems. The models can include the ability to capture constraints in a dynamic fashion. For example, the connector can automatically extract policies for each type of expense and makes it available to downstream applications. The system of  can be used for interacting with e-commerce systems and enterprise systems such as expense management and customer relationship management.",{"@attributes":{"id":"p-0052","num":"0053"},"figref":["FIGS. 2","FIG. 1","FIG. 1","FIG. 1","FIG. 1","FIG. 1","FIG. 1"],"b":["200","202","200","102","204","104","206","208","138","210","212","110","214","216","126","218","128","220","222","114","224","226"],"i":"o "},{"@attributes":{"id":"p-0053","num":"0054"},"figref":"FIG. 3","b":["300","302","300","304","306","308","310","300","312","312","300","304","300","314","314","316","300","304","300"]},{"@attributes":{"id":"p-0054","num":"0055"},"figref":["FIGS. 4","FIGS. 1-3","FIG. 5","FIG. 5","FIG. 4"],"b":["402","404","404","406","404","500","500"]},{"@attributes":{"id":"p-0055","num":"0056"},"figref":["FIG. 6","FIG. 4","FIG. 7"],"b":["600","600","104","700"]},"An example of an information extraction rule is now provided by way of example and not of limitation. It is noted that a pattern construct in an information extraction rule can have the following example operators:\n\n","These constructs can be combined linearly or recursively as is provided in the following examples:\n\n","The action construct can include a set of actions. Each action can asserts an (attribute=value|C) pair with a confidence \u2018C\u2019 in the context knowledge base when it is executed. Each action can be a five-tuple such as <attr, val, valType, valXform, conf>. The attribute (\u2018attr\u2019) can have a value that is asserted when the action is executed. The value (val) of the attribute can be a primitive value such as a string or Boolean. The value can also be the value of variable (e.g. ?VAL_x) from the pattern construct. The value type (valType) can be a variable. The value type can be used to denote the type of the variable for the action to execute. For example, when the value type is \u2018Money\u2019, then the action is executed only the actual value of the variable is Money. When the value is a primitive, then value type can have the value \u2018None\u2019. When the value is a variable, then a value transform function (valXform) can be written to transform the value. Confidence (conf) can provide the confidence of the value.",{"@attributes":{"id":"p-0059","num":"0068"},"figref":["FIGS. 8","FIG. 8A"],"b":["800","802","800","800","804","802","800","806","800","804","802","806"]},"In , a user input(s)  such as string\u2014\u201cunder three years old\u201d\u2014can be received by rule-based natural language engine . Rule-based natural language engine  can apply rule  to user input(s) . \u2018KidAge\u2019 can be a function that returns true if the value of the variable that denotes a kids age in number or words (e.g., \u20182\u2019 or \u2018twelve\u2019). \u2018kid_x_age_words\u2019 can be a function that converts the child's age either in numerical digits or words to the child's age in numerical digits. Rule assertion  can be generated by rule-based natural language engine  using rule . For example, in the present example, any of the input strings of user input(s) , rule assertion  can be included in the context knowledge base as: (s_kids_age=3|1.0).","The same information may be extracted multiple times by the same rule over consecutive rounds of interaction with the user or by different IE rules over the same NL input. Some of them may be in positive context and others may be in negative context. The Statistical IE Rule Engine calculates confidence score for each variable. Confidence score for a variable f(I(vi)) is defined as follows:",{"@attributes":{"id":"p-0062","num":"0071"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"f","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":"I","mo":"\u2061","mrow":{"mo":["(",")"],"msub":{"mi":["v","i"]}}}}},{"mfrac":{"mn":"1","mrow":{"msub":{"mi":"log","mn":"2"},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":{"mo":["\uf603","\uf604"],"mrow":{"mi":"I","mo":"\u2061","mrow":{"mo":["(",")"],"msub":{"mi":["v","i"]}}}},"mo":"+","mn":"1"}}}},"mo":"\u2062","mrow":{"munder":{"mo":"\u2211","mrow":{"mi":"v","mo":"\u2208","mrow":{"mi":"I","mo":"\u2061","mrow":{"mo":["(",")"],"msub":{"mi":["v","i"]}}}}},"mo":"\u2062","mrow":{"mrow":[{"mi":"\u03b1","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"v"}},{"mi":"C","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"v"}}],"mo":"\u2062"}}}],"mo":"="}}}},"The elements of this equation can be defined as follows. C(\u03bd) can be the confidence in the information-extraction rule that extracted the attribute-value pair from the user's NL input, \u03b1(\u03bd) can be an indicator function for whether a particular value occurred within a negated context.",{"@attributes":{"id":"p-0064","num":"0073"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"\u03b1","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"v"}},{"mo":"{","mtable":{"mtr":[{"mtd":{"mrow":{"mn":"1","mo":",","mrow":{"mrow":{"mi":"if","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mrow":{"mi":"N","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"v"}}},"mo":"=","mi":"F"}}}},{"mtd":{"mrow":{"mrow":[{"mo":"-","mn":"1"},{"mrow":{"mi":"if","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mrow":{"mi":"N","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"v"}}},"mo":"=","mi":"T"}],"mo":","}}}]}}],"mo":"="}}}},"I(vi) is the collection of all occurrences of the value vi extracted from the user's NL input. Moreover, when a value occurs within a negated context, the confidence of the IE rule used to extract the value can be adjusted accordingly based on the following equation:",{"@attributes":{"id":"p-0066","num":"0075"},"maths":{"@attributes":{"id":"MATH-US-00003","num":"00003"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"msub":{"mi":["C","N"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"v"}},{"msup":{"mi":"\u2147","mrow":{"mo":["(",")"],"mrow":{"mfrac":{"mn":"1","mi":"N"},"mo":"-","mn":"1"}}},"mo":"\u2062","mrow":{"mi":"C","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"v"}}}],"mo":"="}}}},"As provided supra, a discourse manager (e.g. discourse manger ) can be used for interactive dialog with the users.",{"@attributes":{"id":"p-0068","num":"0077"},"figref":["FIG. 9","FIG. 1"],"b":["900","900","900","110"]},{"@attributes":{"id":"p-0069","num":"0078"},"figref":["FIG. 10","FIGS. 9-10"],"b":["1000","1000","1000"]},{"@attributes":{"id":"p-0070","num":"0079"},"figref":"FIG. 11","b":["1100","1100","1100","1100"]},{"@attributes":{"id":"p-0071","num":"0080"},"figref":"FIG. 11","b":["1100","1102","1104","1106","1108","1110","1112","1106","1114","1116","1118","1118","1120","1122","1100","1100","1114","1100"]},{"@attributes":{"id":"p-0072","num":"0081"},"figref":"FIG. 12","b":["1200","1200","1202","1202","1200","1204","1204","1202","1204","1200","1210","1202","1204","1202","1206","1202","1204","1208","1204"]},{"@attributes":{"id":"p-0073","num":"0082"},"figref":["FIGS. 13-20","FIG. 13","FIG. 14","FIG. 13","FIG. 15","FIG. 16","FIGS. 17 and 18","FIG. 19","FIG. 20"],"b":["100","100","100","100","100","100","100"]},{"@attributes":{"id":"p-0074","num":"0083"},"figref":"FIG. 21","b":["2100","2100","2100"]},{"@attributes":{"id":"p-0075","num":"0084"},"figref":["FIG. 22","FIG. 22"],"b":["2202","2204","2204","2206","2208","2202","2210","2206","2208"]},{"@attributes":{"id":"p-0076","num":"0085"},"figref":"FIG. 23","b":["2302","2310"]},{"@attributes":{"id":"p-0077","num":"0086"},"figref":"FIG. 24","b":["134","134","2402","2402","2404","2408","2402"]},"Although the present embodiments have been described with reference to specific example embodiments, various modifications and changes can be made to these embodiments without departing from the broader spirit and scope of the various embodiments. For example, the various devices, modules, etc. described herein can be enabled and operated using hardware circuitry, firmware, software or any combination of hardware, firmware, and software (e.g., embodied in a machine-readable medium).","In addition, it may be appreciated that the various operations, processes, and methods disclosed herein can be embodied in a machine-readable medium and\/or a machine accessible medium compatible with a data processing system (e.g., a computer system), and can be performed in any order (e.g., including using means for achieving the various operations). Accordingly, the specification and drawings are to be regarded in an illustrative rather than a restrictive sense. In some embodiments, the machine-readable medium can be a non-transitory form of machine-readable medium."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present application can be best understood by reference to the following description taken in conjunction with the accompanying figures, in which like parts may be referred to by like numerals.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIGS. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 4"},"An example description of an operating principle of a context object update algorithm is provided in , according to some embodiments.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 8"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 13-20"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 24"}]},"DETDESC":[{},{}]}
