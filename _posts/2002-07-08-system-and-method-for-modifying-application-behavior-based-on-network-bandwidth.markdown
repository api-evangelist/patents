---
title: System and method for modifying application behavior based on network bandwidth
abstract: A system and method facilitate modifying behavior of an application coupled to a device and a server based on bandwidth. The method determines a first bandwidth state. A change is then detected from the first bandwidth state to a second bandwidth state. Subsequently, the behavior of an application is changed based on bandwidth parameters of the second bandwidth state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08516034&OS=08516034&RS=08516034
owner: Good Technology Software, Inc
number: 08516034
owner_city: Wilmington
owner_country: US
publication_date: 20020708
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCES TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE SPECIFIC EMBODIMENTS"],"p":["The present invention is related to the following, each of which is incorporated herein by reference in its entirety for all purposes:","U.S. patent application Ser. No. 10\/133,817, filed Apr. 24, 2002, entitled \u201cSystem and Method for Automatically Updating a Wireless Device;\u201d","U.S. patent application Ser. No. 10\/171,048, filed Jun. 12, 2002, entitled \u201cInformation Repository System Including a Wireless Device and Related Method;\u201d and","U.S. Provisional Patent Application Ser. No. 60\/384,642, filed May 31, 2002, entitled \u201cSystem and Method for a Request Queue for a Wireless Device,\u201d now abandoned.","1. Field of the Invention","The present invention relates generally to wireless communications, and more particularly to a system and method for modifying application behavior based on network bandwidth.","2. Background of the Invention","A variety of businesses have embraced wireless solutions. Enterprise workforces are increasingly mobile and accordingly require access to time-critical data while away from the office. Further, increased globalization and competition requires companies to be more accessible and responsible. Using wireless-enabled \u201csmart devices,\u201d mobile workers can make more efficient use of their out-of-office time, thus producing cost savings. Similarly, real-time responsiveness to customer requests may differentiate one enterprise from a competitor, resulting in greater revenue via increased customer sales. Wireless technology provides flexibility with respect to time and place of work to workers in today's market.","Due to the numerous advantages outlined above, wireless technology has been rapidly adopted by enterprises. Increasingly, wireless devices can provide mobile professionals access to corporate resources and applications that are already available to them on desktops. However, handheld wireless device and network limitations can make those applications and resources difficult and expensive to access and use. For example, network bandwidth may change from location to location. One location may exhibit relatively high bandwidth network coverage over a relatively small area for a relatively high cost. Another location may exhibit lower network coverage over a larger area for a lower cost. Various other combinations of network coverage and cost are possible.","The present invention provides in various embodiments a system and method for modifying application behavior based on network bandwidth.","In a system according to one embodiment of the present invention, a system for modifying application behavior based on bandwidth is provided. The system comprises a device; a server coupled to the device; and an application coupled to the device and configured such that the application behavior changes based on bandwidth parameters of the device.","In a method according to another embodiment of the present invention, the method facilitates modifying behavior of an application coupled to a device and a server based on bandwidth. The method comprises determining a first bandwidth state. A change is then detected from the first bandwidth state to a second bandwidth state. Subsequently, the behavior of an application is changed based on bandwidth parameters of the second bandwidth state.","A further understanding of the nature and advantages of the inventions herein may be realized by reference to the remaining portions of the specification and the attached drawings.","As shown in the exemplary drawings wherein like reference numerals indicate like or corresponding elements among the figures, an embodiment of a system according to the present invention will now be described in detail. The following description sets forth an example of a system and method for updating a wireless device.","Detailed descriptions of various embodiments are provided herein. It is to be understood, however, that the present invention may be embodied in various forms. Therefore, specific details disclosed herein are not to be interpreted as limiting, but rather as a basis for the claims and as a representative basis for teaching one skilled in the art to employ the present invention in virtually any appropriately detailed system, structure, method, process or manner.","Wireless devices are widely used in today's world. Accordingly, there is a need for a variety of wireless solutions. The present system solves the problem of constantly synching one's wireless device with their fixed computing device by automatically forwarding information related to a change(s), such as an addition, a deletion, or any other modification to folders, subfolders, files etc., at the fixed computing device. Accordingly, a user can expect his or her wireless device to automatically be updated utilizing the system and method of the present invention.","One way the present system fulfills current needs is by adding push support to enterprise applications. Information related to updates is automatically pushed to users' wireless devices. Accordingly, workers are provided with up-to-date information without having to incessantly seek out such information. The present invention eliminates the need for manual synching, and assures that information is sent and received transparently.","Referring now to the drawings,  is a schematic drawing of an exemplary architecture in accordance with an embodiment of the present invention. In the example, origin server  is coupled to enterprise server  to allow for the exchange(s) of data between the two servers. Enterprise server  is coupled to push management module (PMM) , document management code module , and user interface code module . Further, data from enterprise server  may be forwarded to wireless device  via transmission medium  by way of a wide area network, such as Internet , as shown. Wireless device  includes browser . A wireless device may include any wireless device that communicates via a wireless network, such as a Palm Pilot\u2122, a \u201csmart phone,\u201d a RIM\u2122 device, etc. In one embodiment, wireless device  may be a portable wireless device. It is also contemplated that in alternative embodiments, other devices that may or may not be wireless may be used in accordance with embodiments of the present invention.","Enterprise server  may be representative of a server computer in an enterprise environment. For example, a corporation may provide wireless services to its employees utilizing the present system, including enterprise server . In an exemplary embodiment of the present invention, enterprise server  resides behind a corporate firewall to ensure the secure transmission of data.","Origin server  may represent any source of information external to a company hosting enterprise server  or internal to a company hosting enterprise server . Although origin server  is not requisite, such a server is often coupled to a company's enterprise server to provide information.","Enterprise server  is coupled to origin server  in the example shown to facilitate data exchange(s). However, enterprise server  may be coupled to any type of source suitable for use with the present system. Further, enterprise server  may serve as the primary origin of data, in which case it may not be coupled to any type of source server at all.","PMM  may represent a plug-in application, a general application program, or any other component of enterprise server  suitable for use with the present system. PMM  is software that attaches\/plugs-in to enterprise server  to provide basic push capabilities. PMM  makes it possible for an application to send secure messages to wireless device  without waiting for a user to send a request. Accordingly, useful information can be sent to the user's wireless device  in advance of when the information is needed or requested. Thus, when the user needs the information, the information is already present. Accordingly, no time is lost in sending a request (e.g., a hypertext transfer protocol (HTTP) request, etc.) from wireless device  to enterprise server  and waiting for data to return to wireless device . Further, the data on the user's wireless device  is the most up-to-date information available.","Document management code module  may also be a plug-in application, a general application program, firmware, or any other component associated with enterprise server  that is suitable for use with the present system. Document management code  communicates with PMM  in an exemplary embodiment according to the present invention.","PMM  may communicate the information to enterprise server  while providing an alert that information is being forwarded. Information can include documents, alerts or any other type of information suitable for use with the present system. For example, new files, deleted files, change(s) to files, directories, set of files, etc. Another such example is applications. The information may be forwarded to the server without any type of alert. Thus, the information can be sent transparently.","Further, the information may be sent as an alert to wireless device . Therefore, when the information arrives at the user's wireless device , the user is notified of its arrival. In one embodiment, in a similar way a user is notified of an electronic mail (E-mail) message. For example, if wireless device  is configured to beep three times for E-mail, it can do the same when information with an alert arrives. A notification may also be displayed on a screen of wireless device  when the information arrives. However, if no alert accompanies the information, the information can be saved as a message for viewing at a later time, but the user is not immediately notified of the arrival of the information (document, etc.) in this embodiment.","In an exemplary embodiment according to the present invention, user interface code module  is an application on enterprise server . However, user interface code module  may be an application residing elsewhere provided module  is coupled to enterprise server  via a network. For example, user interface code module  may reside on a user computer, a separate computer associated with the user such as a computer of an information technology (IT) manager, etc. As will be discussed in further detail, the user can modify existing files, add files, etc. utilizing user interface code module .","Utilizing enterprise server , PMM  forwards information to wireless device  via Internet , or another suitable network, by way of wireless transmission medium . PMM  can check for network connectivity and will transmit the information to wireless device  by way of enterprise server  when a connection is secured.","An exemplary system and method utilizing the architecture described herein will now be discussed. In a system and method according to one embodiment of the present invention, it is determined whether one or more changes have occurred to a set of files. The set of files may include a file system and\/or a directory structure. The set of files may reside on a server, a user computer, and\/or a separate computer associated with the user (e.g., a computer of a manager of the user company, etc.). The one or more changes to the set of files may include adding a file to the set of files, deleting a file from the set of files, modifying a file in the set of files, or changing the set of files themselves, such as by renaming a file, etc. The set of files includes one or more files. Information related to the one or more changes is received and automatically forwarded to wireless device . In one embodiment, a unique identifier is assigned to the information related to the one or more changes. Further, the information associated with the one or more changes can be manipulated. One or more files on wireless device  are automatically updated to reflect the one or more changes in the set of files utilizing the information. One specific exemplary implementation of such functionality will be set forth with reference to . In one embodiment, a notification of the one or more changes is forwarded to wireless device .","In another embodiment, the set of files are periodically accessed in order to determine whether the one or more changes to the set of files has occurred. In another embodiment, it may be determined whether the one or more changes to the set of files is related to a predetermined group associated with the set of files (e.g., sales division, engineering department, etc.). The information associated with the one or more changes can then be conditionally forwarded to the wireless device based on the predetermined group (e.g., technical specifications are only forwarded to users that are part of the engineering department).","As discussed herein, the change(s) may include, inter alia, modifying the one or more files in the set of files, in which case the modified file can be re-pushed to wireless device  with the same unique identifier (such as a global unique identifier (GUID), etc.). The modified file may essentially overwrite the previously un-modified file. Thus, the modifications to the one or more files essentially creates a new file that replaces the one or more existing files.","Notification of the change(s), or any other type of change(s), may be forwarded to enterprise server . Further, notification of the change(s) and the update associated with the change(s) may be forwarded to the user via wireless device  associated with the user, or any other user interface, such as a computing device of the IT manager, etc. Enterprise server  and\/or the user may register with the set of files to be notified of a change(s) to the set of files. In one embodiment, enterprise server  periodically accesses the set of files in order to determine whether a change(s) to the one or more files in the directory has occurred. In an alternative embodiment, enterprise server  is adapted for manipulating the information associated with the change(s), such as processing the information by changing its configuration, adding headers to the information, or any other type of manipulation of the information that may be suitable. In another embodiment, one or more modules are associated with enterprise server  for manipulating the information.","As discussed herein, a unique identifier (e.g., GUID, etc.) may be assigned with the information associated with the change(s). Assignment of a unique identifier may be done for tracking purposes, for example. As noted, a new unique identifier may be associated with a new or existing file, or an existing unique identifier may continue to be associated with an existing file, even though the existing file may be modified and replaced by the modified file.","In further keeping with some embodiments according to the present invention,  is a schematic diagram illustrating exemplary architecture of enterprise server  in relation to other elements that may be associated therewith. As previously discussed, enterprise server  may be connected to origin server , as well as PMM .","Enterprise server  may include multiplexer (MUX) module  for multiplexing data signals. Module platform  and communication interface module  may also be included as part of enterprise server . Module platform  may be connected to various additional modules. In , PMM  and Access Control Module (ACM)  are illustrated as examples of modules that may be connected to module backplane  of enterprise server . ACM  controls what areas of an application\/web site are accessible by what users. The modules may include databases associated therewith, such as databases  and  indicated in . An example of Secure ID database  may include Lightweight Directory Access Protocol (LDAP), for example. As discussed herein, PMM  may be responsible for notifying document management code module  of a change(s) to the set of files.","Communications interface module  may include and\/or be coupled to adaptor  for communicating with wireless device . An example of such an adaptor is commonly known as \u201cMobitex.\u201d Communication to wireless device  may be accomplished utilizing another type of adaptor, such as user datagram protocol (UDP)  via the Internet , utilizing Internet protocol (IP), or by any other suitable means.","MUX module  may represent a hard-wired module with direct connectivity to some type of source, such as origin server  shown in . Further, information flows to and from MUX module  from communication interface  and may be manipulated by module backplane , which may include various modules, as discussed herein.","PMM  monitors ports for pushing requests. Information may be pushed from document management code module  to wireless device  via PMM  and enterprise server . Conversely, wireless device  may provide information to user interface code module  via document management code module , which may receive the information from enterprise server  via PMM .","Document management code module  is capable of communicating with any PMM . For example, PMM  of a server other than enterprise server  may receive communications from document management code module .","In one embodiment, the set of files includes a file system that in turn includes one or more directory structures. The directory structures can be created either on enterprise server  directly, or via user interface code module . The directory structures may include a hierarchical structure, including folders, subfolders, etc. For example, a form library may be organized utilizing the directory structure(s). When a user adds to, deletes, or otherwise modifies files within the directory structure(s), the activity is communicated to document management code module . Document management code module  may utilize PMM  to provide an alert associated with information relating to the addition and\/or modification, or the information may be transmitted transparently, without using an alert. PMM  forwards the information to enterprise server , which sends the updated information to a wireless device of the user, such as wireless device . Browser  on wireless device  monitors communications related to the information. Accordingly, one or more files on wireless device  are automatically updated with the information that has been pushed to wireless device  via enterprise server .","Referring now to , an exemplary directory structure  is illustrated in accordance with an embodiment of the present invention. As indicated in , group's folder  may include various subfolders, such as engineering subfolder , sales subfolder , users subfolder  and devices subfolder . Groups folder  may include subfolders further including predetermined groups, for example, as discussed herein.  also illustrates that the subfolders , ,  and  may include further subfolders. For example, the users folder  may include folders for Andy , Bob  and Carl . The folders may include user lists for forwarding updated information to users on the list. Various other folders and subfolders may be included. As another example, a subfolder labeled \u201cAll\u201d may be included, the subfolder including files pertaining to all users. In a typical user interface environment, a user may drag and drop a file from one folder to the next, or from an outside source into a folder within directory structure . A user may also drag and drop folders and subfolders. When such a folder is moved or added, or a file within directory structure  is otherwise modified, the information is transmitted to one or more wireless devices, such as wireless device , associated with the user in order to update the one or more wireless devices.","Each folder has associated with it a set of wireless devices  that will receive updates. This association is stored in a configuration file or database. In one embodiment, as long as the association is maintained, changing the name of a directory does not need to change which wireless devices  are associated with which directory. Often, however, the interface code will maintain logical mapping between the folder names and which wireless devices  the folder is associated with. For example, the user name might be the same as the folder name. In that case, if the folder name changes then the folder would be associated with a different user name. This kind of mapping is not necessary, however.","As discussed herein, a set of files may include a file system and\/or directory structure, such as directory structure . Generally, file systems and directory structures represent user interaction modes. Any mode of user interaction suitable for use with the present system may be employed. For example, a web interface, file transfer protocol (FTP) interface, a machine-to-machine interface, such as simple object access protocol (SOAP), etc., may also be utilized to enable user interaction.","In order to update wireless device  of the user, the nature of the change(s) to the set of files is determined.  illustrates how a change(s) to one or more files in directory structure  associated with a file system on enterprise server  are determined. In , the illustration exemplifies a set of files that includes a file system, the file system creating a directory structure, referred to simply as a directory in . A flowchart illustrating a process for identifying a change(s) to the one or more files in the directory in accordance with an embodiment of the present invention is shown.","At step , the user registers with the file system, via a user interface, such as user interface code module , to be notified of a change(s). At step , the file system sends notification of a change(s) to the one or more files in directory structure . At step , user interface code module  determines what change(s) has occurred to directory structure  by consulting database . At step , a message is sent to the server with the new or updated file information. At step , it is determined whether a new file was added. If a new file was added, a unique identifier is assigned and the database is updated therewith at step . The updated information is forwarded to the device via PMM , or any other suitable push mechanism, at step . If a new file was not added, the database is updated with the information associated with the change(s) at step , and the information is forwarded to wireless device  at step .","The process described above is a notification process. Thus, when a user makes a change(s) that affects directory structure , the file system notifies enterprise server  of the change(s). This alert indicates to enterprise server  that action can be taken in response to the change(s). In other words, enterprise server  can determine the nature of the change(s) that occurred and forward the change(s) to wireless device  of the user.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 5","FIG. 4"],"b":["502","104","300","504","506","300","300","507","510","512","116","514","106","516","116","514"]},"As previously discussed herein, directory structure  may be created on enterprise server . However, directory structure  may also be created on a computer of the user, or a computer otherwise associated with the user, such as the computer of a manager employed by, affiliated with, etc., a user company, for instance. Where directory structure  is created on a user company computer and it resides on the user company computer, the file system will check directory structure  on the user computer company computer for a change(s) and the file system will notify enterprise server  of a change(s) to directory structure .",{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 6","FIG. 6","FIG. 6"],"b":["116","602","604","606","608","116","610","602","104","602","604","116","612","604","614","616","604","620","116","602"]},"It should be noted that this is just one exemplary implementation. Other implementations are possible. For example, PMM  can send the messages directly instead of sending a signal and letting the client retrieve the messages.","At step , the information may be stored and\/or updated with the assigned unique identifier in document storage area  on wireless device . Optionally, a notification may be forwarded to the user at step  via user interface  on wireless device  and\/or a user interface on a fixed computing device. This notification may indicate that the information has been forwarded to wireless device . Such notification may alert the user that wireless device  of that user has been updated in accordance with new or modified information on the fixed computing device of the user.","As discussed herein, PMM  may receive the information and send a push notification to each wireless device  that is to receive the information. Transmission of the information can be secured by encrypting it and sending it to wireless device  using a technology such as transport layer security (TLS) or wireless transport layer security (WTLS).","If PMM  does not receive a request from wireless device  for the information (e.g. documents, messages) waiting, PMM  may resend the notification. The time intervals for resending a notification may be specified. Other conditions for resending the notification may also be specified. These conditions include resending the notification when wireless device  comes back into coverage, when wireless device  is turned back on, when a new message arrives at PMM , etc.","A new or additional wireless device  may also be provisioned utilizing a system and method according to the present system. For example, the user may synchronize a new or additional wireless devices with a fixed computing device of the user. In this scenario, the server may recognize all of the files in the file system as new files and replicate them on wireless device  of the user. Accordingly, each file may be assigned a unique identifier and the database may be updated with the information and the unique identifier.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 7","b":["116","702","704","300","706","300","708","300","710","712","714","716","116","718"]},"As discussed herein, a change(s) may include a modification to an existing file in directory structure , the addition of a new file, etc. Where the change(s) includes a change(s) to an existing file in directory structure , the information forwarded may include information for replacing the previous file with a new file including the change(s) to the existing file. In other words, the change(s) may be used to overwrite the pre-existing file.","A notification of a change(s)s may be forwarded to the server to alert the server of change(s) to directory structure . Furthermore, a notification may be forwarded to a user associated with one or more wireless devices  that wireless device  has been updated. The notification may be forwarded to the user via wireless device  of the user and\/or the fixed computing device of the user. Enterprise server  may periodically access the file system in order to determine whether change(s) to directory structure  have been made. In this scenario, notification may not be forwarded to enterprise server  regarding the change(s) in directory structure . Rather, notification may be sent to the user of the change(s) or the information may be forwarded to wireless device  without notifying the user of the update.","As discussed herein, enterprise server  may include various modules for processing the information associated with the change(s). Enterprise server  can include a module backplane for connecting to the various modules.","Referring to , in one embodiment, information repository  resides on wireless device . It is contemplated that in alternate embodiments information repository  can reside elsewhere, however. Information repository  is used to house the set of files discussed herein, including information elements such as documents, alerts, pages, requests, responses and any other suitable information that is pushed to wireless device . In one exemplary embodiment, information repository  comprises sub-information-repositories , ,  and . Information repository  can comprise additional sub-information-repositories as well.","Pushed pages sub-information-repository  comprises pushed pages  that have been pushed to wireless device  from enterprise server . Pushed alerts sub-information-repository  comprises pushed alerts  that have been pushed to wireless device  from enterprise server . Saved pages sub-information-repository  comprises saved pages  that have been saved to wireless device , either automatically by a script or by a user. Requests and responses sub-information-repository  comprises requests  and corresponding responses  that have been pushed\/saved to wireless device . In one embodiment, the various information elements, including pushed pages , pushed alerts , saved pages , requests , responses , etc., comprise a mark-up language and a state (defined by variables). In one embodiment, each information element has a unique identifier associated therewith. This association can be useful for updating the information elements.","Pushed pages  are items that an application or a person wants to store directly on wireless device  via a push. Saved pages  are primarily user-initiated saves (although the saves can be initiated by an application). Since saved pages  are usually user-initiated they are usually the result of a particular request. For example, a user might save an information page that he or she looked up in a company directory, or the confirmation number from a stock order, etc.","As another example, pushed page  is pushed to wireless device  by an application. Pushed page  comprises a price list dated Apr. 2, 2002. Pushed page  has a unique identifier, 0050, associated therewith. On Apr. 9, 2002, the price list has been updated. A new pushed page , comprising the updated price list, is pushed to wireless device  with the same unique identifier of 0050. Consequently, new pushed page  comprising the April 9 price list overwrites pushed page  comprising the April 2 price list. This concept is discussed herein and referred to herein as \u201cunique identifier overwrite.\u201d","Pushed alerts  are similar to pushed pages , except for the fact that pushed alerts  are intended to be used for more transient objects and for the fact that a dialog box is displayed to a user, which shows the alert. In the case of pushed alerts , in one embodiment, the user sees a dialog box with alert  that has been pushed to pushed alerts sub-information-repository . A title of the alert is displayed along with a time of the alert. Actions can be taken, in some instances. For example, the alert is from a financial institution and states that the price of Acme Corporation stock dropped 20 points. The user is prompted as to whether he or she wishes to purchase shares of Acme Corporation.","Saved pages  are implemented when a user is interacting with an application and he or she wants to save what is on a screen of wireless device . Some examples of saved pages include stock quotes, information pages, news reports, etc. Another use of saved pages  is when a user is filling out a form. For example, a user causes an order entry form to be pushed to wireless device  and stored in pushed pages sub-information-repository  (in information repository ) as pushed page . Subsequently, the user brings up the form on wireless device  because he or she wants to enter an order. While the user is filling out the form, the user discovers that he or she does not have all of the information that the form requires. The user then saves, in saved pages sub-information-repository , the page containing the form with the current state of the form. The partially filled-out form is saved as saved page . The user can later retrieve the page containing the partially filled-out form, and then finish filling out the form.","Requests and responses sub-information-repository  is useful when, for example, a user wants to submit a form to enterprise server . A user causes the form to be pushed into requests and responses sub-information-repository  and stored as request . Request  is automatically transmitted to enterprise server  when wireless device  is in coverage, i.e., there is enough bandwidth to complete the transaction without error.","Once request  is submitted, the user can see which request  was submitted to enterprise server , when request  was sent, etc. The results of request  are eventually received by wireless device  and pushed into requests and responses sub-information-repository  as response . The user can then view the results as response .","Referring to , one specific example of unique identifier overwrite, referred to herein, is examined. At step , information is pushed from PMM  of enterprise server  to an appropriate sub-information-repository of information repository  on wireless device . In this example, the information is a price list, sent by an Information Technology (IT) Manager. However, the information can be sent automatically or by any suitable person or application.","The price list has a unique identifier of 0078 associated therewith. At some later time, at step , the IT Manager has a new price list that he or she causes PMM  to push to the appropriate sub-information-repository of information repository  on wireless device  with the same unique identifier. At step , the new price list overwrites the previous price list stored in information repository . At step , a user of wireless device  accesses the new price list.","Referring to , one exemplary use of information repository  is illustrated. Forms library  resides on enterprise server  and wireless device . Forms library  includes forms (documents) such as price lists, order entry forms, white pages and various other forms. Each of the forms in forms library  has a unique identifier associated therewith. When one of the forms in forms library  is modified, the modified version is sent to wireless device  with the same unique identifier as the form had before. Thus, the modified version of the form overwrites the previous version of the form at information repository . Therefore, a user of wireless device  always has all of the latest forms he or she might need ready in information repository  for use. This update process is accomplished with the use of the unique identifiers. In one embodiment, an IT manager enables the user to receive updates to a set of standard forms. In another embodiment, the IT manager enables the user to receive updates to a set of standard forms, and the user requests any additional form(s) for which he or she wants automatic updates for.","In yet another embodiment according to the present invention, an application (e.g., Siebel, another suitable application such as a thin client application with scripting, etc.) running on wireless device  saves a page on wireless device  using a unique identifier. Script extensions, such as WML script extensions, Java script extensions, etc., allow an application to programmatically save a page on wireless device .","For example, a user of wireless device  may have a list, every day, of actionable items to which he or she is supposed to attend. It may be very important for the user to receive the daily list of actionable items from enterprise server , even if wireless device  is not in coverage. The application, at the beginning of each day when the user logs on to wireless device , displays the list of actionable items and saves the list to information repository . It is desired that only one item in information repository  is a daily list of actionable items. Therefore, the application programmatically saves the list to information repository  with a unique identifier using a script extension. More precisely, the application pushes the list to pushed pages sub-information-repository . The user can then interact with and\/or modify the page containing the list. Whenever the application saves a new updated list to information repository , the same unique identifier is used. Consequently, the new updated list overwrites the previous list so that there is only one copy of the list in information repository , as desired. The user can recall the list at any time by prompting the application to load the list from information repository , using the same unique identifier. As can be seen, the application can load, save and overwrite information (pages, etc.) using unique identifiers. Information repository  thus functions similarly to a local cache or database that the application\/user can access without accessing enterprise server  (for example, when wireless device  is not in coverage, etc.).","In one exemplary process flow, shown schematically in , at step , application  on wireless device  makes a request for information, such as a daily list of actionable items, to enterprise server . Application  can be a thin client application with scripting, or any other suitable type of application.","At step , enterprise server  handles the request and gives this request to origin server  (which also runs application ). Origin server  uses application  logic to facilitate processing of the request. Origin server  is a web server or application server that hosts the application, e.g., a server running Siebel, BEA WebLogic, Microsoft IIS, etc.","Application , on origin server , generates results (a page). At step , origin server  returns the results to enterprise server . At step , enterprise server  send the results to wireless device  for display to the user. More precisely, application  on origin server  is sending a page(s) of markup language to wireless device . Within that markup language is scripting code. Application  on origin server  is sending back a program(s) that runs on wireless device . The scripting code is generated at origin server . Application  on origin server  sends a page that has a program(s) (scripting language) contained within the page. The program(s) is executed on wireless device .","In the near future, it is expected that there will be two fundamentally different types of wireless networks. There are going to be high bandwidth networks that are limited in their coverage. An example is an 802.11 network in a corporate building, airport, coffee shop, etc., or a wired Ethernet connection, etc. Moreover, there will be slower networks that are going to have vast coverage such as GPRS and Mobitex.","These two (or more) types of networks have very different parameters for how they work (e.g., high bandwidth\/low availability, low bandwidth\/high availability, etc.). The ways in which a wireless application would be written are very different depending on what type of network one is targeting. If one is targeting a high bandwidth network then application  might send a lot of large files, for example. It would be desirable to have a device that switches between networks. Therefore, when wireless device  is inside a building it switches to a fast network, for example. When wireless device  is outside it switches to slower network, for example. Embodiments according to the present invention include the application recognizing the type of network (e.g., the level of bandwidth of the network) wireless device  is in, then change the behavior of application  accordingly.","In one embodiment a system and method according to the present invention includes a request queue for a wireless device. A queue on a wireless device receives a user request. The request may include a request for information over a network, a request to interact with a web application, a request to connect to a particular website, etc. The queue monitors a coverage status for the wireless device. The request is sent over a network when the monitoring reveals that the device is in an area of coverage, or when the bandwidth in the area of coverage meets a certain test. The queue stores a response to the request and updates the status of the request to indicate a response has been received.","Thus, instead of sending a message, request, etc., directly over a network, the user of a wireless device sends the request to a queue on the wireless device. The queue then forwards the request over the network when the wireless device is in an area of coverage. Both the request and the response are stored in the queue. The request in the queue can be updated with icons indicating that the request is waiting to be sent, has been sent, has been completed and\/or responded to, or has an error associated therewith.","Some of the key features of the present invention include: allowing a user to interact with a network regardless of the current coverage, by sending requests, messages, etc., to a queue on a wireless device of the user; displaying icons via the user interface on the wireless device that indicate the status of the request; and allowing a user to select a request in order to display the request and\/or the response associated therewith.","In one embodiment, when a user makes a request, instead of going through a network directly, the request goes to a queue. As the user (and\/or wireless device ) enters a network coverage area, the request will be sent. Alternatively, if wireless device  is out of a network coverage area, the system will just wait and whenever wireless device  is in the network coverage area, the information will be sent. Then in that same queue (or different queues, in an alternate embodiment) there is now an entry of both the original request and the response. This method allows you interact with the network regardless of what the network coverage is currently. Also, one can perform multiple major operations all at once. It is noteworthy that in prior art systems, manual synchronization, batch modes, or special server support is required to obtain the results.","In one embodiment, there is a submit \u201cbutton\u201d on wireless device . The user can push this button to submit a request. When the user submits the request (e.g., form, etc.), the request is submitted not to the network but to a queue in the wireless device.","The user can submit multiple requests. Each request can have a status icon associated therewith. The status icons indicate that the request is waiting to be sent, has been sent, that there was an error or that the response is waiting. These aforementioned status icons are merely exemplary, and other icons may be used.","After the user submits a request, the user can review the response. One example of such a response is a stock purchase confirmation. Alternatively, the user can review an error code indicating the request could not be processed, there was not enough money in the account, etc.","In one embodiment, there is no coverage at first, so the user makes a request for a stock purchase. The request is added to the queue automatically when wireless device  is out of coverage or when the application instructs (in an alternate embodiment the user must actively instruct that the request and\/or response is to go to the queue). The device then comes within a coverage area and notices it is in coverage. The request is then sent, a response is received (e.g., the stock was purchased, etc.), and the status icon is updated. The response is then stored in a queue.","In another embodiment, generally, there is provided a system for a request queue on a device, such as wireless device . The system comprises a user interface for guaranteeing from a thin client a request and response for a transaction from wireless device  using standard protocols without requiring any special support on a server. The method further comprises a mechanism for submitting requests, and a queue on the client of pending requests that get processed automatically whenever connectivity is possible, including the ability for a user to submit a request, view the request and a corresponding response, to save, to store and to delete the request and response, along with notification of the state of each request and response.","In an exemplary embodiment, the present system includes a mixed wireless\/wired system that modifies application behavior based on bandwidth. Enterprise server  notifies an application on enterprise server  or client side device, such as client wireless device , of current bandwidth parameters. Such a system allows application  on the client (e.g., wireless device ), or application  on enterprise server  in communication with the client, to change its behavior based on the bandwidth available for transmission to\/from client wireless device . For example, application  may modify its behavior such that time-sensitive orders may be sent over low bandwidth, while non-time-sensitive orders may be sent when wireless device  is in a high bandwidth state, or vice versa. In an alternate embodiment, application  may modify its behavior such that synchronization of information (i.e., updating information) between wireless device  and enterprise server  occurs when wireless device  is in a high bandwidth state and not when wireless device  is in a low bandwidth state, or vice versa.","One example of when application  may modify its behavior based on available bandwidth is application  deciding when to forward information from client wireless device  to enterprise server . Another example of when application  may modify its behavior based on available bandwidth is application  deciding when to forward a request for information from wireless device  to enterprise server . Wireless device  then receives a response of some type.","In another embodiment, application  logic may be changed via scripting and server side libraries based on bandwidth. Once again, application  on the client (e.g., wireless device ) is notified of changes in bandwidth parameters. Application  can modify its behavior based on the current bandwidth parameters. Application  may modify its behavior in order to send or retrieve information at a rate that is appropriate for the particular information being sent or retrieved. The example of time-sensitive orders, herein, is illustrative.","As an example of client side logic changes, an object on the client (e.g., wireless device ) needs to be forwarded to enterprise server . If wireless device  is not in coverage, the object may be stored and forwarded at a later time when wireless device  is in coverage. Alternatively, if wireless device  is in coverage, the type of coverage and rules relating to that coverage may be examined.","For instance, application  may be instructed to send the object only when wireless device  is in a medium or high bandwidth state, but not in a low bandwidth state, and only from a home office, or only on Tuesdays, etc. The rules indicate to application  under what conditions and coverage to forward the object. It may be that application  is instructed to forward the object whenever the client is in any bandwidth state, for instance. Alternatively, it may be that application  is instructed to forward the object only when the client is in a bandwidth state greater than a threshold amount. The system can generate rules for instructing application  on how to behave or how to modify its behavior in response to a specified set of circumstances.","Utilizing the present system, application(s)  can modify their behavior, or have their behavior modified, depending on bandwidth parameters, as well as modify additional rules relating to a specific application. Some of the means of notifying the application of changes in bandwidth parameters include script libraries run on the client (e.g., wireless device ) and server libraries that include call direct query and call-back mechanisms. As another example, an application might be defaulted to display the result of, for example, five previous requests for information in a high bandwidth situation, but only the results of, say, one request for information in a low bandwidth situation. Conversely, application  might be defaulted to display the result of, for example, five previous requests for information in a low bandwidth situation, but only the results of, for example, one request for information in a high bandwidth situation.","Application  can receive information regarding the available bandwidth for the current location of wireless device  from enterprise server , wireless device , or by any other suitable means. Application  logic on wireless device  and\/or enterprise server  can be changed based on bandwidth via scripting and server side libraries, or by any other suitable means.","Further, application  can be optimized to work in coverage areas of various levels of bandwidth. Browser  and enterprise server  communicate to keep track of the coverage of each wireless device . Application , which can be running on wireless device  and\/or enterprise server , monitors the current level of bandwidth and changes therein. Application  changes its behavior, based on the current level of bandwidth (i.e., the bandwidth parameters of wireless device ), in order to handle information differently.","An instance where a user may want to handle information differently in a high bandwidth versus low bandwidth situation is communicating information from wireless device  to enterprise server . In one embodiment, as mentioned herein, a user can send information to enterprise server  from wireless device . The information to be sent can be queued up and sent when wireless device  is in coverage. If the user is sending a large number of different requests back to enterprise server  that are not time-critical then application , in one embodiment, waits until wireless device  is in high bandwidth coverage before sending requests to enterprise server .","Initially, the application queues up the requests. Then, if wireless device  is in bandwidth coverage that falls within a certain range (e.g., high bandwidth coverage), application  waits until the bandwidth passes a certain threshold level. In an alternative embodiment, one or more requests are flagged as high priority, and are sent to enterprise server  regardless of the current bandwidth available to wireless device .","In a further embodiment, different bandwidth states are defined, which are known to application . Each bandwidth state represents a level of bandwidth that is available for the network with which wireless device  is currently coupled to enterprise server . There may be many different networks that wireless device  can use to couple to enterprise server . For example, there may be a wireless local area network (LAN) with high bandwidth capability. Other types of networks may exhibit more or less bandwidth capability. In one embodiment, application  handles each type of network differently. In an alternative embodiment, application  may group networks together. For example, application  may group wireless LAN networks and cable networks into a single group assuming that both types of networks are high bandwidth\/limited availability. This group can be defined to represent a high bandwidth state, for example. Application  also defines other networks as exhibiting a low bandwidth state, or other bandwidth states. Therefore, there may be three bandwidth states (i.e., high, low, other) defined in one exemplary system. The current bandwidth state of wireless device  depends upon which network wireless device  is utilizing. Another example of a network with local coverage that is relatively inexpensive is wireless wide area network (WAN). An example of an expensive network is wireless WAN with roaming coverage.","In yet another scenario, a user may want a large amount of data available to the user when traveling. The user may desire information be available to the user even when wireless device  is not in coverage. For example, the user may have a file comprising a price list with long descriptions representing a large number of products. This file may be a half a megabyte of information, for example. The user may not want to send that file over a wireless WAN because doing so may be expensive and time consuming. Thus, the application  can modify its behavior, and refrain from sending the information while in this network state. However, when application  determines that the network is a high bandwidth state at a low transmission cost, application  then transmits the file.","As mentioned herein, application  may be located in whole (or in part) on enterprise server . In these cases, wireless device  communicates the type of network the client is utilizing to enterprise server . As wireless device  utilizes different networks, browser  and\/or application  sends a notification to enterprise server . Application  modifies its behavior by changing the amount of files sent from enterprise server  to wireless device  based on the bandwidth available to wireless device . For example, if wireless device  is coupled to a low bandwidth network, then the application sends three files. However, if wireless device  is coupled to a high bandwidth network, then application  sends a larger number of files.","Application  determines what type of network and\/or bandwidth is currently available to wireless device . One way this determination is made is that wireless device  communicates directly with enterprise server . Each time wireless device  changes network connections, wireless device  sends a message to enterprise server , and enterprise server  stores that information.","Another way this determination is made is that enterprise server  determines the network bandwidth indirectly by the method wireless device  uses to connect to enterprise server . For example, if wireless device  connects to enterprise server  using GPRS then the bandwidth is limited. If wireless device  later connects to enterprise server  using the IEEE 802.11 standard and a wired line then wireless device  is in high bandwidth. In each case, enterprise server  stores the state so that application  can query enterprise server  as to the bandwidth that a particular wireless device  is in and\/or was in last.","Application  then alters its behavior depending on the current bandwidth or network state. As mentioned herein, there may be many possible network states. In another embodiment, script extensions are included in web pages in order to allow for different behavior depending upon current available bandwidth.","As another example, depending upon current available bandwidth, the application can request the graph of a stock's history or just the pertinent numbers. In yet another example, a user may request  articles from enterprise server  using wireless device . Initially, the user enters these requests, which will be queued up regardless of the level of bandwidth coverage. Subsequently, application  modifies its behavior, and only sends the requested article(s) to wireless device  when the bandwidth meets a certain criterion (or criteria). However, it is noteworthy that one or more articles may be flagged as high priority, in which case application  will modify its behavior and send these high priority articles even when the bandwidth criterion is not met.","Referring to , in one embodiment, wireless device  is a personal digital assistant (PDA). However, wireless device  can include any suitable device, and need not be wireless. Wireless device  comprises wireless LAN modem  and wireless WAN modem . Wireless device  also comprises serial port , as well as any other suitable port.","Module , which is part of application  and can reside in any suitable location, comprises connection manager , synchronization engine , script engine  and queue engine . Connection manager  monitors the ports of wireless device  to determine which port is currently active, including serial port , wireless LAN modem  port and wireless WAN modem  port. Script engine  requests active connection data from connection manager  so that script engine  can determine the bandwidth via the connection type. Script engine  will then be able to inform application  about the current bandwidth. The subsequently relayed active connection data is used by script engine  to communicate to application  the bandwidth state so that application  can adapt its behavior.","Typically, connection manager  communicates with enterprise server . Such communications to enterprise server  include current active port or ports data. Consequently, enterprise server  knows when the network state changes. For example, enterprise server  knows when the network wireless device  is communicating with changes from LAN to WAN. The behavior of application  is then modified accordingly. It is contemplated that the behavior of application  can be modified by application  itself, by enterprise server  or by any other suitable mechanism.","If a synchronization of wireless device  is to be performed, synchronization engine  requests connection data from connection manager  regarding what kind of connection is being used. Thus, synchronization engine  knows what rules to follow to perform a synchronization. Likewise, if a request is to be put into a queue, queue engine  requests connection data from connection manager  so that queue engine  knows what rules to follow when submitting requests to enterprise server .","Referring to , one exemplary method for modifying application behavior according to bandwidth is illustrated. At step , a request for information is made on wireless device  using HTTP or another suitable protocol. Subsequently, at step , a check is made to determine if wireless device  is in coverage.","One way that the check can be made is that the manufacturer of wireless device  (or another entity) provides application programming interfaces (APIs) that can be queried to return the connection status. These APIs check the hardware of wireless device . Sometimes whether wireless device  \u201cin coverage\u201d is not a well-defined state. Therefore, some transactions may or may not be successful under these circumstances. Thus, the system determines if wireless device  is in coverage by attempting a transaction.","At step , if wireless device  is not in coverage then the request is stored in a request queue until coverage changes. If coverage changes, then the method proceeds to step  of .","After the check is made at step , if wireless device  is in coverage then rules are examined at step . At step , the system determines whether the coverage meets a trigger according to the rules. For example, the system determines whether the bandwidth falls within a certain range. If the coverage does not meet a trigger then the process proceeds to step . If the coverage does meet a trigger at step , then the request for information is sent to enterprise server  at step , and the process proceeds to step  of .","At step , when coverage changes the process proceeds to step  of , as mentioned herein. At step , a check is made as to whether there were additional request(s) for information made. If there are no additional request(s), then the task is complete. However, at step , if there is an additional request(s) then the process is repeated for other request(s).","In summary, in one embodiment, the client (e.g., wireless device , etc.) monitors the type of connection, communicates the type of connection to enterprise server , and sets the correct behavior for client subsystems (e.g., queuing subsystems, synchronization subsystems, etc.) depending on the connection type. The connection type is communicated to application  so application  can present the correct behavior (e.g., queuing behavior, synchronization behavior, etc.). The system further notifies any applications that have requested to be notified of a change in network state.",{"@attributes":{"id":"p-0128","num":"0127"},"figref":"FIG. 15","b":"1506"},"Subsystems within computer system  are directly interfaced to an internal bus . The subsystems include an input\/output (I\/O) controller , a system random access memory (RAM) , a central processing unit (CPU) , a display adapter , a serial port , a fixed disk  and a network interface adapter . The use of bus  allows each of the subsystems to transfer data among the subsystems and, most importantly, with CPU . External devices can communicate with CPU  or other subsystems via bus  by interfacing with a subsystem on bus .","One embodiment according to the present invention is related to the use of an apparatus, such as computer system , for implementing a system according to embodiments of the present invention. CPU  can execute one or more sequences of one or more instructions contained in system memory . Such instructions may be read into system memory  from a computer-readable medium, such as fixed disk . Execution of the sequences of instructions contained in system memory  causes the CPU  to perform process steps, such as the process steps described herein. One or more processors in a multi-processing arrangement may also be employed to execute the sequences of instructions contained in system memory . In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The terms \u201ccomputer-readable medium\u201d and \u201ccomputer-readable media\u201d as used herein refer to any medium or media that participate in providing instructions to CPU  for execution. Such media can take many forms, including, but not limited to, non-volatile media, volatile media and transmission media. Non-volatile media include, for example, optical or magnetic disks, such as fixed disk . Volatile media include dynamic memory, such as system memory . Transmission media include coaxial cables, copper wire and fiber optics, among others, including the wires that comprise one embodiment of bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio frequency (RF) and infrared (IR) data communications. Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, a hard disk, magnetic tape, any other magnetic medium, a CD-ROM disk, digital video disk (DVD), any other optical medium, punch cards, paper tape, any other physical medium with patterns of marks or holes, a RAM, a PROM, an EPROM, a FLASHEPROM, any other memory chip or cartridge, a carrier wave, or any other medium from which a computer can read.","Various forms of computer-readable media may be involved in carrying one or more sequences of one or more instructions to CPU  for execution. Bus  carries the data to system memory , from which CPU  retrieves and executes the instructions. The instructions received by system memory  can optionally be stored on fixed disk  either before or after execution by CPU .",{"@attributes":{"id":"p-0133","num":"0132"},"figref":["FIG. 15","FIG. 15","FIG. 15"],"b":"1506"},"The above description is illustrative and not restrictive. Many variations of the invention will become apparent to those of skill in the art upon review of this disclosure. The scope of the invention should, therefore, be determined not with reference to the above description, but instead should be determined with reference to the appended claims along with their full scope of equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
