---
title: Mechanism for improved integration of JSLEE and SIP servlets in a JAVA virtual machine
abstract: In one embodiment, a mechanism for improved integration of JSLEE and SIP Servlets in a JAVA virtual machine is disclosed. In one embodiment, a method includes sending an event received at a Session Initiation Protocol (SIP) Servlet to a Javaâ„¢ APIs for Intelligent Networks Service Logic Execution Environment (JSLEE) container through a fireEvent method, wherein the SIP Servlet and the JSLEE container are integrated in a same JAVA virtual machine (JVM). The method further includes receiving at the SIP Servlet an object that includes a getResult method, processing by a JSLEE application in the JSLEE container the event to produce a result, returning by the JSLEE application the result through a setResult method, and obtaining by the SIP Servlet the result via the getResult method.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08332871&OS=08332871&RS=08332871
owner: Red Hat, Inc.
number: 08332871
owner_city: Raleigh
owner_country: US
publication_date: 20090227
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["The embodiments of the invention relate generally to communication platforms and, more specifically, relate to improved integration of JSLEE and SIP Servlets in a JAVA Virtual Machine.","Voice over Internet Protocol (VoIP) has seen a rise in popularity in recent times and has become more than just a telephony application. For instance, several highly popular applications have come into existence like Skype\u2122, Google Talk\u2122, and MSN Messenger\u2122. All of these applications combine voice, instant messaging (IM), and other modes of communication into unified clients and greatly enhance the user experience. Previously, these means to communicate were islands\u2014largely isolated from each other. However, engineers visited them and found large areas of community between these different modes of communication, resulting in integrated clients that have changed the way in which communication and business is conducted.","For integrated communication applications, such as those described above, server support needs to be provided. An examination of the structure of such communications applications indicates that there are two parts to the application: the signaling part and the media part. The signaling part is an event-oriented activity. Network endpoints exchange one-way messages through various servers and signal the establishment of a session. Interesting services can be built by placing fragments of code, or \u201cevent handlers,\u201d in the signaling path at the server. Furthermore, service providers may speed up their innovation processes and quickly launch new services if they use a standards-based component model and container architecture.","One standards-based application execution framework is JAIN SLEE or JSLEE. JAIN is an acronym for \u201cJava APIs for Intelligent Networks.\u201d JAIN aims for an enabling set of Java APIs to develop and deploy service-driven network applications. SLEE is an acronym for \u201cservice logic execution environment.\u201d Together, JAIN SLEE (or JSLEE) is an application execution framework analogous to the Java\u2122 Enterprise Edition (JAVA EE) environment. However, in comparison to JAVA EE, JSLEE's design principles explicitly aim for a low latency (<100 ms) and high throughput (thousands of events per second) environment optimized for asynchronous event processing, including transaction handling, high reliability, a distributed component model, and a standardized framework. Appropriately, JSLEE was designed for a network signaling environment, which is ideal for a communications platform.","Another protocol developed for signaling is Session Initiation Protocol (SIP). This important signaling protocol for the telecommunications industry is rapidly moving to next-generation applications. Java\u2122 is an excellent platform for SIP development, especially on the server side. Similar to JSLEE, SIP servlets are a container-based specification. SIP servlets were designed to simplify SIP development by building container functionality on top of a SIP stack for programming convenience. SIP servlets integrate a SIP stack into the container to talk to the SIP network, which can be viewed as a library built upon a SIP stack hiding complexity from the application developer. In addition, SIP servlets are built upon the servlet concept, with the service logic coded in the SIP servlet, for a common programmatic feel.","JSLEE and SIP Servlets each address unique requirements for communications applications that are not addressed by the execution environment of JAVA EE. Currently, integration of JSLEE and SIP Servlets in a single Java\u2122 Virtual Machine has been accomplished. However, a problem with the present integration of JSLEE and SIP Servlets is the complexity required to integrate the two specifications. In order for a SIP Servlet application to communicate with a JSLEE container, an additional layer, such as an EJB (Enterprise JavaBean) layer, is added to the SIP Servlet application to enable this communication. The addition of this layer means that the SIP Servlet application now must be deployed on a JAVA EE-compliant application server, rather than just a SIP Servlet-compliant server, which adds further complexity. In addition, with the current JSLEE API, there is no way for the SIP Servlet application to get a result back from the JSLEE container in a simple manner, as the present communication mechanism is an asynchronous or \u201cfire and forget\u201d mechanism.","As a result, a way to remove the additional layer of complexity in the interoperable JSLEE\/SIP Servlets applications, as well as for SIP Servlet applications to fire events into JSLEE and control the return of that result, would be beneficial.","Embodiments of the invention provide a mechanism for improved integration of Java\u2122 APIs for Intelligent Networks Service Logic Execution Environment (JSLEE) and Session Initiation Protocol (SIP) Servlets in a Java\u2122 virtual machine (JVM). In one embodiment, a method of improved integration of JSLEE and SIP Servlets in a JVM includes sending an event received at a SIP Servlet to a JSLEE container through a fireEvent method, wherein the SIP Servlet and the JSLEE container are integrated in a same JAVA virtual machine (JVM). The method further includes receiving at the SIP Servlet an object that includes a getResult method, processing by a JSLEE application in the JSLEE container the event to produce a result, returning by the JSLEE application the result through a setResult method, and obtaining by the SIP Servlet the result via the getResult method.","In the following description, numerous details are set forth. It will be apparent, however, to one skilled in the art, that the present invention may be practiced without these specific details. In some instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention.","Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise, as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201csending\u201d, \u201creceiving\u201d, \u201cattaching\u201d, \u201cforwarding\u201d, \u201ccaching\u201d, or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, each coupled to a computer system bus.","The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear as set forth in the description below. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.","The present invention may be provided as a computer program product, or software, that may include a machine-readable medium having stored thereon instructions, which may be used to program a computer system (or other electronic devices) to perform a process according to the present invention. A machine-readable medium includes any mechanism for storing or transmitting information in a form readable by a machine (e.g., a computer). For example, a machine-readable (e.g., computer-readable) medium includes a machine (e.g., a computer) readable storage medium (e.g., read only memory (\u201cROM\u201d), random access memory (\u201cRAM\u201d), magnetic disk storage media, optical storage media, flash memory devices, etc.), a machine (e.g., computer) readable transmission medium (non-propagating electrical, optical, or acoustical signals), etc.","Embodiments of the invention provide a mechanism for improved integration of JSLEE and SIP Servlets in a JVM. Embodiments of the invention provide for improved integration of JSLEE and SIP Servlets in a JVM by removing an extra layer of complexity from the SIP Servlet architecture that was previously utilized for communication with JSLEE. In addition, a new method is added to the SLEE connection of the JSLEE specification and a new abstract class containing three methods is added to the JSLEE specification. These additions enable the controlled firing of events between a SIP Servlet application and a JSLEE application, with the ability for the SIP Servlet to obtain the result by blocking or polling for it.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["100","100","100"]},"Communications platform  includes an integrated JSLEE Application Server (AS) , a SIP Servlet AS , and a JAVA EE AS . The integrated JSLEE, SIP Servlet, and JAVA EE application servers combine JSLEE and SIP Servlet specifications with JAVA EE to enable the development, deployment and management of applications that integrated of voice, video and data across a range of networks and devices.","JSLEE is the JAVA EE for communications, as it is event driven, high throughput, and low latency. On the other hand, SIP Servlets bridge the gap between communications and enterprise systems. SIP Servlets enables web applications to interface with communications networks and devices. SIP Servlets provide a simple programming model by providing a server-side interface describing a container of SIP components or services, to make development of SIP services simple.","The integrated JSLEE , SIP Servlets , and JAVA EE  application servers are a single integrated stack, with JSLEE, SIP Servlets, and JAVA EE running in the same JVM . As illustrated, the hierarchy of components supporting the integrated JSLEE AS , SIP servlet AS , and JAVA EE AS  components include a JSLEE network abstraction component , third party services , operating system , and third party industry standard hardware . Also depicted in  are JSLEE APIs  to interface with other outside applications. In one embodiment, the JAVA EE component  may be a JBOSS\u2122 application server distributed by Red Hat, Inc. of Raleigh, N.C. In another embodiment, the operating system may be Red Hat\u2122 Enterprise Linux system.","In one embodiment, network abstraction component  provides a network abstraction layer for the communications platform . The network abstraction layer provides connectivity between applications of the communications platform  and any network environment, including an IP network or a Legacy network. In this way, application logic is network protocol agnostic so that the application developer is insulated from the underlying network protocol, and thereby simplifies porting between networks. The network abstraction is achieved by the external resources via Resource Adapters (RAs). For example, RAs may include, but are not limited to, Session Initiation Protocol (SIP), Extensible Messaging and Presence Protocol (XMPP), GoogleTalk, Asterisk, Parlay, Diameter, Media, Real-Time Transport Protocol (RTP), Short Message Peer-to-Peer Protocol (SMPP), Intelligent Network Application Part (INAP), HyperText Transport Protocol (HTTP), and Production Rules.","In one embodiment, management interfaces  provide third party application programming interfaces (APIs). These third party APIs simplify integrating with core business systems. For example, some of the management functions provided by management interfaces  may include, but are not limited to, full visibility for monitoring and management via JMX, internal system APIs (Event Router, Activities, Time Facility), RA APIs, and application APIs (service usage, service building blocks usage, event traffic control). Third party APIs also provide Operational\/Business Support Systems (OSS\/BSS) connectivity.","In one embodiment, the use of the modular JAVA EE architecture with JSLEE and SIP Servlets results in a simple and cleanly separable architecture for the implementation of embodiments of the invention. When utilizing a JAVA EE applicatoin server that implements microkernel services, such as the JBoss\u2122 application server, each management interface mandated by the JSLEE and SIP Servlets are installed as a logically separate microkemel service of the JAVA EE. Such a JAVA EE microkemel architecture allows JSLEE and SIP Servlets to work with a minimal set of installed JAVA EE services, thus making for an integrated, extensible, and modular architecture.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 2","FIG. 1"],"b":["200","200","201","205","201","100","205","205","201","201","205"]},"In some embodiments, communications platform  may be implemented on a single computer or multiple computers. In other embodiments, communications platform  may be implemented on one or more servers. Communications platform  includes a SIP Servlets container , a JSLEE container , and a media server . SIP Servlets container  may include one or more SIP Servlets applications  that implement one or more SIP Servlets . JSLEE container  includes an event router , a SLEE connection , and one or more JSLEE applications . JSLEE application  further includes one or more service building blocks (SBB) . SIP Servlets container  and JSLEE container  are integrated in a single JVM within communications platform . Furthermore, media server  may be communicably coupled to SIP Servlets container  and JSLEE container  to initiate media related to events processed by SIP Servlets container  and JSLEE container . In one embodiment, these events may correspond to communication signals sent from communications device .","SIP Servlets  and JSLEE  are both standards defined through the JAVA Community Process that address the development of applications. Both standards define a container based model for applications, define how applications may be built and deployed in the respective containers and the services and features supplied by the containers. SIP Servlets  defines a container-based model that is an extension of the well understood Servlet model. It was designed to simplify the development of SIP based applications and thereby enhance the adoption of the SIP protocol. JSLEE  defines an application environment suited for network orientated applications. It defines a protocol agnostic, component and object orientated and transacted programming model.","SIP Servlet container  and JSLEE container  enable their interoperability via the one or more SIP Servlets  and SLEE connection . SLEE connection  is interface into a physical event-delivery connection to JSLEE . This interface may be used by components external to JSLEE  to communicate with JSLEE's event routing subsystem. SLEE connection  communicates with event router  in order to send the event router  incoming events. In turn, the event router  routes the events to the appropriate SBB  to handle for processing.","Prior art techniques to integrate the SIP Servlets  and JSLEE  required the addition of another layer into the SIP Servlet container , such as an Enterprise JavaBean (EJB) component layer, in order to fire events to JSLEE in a stateful manner. However, as mentioned before, this added layer in SIP Servlets  creates additional complexity in the architecture by requiring the SIP Servlet application  to be implemented on a JAVA EE-compliant server, rather than a SIP Servlet-compliant server, to ensure support of the added layer.","Embodiments of the invention eliminate the added layer of complexity in the integrated SIP Servlet\/JSLEE architecture of prior art techniques by adding a new method to the SLEE connection  of the JSLEE specification, and by adding a new abstract class holding three methods to the JSLEE application programming interface (API). The signature of the new method added to the SLEE connection  is as follows: Future<V> fireEvent (org.mobicents.slee.Event event, EventTypeID eventType, ExtemalActivityHandle handle, Address address). The new abstract class is the class Event, which holds three methods: void setResult (Object object), Object getResult( ), and Object getResult(long timeout, TimeUnit unit). Embodiments of the invention may utilize the new method and new class to provide both synchronous and asynchronous event processing in the integrated SIP Servlet\/JSLEE architecture without adding any additional layers of complexity to the architecture, as detailed below in .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 3","FIG. 2"],"b":["300","300","300","201"]},"Method  begins at block  where an event arrives at a SIP Servlet container and its corresponding SIP Servlet application. At block , a SIP Servlet of the SIP Servlet application creates a custom Event corresponding to the event, which it synchronously fires into JSLEE through the method SleeConnection.fireEvent (org.mobicents.slee.Event event, EventTypeID eventType, ExternalActivityHandle handle, Address address, long timeout). At block  the SIP Servlet receives a java.util.concurrent.Future(V) object on which it can block for the result (V Future.get( )) of the fired Event.","Then, at block , a SLEE connection in the JSLEE container receives the fired Event, places it in an Event Router queue, and listens for the result of the Event. At block , the event router routes the Event to a corresponding JSLEE application for processing by a SBB of the JSLEE application. When the application is done processing the Event, it returns the result of the processing through the method setResult(Object object) of the Event interface at block . Lastly, at block , the SIP Servlet receives the result via the V Future.get( ) method on which it previously blocked for the result.","As described above, method  provides a way for an integrated SIP Servlet application and JSLEE application to interoperate without an additional layer of complexity being added to the SIP Servlet application, while also allowing the SIP Servlet application to obtain the result of any events it has fired into the JSLEE application in a synchronous manner.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 4","FIG. 2"],"b":["400","400","400","201"]},"Method  begins at block  where an event arrives at a SIP Servlet container and its corresponding SIP Servlet application. At block , a SIP Servlet of the SIP Servlet application creates a custom Event corresponding to the event, which it asynchronously fires into JSLEE through the method SleeConnection.fireEvent (org.mobicents.slee.Event event, EventTypeID eventType, ExternalActivityHandle handle, Address address, long timeout). At block  the SIP Servlet receives a java.util.concurrent.Future(V) object on which it can poll in order to obtain the result of the event via method V Future.get(long timeout, TimeUnit unit).","Then, at block , a SLEE connection in the JSLEE container receives the fired Event, places it in the Event Router queue, and listens for the result of the Event. At block , the event router routes the Event to a corresponding JSLEE application for processing by a SBB of the JSLEE application. When the application is done processing the Event, it returns a result of the processing through the method setResult(Object object) of the Event interface at block . Lastly, at block , the SIP Servlet application polls the SLEE connection for the results through the method Future.get(long timeout, TimeUnit unit).","As described above, method  provides a way for an integrated SIP Servlet application and JSLEE application to interoperate without an additional layer of complexity being added to the SIP Servlet application. Method  also allows the SIP Servlet application to obtain the result of any events it has fired into the JSLEE application in an asynchronous manner by polling the JSLEE application for the result.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 5","b":"500"},"The exemplary computer system  includes a processing device , a main memory  (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) (such as synchronous DRAM (SDRAM) or Rambus DRAM (RDRAM), etc.), a static memory  (e.g., flash memory, static random access memory (SRAM), etc.), and a data storage device , which communicate with each other via a bus .","Processing device  represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processing device may be complex instruction set computing (CISC) microprocessor, reduced instruction set computer (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processing device  may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. The processing device  is configured to execute the processing logic  for performing the operations and steps discussed herein.","The computer system  may further include a network interface device . The computer system  also may include a video display unit  (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)), an alphanumeric input device  (e.g., a keyboard), a cursor control device  (e.g., a mouse), and a signal generation device  (e.g., a speaker).","The data storage device  may include a machine-accessible storage medium  on which is stored one or more set of instructions (e.g., software ) embodying any one or more of the methodologies of functions described herein. The software  may also reside, completely or at least partially, within the main memory  and\/or within the processing device  during execution thereof by the computer system ; the main memory  and the processing device  also constituting machine-accessible storage media. The software  may further be transmitted or received over a network  via the network interface device .","The machine-readable storage medium  may also be used to stored instructions to perform improved integration of SIP Servlets and JSLEE in a single JVM described with respect to , and\/or a software library containing methods that call the above applications. While the machine-accessible storage medium  is shown in an exemplary embodiment to be a single medium, the term \u201cmachine-accessible storage medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The term \u201cmachine-accessible storage medium\u201d shall also be taken to include any medium that is capable of storing, encoding or carrying a set of instruction for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term \u201cmachine-accessible storage medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, and optical and magnetic media.","Whereas many alterations and modifications of the present invention will no doubt become apparent to a person of ordinary skill in the art after having read the foregoing description, it is to be understood that any particular embodiment shown and described by way of illustration is in no way intended to be considered limiting. Therefore, references to details of various embodiments are not intended to limit the scope of the claims, which in themselves recite only those features regarded as the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention will be understood more fully from the detailed description given below and from the accompanying drawings of various embodiments of the invention. The drawings, however, should not be taken to limit the invention to the specific embodiments, but are for explanation and understanding only.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
