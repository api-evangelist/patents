---
title: Web service API for unified contact store
abstract: An Application Programming Interface (API) provides functions for interacting with contact lists and contacts that are stored in a unified contact store by a primary contact service. For example, a client of a unified communications service may use the API to access contact information that is stored with a primary contact service (e.g. a messaging application/service). The contact information is maintained by the primary contact service. The API includes functions such as, but not limited to: adding a new IM contact to a group, adding a new IM group, removing an IM contact from a group, adding a distribution group to an IM list, getting an IM item list, and tagging an IM contact. The contacts may be obtained from the primary contact service and temporarily stored by the client (e.g. within a cache) of a different service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08689243&OS=08689243&RS=08689243
owner: Microsoft Corporation
number: 08689243
owner_city: Redmond
owner_country: US
publication_date: 20111104
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Many different types of services\/programs use contacts for communication. For example, email programs may use email addresses; Instant Messaging (IM) programs may use buddy lists and IM contacts; phone programs may use telephone numbers; videoconferencing programs may use a variety of different contacts (e.g. IM, phone, email . . . ). Accessing and managing all of these different contacts and lists can be a complex task.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter.","An Application Programming Interface (API) provides functions for interacting with contact lists and contacts that are stored in a unified contact store by a primary contact service. For example, a client of a unified communications service may use the API to access contact information that is stored with a primary contact service (e.g. a messaging application\/service). Instead of maintaining separate copies of common contact information at both the unified communications service and the primary contact, the contact information is maintained by the primary contact service. The API includes functions such as, but not limited to: adding a new IM contact to a group, adding a new IM group, removing an IM contact from a group, adding a distribution group to an IM list, getting an IM item list, and tagging an IM contact. The contacts may be obtained from the primary contact service and temporarily stored by the client (e.g. within a cache) of a different service.","Referring now to the drawings, in which like numerals represent like elements, various embodiments will be described. In particular,  and the corresponding discussion are intended to provide a brief, general description of a suitable computing environment in which embodiments may be implemented.","Generally, program modules include routines, programs, components, data structures, and other types of structures that perform particular tasks or implement particular abstract data types. Other computer system configurations may also be used, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, and the like. Distributed computing environments may also be used where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","Referring now to , an illustrative computer architecture for a computer  utilized in the various embodiments will be described. The computer architecture shown in  may be configured as a server computing device, a desktop computing device, a mobile computing device (e.g. smartphone, notebook, tablet . . . ) and includes a central processing unit  (\u201cCPU\u201d), a system memory , including a random access memory  (\u201cRAM\u201d) and a read-only memory (\u201cROM\u201d) , and a system bus  that couples the memory to the central processing unit (\u201cCPU\u201d) .","A basic input\/output system containing the basic routines that help to transfer information between elements within the computer, such as during startup, is stored in the ROM . The computer  further includes a mass storage device  for storing an operating system , application(s) , and other program modules, such as Web browser , API , and contacts manager  which will be described in greater detail below.","The mass storage device  is connected to the CPU  through a mass storage controller (not shown) connected to the bus . The mass storage device  and its associated computer-readable media provide non-volatile storage for the computer . Although the description of computer-readable media contained herein refers to a mass storage device, such as a hard disk or CD-ROM drive, the computer-readable media can be any available media that can be accessed by the computer .","By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, Erasable Programmable Read Only Memory (\u201cEPROM\u201d), Electrically Erasable Programmable Read Only Memory (\u201cEEPROM\u201d), flash memory or other solid state memory technology, CD-ROM, digital versatile disks (\u201cDVD\u201d), or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the computer .","According to various embodiments, computer  may operate in a networked environment using logical connections to remote computers through a network , such as the Internet. The computer  may connect to the network  through a network interface unit  connected to the bus . The network connection may be wireless and\/or wired. The network interface unit  may also be utilized to connect to other types of networks and remote computer systems. The computer  may also include an input\/output controller  for receiving and processing input from a number of other devices, such as a touch input device. The touch input device may utilize any technology that allows single\/multi-touch input to be recognized (touching\/non-touching). For example, the technologies may include, but are not limited to: heat, finger pressure, high capture rate cameras, infrared light, optic capture, tuned electromagnetic induction, ultrasonic receivers, transducer microphones, laser rangefinders, shadow capture, and the like. According to an embodiment, the touch input device may be configured to detect near-touches (i.e. within some distance of the touch input device but not physically touching the touch input device). The touch input device may also act as a display . The input\/output controller  may also provide output to one or more display screens, a printer, or other type of output device.","A camera and\/or some other sensing device may be operative to record one or more users and capture motions and\/or gestures made by users of a computing device. Sensing device may be further operative to capture spoken words, such as by a microphone and\/or capture other inputs from a user such as by a keyboard and\/or mouse (not pictured). The sensing device may comprise any motion detection device capable of detecting the movement of a user. For example, a camera may comprise a MICROSOFT KINECT\u00ae motion capture device comprising a plurality of cameras and a plurality of microphones.","Embodiments of the invention may be practiced via a system-on-a-chip (SOC) where each or many of the components\/processes illustrated in the FIGURES may be integrated onto a single integrated circuit. Such a SOC device may include one or more processing units, graphics units, communications units, system virtualization units and various application functionality all of which are integrated (or \u201cburned\u201d) onto the chip substrate as a single integrated circuit. When operating via a SOC, all\/some of the functionality, described herein, with respect to the Unified Communications via application-specific logic integrated with other components of the computing device\/system  on the single integrated circuit (chip).","As mentioned briefly above, a number of program modules and data files may be stored in the mass storage device  and RAM  of the computer , including an operating system  suitable for controlling the operation of a networked personal computer, such as the WINDOWS SERVER\u00ae, WINDOWS 7\u00ae operating systems from MICROSOFT CORPORATION of Redmond, Wash.","The mass storage device  and RAM  may also store one or more program modules. In particular, the mass storage device  and the RAM  may store one or more applications , such as messaging application (e.g. MICROSOFT OUTLOOK), productivity applications, and may store one or more Web browsers . The Web browser  is operative to request, receive, render, and provide interactivity with electronic documents, such as a Web page. According to an embodiment, the Web browser comprises the INTERNET EXPLORER Web browser application program from MICROSOFT CORPORATION.","Contacts manager  is configured to interact with contacts and lists that are associated with one or more applications. Contacts manager  may be a part of many different applications\/services. For example, contacts manager  may be a part of a cloud based multi-tenant service that provides resources (e.g. services, data . . . ) to different tenants (e.g. MICROSOFT OFFICE 365). Contacts manager  may be a part of a primary contact service that  includes a unified contact store for at least the primary contact service and a different service. According to an embodiment, primary contact service  is MICROSOFT EXCHANGE and the different service is MICROSOFT LYNC 2010. An Application Programming Interface (API)  provides functions for interacting with contact lists and contacts that are stored in a unified contact store by a primary contact service. For example, a client of a unified communications service may use the API to access contact information that is stored with a primary contact service (e.g. a messaging application\/service). Instead of maintaining separate copies of common contact information at both the unified communications service and the primary contact, the contact information is maintained by the primary contact service. The API includes functions such as, but not limited to: adding a new IM contact to a group, adding a new IM group, removing an IM contact from a group, adding a distribution group to an IM list, getting an IM item list, and tagging an IM contact. The contacts may be obtained from the primary contact service and temporarily stored by the client (e.g. within a cache) of a different service. Additional details regarding the operation of contacts manager  will be provided below.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2","b":["200","210","1","220","201","230","200"]},"As illustrated, service  is a multi-tenant service that provides resources  and services to any number of tenants (e.g. Tenants -N). According to an embodiment, multi-tenant service  and unified communications service  are cloud based services that provides resources\/services (, ) to tenants subscribed to the service and maintains each tenant's data separately and protected from other tenant data. For example, service  may be configured to provide services corresponding to messaging (e.g. MICROSOFT EXCHANGE) and unified communications service  may be configured to provide a unified communications environment (e.g. MICROSOFT LYNC 2010) that comprises video, IM, email, sharing, and the like. Both the primary contact service and the unified communications service interact with contacts, such as IM contacts and lists.","One or more contacts manager  may be included within the system. For example, a single contacts manager  may be utilized within service  and\/or a contacts manager may be included at other locations (e.g. each tenant and user). The distributed contacts managers may be configured to interact with each other. For example, contacts manager  at unified communications service  may be configured to interact with the contacts manager on client  and primary contact service .","Primary contact service is configured to include a unified contacts store that stores contacts for one or more services\/clients. Contacts\/lists originally stored at a different service (e.g. contacts  at service ) may be migrated to unified contacts  at primary contact service  such that service  may interact with the contacts\/list using the web service APIs. According to an embodiment, once the contacts are migrated to the primary contact service, the contacts may be removed from the different service (e.g. service ). When desired, copies may be obtained from primary contact service  and stored. For example, client  has requested through the API one or more lists and contacts to be stored within a cache (). Providing a unified contact store that may be accessed by different clients\/services assists in managing the common lists\/contacts between the different services.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 3","b":["310","320","330","340","350","360"]},"According to an embodiment, the APIs follow the format provided below.","AddNewImContactToGroup:",{"@attributes":{"id":"p-0028","num":"0027"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\/\/\/ <summary>"},{"entry":"\u2003\u2003\/\/\/ Initializes a new instance of the"},{"entry":"AddImContactToGroupCommand"},{"entry":"\u2003\u2003\/\/\/ <\/summary>"},{"entry":"\u2003\u2003\/\/\/ <param name=\u201ccallContext\u201d>Information about the current call,"},{"entry":"such as user identity, preferred culture, etc...<\/param> - THIS IS AN"},{"entry":"AUTHENTICATED USER - here is my stuff - no state being"},{"entry":"maintained - here I am again here is my stuff"},{"entry":"\u2003\u2003\/\/\/ <param name=\u201crequest\u201d>Request<\/param>"},{"entry":"\u2003\u2003public AddNewImContactToGroupCommand(CallContext"},{"entry":"callContext, AddNewImContactToGroupRequest request)"},{"entry":"\u2003\u2003\u2003: base(callContext, request)"},{"entry":"\u2003\u2003\/\/\/ <summary>"},{"entry":"\u2003\u2003\/\/\/ Adds the new im contact to the group."},{"entry":"\u2003\u2003\/\/\/ <\/summary>"},{"entry":"\u2003\u2003\/\/\/ <returns>ServiceResults<\/returns>"},{"entry":"\u2003\u2003internal override ServiceResult<Persona> Execute( )"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"AddImGroup:",{"@attributes":{"id":"p-0030","num":"0029"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\/\/\/ <summary>"},{"entry":"\u2003\u2003\/\/\/ Initializes a new instance of the"},{"entry":"AddImContactToGroupCommand"},{"entry":"\u2003\u2003\/\/\/ <\/summary>"},{"entry":"\u2003\u2003\/\/\/ <param name=\u201ccallContext\u201d>Information about the current call,"},{"entry":"such as user identity, preferred culture, etc...<\/param>"},{"entry":"\u2003\u2003\/\/\/ <param name=\u201crequest\u201d>Request<\/param>"},{"entry":"\u2003\u2003public AddImGroupCommand(CallContext callContext,"},{"entry":"AddImGroupRequest request)"},{"entry":"\u2003\u2003\u2003: base(callContext, request)"},{"entry":"\u2003\u2003\/\/\/ <summary>"},{"entry":"\u2003\u2003\/\/\/ Adds the new im group."},{"entry":"\u2003\u2003\/\/\/ <\/summary>"},{"entry":"\u2003\u2003\/\/\/ <returns>ServiceResults<\/returns>"},{"entry":"\u2003\u2003internal override ServiceResult<ImGroup> Execute( )"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"RemoveImContactFromGroup:",{"@attributes":{"id":"p-0032","num":"0031"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\/\/\/ <summary>"},{"entry":"\u2003\u2003\/\/\/ Initializes a new instance of the"},{"entry":"RemoveImContactFromGroupCommand class"},{"entry":"\u2003\u2003\/\/\/ <\/summary>"},{"entry":"\u2003\u2003\/\/\/ <param name=\u201ccallContext\u201d>Information about the current call,"},{"entry":"such as user identity, preferred culture, etc...<\/param>"},{"entry":"\u2003\u2003\/\/\/ <param name=\u201crequest\u201d>Request<\/param>"},{"entry":"\u2003\u2003public RemoveImContactFromGroupCommand(CallContext"},{"entry":"callContext, RemoveImContactFromGroupRequest request)"},{"entry":"\u2003\u2003\u2003: base(callContext, request)"},{"entry":"\u2003\u2003\/\/\/ <summary>"},{"entry":"\u2003\u2003\/\/\/ Add the im contact to the group."},{"entry":"\u2003\u2003\/\/\/ <\/summary>"},{"entry":"\u2003\u2003\/\/\/ <returns>ServiceResults<\/returns>"},{"entry":"\u2003\u2003internal override ServiceResult<ServiceResultNone> Execute( )"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"AddDistributionGroupToImList:",{"@attributes":{"id":"p-0034","num":"0033"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\/\/\/ <summary>"},{"entry":"\u2003\u2003\/\/\/ Initializes a new instance of the"},{"entry":"AddImContactToGroupCommand"},{"entry":"\u2003\u2003\/\/\/ <\/summary>"},{"entry":"\u2003\u2003\/\/\/ <param name=\u201ccallContext\u201d>Information about the current call,"},{"entry":"such as user identity, preferred culture, etc...<\/param>"},{"entry":"\u2003\u2003\/\/\/ <param name=\u201crequest\u201d>Request<\/param>"},{"entry":"\u2003\u2003public AddDistributionGroupToImListCommand(CallContext"},{"entry":"callContext, AddDistributionGroupToImListRequest request)"},{"entry":"\u2003\u2003\u2003: base(callContext, request)"},{"entry":"\u2003\u2003\/\/\/ <summary>"},{"entry":"\u2003\u2003\/\/\/ Add the distribution group to the im list."},{"entry":"\u2003\u2003\/\/\/ <\/summary>"},{"entry":"\u2003\u2003\/\/\/ <returns>ServiceResults<\/returns>"},{"entry":"\u2003\u2003internal override ServiceResult<ImGroup> Execute( )"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"GetImItemList:",{"@attributes":{"id":"p-0036","num":"0035"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/\/ <summary>"},{"entry":"\/\/\/ Initializes a new instance of the GetImItemListCommand class."},{"entry":"\/\/\/ <\/summary>"},{"entry":"\/\/\/ <param name=\u201ccallContext\u201d>Information about the current call, such"},{"entry":"as user identity, preferred culture, etc...<\/param>"},{"entry":"\/\/\/ <param name=\u201crequest\u201d>Request<\/param>"},{"entry":"public GetImItemListCommand(CallContext callContext,"},{"entry":"GetImItemListRequest request)"},{"entry":": base(callContext, request)"},{"entry":"\/\/\/ <summary>"},{"entry":"\/\/\/ Gets the im item list."},{"entry":"\/\/\/ <\/summary>"},{"entry":"\/\/\/ <returns>ServiceResults<\/returns>"},{"entry":"internal override ServiceResult<ImItemList> Execute( )"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"TagImContact:",{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\/\/\/ <summary>"},{"entry":"\u2003\u2003\/\/\/ Initializes a new instance of the TagImContactCommand class."},{"entry":"\u2003\u2003\/\/\/ <\/summary>"},{"entry":"\u2003\u2003\/\/\/ <param name=\u201ccallContext\u201d>Information about the current call,"},{"entry":"such as user identity, preferred culture, etc...<\/param>"},{"entry":"\u2003\u2003\/\/\/ <param name=\u201crequest\u201d>Request<\/param>"},{"entry":"\u2003\u2003public TagImContactCommand(CallContext callContext,"},{"entry":"TagImContactRequest request)"},{"entry":"\u2003\u2003\u2003: base(callContext, request)"},{"entry":"\u2003\u2003\/\/\/ <summary>"},{"entry":"\u2003\u2003\/\/\/ Returns the response"},{"entry":"\u2003\u2003\/\/\/ <\/summary>"},{"entry":"\u2003\u2003\/\/\/ <returns>Returns the response<\/returns>"},{"entry":"\u2003\u2003internal override IExchangeWebMethodResponse GetResponse( )"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"wherein the parameters to the API set above follow:",{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\/\/\/ <summary>"},{"entry":"\u2003\/\/\/ Implements the AddNewImContactToGroupRequestType schema"},{"entry":"type."},{"entry":"\u2003\/\/\/ <\/summary>"},{"entry":"\u2003[XmlType(\u201cAddNewImContactToGroupRequestType\u201d, Namespace ="},{"entry":"XmlNamespaces.MessageNamespace)]"},{"entry":"\u2003[DataContract(Namespace = JsonNamespaces.Exchange)]"},{"entry":"\u2003public class AddNewImContactToGroupRequest : BaseRequest"},{"entry":"\u2003{"},{"entry":"\u2003\u2003\/\/\/ <summary>"},{"entry":"\u2003\u2003\/\/\/ The Im Address of the Im Contact to add to a group."},{"entry":"\u2003\u2003\/\/\/ <\/summary>"},{"entry":"\u2003\u2003[XmlElement(ElementName = \u201cImAddress\u201d)]"},{"entry":"\u2003\u2003[DataMember(Name = \u201cImAddress\u201d, IsRequired = true, Order = 1)]"},{"entry":"\u2003\u2003public string ImAddress { get; set; }"},{"entry":"\u2003\u2003\/\/\/ <summary>"},{"entry":"\u2003\u2003\/\/\/ The display name of the Im Contact to add to a group."},{"entry":"\u2003\u2003\/\/\/ <\/summary>"},{"entry":"\u2003\u2003[XmlElement(ElementName = \u201cDisplayName\u201d)]"},{"entry":"\u2003\u2003[DataMember(Name = \u201cDisplayName\u201d, IsRequired = false, Order ="},{"entry":"2)]"},{"entry":"\u2003\u2003public string DisplayName { get; set; }"},{"entry":"\u2003\u2003\/\/\/ <summary>"},{"entry":"\u2003\u2003\/\/\/ The group id of the group to add the Im contact to."},{"entry":"\u2003\u2003\/\/\/ <\/summary>"},{"entry":"\u2003\u2003[XmlElement(ElementName = \u201cGroupId\u201d)]"},{"entry":"\u2003\u2003[DataMember(Name = \u201cGroupId\u201d, IsRequired = false, Order = 3)]"},{"entry":"\u2003\u2003public ItemId GroupId { get; set; }"},{"entry":"\u2003\u2009\/\/\/ <summary>"},{"entry":"\u2003\/\/\/ Implements the AddImGroupRequestType schema type."},{"entry":"\u2003\/\/\/ <\/summary>"},{"entry":"\u2003[XmlType(\u201cAddImGroupRequestType\u201d, Namespace ="},{"entry":"XmlNamespaces.MessageNamespace)]"},{"entry":"\u2003[DataContract(Namespace = JsonNamespaces.Exchange)]"},{"entry":"\u2003public class AddImGroupRequest : BaseRequest"},{"entry":"\u2003{"},{"entry":"\u2003\u2003\/\/\/ <summary>"},{"entry":"\u2003\u2003\/\/\/ The display name of the Im Group to add."},{"entry":"\u2003\u2003\/\/\/ <\/summary>"},{"entry":"\u2003\u2003[XmlElement(ElementName = \u201cDisplayName\u201d)]"},{"entry":"\u2003\u2003[DataMember(Name = \u201cDisplayName\u201d, IsRequired = true, Order ="},{"entry":"1)]"},{"entry":"\u2003\u2003public string DisplayName { get; set; }"},{"entry":"\u2003\u2009\/\/\/ <summary>"},{"entry":"\u2003\/\/\/ Implements the RemoveImContactFromGroupRequestType"},{"entry":"schema type."},{"entry":"\u2003\/\/\/ <\/summary>"},{"entry":"\u2003[XmlType(\u201cRemoveImContactFromGroupRequestType\u201d, Namespace"},{"entry":"= XmlNamespaces.MessageNamespace)]"},{"entry":"\u2003[DataContract(Namespace = JsonNamespaces.Exchange)]"},{"entry":"\u2003public class RemoveImContactFromGroupRequest : BaseRequest"},{"entry":"\u2003{"},{"entry":"\u2003\u2003\/\/\/ <summary>"},{"entry":"\u2003\u2003\/\/\/ The contact id of the Im contact to remove from a group."},{"entry":"\u2003\u2003\/\/\/ <\/summary>"},{"entry":"\u2003\u2003[XmlElement(ElementName = \u201cContactId\u201d)]"},{"entry":"\u2003\u2003[DataMember(Name = \u201cContactId\u201d, IsRequired = true, Order = 1)]"},{"entry":"\u2003\u2003public ItemId ContactId { get; set; }"},{"entry":"\u2003\u2003\/\/\/ <summary>"},{"entry":"\u2003\u2003\/\/\/ The group id of the group to remove the Im contact from."},{"entry":"\u2003\u2003\/\/\/ <\/summary>"},{"entry":"\u2003\u2003[XmlElement(ElementName = \u201cGroupId\u201d)]"},{"entry":"\u2003\u2003[DataMember(Name = \u201cGroupId\u201d, IsRequired = true, Order = 2)]"},{"entry":"\u2003\u2003public ItemId GroupId { get; set; }"},{"entry":"\u2003\u2009\/\/\/ <summary>"},{"entry":"\u2003\/\/\/ Implements the AddDistributionGroupToImListRequestType"},{"entry":"schema type."},{"entry":"\u2003\/\/\/ <\/summary>"},{"entry":"\u2003[XmlType(\u201cAddDistributionGroupToImListRequestType\u201d,"},{"entry":"Namespace = XmlNamespaces.MessageNamespace)]"},{"entry":"\u2003[DataContract(Namespace = JsonNamespaces.Exchange)]"},{"entry":"\u2003public class AddDistributionGroupToImListRequest : BaseRequest"},{"entry":"\u2003{"},{"entry":"\u2003\u2003\/\/\/ <summary>"},{"entry":"\u2003\u2003\/\/\/ The Smtp Address of the distribution group."},{"entry":"\u2003\u2003\/\/\/ <\/summary>"},{"entry":"\u2003\u2003[XmlElement(ElementName = \u201cSmtpAddress\u201d)]"},{"entry":"\u2003\u2003[DataMember(Name = \u201cSmtpAddress\u201d, IsRequired = true, Order ="},{"entry":"1)]"},{"entry":"\u2003\u2003public string SmtpAddress { get; set; }"},{"entry":"\u2003\u2009\/\/\/ <summary>"},{"entry":"\u2003\/\/\/ Impelements the GetImItemListRequestType schema type."},{"entry":"\u2003\/\/\/ <\/summary>"},{"entry":"\u2003[XmlType(\u201cGetImItemListRequestType\u201d, Namespace ="},{"entry":"XmlNamespaces.MessageNamespace)]"},{"entry":"\u2003[DataContract(Namespace = JsonNamespaces.Exchange)]"},{"entry":"\u2003public class GetImItemListRequest : BaseRequest"},{"entry":"\u2003{"},{"entry":"\u2003\u2003[XmlArray]"},{"entry":"\u2003\u2003[XmlArrayItem(\u201cExtendedProperty\u201d, typeof(ExtendedPropertyUri),"},{"entry":"Namespace = XmlNamespaces.TypeNamespace, IsNullable = false)]"},{"entry":"\u2003\u2003[DataMember(Name = \u201cExtendedProperties\u201d, IsRequired = false,"},{"entry":"Order = 1)]"},{"entry":"\u2003\u2003public ExtendedPropertyUri[ ] ExtendedProperties;"},{"entry":"\u2003\u2009\/\/\/ <summary>"},{"entry":"\u2003\/\/\/ Implements the TagImContactRequestType schema type."},{"entry":"\u2003\/\/\/ <\/summary>"},{"entry":"\u2003[XmlType(\u201cTagImContactRequestType\u201d, Namespace ="},{"entry":"XmlNamespaces.MessageNamespace)]"},{"entry":"\u2003[DataContract(Namespace = JsonNamespaces.Exchange)]"},{"entry":"\u2003public class TagImContactRequest : BaseRequest"},{"entry":"\u2003{"},{"entry":"\u2003\u2003\/\/\/ <summary>"},{"entry":"\u2003\u2003\/\/\/ The contact id of the Im contact to tag."},{"entry":"\u2003\u2003\/\/\/ <\/summary>"},{"entry":"\u2003\u2003[XmlElement(ElementName = \u201cContactId\u201d)]"},{"entry":"\u2003\u2003[DataMember(Name = \u201cContactId\u201d, IsRequired = true, Order = 1)]"},{"entry":"\u2003\u2003public ItemId ContactId { get; set; }"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 4"},"After a start operation, the process  flows to operation , where contacts are migrated from the different service\/client application to the primary contact service when determined According to an embodiment, the contacts are IM contact lists that are migrated from a unified communications service to a messaging service. The contacts are migrated to the primary contact service when the contacts at the different service do not exist at the primary contact service. The contacts may be migrated using the API. Once the contacts are migrated from the different service to the primary contact service, the contacts are maintained by the primary contact service and accessed\/manipulated using the API.","Moving to operation , a call using the API is received by the primary contact service. The call may be made by a client application of a service (e.g. a client of the different service that is different from the primary contact service) and\/or from a service itself (e.g. the different service). The API includes functions such as, but not limited to: adding a new IM contact to a group, adding a new IM group, removing an IM contact from a group, adding a distribution group to an IM list, getting an IM item list, and tagging an IM contact. According to an embodiment, each call to the API typically receives a context parameter and a request parameter. The context parameter is used for authentication and the request parameter is used to provide the information used to request the action to be performed regarding the identified contact(s)\/list(s).","Flowing to operation , the call using the API is authenticated by the primary contact service. The call is authenticated to help ensure that the requestor is authorized to perform the requested operation regarding the contacts\/lists through the API. The context parameter may include a variety of different information, including but not limited to: information about the requestor of the current call, such as user identity, preferred culture, identification of a mailbox, security information (e.g. token\/certificate) and the like. According to an embodiment, each API call is stateless. In other words, each API call can be processed and authenticated independently of other calls.","Transitioning to operation , a determination is made as to what contact(s)\/list(s) are affected by the call. For example, when adding a contact to a group, a group is affected. Generally, one or more contacts\/lists within the primary contact service may be added\/deleted\/changed\/queried in response to a call.","Moving to operation , the requested operation is performed. For example, an IM contact is added\/deleted to\/from group, a group of contacts is added\/deleted, a new group is added\/deleted, an IM contact is added\/deleted, a distribution group is added to an IM list, an IM item list is retrieved, an IM contact is tagged and the like.","Flowing to operation , the result(s) are provided to the call requestor.","The process then moves to an end operation and returns to processing other actions.","The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
