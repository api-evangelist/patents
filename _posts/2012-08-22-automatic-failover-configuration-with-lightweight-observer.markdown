---
title: Automatic failover configuration with lightweight observer
abstract: Techniques used in an automatic failover configuration having a primary database system, a standby database system, and an observer for preventing divergence among the primary and standby database systems while increasing the availability of the primary database system. In the automatic failover configuration, the primary database system remains available even in the absence of both the standby and the observer as long as the standby and the observer become absent sequentially. The failover configuration further permits automatic failover only when the observer is present and the standby and the primary are synchronized and inhibits state changes during failover. The database systems and the observer have copies of failover configuration state and the techniques include techniques for propagating the most recent version of the state among the databases and the observer and techniques for using carefully-ordered writes to ensure that state changes are propagated in a fashion which prevents divergence.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08630985&OS=08630985&RS=08630985
owner: Oracle International Corporation
number: 08630985
owner_city: Redwood Shores
owner_country: US
publication_date: 20120822
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","STATEMENT REGARDING FEDERALLY SPONSORED RESEARCH OR DEVELOPMENT","REFERENCE TO A SEQUENCE LISTING","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This patent application is a continuation of U.S. Ser. No. 11\/604,063, Luo, et al., Automatic failover configuration with lightweight observer, filed Nov. 24, 2006, now U.S. Pat. No. 8,255,369 which is in turn a continuation-in-part of U.S. Ser. No. 11\/603,504, Vivian, et al., Database system configured for automatic failover with no data loss, filed Nov. 22, 2006, now U.S. Pat. No. 7,627,584, which in turn is a continuation-in-part of U.S. Ser. No. 11\/289,974, Connolly, et al., A system and method for configuration of a database system with replicated data and automatic failover, filed Nov. 30, 2005, now U.S. Pat. No. 7,549,079, and further claims priority from the following U.S. Provisional patent applications, all filed Nov. 30, 2005:\n\n","All of these patent applications are incorporated by reference into the present patent application; the present patent application contains portions of the Background of the invention of U.S. Ser. No. 11,289,974 as well as the Detailed Description through the section Recovering the failed primary and .","Not applicable.","Not applicable.","1. Field of the Invention","The present invention relates generally to database management systems and more particularly to techniques for doing automatic failover from a primary database server to a standby database server.","2. Description of Related Art","As government and business store increasing amounts of data in database systems, there are increasing demands to have such data always available, even in the face of catastrophic failure of computer hardware, network outage, disastrous data corruption, etc. To meet these requirements database system engineers have developed database system configurations in which database data is replicated in more than one database system. Once data is replicated from one database system to another, if the first database system becomes absent from the configuration, the second database is used for processing database requests. The term absent is used here for any situation in which other participants in a configuration lose contact with a particular participant. Absence may be caused, for example, by failure of the absent participant or by failure of communications links between the absent participant and other participants. The process of switching from an absent first database system to a second database system is commonly known as failover.","Replicating a Database in a Standby Database","Replication features such as those just described are available under the name Oracle Data Guard in relational database systems manufactured by Oracle Corporation of Redwood City, Calif.",{"@attributes":{"id":"p-0011","num":"0015"},"figref":"FIG. 1","b":["101","103","113","121","103","103","105","108","113","110","121","105","107","109","109","103"]},"The redo data may be applied either physically or logically against a standby database. Redo data is a physical copy of the data produced in primary database  as a result of the change. When redo data is applied physically against a standby database, as shown at  and , standby database  is physically identical to primary database , that is, it has data structures which are identical on a disk block by disk block basis to those in primary database  and the redo data is applied as it comes from primary database  to database .","When redo data is applied logically against a standby database, as shown at -, standby database  is logically identical to primary database , that is, an SQL statement will have the same result when applied either to primary database  or logical standby database . When redo data is applied logically, the redo data is transformed into the SQL statements that produced the changes recorded in the redo data, as shown at  and , and the SQL statements are then executed on logical standby database , as shown at .","An Oracle database system  using Data Guard can be run in three distinct protection modes:","Maximum Protection\n\n","Maximum Availability\n\n","Maximum Performance\n\n","If the primary database system and the standby database system are synchronized with each other and the primary database system becomes absent, an automatic failover may occur. In the automatic failover, the standby database becomes the primary database and when the former primary database has recovered, the former primary may become the new standby.  presents a schematic overview of how automatic failover works.","An exemplary implementation of a database system employing automatic failover was disclosed by Microsoft Corporation in 2004. The following schematic is based on that implementation. A normally functioning replicated database system is shown at . The replicated database system  has a primary database  and standby database . In the Microsoft Corporation implementation, both the primary and standby databases run on SQL servers. Additionally, the replicated database system includes a witness or observer . The witness or observer and the two database systems are in contact with and monitor each other, as shown by arrow . In the Microsoft Corporation system, the witness or observer is another SQL server; the server need not, however, have a database system mounted on it. In the following, the primary database system, standby database system, and the witness or observer are termed the failover participants.","The function of the witness or observer (in the following simply \u201cObserver\u201d) in the Microsoft Corporation implementation of automatic failover and in such implementations generally is to provide an entity in addition to the primary and standby databases which can help the standby or primary database determine either whether a role change has already occurred or whether a role change is now necessary. For example, both the standby and the Observer monitor the primary database system, and if the primary database system becomes absent, the standby database system may have to perform an automatic failover. The standby database system will not, however, perform the automatic failover unless the Observer has confirmed that the primary is absent. In general terms, the process of one participant in the configuration obtaining confirmation from another participant in the configuration before changing the current state of the configuration is termed obtaining a quorum for the state change. Thus, in general terms, the function of the observer is to make it possible for either the primary or the standby to obtain a quorum for a state change when the other is not available.","When the replicated database system is functioning as shown at , primary database  is forwarding redo data  to redo log files  and the redo data is being applied to standby database  (arrow ). During normal functioning of the replicated database as shown at , primary database  fails. At  is shown how the replicated system fails over from failed primary database  to standby or failover target database . Because database  has failed such that Observer  no longer is in communication with database , Observer  is in communication only with database , as shown by arrow  and database  has ceased sending database  redo data. If Observer  has also noted that database  has failed, there is a quorum for automatic failover and standby database  can perform the failover. Upon failover, applications that would be attached to failed primary database  are re-attached to the new primary database  instead. Modifications to the new primary database  are stored in redo log files in the usual fashion. At  is shown what happens when Observer  notes that database  has become available again. Observer  now has communication with both database systems, as shown by arrow (iii). Working together, new primary server  and Observer  recover failed primary  such that it may serve the new primary as its standby server. At this point, database  is the primary database and database  the standby database. Redo data  flows from database  to database , as shown by arrow .","A serious concern in the design of database systems that do automatic failover is ensuring that the automatic failover does not result in divergence between the primary and standby databases. The databases have diverged when there are differences between the databases which cannot be reconciled without the loss of data in one or the other of the databases. There are two situations in which failover may result in diverging databases:\n\n","In the Microsoft automatic failover system of , divergence resulting from automatic failover is prevented by having the primary cease processing transactions whenever no quorum is available, i.e., whenever both the standby and the witness are unavailable. The primary ceases processing transactions even though it is perfectly capable of continuing to process them, albeit at the risk of some loss of redo data because the redo being produced by the primary cannot be immediately sent to the standby. In the following, a primary which ceases processing transactions in order to prevent divergence is said to have stalled. As can be seen from the foregoing, there is a tradeoff in systems with automatic failover between divergence prevention and availability of the primary database system.","While automatic failover is conceptually simple, there are many difficulties at the detailed design level. Among them are:\n\n","It is an object of the invention disclosed herein to provide solutions for these and other problems in the design of replicating database systems that perform automatic failover.","The foregoing objectives are achieved with regard to the observer by an automatic failover configuration which has participants including a primary database system, a standby database system, and an active observer that exchanges first control messages with the primary database system and the standby database system via one or more non-redo communications links.","In another aspect, the foregoing objectives are achieved by a method for preventing divergence in an automatic failover configuration. The method includes the steps performed in an active observer belonging to the automatic failover configuration of sending a first message to the standby database system indicating that the active observer has determined that a failover condition has occurred in the automatic failover configuration, receiving a second message from the standby database system indicating that the standby database system has entered a failover pending state which indicates that the automatic failover configuration is ready to fail over, responding to the second message by entering the failover pending state; and responding to a third message from the standby database system indicating that the standby database system has completed the failover and is currently the primary database system by leaving the failover pending state and receiving current automatic failover configuration state from the current primary database system.","In a further aspect, the foregoing objectives are achieved by a method of ensuring that there is only one active observer in the automatic failover configuration. The method includes the steps performed in an observer when the observer is started up of requesting an active observer identifier from the primary database system and terminating if no active observer identifier is received; and the steps performed when the observer receives automatic failover configuration state of comparing the observer's active observer identifier with the current active observer identifier in the automatic failover configuration state and if they are different, terminating.","Other objects and advantages will be apparent to those skilled in the arts to which the invention pertains upon perusal of the following Detailed Description and drawing, wherein:","Reference numbers in the drawing have three or more digits: the two right-hand digits are reference numbers in the drawing indicated by the remaining digits. Thus, an item with the reference number  first appears as item  in .","The following Detailed Description will begin with the discussion of the automatic failover system disclosed in U.S. Ser. No. 11\/289,974; this automatic failover system is termed in the following the \u201cFast Start Failover System\u201d, or FSFO. The Description will then generalize the discussion by disclosing the state machine which determines the behavior of the fast start failover participants in U.S. Ser. No. 11\/289,974, disclosing the configuration state which is shared by the fast start failover participants and which implements the state machine, and disclosing the general techniques employed to form a quorum, to propagate configuration state, and to avoid divergence. The Description finally discloses details of the state transitions in a preferred embodiment.","Fast-Start Failover System",{"@attributes":{"id":"p-0050","num":"0064"},"figref":"FIG. 3","b":["301","303","305","307","317","333","301","301","311","317","311","313","319","301"]},"Each host  and  contains a primary database system  or standby database system . The components of the database system include System Global Area (SGA)  which is used to share data between processes. Among the processes belonging to an Oracle database are database processes , including processes devoted to carrying out the Data Guard functionality  of the Oracle database. These processes maintain a separate persistent store of configuration metadata . Metadata  stores a profile of the Data Guard configuration, that is, information as to which database system is primary, which database system is standby, whether or not automatic failover is enabled, the value of the FSFO Threshold, and other configuration data. A portion of this profile concerns Fast-Start Failover and is termed in the following the FSFO context.","Observer process  is a client of the primary and standby database systems. As such, observer process  may be embodied as a separately executable process on its host machine  or as a thread of execution, if that is more appropriate for its host machine. The only requirement is that the observer be an independently executing entity that is capable of connecting to host machines  and  hosting the primary and standby databases and of maintaining its own persistent store of FSFO state. Whether it is embodied as a process, a thread, or other separately executing entity, observer  will be referred to herein as the \u2018Observer process\u2019 or just \u2018Observer\u2019. It is recommended that Observer process  be placed on a separate host  from other hosts , , and  in the configuration . Observer process  maintains a small amount of persistent storage , into which it records relevant information pertaining to the Data Guard configuration that it will be \u2018observing\u2019.","The Observer","An Observer  has a unique identifier termed the OBID. The first time an Observer  is started, it obtains the OBID by registering itself with Data Guard. Once the Observer has its OBID, it executes a \u201cGET_FSFO command that queries primary database server  for FSFO context information. Upon receipt of this command, primary database server  passes information from DG metadata  back to Observer . The information includes:\n\n","If FSFO is enabled, then additionally\n\n","Observer  stores this information in its local \u201cObserver Storage\u201d file .","If FSFO has not been enabled, Observer  will periodically reattempt the gathering of FSFO information from primary database server  and will not actually be \u201cobserving\u201d until it receives an indication from the primary database server  that FSFO has now been enabled.","Once these initial steps have occurred and FSFO has been enabled Observer  begins \u201cobserving\u201d. This consists of periodic pings to primary database server  and FSFO target standby server . Each ping consists of a message sent by Observer  to the database server that includes the following:\n\n","There are two basic ways for Observer  to decide that a failover should be attempted. One is that Observer  determines from the primary's failure to respond to the Observer's ping that the primary is absent. If the ping that Observer  sends to the primary server does not receive a timely response, Observer  will retry the ping according to a retry algorithm that factors in the value of the FSFO Threshold. If no contact with the primary can be made before that threshold expires, Observer  assumes that primary database  has failed and begins the failover sequence.","Another is that primary server  informs Observer  that a failover is necessary. The function on the primary server  that responds to the Observer's ping will perform certain internal checks to determine if any conditions exist that would require a failover. In a preferred embodiment, one such condition is datafile corruption. In other embodiments, there may be other conditions that require a failover and in still others, an application program that is using the primary database system may specify that a failover should occur. The absence of primary database  and other conditions in primary database  which require a failover are termed in the following failover conditions. When Observer  determines that a failover condition has arisen, it immediately sends a message to standby database , which asks standby database  if it is \u201cready to failover\u201d. Standby database  evaluates the request and responds to Observer . It may respond \u201cNo\u201d because, unlike Observer , it's possible that standby database  is actually being contacted by primary database  on a timely basis. This would be the case where network connectivity between primary  and Observer  is down, but is up between primary  and standby .","After evaluating the relevant conditions, standby  either rejects the request or acknowledges that it can do the failover. If standby  rejects the request, Observer  continually retries until either the conditions provoking the failover attempt get resolved, for example, connectivity between primary  and Observer  is restored, or until standby  eventually acknowledges that it can do the failover, in which case Observer  tells standby  to proceed with the failover.","Observer  records in its persistent storage  that a failover has begun. Observer  awaits status from standby  that the failover operation has indeed completed, i.e., standby  has now become primary , and that the Data Guard metadata  has been updated accordingly and the MIV incremented. At this point Observer  begins pinging the new primary  which, as described above, will respond to the Observer that the Observer no longer has a current MIV. Observer  then issues the \u201cGET_FSFO\u201d command to new primary server  to refresh its copy of the FSFO context information.","Recovering the Failed Primary","Following the failover, Observer  continually attempts to ping the old primary . Once connectivity is reestablished between old primary  and both Observer  and standby  (either by restarting a failed primary  after it crashes or by resolving the network outage that led to the failover), the old primary  learns from the role value in Observer 's ping that the old primary is no longer the FSFO primary database and indicates to Observer  that it is ready to become the new FSFO target standby. Observer  and the new primary  then work together to reinstate the old primary  as the new FSFO target standby.","Overview of an Automatic Failover Configuration: ","In the following, a database system such as system  which is configured for automatic failover will be termed an automatic failover configuration or AFC.  is a conceptual block diagram of an AFC . Configuration  has three participants: Observer  and two databases (A) and (B). Either of these databases may function as a primary or standby database system; arrows (A) and (B) indicate the direction of flow of redo data when one of the databases is the primary and the other is the standby. Thus, arrow (A) shows the direction of flow of redo data when database (A) is the primary and database (B) is the standby. Either or both databases  may consist of a cluster of database instances. In the preferred embodiment, the cluster is an Oracle Real Application Cluster or RAC; however, such clustered database instances appear to configuration  as a single database.","Each participant has a copy  of AFC state , which contains the current AFC configuration state of AFC . The AFC configuration states are states of the entire configuration, as opposed to states of the participants in the configuration. Because each participant has its own copy  of AFC state , a given participant may at times have a copy which indicates a configuration state which is different from the actual current configuration state. As will be explained in detail below, a state propagation mechanism ensures that the actual current configuration state will be propagated to the copies in all of the participants.","Transitions to another AFC state are made by one participant, often with the aid of another participant, and then propagated to the other participants by the propagation mechanism. In system , a portion of the AFC configuration state is part of the FSFO context. The participants communicate with each other by messaging channel . The communications serve three purposes:\n\n","Propagation occurs via regular messages from participants to other participants.","Overview of AFC State ","In overview, AFC state  contains a state specifier  which specifies a configuration state of AFC , a state version number  which increases monotonically each time the configuration state of AFC  changes in a way that is of interest to all three participants, a role specifier  which specifies the current primary database in AFC configuration , an observer UID  which specifies the current observer , and the current MIV . As will be explained in more detail later, during a change of configuration state , the AFC participants who participate in making the state change write parts of the new state to persistent storage . They do this in an order which is termed in the following a careful ordering of writes. Writing a value to persistent storage  is termed in the following persisting the value.","Propagation of AFC State","AFC state  is propagated among the components of AFC  by messages containing copies of AFC state . The messages accompany pings. In the following, a participant which pings another participant is termed the pinger; the participant which is the recipient is termed the pingee. Propagation occurs generally as follows: Observer  periodically pings both databases ; the current primary database (A) periodically pings the current standby database (B). When a change in AFC state  occurs which must be propagated to all participants in AFC , state version  is increased. When a pingee receives a ping from a pinger and the message accompanying the ping has a value in state version  which is different from the value of state version  in the pingee's copy, the pingee responds as follows:\n\n","The pinger and pingee then manage the propagation of the state together. The manner in which this is done will be explained in detail later.","As is apparent from the foregoing, the manner in which state is propagated to a participant in AFC  depends on which participants are currently present in the configuration and on the relationship between the time at which a component changes its AFC state and the times at which the pinging occurs. For example, one event which can cause a transition in AFC state  is the discovery by the standby that there are gaps in the redo data which it has received. When the standby discovers the gap, it makes the transition in its own copy of AFC state . The new state is then propagated by pings. Depending on the order of the pings, the Observer may then get the new state from the primary, the primary may get the new state from the Observer, or each may get the new state directly from the standby. If a participant is absent when a state transition occurs, the absent participant will receive the current state from one of the other participants when it returns.","State Machine for AFC : ","The behavior of AFC  can be described in terms of a state machine that describes the possible AFC configuration states and how AFC  transitions from one AFC configuration state to another.  shows the state machine  for AFC . The circles (configuration-wide states) and hexagons (per-node states) represent states of the state machine. The arcs between states represent the external events that trigger transitions between the states.","Components of AFC Configuration States","There are six AFC configuration states, indicated by circles in . Four of these states, , , , and , have two component states: an OBSERVED\/UNOBSERVED state and a SYNCHRONIZED\/UNSYNCHRONIZED state. These component states are defined as follows:\n\n","The definitions of states , , , and  flow directly from the above definitions of SYNCHRONIZED\/UNSYNCHRONIZED and OBSERVED\/UNOBSERVED.\n\n","The above description of states , , , and  of AFC  is summarized from the point of view of the behavior of AFC  in a given state in table  of . Table  has four columns: column , with the names of the states, column , which indicates whether an automatic failover is permitted in the state, column , which indicates whether the primary and standby are synchronized in the state, , which indicates whether the primary will stall in the absence of the standby only in the state, and , which indicates whether the primary will stall in the absence of both the standby and the Observer in the state. There is a row for each of the four states. Thus, the row for state OBSERVED SYNCHRONIZED  indicates that AFO is permitted in the state, that the primary and secondary are synchronized in the state, and that the primary does not stall in the state when the standby is absent and the Observer is present, but stalls in the state only if both the standby and the observer are simultaneously absent. As indicated in footnote , the primary does not stall in OBSERVED SYNCHRONIZED when the standby is absent and the Observer is present because the presence of the Observer guarantees that the standby will return to a system that is in the UNSYNCHRONIZED state and will consequently not participate in the failover. This in turn makes it possible for the primary to transition to OBSERVED UNSYNCHRONIZED instead of stalling when the standby becomes absent. The primary does not stall in UNOBSERVED SYNCHRONIZED when the standby becomes absent because the transition from OBSERVED SYNCHRONIZED to UNOBSERVED SYNCHRONIZED requires that both the primary and the standby have noted the absence of the Observer. As will be explained in more detail later, because the standby has noted the absence of the Observer, it will not participate in a failover, and consequently, no divergence can occur as a result of the continued operation of the primary in UNOBSERVED SYNCHRONIZED and UNOBSERVED UNSYNCHRONIZED.","State Transitions in AFC ","As indicated above, the state transitions in  are indicated by arrows. The labels on the arrows indicate the conditions under which the state transition occurs. Thus, there are three ways in which a state transition directly from OBSERVED SYNCHRONIZED  to OBSERVED UNSYNCHRONIZED  can occur:\n\n","State diagram  also includes state transitions from a state to itself, indicated by arrows that loop back to the state. These transitions from a state to itself include\n\n","The state transitions that are of principal interest in the present context are the transitions between states , , , and . These state transitions have a number of properties that are relevant to the way in which they are done.","Quorum","All of the transitions between states , , , and  involve one or both database systems. A database system involved in a given transition may or may not require a quorum to make the transition. In the present context, a quorum is an agreement between a database system participant in AF configuration  and another participant in configuration  that a state transition may be made. A database system requires a quorum for the transition if a failure in AF configuration  during the transition could result in the database system diverging from the other database system. Divergence is possible whenever a transition may occur while a participant in configuration  is absent. While the participant is absent, the current AFC state  may not be propagated to it. Consequently, the requirement for a quorum ensures that a returning participant will not act on the basis of old AFC state , either in producing redo when it should not or providing wrong responses to quorum requests.","For example, if the primary becomes absent, an automatic failover occurs, the standby becomes the new primary, and the former primary returns without receiving AFC state that indicates that the former primary is no longer the primary, the new primary and the former primary can produce divergent streams of redo data. In terms of state diagram , divergence has occurred if role specifier  in more than one of the participating database systems indicates that the participating database system is a primary database system and state specifier  for the participating database systems that are primary database systems indicates that those database systems are in a configuration state which includes UNSYNCHRONIZED (states  and ).","Examples of transitions for which the primary database system requires a quorum are transition  and . In transition , the primary has detected that the standby has lost synchronization, generally because it has become absent. In these circumstances, the configuration should transition to OBSERVED UNSYNCHRONIZED. However, if the standby has become absent because a failover is occurring that the primary is unaware of, the configuration could again end up in an UNSYNCHRONIZED state in which there were two primaries. System  prevents this from happening by first requiring that the Observer be aware that a failover is going on and second by requiring that the standby which is becoming the primary receive quorum from the Observer for the failover. As will be explained in more detail later, if the Observer is aware that a failover is going on, it will not provide quorum for transition , and if the Observer is absent, it cannot provide quorum for transition . The primary will consequently make transition  only if the Observer is present and no failover is taking place. If the Observer becomes absent simultaneously with the standby, transition  becomes transition  and the primary stalls until the Observer and the standby provide quorum to make transition  or the standby provides quorum to make transition .","To ensure that a participant which provides quorum for another participant itself has the right values in its AFC state , system  employs carefully ordered writes. In transition , the carefully ordered write requires that the primary persist UNSYNCHRONIZED in its persistent copy  of state  after another participant has done so. Carefully ordered writes will be explained in detail later.","As regards transition , this transition occurs when the primary and standby are both present (as required by OBSERVED SYNCHRONIZED) and the Observer becomes absent. Because the transition is to a state () from which a further transition () to a state () that includes UNSYNCHRONIZED is possible without the presence of another participant to provide a quorum, the standby must provide quorum for the transition to UNOBSERVED SYNCHRONIZED. In the carefully ordered write, the primary persists the new state after the standby has persisted it. When the standby is in a configuration state (, ) including UNOBSERVED, it will not respond affirmatively to an attempted automatic or manual failover. Consequently, when transition  occurs and the standby returns in state , it cannot return as a primary database system and the two database systems cannot diverge.","Initiating a Transition","All of the transitions but automatic failover transition  are initiated by one or the other of the database systems. Transition  is initiated by the Observer. The database system which is the initiator of the transition is the first database system which determines that the transition should be made. For example, in both transition  and transition , the primary database system is the initiator.","Careful Ordering of Writes","Because the copies of AFC state  are distributed among the participants in AFC system , the information needed to prevent divergence must be persisted among the participants in AFC system  in a fashion such that a returning participant acquires the current AFC state . That is achieved by means of carefully ordered writes. In general, the careful ordering of writes requires that the new state resulting from a transition be persisted in the database system  for which the transition may result in divergence after it has been persisted in at least one other of the present participants. This ensures that if the potentially diverging database system  becomes absent before it persists the new configuration state, it will receive a configuration state from another participant when it returns and that configuration state will replace the configuration state that the potentially diverging database system had when it failed.","Acknowledgments","If the initiating database system requires a quorum to make a change, the initiating database system must persist the new state last. To deal with this problem, the initiating database system proposes the transition to the participant of AFC  providing the quorum. The quorum provider persists the required state for the transition and acknowledges to the initiating database system that it has done so; in response to the acknowledgment, the proposing database system persists the required state for the transition. Transition  requires such an acknowledgment. As will be explained in more detail below, in transition , the primary initiates the change to UNOBSERVED SYNCHRONIZED by sending the standby a ping that indicates the primary's intent to make the change to the standby. When the standby receives the ping, it determines whether it is still receiving pings from the Observer. If it is not, the standby persists UNOBSERVED and sends an acknowledgment that the Observer is absent in its response to the ping from the primary. When the primary receives the acknowledgment, it persists UNOBSERVED.","Continued Operability of AFC  During Absence and Return of Participants","An advantage of the manner in which AFC configuration state is propagated among the participants of AFC  and of the manner in which the configuration state is persisted in the participants is that a participant may leave AFC  and return to it without disrupting the operation of AFC . The AFC configuration state persisted in the returning participant indicates the configuration of AFC  when the participant left and the AFC configuration state that is propagated to the returning participant indicates the current configuration, and the existence of both the persisted state and the current state permits the returning participant to set its own AFC configuration state as required. A simple example is the following: the standby becomes absent when the AFC configuration state is OBSERVED SYNCHRONIZED, with AFC state version  having a value of x. The standby has persisted that state. When the standby returns, the current AFC configuration state is OBSERVED UNSYNCHRONIZED, with AFC state version  having a value that is greater than x. When a ping from the primary propagates the current AFC configuration state to the standby, the standby will respond to the new value of AFC state version  by persisting OBSERVED UNSYNCHRONIZED and the current AFC state version and return the values it has just persisted as its response to the ping.","Details of AFC State : ",{"@attributes":{"id":"p-0087","num":"0135"},"figref":["FIG. 6","FIG. 6","FIG. 5","FIG. 5"],"b":["601","506","506","301","506","301"],"ul":{"@attributes":{"id":"ul0029","list-style":"none"},"li":{"@attributes":{"id":"ul0029-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0030","list-style":"none"},"li":["the configuration file for the Observer;","the control files for the primary and secondary databases; and","the Data Guard metadata files for the primary and secondary databases."]}}}},"In overview, AFC state  includes an AFC state version number  and set of flags  which specify the configuration states of . Other values indicate the last ping times ( and ), the threshold time period for an automatic failover (), the current role of the participant (), the identity of the current observer (), and the current Metadata Incarnation Value (MIV)  for the Data Guard metadata. The portion of AFC state  which is propagated to the database system participants is flags , , , , , and ; AFC state version number ; Observer ID ; role ; AFO threshold ; and MIV . Flags , ,  are not propagated to the Observer. The methods used for propagation include pings for the flags and state version value , the GET FSFO function to propagate the OBID, role, threshold and MIV to the Observer and metadata resync messages from the Broker to propagate these items to the standby. In the following, this portion will be termed propagated AFC state. The portion of AFC state  which is persisted on careful writes is shown at .","Continuing in more detail with the flags,\n\n","Continuing with the other components of state  in a preferred embodiment, AFC state version  is a version number which is increased each time a transition from a state that includes SYNCHRONIZED to a state that includes UNSYNCHRONIZED or vice-versa is completed.","Portions of AFC state  vary from participant to participant. P-S timestamp  is a timestamp indicating when the standby database system last received data from the primary database system, either as a ping or as part of the generation and consumption of redo data. Observer time stamp  is a timestamp in each of the database systems which indicates when the database system last received a ping from the Observer.","Observer ID  is a unique identifier for the current observer . Its purpose is to prevent an Observer which is not the current observer from believing it is the current Observer and thus providing false information concerning the current state of system  to a database system participant seeking quorum. When the non-current Observer receives propagated state from another participant, the non-current Observer reads the observer ID  in the propagated state. If it is different from the observer ID  in its local state, the non-current Observer terminates itself.","Database system role  is available to and persistently stored in all participants. The primary gets its role from its control file. The Observer picks up the primary's role from the primary via a GET_FSFO which the Observer executes when the primary indicates in its response to an Observer ping that the Observer does not have the current value of MIV  and the standby picks it up from the control file or from the current primary as part of the reinstatement process. The former primary learns after failover that it is no longer the primary from Observer pings that indicate that the Observer believes the former primary to be the standby. When the Observer issues a reinstate command to the new primary to begin reinstating the standby, the reinstate command provides some of the new AFC state  for the new standby and the remainder is picked up via pings.","AFO threshold  is a parameter that governs how long the Observer and the standby will wait to hear from the primary before initiating automatic failover. In the Observer, it indicates the length of time pings to the primary may go unanswered before the Observer sends a ready to failover? message to the standby. In the standby, it indicates the length of time that the standby must have received neither redo data nor a ping from the primary in order to reply positively to the ready to failover? message.","Observer threshold  is a parameter for the length of time a ping from the Observer may be lacking in the primary before the primary proposes a change to UNOBSERVED to the standby (transitions , ). In some embodiments, the parameter is fixed; in others, it may be settable by the DBA. The standby will acknowledge the proposed change to UNOBSERVED only if it has not seen the observer for the same interval.","Details of the Messages Used in a Preferred Embodiment of AFC : ","Messaging Channel ","In a preferred embodiment, messaging channel  is independent of redo data channel  and may use any data communications protocol to which the participants can properly respond. A consequence of the fact that messaging channel  is independent of redo data channel  is that Observer process  need not run in a system that hosts a database, but may run in any system which can communicate with the primary and standby database systems.","Messaging channel  uses two standard facilities in the participants belonging to AFC  to pass AFC state information among the participants in system : a pinging facility and a remote procedure call facility. The pinging facility permits a first participant to ping a second one and the second participant to respond to the ping. In the preferred embodiment, each ping contains the AFC state version value  for the sending participant's AFC state ; the receiving participant compares that value with the AFC state version value  in the receiving participant's AFC state , and if the version value in the receiving participant's AFC state  is greater, the receiving participant does not accept the incoming state, but includes a copy of its AFC state , including its AFC state version value , in the response to the sending participant, which then persists it. When the AFC state version value  in the receiving participant's AFC state is less, the receiving participant persists the incoming state AFC state and version number. The response to a ping thus not only indicates to the sending participant that the receiving participant is still available, but is also the mechanism by which AFC participants propagate and receive the current state of AFC  and is further part of the mechanism by which quorum is provided for state transitions.","The remote procedure call works in the usual fashion: one participant calls a procedure that will be executed in another participant. The invocation results in a message from the one participant to the other that contains an identifier for the procedure and the arguments needed to execute it. The other participant executes the procedure and returns a message to the one participant that contains the results of the execution.","Messages ",{"@attributes":{"id":"p-0099","num":"0156"},"figref":"FIG. 7","b":["703","503","505","501","731","505","501"]},"The current Observer  pings each of the available database systems  every three seconds. The message is shown at ; it includes the OBID  for the current Observer, the state version number  in the Observer's copy  of AFC state , the AFO flags  from that copy, and the Observer's current MIV value . Also included in the Observer's AFO flags  is a flag which indicates whether the recipient database system is a primary or a standby. Reply  from a database system  includes the state version number  in the recipient's copy  of AFC state , the AFO flags  from that copy, and status values for the recipient.","What is in the recipient's copy when the reply is sent depends of course on the result of the comparison between the AFC state version number  in message  and the AFC state version number persisted in the recipient. The status values are the mechanism which the recipient uses to reply to the contents of the ping. For example, when the recipient does not acknowledge a proposed state transition, the status values indicate that fact to the initiator of the state transition. As shown at , the ready to failover? Message  has the form of a standard Observer ping message; the reply  is, however, simply status value . The begin failover message is simply another Observer message .","With the database system messages, the message  from the primary and the reply  from the standby have the same components, namely AFO flags, AFC state version values , OBID  for the observer, a recipient role specifier , and flags . OBID  is not used in the present context. In message , AFO flags  are the sender's AFO flags, the version number  is the sender's version number, and presumed recipient role  is the role that the sender presumes the recipient has. In the response, the values in fields , , and  are provided by the recipient. Field  has a NULL value.","State change ack message  is the message that the Observer sends when it has received a message from the primary proposing transition  or , has accepted the transition, and has persisted the state change. The message contains the persisted state change. In response to message , the primary persists the state change, as required by the careful ordering of writes. The Observer also sends state change ACK message  to the standby when the standby is executing a manual failover.","Summary of the Properties of the State Transitions: ",{"@attributes":{"id":"p-0104","num":"0161"},"figref":["FIG. 9","FIG. 4"],"b":"901","ul":{"@attributes":{"id":"ul0033","list-style":"none"},"li":{"@attributes":{"id":"ul0033-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0034","list-style":"none"},"li":["A short description of the transition, at .","The reference number for the transition in , at .","The values in AFC state  which are changed as a result of the transition, at .","the database system which initiates the transaction, at .","Which of the participants, if any, requires a quorum to persist its copy of the values that are changed in AFC state , at .","The participant in AFC  which is the source of any required quorum, at .","Whether the initiator requires an acknowledgement in the transition, at .","The participant in AFC  which is the source of any required acknowledgment, at .","The careful order of writes for the transition and how the information for the writes is propagated, at ."]}}}},"In columns  and , the term \u201cothers\u201d indicates that the quorum or acknowledgment source may be either of the other participants. For example, in transition , once the primary has initiated the transition and the Observer has persisted the SYNCH->UNSYNCH change and increased AFC state version value , the primary will generally receive a state change ack message  from the Observer and will then persist the new state resulting from the transition. However, the primary may also receive the ACK for the proposed state change from the standby and the standby may also receive the updated state from either the Observer or the primary. The transition typically occurs because S is absent but the ACK can come from either O or S since S can return and reply to a ping before O does. In column , the term \u201cothers\u201d indicates that the other participants may be written in any order.","Transition  used as an example above may serve as an illustration of how table  is to be read. Transition  occurs when AFC  is in state OBSERVED SYNCHRONIZED  and the primary ceases to receive acknowledgments for redo data sent to the standby. The result of the state change is that synchronized bit  takes on the value UNSYNCHRONIZED and AFC state version value  is increased. When the primary ceases to receive acknowledgments, the primary stalls and initiates the state change by indicating in its reply to the next ping from the Observer that it wants to set SYNCHRONIZED bit  to UNSYNCHRONIZED. In response to the reply, the Observer persists the change of SYNCHRONIZED bit  to UNSYNCHRONIZED, increases and persists AFC state version value , and sends a state change ack message . In response to ack message , the primary persists UNSYNCHRONIZED and the state version number for the new state and resumes producing redo.","Details of the State Transitions","Automatic Failover : ","Automatic failover transition  occurs when the primary database system has become absent, either because the primary database system is not responding to observer pings or because the primary database system has determined that it cannot continue as the primary and has so indicated in response to a ping from the Observer.","Automatic failover includes a role change which must be managed to ensure that divergence does not arise. There are two aspects to managing the role change: one is to ensure that only one database can function as the primary database at a time; the other is to ensure that there is no propagation of state changes in the former primary to the other participants during the failover. To ensure that only one database can function as the primary database at a time, a standby whose AFC state  indicates that it is in a state that includes UNSYNCHRONIZED, UNOBSERVED, or SUSPENDED will not respond to a proposal to carry out an automatic failover. To ensure that no state changes are propagated from the former primary during the failover, FO pending bit  is set first in the former standby and then in the Observer. As long as FO pending bit  is set in the former standby, the former standby will respond to a failover request from the Observer but will not respond to pings from the old primary; as long as FO pending bit  is set in the Observer, the Observer will not ping the old primary. Thus, state changes cannot be propagated from the former primary. Moreover, when FO pending bit  is set in the former standby, the standby will not transition to SUSPENDED.",{"@attributes":{"id":"p-0109","num":"0175"},"figref":"FIG. 8","b":["801","414","802","503","505","830","505","503"]},"At the beginning of transition , AFC  is in OBSERVED SYNCHRONIZED state , as indicated at , and copies  of AFC state  in the Observer and the standby indicate that fact. Flags  and  are set accordingly and flag  is not set. Observer  is pinging the database systems. As indicated by decision block , if a ping indicates that the primary is present, Observer  keeps on pinging (branch ); otherwise, branch  is taken after the number of seconds specified in AFO threshold  or after the Observer receives a request for failover from the primary. In this branch, Observer  begins sending a \u201cready to failover?\u201d ping message  () to the standby, as shown by dashed arrow . Observer  then continues every three seconds to try to connect to the primary while waiting for reply  from the standby (). If the Observer does successfully connect to a now returned primary and successfully pings it before the standby responds positively to the request to failover, the Observer will stop sending the \u201cready to failover?\u201d ping message and will not issue a failover command even if S responds positively to a previously sent request.","Continuing in flowchart , the standby receives the \u201cready to failover?\u201d message  at . Then it checks at  if it has heard from the primary within AFO threshold seconds either via a ping or via receipt of redo data from the primary; if not, or if the primary's ping indicated that the primary was requesting failover, the primary is absent; if the primary is absent, the standby checks whether the failover is otherwise possible (). If the primary is available or the failover is otherwise impossible (branches  and ), the standby sends a \u201cfailover not accepted\u201d reply to the Observer's ping (). Conditions under which the standby will not agree to a failover include mismatches between the standby's Observer ID  or MIV  value and the ones in the \u201cready to failover?\u201d message, synchronized bit  set to UNSYNCH, a mismatch between the standby's AFC state version value  and the AFC state version value  in the message, the standby having Unobserved  set to UNOBS, or the standby having the suspend bit set.","If the standby can agree to the failover, it prepares for failover by setting and persisting its copy of FO pending flag  () and sending a \u201cfailover accepted\u201d reply  to the Observer's ping (). While FO pending flag  is set in the standby, the standby ignores pings from the former primary. In response to the \u201cfailover accepted\u201d reply, the Observer sets and persists its copy of FO pending flag  () and stops pinging the former primary. Once both the Observer and the standby have both persisted FO pending flag , system  is in FAILOVER PENDING state , as shown by brackets ","Next, the Observer issues a failover command () to the standby and waits for the return result from the command (). In a preferred embodiment, the failover command takes the form of a Data Guard Broker failover command. When the standby receives the command (), it carries out the actions necessary to make itself into the new primary and when it is finished, returns a \u201csuccess\u201d return result to the Observer. As shown at , the actions include persisting the standby's new role in , persisting UNSYNCHRONIZED in , increasing AFC state version value  by 2 and persisting the new value, and clearing persisted FO pending flag . MIV  is also increased. With FO pending flag  cleared, the new primary begins responding again to pings from the Observer.","When the standby returns \u201csuccess\u201d (), the Observer does a GET_FSFO to get the new MIV and the identification for the new primary from the new primary's FSFO context, clears the FO pending bit, and persists these changes (). It then begins pinging the new primary and the new standby. Then the new primary responds to the ping by passing UNSYNCHRONIZED and AFC state version number  X+2 to the Observer (), which persists these values (), leaving AFC  in the state indicated at . The new primary then begins pinging the standby. When the new standby wishes to be reinstated in system  so that it can begin receiving redo, the new standby sets REINST_PENDING bit  in its AFC state and provides the new setting to the Observer in a response to a ping. The Observer then issues a reinstatement command to the new primary, which begins the process of recovering the new standby to the point where it can begin receiving redo.","Manual Failover  and ","Manual failover  and  begin with a failover command which the DBA issues via either the EM GUI or the Broker's command line interface to the current standby. When the standby begins executing the command, it sets FO Ack pending bit  in its AFC state  and responds to the next ping from the Observer by sending a reply indicating the FO_ACK_REQ status. FO_ACK_REQ indicates to the Observer that the standby has received a command to do a failover. The Observer persists FO pending bit  and sends the standby a state change Ack message . When the standby receives message , it knows that the Observer has persisted FO pending bit , persists its own copy of the bit, and proceeds substantially as set forth in  of . If the standby has not received state change Ack message  within a predetermined period of time (90 seconds in a preferred embodiment), it returns to the state it was in when it received the command from the DBA, as shown by loop  in . After sending state change Ack message , the Observer stops pinging the old primary and commences pinging the standby. The replies to the pings eventually return a MIV_MISMATCH status which tells the Observer that its MIV  does not match the standby's MIV . The mismatch indicates that the failover has completed, so the Observer responds by clearing FO pending bit  and getting a new FSFO context which includes the new MIV  and an identifier for the new primary database from the new primary and the new primary's returns to the Observer's pings eventually include UNSYNCH and X+2 as the value of AFC state version value , which the Observer then persists.","Details of State Transition ","When a primary boots up, it copies its persisted AFC configuration state into its memory; the current AFC configuration state is then propagated from the other participants in the usual fashion. If the persisted state is any AFC configuration state other than OBSERVED SYNCHRONIZED, the primary can immediately begin processing redo. If the persisted state is OBSERVED SYNCHRONIZED and the primary is not connected to the standby, the primary transitions to OBSERVED UNSYNCHRONIZED  prior to opening the database. The transition is necessary because opening the database produces redo data. That would in turn result in a stall of the primary if the primary were still in OBSERVED SYNCHRONIZED . As in the other transitions of system  from OBSERVED SYNCHRONIZED to OBSERVED UNSYNCHRONIZED, the primary must have a quorum from one of the other participants. As in transition , the primary indicates in its response to a ping from the Observer that it wishes to make a transition to UNSYNCH; the Observer persists the new setting of Synchronized bit  and the new value of AFC state version value  and sends state change Ack message . The primary receives Ack message  either from the Observer or the standby, and when the primary receives the message, it persists the new setting of Synchronized bit  and the new value of AFC state version ; having done so, it opens the database.","Details of State Transitions  and ","These transitions occur when the Observer becomes absent and both the primary and the standby database systems are present and can thus confirm the absence of the Observer. As set forth in table , the transitions are initiated by the primary, the primary and the standby provide quorums for each other, and the standby provides an acknowledgment for the primary. The order of writes is standby, primary.",{"@attributes":{"id":"p-0118","num":"0184"},"figref":"FIG. 11","b":["1101","501","1105","501","1143","1103","1127"]},"At the beginning of the transition, the primary is pinging the standby and receiving Observer pings. As shown by decision box , as long as the Observer keeps pinging the primary, the primary keeps on receiving and providing pings; if an Observer ping does not arrive within the period specified by Observer threshold , the primary indicates in its next ping to the standby that it intends to set Unobserved  to UNOBS (). The ping is shown at . The standby receives the ping at . If the standby also hasn't heard from the Observer for the same threshold (), it leaves UNOBSERVED set in the values returned to the primary in response to the ping () and persists the change in its own copy of state  (); If it has heard from the observer, it returns its unchanged copy of state  to the primary (, message ) and the primary remains in the OBSERVED state. Message  provides the acknowledgment which the primary requires for the state transition, so upon its receipt, the primary persists the change to UNOBSERVED ().","In transition  or , the primary provides the quorum that the standby needs to make the change via ping to  to the standby. The new state propagated by the ping indicates to the standby that it has quorum to make the change. Ping reply  from the standby to the primary provides the acknowledgment that the primary requires to persist the change. The order of writes is standby, primary.","Details of State Transitions  and ","These transitions from UNOBSERVED SYNCHRONIZED  to OBSERVED SYNCHRONIZED  or from UNOBSERVED UNSYNCHRONIZED  to OBSERVED UNSYNCHRONIZED  occur when the Observer returns. In the transition, the value of unobserved bit  becomes OBSERVED. The transition is initiated by the primary. The standby requires quorum for the transition, and the quorum is provided by the primary, When the primary begins receiving pings from the returned Observer, it persists unobserved bit  as OBSERVED and propagates the new state to the standby via pings. The standby simply persists OBSERVED as well upon receipt of the ping from the primary","Details of State Transition : ","State transition  from OBSERVED SYNCHRONIZED  to OBSERVED UNSYNCHRONIZED  occurs when the primary ceases receiving confirmations for the redo data it sends to the standby, generally because the standby has become absent. The transition is shown in detail at  in . The starting state is shown at : it is OBS SYNCH ; synchronized  has the value SYNCH and AFC state version  has a current value X; the ending state is shown at : it is OBS UNSYNCH ; synchronized  has the value UNSYNCH, and AFC state version  has been increased to X+1. As indicated in , the transition is initiated by the primary and the quorum is usually provided by the Observer, but may also be provided by the standby in situations where the Observer is also absent and the standby returns before the Observer does. In the following, where either the Observer or the standby is involved, the term partner will be used.","An acknowledgment is required and comes from the partner. The flowchart for the primary is at ; the flowchart for the partner is at . In flowchart , the primary is pinging the standby and is being pinged by the Observer; at  the primary fails to receive a confirmation from the standby that the last redo data sent to the standby has been written and concludes from that that the standby has lost synchronization. The primary responds to this condition by setting synchronized bit  to UNSYNCH, setting AFC state version  to X+1, and setting the ACK_PENDING flag and then waiting for the delivery of an ACK from a partner.","One or both of the partners receive the response or ping indicating that the primary wishes to set synchronized  to UNSYNCH and AFC state version  to X+1, as shown at . Either responds by persisting the setting of synchronized  to UNSYNCH and the setting of AFC state version  to X+1 (). Having done that, either sends a state change acknowledgment message to the primary, as shown by arrow . In the case of the Observer, the message is Ack message ; in the case of the standby, the message is in reply  to the primary's ping. When the primary receives the message, at , it sets an ACK_RECEIVED flag, persists the settings of synchronized  to UNSYNCH and the setting of AFC state version  to X+1, and resets both the ACK_PENDING and ACK_RECEIVED flags. If the state change acknowledgment message does not arrive from either the Observer or the standby both the Observer and the standby have become absent simultaneously and the primary enters STALLED state . State change  works in substantially the same fashion as state change .","Details of State Transition ","This transition from UNOBSERVED SYNCHRONIZED  to UNOBSERVED UNSYNCHRONIZED can occur only while unobserved bit  is set to UNOBS in the persistent storage  for each of the database systems. The Observer does not set or clear Unobserved bit . When bit  is set, the standby will not execute a failover. Consequently, the primary can execute the state transition on its own, without a quorum. That being the case, the primary simply persists the setting of bit  to UNSYNCH and the increase of the value of AFC state version  from X to X+1; the new state values are propagated to the other participants by pings and ping responses; absent participants receive them as they return.","Details of Transitions  and ","These transitions occur when the standby, which has been out of synchronization with the primary, again becomes synchronized. As indicated in , the AFC state  involved in the transition is synchronized bit , which is set to SYNCH and AFC state version , which is incremented. The transitions are initiated by the primary, the database requiring the quorum is the standby, and the source of the quorum is one or the other of the other participants.","The transition is shown in detail at  in ; the AFC state before the transition is shown at ; the state after the transition is shown at . The flowchart for the primary is at ; the flowchart for the standby is at . The transition begins when the primary detects that the standby has caught up (). The primary sets synchronized bit  to SYNCH, increases AFC state version  to X+1 and persists both (). The new state is propagated to the Observer via the primary's responses to the Observer's pings and to the standby via pings from either the Observer or standby, as shown by dashed arrow . The standby and Observer respond to the new state by persisting it. Transition  works the same way, except that the Observer is absent, so the standby can receive the new state only via the pings from the primary.","Details of Transitions  and ","These transitions occur when the standby detects a gap in the redo data it has received from the primary. The transitions cause synchronization bit  to be set to UNSYNCH and AFC state version value  to be incremented. The transitions are initiated by the standby, the database system requiring quorum is the primary, and no acknowledgement is required. The standby detects the loss of synchronization, sets and persists the new state, and propagates the new state to the other participants via responses to pings, with the other participants persisting the state when they receive the ping responses.","Details of Transition ","This transition occurs when the primary has stalled because the standby and the Observer have become simultaneously absent and the standby returns before the Observer returns. At the time of the stall, the primary has begun transition  to OBSERVED UNSYNCHRONIZED state  but has not received an ACK yet. Consequently, the primary is stalled with SYNC bit  indicating UNSYNCH, AFC state version  increased, and the ACK_PENDING bit set, but has not yet persisted the SYNC bit setting or the new AFC state version. In the transition, the primary additionally sets the value of unobserved bit  to UNOBS. The transition is initiated by the primary, which requires quorum from the standby and an acknowledgment. The sequence of events is similar to that in flowchart . The primary pings the standby with pings specifying UNSYNCH, the new AFC state version, and UNOBS. When the standby returns, it determines whether the Observer is absent; if it is, it responds to the ping by persisting UNSYNCH, UNOBS, and the new AFC state and sending a state change acknowledgment to the primary. The primary responds to the acknowledgment in the ping response by setting ACK_RECEIVED, persisting the new state, and clearing ACK_PENDING and ACK_RECEIVED.","Details of Transition ","This transition occurs when the primary has stalled and either the Observer returns before the standby does or the standby returns and the Observer then returns within the time specified by Observer threshold . The primary is in the condition described in the discussion of transition . The primary initiates the change in its response to the returned Observer's ping; when the Observer receives the response, it persists the new values for synchronized bit  and AFC state version  that it received from the primary. If the standby has returned, it may receive the new values via pings from either the primary or observer and the acknowledgment received in the primary may come either via a state change acknowledgment message  from the Observer or via a ping response from the standby. In response to either, the primary persists the new values for synchronized bit  and AFC state version .","Details of Transitions  and ","When either the primary or the standby or both are shutdown in a planned fashion, the standby enters the SUSPEND state. As already described, when the standby is in that state, it replies to a \u201cready to failover\u201d message  from the Observer with a \u201cfailover not accepted\u201d reply. As shown in , transitions  and  may be made between SUSPENDED state  and any of states , , , and , i.e., at any time except during FAILOVER PENDING state . The primary and standby may be shut down in either order.","The DBA shuts down either database by means of an SQL shutdown command. When the DBA shuts down the standby, the standby simply transitions itself to the SUSPEND state. There is no propagation of state and no quorum needed, since the state is only entered by the standby.","When the DBA shuts down the primary, the primary sets a SHUT_INPROG bit and then waits up to 20 seconds for the primary to send a message via a ping to the standby. Because SHUT_INPROG has been set, the message in this case includes a set SUSPEND flag. The standby picks the set SUSPEND flag up via its normal state negotiation algorithm and transitions to the SUSPEND state.","Upon successful transmission of the SUSPEND flag to the standby, the primary sets a SBY_CONTACTED flag which indicates that the SUSPEND flag has been transmitted. The thread that is shutting down the primary can now resume its shutdown processing since the thread can now safely assume the standby has entered the SUSPEND state and that an automatic failover will therefore not happen.","Transition  from SUSPENDED to one of the other states , , , or  occurs when the primary reconnects with the standby or vice-versa. In either case, once the connection is reestablished, the primary pings the standby and the standby receives the current state of system  from the primary. In response to the current state, the standby resets SUSPENDED bit .","Note that a manual failover while in the SUSPEND state is allowed assuming all other FSFO conditions are valid for a FSFO. This accommodates the potential need to do a failover after having brought down one or both databases for maintenance and then encountered some problem on the primary. When manual failover is done in the SUSPENDED state, the SUSPENDED state is cleared after the failover is complete.","Details of a Preferred Embodiment of the Observer","Lightweight Observer","As already mentioned, Observer  is a client of the primary and standby database systems and uses the same interface to communicate with the primary and standby database systems as any other client of the database systems. It can thus execute on any entity which has a communications link to the primary and standby database systems and which provides Observer  with persistent storage  to store AFC state  and the current FSFO context. As also already explained, Observer  regularly pings the primary and standby databases to determine whether they are present. The Observer initiates the automatic failover configuration's transition to FAILOVER PENDING state , with the standby providing the quorum for the transition, and provides the quorum for the automatic failover configuration's transition from OBSERVED SYNCHRONIZED to OBSERVED UNSYNCHRONIZED. As will be explained in more detail in the following, AFC  may have only one observer as a participant at a given time. The currently participating observer is termed in the following the active Observer.","An advantage of Observers as implemented in AFC  is that they require relatively few resources. They can run on any platform that has enough compute power to execute the functions of the Observer, enough persistent storage to be able to store the Observer's local FSFO file, and can establish communications links with the primary and standby. The communications links need have no capabilities beyond what is necessary to handle the pings and other messages sent between the Observer and the database systems.","The small amount of resources required for an Observer makes it cost effective to have one or more redundant observers which can quickly take over from the active Observer should the active Observer become absent. Being able to replace an absent active Observer with a redundant observer increases the availability of the observer and thereby increases the amount of time during which AFC  can operate in its normal OBSERVED SYNCH state .","AFC's without redundant Observers","Starting the Observer: ","Observer  begins operation in response to a Data Guard START OBSERVER command executed in the processor the Observer is running on. In order to run, Observer  needs FSFO configuration information. The command includes the pathname for a file in observer storage  that includes FSFO configuration information. The configuration information includes connect descriptors for the primary and secondary database systems, FSFO context, and the OBID. That file will be termed in the following the local FSFO file.",{"@attributes":{"id":"p-0141","num":"0207"},"figref":"FIG. 1401","b":["1403","1405","1407","1411","1415","1417","1413"]},"If the local FSFO file is available (), the execution reads the database server's FSFO configuration information (). If the database server's FSFO configuration is not available, the execution uses the FSFO configuration information from the Observer's local FSFO file () and the Observer begins execution using that FSFO configuration information. If FSFO configuration information is available from the database server (), the execution compares the OBIDs in the local FSFO file and the FSFO configuration information (). If they are the same (), the Observer sets the FSFO context in the local FSFO file from the local or the database server's FSFO context according to which has the higher MIV value and begins execution using the FSFO configuration information in the local FSFO file as updated.","If the database server's FSFO configuration is available and the local FSFO file is not available (), the execution proceeds in the same fashion as it does when the local FSFO file's OBID is not the same as the OBID in the database server's FSFO configuration. The execution invalidates the Observer's OBID, clears the FSFO context in the local FSFO file and registers the Observer with the primary to get a new OBID (). If there is an active Observer, the primary's FSFO configuration information includes the active Observer's OBID and the primary responds to the registration by returning an error message. If there is no active Observer, the primary marks the new OBID in its FSFO configuration information as active, and returns the new OBID to the Observer performing the registration. If the Observer does not receive a new OBID (), the Observer terminates (). If the primary has provided the new OBID (), the Observer begins executing loop , in which it pings the primary and standby database systems (), updates the local FSFO file (), and provides quorums as required. Flowchart  thus shows a part of the operation of state transition code .","The Observer continues executing loop  until it crashes, or until a DBA executes a STOP OBSERVER command, in which case the FSFO configuration information that is propagated to the Observer via a ping contains an OBID that is different from the one belonging to the Observer. The fact that there is a different OBID in the FSFO configuration state information received in a ping indicates that a DBA wants to stop this particular observer and that another instance of the Observer may have become the active Observer, so the Observer that receives the different OBID terminates. When executing, the Observer has two threads, one of which pings the primary and one of which pings the standby. State is propagated between the Observer and the databases as already described. When the Observer has a new OBID, it receives the remaining state for its local FSFO file via the pings.","The STOP OBSERVER Command","This Data Guard command stops an executing Observer. It may be executed from any database system in the broker configuration that includes the automatic failover configuration, whether or not automatic failover is enabled. If automatic failover is enabled, the primary and standby database system must be communicating with each other. This is necessary to ensure that a failover does not occur after the STOP OBSERVER command has successfully finished. If the primary and standby are not communicating, the command returns an error and does not stop the Observer. If automatic failover is not enabled, only the primary data base system need be running. In either case, the OBID in the primary's AFC state  is changed and marked as inactive. The Observer does not actually stop until it next pings the primary and discovers that the AFC state  propagated by the primary has a different OBID. A START OBSERVER command may be issued after a STOP OBSERVER command but before the current Observer has actually stopped. In this case, the START OBSERVER command causes the new Observer to register with the primary. If the new Observer receives a new OBID from the primary, it is the active Observer.","Preventing Divergence in the Observer","Divergence between the primary and standby database systems can occur when the automatic failover configuration is in a SYNCHRONIZED state if there is more than one active observer to provide quorums. To avoid such divergence, AFC state  maintains a single OBID value. As described with regard to START OBSERVER, whenever the local FSFO configuration is unavailable and the primary's FSFO configuration is available or there is a discrepancy between the OBIDs in the two FSFO configurations, the Observer registers with the primary to obtain a new OBID. The primary provides the new OBID only if there is no other active Observer. The AFC state  propagated by the primary includes the new OBID. To further ensure that there is only one Observer that is active, when an Observer receives an OBID via state propagation that is different from its OBID, the Observer terminates itself.","Divergence between the primary and standby database systems can also occur if an Observer becomes absent while AFC  is in the FAILOVER PENDING state and returns after the standby database system has become the new primary. To avoid this in a preferred embodiment, when the returning Observer reads from its persisted AFC state  that it was in FAILOVER PENDING when it became absent, the returning Observer invalidates its OBID and registers itself with the primary database system. If the registration returns a new OBID, the returning Observer is still the only active Observer; otherwise, there is another active Observer or the current status of AFC  does not permit a new active Observer to be started. One example of such a situation is if there has been an automatic failover and the new primary has no connectivity to its target standby database system. As above, if the registration does not return a new OBID, the returning Observer terminates itself.","The Observer State Machine: ","Once the Observer is running, its behavior is described by .  is a state transition diagram  for a preferred embodiment of the Observer. The preferred embodiment has a Start state , a Quit state , and five operating states: REBOOT , DISABLED , PING , FSFO PENDING , and MANUAL FAILOVER . Transitions between the states are indicated by arrows -.","REBOOT ","In this state, the Observer restarts the threads that ping the primary and standby databases. It also checks whether the FSFO is enabled or not. If enabled, transition to PING state. Otherwise, transition to DISABLED state.","State transitions from the Reboot state are:",{"@attributes":{"id":"p-0151","num":"0217"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Transition","Target State","Condition"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1319","Ping","Fast-Start Failover (FSFO) is enabled."]},{"entry":["1317","Disabled","Fast-Start Failover (FSFO) is disabled"]},{"entry":["1320","Quit","Failed to start any replacement threads"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":"1307"},"In this state, FSFO is not enabled or it is unknown whether FSFO is enabled. The observer tries to get the FSFO context information every 30 seconds from the known primary database until it finds that the FSFO is enabled.","State transitions from the Disabled state are:",{"@attributes":{"id":"p-0154","num":"0220"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Transition","Target State","Condition"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1331","Ping","Fast-Start Failover (FSFO) is enabled."]},{"entry":["1333","Reboot","Database role changed."]},{"entry":["1335","Quit","No Primary database is known;"]},{"entry":[{},{},"Primary database authentication failed;"]},{"entry":[{},{},"OBID changed (by STOP OBSERVER)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":"1309"},"In this state, Observer sends a ping to the primary and the target standby once every 3 seconds. The primary and the standby respond to the pings by returning AFC state  to the Observer. If the Observer finds that the returned AFC state's AFC state version number  has increased, it will persist the state on the disk. If a database system requires an acknowledgement for the receipt of the new state, the acknowledgement will be delivered after the state is persisted, as required by the careful ordering of writes.","If a ping to the primary fails to get a response, the Observer will try to reconnect and send a ping again. If no successful ping can be delivered to the primary within the time frame established by AFO threshold , the Observer will transition to the FSFO Pending state.","If a failover has just occurred, the Observer also tries to see if a reinstatement command can be sent to the new standby (old primary) by using pings to the standby. If the new standby responds reinstatement needed, it will change the standby thread into a reinstatement thread and start a new standby thread for the reinstated standby.","State transitions from the Ping state are:",{"@attributes":{"id":"p-0159","num":"0225"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Transition","Target State","Condition"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1329","FSFO","Ping failed and within FSFO threshold a new"]},{"entry":[{},"Pending","connection could not be established."]},{"entry":[{},{},"Ping returned HealthCheck error"]},{"entry":["1327","Manual","Ping to the standby returns FO_FO_ACKREQ"]},{"entry":[{},"Failover",{}]},{"entry":["1321","Disabled","FSFO is disabled"]},{"entry":["1323","Reboot","Database role changed"]},{"entry":["1325","Quit","Primary database authentication failed"]},{"entry":[{},{},"OBID changed (by STOP OBSERVER)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The following are sub-states within the Ping state. The bold italic Next State fields are actually transitions out of the Ping state to other observer states.\n\n",{"@attributes":{"id":"p-0161","num":"0228"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["State","Action","Condition","Next State"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CONNECT","Connect to","Success","SEND_PING"]},{"entry":[{},"primary","Failure","FAILURE"]},{"entry":["SEND_PING","Send ping","Success","PING_OK"]},{"entry":[{},"to primary","Ack Required","SEND_ACK"]},{"entry":[{},{},"MIV mismatch","REFRESH_FSFO"]},{"entry":[{},{},"Invalid OBID",{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00001","he":"2.46mm","wi":"6.69mm","file":"US08630985-20140114-P00001.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}}]},{"entry":[{},{},"Bad health","FSFO_PENDING"]},{"entry":[{},{},"Failure",{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00002","he":"2.12mm","wi":"10.92mm","file":"US08630985-20140114-P00002.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}}]},{"entry":["PING_OK","Wait for","Finished","SEND_PING"]},{"entry":[{},"ping interval",{},{}]},{"entry":["FAILURE","Check","Not exceeded",{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00003","he":"2.12mm","wi":"12.36mm","file":"US08630985-20140114-P00003.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}}]},{"entry":[{},"threshold","Exceeded",{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00004","he":"2.46mm","wi":"19.39mm","file":"US08630985-20140114-P00004.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}}]},{"entry":["SEND_ACK","Send ack to","Success","PING_OK"]},{"entry":[{},"primary after","Failure","FAILURE"]},{"entry":[{},"persists",{},{}]},{"entry":[{},"FSFO state",{},{}]},{"entry":["REFRESH_FSFO","Send","No change","SEND_PING"]},{"entry":[{},"GET_FSFO","Role Changed",{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00005","he":"2.12mm","wi":"10.58mm","file":"US08630985-20140114-P00005.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}}]},{"entry":[{},"to the","Failure","FAILURE"]},{"entry":[{},"primary"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0037","list-style":"none"},"li":{"@attributes":{"id":"ul0037-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0038","list-style":"none"},"li":"Sub-states for pinging the standby:"}}}},{"@attributes":{"id":"p-0162","num":"0230"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["State","Action","Condition","Next State"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CONNECT","Connect to","Success","PING"]},{"entry":[{},"standby","Failure","CNT_WAIT"]},{"entry":["CNT_WAIT","Wait for","Finished","CONNECT"]},{"entry":[{},"lazy interval",{},{}]},{"entry":["PING","Send ping","Success","PING_OK"]},{"entry":[{},"to standby","Failure","CONNECT"]},{"entry":[{},{},"MIV mismatch","REFRESH_FSFO"]},{"entry":["PING_OK","Wait for","Finished","PING"]},{"entry":[{},"ping interval",{},{}]},{"entry":["REFRESH_FSFO","Send","No change","PING"]},{"entry":[{},"GET_FSFO","Role Changed",{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00006","he":"2.12mm","wi":"10.58mm","file":"US08630985-20140114-P00005.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}}]},{"entry":[{},"command","Failure","CONNECT"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0039","list-style":"none"},"li":{"@attributes":{"id":"ul0039-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0040","list-style":"none"},"li":"Sub-states for pinging the standby after failover (reinstatement pending)"}}}},{"@attributes":{"id":"p-0163","num":"0232"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["State","Action","Condition","Next State"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["PENDING","Connect to","Success","PING"]},{"entry":[{},"the old","Failure","CNT_WAIT"]},{"entry":[{},"primary",{},{}]},{"entry":["CNT_WAIT","Wait for","Finished","PENDING"]},{"entry":[{},"lazy interval",{},{}]},{"entry":["PING","Send ping","Success","CHECK_STATUS"]},{"entry":[{},"to old","Restart","RESTART"]},{"entry":[{},"primary","Shutdown","SHUTDOWN"]},{"entry":[{},{},"Failure","PENDING"]},{"entry":["PNG_WAIT","Wait for","Finished","PING"]},{"entry":[{},"ping interval",{},{}]},{"entry":["SHUTDOWN","Shutdown","Success","PENDING"]},{"entry":[{},"the instance","Failure","PENDING"]},{"entry":["RESTART","Restart the","Success","CHECK_STATUS"]},{"entry":[{},"instance","Failure","PENDING"]},{"entry":["CHECK_STATUS","Check old","Reinstatement","INIT_REINST"]},{"entry":[{},"primary","needed",{}]},{"entry":[{},"status","Does not show","CNT_WAIT"]},{"entry":[{},{},"reinstatement",{}]},{"entry":[{},{},"need status",{}]},{"entry":[{},{},"Failure","PENDING"]},{"entry":["INIT_REINST","Check if","Ready","REINST_READY"]},{"entry":[{},"reinstatement","Failure","PENDING"]},{"entry":[{},"is ready",{},{}]},{"entry":["REINST_READY","Issue","N\/A","END"]},{"entry":[{},"reinstatement",{},{}]},{"entry":[{},"command"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"When reinstatement is finished, the reinstatement pending flag is cleared and the new standby will be pinged as already described.","FSFO PENDING ","In this state, the Observer connects to the target standby database and calls the ReadyToFailover( ) function to confirm the standby is ready for the automatic failover. This function then handles the following return codes:\n\n","Issue the Failover command to the standby.\n\n","Keep trying to connect to the primary and keep asking the standby whether ReadyToFailover\n\n","Refresh FSFO state and ask ReadyToFailover again.\n\n","Read configuration including the roles and whether FSFO is enabled.","State transitions from the FSFO Pending state are:",{"@attributes":{"id":"p-0171","num":"0244"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Transition","Target State","Condition"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1345","Manual","Ping to the standby returns"]},{"entry":[{},"Failover","AFO_FO_ACKREQ"]},{"entry":["1341","Reboot","Automatic failover succeeded"]},{"entry":["1339","Ping","Connection to the primary restored"]},{"entry":[{},{},"without auto failover"]},{"entry":["1337","Disabled","FSFO is disabled"]},{"entry":["1351","Quit","Standby database authentication"]},{"entry":[{},{},"failed."]},{"entry":[{},{},"Automatic failover failed."]},{"entry":[{},{},"OBID changed (by STOP"]},{"entry":[{},{},"OBSERVER)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The following are sub-states within the FSFO_PENDING state. The bold italic Next State fields are actually transitions out of the FSFO_PENDING state to other observer states.\n\n",{"@attributes":{"id":"p-0173","num":"0247"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["State","Action","Condition","Next State"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CONNECT","Connect to standby","Success","READY_TO_FAILOVER"]},{"entry":[{},{},"Failure","CNT_WAIT"]},{"entry":["READY_TO_FAILOVER","Send ReadyToFailover","AFO_READY","Issue failover command"]},{"entry":[{},"to the standby",{},{}]},{"entry":[{},{},"FO_ACKREQ",{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00007","he":"2.46mm","wi":"15.49mm","file":"US08630985-20140114-P00006.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}}]},{"entry":[{},{},"MIV","REFRESH_FSFO"]},{"entry":[{},{},"mismatch",{}]},{"entry":[{},{},"MD_INCONS","PING"]},{"entry":[{},{},"Invalid OBID",{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00008","he":"2.46mm","wi":"6.69mm","file":"US08630985-20140114-P00001.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}}]},{"entry":[{},{},"Failure","CONNECT"]},{"entry":[{},{},"Other","PING_OK"]},{"entry":["PING_OK","Wait for ping interval","Finished","READY_TO_FAILOVER"]},{"entry":["CNT_WAIT","Wait for connect","Finished","CONNECT"]},{"entry":[{},"interval",{},{}]},{"entry":["PING","Send ping to the standby","Success","PING_OK"]},{"entry":[{},{},"Failure","CONNECT"]},{"entry":["REFRESH_FSFO","Send GET_FSFO","No change","READY_TO_FAILOVER"]},{"entry":[{},{},"Role Changed",{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00009","he":"2.12mm","wi":"10.58mm","file":"US08630985-20140114-P00005.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}}]},{"entry":[{},{},"FSFO",{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00010","he":"2.12mm","wi":"10.92mm","file":"US08630985-20140114-P00007.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}}]},{"entry":[{},{},"Disabled",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["s\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014",{},{}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"Failure","CONNECT"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"To ensure no divergence between primary database and standby database systems in AFC , the procedure for doing failover in the Observer is:\n\n","In this state, another client has just issued a manual failover command to the target standby database. Upon entering this state, the Observer persists a failover pending bit and then invokes the StateChangeRecorded function in the standby database to allow the manual failover to proceed.","After that, the observer will keep pinging the standby database, until the MIV returned from the standby does not match the Observer's current MIV. This MIV mismatch means the standby has successfully completed its role change. If the ping result is anything other than MAN_INPROG, FO_ACKREQ, BROKER_NOT_STARTED, or MIV_MISMATCH, the manual failover has probably failed. The Observer then quits. If the connection to the standby is lost, the Observer retries the connection indefinitely.","State transitions from the Manual Failover state are:",{"@attributes":{"id":"p-0178","num":"0257"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Transition","Target State","Condition"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1349","Reboot","Database role changed"]},{"entry":["1347","Disabled","FSFO is disabled."]},{"entry":["1351","Quit","Ping to the primary returns value other than"]},{"entry":[{},{},"MAN_INPROG, FO_ACKREQ,"]},{"entry":[{},{},"BROKER_NOT_STARTED and"]},{"entry":[{},{},"MIV_MISMATCH"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Each time the Observer sends a ping to the database, if the FSFO state returned by the ping has a higher AFC state version number , the returned FSFO state is persisted with the new version number.","Redundant Observers: ",{"@attributes":{"id":"p-0180","num":"0259"},"figref":["FIG. 15","FIG. 5"],"b":["1501","1502","1502","1502","508","1504","1504","517","1509","517"],"i":["a","b"]},"Active Observer () is connected to the primary and standby database systems by a communications link (). As previously described, active Observer () exchanges pings and other messages via communications link () with the primary and standby, as indicated here by the arrows . Redundant Observer () is connected to the primary and standby by communications link (). Redundant Observer () may run on the same physical platform and\/or use the same communications link as active Observer (), but more generally, redundant Observer () will use a physical platform and a communications link which are independent of those used by active Observer (). Such an arrangement permits rapid replacement of the active Observer not only when its execution crashes, but also when active Observer ()'s physical platform suffers a hardware failure or when active Observer ()'s communications links () have failed. The hardware platform and the communications links should of course be chosen to minimize the probability of simultaneous absence of the active Observer and the redundant Observer. The probability can be still further reduced by having more than one redundant Observer, each with its own independent hardware platform and communications links.","In general terms, there are two parts to replacing a failed active Observer with a redundant Observer: detecting the absence of active Observer () in AFC  and starting the redundant Observer in a fashion such that at the end of the process there is only one active Observer. When the former active Observer attempts to return, it determines from the propagated state it receives that it is no longer the active Observer. In a presently-preferred embodiment, an Observer that is no longer the active Observer transitions automatically to being a redundant Observer. In other embodiments, the former active Observer may terminate itself and then be restarted as a redundant Observer.","In the presently-preferred embodiment, redundant Observer () detects the absence of active Observer (). It does so by taking advantage of a feature of the database systems  used in AFC . These database systems include commands that indicate the current condition of an AFC configuration and views that permit access by SQL queries to the current values of AFC state  and other information about AFC  in the primary and standby database systems. Included in this information are the following:\n\n","In the following, these values will be termed active observer state. Thus, in order to determine whether active Observer () is absent, redundant Observer () need only query the active observer state in the primary and standby database systems, as shown by arrows . If the active observer state indicates that the active Observer is absent, the redundant observer can use a variant of the STOP OBSERVER command to stop the active Observer and then attempt to register itself with the primary as the new active Observer.","START OBSERVER in an AFC with Redundant Observers: ","In an AFC with redundant Observers, the behavior of START OBSERVER depends on whether the AFC has an active Observer. If it does, START OBSERVER starts the Observer as a redundant Observer; otherwise, START OBSERVER starts the Observer as an active Observer. STOP OBSERVER in an AFC with redundant Observers has two forms:\n\n","Whether the primary database system interprets a STOP OBSERVER command as hard or soft is indicated by flag  in AFC state . The flag is set whenever a redundant Observer issues a soft STOP OBSERVER command and stays set until a hard STOP OBSERVER command shuts down all of the Observers in the AFC. The primary responds to either kind of STOP OBSERVER command by obtaining a new OBID and persisting it in its copy of AFC state . The first Observer to register after the STOP OBSERVER command receives the new OBID and becomes the new active Observer.",{"@attributes":{"id":"p-0187","num":"0270"},"figref":"FIG. 17","b":["1701","1703","1705","1707","1709","1711","1713","1707","1715","1717","1719"]},"Starting an Active Observer: ",{"@attributes":{"id":"p-0188","num":"0271"},"figref":["FIG. 18","FIG. 17","FIG. 14"],"b":["1801","1803","1719","1801","1831","1835","1876","1835","1509","1876","1837","1836","1877","1879","1401","1801","508"]},"Starting a Redundant Observer: ","A preferred embodiment of starting a redundant Observer is shown in flowchart  of . At connector , the START OBSERVER command has determined that the Observer executing the START OBSERVER command will start as a redundant Observer (from  in ) or has ceased to be an active Observer at connectors  or  in . Flowchart  has two parts: detection part , which detects the absence of the active Observer, and replacement part , which replaces the absent active Observer with a redundant Observer. As may be seen from loop , the redundant Observer executes detection part  until it is stopped by a hard STOP OBSERVER command from a DBA or becomes an active Observer. The redundant Observer first queries the active Observer state in the primary (). If the primary database is absent (), the redundant Observer repeats loop  (branch ); otherwise, the redundant Observer takes branch  and determines whether the primary database is being pinged (). If it is, there is an active Observer and loop  is repeated (branch ). The same steps are repeated with regard to the standby database system (see blocks , ,  branches  and , and block  and branches  and . If either the primary or the standby is absent or one or the other is being pinged, loop  is repeated. It is repeated if either the primary or the standby is absent because the presence of both database systems is required to execute a STOP OBSERVER command and a redundant Observer must execute a STOP OBSERVER command in order to become an active Observer. It is repeated if either the primary or the standby is receiving pings because in that case, the active Observer is present. Replacement portion  begins at , in which the redundant Observer issues a soft STOP Observer command () to stop the active Observer. It does this by causing the primary database system to obtain a new OBID. The change in the OBID invalidates the previous OBID. Then the redundant Observer waits for possible STOP commands from other redundant Observers which have detected that the current active Observer is absent () and after the required period, the execution goes via connector  and connector  to block  in flowchart  for active Observers in . In one embodiment, the time spent waiting at  must be greater than or equal to the period required to execute actions  through  of flowchart . This will allow each redundant Observer in a configuration that includes more than one redundant Observer to detect the absence of the active Observer and issue a soft STOP Observer command","Conclusion","The foregoing Detailed Description has disclosed to those skilled in the relevant technologies how lightweight Observers and redundant Observers may be implemented in an automatic failover configuration and has further disclosed the best mode presently known to the inventors of implementing their lightweight Observers and redundant Observers. It will however be immediately apparent to those skilled in the relevant technologies that many other implementations of the principles of the Observers disclosed herein are possible. To begin with, the disclosed implementation has been made in a large commercial database system which has been in continued production and development for almost 30 years. Many of the details of the disclosed implementation are consequences of the fact that the automatic failover configuration is implemented in a preexisting relational database system. Such details will of course be different in implementations of the techniques in other preexisting relational or non-relational database systems or in a newly-designed database system. Further, what is important for the techniques is the logical structure and behavior of the Observers, rather than the specific ways in which the implementation achieves this logical structure and behavior. For example, the disclosed implementation uses the OBID to identify the current active Observer and to distinguish the current active Observer from the redundant Observers; in other implementations, other techniques might be used to identify the OBID. Similarly, techniques other than those disclosed herein may be used to ensure that there is only a single active Observer in the configuration, to make a redundant Observer into a new active Observer, and to make an Observer that has been replaced as an active Observer into a redundant Observer.","For all of the foregoing reasons, the Detailed Description is to be regarded as being in all respects exemplary and not restrictive, and the breadth of the invention disclosed herein is to be determined not from the Detailed Description, but rather from the claims as interpreted with the full breadth permitted by the patent laws."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0030","num":"0044"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0031","num":"0045"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0032","num":"0046"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0033","num":"0047"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0034","num":"0048"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0035","num":"0049"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0036","num":"0050"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0037","num":"0051"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0038","num":"0052"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0039","num":"0053"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0040","num":"0054"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0041","num":"0055"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0042","num":"0056"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0043","num":"0057"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0044","num":"0058"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0045","num":"0059"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0046","num":"0060"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0047","num":"0061"},"figref":"FIG. 18"}]},"DETDESC":[{},{}]}
