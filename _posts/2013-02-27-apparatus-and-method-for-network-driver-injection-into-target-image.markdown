---
title: Apparatus and method for network driver injection into target image
abstract: A method provides network driver injection into a target image to transform the target image to be compatible with one or more source machines, for facilitating operating system streaming over a network. The method may include: facilitating access to a source system registry file of a source machine; facilitating access to a target system registry file of the target image, without copying the target image; determining whether source network interface cards of the source machine are compatible with the target image; and if the source network interface cards are not compatible with the target image, performing network interface driver injection into the target image. The target image may include an operating system. A machine-readable storage medium and apparatus are provided. A method is described for building a program for providing network driver injection into a target image to transform the target image to be compatible with computing machines.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08856723&OS=08856723&RS=08856723
owner: WYSE Technology L.L.C.
number: 08856723
owner_city: San Jose
owner_country: US
publication_date: 20130227
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Appendix Illustration of Driver Injection for One Example of Scenario","Using Driver Injection to Create Golden Image","Overview","Features for this Example of Scenario","Process for this Example of Scenario","Some Details for this Example of Scenario","Check Compatibility Between a Device and an Existing VDisk"],"p":["This application is a continuation of pending U.S. patent application Ser. No. 12\/824,029 filed on Jun. 25, 2010; the contents of which is incorporated in its entirety by reference.","The subject technology relates in general to virtual disk images, driver injection or streaming, and more particularly to apparatus and method for network driver injection into a target image.","In one aspect, operating system (OS) streaming is a technology to boot a computer (or a virtual machine) from an image file stored on a network. The actual operating system may be centrally located on a server and may stream to a client device on demand. In one aspect, such an image file may be sometimes referred to as a \u201cvirtual disk.\u201d","Typically, a virtual disk created from a specific device can be streamed to multiple devices if they bear the same hardware characteristics. More specifically, the motherboard, the network adapter and the video card must be the same in this typical scenario. Being able to use a single virtual disk to boot multiple devices greatly simplifies information technology (IT) department's maintenance effort and cost. For example, to perform Windows updates, a system administrator only needs to apply the changes on the centrally located common virtual disk once. All client devices booted from this virtual disk will receive the changes.","Various aspects of the disclosure relate to methods, apparatuses, machine-readable storage media encoded with instructions, computer programs, and\/or other means for providing network driver injection into a target image. In one aspect of the disclosure, a machine-readable storage medium may be encoded with instructions that may be executable by a processing system to perform a method for providing network driver injection into a target image. In one aspect, the method may transform the target image to be compatible with one or more source machines. In one aspect, the method may facilitate operating system streaming over a network.","The instructions may comprise code for some or all of the following: facilitating access to a source system registry file of a source machine; facilitating access to a target system registry file of the target image, without copying the target image; determining whether one or more source network interface cards of the source machine are compatible with the target image; and if the one or more source network interface cards are not compatible with the target image, performing network interface driver injection. The target image may comprise an operating system.","The operation of performing network interface driver injection may comprise some or all of the following: determining one or more source network components associated with the one or more source network interface cards; determining source network configuration of the one or more source network components; determining target network configuration of one or more target network components of the target image; determining whether the source network configuration conflicts with the target network configuration; if the source network configuration conflicts with the target network configuration, adjusting the source network configuration so that the source network configuration does not conflict with the target network configuration; and injecting, to the target system registry file, the source network configuration of the one or more source network components.","The operation of performing network interface driver injection may further comprise facilitating copying of one or more files associated with the one or more source network components of the source machine onto the target image.","In yet a further aspect of the disclosure, a method may build a computer program for providing network driver injection into a target image. In one aspect, this may transform the target image to be compatible with one or more computing machines. In one aspect, the method may facilitate operating system streaming over a network.","The method may comprise some or all of the following: selecting a first computing machine and a second computing machine, wherein the first computing machine comprises a first network interface card, the second computing machine comprises a second network interface card, wherein configuration of the second network interface card is different from configuration of the first network interface card; building a first virtual disk image of the first computing machine; building a second virtual disk image that is compatible with the first computing machine and the second computing machine; booting the first computing machine using the first virtual disk image; extracting first system registry information of the first computing machine after booting the first computing machine using the first virtual disk image, the first system registry information comprising configuration values for the first network interface card based on the first virtual disk image; booting the first computing machine using the second virtual disk image; extracting second system registry information of the first computing machine after booting the first computing machine using the second virtual disk image, the second system registry information comprising configuration values for the first network interface card and the second network interface card based on the second virtual disk image; determining network driver injection components based on differences between the first system registry information and the second system registry information and based on registries that do not affect network functionalities; injecting the network driver injection components into the first virtual disk image; and producing the computer program based on the network driver injection components.","It is understood that other configurations of the subject technology will become readily apparent to those skilled in the art from the following detailed description, wherein various configurations of the subject technology are shown and described by way of illustration. As will be realized, the subject technology is capable of other and different configurations and its several details are capable of modification in various other respects, all without departing from the scope of the subject technology. Accordingly, the drawings and detailed description are to be regarded as illustrative in nature and not as restrictive.","The detailed description set forth below is intended as a description of various configurations of the subject technology and is not intended to represent the only configurations in which the subject technology may be practiced. The appended drawings are incorporated herein and constitute a part of the detailed description. The detailed description includes specific details for the purpose of providing a thorough understanding of the subject technology. However, it will be apparent to those skilled in the art that the subject technology may be practiced without these specific details. In some instances, well-known structures and components are shown in block diagram form in order to avoid obscuring the concepts of the subject technology. Like components are labeled with identical element numbers for ease of understanding.","Overview","An aspect of the disclosure provides using driver injection to enhance an existing virtual disk image to support multiple heterogeneous platforms for streaming.","Since it is very rare that there is only one type of platform in any OS streaming deployment, it is desirable to have a single virtual disk image streamable to multiple client platforms bearing different hardware characteristics. In one aspect, such a virtual disk image may be sometimes referred to as a \u201cgolden\u201d image.","In one aspect, the subject technology enables a user to inject OS streaming related drivers and configurations into an existing virtual disk image to support multiple heterogeneous platforms for OS streaming The resulting virtual disk image becomes a \u201cgolden\u201d image.","The importance of a golden image may be exemplified in the scenario described below:","On an OS streaming deployment, a customer may have 100 client devices scattered in nine branch offices. The 100 devices are purchased from 10 different manufacturers\/models. If a golden image is not available, the customer needs to create 10 different virtual disk images, each supporting a unique hardware platform. A typical VDisk image is 10 GB in size.","To deploy OS streaming on all branch offices, the customer needs to distribute all 10 VDisk images from the headquarters to all nine branch offices. That is 10*10 GB*9=900 GB of data traveling on wire, which is typically low-bandwidth channels. To keep the images up to date with latest OS patches, each of the 10 VDisk images needs to be updated from the headquarters. The changes applied on all 10 images would then need to be pushed to each branch office, again on low-bandwidth channels.","If a golden image is available, the customer only needs to create a single virtual disk image supporting all 10 platforms (and 100 client devices). To deploy OS streaming on all branch offices, the customer would need to distribute only one VDisk image from the headquarters to the nine branch offices. That is 10 GB*9=90 GB of data traveling on wire, which is ten times less than without a golden image. To keep the image up to date with latest OS patches, the changes need to be applied on only the single golden image and distributed to the branch offices subsequently.","Obviously, the capability to create a golden image supporting multiple heterogeneous platforms greatly improves the usability of OS streaming, and truly achieves scalability on an enterprise level.","Illustration of Various Approaches","A first approach enables a user to create a golden virtual disk image to support multiple heterogeneous platforms for OS streaming. This approach, however, requires installation of a common network interface card (e.g., a network adapter) on each source platforms during the virtual disk creation process. It involves opening up each source platform and finding a spare bus interface slot to accommodate the new network interface card. It is challenging to common users and often not feasible on platforms where a spare bus slot is not available, which is the case on most laptops. It is also not desirable because opening up a computer chassis may void the manufacturer's warranty. This approach also requires all source platforms to have OS installation that uses the same hardware abstraction layer (HAL).","An aspect of the subject technology overcomes the drawbacks of the foregoing approach. For example, an aspect of the subject technology does not require a common network interface card among different source platforms, does not require a user to open up each source platform, and does not require a spare bus slot to insert a new network interface card. In addition, an aspect of the subject technology does not require all source platforms to have the same HAL.","A second approach enables a user to create a golden virtual disk image to support multiple heterogeneous platforms for OS streaming. This approach helps a user to prepare an OS installation on a physical hard disk, which contains all drivers for all source platforms before capturing a snapshot of the hard disk installation into a virtual disk image. The process involves backing up a hard disk OS installation of one platform to a file (e.g., a wup file), restoring the file from the first source platform to a non-active partition of a second source platform. The process also involves booting the second source platform from the \u201crestored\u201d partition and installing drivers for the second source platform. The resulting hard disk OS installation, which resides on the \u201crestored\u201d partition, contains all drivers from both the first and the second source platforms. Such backup and restore process needs to be repeated on all source platforms.","The repeated backup and restore process is long and tedious. It often may take hours to create a golden image for three to four platforms. It also requires each source platform, except the first, to have at least two hard disk partitions, one for boot up and another for restore (e.g., a wup file). If source platforms have an operating system pre-installed on a single partition, a user needs to remove the existing installation, re-partition the hard disk and re-install the OS first. This approach also requires all source platforms to have OS installation on a hard disk that uses the same hardware abstraction layer (HAL).","An aspect of the subject technology overcomes the drawbacks of the foregoing second approach. For example, an aspect of the subject technology does not require multiple hard disk partitions on any source platforms, does not require copying of an entire hard disk image onto a source platform, and does not require copying of an entire operating system image onto a source platform. In addition, an aspect of the subject technology does not require all source platforms to have the same HAL. In accordance with one aspect of the disclosure, while the foregoing features are not required, the subject technology can also function in the presence of the foregoing drawbacks.","A third approach utilizes a process to create a common virtual disk image between a physical device and a virtual machine. This method can create a common virtual disk for only a single platform and a virtual machine. It does not achieve the goal of creating a single virtual disk for any number of heterogeneous hardware platforms.","An aspect of the subject technology overcomes the drawbacks of the foregoing third approach. For example, an aspect of the subject technology can create a golden virtual disk image for any number of heterogeneous hardware platforms.","A fourth approach uses a method of preinstalling plug-and-play (PnP) drivers into an offline Windows OS image to be deployed to new hardware. An original equipment manufacturer (OEM) or corporate IT staff may utilize this method. This method can be utilized on a Windows image targeted to boot a hard disk physically attached to a target device only. It, however, cannot be used on a virtual disk image, which resides on the network, since a virtual disk image residing on a network needs a network interface card bound to an OS streaming driver designed specifically to support OS streaming This fourth approach does not inject the binding relationship between the network interface card and the OS streaming driver, and hence cannot be used on a virtual disk image. Furthermore, this approach supports only a plug-and-play driver.","Illustration of Various Advantages","An aspect of the subject technology overcomes the drawbacks of the foregoing fourth approach. For example, an aspect of the subject technology can support injecting a network interface card driver and corresponding network components onto plug-and-play interfaces as well as non plug-and-play interfaces.","In accordance with one aspect of the disclosure, the subject technology can provide, among others, the following advantages.\n\n","Illustration of Code\/Pseudo Code Representation","Shown below is an aspect of the subject technology written in C++ programming language, but the subject technology is not limited to C++ and can be written in other programming languages. Some examples of subroutines, functions, data structures and defines are shown below, and some of these are referred to later in this disclosure.",{"@attributes":{"id":"p-0061","num":"0069"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["#define","Net Device class","\/\/ This is a global unique identifier (GUID) for Net"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Device class devices as defined by Microsoft"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["#define","NDIS LAN class","\/\/ This is a GUID for NDIS LAN class devices as"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"defined by Microsoft"},{"entry":"\/\/ type of NETNODE"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["enum","nodetype_t","{"]},{"entry":[{},"ntype_NIC,","\/\/ physical network interface card"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ntype_OSMNS,","\/\/ OS streaming driver"]},{"entry":[{},"ntype_UPPER","\/\/ other OS network component such as an NDIS intermediate"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"driver that is bound to OS streaming driver on the"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["upper edge","(e.g., packet scheduler driver);"]},{"entry":"};"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"typedef struct _NETNODE {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003struct _NETNODE \u2003*pUpper;","\/\/ pointer to upper bound NETNODE"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003nodetype_t","nType;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003DWORD","dwBusType;","\/\/ bus type"]},{"entry":["\u2003\u2003\u2003CString","csComponentID;","\/\/ ComponentId registry value"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003CString","csGUID;","\/\/ NetCfgInstanceID registry value"]},{"entry":["\u2003\u2003\u2003CString","csDriverDesc;","\/\/ DriverDesc registry value"]},{"entry":["\u2003\u2003\u2003CString","csOldInfPath;","\/\/ inf file (driver installation file) name used in source"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"147pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"platform"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003CString","csNewInfPath;\/\/ inf file (driver installation file) name to be used in"]},{"entry":"Target"},{"entry":["\u2003\u2003\u2003CString","csOldNetClassSubKey; \/\/ subkey under \u201cclass\\ <Net Device class >\u201c"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"in source platform"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003CString","csNewNetClassSubKey; \/\/ subkey under \u201cclass\\<Net Device class >\u201c"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"in Target"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003BOOL bToBeInjected;","\/\/ This is 1 if this node is to be injected into Target"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003CString","csEnumKey;","\/\/ Enum key path,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003CString","csOldBusSpecificID; \/\/ Enum subkey in source platform"]},{"entry":["\u2003\u2003\u2003CString","csNewBusSpecificID; \/\/ Enum subkey to be used in Target, for PCI"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["device","this does not change, for others it may"]},{"entry":["change to","\u2003\u2003\u2003a different number"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003CString","csService;","\/\/ service name"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003CString","csOldDeviceClassKey; \/\/ subkey under \u201cDeviceClasses\\<NDIS LAN"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"class>\u201c"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003CString","csNewDeviceClassKey; \/\/ if csOldBusSpecificID is the same as"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"csNewBusSpecificID, this value is"]},{"entry":[{},"\u2003\u2003\u2003\u2002csOldDeviceClassKey."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Otherwise the"},{"entry":"\u201c#<csOldBusSpecificID>#\u201d token is changed to"},{"entry":"\u201c#<csNewBusSpecificIC>#\u201d token"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003CString","csDeviceInstanceID;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}NETNODE, *PNETNODE;"},{"entry":"typedef struct _INSTANCES {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003DWORD","dwOrigLastInstance;"]},{"entry":["\u2003\u2003\u2003DWORD","dwNewLastInstance;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}INSTANCES, *PINSTANCES;"},{"entry":"class CInject"},{"entry":"{"},{"entry":"public:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003CString","m_SrcDir;","\/\/ drive letter assigned to the System volume of a Source"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Platform OR a path where the system configurations, driver binaries and installation files of"},{"entry":"the Source Platform can be found. (e.g., \u201cc:\\\u201d)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["CString","m_DstDir;","\/\/ drive letter assigned to the System volume of a Target VDisk"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"OR a path where the network component information of the Target VDisk can be found"},{"entry":"(e.g., \u201cf:\\\u201d)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003CString","m_csSrcSysKey;","\/\/ registry key root path under which the Source"]},{"entry":[{},{},"\u2003\u2003\u2003Platform's system information is"]},{"entry":"loaded."},{"entry":["\u2003\u2003\u2003CString","m_csDstSysKey;","\/\/ registry key root path under which the Target"]},{"entry":[{},{},"\u2003\u2003\u2003VDisk's system information is loaded."]},{"entry":["\u2003\u2003\u2003DWORD","m_InjectCount;","\/\/ number of NIC from the Source Platform to be"]},{"entry":[{},{},"\u2003\u2003\u2003injected to the Target"]},{"entry":["\u2003\u2003\u2003CPtrList","m_SrcNICNodeList;","\/\/ linked list of PNETNODEs from Source"]},{"entry":"Platform"},{"entry":["\u2003\u2003\u2003CPtrList","m_DstNICNodeList;","\/\/ linked list of PNETNODEs from Target"]},{"entry":"VDisk"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003CMapStringToPtr","m_EnumInstanceList; \/\/ map from Enum key string to"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"182pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"PINSTANCES"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003CMapStringToPtr","m_NetworkInstanceList;","\/\/ map from Network Description"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["to","PINSTANCES"]},{"entry":"}"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"CInject( );"},{"entry":"\u2003\u2003\u2003virtual ~CInject( );"},{"entry":"\u2003\u2003\u2003int CheckNICCompatibility(LPCTSTR srcKey, LPCTSTR dstKey, CString&"},{"entry":"errMsg);"},{"entry":"\u2003\u2003\u2003BOOL EnumWSMNIC(LPCTSTR csSysKey, CPtrList& nList, CString& errMsg);"},{"entry":"\u2003\u2003\u2003BOOL AddNICNode(LPCTSTR csSysKey, CPtrList& nList, CString& nicGUID,"},{"entry":"CString& errMsg);"},{"entry":"\u2003\u2003\u2003BOOL FoundMatch(CPtrList& nList, PNETNODE pTargetNode);"},{"entry":"\u2003\u2003\u2003BOOL InjectDriver(const CString& winDir, const CString& dstDir, CString&"},{"entry":"errMsg);"},{"entry":"\u2003\u2003\u2003BOOL InjectWSMNIC(CString& errMsg);"},{"entry":"private:"},{"entry":"\u2003\u2003\u2003PNETNODE BuildNetNode(nodetype_t nType, LPCTSTR classSubKey,"},{"entry":"CRegKeyEx& classKey);"},{"entry":"\u2003\u2003\u2003void FreeNetNode(PNETNODE pNode);"},{"entry":"\u2003\u2003\u2003BOOL FindEnumEntry(LPCTSTR csSysKey, LPCTSTR key, PNETNODE pNode,"},{"entry":"\u2003\u2003\u2003DWORD recurseLevel = 1);"},{"entry":"\u2003\u2003\u2003PNETNODE FindUpper(CString& csSysKey, PNETNODE pNode, nodetype_t"},{"entry":"upperType);"},{"entry":"\u2003\u2003\u2003BOOL FindDeviceClassEntry(CString& csSysKey, PNETNODE pNode);"},{"entry":"\u2003\u2003\u2003DWORD FindLastSubKey(LPCTSTR regKey);"},{"entry":"\u2003\u2003\u2003void AssignNewNetClassSubKey(PNETNODE pNode, DWORD *dwLastSubKey);"},{"entry":"\u2003\u2003\u2003BOOL AssignNewBusSpecificID(LPCTSTR csSysKey, PNETNODE pNode);"},{"entry":"\u2003\u2003\u2003BOOL AssignNewDeviceClassKey(PNETNODE pNode);"},{"entry":"\u2003\u2003\u2003BOOL TallyNetworkDescriptionInstances(LPCTSTR csSysKey, PNETNODE"},{"entry":"pNode);"},{"entry":"\u2003\u2003\u2003int FindLastStringValue(LPCTSTR regKey, LPCTSTR regValue);"},{"entry":"\u2003\u2003\u2003BOOL AssignNewInfPath(PNETNODE pNode, CString& dstDir, int"},{"entry":"*pLastOEMInfCount);"},{"entry":"\u2003\u2003\u2003int FindLastOEMInf(CString& csDir);"},{"entry":"\u2003\u2003\u2003BOOL CopyInfFile(PNETNODE pNode, CString& csSrcDir, CString& csDstDir);"},{"entry":"\u2003\u2003\u2003BOOL CopyDriverFile(PNETNODE pNode, CString& csSrcDir, CString&"},{"entry":"csSrcSysKey, CString& csDstDir);"},{"entry":"\u2003\u2003\u2003BOOL MergeNetClassSubKeys(PNETNODE pNode, CString& csSrcSysKey,"},{"entry":"CString& csDstSysKey);"},{"entry":"\u2003\u2003\u2003BOOL MergeDeviceClassesSubKeys(PNETNODE pNode, CString& csSrcSysKey,"},{"entry":"CString& csDstSysKey);"},{"entry":"\u2003\u2003\u2003BOOL MergeEnumSubKeys(PNETNODE pNode, CString& csSrcSysKey, CString&"},{"entry":"csDstSysKey);"},{"entry":"\u2003\u2003\u2003LONG MyRegCopyTree(HKEY hSrcKey, LPCTSTR srcSubKey, HKEY"},{"entry":"hDstSubKey, LPCTSTR dstSubKeyPath, CString& errMsg);"},{"entry":"\u2003\u2003\u2003LONG MyRegCreateKey(HKEY hRootKey, CString& csKey, PDWORD"},{"entry":"pdwExpectedDeposition, PHKEY phKey);"},{"entry":"\u2003\u2003\u2003BOOL MyRegChangeValue(HKEY hKey, LPCTSTR subKey, LPCTSTR"},{"entry":"valueName, LPCTSTR oldValue, LPCTSTR newValue);"},{"entry":"\u2003\u2003\u2003BOOL MyRegChangeValue(HKEY hKey, LPCTSTR subKey, LPCTSTR"},{"entry":"valueName, DWORD oldValue, DWORD newValue);"},{"entry":"\u2003\u2003\u2003BOOL MyRegChangeValue(HKEY hKey, LPCTSTR subKey, LPCTSTR"},{"entry":"valueName, CStringArray& oldValue, CStringArray& newValue);"},{"entry":"\u2003\u2003\u2003LONG AddLinkage(PNETNODE pNode, CString& csRefGUID, CString&"},{"entry":"csSysKey);"},{"entry":"\u2003\u2003\u2003LONG AddLinkage(PNETNODE pNode, CString& csRefGUID, CRegKeyEx&"},{"entry":"rKey);"},{"entry":"\u2003\u2003\u2003LONG AddLinkage(PNETNODE pNode, CString& csRefGUID, CRegKeyEx&"},{"entry":"rKey, LPCTSTR szRegValue);"},{"entry":"\u2003\u2003\u2003LONG AdjustLana(HKEY hSvcKey);"},{"entry":"\u2003\u2003\u2003LONG AddSvcInterfaces(PNETNODE pNode, CString& csRefGUID, CString&"},{"entry":"csSrcSysKey, CString& csDstSysKey);"},{"entry":"\u2003\u2003\u2003LONG AddSvcInterfacesDo(CString& csNewGUIDKeyName, LPCTSTR szSubKey,"},{"entry":"CString& csSrcSvcXParamKeyPath, HKEY hDstParamKey);"},{"entry":"\u2003\u2003\u2003int FindRefSubKey(HKEY hKey, LPCTSTR csSubKey, CString& csRefGUID,"},{"entry":"CString& csNewGUID, CString& csNewGUIDKeyName);"},{"entry":"\u2003\u2003\u2003LONG AddRemoteAccessInterfaces(PNETNODE pNode, CString& csSrcSysKey,"},{"entry":"CString& csDstSysKey);"},{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Illustration of Terminology","In accordance with one aspect of the subject technology, some of the terms are described below with examples.","Streaming Component: In one aspect, a streaming component may include, for example, a software package to be installed on a machine such as a client device to enable the machine to communicate with an OS streaming server over a network, so that the machine can be booted from a virtual disk image that resides on the network. An example of a streaming component is the WSM Client software, which is a streaming manager product of Wyse. Another example is Citrix's provisioning server product, called the Master Target Device software.","Compatible: In one aspect, the term compatible may be used to describe a relationship between multiple entities, such as between a virtual disk image and a client device. Two entities may be considered compatible if, for example, one entity can be booted using the other entity. A virtual disk image and a client device may be considered to be compatible if, for example, the client device can be booted from the virtual disk image through OS streaming Two entities may be considered incompatible if, for example, one entity cannot be booted using the other entity. A virtual disk image and a client device may be considered to be incompatible if, for example, the client device cannot be properly booted from the virtual disk image through OS streaming.","Source Platform (or Source): In one aspect, a Source Platform, Source, source platform, or source may be a device or a machine, and in one aspect, it can be a physical device or machine, or a virtual device or machine. For example, it may be a computing machine or a computer, which a user would like to make a virtual disk image be compatible with. In one example, it may be referred to as a client device or a client. In one aspect, a Source Platform may be referred to as a source machine. Sometimes the terms platform, device and machine are used interchangeably in this disclosure.","Target Platform: In one aspect, a Target Platform may be a device or a machine. For example, it may be a server on which a Target VDisk resides or a server from which a Target VDisk is streamed to a Source Platform(s). In one aspect, a Target Platform may be referred to as a target machine. In one aspect, a Target VDisk does not necessarily reside in a Target Platform. For example, a Target VDisk can appear as a file residing in a Source Platform or on a Development Machine. Thus, a Target VDisk may reside on a Target Platform (e.g.,  in ) or on another machine. In one aspect, the term \u201ctarget\u201d may refer to a target in a general sense (e.g., a component that is being handled currently by a process).","Target VDisk (or Target): In one aspect, a Target VDisk, Target, Target Vdisk, VDisk, target VDisk, or target vdisk may describe a virtual disk or a virtual disk image. A virtual disk image may be, for example, a software image into which support for a Source Platform is to be added so that the virtual disk image can become compatible with the Source Platform. In one aspect, a Target VDisk may be referred to as a target image. In one example, a Target VDisk may be an image file stored on a network. In one aspect, a Target VDisk may be used for driver injection and\/or streaming.","Development Machine: In one aspect, a Development Machine or a development machine is a physical or virtual device or machine. For example, a Development Machine may be utilized to perform driver injection (e.g., the driver injection stage B of ). A Development Machine may be a Source Platform or another machine. In one aspect, a Development Machine may even be a Target Platform.\n\n","NIC: In one aspect, a NIC may refer to a network interface card. In one aspect, a NIC can be a physical hardware, or a virtual hardware when a Source Platform is a virtual machine.","Network Component: In one aspect, a network component may be a component relating to a network(s). A network component may be, for example, a network driver interface specification (NDIS) miniport driver A (e.g., an NIC driver), an NDIS intermediate driver B, an NDIS protocol driver C, an NDIS protocol driver C, or a network service , as shown in . In one aspect, a network component is a software module or a software driver related to a network interface card, which is hardware. In one aspect, a network component resides in a layer between a physical hardware layer and an application layer. See .","System Registry File: In one aspect, a System registry file or system registry file may be system information. For example, a system registry file may contain configuration information, setup information or system registry information. In one aspect, a system registry file may be editable. In one aspect, a system registry file may contain at least some of network configuration. In one aspect, a system registry file for a source machine may be referred to as a source system registry file. In one aspect, a system registry file for a target image may be referred to as a target system registry file.","Network Configuration: In one aspect, network configuration may include configuration information associated with network component(s). An example of a description about network configuration is provided below with reference to operation  in  under the subheading \u201cIllustration of Performing Network Interface Driver Injection.\u201d","Driver Injection: In one aspect, the term Driver Injection or driver injection may refer to a process of injecting one or more network components (e.g., one or more drivers or one or more driver components). In one example, after applying this process from the Source Platform onto a Target VDisk, the resulting Target VDisk may become compatible with the Source Platform. The process may involve injecting information of selected network components present in a Source Platform into a Target VDisk. The selected network components may be referred to as \u201cto-be-injected\u201d components.","NetNode structure: In one aspect, each selected network component of the Source Platform and Target VDisk may be described by an instance of this data structure referred to as NetNode (or sometimes referred to as NETNODE or netnode). This structure may have fields that may describe the characteristics and binding relationship of its network component with other network component(s). For example, this structure may include a display name, the type of interface bus, a global unique identifier assigned by the operating system to the component, the installation file used to install the driver for this component, the registry key paths under which various information of this component can be found, a pointer to another NetNode structure which this component is bound to in the operating system's network stack. An example of a NetNode structure is shown above in C++ code within the structure named \u201ctypedef struct_NETNODE { . . . }\u201d.","System Volume: In one aspect, a System volume (or a system volume) may be the disk volume where an operating system's system files and system information reside. For example, in Windows OS, this is where the kernel binaries and the system registry hive file are located.","HKLM: In one aspect, the term HKLM may refer to HKEY_LOCAL_MACHINE (see item  in ). For example, in Windows OS, this is a pre-defined registry handle under which settings specific to the local computer is stored.\n\n","Below describes examples of some of the major functions of the Clnject class.","InjectDriver: In one aspect, the InjectDriver function may be the top most function in CInject class. The InjectDriver function can check compatibility between multiple entities such as a Source Platform and a Target VDisk. If the two entities are not compatible, this function may perform the Driver Injection process to make the two entities compatible.","This function may take two input parameters:",{"@attributes":{"id":"p-0080","num":"0000"},"ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":{"@attributes":{"id":"ul0008-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":["winDir may be the drive letter assigned to the System volume of a Source Platform or a path where the System configurations (e.g., network component information), driver binaries and installation files of the Source Platform can be found.","dstDir may be the drive letter assigned to the System volume of a Target VDisk or a path where the network component information of the Target VDisk can be found\n\nThis function may return TRUE if succeeds, or FALSE otherwise\n"]}}}},"CheckNICCompatibility: In one aspect, the function CheckNICCompatibility may check compatibility of NIC between multiple entities such as a Source Platform and a Target VDisk.","This function may take two input parameters:",{"@attributes":{"id":"p-0082","num":"0000"},"ul":{"@attributes":{"id":"ul0010","list-style":"none"},"li":{"@attributes":{"id":"ul0010-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0011","list-style":"none"},"li":["dstKey: This may be a registry key path to a Target VDisk's system information (e.g., \u201cHKLM\\{_SYSTEM_}\\ControlSet001\u201d) (see item  in )","srcKey: This may be a registry key path to a Source Platform's system information (e.g., \u201cHKLM\\SYSTEM\\CurrentControlSet\u201d) (see item  in  or item  in )\n\nThis function may return \u22121 if fails; otherwise,\n","it may return the total number of NICs in a Source Platform that is not compatible with NICs in a Target.","it may return 0 if all NICs in the Source Platform are supported in the Target\n\nThis function can construct mSrcNICNodeList and mDstNICNodeList, which are linked lists of NETNODEs describing streaming related network components of the Source Platform and Target VDisk, respectively.\n"]}}}},"InjectWSMNIC: In one aspect, this function InjectWSMNIC may inject OS streaming and NIC related registries from a Source to a Target. This function can also copy a NIC driver binary file and a NIC driver installation file from a Source to a Target. This function may require some variables in the CInject class be set correctly before being called:\n\n","Below describes examples of some of the helper functions for the functions described above:","EnumWSMNIC: In one aspect, this function EnumWSMNIC may enumerate the registry csSysKey to get a list of NICs whose drivers are currently bound to a network component such as the OS streaming driver. It constructs a NETNODE for each NIC found and adds it to \u201cnList\u201d.","This function may take two input parameters:",{"@attributes":{"id":"p-0086","num":"0000"},"ul":{"@attributes":{"id":"ul0014","list-style":"none"},"li":{"@attributes":{"id":"ul0014-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0015","list-style":"none"},"li":["csSysKey: This may be a registry key root path in which the Source Platform's or Target VDisk's system information is stored. (e.g., \u201cHKLM\\SYSTEM\\CurrentControlSet\\\u201d). The function EnumWSMNIC may evaluate information under this path to extract NIC and associated drivers information.","nList: This may be a linked list of NETNODE to which the result is to be added.\n\nThis function may return TRUE if succeeds, or FALSE if fail.\n"]}}}},"BuildNetNode: In one aspect, this function BuildNetNode may create a NETNODE, fills in the content according to values under classKey registry.","This function may take three input parameters:",{"@attributes":{"id":"p-0088","num":"0000"},"ul":{"@attributes":{"id":"ul0016","list-style":"none"},"li":[{"@attributes":{"id":"ul0016-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0017","list-style":"none"},"li":["classKey: This may be a registry key handle under which the net node belongs. In one aspect, ClassKey should have been opened with read access.","classSubKey: This may be a string describing the path of classKey handle (e.g., \u201cHKLM\\System\\CurrentControlSet\\ . . . \\<Net Device class>\\000x\u201d)","nType: This may be a constant of nodetype_t (e.g., ntype_NIC)\n\nThis function may return a pointer to a newly created and filled NETNODE structure. In the example shown below, the fields of a NETNODE structure are filled in:\n"]}},"csDriverDesc: value read from \u201c<classKey>\\\\DriverDesc\u201d registry","csGUID: value read from \u201c<classKey>\\\\NetCfgInstanceID\u201d registry","csOldInfPath: value read from \u201c<classKey>\\\\InfPath\u201d registry","csComponentID: value read from \u201c<classKey>\\\\ComponentId\u201d registry","dwBusType: value deduced from \u201c<classKey>\\\\BusType\u201d registry","nType: value equal to input parameter nType","csOldNetClassSubKey: value equal to input parameter classSubKey"]}},"FindEnumEntry: In one aspect, this function FindEnumEntry may find an entry under the \u201cEnum\u201d registry key where a network component described by pNode belongs. This function enumerates all keys under <csSysKey>\\Enum, reads the \u201cDriver\u201d registry values under each subkey, and tries to find a match on \u201c<Net Device class>\\<pNode->csOldNetClassSubKey>\u201d","This function may take three input parameters:",{"@attributes":{"id":"p-0090","num":"0000"},"ul":{"@attributes":{"id":"ul0018","list-style":"none"},"li":[{"@attributes":{"id":"ul0018-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0019","list-style":"none"},"li":["csSysKey: This may be a registry key root path under which the source platform's or Target VDisk's system information is stored (e.g., \u201cHKLM\\SYSTEM\\CurrentControlSet\\\u201d. This value stays the same on each recursive call.","key: This may be a registry subkey under which the search should begin. This parameter changes on each recursive call, going deeper and deeper into the \u201cEnum\u201d registry tree.","pNode: This may be a pointer to a NETNODE structure describing a target network component.\n\nIf a target network component is found, the function FindEnumEntry fills up csEnumKey, csOldBusSpecificID, csService fields in pNode, where\n\ncsEnumKey is the \u201cEnum\u201d key under which target network component is found, csOldBusSpecificID is the subkey under csEnumKey where target network component is found,\n"]}},"csService is a string value of \u201cService\u201d registry under","<csSysKey>\\<csEnumKey>\\<csOldBusSpecificID>."]}},"FindUpper: In one aspect, this function FindUpper may find the upper node of a target network component. The upper node is the network component currently bound to a target network component from the upper edge in the operating system's network stack. This function looks into the Net Device class key and locates a subkey which \u201cRootDevice\u201d contains target node's GUID.","This function may take three input parameters:",{"@attributes":{"id":"p-0092","num":"0000"},"ul":{"@attributes":{"id":"ul0020","list-style":"none"},"li":{"@attributes":{"id":"ul0020-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0021","list-style":"none"},"li":["csSysKey: This may be a registry key root path under which the source platform's or Target VDisk's system information is stored (e.g., \u201cHKLM\\SYSTEM\\CurrentControlSet\\\u201d).","pNode: This may be a pointer to a NETNODE that describes a target network component of which the upper node is to be located.","upperType: This may be a type of resulting upper node. If found, the function creates a new NETNODE for the upper component, fills in the content of the NETNODE, and returns a pointer to a newly created NETNODE.\n\nOtherwise this function returns NULL.\n"]}}}},"FindDeviceClassEntry: In one aspect, this function FindDeviceClassEntry may find the Device Class registry entry for a target network component. This function looks into the NDIS LAN class key and locates a subkey value that matches a target node's GUID. The parent key of the above subkey is the Device Class entry.","This function may take two input parameters:",{"@attributes":{"id":"p-0094","num":"0000"},"ul":{"@attributes":{"id":"ul0022","list-style":"none"},"li":{"@attributes":{"id":"ul0022-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0023","list-style":"none"},"li":["csSysKey: This may be a registry key root path under which the source platform's or Target VDisk's system information is stored (e.g., \u201cHKLM\\SYSTEM\\CurrentControlSet\\\u201d).","pNode: This may be a pointer to NETNODE that describes a target network component of which the Device Class registry entry is to be located.\n\nIf found, the function returns TRUE and fills in the csOldDeviceClassKey field of the target NETNODE to the parent key name. Otherwise, the function returns FALSE.\n"]}}}},"FindLastSubKey: In one aspect, this function FindLastSubKey may find the last subkey index under regKey. This function may take one input parameter:\n\n","AssignNewNetClassSubKey: In one aspect, a function AssignNewNet ClassSubKey may recursively assign the next NetClass subkey number to a to-be-injected network component and its upper nodes.","NetClass is a subkey under registry key","\u201cHKLM\\{_SYSTEM_}\\ControlSet00x\\Control\\Class\\<Net Device class>\u201d. Each functional network component registered to the OS is represented by a subkey under such key. Subkeys are arranged in 4-digits consecutive numeric strings (e.g., \u201c0000\u201d, \u201c0001\u201d, \u201c0002\u201d, . . . ). A new network component registered to the OS occupies the next number up subkey. A network component at a Source can be injected to a Target by copying its NetClass registry trees from the Source to a valid unused NetClass subkey in the Target. This function finds out the valid unused subkey to be used in Target.\n\nThis function may take two input parameters:\n\n","AssignNewBusSpecificID: In one aspect, this function AssignNewBusSpecificID may recursively assign newBusSpecificID to a to-be-injected network component and its upper nodes.","For example, in Windows OS, the Enum registry key contains the subkeys for specific hardware components a computer uses. The OS uses this information to allocate resources (e.g., IO addresses and interrupt numbers for the components).","Each controller bus type has its own subkey under the \u201cEnum\u201d key (e.g., PCI\u201d, \u201cROOT\u201d). The \u201cPCI\u201d subkey contains entries for the plug-and-play equipment on a peripheral component interconnect (PCI) bus. Each PCI equipment is represented by a registry key under the PCI subkey, bearing the manufacturer (or vendor) and product ID of the equipment. Information of a specific PCI equipment instance is stored under a subkey representing the bus locations. Hence, the full path for hardware equipment under the \u201cEnum\u201d registry key is constructed by its bus type (PCI), hardware ID, and bus specific ID. If a to-be-injected network component is a PCI device, its bus specific ID stays the same after it is moved to the Target because the component sits on the same PCI bus slot.\n\nThe \u201cROOT\u201d subkey contains entries for legacy, non plug-and-play hardware. Equipment instances under the \u201cROOT\u201d device subkey are arranged by 4-digits consecutive numeric string (e.g., \u201c0000\u201d, \u201c0001\u201d etc). Such numeric subkey string is its bus specific ID. If a to-be-injected network component is a ROOT device, it occupies a new bus specific ID bearing the next number up subkey in the Target.\n\nThis function may take two input parameters:\n\n","AssignNewDeviceClassKey: In one aspect, this function AssignNewDeviceClassKey may recursively assign the csNewDeviceClassKey value to a to-be-injected network component and its upper nodes.","If a target network component's csOldBusSpecificID is equal to csNewBusSpecificID, csNewDeviceClassKey value is the same as csOldDeviceClassKey.","Otherwise the \u201c#<csOldBusSpecificID>#\u201d token within the old csOldDeviceClassKey value is changed to \u201c#<csNewBusSpecificIC>#\u201d token, which becomes its csNewDeviceClassKey value.","This function may take one input parameter:",{"@attributes":{"id":"p-0101","num":"0000"},"ul":{"@attributes":{"id":"ul0030","list-style":"none"},"li":{"@attributes":{"id":"ul0030-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0031","list-style":"none"},"li":"pNode: This may be a pointer to a NETNODE whose csNewDeviceClassKey is to be set csOldBusSpecificID and csNewBusSpecificID of target NETNODE must have been set before calling this function.\n\nThis function returns TRUE if succeeds. csNewDeviceClassKey of target NETNODE is filled in.\n"}}}},"TallyNetworkDescriptionInstances: In one aspect, this function TallyNetworkDescriptionInstances tallies the number of Driver Description instances that will appear in a Target VDisk after injecting a network component and its upper nodes. This function stores the information in a string to pointer mapping list, m_NetworkInstanceList. During driver injection, information in m_NetworkInstanceList is used to update the \u201cDescriptions\u201d registry key under \u201c<System registry hive name>\\Class\\Network\\<Net Device class>\u201d registry key at Target.","This function may set up m_NetworkInstanceList to prepare for the update.","This function may take two input parameters:",{"@attributes":{"id":"p-0103","num":"0000"},"ul":{"@attributes":{"id":"ul0032","list-style":"none"},"li":{"@attributes":{"id":"ul0032-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0033","list-style":"none"},"li":["csSysKey: This may be a registry key root path under which a Target's system information is loaded (e.g., \u201cHKLM\\{_SYSTEM_}\\ControlSet00x\\\u201d). This function looks up registry under this key to determine the current number of instances for target network components.","pNode: This may be a pointer to a NETNODE describing network component to be injected."]}}}},"AssignNewInfPath: In one aspect, this function AssignNewInfPath may set the csNewInfPath field of a to-be-injected net node. This is the path where the OS would find the installation file for a target component after it is moved to the Target.","Windows OS stores all driver installation files under \u201cWindows \\inf\u201d folder of the system volume. Windows' native drivers bear a unique name that is different than others (e.g., netpsa.inf for a packet scheduler driver). Installation files provided by third party vendors will be renamed to, e.g., oemx.inf, where x is a unique number that exists in the current device.\n\nThe driver installation file for a network component from a third party vendor may bear a different oem.inf number after copying from a Source to a Target. This function finds out the last oem.inf number used in the Target, and assign the next number up for the driver installation file of a to-be-injected network component and its upper nodes.\n\nThis function may take three input parameters:\n\n","CopyInfFile: In one aspect, this function CopyInfFile may copy a driver installation file for a to-be-injected network component from a Source to a Target unless an inf file already exists in the Target. The inf file name at the Source is recorded in the csOldInfPath of a NETNODE structure. The inf file name to be used after copying to the Target is recorded in the csNewInfPath of a NETNODE structure.","This function may take three input parameters:",{"@attributes":{"id":"p-0107","num":"0000"},"ul":{"@attributes":{"id":"ul0036","list-style":"none"},"li":{"@attributes":{"id":"ul0036-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0037","list-style":"none"},"li":["pNode: This may be a pointer to a NETNODE describing a network component whose driver installation file is to be copied.","csSrcDir: This may be a root drive to copy a driver installation file from (e.g., \u201cc:\\\u201d).","csDstDir: This may be a root drive to copy a driver installation file to (e.g., \u201cf:\\\u201d)."]}}}},"CopyDriverFile: In one aspect, this function CopyDriverFile may copy a driver binary file for a to-be-injected network component from a Source to a Target unless the driver file already exists in the Target.","This function may take four input parameters:",{"@attributes":{"id":"p-0109","num":"0000"},"ul":{"@attributes":{"id":"ul0038","list-style":"none"},"li":{"@attributes":{"id":"ul0038-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0039","list-style":"none"},"li":["pNode: This may be a pointer to a NETNODE describing a network component whose driver file is to be copied.","csSrcDir: This may be a root drive to copy a driver file from (e.g., \u201cc:\\\u201d).","csDstDir: This may be a root drive to copy a driver file to (e.g., \u201cf:\\\u201d).","csSrcSysKey: This may be a registry key root path under which a Source Platform's system information is loaded (e.g., \u201cHKLM\\SYSTEM\\CurrentControlSet\\\u201d).\n\nThis function reads the \u201cImagePath\u201d registry value of a \u201cService\u201d key for a target component to find the driver file name and path.\n"]}}}},"MergeNetClassSubKeys: In one aspect, this function MergeNetClassSubKeys may merge the \u201ccsSrcSysKey\\Class\\<Net Device class>\u201d subkeys of the to-be-injected network component (and its uppers) to Target.","This function may perform the following:",{"@attributes":{"id":"p-0111","num":"0000"},"ul":{"@attributes":{"id":"ul0040","list-style":"none"},"li":{"@attributes":{"id":"ul0040-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0041","list-style":"none"},"li":["1. Copy registry tree \u201ccsSrcSysKey\\Control\\Class\\<Net Device class>\\<csOldNetClassSubKey>\u201d to \u201ccsDstSysKey\\Control\\Class\\<Net Device class>\\<csNewNetClassSubKey>\u201d","2. Change registry value \u201cInfPath\u201d from <csOldInfPath> to <csNewInfPath> under new registry key at Target\n\nThis function may take three input parameters:\n","pNode: This may be a pointer to a NETNODE describing a network component whose registry is to be merged.","csSrcSysKey: This may be a registry key root path under whose Source Platform's system information is loaded (e.g., \u201cHKLM\\SYSTEM\\CurrentControlSet\\\u201d).","csDstSysKey: This may be a registry key root path under which a Target's system information is loaded (e.g., \u201cHKLM\\{_SYSTEM_}\\ControlSet00x\\\u201d).\n\nThis function returns TRUE if succeeds, or FALSE otherwise.\n"]}}}},"MergeDeviceClassSubKeys: In one aspect, this function MergeDeviceClassSubKeys may merge the NDIS LAN class subkeys of the to-be-injected network component (and its uppers) from a Source to a Target.","This function may perform the following:",{"@attributes":{"id":"p-0113","num":"0000"},"ul":{"@attributes":{"id":"ul0042","list-style":"none"},"li":{"@attributes":{"id":"ul0042-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0043","list-style":"none"},"li":["1. Copy registry tree \u201ccsSrcSysKey\\Control\\DeviceClasses\\<NDIS LAN class>\\<csOldDeviceClassKey>\u201d to \u201ccsDstSysKey\\Control\\DeviceClasses\\<NDIS LAN class>\\<csNewDeviceClassKey>\u201d","2. if pNode->csOldBusSecificID !=pNode->csNewBusSpecificID, replace:\n        \n        ","pNode: This may be a pointer to a NETNODE describing a network component whose registry is to be merged.","csSrcSysKey: This may be a registry key root path under which a Source Platform's system information is loaded (e.g., \u201cHKLM\\SYSTEM\\CurrentControlSet\\\u201d).","csDstSysKey: This may be a registry key root path under which a Target's system information is loaded (e.g., \u201cHKLM\\{_SYSTEM_}\\ControlSet00x\\\u201d).\n\nThis function returns TRUE if succeeds, FALSE otherwise\n"]}}}},"MergeEnumSubKey: In one aspect, this function MergeEnumSubKey may merge the Enumsubkeys of the to-be-injected network component (and its uppers) from a Source to a Target.","This function may perform the following:",{"@attributes":{"id":"p-0115","num":"0000"},"ul":{"@attributes":{"id":"ul0045","list-style":"none"},"li":{"@attributes":{"id":"ul0045-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0046","list-style":"none"},"li":["1. Copy \u201cEnum\u201d registry key (value and all subkeys) from a Source to a Target. Source Enum subkey name is in csOldBusSpecificID. Target Enum subkey name is in csNewBusSpecificID.","2. If csOldNetClassSubKey !=csNewNetClassSubKey, update registry value \u201cDriver\u201d from \u201c<Net Device class>\\\\csOldOldClassSubKey\u201d to \u201c<Net Device class>\\\\csOldNewClassSubKey\u201d","3. If csOldBusSpecificID !=csNewBusSpecificID, update registry value \u201cDevice Parameters\\InstanceIndex\u201d from csOldBusSpecificID+1 to csNewBusSpecificID+1\n\nThis function may take three input parameters:\n","pNode: This may be a pointer to a NETNODE describing a network component whose registry is to be merged.","csSrcSysKey: This may be a registry key root path under which a Source Platform's system information is loaded (e.g., \u201cHKLM\\SYSTEM\\CurrentControlSet\\\u201d).","csDstSysKey: This may be a registry key root path under which a Target's system information is loaded (e.g., \u201cHKLM\\{_SYSTEM_}\\ControlSet00x\\\u201d).\n\nThis function returns TRUE if succeeds, or FALSE otherwise.\n"]}}}},"AddLinkage: In one aspect, this function AddLinkage may enumerate all \u201cservices\u201d registry keys at a Target. If a subkey's existing \u201clinkage\\bind\u201d, \u201clinkage\\Route\u201d and \u201clinkage\\Export\u201d values contain csRefGUID, this function constructs a similar string by replacing csRefGUID to csGUID of the to-be-injected network component, then adds a new string into the \u201clinkage\\bind\u201d, \u201clinkage\\Route\u201d and \u201clinkage\\Export\u201d registry values. This is to bind the new NIC and\/or network component to those services.","This function may take three input parameters:",{"@attributes":{"id":"p-0117","num":"0000"},"ul":{"@attributes":{"id":"ul0047","list-style":"none"},"li":{"@attributes":{"id":"ul0047-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0048","list-style":"none"},"li":["pNode: This may be a pointer to a NETNODE describing a network component, which is to be linked into existing network services in a Target.","csRefGUID: This may be a GUID of a reference NIC that has already been linked to appropriate network services in the Target.","csDstSysKey: This may be a registry key root path under which the Target's system information is loaded (e.g., \u201cHKLM\\{_SYSTEM_}\\ControlSet00x\\\u201d).\n\nThis function returns ERROR_SUCCESS if succeeds, or an error code if fails.\n"]}}}},"AddSvcInterfaces: In one aspect, this function AddSvcInterfaces may enumerate subkeys under \u201cservices\u201d registry keys at a Target. If the key name matches the csRefGUID value, this function constructs a similar key name for a target NIC by replacing csRefGUID to target NIC's GUID. This function then looks for this key from a Source. If found, the function copies the whole key from the Source to the Target","This function may take four input parameters:",{"@attributes":{"id":"p-0119","num":"0000"},"ul":{"@attributes":{"id":"ul0049","list-style":"none"},"li":{"@attributes":{"id":"ul0049-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0050","list-style":"none"},"li":["pNode: This may be a pointer to a NETNODE describing a network component, which is to be linked into existing network services in the Target.","csRefGUID: This may be a GUID of a reference NIC.","csSrcSysKey: This may be a registry key root path under which a Source Platform's system information is loaded (e.g., \u201cHKLM\\SYSTEM\\CurrentControlSet\\\u201d).","csDstSysKey: This may be a registry key root path under which a Target's system information is loaded (e.g., \u201cHKLM\\{_SYSTEM_}\\ControlSet00x\\\u201d).\n\nThis function returns ERROR_SUCCESS if succeeds, or an error code if fails.\n"]}}}},"AddRemoteAccessInterfaces: In one aspect, this function AddRemoteAccess Interfaces may add an interface to a Target's Remote Access service registry key to represent the new NIC. This function may perform the following:\n\n","Organization of Illustrations","Now referring to , in one aspect, the disclosure below provides, for example, a description relating to three stages of operations: a computer program building stage A, a driver injection stage B and a streaming stage C. In one aspect, the computer program building stage A is described, for example, with reference to  and . In one aspect, the driver injection stage B is described, for example, with reference to , , , , -, and -. In one aspect, the streaming stage C is described, for example, with reference to . The computer program building stage A may utilize two or more physical or virtual machines. The driver injection stage B may utilize one or more physical or virtual machines. The streaming stage C may utilize two or more physical or virtual machines. In one aspect, the machines utilized may be different among the three stages A, B and C. In another aspect, some of the machines utilized may be the same among stages B and C, or, possibly, among stages A, B and C.","Illustration of Process for Building Software Program for Driver Injection","In one aspect of the disclosure, a Driver Injection process involves injecting information of selected network components present in a Source Platform into a Target VDisk. By doing this, the operating system in the Target VDisk, when booted up on the Source Platform, will recognize the network component(s) present in the Source Platform, know where to find the driver binary for such component(s) and how to bind such component(s) into its network stack. The result is a functional chain of network drivers (network stack) capable of performing normal network activities as well as OS streaming.","An example of building a software program for performing these features is outlined below.\n\n","Illustration of Systems for Driver Injection",{"@attributes":{"id":"p-0127","num":"0227"},"figref":"FIG. 3"},"A computer network system  may include one ore more remote Source Platforms  in communication with a Target Platform  via a network . In one aspect, the Target Platform  is configured to allow remote sessions (e.g., remote desktop sessions) wherein users can access applications and files on the Target Platform  by logging onto the Target Platform  from a Source Platform . Such a connection may be established using any of several well-known techniques such as the Remote Desktop Protocol (RDP) on a Windows-based server.","By way of illustration and not limitation, a Source Platform  can represent a computer, a mobile phone, a laptop computer, a thin Source Platform, a personal digital assistant (PDA), a portable computing device, a virtual machine, or a suitable device with a processor. In one example, a Source Platform  is a smartphone (e.g., iPhone, Android phone, Blackberry, etc.). In certain configurations, a Source Platform  can represent an audio player, a game console, a camera, a camcorder, an audio device, a video device, a multimedia device, or a device capable of supporting a connection to a remote Target Platform. In one example, a Source Platform  can be mobile. In another example, a Source Platform  can be stationary. In one example, a Source Platform  may be a device having at least a processor and memory, where the total amount of memory of the Source Platform  could be less than the total amount of memory in a Target Platform . In one example, a Source Platform  does not have a hard disk. In one aspect, a Source Platform  has a display smaller than a display supported by a Target Platform . In one aspect, a Source Platform may include one or more Source Platforms. In one aspect, each of the Source Platforms  may be the same (e.g., the same system configurations and the same network component configurations) or different (e.g., different system configurations or different network component configuration).","In one aspect, a Target Platform  may represent a computer, a laptop computer, a computing device, a virtual machine (e.g., VMware\u00ae Virtual Machine), a desktop session (e.g., Microsoft Terminal Server), a published application (e.g., Microsoft Terminal Server) or a suitable device with a processor. In one aspect, a Target Platform  can be stationary. In another aspect, a Target Platform  can be mobile. In certain configurations, a Target Platform  may be any device that can represent a Source Platform. In one aspect, a Target Platform  may include one or more Target Platforms.","In one example, a first device is remote to a second device when the first device is not directly connected to the second device. In one example, a first remote device may be connected to a second device over a communication network such as a Local Area Network (LAN), a Wide Area Network (WAN), and\/or other network.","When a Source Platform  and a Target Platform  are remote with respect to each other, a Source Platform  may connect to a Target Platform  over a network , for example, via a modem connection, a LAN connection including the Ethernet or a broadband WAN connection including DSL, Cable, T1, T3, Fiber Optics, Wi-Fi, or a mobile network connection including GSM, GPRS, 3G, WiMax or other network connection. A network  can be a LAN network, a WAN network, a wireless network, the Internet, an intranet or other network. A network  may include one or more routers for routing data between Source Platforms and\/or Target Platforms. A remote device (e.g., Source Platform, Target Platform) on a network may be addressed by a corresponding network address, such as, but not limited to, an Internet protocol (IP) address, an Internet name, a Windows Internet name service (WINS) name, a domain name or other system name. These illustrate some examples as to how one device may be remote to another device. However, the subject technology is not limited to these examples.","In one aspect of the disclosure, a \u201cSource Platform\u201d may be sometimes referred to as a source machine, a source, a client, a client device or vice versa. Similarly, a \u201cTarget Platform\u201d may be sometimes referred to as a target machine, a server or vice versa.","In one aspect, the terms \u201clocal\u201d and \u201cremote\u201d are relative terms, and a Source Platform may be referred to as a local Source Platform or a remote Source Platform, depending on whether a Source Platform is described from the Source Platform side or from the Target Platform side, respectively. Similarly, a Target Platform may be referred to as a local Target Platform or a remote Target Platform, depending on whether the Target Platform is described from the Target Platform side or from a Source Platform side, respectively.","In one aspect, devices placed on a Source Platform side (e.g., devices connected directly to a Source Platform(s) or to one another using wires or wirelessly) may be referred to as local devices with respect to a Source Platform and remote devices with respect to a Target Platform. Similarly, devices placed on a Target Platform side (e.g., devices connected directly to a Target Platform(s) or to one another using wires or wirelessly) may be referred to as local devices with respect to a Target Platform and remote devices with respect to a Source Platform.",{"@attributes":{"id":"p-0136","num":"0236"},"figref":"FIG. 4","b":["400","400","402","402","406","409","404","402","409","406","402"]},"The processing system  may include a general-purpose processor or a specific-purpose processor for executing instructions and may further include a machine-readable medium , such as a volatile or non-volatile memory, for storing data and\/or instructions for software programs. The instructions, which may be stored in a machine-readable medium  and\/or , may be executed by the processing system  to control and manage access to the various networks, as well as provide other communication and processing functions. The instructions may also include instructions executed by the processing system  for various user interface devices, such as a display  and a keypad . The processing system  may include an input port  and an output port . Each of the input port  and the output port  may include one or more ports. The input port  and the output port  may be the same port (e.g., a bi-directional port) or may be different ports.","The processing system  may be implemented using software, hardware, or a combination of both. By way of example, the processing system  may be implemented with one or more processors. A processor may be a general-purpose microprocessor, a microcontroller, a Digital Signal Processor (DSP), an Application Specific Integrated Circuit (ASIC), a Field Programmable Gate Array (FPGA), a Programmable Logic Device (PLD), a controller, a state machine, gated logic, discrete hardware components, or any other suitable device that can perform calculations or other manipulations of information.","A machine-readable medium can be one or more machine-readable media. Software shall be construed broadly to mean instructions, data, or any combination thereof, whether referred to as software, firmware, middleware, microcode, hardware description language, or otherwise. Instructions may include code (e.g., in source code format, binary code format, executable code format, or any other suitable format of code).","Machine-readable media (e.g., ) may include storage integrated into a processing system, such as might be the case with an ASIC. Machine-readable media (e.g., ) may also include storage external to a processing system, such as a Random Access Memory (RAM), a flash memory, a Read Only Memory (ROM), a Programmable Read-Only Memory (PROM), an Erasable PROM (EPROM), registers, a hard disk, a removable disk, a CD-ROM, a DVD, or any other suitable storage device. In addition, machine-readable media may include a transmission line or a carrier wave that encodes a data signal. Those skilled in the art will recognize how best to implement the described functionality for the processing system . According to one aspect of the disclosure, a machine-readable medium is a computer-readable medium encoded or stored with instructions and is a computing element, which defines structural and functional interrelationships between the instructions and the rest of the system, which permit the instructions' functionality to be realized. In one aspect, a machine-readable medium is a machine-readable storage medium. Instructions may be executable, for example, by a machine (e.g., Source Platform or Target Platform) or by a processing system of a Source Platform or Target Platform. Instructions can be, for example, a computer program including code.","Interfaces or interface cards  may be any type of interface and may reside between any of the components shown in . An interface  may also be, for example, an interface to the outside world (e.g., a network interface card or an Internet network interface card). There may be one or more interfaces or interface cards . A transceiver block  may represent one or more transceivers, and each transceiver may include a receiver  and a transmitter . A functionality implemented in a processing system  may be implemented in a portion of a receiver , a portion of a transmitter , a portion of a machine-readable medium , a portion of a display , a portion of a keypad , or a portion of an interface , and vice versa. In one aspect, machine may include only some or all of the elements shown in . A machine may include other elements not shown in . A machine may include more than one of the same elements.","Illustration of Method for Driver Injection","An example of a method for performing driver injection from one or more Source Platforms into a Target VDisk is illustrated below. In one aspect, the method may be performed by a computer program generated by the operation  described under the subheading \u201cIllustration of Process for Building Software Program for Driver Injection\u201d (e.g., a computer program called VDiskImageCreation.exe written in C++ programming language). In this example, the method utilizes Windows XP. However, the subject technology is not limited to programs written in C++ or the Windows OS. In one aspect, the subject technology may be practiced utilizing other tools, programming languages or operating systems.","Referring to , , , A, B, , ,  and , an example of the method is illustrated below, and the method may utilize some or all of the operations described below.\n\n","Illustration of Checking NIC Compatibility","An example of a method for determining whether the network interface card(s) (NIC(s)) of the Source Platform are compatible with the Target VDisk is illustrated below. An operation  for checking the NIC compatibility is shown in . The operation  represents, for example, the operation  in . In one example, this operation  is called the CheckNICCompatibility function, and it may perform some or all of the following operations:\n\n","The foregoing operations 1 and 2 select NIC(s) from a Source Platform to inject them into a Target VDisk by detecting the NIC(s) that are currently bound to the OS streaming driver at the Source Platform. There are, however, other methods of selecting NIC(s). For example, (i) prompt a user to select one or more NIC(s) present in the Source Platform, (ii) select the NIC(s) of specific characteristics (e.g., all Ethernet NICs), or (iii) select all NIC(s) in the Source Platform regardless of their characteristics. After injecting the selected NICs' driver\/configuration from the Source Platform to the Target VDisk using the methods described in this disclosure, add an OS Streaming driver to bind to the newly injected NIC(s) at the Target VDisk. This can produce a Target VDisk that is compatible and streamable to a Source Platform.","In one aspect, the driver injection stage B can perform properly without having a streaming driver in a Source Platform, Target VDisk or a Development Machine. If a Target VDisk does not have a streaming driver, then a streaming driver can be added to (or copied onto) the Target VDisk and be made to bind to appropriate network component(s) on the Target VDisk before streaming the Target VDisk to a Source Platform (e.g., before the streaming operation  in ).","Illustration of Performing Network Interface Driver Injection","An example of a method for performing network interface driver injection is illustrated below. An operation  for performing network interface driver injection if the network interface card(s) are not compatible with the Target VDisk is shown in . The operation  represents, for example, the operation  in . In one example, this operation  is called the InjectWSMNIC function, and it may perform some or all of the following operations. This operation is illustrated below with reference to , , , , , A and B.\n\n","Detailed Illustration of Performing Network Interface Driver Injection","A detailed example of a method for performing network interface driver injection, when the network interface card(s) are not compatible with the Target VDisk, is illustrated below with reference to . The method described with reference to  may represent a more detailed description of the method described with reference to .","In one aspect of the disclosure, the method described with reference to  and the method described with reference to  have the following exemplary relationship.\n\n","In this example, the method provides a more detailed description of the InjectWSMNIC function (see, e.g.,  in ,  in ,  in ) when used on a Source Platform (e.g.,  in ,  in ) utilizing a Windows OS. Now referring to FIGS. A and -, the method may perform some or all of the following operations:\n\n","Illustration of Machine-Readable Medium for Driver Injection and Streaming","The subject technology is illustrated, for example, according to various aspects described below. These are provided as examples, and do not limit the subject technology. The instructions and code for some aspects of the subject technology below are presented, for example, with reference to . The instructions and code for other aspects can be presented in a similar manner.","A machine-readable storage medium (e.g.,  in , or ,  in ) encoded with instructions (e.g.,  in ) executable by a processing system (e.g.,  in ) to perform a method for providing network driver injection into a target image (e.g.,  in ) to transform the target image to be compatible with one or more source machines. The instructions comprising code for: facilitating access to a source system registry file of a source machine (e.g.,  in ), facilitating access to a target system registry file of the target image, without copying the target image (e.g.,  in ), wherein the target image comprises an operating system, determining whether one or more source network interface cards of the source machine are compatible with the target image (e.g.,  in ), and if the one or more source network interface cards are not compatible with the target image, performing network interface driver injection (e.g.,  in ). The operation of performing network interface driver injection comprises: determining one or more source network components associated with the one or more source network interface cards (e.g., -A in FIG. ),determining source network configuration of the one or more source network components (e.g., -B in ), determining target network configuration of one or more target network components of the target image (e.g., -C in ), determining whether the source network configuration conflicts with the target network configuration (e.g., -D in ), if the source network configuration conflicts with the target network configuration, adjusting the source network configuration so that the source network configuration does not conflict with the target network configuration (e.g., -E in ), and injecting, to the target system registry file, the source network configuration of the one or more source network components (e.g., -F in ).","The instructions may further comprise code for facilitating access to one or more files associated with the one or more source network components of the source machine, wherein the method is for facilitating operating system streaming over a network (e.g.,  in ). The operation of facilitating access to a target system registry file of the target image, without copying the target image, comprises: facilitating access to the target system registry file of the target image, without copying the target image onto a development machine, and wherein the operation of facilitating access to a source system registry file of a source machine, the operation of facilitating access to a target system registry file of the target image, the operation of determining, and the operation of performing network interface driver injection are to be performed by the development machine.","The instructions may further comprise code for: selecting at least one of the one or more target network components as a reference network component; determining a binding relationship between the reference network component and one or more network services for the target image; and establishing a binding relationship between at least one of the one or more source network components and the one or more network services.","The instructions may further comprise code for: determining whether an operating system of the source machine is compatible with an operating system of the target image and determining whether a hardware abstraction layer for the target image is lower than, or the same as, a hardware abstraction layer of the source machine. If the operating system of the source machine is compatible with the operating system of the target image and if the hardware abstraction layer for the target image is lower than, or the same as, the hardware abstraction layer of the source machine, performing the following operations: the operation of determining whether one or more source network interface cards of the source machine are compatible with the target image and if the one or more source network interface cards are not compatible with the target image, the operation of performing network interface driver injection.","The operation of performing network interface driver injection may further comprise facilitating copying of one or more files associated with the one or more source network components of the source machine onto the target image, wherein the target image is on a target machine, wherein the operation of determining one or more source network components associated with the one or more source network interface cards is to be performed, by a development machine, based solely on the source system registry file of the source machine, wherein the operation of determining source network configuration of the one or more source network components is to be performed, by the development machine, based on the source system registry file of the source machine and based on the one or more files associated with the one or more network components of the source machine, and wherein the operation of determining target network configuration of one or more target network components of the target image is to be performed, by the development machine, based on the target system registry file of the target image and based on one or more files associated with the one or more target network components of the target image.","The operation of facilitating access to a target system registry file of the target image, without copying the target image, may comprise facilitating mounting of the target image as a drive volume on a development machine, without copying the entire target image onto the development machine; and loading the target system registry file to a registry of the development machine, wherein the instructions further comprise code for: unloading the target system registry file from the registry of the development machine, after the operation of performing network interface driver injection; and facilitating unmounting of the target image from the development machine.","The instructions may further comprise code for facilitating streaming of the target image from a target machine to the source machine over a network.","The operation of facilitating access to a target system registry file of the target image, without copying the target image, may comprise facilitating copying, onto a development machine, of the target system registry file of the target image, without copying the entire target image onto the development machine and loading the target system registry file to a registry of the development machine. The instructions further may comprise code for: unloading the target system registry file from the registry of the development machine, after the operation of performing network interface driver injection and facilitating removal of the target system registry file from the development machine.","According to some aspects, the target image resides on a target machine, and the source machine is located remotely from the target machine over a network, wherein the one or more source network components comprises at least a network interface card driver and an operating system streaming driver, and wherein the target image is a virtual disk image.","According to some aspects, the operation of determining whether one or more source network interface cards of the source machine are compatible with the target image, comprises: determining one or more source network interface card drivers bound to one or more source operating system streaming drivers for the source machine; determining one or more target network interface card drivers bound to one or more target operating system streaming drivers for the target image; determining whether the one or more source network interface cards of the source machine are the same as the one or more target network interface cards for the target image, wherein the operation of determining whether one or more source network interface cards of the source machine are compatible with the target image, is to be performed based on the source system registry file and the target system registry file. The operation of determining whether the one or more source network interface cards of the source machine are the same as the one or more target network interface cards for the target image, may comprise determining whether a first one of the one or more source network interface cards and a first one of the one or more target network interface cards are from the same manufacturer, have the same model, have the same revision, and are for the same bus slot.","According to some aspects, the operation of determining one or more source network components associated with the one or more source network interface cards, comprises: determining an instance of a first source intermediate network driver bound to an upper edge of an instance of a source network interface card driver for one of the one or more source network interface cards and determining an instance of a second source intermediate network driver bound to an upper edge of the instance of the first source intermediate network driver. The one or more source network components may comprise the instance of the source network interface card driver, the instance of the first source intermediate network driver, and the instance of the second source intermediate network driver. The operation of determining source network configuration of the one or more source network components, may comprise determining, based on the source system registry file, a driver installation file name and location, a driver binary file name and location, a windows services name, and a global unique identifier, for each of the one or more source network components. The operation of, if the source network configuration conflicts with the target network configuration, adjusting the source network configuration, may comprise changing an installation file name, if a conflict exists with the installation file name; changing an instance index value, if a conflict exists with the instance index value; and determining instance numbers of the one or more source network components.","According to some aspects, the operation of performing network interface driver injection, further comprises: facilitating copying of one or more files associated with the one or more source network components of the source machine onto the target image, wherein the target image is on a target machine, wherein the operation of facilitating copying of one or more files, comprises: facilitating copying of one or more driver installation files associated with the one or more source network components of the source machine onto the target image; and facilitating copying of one or more driver binary files associated with the one or more source network components of the source machine onto the target image, wherein the operation of injecting, to the target system registry file, the source network configuration of the one or more source network components, comprises: facilitating copying of registry values of the source network configuration of the one or more source network components into the target system registry file; and updating registry values of the target system registry file.","According to some aspects, the development machine is the source machine.","According to some aspects, the operation of facilitating access to one or more files associated with the one or more source network components of the source machine, comprises: facilitating access to the one or more files associated with the one or more source network components of the source machine, without copying the one or more files onto the development machine.","According to some aspects, the operation of determining whether one or more source network interface cards of the source machine are compatible with the target image, comprises: facilitating selecting of the one or more source network interface cards of the source machine; determining whether the one or more source network interface cards of the source machine are the same as the one or more target network interface cards for the target image, wherein the operation of determining whether one or more source network interface cards of the source machine are compatible with the target image, is to be performed based on the source system registry file and the target system registry file, and wherein the operation of determining whether the one or more source network interface cards of the source machine are the same as the one or more target network interface cards for the target image, comprises: determining whether a first one of the one or more source network interface cards and a first one of the one or more target network interface cards are from the same manufacturer, have the same model, have the same revision, and are for the same bus slot.","Illustration of Method for Driver Injection and Streaming","The subject technology is illustrated, for example, according to various aspects described below. These are provided as examples, and do not limit the subject technology. The operations of the method for some aspects of the subject technology below are presented, for example, with reference to . The operations of the methods for the other aspects can be presented in a similar manner.","Some aspects of the subject technology relate to a method (e.g., ) for providing network driver injection into a target image (e.g.,  in ) to transform the target image to be compatible with one or more source machines. The method may comprise various operations (e.g., , , , -A, -B, -C, -D, -E, and -F in ) similar to those described with respect to .","The method may comprise other operations similar to those described in the foregoing paragraphs in connection with .","In one aspect, all of the operations described under the above subheading \u201cIllustration of Method for Driver Injection and Streaming\u201d are performed by the development machine (or the processing system of the development machine). In another aspect, at least some of the operations described under the above subheading are performed by the development machine (or the processing system of the development machine). A development machine may be a source machine or another machine.","Illustration of Apparatus for Driver Injection and Streaming","The subject technology is illustrated, for example, according to various aspects described below. These are provided as examples, and do not limit the subject technology. The instructions and code for aspects below are presented, for example, with reference to . The instructions and code for the other aspects can be presented in a similar manner.","Some aspects of the subject technology relate to an apparatus (e.g.,  in ), comprising: a processing system (e.g.,  in  or ); and a machine-readable storage medium (e.g.,  in ) encoded with instructions (e.g.,  in ) executable by the processing system, wherein the instructions comprise code for performing various operations (e.g., , , , -A, -B, -C, -D, -E, and -F in ) similar to those described with respect to .","The instructions may comprise code for other operations similar to those described in the foregoing paragraphs in connection with .","Illustration of Means for Driver Injection and Streaming","The subject technology is illustrated, for example, according to various aspects described below. These are provided as examples, and do not limit the subject technology. The first aspect below is presented, for example, with reference to . The other aspects can be presented in a similar manner.","The \u201cmeans\u201d described below may be implemented, for example, as modules as shown in . Modules may be implemented as electronic hardware, computer software, or combinations of both. Software modules may include computer program subroutines, functions or other software components that may be encoded onto a machine-readable medium or a machine-readable storage medium. Software modules may be executable by a processing system. Hardware modules may be implemented using one or more processors, one or more microcontrollers, one or more controllers, one or more Digital Signal Processors (DSPs), one or more Application Specific Integrated Circuits (ASICs), one or more Field Programmable Gate Arrays (FPGAs), one or more Programmable Logic Devices (PLDs), one or more state machines, one or more gated logic, one or more discrete hardware components, or any other suitable device(s) that can perform calculations or other manipulations of information. A hardware module may be implemented on one device or on multiple devices. Multiple hardware modules may be implemented on one device or on multiple devices.","Various aspects of the subject technology relate to an apparatus (e.g.,  in ), comprising: means for performing various operations (e.g., , , , , -A, -B, -C, -D, -E, and -F in ) similar to those described with respect to .","The apparatus may comprise means for performing other operations similar to those described in the foregoing paragraphs in connection with .","Illustration of Method of Building a Computer Program","The subject technology is illustrated, for example, according to various aspects described below. These are provided as examples, and do not limit the subject technology. The operations of the method for the first aspects below are presented, for example, with reference to . The operations of the methods for the other aspects can be presented in a similar manner.","Various aspects of the subject technology are related to a method (e.g.,  in ) of building a computer program for providing network driver injection into a target image (e.g.,  in ) to transform the target image to be compatible with one or more computing machines, for facilitating operating system streaming over a network (e.g.,  in ), the method comprising: selecting a first computing machine and a second computing machine (e.g.,  in ), wherein the first computing machine comprises a first network interface card, the second computing machine comprises a second network interface card, wherein configuration of the second network interface card is different from configuration of the first network interface card; building a first virtual disk image of the first computing machine (e.g.,  in ); building a second virtual disk image that is compatible with the first computing machine and the second computing machine (e.g.,  in ); booting the first computing machine using the first virtual disk image (e.g.,  in ); extracting first system registry information of the first computing machine after booting the first computing machine using the first virtual disk image, the first system registry information comprising configuration values for the first network interface card based on the first virtual disk image (e.g.,  in ); booting the first computing machine using the second virtual disk image (e.g.,  in ); extracting second system registry information of the first computing machine after booting the first computing machine using the second virtual disk image, the second system registry information comprising configuration values for the first network interface card and the second network interface card based on the second virtual disk image; (e.g.,  in ); determining network driver injection components based on differences between the first system registry information and the second system registry information and based on registries that do not affect network functionalities (e.g.,  in ); injecting the network driver injection components into the first virtual disk image (e.g.,  in ); and producing the computer program based on the network driver injection components (e.g.,  in ).","According to one aspect, the method further comprises determining a registry injection pattern applicable to one or more other computing machines, before the operation of producing the computer program; and encoding the computer program onto a machine-readable storage medium, wherein the operation of producing the computer program based on the network driver injection components is based further on the registry injection pattern.","According to one aspect, the network driver injection components comprise registries and one or more files associated with network components of the second computing machine, wherein the operation of injecting network driver injection components into the first virtual disk image, comprises: injecting the registries of the network driver injection components into the first virtual disk image; injecting the one or more files associated with the network components into the first virtual disk image, wherein the operation of injecting the one or more files, comprises: injecting one or more driver installation files associated with the network components into the first virtual disk image; and injecting one or more driver binary files associated with the network components into the first virtual disk image.","According to one aspect, the configurations of the first and second network interface cards are different in at least one of the following attributes: a network interface card manufacturer, a network interface card model, a network interface card revision, or a bus slot for a network interface card.","According to one aspect, the operation of determining network driver injection components, comprises: determining a first set of registries, which is obtained from differences between registries of the first system registry information and registries of the second system registry information; and determining a second set of registries, obtained by filtering out a third set of registries from the a first set of registries, wherein the third set of registries comprises registries that do not affect network functionalities, wherein the network driver injection components comprise the second set of registries, wherein the operation of determining a second set of registries, comprises: determining a fourth set of registries by removing one or more registries of the first set of registries, from the registries of the second system registry information; booting the first computing machine using the second virtual disk image with the fourth set of registries without the one or more registries; booting the second computing machine using the second virtual disk image with the fourth set of registries without the one or more registries; determining whether the second virtual disk image having the fourth set of registries without the one or more registries is compatible with the first computing machine; determining whether the second virtual disk image having the fourth set of registries without the one or more registries is compatible with the second computing machine; and if the second virtual disk image having the fourth set of registries without the one or more registries is compatible with the first computing machine and if the second virtual disk image having the fourth set of registries without the one or more registries is compatible with the second computing machine, excluding the one or more registries from the second set of registries, and wherein the method further comprises: booting the first computing machine using the first virtual disk image with the network driver injection components; booting the second computing machine using the first virtual disk image with the network driver injection components; and determining whether the first virtual disk image with the network driver injection components is compatible with the first computing machine and the second computing machine.","The disclosure provided under this subheading is simply one exemplary scenario and does not limit the subject technology.","In one approach, a single virtual disk image may be streamed to multiple client devices as long as the devices have similar hardware characteristics. In this example, the mother board, the Preboot eXecution Environment (PXE) capable network card and the video card need to be the same.","According to another approach, a technique can facilitate creation of a \u201cgolden\u201d virtual disk image to support multiple heterogeneous client platforms in which the mother board, network card or video card is different. The process involves first creating a hard disk OS installation containing all drivers for all source platforms, then installing a streaming component such as the WSM Client software, and finally capturing a snapshot of the OS installation to a virtual disk image.","In accordance with an aspect of the subject technology, the driver injection feature of the subject technology greatly shortens the time and procedures involved in creating a golden image. The disclosure in this subheading describes how to use driver injection to create a golden image to support client devices (e.g., Source Platforms) with heterogeneous hardware characteristics for one exemplary scenario.",{"@attributes":{"id":"p-0197","num":"0000"},"ul":{"@attributes":{"id":"ul0080","list-style":"none"},"li":{"@attributes":{"id":"ul0080-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0081","list-style":"none"},"li":["1. In one aspect, each client platform needs to have a reference device with a PXE enabled network adapter and a hard disk available.","2. In one aspect, each reference device needs to have a Windows OS installed in its hard disk.","3. In one aspect, the Windows OS version installed on all reference devices needs to bear the same major version number. For example, Windows 2000, 2003 and XP have the same major Windows version number. Vista and Windows7 have another major Windows version number. Hence, the reference devices cannot have a mix between XP and Windows 7.","4. In one aspect, the final golden virtual disk image will have the lowest hardware abstraction layer (HAL) among all supported platforms. For example, if the native HAL for three source platforms are:\n        \n        ","5. In one aspect, depending on the source platforms' characteristics, the presence of a PS\/2 mouse and a keyboard interface on the source platforms may be mandatory.","6. In one aspect, some wireless network adapters may need to be disabled on the golden VDisk.","7. In one aspect, Windows XP OS is used.","8. In one aspect, Wyse's streaming manager called WSM Server release 3.5 or above is used for the server or a target platform.","9. In one aspect, Wyse's streaming manager called WSM Client release 3.5 or above is installed on the source platforms' hard disks."]}}}},"In one aspect, the driver injection to prepare a golden virtual disk for streaming may involve some or all of the following steps:\n\n","Since many of the steps are standard operations, the disclosure under this subheading is focused on discussing the steps that are specific to the driver injection feature.","Selection of First Platform","The driver injection process starts with a VDisk for the first platform. In one aspect, the first platform needs to bear the lowest HAL among all source platforms. For example, if the native HAL for three source platforms are:\n\n","This \u201cbase\u201d VDisk can be a new disk created from the first platform, or any existing VDisk streamable to the first platform.","Although it is suggested to start with a base VDisk that has latest WSM Client, this is not a requirement. One can use a VDisk created from older streaming manager releases.","The base VDisk may contain any number of partitions.","Cache Mode for Base VDisk","During the driver injection process, the base VDisk may be configured to private, persistent or volatile cache mode. However, using different cache modes has different implications:\n\n","In one aspect, to inject an NIC driver of a device to a VDisk, the following exemplary steps may be utilized:\n\n","Now the VDisk is ready to stream to the source platform.","Installing Additional Drivers","Once the source platform successfully boots from the \u201cnew\u201d VDisk, Windows's hardware discovery wizard will prompt to install drivers for hardware found in the source platform. The drivers and corresponding .inf files can usually be found in the local hard disk.","Occasionally, the local hard disk volume is not assigned a driver letter. If this is the case, go to My Computer->Manage->Disk Manager, right click on local hard disk, select Change driver letter and Path, then Add a drive letter.","One can point the hardware installation wizard to the local disk drive (<local disk>:\\windows\\inf), which contains all the driver inf files. Driver binaries are usually under <local disk>:\\windows\\system32\\drivers, <local disk>:\\windows\\system32, or <local disk>:\\windows folders.","It is found that on some platforms, installing video and audio drivers from binaries found in local disk causes the display or audio hardware to malfunction. It is recommended that one install these drivers from complete driver installation packages provided by the hardware vendor if possible.","In order to install drivers for newly discovered hardware, one may need to use a keyboard and\/or a mouse to select some menus from the hardware discovery wizard. If the Universal Serial Bus (USB) controller driver is not already installed on the VDisk, one will not be able to use the USB keyboard and mouse. Hence, it is recommended that a PS2 keyboard and mouse be attached to the platform when it first boots from the new VDisk. Once the USB controller driver is installed, the USB keyboard mouse can be used in subsequent boots. For a platform that does not have a PS2 keyboard\/mouse interface, one may not be able to proceed with drivers installations.","In one aspect, it is recommend that a user does not try to upgrade the driver for the PXE enabled Ethernet network adapter. Doing so can cause a VDisk to hang. A driver upgrade for the PXE enabled Ethernet network adapter needs to be done before driver injection when the platform is booted from a hard disk.","Installing some wireless network drivers may cause network stack re-bind, which in turn may cause a VDisk to hang. If this is the case, one may need to roll back the driver injection changes by deleting the cache file for the target device, re-injecting the NIC driver to the VDisk, and disabling the wireless network adapter from the new VDisk. If wireless network adapter functionality is needed, one may need to use a traditional tool to create a golden VDisk.","Once all drivers are installed, reboot the device once to the new VDisk to confirm proper operation.","Committing Driver Injection changes to VDisk","In one aspect, if the VDisk is in persistent or volatile cache mode, once the VDisk is confirmed to work properly on the source platform, the changes made on the cache file may need to be committed to the VDisk itself. This can be done by merging the cache file for the source platform into the VDisk file.","When a VDisk is created through a normal image capturing process, it can be streamed to multiple devices bearing the same hardware characteristics as the original device from where the VDisk was captured. However, in some cases, even if a device looks the same (e.g., the same model from the same manufacturer) as the original device, streaming may fail. This is because the network card between the two devices may have slightly different revision number, or may be located on a different PCI slot. These subtle differences between the network cards can cause the VDisk to fail in booting. When attempting to stream a device from an incompatible VDisk, a device typically hangs at Windows boot up progress bar.","In the past, a user did not realize the incompatibility until actually streaming the VDisk to a target device. WSM 3.5 introduces a tool to detect compatibility between an existing VDisk and a device. This tool may be especially useful in large streaming deployment where thousands of client devices from the same manufacturing model are used. It is often impractical to find out that a VDisk is not compatible with some client devices at branch offices after the VDisk has been qualified and deployed from the headquarters.","This tool can be run on a device without installing the streaming software WSM Client. It may take one input parameter: a path to the system hive file of the VDisk. It generates a log file showing the compatibility check result. Below describes some typical steps to use this tool in a large scale streaming deployment scenario:","In one aspect, at the headquarters, perform the following:\n\n","In one aspect, at the branch offices, perform the following on each client device:\n\n","Below are last few lines from some sample log file:",{"@attributes":{"id":"p-0222","num":"0449"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"sample 1: device and VDisk are compatible"},{"entry":"04072010 [19:00:38:312] [ 244] INFO: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"},{"entry":"04072010 [19:00:38:312] [ 244] INFO: COMPUTER NAME : mlam-c.wsm3.local"},{"entry":"04072010 [19:00:38:312] [ 244] INFO: OSMCheckCompat SUCCEEDED. Incompatible"},{"entry":"NIC count : 0"},{"entry":"04072010 [19:00:38:312] [ 244] INFO: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"},{"entry":"OR"},{"entry":"sample 2: device and VDisk are incompatible. There is one NIC to be injected to VDisk"},{"entry":"04072010 [19:00:01:812] [ 264] INFO: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"},{"entry":"04072010 [19:00:01:812] [ 264] INFO: COMPUTER NAME : mlam-c.wsm3.local"},{"entry":"04072010 [19:00:01:812] [ 264] INFO: OSMCheckCompat SUCCEEDED. Incompatible"},{"entry":"NIC count : 1 >>"},{"entry":"04072010 [19:00:01:812] [ 264] INFO: VIA Velocity Family Gigabit Ethernet Adapter"},{"entry":"04072010 [19:00:01:812] [ 264] INFO:"},{"entry":"Enum\\PCI\\VEN_1106&DEV_3119&SUBSYS_01101106&REV_11\\4&eedbbf7&0&1898"},{"entry":"04072010 [19:00:01:812] [ 264] INFO: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"},{"entry":"OR"},{"entry":"sample 3: device and VDisk are incompatible. VDisk cannot be used on such device"},{"entry":"04072010 [19:10:51:046] [1604] INFO: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"},{"entry":"04072010 [19:10:51:046] [1604] INFO: COMPUTER NAME : mlam-c.wsm3.local"},{"entry":"04072010 [19:10:51:046] [1604] ERROR: OSMCheckCompat FAILED"},{"entry":"04072010 [19:10:51:046] [1604] ERROR: Mismatch OS Version between current platform"},{"entry":"and VDisk"},{"entry":"04072010 [19:10:51:046] [1604] INFO: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In one aspect, at the Headquarters, the following may be performed:\n\n",{"@attributes":{"id":"p-0224","num":"0453"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"OSMCheckCompat.exe <VDisk system registry file name> [\/l<log file name>] [\/v<log level"},{"entry":"in hex>] [\/?]"},{"entry":"where \/? - display usage;"},{"entry":"\u2003\u2003\u2003<log level in hex> follows bit mask defined in OSMLogging.h, i.e."},{"entry":"\u2003\u2003\u2003\u2003\u2002ERRORS_ONLY = 0x01;"},{"entry":"\u2003\u2003\u2003\u2003\u2002WARNINGS_ONLY = 0x02;"},{"entry":"\u2003\u2003\u2003\u2003\u2002DEBUG_ONLY = 0x04;"},{"entry":"\u2003\u2003\u2003\u2003\u2002VERBOSE_ONLY = 0x08;"},{"entry":"\u2003\u2003\u2003\u2003\u2002INFO_ONLY \u2003\u2003\u2003\u2003= 0x10;"},{"entry":"if no path is specified for system registry file or log file, the path from where program"},{"entry":"currently runs will be used"},{"entry":"e.g., OSMCheckCompat.exe c:\\temp\\system \/lcheckcompat.log \/l0x17"},{"entry":"above command checks compatibility between current device and the c:\\temp\\system registry,"},{"entry":"it"},{"entry":"outputs INFO+ERRORS+WARNINGS+DEBUG messages to checkcompat.log at current"},{"entry":"folder"},{"entry":"Program exits with code \u22121 if fails"},{"entry":"\u2003\u2003\u2003with code 0 if all NICs are compatible with VDisk"},{"entry":"\u2003\u2003\u2003with code > 0 where code is the number of NIC(s) that is not compatible with"},{"entry":"\u2003\u2003\u2003VDisk"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":[{},{}],"ul":{"@attributes":{"id":"ul0097","list-style":"none"},"li":{"@attributes":{"id":"ul0097-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0098","list-style":"none"},"li":["1. On a device that has any version of WSM Client installed, install WSM Client Utilities version 3.5 or above.","2. Use VDiskImageMap.exe to map to the VDisk against which compatibility is to be checked.","3. From the command window, run OSMCheckCompat.exe, and provide the full path to the system hive file of Target VDisk. (e.g., \u201cc:\\program files\\Wyse\\WSM Client Utilities\\OSMCheckCompat.exe e: \\Windows\\System32\\Config\\system\u201d)"]}}}},"Closing Subheading","Those of skill in the art would appreciate that the various illustrative blocks, modules, elements, components, methods, and algorithms described herein may be implemented as electronic hardware, computer software, or combinations of both. To illustrate this interchangeability of hardware and software, various illustrative blocks, modules, elements, components, methods, and algorithms have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application. Various components and blocks may be arranged differently (e.g., arranged in a different order, or partitioned in a different way) all without departing from the scope of the subject technology. For example, the specific orders of operations may be rearranged, and some or all of the components may be partitioned in a different way.","It is understood that the specific order or hierarchy of steps in the processes disclosed is an illustration of exemplary approaches. Based upon design preferences, it is understood that the specific order or hierarchy of steps in the processes may be rearranged. Some of the steps may be performed simultaneously. The accompanying method claims present elements of the various steps in a sample order, and are not meant to be limited to the specific order or hierarchy presented.","The previous description is provided to enable any person skilled in the art to practice the various aspects described herein. The previous description provides various examples of the subject technology, and the subject technology is not limited to these examples. Various modifications to these aspects will be readily apparent to those skilled in the art, and the generic principles defined herein may be applied to other aspects. Thus, the claims are not intended to be limited to the aspects shown herein, but is to be accorded the full scope consistent with the language claims, wherein reference to an element in the singular is not intended to mean \u201cone and only one\u201d unless specifically so stated, but rather \u201cone or more.\u201d For example, a file may include one or more files. Unless specifically stated otherwise, the term \u201csome\u201d refers to one or more. Pronouns in the masculine (e.g., his) include the feminine and neuter gender (e.g., her and its) and vice versa. Headings and subheadings, if any, are used for convenience only and do not limit the invention.","A phrase such as an \u201caspect\u201d does not imply that such aspect is essential to the subject technology or that such aspect applies to all configurations of the subject technology. A disclosure relating to an aspect may apply to all configurations, or one or more configurations. An aspect may provide one or more examples. A phrase such as an aspect may refer to one or more aspects and vice versa. A phrase such as an \u201cembodiment\u201d does not imply that such embodiment is essential to the subject technology or that such embodiment applies to all configurations of the subject technology. A disclosure relating to an embodiment may apply to all embodiments, or one or more embodiments. An embodiment may provide one or more examples. A phrase such an embodiment may refer to one or more embodiments and vice versa. A phrase such as a \u201cconfiguration\u201d does not imply that such configuration is essential to the subject technology or that such configuration applies to all configurations of the subject technology. A disclosure relating to a configuration may apply to all configurations, or one or more configurations. A configuration may provide one or more examples. A phrase such a configuration may refer to one or more configurations and vice versa.","The word \u201cexemplary\u201d is used herein to mean \u201cserving as an example or illustration.\u201d Any aspect or design described herein as \u201cexemplary\u201d is not necessarily to be construed as preferred or advantageous over other aspects or designs.","All structural and functional equivalents to the elements of the various aspects described throughout this disclosure that are known or later come to be known to those of ordinary skill in the art are expressly incorporated herein by reference and are intended to be encompassed by the claims. Moreover, nothing disclosed herein is intended to be dedicated to the public regardless of whether such disclosure is explicitly recited in the claims. No claim element is to be construed under the provisions of 35 U.S.C. \u00a7112, sixth paragraph, unless the element is expressly recited using the phrase \u201cmeans for\u201d or, in the case of a method claim, the element is recited using the phrase \u201cstep for.\u201d Furthermore, to the extent that the term \u201cinclude,\u201d \u201chave,\u201d or the like is used in the description or the claims, such term is intended to be inclusive in a manner similar to the term \u201ccomprise\u201d as \u201ccomprise\u201d is interpreted when employed as a transitional word in a claim."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2","b":"200"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5","b":"500"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 7","FIG. 6A"],"b":"630"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 9","FIG. 7"],"b":"760"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 10","FIG. 7"],"b":"770"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 12A"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 12B"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIGS. 13","FIG. 7"],"b":["14","15","16","17","770"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 23A"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 23B"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 23C"}]},"DETDESC":[{},{}]}
