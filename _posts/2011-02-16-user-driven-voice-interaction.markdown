---
title: User driven voice interaction
abstract: A computer implemented method and system is provided for exchanging voice messages between a sender and a recipient. A client component that allows the sender to create, address, and render the voice messages to the recipient using a graphical user interface is provided. A messaging server that enables interaction between the sender and the recipient is also provided. The sender records one or more voice messages and addresses the recorded voice messages on the client component by entering a recipient address or an arbitrary address. The client component transmits the recorded voice messages, the recipient address or the arbitrary address, and a client identifier to the messaging server. The messaging server resolves a recipient delivery address based on the arbitrary address. The messaging server transmits a delivery message comprising the recorded voice messages to the resolved recipient delivery address. The recipient responds to the recorded voice messages with response messages.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08693377&OS=08693377&RS=08693377
owner: 
number: 08693377
owner_city: 
owner_country: 
publication_date: 20110216
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application is a continuation-in-part application of patent application Ser. No. 12\/958,424 titled \u201cAudio Message Driven Customer Interaction Queuing System\u201d filed on Dec. 2, 2010 now U.S. Pat. No. 8,468,210, which is a continuation of non-provisional patent application Ser. No. 10\/377,444 titled \u201cAudio Message Driven Customer Interaction Queuing System\u201d filed on Mar. 3, 2003 in the United States Patent and Trademark Office, which claims the benefit of provisional patent application No. 60\/363,506 titled \u201cVoice Message Driven Customer Interaction Queuing System\u201d filed on Mar. 8, 2002 in the United States Patent and Trademark Office.","The computer implemented method and system disclosed herein, in general, relates to customer relationship management (CRM) contact channel applications. More particularly, the computer implemented method and system disclosed herein relates to an audio message driven customer interaction queuing system (AMDCIQS).","It can be appreciated that CRM contact channel applications have been in use for years, and have become a natural melting pot for traditional telephony customer interaction and newly emerging web contact paradigms such as electronic mail (email), voice over internet protocol (VoIP), web call-back requests, and text chatting. Of these, voice applications are of particular interest, but the other channels offer insight into the customer service equation as their service characteristics become germane to the method and system disclosed herein.","One problem with conventional CRM contact channel applications is that the service model for voice interaction is unsatisfactory even though voice interaction remains the channel preferred by customers and is still the most effective and proven channel for sales and support. Existing web-oriented customer service involves a compendium of textual and visual self-help material designed to deflect extraneous call traffic from call centers. When customers actually desire interaction on the web, their options include, for example, sending an email to a vendor, asking for an immediate call back from the vendor, text chatting with customer support agents, or opening a VoIP voice session with an agent. The weaknesses of each of these methods are enumerated below.","Email contact into CRM contact channel applications is managed on the user side through web-forms and\/or email programs designed to help customers isolate issues for discussion, and frequently targets groups within the vendor using the \u201cTo:\u201d address to aid in a triage of incoming service requests. In the vendor system, an email response management system (ERMS) aggregates the incoming email traffic, performs routing analysis over the email, and routes them to service queues. In a contact center, managers devise staffing models to address this traffic in addition to the more prevalent voice traffic that besets a typical contact center. Service level agreements (SLAs) for email contacts vary widely, from as little as a few minutes for an automatically generated \u201creceipt\u201d response, to days or weeks. On average, the response cycle exceeds 24 hours. The net effect of this has been to damage the customer's expectation for timely service on this channel best characterized as a text message driven system.","Web call back is a second common form of customer interaction on websites and involves the voice medium. However, the drawbacks of this approach are threefold. The customer needs to wait for a call back, which can take a variable amount of time. The customer frequently receives no notification of expected wait time, further undermining the expectation for timely or \u201cworthwhile\u201d service. Another drawback of this approach is that the staffing model required to support web call back is similar to an out-dialing telemarketing application. As such, because the calls are real time and have indeterminate length, the model for staffing a center to handle such calls is expensive. Add to that the expense of traditional call center infrastructure, and the attractiveness of this contact channel diminishes.","Text-chatting customer interaction shares some of the same weaknesses as web call back from a staffing perspective. The primary weakness of this approach is that the staffing model required to support text chat is similar to an out-dial telemarketing application. As such, because the conversations are real time and have indeterminate length, the model for staffing a center to handle such chat sessions is expensive. Another problem with text chat is that it requires text entry for users, which is a frequent barrier to usage. A third problem is the customer must wait in a queue before receiving service, further diminishing the customer's excitement impulse to establish contact.","Voice over internet protocol (VoIP) is another form of current customer interaction over the web and shares the queuing weaknesses of the approaches above as well as their expensive staffing models, since VoIP is connection-oriented in the sense that VoIP requires a real-time synchronous connection between two users. This means that users on either end of the synchronous connection must participate at the same time, unlike a messaging application. Additionally, VoIP infrastructure is expensive to acquire and manage. Furthermore, the quality of VoIP remains a problem for many users. Even with the quick saturation of broadband services into the consumer market, underlying limitations of shared internet communications without quality of service (QoS) guarantees makes VoIP somewhat unreliable. For these reasons, the adoption curve for VoIP has been slow, even though VoIP will ultimately be a useful contact channel. QoS issues aside, VoIP always necessitates an expensive staffing model and infrastructure to support. Regardless of network performance improvements, all connection-oriented service technologies require customers to \u201cqueue\u201d before asking their questions.","Regarding another channel, there has been a recent application of instant messaging technology for CRM, for example, in the form of Twitter\u00ae operated by Twitter Inc., and other social networking services. Instant messaging allows users to send text to one another, and sometimes permits audio messaging. What has not happened, though, is the application of this mode of interaction for N to one (N:1) customer service for voice.","While these contact channel applications may be suitable for the particular purpose to which they address, they are not as suitable for voice-enabled web customer service. The net result of the above discussion is a pastiche of customer dissatisfaction and customer service organization frustration.","On the customer side, the interaction is marked by inconvenience, waiting, unnatural interaction paradigms employing text input and general technical obstacles. The result is diminished excitement on the part of customer, reduced patience with inhumane technology solutions that solve nothing, drive frustration, and ultimately, undermine the transaction itself.","On the customer service organization side, center managers are frustrated at mounting expenses from increasing staffing models, new infrastructure costs that deliver underwhelming performance, and burnt out customer service agents. The net result of the overload and expense pressure is a retreat from solving the problem.","Hence, there is a long felt but unresolved need for a voice message driven customer interaction queuing system, which substantially departs from the conventional concepts, and in so doing provides a method and system developed for providing voice-enabled web pages and local messaging client components in a general customer-driven messaging context as well as a retail or customer support context for allowing customers and web page visitors to utter questions into a local client component or a browser-resident recorder application akin to a walkie-talkie.","Furthermore, conventional exchange of voice messages between a sender such as a customer, and a recipient such as an enterprise or an agent, requires the customer to disclose their identity to the enterprise potentially making the customer's identity available to the enterprise for unfavorable usage or usage not contemplated by the customer. Moreover, in a conventional customer service scenario, customers voice their opinion via an electronic commerce (e-commerce) web page associated with the enterprise. The enterprise drives the interaction between the customer and the enterprise by inviting the customer for a discussion. The customer cannot voice their thoughts towards an enterprise unless the enterprise invites the customer to voice the customer's thoughts towards the enterprise. There is a need to enable and empower customers to voice their thoughts towards any entity whether that entity is prepared for it or not, and without requiring the customer to find the address of the target entity. Therefore, there is a need for a computer implemented method and system that allows the interaction between the customer and the enterprise to be driven primarily by the customer.","Hence, there is a long felt but unresolved need for a computer implemented method and system that enables customer driven exchange of voice messages between a customer and arbitrary targets. There is also a need for a messaging server that delivers the voice messages by performing address resolution of arbitrary addresses into valid enterprise addresses.","This summary is provided to introduce a selection of concepts in a simplified form that are further described in the detailed description of the invention. This summary is not intended to identify key or essential inventive concepts of the claimed subject matter, nor is it intended for determining the scope of the claimed subject matter.","The computer implemented method and system disclosed herein addresses the above stated need for customer driven exchange of voice messages between a customer and arbitrary targets. The computer implemented method and system disclosed herein also delivers the voice messages by performing address resolution of arbitrary addresses into to valid enterprise addresses.","In accordance with the computer implemented method and system disclosed herein, an audio message driven customer interaction queuing system generally comprises a client component, a messaging server, and recipient components designed to allow senders to spontaneously create or utter and issue messages with questions into a browser-resident voice recorder application, or a local client software component akin to a walkie-talkie without queuing beforehand. These messages are then queued along with originating web page information and user data and distributed to recipients, for example, service agents. Such submissions may or may not be anonymous to protect the identity of the sender who submits the voice message. The recipients can then conduct research on the questions, for example, using the originating web page as a reference, and respond with a voice message, a short message service (SMS) message, a multimedia messaging service (MMS) message, etc., played upon the recorder application or the client component after a brief service interval. More generally, the computer implemented method and system disclosed herein implements message types, for example, audio, that is, primarily voice, video, text, electronic mail (email), SMS messages, MMS messages, fax, etc. There are additional features of the computer implemented method and system disclosed herein that will be described hereinafter.","It is to be understood that the computer implemented method and system disclosed herein is not limited in its application to the details of construction and to the arrangements of the components set forth in the following description or illustrated in the drawings. The computer implemented method and system disclosed herein is capable of other embodiments and of being practiced and carried out in different ways. Also, it is to be understood that the phraseology and terminology employed herein are for the purpose of the description and should not be regarded as limiting.","The computer implemented method and system disclosed herein further addresses the need for exchanging voice messages between a sender and a recipient. As used herein, the term \u201csender\u201d refers to a user, a customer, a consumer, or other entity who wishes to utter a question or send a message to a recipient, for example, a service agent. Also, as used herein, the term \u201crecipient\u201d refers to, for example, a customer service facility, an enterprise, or other service entity that addresses queries, receives customer feedback, provides customer support, etc. The computer implemented method and system disclosed herein provides a client component to the sender and the recipient. The client component is, for example, a standalone application provided on a computing device of the sender and the recipient, or a browser based application provided on a web hosting service. The computer implemented method and system disclosed herein also provides a messaging server that enables interaction between the sender and the recipient for exchanging the voice messages.","The client component renders a graphical user interface that allows the sender to create, address, and render the voice messages to the recipient. The client component is made available for download through a web hosting service of the messaging server. In an embodiment, the client component is downloaded and installed on a computing device, for example, a mobile phone, a personal digital assistant, a tablet computer, a personal computer, a laptop, etc., of the sender. In another embodiment, the sender accesses the client component via a communication network. The sender can access the client component installed on the sender's computing device, utilize the browser based application on the web hosting service, or access the client component via the communication network to render one or more voice messages to the recipient.","The sender records one or more voice messages on the client component. The sender addresses each of the recorded voice messages on the client component via the graphical user interface by entering a recipient address or an arbitrary address on the client component. As used herein, the term \u201crecipient address\u201d refers to an actual address of the recipient known to the sender. Also, as used herein, the term \u201carbitrary address\u201d refers to a non-specific or indefinite address or string associated with the recipient that is provided by the sender, if the actual address of the recipient is not known to the sender. In an embodiment, the sender registers with the messaging server for maintaining an account for sending the recorded voice messages to the recipient and for receiving response messages from the recipient. The recipient may also register an address with the messaging server for subsequent message exchanges.","The client component transmits the recorded voice messages, the recipient address or the arbitrary address, and a client identifier associated with the client component to the messaging server via the communication network. The recorded voice messages are anonymously transmitted to the recipient via the messaging server. In an embodiment, the recorded voice messages are non-anonymously transmitted to the recipient via the messaging server. In an embodiment, the messaging server stores the recorded voice messages on the messaging server.","On receiving the recorded voice messages from the client component, the messaging server resolves a recipient delivery address based on the arbitrary address entered by the sender for delivering each of the recorded voice messages to the recipient. The resolved recipient delivery address is, for example, the recipient address, a predefined delivery address of the recipient, a predefined electronic mail address of the recipient, a default recipient address, and a predefined identification number such as a mobile phone number of the recipient. The messaging server resolves the recipient delivery address, for example, by matching the arbitrary address with the predefined delivery address of the recipient, by matching the arbitrary address with the predefined electronic mail address or the predefined identification number such as a mobile phone number of the recipient, or by matching the arbitrary address with the default recipient address.","The messaging server transmits a delivery message comprising one or more of the recorded voice messages to the resolved recipient delivery address. The delivery message further comprises a web address, optional explanatory text, and a session identifier. The transmission of the delivery message by the messaging server comprises, for example, delivering the recorded voice messages as one or more audio file attachments to the resolved recipient delivery address, or delivering a web address and a session identifier associated with the recorded voice messages to the resolved recipient delivery address. The web address provides a link to the messaging server for downloading the client component and retrieving the recorded voice messages. The session identifier allows continuity of the exchange of the voice messages between the sender and the recipient by routing the response messages of the recipient to the sender. The messaging server sends a notification to the client component accessed via the computing device of the sender on transmitting the recorded voice messages to the resolved recipient delivery address.","The recipient, for example, a service agent, responds to the recorded voice messages in the delivery message with one or more response messages. The recipient may download the client component on the recipient's computing device, for example, a mobile phone, a personal digital assistant, a tablet computer, a personal computer, a laptop, etc., of the recipient. In this embodiment, the recipient transmits the response messages to, for example, the electronic mail (email) address of the sender, a predefined identification number such as a mobile phone number of the sender, the client component of the sender via the messaging server, etc., using the client component on the recipient's computing device. The client component is also made available for download through a web hosting service of the messaging server. The recipient can access the client component installed on the recipient's computing device, utilize the browser based application on the web hosting service, or access the client component via the communication network to transmit the response messages. In an embodiment, the recipient transmits the response messages directly to the sender, for example, via email, SMS, etc.","The computer implemented method and system disclosed herein provides an audio message driven customer interaction queuing system with multiple advantages listed below:","The client component operates without the need to queue with a customer service and wait for a recipient before satisfying the sender's desire to ask a question. This results in the following advantages:\n\n","Moreover, the client component is not connection-oriented and relies on messages as a medium of exchange versus persistent real-time telecom sessions or connections. The connectionless feature leads to multiple advantages in, for example, a customer service center hosting the client component as listed below:\n\n","The computer implemented method and system disclosed herein can be implemented on voice-enabled web pages in a retail or customer support context, allowing web page visitors to utter questions into a browser-resident recorder or player application akin to a walkie-talkie. In an embodiment, the system disclosed herein can reside on any computing device, for example, personal computers, desktops, laptops, notebooks, netbooks, tablet computing devices, mobile phone platforms, etc., where the computing device employs a standalone application which functions in a similar manner to the browser based application. The computer implemented method and system disclosed herein allows senders to continue browsing a website or shopping while the recipient formulates an answer. The client component allows the sender to receive and listen to the answer on a radio-like application. This response cycle is designed to occur in less than about 2 minutes, which is usually less time than spent navigating a traditional call center phone menu. The ease of use, immediacy, instant familiarity with the device paradigm, and quick response time combine to make it easier for users to make a buying decision or to get help when they need it, thereby increasing transaction success rate.","The following business objectives succinctly list the high-level key issues addressed by the computer implemented method and system disclosed herein:\n\n","The computer implemented method and system disclosed herein allows senders to utter questions into a browser-resident recorder application or the standalone application that visually resembles and functions, for example, like a walkie-talkie. These questions are queued with originating web page information, if applicable and sender data and distributed to multiple recipients. These recipients then research the question using the supplemental data as a reference, and respond with one or more audio or voice messages. The sender plays the responses on a player on the sender's computing device or the client component.","It should be noted that this voice message driven interaction paradigm applies to non-web applications as well. Traditional telephone customer service operations could employ this message-driven model as well, employing the back-end queuing function described above to achieve similar cost economies in the customer service operation to those described here in the web context.","The computer implemented method and system disclosed herein performs the following:\n\n","In an embodiment, the computer implemented method and system disclosed herein enables and empowers senders to voice their thoughts towards practically any entity whether that entity is prepared for it or not, and without necessitating to find the address of the target entity. For example, the computer implemented method and system disclosed herein enables such spontaneous or impulse behavior as allowing customers to walk up to a target store and say, \u201cI think your prices are too high\u201d. A customer need not be invited by an entity to voice any sentiment via an electronic commerce (e-commerce) web page. Moreover, the computer implemented method and system disclosed herein generates interest from the customer by allowing the interaction between the customer and the entity to be customer driven.","To the accomplishment of the above and related objects, this invention may be embodied in the form illustrated in the accompanying drawings, attention being called to the fact, however, that the drawings are illustrative only, and that changes may be made in the specific construction illustrated.",{"@attributes":{"id":"p-0058","num":"0097"},"figref":"FIGS. 1 through 9","b":["100","101","105","101","100"]},{"@attributes":{"id":"p-0059","num":"0098"},"figref":"FIG. 1","b":["100","101","101","100","101","105","101","100","105"]},"In the web-based architecture of the 3-party service model, the client component , \u2032 is hosted on a web hosting service that hosts a website. The sender accesses the website using the sender's computing device , for example, a mobile phone, a personal digital assistant, a tablet computer, a personal computer, a laptop, etc., and accesses the client component  on the website via a communication network . The sender creates an audio or voice message using the client component . The sender then transmits the message using the client component  to the messaging server  via the communication network . The messaging server  determines the availability of a recipient and selects a recipient to handle the message. The messaging server  distributes the message to the recipient.","The recipient accesses a web page \u2032 of the website on the recipient's computing device , for example, a mobile phone, a personal digital assistant, a tablet computer, a personal computer, a laptop, etc., and determines the web page  on which the sender originated the message. The recipient manages multiple concurrent sender dialogs using a connection management area  on the recipient's computing device . The recipient records response messages to the sender's questions using the client component \u2032 on the recipient's computing device  and sends the response messages back to the messaging server , for example, via a service host local area network (LAN) . The messaging server  sends the response messages to the sender's client component  for playback.","By analogy, the non-web based standalone application operates in a similar manner in the back-end, with few differences on the front end, primarily due to lack of browser origination and need for addressing.",{"@attributes":{"id":"p-0063","num":"0102"},"figref":["FIG. 2","FIG. 4"],"b":["101","105","101","101","101","101","101","101","201","105","202","202","105","202"],"i":["a ","b ","a","d"]},"The client component \u2032 on the recipient's computing device  comprises a standard browser structured into areas for displaying the web page \u2032 comprising active connections for the recipient and the client component \u2032 for message playback and recording. The client component , \u2032 is embedded in a web page , \u2032 enabled with variations of the embodiments of the client component , \u2032 to involve alternatives in each of the components. The client component \u2032 comprises, for example, a Flash interface that drives a JavaScript (JS) \u2032 element, which in turn controls an ActiveX \u2032 control that uses standard or custom audio encoding\/decoding codecs \u2032.","A Flash interface or object drives the JavaScript element which in turn controls, for example, an ActiveX control. The ActiveX control employs a codec  to capture and store audio files. The ActiveX control sends the captured and stored audio files to a JavaServer pages (JSP)  element and a Java servlets element on the messaging server  that handles disposition of messages. The messaging server  then assigns the message to a recipient and transfers the messages to the recipient's client component \u2032. The recipient controls playback using the Flash interface in a manner similar to the sender side for driving the JavaScript \u2032 element. The JavaScript \u2032 element controls the ActiveX \u2032 control. The ActiveX \u2032 control employs a codec \u2032 to retrieve and play the audio message, capture the recipient's response to the sender's question, and send the recipient's response back to the messaging server . The messaging server  sends a response to the client component  on the sender's computing device  for playback in a manner similar to the playback on the recipient's client component \u2032.","In an embodiment, the ActiveX , \u2032 portion of the client component , \u2032 is replaced by Java. Java promotes cross platform operation, and thereby increases user acceptance. The ActiveX , \u2032 portion of the client component , \u2032 may also be replaced by Microsoft .NET elements. Microsoft .NET reduces security screening issues at client download time, thereby enhancing usability. In an embodiment, the codec , \u2032 portion of the client component , \u2032 is substituted and included in a download package while downloading the client component , \u2032. This aids in cross-platform compatibility, but increases download size.","The recipient's client component \u2032 comprises a standard browser segmented into areas comprised of the sender URL area showing originating web page  information, the connection management area , and the client component area  as exemplarily illustrated in . These are the basic elements required to enable a rich customer service delivery process. In some circumstances, enterprises receiving \u201carbitrarily addressed\u201d messages may use their customer relationship management (CRM) tools instead of a formal recipient client component \u2032.","In an embodiment, the client component area  comprises a screen area displaying the client component \u2032 player, which is comprised of the Flash interface, the JavaScript \u2032 element, and the ActiveX \u2032 control, with reliance upon supplemental codecs \u2032 for audio record and playback. These codecs \u2032 may be added to this system  by the operating system itself, as in the case of Windows, or via custom development.","The sender URL area comprises a screen area in which the sender URL that accompanied the sender message is expanded to show the recipient from where the message originated in the client component enabled website. In the embodiment involving sender-addressed messages, this would not be the enterprise website, but would be a web hosting service account page, or would involve no page at all in the case of a standalone client component , \u2032. The connection management area  comprises graphical icons indicating sender sessions currently assigned to the recipient, and which sender is in focus in the sender URL area undergoing service delivery.","The recipient's client component \u2032 assumes innumerable realizations as the core elements may recombine as desired by the senders. Each of the core elements may be realized using various technologies, thereby creating a large combination of possible instantiations in varied configurations.","In an embodiment, the client component  comprising the ActiveX control, the Flash interface, and the JavaScript element working with the supplemental codec , is connected among its components as follows: The Flash interface of the client component  collects sender input in the form of button key presses and mouse hovering. The Flash interface passes these events to the JavaScript element, which in turn passes the events to the ActiveX control. The ActiveX control then may interact with operating system audio services, supplying an audio file to play, or instructing the operating system audio services to capture audio stream from an input device such as a microphone. The ActiveX control may also interact with the messaging server  components getmessage and postmessage , and may execute HTTP PUT, POST and GET commands for transportation and retrieval of audio files, the sender URL, and other sender data. The client component , \u2032 connectivity applies to both sender and recipient instantiations of the client component , \u2032.",{"@attributes":{"id":"p-0072","num":"0111"},"figref":["FIG. 3","FIG. 2"],"b":["301","101","302","101","101","303","101","101","201","304","101","305","105","202","105","306","202","105","306","202"],"i":["a ","a ","b ","b ","b ","a ","a "]},"The audio messages are sent  to the ActiveX \u2032 control on the recipient's computing device  along with a uniform resource locator (URL) of the originating web page  from which the sender records the audio messages via HTTP. The ActiveX \u2032 control works with the codec \u2032, as exemplarily illustrated in , to play  the audio messages recorded by the sender and capture responses. The ActiveX \u2032 control employs  HTTP commands to transfer audio response message files to the messaging server . The JSP  element on the messaging server  processes  the audio response messages and the Java servlets element on the messaging server  routes the response messages back to the sender. The messaging server  sends  the audio response messages to the ActiveX control on the sender's client component  via HTTP commands. The ActiveX control works  with the codec  to play the responses from the recipient.",{"@attributes":{"id":"p-0074","num":"0113"},"figref":["FIG. 4","FIG. 2"],"b":["105","202","202","202","202","202","202","101","101","101","101","202","202","202","402","202","105","202"],"i":["a ","d ","a ","b ","c ","b","b","a ","a ","a "]},"On the sender side, the messaging server  pushes audio responses created by the recipients, using HTTP to communicate with the sender side web browser . The messaging server  also communicates through the ActiveX control, and indirectly to the JavaScript element, and indirectly to the client component's  Flash interface to manage playback-control-button states, display message information on the client component  for presentation to the sender, and to push audio content to the client component .","On the recipient side, the messaging server  employs HTTP to push sender URL data to the sender URL area, and to push connection management information to the connection management area , as exemplarily illustrated in , of the recipient's web browser \u2032. The messaging server  also interacts with the recipient's instance of the client component \u2032 in the client component area  of the recipient's web browser \u2032 in the manner described above, with the distinction that the messaging server  responds to the recipient's play requests for sender input by updating the connection management area , and by retrieving content corresponding to the sender URL, and displaying the content in the sender URL area of the recipient's web browser \u2032.","The sender visits a website comprising the client component  via the sender's web browser . The sender creates an audio message using the client component . The ActiveX control manages the collection and posting of the audio message to the messaging server . The postmessage servlet on the messaging server  handles the collection and posting of the audio messages to the recipient. The postmessage servlet establishes a connection with the database management system (DBMS)  and creates a session . The DBMS  stores the profiles of the senders. If a new sender sends a message, then a new profile is created on the DBMS . The message is stored in the DBMS  for awaiting assignment to a recipient, or for forwarding to a recipient in case the message exchange is a part of an existing session . The JavaBean explorer classes embedded in the JSP  processes of the messaging server  fetch data from the DBMS , assess the new sender's contact information, and identify an available recipient for assignment of the message , or the incumbent recipient for the session . If an incumbent recipient has since become unavailable, the JSP  process selects a new recipient. The JSP  process then instructs the getmessage servlet on the messaging server  to retrieve the audio message from the DBMS  and deliver the retrieved audio message to the selected recipient for playback on the recipient's client component \u2032. Once the recipient has completed an audio response to the audio message using the client component \u2032 via the web browser \u2032, the client component's \u2032 ActiveX \u2032 control posts the message to the postmessage servlet which in turn inserts the message into the DBMS . The getmessage servlet notices the assignment and delivers the response message to the sender for playback on the sender's client component .","In an embodiment, the Flash interface of the client component , \u2032 is replaced with a Java applet residing in a browser application or as a Java application running external to the browser application on the computing devices , , for example, a personal computer, a laptop, a mobile device, a tablet computing device, etc. In the case of a Java application, the service model assumes a standard client-server architecture, for example, 2-party architecture, and facilitates direct messaging to the host. In another embodiment, the Flash interface is also replaced by a JavaScript , \u2032 element or Java, thereby reducing the need of a Flash enabled browser , \u2032. In another embodiment, the JavaScript , \u2032 element in the client component , \u2032 is replaced using a Visual Basic (VB) script of another language. Each of the alternatives impacts the user base as their ubiquity on user platforms is not assured.",{"@attributes":{"id":"p-0079","num":"0118"},"figref":"FIG. 5","b":["101","501","101","502","101","101","503","101","101","504","201","505","103","506","201","507","101","508","101","101","509","101","101","510","511","512"],"i":["a ","a ","b ","b ","a ","a ","b ","b "]},{"@attributes":{"id":"p-0080","num":"0119"},"figref":"FIG. 6","b":["101","601","101","602","101","101","603","101","101","604","201","605","606","607","101","101","608","101","101","609","610"],"i":["a ","a ","b ","b ","a ","a ","b ","b "]},{"@attributes":{"id":"p-0081","num":"0120"},"figref":"FIG. 7","b":["101","701","101","702","101","101","703","101","101","704","201","705","706","101","707","101","101","708","101","101","709","710"],"i":["a ","a ","b ","b ","a ","a ","b ","b "]},{"@attributes":{"id":"p-0082","num":"0121"},"figref":"FIG. 8","b":["101","105","801","101","802","101","101","803","101","101","804","105","101","805","105"],"i":["a ","a ","b ","b ","b "]},"Functionally, the client component , \u2032 operates in either 3-party mode or 2-party peer-to-peer mode. Reduction to practice focused upon the 3-party mode. In either the 3-party mode or the 2-party mode, the client component , \u2032 functions identically from a user perspective. In the 3-party mode, messages route to the messaging server , where the messaging server  may distribute the messages to multiple recipients by applying an assignment availability algorithm (mode 1), or to specific single recipients with no assignment analysis required (mode 2), for example, in a service brokerage between providers and customers. In the 2-party mode, the sender's messages route to a single predefined specific recipient directly. The sender may not direct the message routing as this would disrupt the N:1 service model, where N senders employ a tool to communicate with 1 recipient. In an embodiment, a provision is made for sender addressing to allow for addressing to arbitrary recipients. In an embodiment, the client component  requires message addressing, but otherwise functions in a similar manner. Transport for the 2-party mode employs a simple mail transfer protocol (SMTP), or a specially developed light transport client designed expressly for this purpose.","The client message handling of the client component , \u2032 currently employs encoding voice and using hypertext transfer protocol (HTTP) for file transfer. This transfer could alternatively employ a file transfer protocol (FTP) or another file transfer protocol with no effective difference, other than potential diminished performance. Due to communication delays in file transfer, the method of message handling involves, for example, encoding and immediate streaming of a message file to the messaging server  to reduce perceived transmission time. The client streaming functionality of the client component , \u2032 thus changes a send command to an implicit \u201capprove and post\u201d command for the message file as the message file has already, or is already, in transit upon command issuance. This provides marginal transfer time improvement, however, as the client component , \u2032 generates small audio files. The inclusion of streaming logic would increase download package size and retard initial client download, diminishing the improvement accordingly in a tradeoff. Alternative message handling involves, for example, immediate streaming of audio prior to an encoding step, but the resulting file size of the stream could be prohibitive and defeat the gains of early transfer. Alternative message handling also employs SMTP-style file transfer to affect file transfer to the destination; this would be problematic, however, as variations in user platform configuration may reduce broad applicability.","As disclosed in the detailed description of , the messaging server  comprises, for example, the Java servlets element, the Enterprise JavaBeans element, a Tomcat server, and generic database technology. The messaging server  executes a JSP  element and business logic related to managing the availability of recipients and assignment of sender-originated messages that include audio, URL data, and sender data elements. Sender messages further comprise, for example, text, fax, and video. The messaging server  also manages audio responses from the recipient, routing, then delivering them to the originating sender's client component  for playback on the sender's computing device .","The messaging server  may also be implemented with alternative technologies for dynamic page creation and delivery. The messaging server  may also employ alternative web and application server technologies, for example, Microsoft Internet Information Services (IIS). These alternatives do not offer substantive advantages to the messaging server  function, but may suit users of the client component , \u2032 due to pre-existence in customer infrastructure. Functionally, the messaging server  may operate in 2 modes in a 3-party service model, or be omitted from the system  with a modified client component , \u2032 performing peer-to-peer 2-party communication in a 2-party model.","Variations on the client component's , \u2032 inter-process communication derives from at least three sources, those being alternate development technology, or alternate client component topology in service of 2-party versus 3-party models, or from a standalone client component , \u2032. Regarding alternate technology, the Flash graphical user interface (GUI) portion of the client component , \u2032 may be replaced with a Java applet resident in a browser , \u2032, or as a Java application running outside of a browser , \u2032 on a desktop, a laptop, a mobile device, etc., or as a JavaScript browser application. This might include remote procedure call (RPC)-style communication, file transfer protocol (FTP) interaction, and other functional equivalents for use in a conventional client-server model.","If the Flash GUI were indeed replaced by JavaScript , \u2032 or a Java Applet, this would eliminate the need for a Flash plug-in in the browser , \u2032. Inter process communication would thus rely upon Java messaging. The JavaScript , \u2032 portion of the client component , \u2032 may be replaced using VB script or another scripting language. In the event of a Java application or other conventional non-web oriented model, inter process communication depends upon the design of the tools. Each of these alternatives, however, impacts the user base, as their ubiquity on Windows platforms is not assured.","As suggested, another alternate instantiation alluded to above arises from the 2-party communication model versus the 3-party model. This service structure implements N:1 messaging, where N senders may message 1 and only 1 recipient. This is in contrast to the 3-party model that enables multiple recipients to service an arbitrary number of senders. This application is most likely in small businesses such as sole proprietorships, or in small professional practices.","The ActiveX , \u2032 portion of the client component , \u2032 may be replaced by Java. Java, however, is not as efficient to integrate with Windows audio services and could impact codec operation. The ActiveX , \u2032 portion of the client component , \u2032 may also be replaced by Java. This is a desirable alternative to that used in reduction to practice in the client component prototype that operated successfully end-to-end-to-end as the client component , \u2032 becomes portable to more platforms and browsers. In the codec , \u2032 portion of the client component , \u2032, one may substitute a custom codec , \u2032 and include the codec , \u2032 in a download package at client download time. This would eliminate Windows application programming interface (API) calls to the audio system, replacing them with API calls of the codec , \u2032.","Additional variations upon 3-party and 2-party themes assume somewhat academic options entirely motivated by the desire to circumvent the protection this patent application seeks. Some of these include a 3-party system that includes peer-to-peer file transfer of audio and related data initiated but not mediated by the messaging server . Additionally, 3-party solutions could employ SMTP or FTP as a means for file transfer. Other variations could include conversion of audio messages into telephony streams directed into a voice mail system or other telephony infrastructure.",{"@attributes":{"id":"p-0092","num":"0131"},"figref":["FIG. 9","FIG. 4"],"b":["105","402","105","402","101"]},{"@attributes":{"id":"p-0093","num":"0132"},"figref":["FIG. 10","FIG. 10"],"b":["102","101","101","101","102"]},{"@attributes":{"id":"p-0094","num":"0133"},"figref":"FIG. 11","b":["101","101","101","102","101"]},"Several additional embodiments present themselves in the realization of the client component , \u2032, each being inspired by the method and system  disclosed herein. The embodiments comprise analyzing the sender URL and other sender data to accomplish routing in the messaging server  logic. This would allow call centers to triage messages and deliver them to subject experts. Further embodiments along this line would involve speech to text analysis and key word spotting within the audio stream to accomplish the same purpose. Other embodiments at the same logic step of the service cycle would facilitate business logic controllable by the host of the system  such as \u201cbusiness day\u201d rules versus off hour rules, and auto-audio responses generated during relevant times to manage sender expectations when the service is likely to be delayed.","In addition to routing, complementary applications may develop as enabled directly by the method and system  disclosed herein. These applications are, for example, 3-party incident billing systems, 3-party subscription billing systems, and two party equivalents. Additional applications comprise, for example, application service provider (ASP) hosted 3-party solutions in a service bureau configuration for all variations of systems above and related billing systems. Additional embodiments, for example, sender authentication and voice or audio encryption, or employment of digital signatures to establish sender identity in the client component  pertinent to security are also provided by the method and system  disclosed herein. Additional embodiments that enrich the communication stream are also provided by the method and system  disclosed herein. These embodiments comprise, for example, bundling attachments with messages to aid in the dialog or for other purposes, and creation of a spontaneous customized portal for senders or recipients, which house relevant material.","In the detailed description of , the framework for the audio or voice message driven customer interaction queuing system provides a client component , \u2032 in the form of a browser-resident recorder application instantiated on an electronic commerce (e-commerce) website. The entity responsible for the e-commerce website has to invite the sender for voice interaction by enabling the web pages  of the e-commerce website with the components of the client component  as a prerequisite. Furthermore, messages posted through the client component enabled web pages  have no need for addressing because they were proffered by a client component  bound to an entity or a vendor who could control that offering. Even if the vendor was brokering messages between many senders and many sub-vendors, the context for the voice messages always provides a means to resolve the intended recipient.",{"@attributes":{"id":"p-0098","num":"0137"},"figref":"FIG. 12","b":["101","101","1201","103"]},"In an embodiment, the client component , \u2032 is made available for download through the web hosting service of a messaging server . The sender can access the client component  installed on the sender's computing device , for example, a mobile phone, a tablet computer, a personal digital assistant, a personal computer, a laptop, etc., utilize the browser based application on the web hosting service, or access the client component  via the communication network  to render one or more voice messages to the recipient. The recipient can access the client component \u2032 installed on the recipient's computing device , utilize the browser based application on the web hosting service, or access the client component \u2032 via the communication network  to transmit response messages to the sender.","The messaging server  that enables interaction between the sender and the recipient for exchanging voice messages is also provided . In an embodiment, the sender registers with the messaging server  for maintaining an account for sending voice messages to the recipient and for receiving response messages from the recipient. The recipient may also register an address with the messaging server  for subsequent message exchanges. In another embodiment, the sender may visit a website hosted by the web hosting service as a guest to submit messages anonymously, but still receive response messages via the messaging server . The client component  renders a graphical user interface that allows the sender to create, address, and render the voice messages to the recipient. The graphical user interface facilitates interaction between the sender and the client component .","The client component  is pre-configured to capture voice input from the sender. The client component  enables the sender to record  one or more voice messages. The sender addresses  the recorded voice messages on the client component  via the graphical user interface. The sender addresses each of the recorded voice messages by entering a recipient address or an arbitrary address on the graphical user interface of the client component . As used herein, the term \u201crecipient address\u201d refers to an actual address of the recipient known to the sender. Also, as used herein, the term \u201carbitrary address\u201d refers to a non-specific or indefinite address or string associated with the recipient that is provided by the sender, if the actual address of the recipient is not known to the sender.","The graphical user interface displays an address field  as exemplarily illustrated in , to accept target addresses from the sender. The address field  may contain the word \u201caddress\u201d to cue the sender, or may be blank. In an embodiment, the address field  operates as a drop down menu with a list of popular target addresses permitting the sender to select one or more target addresses from the list of popular target addresses. In another embodiment, the address field  operates with auto-fill and auto-complete features that anticipate the sender by providing suggestions as the sender types the target address. The graphical user interface provides an icon , indicated as \u201cA\u201d in , adjacent to the address field  that allows the sender to toggle between anonymous and non-anonymous delivery of messages to the recipient. In an anonymous mode of messaging, the identity of the sender is not disclosed to the recipient receiving the voice message, but the recipient may nonetheless respond via the messaging server  that maintains a mapping to enable such dialogs. The graphical user interface also provides a \u201csend\u201d button to transmit the addressed voice messages to the messaging server . The graphical user interface provides a \u201ccancel\u201d button , indicated by \u201cX\u201d in , to enable the sender to abandon the message recording at any time.","The sender may choose to remain anonymous and issue messages as a \u201cguest\u201d on the website hosted by the web hosting service, or may register and supply, for example, an electronic mail (email) address to maintain an account and store voice message exchanges for a certain period. The email address of the sender is used if targeted recipients choose to respond by email versus choosing to respond with a message back to the messaging server . In an embodiment, where the sender desires anonymity, the messaging server  may dynamically generate an email address as a proxy for the sender, and then redirect the response message from the recipient to the registered email address of the sender.","The client component  transmits  the recorded voice messages, the recipient address or the arbitrary address entered by the sender, and a client identifier associated with the client component  to the messaging server  via a communication network  by pressing the send button on the graphical user interface of the client component . On pressing the send button, the client component  performs a check for an acceptable address in the address field  exemplarily illustrated in . In case of an unacceptable address in the address field , the content in the address field  may blink to indicate an unacceptable address. In an embodiment, the graphical user interface of the client component  displays \u201cAddress Required\u201d to indicate an unacceptable address. When the sender enters an acceptable address in the address field , the client component  sends the recorded voice messages to the messaging server  along with a client identifier that identifies the client component  installed on the sender's computing device . The client component  posts the voice messages to the messaging server  using its own embedded message transport mechanism, regardless of how the voice messages are addressed. In an embodiment, the messaging server  stores the recorded voice messages on the messaging server . In the case of the anonymous mode of messaging, the messaging server  maintains a mapping between the sender and each voice message to enable message routing.","The messaging server  resolves  a recipient delivery address based on the arbitrary address entered by the sender for delivering each of the recorded voice messages to the recipient. The recipient delivery address is the target address of the recipient to which the recorded voice messages should be delivered. The resolved recipient delivery address is, for example, the recipient address, a predefined delivery address of the recipient, a predefined electronic mail address of the recipient, a default recipient address, a predefined identification number such as a mobile phone number of the recipient, etc. The resolution triage for resolving the recipient delivery address at the messaging server  comprises matching the arbitrary address entered by the sender with the predefined delivery address of the recipient, the predefined electronic mail address of the recipient, the default recipient address, or the predefined identification number of the recipient. The predefined delivery address of the recipient is an address of the recipient maintained on the messaging server  or on a separate database management system (DBMS)  associated with the messaging server . The predefined delivery address refers to a client address of the client component \u2032 on the recipient's computing device . The client address may be a username associated with the client identifier of the client component \u2032 accessed by the recipient. The predefined electronic mail (email) address of the recipient is, for example, a corporate email address maintained on the messaging server . The default recipient address is a default corporate address or another email address of the recipient maintained on the messaging server . The messaging server  searches for the default recipient address in the absence of a predefined delivery address and a predefined electronic mail address of the recipient that match the arbitrary address entered by the sender. The predefined identification number, for example, a phone number associated with the recipient, is used for sending SMS messages, MMS messages, etc., to the recipient's mobile phone. In an embodiment, the messaging server  resolves the recipient delivery address by applying default logic to construct a domain address. For example, on receiving the arbitrary address entered by the sender on the client component , the messaging server  resolves the recipient delivery address by constructing a domain address, for example, info@xxx.com, where xxx comprises the arbitrary address.","The messaging server  transmits  a delivery message comprising one or more of the recorded voice messages to the resolved recipient delivery address. The messaging server  transmits the recorded voice messages anonymously or non-anonymously to the recipient. The messaging server  sends a notification to the client component  accessed via the sender's computing device , on transmitting the recorded voice messages to the resolved recipient delivery address. In this embodiment, the messaging server  delivers the recorded voice messages to the resolved recipient delivery address as one or more audio file attachments, for example, a waveform audio (WAV) file, an audio interchange file format (AIFF) file, a Windows media audio (WMA) file, etc.","In an embodiment, the messaging server  delivers a web address, optional explanatory text, and a session identifier associated with each of the voice messages transmitted to the resolved recipient delivery address. The web address provides a link to the messaging server  that enables the recipient to download the client component \u2032 and retrieve the voice messages. The session identifier allows continuity of the exchange of the voice messages between the sender and the recipient by routing the response messages of the recipient to the sender.","Typically, the client component  and \u2032 accessible by the sender and the recipient respectively are functionally similar. The recipient responds  to the recorded voice messages in the delivery message with one or more response messages. The client component \u2032 enables the recipient to create or record one or more response messages to respond to the voice messages of the sender. In an embodiment, the recipient transmits the response messages using the client component \u2032 to the client component  used by the sender via the messaging server , or to the email address, a predefined identification number, etc., of the sender directly. In case of the anonymous mode of messaging, the response messages are routed via a proxy email address maintained by the messaging server .","The recipient electing to respond by email, for example, an auto-responder may send their response messages back to the messaging server . The messaging server  then either informs the sender that an email response has been received, by displaying an appropriate message using the graphical user interface of the client component , if the sender is an anonymous guest, and\/or posts the message directly to the account of the sender, if the sender has chosen to register. Subsequent messages follow a similar path, unless the messages are messages associated with the client component , in which case the messaging server  pushes the messages to the client component  of the sender.",{"@attributes":{"id":"p-0110","num":"0149"},"figref":["FIG. 13","FIGS. 1-2","FIGS. 10-11"],"b":["101","101","1301","103","107","103","107","103","107","102"]},"The messaging server  that enables interaction between the sender and the recipient for exchanging the voice messages is also provided . The standalone application enables the sender to record  one or more voice messages and address the recorded voice messages on the standalone application via the graphical user interface. The sender addresses each of the recorded voice messages by entering a recipient address or an arbitrary address on the graphical user interface of the standalone application. The standalone application transmits  the recorded voice messages, the recipient address or the arbitrary address, and a client identifier associated with the standalone application to the messaging server . The messaging server  resolves  a recipient delivery address based on the arbitrary address for delivering each of the recorded voice messages to the recipient as disclosed in the detailed description of . The messaging server  transmits  a delivery message comprising one or more of the recorded voice messages to the resolved recipient delivery address. On the recipient side, the recipient responds  to recorded voice messages in the delivery message with one or more response messages, for example, using a standalone application accessible on the recipient's computing device .",{"@attributes":{"id":"p-0112","num":"0151"},"figref":["FIG. 14","FIG. 4","FIGS. 1-2","FIGS. 10-11"],"b":["1401","104","401","401","103","107"]},"The messaging server  that enables interaction between the sender and the recipient for exchanging the voice messages is also provided . The browser based component enables the sender to record  one or more voice messages and address the recorded voice messages on the browser based component via the graphical user interface. The sender addresses each of the recorded voice messages by entering a recipient address or an arbitrary address on the graphical user interface of the browser based component. The browser based component transmits  the recorded voice messages, the recipient address or the arbitrary address, and a client identifier associated with the browser based component to the messaging server . The messaging server  resolves  a recipient delivery address based on the arbitrary address for delivering each of the recorded voice messages to the recipient as disclosed in the detailed description of . The messaging server  transmits  a delivery message comprising one or more of the recorded voice messages to the resolved recipient delivery address. On the recipient side, the recipient responds  to the recorded voice messages in the delivery message with one or more response messages using the browser based component accessible on the recipient's computing device .",{"@attributes":{"id":"p-0114","num":"0153"},"figref":"FIG. 15","b":["100","1501","1502","100","101","101","103","107","1501","1502","104","105","101","1501","103","101","101","101","101","1501","1502","101","1501","101","1501","101","101","101","105"],"i":["c","d","e","c ","d ","e ","c "]},"The messaging server  is in communication with the client component  accessible via the sender's  computing device , and the client component \u2032 accessible via the recipient's  computing device , via the communication network . The communication network  is, for example, a local area network (LAN), a wide area network, a mobile communication network, etc. The messaging server  comprises a registration module , an address resolution module , a message delivery module , a notification module , and a message storage module . The registration module registers the sender  with the messaging server  for maintaining an account for sending the recorded voice messages to the recipient  and receiving the response messages from the recipient . The registration module also registers the recipient's  address with the messaging server  for subsequent message exchanges. The message storage module stores the recorded voice messages of the sender  on the messaging server . In an embodiment, the message storage module generates a mapping between each stored voice message and the client identifier or username of the originating sender .","The address resolution module resolves a recipient delivery address based on the arbitrary address entered by the sender  on the GUI of the client component  for delivering each of the recorded voice messages to the recipient . The resolved recipient delivery address is, for example, a recipient address, a predefined delivery address of the recipient , a predefined electronic mail address of the recipient , a default recipient address, a predefined identification number of the recipient , etc. The address resolution module resolves the recipient delivery address based on the arbitrary address by matching the arbitrary address with the predefined delivery address of the recipient , matching the arbitrary address with the predefined electronic mail address or the predefined identification number of the recipient , or matching the arbitrary address with the default recipient address.","The message delivery module transmits a delivery message comprising one or more of the recorded voice messages to the resolved recipient delivery address to allow the recipient  to respond to the recorded voice messages in the delivery message with one or more response messages. The notification module sends a notification to the client component  accessed via the computing device  of the sender , on transmitting the recorded voice messages to the resolved recipient delivery address through the GUI of the client component . The notification module also notifies the sender  on inability to match the arbitrary address with the recipient address, the predefined delivery address of the recipient , the predefined electronic mail address of the recipient , or the predefined identification number of the recipient .","The client component \u2032 accessible via the computing device  of the recipient  comprises a GUI \u2032, a recording module \u2032, and a second message transmission module \u2032. The GUI \u2032 allows the recipient  to create, address, and render response messages to the sender . The recording module \u2032 records one or more response messages created by the recipient . The second message transmission module \u2032 transmits one or more response messages to an electronic mail address of the sender , a predefined identification number of the sender , or the client component  of the sender  via the messaging server . The message storage module stores the response messages of the recipient  on the messaging server .",{"@attributes":{"id":"p-0119","num":"0158"},"figref":["FIG. 16","FIG. 16"],"b":["1600","1501","1502","101","101","105","100","1600","101","101","1600","101","101","1600","1501","101","105","104","1600","1601","1602","1603","1604","104","1605","1606","1607","1610"]},"The processor  is an electronic circuit that executes computer programs. The memory unit  is used for storing programs, applications, and data. The client component , \u2032 is stored on the memory unit  or the drives  or  of the computer system . The memory unit  is, for example, a random access memory (RAM) or another type of dynamic storage device that stores information and instructions for execution by the processor . The memory unit  also stores temporary variables and other intermediate information used during execution of the instructions by the processor . The computer system  further comprises a read only memory (ROM) or another type of static storage device that stores static information and instructions for the processor . The network interface  enables connection of the computer system  to the communication network . The computer system  communicates with other computer systems, for example, through the network interface . The network interface  is, for example, an infrared (IR) interface, a WiFi interface, a universal serial bus interface (USB), a local area network (LAN) interface, a wide area network (WAN) interface, etc. The I\/O controller  controls the input actions of the sender  on the graphical user interface (GUI) , for example, entering an arbitrary address on the GUI , etc., and output actions of the GUI . The data bus  permits communications between the modules, for example, , , , \u2032, \u2032, \u2032, etc., of the client component , \u2032 deployed on the computer system . The data bus  also permits communications between the modules, for example, , , , , and of the messaging server .","The display unit  displays, via the GUI , the results of the recording module , and the first message transmission module , or the address resolution module , the message delivery module , and the notification module to the sender . The input devices  are used for inputting data into the computer system . The input devices  are, for example, a keyboard such as an alphanumeric keyboard, a joystick, a mouse, a touch pad, a light pen, a microphone, etc. The output device , for example, speakers output the voice messages for review by the sender  or the recipient .","The computer system  further comprises a fixed media drive  and a removable media drive  for receiving removable media. Computer applications and programs are used for operating the computer system . The programs are loaded onto the fixed media drive  and into the memory unit  of the computer system  via the removable media drive , or the network interface . In an embodiment, the computer applications and programs may be loaded directly through the network . Computer applications and programs are executed by double clicking a related icon displayed on the display unit  using one of the input devices . The sender  interacts with the computer system  via the GUI using the display unit .","The computer system  employs an operating system for performing multiple tasks. The operating system is responsible for management and coordination of activities and sharing of the resources of the computer system . The operating system further manages security of the computer system , peripheral devices connected to the computer system , and network connections. The operating system employed on the computer system  recognizes, for example, inputs provided by the sender  using one of the input devices , the output display, files and directories stored locally on the fixed media drive , for example, a hard drive, etc. The operating system on the computer system  executes different programs, for example, a web browser , \u2032, an electronic mail application, etc., initiated by the sender  or the recipient  using the processor .","Instructions for executing the modules , , and , the modules \u2032, \u2032, and \u2032, and the modules , , , , and of the client component , the client component \u2032, and the messaging server  respectively are retrieved by the processor  from the program memory in the form of signals. A program counter (PC) determines locations of the instructions in the program memory. The program counter stores a number that identifies the current position in the program of the modules , , and , the modules \u2032, \u2032, and \u2032, and the modules , , , , and of the client component , the client component \u2032, and the messaging server  respectively.","The instructions fetched by the processor  from the program memory after being processed are decoded. The instructions are placed in an instruction register (IR) in the processor . After processing and decoding, the processor  executes the instructions. For example, the GUI of the sender's  client component  defines instructions for allowing the sender  to create, address, and render the voice messages to the recipient . The recording module of the client component  defines instructions for recording one or more voice messages. The first message transmission module of the client component  defines instructions for transmitting the recorded voice messages, the recipient address or the arbitrary address, and a client identifier associated with the client component  to the messaging server . The registration module of the messaging server  defines instructions for registering the sender  with the messaging server  for maintaining an account for sending the recorded voice messages to the recipient  and receiving the response messages from the recipient . The message storage module of the messaging server  defines instructions for storing the recorded voice messages and the response messages on the messaging server . The address resolution module of the messaging server  defines instructions for resolving the recipient delivery address based on the arbitrary address for delivering each of the recorded voice messages to the recipient . The message delivery module of the messaging server  defines instructions for transmitting a delivery message comprising the recorded voice messages to the resolved recipient delivery address. The notification module of the messaging server  defines instructions for notifying the sender  on transmitting the voice messages to the resolved recipient delivery address. The GUI \u2032 of the recipient's  client component \u2032 defines instructions for allowing the recipient  to create, address, and render the response messages to the sender . The recording module \u2032 of the client component \u2032 defines instructions for recording one or more response messages. The second message transmission module \u2032 of the client component \u2032 defines instructions for transmitting one or more response messages to an electronic mail address of the sender , a predefined identification number of the sender  or the client component  of the sender  via the messaging server .","The processor  executing the client component  on the sender's  computing device  retrieves the instructions defined by the GUI , the recording module , and the first message transmission module , and executes the instructions. The processor  executing the client component \u2032 on the recipient's  computing device  retrieves the instructions defined by the GUI \u2032, the recording module \u2032, and the second message transmission module \u2032, and executes the instructions. The processor  of the messaging server  retrieves the instructions defined by the registration module , the message storage module , the address resolution module , the message delivery module , and the notification module , and executes the instructions.","At the time of execution, the instructions stored in the instruction register are examined to determine the operations to be performed. The operations include arithmetic and logic operations. The processor  then performs the specified operation. The operating system performs multiple routines for performing a number of tasks required to assign the input devices , the output devices , and memory for execution of the modules , , and of the client component , the modules \u2032, \u2032, and \u2032 of the client component \u2032, and the modules , , , , and of the messaging server . The tasks performed by the operating system comprise, for example, assigning memory to the modules , , and of the client component , the modules \u2032, \u2032, and \u2032 of the client component \u2032, and the modules , , , , and of the messaging server , moving data between the memory unit  and disk units, and handling input\/output operations. The operating system performs the tasks, on request, by the operations and after performing the tasks, the operating system transfers the execution control back to the processor . The processor  continues the execution to obtain one or more outputs. The outputs of the execution of the modules , , and of the client component  are displayed to the sender . The outputs of the execution of the modules \u2032, \u2032, and \u2032 of the client component \u2032 are displayed to the recipient . The outputs of the execution of the modules , , , , and of the messaging server  are displayed, for example, to a system administrator.","Disclosed herein is a computer program product comprising computer executable instructions embodied in a non-transitory computer readable storage medium. As used herein, the term \u201cnon-transitory computer readable storage medium\u201d refers to all computer readable media, for example, non-volatile media such as optical disks or magnetic disks, volatile media such as a register memory, a processor cache, etc., and transmission media such as wires that constitute a system bus coupled to the processor , except for a transitory, propagating signal.","The computer program product disclosed herein comprises multiple computer program codes for exchanging voice messages between a sender  and a recipient . For example, the computer program product disclosed herein comprises computer program codes for providing a client component , \u2032 to the sender  and the recipient , recording one or more voice messages and addressing the recorded voice messages on the client component , transmitting the recorded voice messages, the recipient address or the arbitrary address, and a client identifier associated with the client component  by the client component  to the messaging server , resolving a recipient delivery address based on the arbitrary address by the messaging server , transmitting a delivery message comprising one or more of the recorded voice messages by the messaging server  to the resolved recipient delivery address, and responding to the recorded voice messages in the delivery message by the recipient  with one or more response messages. The computer program codes for resolving the recipient delivery address based on the arbitrary address match the arbitrary address with the predefined delivery address of the recipient , the predefined electronic mail address of the recipient , the predefined identification number of the recipient , and the default recipient address for determining the recipient delivery address. The computer program product disclosed herein further comprises additional computer program codes for performing additional steps that may be required and contemplated for exchanging voice messages between the sender  and one or more recipients  using the messaging server .","The computer program codes comprising the computer executable instructions are embodied on the non-transitory computer readable storage medium. The processor  of the computer system  retrieves these computer executable instructions and executes them. When the computer executable instructions embodied on the non-transitory computer readable storage medium are executed by the processor , the computer executable instructions cause the processor  to perform the method steps for exchanging voice messages between the sender  and the recipient . In an embodiment, a single piece of computer program code comprising computer executable instructions performs one or more steps of the computer implemented method disclosed herein for exchanging voice messages between the sender  and the recipient .","For purposes of illustration, the detailed description refers to each of the client component , the client component \u2032, and the messaging server  being run locally on a computer system ; however the scope of the computer implemented method and system  disclosed herein is not limited to each of the client component , the client component \u2032, and the messaging server  being run locally on the computer system  via the operating system and the processor , but may be extended to run remotely over the network  by employing a web browser and a remote server, a mobile phone, or other electronic devices.",{"@attributes":{"id":"p-0132","num":"0171"},"figref":"FIGS. 17A-17B","b":["101","101","101","1701","101","101","101","1501","1702","101","1501","1704","1704","1502","1704","1704","1703","1703"],"i":["c ","c ","a ","b","a","b","a","b. "]},"The client component  enables the sender  to transmit the recorded voice message using the send button  to the messaging server . Prior to transmission, the recorded voice messages may be temporarily stored in a message buffer of the client component . The sender  may enter a recipient address in the address field  of the GUI as exemplarily illustrated in . In embodiment, the client component  allows the sender  to anonymously transmit a message to the recipient  by using the toggle button \u201cA\u201d .  exemplarily illustrates a standard version of the GUI of the client component  in which addressing is not required, while  exemplarily illustrates an addressable version of the GUI of the client component  in which addressing is required. The GUI also enables the sender  to cancel a recorded voice message and\/or clear the message buffer by pressing the cancel button . The sender  may cancel the message at any time before the transmission of one or more of the voice messages.",{"@attributes":{"id":"p-0134","num":"0173"},"figref":"FIGS. 18A-18C","b":["101","105","1501","1801","101","101","101","1501","1802","101","1501","1501","1501","1803","101","1501","1804","101","1501","1805","105"],"i":"c "},"The messaging server  attempts to resolve  a valid recipient delivery address based on the arbitrary address. If the messaging server  cannot not parse the arbitrary address entered by the sender  or is not able to resolve the arbitrary address to a valid recipient delivery address, the messaging server  queries  the sender  to enter a recipient address or a different recipient address and attempts  to resolve the recipient delivery address based on the entered recipient address.","For resolving the recipient delivery address, the messaging server  determines  whether the arbitrary address matches a recipient address. If the messaging server  matches the arbitrary address the recipient address, then the messaging server  delivers  the voice message to the recipient address. If the arbitrary address does not match the recipient address, the messaging server  determines  whether the arbitrary address matches a predefined delivery address maintained on the messaging server , for example, a username associated with the recipient's  client component \u2032. If the arbitrary address matches the recipient's  predefined delivery address, then the messaging server  delivers  the voice message to the predefined delivery address. If the arbitrary address does not match the predefined delivery address, then the messaging server  determines  whether the arbitrary address matches the recipient's  predefined electronic mail address, for example, a corporate email address maintained on the messaging server . If the arbitrary address matches the predefined electronic mail address, then the messaging server  delivers  the voice message to the predefined electronic mail address. If the arbitrary address does not match the predefined electronic mail address, then the messaging server  determines  whether the arbitrary address matches a default delivery address. If the arbitrary address matches the default delivery address, the messaging server  delivers  the voice message to the default delivery address.","The messaging server  notifies  the sender  on successfully delivering the voice message to the recipient . However, if the messaging server  is not able to resolve the arbitrary address to any valid recipient delivery address, the messaging server  notifies  the sender  that the message delivery attempts were not successful and therefore failed.","Consider an example of exchanging voice messages between a sender  and a recipient . The sender  registers with the messaging server  by providing the sender's  electronic mail address and the sender's  phone number. The sender  downloads the client component  as a standalone application on the sender's  computing device , for example, a mobile phone. The sender  installs the client component  on the sender's computing device . The graphical user interface (GUI) of the client component  displays a message stating that the client component  is ready for use. The sender  presses the record button  on the GUI , as exemplarily illustrated in , to initiate recording of a voice message on the client component  and records the voice message on the client component . The sender  presses the review button on the client component  to review the recorded voice message.","The sender  taps the address field  on the GUI of the client component . The client component  shows a list of popular target addresses in the address field . The sender  enters a recipient's  name as \u201centerprise1\u201d in the address field . The recipient  \u201centerprise1\u201d is not in the list of popular target addresses. The sender  uses the option to keep the sender's  name as anonymous. The sender  presses the send button  on the GUI to transmit the recorded voice message to the messaging server . The client component  transmits the recorded voice message to the messaging server .","The messaging server  stores the recorded voice message on the messaging server . The messaging server  attempts to resolve the name of the recipient  to an address associated with the recipient  stored on the messaging server . The messaging server  attempts to match \u201centerprise1\u201d with a predefined recipient delivery address. The messaging server  stores registered recipient delivery addresses, for example, \u201centerprise1A\u201d, \u201centerprise1B\u201d, \u201centerprise1C\u201d, etc. The messaging server  is unable to match \u201centerprise1\u201d with a recipient delivery address on the messaging server . The messaging server  then attempts to match \u201centerprise1\u201d with an electronic mail address stored on the messaging server . The messaging server  stores registered electronic mail addresses, for example, \u201cabc@enterprise1A.com\u201d, \u201cdef@enterprise1B.com\u201d, \u201cghi@enterprise1C.com\u201d. The messaging server  is unable to match \u201centerprise1\u201d with the electronic mail addresses stored on the messaging server . The messaging server  then attempts to match \u201centerprise1\u201d with a default electronic mail address by accessing the website of \u201centerprise1\u201d and identifying an electronic mail address associated with \u201centerprise1\u201d on the website of \u201centerprise1\u201d. The messaging server  is unable to match \u201centerprise1\u201d with the default electronic mail address associated with \u201centerprise1\u201d. The messaging server  sends a notification, for example, \u201cunable to deliver the message\u201d to the client component  of the sender  on failure to resolve the recipient delivery address and deliver the voice message to the recipient .","The sender  then enters a more specific address, for example, \u201centerprise1A\u201d in the address field  of the GUI of the client component  to send the recorded voice message to the recipient . The messaging server  attempts to match \u201centerprise1A\u201d with a recipient delivery address. The messaging server  matches \u201centerprise1A\u201d with the recipient delivery address on the messaging server . The messaging server  delivers the recorded voice message to the client component \u2032 of the recipient  having the recipient delivery address as \u201centerprise1A\u201d. The messaging server  sends a notification, for example, \u201cmessage delivered\u201d to the sender's  client component . Enterprise 1A then responds to the recorded voice message by recording a response message using the client component \u2032 on the recipient's  computing device  and transmitting the response message to the sender's  client component  via the messaging server . The recipient  may also send the response message, for example, via electronic mail using the sender's  electronic mail address or via SMS using the sender's  phone number.","Consider another example of exchanging voice messages between a sender  and a recipient . The sender  registers with the messaging server  and provides the sender's  electronic mail address. The sender  accesses the client component  as a browser based application on a web hosting service. The graphical user interface (GUI) of the client component  displays a message stating that the client component  is ready for use. The sender  presses the record button , as exemplarily illustrated in , to initiate recording a voice message on the client component  and records the voice message on the client component . The sender  presses the review button on the client component  to review the recorded voice message. The sender  enters the name of a recipient  as \u201centerprise2\u201d in the address field  on the GUI of the client component  and uses the option to keep the sender's  name as non-anonymous. The sender  presses the send button  to transmit the recorded voice message to the messaging server . The client component  transmits the recorded voice message to the messaging server .","The messaging server  stores the recorded voice message on the messaging server . The messaging server  attempts to resolve the name of the recipient  to an address associated with the recipient  stored on the messaging server . The messaging server  stores registered recipient delivery addresses, for example, \u201centerprise1A\u201d, \u201centerprise1B\u201d, \u201centerprise1C\u201d, etc. The messaging server  attempts to match \u201centerprise2\u201d with a recipient delivery address. The messaging server  is unable to match \u201centerprise2\u201d with the recipient delivery address. The messaging server  then attempts to match \u201centerprise2\u201d with an electronic mail address stored on the messaging server . The messaging server  stores registered electronic mail addresses, for example, \u201cabc@enterprise1A.com\u201d, \u201cdef@enterprise1B.com\u201d, \u201cghi@enterprise1C.com\u201d. The messaging server  is unable to match \u201centerprise2\u201d to an electronic mail address stored on the messaging server . The messaging server  attempts to match \u201centerprise2\u201d with a default electronic mail address by applying default logic to construct a domain address info@xxx.com, where xxx in this case would become enterprise2. The messaging server  transmits the recorded voice message to \u201cinfo@enterprise2.com\u201d. The messaging server  sends a notification to the client component  of the sender  on delivering the recorded voice message to the default electronic mail address of the recipient . If this posting is not successful, messaging server  forwards a failure message to the sender . The recipient  otherwise responds to the electronic mail message with a response message to the electronic mail address of the sender . The response message is transmitted directly to the electronic mail address of the sender .","Given the architecture of address resolution and anonymity, it should be apparent that various combinations of address resolution and anonymity are possible, and those expressed here are merely representative, and not exhaustive, of the various embodiments possible.","It will be readily apparent that the various methods and algorithms disclosed herein may be implemented on computer readable media appropriately programmed for general purpose computers and computing devices. As used herein, the term \u201ccomputer readable media\u201d refers to non-transitory computer readable media that participate in providing data, for example, instructions that may be read by a computer, a processor or a like device. Non-transitory computer readable media comprise all computer readable media, for example, non-volatile media, volatile media, and transmission media, except for a transitory, propagating signal. Non-volatile media comprise, for example, optical disks or magnetic disks and other persistent memory volatile media including a dynamic random access memory (DRAM), which typically constitutes a main memory. Volatile media comprise, for example, a register memory, processor cache, a random access memory (RAM), etc. Transmission media comprise, for example, coaxial cables, copper wire and fiber optics, including the wires that constitute a system bus coupled to a processor. Common forms of computer readable media comprise, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, any other magnetic medium, a compact disc-read only memory (CD-ROM), digital versatile disc (DVD), any other optical medium, punch cards, paper tape, any other physical medium with patterns of holes, a random access memory (RAM), a programmable read only memory (PROM), an erasable programmable read only memory (EPROM), an electrically erasable programmable read only memory (EEPROM), a flash memory, any other memory chip or cartridge, or any other medium from which a computer can read. A \u201cprocessor\u201d refers to any one or more microprocessors, central processing unit (CPU) devices, computing devices, microcontrollers, digital signal processors or like devices. Typically, a processor receives instructions from a memory or like device, and executes those instructions, thereby performing one or more processes defined by those instructions. Further, programs that implement such methods and algorithms may be stored and transmitted using a variety of media, for example, the computer readable media in a number of manners. In an embodiment, hard-wired circuitry or custom hardware may be used in place of, or in combination with, software instructions for implementation of the processes of various embodiments. Thus, embodiments are not limited to any specific combination of hardware and software. In general, the computer program codes comprising computer executable instructions may be implemented in any programming language. Some examples of languages that can be used comprise C, C++, C#, Perl, Python, or JAVA. The computer program codes or software programs may be stored on or in one or more mediums as an object code. The computer program product disclosed herein comprises computer executable instructions embodied in a non-transitory computer readable storage medium, wherein the computer program product comprises computer program codes for implementing the processes of various embodiments.","The present invention can be configured to work in a network environment including a computer that is in communication, via a communications network, with one or more devices. The computer may communicate with the devices directly or indirectly, via a wired or wireless medium such as the internet, a local area network (LAN), a wide area network (WAN) or the Ethernet, token ring, or via any appropriate communications means or combination of communications means. Each of the devices may comprise computers such as those based on the Intel\u00ae processors, AMD\u00ae processors, UltraSPARC\u00ae processors, Sun\u00ae processors, IBM\u00ae processors, etc. that are adapted to communicate with the computer. Any number and type of machines may be in communication with the computer.","As to a further discussion of the manner of usage and operation of the present invention, the same should be apparent from the above description. With respect to the above description then, it is to be realized that the optimum dimensional relationships for the parts of the invention, to include variations in size, materials, shape, form, function and manner of operation, assembly and use, are deemed readily apparent and obvious to one skilled in the art, and all equivalent relationships to those illustrated in the drawings and described in the specification are intended to be encompassed by the present invention.","Therefore, the foregoing is considered as illustrative only of the principles of the invention. Further, since numerous modifications and changes will readily occur to those skilled in the art, it is not desired to limit the invention to the exact construction and operation shown and described, and accordingly, all suitable modifications and equivalents may be resorted to, falling within the scope of the invention.","The foregoing examples have been provided merely for the purpose of explanation and are in no way to be construed as limiting of the present invention disclosed herein. While the invention has been described with reference to various embodiments, it is understood that the words, which have been used herein, are words of description and illustration, rather than words of limitation. Further, although the invention has been described herein with reference to particular means, materials, and embodiments, the invention is not intended to be limited to the particulars disclosed herein; rather, the invention extends to all functionally equivalent structures, methods and uses, such as are within the scope of the appended claims. Those skilled in the art, having the benefit of the teachings of this specification, may affect numerous modifications thereto and changes may be made without departing from the scope and spirit of the invention in its aspects."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of the invention, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, exemplary constructions of the invention are shown in the drawings. However, the invention is not limited to the specific methods and instrumentalities disclosed herein.","Various other objects, features and attendant advantages of the computer implemented method and system disclosed herein, will become fully appreciated as the same becomes better understood when considered in conjunction with the accompanying drawings, in which like reference characters designate the same or similar parts throughout the several views, and wherein:",{"@attributes":{"id":"p-0040","num":"0079"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0041","num":"0080"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0042","num":"0081"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0043","num":"0082"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0044","num":"0083"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0045","num":"0084"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0046","num":"0085"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0047","num":"0086"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0048","num":"0087"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0049","num":"0088"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0050","num":"0089"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0051","num":"0090"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0052","num":"0091"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0053","num":"0092"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0054","num":"0093"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0055","num":"0094"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0056","num":"0095"},"figref":"FIGS. 17A-17B"},{"@attributes":{"id":"p-0057","num":"0096"},"figref":"FIGS. 18A-18C"}]},"DETDESC":[{},{}]}
