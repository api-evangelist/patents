---
title: Synchronization protocol for synchronizing data between nodes
abstract: A method and system thereof for synchronizing a data set comprising a first data set residing on a first node with a second data set residing on a second node. Packets are exchanged with the second node. A packet comprises one or more messages and a message comprises a plurality of elements. At least one of the elements identifies the data set. Other information in the packets is used to identify any data from the first data set that needs to be sent to the second node and any data from the second data set that needs to be received from the second node, in order to synchronize the data set on both nodes. The data so identified can then be exchanged.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07747561&OS=07747561&RS=07747561
owner: PalmSource Inc.
number: 07747561
owner_city: Sunnyvale
owner_country: US
publication_date: 20020531
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED U.S. APPLICATION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application claims priority to the copending provisional patent application Ser. No. 60\/377,713, entitled \u201cSystem and Method for Synchronizing Computer Databases,\u201d with filing date May 2, 2002, and assigned to the assignee of the present application.","1. Field of the Invention","The present invention relates generally to the field of databases. Specifically, the present invention relates to a method and system for synchronizing data between multiple nodes.","2. Related Art","In the realm of hand-held computer systems (commonly referred to as personal digital assistants or PDAS), it is not uncommon for a data set to exist and be maintained both on the PDA and on at least one other device. For example, a user may maintain a calendar or address book on both his or her PDA and on another computer system (e.g., a personal computer system such as a desktop or laptop).","The entries in the data set can be referred to as records or data objects. When a change is made to a record in the data set residing on one device (hereinafter, also referred to as a node), it is desirable to have the data set on the other node be updated as well, so that the data set is synchronized on both nodes. Accordingly, processes have been developed to facilitate synchronizing the data sets on both nodes. These synchronization (\u201csync\u201d) processes are known in the art.","Currently, each record in a data set is identified by a unique record identifier (record ID). To prevent duplication of record IDs, the task of assigning IDs to records is relegated to the PDA.","Generally, synchronization is performed using either a \u201cslow sync\u201d technique or a \u201cfast sync\u201d technique. Using a slow sync, all of the records are transferred between nodes; the data set on one node is transferred to the other. The records in each data set are then compared in order to determine which records have changed since the last sync, and the respective data sets are updated accordingly.","Fast syncs are accommodated by tagging records when they are modified. Typically, a bit associated with each record is set to one value or another to indicate whether or not that record has been changed since the last sync; the bits that have been set are often referred to as \u201cdirty\u201d bits. Using a fast sync, only the changes made to the data set on each node since the last sync are transferred to the other node. After the fast sync is performed, the dirty bits are cleared.","Although fast syncs are preferred, there are occasions when slow syncs need to be performed. For instance, it is becoming more common for people to use more than one computer system. Many people use a computer system at home and another one at work, for example. If a user performs a fast sync between the PDA and one of the computer systems, the dirty bits would be cleared. Consequently, the records on the PDA that have changed cannot be identified using the dirty bits. Therefore, a subsequent sync between the PDA and another computer system will use a slow sync to identify changes made to the records since the last time these latter two nodes were synched.","Thus, one problem with the prior art is that slow syncs are occurring more frequently as a growing number of people interact with multiple computer systems. Slow syncs take longer to complete than fast syncs, and so they are less desirable. Also, the time needed to complete slow syncs is increasing as memory sizes increase.","Another issue with prior art synchronization techniques is that they are limited with respect to the different types of syncs that can now occur. Traditionally, synchronization occurs between a PDA and one or more personal computer systems as described above. However, the paradigm in which the PDA serves in essence as the nexus between the user's home and office computer systems is not as applicable as it once was. As computer systems are networked, multiple communication pathways between PDAs and computer systems can exist, and synchronization between multiple devices needs to be supported. The notion of a single source (e.g., the PDA) for record IDs is not as workable as before.","Also, records are frequently shared between users and quite often are distributed and stored across many nodes. Some records may be accessible by multiple users working from different nodes. In any event, different users may update a record in different ways, and the modified record may be distributed over different pathways. Along the way, the record may be further modified. As a result, different versions of the same record may reach a node, causing a conflict to arise as to which version of the record should take precedence over another. Using contemporary synchronization techniques, these records are unnecessarily replicated at the destination node, slowing down syncs while consuming memory. User intervention is then required to glean which records are correct and which can be discarded.","Another problem with contemporary synchronization techniques is that, during even a fast sync, each record update occurs using a separate packet exchange. That is, the sync is performed using a relatively large number of relatively small packets. Because there is a degree of latency associated with each packet exchange, reliance on a large number of packets increases the overall latency of the sync operation. Also, reliance on smaller packets does not effectively utilize the higher bandwidth provided by connections such as Universal Serial Buses (USBs) and wireless communication technologies.","Therefore, improvements to prior art synchronization techniques are desirable. Accordingly, what is needed is a system and\/or method that can provide these improvements. The present invention provides these improvements and others not specifically mentioned above.","Embodiments of the present invention pertain to a synchronization protocol for communicating between nodes (e.g., between a desktop computer system and a hand-held computer system). More specifically, embodiments of the present invention provide a method and system thereof for synchronizing a data set comprising a first data set residing on a first node with a second data set residing on a second node. The synchronization protocol of the present invention can be used peer-to-peer.","In its various embodiments, the synchronization protocol of the present invention provides the properties of extensibility, compactness (compressibility), modularity and streamability. The synchronization protocol provides a framework for robustly and efficiently synchronizing data between arbitrary nodes.","In the present embodiment, one node (e.g., the first node) exchanges packets with another node (e.g., the second node). A packet comprises one or more messages and a message comprises a plurality of elements. At least one of the elements identifies the data set. In one embodiment, the packet also includes a session identifier. In another embodiment, the packet also includes version information identifying a version of a synchronization protocol used by the first node. Other information in the packets is used to identify any data from the first data set that needs to be sent to the second node and any data from the second data set that needs to be received from the second node, in order to synchronize the data set on both nodes. The data so identified can then be exchanged.","According to the present embodiment, a packet includes an element identifying the beginning of the packet and an element identifying the end of the packet, with one or more messages residing between these elements. Similarly, in the present embodiment, a message includes an element identifying the beginning of the message and an element identifying the end of the message, with other elements residing between these elements.","In one embodiment, data are streamed to the second node in blocks of data that are sized according to the size of an outbound buffer. Data can be streamed as the data become available. On the receiving end, data are read and processed until an end-of-packet element is received. Note that streaming can occur from either node to the other. That is, although in the present embodiment data are described as being streamed to the second node, streaming can occur in both directions.","In another embodiment, the data are compressed before being sent to the second node. Note that data received from the second node may also be compressed. That is, although in the present embodiment data are described as being compressed before being sent to the second node, compressed data can be sent in either direction.","In one embodiment, a second packet can be sent subsequent to sending a first packet before a response to the first packet is received. That is, because packets can include more than one message, messages (e.g., commands) can be batched in a single packet, and as such the number of transactions can be reduced. Also, a first message can be sent in a first packet and, while waiting for a response to the first message, a second message can be sent in another packet. In general, it is not necessary to wait for a response to a first message before sending a second message, which can contribute to faster syncs.","Embodiments of the present invention synchronization protocol define how data are moved within a node. The synchronization protocol supports fast syncs and partial syncs; it is stateless so that it can support being interrupted. The synchronization protocol also supports optimized wireless refreshes and group synchronization. Group synchronization introduces concepts such as global record identifiers, pedigree, and coverage, and the synchronization protocol provides the functionality to represent and communicate these concepts.","In addition, the synchronization protocol allows new sync elements and messages to be defined, and for information to be added to elements already defined. Messages and elements not recognized can be ignored, so that different versions of the synchronization protocol can be used between nodes, and compatibility with legacy synchronization protocols is possible. As such, the synchronization protocol is extensible. New elements can be defined and added to a message without impacting the existing implementation. New messages can be defined and added to a synchronization packet without impacting the existing implementation.","These and other objects and advantages of the present invention will become obvious to those of ordinary skill in the art after having read the following detailed description of the preferred embodiments, which are illustrated in the various drawing figures.","In the following detailed description of the present invention, numerous specific details are set forth in order to provide a thorough understanding of the present invention. However, it will be recognized by one skilled in the art that the present invention may be practiced without these specific details or with equivalents thereof. In other instances, well-known methods, procedures, components, and circuits have not been described in detail as not to unnecessarily obscure aspects of the present invention.","Some portions of the detailed descriptions, which follow, are presented in terms of procedures, steps, logic blocks, processing, and other symbolic representations of operations on data bits that can be performed on computer memory. These descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. A procedure, computer executed step, logic block, process, etc., is here, and generally, conceived to be a self-consistent sequence of steps or instructions leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated in a computer system. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussions, it is appreciated that throughout the present invention, discussions utilizing terms such as \u201cexchanging\u201d or \u201cforwarding\u201d or \u201cstreaming\u201d or \u201ccompressing\u201d or \u201cidentifying\u201d or \u201csending\u201d or \u201creceiving\u201d or the like, refer to the action and processes of a computer system (e.g., flowchart  of ), or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","Exemplary Implementation Platforms",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 1A","FIG. 1A","FIG. 1A"],"b":["100","100","100","100"]},"In one embodiment, device  includes an address\/data bus  for communicating information, a central processor  coupled with the bus  for processing information and instructions, a volatile memory  (e.g., random access memory, RAM) coupled with the bus  for storing information and instructions for the central processor , and a non-volatile memory  (e.g., read only memory, ROM) coupled with the bus  for storing static information and instructions for the processor . In the present embodiment, device  also includes an optional data storage device  (e.g., a Secure Digital card, a Multi Media Card, or the like) coupled with the bus  for storing information and instructions. Device  can be removable. In one embodiment, device  also contains a display device  coupled to the bus  for displaying information to a user.","In the present embodiment, device  also includes a signal transmitter\/receiver (transceiver) device , which is coupled to bus  for providing a wireless radio (RF) communication link between device  and other wireless devices. Transceiver  may be coupled to device  or integral with device .","In one embodiment, device  includes host interface circuitry  coupled to bus . Host interface circuitry  includes an optional digital signal processor (DSP)  for processing data to be transmitted or data that are received via transceiver . Alternatively, processor  can perform some or all of the functions performed by DSP . In one embodiment, host interface circuitry  comprises a universal asynchronous receiver-transmitter (UART) module that provides the receiving and transmitting circuits utilized for serial communication for both the infrared port  and the serial port .","In one embodiment, device  also includes an optional alphanumeric input device  that, in one implementation, is a handwriting recognition pad (\u201cdigitizer\u201d). Alphanumeric input device  can communicate information and command selections to processor  via bus . In one embodiment, device  also includes an optional cursor control or directing device (on-screen cursor control ) coupled to bus  for communicating user input information and command selections to processor . In one implementation, on-screen cursor control device  is a touch screen device incorporated with display device .","Refer now to  that illustrates an exemplary computer system  upon which embodiments of the present invention may be practiced. In its various implementations, device  may not include all of the elements illustrated by , or device  may include other elements not described by .","In general, computer system  comprises bus  for communicating information, processor  coupled with bus  for processing information and instructions, RAM  coupled with bus  for storing information and instructions for processor , ROM  coupled with bus  for storing static information and instructions for processor , data storage device  such as a magnetic or optical disk and disk drive coupled with bus  for storing information and instructions, an optional user output device such as display device  coupled to bus  for displaying information to the computer user, an optional user input device such as alphanumeric input device  including alphanumeric and function keys coupled to bus  for communicating information and command selections to processor , and an optional user input device such as cursor control device  coupled to bus  for communicating user input information and command selections to processor . Furthermore, input\/output (I\/O) device  is used to communicatively couple computer system  to another device (e.g., device  of ). I\/O device  may be a device used for wired communication or for wireless communication.","Exemplary Synchronization Architecture","In its various embodiments, the synchronization protocol of the present invention specifies a framework for synchronizing data between nodes (e.g., a device  and computer system ) based on a request\/response structure. The protocol can be used for peer-to-peer data synchronization between arbitrary sync nodes as well; this does not preclude use with nodes having a master\/slave relationship. A node may be intermittently connected to other nodes it synchronizes with.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 2","FIG. 2"],"b":["100","120","280","100","120"]},"In the present embodiment, with regard to computer system , sync manager  works closely with sync engine  and the agents ,  and . In this embodiment, sync manager  acts primarily as a scheduler and coordinator. It delegates data management to the agents ,  and , and synchronization to sync engine .","According to an embodiment of the present invention, each agent ,  and  communicates with a single endpoint. The term \u201cendpoint\u201d (or \u201cfarpoint\u201d) is used herein to refer to a source or destination of records (data objects) that are to be synchronized. For example, it is commonplace to synchronize a desktop calendar system database with a calendar database on a hand-held computer. In this example, the calendar database on the desktop computer is an endpoint, and the hand-held calendar database is another endpoint. Endpoints are generally data structures in permanent, or semi-permanent, computer memory. However, endpoints may be temporary, for example, a buffer in a wireless data protocol stack.","The sync manager  provides an application program interface (API) that allows any agent or application to start a full or partial sync session. These sessions can be tailored to a particular purpose and do not necessarily require the participation of another node (e.g., device ). Sync manager  starts a sync session when it receives a start session request from another node (e.g., device ).","In the present embodiment, the synchronization architecture of  also includes a conventional conduit and sync manager API , providing the functionality to synchronize with legacy devices.","With regard to device  (e.g., a hand-held computer system), the sync manager  works closely with sync client  and sync engines . The sync manager  is a system-level processor that acts primarily as a protocol adapter for the sync engines . Sync manager  provides an API that allows any hand-held application to start a partial or full sync session with a specified target node; sync client  is one such application. Sync client  is a user-level process that provides configuration options and a session interface offering a cancel option. Desktop link server (DLP)  provides the functionality to synchronize legacy applications and databases and allows synchronization with legacy devices.","According to the present embodiment, the synchronization protocol of the present invention is implemented between sync manager  and sync transport  on device , and between agent  and sync transport  on computer system .","Exemplary Packet and Message Representations","In its various embodiments, the synchronization protocol of the present invention defines the representation for a set of well-defined messages that are conveyed between two nodes that are participating in a data synchronization task. The protocol representation defines the packet structure for request and response commands in the various sync phases. It also defines the complete set of messages that constitute a sync request\/response packet in a synchronization phase. It also provides details on the representation of elements that constitute these messages.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 3A","b":["310","310","310"]},"The Start Packet element identifies the beginning of sync packet . It is outside of any message, has no element data, and has a length that is set to zero. The End Packet element identifies the end of sync packet  and will occur sometime after the start packet element. The End Packet element is outside of any sync message, does not have any element data, and has a length that is set to zero.","For each Start Packet element, there is a corresponding End Packet element. The elements and messages between the first occurrence of a Start Packet element and the corresponding End Packet element are parsed, and any element outside these two elements is ignored.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 3B","b":"320"},"In the present embodiment, the different types of messages include: Request Query, Query Response, Request Update, Update Response, Update Report, Update Acknowledge, Cancel Session, and Cancel Database Sync. These messages are described further below. It is appreciated that the list of messages utilized with the synchronization protocol of the present invention may be expanded (or shortened).","In one embodiment, a sync message  will contain some form of session information. In another embodiment, sync message  will identify the database being synched (except when canceling the complete sync session) and the protocol implementation version at the node from which the message is sent.","According to the present invention, in a single session, multiple databases for a particular user may be synched. For example, sync packet  () may include two messages  (), one message for synching an address book, and the other for synching the date book (calendar) for the same user.","Also according to the present invention, multiple messages  with different context (users) can be packaged in the same sync packet . For example, a sync packet  may include two messages  for synching the address book for two different users.","Furthermore, according to the present invention, a sync packet  may include different types of messages , for example, a Request Query message for an address book and a Request Update message for a date book. The protocol is easily extensible to sync multiple databases for multiple users in the same sync packet. This facilitates a multiple context synchronization solution to keep the two nodes (all the databases for multiple users, some form of data replication) in sync by using the same sync packet for communication.","Exemplary Basic Elements","A basic element is a component of a composite synchronization element. Table 1 is a list of basic elements and their representation according to one embodiment of the present invention. It is appreciated that other basic element types can be defined and added to the list.",{"@attributes":{"id":"p-0068","num":"0067"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary Basic Synchronization Element"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Basic Element Name","Basic Element Data Type"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Creator ID","4 byte unsigned integral value"]},{"entry":[{},"Type ID","4 byte unsigned integral value"]},{"entry":[{},"Database Name","STRING"]},{"entry":[{},"Record\/Object GUID","16 bytes"]},{"entry":[{},"Category GUID","16 bytes"]},{"entry":[{},"Data Source ID","12 bytes"]},{"entry":[{},"Clock Value","4 byte unsigned integral value"]},{"entry":[{},"User GUID","16 bytes"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"GUID refers to a global and unique identifier assigned to records\/objects, categories and users. According to the present embodiment of the present invention, an identification scheme is implemented at each node to assign GUIDs. Thus, in the present embodiment, the assignment of identifiers is not relegated to the hand-held device. The identification scheme ensures that each unique records\/object, category and user is not given the same identifier by different nodes.","In the present embodiment, integral values are communicated in network byte order format. The record\/object GUID, category GUID, data source ID, user GUID are fixed-length sequence of bytes and are not integral values in this embodiment of the synchronization protocol. The synchronization protocol also introduces a data type \u2018STRING\u2019. The elements of type \u2018STRING\u2019 are represented as:",{"@attributes":{"id":"p-0071","num":"0070"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Field Length","4 byte unsigned integral value"]},{"entry":[{},"Field Value","N UTF8 bytes (coded representation for all"]},{"entry":[{},{},"the characters of the UCS - Universal"]},{"entry":[{},{},"Character Set) (UTF8 refers to the Unicode"]},{"entry":[{},{},"Transformation Format-8 standard)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Exemplary Composite Elements","A composite element includes one or more basic elements. A composite element may or may not have an explicit element type. A composite element is a message constituent.","The representations for composite elements without an explicit element type are listed below. These elements include a Sync Clock element and a Pedigree and Coverage element. Such elements include of one or more of the basic elements described above.","In the present embodiment, a Sync Clock element is represented as a Data Source ID and Clock value pair:",{"@attributes":{"id":"p-0076","num":"0075"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Data Source ID","12 bytes"]},{"entry":[{},"Clock Value","\u20024 byte unsigned integral value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Pedigree and Coverage are identical in representation but different in semantics. A \u201cpedigree\u201d is generally a change history of a database object, and may be used to indicate if an object has changed since a prior synchronization session. \u201cCoverage\u201d (or cover) is generally a set of sync clocks associated with the data set. The cover means that the set of data records\/objects retained by the node includes, or has priority over, all data records\/objects with changes occurring on or before the status clocks. For example if the clocks are A:7, B:17, C:13 (meanings sync clocks A, B, and C are at 7, 17, and 13, respectively), then the data set includes all changes from source A that occurred at 7 or earlier, all from source B that occurred at 17 or earlier and all from source C that occurred at 13 or earlier. A recipient node can therefore inform a sending node of its coverage status. This allows the sending node to filter out data records\/objects already seen by the recipient, resulting in a fast sync. The sending node can also send its own coverage status. The recipient can then update its own coverage status to include the sender's coverage status. For example, if the recipient has coverage status A:7,B:17,C:13 and the sender has coverage status A:4,B:19,D:82 then the sender should send any changes with timestamps greater than B:17 or D:0. These are the changes the recipient has not seen. On receiving this information, the recipient node can then update its coverage status to A:7,B:19,C:13,and D:82.","In the present embodiment, pedigree and coverage are represented as a variable-length unordered vector of Sync Clocks:",{"@attributes":{"id":"p-0079","num":"0078"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"# Sync Clocks","4 byte unsigned integral value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Sync Clock \u2212 1","16 bytes"]},{"entry":[{},". . ."]},{"entry":[{},". . ."]},{"entry":[{},"Sync Clock \u2212 N","16 bytes"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"A NULL Pedigree is represented as:",{"@attributes":{"id":"p-0081","num":"0080"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"center"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#Sync Clocks","4 byte unsigned integral value (0-zero)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"In the present embodiment, each composite element provides the element type and length of the element content in its header. The element content is well defined for that element type and a version of the synchronization protocol. In the present embodiment, the general representation of a composite element with an explicit element type is as follows:",{"@attributes":{"id":"p-0083","num":"0082"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Element Type","WORD"]},{"entry":[{},"Element Length","4 byte unsigned integral value"]},{"entry":[{},"Element Data","N bytes"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"In this embodiment, the Element Length enables a conventional (legacy) parser to skip any extended content in an element's data. It also allows skipping of any new elements in a message that were defined after its implementation. It also facilitates skipping of unknown messages by skipping its constituent elements.","In the present embodiment, an Element Type is a tag to identify an element in a sync message. The values for various composite elements type are defined in Table 2 for one embodiment of the present invention.",{"@attributes":{"id":"p-0086","num":"0085"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary Composite Elements Types"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Element Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["0x0001","Start Packet Element"]},{"entry":["0x0002","End Packet Element"]},{"entry":["0x0003","Start Message Element"]},{"entry":["0x0004","End Message Element"]},{"entry":["0x0005","User Context Element"]},{"entry":["0x0006","Session ID Element"]},{"entry":["0x0007","Database Identifier Element"]},{"entry":["0x0008","Sync Protocol Version Element"]},{"entry":["0x0009","Cancel Element"]},{"entry":["0x000A","Query\/Expertise Element"]},{"entry":["0x000B","Update Element"]},{"entry":["0x000C","End Element"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The synchronization protocol of the present invention allows the definition of new elements and the extension of existing elements, via the length field in each element. Conventional or legacy implementations can ignore the extra data they do not understand. An implementation can use the sync protocol version element to expect the presence\/absence of extra data.","The Start Packet and End Packet elements have been described above.","A Start Message element marks the beginning of a sync message  within a sync packet  (). There can be multiple sync messages in a sync packet. In the present embodiment, each Start Message element will have a corresponding End Message element. In one embodiment, a Start Message element is represented as below:\n\n","The various message type values are described further below.","An End Message element marks the end of a sync message  within a sync packet . It does not have any element data associated and its length is always set to zero.","A User Context element uniquely identifies the user whose database is being synched. In one embodiment, a User Context element is represented as:",{"@attributes":{"id":"p-0093","num":"0093"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"User GUID","16 bytes"]},{"entry":[{},"User Name Length","4 byte unsigned integral value"]},{"entry":[{},"User Name Value","N UTF-8 bytes"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The User Context element identifies the user's sync session. In the present embodiment, each message  will incorporate this element for a stateless synchronization protocol. The User Context element in a sync message  associates that message with the user.","In the present embodiment, to support simultaneous synchronization of multiple devices with a server node, with each device having the same user context, session information is communicated once along with an associated session ID that is then used in subsequent sync packets. The session ID is encapsulated in a Session ID element that can be represented as:\n\n","In the present embodiment, each message incorporates session information. The session information includes either a Session ID Element or a User Context element, or both. The session information is communicated in each message of the sync packet. The session ID abbreviates user context information.","In the present embodiment, the Database Identifier element uniquely identifies the database being synched. It can be represented as:",{"@attributes":{"id":"p-0098","num":"0099"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Creator ID","4 byte unsigned integral value"]},{"entry":[{},"Type ID","4 byte unsigned integral value"]},{"entry":[{},"Database Name Length","4 byte unsigned integral value"]},{"entry":[{},"Database Name Value","N UTF-8 bytes"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"In the present embodiment, the Sync Protocol Version element provides a mechanism to indicate that a particular implementation supports a corresponding set of composite elements and messages such as those described herein. It also specifies the representation for those elements and messages. In one embodiment, the Sync Protocol Version element is represented as follows:\n\n","In the present embodiment, the major version is 0x00000001 and the minor version is 0x00000000.","In the present embodiment, a Cancel element provides a mechanism to deliver an error code and error message when canceling a synchronization session or when canceling synchronization of a specified database. In one embodiment, the Cancel element is represented as:",{"@attributes":{"id":"p-0102","num":"0105"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Error Code","4 byte unsigned integral value"]},{"entry":[{},"Error Message Length","4 byte unsigned integral value"]},{"entry":[{},"Error Message Value","N UTF-8 bytes"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"In the present embodiment, a Query\/Expertise element is a composite structure consisting of Pedigree, Content, Category, Data, and Application filters. A list of such elements constitutes a Query\/Expertise object. In one embodiment, the data representation for the Query\/Expertise element is defined as:",{"@attributes":{"id":"p-0104","num":"0107"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Pedigree","VARIABLE"]},{"entry":["Query\/Expertise Flag","BYTE"]},{"entry":["Query Type Flag","BYTE"]},{"entry":["Content Flag","BYTE"]},{"entry":["Number of Category GUIDs","4 byte unsigned integral value (X)"]},{"entry":["List of Category GUIDs","X*16 bytes"]},{"entry":["Number of Record GUIDs","4 byte unsigned integral value (Y)"]},{"entry":["List of Record GUIDs","Y*16 bytes"]},{"entry":["Length of application data","4 byte unsigned integral value (N)"]},{"entry":["Application data array","N bytes"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The Query\/Expertise flag in this element identifies whether the element is a query, an expertise or both. In most cases, the query and expertise elements will be the same. This allows for optimization at the protocol level. The Query\/Expertise flag is a bit-wise OR of the following values:\n\n","The term \u201cexpertise\u201d is used to define which queries a node is able to answer. A query conveys \u201cFor data set X, what changes do you have that lie outside of coverage Y?\u201d An expertise statement conveys \u201cFor data set X, I have all of the changes within coverage Y.\u201d A typical node includes both a Query element and an Expertise element in a message, because it wants to know about data set X for which it has coverage Y; the node wants to receive changes outside of this coverage and can provide changes inside of this coverage. For efficiency the Query element and the Expertise element may be combined. A typical node will include both its expertise and a query in a message because, during synchronization, the node is both providing and receiving information.","If the responding node (device) has no expertise, then none of the Query\/Expertise elements in a message will have the Expertise flag set. If the responding node (device) has all expertise, then there will be a Query\/Expertise element with only the Expertise flag set, the appropriate pedigree specified, and no category and record GUIDs listed. In this case, none of the remaining Query\/Expertise elements may have the Expertise flag set.","In the present embodiment, the Query Type flag is used to qualify the Query element. It does not qualify an Expertise element. For a Query element, it identifies if the element is part of pre-question or post-question.",{"@attributes":{"id":"p-0109","num":"0114"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Query Type Flag","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0x00","None"]},{"entry":["0x01","Pre-question"]},{"entry":["0x02","Post-question"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In the present embodiment, the Content flag is a bit-wise OR of the following values:",{"@attributes":{"id":"p-0111","num":"0116"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Content Flag","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0x01","Global"]},{"entry":["0x02","Category"]},{"entry":["0x04","Record\/Object\/Data"]},{"entry":["0x08","Link"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In the present embodiment, an Update element provides data description for an update. A list of such elements constitutes an Update object. In one embodiment, the data representation for the element is as follows:",{"@attributes":{"id":"p-0113","num":"0118"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Record GUID","16 bytes"]},{"entry":[{},"Category GUID","16 bytes"]},{"entry":[{},"Number of Objects in","4 byte unsigned integral value (N)"]},{"entry":[{},"Inclusion List"]},{"entry":[{},"List of Object GUIDs","N*16 bytes"]},{"entry":[{},"Pedigree","VARIABLE"]},{"entry":[{},"Status","BYTE"]},{"entry":[{},"Content Length","4 byte unsigned integral value (X)"]},{"entry":[{},"Content","X bytes"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Based on the identity of the Update element, the Content field may refer to record data, category data or global data such as application information, schema information, etc. The Content field includes application-specific data that are opaque to the synchronization protocol.","In the present embodiment, Status identifies if an object was deleted, or deleted and archived.",{"@attributes":{"id":"p-0116","num":"0121"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Status","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0x00","Present"]},{"entry":["0x01","Deleted"]},{"entry":["0x02","Archived"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In the present embodiment, an End element represents the last element in a list of elements of the same type in a message. The Element Length field has zero value. The End element is generally used as the sentinel element for a list of Query\/Expertise or Update elements. This allows packaging of an array of elements without knowing the total number of elements.","Exemplary Messages","In the present embodiment, the order of elements in a message  () is important. Each message begins with a \u2018Start Message\u2019 element and ends with an \u2018End Message\u2019 element. In the present embodiment, a message  will contain session information. Table 3 is a list of the types of messages according to one embodiment of the present invention. It is appreciated that other message types can be defined and added to the list.",{"@attributes":{"id":"p-0120","num":"0125"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary Message Types"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Message Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["0x0800","Request Query"]},{"entry":["0x0801","Query Response"]},{"entry":["0x0802","Request Update"]},{"entry":["0x0803","Update Response"]},{"entry":["0x0804","Update Report"]},{"entry":["0x0805","Update Acknowledge"]},{"entry":["0x0806","Cancel Session"]},{"entry":["0x0807","Cancel Database Sync"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"In the present embodiment, an originating node sends a Request Query message to a responding node to determine the responding node's queries and expertise. In one embodiment, the Request Query message includes the following composite elements:\n\n","In this embodiment of a Request Query message, none of the Query\/Expertise elements will have the Expertise flag set. All of these elements will also have their Pedigree set to NULL.","In the present embodiment, the responding node sends a Query Response message to the originating node in response to a Request Query message. In one embodiment, the Query Response message includes the following composite elements:\n\n","In the present embodiment, if the responding node only wants modifications from other data nodes and it does not want to communicate modifications from its local data store, it will state that it has no expertise. In that case, none of the Query\/Expertise elements will have Expertise flag set.","According to the present embodiment, the originating node sends a Request Update message to the responding node based on the queries from other nodes and the expertise of the responding node. In one embodiment, the Request Update message includes the following composite elements:\n\n","If the responding node has no expertise, then either the Query round is skipped or the number of Query elements in this message is zero. If there are no Query elements in this message, then the End element is optional.","In the present embodiment, the responding node sends an Update Response message to the originating node in response to a Request Update message. In one embodiment, the Update Response message includes the following composite elements:\n\n","If there are no modifications in the local data store of the responding node or the number of Query elements in the \u201cRequest Update\u201d message is zero, then the number of update elements to be communicated may be zero. If there are no Update elements in this message, then the End element is optional.","The originating node sends an Update Report message to the responding node in the Report round to modify its local data store. In one embodiment, the Update Report message includes the following composite elements:\n\n","In this embodiment, pre-question is the same as the initial query, and post-question is the query that got answered. Essentially, these are Query\/Expertise elements with coverage. The Update Response message and the Update Report message can contain both pre-question and post-question elements.","In the present embodiment, the responding node sends an Update Acknowledge message to the requesting node in response to an Update Report message. In one embodiment, the Update Acknowledge message includes the following composite elements:\n\n","In the present embodiment, a Cancel Session message may be sent by either node to end the sync session. A responding node may send this message to the originating node when a user cancels the sync operation at his or her end or if there is some type of fatal error. An originating node may send this message to the responding node in situations when it is not possible to continue to sync. The Cancel Session message may be sent in any packet at any time after the Start Packet element and before the End Packet element. In one embodiment, the Cancel Session message includes the following composite elements:\n\n","In the present embodiment, a Cancel Database Sync message may be sent by either node to end the synchronization of the specified database. Either node may send this message to the other node when the user indicates to that synchronization of the database should be skipped or canceled. This message may also be sent when there is some error and it is not possible to continue to sync the database. The Cancel Database Sync message may be sent in any packet at any time after the Start Packet element and before the End Packet element. Synchronization of the next database may then proceed. In one embodiment, the Cancel Database Sync message includes the following composite elements:\n\n","Synchronization Scenarios",{"@attributes":{"id":"p-0135","num":"0199"},"figref":"FIG. 4","b":"400"},"For simplicity of discussion, flowchart  is discussed in the context of a synchronization performed between two nodes, such as device  and computer system  of . In the present embodiment, the method of flowchart  is implemented on one of the nodes. It is appreciated that the applicability of flowchart  can be extended to synchronization of more than two nodes. Furthermore, although specific steps are disclosed in flowchart , such steps are exemplary. That is, embodiments of the present invention are well suited to performing various other steps or variations of the steps recited in flowchart . It is appreciated that the steps in flowchart  may be performed in an order different than presented, and that not all of the steps in flowchart  may be performed.","In the present embodiment, in step  of , one node (e.g., the first node) exchanges packets  () with another node (e.g., the second node). A packet comprises one or more messages and a message comprises a plurality of elements. At least one of the elements identifies the data set. In one embodiment, the packet also includes a session identifier. In another embodiment, the packet also includes version information identifying a version of a synchronization protocol used by the first node. Other information in the packets is used to identify any data from the data set that needs to be sent to the second node and any data from the data set that needs to be received from the second node, in order to synchronize the data set on both nodes.","In step  of , in the present embodiment, the data so identified can then be exchanged. In one embodiment, data are streamed to the second node in blocks of data that are sized according to the size of an outbound buffer. Data can be streamed as the data become available. On the receiving end, data are read and processed until an end-of-packet element is received.","In another embodiment, the data are compressed before being sent to the second node. Compression may be done either at the transport layer or the sync protocol layer, or compression may be introduced as a layer between the transport and sync protocol layers. In one such embodiment, a block-based blind compression scheme substantially based on LZ77 (Lempel-Ziv 1977) is used. LZ77 presumes no knowledge of the sync protocol and sync elements therein. It is not content-aware and it considers input data as arbitrary sequence of bytes. It is appreciated that schemes based on something other than LZ77 may instead be used.","In another embodiment, a content-aware approach is used to achieve compression. Common items are identified from the information to be transmitted, the items of one kind are placed in a separate table, the tables are sorted in numerical order, the items in a table are difference encoded, references to items are replaced with the index of the corresponding table item, and the entire data set is nibble encoded.","In this latter embodiment, compression is tightly coupled to the synchronization protocol. The tables of common items are transmitted before the sync data are sent. To support streaming, items may be dynamically added to these tables. For example, when a commonly occurring item is seen for the first time, it is sent as-is along with a tag. Subsequent occurrences of that item are replaced with the tag. In this manner, both nodes dynamically build a dictionary when they see a tag associated with an item. Both nodes can decide when to dump their dictionaries and begin afresh in order to limit the amount of state information. For example, the dictionary can be dumped at the end of a data block, the end of a message, the end of a packet, the end of one database sync, etc.","In one embodiment, a second packet can be sent subsequent to sending a first packet before a response to the first packet is received. That is, because packets can include more than one message, messages (e.g., commands) can be batched in a single packet, and as such the number of transactions can be reduced. Also, a first message can be sent in a first packet and, while waiting for a response to the first message, a second message can be sent in another packet. In general, it is not necessary to wait for a response to a first message before sending a second message, which can contribute to faster syncs.","The method of flowchart  () is further described by way of example using the data flow diagrams of , B, C and D. In each of these embodiments, the originating node  can be either device  or computer system  of , respectively, and the responding node  likewise can be either device  or computer system . For clarity, only two nodes are illustrated and discussed; however, it will be understood that the embodiments of the present invention can be extended to more than two nodes.","With reference first to , sync nodes  and  exchange information about the modified data since last sync operation. A sync packet  () usually consists of a single sync message  () in this type of sync. For the sake of simplicity, the discussion will focus on the sync packet communication between two nodes only.","Continuing with reference to , originating node  sends a Request Query message to responding node . This message identifies the data set being synched. Responding node  will determine the coverage of this data set in its local data store and send its query and expertise information as a Query Response message to originating node . Usually, the query and expertise elements are the same in this type of sync. The originating node  collects this information from any other participating sync nodes. Based on the expertise of responding node , originating node  requests modifications from responding node  by sending appropriate query elements in a Request Update message. Responding node  interprets these query elements, locates the matching data in its database, and sends the data updates to originating node  in an Update Response message. Responding node  also includes a reference to the initial query as well as the coverage of the answered part of the query in the Update Response message. Originating node  collects all the updates from other participating sync nodes and, based on the coverage of responding node , determines the modifications that the responding node  has not seen. Originating node  packages these modifications in an Update Report message and sends them to responding node . Responding node  applies the modifications to its local data store and also updates the local coverage information at the completion of the sync. Responding node  then sends an Update Acknowledge message to originating node  to signal sync completion.","Referring now to , an embodiment is described that achieves efficient and optimized wireless synchronization by requiring as few transactions as possible, thereby minimizing delay due to network latency. In this embodiment, sync packet  () consists of multiple sync messages  (). In this embodiment, it is assumed that the two sync nodes  and  have performed a full sync at an earlier time.","With reference to , an application on originating node  decides the data set to be synched. Originating node  presumes the knowledge of coverage of this data on the responding node  by retaining the coverage from the previous sync. Based on this, originating node  determines the changes in its local database that responding node  might not have seen. Originating node  packages these updates, the presumed query, and the coverage of the data set being synched in an Update Report message. Originating node  also determines the coverage of the data set in its local database and constructs a Request Update message to request modifications from responding node  that originating node  has not seen. The Update Report and Request Update messages are put in a single sync packet  and sent to responding node . Responding node  extracts the modifications from the Update Report message, applies changes that it has not seen to its database, and updates\/merges the coverage as well. Responding node  constructs an Update Acknowledge message to indicate that it has applied the modifications at its end. Based on the query elements in the Request Update message, responding node  determines the matching data from its local database. Responding node  also determines the actual query that originating node  had presumed as well as the coverage of modifications being sent to originating node . Responding node  creates an Update Response message with this information. The Update Acknowledge and Update Response messages are put in a single sync packet  and sent to originating node . Originating node  applies the updates to its local database and also retains the coverage of responding node  for the data set being synched. This embodiment of synchronization can be referred to as \u201cone-up one-down synchronization.\u201d In one embodiment, originating node  sends an Update Acknowledge message to responding node , but this message may be omitted as an optimization.","In the present embodiment, if the coverage of responding node  that is presumed by originating node  is lower than the actual value, it results in originating node  sending more updates then necessary to responding node . However, if the presumed server coverage is greater than the actual value, there exist some modifications on originating node  that responding node  might not have seen. In this case, originating node  determines the data in its local database that lies in the coverage range, puts them in an Update Report message, and sends it to responding node , as described above.","Now with reference to , in this embodiment, responding node  gets modifications from originating node  but responding node  does not send its modifications to originating node . Originating node  sends a Request Query message to responding node . In the present embodiment, this message identifies the data set being synched. Responding node  will indicate that it has no expertise and send its query as a Query Response message to the originating node . In response, originating node  determines the modifications that responding node  has not seen, packages them along with the coverage information in an Update Report message, and sends the Update Report message to responding node . Responding node  applies the modifications to its local data store and also updates the local coverage information at the completion of the sync. Responding node  can then send an Update Acknowledge message to signal sync completion to originating node .","With reference now to , in this embodiment, responding node  sends its modifications to originating node , but originating node  does not send its modifications back to responding node . Originating node  sends a Request Query message to responding node . In the present embodiment, this message identifies the data set being synched. Responding node  will indicate that it has no query but full expertise and it will send this information as a Query Response message to originating node . Based on the expertise and coverage of the responding node , originating node  creates appropriate query elements and sends them in a Request Update message to responding node . Responding node  interprets these query elements, locates the matching data in its database, and sends the data to originating node  in an Update Response message. Originating node  applies the modifications to its local data store and also updates the local coverage information at the completion of the sync.","Exemplary Application Programming Interfaces","The embodiments of the synchronization protocol described herein define the format for communicating sync data between software components on two nodes, for example, between agent  on computer system  and sync manager  on device  (). In the present embodiment, both of these software components use the synchronization protocol API to read and write sync packets. In this embodiment, these software components initialize the sync protocol with a handle to an open transport channel. The sync protocol provides an API to release the protocol resources. A writer API allows an application to dynamically construct sync packets and stream the data to the other node. A reader API permits a node to read the data as it comes, parse the data to construct sync records\/objects, and hand the records\/objects over to an application for further processing.","Thus, the synchronization protocol includes a writer API and a reader API. The synchronization protocol also includes an API that is common to the writer API and the reader API. The common API is described below, followed by a description of the writer API then the reader API.","Exemplary Common Application Programming Interface","In the present embodiment, the synchronization protocol includes an API that is common to the writer API and the reader API. It is appreciated that other API methods can be defined and added to those described herein.","SyncProtocolInit",{"@attributes":{"id":"p-0156","num":"0220"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Initializes the sync protocol for sending and receiving"]},{"entry":[{},"sync packets. Both participating nodes call this method."]},{"entry":["Prototype","SYNC_PROTOCOL_HANDLE"]},{"entry":[{},"SyncProtocolInit (TRANSPORT_HANDLE hTransport)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hTransport","Input parameter. Refers to a channel opened"]},{"entry":[{},{},"for synchronization."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns a handle to the sync protocol object. A NULL"]},{"entry":[{},"value indicates failure."]},{"entry":["Pre-","The transport handle must refer to an open channel."]},{"entry":"conditions"},{"entry":["Side Effects","Allocates memory for the sync protocol object. The"]},{"entry":[{},"application must call SyncProtocolReleaseHandle to free"]},{"entry":[{},"the acquired resources."]},{"entry":["Comments","It should be called after the handshake for sync has been"]},{"entry":[{},"completed"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0157","num":"0221"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Invalidates the sync protocol object. Both participating"]},{"entry":[{},"nodes call this method."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolReleaseHandle"]},{"entry":[{},"(SYNC_PROTOCOL_HANDLE hSyncProtocol)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle must have been earlier returned"]},{"entry":["conditions","by the function call SyncProtocolInit."]},{"entry":["Side Effects","Releases the resources associated with sync protocol object."]},{"entry":["Comments","It should be called after the synchronization has been"]},{"entry":[{},"completed."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Exemplary Writer Application Programming Interface","In the present embodiment, the synchronization protocol includes a writer API. It provides a set of APIs to create a sync packet from various sync messages and elements. A writer method checks if the packet has enough elements to fill the maximum buffer size available from the transport, and if it determines so, it flattens the elements and calls a transport API to send the data block. The following methods comprise the writer interface of the sync protocol API. It is appreciated that other API methods can be defined and added to those described herein.","SyncProtocolAddStartPacket",{"@attributes":{"id":"p-0160","num":"0224"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Adds a Start Packet element to the sync packet"]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolAddStartPacket"]},{"entry":[{},"(SYNC_PROTOCOL_HANDLE hSyncProtocol)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle must have been earlier returned"]},{"entry":["conditions","by the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","It should be the first writer API called when constructing a"]},{"entry":[{},"sync packet."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0161","num":"0225"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Adds an End Packet element to the sync packet"]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolAddEndPacket"]},{"entry":[{},"(SYNC_PROTOCOL_HANDLE hSyncProtocol)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle must have been earlier returned"]},{"entry":["conditions","by the function call SyncProtocolInit."]},{"entry":["Side Effects","It uses the transport handle to send the remaining bytes"]},{"entry":[{},"in the sync packet."]},{"entry":["Comments","It should be the last writer API called when constructing"]},{"entry":[{},"a sync packet."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0162","num":"0226"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Adds a Start Message element for the specified message"]},{"entry":[{},"type to the sync packet"]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolAddStartMessage"]},{"entry":[{},"(SYNC_PROTOCOL_HANDLE hSyncProtocol,"]},{"entry":[{},"MESSAGE_TYPE mesgType)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]},{"entry":[{},"mesgType","Input parameter. Type of the message"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have"]},{"entry":["conditions","been earlier returned by the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","It is the first element that marks the beginning of a sync"]},{"entry":[{},"message."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0163","num":"0227"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Adds an End Message element for the current message in"]},{"entry":[{},"the sync packet"]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolAddEndMessage"]},{"entry":[{},"(SYNC_PROTOCOL_HANDLE hSyncProtocol)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have"]},{"entry":["conditions","been earlier returned by the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","It is the last element that marks the end of a sync message."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0164","num":"0228"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Adds a User Context element to the current message in"]},{"entry":[{},"the sync packet"]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolAddUserContextElement"]},{"entry":[{},"(SYNC_PROTOCOL_HANDLE hSyncProtocol,"]},{"entry":[{},"USER_CONTEXT_HANDLE hUserContext)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]},{"entry":[{},"hUserContext","Input parameter. Handle to an object that"]},{"entry":[{},{},"uniquely identifies the user context"]},{"entry":[{},{},"(session information)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have"]},{"entry":["conditions","been earlier returned by the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","None"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0165","num":"0229"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Adds a Session ID element to the current message in the"]},{"entry":[{},"sync packet"]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolAddSessionIDElement"]},{"entry":[{},"(SYNC_PROTOCOL_HANDLE hSyncProtocol,"]},{"entry":[{},"SESSIONID_HANDLE hSession)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]},{"entry":[{},"hSession","Input parameter. Handle to an object that"]},{"entry":[{},{},"uniquely identifies the sync session"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have"]},{"entry":["conditions","been earlier returned by the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","None"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0166","num":"0230"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Adds a Database Identifier element to the current message"]},{"entry":[{},"in the sync packet"]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolAddDatabaseIdentifierElement"]},{"entry":[{},"(SYNC_PROTOCOL_HANDLE hSyncProtocol,"]},{"entry":[{},"DATABASE_HANDLE hDatabase)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]},{"entry":[{},"hDatabase","Input parameter. Handle to an object that"]},{"entry":[{},{},"uniquely identifies the database"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have"]},{"entry":["conditions","been earlier returned by the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","None"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0167","num":"0231"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Adds a Sync Protocol Version element to the current"]},{"entry":[{},"message in the sync packet"]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolAddVersionElement"]},{"entry":[{},"(SYNC_PROTOCOL_HANDLE hSyncProtocol,"]},{"entry":[{},"VERSION_HANDLE hVersion)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]},{"entry":[{},"hVersion","Input parameter. Handle to an object that"]},{"entry":[{},{},"identifies the sync protocol version"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have"]},{"entry":["conditions","been earlier returned by the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","None"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0168","num":"0232"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"273pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Adds a Query element to the current message in the sync packet"]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolAddQueryElement (SYNC_PROTOCOL_HANDLE hSyncProtocol,"]},{"entry":[{},"QUERY_ELEMENT_HANDLE hQuery, QUERY_EXPERTISE_FLAG fQueryExpertise,"]},{"entry":[{},"QUERY_TYPE_FLAG fQueryType)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to sync protocol object"]},{"entry":[{},"hQuery","Input parameter. Handle to a query element object."]},{"entry":[{},"fQueryExpertise","Input parameter. When this query element is being added as"]},{"entry":[{},{},"part of \u2018Query Response\u2019 message, it is used to identify if it is a"]},{"entry":[{},{},"Query or Expertise element or both. When it is added as part"]},{"entry":[{},{},"of any other message, it is always a Query element."]},{"entry":[{},"fQueryType","Input parameter. When this Query element is being added as"]},{"entry":[{},{},"part of \u2018Update Response\u2019 or \u2018Update Report\u2019 message, the"]},{"entry":[{},{},"flag specifies if it belongs to \u2018pre-question\u2019 or \u2018post-question\u2019."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have been earlier returned by"]},{"entry":["conditions","the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","None"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0169","num":"0233"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"322pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Adds an Update element to the current message in the sync packet"]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolAddUpdateElement (SYNC_PROTOCOL_HANDLE hSyncProtocal, DATABASE_HANDLE"]},{"entry":[{},"hDatabase, UPDATE_ELEMENT_HANDLE hUpdate, UPDATE_READ_CALLBACK fnReadCallback,"]},{"entry":[{},"VOID* pState)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"266pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to sync protocol object"]},{"entry":[{},"hDatabase","Input parameter. Handle to the database of the update element."]},{"entry":[{},{},"Passed as an argument to the read callback method."]},{"entry":[{},"hUpdate","Input parameter. Handle to an update element object."]},{"entry":[{},"fnReadCallback","Input parameter. The callback method provided by an"]},{"entry":[{},{},"application to read data from an offset in the Update element."]},{"entry":[{},"pState","Input parameter. This shall be passed as an argument to the"]},{"entry":[{},{},"update read callback method."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"322pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have been earlier returned by"]},{"entry":["conditions","the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","An Update element may have a large amount of data to be sent to the other"]},{"entry":[{},"node, all of which cannot be send in one block. The data needs to be streamed"]},{"entry":[{},"and UPDATE_READ_CALLBACK method provides a mechanism for Sync"]},{"entry":[{},"Protocol to request the Application for reading data from an offset in the Update"]},{"entry":[{},"element."]},{"entry":[{},"The Update element may contain the data in itself. In that case, NULL should be"]},{"entry":[{},"passed for this callback method. If the Update element does not contain data and"]},{"entry":[{},"the size of data is greater than zero, UPDATE_ELEMENT_HANDLE represents"]},{"entry":[{},"reference to an Update element and the callback method must be specified to"]},{"entry":[{},"read the content for the Update element. The callback method is used to read"]},{"entry":[{},"only the content part of the Update element incrementally, and does not apply to"]},{"entry":[{},"other fields. The signature of the UPDATE_READ_CALLBACK would look like:"]},{"entry":[{},"ERR"]},{"entry":[{},"ReadUpdateElement (DATABASE_HANDLE hDatabase,"]},{"entry":[{},"UPDATE_ELEMENT_HANDLE hUpdate, DWORD dwReadOffset, DWORD"]},{"entry":[{},"dwBytesToRead, UCHAR* pBuffer, DWORD* pdwBytesRead, VOID* pState)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":"(Note: DWORD is used to refer to a 4 byte unsigned integral value.)"}]}}]}},"br":{}},{"@attributes":{"id":"p-0170","num":"0234"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Adds an End element to specify the end of the list of"]},{"entry":[{},"Query\/Update elements in the current message in the"]},{"entry":[{},"sync packet."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolAddEndElement"]},{"entry":[{},"(SYNC_PROTOCOL_HANDLE hSyncProtocol)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have"]},{"entry":["conditions","been earlier returned by the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","None"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0171","num":"0235"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Adds a Cancel element to the current message in the sync"]},{"entry":[{},"packet"]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolAddCancelElement"]},{"entry":[{},"(SYNC_PROTOCOL_HANDLE hSyncProtocol,"]},{"entry":[{},"CANCEL_HANDLE hCancel)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]},{"entry":[{},"hCancel","Input parameter. Handle to an object"]},{"entry":[{},{},"that provides details on why a cancel is"]},{"entry":[{},{},"being requested for the specified session"]},{"entry":[{},{},"or database."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have"]},{"entry":["conditions","been earlier returned by the function call"]},{"entry":[{},"SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","None"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0172","num":"0236"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Adds a user-defined element of the specified type to the"]},{"entry":[{},"current message in the sync packet"]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolAddGenericElement (SYNC_"]},{"entry":[{},"PROTOCOL_HANDLE hSyncProtocol,"]},{"entry":[{},"DATABASE_HANDLE hDatabase, ELEMENT_"]},{"entry":[{},"TYPE eType, GENERIC_ELEMENT_HANDLE"]},{"entry":[{},"hElement, DWORD dwElementSize, GENERIC_"]},{"entry":[{},"READ_CALLBACK fnReadCallback, VOID* pState)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle"]},{"entry":[{},{},"to sync protocol object"]},{"entry":[{},"hDatabase","Input parameter. Handle to the data-"]},{"entry":[{},{},"base of the generic element. Passed"]},{"entry":[{},{},"as an argument to the read callback"]},{"entry":[{},{},"method."]},{"entry":[{},"eType","Input parameter. Element type of the"]},{"entry":[{},{},"user-defined element."]},{"entry":[{},"hElement","Input parameter. Handle to the"]},{"entry":[{},{},"user-defined element object."]},{"entry":[{},"dwElementSize","Input parameter. The number of bytes"]},{"entry":[{},{},"required for storing the flattened object."]},{"entry":[{},"fnReadCallback","Input parameter. The callback method"]},{"entry":[{},{},"provided by an application to read data"]},{"entry":[{},{},"from an offset in the generic element."]},{"entry":[{},"pState","Input parameter. This shall be passed"]},{"entry":[{},{},"as an argument to the generic read"]},{"entry":[{},{},"callback method."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have"]},{"entry":["conditions","been earlier returned by the function call"]},{"entry":[{},"SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","A user-defined element may have a large amount of data"]},{"entry":[{},"to be sent to the other node, all of which cannot be"]},{"entry":[{},"send in one block. The read callback method allows"]},{"entry":[{},"reading a specified number of bytes from a"]},{"entry":[{},"given offset in the element. The pState parameter"]},{"entry":[{},"along with GENERIC_ELEMENT_"]},{"entry":[{},"HANDLE should contain enough information so"]},{"entry":[{},"that callback method can be used to read data"]},{"entry":[{},"from it. The signature of GENERIC_READ_CALLBACK"]},{"entry":[{},"method for user-defined element should be:"]},{"entry":[{},"ERR"]},{"entry":[{},"ReadGenericElement (DATABASE_HANDLE"]},{"entry":[{},"hDatabase,"]},{"entry":[{},"GENERIC_ELEMENT_HANDLE hElement, DWORD"]},{"entry":[{},"dwReadOffset, DWORD dwBytesToRead, UCHAR*"]},{"entry":[{},"pBuffer, DWORD* pdwBytesRead, VOID* pState)"]},{"entry":[{},"This method is implemented by the third"]},{"entry":[{},"party component that defines the element."]},{"entry":[{},"It allows reading a specified number of"]},{"entry":[{},"bytes from a given offset in the element. It is"]},{"entry":[{},"used by Sync Protocol implementation to read data for an"]},{"entry":[{},"element so as to stream it on the wire."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"left","id":"FOO-00002"},"sup":"1"}}]}}]}},"br":{}},{"@attributes":{"id":"p-0173","num":"0237"},"tables":{"@attributes":{"id":"TABLE-US-00032","num":"00032"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","This method can be called anytime to force sending of"]},{"entry":[{},"data over the transport."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolFlushData (SYNC_PROTOCOL_HANDLE"]},{"entry":[{},"hSyncProtocol)"]},{"entry":["Parameters","hSyncProtocol Input parameter. Refers to the handle to"]},{"entry":[{},"sync protocol object"]},{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have"]},{"entry":["conditions","been earlier returned by the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","This method sends data to the other end even though"]},{"entry":[{},"the number of bytes is not enough to fill the transport"]},{"entry":[{},"buffer. An application may want to send a configured"]},{"entry":[{},"or pre-determined number of updates to the other node in"]},{"entry":[{},"each block of data. This method facilitates such an"]},{"entry":[{},"implementation."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0174","num":"0238"},"tables":{"@attributes":{"id":"TABLE-US-00033","num":"00033"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Adds \u201cRequest Query\u201d message to the protocol object."]},{"entry":[{},"Only the originating node calls this method."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolAddRequestQueryMessage (SYNC_"]},{"entry":[{},"PROTOCOL_HANDLE hSyncProtocol, USER_"]},{"entry":[{},"CONTEXT_HANDLE hUserContext, DATABASE_"]},{"entry":[{},"HANDLE hDatabase, VERSION_HANDLE hVersion,"]},{"entry":[{},"QUERY_HANDLE hQuery)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]},{"entry":[{},"hUserContext","Input parameter. Handle to an object"]},{"entry":[{},{},"that uniquely identifies the user"]},{"entry":[{},{},"context"]},{"entry":[{},"hDatabase","Input parameter. Handle to an object"]},{"entry":[{},{},"that uniquely identifies the database"]},{"entry":[{},"hVersion","Input parameter. Handle to sync protocol"]},{"entry":[{},{},"version object"]},{"entry":[{},"hQuery","Input parameter. Handle to the query"]},{"entry":[{},{},"object. It provides the rule to define or"]},{"entry":[{},{},"restrict the data set."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have"]},{"entry":["conditions","been earlier returned by the function call"]},{"entry":[{},"SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","This method is equivalent to the following algorithm:"]},{"entry":[{},"SyncProtocolAddStartMessage(hSyncProtocol,"]},{"entry":[{},"REQUEST_QUERY)"]},{"entry":[{},"SyncProtocolAddUserContextElement(hSyncProtocol,"]},{"entry":[{},"hUserContext)"]},{"entry":[{},"SyncProtocolAddDatabaseIdentifierElement"]},{"entry":[{},"(hSyncProtocol, hDatabase)"]},{"entry":[{},"SyncProtocolAddVersionElement(hSyncProtocol,"]},{"entry":[{},"hVersion)"]},{"entry":[{},"DO; There must be at least one Query element"]},{"entry":[{},"SyncProtocolAddQueryElement(hSyncProtocol,"]},{"entry":[{},"hQueryElement,"]},{"entry":[{},"QUERY_FLAG, NONE_FLAG)"]},{"entry":[{},"WHILE (More Query elements)"]},{"entry":[{},"SyncProtocolAddEndElement (hSyncProtocol)"]},{"entry":[{},"SyncProtocolAddEndMessage(hSyncProtocol)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0175","num":"0239"},"tables":{"@attributes":{"id":"TABLE-US-00034","num":"00034"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Adds \u201cQuery Response\u201d message to the protocol object."]},{"entry":[{},"Only the responding node calls this method."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocalAddQueryResponseMessage (SYNC_"]},{"entry":[{},"PROTOCOL_HANDLE hSyncProtocol, USER_"]},{"entry":[{},"CONTEXT_HANDLE hUserContext, DATABASE_"]},{"entry":[{},"HANDLE hDatabase, VERSION_HANDLE hVersion,"]},{"entry":[{},"QUERY_HANDLE hQuery, QUERY_HANDLE"]},{"entry":[{},"hExpertise)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle"]},{"entry":[{},{},"to sync protocol object"]},{"entry":[{},"hUserContext","Input parameter. Handle to an object that"]},{"entry":[{},{},"uniquely identifies the user context"]},{"entry":[{},"hDatabase","Input parameter. Handle to an object that"]},{"entry":[{},{},"uniquely identifies the database"]},{"entry":[{},"hVersion","Input parameter. Handle to sync protocol"]},{"entry":[{},{},"version object"]},{"entry":[{},"hQuery","Input parameter. Handle to the query ob-"]},{"entry":[{},{},"ject. It provides the coverage of the data"]},{"entry":[{},{},"set at the responding node (handheld)."]},{"entry":[{},"hExpertise","Input parameter. Handle to an expertise"]},{"entry":[{},{},"object. It specifies the data the responding"]},{"entry":[{},{},"node can provide from its local data"]},{"entry":[{},{},"store"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have"]},{"entry":["conditions","been earlier returned by the function call"]},{"entry":[{},"SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","This method is equivalent to the following"]},{"entry":[{},"algorithm:"]},{"entry":[{},"SyncProtocolAddStartMessage(hSyncProtocol,"]},{"entry":[{},"QUERY_RESPONSE)"]},{"entry":[{},"SyncProtocolAddUserContextElement(hSyncProtocol,"]},{"entry":[{},"hUserContext)"]},{"entry":[{},"SyncProtocolAddDatabaseldentifierElement"]},{"entry":[{},"(hSyncProtocol, hDatabase)"]},{"entry":[{},"SyncProtocolAddVersionElement (hSyncProtocol,"]},{"entry":[{},"hVersion)"]},{"entry":[{},";Determine if query and expertise have common elements"]},{"entry":[{},"DO; There must be at least one Query\/Expertise element"]},{"entry":[{},"SyncProtocolAddQueryElement(hSyncProtocol,"]},{"entry":[{},"hQueryElement,"]},{"entry":[{},"XXXXX_FLAG, NONE_FLAG)"]},{"entry":[{},"WHILE (More Query\/Expertise elements)"]},{"entry":[{},"SyncProtocolAddEndElement (hSyncProtocol)"]},{"entry":[{},"SyncProtocolAddEndMessage(hSyncProtocol)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0176","num":"0240"},"tables":{"@attributes":{"id":"TABLE-US-00035","num":"00035"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Adds \u201cRequest Update\u201d message to the protocol object."]},{"entry":[{},"Only the originating node calls this method."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolAddRequestUpdateMessage (SYNC_"]},{"entry":[{},"PROTOCOL_HANDLE hSyncProtocol, USER_"]},{"entry":[{},"CONTEXT_HANDLE hUserContext, DATABASE_"]},{"entry":[{},"HANDLE hDatabase, VERSION_HANDLE hVersion,"]},{"entry":[{},"QUERY_HANDLE hQuery)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]},{"entry":[{},"hUserContext","Input parameter. Handle to an object that"]},{"entry":[{},{},"uniquely identifies the user context"]},{"entry":[{},"hDatabase","Input parameter. Handle to an object that"]},{"entry":[{},{},"uniquely identifies the database"]},{"entry":[{},"hVersion","Input parameter. Handle to sync protocol"]},{"entry":[{},{},"version object"]},{"entry":[{},"hQuery","Input parameter. Handle to the query"]},{"entry":[{},{},"object. It defines the data set, which the"]},{"entry":[{},{},"responding node (handheld) must return"]},{"entry":[{},{},"in its \u201cUpdate Response\u201d message."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have"]},{"entry":["conditions","been earlier returned by the function call"]},{"entry":[{},"SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","This method is equivalent to the following algorithm:"]},{"entry":[{},"SyncProtocolAddStartMessage(hSyncProtocol,"]},{"entry":[{},"REQUEST_UPDATE)"]},{"entry":[{},"SyncProtocolAddUserContextElement(hSyncProtocol,"]},{"entry":[{},"hUserContext)"]},{"entry":[{},"SyncProtocolAddDatabaseIdentifierElement"]},{"entry":[{},"(hSyncProtocol, hDatabase)"]},{"entry":[{},"SyncProtocolAddVersionElement(hSyncProtocol,"]},{"entry":[{},"hVersion)"]},{"entry":[{},"WHILE (There are more Query elements)"]},{"entry":[{},"SyncProtocolAddQueryElement(hSyncProtocol,"]},{"entry":[{},"hQueryElement,"]},{"entry":[{},"QUERY_FLAG, NONE_FLAG)"]},{"entry":[{},"If (Number of Query elements is greater than 0)"]},{"entry":[{},"SyncProtocolAddEndElement(hSyncProtocol)"]},{"entry":[{},"SyncProtocolAddEndMessage(hSyncProtocol)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0177","num":"0241"},"tables":{"@attributes":{"id":"TABLE-US-00036","num":"00036"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Adds \u201cUpdate Response\u201d message to the protocol object."]},{"entry":[{},"Only the responding node calls this method."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolAddUpdateResponseMessage (SYNC_"]},{"entry":[{},"PROTOCOL_HANDLE hSyncProtocol, USER_"]},{"entry":[{},"CONTEXT_HANDLE hUserContext, DATABASE_"]},{"entry":[{},"HANDLE hDatabase, VERSION_HANDLE hVersion,"]},{"entry":[{},"UPDATE_HANDLE hUpdate, UPDATE_READ_"]},{"entry":[{},"CALLBACK fnReadCallback, VOID* pState,"]},{"entry":[{},"QUERY_HANDLE hPreQuestion, QUERY_HANDLE"]},{"entry":[{},"hPostQuestion)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]},{"entry":[{},"hUserContext","Input parameter. Handle to an object"]},{"entry":[{},{},"that uniquely identifies the user"]},{"entry":[{},{},"context"]},{"entry":[{},"hDatabase","Input parameter. Handle to an object"]},{"entry":[{},{},"that uniquely identifies the database"]},{"entry":[{},"hVersion","Input parameter. Handle to sync pro-"]},{"entry":[{},{},"tocol version object"]},{"entry":[{},"hUpdate","Input parameter. Handle to the update"]},{"entry":[{},{},"object. It provides the data that has been"]},{"entry":[{},{},"requested by the originating node."]},{"entry":[{},"fnReadCallback","Input parameter. The callback method"]},{"entry":[{},{},"provided by an application to read data"]},{"entry":[{},{},"from an offset in the Update element."]},{"entry":[{},{},"This is used if any element in the"]},{"entry":[{},{},"Update object does not"]},{"entry":[{},{},"contain data."]},{"entry":[{},"pState","Input parameter. This shall be passed as"]},{"entry":[{},{},"an argument to the update read callback"]},{"entry":[{},{},"method."]},{"entry":[{},"hPreQuestion","Input parameter. Handle to the query"]},{"entry":[{},{},"object. It identifies the initial query."]},{"entry":[{},"hPostQuestion","Input parameter. Handle to the query"]},{"entry":[{},{},"object. It identifies the answered query."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have"]},{"entry":["conditions","been earlier returned by the function call"]},{"entry":[{},"SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","This method is equivalent to the following algorithm:"]},{"entry":[{},"SyncProtocolAddStartMessage(hSyncProtocol, UPDATE_"]},{"entry":[{},"RESPONSE)"]},{"entry":[{},"SyncProtocolAddUserContextElement(hSyncProtocol,"]},{"entry":[{},"hUserContext)"]},{"entry":[{},"SyncProtocolAddDatabaseIdentifierElement(hSyncProtocol,"]},{"entry":[{},"hDatabase)"]},{"entry":[{},"SyncProtocolAddVersionElement(hSyncProtocol, hVersion)"]},{"entry":[{},"WHILE (There are more Pre-question Query elements)"]},{"entry":[{},"SyncProtocolAddQueryElement(hSyncProtocol,"]},{"entry":[{},"hQueryElement,"]},{"entry":[{},"QUERY_FLAG, PRE_QUESTION_FLAG)"]},{"entry":[{},"If (Number of Pre-question Query elements was greater"]},{"entry":[{},"than 0)"]},{"entry":[{},"SyncProtocolAddEndElement(hSyncProtocol)"]},{"entry":[{},"WHILE (There are more Update elements)"]},{"entry":[{},"SyncProtocolAddUpdateElement(hSyncProtocol,"]},{"entry":[{},"hDatabase, hUpdateElement, . . .)"]},{"entry":[{},"If (Number of Update elements was greater than 0)"]},{"entry":[{},"SyncProtocolAddEndElement(hSyncProtocol)"]},{"entry":[{},"WHILE (There are more Post-question Query elements)"]},{"entry":[{},"SyncProtocolAddEndElement(hSyncProtocol),"]},{"entry":[{},"hQueryElement,"]},{"entry":[{},"QUERY_FLAG, POST_QUESTION_FLAG)"]},{"entry":[{},"If (Number of Post-question Query elements was greater"]},{"entry":[{},"than 0)"]},{"entry":[{},"SyncProtocolAddEndElement(hSyncProtocol)"]},{"entry":[{},"SyncProtocolAddEndMessage(hSyncProtocol)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0178","num":"0242"},"tables":{"@attributes":{"id":"TABLE-US-00037","num":"00037"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Adds \u201cUpdate Report\u201d message to the protocol object."]},{"entry":[{},"Only the originating node calls this method."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolAddUpdateReportMessage (SYNC_"]},{"entry":[{},"PROTOCOL_HANDLE hSyncProtocol, USER_"]},{"entry":[{},"CONTEXT_HANDLE hUserContext, DATABASE_"]},{"entry":[{},"HANDLE hDatabase, VERSION_HANDLE hVersion,"]},{"entry":[{},"UPDATE_HANDLE hUpdate, UPDATEREAD_"]},{"entry":[{},"CALLBACK fnReadCallback, VOID* pState, QUERY_"]},{"entry":[{},"HANDLE hPreQuestion, QUERY_HANDLE"]},{"entry":[{},"hPostQuestion)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]},{"entry":[{},"hUserContext","Input parameter. Handle to an object"]},{"entry":[{},{},"that uniquely identifies the user context"]},{"entry":[{},"Database","Input parameter. Handle to an object"]},{"entry":[{},{},"that uniquely identifies the database"]},{"entry":[{},"hVersion","Input parameter. Handle to sync"]},{"entry":[{},{},"protocol version object"]},{"entry":[{},"hUpdate","Input parameter. Handle to the update"]},{"entry":[{},{},"object. It provides the modifications at"]},{"entry":[{},{},"other sync nodes to be applied at the"]},{"entry":[{},{},"responding node."]},{"entry":[{},"fnReadCallback","Input parameter. The callback method"]},{"entry":[{},{},"provided by an application to read data"]},{"entry":[{},{},"from an offset in the Update element."]},{"entry":[{},{},"This is used if any element in the"]},{"entry":[{},{},"Update object does not contain data."]},{"entry":[{},"pState","Input parameter. This shall be passed"]},{"entry":[{},{},"as an argument to the update read"]},{"entry":[{},{},"callback method."]},{"entry":[{},"hPreQuestion","Input parameter. Handle to the query"]},{"entry":[{},{},"object. It identifies the initial query."]},{"entry":[{},"hPostQueStion","Input parameter. Handle to the query"]},{"entry":[{},{},"object. It identifies the answered query."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have"]},{"entry":["conditions","been earlier returned by the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","This method is equivalent to the following algorithm:"]},{"entry":[{},"SyncProtocolAddStartMessage(hSyncProtocol, UPDATE_"]},{"entry":[{},"REPORT)"]},{"entry":[{},"SyncProtocolAddUserContextElement(hSyncProtocol,"]},{"entry":[{},"hUserContext)"]},{"entry":[{},"SyncProtocolAddDatabaseldentifierElement(hSyncProtocol,"]},{"entry":[{},"hDatabase)"]},{"entry":[{},"SyncProtocolAdd Version Element(hSyncProtocol,"]},{"entry":[{},"hVersion)"]},{"entry":[{},"WHILE (There are more Pre-question Query elements)"]},{"entry":[{},"SyncProtocolAddQueryElement(hSyncProtocol,"]},{"entry":[{},"hQueryElement,"]},{"entry":[{},"QUERY_FLAG, PRE_QUESTION_FLAG)"]},{"entry":[{},"If (Number of Pre-question Query elements was greater"]},{"entry":[{},"than 0)"]},{"entry":[{},"SyncProtocolAddEndElement(hSyncProtocol)"]},{"entry":[{},"WHILE (There are more Update elements)"]},{"entry":[{},"SyncProtocolAddUpdateElement(hSyncProtocol,"]},{"entry":[{},"hDatabase, hUpdateElement,"]},{"entry":[{},"If (Number of Update elements was greater than 0)"]},{"entry":[{},"SyncProtocolAddEndElement(hSyncProtocol)"]},{"entry":[{},"WHILE (There are more Post-question Query elements)"]},{"entry":[{},"SyncProtocolAddQueryElement(hSyncProtocol,"]},{"entry":[{},"hQueryElement,"]},{"entry":[{},"QUERY_FLAG, POST_QUESTION_FLAG)"]},{"entry":[{},"If (Number of Post-question Query elements was greater"]},{"entry":[{},"than 0)"]},{"entry":[{},"SyncProtocolAddEndElement(hSyncProtocol)"]},{"entry":[{},"SyncProtocolAddEndMessage(hSyncProtocol)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0179","num":"0243"},"tables":{"@attributes":{"id":"TABLE-US-00038","num":"00038"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Adds \u201cUpdate Acknowledge\u201d message to the protocol"]},{"entry":[{},"object. Only the responding node calls this method."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolAddUpdateAcknowledgeMessage (SYNC_"]},{"entry":[{},"PROTOCOL_HANDLE hSyncProtocol,"]},{"entry":[{},"USER_CONTEXT_HANDLE hUserContext,"]},{"entry":[{},"DATABASE_HANDLE hDatabase, VERSION_"]},{"entry":[{},"HANDLE hVersion)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]},{"entry":[{},"hUserContext","Input parameter. Handle to an object"]},{"entry":[{},{},"that uniquely identifies the user context"]},{"entry":[{},"hDatabase","Input parameter. Handle to an object"]},{"entry":[{},{},"that uniquely identifies the database"]},{"entry":[{},"hVersion","Input parameter. Handle to sync protocol"]},{"entry":[{},{},"version object"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must"]},{"entry":["conditions","have been earlier returned by the function call"]},{"entry":[{},"SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","This method is equivalent to the following algorithm:"]},{"entry":[{},"SyncProtocolAddStartMessage(hSyncProtocol, UPDATE_"]},{"entry":[{},"ACKNOWLEDGE)"]},{"entry":[{},"SyncProtocolAddUserContextElement(hSyncProtocol,"]},{"entry":[{},"hUserContext)"]},{"entry":[{},"SyncProtocolAddDatabaseIdentifierElement(hSyncProtocol,"]},{"entry":[{},"hDatabase)"]},{"entry":[{},"SyncProtocolAddVersion Element(hSyncProtocol,"]},{"entry":[{},"hVersion)"]},{"entry":[{},"SyncProtocolAddEndMessage(hSyncProtocol)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0180","num":"0244"},"tables":{"@attributes":{"id":"TABLE-US-00039","num":"00039"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Adds \u201cCancel Session\u201d message to the protocol object."]},{"entry":[{},"Both participating nodes can call this method."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolAddCancelSessionMessage (SYNC_"]},{"entry":[{},"PROTOCOL_HANDLE hSyncProtocol,"]},{"entry":[{},"USER_CONTEXT_HANDLE hUserContext, VERSION_"]},{"entry":[{},"HANDLE hVersion, CANCEL_HANDLE hCancel)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]},{"entry":[{},"hUserContext","Input parameter. Handle to an object"]},{"entry":[{},{},"that uniquely identifies the user context"]},{"entry":[{},"hVersion","Input parameter. Handle to sync protocol"]},{"entry":[{},{},"version object"]},{"entry":[{},"hCancel","Input parameter. Handle to an object that"]},{"entry":[{},{},"provides details on why a cancel is being"]},{"entry":[{},{},"requested for the specified session."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have"]},{"entry":["conditions","been earlier returned by the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","This method is equivalent to the following algorithm:"]},{"entry":[{},"SyncProtocolAddStartMessage(hSyncProtocol, CANCEL_"]},{"entry":[{},"SESSION)"]},{"entry":[{},"SyncProtocolAddUserContextElement(hSyncProtocol,"]},{"entry":[{},"hUserContext)"]},{"entry":[{},"SyncprotocolAddVersionElement(hSyncProtocol, hVersion)"]},{"entry":[{},"SyncProtocolAddCancelElement(hSyncProtocol, hCancel)"]},{"entry":[{},"SyncProtocolAddEndMessage(hSyncProtocol)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0181","num":"0245"},"tables":{"@attributes":{"id":"TABLE-US-00040","num":"00040"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Adds \u201cCancel Database Sync\u201d message to the protocol"]},{"entry":[{},"object. Both participating nodes can call this method."]},{"entry":["Prototype","SyncProtocolAddCancelDataSyncMessage (SYNC_"]},{"entry":[{},"PROTOCOL_HANDLE hSyncProtocol, USER_"]},{"entry":[{},"CONTEXT_HANDLE hUserContext, DATABASE_"]},{"entry":[{},"HANDLE hDatabase, VERSION_HANDLE hVersion,"]},{"entry":[{},"CANCEL_HANDLE hCancel)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]},{"entry":[{},"hUserContext","Input parameter. Handle to an object that"]},{"entry":[{},{},"uniquely identifies the user context"]},{"entry":[{},"hDatabase","Input parameter. Handle to an object that"]},{"entry":[{},{},"uniquely identifies the database"]},{"entry":[{},"hVersion","Input parameter. Handle to sync protocol"]},{"entry":[{},{},"version object"]},{"entry":[{},"hCancel","Input parameter. Handle to an object that"]},{"entry":[{},{},"provides details on why a cancel is being"]},{"entry":[{},{},"requested for the specified database sync."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and"]},{"entry":["conditions","must have been earlier returned by the function"]},{"entry":[{},"call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","This method is equivalent to the following algorithm:"]},{"entry":[{},"SyncProtocolAddStartMessage (hSyncProtocol,"]},{"entry":[{},"CANCEL_SESSION)"]},{"entry":[{},"SyncProtocolAddUserContextElement"]},{"entry":[{},"(hSyncProtocolUserContext)"]},{"entry":[{},"SyncProtocolAddDatabaseIdentifierElement"]},{"entry":[{},"(hSyncProtocol, hDatabase)"]},{"entry":[{},"SyncProtocolAdd Version Element (hSyncProtocol,"]},{"entry":[{},"hVersion)"]},{"entry":[{},"SyncProtocolAddCancelElement (hSyncProtocol,"]},{"entry":[{},"hCancel)"]},{"entry":[{},"SyncProtocolAddEndMessage (hSyncProtocol)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Exemplary Writer Application Programming Interface","The reader interface to the synchronization protocol described herein provides a set of APIs to read a sync packet and return various sync messages and elements that are part of it. A reader method checks if the current element is complete in the available data, and if not it calls a transport API to read more blocks of data until the element is completely read. The following methods comprise the reader interface of sync protocol API. It is appreciated that other API methods can be defined and added to those described herein.","SyncProtocolGetNextMessage",{"@attributes":{"id":"p-0184","num":"0248"},"tables":{"@attributes":{"id":"TABLE-US-00041","num":"00041"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Determines the next message in the sync packet."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolGetNextMessage (SYNC_PROTOCOL_"]},{"entry":[{},"HANDLE hSyncProtocol, MESSAGE_HANDLE*"]},{"entry":[{},"phMessage)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]},{"entry":[{},"phMessage","Output parameter. Reference to the next"]},{"entry":[{},{},"message in the sync packet is returned in"]},{"entry":[{},{},"this parameter. If there are no more mes-"]},{"entry":[{},{},"sages left in the sync packet, NULL is"]},{"entry":[{},{},"assigned to it and no error is returned."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have"]},{"entry":["conditions","been earlier returned by the function call"]},{"entry":[{},"SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","If the read buffer associated with sync protocol object"]},{"entry":[{},"has no data, this method calls a transport API to read"]},{"entry":[{},"data. If the protocol is in the middle of parsing the"]},{"entry":[{},"current message, it skips to the next message. It may"]},{"entry":[{},"have to read multiple blocks using the transport API"]},{"entry":[{},"before it determines the next message."]},{"entry":[{},"SyncProtocolGetMessageType"]},{"entry":["Purpose","Determines the message type for the specified message."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolGetMessageType (SYNC_PROTOCOL_"]},{"entry":[{},"HANDLE hSyncProtocol, MESSAGE_HANDLE"]},{"entry":[{},"hMessage, MESSAGE_TYPE* pMesgType)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]},{"entry":[{},"hMessage","Input parameter. Handle to the current"]},{"entry":[{},{},"message in the sync packet."]},{"entry":[{},"pMesgType","Output parameter to store the message"]},{"entry":[{},{},"type."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have"]},{"entry":["conditions","been earlier returned by the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","None"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0185","num":"0249"},"tables":{"@attributes":{"id":"TABLE-US-00042","num":"00042"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Determines the next element in the current"]},{"entry":[{},"sync message."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolGetNextElement (SYNC_PROTOCOL_"]},{"entry":[{},"HANDLE hSyncProtocol, MESSAGE_HANDLE"]},{"entry":[{},"hMessage, ELEMENT_HANDLE phElement)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]},{"entry":[{},"hMessage","Input parameter. Handle to the current"]},{"entry":[{},{},"message in the sync packet."]},{"entry":[{},"phElement","Output parameter. Reference to the next"]},{"entry":[{},{},"element in the current message is returned"]},{"entry":[{},{},"in this parameter. If there are no more"]},{"entry":[{},{},"elements left in the current sync message,"]},{"entry":[{},{},"NULL is assigned to it and no"]},{"entry":[{},{},"error is returned."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have"]},{"entry":["conditions","been earlier returned by the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","If the read buffer associated with sync protocol object"]},{"entry":[{},"has no data left to parse, this method calls a transport"]},{"entry":[{},"API to read data. If the protocol is in the middle of"]},{"entry":[{},"parsing the current element, it skips to the next element."]},{"entry":[{},"It may have to read multiple blocks using the transport API"]},{"entry":[{},"before it determines the next element."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0186","num":"0250"},"tables":{"@attributes":{"id":"TABLE-US-00043","num":"00043"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Determines the element type for the specified element."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolGetElementType (SYNC_PROTOCOL_"]},{"entry":[{},"HANDLE hSyncProtocol, ELEMENT_HANDLE"]},{"entry":[{},"hElement, ELEMENT_TYPE* pElemType)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]},{"entry":[{},"hElement","Input parameter. Handle to the current"]},{"entry":[{},{},"element in the message."]},{"entry":[{},"pElemType","Output parameter to store the element"]},{"entry":[{},{},"type."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have"]},{"entry":["conditions","been earlier returned by the function call"]},{"entry":[{},"SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","Based on the element type, appropriate Sync Protocol"]},{"entry":[{},"Reader API should be called to parse it."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0187","num":"0251"},"tables":{"@attributes":{"id":"TABLE-US-00044","num":"00044"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Determines the user context for this message from the cur-"]},{"entry":[{},"rent element in the sync packet, create a user context ob-"]},{"entry":[{},"ject and returns the handle to it in the output parameter."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolGetUserContextElement (SYNC_"]},{"entry":[{},"PROTOCOL_HANDLE hSyncProtocol, ELEMENT_"]},{"entry":[{},"HANDLE hElement, USER_CONTEXT_HANDLE"]},{"entry":[{},"phUserContext)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]},{"entry":[{},"hElement","Input parameter. Handle to the current"]},{"entry":[{},{},"element in the message."]},{"entry":[{},"phUserContext","Output parameter. Pointer to the handle"]},{"entry":[{},{},"to user context object."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must"]},{"entry":["conditions","have been earlier returned by the function call"]},{"entry":[{},"SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","None"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0188","num":"0252"},"tables":{"@attributes":{"id":"TABLE-US-00045","num":"00045"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Determines the session information for this message from"]},{"entry":[{},"the current element in the sync packet, create a session"]},{"entry":[{},"id object and return the handle to it in the output parameter."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolGetSessionIDElement (SYNC_PROTOCOL_"]},{"entry":[{},"HANDLE hSyncProtocol, ELEMENT_HANDLE"]},{"entry":[{},"hElement, SESSIONID_HANDLE phSession)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]},{"entry":[{},"hElement","Input parameter. Handle to the current"]},{"entry":[{},{},"element in the message."]},{"entry":[{},"phSession","Output parameter. Pointer to the handle"]},{"entry":[{},{},"to session id object."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have"]},{"entry":["conditions","been earlier returned by the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","None"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0189","num":"0253"},"tables":{"@attributes":{"id":"TABLE-US-00046","num":"00046"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Determines the database information for this message from"]},{"entry":[{},"the current element in the sync packet, create a database"]},{"entry":[{},"object and return the handle to it in the output parameter."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolGetDatabaseIdentifierElement"]},{"entry":[{},"(SYNC_PROTOCOL_HANDLE hSyncProtocol,"]},{"entry":[{},"ELEMENT_HANDLE hElement,"]},{"entry":[{},"DATABASE_HANDLE* phDatabase)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle"]},{"entry":[{},{},"to sync protocol object"]},{"entry":[{},"hElement","Input parameter. Handle to the current"]},{"entry":[{},{},"element in the message."]},{"entry":[{},"phDatabase","Output parameter. Pointer to the handle"]},{"entry":[{},{},"to database object."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must"]},{"entry":["conditions","have been earlier returned by the function call"]},{"entry":[{},"SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","None"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0190","num":"0254"},"tables":{"@attributes":{"id":"TABLE-US-00047","num":"00047"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Determines the version information for this message from"]},{"entry":[{},"the current element in the sync packet, create a version"]},{"entry":[{},"object and return the handle to it in the output"]},{"entry":[{},"parameter."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolGetVersionElement"]},{"entry":[{},"(SYNC_PROTOCOL_HANDLE hSyncProtocol,"]},{"entry":[{},"ELEMENT_HANDLE hElement, VERSION_HANDLE*"]},{"entry":[{},"phVersion)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle"]},{"entry":[{},{},"to sync protocol object"]},{"entry":[{},"hElement","Input parameter. Handle to the current"]},{"entry":[{},{},"element in the message."]},{"entry":[{},"phVersion","Output parameter. Pointer to the handle"]},{"entry":[{},{},"to version object."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must"]},{"entry":["conditions","have been earlier returned by the function call"]},{"entry":[{},"SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","None"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0191","num":"0255"},"tables":{"@attributes":{"id":"TABLE-US-00048","num":"00048"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"315pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Reads the query from the current element in the sync packet, create a query"]},{"entry":[{},"element object and return the handle to it in the output parameter. It also"]},{"entry":[{},"determines various flag values associated with the query element."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolGetQueryElement (SYNC_PROTOCOL_HANDLE hSyncProtocol, ELEMENT_HANDLE"]},{"entry":[{},"hElement, QUERY_ELEMENT_HANDLE* phQuery, QUERY_EXPERTISE_FLAG* pfQueryExpertise,"]},{"entry":[{},"QUERY_TYPE_FLAG* pfQueryType)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to sync protocol object"]},{"entry":[{},"hElement","Input parameter. Handle to the current element in the"]},{"entry":[{},{},"message."]},{"entry":[{},"phQuery","Output parameter. Pointer to the handle to query element"]},{"entry":[{},{},"object."]},{"entry":[{},"pfQueryExpertise","Output parameter. Whether query element is part of query"]},{"entry":[{},{},"object or expertise."]},{"entry":[{},"pfQueryType","Output parameter. Whether query element is part of pre-"]},{"entry":[{},{},"question or post-question."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have been earlier returned by"]},{"entry":["conditions","the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","None"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0192","num":"0256"},"tables":{"@attributes":{"id":"TABLE-US-00049","num":"00049"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"315pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Reads the update from this element in the sync packet, create an update"]},{"entry":[{},"element object and return the handle to it in the output parameter."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolGetUpdateElement (SYNC_PROTOCOL_HANDLE hSyncProtocol, ELEMENT_HANDLE"]},{"entry":[{},"hElement, DATABASE_HANDLE hDatabase, UPDATE_ELEMENT_HANDLE* phUpdate,"]},{"entry":[{},"UPDATE_WRITE_CALLBACK fnWriteCallback, VOID* pState)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to sync protocol object"]},{"entry":[{},"hElement","Input parameter. Handle to the current element in the"]},{"entry":[{},{},"message."]},{"entry":[{},"hDatabase","Input parameter. Handle to the database object obtained"]},{"entry":[{},{},"earlier from this sync message."]},{"entry":[{},"phUpdate","Output parameter. Pointer to the handle to an update element"]},{"entry":[{},{},"object."]},{"entry":[{},"fnWriteCallback","Input parameter. The callback method provided by an"]},{"entry":[{},{},"application to allow writing of data at an offset for the update"]},{"entry":[{},{},"element in its local data store as the data becomes available on"]},{"entry":[{},{},"the transport channel."]},{"entry":[{},"pState","Input parameter. This shall be passed as an argument to the"]},{"entry":[{},{},"update write callback method."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have been earlier returned by"]},{"entry":["conditions","the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","An Update element may have a large amount of data and might require multiple"]},{"entry":[{},"read calls on the transport to gather all of it. If UPDATE_WRITE_CALLBACK is"]},{"entry":[{},"NULL, this method will read the complete data for the update element from the"]},{"entry":[{},"transport before returning a handle to it. If the calling function has specified the"]},{"entry":[{},"callback method, it would be called to provide the data in chunks as it becomes"]},{"entry":[{},"available on the transport. In either case, the function returns when the complete"]},{"entry":[{},"data for the update element has been made available to the calling function."]},{"entry":[{},"The signature of the UPDATE_WRITE_CALLBACK would look like:"]},{"entry":[{},"ERR"]},{"entry":[{},"WriteUpdateElement (DATABASE_HANDLE hDatabase,"]},{"entry":[{},"UPDATE_ELEMENT_HANDLE hUpdate, DWORD dwWriteOffset, UCHAR*"]},{"entry":[{},"pBuffer, DWORD dwBytesWrite, VOID* pState)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0193","num":"0257"},"tables":{"@attributes":{"id":"TABLE-US-00050","num":"00050"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Reads the cancel information for this message from the"]},{"entry":[{},"current element in the sync packet, create a cancel object"]},{"entry":[{},"and return the handle to it in the output parameter."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolGetCancelElement"]},{"entry":[{},"(SYNC_PROTOCOL_HANDLE hSyncProtocol,"]},{"entry":[{},"ELEMENT_HANDLE hElement,"]},{"entry":[{},"CANCEL_HANDLE* phCancel)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to"]},{"entry":[{},{},"sync protocol object"]},{"entry":[{},"hElement","Input parameter. Handle to the current"]},{"entry":[{},{},"element in the message."]},{"entry":[{},"phCancel","Output parameter. Pointer to the handle to"]},{"entry":[{},{},"cancel object."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have"]},{"entry":["conditions","been earlier returned by the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","None"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0194","num":"0258"},"tables":{"@attributes":{"id":"TABLE-US-00051","num":"00051"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"315pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","Reads the user\/third party defined element from the sync packet, create an"]},{"entry":[{},"update element object and return the handle to it in the output parameter."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolGetGenericElement (SYNC_PROTOCOL_HANDLE hSyncProtocol, ELEMENT_HANDLE"]},{"entry":[{},"hElement, DATABASE_HANDLE hDatabase, GENERIC_ELEMENT_HANDLE* phGeneric,"]},{"entry":[{},"GENERIC_WRITE_CALLBACK fnWriteCallback, VOID* pState)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to sync protocol object"]},{"entry":[{},"hElement","Input parameter. Handle to the current element in the"]},{"entry":[{},{},"message."]},{"entry":[{},"hDatabase","Input parameter. Handle to the database object obtained"]},{"entry":[{},{},"earlier from this sync message."]},{"entry":[{},"phGeneric","Output parameter. Pointer to the handle to the user-defined"]},{"entry":[{},{},"element object."]},{"entry":[{},"fnWriteCallback","Input parameter. The callback method provided by an"]},{"entry":[{},{},"application to allow writing of data at an offset for the generic"]},{"entry":[{},{},"element in its local data store as the data becomes available on"]},{"entry":[{},{},"the transport channel."]},{"entry":[{},"pState","Input parameter. This shall be passed as an argument to the"]},{"entry":[{},{},"update write callback method."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have been earlier returned by"]},{"entry":["conditions","the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","The write callback method allows writing a specified number of bytes from a given"]},{"entry":[{},"offset in the element. The callback method cannot be NULL."]},{"entry":[{},"The signature of GENERIC_WRITE_CALLBACK method for Generic element"]},{"entry":[{},"should be:"]},{"entry":[{},"ERR"]},{"entry":[{},"WriteGenericElement (DATABASE_HANDLE hDatabase,"]},{"entry":[{},"GENERIC_ELEMENT_HANDLE* phGeneric, DWORD dwWriteOffset, UCHAR*"]},{"entry":[{},"pBuffer, DWORD dwBytesWrite, VOID* pState)"]},{"entry":[{},"This method is implemented by the third party component that defines the"]},{"entry":[{},"element. The first parameter is an in\/out parameter. In the first"]},{"entry":[{},"WriteGenericElement call, pointer to NULL handle should be passed. This"]},{"entry":[{},"method shall create a Generic element and return a handle to it that is passed in"]},{"entry":[{},"subsequent calls."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0195","num":"0259"},"tables":{"@attributes":{"id":"TABLE-US-00052","num":"00052"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"329pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","This method is called if the message type is \u201cRequest Query\u201d. It reads the"]},{"entry":[{},"current sync message and populates user context, database identifier, version"]},{"entry":[{},"information and query object and returns handles to these in the output"]},{"entry":[{},"parameters."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolGetRequestQueryMessage (SYNC_PROTOCOL_HANDLE hSyncProtocol,"]},{"entry":[{},"MESSAGE_HANDLE hMessage, USER_CONTEXT_HANDLE* phUserContext, DATABASE_HANDLE*"]},{"entry":[{},"phDatabase, VERSION_HANDLE* phVersion, QUERY_HANDLE* phQuery)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to sync protocol object"]},{"entry":[{},"hMessage","Input parameter. Handle to the current message in the sync"]},{"entry":[{},{},"packet."]},{"entry":[{},"phUserContext","Output parameter. Pointer to handle to an object that uniquely"]},{"entry":[{},{},"identifies the user context"]},{"entry":[{},"phDatabase","Output parameter. Pointer to handle to an object that uniquely"]},{"entry":[{},{},"identifies the database"]},{"entry":[{},"phVersion","Output parameter. Pointer to handle to sync protocol version"]},{"entry":[{},{},"object"]},{"entry":[{},"phQuery","Output parameter. Pointer to handle to the query object. It"]},{"entry":[{},{},"provides the rule to define or restrict the data set."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"329pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have been earlier returned by"]},{"entry":["conditions","the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","The calling method is responsible for releasing these objects. It ignores all other"]},{"entry":[{},"elements that might have been packaged in this message"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0196","num":"0260"},"tables":{"@attributes":{"id":"TABLE-US-00053","num":"00053"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"329pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","This method is called if the message type is \u201cQuery Response\u201d. It reads the"]},{"entry":[{},"current sync message and populates user context, database identifier, version"]},{"entry":[{},"information, query and expertise objects and returns handle to these in the"]},{"entry":[{},"output parameters."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolGetQueryResponseMessage (SYNC_PROTOCOL_HANDLE hSyncProtocol,"]},{"entry":[{},"MESSAGE_HANDLE hMessage, USER_CONTEXT_HANDLE* phUserContext, DATABASE_HANDLE*"]},{"entry":[{},"phDatabase, VERSION_HANDLE* phVersion, QUERY_HANDLE* phQuery, QUERY_HANDLE*"]},{"entry":[{},"phExpertise)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to sync protocol object"]},{"entry":[{},"hMessage","Input parameter. Handle to the current message in the sync"]},{"entry":[{},{},"packet."]},{"entry":[{},"phUserContext","Output parameter. Pointer to handle to an object that uniquely"]},{"entry":[{},{},"identifies the user context"]},{"entry":[{},"phDatabase","Output parameter. Pointer to handle to an object that uniquely"]},{"entry":[{},{},"identifies the database"]},{"entry":[{},"phVersion","Output parameter. Pointer to handle to sync protocol version"]},{"entry":[{},{},"object"]},{"entry":[{},"phQuery","Output parameter. Pointer to handle to the query object."]},{"entry":[{},"phExpertise","Output parameter. Pointer to handle to the expertise object."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"329pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have been earlier returned by"]},{"entry":["conditions","the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","The calling method is responsible for releasing these objects. It ignores all other"]},{"entry":[{},"elements that might have been packaged in this message"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0197","num":"0261"},"tables":{"@attributes":{"id":"TABLE-US-00054","num":"00054"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"329pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","This method is called if the message type is \u201cRequest Update\u201d. It reads the"]},{"entry":[{},"current sync message and populates user context, database identifier, version"]},{"entry":[{},"information and query object and returns handles to these in the output"]},{"entry":[{},"parameters."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolGetRequestUpdateMessage (SYNC_PROTOCOL_HANDLE hSyncProtocol,"]},{"entry":[{},"MESSAGE_HANDLE hMessage, USER_CONTEXT_HANDLE* phUserContext, DATABASE_HANDLE*"]},{"entry":[{},"phDatabase, VERSION_HANDLE* phVersion, QUERY_HANDLE* phQuery)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to sync protocol object"]},{"entry":[{},"hMessage","Input parameter. Handle to the current message in the sync"]},{"entry":[{},{},"packet."]},{"entry":[{},"phUserContext","Output parameter. Pointer to handle to an object that uniquely"]},{"entry":[{},{},"identifies the user context"]},{"entry":[{},"phDatabase","Output parameter. Pointer to handle to an object that uniquely"]},{"entry":[{},{},"identifies the database"]},{"entry":[{},"phVersion","Output parameter. Pointer to handle to sync protocol version"]},{"entry":[{},{},"object"]},{"entry":[{},"phQuery","Output parameter. Pointer to handle to the query object."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"329pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have been earlier returned by"]},{"entry":["conditions","the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","The calling method is responsible for releasing these objects. It ignores all other"]},{"entry":[{},"elements that might have been packaged in this message"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0198","num":"0262"},"tables":{"@attributes":{"id":"TABLE-US-00055","num":"00055"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"329pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","This method is called if the message type is \u201cUpdate Response\u201d. It reads the"]},{"entry":[{},"current sync message and populates user context, database identifier, version"]},{"entry":[{},"information, update object, pre-question and post-question query objects and"]},{"entry":[{},"returns handle to these in the output parameters."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolGetUpdateResponseMessage (SYNC_PROTOCOL_HANDLE hSyncProtocol,"]},{"entry":[{},"MESSAGE_HANDLE hMessage, USER_CONTEXT_HANDLE* phUserContext, DATABASE_HANDLE*"]},{"entry":[{},"phDatabase, VERSION_HANDLE* phVersion, UPDATE_HANDLE* phUpdate,"]},{"entry":[{},"UPDATE_WRITE_CALLBACK fnWriteCallback, VOID* pState, QUERY_HANDLE* phPreQuestion,"]},{"entry":[{},"QUERY_HANDLE* phPostQuestion)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to sync protocol object"]},{"entry":[{},"hMessage","Input parameter. Handle to the current message in the sync"]},{"entry":[{},{},"packet."]},{"entry":[{},"phUserContext","Output parameter. Pointer to handle to an object that uniquely"]},{"entry":[{},{},"identifies the user context"]},{"entry":[{},"phDatabase","Output parameter. Pointer to handle to an object that uniquely"]},{"entry":[{},{},"identifies the database"]},{"entry":[{},"phVersion","Output parameter. Pointer to handle to sync protocol version"]},{"entry":[{},{},"object"]},{"entry":[{},"phUpdate","Output parameter. Pointer to handle to the update object."]},{"entry":[{},"fnWriteCallback","Input parameter. The callback method provided by an"]},{"entry":[{},{},"application to allow writing of data at an offset for the update"]},{"entry":[{},{},"element in its local data store as the data becomes available on"]},{"entry":[{},{},"the transport channel."]},{"entry":[{},"pState","Input parameter. This shall be passed as an argument to the"]},{"entry":[{},{},"update write callback method."]},{"entry":[{},"phPreQuestion","Output parameter. Pointer to handle to the pre-question query"]},{"entry":[{},{},"object."]},{"entry":[{},"phPostQuestion","Output parameter. Pointer to handle to the post-question"]},{"entry":[{},{},"query object."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"329pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have been earlier returned by"]},{"entry":["conditions","the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","The calling method is responsible for releasing these objects. It ignores all other"]},{"entry":[{},"elements that might have been packaged in this message"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0199","num":"0263"},"tables":{"@attributes":{"id":"TABLE-US-00056","num":"00056"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"329pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","This method is called if the message type is \u201cUpdate Report\u201d. It reads the current"]},{"entry":[{},"sync message and populates user context, database identifier, version"]},{"entry":[{},"information, update object, pre-question and post-question query objects and"]},{"entry":[{},"returns handle to these in the output parameters."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolGetUpdateReportMessage (SYNC_PROTOCOL_HANDLE hSyncProtocol,"]},{"entry":[{},"MESSAGE_HANDLE hMessage, USER_CONTEXT_HANDLE* phUserContext, DATABASE_HANDLE*"]},{"entry":[{},"phDatabase, VERSION_HANDLE* phVersion, UPDATE_HANDLE* phUpdate,"]},{"entry":[{},"UPDATE_WRITE_CALLBACK fnWriteCallback, VOID* pState, QUERY_HANDLE* phPreQuestion,"]},{"entry":[{},"QUERY_HANDLE* phPostQuestion)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to sync protocol object"]},{"entry":[{},"hMessage","Input parameter. Handle to the current message in the sync"]},{"entry":[{},{},"packet."]},{"entry":[{},"phUserContext","Output parameter. Pointer to handle to an object that uniquely"]},{"entry":[{},{},"identifies the user context"]},{"entry":[{},"phDatabase","Output parameter. Pointer to handle to an object that uniquely"]},{"entry":[{},{},"identifies the database"]},{"entry":[{},"phVersion","Output parameter. Pointer to handle to sync protocol version"]},{"entry":[{},{},"object"]},{"entry":[{},"phUpdate","Output parameter. Pointer to handle to the update object."]},{"entry":[{},"fnWriteCallback","Input parameter. The callback method provided by an"]},{"entry":[{},{},"application to allow writing of data at an offset for the update"]},{"entry":[{},{},"element in its local data store as the data becomes available on"]},{"entry":[{},{},"the transport channel."]},{"entry":[{},"pState","Input parameter. This shall be passed as an argument to the"]},{"entry":[{},{},"update write callback method."]},{"entry":[{},"phPreQuestion","Output parameter. Pointer to handle to the pre-question query"]},{"entry":[{},{},"object."]},{"entry":[{},"phPostQuestion","Output parameter. Pointer to handle to the post-question"]},{"entry":[{},{},"query object."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"329pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have been earlier returned by"]},{"entry":["conditions","the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","The calling method is responsible for releasing these objects. It ignores all other"]},{"entry":[{},"elements that might have been packaged in this message"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0200","num":"0264"},"tables":{"@attributes":{"id":"TABLE-US-00057","num":"00057"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"329pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","This method is called if the message type is \u201cUpdate Acknowledge\u201d. It reads the"]},{"entry":[{},"current sync message and populates user context, database identifier and"]},{"entry":[{},"version information and returns handles to these in the output parameters."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolGetUpdateAcknowledgeMessage (SYNC_PROTOCOL_HANDLE hSyncProtocol,"]},{"entry":[{},"MESSAGE_HANDLE hMessage, USER_CONTEXT_HANDLE* phUserContext, DATABASE_HANDLE*"]},{"entry":[{},"phDatabase, VERSION_HANDLE* ph Version)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to sync protocol object"]},{"entry":[{},"hMessage","Input parameter. Handle to the current message in the sync"]},{"entry":[{},{},"packet."]},{"entry":[{},"phUserContext","Output parameter. Pointer to handle to an object that uniquely"]},{"entry":[{},{},"identifies the user context"]},{"entry":[{},"phDatabase","Output parameter. Pointer to handle to an object that uniquely"]},{"entry":[{},{},"identifies the database"]},{"entry":[{},"phVersion","Output parameter. Pointer to handle to sync protocol version"]},{"entry":[{},{},"object"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"329pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have been earlier returned by"]},{"entry":["conditions","the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","The calling method is responsible for releasing these objects. It ignores all other"]},{"entry":[{},"elements that might have been packaged in this message"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0201","num":"0265"},"tables":{"@attributes":{"id":"TABLE-US-00058","num":"00058"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"329pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","This method is called if the message type is \u201cCancel Session\u201d. It reads the"]},{"entry":[{},"current sync message and populates user context, version information and"]},{"entry":[{},"cancel object and returns handles to these in the output parameters."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolGetCancelSessionMessage (SYNC_PROTOCOL_HANDLE hSyncProtocol,"]},{"entry":[{},"MESSAGE_HANDLE hMessage, USER_CONTEXT_HANDLE* phUserContext, VERSION_HANDLE*"]},{"entry":[{},"phVersion, CANCEL_HANDLE* phCancel)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to sync protocol object"]},{"entry":[{},"hMessage","Input parameter. Handle to the current message in the sync"]},{"entry":[{},{},"packet."]},{"entry":[{},"phUserContext","Output parameter. Pointer to handle to an object that uniquely"]},{"entry":[{},{},"identifies the user context"]},{"entry":[{},"phVersion","Output parameter. Pointer to handle to sync protocol version"]},{"entry":[{},{},"object"]},{"entry":[{},"phCancel","Output parameter. Pointer to handle to the cancel object."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"329pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have been earlier returned by"]},{"entry":["conditions","the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","The calling method is responsible for releasing these objects. It ignores all other"]},{"entry":[{},"elements that might have been packaged in this message"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0202","num":"0266"},"tables":{"@attributes":{"id":"TABLE-US-00059","num":"00059"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"329pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Purpose","This method is called if the message type is \u201cCancel Database Sync\u201d. It reads the"]},{"entry":[{},"current sync message and populates user context, database identifier, version"]},{"entry":[{},"information and cancel object and returns handles to these in the output"]},{"entry":[{},"parameters."]},{"entry":["Prototype","ERR"]},{"entry":[{},"SyncProtocolGetCancelDatabaseSyncMessage (SYNC_PROTOCOL_HANDLE hSyncProtocol,"]},{"entry":[{},"MESSAGE_HANDLE hMessage, USER_CONTEXT_HANDLE* phUserContext, DATABASE_HANDLE*"]},{"entry":[{},"phDatabase, VERSION_HANDLE* ph Version, CANCEL_HANDLE* phCancel)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","hSyncProtocol","Input parameter. Refers to the handle to sync protocol object"]},{"entry":[{},"hMessage","Input parameter. Handle to the current message in the sync"]},{"entry":[{},{},"packet."]},{"entry":[{},"phUserContext","Output parameter. Pointer to handle to an object that uniquely"]},{"entry":[{},{},"identifies the user context"]},{"entry":[{},"phDatabase","Output parameter. Pointer to handle to an object that uniquely"]},{"entry":[{},{},"identifies the database"]},{"entry":[{},"phVersion","Output parameter. Pointer to handle to sync protocol version"]},{"entry":[{},{},"object"]},{"entry":[{},"phCancel","Output parameter. Pointer to handle to the cancel object."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"329pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Result","Returns 0, if successful."]},{"entry":["Pre-","The sync protocol handle should be valid and must have been earlier returned by"]},{"entry":["conditions","the function call SyncProtocolInit."]},{"entry":["Side Effects","None"]},{"entry":["Comments","The calling method is responsible for releasing these objects. It ignores all other"]},{"entry":[{},"elements that might have been packaged in this message"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The preferred embodiments of the present invention, a synchronization protocol for synchronizing data between nodes, are thus described. While the present invention has been described in particular embodiments, it should be appreciated that the present invention should not be construed as limited by such embodiments, but rather construed according to the below claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and form a part of this specification, illustrate embodiments of the invention and, together with the description, serve to explain the principles of the invention:",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIGS. 5A","b":["5","5","5"]}]},"DETDESC":[{},{}]}
