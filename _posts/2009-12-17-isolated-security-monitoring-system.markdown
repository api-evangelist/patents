---
title: Isolated security monitoring system
abstract: Methods, systems, and apparatus, including computer programs encoded on computer storage media, for security monitoring. In one aspect, a device includes an integrated processing unit, including a user system and an auditor system. The user system includes a first processor and a first computer storage medium. The auditor system includes a second processor that is isolated from the first processor and a second computer storage medium that is isolated from the first computer storage medium. The second computer storage medium stores instructions that cause the second processor to load auditing data in isolation from the user system, monitor processes on the user system, determine from the auditing data that one of the processes is an unauthorized process, and perform one or more security processes on the unauthorized process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08499351&OS=08499351&RS=08499351
owner: McAfee, Inc.
number: 08499351
owner_city: Santa Clara
owner_country: US
publication_date: 20091217
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","\u00a71.0 Integrated Processing Unit","\u00a72.0 Auditor System","\u00a73.0 Monitoring the Auditor System"],"p":["This specification relates to malware detection.","Security breaches occur when malware is loaded onto a user system. Examples of malware include adware, spyware, computer viruses, root kits, worms, and Trojan horses. Once malware is executing on a user system, it can control every aspect of software on the user system, from what software programs execute on the system to what data the software programs receive, to how the software programs interact with system hardware.","Different types of malware can cause different problems for user systems. These problems can range from minor inconveniences, such as a decrease in system performance, to more serious problems, such as destruction of system files or theft of user information.","Anti-virus software and other monitoring software can be run on a user system to monitor for malware. However, any software running on a user system is vulnerable to being compromised by malware.","This specification describes technologies relating to detecting and stopping viruses and other security breaches on a user system.","In general, one aspect of the subject matter described in this specification can be embodied in a device that includes an integrated processing unit, the integrated processing unit comprising: a user system comprising a first processor and a first computer storage medium; and an auditor system comprising: a second processor, wherein the second processor is isolated from the first processor; and a second computer storage medium, wherein the second computer storage medium is isolated from the first computer storage medium so that the user system is unable to access the second computer storage medium, and the second computer storage medium stores instructions that, when executed by the second processor, cause the second processor to perform operations comprising: loading auditing data in isolation from the user system, wherein the auditing data specifies signatures of unauthorized processes; monitoring processes on the user system, and determining from the auditing data that one of the processes is an unauthorized process; and performing one or more security processes on the unauthorized process.","These and other embodiments can each optionally include one or more of the following features. The second processor can be physically isolated from the first processor. The second computer storage medium can be physically isolated from the first computer storage medium. Determining that the process is an unauthorized process can include determining that the first processor is executing program instructions that are not associated with a process in a process table for the user system. The process table can be stored on the first computer storage medium. The auditing data can specify a threshold time for a particular process, and determining that the process is an unauthorized process can include determining that an actual time the user system takes to execute the particular process is longer than the threshold time. Determining that the process is an unauthorized process can include matching stored program data for the process to a signature of an unauthorized processes that is specified in the auditing data. Determining that the process is an unauthorized process can include detecting network traffic initiated by the process, and matching patterns in the network traffic to patterns associated with unauthorized processes in the auditing data. Monitoring processes on the system can include monitoring one or more of: process tables, physical memory allocations, virtual memory allocations, kernel code, process code, disk drives, cache data, or BIOS data stored on the first computer storage medium.","Performing one or more security processes on the unauthorized process can include terminating an unauthorized process. Terminating the unauthorized process can include determining an appropriate command using an application programming interface for an operating system on the user system, wherein the command instructs the operating system to terminate the unauthorized process; and sending the command to the operating system. Terminating the unauthorized process can include modifying, by the second processor, data stored in a process table on the first computer storage device to remove the unauthorized process from the process table. Terminating the unauthorized process can include storing in the user system, by the second processor, data identifying a region of the first computer storage medium used by the unauthorized process, the data indicating that instructions stored in the region of the first computer storage device should not be executed by the first processor. The data can be stored in one or more registers in the user system, wherein the registers are read-write registers for the auditor system and are read-only registers for the user system. Performing one or more security processes can include halting execution of the first processor.","In general, another aspect of the subject matter described in this specification can be embodied in a method that includes the actions of loading auditing data onto an auditor system, wherein the auditing data specifies signatures of unauthorized processes, and wherein the auditor system includes an auditor processor and an auditor computer storage medium; monitoring, with the auditor system, processes on a user system, and determining from the auditing data that one of the processes is an unauthorized process, wherein the user system includes a user processor and a user computer storage medium, the auditor processor is isolated from the user processor, and the auditor computer storage medium is isolated from the user computer storage medium; and performing, with the auditor system one or more security processes on the unauthorized process. Other embodiments of this aspect include corresponding systems, apparatus, and computer programs products recorded on computer storage devices, each configured to perform the operations of the methods.","These and other embodiments can each optionally include one or more of the following features. The auditor processor can be physically isolated from the user processor, and the auditor computer storage medium can be physically isolated from the user computer storage medium. Determining that the process is an unauthorized process can include determining that the user processor is executing program instructions that are not associated with a process in a process table for the user system. The process table can be stored on the user computer storage medium. The auditing data can specify a threshold time for a particular process, and determining that the process is an unauthorized process can include determining that an actual time the user system takes to execute the particular process is longer than the threshold time. Determining that the process is an unauthorized process can include matching stored program data for the process to a signature of an unauthorized processes that is specified in the auditing data. Determining that the process is an unauthorized process can include detecting network traffic initiated by the process, and matching patterns in the network traffic to patterns associated with unauthorized processes in the auditing data. Monitoring processes on the system can include monitoring one or more of: process tables, physical memory allocations, virtual memory allocations, kernel code, process code, disk drives, cache data, or BIOS data stored on the user computer storage device.","Performing one or more security processes on the unauthorized process can include terminating an unauthorized process. Terminating the unauthorized process can include determining an appropriate command using an application programming interface for an operating system on the user system, wherein the command instructs the operating system to terminate the unauthorized process; and sending the command to the operating system. Terminating the unauthorized process can include modifying, by the auditor processor, data stored in a process table on the user computer storage device to remove the unauthorized process from the process table. Terminating the unauthorized process can include storing in the user system, by the second processor, data identifying a region of the user computer storage device used by the unauthorized process, the data indicating that instructions stored in the region of the user computer storage device should not be executed by the first processor. The data can be stored in one or more registers in the user system, wherein the registers are read-write registers for the auditor system and are read-only registers for the user system. Performing one or more security processes can include halting execution of the first processor.","Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. Because the auditor system is separate from the user system, the user system can be more effectively monitored. This means that malware that was previously undetectable, or at least undetectable while the user system was executing, can be detected while the user system is executing. The auditor system can stop the malware by requesting that an operating system running on the user system stop executing the malware. The auditor system can also stop the malware by directly modifying data stored in memory or in hardware registers of the user system to stop the malware from executing. This allows the auditor system to stop malware from executing even when the operating system has been compromised. The auditor system can stop malware on the user system, without requiring the user system to be turned off.","The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.","Like reference numbers and designations in the various drawings indicate like elements.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["102","104","106"]},"The user system  runs user processes  through a user operating system  that runs on user hardware . The user hardware  includes a processor  and a computer storage medium , and may also include additional hardware, for example, registers (not shown), buses, etc. The user processes  include various programs, for example, word processors, web browsers, mail programs, and any other programs desired by a user. A user interacts with the user system  as a user would interact with any system running user programs.","The auditor system  runs auditor processes  through an auditor operating system  that runs on auditor hardware . The auditor hardware  includes an auditor processor  that is isolated from the user processor of the user system  so that the user processor is unable to access or control the auditor processor. The auditor hardware  also includes an auditor computer storage medium  that is isolated from the user computer storage medium of the user system , so that the user system  is unable to access the auditor computer storage medium. In some implementations, the auditor system  and user system  are configured so that the user system is completely unaware of the auditor system . The auditor hardware  can also include additional hardware, such as communication hardware (not shown) that can communicate over a wired or wireless network.","The isolation of the user computer storage medium and the auditor computer storage medium can be achieved through various means including, for example, logical isolation or physical isolation. Logical isolation can be achieved, for example, through virtualization of the auditor system and user systems.","Physical isolation can be achieved, for example, through separate memory chips and\/or buses, or register-based controls. Physical isolation of the user processor and the auditor processor can be achieved, for example, by having two separate processors. As used herein, the term \u201cphysically isolated from\u201d means that a first component (e.g., a processor or memory) cannot be accessed by a second component. However, the second component may be able to access the first component. Such physical isolation can be accomplished by one-way data communication devices, read and write restrictions, and the like. The user system  is thus unable to modify, and in some implementations unable to even access (e.g., read), data stored on the computer storage medium of the auditor system . This ensures that any malware running on the user system  cannot adversely affect the auditor system . In contrast, the auditor system  can access, and in some cases can modify, the user computer storage medium. This access allows the auditor system  to detect and stop unauthorized processes on the user system .","The auditor processes  monitor the user system  to determine when one or more unauthorized processes running on the user system . For example, the auditor processes  can monitor one or more of the process tables, physical and virtual memory allocations and mappings, running or runnable operating system (e.g., kernel) code, running or runnable process code, computer storage media, caches, the Basic Input\/Output System (BIOS), and network traffic of the user system . While the auditor processes  are illustrated as being separate from the auditor operation system , one or more of the auditor processes  can be part of the auditor operating system . Additional details on detecting unauthorized processes are described below, with reference to \u00a72.3.","The auditor processes  can also include one or more security processes that are executed when an unauthorized process is detected on the user system . These security processes can perform various actions including, for example, quarantining the unauthorized process, stopping the unauthorized process, stopping the user operating system , and pausing and restarting the user processor. Additional details on security processes are described below, with reference to \u00a72.4.","The auditor system can optionally include integrated chip-level and operating system-level optimizations to maximize its capabilities and performance.","A user generally interacts with the user system, and will only interact with the auditor system when the user is verifying the integrity of the auditing system, updating the auditing system, or otherwise interacting with the auditing system for a specific, limited, purpose.","As described above with reference to , the auditor system  monitors and secures the user system . To do this, the auditor system  must be able to securely load auditing data (i.e., in isolation from the user system), securely update auditing data, and securely monitor the user system .","\u00a72.1 Example Auditing Process",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2","b":["200","106"]},"The auditor process  loads auditing data in isolation from a user system (). The auditing data is data used by the auditor system to monitor the user system. The auditing data can include program files (e.g., executable process code) and\/or data used by program files. Example program files include anti-virus software, data loss prevention software, and host intrusion prevention software. Example data used by program files include virus definition files, security content automation protocols, vulnerability assessment scripts, system configuration compliance policies, application white and black lists, trusted certificate chains for digital signature verification of files or messages, and license files for the auditor system.","Loading the auditing data in isolation from the user system means the user system has no control of, and in some implementations is unaware of, the loading. Example techniques for securely loading auditing data in isolation from the user system are described below in \u00a72.2.","The auditor process  monitors processes on a user system and determines from the auditing data that one of the processes is an unauthorized process (). An unauthorized process can be, for example, a process that is not supposed to be running on the user system, or a process that is taking an unauthorized action on the user system. Example techniques for monitoring the user system are described below in \u00a72.3.","The auditor process  then performs one or more security processes on the unauthorized process (). Example techniques for performing the one or more security processes are described below in \u00a72.4.","\u00a72.2 Securely Loading Auditing Data","The auditor system can receive the auditing data from various sources. For example, the auditing data can be received from a remote server connected to the auditor system through a network.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 3","b":["300","302","304","106","106","302","306"]},"The security server  is one or more computers, each of which includes one or more processors, a memory subsystem, and an input\/output subsystem. The security server  is programmed to securely provide auditing data  to the auditor system  through the network .","To increase security, in some implementations, the auditor system verifies the legitimacy of the security server  using authentication data  received from the security server. The authentication data can take various forms. For example, the authentication data  received from the security server  can include a password or passphrase that authenticates the security server . Alternatively or additionally, the authentication data  can include a hash value summarizing the hardware and software configuration of the security server . This hash value can be generated, for example, from a trusted platform module running on the security server . Other authentication data, for example, digital signatures, can also be used. The auditor system  verifies the legitimacy of the security server  by comparing the authentication data  to verification data stored on the auditor server. If the data matches, the security server  is legitimate. Otherwise, the security server  is not legitimate.","In some implementations, the security server  also authenticates the auditor system  using authentication data  received from the auditor system . The authentication data  received from the auditor system  can be of a similar type as the authentication data  received from the security server .","In some implementations, the security server  and the auditor system  are connected through a secure connection, for example, a virtual private network. Alternatively or additionally, the auditing data  and optionally the authentication data can be encrypted or otherwise secured before being sent through the network. For example, conventional encryption algorithms can be used.","While  illustrates a system where the auditing data  is downloaded from a security server , other techniques for securely loading the auditing data can alternatively be used. For example, the auditor system  can receive the auditing data  from a device directly connected to the auditor system, for example, from a CD-ROM device, through a universal serial bus (USB) connection, or through other I\/O components in the auditor system . Regardless of what technique is used to load the auditing data, the auditor system  loads the data in isolation from the user system , e.g., in a manner that cannot be influenced by the user system .","Once the data is stored on the auditor system , the auditor system  may occasionally be rebooted. Each time the auditor system  is rebooted, some or all of the auditing data is loaded from persistent storage (e.g., a disk or flash storage device) into memory. This loading is also done in isolation from the user system . In some implementations, the boot sequence is secured. For example, the auditor system  can validate the integrity of the auditing data before the data is loaded into memory. This validation can be done, for example, using trusted platform module verification, or other verification techniques.","\u00a72.3 Detecting Unauthorized Processes","The auditor system  can employ various techniques to detect unauthorized processes. The techniques can depend on the type of process as well as how difficult the process is to detect.","Some unauthorized processes are easier to detect than others. The easiest unauthorized processes to detect are processes that run in the user system but do not actively work to avoid detection. Most viruses are an example of this kind of process. However, some unauthorized processes actively work to avoid detection. An example of this kind of unauthorized process is a root kit. An unauthorized process works to avoid detection, for example, by modifying reports of the system to make the process. For example, an unauthorized process can intercept all requests for a list of processes running on the system, obtain the list, and remove itself from the list before returning the list to the requestor.","Processes that do not actively work to avoid detection can generally be detected using modified forms of conventional virus detection techniques. Sometimes, these same techniques can be used to detect processes that work to avoid detection, but sometimes additional detection techniques are needed.","\u00a72.3.1 Detecting Unauthorized Processes that do not Work to Actively Avoid Detection",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 4","b":["106","104","106","104"]},"The auditor system  runs one or more detection processes . The detection processes  monitor the user system  and gather data. This data includes, but is not limited to, data on stored programs (e.g., executable process code) , data on executing processes , data on the operating system , and data on the behavior of the user system . The detection processes  compare the received data to stored data  and otherwise test the received data. The detection processes can determine whether stored executable processes (e.g., stored programs), executing process, or both, are unauthorized processes. The detection processes  can make this determination using various tests, examples of which are described below.","In some implementations, the detection processes  examine data for the stored programs  of the user system. The data for the stored programs  is received, for example, by examining the stored programs and data  on the user system. One test the detection processes  can perform is to compare data corresponding to each of the stored programs to virus signatures stored in the auditor system, for example, in the stored auditor data .","A virus signature is a data pattern\u2014often a simple string of characters or bytes\u2014that can be used to identify a particular file, process, or other electronic data. Examples of signatures include portions of a file, hashes of a file or hashes of portions of the file. The detection processes  generate a signature that is descriptive of a process stored on or executing on the system. The detection processes  then compare the signature to signatures of unauthorized processes stored in the auditor data  to determine whether the process is an unauthorized process. In some implementations, the detection processes  use heuristic algorithms that determine that the program data is sufficiently close to a virus signature, even if the program data does not identically match the virus signature.","Rather than matching the program data to virus signatures, the detection processes  can alternatively analyze the instructions in the stored programs themselves. If a program includes suspicious instructions, it can be immediately flagged as an unauthorized process, or flagged for further inspection by the detection processes . An example suspicious program instruction is an instruction to erase or reformat a primary hard drive. The detection processes  can match program instructions to a list of suspicious instructions to determine which instructions are suspicious.","In some implementations, the detection processes  can emulate execution of the stored programs and data in a controlled environment on the auditor system. For example, the programs can be emulated in a virtual machine environment where any actions taken by the programs affects only the virtual machine, and not the actual auditor system . The detection processes  monitor an emulated program to determine whether it takes actions that harm the system. If so, the detection processes  determine that the program is an unauthorized process. Example actions that harm a system include reformatting a hard drive without user consent and sending data over a network without user consent.","In some implementations, in addition to or instead of monitoring the data  for programs stored on the user system, the detection processes  can monitor data for executing processes , data on the operating system , and data on the behavior of the system . The data can be received by monitoring the executing user processes , user operating system , and\/or the user hardware . The auditor system  receives this data by monitoring the hardware and process space on the user system  to examine what processes are running, what instructions the operating system is executing, and what memory and other hardware is being used. The detection processes  then analyze this data to identify suspicious activities. The suspicious activities can be defined, for example, in a file that is part of the stored auditor data . Example suspicious activities include network traffic (ingoing or outgoing) that exceeds a threshold amount, or memory usage outside the memory range expected for a currently active process. Other suspicious activities include activities that are typically not performed by the process, for example, a text editor reading data from encrypted files and then sending packets of data over the network, an active process communicating with operating system derivers when it has no legitimate reason to do so, an active process that makes unexpected calls to a system application programming interface, or a process that intercepts and process system application programming interface calls before the calls reach a target library procedure, when the process has no legitimate reason to do so.","As another example, the detection processes  can match patterns in network traffic to patterns of suspicious network traffic associated with unauthorized processes. The patterns of suspicious network traffic can be stored, for example, in the stored auditor data .","\u00a72.3.2 Detecting Unauthorized Processes that Actively Work to Avoid Detection","In some cases, the detection processes  can detect unauthorized processes that work to actively avoid detection using the techniques described above. However, these techniques are not always effective when a process is trying to avoid detection. Therefore, the detection processes  can include additional detection processes specifically designed to detect processes that actively work to avoid detection.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIGS. 5A-5B"},{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 5A","b":["500","500","106"]},"The detection process  determines a region of memory currently being executed by the user system (). The detection process  can make this determination by analyzing the hardware of the user system to determine what instructions are currently being executed, and where the instructions are stored in memory.","The detection process  compares the region of memory to memory allocated to executing processes in a process table (). The process table stores data for each executing process on the user system. This data can include, for example, an identifier for the process (assigned, for example, by the operating system), whether the process is currently executing, and a range of memory allocated to the process in which the process stores instructions for execution. The detection process  compares the region of memory to the regions in the process table, for example, by determining whether the region of memory is contained within one or more of the regions allocated to processes in the process table.","The detection process determines that the memory being executed is not allocated to any process in the process table (). For example, suppose three processes (processes A, B, and C) are listed in the process table, and memory regions - are allocated to process A, memory regions - are allocated to process B, and memory regions - are allocated to process C. Memory regions - are not allocated to any process in the process table. If the memory being executed is in region , then the process  determines that the memory does not belong to any of the processes in the process table. The detection process then determines that an unauthorized process is executing on the user system ().",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 5B","b":["550","550","106"]},"The detection process  determines when an action was requested from a process on the user system (). The detection process  makes this determination by monitoring calls to processes running on the user system. A call to a process occurs when the user operating system or another user process requests that a given process take a particular action. For example, when a user types in \u201cps\u201d on a terminal on a LINUX\u2122 machine, the operating system requests that the \u201cps\u201d process provide a list of all processes running on the system.","The detection process  can determine the time that an action was requested by monitoring process calls and recording the time when every process call was made, or the time when particular process calls of interest are made. A process call of interest can be, for example, a process call that is particularly likely to be affected by an unauthorized process running on the system. For example, to avoid detection, many root kits remove themselves from the list of running processes when the \u201cps\u201d command is issued. This can slow down the time the user system takes to respond to a \u201cps\u201d request. Therefore, monitoring the timing of the \u201cps\u201d process may be particularly effective at detecting a root kit. A list of the process calls of interest can be stored, for example, in data stored by the auditor system .","The detection process  determines when the action was performed (). The detection process  makes this determination by monitoring the user system and determining when the requested action was completed.","The detection process  determines that the time between when the action was requested and when the action was performed exceeds a threshold amount of time for the action (). The detection process  does this, for example, by taking the difference between the two times, and then comparing the difference to the threshold. The threshold can be process-dependent and can be defined, for example, in data stored by the auditor system. For example, if the threshold for the \u201cps\u201d process is 5 milliseconds and the difference is 6 milliseconds, the system can determine that the time exceeds the threshold. The thresholds can be user system-dependent or can be determined in advance for multiple user systems. User system-dependent thresholds are determined, for example, by monitoring the time between when an action is requested and completed under conditions where the user system is known to be uncompromised by any unauthorized processes. Thresholds determined for multiple user systems can be determined, for example, according to system specifications for the hardware and software of the systems.","When the time exceeds a threshold amount of time, the detection process  determines that an unauthorized process is running on the user system ().","While the above description describes comparing a single time to a threshold, the system can alternatively collect timing data corresponding to multiple requests of an action. The system can then aggregate the collected times, for example, by summing or averaging the times, and then compare the sum or average to a threshold. The system can alternatively compare other statistics for the collection of times, for example, standard deviation, median time, or mode time, to a threshold.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIGS. 5A and 5B"},"\u00a72.4 Performing Security Processes","Once the auditor system detects an unauthorized process, the auditor system can perform various security processes on the unauthorized process. For example, if the system detects a program file corresponding to an unauthorized process, the system can quarantine the file. Quarantining a file includes isolating the file, for example, by moving it to a different section of memory on the user device, where the contents of the file cannot be executed. Quarantining a file can also include marking the file as non-executable, or otherwise disabling the user system from executing the file. The system can also remove the file, for example, by deleting it from the user system.","In some implementations, the auditor system detects that a process currently executing on the system is an unauthorized process. In these implementations, the auditor system can perform a security process by stopping the executing process. The auditor system stops a process in various ways. In general, the ways correspond to the extent to which the auditor system has been compromised. Example security processes for stopping an unauthorized process are described below.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 6A","b":["600","600","106"]},"The security process  uses an application programming interface (API) for the user operating system to determine an appropriate command (). The appropriate command is the one that will cause the operating system to terminate the unauthorized process. The API lists one or more commands recognized by the operating system, and specifies the parameters needed by the commands. The security process  uses the API to determine both the appropriate command and the needed parameters for the command. For example, if the appropriate command is \u201ckill (process_id),\u201d where process_id is the identifier assigned to the process by the operating system, the security process  retrieves the process id (for example, from the process table) and formats the command appropriately.","The security process  then sends the appropriate command to the user operating system (). The security process  can send the appropriate command to the user operating system using various techniques. For example, in some implementations, the security process  causes data to be written to a secure command register in the user system. In these implementations, the user operating system is configured to read that command register and execute the instructions. The user operating system can be configured to periodically read the register, or read the register upon interrupt from the auditor system. In other implementations, the security process  sends commands according to a pre-established protocol, for example, sends commands (optionally encrypted commands) using protocols such as Secure Shell (SSH), telnet, remote desktop protocol (RDP), user datagram protocol (UDP) or transmission control protocol (TCP). In still other implementations, the security process  can use a proprietary communication path between the auditor system and the user operating system. This can be a specialized one-way communication path that is not visible or usable to any system other than the auditor system.",{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 6B","b":["625","625","106"]},"The security process  determines that the unauthorized process is listed in the process table for the user system (). The security process  makes this determination, for example, by comparing data it has for the unauthorized process to the process table. The data can include, for example, a process identifier or a region of memory executed by the process. If a process in the process table matches the data for the unauthorized process, the 20 security process  determines that the unauthorized process is listed in the process table.","The security process  modifies the process table for the user system to remove the entry for the unauthorized process (). The security process  modifies the process table, for example, by directly accessing the user system memory storing the process table and deleting, or overwriting, the data corresponding to the unauthorized process.","Once the process table is modified, the user operating system can continue executing processes in the process table as normal, as if it had removed the unauthorized process itself.",{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 6C","b":["650","650","106"]},"The security process  determines that the user operating system is compromised (). The security process  makes this determination by comparing a description of system activity received from the operating system to the actual system activity detected by the auditor system. The description can be, for example, a list of processes executing on the user system, details on disk space for the user system, or details on memory usage of the user system. If the description from the user operating system does not match the actual system activity, the security process  can determine that the user operating system is compromised. For example, if the system is executing instructions stored in a region of memory on the user system, but a list of the processes executing on the system received from the operating system does not include a process executing instructions from that region of memory, the security process  can determine that the operating system is compromised.","The security process  identifies the memory region on the user system that contains the instructions being executed by the unauthorized process (). The security process  can receive the identification of the memory region, for example, from one of the detection processes described above. Alternatively, the security process  can monitor the system itself to determine the appropriate region of memory.","The security process  updates data in the registers of the user system to mark the identified memory region as non-executable (). For example, if the user system includes registers that identify non-executable regions of memory, the security process  can add data to the registers that specifies the identified region of memory. Because this modification is made external to the operating system and affects what code can be executed by the operating system, the security process  is able to stop the process without relying on the operating system.","In some implementations, rather than individually stopping the process, the auditor system stops the user operating system itself, or pauses and restarts the user processor.","While the user operating system is stopped, or the user processor is paused, the auditor system can take one or more actions to remove the unauthorized process from the user system. For example, the auditor system can restore the user system to a restore point, e.g., a previously saved point before the system was infected. As another example, the auditor system can attempt to remove the unauthorized process from the system, e.g., by deleting infected files, while the system is stopped. The auditor system may also just stop the user operating system, for example, using an orderly shutdown process, and take no further action.","In some implementations, the auditor system can automatically present feedback to a user letting him or her know that a situation is being corrected on the user system, for example, by causing the control switch to switch to presenting output from the auditor system, as described below with reference to section 3.2.","The auditor system can have a great deal of control over the user system. Therefore, users may want to be able to monitor the auditor system itself, in order to ensure that the auditor system is functioning correctly.","\u00a73.1 Log Files","This monitoring can be achieved in various ways. For example, the auditor system  can automatically generate various log files. These log files can include entries that indicate when auditing data was loaded onto the auditor system, and when the auditing data was updated. For example, an entry could specify the time of the loading of the data (e.g., the date, or the date and time), the source of the auditing data (e.g., an identification of the server or device from which the data was received), and an identification of the auditing data itself (e.g., a version number).","The log files can alternatively or additionally include entries that indicate when unauthorized processes were detected. For example, an entry could specify the time that an unauthorized process was detected, an identification of the unauthorized process (e.g., a name or other identifier) an identification of the detection process that detected the unauthorized process, and details about the detection (e.g., what the detection process observed and what auditor data the detection process relied upon).","The log files can alternatively or additionally include entries that indicate when, or what, security processes were initiated against an unauthorized process. For example, an entry could specify the time that a security process was initiated, an identification of the unauthorized process, and an identification of the security process that was initiated.","\u00a73.2 Interacting with the Auditor System","As another example, a user may want to be able to directly interact with the auditor system.  illustrates an example system  where a user can separately interact with the auditor system and the user system.","The system  includes a control switch  that connects both the auditor system  and the user system  to a display device  and input device . For illustrative purposes, the display device  is shown as a monitor, and the input device  is shown as a keyboard; however, any display device or input device can be used. Multiple display devices and input devices can also be used.","The control switch  is connected to both the auditor system  and the user system . The connection allows the control switch  to receive output from both systems and provide input to both systems.","A user indicates that the control switch should switch between the auditor system  and the user system , e.g., using a hardware control such as a button. When the user has indicated that the control switch should connect to the auditor system, the control switch routes the output received from the auditor system  to the display device , and routes input received from the input device  to the auditor system . Similarly, when the user has indicated that the control switch should connect to the user system , the control switch  routes output received from the user system  to the display device , and routes input received from the input device  to the user system .","The control switch  thus allows the user to interact separately with the auditor system  and the user system . During normal operation, the user will interact with just the user system . However, when the user wants to monitor the auditor system, for example, by reviewing log files, checking what files are stored on the auditor system, or performing other monitoring, the user can use the control switch  to switch to the auditor system. Once the monitoring is complete, the user can use the control switch  to switch back to the user system .","While the above describes a physical switch that connects physical input and display devices to the user and auditor systems, input and output could also be sent and received through a network, for example, for remote monitoring of systems.","Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a computer storage medium for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions can be encoded on a propagated signal that is an artificially generated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. The computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them.","The term \u201cdata processing apparatus\u201d encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.","A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.","The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).","Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing or executing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few.","Computer-readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.","To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.","Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (\u201cLAN\u201d) and a wide area network (\u201cWAN\u201d), e.g., the Internet.","The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features that may be specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.","Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.","Particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 5A-5B"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 6A-6C"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
