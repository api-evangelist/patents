---
title: Optimizing interactions between co-located processes
abstract: In one set of embodiments, methods, systems, and apparatus are provided to enable secure local invocation of a web service in response to receiving a request from a first composite application to invoke a web service operation of a second composite application, where the first application is associated with a reference policy, and the second application is associated with a service policy, then determining, based upon the service policy and the reference policy, whether local invocation is secure, and invoking the operation using the local invocation in response to determining that the local invocation is secure. Attributes associated with the reference and service policies can indicate whether those policies can be used in a local invocation, or if user authentication is needed before performing the invocation with those policies. The local invocation may comprise a procedure call in an application server from the first application to the second application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08726349&OS=08726349&RS=08726349
owner: Oracle International Corporation
number: 08726349
owner_city: Redwood Shores
owner_country: US
publication_date: 20110531
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit and priority under 35 U.S.C. 119 (e) of U.S. Provisional Application Ser. No. 61\/417,173, filed Nov. 24, 2010, entitled A METHOD FOR OPTIMIZING THE INTERACTIONS BETWEEN CO-LOCATED PROCESS ORIENTED COMPOSITE APPLICATIONS, the contents of which are herein incorporated by reference in their entirety for all purposes.","This application also incorporates by reference for all purposes the entire contents of the following related and commonly-assigned non-provisional applications, all filed concurrently with the present application:\n\n","Embodiments of the present invention relate generally to interaction between applications in computer systems, and more particularly to techniques that enable efficient interaction between applications that can have quality of service constraints.","Information technology provides automated systems to meet the needs of organizations, but factors such as the complexity of the systems, changing markets, increasing competitive pressures, and evolving customer needs are creating demand for more flexible and efficient systems. A standardized approach to designing and building enterprise applications, known as Service Oriented Architecture (SOA), has been introduced to meet this demand. SOA facilitates the development of enterprise applications as modular web services that can be easily integrated and reused. SOA defines how the services interact, so that different applications can be integrated. Applications can communicate with the services via Web protocols such as HTTP. SOA defines service interfaces in terms of protocols and features. Applications can invoke services by exchanging messages, e.g., a request message from the application to a server that implements the service, and a response message from the server back to the application after executing the service. Services can also be invoked by other services. Messages can be sent and received via channels, e.g., network connections. A \u201cbinding\u201d establishes the connection between an SOA composite application and the external world. There are two types of binding components: services, which provide the outside world with an entry point to the SOA composite application and describe the protocols that can communicate with the service (for example, SOAP\/HTTP or a JCA adapter), and references, which enable messages to be sent from the SOA composite application to external services in the outside world. Services use \u201cendpoints\u201d to access the channels and send\/receive messages. An endpoint is an association between a binding and a network address that may be used to communicate with a service. Thus an endpoint indicates a specific address for accessing a service using a specific protocol and data format.","Each service provides an operation, such as a bank account deposit. An application or another service calls an appropriate Application Programming Interface (API) function of the SOA system to invoke the service by passing messages according to the protocol for accessing the service. This process of invoking a service is also referred to herein as \u201cinvocation\u201d of the service. Data can be included in the invocation message in accordance with a data format specified by metadata associated with the binding.","SOA applications can be implemented using \u201corchestration\u201d to compose \u201ccomposite\u201d applications that invoke services. In one example, Business Process Execution Language (\u201cBPEL\u201d) is a standardized representation of processes, and the SOA system provides a process engine or manager that enables users to design and execute BPEL processes that invoke the services. The details of the application and services, and the formats of the data that is exchanged, e.g., between different BPEL processes in a composite application, are described by metadata associated with corresponding portions of the services and applications, such as data types associated with bindings.","In accordance with embodiments of the invention, web services in a Service Oriented Architecture can be invoked using local invocations, which are more efficient than ordinary web service invocations, since the overhead of sending the invocation from an invoker to a server via a network as done in ordinary web service invocations can be eliminated when the invoker and server are located in the same container, e.g., in the same application server on the same computer. The local invocation can also be more efficient because a local invocation can be implemented as a procedure or subroutine call between computer program instructions in the same application server, i.e., from instructions that implement the invoker to instructions that implement the server. Local invocations are not ordinarily performed in existing SOA application servers when Quality of Service features, such as security and user authentication, access control, or message encryption, are enabled for the web service invocations, because invoking the server using a local call, e.g., a function or subroutine call, would bypass the security checks that are performed by the application server as part of ordinary web service invocations, which could lead to a breach of the quality of service terms (e.g., a security breach).","In one or more embodiments, methods and systems are provided for performing local invocations securely when quality of service features are enabled, so the performance benefit of local optimizations can be realized in the presence of quality of service constraints, such as security features. Security features can be enabled for web service invocations by attaching security policies to the invoker (e.g., client) and\/or server. Secure local invocations are achieved by augmenting security policies with an attribute that indicates whether each policy can be used with direct invocation, or, for security policies that involve user authentication, whether user authentication is needed prior to making local invocations using those policies. The client and server policies are checked for consistency, e.g., to ensure that if the client policy modifies a message, then there is a corresponding server policy to process the modified message, or vice-versa. If the policies indicate that local invocation is possible for an invocation, and the policies are consistent, then an indication is made to the application server that the web service invocation can be performed using a local invocation.","According to an embodiment of the present invention, a method is provided that includes receiving, at a computer system, a request from a first composite application to invoke a web service operation of a second composite application, where the first application is associated with a reference policy, and the second application is associated with a service policy, determining, by the computer system, based upon the service policy and the reference policy, whether local invocation of the web service operation is secure, and invoking the web service operation using the local invocation in response to determining that local invocation is secure.","Embodiments of the invention may include one or more of the following features. Local invocation may be secure if a first attribute associated with the reference policy and a second attribute associated with the service policy indicate that the reference and service policies can be used in a local invocation. If the first attribute indicates that user authentication is needed for local invocation, and the second attribute indicates that the service policy can be used in a local invocation, then local invocation may be secure if a user requesting the local invocation has been authenticated. Local invocation may be secure if the reference and service policies form a valid configuration for local invocation. The policies may represent a valid configuration if there is a service policy corresponding to each reference policy, wherein the service policy is of the same category as the reference policy, and if there is a service policy of the security category, then there is a corresponding reference policy of the security category. The local invocation may include a procedure call within a process. The local invocation may include a procedure call from instructions that implement the first composite application to instructions that implement the second composite application.","According to an embodiment of the present invention, a system is provided that includes a processor configured to receive a request from a first composite application to invoke a web service operation of a second composite application, where the first application is associated with a reference policy, and the second application is associated with a service policy, determine, based upon the service policy and the reference policy, whether local invocation of the web service operation is secure; and invoke the web service operation using the local invocation in response to determining that local invocation is secure.","According to an embodiment of the present invention, a non-transitory machine-readable medium for a computer system is provided, the non-transitory machine-readable medium having stored thereon a series of instructions executable by a processor, the series of instructions including instructions that cause the processor to receive a request from a first composite application to invoke a web service operation of a second composite application, where the first application is associated with a reference policy, and the second application is associated with a service policy, instructions that cause the processor to determine, based upon the service policy and the reference policy, whether local invocation of the web service operation is secure and instructions that cause the processor to invoke the web service operation using the local invocation in response to determining that local invocation is secure.","The foregoing, together with other features and embodiments will become more apparent when referring to the following specification, claims, and accompanying drawings.","In the following description, for the purposes of explanation, numerous details are set forth in order to provide an understanding of embodiments of the present invention. It will be apparent, however, to one of ordinary skill in the art that certain embodiments can be practiced without some of these details.",{"@attributes":{"id":"p-0026","num":"0030"},"figref":["FIG. 1A","FIG. 1A"],"b":["100","100","101","100","100","102","100"]},"As introduced above, as an alternative to coding security logic in the application, the process execution system  can be used to implement declarative security and management through predefined policies. A policy-based model can be used to manage and secure Web services across an organization. Policies describe the capabilities and quality of service requirements of a Web service, such as whether and how a message is to be secured, whether and how a message is to be delivered reliably, and so on. Policies can apply security to the delivery of message, and can be managed by developers in a design time environment and system administrators in a runtime environment.","Referring to , in one or more embodiments, the process execution system  can define and enforce security and reliability policies. A client computer  can host development and administrative applications, such as Middleware Control  and an integrated development environment . Middleware Control  enables administrators to manage, secure, and monitor Web services. The process execution system  includes features that enable users to attach policies to clients and\/or service endpoints at design time using the integrated development environment , e.g., Oracle JDeveloper, and at runtime using Oracle Enterprise Manager . Users can also define authentication and\/or authorization policies against an LDAP directory or other identity infrastructures, generate standard security tokens to propagate identities across multiple web services used in a single transaction, and encrypt an element of the payload of a web service request, e.g., a credit card number, to provide data confidentiality. A Policy Manager  writes and reads the policies, including predefined and custom policies, to and from a metadata store . Web services security and management policies can be defined in the Policy Manager , and executed and enforced at runtime through the Agent . The Policy Manager  can manage and enforce other types of policies in addition to security policies, as further described below.",{"@attributes":{"id":"p-0029","num":"0033"},"figref":"FIG. 1B","b":["100","130","10","11"]},"In one or more embodiments, the process execution system  provides operations to define, enforce, and monitor security and management policies. The \u201cdefine\u201d operation attaches security and management policies to the web services to be protected. Policies can, for example, authenticate request messages using username\/password, decrypt messages using WS-Security, and sign response messages. An \u201cenforce\u201d operation distributes policies from a Policy Manager to several policy enforcement points (PEP) or Agents  that execute security and management policies at runtime. The Agent  manages the enforcement of policies using a Policy Interceptor Pipeline, in which Policy Interceptors enforce policies . The Metadata Store  stores the policies . The policies  can be stored as files in the file system or to a database , which provides database support for the Metadata Store .","A policy  can include one or more policy assertions , , . A policy assertion  is a unit of a policy that performs a specific action for the request and response operations. Assertions , like policies , belong to one of the following categories: Reliable Messaging, Management, WS-Addressing, Security, and Management. Policy assertions  are executed for the request message and the response message, and the same set of assertions is executed on both types of messages. The assertions , ,  are executed by the policy interceptors in the order in which the assertions appear in the policy .","In one example, a security policy  extracts a security token from a request message being sent to a service associated with the policy . The security token can be, for example, a username\/password (extracted from the HTTP header, WS-Security header, or from the message body); an X.509 certificate used for signing the request; a Kerberos ticket; or other type of token. The extracted token can be sent to a login module, which validates the token, and then passes the credential information stored within the token to an application server authenticator. The application server authenticator can be configured to validate credentials against a variety of identity stores such as LDAP and the like. If successful, the authenticator creates a Java\u00ae programming language Subject and populates it with principals containing the username and roles associated with the authenticated user. The Subject is then made available to subsequent policy assertions and the web service itself.",{"@attributes":{"id":"p-0033","num":"0037"},"figref":"FIG. 2","b":["200","202","218","202","202","204","206","208","200","204","206","208","204","210","212","224","226"]},"The Service service  and the WriteFile reference  are examples of \u201cpolicy subjects.\u201d A policy subject is, in one aspect, an entity or resource to which policies can be attached. Attaching a policy to a policy subject imposes quality of service constraints on communications to or from the policy subject, and\/or causes other operations to be performed, such as encryption and decryption of the communications. Policy subjects can include Web services endpoints, Web service clients, SOA service endpoints, SOA clients, SOA components, and the like. There are different policies for different types of resources (for example, a Web service or a SOA component). Enforcement of the policy can begin once the policy is attached to a policy subject. Attached policies are enforced by the Agent , which intercepts requests to and responses from an application, and enforces the policies that are associated with requests and responses. The Agent  retrieves the policy definitions from the Policy Manager . For example, if a request message sent to a component  does not satisfy a security policy attached to the component's service binding , the Agent  will not forward the request message to the component . The Agent can similarly enforce policies attached to the reference binding  of the Service service component , policies attached to a reference binding  of the component , and policies attached to a service binding  of the WriteFile reference component .","As introduced above, applications can invoke services by exchanging messages, e.g., by sending a request message from the application to a server that implements a service, and receiving a response message sent by the server back to the application after execution of the service. Messages can be sent and received via a channel, e.g., a network connection. Services  use \u201cendpoints\u201d to access the channels and send\/receive messages. An endpoint associates a binding with a network address that may be used to communicate with a service . A binding establishes a connection between an SOA composite application  and the external world. There are two types of binding components: services , which provide the outside world with an entry point to the SOA composite application  and describe the protocols that can communicate with the service  (for example, SOAP\/HTTP), and references , which enable messages to be sent from the SOA composite application  to external services in the outside world.","Developers or users can define or create the service components , ,  that implement application business logic or processing rules. As introduced above, a service named Service  is shown in the left panel. Service  provides the entry point to the composite application . Service  is \u201cwired\u201d to the service component , as shown by the line from a Service reference handle  to a SayHello BPEL process interface  of the service component . The service component  is shown in the middle panel . Wiring enables web service message communication with application components such as the SayHello BPEL process . In one or more embodiments, a first service component  can be wired to another service component  if the first service component's reference  matches the service  of the target service component , i.e., has the same interface as the target service component .","The SOA composite application  also includes a reference component  that enables the application  to send messages to external services, e.g., services in the outside world. The reference  is shown in the right panel . A reference  component can be, for example, a web service, an adapter, an EJB service, or other process. In this example, the reference  is a File Adapter, which includes an operation  that is configured to write data received from the SayHello BPEL process  to a file. The SayHello BPEL process reference  is wired to the WriteFile service binding component .","The development user interface  provides features that a user can use to attach a policy to a service or reference binding component. To attach a policy, a user can select a service or reference binding component, then select a menu option to configure WS-Policies for the selected binding component. The user can then select the type of binding to use for the request. This selection enables communication between the binding component and the service component. When a request binding is configured for a service  in the Services panel , the service  acts as a server. When request binding is configured for a reference  in the References panel , the reference  acts as a client. The user interface  then displays the following categories of polices for attachment: MTOM, Reliability, Addressing, Security, and Management. In this example, the Security category is selected for attachment. The user can then select the type of policy to attach, e.g., \u201cbinding_permission_authorization_policy\u201d to add a binding permission authorization policy.","Developers and\/or administrators can attach or detach policies to or from service binding components, service components, and reference binding components in a SOA composite application. A developer can attach policies for testing security in a design-time environment, as described above. When an application is ready for deployment to a production environment, an administrator can attach or detach runtime policies. At design time, policy references (e.g., policy names) are attached to the web service. When the web service is deployed to an application server, the Agent  retrieves the policy definition details from the Policy Manager  by providing the policy name as the key for lookup. Administrators can attach (and detach) policies in clients and services or make changes to policies already attached.",{"@attributes":{"id":"p-0040","num":"0044"},"figref":["FIG. 3","FIG. 3","FIG. 1A"],"b":["300","302","102","102","306","306","308","330","322","308","342","330"]},"The two composite applications A  and B  are co-located in the same container , so \u201clocal invocations\u201d  (indicated by an arrow) between the two applications are possible. Local invocations can be understood as invocations of web service operations, e.g., via service or reference bindings, that are executed between two components in the same container, e.g., in the same application server, and do not involve network communication and the overhead of converting the invocation to a representation suitable for network communication. In a local invocation, networking protocol and message formatting operations that would otherwise be performed to construct and send the messages are bypassed, resulting in a substantial performance improvement. The network protocol that is bypassed may be, for example, an HTTP stack, and the message conversions may be, for example, SOAP\/NM conversions. As described above, the local invocation can be performed if there are no policies attached to application A  and application B , because there are no security policy checks or other operations to be performed or enforced for the invocation. Local invocations can be implemented by a mechanism such as a procedure or subroutine call between code instructions. In one or more embodiments, when a composite application A  invokes a second composite application B  in a composite-to-composite invocation, if the first and second composite applications are co-located in the same container or server, the invocation can be performed using a local invocation, bypassing the sending and receiving of request and response messages that would otherwise be sent to and received from the second composite application B  to perform the invocation. A local invocation, or the identification of a situation in which a local invocation is possible, is referred to as a \u201clocal optimization\u201d to indicate the expected performance benefit.","Referring to , the application A  includes components , such as a BPEL process  and a Mediator process . The components  are wired to service bindings  and reference bindings  in the application A . Similarly, application B  includes components , such as Business Rules  and a Human Task . The components  are wired to service bindings  and reference bindings . Further, the reference binding  of application A  are wired to the service binding  of application B , thereby establishing one of the conditions for a component-to-component invocation.","In application A , a service policy A  is attached to, i.e., associated with, the service binding , and a reference policy A  is attached to the reference binding . Either or both of the service and reference policies can include one or more security policies, but for the purposes of describing local invocations, the reference policy A  is shown as a security policy attached to the reference binding . In application B , a service policy B  is attached to the service binding , and a reference policy B  is attached to the reference binding . For the purposes of describing local invocations, the service policy B  can be a security policy attached to the service binding . The effects of the reference policy A  and the service policy B  on local invocation optimizations is described in further detail below.","A number of pre-defined policies are provided with the system , and developers and users can define new policies. These policies are implemented by Policy objects in a programming language such as Java, C++, or the like. Each Policy object can have an attribute named \u201clocal-optimization\u201d to which the Policy can assign a value that indicates whether local optimization is permitted for that Policy, as needed by the rules associated with that Policy. If the value is \u201coff\u201d or the attribute is not present or has not been set, then local optimization is not performed for invocations involving that policy, so that such invocations instead use the WS\/SOAP\/HTTP stack and interceptors. That is, local optimization is optional and is disabled by default for policies that do not explicitly enable it. Policies can set their local-optimization attributes to \u201ccheck_identity\u201d to indicate that a local optimization is only to be performed if the user has been authenticated, e.g., if an authenticated, valid Java Authentication and Authorization Service (JAAS) Subject exists in the current thread or process. Otherwise, if there is no valid JAAS Subject in the current thread or process when a Policy has declared \u201ccheck_identity\u201d, local optimization is not performed for that Policy. Alternatively, policies can set their local-optimization attribute to \u201con\u201d to indicate that local optimization is to be performed when possible. The local-optimization Policy attribute is used by, for example, the process depicted in .","Existing techniques use a local function call when no policy references are specified for both the source reference binding and target service binding. Existing techniques have not used the local invocation when a policy reference is attached to one of the bindings. Using a local function call for an invocation without checking and enforcing a security policy attached to the binding could lead to a security breach. Thus, to perform the local function call, security checks are first performed, and the call is only executed if the security checks indicate that sufficient security credentials are present to meet the attached security policy.",{"@attributes":{"id":"p-0046","num":"0050"},"figref":["FIG. 4","FIG. 4"],"b":["400","402","404","404","406","420","416","406","428","420","406","420","404","440","402","442","404","440","442","406","420","450","452","402","450"]},{"@attributes":{"id":"p-0047","num":"0051"},"figref":["FIG. 5","FIG. 5","FIG. 5"],"b":["500","308","322","308","342","330"]},"In one or more embodiments, a local call can be used in the presence of policy references by checking the individual policies (e.g., WS Policies) referred to by the reference and service policy references associated with the bindings or components involved in the invocation. The decision as to whether a security policy is satisfied and can be bypassed is determined based upon information provided by the particular security policy itself. As introduced above, in one example, each type of policy has an attribute that indicates, i.e., declares, how local invocations are to be handled in the presence of that policy. This local invocation policy attribute can have the value \u201con\u201d to indicate that local invocation is permitted for invocations involving the policy, \u201coff\u201d to indicate that local invocation is prohibited for invocations involving the policy, and \u201ccheck_identity\u201d to indicate that local invocation is permitted for invocations involving the policy if the user's identity has been successfully authenticated prior to each of the invocations.","In the method of , block  receives a container-to-container invocation request. Block  determines the local optimization result of the service policy set by invoking the process of  with the service policy set as a parameter. The process of  evaluates the local optimization attribute of each policy in the policy set, and returns a result for the policy set, as described below. Block  determines if local invocation is possible for the service policy set based upon the result of the process of . The process of  may return the value \u201coff\u201d to indicate that local invocations are \u201coff\u201d, in which case block  produces a result indicating that local optimization is not possible for this invocation. The process of  may alternatively return the value \u201cidentity-check\u201d, in which case block  determines if there is a valid JAAS Subject representing an authenticated user in the current thread. A JAAS Subject has security-related attributes, i.e., credentials. The credentials in the Subject can indicate that the current user, who is the user requesting the invocation that is being considered for local invocation, has been authenticated successfully, e.g., has provided a valid password or private key certificate in the recent past. The credentials can be, for example, private cryptographic keys, public key certificates, or Kerberos server tickets. If block  determines that there is no valid Subject, block  produces a result indicating that local optimization is not possible for this invocation. Otherwise, if there is an authenticated JAAS Subject in the current process or thread, e.g., a password or certificate, then control transfers to block , which determines the local optimization result for the reference policy set by invoking the process of  a second time, this time using the reference policy set as a parameter. If the second invocation of the process of  returns the value \u201coff\u201d, then block  produces a result indicating that local optimization is not possible for this invocation. If the second invocation of the process of  returns \u201cidentity-check\u201d, then block  determines if there is a valid JAAS Subject in the current thread or process. If there is no valid JAAS Subject present, block  produces a result indicating that local invocation is not possible. If there is a valid Subject present, then control transfers to block , which invokes the process of  to determine if the service and reference policies represent a valid configuration for a local invocation. If the process of  indicates that there is not a valid configuration, then block  produces a result indicating that a local invocation is not possible. Otherwise, if there is a valid configuration, then block  produces a result indicating that local invocation is possible for this invocation and can be performed (e.g., by the Fabric) without violating the service and reference policies.",{"@attributes":{"id":"p-0050","num":"0054"},"figref":["FIG. 6","FIG. 6","FIG. 6","FIG. 5","FIG. 5","FIG. 7"],"b":["600","504","510","602","604","604","606","602","608","612","608","610","612","614","616"]},{"@attributes":{"id":"p-0051","num":"0055"},"figref":["FIG. 7","FIG. 7","FIG. 7","FIG. 5"],"b":["700","514","700","702","708"]},"Block  identifies a category of a policy in the given reference policy or policies. The category is, for example, Security, Reliable Messaging (RM), MTOM, or Addressing. In one example, Addressing policies need not be checked, because absence of an Addressing policy on the service side is acceptable even if there is an Addressing policy on the reference side. Therefore, block  does not pass any Addressing policies to block . For the other types of policies, for each category of policy on the reference (e.g., client) side, there should be a policy with the same category on the service (e.g., server) side. Block  thus checks whether there is a service policy of the same category that was identified in block . For example, if the category of reference policy identified in block  is Security, block  determines whether there is a Security policy in the service policy or policies associated with the invocation. If not, block  returns a value to the invoking process (e.g., block  of ) indicating that the configuration is not valid, because there is a category of reference policy without a matching service policy of the same category. Otherwise, if block  finds a Security service policy, then block  determines if there is another category of policies in the reference policies, i.e., a different category that has not yet been processed by block . If block  finds such a category (e.g., Reliable Messaging), then control transfers back to block  to check if there is a matching service policy of that category. Otherwise, if all reference policies associated with the invocation have been processed, block  transfers control to block .","Blocks - determine if the service policy or policies represent a valid configuration. In one example, for RM\/MTOM\/Addressing categories, the reference policy can be generated from the service policy, so these categories of policies need not be present in the reference policy set. Further, the Addressing policy can be present on the reference side but not on the server side, because the server side Addressing policy ordinarily enforces that addressing headers need to be present, and these headers ordinarily are present. Thus the security policy category is checked in blocks -. Block  determines whether there is a security policy in the service policy set. If not, then there is no need to check for a matching security policy in the reference policy set, and block  returns a value indicating that the configuration is valid. Otherwise, if there is a security policy in the service policy set, block  determines if there is a corresponding security policy in the reference policy set. If there is not, block  returns a value indicating that the configuration is not valid. Otherwise, there is a security policy in the reference policy or policies, and block  returns a value indicating that the configuration is valid. Other conditions can be checked in other embodiments, e.g., if there are one-way asynchronous invocations, then callback invocations are possible. For callback invocations,  invokes the method of  for the callback policy set instead of for the reference policy set, and the method of  is extended to check that each category of policy that exists on the server side (RM and MTOM in addition to Security) also exist on the client side, except for Addressing policies, which need not be checked.",{"@attributes":{"id":"p-0054","num":"0058"},"figref":["FIG. 8","FIG. 1A"],"b":["800","800","802","804","806","808","802","804","806","808","103","104","105"]},"Client computing devices , , ,  can be general purpose personal computers (e.g., personal computers and\/or laptop computers running various versions of Microsoft Windows and\/or Apple Macintosh operating systems), cell phones or PDAs (running software such as Microsoft Windows Mobile and being Internet, e-mail, SMS, Blackberry, or other communication protocol enabled), and\/or workstation computers running any of a variety of commercially-available UNIX or UNIX-like operating systems (including without limitation the variety of GNU\/Linux operating systems). Alternatively, client computing devices , , ,  can be any other electronic device capable of communicating over a network, such as network  described below. Although system environment  is shown with four client computing devices, it should be appreciated that any number of client computing devices can be supported.","System environment  can further include a network . Network  can be any type of network familiar to those skilled in the art that can support data communications using a network protocol, such as TCP\/IP, SNA, IPX, AppleTalk, and the like. Merely by way of example, network  can be a local area network (LAN), such as an Ethernet network, a Token-Ring network and\/or the like; a wide-area network; a virtual network, including without limitation a virtual private network (VPN); the Internet; an intranet; an extranet; a public switched telephone network (PSTN); an infra-red network; a wireless network (e.g., a network operating under any of the IEEE 802.11 suite of protocols, the Bluetooth protocol known in the art, and\/or any other wireless protocol); and\/or any combination of these and\/or other networks.","System environment  can further include one or more server computers  which can be general purpose computers, specialized server computers (including, e.g., PC servers, UNIX servers, mid-range servers, mainframe computers, rack-mounted servers, etc.), server farms, server clusters, or any other appropriate arrangement and\/or combination. Server  can run an operating system including any of those discussed above, as well as any commercially available server operating system. Server  can also run any of a variety of server applications and\/or mid-tier applications, including web servers, FTP servers, CGI servers, Java virtual machines, and the like. In one set of embodiments, server  can correspond to server  of .","System environment  can further include one or more databases . In one set of embodiments, databases  can include databases that are managed by server . Databases  can reside in a variety of locations. By way of example, databases  can reside on a storage medium local to (and\/or resident in) one or more of computers , , , , and . Alternatively, databases  can be remote from any or all of computers , , , , and , and\/or in communication (e.g., via network ) with one or more of these. In one set of embodiments, databases  can reside in a storage-area network (SAN) familiar to those skilled in the art.",{"@attributes":{"id":"p-0059","num":"0063"},"figref":"FIG. 9","b":["900","900","802","804","806","808","810","800","900","924","902","904","906","900","908","908"]},"Computer system  can additionally include a computer-readable storage media reader , a communications subsystem  (e.g., a modem, a network card (wireless or wired), an infra-red communication device, etc.), and working memory , which can include RAM and ROM devices as described above. In some embodiments, computer system  can also include a processing acceleration unit , which can include a digital signal processor (DSP), a special-purpose processor, and\/or the like.","Computer-readable storage media reader  can be connected to a computer-readable storage medium , together (and, optionally, in combination with storage device(s) ) comprehensively representing remote, local, fixed, and\/or removable storage devices plus storage media for temporarily and\/or more permanently containing computer-readable information. Communications system  can permit data to be exchanged with network  and\/or any other computer described above with respect to system environment .","Computer system  can also comprise software elements, shown as being currently located within working memory , including an operating system  and\/or other code , such as an application program (which may be a client application, Web browser, middle tier\/server application, etc.). It should be appreciated that alternative embodiments of computer system  can have numerous variations from that described above. For example, customized hardware can be used and particular elements can be implemented in hardware, software, or both. Further, connection to other computing devices such as network input\/output devices can be employed.","Computer readable storage media for containing code, or portions of code, executable by computer system  can include any appropriate media known or used in the art, such as but not limited to volatile\/non-volatile and removable\/non-removable media. Examples of computer-readable storage media include RAM, ROM, EEPROM, flash memory, CD-ROM, digital versatile disk (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium that can be used to store data and\/or program code and that can be accessed by a computer.","Although specific embodiments of the invention have been described above, various modifications, alterations, alternative constructions, and equivalents are within the scope of the invention. For example, although embodiments of the present invention have been described with respect to certain flow diagrams and steps, it should be apparent to those skilled in the art that the scope of the present invention is not limited to the described diagrams\/steps.","Yet further, although embodiments of the present invention have been described using a particular combination of hardware and software, it should be recognized that other combinations of hardware and software are also within the scope of the present invention.","The specification and drawings are, accordingly, to be regarded in an illustrative rather than restrictive sense. It will be evident that additions, subtractions, and other modifications may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0015","num":"0019"},"figref":"FIG. 1A","b":"100"},{"@attributes":{"id":"p-0016","num":"0020"},"figref":"FIG. 1B","b":"100"},{"@attributes":{"id":"p-0017","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0022"},"figref":"FIG. 3","b":"300"},{"@attributes":{"id":"p-0019","num":"0023"},"figref":"FIG. 4","b":"400"},{"@attributes":{"id":"p-0020","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0025"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0026"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0027"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0028"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
