---
title: Dynamic hierarchical tagging system and method
abstract: A dynamical hierarchical tagging system connected to a user site through a remote communications network. The system may comprise a master controller, a job management server connected to the master controller, one or more scanners in communication with the job management server, wherein the one or more scanners are configured to scan for one or more user assets located at the user site, resulting in scan results, a scan logic processor connected to the master controller, wherein the scan logic processor is configured to store the scan results in a user database, a tagging logic engine connected to the master controller, wherein the tagging logic engine is configured to tag the scan results stored in the user database, and an indexing logic processor connected to the master controller, wherein the indexing logic processor is configured to search and index the tagged scan results stored in the user database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09613099&OS=09613099&RS=09613099
owner: Qualys, Inc.
number: 09613099
owner_city: Redwood Shores
owner_country: US
publication_date: 20111012
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application claims priority to U.S. Provisional Application No. 61\/392,324 filed Oct. 12, 2010, and entitled \u201cDynamic hierarchical tagging system and method,\u201d which is hereby incorporated by reference for all purposes.","In a corporate enterprise network, the presently described embodiments relate to organizing and tagging of computer, software, and network assets by a security management system that interfaces with the enterprise network through the internet. The security management system is therefore a cloud-based system that interfaces with managed asset scanners within and\/or exterior to the enterprise network. The presently described embodiments provide a dynamic hierarchical tagging system and method that provides advantages over previously known solutions.","In a corporate enterprise network, any device connected to a network, such as desktop workstations, tablets, phones, etc., may have attributes that change on a regular basis. These attributes may include IP addresses, patch levels, vulnerabilities, installed software, running services, etc. Network administrators and users may want to organize the network assets into groups based at least in part on these rapidly-changing attributes. The present disclosure provides for a way to create groups that change with the changing attributes.","In an embodiment, a dynamical hierarchical tagging system connected to a user site through a remote communications network is disclosed. The system may comprise a master controller, a job management server connected to the master controller, one or more scanners in communication with the job management server, wherein the one or more scanners are configured to scan for one or more user assets located at the user site, resulting in scan results, a scan logic processor connected to the master controller, wherein the scan logic processor is configured to store the scan results in a user database, a tagging logic engine connected to the master controller, wherein the tagging logic engine is configured to tag the scan results stored in the user database, and an indexing logic processor connected to the master controller, wherein the indexing logic processor is configured to search and index the tagged scan results stored in the user database. In this system, the scan logic processor may be configured to normalize the scan results stored in the user database to determine which of the normalized scan results need to be updated in a subsequent processing of a scan based on discovered values of the one or more assets previously scanned and the normalized scan results may be related back to the tagged and indexed scan results stored in the user database and are used to track the one or more user assets.","In a further embodiment, a method for tagging one or more user assets located at a user site with a dynamical hierarchical tagging system connected through a remote communications network is disclosed. The method may comprise providing a master controller, connecting a job management server to the master controller, providing one or more scanners in communication with the job management server, wherein the one or more scanners are configured to scan for the one or more user assets located at the user site, resulting in scan results, connecting a scan logic processor to the master controller, wherein the scan logic processor is configured to store the scan results in a user database, connecting a tagging logic engine to the master controller, wherein the tagging logic engine is configured to tag the scan results stored in the user database, and connecting an indexing logic processor to the master controller, wherein the indexing logic processor is configured to search and index the tagged scan results stored in the user database. The method may further comprise that the scan logic processor and the indexing logic processor may be configured to normalize the tagged and indexed scan results stored in the user database to determine which of the scan results need to be updated in a subsequent scan based on discovered values of the one or more assets previously scanned, and further wherein the normalized scan results may be related back to the tagged and indexed scan results stored in the user database and are used to track the one or more user assets.","Disclosed herein are various embodiments of a dynamical hierarchical tagging system connected to a user site through a remote communications network. The system may comprise a master controller, a job management server connected to the master controller, one or more scanners in communication with the job management server, wherein the one or more scanners are configured to scan for one or more user assets located at the user site, resulting in scan results, a scan logic processor connected to the master controller, wherein the scan logic processor is configured to store the scan results in a user database, a tagging logic engine connected to the master controller, wherein the tagging logic engine is configured to tag the scan results stored in the user database, and an indexing logic processor connected to the master controller, wherein the indexing logic processor is configured to search and index the tagged scan results stored in the user database.","According to , a security management system  may be connected to a user site  through a remote communications network or \u201ccloud\u201d . The security management system  may comprise one or more scanners  and may be located at the user site  or exterior to the user site, also connected to the customer site and\/or other security management system element through the internet. The scanners  may be connected through the remote communications network  to a job management server  located off-site from the user site . The job management server  may be configured to coordinate communications with the scanners .","The scanners  themselves may initiate connections with the job management server  to conduct scans of one or more user assets , such as desktop computers, laptops, workstations, tablets, phones, etc. The connections may also be initiated at the instruction of the job management server . The scans may be stored in a raw format in a job management database  connected to the job management server . The scans may then be used to create a summary of all of the assets  that exist at the user site . The security management system  may also use the scans to create a computer-generated report as further described in .","Server logic, which is stored on a computer readable medium or memory  of the job management sever  that when read may cause the job management server to execute instructions that may be responsible for coordinating the communication of information between various components in the security management system . A scan logic processor  may be connected to the job management server , and re-tags the scan results individually by accessing the results of the scanning and may receive communication from the job management server . The job management server  may be configured to realize when it has received updated scan results. The scan logic processor  further normalizes the scan results in accordance with instructions stored on computer-readable medium, and the scan logic processor  may store those scan results in a user database .","During execution of the above-described \u201cNormalize Scan Results\u201d process in the scan logic processor , as discussed in more detail in , the information about which parameters were previously used in executing the scan job through the job management server  may be used by the scan logic processor . That information may be used to determine which aspects of the data in the user database  should be updated based on the discovered value(s) on the user assets  that were scanned by one or more of the scanners .","For example, on scans initiated with authentication properly enabled, the scans may be able to discover information about assets  that previously run, non-authenticated scans would not discover. Because of this, certain values in the user database  may be overwritten when normalizing the results of this scan, due to the \u201cmore authoritative\u201d nature of the authenticated scan results. By the same token, if a non-authenticated scan is run on the same assets  after an authenticated scan, some information about the host in the user database  would not be updated, as the newer scan's information would be deemed \u201cless authoritative\u201d due to the prior authenticated scan.","The logic in the scan logic processor  determines whether to update the data on an element-by-element basis, as some elements may be better detected with authenticated scans, while others may not. In addition, many other types of scan parameters may be used to influence normalization strategy. Such other parameters include vulnerability signatures such as QIDs, TCP\/UDP port limitations, etc. Logic for determining such normalization strategies may all be contained in the scan logic processor , and that logic may be executed after a scan is completed at the user site  and is transmitted through the remote communications network .","The user database  may be accessible by the user through a web application user interface (\u201cweb app UI\u201d) , which the user may access through a user terminal  at the user site . By controlling the user terminal  and the user database , the user can configure the types of tagging used, can tag assets, can see results of the tagging, and\/or run various reports. The reporting activity is indicated on  by the connection between the web app UI  and a reporting service . The reporting service is able to access the user database  in order to access data with which to generate the various computer-generated reports mentioned.","A master controller  is used to centrally control the various elements within the system, including the scan logic processor , the user database , the web app UI , a tagging logic engine , and an indexing logic processor . The master controller  interfaces with the job management server  through the scan logic processor , normalizing job data received from an application programming interface (\u201cAPI\u201d).","The formatted scan results and scanned assets in the user database  may be available to the tagging logic engine . The tagging logic engine  may include a number of plug-ins . A plug-in may be defined as a customizable set of logic by which to evaluate a tag's applicability to a specific asset . The plug-ins  may contain various rules (depicted as Ruleto Rule) that may be used to apply tags to the asset records  stored in the user database . The asset records  may have multiple tags and the tags themselves may have associated rules so that a tag definition itself may be used to decide whether the tag should be applied to an asset . Different tags may use the same kind of rule, and the logic associated with rules may be defined and loaded in the plug-ins .","Tags for operating systems of he various assets may use the same \u201coperating system string matches pattern\u201d rule so they may all use the same plug-in . There may be several \u201coperating system\u201d tags that use one rule with a variable applied in a certain way to apply the tags to the various assets . The plug-ins  provide an open system that can accept new rule definitions as the security management system  evolves. For example, in an embodiment, if a user wants to tag an asset  based on its IP address, a new IP address plug-in  could be added, which could then be used to tag assets based on their IP address and physical location.","The tagging logic engine  and the indexing logic processor  in connection with a computer-readable medium or memory  of the master controller  use dynamic tagging to allow the security management system  to scan and tag quickly and efficiently. The master controller  may be a pipeline for different events, so as a scan is being normalized, the scan logic processor  may begin triggering events for the tagging logic engine  to re-evaluate tagging, and in turn, signal events for indexing. In addition, as a result of what is going on in the user database  via other processes, tags may be added to the assets  that affect what is visible and what is not visible in the web app UI . The tagging logic engine  can be used to determine the scope for reporting scans from the scan logic processor  and used to determine the scope for future scans by the scanners  via the job management server .","The set of assets  to be scanned in a subsequent scan may be determined by the user based on a user-defined tag. For example, the user may want to scan all assets that were previously tagged with the \u201cWindows\u201d tag. The \u201cWindows\u201d tag may then be used to look up which assets  in the user database  have a matching tag of \u201cWindows\u201d and send those \u201cWindows\u201d-tagged assets  to the job management server  to be the targets for the scanners  for subsequent scans.","Hierarchically organizing the tags means enabling an approach by which if a user would like to report against all Windows servers, the tag \u201cWindows\u201d may be expanded down to all the tags that may be underneath it. For example, if there are many child tags of the \u201cWindows\u201d tag, the user may get all assets with the tag \u201cWindows\u201d or its children by performing a query against the user database , which may return a large set of assets  that can be hierarchically grouped. These assets  may be grouped because the user may chose the single tag \u201cWindows,\u201d which may then be expanded to each of the child tags and then expanded to all the assets  that have any of those child tags. These tagged assets  may then be used as the scope for the report or the scope for the scan job.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 2","FIG. 3"],"b":["200","202","116","120","204","116","206","150","150","180","190","198","208","118","118","180","180","118","190"]},"Referring now to , a flowchart  depicting a process of tagging assets is shown, in accordance with one embodiment of the present disclosure. The tagging process was described in some detail in  in connection with the tagging logic engine . The tagging logic engine  may receive data linked to the asset(s) , as described in  and shown by the label \u201cA.\u201d","Still referring to , at action , after data is linked to the asset  and received at label \u201cA,\u201d an \u201casset modified\u201d message may be sent by the master controller  and received by the tagging logic engine . At action , once the data has been successfully stored in the user database , the \u201casset modified\u201d message is received and processed. At action  a signal event may be sent to the tagging logic engine . The tagging logic engine  then locates the new information and invokes plug-in rules  upon that information from the user database . At action  the tagging logic engine  may communicate directly with the user database  and the resulting set of tags on the assets  may be stored in the user database . The stored tags may then be sent to the indexing logic processor , as described in more detail in .","Referring now to , a flowchart  depicting a process of indexing assets is shown, in accordance with one embodiment of the present disclosure. The indexing process was described in some detail in  in connection with the indexing logic processor . In this embodiment, the indexing logic processor  receives data from the user database  via the master controller , as shown in  and depicted by the labeled inputs \u201cB\u201d and \u201cC.\u201d","Still referring to , at action , the indexing logic processor  may receive the asset modified message from  from the master controller , as depicted by the labeled inputs \u201cB\u201d and \u201cC.\u201d At action , the indexing logic processor  may receive the asset tags data from  from the master controller . At action , the indexing logic processor  stores the asset modified message and the asset tags with references, which may later be searched by the indexing logic processor . When the embedded data store of the indexing logic processor  is later searched, it is operable to return according to specified criteria. The indexing logic processor  may be invoked twice because the same asset modification message may be generated again when the tags are stored or changed.","Referring now to , an exemplary tag-to-asset relationship structure  is shown. In the illustrated tag-to-asset relationship structure , a tag table  may comprise ID, parent, and name fields. The illustrated asset table  comprises ID and name fields, and as indicate, it contains other types of information. As shown at , the asset ID may link to ASSETID and the tag ID may link to TAGID. The parent field may link to the ID field for tag , creating a self-referencing tag table. Assets may have multiple tags and tags may have multiple assets, so this relationship may create a self-referencing tree out of the assets, as shown in a tree .","In the illustrated tree , every tag has an ID. For example, referring to the tree , there can be tags for Windows (\u201cID1\u201d), Windows 2000 (\u201cID2\u201d), Windows 2008 (\u201cID3\u201d), service pack 7 (\u201cID4\u201d), service pack 5 (\u201cID5\u201d), service pack 1 (\u201cID6\u201d), and service pack 4 (\u201cID7\u201d). In this instance, ID1 Windows is the root of the tree. ID2 Windows 2000's parent is ID1 Windows, ID3 Windows2008's parent is ID1 Windows, ID4 service pack 7's parents are ID3 Windows 2008 and ID1 Windows, as shown in a flat two-dimensional table of the tree , which is well known in computer science.","The tree  can also be shown in a table , with columns representing the ID, Parent, and Name fields, for example. Looking at ID4, in this example the figures shows that its parent is ID3 and its name is \u201cservice pack 7.\u201d Further in this example, ID3's parent is ID1 and its name is \u201cWindows 2008\u201d and ID1 does not have a parent and its name is \u201cWindows.\u201d An asset can have many tags, to it can be a many-to-many asset, as shown in the illustrated tree . If a node in the tree  is chosen, it can be expanded out to all of its children to create a list  of the asset IDs, parents, and names. Then, if a second node in the tree  is chosen, it can also be expanded out to all of its children to create a second list , and the two lists  may be compared to search for intersections. Intersections between assets may allow a user to advantageously use the tree  over and over to narrow down the set of assets to be compared, resulting in computational efficiencies within the security management system .","Referring now to , a tag-to-asset relationship  is shown in accordance with an embodiment of the present disclosure. In the tag-to-asset relationship , tags , , and  are shown, along with assets , , and . In a user interface corresponding to this structure, the tag-to-asset relationship may be shown by a dotted tag , where tag  may be moved to asset  either by a drag-and-drop method, a check-a-box-with-a-button method, or any other user interface (\u201cUI\u201d) implementation. Likewise, in the present embodiment, the asset-to-tag relationship is shown by a dotted asset , where asset  is moved to tag  either by a drag-and-drop method, a check-a-box-with-a-button method, or any other UI implementation.","Referring now to , a tag tree organization  is shown in accordance with an embodiment of the present disclosure. In the illustrated tag tree organization , tag  is a parent tag with child tags , . Tag  may have child tags , . Tag  may have a child tag , and tag  and its child  may be moved to be a child and grand-child of tag  by dragging-and-dropping tag  onto tag , as shown by dotted tag . The hierarchical natures by which a user can organize the tags creates a one-parent, many-child relationship. The tag history may be made available so that a specific tag may be assigned to certain assets or may be altered by a user. In addition, more details about the tag, such as its name, type, the logic rule used to assign it, the parameters for that logic rule, among others, may be available through many different UI interactive models, such as a context-menu, a dialog, or a hover.","Referring now to , a screen shot  of a tag's history is shown, in accordance with an embodiment of the present disclosure. In the illustrated screen shot , one or more tags are shown in a left-hand column, and when a particular tag is selected its tag history may be detailed in a right-hand column. The tag history may be made available so that when a tag is assigned to a specific asset or tag, there may be a global audit log of that tag's specific history. In the screen shot  shown, when \u201cTag \u201d is selected, the right-hand column shows that \u201cSean\u201d added the tag on date \u201cxx\/xx\u201d and then the system assigned the tag by a rule on date \u201cxx\/xx.\u201d","Referring now to , a screen shot  of scan-to-tag results is shown in accordance with an embodiment of the present disclosure. The illustrated screen shot  shows one or more scans in a left-hand column, and when a particular scan is selected the user can learn what actions occurred as a result of the information gathered from that particular scan in a right-hand column. A scan may then be traced to determine if it was run against a series of devices so that the results of the scan can be tracked to the tags' asset organization. In the screen shot shown, when \u201cScan \u201d is selected, the right-hand column shows that tag \u201cXYZ\u201d was added to the asset \u201cServer.\u201d","Referring now to , a screen shot  of tag-to-asset and scan-by-tag is shown in accordance with an embodiment of the present disclosure. The illustrated screen shot  shows one or more specific search filters in a left-hand column that may be used to target scans or report bulk actions resulting in a list of assets in a right-hand column. By organizing assets, a user may be able to create reports on the assets, see intersections between tags, or target scans by tags. The results of a scan may populate data by asset, and that data may then be used to assign tags based on certain rules. In the illustrated screen shot shown, specific filters such as a text search box field, a \u201cLast Scanned\u201d with a date range filed, or a \u201cTags\u201d search box may be used to return specific assets, each with a name and type of asset (NAME and TYPE, etc.), among many other features, listed. This result may then be used as targeting for a subsequent scan, report, or any kind of bulk action. Filters may be used to find multiple assets and to report on them and scan them on certain days. The results may change as tagging is dynamic, and as a result, the list of assets returned by the query may change on that certain day each week.","Advantageously, this may limit the starting point of each subsequent scan on that certain day of the week so that the entire set of assets may not have to be scanned each week. For example, many companies require employees to manage the lists of assets scanned each Monday. The tags may dynamically keep track of all of the information about the assets, and then the tags may be used as search criteria so that the scan target may only have to scan each asset with a certain tag, even if the IP address of the tag may later change.","Referring now to , a screen shot  of rule engine auditing and rule setup is shown in accordance with an embodiment of the present disclosure. In the security management system , a user may apply tags to assets or the system may apply tags to assets. When the user applies a tag to an asset, the tagging logic engine  will not remove it. However, when the user removes a tag to an asset that the tagging logic engine  applied, a ban may optionally be created, preventing the tagging logic engine  from adding that tag back to the assets  in the future. The tagging logic engine  may log the time each time the user bans a tag that the tagging logic engine  wants to apply. These logs may be stored in the user database  and are available through the web app UI . A user may care about two functionalities: first, given a rule, what is the rule doing; and second, if a new rule is composed and enacted, where does the rule apply. The interface is shown in the screen shot .","In the illustrated screen shot , a left-hand column lists tags while a right-hand column lists rules and a history of actions. For example, when \u201cTag \u201d is selected, the rule may state \u201cApply to assets when the OS contains \u2018Windows.\u2019\u201d The history of the actions may show that this rule was applied to asset , asset  and so on, but was skipped on asset \u201cn\u201d because it was banned by the user. The user may have the option of editing the rule for \u201cTag \u201d when it is selected. The tag asset rule may be edited by double-clicking on the asset, and the audit tag history may be viewed by a single left click or right click on the asset.","Each rule may have a dedicated interface to edit it with. Simple rules may include whether an asset is running the Windows OS. Other rules may be more complex and may include yes\/no settings, drop down settings, or text fields. Each tag rule may have a different screen in the web app UI , and how the user chooses to configure the settings in that screen may determine how the tag functions in their particular environment. A user may create a tag rule that is based on the vulnerability tag engine. The same tag rule may be used by two different users with slightly different configurations, and therefore, may appear as different assets in each case.","Referring now to , a screen shot  of asset details and attributes is shown in accordance with an embodiment of the present disclosure. When an asset is opened, the illustrated screen shot  shows at a high level a name value pair list that may include the asset's name, OS, last scan, tags, software, among other attributes, allowing the user to access all information for a specific asset in the user database . In the example in screen shot , the asset is \u201cAsset \u201d and the user may select the Name, OS, Last Scan, Tags, Software, etc for \u201cAsset .\u201d When \u201cOS\u201d is selected for \u201cAsset ,\u201d it shows that the OS is Windows 2000 Service Pack 3. If the user selects tags, the user will then see all of the tags associated with asset .","Referring now to , a flowchart for the process of asset discovery  is shown in accordance with an embodiment of the present disclosure. Often, a user will know that they have a particular device in a certain location, but will not realize which assets they might have at the current time. Because tags are the basis for organization, some tags may be associated with a range of network addresses. The illustrated process  may allow the scanner  to go into a discovery mode where it can scan for tag windows that relate to the network range. In response, the user may want to instruct the scanner  to find all of the devices that it can, but in order to do this, the management security system  may need to create an instruction that can be passed down hierarchally that gives the scanner  certain instructions.","In the illustrated process , at action  the management security system  tells the scanner  the known range of IP addresses at a particular location and instructs the scanner  to find those addresses. In the example shown, the scanner  may search for IP network ranges comprising \u201c*.qualys.com 10.10.3.0\/16 ipv6-disco.\u201d This action may occur at the web app UI . At action , instructions are sent to the scanner . This action may occur at the management security system  level. At action , the scanner  may return the discovered assets  and basic information to be normalized by the scan logic processor .","For example, if a user does not realize which assets they may have, but know they have a scanner  in a particular office in Redwood City, Calif., the user may instruct the scanner  to find every asset  that it can. The security management system  may then create an instruction in the job management server  via the web app UI  to tell the scanner  the known range of IP addresses in the Redwood City office and to find assets  within that IP range.","Discovery scans may be conducted at a regular basis to discover which assets  are located in the network based on IP ranges. The scanners  may be configured to scan all of the networks within a certain IP range on a given day each week, for example every Monday. These discovery scans may collect enough information to put the asset  in the user database  and assign it a few simple tags. The discovery scans may be running in the background scanning the user's IP space. The scans that may be conducting vulnerability testing and other more complex, time-consuming scans may be targeted at specific tags. The scanner  may then be instructed to look at a specific list of assets  that have been queried in the user database  for a particular tag, creating a more targeted, specific scan, which results in a more efficient scan.","Referring now back to , one of the advantages of the security management system  is that given the very hard network boundary between the user site  and the a security management system , the scanner infrastructure  may be able to collect the data that is required for the scanning and tagging processes. Because the information that needs to be evaluated for which tag should be applied rests inside the asset  on the user site , it may only be accessible by the scanner . Accordingly, the first step in the described embodiments is to get that information from the scanners  to the security management system  so that it can be processed by the job management server . Once the data is scanned, it may be tagged and organized so that it can become searchable. The scan logic processor  normalizes the results from job management server  so that the tagging logic engine  may interpret the data.","The interpretation phase may take this data that may consist of many named value pairs, lists of values, list of numbers, and interpret that data using plug-in rules  to determine which tags should be applied to the assets for organizational purposes. Once the interpretation phase is complete, the next step may involve indexing by the indexing logic processor . The indexing logic processor  may provide a fast and efficient method for searching tags. The indexing logic processor  can quickly identify all of the assets that have a particular tag, have more than one particular tags, or have a particular tags plus additional information that was not interpreted into a tag. For example, if the user wants to search for the \u201cWindows\u201d tag, a \u201cHuman Resources\u201d tag, and a name which must contain the string \u201cS,\u201d then there are three different evaluations, all of which may be combined by the indexing logic processor  to return a set of asset IDs which may then be used to either generate a report or start an additional scan.","While all of the information may be scanned, it is possible that some of the data collected by the scanners  from the assets  and stored by job management server  in the job management database  may be unimportant to the tagging logic engine  because it is information that the user does not care to use it in a particular instance. For example, the data may contain a certain set of registry keys that are irrelevant to the minimum password length required for a user to log into the asset  on the user site  and there may not be any tag rules that concern this particular value. And so while the data may be stored both in the job management database  in its un-normalized form and in the user database  in its normalized form, in a particular embodiment this information may not be interpreted by the tagging engine  because no rules would be developed for those particular data points. However, the user could always create a new rule if s\/he wanted, and that rule could be evaluated after the initial scan time without additional scans. Any data that is stored may be readily available to the tagging logic engine  without requiring additional scans, improving the efficiency of the security management system .","In a second embodiment, a method is provided for tagging and assignment of access levels whereby system resources, users, and applications all have tags and those tags all have the same structure. Because a given user may have any number of associated assets in a system, and because of how the user interacts at their user terminal  with the web app UI  and the remote communications network , access controls may be built into the system . The primary scope of the control may relate to access to the assets  themselves. More simply, one user may be responsible for a certain set of assets at the user site , while another user may be responsible for a different set of assets at the same user site . Identifying the direct user-to-asset relationship may be extremely time consuming if you were to have to relate the user directly to all of their associated scanned assets. A level of aggregation may be required and that aggregation ideally would be dynamic because this set of assets  may actually be a very dynamic environment. For example, as servers are provisioned, decommissioned, turned on or off, or perhaps re-commissioned in other roles in an organization, the asset  may need to be accessible and managed by several users in the application.","In order to make management somewhat automatic, the security management system  can use the tags assigned by the tagging logic engine  to provide a level of aggregation. The tagging logic engine's  job may be to look in and evaluate visible rules in order to apply and\/or remove tags on assets  as they are scanned. The tagging logic engine  may stay busy on a regular basis keeping these tags up-to-date.","For example, an Administrator User may use the security management system  to make User  responsible for all Windows servers by creating a relationship between User  and the tag \u201cWindows,\u201d and the tagging logic engine  may keep the tag \u201cWindows\u201d on the correct assets  on a regular basis. As new Windows servers appear and old servers disappear, the tagging logic engine  may keep the tag \u201cWindows\u201d on the correct assets . The security management system  may not need to understand anything about what it means to have access to the \u201cWindows\u201d tag\u2014the security management system  may know that anything tagged with \u201cWindows\u201d may be accessible by User . This can be accomplished with the same intersecting powers as the reports and job targeting so that, for example, User  may only have access to assets tagged with \u201cWindows\u201d and \u201cHuman Resources,\u201d which may reduce the scope of the assets that User  can modify and disconnects the requirement for the \u201cWindows\u201d tag and \u201cHuman Resources\u201d tag to be managed together on a regular basis.","For example, the \u201cWindows\u201d tag may be easily applied to servers based on the operating system discovered on the server by the scanner . On a regular basis, and without user or administrator involvement, the \u201cHuman Resources\u201d tag in this example could be applied to assets based on their IP addresses, which may be discovered by the scanner  and passed through the security management system  and finally normalized by the scan logic processor  and stored in the user database . The data may then be interpreted by tagging logic engine  and the user may then specify that all assets in a certain sub-net must be tagged with the tag \u201cHuman Resources\u201d tag. When tags are automatically applied to the assets  via the tagging logic engine , it may be more predictable, reliable and less susceptible to human error because instead of allowing an administrator or a user to assign these tags, tags may be applied based on the stored rules.","The hierarchy of the tags may make it such that the scope of a user's permissions are hierarchical as well, because giving the user the scope of the \u201cWindows\u201d tag may give the user access to all Windows servers. Should the \u201cWindows\u201d tag have child tags, it would give the user access to any asset tagged with those child tags. The hierarchy, which is not necessarily always evaluated but simply exists as a data structure, can be quickly queried to determine what assets  may be in the scope of the \u201cWindows\u201d tag's sub-tree. By creating hierarchy, it may become easier to administrate tags that map to a business and its organization. As a result, there may be hundreds of tags that are all \u201csiblings\u201d for the various versions and types of computer operating systems (i.e., Window 95, Windows 98, Windows 2000, etc.) and these separate tags may all be combined under one tag called \u201cWindows.\u201d The user may be granted access to all of these \u201cWindows versions\u201d tags by creating only one relationship. Throughout this process, scanners  may be discovering and searching assets  for pieces of information and applying the specific \u201cWindows versions\u201d tags to the Assets.","Assets themselves are not the only things that can be tagged in the presently described embodiment. As the security management system  can be very large, there may be lots of pieces of information within it. Some examples include: vulnerability ID search lists, option profiles, credential lists, etc., which may all require a human to tag them. Using the tag relationships, the security management system  may operate under some specific rules wherein the user is granted access to a tag and the tag is related the secured object. The relationship of a user to a set of tags implies that all data objects in the security management system  that have tags which are either in the user's set of tags, or are children of a tag in the user's set of tags, are thusly within the user's \u201cscope\u201d of accessible objects.","The users coming in through user terminal , whether at the user site  or elsewhere, may use the web app UI  to affect the tags stored in the user database . This happens asynchronously from the evaluation of the tag logic to apply or remove tags to objects as scans or other system data is being modified. The web app UI  may also allow the user to control the rules that the tagging logic engine  is following so that the appropriately permissioned user can come in through the user terminal  using web app UI  and modify the rules stored in user database  that the tagging logic engine  is reading and using to apply the tags.","The logic framework for the rules of the plug-ins  may be written in code by programmers. The variables that the plug-in  reads, for example, the operating system regular expression, may specify that the operating system must match the given expression and that expression may be given by the user as a variable to the rule. That variable may be stored in the user database  related to that particular user so that when the user creates a particular plug-in rule , the user may fill in details controlling the evaluation of the rule. The user may be allowed to fill in one or more key values that complete a rule. In simpler terms, the logic may be written by programmers, while the user fills in a few words to create the functional plug-in rule .","In a third embodiment, a method is disclosed herein for auditing and then assigning, monitoring, reporting on, or fixing specific machine vulnerabilities based on operating system tags. Part of the data in the user database  that was fetched by the scanner  and transferred to job management server  may be the state of the vulnerabilities of the assets  in the user site . This may allow the security management system  to know if there is a particular vulnerability on each and every asset  that can then be used to tag and create a score that may be reported against. For example, the user may request that the system \u201clocate all of the assets that are tagged with \u2018Windows\u2019 that also contain a particular vulnerability detection.\u201d A detected vulnerability, for example, may be a buffer overflow attack which we identify uniquely with a \u201cQID.\u201d The first thing that the security management system  may do is to take the tag and query for the assets  that are tagged with that particular tag ID and compare that list against the user database  to find all of the assets that also contain that particular vulnerability. Then, the tag and the vulnerability may create an intersection that can be returned to the user as a list of found assets.","All of the vulnerabilities that can be detected may have an ID. A particular vulnerability detection on a specific host may consist of many different pieces of information about the asset . Once the security management system  processes and stores these particular pieces of information, it can determine whether the asset is vulnerable (or potentially vulnerable) to an attack. If so, that vulnerability may be assigned an ID. A library of these possible vulnerabilities may be maintained, which may contain entries such as \u201cBuffer overflow attack against windows file sharing service.\u201d The scanner  may be able to detect these IDs to determine the vulnerability state for particular assets . Among the many data points and elements that the scanner  sends back as a result of a scan, it may send a list of vulnerabilities detected. In certain instances, a user may choose to tag assets based on whether the asset  has, or does not have, a detected vulnerability with a specific ID.","This embodiment may create an intersection between the ID information that is already gathered and stored and the tagging information which is new information that gathered by the tagging logic engine . Instead of using the tags as an additional filtering parameter, they may be used as a grouping parameter, providing a quick count of assets in particular groups and also exhibiting certain attributes or vulnerabilities.","For example, assume that a user has a very keen interest in attaching an ID on all of their credit card processing machines or any machine involved in credit card processing. This user has created a series of plug-in rules  in the tagging logic engine  that may uniquely identify all of the assets  at the user site  that are involved in credit card processing. So the plug-in rule  being evaluated by the tagging logic engine  may visibly attach a tag called \u201ccredit card processing\u201d on several assets . The user may also want to know which, if any, of all their credit card processing assets includes routers and servers and different operating systems that may have a particular set of IDs. This set of information was not previously available until the tagging logic engine  was introduced because predecessors could not easily and uniquely identify the credit card processing assets  from any of the other assets .","In a fourth embodiment, a method is disclosed herein for applying the tagging logic engine  to automatically assign tags. The tagging logic engine  may contain a series of plug-in rules  that are designed to be an ever increasing set containing two aspects: one is the basic logic that they follow, and two is the variables that are set by the user. This series of plug-in rules  may be written by programmers and contain a particular sentence or logic structure. For example, the user can say, \u201cname contains [x]\u201d or it could be a very complex something like, \u201cpast vulnerabilities contain vulnerabilities of [variable 1, 2, 3, 4, 5] and assets scanned within [date range].\u201d The sentence structure and available variables may be set by the programmer creating the plug-in , while the values of the variables may be modifiable by the end-user.","Once the programmers have written several rules that they think will be useful to end users, the user may then be free to take those rules and fill in the variables and use them to apply tags automatically. Several of these rules may have been pre-populated for the users. For example, operating system rules may come pre-populated. But in other cases, the tagging logic engine  and plug-in rules  may be available for the user to use. For example, the user may say, \u201cI would like to make a new tag based on an IP address rule, and I want to assign the tag \u2018HR asset\u2019 to anything in the 10.10.10\/255 network.\u201d The programmers may have written a rule that lets the user do the network check against an IP address so that the user only has to fill in the IP address of \u201c10.10.10\/255.\u201d The tagging logic engine  may be evaluating IP addresses and applying the \u2018FIR asset\u2019 tag to the assets automatically all the time in the background.","For things that cannot be easily determined programmatically by the computers, a user may assign tags to assets manually. For example, a particular asset  that recently had a hard drive replacement or recent hardware change is something that a human would tag because it may be difficult to write a tagging rule  to determine those events. There may be several use cases for the idea that IT administrators should tag assets that they are working on so those assets can be more closely scrutinized over the next couple of months to assure that the changes made to those assets did not incur additional vulnerabilities. This may be a case where an IT administrator would their user terminal  and web app UI  to manually tag \u201crecently modified\u201d to the assets that they worked on that week. The scans that may already be run on a regular weekly basis can be targeted as \u201call tags recently modified\u201d so that those assets can be more closely scrutinized at a later time.","In a fifth embodiment, a method is disclosed herein for the meshing and merging of tag hierarchies applied to report generation. As discussed earlier, the data structure behind the tags may be hierarchical such that one tag has a parent and a parent tag can have multiple children. This is single parent hierarchy, creating basically a tree. Because of this tree hierarchy and the idea that users are allowed to map intersections, there also needs to be a tree hierarchical intersection. For example, if the user would like to run a report on all assets tagged with both \u201cWindows\u201d and \u201cHR,\u201d this would require a tree intersection because when evaluating several child tags and an entire hierarchy below them, there could be a lot of different tags underneath the \u201cHR\u201d tag. By being hierarchical, the security management system  may give the user the ability to create the situation where the security management system  may map an intersection between the two tags in order to accurately determine what assets would be in scope if you chose to run a report against the \u201cWindows\u201d tag plus the \u201cHR\u201d tag. This may be done by saying, \u201cfirst expand all the \u2018Windows\u2019 children, then expand all the \u2018HR\u2019 children.\u201d Given these two sets of tags, with the user wanting to find all assets that contain at least one tag from set A and at least one tag from set B, an intersection can be computed. Once the system evaluates and locates the assets tagged with these tags, it may enable reports to be made against small subsets of the enterprise's assets .","Some pre-computed intersections may be stored for the purpose of applying security in a timely fashion. For example, in the case of the security aspect, if one user comes into user terminal  to use the web app UI , the web app UI  may need to be very responsive. As a result, in cases where assets have to be listed out or shown, the query may need to respond in a very short amount of time. Evaluating this tree intersection is something that may be computationally intensive, so the security management system  may pre-compute these intersections so they may be quickly accessed at a later time. One of the pre-computed intersections may be related to security, if, for example, an administrator had previously configured a particular user to be allowed access to all assets tagged with both \u2018Windows\u2019 and \u2018HR\u2019 tags. That intersection may be pre-computed so that the security subsystem may compute and store this set of values on a regular basis. When the user accesses the web app UI , a pre-computed intersection of all of the assets IDs that the user could have access to already exists in the user database  and may be easily accessible. This may create yet another set of tables that may be updated by triggers within the user database  that may be watching for changes to the tag relationships in order to modify the pre-computed intersections as quickly as possible.","This may be basically the same premise as in the third discussed embodiment, discussed above, where a user may use all of the tag aggregations to target a scan for particular vulnerabilities. For example, in the \u201crecently scanned machines\u201d example that was discussed above, the user may want to use all the output of the tagging logic engine  that is stored in the user database  to create a list of targets to send to the job management server  to scan, because when the scanners  are scanning the assets  in the user site , they may be given a list of targets to scan. The scanners  may not have to target every asset  that they encounter, which may allow the security management system  to create a target list based on the scan output from a previous scan that was interpreted by the tagging logic engine . On the other hand, if the targets were not previously interpreted by the tagging logic engine , there may not be an option to limit the scan targets by tags, and the scanners  may have to target every asset . Once a scan is completed and some information is discovered about the assets , that information may be used to then determine what to scan in the future, and this process may keep repeating itself.","In a sixth embodiment, a method is disclosed herein for coalescing technical and nontechnical assets  into a single hierarchy. In this embodiment, users and departments may be manually configured in the user database  so that intersections can be run between those allowing for reports based on particular users and departments. Particular users may have security access based on the idea that all of the tags may have the same hierarchical structure for both technical and nontechnical assets  that are stored in the table along with all the other technical assets . So in the user database  there may be one table that is called \u201cAssets\u201d and this table may contain both technical and nontechnical assets  so that a department may be a row just like a server may be a row. This means that the nontechnical assets may get all of the same tagging powers and abilities as the technical assets. While it is probably not relevant to say that a department has an IP address, it is relevant to say a department has an attribute like what city is it in. Because of this, a user may create a tag rule that says if the attribute \u201ccity\u201d contains the string \u201cDenver,\u201d then to tag this asset with \u201cColorado,\u201d for example. The same dynamic tagging powers can be used against nontechnical assets  by reading different attributes. These attributes may be set almost entirely through the user terminal  and the web app UI , as opposed to the technical assets, which get most of their attributes through data scans, through the scanners , and through the job management server  structure.","There are some attributes of an asset  that could be set manually on the nontechnical assets , whereas that same attribute could be set automatically from the information that the scanners bring back from technical assets . For example, if the tagging logic engine  is trying to tag things that are in Colorado, it can do that by IP address for the technical assets , but it can do it simply by the city name for the nontechnical assets .","An aspect of each of the embodiments discussed above is the scalability that comes from processing in parallel as opposed to processing in a serial way. This basic theory of being able to break up the functions in order to process in mass and parallel so that the asynchronicity is a part of the concept as well as the scalability in order to divide up the workload amongst different operating elements and perhaps operating on different servers. The tag evaluation engine may need to be able to work on each Asset, be it a technical asset like a machine, or a non-technical asset like a department, without knowledge of the other Assets in the system, or a limited knowledge of a small subset of the other Assets, in order to be horizontally scalable.","While various embodiments in accordance with the disclosed principles have been described above, it should be understood that they have been presented by way of example only, and are not limiting. Thus, the breadth and scope of the invention(s) should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the claims and their equivalents issuing from this disclosure. Furthermore, the above advantages and features are provided in described embodiments, but shall not limit the application of such issued claims to processes and structures accomplishing any or all of the above advantages.","For example, as referred to herein, a machine may be a virtual machine, computer, node, instance, host, or machine in a networked computing environment. Also as referred to herein, a networked computing environment is a collection of machines connected by communication channels that facilitate communications between machines and allow for machines to share resources. Also as referred to herein, a server is a machine deployed to execute a program operating as a socket listener and may include software instances.","Resources may encompass any types of resources for running instances including hardware (such as servers, clients, mainframe computers, networks, network storage, data sources, memory, central processing unit time, scientific instruments, and other computing devices), as well as software, software licenses, available network services, and other non-hardware resources, or a combination thereof.","A networked computing environment may include, but is not limited to, computing grid systems, distributed computing environments, cloud computing environment, etc. Such networked computing environments include hardware and software infrastructures configured to form a virtual organization comprised of multiple resources which may be in geographically disperse locations.","While HTTP communication protocols may be described herein, the coverage of the present application and any patents issuing there from may extend to other local-area network, wide-area network, or other network operating using other communications protocols.","Services and applications are described in this application using those alternative terms. Services can be java services or other instances of operating code. A service\/application is a program running on a machine or a cluster of machines in a networked computing environment. Services may be transportable and may be run on multiple machines and\/or migrated from one machine to another.","Various terms used herein have special meanings within the present technical field. Whether a particular term should be construed as such a \u201cterm of art,\u201d depends on the context in which that term is used. \u201cConnected to,\u201d \u201cin communication with,\u201d or other similar terms should generally be construed broadly to include situations both where communications and connections are direct between referenced elements or through one or more intermediaries between the referenced elements, including through the Internet or some other communicating network. \u201cNetwork,\u201d \u201csystem,\u201d \u201cenvironment,\u201d and other similar terms generally refer to networked computing systems that embody one or more aspects of the present disclosure. These and other terms are to be construed in light of the context in which they are used in the present disclosure and as those terms would be understood by one of ordinary skill in the art would understand those terms in the disclosed context. The above definitions are not exclusive of other meanings that might be imparted to those terms based on the disclosed context.","Words of comparison, measurement, and timing such as \u201cat the time,\u201d \u201cequivalent,\u201d \u201cduring,\u201d \u201ccomplete,\u201d and the like should be understood to mean \u201csubstantially at the time,\u201d \u201csubstantially equivalent,\u201d \u201csubstantially during,\u201d \u201csubstantially complete,\u201d etc., where \u201csubstantially\u201d means that such comparisons, measurements, and timings are practicable to accomplish the implicitly or expressly stated desired result.","Additionally, the section headings herein are provided for consistency with the suggestions under 37 C.F.R. 1.77 or otherwise to provide organizational cues. These headings shall not limit or characterize the invention(s) set out in any claims that may issue from this disclosure. Specifically and by way of example, although the headings refer to a \u201cTechnical Field,\u201d such claims should not be limited by the language chosen under this heading to describe the so-called technical field. Further, a description of a technology in the \u201cBackground\u201d is not to be construed as an admission that technology is prior art to any invention(s) in this disclosure. Neither is the \u201cSummary\u201d to be considered as a characterization of the invention(s) set forth in issued claims. Furthermore, any reference in this disclosure to \u201cinvention\u201d in the singular should not be used to argue that there is only a single point of novelty in this disclosure. Multiple inventions may be set forth according to the limitations of the multiple claims issuing from this disclosure, and such claims accordingly define the invention(s), and their equivalents, that are protected thereby. In all instances, the scope of such claims shall be considered on their own merits in light of this disclosure, but should not be constrained by the headings herein."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
