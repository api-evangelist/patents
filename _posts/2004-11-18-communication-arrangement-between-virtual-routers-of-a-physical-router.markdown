---
title: Communication arrangement between virtual routers of a physical router
abstract: A virtual router (VR) communication arrangement enables services on different VRs executing on the same physical router to communicate without utilizing or substantially consuming communication resources, such as a network protocol stack and physical interfaces, of the physical router. The services are illustratively implemented as separately-scheduled VR processes executing on the physical router. A virtual router forwarding information base (vrFIB) is provided within a client socket library of each VR process and is used to determine whether the services are on the same physical router. If so, a lightweight interconnection is created between the services and a message (“packet”) is forwarded over that interconnection to effectuate communication. If the services are not on the same physical router, the packet is sent over the network protocol stack and communication is established using the communication resources of the router.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07461154&OS=07461154&RS=07461154
owner: Cisco Technology, Inc.
number: 07461154
owner_city: San Jose
owner_country: US
publication_date: 20041118
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF AN ILLUSTRATIVE EMBODIMENT"],"p":["The invention is directed to virtual router communication and, more specifically, to communication among services and\/or processes of virtual routers executing on a physical router of a computer network.","Communication in a computer network involves the exchange of information between two or more entities interconnected by communication links and subnetworks. These entities are typically software programs executing on hardware computer platforms, such as end nodes and intermediate nodes. An intermediate node, such as a router, interconnects the communication links and subnetworks to enable transmission of information between the end nodes. The nodes typically communicate by exchanging discrete packets or messages of information according to predefined protocols. In this context, a protocol consists of a set of rules defining how the nodes interact with each other.","A router is an intelligent intermediate node that comprises hardware elements, such as route and\/or forwarding processors, memories, line cards and physical interfaces. A physical interface comprises the physical, electrical and mechanical interchange circuits, along with the software and data structures that allow the router to receive and transmit information over the network. The physical interface thus provides connectivity between users of the router and the network and, to that end, is a valuable resource to a purchaser of the router.","In addition to providing physical interfaces for a wide range of communication links and subnetworks, the router also implements network services, such as route processing, path determination and path switching functions. The route processing function allows the router to determine the type of routing needed for a packet, whereas the path switching function allows a router to accept a packet on one physical interface and forward it on a second interface. The path determination, or forwarding decision, function enables the router to select the most appropriate interface for forwarding a packet.","The router generally provides its network services through the execution of software modules, such as processes. A process is a software program that is defined by a memory address space. For example, an operating system of the router may be implemented as a single process with a large memory address space, wherein pieces of code within the process provide operating system services, such as process management. Yet, the router's network services may also be implemented as separately-scheduled processes in distinct, protected address spaces. These separate processes, each with its own process address space, execute on the router to manage resources internal to the router and, in the case of a database or routing protocol, to interact with users.","Services that are part of the same process address space communicate by accessing the same memory space. That is, information exchanged between services implemented in the same process address space is not transferred, but rather may be accessed in a common memory. However, communication among services that are implemented as separate processes is typically effected by the exchange of messages. For example, information exchanged between different addresses spaces of processes is transferred as one or messages between different memory spaces of the processes. A known message-passing mechanism provided by an operating system to transfer information between process address spaces is the Inter Process Communication (IPC) mechanism.","An application programming interface (API) is a set of software calls and routines that are made available (exported) by a process and that can be referenced by other processes. The services provided by the process are typically embodied as APIs. For example, services of a database process, such as lookup operations, queries and insertions, are provided via APIs that enable other processes to perform those operations.","Resources internal to the router may include communication resources that enable a process on one \u201cphysical\u201d router to communicate over the network with another process on a different physical router. As used herein, a physical router comprises the hardware elements and software modules described above. The communication resources include the allocation of memory and data structures, such as packets, as well as a network protocol stack and physical interfaces of each router. The network protocol stack, in turn, comprises layers of software, such as a transport layer, an internetwork layer and a media (driver) layer. The Internet protocol (IP) is an internetwork layer protocol that provides network addressing between nodes, such as routers, whereas the transport layer provides a port service that identifies each process executing on the routers and creates a connection between those processes that indicate a willingness to communicate.","Transport layer services may be embodied as a socket interface comprising a client socket library (contained within each process) and a socket server of the network protocol stack. A process accesses the network protocol stack via the socket interface by creating a process message data structure that is passed to the socket server. The process message is typically embodied as information (data) \u201cpayload\u201d appended to a transport header, the type of which depends on the transport layer protocol used by the process. Examples of conventional transport layer protocols include the Transmission Control Protocol (TCP), User Datagram Protocol (UDP) and Raw IP. The TCP transport service provides reliable delivery of a packet using a TCP transport header prepended to the packet, while the UDP service provides best efforts delivery using a UDP header. Raw IP denotes a process that does not use the transport provided by the socket interface, but directly interfaces to the IP layer of the network protocol stack.","Broadly stated, physical routers utilize communication resources, such as their network protocol stacks and physical interfaces, to enable communication among their processes by connecting those processes externally over the network. For example to establish communication with a receiving process on a destination router, a sending process executing on a source router constructs a process message using its socket library and passes it to the socket server (or transport layer) of the network protocol stack. The process message includes, inter alia, a destination network address of the destination router and a destination port number of the receiving process. The sending process passes that information as a connection request to its socket library to initialize a socket (i.e., open a virtual connection). The communication resources of the source and destination physical routers then establish communication between the processes.","To that end, the socket server also includes a library that is used to create a network layer (e.g., IP) header having, inter alia, source and destination network (IP) addresses. The socket server prepends the IP header to the transport header and passes that \u201cpacket\u201d structure to the IP layer, which constructs a media access (MAC) header. The IP layer performs a lookup operation into a global forwarding information base (FIB) to determine an outgoing physical interface of the physical router. The global FIB includes a forwarding table that contains forwarding information, such as mappings of layer  (L) network addresses to layer  (L) MAC addresses and outgoing interfaces. Upon obtaining the proper outgoing interface, the IP layer prepends the MAC header to the packet and passes it to the media layer, which sends the packet over the network to the destination router.","At the destination router, each layer of the network protocol stack receiving the packet \u201cunwinds\u201d its respective header. For example, the headers prepended to the packet are stripped off, one-by-one, as the packet propagates up the layers of the network protocol stack until it arrives at the socket server of the stack. The socket server processes the packet to determine the port number of the receiving process and passes a process message to the client socket library internal to that process. The client socket then converts the process message into information that the receiving process understands. Thus, the communication resources of the physical routers cooperate to build a complete communication path that extends from the sending process, down the network protocol stack, through the physical interface of the source router and over the computer network to the physical interface of the destination router, up the network stack and to the receiving process.","A virtual router (VR) provides all of the services and functions of a physical router via software emulation. Typically, the physical router can support one or more VRs and, as such, each VR should appear as a separate physical router in the computer network, providing its services through the execution of processes. However, a VR is not a separate physical router; it shares both hardware and software resources of the physical router. Examples of resources shared (and assigned) among the VRs include physical interfaces that allow each VR to communicate with other routers. Virtual routers and their implementations are well-known and described in a white paper titled, , IP Infusion Inc., San Jose, Calif. (2002), which paper is hereby incorporated by reference.","As noted, a sending process executing on a physical router may communicate externally over the computer network with a receiving process executing on another physical router using the communication resources of the routers. Similarly, a sending process executing on a VR of a source router may communicate externally with a receiving process executing on another VR of a destination router using the communication resources of each physical router. Moreover, processes of two separate VRs executing on the same physical router can communicate by coupling a physical wire (an external connection) to the physical interfaces assigned to each VR. Within the physical router, the communication resources described above are used to enable communication between the VR processes.","However, connecting the VR processes via an external connection is an expensive solution in that it consumes two physical interfaces of the physical router. If a physical router supports (implements) more than two VRs, additional physical interfaces may be consumed to enable communication among those VRs. Moreover, each external connection utilizes additional communication resources (memory, packets, network protocol stack) of the router. Accordingly, connectivity in a physical router configured to implement VRs is problematic; i.e., valuable communication resources (e.g., physical interfaces, etc.) may be consumed by the VRs, resulting in diminished connectivity (and saleability) of the physical router. The invention is directed to reducing the communication resources consumed by VRs implemented on a physical router to thereby increase connectivity of the router.","The present invention is directed to a virtual router (VR) communication arrangement that enables services on different VRs executing on the same physical router to communicate without utilizing or substantially consuming communication resources, such as a network protocol stack and physical interfaces, of the physical router. The services are illustratively implemented as separately-scheduled VR processes executing on the physical router. A virtual router forwarding information base (vrFIB) is provided within a client socket library of each VR process and is used to determine whether the services are on the same physical router. If so, a lightweight interconnection is created between the services and a message (\u201cpacket\u201d) is forwarded over that interconnection to effectuate communication. If the services are not on the same physical router, the packet is sent over the network protocol stack and communication is established using the communication resources of the router.","In the illustrative embodiment, the VR processes are routing protocol processes and the lightweight interconnection is preferably an Inter Process Communication (IPC) channel. Each VR has an internal logical or simulated \u201cinter-VR\u201d interface for configuring routing protocols. The vrFIB is associated with the inter-VR interface of each VR process that has indicated a willingness to communicate and, thus, contains a list of connected network addresses belonging to those willing processes. The client socket library of a VR process creates the lightweight interconnection (IPC channel) when another VR process indicates a willingness to communicate.","Operationally, two routing protocol processes P and P belonging to different virtual routers VR and VR on the same physical router may exchange information, e.g., control traffic, over the lightweight interconnection via client socket libraries of the processes. The control traffic is embodied as transport layer message (i.e., process message data structure) flow from P on VR to P on VR. To that end, P initializes a socket with the destination network address of VR and other relevant information. The client socket library of P then performs a lookup operation of the destination address in its internal vrFIB. The vrFIB is located at the socket interface level in order to avoid using a global FIB that may be located on, e.g., line cards of the physical router. If the address is found, then forwarding is performed using the lightweight interconnection, e.g., a direct IPC channel bound to the destination address. A client socket library of P thereafter receives the process message from P and delivers it to P.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["100","100","110","200","120","170","130","200"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 2","b":["200","200","210","260","250"]},"The processors  are illustratively route processors (RP) configured as active and standby RP pairs, with each processor having a dedicated memory . The memory  may comprise storage locations addressable by the processor for storing software programs and data structures associated with the invention. The processor  may comprise processing elements or logic for executing the software programs and manipulating the data structures. A router operating system , portions of which are typically resident in memory  and executed by the processor, functionally organizes the physical router by, inter alia, invoking network operations in support of software modules\/processes (described herein) executing on the processor. It will be apparent to those skilled in the art that other processor and memory means, including various computer readable media, may be used for storing and executing program instructions pertaining to the invention described herein.","In the illustrative embodiment, the line cards perform forwarding of the data traffic, while the route processors handle routing and control of the data traffic forwarding (via, e.g., control traffic). Each route processor comprises two central processing units (CPUs ) configured as a symmetric multiprocessing (SMP) pair. The CPU SMP pair is adapted to run a single copy of the router operating system  and access its memory space . Each line card  comprises a plurality of physical interfaces  coupled to a receive forwarding processor (FP Rx ) and a transmit forwarding processor (FP Tx ). Each physical interface comprises the physical, electrical and mechanical interchange circuits, along with the software and data structures that allow the router to receive and transmit information over the network. The physical interface  thus provides connectivity between users of the router and the network .","The FP Rx  renders a forwarding decision for each packet received at the router on an ingress interface of an ingress line card in order to determine where to forward the packet. To that end, the FP Rx makes use of a global forwarding information base (FIB) , described further herein. In the event that the packet is to be forwarded to one of the router's route processors, the FP Rx makes use of an internal FIB, IFIB, to determine to which route processor the packet should be forwarded. Likewise, the FP Tx  performs lookup operations (using global FIB ) on a packet transmitted from the router via one or more egress interfaces of an egress line card.","The physical router  provides network services through the execution of software modules, such as processes. In the illustrative embodiment, these services are implemented as separately-scheduled processes. These processes, each with its own process address space, execute on the router to manage resources internal to the router and, in the case of a routing protocol, to interact with users. The physical router  also supports a plurality of virtual routers (VRs), wherein each VR provides all of the services and functions of the physical router via software emulation. As such, each VR should appear as a separate physical router in the computer network , providing its services through the execution of processes. However, a VR is not a separate physical router; it shares both hardware and software resources of the physical router.","Examples of resources shared among the VRs are communication resources that enable each VR to communicate with other routers. As used herein, the communication resources include the allocation of memory and data structures, such as packets, as well as a network protocol stack and physical interfaces  of the physical router. As for the latter, each VR is assigned one or more physical interfaces. The VR is identified by a (source) network address that is defined as either the unique network address of a physical interface  assigned to the VR or an identifier (ID), such as a router ID, of the physical router . The ID is a general ID for the physical router that an interface may assume; it is customary for the ID to be used instead of an interface network address.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 3","b":["300","350","340","330","310"]},"The application layer  includes one or more separately-scheduled processes , such as routing protocol processes, executing on the router . Examples of well-known routing protocol processes include the Border Gateway Protocol (BGP) described in () 1771, by Y. Rekhter and T. Li (1995), and the Open Shortest Path First (OSPF) protocol described in 23282, by J. Moy (1998).","The Internet protocol (IP) is an internetwork layer protocol that provides network addressing between nodes, such as routers. IP is primarily a connectionless protocol that provides for internetwork routing, fragmentation and assembly of exchanged packets, and that relies on transport protocols for end-to-end reliability and other service characteristics. An example of a transport protocol is the TCP protocol, which is implemented by the transport layer  and provides connection-oriented, end-to-end reliability services to the upper layer protocols of the protocol stack. Examples of other transport protocols include the User Datagram Protocol (UDP), which provides best efforts delivery, and Raw IP. Raw IP denotes a process that does not use a transport, but directly interfaces to the internetwork layer  of the network protocol stack . A process that utilizes Raw IP must identify itself uniquely within the physical router.","Broadly stated, the transport layer  provides a port service that identifies each process executing on the routers and creates a connection between those processes that indicate a willingness to communicate. This transport layer service may be embodied as a socket interface  comprising a client socket library  (created within the process address space of process ) and a socket server  of the network protocol stack . Process  accesses the network protocol stack  via the socket interface  by creating a process message data structure (\u201cmessage\u201d) that is exchanged with the socket server . The message  is typically embodied as information (data) \u201cpayload\u201d appended to a transport header, the type of which depends on the transport layer protocol used by the process.","The client socket library  thus cooperates with the socket server  to provide the service needed for a process  to communicate over the network protocol stack . In order to use\/access the service of the socket server , application programming interfaces (APIs) are required. That is, a process  may access the socket server  via APIs complied by its client socket library . Examples of APIs (or function calls) include create_socket, and open_socket. The process issues these function calls to the client socket library, which implements those calls to effectuate communication.","Communication among services that are implemented as separately-executable processes is typically effected by the exchange of messages. A known message-passing mechanism provided by router operating system  to transfer information between processes (and process address spaces) is the Inter Process Communication (IPC) mechanism. An example of router operating system  having associated protocol services implemented as separately-scheduled processes and that may be advantageously used with the present invention is the IOS-XR operating system available from Cisco Systems, Inc. However, any operating system that uses sockets as a basis for IPC and\/or network communication, such as the UNIX operating system, may also be used with the present invention.","The router operating system  typically provides an IPC mechanism comprising APIs and messages that create a \u201cchannel\u201d between two processes of router  that indicate a willingness to communicate. In an illustrative embodiment, creation of the channel requires knowledge of a pathname of a receiving process (e.g., P) by a sending process (e.g., P); illustratively, such knowledge is obtained through system (pre-programmed) configuration. To utilize the IPC mechanism, P exports (\u201cpublishes\u201d) its pathname (e.g., \/P) in a well-known directory; P uses that pathname to communicate with P. P then invokes code to open a channel or virtual connection, i.e., initialize a \u201csocket\u201d, between P and P. In response, P returns a file descriptor (fd) to P, e.g., fd=open (\u201c\/P\u201d), which is used by P to access the socket. Once established, the socket\/virtual connection provide a message passing mechanism that utilizes APIs, such as send_message and receive_message, to send and receive information as messages exchanged among the processes.","As noted, processes of two different VRs executing on physical router  can communicate by coupling a physical wire (an external connection) to the physical interfaces  assigned to the VRs. Within the physical router, the communication resources described above are used to enable communication between the VR processes. However, connecting the VR processes via an external connection is an expensive solution in that it consumes two physical interfaces  of the router , which results in diminished connectivity of the router. The invention is directed to reducing the communication resources consumed by VRs implemented on a physical router to thereby increase connectivity of the router.","Specifically, the present invention is directed to a VR communication arrangement that enables services on different VRs executing on the same physical router to communicate without utilizing or substantially consuming communication resources, such as a network protocol stack and physical interfaces, of the physical router. The services are illustratively implemented as separately-scheduled VR processes executing on the physical router. A virtual router forwarding information base (vrFIB) is provided within a client socket library of each VR process and is used to determine whether the services are on the same physical router. If so, a lightweight interconnection is created between the services and a message (\u201cpacket\u201d) is forwarded over that interconnection to effectuate communication. If the services are not on the same physical router, the packet is sent over the network protocol stack and communication is established using the communication resources of the router.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 4","b":["1","2","1","2","200","1","2","414","412","410","402","315","402","1","2"]},"A vrFIB  is constructed in each client socket library  of each process once the inter-VR interface  is created between each VR indicating a willingness to communicate. The system administrator of the physical router  creates each inter-VR interface  so that it can be \u201cviewed\u201d on each VR. Illustratively, the inter-VR interface on one VR bears the name of the other VR willing to communicate. For example, the inter-VR interface on VR is designated \u201cinterface VR\u201d and the inter-VR interface on VR is designated \u201cinterface VR\u201d. Once the inter-VR interfaces are created, users of each VR can configure network (IP) addresses and other attributes.","A goal of the present invention is to implement modifications to the conventional IPC mechanism and client socket library in a manner that is transparent to the processes (routing protocols) and users of the router . Furthermore, by configuring the routing protocol process on each inter-VR interface , the vrFIB  can be constructed in the same way as the global FIB . Instead of containing layer  adjacency information (outgoing interface and MAC address), entries of the vrFIB  contain identification of the lightweight interconnections (IPC channels). Each lightweight interconnection may be identified by a process handle or file descriptor, wherein the file descriptor illustratively and uniquely maps to a pathname. The client socket library  of a VR process (e.g., P) creates the lightweight interconnection when another VR process (e.g., P) indicates a willingness to communicate.","A VR connection manager module  facilitates establishment of the connection between the processes executing on the VRs. To that end, the VR connection manager maintains a virtual connection database  having a one or more entries  configured to hold information exchanged among those processes. In response to the connect command, the VR connection manager  is invoked to obtain information needed to establish the connection. Illustratively, the connection manager  uses the names of the VRs (e.g., VR and VR) to obtain their IDs (e.g., VrID and VrID) from the mapping database . Upon obtaining each VrID, the VR connection manager initializes (constructs) an entry  of the database  that includes identification of the inter-VR interfaces (interface VR and interface VR) of the communicating VRs. Each entry  is indexed in the database  by the VrID.","Once the inter-VR interface is created, a user of the VR can \u201csee\u201d that interface . Accordingly, the user may issue a user interface command to configure (assign) a network (IP) address to its inter-VR interface . The VR connection manager  then inserts the assigned IP address into the appropriate database entry . According to an aspect of the invention, the contents of each entry  essentially comprise the vrFIB  that is created by the VR connection manager for each inter-VR interface  in its database . Thereafter, when processes on the VRs indicate a willingness to communicate, the VR connection manager  copies the contents of the appropriate database entries  into the respective vrFIBs  within the client socket libraries  of those processes.","According to another aspect of the invention, the simulated inter-VR interface  is used to, among other things, configure protocols. A protocol, such as a routing protocol, is typically configured on an interface, such as physical interface  of physical router , to communicate with peer protocol processes (peers) connected to that interface. To that end, the routing protocol is configured on the interface to acquire (discover) network and layer  (MAC) addresses of neighboring routers (adjacencies) connected to that interface. Examples of protocols used to acquire layer  MAC addresses and layer  network addresses are the well-known address resolution protocol (ARP) and interior gateway protocols (IGP), respectively. The network addresses acquired by the IGP \u201crouting\u201d protocols are used to construct an adjacency table, whereas the network and MAC addresses are associated with forwarding information needed to build a FIB, such as global FIB . Examples of IGP routing protocols include link-state routing protocols, such as the well-known Intermediate-System-to-Intermediate-System (IS-IS) and, illustratively, the OSPF protocols.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 5","b":["402","315","315","315","550","300","335"]},"In the illustrative embodiment, the VR processes are routing protocol processes, such as BGP and OSPF, and the lightweight interconnection is preferably an IPC channel. Notably, the present invention does not alter the way these routing protocols communicate. Rather, the invention obviates the use of communication resources, such as the socket server and other layers of the network protocol stack, when the routing protocols are on the same physical router and in a manner that is transparent to the protocol processes. To that end, the present invention modifies the conventional IPC mechanism to allow automatic (dynamic) creation of an IPC channel.","Assume that the processes P and P are peer processes of a routing protocol, such as BGP or OSPF, executing on VR and VR. The routing protocol is configured on the inter-VR interfaces , similar to the way the protocol is configured on physical interface . Note that the routing protocol is illustratively configured on all inter-VR interfaces  of the physical router . Once configured, the routing protocol can transmit routing information to, and receive routing information from, peer routing protocols on VRs that indicate a willingness to communicate. The information is then used to construct adjacency table  and vrFIB  to thereby enable the routing protocol to communicate with the peer routing protocol processes.","For example, P is configured on its inter-VR interface  and, to that end, sends and listens on that interface to acquire address information from its peer P, which has indicated a willingness to communicate. In communicating, P may take on two distinct roles\u2014sending and listening. When listening, P identifies the packets it listens for according to some well-known criteria that may include, e.g., the layer  (L) protocol (examples of which include IPv, IPv and OSI), the layer  (L) protocol (examples of which include TCP, UDP and OSPF) and the transport-layer port number, if applicable. When sending, P's packets may be described according to the same criteria, or the packets may differ in some respect. Specifically, in protocols based on the TCP transport-layer protocol, the port number of one end of the communication may be a well-known port number, but the other end of communication may use a randomly chosen port number.","Subsequent to being configured on its inter-VR interface  and when operating in its listening role, P creates a pathname so that P can attach to that pathname. To create its pathname, P identifies the criteria it uses to identify packets it wishes to receive, according to the specifics of the protocol, by calling its client socket library  with a socket API that specifies the criteria. The client socket library then uses the criteria to create a unique pathname for P. According to yet another aspect of the invention, the unique pathname comprises the concatenation of (i) an ID of the VR (VrIDx), (ii) an ID of the process (PIDx) executing on the VR, (iii) the L protocol, (iv) the L protocol and, optionally, (v) the L port number (PN) to which the process binds, e.g., \/VrID\/PID\/IPv\/OSPF. Note that the client socket library  obtains the VrIDx and PIDx values using operating system calls in a conventional manner. By creating a different pathname that is distinguishable by process ID, a different process on the same VR can send and listen for the same packets.","Upon creation, the pathname is provided by the client socket library  to the VR connection manager  for \u201cpublishing\u201d in a directory well-known to the VRs. In the illustrative embodiment, the well-known directory is the virtual connection database  and, in particular, an entry  of the database indexed by VrID. In response to receiving the pathname of a process, the VR connection manager copies the contents of the entry  into the vrFIB  in the client socket library  of that process. For example, the manager  copies the contents of the entry  (e.g., interface VR<ip address>, interface VR<ip address>) indexed by VrID (e.g., VrID) into vrFIB  of P's client socket library.","Meanwhile, P is configured to run on its inter-VR interface  and identifies the criteria it uses to communicate with P. As described above, this procedure creates a pathname (e.g., \/VrID\/PID\/IPv\/OSPF) and loads that pathname into entry  of virtual connection database  indexed by VrID. The VR connection manager then copies the contents of the entry  into the vrFIB  of P's client socket library. Furthermore, upon recognizing the P has indicated a willingness to communicate with P, the VR connection manager  provides P's unique pathname (\/VrID\/PID\/IPv\/OSPF) to P so that P can attach (connect) to that pathname.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 6","b":["1","2","1","2","600","602","1","2","508","604","1","320","1","2"]},"To implement such transport layer (e.g., including, but not limited to, TCP, UDP or Raw IP) message flow, P initializes a socket with the destination network address of VR and other relevant information (Step ). For example, P uses a socket API (e.g., open_socket) and loads the information into the message . Illustratively, the message  contains a destination network address of the destination VR (VR), a destination port number of the receiving process (P), a source network address of the source VR (VR), a source port number of the sending process (P) and any \u201cpayload\u201d data (e.g., control traffic information). In Step , P passes the message  to its client socket library .","In Step , the client socket library  performs a look up operation of VR's destination network address in its internal vrFIB . As noted, the vrFIB is internal to the client socket library and contains the network (e.g., IP) addresses of other VR processes that have indicated a willingness to communicate. If the communication resources of the physical router were to be used, the lookup operation would occur at the global FIB  to determine the outgoing physical interface  of the router . The vrFIB  is located at the socket interface  in order to avoid using the global FIB  that may be located on, e.g., line cards  of the physical router . Notably, the lookup operation occurs in the vrFIB  transparent to P and in response to initialization of the socket.","In Step , a determination is made as to whether the VR's destination address is found in the vrFIB. A determination that a destination network address is not in the vrFIB denotes that the two processes are not on the same physical router . If VR's destination address is not found in the vrFIB, the P client socket library  sends the message to the socket server  (transport layer) and onto the network protocol stack (Step ). In Step , the message is transformed into a packet and, in Step , forwarded over an outgoing physical interface  of the router using the global FIB . The sequence then ends at Step .","However, if VR's destination address is found in the vrFIB (Step ), then forwarding is performed over the lightweight interconnection via the client socket libraries of the processes, e.g., via a direct IPC channel bound to the VR destination address. Specifically, the P client socket library  sends the message over the lightweight interconnection  (e.g., an IPC channel) to the client socket library  of receiving process P (Step ). Illustratively, the client socket library  forwards the message over the lightweight interconnection by invoking the API \u201cmsg send (fd, process message data structure)\u201d. In Step , the P client socket library  delivers the message  to P. Notably, from its point of view, the P client socket library  receives the same message (process message data structure) as would be delivered from the socket server  of the network protocol stack . The procedure then ends at Step . Thus, discovery of the destination network address in the vrFIB  denotes that the two processes are on the same physical router ; accordingly, the lightweight interconnection  is used to forward the message  between the processes, thereby obviating substantial processing and consumption of communication resources on the router .","While there has been shown and described an illustrative embodiment that enables services on different VRs executing on the same physical router to communicate without utilizing or substantially consuming communication resources of the router, it is to be understood that various other adaptations and modifications may be made within the spirit and scope of the present invention. For example, in an alternate embodiment of the invention, the services described herein may be implemented within a single operating system process executing on the physical router. In this case, the lightweight interconnection  may be embodied as one or more direct function calls between the services.","The foregoing description has been directed to specific embodiments of this invention. It will be apparent, however, that other variations and modifications may be made to the described embodiments, with the attainment of some or all of their advantages. For instance, it is expressly contemplated that the teachings of this invention can be implemented as software, including a computer-readable medium having program instructions executing on a computer, hardware, firmware, or a combination thereof. In addition, it is understood that the data structures described herein can include additional information while remaining within the scope of the present invention. Accordingly this description is to be taken only by way of example and not to otherwise limit the scope of the invention. Therefore, it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The above and further advantages of invention may be better understood by referring to the following description in conjunction with the accompanying drawings in which like reference numerals indicate identical or functionally similar elements:",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
