---
title: Device environment configuration systems, device environment configuration methods, and data storage media therefor
abstract: Device environment configuration systems, methods, and data storage media are provided that are adapted to automatically replicate device environment configuration information in a developer system to one or more other client systems. The user settings in OPOS device environment configuration settings of the developer PC can be found. Control objects and service objects stored to a data storage medium can then be installed to a client PC based on these user settings, and the OPOS device environment configuration settings from the developer PC can then be added to the client PC registry. Specific information stored in the client PC registry can be obtained based on the hardware specifications, such as the devices connected to the client PC and the connection port, and terminal-specific settings can be compiled for overwriting to the OPOS device environment configuration settings. These terminal-specific settings can then be stored to the OPOS device environment configuration settings in the registry of the client PC.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07028173&OS=07028173&RS=07028173
owner: Seiko Epson Corporation
number: 07028173
owner_city: Tokyo
owner_country: JP
publication_date: 20020109
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE PREFERRED EMBODIMENTS","DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present invention relates to a device environment configuration systems and methods, and to data storage media for recording the same.","By using a standard application programming interface (API) to develop a software application providing Point-Of-Sale (POS) system functions, multifunction POS systems can be assembled without specifically considering the specific makes and models of devices that are used to configure the POS system. OPOS is an international standard defining a standardized interface for handling devices, such as printers and displays, used in POS terminals (hereinafter POS terminal systems) of a POS system. An OPOS standard object (hereinafter OPOS) uses Object Linking and Embedding (OLE) controls, which are supported by the Windows (a registered trademark of Microsoft Corp.) operating system (OS) running on the host devices of the POS system, to provide application developers with a set of API functions that make application development easier.","Information needed to use OPOS can include information about all of the devices in the POS terminal system and settings for all of the devices (hereinafter OPOS device environment configuration settings). This information is stored in a database (hereinafter the registry) of system configuration information managed by the Windows operating system (hereinafter OS). This registry is a database for centrally managing the settings related to computer operation, including all device driver settings and application settings. Information including a device identifier and various settings stored in the registry as part of the OPOS device environment configuration settings is referred to below as the \u201cdevice information\u201d or the device profile. In other words, the OPOS device environment configuration settings can include \u201cdevice information\u201d for each device in the system configuration. The OPOS device environment configuration settings can also include \u201cuser information\u201d such as the name of the folder\/directory where OPOS is stored or installed.","A typical POS system for a retail store consists of one or more POS terminal systems. To assemble a POS terminal system in a retail store, it is first necessary to develop the POS application. The POS application can be developed by installing OPOS on the host computer (hereinafter developer PC) used for POS terminal system development, inputting the OPOS device environment configuration settings required for OPOS operation, and then developing a software application on the developer PC that provides the various functions of the retail POS terminal system. Thereafter, it is necessary to duplicate the finished application, OPOS, and OPOS device environment configuration settings on the host computer (hereinafter client PC) of each POS terminal system in the retail store.","To replicate the OPOS and OPOS device environment configuration settings that are installed and stored on the developer PC on the client PCs, it has conventionally been necessary to install OPOS and input the OPOS device environment configuration settings on each of the client PCs in much the same way OPOS was installed and the settings were entered on the developer PC. In other words, the tasks which were performed on the developer PC, such as the task of installing OPOS and the task of storing OPOS device environment configuration settings in the client PC registry for the devices in the particular POS terminal system, must be repeated for each retail POS terminal system in the store's POS system. Thus, conventionally, OPOS is installed to all client PCs through the user interface, specific device information is entered using the same user interface, and the OPOS device environment configuration settings are stored to the registry based on the device information input for each individual client PC. Unfortunately, this can be a time-consuming task.","POS terminal system developers have also developed proprietary installation utilities. These proprietary installation utilities can duplicate the software applications developed on the developer PC together with the necessary OPOS and OPOS device environment configuration settings on each of the client PCs in the POS system. However, development of utility software takes time and money.","The OPOS device environment configuration settings used on the developer PC can also be duplicated on each of the client PCs using a registry editor utility provided by the operating system, such as the \u201cregedit.exe\u201d registry editor utility provided by Windows. However, such techniques can only be performed by knowledgeable users. For example, because the registry is a central database of system configuration information that is managed directly by the OS, inappropriately changing registry content could also render the OS, applications, or devices unusable and\/or interfere with normal operation. Inadvertently changing data other than the OPOS device environment configuration settings could also cause problems with the system.","An aspect of the present invention provides a device environment configuration system that comprises a device environment duplication unit adapted to automatically replicate device environment configuration information to a specific system.","Another aspect of the present invention provides a device environment configuration system comprising a device environment duplication means for automatically replicating device environment information to a specific system.","Another aspect of the present invention provides a device environment configuration method. According to this method, device environment configuration information is automatically replicated to a specific system.","Another aspect of the present invention provides a computer program product that executes a device environment configuration method. The computer program product comprises a data storage medium having computer-readable program code embodied therein. The computer program product comprises computer-readable program code that is configured to automatically replicate device environment configuration information to a specific system.","Another aspect of the present invention provides a data storage medium having computer-executable instructions for performing steps of a device environment configuration method that automatically replicates device environment configuration information to a specific system.","As used above, the device environment configuration information is specific information contained in system configuration information managed by an operating system of a host computer development system used to develop a software application program to be run on the specific system to achieve specific functions.","Another aspect of the present invention provides a device environment configuration program. The device environment configuration program configures an operating environment of a second system based on device environment configuration information recorded to a data storage medium from system configuration information managed by an operating system of a first system host computer. The device environment configuration program includes executable commands that install a device driver object to the second system host computer based on information indicating the storage location of the device driver object contained in the device environment configuration information recorded to the data storage medium, executable commands that paste the device environment configuration information recorded to the data storage medium to or as the device environment configuration information in the system configuration information managed by the second system host computer, and executable commands that update the pasted device environment configuration information to system-specific information based on information specific to the second system contained in the system configuration information managed by the operating system of the second system host computer. The device driver object may comprise a first object and a second object. The first object can provide an interface for a class of devices to an application program, and the second object can provide an interface for a particular device to the first object. The system can be a POS terminal system, the device driver object can be an OPOS object, the first object can be a control object, and the second object can be a service object.","The present invention now will be described more fully hereinafter with reference to the accompanying drawings, in which preferred embodiments of the invention are shown. This invention may, however, be embodied in many different forms and should not be construed as limited to the embodiments set forth herein. Rather, these embodiments are provided so that this disclosure will be thorough and complete, and will fully convey the scope of the invention to those skilled in the art. Like numbers refer to like elements throughout.","It will be understood that when an element is referred to as being \u201cconnected to\u201d another element, it can be directly connected to the other element or intervening elements may also be present. In contrast, when an element is referred to as being \u201cdirectly connected to\u201d another element, there are no intervening elements present. When an element is referred to as being \u201cbetween\u201d two things, it can be either partly of completely between those two things, but is not necessarily completely and continuously between those two things. The term \u201cadapted to\u201d should be construed to mean \u201ccapable of\u201d. As used herein the acronym \u201cDEC\u201d stands for \u201cdevice environment configuration\u201d.","The inventors observed that the OPOS and OPOS DEC settings that are needed to run an application developed on a developer PC can be replicated on the one or more client PCs of a POS system without using a user interface of client PCs. In particular, this can be accomplished by generating settings information from the OPOS DEC settings of the developer PC so that the same information can be duplicated in the OPOS DEC settings of the client PC, and then searching and generating settings specific to each client PC based on the system configuration information of the particular POS terminal system.","Aspects of the present invention can provide DEC systems, methods, and data storage media for recording the DEC methods, that are adapted to automatically duplicate, on a particular system, the DEC settings of the development system used to develop the application that achieves the functions of the particular system.","Aspects of the present invention can provide DEC systems, DEC methods, and data storage media recording the DEC methods, that are adapted to automatically replicate, on a particular system, the DEC settings of a development system used to develop a software application program that is run to achieve specific functions on the particular system.","A preferred implementation of a DEC system according to aspects of the present invention has a device environment duplication means adapted to automatically replicate DEC information to a specific system. This DEC information is specific information contained in system configuration information managed by the operating system of a host computer development system that is adapted to be used for developing a software application program to be run on the specific system to achieve specific functions.","The device environment duplication means can include, for example, (a) same settings generating means for generating settings identical to the device environment settings of the host computer development system based on the device environment settings of the development system recorded to the data storage medium, (b) system-specific settings generating means for generating system-specific settings that differ according to the specific system based on system configuration information managed by the host computer of the specific system, and (c) settings storage means for storing the same settings generated by the same settings generating means and the system-specific settings generated by the system-specific settings generating means in the system configuration information of the specific system as device environment settings for the specific system.","In another preferred implementation, the same settings generating means can have at least one of the following: (a) means for using DEC information of the development system recorded to the data storage medium as the same settings information without editing, and (a) means for obtaining the same settings information from the DEC information of the development system recorded to the data storage medium, except for information that changes based on the hardware specifications of the host computer of the specific system.","In another preferred implementation, the system-specific settings generating means can have an interface identification number detecting means for detecting the interface whereby a specific device in the specific system configuration is connected to said specific system and detecting the identification number of the detected interface. USB is one example of the detected interface.","In another preferred implementation, the DEC system can also have a DEC information storage means for recording and storing DEC information in the development system configuration information managed by the operating system of the development system host computer to a data storage medium.","In another preferred implementation, the DEC information storage means has a data selection means adapted to specify one or a plurality of settings in the DEC information to be recorded to the data storage medium; a device information detection means adapted to find the settings selected by the data selection means from the DEC information; and a device information recording means adapted to record the settings found by the device information detection means to the specific data storage medium.","In another preferred implementation, the settings specified by the data selection means can be all information in the DEC information, device information for one or a plurality of devices in the device environment, and\/or device information for a desired device in the device environment and device information for all devices connected to the desired device by a specific connection method.","In another preferred implementation, aspects of DEC techniques described above can also be implemented as a computer-executable program. In this case, the program can be distributed recorded to a data storage medium such as a Compact Disc, floppy disk, hard disk, magneto-optical disk, Digital Video\/Versatile Disc, magnetic tape, semiconductor memory, or other computer readable medium.","Aspects of the present invention will now be discussed below with reference to the accompanying figures. As noted above, the following embodiments are shown by way of description only and shall not limit the scope of the present invention. One of ordinary skill in the art will appreciate that various alternative embodiments can be achieved by replacing some or all of the elements described below with equivalent elements, and that all such variations are included in the scope of this invention.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 1","b":["100","100","101","102","103","104","101","100","101","110","102","103","104","110","802"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 2","b":["101","101","201","110","202","203","204","203","203","205","203","206","207","208","210"]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIGS. 3A and 3B","FIG. 3A","FIG. 3B","FIG. 3A"]},"OPOS has two layers known as the control object (CO) layer and the service object (SO) layer. Control objects are provided for each device class, such as printers and displays, and control the device-application interface. Service objects are provided for each device, such as for each printer model. The service objects control device operation by way of the OS. The OS also manages the registry, which is where the OPOS DEC settings used by OPOS are stored.","The application controls a particular device using methods and properties, and receives feedback about the result of device control from the controlled device using events and properties. OPOS converts process requests from the application to commands supported by the device. OPOS sends the commands to the addressed device, and receives the device status indicating the process result from the device.","As shown in  building a POS terminal system involves four major tasks. First is installing OPOS to the host computer used for development (step S). This host computer is referred to herein as the \u201cdeveloper PC.\u201d More specifically, control objects and service objects are installed in a desired directory, and the OPOS DEC settings can be added to the registry. The OPOS DEC settings of the developer PC can then be edited to match the devices used in the POS terminal system, and saved in the registry of the developer PC (step S). A software application that provides the desired functions of the POS terminal system can then be developed on the developer PC (step S). Next, the application environment, which includes OPOS and the OPOS DEC setting, can be replicated. The application can also be developed on the developer station on the client PCs of the plural POS terminal systems of the POS system (step S), thus completing POS terminal system configuration.","A DEC system that improves the efficiency of the task performed at step S (in the above-described POS terminal system setup procedure) is needed. The task of replicating the application developed on the developer PC to the client PC and the application environment used for application development, will now be described.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 4","FIG. 4"],"b":"401"},"The next step (S) is deciding whether the developer PC OPOS DEC settings stored to the data storage medium are to be automatically duplicated on the client PC, that is, whether the settings are to be self-installed.","If the settings are to be self-installed (S returns yes), then the OPOS DEC settings of the developer PC written to the data storage medium can be written to the OPOS DEC settings in the registry of the client PC, without using the user interface. Settings specific to the client PC to which the OPOS configuration settings are self-installed can also be set automatically without using the user interface (S).","If the configuration settings are not self-installed (S returns no), then the same operation used to set the OPOS DEC settings on the developer PC is repeated to thereby install the same configuration settings on the client PC. Alternatively, the configuration settings can be installed to the client PC using an installation utility developed by the developer that assembled the POS terminal system (S).","A DEC system that can improve the efficiency of step S and step S will now be described below. As described above, step S is a function of the developer PC whereby the OPOS DEC settings stored in the registry of the developer PC can be saved to a floppy disk or other data storage medium. Step S is a function of the client PC whereby the OPOS DEC settings of the developer PC can be automatically duplicated from the floppy disk or other data storage medium to the client PC.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 5","FIG. 6A","FIG. 5B","FIG. 5A"],"b":["500","501","502","503","504"]},"The backup data selection unit  can be used to specify what OPOS DEC settings stored in the registry  of the developer PC  are to be saved (backed up). A keyboard, mouse, or other input device (not shown in the figure) is typically used for this operation.","Based on the settings selected for backup by the backup data selection unit , the device information search unit  can find the selected settings in the OPOS DEC settings written to registry .","The device information recorder  can then compile the registry backup data to save to data storage medium  from the settings found by the device information search unit , and can write the compiled registry backup data to the data storage medium . The backup data can be compiled according to the type of data storage medium  used. For example, if floppy disks are used for the data storage medium , the data can be segmented and stored across plural media. It could also be compressed for storage.","The development controller , backup data selection unit , device information search unit , and device information recorder  can be cooperatively controlled.","As shown in , the self-install function of the client PC  can implement a local controller , same-settings generator , terminal-specific settings generator , and a device information storage unit .","The same-settings generator  can capture the OPOS DEC settings of the developer PC  saved to data storage medium  by the registry backup function, and can generate the same information to be stored as the OPOS DEC settings in the registry  of the client PC . The OPOS DEC settings of the developer PC  can be saved\/segmented to plural media or compressed. For example, the same-settings generator  can be configured to capture the same settings information according to the format in which the settings were saved.","The terminal-specific settings generator  can capture the terminal-specific information to be stored in the registry  of the client PC , and can generate the device-specific information to be stored to the OPOS DEC settings of the registry , based on the devices  connected to the client PC  or the hardware specifications of the client PC .","The device information storage unit  can then store the same settings information generated by the same-settings generator , and the terminal-specific information generated by the terminal-specific settings generator , to the OPOS DEC settings of the registry .","The same-settings generator  can delete settings that could change according to the hardware specifications of the client PC  from OPOS DEC settings of the developer PC  when generating the same-settings information. The device information storage unit  could add the terminal-specific settings generated by the terminal-specific settings generator  to the same-settings information. The resulting combined data could then be stored as the OPOS DEC settings in the registry  of that terminal.","Alternatively, the same-settings generator  can capture the same settings information without editing the OPOS DEC settings of the developer PC  so that the device information storage unit  overwrites or appends the terminal-specific data generated by the terminal-specific settings generator , according to hardware specifications of the client PC  to the same settings information, and appends to the same settings information the terminal-specific settings generated by the terminal-specific settings generator  according to the devices  connected to the client PC .","Moreover, the same-settings generator  can also search the registry  to determine if OPOS DEC settings are already stored in the registry . If they are, the same-settings generator  can compare the existing OPOS DEC settings of the client PC  with the OPOS DEC settings from the developer PC  that are saved to the data storage medium to capture, as the same settings information, only those configuration settings to be changed (overwritten) or appended to the existing settings.","The local controller , same-settings generator , terminal-specific settings generator , and device information storage unit  can also be cooperatively controlled.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 6","FIG. 10"],"b":["601","602","603"]},"If the selected information is \u201call OPOS DEC settings\u201d (S returns ALL), all OPOS DEC settings are obtained (S), and the procedure advances to step S. Step S is executed when the user selects SAVE ALL in the screen shown in .","If the selected information is \u201cdevice information selected from the OPOS DEC settings for a specific device\u201d (S returns SELECTED), the device information for the preselected device is found in the OPOS DEC settings (S), and the procedure advances to step S. Step S is executed when the user selects SELECTED in the screen shown in .","If the selected information is \u201cOPOS DEC settings for selected devices and related hydra-connected devices\u201d (S returns HYDRA), the device information for the preselected device is found in and obtained from the OPOS DEC settings (S) if the selected device is hydra connected. Based on the device information for the selected device, device information for all devices hydra connected to the selected device is similarly captured (S), and the procedure advances to step S.","A hydra connection is a method of connecting plural devices to a single port on the terminal. Hydra connections can be pass-through or Y-connections (see ). Steps S and S can be run when the user selects HYDRA in the screen shown in .","The backup settings can then be compiled from the captured OPOS DEC settings (S), and the compiled backup settings can then be written to the data storage medium (S) to complete the registry backup process.","The assignee of the present application has also developed a software utility application (described in Japanese Patent Application JP 2001-1858 and in commonly assigned, co-pending U.S. application Ser. No. (not assigned), entitled \u201cDevice environment configuration system, device environment configuration method, and data storage medium therefor\u201d) which, by displaying a device tree organized by device class or connection port based on the OPOS DEC settings stored in the registry, enables the POS system developer to visually understand how the devices in a POS terminal system are connected so that the device information can be easily edited and stored to the registry. The registry backup process described herein is an example of a function provided by the software utility application.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIG. 12A","FIG. 12B","FIG. 12A","FIG. 12B","FIG. 10","FIG. 6","FIG. 12A"],"b":["605","606","12"]},"OPOS DEC settings saved by the registry backup function of the registry editor provided by the OS can, of course, be used in the self-installation process. The registry editor can save all information in the registry  of the developer PC , including the OPOS DEC settings, to a data storage medium. In this case, the same-settings generator  can search all of the registry  data stored to the data storage medium to find the OPOS DEC settings, and then set the same settings information.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 12C","FIG. 12C"]},{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 7","b":"701"},"The control objects and service objects saved to the data storage medium can then be installed to the client PC based on the user settings found in the OPOS DEC settings (S). The OPOS DEC settings of the developer PC are then added to the client PC registry (S). The data storage medium to which the control objects and service objects are stored can be the same data storage medium to which the OPOS DEC settings are stored, or a different medium.","Terminal-specific data stored in the client PC registry can then be obtained based on the devices connected to the client PC or the hardware specifications of the client PC , and terminal-specific data for overwriting to the OPOS DEC settings can be generated (S).","The resulting terminal-specific settings can then be saved to the OPOS DEC settings in the client PC registry (S), and the self-installation process ends.",{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 8","b":["801","802","802","802","803","804","804"]},"Accordingly, control objects and service objects can be copied to the client PC based on user settings information contained in the OPOS DEC settings of the developer PC saved to a data storage medium. OPOS DEC settings from the developer PC can be written to the registry of the client PC, and PC-specific information in the OPOS DEC settings can then be overwritten according to the client PC configuration. Furthermore, this process can be completed automatically without using the user interface.","A routine that can automatically find the USB device numbers will be described next with reference to  and .  show an example of the automatic detection process for finding USB device numbers for the USB port where the printer is connected.  shows how data is communicated between the host computer (simply \u201chost\u201d below) and printer during the USB number detection process, and  is an example of a flow chart of this host-printer communications process.","Typically, a USB device number is automatically assigned when a USB device is connected to the host. As shown in , the USB number is typically linked to the unique identification number of the USB interface board (UIB) installed in the device (printer), but is not linked to the unique identification number of the printer. The USB number can therefore be used to identify which UIB is used, but cannot be used to determine to which printer the UIB is installed. In other words, when a printer is connected to the host, the host can relate the unique identification number of the UIB to the USB number, based on the communication path  indicated by the dotted line. Conversely, the host cannot relate the USB number to the unique identification number of the printer.","The unique printer identification number can, however, be obtained by sending a request command to the printer. The host can therefore send a transmission request to the printer, as indicated by transmission path , asking the printer to return the unique printer identification information. The host can then receive the printer identification information as a status report from the printer via reception path . The host is thus able to obtain identification information for a specific printer and then link this printer identification information to the USB number obtained from the UIB.","These methods can make it possible to provide a system for automatically detecting the USB number used by a particular printer (and the USB numbers used by any line display, cash drawer, MICR (magnetic ink character reader)), or other device hydra connected to the printer) selected (used) by the user. These methods can also be applied with communication protocols other than USB.","Communication between the host and printer will now be described with reference to . As shown in  (further described below), the host can first prompt the user to select the printer for which the USB number is to be detected (S). Let us assume that printer A is selected. All USB numbers associated with the USB port to which the printer is connected can then be detected (S). The host can then send a request command to each printer i connected to the USB port of every USB number that is found, thus requesting each printer i to send printer identification information back to the host (S). Note that argument i is any integer from 1 to n where n is the number of USB-connected printers.","When printer i receives the identification information request command from the host (S), it can return a status report containing the printer identification information to the host (S), and the process ends. The printer identification information in this example is the product ID identifying the particular printer and the languages supported by the printer.","Based on the product ID and supported languages information received from printer i, the host can find the selected printer A (S), can detect the USB number for the UIB connected to printer i, which is now known to be printer A (S), and the automatic USB number detection process ends. It should be noted that while the product ID and supported languages are described as the information identifying a specific printer i, any information that identifies a specific printer model or type and is unique to that model can be used.",{"@attributes":{"id":"p-0091","num":"0090"},"figref":["FIG. 11","FIG. 11","FIG. 12A","FIG. 12B","FIG. 11"]},"Notably, this USB number search can be conducted automatically without using the user interface when the automatic installation function (self-install function) is used. More specifically, the automatic USB number detection process shown in  can be conducted without going through the user interface because the client PC  can identify the printer i for which the USB number is to be detected based on the OPOS DEC settings stored to the registry  of the client PC at block S of .","If the programmable functions of this DEC system can be assigned to corresponding steps in the flow charts in , , , and , the device environment duplication step can be step S, and the step for exporting the DEC information can be step S.","The same information can be generated using steps S to S, the terminal-specific settings can be generated at step S, the settings data can be saved and\/or exported at steps S and S, and the interface identification number can be detected at step S.","Furthermore, the settings data to export can be selected at step S, the device information can be performed at steps S, S, S, and S, and the device information can be recorded at steps S and S.","Thus DEC methods that can have wide practical utility can be provided by incorporating the programmable functions of the above-described DEC system in a computer.","Aspects of the present invention can duplicate the OPOS DEC settings that run the application, which is developed on a developer PC, onto one or a plurality of client PCs that configure a POS system, without using the user interface. This can be accomplished by generation of configuration information to enable the same information set in the OPOS DEC settings of the developer PC to be set in the OPOS DEC settings of the client PCs, and then finding and generating terminal-specific settings for each client PC based on the specific configuration of the POS terminal system.","Aspects of the present invention can thus eliminate data input errors during the duplication process. The information to be duplicated can be accurately and easily duplicated by running the duplication process without going through the user interface. Furthermore, the input time of the duplication process can be reduced by not using the user interface. As a result, the time required to complete the duplication process for all client PCs in a POS system, and the cost associated with the duplication process, can be reduced. The duplication process can also be run by operators having no specific knowledge of the process.","While the present invention has been described in terms of certain preferred embodiments, those of ordinary skill in the will appreciate that certain variations, extensions and modifications may be made without varying from the basic teachings of the present invention. As such, the present invention is not limited to the specific preferred embodiments described herein. Rather, the scope of the present invention is to be determined from the claims, which follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Aspects and various advantages of the present invention are described below with reference to the various views of the drawings, which form a part of this disclosure.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 3A","FIG. 3B"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 5A","FIG. 5B"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 9A","FIG. 9B"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 12A","FIG. 12B","FIG. 12C"]}]},"DETDESC":[{},{}]}
